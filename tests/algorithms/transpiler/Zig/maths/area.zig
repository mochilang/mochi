// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.141592653589793;
const TWO_PI_var: f64 = 6.283185307179586;
var TRI_THREE_SIDES_var: f64 = 0;

fn _mod(x: f64, m: f64) f64 {
    return x - @as(f64, @floatFromInt(@as(i64, @intFromFloat(x / m)))) * m;
}

fn sin_approx(x_1: f64) f64 {
    const y: f64 = _mod(x_1 + PI_var, TWO_PI_var) - PI_var;
    const y2: f64 = y * y;
    const y3: f64 = y2 * y;
    const y5: f64 = y3 * y2;
    const y7: f64 = y5 * y2;
    return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0;
}

fn cos_approx(x_2: f64) f64 {
    const y_1: f64 = _mod(x_2 + PI_var, TWO_PI_var) - PI_var;
    const y2_1: f64 = y_1 * y_1;
    const y4: f64 = y2_1 * y2_1;
    const y6: f64 = y4 * y2_1;
    return 1.0 - y2_1 / 2.0 + y4 / 24.0 - y6 / 720.0;
}

fn tan_approx(x_3: f64) f64 {
    return sin_approx(x_3) / cos_approx(x_3);
}

fn sqrt_approx(x_4: f64) f64 {
    if (x_4 <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x_4 / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x_4 / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn surface_area_cube(side_length: f64) f64 {
    if (side_length < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: surface_area_cube() only accepts non-negative values"});
        return 0.0;
    }
    return 6.0 * side_length * side_length;
}

fn surface_area_cuboid(length: f64, breadth: f64, height: f64) f64 {
    if (length < 0.0 or breadth < 0.0 or height < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: surface_area_cuboid() only accepts non-negative values"});
        return 0.0;
    }
    return 2.0 * (length * breadth + breadth * height + length * height);
}

fn surface_area_sphere(radius: f64) f64 {
    if (radius < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: surface_area_sphere() only accepts non-negative values"});
        return 0.0;
    }
    return 4.0 * PI_var * radius * radius;
}

fn surface_area_hemisphere(radius_1: f64) f64 {
    if (radius_1 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: surface_area_hemisphere() only accepts non-negative values"});
        return 0.0;
    }
    return 3.0 * PI_var * radius_1 * radius_1;
}

fn surface_area_cone(radius_2: f64, height_1: f64) f64 {
    if (radius_2 < 0.0 or height_1 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: surface_area_cone() only accepts non-negative values"});
        return 0.0;
    }
    const slant: f64 = sqrt_approx(height_1 * height_1 + radius_2 * radius_2);
    return PI_var * radius_2 * (radius_2 + slant);
}

fn surface_area_conical_frustum(radius1: f64, radius2: f64, height_2: f64) f64 {
    if (radius1 < 0.0 or radius2 < 0.0 or height_2 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: surface_area_conical_frustum() only accepts non-negative values"});
        return 0.0;
    }
    const slant_1: f64 = sqrt_approx(height_2 * height_2 + (radius1 - radius2) * (radius1 - radius2));
    return PI_var * (slant_1 * (radius1 + radius2) + radius1 * radius1 + radius2 * radius2);
}

fn surface_area_cylinder(radius_3: f64, height_3: f64) f64 {
    if (radius_3 < 0.0 or height_3 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: surface_area_cylinder() only accepts non-negative values"});
        return 0.0;
    }
    return 2.0 * PI_var * radius_3 * (height_3 + radius_3);
}

fn surface_area_torus(torus_radius: f64, tube_radius: f64) f64 {
    if (torus_radius < 0.0 or tube_radius < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: surface_area_torus() only accepts non-negative values"});
        return 0.0;
    }
    if (torus_radius < tube_radius) {
        std.debug.print("{s}\n", .{"ValueError: surface_area_torus() does not support spindle or self intersecting tori"});
        return 0.0;
    }
    return 4.0 * PI_var * PI_var * torus_radius * tube_radius;
}

fn area_rectangle(length_1: f64, width: f64) f64 {
    if (length_1 < 0.0 or width < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: area_rectangle() only accepts non-negative values"});
        return 0.0;
    }
    return length_1 * width;
}

fn area_square(side_length_1: f64) f64 {
    if (side_length_1 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: area_square() only accepts non-negative values"});
        return 0.0;
    }
    return side_length_1 * side_length_1;
}

fn area_triangle(base: f64, height_4: f64) f64 {
    if (base < 0.0 or height_4 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: area_triangle() only accepts non-negative values"});
        return 0.0;
    }
    return base * height_4 / 2.0;
}

fn area_triangle_three_sides(side1: f64, side2: f64, side3: f64) f64 {
    if (side1 < 0.0 or side2 < 0.0 or side3 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: area_triangle_three_sides() only accepts non-negative values"});
        return 0.0;
    }
    if (side1 + side2 < side3 or side1 + side3 < side2 or side2 + side3 < side1) {
        std.debug.print("{s}\n", .{"ValueError: Given three sides do not form a triangle"});
        return 0.0;
    }
    const s: f64 = (side1 + side2 + side3) / 2.0;
    const prod: f64 = s * (s - side1) * (s - side2) * (s - side3);
    const res: f64 = sqrt_approx(prod);
    return res;
}

fn area_parallelogram(base_1: f64, height_5: f64) f64 {
    if (base_1 < 0.0 or height_5 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: area_parallelogram() only accepts non-negative values"});
        return 0.0;
    }
    return base_1 * height_5;
}

fn area_trapezium(base1: f64, base2: f64, height_6: f64) f64 {
    if (base1 < 0.0 or base2 < 0.0 or height_6 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: area_trapezium() only accepts non-negative values"});
        return 0.0;
    }
    return 0.5 * (base1 + base2) * height_6;
}

fn area_circle(radius_4: f64) f64 {
    if (radius_4 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: area_circle() only accepts non-negative values"});
        return 0.0;
    }
    return PI_var * radius_4 * radius_4;
}

fn area_ellipse(radius_x: f64, radius_y: f64) f64 {
    if (radius_x < 0.0 or radius_y < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: area_ellipse() only accepts non-negative values"});
        return 0.0;
    }
    return PI_var * radius_x * radius_y;
}

fn area_rhombus(diagonal1: f64, diagonal2: f64) f64 {
    if (diagonal1 < 0.0 or diagonal2 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: area_rhombus() only accepts non-negative values"});
        return 0.0;
    }
    return 0.5 * diagonal1 * diagonal2;
}

fn area_reg_polygon(sides: i64, length_2: f64) f64 {
    if (sides < 3) {
        std.debug.print("{s}\n", .{"ValueError: area_reg_polygon() only accepts integers greater than or equal to three as number of sides"});
        return 0.0;
    }
    if (length_2 < 0.0) {
        std.debug.print("{s}\n", .{"ValueError: area_reg_polygon() only accepts non-negative values as length of a side"});
        return 0.0;
    }
    const n: f64 = @as(f64, @floatFromInt(sides));
    return n * length_2 * length_2 / (4.0 * tan_approx(PI_var / n));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        TRI_THREE_SIDES_var = area_triangle_three_sides(5.0, 12.0, 13.0);
        std.debug.print("{s}\n", .{"[DEMO] Areas of various geometric shapes:"});
        std.debug.print("{s}\n", .{_concat_string("Rectangle: ", _str(area_rectangle(10.0, 20.0)))});
        std.debug.print("{s}\n", .{_concat_string("Square: ", _str(area_square(10.0)))});
        std.debug.print("{s}\n", .{_concat_string("Triangle: ", _str(area_triangle(10.0, 10.0)))});
        std.debug.print("{s}\n", .{_concat_string("Triangle Three Sides: ", _str(TRI_THREE_SIDES_var))});
        std.debug.print("{s}\n", .{_concat_string("Parallelogram: ", _str(area_parallelogram(10.0, 20.0)))});
        std.debug.print("{s}\n", .{_concat_string("Rhombus: ", _str(area_rhombus(10.0, 20.0)))});
        std.debug.print("{s}\n", .{_concat_string("Trapezium: ", _str(area_trapezium(10.0, 20.0, 30.0)))});
        std.debug.print("{s}\n", .{_concat_string("Circle: ", _str(area_circle(20.0)))});
        std.debug.print("{s}\n", .{_concat_string("Ellipse: ", _str(area_ellipse(10.0, 20.0)))});
        std.debug.print("{s}\n", .{""});
        std.debug.print("{s}\n", .{"Surface Areas of various geometric shapes:"});
        std.debug.print("{s}\n", .{_concat_string("Cube: ", _str(surface_area_cube(20.0)))});
        std.debug.print("{s}\n", .{_concat_string("Cuboid: ", _str(surface_area_cuboid(10.0, 20.0, 30.0)))});
        std.debug.print("{s}\n", .{_concat_string("Sphere: ", _str(surface_area_sphere(20.0)))});
        std.debug.print("{s}\n", .{_concat_string("Hemisphere: ", _str(surface_area_hemisphere(20.0)))});
        std.debug.print("{s}\n", .{_concat_string("Cone: ", _str(surface_area_cone(10.0, 20.0)))});
        std.debug.print("{s}\n", .{_concat_string("Conical Frustum: ", _str(surface_area_conical_frustum(10.0, 20.0, 30.0)))});
        std.debug.print("{s}\n", .{_concat_string("Cylinder: ", _str(surface_area_cylinder(10.0, 20.0)))});
        std.debug.print("{s}\n", .{_concat_string("Torus: ", _str(surface_area_torus(20.0, 10.0)))});
        std.debug.print("{s}\n", .{_concat_string("Equilateral Triangle: ", _str(area_reg_polygon(3, 10.0)))});
        std.debug.print("{s}\n", .{_concat_string("Square: ", _str(area_reg_polygon(4, 10.0)))});
        std.debug.print("{s}\n", .{_concat_string("Regular Pentagon: ", _str(area_reg_polygon(5, 10.0)))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
