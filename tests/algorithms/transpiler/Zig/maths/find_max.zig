// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn normalize_index(index: i64, n: i64) i64 {
    if (index < 0) {
        return n +% index;
    }
    return index;
}

fn find_max_iterative(nums: []f64) f64 {
    if (@as(i64, @intCast(nums.len)) == 0) {
        @panic("find_max_iterative() arg is an empty sequence");
    }
    var max_num: f64 = nums[_idx(nums.len, 0)];
    max_num = max_num;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(nums.len))) {
        const x: f64 = nums[_idx(nums.len, i)];
        if (x > max_num) {
            max_num = x;
        }
        i = i +% 1;
    }
    return max_num;
}

fn find_max_recursive(nums_1: []f64, left: i64, right: i64) f64 {
    const n_1: i64 = @as(i64, @intCast(nums_1.len));
    if (n_1 == 0) {
        @panic("find_max_recursive() arg is an empty sequence");
    }
    if (left >= n_1 or left < 0 -% n_1 or right >= n_1 or right < 0 -% n_1) {
        @panic("list index out of range");
    }
    const l: i64 = normalize_index(left, n_1);
    const r: i64 = normalize_index(right, n_1);
    if (l == r) {
        return nums_1[_idx(nums_1.len, l)];
    }
    const mid: i64 = @divTrunc(l +% r, 2);
    const left_max: f64 = find_max_recursive(nums_1, l, mid);
    const right_max: f64 = find_max_recursive(nums_1, mid +% 1, r);
    if (left_max >= right_max) {
        return left_max;
    }
    return right_max;
}

fn test_find_max() void {
    const arr: []f64 = @constCast(([7]f64{2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0})[0..7]);
    if (find_max_iterative(arr) != 94.0) {
        @panic("find_max_iterative failed");
    }
    if (find_max_recursive(arr, 0, @as(i64, @intCast(arr.len)) -% 1) != 94.0) {
        @panic("find_max_recursive failed");
    }
    if (find_max_recursive(arr, 0 -% @as(i64, @intCast(arr.len)), 0 -% 1) != 94.0) {
        @panic("negative index handling failed");
    }
}

fn mochi_main() void {
    test_find_max();
    const nums_2: []f64 = @constCast(([7]f64{2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0})[0..7]);
    std.debug.print("{d}\n", .{find_max_iterative(nums_2)});
    std.debug.print("{d}\n", .{find_max_recursive(nums_2, 0, @as(i64, @intCast(nums_2.len)) -% 1)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
