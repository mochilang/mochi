// Generated by Mochi Zig transpiler on 2025-08-12 07:47 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Fraction = struct {
    numerator: i64,
    denominator: i64,
};

fn pow10(n: i64) i64 {
    var result: i64 = 1;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        result = result * 10;
        i = i + 1;
    }
    return result;
}

fn gcd(a: i64, b: i64) i64 {
    var x: i64 = a;
    x = x;
    var y: i64 = b;
    y = y;
    if (x < 0) {
        x = 0 - x;
    }
    if (y < 0) {
        y = 0 - y;
    }
    while (y != 0) {
        const r: i64 = @mod(x, y);
        x = y;
        y = r;
    }
    return x;
}

fn parse_decimal(s: []const u8) Fraction {
    if (@as(i64, @intCast(s.len)) == 0) {
        @panic("invalid number");
    }
    var idx: i64 = 0;
    idx = idx;
    var sign: i64 = 1;
    sign = sign;
    const first: []const u8 = s[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(s.len)))];
    if (std.mem.eql(u8, first, "-")) {
        sign = 0 - 1;
        idx = 1;
    } else {
        if (std.mem.eql(u8, first, "+")) {
            idx = 1;
        }
    }
    var int_part: []const u8 = "";
    int_part = int_part;
    while (idx < @as(i64, @intCast(s.len))) {
        const c: []const u8 = s[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(s.len)))];
        if (std.mem.order(u8, c, "0") != .lt and std.mem.order(u8, c, "9") != .gt) {
            int_part = _concat_string(int_part, c);
            idx = idx + 1;
        } else {
            break;
        }
    }
    var frac_part: []const u8 = "";
    frac_part = frac_part;
    if (idx < @as(i64, @intCast(s.len)) and std.mem.eql(u8, s[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(s.len)))], ".")) {
        idx = idx + 1;
        while (idx < @as(i64, @intCast(s.len))) {
            const c: []const u8 = s[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(s.len)))];
            if (std.mem.order(u8, c, "0") != .lt and std.mem.order(u8, c, "9") != .gt) {
                frac_part = _concat_string(frac_part, c);
                idx = idx + 1;
            } else {
                break;
            }
        }
    }
    var exp: i64 = 0;
    exp = exp;
    if (idx < @as(i64, @intCast(s.len)) and (std.mem.eql(u8, s[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(s.len)))], "e") or std.mem.eql(u8, s[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(s.len)))], "E"))) {
        idx = idx + 1;
        var exp_sign: i64 = 1;
        exp_sign = exp_sign;
        if (idx < @as(i64, @intCast(s.len)) and std.mem.eql(u8, s[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(s.len)))], "-")) {
            exp_sign = 0 - 1;
            idx = idx + 1;
        } else {
            if (idx < @as(i64, @intCast(s.len)) and std.mem.eql(u8, s[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(s.len)))], "+")) {
                idx = idx + 1;
            }
        }
        var exp_str: []const u8 = "";
        exp_str = exp_str;
        while (idx < @as(i64, @intCast(s.len))) {
            const c: []const u8 = s[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(s.len)))];
            if (std.mem.order(u8, c, "0") != .lt and std.mem.order(u8, c, "9") != .gt) {
                exp_str = _concat_string(exp_str, c);
                idx = idx + 1;
            } else {
                @panic("invalid number");
            }
        }
        if (@as(i64, @intCast(exp_str.len)) == 0) {
            @panic("invalid number");
        }
        exp = exp_sign * (std.fmt.parseInt(i64, exp_str, 10) catch 0);
    }
    if (idx != @as(i64, @intCast(s.len))) {
        @panic("invalid number");
    }
    if (@as(i64, @intCast(int_part.len)) == 0) {
        int_part = "0";
    }
    const num_str: []const u8 = _concat_string(int_part, frac_part);
    var numerator: i64 = (std.fmt.parseInt(i64, num_str, 10) catch 0);
    numerator = numerator;
    if (sign == -1) {
        numerator = 0 - numerator;
    }
    var denominator: i64 = pow10(@as(i64, @intCast(frac_part.len)));
    denominator = denominator;
    if (exp > 0) {
        numerator = numerator * pow10(exp);
    } else {
        if (exp < 0) {
            denominator = denominator * pow10(0 - exp);
        }
    }
    return .{ .numerator = numerator, .denominator = denominator };
}

fn reduce(fr: Fraction) Fraction {
    const g: i64 = gcd(fr.numerator, fr.denominator);
    return .{ .numerator = @divTrunc(fr.numerator, g), .denominator = @divTrunc(fr.denominator, g) };
}

fn decimal_to_fraction_str(s: []const u8) Fraction {
    return reduce(parse_decimal(s));
}

fn decimal_to_fraction(x: f64) Fraction {
    return decimal_to_fraction_str(_str(x));
}

fn assert_fraction(name: []const u8, fr: Fraction, num: i64, den: i64) void {
    if (fr.numerator != num or fr.denominator != den) {
        @panic(name);
    }
}

fn test_decimal_to_fraction() void {
    assert_fraction("case1", decimal_to_fraction(2.0), 2, 1);
    assert_fraction("case2", decimal_to_fraction(89.0), 89, 1);
    assert_fraction("case3", decimal_to_fraction_str("67"), 67, 1);
    assert_fraction("case4", decimal_to_fraction_str("45.0"), 45, 1);
    assert_fraction("case5", decimal_to_fraction(1.5), 3, 2);
    assert_fraction("case6", decimal_to_fraction_str("6.25"), 25, 4);
    assert_fraction("case7", decimal_to_fraction(0.0), 0, 1);
    assert_fraction("case8", decimal_to_fraction(@as(f64, @floatFromInt(0)) - 2.5), 0 - 5, 2);
    assert_fraction("case9", decimal_to_fraction(0.125), 1, 8);
    assert_fraction("case10", decimal_to_fraction(1000000.25), 4000001, 4);
    assert_fraction("case11", decimal_to_fraction(1.3333), 13333, 10000);
    assert_fraction("case12", decimal_to_fraction_str("1.23e2"), 123, 1);
    assert_fraction("case13", decimal_to_fraction_str("0.500"), 1, 2);
}

fn mochi_main() void {
    test_decimal_to_fraction();
    const fr: Fraction = decimal_to_fraction(1.5);
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_str(fr.numerator), "/"), _str(fr.denominator))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.heap.pageSize();
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
