// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn abs(x: f64) f64 {
    if (x < 0.0) {
        return @as(f64, @floatFromInt(0)) - x;
    }
    return x;
}

fn factorial(n: i64) i64 {
    if (n < 0) {
        @panic("factorial is undefined for negative numbers");
    }
    var result: i64 = 1;
    result = result;
    var i: i64 = 2;
    i = i;
    while (i <= n) {
        result = result *% i;
        i = i +% 1;
    }
    return result;
}

fn pow_float(base: f64, exp: i64) f64 {
    var result_1: f64 = 1.0;
    result_1 = result_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < exp) {
        result_1 = result_1 * base;
        i_1 = i_1 +% 1;
    }
    return result_1;
}

fn binomial_distribution(successes: i64, trials: i64, prob: f64) f64 {
    if (successes > trials) {
        @panic("successes must be lower or equal to trials");
    }
    if (trials < 0 or successes < 0) {
        @panic("the function is defined for non-negative integers");
    }
    if (!(0.0 < prob and prob < 1.0)) {
        @panic("prob has to be in range of 1 - 0");
    }
    const probability: f64 = pow_float(prob, successes) * pow_float(1.0 - prob, trials -% successes);
    const numerator: f64 = @as(f64, @floatFromInt(factorial(trials)));
    const denominator: f64 = @as(f64, @floatFromInt(factorial(successes) *% factorial(trials -% successes)));
    const coefficient: f64 = numerator / denominator;
    return probability * coefficient;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}
