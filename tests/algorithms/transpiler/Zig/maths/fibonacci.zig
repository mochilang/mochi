// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var fib_cache_global_var_1: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64,i64).init(std.heap.page_allocator);
var fib_memo_cache_var_1: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64,i64).init(std.heap.page_allocator);

fn sqrt(x: f64) f64 {
    if (x <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 10) {
        guess = (guess + x / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn powf(x_1: f64, n: i64) f64 {
    var res: f64 = 1.0;
    res = res;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < n) {
        res = res * x_1;
        i_1 = i_1 +% 1;
    }
    return res;
}

fn roundf(x_2: f64) i64 {
    if (x_2 >= 0.0) {
        return @as(i64, @intFromFloat(x_2 + 0.5));
    }
    return @as(i64, @intFromFloat(x_2 - 0.5));
}

fn fib_iterative(n_1: i64) []i64 {
    if (n_1 < 0) {
        @panic("n is negative");
    }
    if (n_1 == 0) {
        return blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(0) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    var fib: []i64 = std.heap.page_allocator.dupe(i64, ([2]i64{0, 1})[0..2]) catch unreachable;
    fib = fib;
    var i_2: i64 = 2;
    i_2 = i_2;
    while (i_2 <= n_1) {
        fib = blk1: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, fib)) catch |err| handleError(err); _tmp.append(fib[_idx(fib.len, i_2 -% 1)] +% fib[_idx(fib.len, i_2 -% 2)]) catch |err| handleError(err); break :blk1 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    return fib;
}

fn fib_recursive_term(i_3: i64) i64 {
    if (i_3 < 0) {
        @panic("n is negative");
    }
    if (i_3 < 2) {
        return i_3;
    }
    return fib_recursive_term(i_3 -% 1) +% fib_recursive_term(i_3 -% 2);
}

fn fib_recursive(n_2: i64) []i64 {
    if (n_2 < 0) {
        @panic("n is negative");
    }
    var res_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res_1 = res_1;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 <= n_2) {
        res_1 = blk2: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, res_1)) catch |err| handleError(err); _tmp_1.append(fib_recursive_term(i_4)) catch |err| handleError(err); break :blk2 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_4 = i_4 +% 1;
    }
    return res_1;
}

fn fib_recursive_cached_term(i_5: i64) i64 {
    if (i_5 < 0) {
        @panic("n is negative");
    }
    if (i_5 < 2) {
        return i_5;
    }
    if (fib_cache_global_var_1.contains(i_5)) {
        return fib_cache_global_var_1.get(i_5).?;
    }
    const val: i64 = fib_recursive_cached_term(i_5 -% 1) +% fib_recursive_cached_term(i_5 -% 2);
    fib_cache_global_var_1.put(i_5, val) catch unreachable;
    return val;
}

fn fib_recursive_cached(n_3: i64) []i64 {
    if (n_3 < 0) {
        @panic("n is negative");
    }
    var res_2: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res_2 = res_2;
    var j: i64 = 0;
    j = j;
    while (j <= n_3) {
        res_2 = blk3: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, res_2)) catch |err| handleError(err); _tmp_2.append(fib_recursive_cached_term(j)) catch |err| handleError(err); break :blk3 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        j = j +% 1;
    }
    return res_2;
}

fn fib_memoization_term(num: i64) i64 {
    if (fib_memo_cache_var_1.contains(num)) {
        return fib_memo_cache_var_1.get(num).?;
    }
    const value: i64 = fib_memoization_term(num -% 1) +% fib_memoization_term(num -% 2);
    fib_memo_cache_var_1.put(num, value) catch unreachable;
    return value;
}

fn fib_memoization(n_4: i64) []i64 {
    if (n_4 < 0) {
        @panic("n is negative");
    }
    var out: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    out = out;
    var i_6: i64 = 0;
    i_6 = i_6;
    while (i_6 <= n_4) {
        out = blk4: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, out)) catch |err| handleError(err); _tmp_3.append(fib_memoization_term(i_6)) catch |err| handleError(err); break :blk4 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i_6 = i_6 +% 1;
    }
    return out;
}

fn fib_binet(n_5: i64) []i64 {
    if (n_5 < 0) {
        @panic("n is negative");
    }
    if (n_5 >= 1475) {
        @panic("n is too large");
    }
    const sqrt5: f64 = sqrt(5.0);
    const phi: f64 = (1.0 + sqrt5) / 2.0;
    var res_3: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res_3 = res_3;
    var i_7: i64 = 0;
    i_7 = i_7;
    while (i_7 <= n_5) {
        const val_1: i64 = roundf(powf(phi, i_7) / sqrt5);
        res_3 = blk5: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const i64, res_3)) catch |err| handleError(err); _tmp_4.append(val_1) catch |err| handleError(err); break :blk5 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        i_7 = i_7 +% 1;
    }
    return res_3;
}

fn matrix_mul(a: [][]i64, b: [][]i64) [][]i64 {
    const a00: i64 = a[_idx(a.len, 0)][_idx(a[_idx(a.len, 0)].len, 0)] *% b[_idx(b.len, 0)][_idx(b[_idx(b.len, 0)].len, 0)] +% a[_idx(a.len, 0)][_idx(a[_idx(a.len, 0)].len, 1)] *% b[_idx(b.len, 1)][_idx(b[_idx(b.len, 1)].len, 0)];
    const a01: i64 = a[_idx(a.len, 0)][_idx(a[_idx(a.len, 0)].len, 0)] *% b[_idx(b.len, 0)][_idx(b[_idx(b.len, 0)].len, 1)] +% a[_idx(a.len, 0)][_idx(a[_idx(a.len, 0)].len, 1)] *% b[_idx(b.len, 1)][_idx(b[_idx(b.len, 1)].len, 1)];
    const a10: i64 = a[_idx(a.len, 1)][_idx(a[_idx(a.len, 1)].len, 0)] *% b[_idx(b.len, 0)][_idx(b[_idx(b.len, 0)].len, 0)] +% a[_idx(a.len, 1)][_idx(a[_idx(a.len, 1)].len, 1)] *% b[_idx(b.len, 1)][_idx(b[_idx(b.len, 1)].len, 0)];
    const a11: i64 = a[_idx(a.len, 1)][_idx(a[_idx(a.len, 1)].len, 0)] *% b[_idx(b.len, 0)][_idx(b[_idx(b.len, 0)].len, 1)] +% a[_idx(a.len, 1)][_idx(a[_idx(a.len, 1)].len, 1)] *% b[_idx(b.len, 1)][_idx(b[_idx(b.len, 1)].len, 1)];
    return blk6: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.append(@constCast(blk7: { var _tmp_5 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_5.append(a00) catch unreachable; _tmp_5.append(a01) catch unreachable; break :blk7 (_tmp_5.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); _tmp.append(@constCast(blk8: { var _tmp_6 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_6.append(a10) catch unreachable; _tmp_6.append(a11) catch unreachable; break :blk8 (_tmp_6.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk6 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn matrix_pow(m: [][]i64, power: i64) [][]i64 {
    if (power < 0) {
        @panic("power is negative");
    }
    var result: [][]i64 = std.heap.page_allocator.dupe([]i64, ([2][]i64{@constCast(([2]i64{1, 0})[0..2]), @constCast(([2]i64{0, 1})[0..2])})[0..2]) catch unreachable;
    result = result;
    var base: [][]i64 = blk9: { const tmp = std.heap.page_allocator.alloc([]i64, m.len) catch unreachable; @memcpy(tmp, m); break :blk9 tmp; };
    base = base;
    var p: i64 = power;
    p = p;
    while (p > 0) {
        if (@mod(p, 2) == 1) {
            result = matrix_mul(result, base);
        }
        base = matrix_mul(base, base);
        p = @as(i64, @divTrunc(p, 2));
    }
    return result;
}

fn fib_matrix(n_6: i64) i64 {
    if (n_6 < 0) {
        @panic("n is negative");
    }
    if (n_6 == 0) {
        return 0;
    }
    const m_1: [][]i64 = @constCast(([2][]i64{@constCast(([2]i64{1, 1})[0..2]), @constCast(([2]i64{1, 0})[0..2])})[0..2]);
    const res_4: [][]i64 = matrix_pow(m_1, n_6 -% 1);
    return res_4[_idx(res_4.len, 0)][_idx(res_4[_idx(res_4.len, 0)].len, 0)];
}

fn run_tests() i64 {
    const expected: []i64 = @constCast(([11]i64{0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55})[0..11]);
    const it: []i64 = fib_iterative(10);
    const rec: []i64 = fib_recursive(10);
    const cache: []i64 = fib_recursive_cached(10);
    const memo: []i64 = fib_memoization(10);
    const bin: []i64 = fib_binet(10);
    const m_2: i64 = fib_matrix(10);
    if (!std.mem.eql(i64, it, expected)) {
        @panic("iterative failed");
    }
    if (!std.mem.eql(i64, rec, expected)) {
        @panic("recursive failed");
    }
    if (!std.mem.eql(i64, cache, expected)) {
        @panic("cached failed");
    }
    if (!std.mem.eql(i64, memo, expected)) {
        @panic("memoization failed");
    }
    if (!std.mem.eql(i64, bin, expected)) {
        @panic("binet failed");
    }
    if (m_2 != 55) {
        @panic("matrix failed");
    }
    return m_2;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        fib_cache_global_var_1 = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
        fib_memo_cache_var_1 = blk10: { var m_3 = std.AutoHashMap(i64, i64).init(std.heap.page_allocator); m_3.put(0, 0) catch unreachable; m_3.put(1, 1) catch unreachable; m_3.put(2, 1) catch unreachable; break :blk10 m_3; };
        std.debug.print("{s}\n", .{_str(run_tests())});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
