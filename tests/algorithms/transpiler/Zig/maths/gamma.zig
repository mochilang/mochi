// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.141592653589793;

fn absf(x: f64) f64 {
    if (x < 0.0) {
        return @as(f64, @floatFromInt(0)) - x;
    }
    return x;
}

fn sqrt(x_1: f64) f64 {
    if (x_1 < 0.0) {
        @panic("sqrt domain error");
    }
    var guess: f64 = x_1 / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x_1 / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn ln(x_2: f64) f64 {
    if (x_2 <= 0.0) {
        @panic("ln domain error");
    }
    const y: f64 = (x_2 - 1.0) / (x_2 + 1.0);
    const y2: f64 = y * y;
    var term: f64 = y;
    term = term;
    var sum: f64 = 0.0;
    sum = sum;
    var k: i64 = 0;
    k = k;
    while (k < 10) {
        const denom: f64 = @as(f64, @floatFromInt(2 *% k +% 1));
        sum = sum + term / denom;
        term = term * y2;
        k = k +% 1;
    }
    return 2.0 * sum;
}

fn exp_series(x_3: f64) f64 {
    var term_1: f64 = 1.0;
    term_1 = term_1;
    var sum_1: f64 = 1.0;
    sum_1 = sum_1;
    var n: i64 = 1;
    n = n;
    while (n < 20) {
        term_1 = term_1 * x_3 / @as(f64, @floatFromInt(n));
        sum_1 = sum_1 + term_1;
        n = n +% 1;
    }
    return sum_1;
}

fn powf(base: f64, exponent: f64) f64 {
    if (base <= 0.0) {
        return 0.0;
    }
    return exp_series(exponent * ln(base));
}

fn integrand(x_4: f64, z: f64) f64 {
    return powf(x_4, z - 1.0) * exp_series(@as(f64, @floatFromInt(0)) - x_4);
}

fn gamma_iterative(num: f64) f64 {
    if (num <= 0.0) {
        @panic("math domain error");
    }
    const step: f64 = 0.001;
    const limit: f64 = 100.0;
    var x_5: f64 = step;
    x_5 = x_5;
    var total: f64 = 0.0;
    total = total;
    while (x_5 < limit) {
        total = total + integrand(x_5, num) * step;
        x_5 = x_5 + step;
    }
    return total;
}

fn gamma_recursive(num_1: f64) f64 {
    if (num_1 <= 0.0) {
        @panic("math domain error");
    }
    if (num_1 > 171.5) {
        @panic("math range error");
    }
    const int_part: i64 = @as(i64, @intFromFloat(num_1));
    const frac: f64 = num_1 - @as(f64, @floatFromInt(int_part));
    if (!(absf(frac) < 0.000001 or absf(frac - 0.5) < 0.000001)) {
        @panic("num must be an integer or a half-integer");
    }
    if (absf(num_1 - 0.5) < 0.000001) {
        return sqrt(PI_var);
    }
    if (absf(num_1 - 1.0) < 0.000001) {
        return 1.0;
    }
    return (num_1 - 1.0) * gamma_recursive(num_1 - 1.0);
}

fn mochi_main() void {
    std.debug.print("{d}\n", .{gamma_iterative(5.0)});
    std.debug.print("{d}\n", .{gamma_recursive(5.0)});
    std.debug.print("{d}\n", .{gamma_recursive(0.5)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
