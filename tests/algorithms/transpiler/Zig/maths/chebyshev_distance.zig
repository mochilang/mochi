// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn abs(x: f64) f64 {
    if (x >= 0.0) {
        return x;
    } else {
        return @as(f64, @floatFromInt(0)) - x;
    }
    return 0;
}

fn chebyshev_distance(point_a: []f64, point_b: []f64) f64 {
    if (@as(i64, @intCast(point_a.len)) != @as(i64, @intCast(point_b.len))) {
        @panic("Both points must have the same dimension.");
    }
    var max_diff: f64 = 0.0;
    max_diff = max_diff;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(point_a.len))) {
        const diff: f64 = abs(point_a[_idx(point_a.len, i)] - point_b[_idx(point_b.len, i)]);
        if (diff > max_diff) {
            max_diff = diff;
        }
        i = i +% 1;
    }
    return max_diff;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{d}\n", .{chebyshev_distance(@constCast(([2]f64{1.0, 1.0})[0..2]), @constCast(([2]f64{2.0, 2.0})[0..2]))});
        std.debug.print("{d}\n", .{chebyshev_distance(@constCast(([3]f64{1.0, 1.0, 9.0})[0..3]), @constCast(blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(2.0) catch unreachable; _tmp.append(2.0) catch unreachable; _tmp.append(@as(f64, @floatFromInt(0)) - 5.2) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); }))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
