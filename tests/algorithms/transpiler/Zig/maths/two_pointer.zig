// Generated by Mochi Zig transpiler on 2025-08-12 13:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn two_pointer(nums_param: []i64, target_param: i64) []i64 {
    var nums_var: []i64 = nums_param;
    nums_var = nums_var;
    var target_var: i64 = target_param;
    target_var = target_var;
    var i: i64 = 0;
    i = i;
    var j: i64 = @as(i64, @intCast(nums_var.len)) - 1;
    j = j;
    while (i < j) {
        const s: i64 = nums_var[@as(usize, @intCast(i))] + nums_var[@as(usize, @intCast(j))];
        if (s == target_var) {
            return blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(i) catch |err| handleError(err); _tmp.append(j) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        if (s < target_var) {
            i = i + 1;
        } else {
            j = j - 1;
        }
    }
    return @constCast(&[_]i64{})[0..];
}

fn test_two_pointer() void {
    if (!std.mem.eql(i64, two_pointer(@constCast(&([4]i64{2, 7, 11, 15}))[0..], 9), @constCast(&([2]i64{0, 1}))[0..])) {
        @panic("case1");
    }
    if (!std.mem.eql(i64, two_pointer(@constCast(&([4]i64{2, 7, 11, 15}))[0..], 17), @constCast(&([2]i64{0, 3}))[0..])) {
        @panic("case2");
    }
    if (!std.mem.eql(i64, two_pointer(@constCast(&([4]i64{2, 7, 11, 15}))[0..], 18), @constCast(&([2]i64{1, 2}))[0..])) {
        @panic("case3");
    }
    if (!std.mem.eql(i64, two_pointer(@constCast(&([4]i64{2, 7, 11, 15}))[0..], 26), @constCast(&([2]i64{2, 3}))[0..])) {
        @panic("case4");
    }
    if (!std.mem.eql(i64, two_pointer(@constCast(&([3]i64{1, 3, 3}))[0..], 6), @constCast(&([2]i64{1, 2}))[0..])) {
        @panic("case5");
    }
    if (@as(i64, @intCast(two_pointer(@constCast(&([4]i64{2, 7, 11, 15}))[0..], 8).len)) != 0) {
        @panic("case6");
    }
    if (@as(i64, @intCast(two_pointer(@constCast(&([10]i64{0, 3, 6, 9, 12, 15, 18, 21, 24, 27}))[0..], 19).len)) != 0) {
        @panic("case7");
    }
    if (@as(i64, @intCast(two_pointer(@constCast(&([3]i64{1, 2, 3}))[0..], 6).len)) != 0) {
        @panic("case8");
    }
}

fn mochi_main() void {
    test_two_pointer();
    std.debug.print("{s}\n", .{_str(two_pointer(@constCast(&([4]i64{2, 7, 11, 15}))[0..], 9))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
