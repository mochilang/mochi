// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn abs_val(num: f64) f64 {
    if (num < 0.0) {
        return @as(f64, @floatFromInt(0)) - num;
    }
    return num;
}

fn abs_min(x: []i64) i64 {
    if (@as(i64, @intCast(x.len)) == 0) {
        @panic("abs_min() arg is an empty sequence");
    }
    var j: i64 = x[_idx(x.len, 0)];
    j = j;
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(x.len))) {
        const i: i64 = x[_idx(x.len, idx)];
        if (abs_val(@as(f64, @floatFromInt(@as(f64, @floatFromInt(i))))) < abs_val(@as(f64, @floatFromInt(@as(f64, @floatFromInt(j)))))) {
            j = i;
        }
        idx = idx +% 1;
    }
    return j;
}

fn abs_max(x_1: []i64) i64 {
    if (@as(i64, @intCast(x_1.len)) == 0) {
        @panic("abs_max() arg is an empty sequence");
    }
    var j_1: i64 = x_1[_idx(x_1.len, 0)];
    j_1 = j_1;
    var idx_1: i64 = 0;
    idx_1 = idx_1;
    while (idx_1 < @as(i64, @intCast(x_1.len))) {
        const i_1: i64 = x_1[_idx(x_1.len, idx_1)];
        if (abs_val(@as(f64, @floatFromInt(@as(f64, @floatFromInt(i_1))))) > abs_val(@as(f64, @floatFromInt(@as(f64, @floatFromInt(j_1)))))) {
            j_1 = i_1;
        }
        idx_1 = idx_1 +% 1;
    }
    return j_1;
}

fn abs_max_sort(x_2: []i64) i64 {
    if (@as(i64, @intCast(x_2.len)) == 0) {
        @panic("abs_max_sort() arg is an empty sequence");
    }
    var arr: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    arr = arr;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(x_2.len))) {
        arr = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, arr)) catch |err| handleError(err); _tmp.append(x_2[_idx(x_2.len, i_2)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    const n: i64 = @as(i64, @intCast(arr.len));
    var a: i64 = 0;
    a = a;
    while (a < n) {
        var b: i64 = 0;
        b = b;
        while (b < n -% a -% 1) {
            if (abs_val(@as(f64, @floatFromInt(@as(f64, @floatFromInt(arr[_idx(arr.len, b)]))))) > abs_val(@as(f64, @floatFromInt(@as(f64, @floatFromInt(arr[_idx(arr.len, b +% 1)])))))) {
                const temp: i64 = arr[_idx(arr.len, b)];
                arr[_idx(arr.len, b)] = arr[_idx(arr.len, b +% 1)];
                arr[_idx(arr.len, b +% 1)] = temp;
            }
            b = b +% 1;
        }
        a = a +% 1;
    }
    return arr[_idx(arr.len, n -% 1)];
}

fn test_abs_val() void {
    if (abs_val(0.0) != 0.0) {
        @panic("abs_val(0) failed");
    }
    if (abs_val(34.0) != 34.0) {
        @panic("abs_val(34) failed");
    }
    if (abs_val(@as(f64, @floatFromInt(0)) - 100000000000.0) != 100000000000.0) {
        @panic("abs_val large failed");
    }
    const a_1: []i64 = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(0 -% 3) catch unreachable; _tmp_1.append(0 -% 1) catch unreachable; _tmp_1.append(2) catch unreachable; _tmp_1.append(0 -% 11) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); };
    if (abs_max(a_1) != 0 -% 11) {
        @panic("abs_max failed");
    }
    if (abs_max_sort(a_1) != 0 -% 11) {
        @panic("abs_max_sort failed");
    }
    if (abs_min(a_1) != 0 -% 1) {
        @panic("abs_min failed");
    }
}

fn mochi_main() void {
    test_abs_val();
    std.debug.print("{d}\n", .{abs_val(@as(f64, @floatFromInt(0)) - 34.0)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
