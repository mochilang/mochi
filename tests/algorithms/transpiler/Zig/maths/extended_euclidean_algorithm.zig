// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Coeffs = struct {
    x: i64,
    y: i64,
};

fn abs_val(n: i64) i64 {
    if (n < 0) {
        return 0 -% n;
    }
    return n;
}

fn extended_euclidean_algorithm(a: i64, b: i64) Coeffs {
    if (abs_val(a) == 1) {
        return .{ .x = a, .y = 0 };
    }
    if (abs_val(b) == 1) {
        return .{ .x = 0, .y = b };
    }
    var old_remainder: i64 = a;
    old_remainder = old_remainder;
    var remainder: i64 = b;
    remainder = remainder;
    var old_coeff_a: i64 = 1;
    old_coeff_a = old_coeff_a;
    var coeff_a: i64 = 0;
    coeff_a = coeff_a;
    var old_coeff_b: i64 = 0;
    old_coeff_b = old_coeff_b;
    var coeff_b: i64 = 1;
    coeff_b = coeff_b;
    while (remainder != 0) {
        const quotient: i64 = @divTrunc(old_remainder, remainder);
        const temp_remainder: i64 = old_remainder -% quotient *% remainder;
        old_remainder = remainder;
        remainder = temp_remainder;
        const temp_a: i64 = old_coeff_a -% quotient *% coeff_a;
        old_coeff_a = coeff_a;
        coeff_a = temp_a;
        const temp_b: i64 = old_coeff_b -% quotient *% coeff_b;
        old_coeff_b = coeff_b;
        coeff_b = temp_b;
    }
    if (a < 0) {
        old_coeff_a = 0 -% old_coeff_a;
    }
    if (b < 0) {
        old_coeff_b = 0 -% old_coeff_b;
    }
    return .{ .x = old_coeff_a, .y = old_coeff_b };
}

fn test_extended_euclidean_algorithm() void {
    const r1: Coeffs = extended_euclidean_algorithm(1, 24);
    if (r1.x != 1 or r1.y != 0) {
        @panic("test1 failed");
    }
    const r2: Coeffs = extended_euclidean_algorithm(8, 14);
    if (r2.x != 2 or r2.y != 0 -% 1) {
        @panic("test2 failed");
    }
    const r3: Coeffs = extended_euclidean_algorithm(240, 46);
    if (r3.x != 0 -% 9 or r3.y != 47) {
        @panic("test3 failed");
    }
    const r4: Coeffs = extended_euclidean_algorithm(1, 0 -% 4);
    if (r4.x != 1 or r4.y != 0) {
        @panic("test4 failed");
    }
    const r5: Coeffs = extended_euclidean_algorithm(0 -% 2, 0 -% 4);
    if (r5.x != 0 -% 1 or r5.y != 0) {
        @panic("test5 failed");
    }
    const r6: Coeffs = extended_euclidean_algorithm(0, 0 -% 4);
    if (r6.x != 0 or r6.y != 0 -% 1) {
        @panic("test6 failed");
    }
    const r7: Coeffs = extended_euclidean_algorithm(2, 0);
    if (r7.x != 1 or r7.y != 0) {
        @panic("test7 failed");
    }
}

fn mochi_main() void {
    test_extended_euclidean_algorithm();
    const res: Coeffs = extended_euclidean_algorithm(240, 46);
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("(", _str(res.x)), ", "), _str(res.y)), ")")});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
