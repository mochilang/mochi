// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const ConnMock = struct {
    recv_called: i64,
    send_called: i64,
    close_called: i64,
};

const SocketMock = struct {
    bind_called: i64,
    listen_called: i64,
    accept_called: i64,
    shutdown_called: i64,
    close_called: i64,
    conn: ConnMock,
};

const FileMock = struct {
    read_called: i64,
    data: []i64,
};

fn make_conn_mock() ConnMock {
    return .{ .recv_called = 0, .send_called = 0, .close_called = 0 };
}

fn conn_recv(conn_param: *ConnMock, size: i64) i64 {
    conn_param.recv_called = conn_param.recv_called + 1;
    return 0;
}

fn conn_send(conn_param: *ConnMock, data: i64) void {
    conn_param.send_called = conn_param.send_called + 1;
}

fn conn_close(conn_param: *ConnMock) void {
    conn_param.close_called = conn_param.close_called + 1;
}

fn make_socket_mock(conn: ConnMock) SocketMock {
    return .{ .bind_called = 0, .listen_called = 0, .accept_called = 0, .shutdown_called = 0, .close_called = 0, .conn = conn };
}

fn socket_bind(sock_param: *SocketMock) void {
    sock_param.bind_called = sock_param.bind_called + 1;
}

fn socket_listen(sock_param: *SocketMock) void {
    sock_param.listen_called = sock_param.listen_called + 1;
}

fn socket_accept(sock_param: *SocketMock) ConnMock {
    sock_param.accept_called = sock_param.accept_called + 1;
    return sock_param.conn;
}

fn socket_shutdown(sock_param: *SocketMock) void {
    sock_param.shutdown_called = sock_param.shutdown_called + 1;
}

fn socket_close(sock_param: *SocketMock) void {
    sock_param.close_called = sock_param.close_called + 1;
}

fn make_file_mock(values: []i64) FileMock {
    return .{ .read_called = 0, .data = values };
}

fn file_read(f_param: *FileMock, size: i64) i64 {
    if (f_param.read_called < @as(i64, @intCast(f_param.data.len))) {
        const value: i64 = f_param.data[_idx(f_param.data.len, f_param.read_called)];
        f_param.read_called = f_param.read_called + 1;
        return value;
    }
    f_param.read_called = f_param.read_called + 1;
    return 0;
}

fn file_open() FileMock {
    return make_file_mock(@constCast(&([2]i64{1, 0}))[0..]);
}

fn send_file(sock: SocketMock, f: FileMock) void {
    socket_bind(@constCast(&sock));
    socket_listen(@constCast(&sock));
    const conn: ConnMock = socket_accept(@constCast(&sock));
    const _: i64 = conn_recv(@constCast(&conn), 1024);
    var data: i64 = file_read(@constCast(&f), 1024);
    data = data;
    while (data != 0) {
        conn_send(@constCast(&conn), data);
        data = file_read(@constCast(&f), 1024);
    }
    conn_close(@constCast(&conn));
    socket_shutdown(@constCast(&sock));
    socket_close(@constCast(&sock));
}

fn test_send_file_running_as_expected() []const u8 {
    const conn: ConnMock = make_conn_mock();
    const sock: SocketMock = make_socket_mock(conn);
    const f: FileMock = file_open();
    send_file(sock, f);
    if (sock.bind_called == 1 and sock.listen_called == 1 and sock.accept_called == 1 and conn.recv_called == 1 and f.read_called >= 1 and conn.send_called == 1 and conn.close_called == 1 and sock.shutdown_called == 1 and sock.close_called == 1) {
        return "pass";
    }
    return "fail";
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{test_send_file_running_as_expected()});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
