// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const KnapsackResult = struct {
    max_value: f64,
    fractions: []f64,
};

const v_var: []f64 = @constCast(([5]f64{1.0, 3.0, 5.0, 7.0, 9.0})[0..5]);
const w_var: []f64 = @constCast(([5]f64{0.9, 0.7, 0.5, 0.3, 0.1})[0..5]);

fn sort_by_ratio(index_param: []i64, ratio: []f64) []i64 {
    var index_var: []i64 = index_param;
    index_var = index_var;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(index_var.len))) {
        const key: i64 = index_var[_idx(index_var.len, i)];
        const key_ratio: f64 = ratio[_idx(ratio.len, key)];
        var j: i64 = i - 1;
        j = j;
        while (j >= 0 and ratio[_idx(ratio.len, index_var[_idx(index_var.len, j)])] < key_ratio) {
            index_var[_idx(index_var.len, j + 1)] = index_var[_idx(index_var.len, j)];
            j = j - 1;
        }
        index_var[_idx(index_var.len, j + 1)] = key;
        i = i + 1;
    }
    return index_var;
}

fn fractional_knapsack(value: []f64, weight: []f64, capacity_param: f64) KnapsackResult {
    var capacity_var: f64 = capacity_param;
    capacity_var = capacity_var;
    const n: i64 = @as(i64, @intCast(value.len));
    var index: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    index = index;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        index = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, index)) catch |err| handleError(err); _tmp.append(i) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var ratio: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    ratio = ratio;
    i = 0;
    while (i < n) {
        ratio = blk: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, ratio)) catch |err| handleError(err); _tmp_1.append(value[_idx(value.len, i)] / weight[_idx(weight.len, i)]) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    index = sort_by_ratio(index, ratio);
    var fractions: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    fractions = fractions;
    i = 0;
    while (i < n) {
        fractions = blk: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, fractions)) catch |err| handleError(err); _tmp_2.append(0.0) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var max_value: f64 = 0.0;
    max_value = max_value;
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(index.len))) {
        const item: i64 = index[_idx(index.len, idx)];
        if (weight[_idx(weight.len, item)] <= capacity_var) {
            fractions[_idx(fractions.len, item)] = 1.0;
            max_value = max_value + value[_idx(value.len, item)];
            capacity_var = capacity_var - weight[_idx(weight.len, item)];
        } else {
            fractions[_idx(fractions.len, item)] = capacity_var / weight[_idx(weight.len, item)];
            max_value = max_value + value[_idx(value.len, item)] * capacity_var / weight[_idx(weight.len, item)];
            break;
        }
        idx = idx + 1;
    }
    return .{ .max_value = max_value, .fractions = fractions };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(fractional_knapsack(v_var, w_var, 5.0))});
        std.debug.print("{s}\n", .{_str(fractional_knapsack(@constCast(&(([4]f64{1.0, 3.0, 5.0, 7.0})[0..4]))[0..], @constCast(&(([4]f64{0.9, 0.7, 0.5, 0.3})[0..4]))[0..], 30.0))});
        std.debug.print("{s}\n", .{_str(fractional_knapsack(@constCast((&[_]f64{})[0..0])[0..], @constCast((&[_]f64{})[0..0])[0..], 30.0))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
