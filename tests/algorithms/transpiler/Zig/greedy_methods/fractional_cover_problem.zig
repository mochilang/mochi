// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Item = struct {
    weight: i64,
    value: i64,
};

var items1_var: []Item = &[_]Item{};
var items2_var: []Item = &[_]Item{};
const items3_var: []Item = std.heap.page_allocator.alloc(Item, 0) catch unreachable;
var items4_var: []Item = &[_]Item{};

fn ratio(item: Item) f64 {
    return @as(f64, @floatFromInt(item.value)) / @as(f64, @floatFromInt(item.weight));
}

fn fractional_cover(items: []Item, capacity: i64) f64 {
    if (capacity < 0) {
        @panic("Capacity cannot be negative");
    }
    var total: f64 = 0.0;
    total = total;
    var remaining: i64 = capacity;
    remaining = remaining;
    const sorted: []Item = blk: {
    var arr = std.ArrayList(struct{key: f64, val: Item}).init(std.heap.page_allocator);
    for (items) |it| {
        arr.append(.{ .key = ratio(it), .val = it }) catch unreachable;
    }
    var tmp = arr.toOwnedSlice() catch unreachable;
    std.sort.sort(struct{key: f64, val: Item}, tmp, {}, struct{fn lt(ctx: void, a: struct{key: f64, val: Item}, b: struct{key: f64, val: Item}) bool { return a.key > b.key; } }.lt);
    var result = std.ArrayList(Item).init(std.heap.page_allocator);
    for (tmp) |it| { result.append(it.val) catch unreachable; }
    tmp = result.toOwnedSlice() catch unreachable;
    break :blk tmp;
};
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(sorted.len)) and remaining > 0) {
        const item: Item = sorted[_idx(sorted.len, idx)];
        const take: i64 = if (item.weight < remaining) item.weight else remaining;
        total = total + @as(f64, @floatFromInt(take)) * ratio(item);
        remaining = remaining - take;
        idx = idx + 1;
    }
    return total;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        items1_var = blk0: { var _tmp = std.ArrayList(Item).init(std.heap.page_allocator); _tmp.append(.{ .weight = 10, .value = 60 }) catch unreachable; _tmp.append(.{ .weight = 20, .value = 100 }) catch unreachable; _tmp.append(.{ .weight = 30, .value = 120 }) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
        items2_var = blk1: { var _tmp_1 = std.ArrayList(Item).init(std.heap.page_allocator); _tmp_1.append(.{ .weight = 20, .value = 100 }) catch unreachable; _tmp_1.append(.{ .weight = 30, .value = 120 }) catch unreachable; _tmp_1.append(.{ .weight = 10, .value = 60 }) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); };
        items4_var = blk2: { var _tmp_2 = std.ArrayList(Item).init(std.heap.page_allocator); _tmp_2.append(.{ .weight = 10, .value = 60 }) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); };
        std.debug.print("{s}\n", .{_str(fractional_cover(items1_var[0..], 50))});
        std.debug.print("{s}\n", .{_str(fractional_cover(items2_var[0..], 25))});
        std.debug.print("{s}\n", .{_str(fractional_cover(items3_var, 50))});
        std.debug.print("{s}\n", .{_str(fractional_cover(items4_var[0..], 5))});
        std.debug.print("{s}\n", .{_str(fractional_cover(items4_var[0..], 1))});
        std.debug.print("{s}\n", .{_str(fractional_cover(items4_var[0..], 0))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
