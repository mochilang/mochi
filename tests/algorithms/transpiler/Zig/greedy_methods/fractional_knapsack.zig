// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Item = struct {
    value: f64,
    weight: f64,
};

const vl_var: []f64 = @constCast(([3]f64{60.0, 100.0, 120.0})[0..3]);
const wt_var: []f64 = @constCast(([3]f64{10.0, 20.0, 30.0})[0..3]);
var result_var: f64 = 0;

fn sort_by_ratio_desc(arr_param: []Item) []Item {
    var arr_var: []Item = arr_param;
    arr_var = arr_var;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(arr_var.len))) {
        const key: Item = arr_var[_idx(arr_var.len, i)];
        var j: i64 = i - 1;
        j = j;
        while (j >= 0) {
            const current: Item = arr_var[_idx(arr_var.len, j)];
            if (current.value / current.weight < key.value / key.weight) {
                arr_var[_idx(arr_var.len, j + 1)] = current;
                j = j - 1;
            } else {
                break;
            }
        }
        arr_var[_idx(arr_var.len, j + 1)] = key;
        i = i + 1;
    }
    return arr_var;
}

fn sum_first(arr: []f64, k: i64) f64 {
    var s: f64 = 0.0;
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < k and i < @as(i64, @intCast(arr.len))) {
        s = s + arr[_idx(arr.len, i)];
        i = i + 1;
    }
    return s;
}

fn frac_knapsack(vl_param: []f64, wt_param: []f64, w: f64, n: i64) f64 {
    var items: []Item = std.heap.page_allocator.alloc(Item, 0) catch unreachable;
    items = items;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(vl_param.len)) and i < @as(i64, @intCast(wt_param.len))) {
        items = blk: { var _tmp = std.ArrayList(Item).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Item, items)) catch |err| handleError(err); _tmp.append(.{ .value = vl_param[_idx(vl_param.len, i)], .weight = wt_param[_idx(wt_param.len, i)] }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    items = sort_by_ratio_desc(items);
    var values: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    values = values;
    var weights: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    weights = weights;
    i = 0;
    while (i < @as(i64, @intCast(items.len))) {
        const itm: Item = items[_idx(items.len, i)];
        values = blk: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, values)) catch |err| handleError(err); _tmp_1.append(itm.value) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        weights = blk: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, weights)) catch |err| handleError(err); _tmp_2.append(itm.weight) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var acc: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    acc = acc;
    var total: f64 = 0.0;
    total = total;
    i = 0;
    while (i < @as(i64, @intCast(weights.len))) {
        total = total + weights[_idx(weights.len, i)];
        acc = blk: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const f64, acc)) catch |err| handleError(err); _tmp_3.append(total) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(acc.len)) and w >= acc[_idx(acc.len, k)]) {
        k = k + 1;
    }
    if (k == 0) {
        return 0.0;
    }
    if (k >= @as(i64, @intCast(values.len))) {
        return sum_first(values, @as(i64, @intCast(values.len)));
    }
    if (k != n) {
        return sum_first(values, k) + (w - acc[_idx(acc.len, k - 1)]) * values[_idx(values.len, k)] / weights[_idx(weights.len, k)];
    }
    return sum_first(values, k);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        result_var = frac_knapsack(vl_var, wt_var, 50.0, 3);
        std.debug.print("{s}\n", .{_str(result_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
