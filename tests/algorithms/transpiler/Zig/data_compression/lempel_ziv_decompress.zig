// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const sample_var: []const u8 = "1011001";
var decompressed_var: []const u8 = &[_]u8{};

fn list_contains(xs: [][]const u8, v: []const u8) bool {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[@as(usize, @intCast(i))], v)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn is_power_of_two(n: i64) bool {
    if (n < 1) {
        return false;
    }
    var x: i64 = n;
    while (x > 1) {
        if (@mod(x, 2) != 0) {
            return false;
        }
        x = @divTrunc(x, 2);
    }
    return true;
}

fn bin_string(n: i64) []const u8 {
    if (n == 0) {
        return "0";
    }
    var res: []const u8 = "";
    var x: i64 = n;
    while (x > 0) {
        const bit: i64 = @mod(x, 2);
        res = _concat_string(_str(bit), res);
        x = @divTrunc(x, 2);
    }
    return res;
}

fn decompress_data(data_bits: []const u8) []const u8 {
    var lexicon: std.StringHashMap([]const u8) = blk: { var m = std.StringHashMap([]const u8).init(std.heap.page_allocator); m.put("0", "0") catch unreachable; m.put("1", "1") catch unreachable; break :blk m; };
    var keys: [][]const u8 = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 2) catch unreachable; _tmp0[0] = "0"; _tmp0[1] = "1"; break :blk0 _tmp0; };
    var result: []const u8 = "";
    var curr_string: []const u8 = "";
    var index: i64 = 2;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(data_bits.len))) {
        curr_string = _concat_string(curr_string, data_bits[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(data_bits.len)))]);
        if (!(list_contains(keys, curr_string))) {
            i = i + 1;
            continue;
        }
        const last_match_id: []const u8 = lexicon.get(curr_string).?;
        result = _concat_string(result, last_match_id);
        lexicon.put(curr_string, _concat_string(last_match_id, "0")) catch unreachable;
        if (is_power_of_two(index)) {
            var new_lex: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
            var new_keys: [][]const u8 = &[_][]const u8{};
            var j: i64 = 0;
            while (j < @as(i64, @intCast(keys.len))) {
                const curr_key: []const u8 = keys[@as(usize, @intCast(j))];
                new_lex.put(_concat_string("0", curr_key), lexicon.get(curr_key).?) catch unreachable;
                new_keys = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, new_keys)) catch |err| handleError(err); _tmp.append(_concat_string("0", curr_key)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                j = j + 1;
            }
            lexicon = new_lex;
            keys = new_keys;
        }
        const new_key: []const u8 = bin_string(index);
        lexicon.put(new_key, _concat_string(last_match_id, "1")) catch unreachable;
        keys = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, keys)) catch |err| handleError(err); _tmp.append(new_key) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        index = index + 1;
        curr_string = "";
        i = i + 1;
    }
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        decompressed_var = decompress_data(sample_var);
        std.debug.print("{s}\n", .{decompressed_var});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
