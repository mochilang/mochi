// Generated by Mochi Zig transpiler on 2025-08-24 15:35 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const BWTResult = struct {
    bwt_string: []const u8,
    idx_original_string: i64,
};

const s_var: []const u8 = "^BANANA";
var result_var: BWTResult = undefined;

fn all_rotations(s_param: []const u8) [][]const u8 {
    const n: i64 = @as(i64, @intCast(s_param.len));
    var rotations: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    rotations = rotations;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        const rotation: []const u8 = _concat_string(s_param[@as(usize, @intCast(i))..@min(@as(usize, @intCast(n)), @as(usize, @intCast(s_param.len)))], s_param[@as(usize, @intCast(0))..@min(@as(usize, @intCast(i)), @as(usize, @intCast(s_param.len)))]);
        rotations = blk0: { var _tmp = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const []const u8, rotations)) catch |err| handleError(err); _tmp.append(@constCast(rotation)) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return rotations;
}

fn sort_strings(arr_param: [][]const u8) [][]const u8 {
    var arr_var: [][]const u8 = arr_param;
    arr_var = arr_var;
    const n_1: i64 = @as(i64, @intCast(arr_var.len));
    var i_1: i64 = 1;
    i_1 = i_1;
    while (i_1 < n_1) {
        const key: []const u8 = arr_var[_idx(arr_var.len, i_1)];
        var j: i64 = i_1 -% 1;
        j = j;
        while (j >= 0 and std.mem.order(u8, arr_var[_idx(arr_var.len, j)], key) == .gt) {
            arr_var[_idx(arr_var.len, j +% 1)] = arr_var[_idx(arr_var.len, j)];
            j = j -% 1;
        }
        arr_var[_idx(arr_var.len, j +% 1)] = key;
        i_1 = i_1 +% 1;
    }
    return arr_var;
}

fn join_strings(arr: [][]const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(arr.len))) {
        res = _concat_string(res, arr[_idx(arr.len, i_2)]);
        i_2 = i_2 +% 1;
    }
    return res;
}

fn bwt_transform(s_param_1: []const u8) BWTResult {
    if (s_param_1.len == 0) {
        @panic("input string must not be empty");
    }
    var rotations_1: [][]const u8 = all_rotations(s_param_1);
    rotations_1 = rotations_1;
    rotations_1 = sort_strings(rotations_1);
    var last_col: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    last_col = last_col;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(rotations_1.len))) {
        const word: []const u8 = rotations_1[_idx(rotations_1.len, i_3)];
        last_col = blk1: { var _tmp_1 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []const u8, last_col)) catch |err| handleError(err); _tmp_1.append(@constCast(word[@as(usize, @intCast(@as(i64, @intCast(word.len)) -% 1))..@min(@as(usize, @intCast(@as(i64, @intCast(word.len)))), @as(usize, @intCast(word.len)))])) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    const bwt_string: []const u8 = join_strings(last_col);
    const idx: i64 = index_of(rotations_1, s_param_1);
    return .{ .bwt_string = bwt_string, .idx_original_string = idx };
}

fn index_of(arr_1: [][]const u8, target: []const u8) i64 {
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(arr_1.len))) {
        if (std.mem.eql(u8, arr_1[_idx(arr_1.len, i_4)], target)) {
            return i_4;
        }
        i_4 = i_4 +% 1;
    }
    return 0 -% 1;
}

fn reverse_bwt(bwt_string_1: []const u8, idx_original_string: i64) []const u8 {
    if (bwt_string_1.len == 0) {
        @panic("bwt string must not be empty");
    }
    const n_2: i64 = @as(i64, @intCast(bwt_string_1.len));
    if (idx_original_string < 0 or idx_original_string >= n_2) {
        @panic("index out of range");
    }
    var ordered_rotations: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    ordered_rotations = ordered_rotations;
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < n_2) {
        ordered_rotations = blk2: { var _tmp_2 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const []const u8, ordered_rotations)) catch |err| handleError(err); _tmp_2.append(@constCast("")) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i_5 = i_5 +% 1;
    }
    var iter: i64 = 0;
    iter = iter;
    while (iter < n_2) {
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < n_2) {
            const ch: []const u8 = bwt_string_1[@as(usize, @intCast(j_1))..@min(@as(usize, @intCast(j_1 +% 1)), @as(usize, @intCast(bwt_string_1.len)))];
            ordered_rotations[_idx(ordered_rotations.len, j_1)] = _concat_string(ch, ordered_rotations[_idx(ordered_rotations.len, j_1)]);
            j_1 = j_1 +% 1;
        }
        ordered_rotations = sort_strings(ordered_rotations);
        iter = iter +% 1;
    }
    return ordered_rotations[_idx(ordered_rotations.len, idx_original_string)];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        result_var = bwt_transform(s_var);
        std.debug.print("{s}\n", .{result_var.bwt_string});
        std.debug.print("{s}\n", .{_str(result_var.idx_original_string)});
        std.debug.print("{s}\n", .{reverse_bwt(result_var.bwt_string, result_var.idx_original_string)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
