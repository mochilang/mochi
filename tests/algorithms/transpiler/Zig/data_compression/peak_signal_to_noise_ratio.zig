// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn abs(x: f64) f64 {
    if (x < 0.0) {
        return @as(f64, @floatFromInt(0)) - x;
    }
    return x;
}

fn sqrtApprox(x: f64) f64 {
    if (x <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x;
    var i: i64 = 0;
    while (i < 10) {
        guess = (guess + x / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

fn ln(x: f64) f64 {
    const t: f64 = (x - 1.0) / (x + 1.0);
    var term: f64 = t;
    var sum: f64 = 0.0;
    var n: i64 = 1;
    while (n <= 19) {
        sum = sum + term / @as(f64, @floatFromInt(n));
        term = term * t * t;
        n = n + 2;
    }
    return 2.0 * sum;
}

fn log10(x: f64) f64 {
    return ln(x) / ln(10.0);
}

fn peak_signal_to_noise_ratio(original: [][]i64, contrast: [][]i64) f64 {
    var mse: f64 = 0.0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(original.len))) {
        var j: i64 = 0;
        while (j < @as(i64, @intCast(original[@as(usize, @intCast(i))].len))) {
            const diff: f64 = @as(f64, @floatFromInt(original[@as(usize, @intCast(i))][@as(usize, @intCast(j))] - contrast[@as(usize, @intCast(i))][@as(usize, @intCast(j))]));
            mse = mse + diff * diff;
            j = j + 1;
        }
        i = i + 1;
    }
    const size: f64 = @as(f64, @floatFromInt(@as(i64, @intCast(original.len)) * @as(i64, @intCast(original[@as(usize, @intCast(0))].len))));
    mse = mse / size;
    if (mse == 0.0) {
        return 100.0;
    }
    const PIXEL_MAX: f64 = 255.0;
    return 20.0 * log10(PIXEL_MAX / sqrtApprox(mse));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}
