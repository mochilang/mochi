// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Token = struct {
    offset: i64,
    length: i64,
    indicator: []const u8,
};

const Tokens_example = struct {
    offset: i64,
    length: i64,
    indicator: []const u8,
};

var c1_var: []Token = &[_]Token{};
var c2_var: []Token = &[_]Token{};
var tokens_example_var: [8]Tokens_example = undefined;

fn token_to_string(t: Token) []const u8 {
    return _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("(", _str(t.offset)), ", "), _str(t.length)), ", "), t.indicator), ")");
}

fn tokens_to_string(ts: []Token) []const u8 {
    var res: []const u8 = "[";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(ts.len))) {
        res = _concat_string(res, token_to_string(ts[@as(usize, @intCast(i))]));
        if (i < @as(i64, @intCast(ts.len)) - 1) {
            res = _concat_string(res, ", ");
        }
        i = i + 1;
    }
    return _concat_string(res, "]");
}

fn match_length_from_index(text: []const u8, window: []const u8, text_index: i64, window_index: i64) i64 {
    if (text_index >= @as(i64, @intCast(text.len)) or window_index >= @as(i64, @intCast(window.len))) {
        return 0;
    }
    const tc: []const u8 = text[@as(usize, @intCast(text_index))..@min(@as(usize, @intCast(text_index + 1)), @as(usize, @intCast(text.len)))];
    const wc: []const u8 = window[@as(usize, @intCast(window_index))..@min(@as(usize, @intCast(window_index + 1)), @as(usize, @intCast(window.len)))];
    if (!std.mem.eql(u8, tc, wc)) {
        return 0;
    }
    return 1 + match_length_from_index(text, _concat_string(window, tc), text_index + 1, window_index + 1);
}

fn find_encoding_token(text: []const u8, search_buffer: []const u8) Token {
    if (@as(i64, @intCast(text.len)) == 0) {
        @panic("We need some text to work with.");
    }
    var length: i64 = 0;
    var offset: i64 = 0;
    if (@as(i64, @intCast(search_buffer.len)) == 0) {
        return .{ .offset = offset, .length = length, .indicator = text[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(text.len)))] };
    }
    var i: i64 = 0;
    while (i < @as(i64, @intCast(search_buffer.len))) {
        const ch: []const u8 = search_buffer[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(search_buffer.len)))];
        const found_offset: i64 = @as(i64, @intCast(search_buffer.len)) - i;
        if (std.mem.eql(u8, ch, text[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(text.len)))])) {
            const found_length: i64 = match_length_from_index(text, search_buffer, 0, i);
            if (found_length >= length) {
                offset = found_offset;
                length = found_length;
            }
        }
        i = i + 1;
    }
    return .{ .offset = offset, .length = length, .indicator = text[@as(usize, @intCast(length))..@min(@as(usize, @intCast(length + 1)), @as(usize, @intCast(text.len)))] };
}

fn lz77_compress(text: []const u8, window_size: i64, lookahead: i64) []Token {
    const search_buffer_size: i64 = window_size - lookahead;
    var output: []Token = &[_]Token{};
    var search_buffer: []const u8 = "";
    var remaining: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, text.len) catch unreachable; @memcpy(tmp, text); break :blk tmp; };
    while (@as(i64, @intCast(remaining.len)) > 0) {
        const token: Token = find_encoding_token(remaining, search_buffer);
        const add_len: i64 = token.length + 1;
        search_buffer = _concat_string(search_buffer, remaining[@as(usize, @intCast(0))..@min(@as(usize, @intCast(add_len)), @as(usize, @intCast(remaining.len)))]);
        if (@as(i64, @intCast(search_buffer.len)) > search_buffer_size) {
            search_buffer = search_buffer[@as(usize, @intCast(@as(i64, @intCast(search_buffer.len)) - search_buffer_size))..@min(@as(usize, @intCast(@as(i64, @intCast(search_buffer.len)))), @as(usize, @intCast(search_buffer.len)))];
        }
        remaining = remaining[@as(usize, @intCast(add_len))..@min(@as(usize, @intCast(@as(i64, @intCast(remaining.len)))), @as(usize, @intCast(remaining.len)))];
        output = blk: { var _tmp = std.ArrayList(Token).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Token, output)) catch |err| handleError(err); _tmp.append(token) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return output;
}

fn lz77_decompress(tokens: []Token) []const u8 {
    var output: []const u8 = "";
    for (tokens) |__it0| {
        const t = __it0;
        var i: i64 = 0;
        while (i < t.length) {
            output = _concat_string(output, output[@as(usize, @intCast(@as(i64, @intCast(output.len)) - t.offset))..@min(@as(usize, @intCast(@as(i64, @intCast(output.len)) - t.offset + 1)), @as(usize, @intCast(output.len)))]);
            i = i + 1;
        }
        output = _concat_string(output, t.indicator);
    }
    return output;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        c1_var = lz77_compress("ababcbababaa", 13, 6);
        c2_var = lz77_compress("aacaacabcabaaac", 13, 6);
        tokens_example_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc(Tokens_example, 8) catch unreachable; _tmp0[0] = .{ .offset = 0, .length = 0, .indicator = "c" }; _tmp0[1] = .{ .offset = 0, .length = 0, .indicator = "a" }; _tmp0[2] = .{ .offset = 0, .length = 0, .indicator = "b" }; _tmp0[3] = .{ .offset = 0, .length = 0, .indicator = "r" }; _tmp0[4] = .{ .offset = 3, .length = 1, .indicator = "c" }; _tmp0[5] = .{ .offset = 2, .length = 1, .indicator = "d" }; _tmp0[6] = .{ .offset = 7, .length = 4, .indicator = "r" }; _tmp0[7] = .{ .offset = 3, .length = 5, .indicator = "d" }; break :blk0 _tmp0; };
        std.debug.print("{s}\n", .{tokens_to_string(c1_var)});
        std.debug.print("{s}\n", .{tokens_to_string(c2_var)});
        std.debug.print("{s}\n", .{lz77_decompress(tokens_example_var[0..])});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
