// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    freq: i64,
    left: i64,
    right: i64,
};

const Leaf = struct {
    symbol: []const u8,
    freq: i64,
};

fn get_freq(n: std.StringHashMap(i64)) i64 {
    return if (n.get("op").? == 0) 0 else if (n.get("op").? == 1) 0 else "";
}

fn sort_nodes(nodes: []std.StringHashMap(i64)) []std.StringHashMap(i64) {
    var arr: []std.StringHashMap(i64) = blk: { const tmp = std.heap.page_allocator.alloc(std.StringHashMap(i64), nodes.len) catch unreachable; @memcpy(tmp, nodes); break :blk tmp; };
    var i: i64 = 1;
    while (i < @as(i64, @intCast(arr.len))) {
        var key: std.StringHashMap(i64) = arr[@as(usize, @intCast(i))];
        var j: i64 = i - 1;
        while (j >= 0 and get_freq(arr[@as(usize, @intCast(j))]) > get_freq(key)) {
            arr[@as(usize, @intCast(j + 1))] = arr[@as(usize, @intCast(j))];
            j = j - 1;
        }
        arr[@as(usize, @intCast(j + 1))] = key;
        i = i + 1;
    }
    return arr;
}

fn rest(nodes: []std.StringHashMap(i64)) []std.StringHashMap(i64) {
    var res: []std.StringHashMap(i64) = &[_]std.StringHashMap(i64){};
    var i: i64 = 1;
    while (i < @as(i64, @intCast(nodes.len))) {
        res = blk: { var _tmp = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const std.StringHashMap(i64), res)) catch |err| handleError(err); _tmp.append(nodes[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn count_freq(text: []const u8) []std.StringHashMap(i64) {
    var chars: [][]const u8 = &[_][]const u8{};
    var freqs: []i64 = &[_]i64{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(text.len))) {
        const c: []const u8 = text[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(text.len)))];
        var j: i64 = 0;
        var found: bool = false;
        while (j < @as(i64, @intCast(chars.len))) {
            if (std.mem.eql(u8, chars[@as(usize, @intCast(j))], c)) {
                freqs[@as(usize, @intCast(j))] = freqs[@as(usize, @intCast(j))] + 1;
                found = true;
                break;
            }
            j = j + 1;
        }
        if (!(found)) {
            chars = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, chars)) catch |err| handleError(err); _tmp.append(c) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            freqs = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, freqs)) catch |err| handleError(err); _tmp.append(1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    var leaves: []std.StringHashMap(i64) = &[_]std.StringHashMap(i64){};
    var k: i64 = 0;
    while (k < @as(i64, @intCast(chars.len))) {
        leaves = blk: { var _tmp = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const std.StringHashMap(i64), leaves)) catch |err| handleError(err); _tmp.append(.{ .op = 0, .symbol = chars[@as(usize, @intCast(k))], .freq = freqs[@as(usize, @intCast(k))] }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        k = k + 1;
    }
    return sort_nodes(leaves);
}

fn build_tree(nodes: []std.StringHashMap(i64)) std.StringHashMap(i64) {
    var arr: []std.StringHashMap(i64) = blk: { const tmp = std.heap.page_allocator.alloc(std.StringHashMap(i64), nodes.len) catch unreachable; @memcpy(tmp, nodes); break :blk tmp; };
    while (@as(i64, @intCast(arr.len)) > 1) {
        var left: std.StringHashMap(i64) = arr[@as(usize, @intCast(0))];
        arr = rest(arr);
        var right: std.StringHashMap(i64) = arr[@as(usize, @intCast(0))];
        arr = rest(arr);
        const node: Node = .{ .op = 1, .freq = get_freq(left) + get_freq(right), .left = left, .right = right };
        arr = blk: { var _tmp = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const std.StringHashMap(i64), arr)) catch |err| handleError(err); _tmp.append(node) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        arr = sort_nodes(arr);
    }
    return arr[@as(usize, @intCast(0))];
}

fn concat_pairs(a: [][][]const u8, b: [][][]const u8) [][][]const u8 {
    var res: [][][]const u8 = blk: { const tmp = std.heap.page_allocator.alloc([][]const u8, a.len) catch unreachable; @memcpy(tmp, a); break :blk tmp; };
    var i: i64 = 0;
    while (i < @as(i64, @intCast(b.len))) {
        res = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, res)) catch |err| handleError(err); _tmp.append(b[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn collect_codes(tree: std.StringHashMap(i64), _: []const u8) [][][]const u8 {
    return if (tree.get("op").? == 0) 0 else if (tree.get("op").? == 1) 0 else "";
}

fn find_code(pairs: [][][]const u8, ch: []const u8) []const u8 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(pairs.len))) {
        if (std.mem.eql(u8, pairs[@as(usize, @intCast(i))][@as(usize, @intCast(0))], ch)) {
            return pairs[@as(usize, @intCast(i))][@as(usize, @intCast(1))];
        }
        i = i + 1;
    }
    return "";
}

fn huffman_encode(text: []const u8) []const u8 {
    if (text.len == 0) {
        return "";
    }
    var leaves: []std.StringHashMap(i64) = count_freq(text);
    var tree: std.StringHashMap(i64) = build_tree(leaves);
    const codes: [][][]const u8 = collect_codes(tree, "");
    var encoded: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(text.len))) {
        const c: []const u8 = text[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(text.len)))];
        encoded = _concat_string(_concat_string(encoded, find_code(codes, c)), " ");
        i = i + 1;
    }
    return encoded;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{huffman_encode("beep boop beer!")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
