// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const example1_var: []const u8 = "AAAABBBCCDAA";
var encoded1_var: []const u8 = &[_]u8{};
const example2_var: []const u8 = "A";
var encoded2_var: []const u8 = &[_]u8{};
const example3_var: []const u8 = "AAADDDDDDFFFCCCAAVVVV";
var encoded3_var: []const u8 = &[_]u8{};

fn run_length_encode(text: []const u8) []const u8 {
    if (@as(i64, @intCast(text.len)) == 0) {
        return "";
    }
    var encoded: []const u8 = "";
    var count: i64 = 1;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(text.len))) {
        if (i + 1 < @as(i64, @intCast(text.len)) and std.mem.eql(u8, text[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], text[@as(usize, @intCast(i + 1))..@as(usize, @intCast(i + 1)) + 1])) {
            count = count + 1;
        } else {
            encoded = _concat_string(_concat_string(encoded, text[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]), _str(count));
            count = 1;
        }
        i = i + 1;
    }
    return encoded;
}

fn run_length_decode(encoded: []const u8) []const u8 {
    var res: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(encoded.len))) {
        const ch: []const u8 = encoded[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        i = i + 1;
        var num_str: []const u8 = "";
        while (i < @as(i64, @intCast(encoded.len)) and std.mem.order(u8, encoded[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], "0") != .lt and std.mem.order(u8, encoded[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], "9") != .gt) {
            num_str = _concat_string(num_str, encoded[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
            i = i + 1;
        }
        var count: i64 = std.fmt.parseInt(i64, num_str, 10) catch 0;
        var j: i64 = 0;
        while (j < count) {
            res = _concat_string(res, ch);
            j = j + 1;
        }
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        encoded1_var = run_length_encode(example1_var);
        encoded2_var = run_length_encode(example2_var);
        encoded3_var = run_length_encode(example3_var);
        std.debug.print("{s}\n", .{encoded1_var});
        std.debug.print("{s}\n", .{run_length_decode(encoded1_var)});
        std.debug.print("{s}\n", .{encoded2_var});
        std.debug.print("{s}\n", .{run_length_decode(encoded2_var)});
        std.debug.print("{s}\n", .{encoded3_var});
        std.debug.print("{s}\n", .{run_length_decode(encoded3_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
