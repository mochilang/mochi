// Generated by Mochi Zig transpiler on 2025-08-12 11:18 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var test_graph_var: [][]i64 = &[_][]i64{};
var result_var: [][]i64 = &[_][]i64{};

fn bfs(graph_param: [][]i64, s_param: i64, t_param: i64, parent_param: []i64) bool {
    var graph_var: [][]i64 = graph_param;
    graph_var = graph_var;
    var s_var: i64 = s_param;
    s_var = s_var;
    var t_var: i64 = t_param;
    t_var = t_var;
    var parent_var: []i64 = parent_param;
    parent_var = parent_var;
    var visited: []bool = @constCast(&[_]bool{})[0..];
    visited = visited;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(graph_var.len))) {
        visited = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, visited)) catch |err| handleError(err); _tmp.append(false) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var queue: []i64 = @constCast(&([1]i64{s_var}))[0..];
    queue = queue;
    var head: i64 = 0;
    head = head;
    visited[@as(usize, @intCast(s_var))] = true;
    while (head < @as(i64, @intCast(queue.len))) {
        const u: i64 = queue[@as(usize, @intCast(head))];
        head = head + 1;
        var ind: i64 = 0;
        ind = ind;
        while (ind < @as(i64, @intCast(graph_var[@as(usize, @intCast(u))].len))) {
            if (visited[@as(usize, @intCast(ind))] == false and graph_var[@as(usize, @intCast(u))][@as(usize, @intCast(ind))] > 0) {
                queue = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp.append(ind) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                visited[@as(usize, @intCast(ind))] = true;
                parent_var[@as(usize, @intCast(ind))] = u;
            }
            ind = ind + 1;
        }
    }
    return visited[@as(usize, @intCast(t_var))];
}

fn mincut(graph_param_1: [][]i64, source_param: i64, sink_param: i64) [][]i64 {
    var graph_var: [][]i64 = graph_param_1;
    graph_var = graph_var;
    var source_var: i64 = source_param;
    source_var = source_var;
    var sink_var: i64 = sink_param;
    sink_var = sink_var;
    var g: [][]i64 = blk: { const tmp = std.heap.page_allocator.alloc([]i64, graph_var.len) catch unreachable; @memcpy(tmp, graph_var); break :blk tmp; };
    g = g;
    var parent: []i64 = @constCast(&[_]i64{})[0..];
    parent = parent;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(g.len))) {
        parent = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, parent)) catch |err| handleError(err); _tmp.append(0 - 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var temp: [][]i64 = @constCast(&[_][]i64{})[0..];
    temp = temp;
    i = 0;
    while (i < @as(i64, @intCast(g.len))) {
        var row: []i64 = @constCast(&[_]i64{})[0..];
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(g[@as(usize, @intCast(i))].len))) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(g[@as(usize, @intCast(i))][@as(usize, @intCast(j))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        temp = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, temp)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    while (bfs(g, source_var, sink_var, parent)) {
        var path_flow: i64 = 1000000000;
        path_flow = path_flow;
        var s: i64 = sink_var;
        s = s;
        while (s != source_var) {
            const p: i64 = parent[@as(usize, @intCast(s))];
            const cap: i64 = g[@as(usize, @intCast(p))][@as(usize, @intCast(s))];
            if (cap < path_flow) {
                path_flow = cap;
            }
            s = p;
        }
        var v: i64 = sink_var;
        v = v;
        while (v != source_var) {
            const u: i64 = parent[@as(usize, @intCast(v))];
            g[@as(usize, @intCast(u))][@as(usize, @intCast(v))] = g[@as(usize, @intCast(u))][@as(usize, @intCast(v))] - path_flow;
            g[@as(usize, @intCast(v))][@as(usize, @intCast(u))] = g[@as(usize, @intCast(v))][@as(usize, @intCast(u))] + path_flow;
            v = u;
        }
    }
    var res: [][]i64 = @constCast(&[_][]i64{})[0..];
    res = res;
    i = 0;
    while (i < @as(i64, @intCast(g.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(g[@as(usize, @intCast(0))].len))) {
            if (g[@as(usize, @intCast(i))][@as(usize, @intCast(j))] == 0 and temp[@as(usize, @intCast(i))][@as(usize, @intCast(j))] > 0) {
                res = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, res)) catch |err| handleError(err); _tmp.append(@constCast(&([2]i64{i, j}))[0..]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        test_graph_var = std.heap.page_allocator.dupe([]i64, (&([6][]i64{@constCast(&([6]i64{0, 16, 13, 0, 0, 0}))[0..], @constCast(&([6]i64{0, 0, 10, 12, 0, 0}))[0..], @constCast(&([6]i64{0, 4, 0, 0, 14, 0}))[0..], @constCast(&([6]i64{0, 0, 9, 0, 0, 20}))[0..], @constCast(&([6]i64{0, 0, 0, 7, 0, 4}))[0..], @constCast(&([6]i64{0, 0, 0, 0, 0, 0}))[0..]}))[0..]) catch unreachable;
        result_var = mincut(test_graph_var, 0, 5);
        std.debug.print("{s}\n", .{_str(result_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
