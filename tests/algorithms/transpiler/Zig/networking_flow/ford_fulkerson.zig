// Generated by Mochi Zig transpiler on 2025-08-16 09:25 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const INF_var: i64 = 1000000000;
const graph_var: [][]i64 = @constCast(([6][]i64{@constCast(([6]i64{0, 16, 13, 0, 0, 0})[0..6]), @constCast(([6]i64{0, 0, 10, 12, 0, 0})[0..6]), @constCast(([6]i64{0, 4, 0, 0, 14, 0})[0..6]), @constCast(([6]i64{0, 0, 9, 0, 0, 20})[0..6]), @constCast(([6]i64{0, 0, 0, 7, 0, 4})[0..6]), @constCast(([6]i64{0, 0, 0, 0, 0, 0})[0..6])})[0..6]);

fn breadth_first_search(graph_param: [][]i64, source: i64, sink: i64, parent_param: []i64) bool {
    var parent_var: []i64 = parent_param;
    parent_var = parent_var;
    var visited: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
    visited = visited;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(graph_param.len))) {
        visited = blk0: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, visited)) catch |err| handleError(err); _tmp.append(false) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    var queue: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    queue = queue;
    queue = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp_1.append(source) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    visited[_idx(visited.len, source)] = true;
    var head: i64 = 0;
    head = head;
    while (head < @as(i64, @intCast(queue.len))) {
        const u: i64 = queue[_idx(queue.len, head)];
        head = head +% 1;
        const row: []i64 = graph_param[_idx(graph_param.len, u)];
        var ind: i64 = 0;
        ind = ind;
        while (ind < @as(i64, @intCast(row.len))) {
            const capacity: i64 = row[_idx(row.len, ind)];
            if (visited[_idx(visited.len, ind)] == false and capacity > 0) {
                queue = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp_2.append(ind) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
                visited[_idx(visited.len, ind)] = true;
                parent_var[_idx(parent_var.len, ind)] = u;
            }
            ind = ind +% 1;
        }
    }
    return visited[_idx(visited.len, sink)];
}

fn ford_fulkerson(graph_param_1: [][]i64, source_1: i64, sink_1: i64) i64 {
    var graph_var_1: [][]i64 = graph_param_1;
    graph_var_1 = graph_var_1;
    var parent: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    parent = parent;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(graph_var_1.len))) {
        parent = blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, parent)) catch |err| handleError(err); _tmp_3.append(0 -% 1) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    var max_flow: i64 = 0;
    max_flow = max_flow;
    while (breadth_first_search(graph_var_1, source_1, sink_1, parent)) {
        var path_flow: i64 = INF_var;
        path_flow = path_flow;
        var s: i64 = sink_1;
        s = s;
        while (s != source_1) {
            const prev: i64 = parent[_idx(parent.len, s)];
            const cap: i64 = graph_var_1[_idx(graph_var_1.len, prev)][_idx(graph_var_1[_idx(graph_var_1.len, prev)].len, s)];
            if (cap < path_flow) {
                path_flow = cap;
            }
            s = prev;
        }
        max_flow = max_flow +% path_flow;
        var v: i64 = sink_1;
        v = v;
        while (v != source_1) {
            const u_1: i64 = parent[_idx(parent.len, v)];
            graph_var_1[_idx(graph_var_1.len, u_1)][_idx(graph_var_1[_idx(graph_var_1.len, u_1)].len, v)] = graph_var_1[_idx(graph_var_1.len, u_1)][_idx(graph_var_1[_idx(graph_var_1.len, u_1)].len, v)] -% path_flow;
            graph_var_1[_idx(graph_var_1.len, v)][_idx(graph_var_1[_idx(graph_var_1.len, v)].len, u_1)] = graph_var_1[_idx(graph_var_1.len, v)][_idx(graph_var_1[_idx(graph_var_1.len, v)].len, u_1)] +% path_flow;
            v = u_1;
        }
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(parent.len))) {
            parent[_idx(parent.len, j)] = 0 -% 1;
            j = j +% 1;
        }
    }
    return max_flow;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(ford_fulkerson(graph_var, 0, 5))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
