// Generated by Mochi Zig transpiler on 2025-08-08 10:32 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const SYMBOLS_var: []const u8 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";

fn gcd(a: i64, b: i64) i64 {
    var x: i64 = a;
    x = x;
    var y: i64 = b;
    y = y;
    while (y != 0) {
        var temp: i64 = @mod(x, y);
        temp = temp;
        x = y;
        y = temp;
    }
    return x;
}

fn mod_inverse(a: i64, m: i64) i64 {
    if (gcd(a, m) != 1) {
        @panic(_concat_string(_concat_string(_concat_string(_concat_string("mod inverse of ", _str(a)), " and "), _str(m)), " does not exist"));
    }
    var u1_: i64 = 1;
    u1_ = u1_;
    var u2_: i64 = 0;
    u2_ = u2_;
    var u3_: i64 = a;
    u3_ = u3_;
    var v1: i64 = 0;
    v1 = v1;
    var v2: i64 = 1;
    v2 = v2;
    var v3: i64 = m;
    v3 = v3;
    while (v3 != 0) {
        var q: i64 = @divTrunc(u3_, v3);
        q = q;
        var t1: i64 = u1_ - q * v1;
        t1 = t1;
        var t2: i64 = u2_ - q * v2;
        t2 = t2;
        var t3: i64 = u3_ - q * v3;
        t3 = t3;
        u1_ = v1;
        u2_ = v2;
        u3_ = v3;
        v1 = t1;
        v2 = t2;
        v3 = t3;
    }
    var res: i64 = @mod(u1_, m);
    res = res;
    if (res < 0) {
        return res + m;
    }
    return res;
}

fn find_symbol(ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(SYMBOLS_var.len))) {
        if (std.mem.eql(u8, SYMBOLS_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn check_keys(key_a: i64, key_b: i64, mode: []const u8) void {
    var m: i64 = @as(i64, @intCast(SYMBOLS_var.len));
    m = m;
    if (std.mem.eql(u8, mode, "encrypt")) {
        if (key_a == 1) {
            @panic("The affine cipher becomes weak when key A is set to 1. Choose different key");
        }
        if (key_b == 0) {
            @panic("The affine cipher becomes weak when key B is set to 0. Choose different key");
        }
    }
    if (key_a < 0 or key_b < 0 or key_b > m - 1) {
        @panic(_concat_string("Key A must be greater than 0 and key B must be between 0 and ", _str(m - 1)));
    }
    if (gcd(key_a, m) != 1) {
        @panic(_concat_string(_concat_string(_concat_string(_concat_string("Key A ", _str(key_a)), " and the symbol set size "), _str(m)), " are not relatively prime. Choose a different key."));
    }
}

fn encrypt_message(key: i64, message: []const u8) []const u8 {
    var m: i64 = @as(i64, @intCast(SYMBOLS_var.len));
    m = m;
    var key_a: i64 = @divTrunc(key, m);
    key_a = key_a;
    var key_b: i64 = @mod(key, m);
    key_b = key_b;
    check_keys(key_a, key_b, "encrypt");
    var cipher_text: []const u8 = "";
    cipher_text = cipher_text;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(message.len))) {
        var ch: []const u8 = message[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        var index: i64 = find_symbol(ch);
        index = index;
        if (index >= 0) {
            cipher_text = _concat_string(cipher_text, SYMBOLS_var[@as(usize, @intCast(@mod(index * key_a + key_b, m)))..@as(usize, @intCast(@mod(index * key_a + key_b, m))) + 1]);
        } else {
            cipher_text = _concat_string(cipher_text, ch);
        }
        i = i + 1;
    }
    return cipher_text;
}

fn decrypt_message(key: i64, message: []const u8) []const u8 {
    var m: i64 = @as(i64, @intCast(SYMBOLS_var.len));
    m = m;
    var key_a: i64 = @divTrunc(key, m);
    key_a = key_a;
    var key_b: i64 = @mod(key, m);
    key_b = key_b;
    check_keys(key_a, key_b, "decrypt");
    var inv: i64 = mod_inverse(key_a, m);
    inv = inv;
    var plain_text: []const u8 = "";
    plain_text = plain_text;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(message.len))) {
        var ch: []const u8 = message[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        var index: i64 = find_symbol(ch);
        index = index;
        if (index >= 0) {
            var n: i64 = (index - key_b) * inv;
            n = n;
            var pos: i64 = @mod(n, m);
            pos = pos;
            var final: i64 = if (pos < 0) pos + m else pos;
            final = final;
            plain_text = _concat_string(plain_text, SYMBOLS_var[@as(usize, @intCast(final))..@as(usize, @intCast(final)) + 1]);
        } else {
            plain_text = _concat_string(plain_text, ch);
        }
        i = i + 1;
    }
    return plain_text;
}

fn mochi_main() void {
    var key: i64 = 4545;
    key = key;
    var msg: []const u8 = "The affine cipher is a type of monoalphabetic substitution cipher.";
    msg = msg;
    var enc: []const u8 = encrypt_message(key, msg);
    enc = enc;
    std.debug.print("{s}\n", .{enc});
    std.debug.print("{s}\n", .{decrypt_message(key, enc)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const Pair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(Pair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(Pair, pairs.items, {}, struct {
                pub fn less(_: void, a: Pair, b: Pair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
