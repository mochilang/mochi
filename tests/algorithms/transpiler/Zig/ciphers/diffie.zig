// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const prime_var: i64 = 23;
var primitive_root_var: i64 = 0;

fn mod_pow(base: i64, exp: i64, mod: i64) i64 {
    var result: i64 = 1;
    result = result;
    var b: i64 = @mod(base, mod);
    b = b;
    var e: i64 = exp;
    e = e;
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = @mod(result * b, mod);
        }
        e = @divTrunc(e, 2);
        b = @mod(b * b, mod);
    }
    return result;
}

fn contains(xs: []i64, val: i64) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (xs[@as(usize, @intCast(i))] == val) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn find_primitive(modulus: i64) i64 {
    var r: i64 = 1;
    r = r;
    while (r < modulus) {
        var li: []i64 = &[_]i64{};
        li = li;
        var x: i64 = 0;
        x = x;
        var valid: bool = true;
        valid = valid;
        while (x < modulus - 1 and valid) {
            var value: i64 = mod_pow(r, x, modulus);
            value = value;
            if (contains(li, value)) {
                valid = false;
            } else {
                li = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, li)) catch |err| handleError(err); _tmp.append(value) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                x = x + 1;
            }
        }
        if (valid) {
            return r;
        }
        r = r + 1;
    }
    return 0 - 1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        primitive_root_var = find_primitive(prime_var);
        a_public = mod_pow(primitive_root_var, a_private, prime_var);
        b_public = mod_pow(primitive_root_var, b_private, prime_var);
        a_secret = mod_pow(b_public, a_private, prime_var);
        b_secret = mod_pow(a_public, b_private, prime_var);
        std.debug.print("{s}\n", .{_str(find_primitive(7))});
        std.debug.print("{s}\n", .{_str(find_primitive(11))});
        std.debug.print("{s}\n", .{_str(find_primitive(8))});
        if (primitive_root_var == 0 - 1) {
            std.debug.print("{s}\n", .{"Cannot find the primitive for the value: -1"});
        } else {
            var a_private: i64 = 6;
            a_private = a_private;
            var b_private: i64 = 15;
            b_private = b_private;
            var a_public: i64 = 0;
            a_public = a_public;
            var b_public: i64 = 0;
            b_public = b_public;
            var a_secret: i64 = 0;
            a_secret = a_secret;
            var b_secret: i64 = 0;
            b_secret = b_secret;
            std.debug.print("{s}\n", .{_concat_string("The key value generated by A is: ", _str(a_secret))});
            std.debug.print("{s}\n", .{_concat_string("The key value generated by B is: ", _str(b_secret))});
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
