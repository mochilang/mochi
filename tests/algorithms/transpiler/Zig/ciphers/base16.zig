// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var example1_var: []i64 = &[_]i64{};
var example2_var: []i64 = &[_]i64{};

fn base16_encode(data: []i64) []const u8 {
    var digits: []const u8 = "0123456789ABCDEF";
    digits = digits;
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(data.len))) {
        var b: i64 = data[@as(usize, @intCast(i))];
        b = b;
        if (b < 0 or b > 255) {
            @panic("byte out of range");
        }
        var hi: i64 = @divTrunc(b, 16);
        hi = hi;
        var lo: i64 = @mod(b, 16);
        lo = lo;
        res = _concat_string(_concat_string(res, digits[@as(usize, @intCast(hi))..@min(@as(usize, @intCast(hi + 1)), @as(usize, @intCast(digits.len)))]), digits[@as(usize, @intCast(lo))..@min(@as(usize, @intCast(lo + 1)), @as(usize, @intCast(digits.len)))]);
        i = i + 1;
    }
    return res;
}

fn base16_decode(data: []const u8) []i64 {
    var digits: []const u8 = "0123456789ABCDEF";
    digits = digits;
    if (@mod(@as(i64, @intCast(data.len)), 2) != 0) {
        @panic("Base16 encoded data is invalid: Data does not have an even number of hex digits.");
    }
    var out: []i64 = &[_]i64{};
    out = out;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(data.len))) {
        var hi_char: []const u8 = data[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(data.len)))];
        hi_char = hi_char;
        var lo_char: []const u8 = data[@as(usize, @intCast(i + 1))..@min(@as(usize, @intCast(i + 2)), @as(usize, @intCast(data.len)))];
        lo_char = lo_char;
        var hi: i64 = hex_value(hi_char);
        hi = hi;
        var lo: i64 = hex_value(lo_char);
        lo = lo;
        if (hi < 0 or lo < 0) {
            @panic("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters.");
        }
        out = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, out)) catch |err| handleError(err); _tmp.append(hi * 16 + lo) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 2;
    }
    return out;
}

fn hex_value(digits: []const u8, ch: []const u8) i64 {
    var j: i64 = 0;
    j = j;
    while (j < 16) {
        if (std.mem.eql(u8, digits[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(digits.len)))], ch)) {
            return j;
        }
        j = j + 1;
    }
    return 0 - 1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        example1_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 12) catch unreachable; _tmp0[0] = 72; _tmp0[1] = 101; _tmp0[2] = 108; _tmp0[3] = 108; _tmp0[4] = 111; _tmp0[5] = 32; _tmp0[6] = 87; _tmp0[7] = 111; _tmp0[8] = 114; _tmp0[9] = 108; _tmp0[10] = 100; _tmp0[11] = 33; break :blk0 _tmp0; };
        example2_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 12) catch unreachable; _tmp1[0] = 72; _tmp1[1] = 69; _tmp1[2] = 76; _tmp1[3] = 76; _tmp1[4] = 79; _tmp1[5] = 32; _tmp1[6] = 87; _tmp1[7] = 79; _tmp1[8] = 82; _tmp1[9] = 76; _tmp1[10] = 68; _tmp1[11] = 33; break :blk1 _tmp1; };
        std.debug.print("{s}\n", .{base16_encode(example1_var)});
        std.debug.print("{s}\n", .{base16_encode(example2_var)});
        std.debug.print("{s}\n", .{base16_encode(&[_]i64{})});
        std.debug.print("{s}\n", .{_str(base16_decode("48656C6C6F20576F726C6421"))});
        std.debug.print("{s}\n", .{_str(base16_decode("48454C4C4F20574F524C4421"))});
        std.debug.print("{s}\n", .{_str(base16_decode(""))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
