// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const BYTE_SIZE_var: i64 = 256;

fn pow_int(base: i64, exp: i64) i64 {
    var result: i64 = 1;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < exp) {
        result = result * base;
        i = i + 1;
    }
    return result;
}

fn mod_pow(base: i64, exponent: i64, modulus: i64) i64 {
    var result: i64 = 1;
    result = result;
    var b: i64 = @mod(base, modulus);
    b = b;
    var e: i64 = exponent;
    e = e;
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = @mod(result * b, modulus);
        }
        e = @divTrunc(e, 2);
        b = @mod(b * b, modulus);
    }
    return result;
}

fn ord(ch: []const u8) i64 {
    if (std.mem.eql(u8, ch, " ")) {
        return 32;
    }
    if (std.mem.eql(u8, ch, "a")) {
        return 97;
    }
    if (std.mem.eql(u8, ch, "b")) {
        return 98;
    }
    if (std.mem.eql(u8, ch, "c")) {
        return 99;
    }
    if (std.mem.eql(u8, ch, "d")) {
        return 100;
    }
    if (std.mem.eql(u8, ch, "e")) {
        return 101;
    }
    if (std.mem.eql(u8, ch, "f")) {
        return 102;
    }
    if (std.mem.eql(u8, ch, "g")) {
        return 103;
    }
    if (std.mem.eql(u8, ch, "h")) {
        return 104;
    }
    if (std.mem.eql(u8, ch, "i")) {
        return 105;
    }
    if (std.mem.eql(u8, ch, "j")) {
        return 106;
    }
    if (std.mem.eql(u8, ch, "k")) {
        return 107;
    }
    if (std.mem.eql(u8, ch, "l")) {
        return 108;
    }
    if (std.mem.eql(u8, ch, "m")) {
        return 109;
    }
    if (std.mem.eql(u8, ch, "n")) {
        return 110;
    }
    if (std.mem.eql(u8, ch, "o")) {
        return 111;
    }
    if (std.mem.eql(u8, ch, "p")) {
        return 112;
    }
    if (std.mem.eql(u8, ch, "q")) {
        return 113;
    }
    if (std.mem.eql(u8, ch, "r")) {
        return 114;
    }
    if (std.mem.eql(u8, ch, "s")) {
        return 115;
    }
    if (std.mem.eql(u8, ch, "t")) {
        return 116;
    }
    if (std.mem.eql(u8, ch, "u")) {
        return 117;
    }
    if (std.mem.eql(u8, ch, "v")) {
        return 118;
    }
    if (std.mem.eql(u8, ch, "w")) {
        return 119;
    }
    if (std.mem.eql(u8, ch, "x")) {
        return 120;
    }
    if (std.mem.eql(u8, ch, "y")) {
        return 121;
    }
    if (std.mem.eql(u8, ch, "z")) {
        return 122;
    }
    return 0;
}

fn chr(code: i64) []const u8 {
    if (code == 32) {
        return " ";
    }
    if (code == 97) {
        return "a";
    }
    if (code == 98) {
        return "b";
    }
    if (code == 99) {
        return "c";
    }
    if (code == 100) {
        return "d";
    }
    if (code == 101) {
        return "e";
    }
    if (code == 102) {
        return "f";
    }
    if (code == 103) {
        return "g";
    }
    if (code == 104) {
        return "h";
    }
    if (code == 105) {
        return "i";
    }
    if (code == 106) {
        return "j";
    }
    if (code == 107) {
        return "k";
    }
    if (code == 108) {
        return "l";
    }
    if (code == 109) {
        return "m";
    }
    if (code == 110) {
        return "n";
    }
    if (code == 111) {
        return "o";
    }
    if (code == 112) {
        return "p";
    }
    if (code == 113) {
        return "q";
    }
    if (code == 114) {
        return "r";
    }
    if (code == 115) {
        return "s";
    }
    if (code == 116) {
        return "t";
    }
    if (code == 117) {
        return "u";
    }
    if (code == 118) {
        return "v";
    }
    if (code == 119) {
        return "w";
    }
    if (code == 120) {
        return "x";
    }
    if (code == 121) {
        return "y";
    }
    if (code == 122) {
        return "z";
    }
    return "";
}

fn get_blocks_from_text(message: []const u8, block_size: i64) []i64 {
    var block_ints: []i64 = &[_]i64{};
    block_ints = block_ints;
    var block_start: i64 = 0;
    block_start = block_start;
    while (block_start < @as(i64, @intCast(message.len))) {
        var block_int: i64 = 0;
        block_int = block_int;
        var i: i64 = block_start;
        i = i;
        while (i < block_start + block_size and i < @as(i64, @intCast(message.len))) {
            block_int = block_int + ord(message[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]) * pow_int(BYTE_SIZE_var, i - block_start);
            i = i + 1;
        }
        block_ints = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, block_ints)) catch |err| handleError(err); _tmp.append(block_int) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        block_start = block_start + block_size;
    }
    return block_ints;
}

fn get_text_from_blocks(block_ints: []i64, message_length: i64, block_size: i64) []const u8 {
    var message: []const u8 = "";
    message = message;
    for (block_ints) |__it0| {
        const block_int = __it0;
        var block: i64 = block_int;
        block = block;
        var i: i64 = block_size - 1;
        i = i;
        var block_message: []const u8 = "";
        block_message = block_message;
        while (i >= 0) {
            if (@as(i64, @intCast(message.len)) + i < message_length) {
                var ascii_number: i64 = @divTrunc(block, pow_int(BYTE_SIZE_var, i));
                ascii_number = ascii_number;
                block = @mod(block, pow_int(BYTE_SIZE_var, i));
                block_message = _concat_string(chr(ascii_number), block_message);
            }
            i = i - 1;
        }
        message = _concat_string(message, block_message);
    }
    return message;
}

fn encrypt_message(message: []const u8, n: i64, e: i64, block_size: i64) []i64 {
    var encrypted: []i64 = &[_]i64{};
    encrypted = encrypted;
    var blocks: []i64 = get_blocks_from_text(message, block_size);
    blocks = blocks;
    for (blocks) |__it1| {
        const block = __it1;
        encrypted = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, encrypted)) catch |err| handleError(err); _tmp.append(mod_pow(block, e, n)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return encrypted;
}

fn decrypt_message(blocks: []i64, _: i64, n: i64, d: i64, _: i64) []const u8 {
    var decrypted_blocks: []i64 = &[_]i64{};
    decrypted_blocks = decrypted_blocks;
    for (blocks) |__it2| {
        const block = __it2;
        decrypted_blocks = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, decrypted_blocks)) catch |err| handleError(err); _tmp.append(mod_pow(block, d, n)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    var message: []const u8 = "";
    message = message;
    for (decrypted_blocks) |__it3| {
        const num = __it3;
        message = _concat_string(message, chr(num));
    }
    return message;
}

fn mochi_main() void {
    var message: []const u8 = "hello world";
    message = message;
    var n: i64 = 3233;
    n = n;
    var e: i64 = 17;
    e = e;
    var d: i64 = 2753;
    d = d;
    var block_size: i64 = 1;
    block_size = block_size;
    var encrypted: []i64 = encrypt_message(message, n, e, block_size);
    encrypted = encrypted;
    std.debug.print("{s}\n", .{_str(encrypted)});
    var decrypted: []const u8 = decrypt_message(encrypted, @as(i64, @intCast(message.len)), n, d, block_size);
    decrypted = decrypted;
    std.debug.print("{s}\n", .{decrypted});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
