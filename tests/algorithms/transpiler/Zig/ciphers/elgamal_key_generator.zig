// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PublicKey = struct {
    key_size: i64,
    g: i64,
    e2: i64,
    p: i64,
};

const PrivateKey = struct {
    key_size: i64,
    d: i64,
};

const KeyPair = struct {
    public_key: PublicKey,
    private_key: PrivateKey,
};

const GCD = struct {
    g: i64,
    x: i64,
    y: i64,
};

var seed_var: i64 = 123456789;

fn rand() i64 {
    seed_var = @mod(seed_var * 1103515245 + 12345, 2147483647);
    return seed_var;
}

fn rand_range(min: i64, max: i64) i64 {
    return min + @mod(rand(), max - min + 1);
}

fn mod_pow(base: i64, exponent: i64, modulus: i64) i64 {
    var result: i64 = 1;
    result = result;
    var b: i64 = @mod(base, modulus);
    b = b;
    var e: i64 = exponent;
    e = e;
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = @mod(result * b, modulus);
        }
        e = @divTrunc(e, 2);
        b = @mod(b * b, modulus);
    }
    return result;
}

fn extended_gcd(a: i64, b: i64) GCD {
    if (b == 0) {
        return .{ .g = a, .x = 1, .y = 0 };
    }
    var res: GCD = extended_gcd(b, @mod(a, b));
    res = res;
    return .{ .g = res.g, .x = res.y, .y = res.x - @divTrunc(a, b) * res.y };
}

fn mod_inverse(a: i64, m: i64) i64 {
    var res: GCD = extended_gcd(a, m);
    res = res;
    if (res.g != 1) {
        @panic("inverse does not exist");
    }
    var r: i64 = @mod(res.x, m);
    r = r;
    if (r < 0) {
        return r + m;
    }
    return r;
}

fn pow2(n: i64) i64 {
    var r: i64 = 1;
    r = r;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        r = r * 2;
        i = i + 1;
    }
    return r;
}

fn is_probable_prime(n: i64, k: i64) bool {
    if (n <= 1) {
        return false;
    }
    if (n <= 3) {
        return true;
    }
    if (@mod(n, 2) == 0) {
        return false;
    }
    var r: i64 = 0;
    r = r;
    var d: i64 = n - 1;
    d = d;
    while (@mod(d, 2) == 0) {
        d = @divTrunc(d, 2);
        r = r + 1;
    }
    var i: i64 = 0;
    i = i;
    while (i < k) {
        var a: i64 = rand_range(2, n - 2);
        a = a;
        var x: i64 = mod_pow(a, d, n);
        x = x;
        if (x == 1 or x == n - 1) {
            i = i + 1;
            continue;
        }
        var j: i64 = 1;
        j = j;
        var found: bool = false;
        found = found;
        while (j < r) {
            x = mod_pow(x, 2, n);
            if (x == n - 1) {
                found = true;
                break;
            }
            j = j + 1;
        }
        if (!(found)) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn generate_large_prime(bits: i64) i64 {
    var min: i64 = pow2(bits - 1);
    min = min;
    var max: i64 = pow2(bits) - 1;
    max = max;
    var p: i64 = rand_range(min, max);
    p = p;
    if (@mod(p, 2) == 0) {
        p = p + 1;
    }
    while (!(is_probable_prime(p, 5))) {
        p = p + 2;
        if (p > max) {
            p = min + 1;
        }
    }
    return p;
}

fn primitive_root(p: i64) i64 {
    while (true) {
        var g: i64 = rand_range(3, p - 1);
        g = g;
        if (mod_pow(g, 2, p) == 1) {
            continue;
        }
        if (mod_pow(g, p, p) == 1) {
            continue;
        }
        return g;
    }
}

fn generate_key(key_size: i64) KeyPair {
    var p: i64 = generate_large_prime(key_size);
    p = p;
    var e1: i64 = primitive_root(p);
    e1 = e1;
    var d: i64 = rand_range(3, p - 1);
    d = d;
    var e2: i64 = mod_inverse(mod_pow(e1, d, p), p);
    e2 = e2;
    var public_key: PublicKey = .{ .key_size = key_size, .g = e1, .e2 = e2, .p = p };
    public_key = public_key;
    var private_key: PrivateKey = .{ .key_size = key_size, .d = d };
    private_key = private_key;
    return .{ .public_key = public_key, .private_key = private_key };
}

fn mochi_main() void {
    var key_size: i64 = 16;
    key_size = key_size;
    var kp: KeyPair = generate_key(key_size);
    kp = kp;
    var pub_: PublicKey = kp.public_key;
    pub_ = pub_;
    var priv: PrivateKey = kp.private_key;
    priv = priv;
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("public key: (", _str(pub_.key_size)), ", "), _str(pub_.g)), ", "), _str(pub_.e2)), ", "), _str(pub_.p)), ")")});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("private key: (", _str(priv.key_size)), ", "), _str(priv.d)), ")")});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
