// Generated by Mochi Zig transpiler on 2025-08-06 23:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const key_var: i64 = 6;
const message_var: []const u8 = "Harshil Darji";
var encrypted_var: []const u8 = &[_]u8{};
var decrypted_var: []const u8 = &[_]u8{};

fn encrypt_message(key_param: i64, message_param: []const u8) []const u8 {
    var result: []const u8 = "";
    var col: i64 = 0;
    while (col < key_param) {
        var pointer: i64 = col;
        while (pointer < @as(i64, @intCast(message_param.len))) {
            result = _concat_string(result, message_param[@as(usize, @intCast(pointer))..@as(usize, @intCast(pointer)) + 1]);
            pointer = pointer + key_param;
        }
        col = col + 1;
    }
    return result;
}

fn decrypt_message(key_param: i64, message_param: []const u8) []const u8 {
    const msg_len: i64 = @as(i64, @intCast(message_param.len));
    var num_cols: i64 = @divTrunc(msg_len, key_param);
    if (@mod(msg_len, key_param) != 0) {
        num_cols = num_cols + 1;
    }
    const num_rows: i64 = key_param;
    const num_shaded_boxes: i64 = num_cols * num_rows - msg_len;
    var plain: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < num_cols) {
        plain = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, plain)) catch |err| handleError(err); _tmp.append("") catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var col: i64 = 0;
    var row: i64 = 0;
    var idx: i64 = 0;
    while (idx < msg_len) {
        const ch: []const u8 = message_param[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1];
        plain[@as(usize, @intCast(col))] = _concat_string(plain[@as(usize, @intCast(col))], ch);
        col = col + 1;
        if (col == num_cols or col == num_cols - 1 and row >= num_rows - num_shaded_boxes) {
            col = 0;
            row = row + 1;
        }
        idx = idx + 1;
    }
    var result: []const u8 = "";
    i = 0;
    while (i < num_cols) {
        result = _concat_string(result, plain[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        encrypted_var = encrypt_message(key_var, message_var);
        decrypted_var = decrypt_message(key_var, encrypted_var);
        std.debug.print("{s}\n", .{encrypted_var});
        std.debug.print("{s}\n", .{decrypted_var});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
