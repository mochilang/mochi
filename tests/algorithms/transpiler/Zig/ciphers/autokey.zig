// Generated by Mochi Zig transpiler on 2025-08-08 10:32 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const LOWER_var: []const u8 = "abcdefghijklmnopqrstuvwxyz";
const UPPER_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

fn to_lowercase(s: []const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        var c: []const u8 = s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        c = c;
        var j: i64 = 0;
        j = j;
        var found: bool = false;
        found = found;
        while (j < 26) {
            if (std.mem.eql(u8, c, UPPER_var[@as(usize, @intCast(j))..@as(usize, @intCast(j)) + 1])) {
                res = _concat_string(res, LOWER_var[@as(usize, @intCast(j))..@as(usize, @intCast(j)) + 1]);
                found = true;
                break;
            }
            j = j + 1;
        }
        if (!(found)) {
            res = _concat_string(res, c);
        }
        i = i + 1;
    }
    return res;
}

fn char_index(c: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < 26) {
        if (std.mem.eql(u8, c, LOWER_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1])) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn index_char(i: i64) []const u8 {
    return LOWER_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
}

fn encrypt(plaintext_param: []const u8, key: []const u8) []const u8 {
    var plaintext_var: []const u8 = plaintext_param;
    plaintext_var = plaintext_var;
    if (@as(i64, @intCast(plaintext_var.len)) == 0) {
        @panic("plaintext is empty");
    }
    if (@as(i64, @intCast(key.len)) == 0) {
        @panic("key is empty");
    }
    var full_key: []const u8 = _concat_string(key, plaintext_var);
    full_key = full_key;
    plaintext_var = to_lowercase(plaintext_var);
    full_key = to_lowercase(full_key);
    var p_i: i64 = 0;
    p_i = p_i;
    var k_i: i64 = 0;
    k_i = k_i;
    var ciphertext: []const u8 = "";
    ciphertext = ciphertext;
    while (p_i < @as(i64, @intCast(plaintext_var.len))) {
        var p_char: []const u8 = plaintext_var[@as(usize, @intCast(p_i))..@as(usize, @intCast(p_i)) + 1];
        p_char = p_char;
        var p_idx: i64 = char_index(p_char);
        p_idx = p_idx;
        if (p_idx < 0) {
            ciphertext = _concat_string(ciphertext, p_char);
            p_i = p_i + 1;
        } else {
            var k_char: []const u8 = full_key[@as(usize, @intCast(k_i))..@as(usize, @intCast(k_i)) + 1];
            k_char = k_char;
            var k_idx: i64 = char_index(k_char);
            k_idx = k_idx;
            if (k_idx < 0) {
                k_i = k_i + 1;
            } else {
                var c_idx_: i64 = @mod(p_idx + k_idx, 26);
                c_idx_ = c_idx_;
                ciphertext = _concat_string(ciphertext, index_char(c_idx_));
                k_i = k_i + 1;
                p_i = p_i + 1;
            }
        }
    }
    return ciphertext;
}

fn decrypt(ciphertext: []const u8, key: []const u8) []const u8 {
    if (@as(i64, @intCast(ciphertext.len)) == 0) {
        @panic("ciphertext is empty");
    }
    if (@as(i64, @intCast(key.len)) == 0) {
        @panic("key is empty");
    }
    var current_key: []const u8 = to_lowercase(key);
    current_key = current_key;
    var c_i_: i64 = 0;
    c_i_ = c_i_;
    var k_i: i64 = 0;
    k_i = k_i;
    var plaintext: []const u8 = "";
    plaintext = plaintext;
    while (c_i_ < @as(i64, @intCast(ciphertext.len))) {
        var c_char_: []const u8 = ciphertext[@as(usize, @intCast(c_i_))..@as(usize, @intCast(c_i_)) + 1];
        c_char_ = c_char_;
        var c_idx_: i64 = char_index(c_char_);
        c_idx_ = c_idx_;
        if (c_idx_ < 0) {
            plaintext = _concat_string(plaintext, c_char_);
        } else {
            var k_char: []const u8 = current_key[@as(usize, @intCast(k_i))..@as(usize, @intCast(k_i)) + 1];
            k_char = k_char;
            var k_idx: i64 = char_index(k_char);
            k_idx = k_idx;
            var p_idx: i64 = @mod(c_idx_ - k_idx + 26, 26);
            p_idx = p_idx;
            var p_char: []const u8 = index_char(p_idx);
            p_char = p_char;
            plaintext = _concat_string(plaintext, p_char);
            current_key = _concat_string(current_key, p_char);
            k_i = k_i + 1;
        }
        c_i_ = c_i_ + 1;
    }
    return plaintext;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{encrypt("hello world", "coffee")});
        std.debug.print("{s}\n", .{decrypt("jsqqs avvwo", "coffee")});
        std.debug.print("{s}\n", .{encrypt("coffee is good as python", "TheAlgorithms")});
        std.debug.print("{s}\n", .{decrypt("vvjfpk wj ohvp su ddylsv", "TheAlgorithms")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
