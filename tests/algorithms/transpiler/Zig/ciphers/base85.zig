// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const ascii85_chars_var: []const u8 = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu";

fn indexOf(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn ord(ch: []const u8) i64 {
    var idx: i64 = indexOf(ascii85_chars_var, ch);
    idx = idx;
    if (idx >= 0) {
        return 33 + idx;
    }
    return 0;
}

fn chr(n: i64) []const u8 {
    if (n >= 33 and n <= 117) {
        return ascii85_chars_var[@as(usize, @intCast(n - 33))..@min(@as(usize, @intCast(n - 32)), @as(usize, @intCast(ascii85_chars_var.len)))];
    }
    return "?";
}

fn to_binary(n: i64, bits: i64) []const u8 {
    var b: []const u8 = "";
    b = b;
    var val: i64 = n;
    val = val;
    while (val > 0) {
        b = _concat_string(_str(@mod(val, 2)), b);
        val = @divTrunc(val, 2);
    }
    while (@as(i64, @intCast(b.len)) < bits) {
        b = _concat_string("0", b);
    }
    if (@as(i64, @intCast(b.len)) == 0) {
        b = "0";
    }
    return b;
}

fn bin_to_int(bits: []const u8) i64 {
    var n: i64 = 0;
    n = n;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(bits.len))) {
        if (std.mem.eql(u8, bits[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], "1")) {
            n = n * 2 + 1;
        } else {
            n = n * 2;
        }
        i = i + 1;
    }
    return n;
}

fn reverse(s: []const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = @as(i64, @intCast(s.len)) - 1;
    i = i;
    while (i >= 0) {
        res = _concat_string(res, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
        i = i - 1;
    }
    return res;
}

fn base10_to_85(d: i64) []const u8 {
    if (d > 0) {
        return _concat_string(chr(@mod(d, 85) + 33), base10_to_85(@divTrunc(d, 85)));
    }
    return "";
}

fn base85_to_10(digits: []const u8) i64 {
    var value: i64 = 0;
    value = value;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(digits.len))) {
        value = value * 85 + (ord(digits[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]) - 33);
        i = i + 1;
    }
    return value;
}

fn ascii85_encode(data: []const u8) []const u8 {
    var binary_data: []const u8 = "";
    binary_data = binary_data;
    for (data) |__it0| {
        const ch: []const u8 = &[_]u8{__it0};
        binary_data = _concat_string(binary_data, to_binary(ord(ch), 8));
    }
    var null_values: i64 = @divTrunc(32 * (@divTrunc(@as(i64, @intCast(binary_data.len)), 32) + 1) - @as(i64, @intCast(binary_data.len)), 8);
    null_values = null_values;
    var total_bits: i64 = 32 * (@divTrunc(@as(i64, @intCast(binary_data.len)), 32) + 1);
    total_bits = total_bits;
    while (@as(i64, @intCast(binary_data.len)) < total_bits) {
        binary_data = _concat_string(binary_data, "0");
    }
    var result: []const u8 = "";
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(binary_data.len))) {
        var chunk_bits: []const u8 = binary_data[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 32)), @as(usize, @intCast(binary_data.len)))];
        chunk_bits = chunk_bits;
        var chunk_val: i64 = bin_to_int(chunk_bits);
        chunk_val = chunk_val;
        var encoded: []const u8 = reverse(base10_to_85(chunk_val));
        encoded = encoded;
        result = _concat_string(result, encoded);
        i = i + 32;
    }
    if (@mod(null_values, 4) != 0) {
        result = result[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(result.len)) - null_values)), @as(usize, @intCast(result.len)))];
    }
    return result;
}

fn ascii85_decode(data: []const u8) []const u8 {
    var null_values: i64 = 5 * (@divTrunc(@as(i64, @intCast(data.len)), 5) + 1) - @as(i64, @intCast(data.len));
    null_values = null_values;
    var binary_data: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, data.len) catch unreachable; @memcpy(tmp, data); break :blk tmp; };
    binary_data = binary_data;
    var i: i64 = 0;
    i = i;
    while (i < null_values) {
        binary_data = _concat_string(binary_data, "u");
        i = i + 1;
    }
    var result: []const u8 = "";
    result = result;
    i = 0;
    while (i < @as(i64, @intCast(binary_data.len))) {
        var chunk: []const u8 = binary_data[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 5)), @as(usize, @intCast(binary_data.len)))];
        chunk = chunk;
        var value: i64 = base85_to_10(chunk);
        value = value;
        var bits: []const u8 = to_binary(value, 32);
        bits = bits;
        var j: i64 = 0;
        j = j;
        while (j < 32) {
            var byte_bits: []const u8 = bits[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 8)), @as(usize, @intCast(bits.len)))];
            byte_bits = byte_bits;
            var c: []const u8 = chr(bin_to_int(byte_bits));
            c = c;
            result = _concat_string(result, c);
            j = j + 8;
        }
        i = i + 5;
    }
    var trim: i64 = null_values;
    trim = trim;
    if (@mod(null_values, 5) == 0) {
        trim = null_values - 1;
    }
    return result[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(result.len)) - trim)), @as(usize, @intCast(result.len)))];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{ascii85_encode("")});
        std.debug.print("{s}\n", .{ascii85_encode("12345")});
        std.debug.print("{s}\n", .{ascii85_encode("base 85")});
        std.debug.print("{s}\n", .{ascii85_decode("")});
        std.debug.print("{s}\n", .{ascii85_decode("0etOA2#")});
        std.debug.print("{s}\n", .{ascii85_decode("@UX=h+?24")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
