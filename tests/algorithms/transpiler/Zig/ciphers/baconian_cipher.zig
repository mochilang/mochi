// Generated by Mochi Zig transpiler on 2025-08-08 11:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var encode_map_var: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
var decode_map_var: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);

fn make_decode_map() std.StringHashMap([]const u8) {
    var m: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
    m = m;
    var __mapit1 = encode_map_var.keyIterator();
    while (__mapit1.next()) |__it0| {
        const k = __it0.*;
        m.put(encode_map_var.get(k).?, k) catch unreachable;
    }
    return m;
}

fn split_spaces(s: []const u8) [][]const u8 {
    var parts: [][]const u8 = &[_][]const u8{};
    parts = parts;
    var current: []const u8 = "";
    current = current;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        var ch: []const u8 = s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))];
        ch = ch;
        if (std.mem.eql(u8, ch, " ")) {
            parts = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, parts)) catch |err| handleError(err); _tmp.append(current) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            current = "";
        } else {
            current = _concat_string(current, ch);
        }
        i = i + 1;
    }
    parts = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, parts)) catch |err| handleError(err); _tmp.append(current) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return parts;
}

fn encode(word: []const u8) []const u8 {
    var w: []const u8 = _lower(word);
    w = w;
    var encoded: []const u8 = "";
    encoded = encoded;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(w.len))) {
        var ch: []const u8 = w[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(w.len)))];
        ch = ch;
        if (encode_map_var.contains(ch)) {
            encoded = _concat_string(encoded, encode_map_var.get(ch).?);
        } else {
            @panic("encode() accepts only letters of the alphabet and spaces");
        }
        i = i + 1;
    }
    return encoded;
}

fn decode(coded: []const u8) []const u8 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(coded.len))) {
        var ch: []const u8 = coded[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(coded.len)))];
        ch = ch;
        if (!std.mem.eql(u8, ch, "A") and !std.mem.eql(u8, ch, "B") and !std.mem.eql(u8, ch, " ")) {
            @panic("decode() accepts only 'A', 'B' and spaces");
        }
        i = i + 1;
    }
    var words: [][]const u8 = split_spaces(coded);
    words = words;
    var decoded: []const u8 = "";
    decoded = decoded;
    var w: i64 = 0;
    w = w;
    while (w < @as(i64, @intCast(words.len))) {
        var word: []const u8 = words[@as(usize, @intCast(w))];
        word = word;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(word.len))) {
            var segment: []const u8 = word[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 5)), @as(usize, @intCast(word.len)))];
            segment = segment;
            decoded = _concat_string(decoded, decode_map_var.get(segment).?);
            j = j + 5;
        }
        if (w < @as(i64, @intCast(words.len)) - 1) {
            decoded = _concat_string(decoded, " ");
        }
        w = w + 1;
    }
    return decoded;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        encode_map_var = blk: { var m = std.StringHashMap([]const u8).init(std.heap.page_allocator); m.put("a", "AAAAA") catch unreachable; m.put("b", "AAAAB") catch unreachable; m.put("c", "AAABA") catch unreachable; m.put("d", "AAABB") catch unreachable; m.put("e", "AABAA") catch unreachable; m.put("f", "AABAB") catch unreachable; m.put("g", "AABBA") catch unreachable; m.put("h", "AABBB") catch unreachable; m.put("i", "ABAAA") catch unreachable; m.put("j", "BBBAA") catch unreachable; m.put("k", "ABAAB") catch unreachable; m.put("l", "ABABA") catch unreachable; m.put("m", "ABABB") catch unreachable; m.put("n", "ABBAA") catch unreachable; m.put("o", "ABBAB") catch unreachable; m.put("p", "ABBBA") catch unreachable; m.put("q", "ABBBB") catch unreachable; m.put("r", "BAAAA") catch unreachable; m.put("s", "BAAAB") catch unreachable; m.put("t", "BAABA") catch unreachable; m.put("u", "BAABB") catch unreachable; m.put("v", "BBBAB") catch unreachable; m.put("w", "BABAA") catch unreachable; m.put("x", "BABAB") catch unreachable; m.put("y", "BABBA") catch unreachable; m.put("z", "BABBB") catch unreachable; m.put(" ", " ") catch unreachable; break :blk m; };
        decode_map_var = make_decode_map();
        std.debug.print("{s}\n", .{encode("hello")});
        std.debug.print("{s}\n", .{encode("hello world")});
        std.debug.print("{s}\n", .{decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB")});
        std.debug.print("{s}\n", .{decode("AABBBAABAAABABAABABAABBAB")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
