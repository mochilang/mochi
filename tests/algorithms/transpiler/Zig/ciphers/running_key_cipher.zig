// Generated by Mochi Zig transpiler on 2025-08-06 23:15 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const key_var: []const u8 = "How does the duck know that? said Victor";
const plaintext_var: []const u8 = "DEFEND THIS";
var ciphertext_var: []const u8 = &[_]u8{};

fn indexOf(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn ord(ch: []const u8) i64 {
    const upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    var idx: i64 = indexOf(upper, ch);
    if (idx >= 0) {
        return 65 + idx;
    }
    idx = indexOf(lower, ch);
    if (idx >= 0) {
        return 97 + idx;
    }
    return 0;
}

fn chr(n: i64) []const u8 {
    const upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    if (n >= 65 and n < 91) {
        return upper[@as(usize, @intCast(n - 65))..@min(@as(usize, @intCast(n - 64)), @as(usize, @intCast(upper.len)))];
    }
    if (n >= 97 and n < 123) {
        return lower[@as(usize, @intCast(n - 97))..@min(@as(usize, @intCast(n - 96)), @as(usize, @intCast(lower.len)))];
    }
    return "?";
}

fn clean_text(s: []const u8) []const u8 {
    var out: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s.len))) {
        const ch: []const u8 = s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        if (std.mem.order(u8, ch, "A") != .lt and std.mem.order(u8, ch, "Z") != .gt) {
            out = _concat_string(out, ch);
        } else {
            if (std.mem.order(u8, ch, "a") != .lt and std.mem.order(u8, ch, "z") != .gt) {
                out = _concat_string(out, chr(ord(ch) - 32));
            }
        }
        i = i + 1;
    }
    return out;
}

fn running_key_encrypt(key_param: []const u8, plaintext_param: []const u8) []const u8 {
    const pt: []const u8 = clean_text(plaintext_param);
    const k: []const u8 = clean_text(key_param);
    const key_len: i64 = @as(i64, @intCast(k.len));
    var res: []const u8 = "";
    const ord_a: i64 = ord("A");
    var i: i64 = 0;
    while (i < @as(i64, @intCast(pt.len))) {
        const p: i64 = ord(pt[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]) - ord_a;
        const kv: i64 = ord(k[@as(usize, @intCast(@mod(i, key_len)))..@as(usize, @intCast(@mod(i, key_len))) + 1]) - ord_a;
        const c: i64 = @mod(p + kv, 26);
        res = _concat_string(res, chr(c + ord_a));
        i = i + 1;
    }
    return res;
}

fn running_key_decrypt(key_param: []const u8, ciphertext_param: []const u8) []const u8 {
    const ct: []const u8 = clean_text(ciphertext_param);
    const k: []const u8 = clean_text(key_param);
    const key_len: i64 = @as(i64, @intCast(k.len));
    var res: []const u8 = "";
    const ord_a: i64 = ord("A");
    var i: i64 = 0;
    while (i < @as(i64, @intCast(ct.len))) {
        const c: i64 = ord(ct[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]) - ord_a;
        const kv: i64 = ord(k[@as(usize, @intCast(@mod(i, key_len)))..@as(usize, @intCast(@mod(i, key_len))) + 1]) - ord_a;
        const p: i64 = @mod(c - kv + 26, 26);
        res = _concat_string(res, chr(p + ord_a));
        i = i + 1;
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        ciphertext_var = running_key_encrypt(key_var, plaintext_var);
        std.debug.print("{s}\n", .{ciphertext_var});
        std.debug.print("{s}\n", .{running_key_decrypt(key_var, ciphertext_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
