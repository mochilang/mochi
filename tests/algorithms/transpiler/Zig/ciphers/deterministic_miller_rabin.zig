// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn mod_pow(base: i64, exp: i64, mod: i64) i64 {
    var result: i64 = 1;
    result = result;
    var b: i64 = @mod(base, mod);
    b = b;
    var e: i64 = exp;
    e = e;
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = @mod(result * b, mod);
        }
        b = @mod(b * b, mod);
        e = @divTrunc(e, 2);
    }
    return result;
}

fn miller_rabin(n: i64, allow_probable: bool) bool {
    if (n == 2) {
        return true;
    }
    if (n < 2 or @mod(n, 2) == 0) {
        return false;
    }
    if (n > 5) {
        var last: i64 = @mod(n, 10);
        last = last;
        if (!(last == 1 or last == 3 or last == 7 or last == 9)) {
            return false;
        }
    }
    var limit: i64 = 3825123056546413051;
    limit = limit;
    if (n > limit and !(allow_probable)) {
        @panic("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test.");
    }
    var bounds: []i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 8) catch unreachable; _tmp0[0] = 2047; _tmp0[1] = 1373653; _tmp0[2] = 25326001; _tmp0[3] = 3215031751; _tmp0[4] = 2152302898747; _tmp0[5] = 3474749660383; _tmp0[6] = 341550071728321; _tmp0[7] = limit; break :blk0 _tmp0; };
    bounds = bounds;
    var primes: []i64 = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 8) catch unreachable; _tmp1[0] = 2; _tmp1[1] = 3; _tmp1[2] = 5; _tmp1[3] = 7; _tmp1[4] = 11; _tmp1[5] = 13; _tmp1[6] = 17; _tmp1[7] = 19; break :blk1 _tmp1; };
    primes = primes;
    var i: i64 = 0;
    i = i;
    var plist_len: i64 = @as(i64, @intCast(primes.len));
    plist_len = plist_len;
    while (i < @as(i64, @intCast(bounds.len))) {
        if (n < bounds[@as(usize, @intCast(i))]) {
            plist_len = i + 1;
            i = @as(i64, @intCast(bounds.len));
        } else {
            i = i + 1;
        }
    }
    var d: i64 = n - 1;
    d = d;
    var s: i64 = 0;
    s = s;
    while (@mod(d, 2) == 0) {
        d = @divTrunc(d, 2);
        s = s + 1;
    }
    var j: i64 = 0;
    j = j;
    while (j < plist_len) {
        var prime: i64 = primes[@as(usize, @intCast(j))];
        prime = prime;
        var x: i64 = mod_pow(prime, d, n);
        x = x;
        var pr: bool = false;
        pr = pr;
        if (x == 1 or x == n - 1) {
            pr = true;
        } else {
            var r: i64 = 1;
            r = r;
            while (r < s and !(pr)) {
                x = @mod(x * x, n);
                if (x == n - 1) {
                    pr = true;
                }
                r = r + 1;
            }
        }
        if (!(pr)) {
            return false;
        }
        j = j + 1;
    }
    return true;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(miller_rabin(561, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(563, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(838201, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(838207, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(17316001, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(17316017, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(3078386641, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(3078386653, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(1713045574801, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(1713045574819, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(2779799728307, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(2779799728327, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(113850023909441, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(113850023909527, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(1275041018848804351, false))});
        std.debug.print("{s}\n", .{_str(miller_rabin(1275041018848804391, false))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
