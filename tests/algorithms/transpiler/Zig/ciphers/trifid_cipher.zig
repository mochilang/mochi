// Generated by Mochi Zig transpiler on 2025-08-06 23:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var triagrams_var: [][]const u8 = &[_][]const u8{};

fn remove_spaces(s: []const u8) []const u8 {
    var res: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s.len))) {
        const c: []const u8 = s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))];
        if (!std.mem.eql(u8, c, " ")) {
            res = _concat_string(res, c);
        }
        i = i + 1;
    }
    return res;
}

fn char_to_trigram(ch: []const u8, alphabet: []const u8) []const u8 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(alphabet.len))) {
        if (std.mem.eql(u8, alphabet[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(alphabet.len)))], ch)) {
            return triagrams_var[@as(usize, @intCast(i))];
        }
        i = i + 1;
    }
    return "";
}

fn trigram_to_char(tri: []const u8, alphabet: []const u8) []const u8 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(triagrams_var.len))) {
        if (std.mem.eql(u8, triagrams_var[@as(usize, @intCast(i))], tri)) {
            return alphabet[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(alphabet.len)))];
        }
        i = i + 1;
    }
    return "";
}

fn encrypt_part(part: []const u8, alphabet: []const u8) []const u8 {
    var one: []const u8 = "";
    var two: []const u8 = "";
    var three: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(part.len))) {
        const tri: []const u8 = char_to_trigram(part[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(part.len)))], alphabet);
        one = _concat_string(one, tri[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(tri.len)))]);
        two = _concat_string(two, tri[@as(usize, @intCast(1))..@min(@as(usize, @intCast(2)), @as(usize, @intCast(tri.len)))]);
        three = _concat_string(three, tri[@as(usize, @intCast(2))..@min(@as(usize, @intCast(3)), @as(usize, @intCast(tri.len)))]);
        i = i + 1;
    }
    return _concat_string(_concat_string(one, two), three);
}

fn encrypt_message(message: []const u8, alphabet: []const u8, period: i64) []const u8 {
    const msg: []const u8 = remove_spaces(message);
    const alpha: []const u8 = remove_spaces(alphabet);
    if (@as(i64, @intCast(alpha.len)) != 27) {
        return "";
    }
    var encrypted_numeric: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(msg.len))) {
        var end: i64 = i + period;
        if (end > @as(i64, @intCast(msg.len))) {
            end = @as(i64, @intCast(msg.len));
        }
        const part: []const u8 = msg[@as(usize, @intCast(i))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(msg.len)))];
        encrypted_numeric = _concat_string(encrypted_numeric, encrypt_part(part, alpha));
        i = i + period;
    }
    var encrypted: []const u8 = "";
    var j: i64 = 0;
    while (j < @as(i64, @intCast(encrypted_numeric.len))) {
        const tri: []const u8 = encrypted_numeric[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 3)), @as(usize, @intCast(encrypted_numeric.len)))];
        encrypted = _concat_string(encrypted, trigram_to_char(tri, alpha));
        j = j + 3;
    }
    return encrypted;
}

fn decrypt_part(part: []const u8, alphabet: []const u8) [][]const u8 {
    var converted: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(part.len))) {
        const tri: []const u8 = char_to_trigram(part[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(part.len)))], alphabet);
        converted = _concat_string(converted, tri);
        i = i + 1;
    }
    var result: [][]const u8 = &[_][]const u8{};
    var tmp: []const u8 = "";
    var j: i64 = 0;
    while (j < @as(i64, @intCast(converted.len))) {
        tmp = _concat_string(tmp, converted[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(converted.len)))]);
        if (@as(i64, @intCast(tmp.len)) == @as(i64, @intCast(part.len))) {
            result = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, result)) catch |err| handleError(err); _tmp.append(tmp) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            tmp = "";
        }
        j = j + 1;
    }
    return result;
}

fn decrypt_message(message: []const u8, alphabet: []const u8, period: i64) []const u8 {
    const msg: []const u8 = remove_spaces(message);
    const alpha: []const u8 = remove_spaces(alphabet);
    if (@as(i64, @intCast(alpha.len)) != 27) {
        return "";
    }
    var decrypted_numeric: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(msg.len))) {
        var end: i64 = i + period;
        if (end > @as(i64, @intCast(msg.len))) {
            end = @as(i64, @intCast(msg.len));
        }
        const part: []const u8 = msg[@as(usize, @intCast(i))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(msg.len)))];
        const groups: [][]const u8 = decrypt_part(part, alpha);
        var k: i64 = 0;
        while (k < @as(i64, @intCast(groups[@as(usize, @intCast(0))].len))) {
            const tri: []const u8 = _concat_string(_concat_string(groups[@as(usize, @intCast(0))][@as(usize, @intCast(k))..@min(@as(usize, @intCast(k + 1)), @as(usize, @intCast(groups[@as(usize, @intCast(0))].len)))], groups[@as(usize, @intCast(1))][@as(usize, @intCast(k))..@min(@as(usize, @intCast(k + 1)), @as(usize, @intCast(groups[@as(usize, @intCast(1))].len)))]), groups[@as(usize, @intCast(2))][@as(usize, @intCast(k))..@min(@as(usize, @intCast(k + 1)), @as(usize, @intCast(groups[@as(usize, @intCast(2))].len)))]);
            decrypted_numeric = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, decrypted_numeric)) catch |err| handleError(err); _tmp.append(tri) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            k = k + 1;
        }
        i = i + period;
    }
    var decrypted: []const u8 = "";
    var j: i64 = 0;
    while (j < @as(i64, @intCast(decrypted_numeric.len))) {
        decrypted = _concat_string(decrypted, trigram_to_char(decrypted_numeric[@as(usize, @intCast(j))], alpha));
        j = j + 1;
    }
    return decrypted;
}

fn mochi_main() void {
    const msg: []const u8 = "DEFEND THE EAST WALL OF THE CASTLE.";
    const alphabet: []const u8 = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ";
    const encrypted: []const u8 = encrypt_message(msg, alphabet, 5);
    const decrypted: []const u8 = decrypt_message(encrypted, alphabet, 5);
    std.debug.print("{s}\n", .{_concat_string("Encrypted: ", encrypted)});
    std.debug.print("{s}\n", .{_concat_string("Decrypted: ", decrypted)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        triagrams_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 27) catch unreachable; _tmp0[0] = "111"; _tmp0[1] = "112"; _tmp0[2] = "113"; _tmp0[3] = "121"; _tmp0[4] = "122"; _tmp0[5] = "123"; _tmp0[6] = "131"; _tmp0[7] = "132"; _tmp0[8] = "133"; _tmp0[9] = "211"; _tmp0[10] = "212"; _tmp0[11] = "213"; _tmp0[12] = "221"; _tmp0[13] = "222"; _tmp0[14] = "223"; _tmp0[15] = "231"; _tmp0[16] = "232"; _tmp0[17] = "233"; _tmp0[18] = "311"; _tmp0[19] = "312"; _tmp0[20] = "313"; _tmp0[21] = "321"; _tmp0[22] = "322"; _tmp0[23] = "323"; _tmp0[24] = "331"; _tmp0[25] = "332"; _tmp0[26] = "333"; break :blk0 _tmp0; };
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
