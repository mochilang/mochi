// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const B32_CHARSET_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";

fn indexOfChar(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn ord(ch: []const u8) i64 {
    var upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    upper = upper;
    var lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    lower = lower;
    var digits: []const u8 = "0123456789";
    digits = digits;
    var idx: i64 = indexOfChar(upper, ch);
    idx = idx;
    if (idx >= 0) {
        return 65 + idx;
    }
    idx = indexOfChar(lower, ch);
    if (idx >= 0) {
        return 97 + idx;
    }
    idx = indexOfChar(digits, ch);
    if (idx >= 0) {
        return 48 + idx;
    }
    if (std.mem.eql(u8, ch, " ")) {
        return 32;
    }
    if (std.mem.eql(u8, ch, "!")) {
        return 33;
    }
    return 0;
}

fn chr(code: i64) []const u8 {
    var upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    upper = upper;
    var lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    lower = lower;
    var digits: []const u8 = "0123456789";
    digits = digits;
    if (code == 32) {
        return " ";
    }
    if (code == 33) {
        return "!";
    }
    var idx: i64 = code - 65;
    idx = idx;
    if (idx >= 0 and idx < @as(i64, @intCast(upper.len))) {
        return upper[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1];
    }
    idx = code - 97;
    if (idx >= 0 and idx < @as(i64, @intCast(lower.len))) {
        return lower[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1];
    }
    idx = code - 48;
    if (idx >= 0 and idx < @as(i64, @intCast(digits.len))) {
        return digits[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1];
    }
    return "";
}

fn repeat(s: []const u8, n: i64) []const u8 {
    var out: []const u8 = "";
    out = out;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        out = _concat_string(out, s);
        i = i + 1;
    }
    return out;
}

fn to_binary(n: i64, bits: i64) []const u8 {
    var v: i64 = n;
    v = v;
    var out: []const u8 = "";
    out = out;
    var i: i64 = 0;
    i = i;
    while (i < bits) {
        out = _concat_string(_str(@mod(v, 2)), out);
        v = @divTrunc(v, 2);
        i = i + 1;
    }
    return out;
}

fn binary_to_int(bits: []const u8) i64 {
    var n: i64 = 0;
    n = n;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(bits.len))) {
        n = n * 2;
        if (std.mem.eql(u8, bits[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], "1")) {
            n = n + 1;
        }
        i = i + 1;
    }
    return n;
}

fn base32_encode(data: []const u8) []const u8 {
    var binary_data: []const u8 = "";
    binary_data = binary_data;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(data.len))) {
        binary_data = _concat_string(binary_data, to_binary(ord(data[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]), 8));
        i = i + 1;
    }
    var remainder: i64 = @mod(@as(i64, @intCast(binary_data.len)), 5);
    remainder = remainder;
    if (remainder != 0) {
        binary_data = _concat_string(binary_data, repeat("0", 5 - remainder));
    }
    var b32_result: []const u8 = "";
    b32_result = b32_result;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(binary_data.len))) {
        var chunk: []const u8 = binary_data[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 5)), @as(usize, @intCast(binary_data.len)))];
        chunk = chunk;
        var index: i64 = binary_to_int(chunk);
        index = index;
        b32_result = _concat_string(b32_result, B32_CHARSET_var[@as(usize, @intCast(index))..@as(usize, @intCast(index)) + 1]);
        j = j + 5;
    }
    var rem: i64 = @mod(@as(i64, @intCast(b32_result.len)), 8);
    rem = rem;
    if (rem != 0) {
        b32_result = _concat_string(b32_result, repeat("=", 8 - rem));
    }
    return b32_result;
}

fn base32_decode(data: []const u8) []const u8 {
    var clean: []const u8 = "";
    clean = clean;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(data.len))) {
        var ch: []const u8 = data[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        if (!std.mem.eql(u8, ch, "=")) {
            clean = _concat_string(clean, ch);
        }
        i = i + 1;
    }
    var binary_chunks: []const u8 = "";
    binary_chunks = binary_chunks;
    i = 0;
    while (i < @as(i64, @intCast(clean.len))) {
        var idx: i64 = indexOfChar(B32_CHARSET_var, clean[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
        idx = idx;
        binary_chunks = _concat_string(binary_chunks, to_binary(idx, 5));
        i = i + 1;
    }
    var result: []const u8 = "";
    result = result;
    var j: i64 = 0;
    j = j;
    while (j + 8 <= @as(i64, @intCast(binary_chunks.len))) {
        var byte_bits: []const u8 = binary_chunks[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 8)), @as(usize, @intCast(binary_chunks.len)))];
        byte_bits = byte_bits;
        var code: i64 = binary_to_int(byte_bits);
        code = code;
        result = _concat_string(result, chr(code));
        j = j + 8;
    }
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{base32_encode("Hello World!")});
        std.debug.print("{s}\n", .{base32_encode("123456")});
        std.debug.print("{s}\n", .{base32_encode("some long complex string")});
        std.debug.print("{s}\n", .{base32_decode("JBSWY3DPEBLW64TMMQQQ====")});
        std.debug.print("{s}\n", .{base32_decode("GEZDGNBVGY======")});
        std.debug.print("{s}\n", .{base32_decode("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY=")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
