// Generated by Mochi Zig transpiler on 2025-08-06 23:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn join_strings(xs: [][]const u8) []const u8 {
    var res: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(xs.len))) {
        res = _concat_string(res, xs[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    return res;
}

fn encrypt_message(key: i64, message: []const u8) []const u8 {
    var result: []const u8 = "";
    var col: i64 = 0;
    while (col < key) {
        var pointer: i64 = col;
        while (pointer < @as(i64, @intCast(message.len))) {
            result = _concat_string(result, message[@as(usize, @intCast(pointer))..@min(@as(usize, @intCast(pointer + 1)), @as(usize, @intCast(message.len)))]);
            pointer = pointer + key;
        }
        col = col + 1;
    }
    return result;
}

fn decrypt_message(key: i64, message: []const u8) []const u8 {
    const num_cols: i64 = @divTrunc(@as(i64, @intCast(message.len)) + key - 1, key);
    const num_rows: i64 = key;
    const num_shaded_boxes: i64 = num_cols * num_rows - @as(i64, @intCast(message.len));
    var plain_text: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < num_cols) {
        plain_text = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, plain_text)) catch |err| handleError(err); _tmp.append("") catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var col: i64 = 0;
    var row: i64 = 0;
    var index: i64 = 0;
    while (index < @as(i64, @intCast(message.len))) {
        plain_text[@as(usize, @intCast(col))] = _concat_string(plain_text[@as(usize, @intCast(col))], message[@as(usize, @intCast(index))..@min(@as(usize, @intCast(index + 1)), @as(usize, @intCast(message.len)))]);
        col = col + 1;
        if (col == num_cols or col == num_cols - 1 and row >= num_rows - num_shaded_boxes) {
            col = 0;
            row = row + 1;
        }
        index = index + 1;
    }
    return join_strings(plain_text);
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{"Enter message: "});
    const message: []const u8 = _input();
    const max_key: i64 = @as(i64, @intCast(message.len)) - 1;
    std.debug.print("{s}\n", .{_concat_string(_concat_string("Enter key [2-", _str(max_key)), "]: ")});
    const key: i64 = std.fmt.parseInt(i64, _input(), 10) catch 0;
    std.debug.print("{s}\n", .{"Encryption/Decryption [e/d]: "});
    const mode: []const u8 = _input();
    var text: []const u8 = "";
    const first: []const u8 = mode[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(mode.len)))];
    if (std.mem.eql(u8, first, "e") or std.mem.eql(u8, first, "E")) {
        text = encrypt_message(key, message);
    } else {
        if (std.mem.eql(u8, first, "d") or std.mem.eql(u8, first, "D")) {
            text = decrypt_message(key, message);
        }
    }
    std.debug.print("{s}\n", .{_concat_string(_concat_string("Output:\n", text), "|")});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _input() []const u8 {
    var reader = std.io.bufferedReaderSize(4096, std.io.getStdIn().reader());
    const opt_line = reader.reader().readUntilDelimiterOrEofAlloc(std.heap.page_allocator, '\n', 1 << 20) catch return "";
    const line = opt_line orelse return "";
    if (line.len > 0 and line[line.len - 1] == '\n') {
        return line[0..line.len-1];
    }
    return line;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
