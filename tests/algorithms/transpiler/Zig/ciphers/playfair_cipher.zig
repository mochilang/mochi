// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn contains(xs: [][]const u8, x: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[@as(usize, @intCast(i))], x)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn index_of(xs: [][]const u8, x: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[@as(usize, @intCast(i))], x)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn prepare_input(dirty: []const u8) []const u8 {
    var letters: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    letters = letters;
    var upper_dirty: []const u8 = _upper(dirty);
    upper_dirty = upper_dirty;
    var filtered: []const u8 = "";
    filtered = filtered;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(upper_dirty.len))) {
        var c: []const u8 = upper_dirty[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(upper_dirty.len)))];
        c = c;
        if (std.mem.indexOfScalar(const u8, letters, c) != null) {
            filtered = _concat_string(filtered, c);
        }
        i = i + 1;
    }
    if (@as(i64, @intCast(filtered.len)) < 2) {
        return filtered;
    }
    var clean: []const u8 = "";
    clean = clean;
    i = 0;
    while (i < @as(i64, @intCast(filtered.len)) - 1) {
        var c1: []const u8 = filtered[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(filtered.len)))];
        c1 = c1;
        var c2: []const u8 = filtered[@as(usize, @intCast(i + 1))..@min(@as(usize, @intCast(i + 2)), @as(usize, @intCast(filtered.len)))];
        c2 = c2;
        clean = _concat_string(clean, c1);
        if (std.mem.eql(u8, c1, c2)) {
            clean = _concat_string(clean, "X");
        }
        i = i + 1;
    }
    clean = _concat_string(clean, filtered[@as(usize, @intCast(@as(i64, @intCast(filtered.len)) - 1))..@min(@as(usize, @intCast(@as(i64, @intCast(filtered.len)))), @as(usize, @intCast(filtered.len)))]);
    if (@mod(@as(i64, @intCast(clean.len)), 2) == 1) {
        clean = _concat_string(clean, "X");
    }
    return clean;
}

fn generate_table(key: []const u8) [][]const u8 {
    var alphabet: []const u8 = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
    alphabet = alphabet;
    var table: [][]const u8 = &[_][]const u8{};
    table = table;
    var upper_key: []const u8 = _upper(key);
    upper_key = upper_key;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(upper_key.len))) {
        var c: []const u8 = upper_key[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(upper_key.len)))];
        c = c;
        if (std.mem.indexOfScalar(const u8, alphabet, c) != null) {
            if (!(contains(table, c))) {
                table = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, table)) catch |err| handleError(err); _tmp.append(c) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        i = i + 1;
    }
    i = 0;
    while (i < @as(i64, @intCast(alphabet.len))) {
        var c: []const u8 = alphabet[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(alphabet.len)))];
        c = c;
        if (!(contains(table, c))) {
            table = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, table)) catch |err| handleError(err); _tmp.append(c) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return table;
}

fn encode(plaintext: []const u8, key: []const u8) []const u8 {
    var table: [][]const u8 = generate_table(key);
    table = table;
    var text: []const u8 = prepare_input(plaintext);
    text = text;
    var cipher: []const u8 = "";
    cipher = cipher;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(text.len))) {
        var c1: []const u8 = text[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(text.len)))];
        c1 = c1;
        var c2: []const u8 = text[@as(usize, @intCast(i + 1))..@min(@as(usize, @intCast(i + 2)), @as(usize, @intCast(text.len)))];
        c2 = c2;
        var idx1: i64 = index_of(table, c1);
        idx1 = idx1;
        var idx2: i64 = index_of(table, c2);
        idx2 = idx2;
        var row1: i64 = @divTrunc(idx1, 5);
        row1 = row1;
        var col1: i64 = @mod(idx1, 5);
        col1 = col1;
        var row2: i64 = @divTrunc(idx2, 5);
        row2 = row2;
        var col2: i64 = @mod(idx2, 5);
        col2 = col2;
        if (row1 == row2) {
            cipher = _concat_string(cipher, table[@as(usize, @intCast(row1 * 5 + @mod(col1 + 1, 5)))]);
            cipher = _concat_string(cipher, table[@as(usize, @intCast(row2 * 5 + @mod(col2 + 1, 5)))]);
        } else {
            if (col1 == col2) {
                cipher = _concat_string(cipher, table[@as(usize, @intCast(@mod(row1 + 1, 5) * 5 + col1))]);
                cipher = _concat_string(cipher, table[@as(usize, @intCast(@mod(row2 + 1, 5) * 5 + col2))]);
            } else {
                cipher = _concat_string(cipher, table[@as(usize, @intCast(row1 * 5 + col2))]);
                cipher = _concat_string(cipher, table[@as(usize, @intCast(row2 * 5 + col1))]);
            }
        }
        i = i + 2;
    }
    return cipher;
}

fn decode(cipher: []const u8, key: []const u8) []const u8 {
    var table: [][]const u8 = generate_table(key);
    table = table;
    var plain: []const u8 = "";
    plain = plain;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(cipher.len))) {
        var c1: []const u8 = cipher[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(cipher.len)))];
        c1 = c1;
        var c2: []const u8 = cipher[@as(usize, @intCast(i + 1))..@min(@as(usize, @intCast(i + 2)), @as(usize, @intCast(cipher.len)))];
        c2 = c2;
        var idx1: i64 = index_of(table, c1);
        idx1 = idx1;
        var idx2: i64 = index_of(table, c2);
        idx2 = idx2;
        var row1: i64 = @divTrunc(idx1, 5);
        row1 = row1;
        var col1: i64 = @mod(idx1, 5);
        col1 = col1;
        var row2: i64 = @divTrunc(idx2, 5);
        row2 = row2;
        var col2: i64 = @mod(idx2, 5);
        col2 = col2;
        if (row1 == row2) {
            plain = _concat_string(plain, table[@as(usize, @intCast(row1 * 5 + @mod(col1 + 4, 5)))]);
            plain = _concat_string(plain, table[@as(usize, @intCast(row2 * 5 + @mod(col2 + 4, 5)))]);
        } else {
            if (col1 == col2) {
                plain = _concat_string(plain, table[@as(usize, @intCast(@mod(row1 + 4, 5) * 5 + col1))]);
                plain = _concat_string(plain, table[@as(usize, @intCast(@mod(row2 + 4, 5) * 5 + col2))]);
            } else {
                plain = _concat_string(plain, table[@as(usize, @intCast(row1 * 5 + col2))]);
                plain = _concat_string(plain, table[@as(usize, @intCast(row2 * 5 + col1))]);
            }
        }
        i = i + 2;
    }
    return plain;
}

fn mochi_main() void {
    std.debug.print("{s} {s}\n", .{"Encoded:", encode("BYE AND THANKS", "GREETING")});
    std.debug.print("{s} {s}\n", .{"Decoded:", decode("CXRBANRLBALQ", "GREETING")});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
