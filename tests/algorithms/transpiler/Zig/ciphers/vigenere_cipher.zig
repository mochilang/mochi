// Generated by Mochi Zig transpiler on 2025-08-06 23:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const LETTERS_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const LETTERS_LOWER_var: []const u8 = "abcdefghijklmnopqrstuvwxyz";
const key_var: []const u8 = "HDarji";
const message_var: []const u8 = "This is Harshil Darji from Dharmaj.";
var key_up_var: []const u8 = &[_]u8{};
var encrypted_var: []const u8 = "";
var key_index_var: i64 = 0;
var i_var: i64 = 0;
var decrypted_var: []const u8 = "";

fn find_index(s: []const u8, ch: []const u8) i64 {
    var i_var_1: i64 = 0;
    while (i_var_1 < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i_var_1))..@as(usize, @intCast(i_var_1)) + 1], ch)) {
            return i_var_1;
        }
        i_var_1 = i_var_1 + 1;
    }
    return 0 - 1;
}

fn to_upper_char(ch: []const u8) []const u8 {
    const idx: i64 = find_index(LETTERS_LOWER_var, ch);
    if (idx >= 0) {
        return LETTERS_var[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1];
    }
    return ch;
}

fn to_lower_char(ch: []const u8) []const u8 {
    const idx: i64 = find_index(LETTERS_var, ch);
    if (idx >= 0) {
        return LETTERS_LOWER_var[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1];
    }
    return ch;
}

fn is_upper(ch: []const u8) bool {
    return find_index(LETTERS_var, ch) >= 0;
}

fn to_upper_string(s: []const u8) []const u8 {
    var res: []const u8 = "";
    var i_var_1: i64 = 0;
    while (i_var_1 < @as(i64, @intCast(s.len))) {
        res = _concat_string(res, to_upper_char(s[@as(usize, @intCast(i_var_1))..@as(usize, @intCast(i_var_1)) + 1]));
        i_var_1 = i_var_1 + 1;
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        key_up_var = to_upper_string(key_var);
        while (i_var < @as(i64, @intCast(message_var.len))) {
            const symbol: []const u8 = message_var[@as(usize, @intCast(i_var))..@as(usize, @intCast(i_var)) + 1];
            const upper_symbol: []const u8 = to_upper_char(symbol);
            var num: i64 = find_index(LETTERS_var, upper_symbol);
            if (num >= 0) {
                num = num + find_index(LETTERS_var, key_up_var[@as(usize, @intCast(key_index_var))..@as(usize, @intCast(key_index_var)) + 1]);
                num = @mod(num, @as(i64, @intCast(LETTERS_var.len)));
                if (is_upper(symbol)) {
                    encrypted_var = _concat_string(encrypted_var, LETTERS_var[@as(usize, @intCast(num))..@as(usize, @intCast(num)) + 1]);
                } else {
                    encrypted_var = _concat_string(encrypted_var, to_lower_char(LETTERS_var[@as(usize, @intCast(num))..@as(usize, @intCast(num)) + 1]));
                }
                key_index_var = key_index_var + 1;
                if (key_index_var == @as(i64, @intCast(key_up_var.len))) {
                    key_index_var = 0;
                }
            } else {
                encrypted_var = _concat_string(encrypted_var, symbol);
            }
            i_var = i_var + 1;
        }
        std.debug.print("{s}\n", .{encrypted_var});
        key_index_var = 0;
        i_var = 0;
        while (i_var < @as(i64, @intCast(encrypted_var.len))) {
            const symbol: []const u8 = encrypted_var[@as(usize, @intCast(i_var))..@as(usize, @intCast(i_var)) + 1];
            const upper_symbol: []const u8 = to_upper_char(symbol);
            var num: i64 = find_index(LETTERS_var, upper_symbol);
            if (num >= 0) {
                num = num - find_index(LETTERS_var, key_up_var[@as(usize, @intCast(key_index_var))..@as(usize, @intCast(key_index_var)) + 1]);
                num = @mod(num, @as(i64, @intCast(LETTERS_var.len)));
                if (is_upper(symbol)) {
                    decrypted_var = _concat_string(decrypted_var, LETTERS_var[@as(usize, @intCast(num))..@as(usize, @intCast(num)) + 1]);
                } else {
                    decrypted_var = _concat_string(decrypted_var, to_lower_char(LETTERS_var[@as(usize, @intCast(num))..@as(usize, @intCast(num)) + 1]));
                }
                key_index_var = key_index_var + 1;
                if (key_index_var == @as(i64, @intCast(key_up_var.len))) {
                    key_index_var = 0;
                }
            } else {
                decrypted_var = _concat_string(decrypted_var, symbol);
            }
            i_var = i_var + 1;
        }
        std.debug.print("{s}\n", .{decrypted_var});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
