// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const UPPER_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const LOWER_var: []const u8 = "abcdefghijklmnopqrstuvwxyz";
const BASE_TOP_var: []const u8 = "ABCDEFGHIJKLM";
const BASE_BOTTOM_var: []const u8 = "NOPQRSTUVWXYZ";

fn to_upper(s: []const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        var ch: []const u8 = s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))];
        ch = ch;
        var j: i64 = 0;
        j = j;
        var replaced: bool = false;
        replaced = replaced;
        while (j < @as(i64, @intCast(LOWER_var.len))) {
            if (std.mem.eql(u8, LOWER_var[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(LOWER_var.len)))], ch)) {
                res = _concat_string(res, UPPER_var[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(UPPER_var.len)))]);
                replaced = true;
                break;
            }
            j = j + 1;
        }
        if (!(replaced)) {
            res = _concat_string(res, ch);
        }
        i = i + 1;
    }
    return res;
}

fn char_index(c: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(UPPER_var.len))) {
        if (std.mem.eql(u8, UPPER_var[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(UPPER_var.len)))], c)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn rotate_right(s: []const u8, k: i64) []const u8 {
    var n: i64 = @as(i64, @intCast(s.len));
    n = n;
    var shift: i64 = @mod(k, n);
    shift = shift;
    return _concat_string(s[@as(usize, @intCast(n - shift))..@min(@as(usize, @intCast(n)), @as(usize, @intCast(s.len)))], s[@as(usize, @intCast(0))..@min(@as(usize, @intCast(n - shift)), @as(usize, @intCast(s.len)))]);
}

fn table_for(c: []const u8) [][]const u8 {
    var idx: i64 = char_index(c);
    idx = idx;
    var shift: i64 = @divTrunc(idx, 2);
    shift = shift;
    var row1: []const u8 = rotate_right(BASE_BOTTOM_var, shift);
    row1 = row1;
    var pair: [][]const u8 = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 2) catch unreachable; _tmp0[0] = BASE_TOP_var; _tmp0[1] = row1; break :blk0 _tmp0; };
    pair = pair;
    return pair;
}

fn generate_table(key: []const u8) [][][]const u8 {
    var up: []const u8 = to_upper(key);
    up = up;
    var i: i64 = 0;
    i = i;
    var result: [][][]const u8 = &[_][][]const u8{};
    result = result;
    while (i < @as(i64, @intCast(up.len))) {
        var ch: []const u8 = up[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(up.len)))];
        ch = ch;
        var pair: [][]const u8 = table_for(ch);
        pair = pair;
        result = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, result)) catch |err| handleError(err); _tmp.append(pair) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return result;
}

fn str_index(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn get_position(table: [][]const u8, ch: []const u8) []i64 {
    var row: i64 = 0;
    row = row;
    if (str_index(table[@as(usize, @intCast(0))], ch) == 0 - 1) {
        row = 1;
    }
    var col: i64 = str_index(table[@as(usize, @intCast(row))], ch);
    col = col;
    return blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp1[0] = row; _tmp1[1] = col; break :blk1 _tmp1; };
}

fn get_opponent(table: [][]const u8, ch: []const u8) []const u8 {
    var pos: []i64 = get_position(table[0..], ch);
    pos = pos;
    var row: i64 = pos[@as(usize, @intCast(0))];
    row = row;
    var col: i64 = pos[@as(usize, @intCast(1))];
    col = col;
    if (col == 0 - 1) {
        return ch;
    }
    if (row == 1) {
        return table[@as(usize, @intCast(0))][@as(usize, @intCast(col))..@min(@as(usize, @intCast(col + 1)), @as(usize, @intCast(table[@as(usize, @intCast(0))].len)))];
    }
    return table[@as(usize, @intCast(1))][@as(usize, @intCast(col))..@min(@as(usize, @intCast(col + 1)), @as(usize, @intCast(table[@as(usize, @intCast(1))].len)))];
}

fn encrypt(key: []const u8, words: []const u8) []const u8 {
    var table: [][][]const u8 = generate_table(key);
    table = table;
    var up_words: []const u8 = to_upper(words);
    up_words = up_words;
    var cipher: []const u8 = "";
    cipher = cipher;
    var count: i64 = 0;
    count = count;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(up_words.len))) {
        var ch: []const u8 = up_words[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(up_words.len)))];
        ch = ch;
        cipher = _concat_string(cipher, get_opponent(table[@as(usize, @intCast(count))], ch));
        count = @mod(count + 1, @as(i64, @intCast(table.len)));
        i = i + 1;
    }
    return cipher;
}

fn decrypt(key: []const u8, words: []const u8) []const u8 {
    var res: []const u8 = encrypt(key, words);
    res = res;
    return res;
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{encrypt("marvin", "jessica")});
    std.debug.print("{s}\n", .{decrypt("marvin", "QRACRWU")});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
