// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const LETTERS_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const LOWERCASE_var: []const u8 = "abcdefghijklmnopqrstuvwxyz";
var seed_var: i64 = 1;
const key_var: []const u8 = "LFWOAYUISVKMNXPBDCRJTQEGHZ";

fn rand(n: i64) i64 {
    seed_var = @mod(seed_var * 1664525 + 1013904223, 2147483647);
    return @mod(seed_var, n);
}

fn get_random_key() []const u8 {
    var chars: [][]const u8 = &[_][]const u8{};
    chars = chars;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(LETTERS_var.len))) {
        chars = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, chars)) catch |err| handleError(err); _tmp.append(LETTERS_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var j: i64 = @as(i64, @intCast(chars.len)) - 1;
    j = j;
    while (j > 0) {
        var k: i64 = rand(j + 1);
        k = k;
        var tmp: []const u8 = chars[@as(usize, @intCast(j))];
        tmp = tmp;
        chars[@as(usize, @intCast(j))] = chars[@as(usize, @intCast(k))];
        chars[@as(usize, @intCast(k))] = tmp;
        j = j - 1;
    }
    var res: []const u8 = "";
    res = res;
    i = 0;
    while (i < @as(i64, @intCast(chars.len))) {
        res = _concat_string(res, chars[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    return res;
}

fn check_valid_key(key_param: []const u8) bool {
    if (@as(i64, @intCast(key_param.len)) != @as(i64, @intCast(LETTERS_var.len))) {
        return false;
    }
    var used: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
    used = used;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(key_param.len))) {
        var ch: []const u8 = key_param[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        if (used.get(ch).?) {
            return false;
        }
        used.put(ch, true) catch unreachable;
        i = i + 1;
    }
    i = 0;
    while (i < @as(i64, @intCast(LETTERS_var.len))) {
        var ch: []const u8 = LETTERS_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        if (!(used.get(ch).?)) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn index_in(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn char_to_upper(c: []const u8) []const u8 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(LOWERCASE_var.len))) {
        if (std.mem.eql(u8, c, LOWERCASE_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1])) {
            return LETTERS_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        }
        i = i + 1;
    }
    return c;
}

fn char_to_lower(c: []const u8) []const u8 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(LETTERS_var.len))) {
        if (std.mem.eql(u8, c, LETTERS_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1])) {
            return LOWERCASE_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        }
        i = i + 1;
    }
    return c;
}

fn is_upper(c: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(LETTERS_var.len))) {
        if (std.mem.eql(u8, c, LETTERS_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1])) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn translate_message(key_param: []const u8, message: []const u8, mode: []const u8) []const u8 {
    var chars_a: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, LETTERS_var.len) catch unreachable; @memcpy(tmp, LETTERS_var); break :blk tmp; };
    chars_a = chars_a;
    var chars_b: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, key_param.len) catch unreachable; @memcpy(tmp, key_param); break :blk tmp; };
    chars_b = chars_b;
    if (std.mem.eql(u8, mode, "decrypt")) {
        var tmp: []const u8 = chars_a;
        tmp = tmp;
        chars_a = chars_b;
        chars_b = tmp;
    }
    var translated: []const u8 = "";
    translated = translated;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(message.len))) {
        var symbol: []const u8 = message[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        symbol = symbol;
        var upper_symbol: []const u8 = char_to_upper(symbol);
        upper_symbol = upper_symbol;
        var idx: i64 = index_in(chars_a, upper_symbol);
        idx = idx;
        if (idx >= 0) {
            var mapped: []const u8 = chars_b[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1];
            mapped = mapped;
            if (is_upper(symbol)) {
                translated = _concat_string(translated, mapped);
            } else {
                translated = _concat_string(translated, char_to_lower(mapped));
            }
        } else {
            translated = _concat_string(translated, symbol);
        }
        i = i + 1;
    }
    return translated;
}

fn encrypt_message(key_param: []const u8, message: []const u8) []const u8 {
    var res: []const u8 = translate_message(key_param, message, "encrypt");
    res = res;
    return res;
}

fn decrypt_message(key_param: []const u8, message: []const u8) []const u8 {
    var res: []const u8 = translate_message(key_param, message, "decrypt");
    res = res;
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{encrypt_message(key_var, "Harshil Darji")});
        std.debug.print("{s}\n", .{decrypt_message(key_var, "Ilcrism Olcvs")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
