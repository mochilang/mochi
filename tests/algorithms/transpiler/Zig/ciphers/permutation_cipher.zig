// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var seed_var: i64 = 1;
const message_var: []const u8 = "HELLO WORLD";
var block_size_var: i64 = 0;
var key_var: []i64 = &[_]i64{};
var encrypted_var: []const u8 = &[_]u8{};
var decrypted_var: []const u8 = &[_]u8{};

fn rand(max: i64) i64 {
    seed_var = @mod(seed_var * 1103515245 + 12345, 2147483647);
    return @mod(seed_var, max);
}

fn generate_valid_block_size(message_length: i64) i64 {
    var factors: []i64 = &[_]i64{};
    factors = factors;
    var i: i64 = 2;
    i = i;
    while (i <= message_length) {
        if (@mod(message_length, i) == 0) {
            factors = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, factors)) catch |err| handleError(err); _tmp.append(i) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    var idx: i64 = rand(@as(i64, @intCast(factors.len)));
    idx = idx;
    return factors[@as(usize, @intCast(idx))];
}

fn generate_permutation_key(block_size_param: i64) []i64 {
    var digits: []i64 = &[_]i64{};
    digits = digits;
    var i: i64 = 0;
    i = i;
    while (i < block_size_param) {
        digits = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, digits)) catch |err| handleError(err); _tmp.append(i) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var j: i64 = block_size_param - 1;
    j = j;
    while (j > 0) {
        var k: i64 = rand(j + 1);
        k = k;
        var temp: i64 = digits[@as(usize, @intCast(j))];
        temp = temp;
        digits[@as(usize, @intCast(j))] = digits[@as(usize, @intCast(k))];
        digits[@as(usize, @intCast(k))] = temp;
        j = j - 1;
    }
    return digits;
}

fn encrypt(message_param: []const u8, key_param: []i64, block_size_param: i64) []const u8 {
    var encrypted_var_1: []const u8 = "";
    encrypted_var_1 = encrypted_var_1;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(message_param.len))) {
        var block: []const u8 = message_param[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + block_size_param)), @as(usize, @intCast(message_param.len)))];
        block = block;
        var j: i64 = 0;
        j = j;
        while (j < block_size_param) {
            encrypted_var_1 = _concat_string(encrypted_var_1, block[@as(usize, @intCast(key_param[@as(usize, @intCast(j))]))..@min(@as(usize, @intCast(key_param[@as(usize, @intCast(j))] + 1)), @as(usize, @intCast(block.len)))]);
            j = j + 1;
        }
        i = i + block_size_param;
    }
    return encrypted_var_1;
}

fn repeat_string(times: i64) [][]const u8 {
    var res: [][]const u8 = &[_][]const u8{};
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < times) {
        res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append("") catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn decrypt(encrypted_param: []const u8, key_param: []i64) []const u8 {
    var klen: i64 = @as(i64, @intCast(key_param.len));
    klen = klen;
    var decrypted_var_1: []const u8 = "";
    decrypted_var_1 = decrypted_var_1;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(encrypted_param.len))) {
        var block: []const u8 = encrypted_param[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + klen)), @as(usize, @intCast(encrypted_param.len)))];
        block = block;
        var original: [][]const u8 = repeat_string(klen);
        original = original;
        var j: i64 = 0;
        j = j;
        while (j < klen) {
            original[@as(usize, @intCast(key_param[@as(usize, @intCast(j))]))] = block[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(block.len)))];
            j = j + 1;
        }
        j = 0;
        while (j < klen) {
            decrypted_var_1 = _concat_string(decrypted_var_1, original[@as(usize, @intCast(j))]);
            j = j + 1;
        }
        i = i + klen;
    }
    return decrypted_var_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        block_size_var = generate_valid_block_size(@as(i64, @intCast(message_var.len)));
        key_var = generate_permutation_key(block_size_var);
        encrypted_var = encrypt(message_var, key_var, block_size_var);
        decrypted_var = decrypt(encrypted_var, key_var);
        std.debug.print("{s}\n", .{_concat_string("Block size: ", _str(block_size_var))});
        std.debug.print("{s}\n", .{_concat_string("Key: ", _str(key_var))});
        std.debug.print("{s}\n", .{_concat_string("Encrypted: ", encrypted_var)});
        std.debug.print("{s}\n", .{_concat_string("Decrypted: ", decrypted_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
