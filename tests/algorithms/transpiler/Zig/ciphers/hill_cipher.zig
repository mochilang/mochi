// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const KEY_STRING_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
var key_var: [][]i64 = &[_][]i64{};

fn mod36(n: i64) i64 {
    var r: i64 = @mod(n, 36);
    r = r;
    if (r < 0) {
        r = r + 36;
    }
    return r;
}

fn gcd(a: i64, b: i64) i64 {
    var x: i64 = a;
    x = x;
    var y: i64 = b;
    y = y;
    while (y != 0) {
        var t: i64 = y;
        t = t;
        y = @mod(x, y);
        x = t;
    }
    if (x < 0) {
        x = 0 - x;
    }
    return x;
}

fn replace_letters(letter: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(KEY_STRING_var.len))) {
        if (std.mem.eql(u8, KEY_STRING_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], letter)) {
            return i;
        }
        i = i + 1;
    }
    return 0;
}

fn replace_digits(num: i64) []const u8 {
    var idx: i64 = mod36(num);
    idx = idx;
    return KEY_STRING_var[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1];
}

fn to_upper(c: []const u8) []const u8 {
    var lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    lower = lower;
    var upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    upper = upper;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(lower.len))) {
        if (std.mem.eql(u8, c, lower[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1])) {
            return upper[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        }
        i = i + 1;
    }
    return c;
}

fn process_text(text: []const u8, break_key: i64) []const u8 {
    var chars: [][]const u8 = &[_][]const u8{};
    chars = chars;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(text.len))) {
        var c: []const u8 = to_upper(text[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
        c = c;
        var j: i64 = 0;
        j = j;
        var ok: bool = false;
        ok = ok;
        while (j < @as(i64, @intCast(KEY_STRING_var.len))) {
            if (std.mem.eql(u8, KEY_STRING_var[@as(usize, @intCast(j))..@as(usize, @intCast(j)) + 1], c)) {
                ok = true;
                break;
            }
            j = j + 1;
        }
        if (ok) {
            chars = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, chars)) catch |err| handleError(err); _tmp.append(c) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    if (@as(i64, @intCast(chars.len)) == 0) {
        return "";
    }
    var last: []const u8 = chars[@as(usize, @intCast(@as(i64, @intCast(chars.len)) - 1))];
    last = last;
    while (@mod(@as(i64, @intCast(chars.len)), break_key) != 0) {
        chars = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, chars)) catch |err| handleError(err); _tmp.append(last) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    var res: []const u8 = "";
    res = res;
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(chars.len))) {
        res = _concat_string(res, chars[@as(usize, @intCast(k))]);
        k = k + 1;
    }
    return res;
}

fn matrix_minor(m: [][]i64, row: i64, col: i64) [][]i64 {
    var res: [][]i64 = &[_][]i64{};
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(m.len))) {
        if (i != row) {
            var r: []i64 = &[_]i64{};
            r = r;
            var j: i64 = 0;
            j = j;
            while (j < @as(i64, @intCast(m[@as(usize, @intCast(i))].len))) {
                if (j != col) {
                    r = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, r)) catch |err| handleError(err); _tmp.append(m[@as(usize, @intCast(i))][@as(usize, @intCast(j))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                }
                j = j + 1;
            }
            res = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, res)) catch |err| handleError(err); _tmp.append(r) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn determinant(m: [][]i64) i64 {
    var n: i64 = @as(i64, @intCast(m.len));
    n = n;
    if (n == 1) {
        return m[@as(usize, @intCast(0))][@as(usize, @intCast(0))];
    }
    if (n == 2) {
        return m[@as(usize, @intCast(0))][@as(usize, @intCast(0))] * m[@as(usize, @intCast(1))][@as(usize, @intCast(1))] - m[@as(usize, @intCast(0))][@as(usize, @intCast(1))] * m[@as(usize, @intCast(1))][@as(usize, @intCast(0))];
    }
    var det: i64 = 0;
    det = det;
    var col: i64 = 0;
    col = col;
    while (col < n) {
        var minor_mat: [][]i64 = matrix_minor(m, 0, col);
        minor_mat = minor_mat;
        var sign: i64 = 1;
        sign = sign;
        if (@mod(col, 2) == 1) {
            sign = 0 - 1;
        }
        det = det + sign * m[@as(usize, @intCast(0))][@as(usize, @intCast(col))] * determinant(minor_mat);
        col = col + 1;
    }
    return det;
}

fn cofactor_matrix(m: [][]i64) [][]i64 {
    var n: i64 = @as(i64, @intCast(m.len));
    n = n;
    var res: [][]i64 = &[_][]i64{};
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        var row: []i64 = &[_]i64{};
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < n) {
            var minor_mat: [][]i64 = matrix_minor(m, i, j);
            minor_mat = minor_mat;
            var det_minor: i64 = determinant(minor_mat);
            det_minor = det_minor;
            var sign: i64 = 1;
            sign = sign;
            if (@mod(i + j, 2) == 1) {
                sign = 0 - 1;
            }
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(sign * det_minor) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        res = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, res)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn transpose(m: [][]i64) [][]i64 {
    var rows: i64 = @as(i64, @intCast(m.len));
    rows = rows;
    var cols: i64 = @as(i64, @intCast(m[@as(usize, @intCast(0))].len));
    cols = cols;
    var res: [][]i64 = &[_][]i64{};
    res = res;
    var j: i64 = 0;
    j = j;
    while (j < cols) {
        var row: []i64 = &[_]i64{};
        row = row;
        var i: i64 = 0;
        i = i;
        while (i < rows) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(m[@as(usize, @intCast(i))][@as(usize, @intCast(j))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            i = i + 1;
        }
        res = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, res)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    return res;
}

fn matrix_mod(m: [][]i64) [][]i64 {
    var res: [][]i64 = &[_][]i64{};
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(m.len))) {
        var row: []i64 = &[_]i64{};
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(m[@as(usize, @intCast(i))].len))) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(mod36(m[@as(usize, @intCast(i))][@as(usize, @intCast(j))])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        res = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, res)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn scalar_matrix_mult(s: i64, m: [][]i64) [][]i64 {
    var res: [][]i64 = &[_][]i64{};
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(m.len))) {
        var row: []i64 = &[_]i64{};
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(m[@as(usize, @intCast(i))].len))) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(mod36(s * m[@as(usize, @intCast(i))][@as(usize, @intCast(j))])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        res = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, res)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn adjugate(m: [][]i64) [][]i64 {
    var cof: [][]i64 = cofactor_matrix(m);
    cof = cof;
    var n: i64 = @as(i64, @intCast(cof.len));
    n = n;
    var res: [][]i64 = &[_][]i64{};
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        var row: []i64 = &[_]i64{};
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < n) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(cof[@as(usize, @intCast(j))][@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        res = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, res)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn multiply_matrix_vector(m: [][]i64, v: []i64) []i64 {
    var n: i64 = @as(i64, @intCast(m.len));
    n = n;
    var res: []i64 = &[_]i64{};
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        var sum: i64 = 0;
        sum = sum;
        var j: i64 = 0;
        j = j;
        while (j < n) {
            sum = sum + m[@as(usize, @intCast(i))][@as(usize, @intCast(j))] * v[@as(usize, @intCast(j))];
            j = j + 1;
        }
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(mod36(sum)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn inverse_key(key_param: [][]i64) [][]i64 {
    var det_val: i64 = determinant(key_param);
    det_val = det_val;
    var det_mod: i64 = mod36(det_val);
    det_mod = det_mod;
    var det_inv: i64 = 0;
    det_inv = det_inv;
    var i: i64 = 0;
    i = i;
    while (i < 36) {
        if (@mod(det_mod * i, 36) == 1) {
            det_inv = i;
            break;
        }
        i = i + 1;
    }
    var adj: [][]i64 = adjugate(key_param);
    adj = adj;
    var tmp: [][]i64 = scalar_matrix_mult(det_inv, adj);
    tmp = tmp;
    var res: [][]i64 = matrix_mod(tmp);
    res = res;
    return res;
}

fn hill_encrypt(key_param: [][]i64, text: []const u8) []const u8 {
    var break_key: i64 = @as(i64, @intCast(key_param.len));
    break_key = break_key;
    var processed: []const u8 = process_text(text, break_key);
    processed = processed;
    var encrypted: []const u8 = "";
    encrypted = encrypted;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(processed.len))) {
        var vec: []i64 = &[_]i64{};
        vec = vec;
        var j: i64 = 0;
        j = j;
        while (j < break_key) {
            vec = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, vec)) catch |err| handleError(err); _tmp.append(replace_letters(processed[@as(usize, @intCast(i + j))..@as(usize, @intCast(i + j)) + 1])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        var enc_vec: []i64 = multiply_matrix_vector(key_param, vec);
        enc_vec = enc_vec;
        var k: i64 = 0;
        k = k;
        while (k < break_key) {
            encrypted = _concat_string(encrypted, replace_digits(enc_vec[@as(usize, @intCast(k))]));
            k = k + 1;
        }
        i = i + break_key;
    }
    return encrypted;
}

fn hill_decrypt(key_param: [][]i64, text: []const u8) []const u8 {
    var break_key: i64 = @as(i64, @intCast(key_param.len));
    break_key = break_key;
    var decrypt_key: [][]i64 = inverse_key(key_param);
    decrypt_key = decrypt_key;
    var processed: []const u8 = process_text(text, break_key);
    processed = processed;
    var decrypted: []const u8 = "";
    decrypted = decrypted;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(processed.len))) {
        var vec: []i64 = &[_]i64{};
        vec = vec;
        var j: i64 = 0;
        j = j;
        while (j < break_key) {
            vec = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, vec)) catch |err| handleError(err); _tmp.append(replace_letters(processed[@as(usize, @intCast(i + j))..@as(usize, @intCast(i + j)) + 1])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        var dec_vec: []i64 = multiply_matrix_vector(decrypt_key, vec);
        dec_vec = dec_vec;
        var k: i64 = 0;
        k = k;
        while (k < break_key) {
            decrypted = _concat_string(decrypted, replace_digits(dec_vec[@as(usize, @intCast(k))]));
            k = k + 1;
        }
        i = i + break_key;
    }
    return decrypted;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        key_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]i64, 2) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp1[0] = 2; _tmp1[1] = 5; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp2[0] = 1; _tmp2[1] = 6; break :blk2 _tmp2; }; break :blk0 _tmp0; };
        std.debug.print("{s}\n", .{hill_encrypt(key_var, "testing hill cipher")});
        std.debug.print("{s}\n", .{hill_encrypt(key_var, "hello")});
        std.debug.print("{s}\n", .{hill_decrypt(key_var, "WHXYJOLM9C6XT085LL")});
        std.debug.print("{s}\n", .{hill_decrypt(key_var, "85FF00")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
