// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var SQUARE_var: [][][]const u8 = &[_][][]const u8{};

fn index_of(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn to_lower_without_spaces(message: []const u8, replace_j: bool) []const u8 {
    var upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    upper = upper;
    var lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    lower = lower;
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(message.len))) {
        var ch: []const u8 = message[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        var pos: i64 = index_of(upper, ch);
        pos = pos;
        if (pos >= 0) {
            ch = lower[@as(usize, @intCast(pos))..@as(usize, @intCast(pos)) + 1];
        }
        if (!std.mem.eql(u8, ch, " ")) {
            if (replace_j and std.mem.eql(u8, ch, "j")) {
                ch = "i";
            }
            res = _concat_string(res, ch);
        }
        i = i + 1;
    }
    return res;
}

fn letter_to_numbers(letter: []const u8) []i64 {
    var r: i64 = 0;
    r = r;
    while (r < @as(i64, @intCast(SQUARE_var.len))) {
        var c: i64 = 0;
        c = c;
        while (c < @as(i64, @intCast(SQUARE_var[@as(usize, @intCast(r))].len))) {
            if (std.mem.eql(u8, SQUARE_var[@as(usize, @intCast(r))][@as(usize, @intCast(c))], letter)) {
                return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp0[0] = r + 1; _tmp0[1] = c + 1; break :blk0 _tmp0; };
            }
            c = c + 1;
        }
        r = r + 1;
    }
    return blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp1[0] = 0; _tmp1[1] = 0; break :blk1 _tmp1; };
}

fn numbers_to_letter(row: i64, col: i64) []const u8 {
    return SQUARE_var[@as(usize, @intCast(row - 1))][@as(usize, @intCast(col - 1))];
}

fn encode(message: []const u8) []const u8 {
    var clean: []const u8 = to_lower_without_spaces(message, true);
    clean = clean;
    var l: i64 = @as(i64, @intCast(clean.len));
    l = l;
    var rows: []i64 = &[_]i64{};
    rows = rows;
    var cols: []i64 = &[_]i64{};
    cols = cols;
    var i: i64 = 0;
    i = i;
    while (i < l) {
        var nums: []i64 = letter_to_numbers(clean[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
        nums = nums;
        rows = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, rows)) catch |err| handleError(err); _tmp.append(nums[@as(usize, @intCast(0))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        cols = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, cols)) catch |err| handleError(err); _tmp.append(nums[@as(usize, @intCast(1))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var seq: []i64 = &[_]i64{};
    seq = seq;
    i = 0;
    while (i < l) {
        seq = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, seq)) catch |err| handleError(err); _tmp.append(rows[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = 0;
    while (i < l) {
        seq = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, seq)) catch |err| handleError(err); _tmp.append(cols[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var encoded: []const u8 = "";
    encoded = encoded;
    i = 0;
    while (i < l) {
        var r: i64 = seq[@as(usize, @intCast(2 * i))];
        r = r;
        var c: i64 = seq[@as(usize, @intCast(2 * i + 1))];
        c = c;
        encoded = _concat_string(encoded, numbers_to_letter(r, c));
        i = i + 1;
    }
    return encoded;
}

fn decode(message: []const u8) []const u8 {
    var clean: []const u8 = to_lower_without_spaces(message, false);
    clean = clean;
    var l: i64 = @as(i64, @intCast(clean.len));
    l = l;
    var first: []i64 = &[_]i64{};
    first = first;
    var i: i64 = 0;
    i = i;
    while (i < l) {
        var nums: []i64 = letter_to_numbers(clean[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
        nums = nums;
        first = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, first)) catch |err| handleError(err); _tmp.append(nums[@as(usize, @intCast(0))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        first = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, first)) catch |err| handleError(err); _tmp.append(nums[@as(usize, @intCast(1))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var top: []i64 = &[_]i64{};
    top = top;
    var bottom: []i64 = &[_]i64{};
    bottom = bottom;
    i = 0;
    while (i < l) {
        top = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, top)) catch |err| handleError(err); _tmp.append(first[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        bottom = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, bottom)) catch |err| handleError(err); _tmp.append(first[@as(usize, @intCast(i + l))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var decoded: []const u8 = "";
    decoded = decoded;
    i = 0;
    while (i < l) {
        var r: i64 = top[@as(usize, @intCast(i))];
        r = r;
        var c: i64 = bottom[@as(usize, @intCast(i))];
        c = c;
        decoded = _concat_string(decoded, numbers_to_letter(r, c));
        i = i + 1;
    }
    return decoded;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        SQUARE_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc([][]const u8, 5) catch unreachable; _tmp2[0] = blk3: { var _tmp3 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp3[0] = "a"; _tmp3[1] = "b"; _tmp3[2] = "c"; _tmp3[3] = "d"; _tmp3[4] = "e"; break :blk3 _tmp3; }; _tmp2[1] = blk4: { var _tmp4 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp4[0] = "f"; _tmp4[1] = "g"; _tmp4[2] = "h"; _tmp4[3] = "i"; _tmp4[4] = "k"; break :blk4 _tmp4; }; _tmp2[2] = blk5: { var _tmp5 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp5[0] = "l"; _tmp5[1] = "m"; _tmp5[2] = "n"; _tmp5[3] = "o"; _tmp5[4] = "p"; break :blk5 _tmp5; }; _tmp2[3] = blk6: { var _tmp6 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp6[0] = "q"; _tmp6[1] = "r"; _tmp6[2] = "s"; _tmp6[3] = "t"; _tmp6[4] = "u"; break :blk6 _tmp6; }; _tmp2[4] = blk7: { var _tmp7 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp7[0] = "v"; _tmp7[1] = "w"; _tmp7[2] = "x"; _tmp7[3] = "y"; _tmp7[4] = "z"; break :blk7 _tmp7; }; break :blk2 _tmp2; };
        std.debug.print("{s}\n", .{encode("testmessage")});
        std.debug.print("{s}\n", .{encode("Test Message")});
        std.debug.print("{s}\n", .{encode("test j")});
        std.debug.print("{s}\n", .{encode("test i")});
        std.debug.print("{s}\n", .{decode("qtltbdxrxlk")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
