// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var seed_var: i64 = 1;
const ascii_chars_var: []const u8 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
var res_var: std.StringHashMap([]i64) = std.StringHashMap([]i64).init(std.heap.page_allocator);
var cipher_var: []i64 = &[_]i64{};
var key_var: []i64 = &[_]i64{};

fn set_seed(s: i64) void {
    seed_var = s;
}

fn randint(a: i64, b: i64) i64 {
    seed_var = @mod(seed_var * 1103515245 + 12345, 2147483648);
    return @mod(seed_var, b - a + 1) + a;
}

fn ord(ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(ascii_chars_var.len))) {
        if (std.mem.eql(u8, ascii_chars_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return 32 + i;
        }
        i = i + 1;
    }
    return 0;
}

fn chr(code: i64) []const u8 {
    if (code < 32 or code > 126) {
        return "";
    }
    return ascii_chars_var[@as(usize, @intCast(code - 32))..@as(usize, @intCast(code - 32)) + 1];
}

fn encrypt(text: []const u8) std.StringHashMap([]i64) {
    var cipher_var_1: []i64 = &[_]i64{};
    cipher_var_1 = cipher_var_1;
    var key_var_1: []i64 = &[_]i64{};
    key_var_1 = key_var_1;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(text.len))) {
        var p: i64 = ord(text[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
        p = p;
        var k: i64 = randint(1, 300);
        k = k;
        var c: i64 = (p + k) * k;
        c = c;
        cipher_var_1 = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, cipher_var_1)) catch |err| handleError(err); _tmp.append(c) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        key_var_1 = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, key_var_1)) catch |err| handleError(err); _tmp.append(k) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var res_var_1: std.StringHashMap([]i64) = std.StringHashMap([]i64).init(std.heap.page_allocator);
    res_var_1 = res_var_1;
    res_var_1.put("cipher", cipher_var_1) catch unreachable;
    res_var_1.put("key", key_var_1) catch unreachable;
    return res_var_1;
}

fn decrypt(cipher_param: []i64, key_param: []i64) []const u8 {
    var plain: []const u8 = "";
    plain = plain;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(key_param.len))) {
        var p: i64 = @divTrunc(cipher_param[@as(usize, @intCast(i))] - key_param[@as(usize, @intCast(i))] * key_param[@as(usize, @intCast(i))], key_param[@as(usize, @intCast(i))]);
        p = p;
        plain = _concat_string(plain, chr(p));
        i = i + 1;
    }
    return plain;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        res_var = encrypt("Hello");
        cipher_var = res_var.get("cipher").?;
        key_var = res_var.get("key").?;
        set_seed(1);
        std.debug.print("{s}\n", .{_str(cipher_var)});
        std.debug.print("{s}\n", .{_str(key_var)});
        std.debug.print("{s}\n", .{decrypt(cipher_var, key_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
