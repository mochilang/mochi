// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const B64_CHARSET_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

fn to_binary(n: i64) []const u8 {
    if (n == 0) {
        return "0";
    }
    var num: i64 = n;
    num = num;
    var res: []const u8 = "";
    res = res;
    while (num > 0) {
        var bit: i64 = @mod(num, 2);
        bit = bit;
        res = _concat_string(_str(bit), res);
        num = @divTrunc(num, 2);
    }
    return res;
}

fn zfill(s: []const u8, width: i64) []const u8 {
    var res: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, s.len) catch unreachable; @memcpy(tmp, s); break :blk tmp; };
    res = res;
    var pad: i64 = width - @as(i64, @intCast(s.len));
    pad = pad;
    while (pad > 0) {
        res = _concat_string("0", res);
        pad = pad - 1;
    }
    return res;
}

fn from_binary(s: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    var result: i64 = 0;
    result = result;
    while (i < @as(i64, @intCast(s.len))) {
        result = result * 2;
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))], "1")) {
            result = result + 1;
        }
        i = i + 1;
    }
    return result;
}

fn repeat(ch: []const u8, times: i64) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < times) {
        res = _concat_string(res, ch);
        i = i + 1;
    }
    return res;
}

fn char_index(s: []const u8, c: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))], c)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn base64_encode(data: []i64) []const u8 {
    var bits: []const u8 = "";
    bits = bits;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(data.len))) {
        bits = _concat_string(bits, zfill(to_binary(data[@as(usize, @intCast(i))]), 8));
        i = i + 1;
    }
    var pad_bits: i64 = 0;
    pad_bits = pad_bits;
    if (@mod(@as(i64, @intCast(bits.len)), 6) != 0) {
        pad_bits = 6 - @mod(@as(i64, @intCast(bits.len)), 6);
        bits = _concat_string(bits, repeat("0", pad_bits));
    }
    var j: i64 = 0;
    j = j;
    var encoded: []const u8 = "";
    encoded = encoded;
    while (j < @as(i64, @intCast(bits.len))) {
        var chunk: []const u8 = bits[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 6)), @as(usize, @intCast(bits.len)))];
        chunk = chunk;
        var idx: i64 = from_binary(chunk);
        idx = idx;
        encoded = _concat_string(encoded, B64_CHARSET_var[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(B64_CHARSET_var.len)))]);
        j = j + 6;
    }
    var pad: i64 = @divTrunc(pad_bits, 2);
    pad = pad;
    while (pad > 0) {
        encoded = _concat_string(encoded, "=");
        pad = pad - 1;
    }
    return encoded;
}

fn base64_decode(s: []const u8) []i64 {
    var padding: i64 = 0;
    padding = padding;
    var end: i64 = @as(i64, @intCast(s.len));
    end = end;
    while (end > 0 and std.mem.eql(u8, s[@as(usize, @intCast(end - 1))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(s.len)))], "=")) {
        padding = padding + 1;
        end = end - 1;
    }
    var bits: []const u8 = "";
    bits = bits;
    var k: i64 = 0;
    k = k;
    while (k < end) {
        var c: []const u8 = s[@as(usize, @intCast(k))..@min(@as(usize, @intCast(k + 1)), @as(usize, @intCast(s.len)))];
        c = c;
        var idx: i64 = char_index(B64_CHARSET_var, c);
        idx = idx;
        bits = _concat_string(bits, zfill(to_binary(idx), 6));
        k = k + 1;
    }
    if (padding > 0) {
        bits = bits[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(bits.len)) - padding * 2)), @as(usize, @intCast(bits.len)))];
    }
    var bytes: []i64 = &[_]i64{};
    bytes = bytes;
    var m: i64 = 0;
    m = m;
    while (m < @as(i64, @intCast(bits.len))) {
        var byte: i64 = from_binary(bits[@as(usize, @intCast(m))..@min(@as(usize, @intCast(m + 8)), @as(usize, @intCast(bits.len)))]);
        byte = byte;
        bytes = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, bytes)) catch |err| handleError(err); _tmp.append(byte) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        m = m + 8;
    }
    return bytes;
}

fn mochi_main() void {
    var data: []i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp0[0] = 77; _tmp0[1] = 111; _tmp0[2] = 99; _tmp0[3] = 104; _tmp0[4] = 105; break :blk0 _tmp0; };
    data = data;
    var encoded: []const u8 = base64_encode(data);
    encoded = encoded;
    std.debug.print("{s}\n", .{encoded});
    const __j = std.json.stringifyAlloc(std.heap.page_allocator, base64_decode(encoded), .{}) catch unreachable;
    std.debug.print("{s}\n", .{__j});
    std.heap.page_allocator.free(__j);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
