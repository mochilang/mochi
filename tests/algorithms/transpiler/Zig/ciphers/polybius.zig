// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var square_var: [][][]const u8 = &[_][][]const u8{};

fn letter_to_numbers(letter: []const u8) []i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(square_var.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(square_var[@as(usize, @intCast(i))].len))) {
            if (std.mem.eql(u8, square_var[@as(usize, @intCast(i))][@as(usize, @intCast(j))], letter)) {
                return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp0[0] = i + 1; _tmp0[1] = j + 1; break :blk0 _tmp0; };
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp1[0] = 0; _tmp1[1] = 0; break :blk1 _tmp1; };
}

fn numbers_to_letter(index1: i64, index2: i64) []const u8 {
    return square_var[@as(usize, @intCast(index1 - 1))][@as(usize, @intCast(index2 - 1))];
}

fn char_to_int(ch: []const u8) i64 {
    if (std.mem.eql(u8, ch, "1")) {
        return 1;
    }
    if (std.mem.eql(u8, ch, "2")) {
        return 2;
    }
    if (std.mem.eql(u8, ch, "3")) {
        return 3;
    }
    if (std.mem.eql(u8, ch, "4")) {
        return 4;
    }
    if (std.mem.eql(u8, ch, "5")) {
        return 5;
    }
    return 0;
}

fn encode(message_param: []const u8) []const u8 {
    var message_var: []const u8 = message_param;
    message_var = message_var;
    message_var = _lower(message_var);
    var encoded: []const u8 = "";
    encoded = encoded;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(message_var.len))) {
        var ch: []const u8 = message_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        if (std.mem.eql(u8, ch, "j")) {
            ch = "i";
        }
        if (!std.mem.eql(u8, ch, " ")) {
            var nums: []i64 = letter_to_numbers(ch);
            nums = nums;
            encoded = _concat_string(_concat_string(encoded, _str(nums[@as(usize, @intCast(0))])), _str(nums[@as(usize, @intCast(1))]));
        } else {
            encoded = _concat_string(encoded, " ");
        }
        i = i + 1;
    }
    return encoded;
}

fn decode(message: []const u8) []const u8 {
    var decoded: []const u8 = "";
    decoded = decoded;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(message.len))) {
        if (std.mem.eql(u8, message[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], " ")) {
            decoded = _concat_string(decoded, " ");
            i = i + 1;
        } else {
            var index1: i64 = char_to_int(message[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
            index1 = index1;
            var index2: i64 = char_to_int(message[@as(usize, @intCast(i + 1))..@as(usize, @intCast(i + 1)) + 1]);
            index2 = index2;
            var letter: []const u8 = numbers_to_letter(index1, index2);
            letter = letter;
            decoded = _concat_string(decoded, letter);
            i = i + 2;
        }
    }
    return decoded;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        square_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc([][]const u8, 5) catch unreachable; _tmp2[0] = blk3: { var _tmp3 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp3[0] = "a"; _tmp3[1] = "b"; _tmp3[2] = "c"; _tmp3[3] = "d"; _tmp3[4] = "e"; break :blk3 _tmp3; }; _tmp2[1] = blk4: { var _tmp4 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp4[0] = "f"; _tmp4[1] = "g"; _tmp4[2] = "h"; _tmp4[3] = "i"; _tmp4[4] = "k"; break :blk4 _tmp4; }; _tmp2[2] = blk5: { var _tmp5 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp5[0] = "l"; _tmp5[1] = "m"; _tmp5[2] = "n"; _tmp5[3] = "o"; _tmp5[4] = "p"; break :blk5 _tmp5; }; _tmp2[3] = blk6: { var _tmp6 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp6[0] = "q"; _tmp6[1] = "r"; _tmp6[2] = "s"; _tmp6[3] = "t"; _tmp6[4] = "u"; break :blk6 _tmp6; }; _tmp2[4] = blk7: { var _tmp7 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp7[0] = "v"; _tmp7[1] = "w"; _tmp7[2] = "x"; _tmp7[3] = "y"; _tmp7[4] = "z"; break :blk7 _tmp7; }; break :blk2 _tmp2; };
        std.debug.print("{s}\n", .{encode("test message")});
        std.debug.print("{s}\n", .{encode("Test Message")});
        std.debug.print("{s}\n", .{decode("44154344 32154343112215")});
        std.debug.print("{s}\n", .{decode("4415434432154343112215")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
