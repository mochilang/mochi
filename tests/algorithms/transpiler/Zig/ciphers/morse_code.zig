// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var CHARS_var: [][]const u8 = &[_][]const u8{};
var CODES_var: [][]const u8 = &[_][]const u8{};
const msg_var: []const u8 = "Morse code here!";
var enc_var: []const u8 = &[_]u8{};
var dec_var: []const u8 = &[_]u8{};

fn to_upper_char(c: []const u8) []const u8 {
    if (std.mem.eql(u8, c, "a")) {
        return "A";
    }
    if (std.mem.eql(u8, c, "b")) {
        return "B";
    }
    if (std.mem.eql(u8, c, "c")) {
        return "C";
    }
    if (std.mem.eql(u8, c, "d")) {
        return "D";
    }
    if (std.mem.eql(u8, c, "e")) {
        return "E";
    }
    if (std.mem.eql(u8, c, "f")) {
        return "F";
    }
    if (std.mem.eql(u8, c, "g")) {
        return "G";
    }
    if (std.mem.eql(u8, c, "h")) {
        return "H";
    }
    if (std.mem.eql(u8, c, "i")) {
        return "I";
    }
    if (std.mem.eql(u8, c, "j")) {
        return "J";
    }
    if (std.mem.eql(u8, c, "k")) {
        return "K";
    }
    if (std.mem.eql(u8, c, "l")) {
        return "L";
    }
    if (std.mem.eql(u8, c, "m")) {
        return "M";
    }
    if (std.mem.eql(u8, c, "n")) {
        return "N";
    }
    if (std.mem.eql(u8, c, "o")) {
        return "O";
    }
    if (std.mem.eql(u8, c, "p")) {
        return "P";
    }
    if (std.mem.eql(u8, c, "q")) {
        return "Q";
    }
    if (std.mem.eql(u8, c, "r")) {
        return "R";
    }
    if (std.mem.eql(u8, c, "s")) {
        return "S";
    }
    if (std.mem.eql(u8, c, "t")) {
        return "T";
    }
    if (std.mem.eql(u8, c, "u")) {
        return "U";
    }
    if (std.mem.eql(u8, c, "v")) {
        return "V";
    }
    if (std.mem.eql(u8, c, "w")) {
        return "W";
    }
    if (std.mem.eql(u8, c, "x")) {
        return "X";
    }
    if (std.mem.eql(u8, c, "y")) {
        return "Y";
    }
    if (std.mem.eql(u8, c, "z")) {
        return "Z";
    }
    return c;
}

fn to_upper(s: []const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        res = _concat_string(res, to_upper_char(s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]));
        i = i + 1;
    }
    return res;
}

fn index_of(xs: [][]const u8, target: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[@as(usize, @intCast(i))], target)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn encrypt(message: []const u8) []const u8 {
    var msg_var_1: []const u8 = to_upper(message);
    msg_var_1 = msg_var_1;
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(msg_var_1.len))) {
        var c: []const u8 = msg_var_1[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        c = c;
        var idx: i64 = index_of(CHARS_var, c);
        idx = idx;
        if (idx >= 0) {
            if (res.len != 0) {
                res = _concat_string(res, " ");
            }
            res = _concat_string(res, CODES_var[@as(usize, @intCast(idx))]);
        }
        i = i + 1;
    }
    return res;
}

fn split_spaces(s: []const u8) [][]const u8 {
    var res: [][]const u8 = &[_][]const u8{};
    res = res;
    var current: []const u8 = "";
    current = current;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        var ch: []const u8 = s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        if (std.mem.eql(u8, ch, " ")) {
            if (current.len != 0) {
                res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(current) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                current = "";
            }
        } else {
            current = _concat_string(current, ch);
        }
        i = i + 1;
    }
    if (current.len != 0) {
        res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(current) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return res;
}

fn decrypt(message: []const u8) []const u8 {
    var parts: [][]const u8 = split_spaces(message);
    parts = parts;
    var res: []const u8 = "";
    res = res;
    for (parts) |__it0| {
        const code = __it0;
        var idx: i64 = index_of(CODES_var, code);
        idx = idx;
        if (idx >= 0) {
            res = _concat_string(res, CHARS_var[@as(usize, @intCast(idx))]);
        }
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        CHARS_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 52) catch unreachable; _tmp0[0] = "A"; _tmp0[1] = "B"; _tmp0[2] = "C"; _tmp0[3] = "D"; _tmp0[4] = "E"; _tmp0[5] = "F"; _tmp0[6] = "G"; _tmp0[7] = "H"; _tmp0[8] = "I"; _tmp0[9] = "J"; _tmp0[10] = "K"; _tmp0[11] = "L"; _tmp0[12] = "M"; _tmp0[13] = "N"; _tmp0[14] = "O"; _tmp0[15] = "P"; _tmp0[16] = "Q"; _tmp0[17] = "R"; _tmp0[18] = "S"; _tmp0[19] = "T"; _tmp0[20] = "U"; _tmp0[21] = "V"; _tmp0[22] = "W"; _tmp0[23] = "X"; _tmp0[24] = "Y"; _tmp0[25] = "Z"; _tmp0[26] = "1"; _tmp0[27] = "2"; _tmp0[28] = "3"; _tmp0[29] = "4"; _tmp0[30] = "5"; _tmp0[31] = "6"; _tmp0[32] = "7"; _tmp0[33] = "8"; _tmp0[34] = "9"; _tmp0[35] = "0"; _tmp0[36] = "&"; _tmp0[37] = "@"; _tmp0[38] = ":"; _tmp0[39] = ","; _tmp0[40] = "."; _tmp0[41] = "'"; _tmp0[42] = "\""; _tmp0[43] = "?"; _tmp0[44] = "/"; _tmp0[45] = "="; _tmp0[46] = "+"; _tmp0[47] = "-"; _tmp0[48] = "("; _tmp0[49] = ")"; _tmp0[50] = "!"; _tmp0[51] = " "; break :blk0 _tmp0; };
        CODES_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc([]const u8, 52) catch unreachable; _tmp1[0] = ".-"; _tmp1[1] = "-..."; _tmp1[2] = "-.-."; _tmp1[3] = "-.."; _tmp1[4] = "."; _tmp1[5] = "..-."; _tmp1[6] = "--."; _tmp1[7] = "...."; _tmp1[8] = ".."; _tmp1[9] = ".---"; _tmp1[10] = "-.-"; _tmp1[11] = ".-.."; _tmp1[12] = "--"; _tmp1[13] = "-."; _tmp1[14] = "---"; _tmp1[15] = ".--."; _tmp1[16] = "--.-"; _tmp1[17] = ".-."; _tmp1[18] = "..."; _tmp1[19] = "-"; _tmp1[20] = "..-"; _tmp1[21] = "...-"; _tmp1[22] = ".--"; _tmp1[23] = "-..-"; _tmp1[24] = "-.--"; _tmp1[25] = "--.."; _tmp1[26] = ".----"; _tmp1[27] = "..---"; _tmp1[28] = "...--"; _tmp1[29] = "....-"; _tmp1[30] = "....."; _tmp1[31] = "-...."; _tmp1[32] = "--..."; _tmp1[33] = "---.."; _tmp1[34] = "----."; _tmp1[35] = "-----"; _tmp1[36] = ".-..."; _tmp1[37] = ".--.-."; _tmp1[38] = "---..."; _tmp1[39] = "--..--"; _tmp1[40] = ".-.-.-"; _tmp1[41] = ".----."; _tmp1[42] = ".-..-."; _tmp1[43] = "..--.."; _tmp1[44] = "-..-."; _tmp1[45] = "-...-"; _tmp1[46] = ".-.-."; _tmp1[47] = "-....-"; _tmp1[48] = "-.--."; _tmp1[49] = "-.--.-"; _tmp1[50] = "-.-.--"; _tmp1[51] = "/"; break :blk1 _tmp1; };
        enc_var = encrypt(msg_var);
        dec_var = decrypt(enc_var);
        std.debug.print("{s}\n", .{msg_var});
        std.debug.print("{s}\n", .{enc_var});
        std.debug.print("{s}\n", .{dec_var});
        std.debug.print("{s}\n", .{encrypt("Sos!")});
        std.debug.print("{s}\n", .{decrypt("... --- ... -.-.--")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
