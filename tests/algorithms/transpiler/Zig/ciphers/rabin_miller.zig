// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var p_var: i64 = 0;

fn int_pow(base: i64, exp: i64) i64 {
    var result: i64 = 1;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < exp) {
        result = result * base;
        i = i + 1;
    }
    return result;
}

fn pow_mod(base: i64, exp: i64, mod: i64) i64 {
    var result: i64 = 1;
    result = result;
    var b: i64 = @mod(base, mod);
    b = b;
    var e: i64 = exp;
    e = e;
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = @mod(result * b, mod);
        }
        e = @divTrunc(e, 2);
        b = @mod(b * b, mod);
    }
    return result;
}

fn rand_range(low: i64, high: i64) i64 {
    return @mod(_now(), high - low) + low;
}

fn rabin_miller(num: i64) bool {
    var s: i64 = num - 1;
    s = s;
    var t: i64 = 0;
    t = t;
    while (@mod(s, 2) == 0) {
        s = @divTrunc(s, 2);
        t = t + 1;
    }
    var k: i64 = 0;
    k = k;
    while (k < 5) {
        var a: i64 = rand_range(2, num - 1);
        a = a;
        var v: i64 = pow_mod(a, s, num);
        v = v;
        if (v != 1) {
            var i: i64 = 0;
            i = i;
            while (v != num - 1) {
                if (i == t - 1) {
                    return false;
                }
                i = i + 1;
                v = @mod(v * v, num);
            }
        }
        k = k + 1;
    }
    return true;
}

fn is_prime_low_num(num: i64) bool {
    if (num < 2) {
        return false;
    }
    var low_primes: []i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 168) catch unreachable; _tmp0[0] = 2; _tmp0[1] = 3; _tmp0[2] = 5; _tmp0[3] = 7; _tmp0[4] = 11; _tmp0[5] = 13; _tmp0[6] = 17; _tmp0[7] = 19; _tmp0[8] = 23; _tmp0[9] = 29; _tmp0[10] = 31; _tmp0[11] = 37; _tmp0[12] = 41; _tmp0[13] = 43; _tmp0[14] = 47; _tmp0[15] = 53; _tmp0[16] = 59; _tmp0[17] = 61; _tmp0[18] = 67; _tmp0[19] = 71; _tmp0[20] = 73; _tmp0[21] = 79; _tmp0[22] = 83; _tmp0[23] = 89; _tmp0[24] = 97; _tmp0[25] = 101; _tmp0[26] = 103; _tmp0[27] = 107; _tmp0[28] = 109; _tmp0[29] = 113; _tmp0[30] = 127; _tmp0[31] = 131; _tmp0[32] = 137; _tmp0[33] = 139; _tmp0[34] = 149; _tmp0[35] = 151; _tmp0[36] = 157; _tmp0[37] = 163; _tmp0[38] = 167; _tmp0[39] = 173; _tmp0[40] = 179; _tmp0[41] = 181; _tmp0[42] = 191; _tmp0[43] = 193; _tmp0[44] = 197; _tmp0[45] = 199; _tmp0[46] = 211; _tmp0[47] = 223; _tmp0[48] = 227; _tmp0[49] = 229; _tmp0[50] = 233; _tmp0[51] = 239; _tmp0[52] = 241; _tmp0[53] = 251; _tmp0[54] = 257; _tmp0[55] = 263; _tmp0[56] = 269; _tmp0[57] = 271; _tmp0[58] = 277; _tmp0[59] = 281; _tmp0[60] = 283; _tmp0[61] = 293; _tmp0[62] = 307; _tmp0[63] = 311; _tmp0[64] = 313; _tmp0[65] = 317; _tmp0[66] = 331; _tmp0[67] = 337; _tmp0[68] = 347; _tmp0[69] = 349; _tmp0[70] = 353; _tmp0[71] = 359; _tmp0[72] = 367; _tmp0[73] = 373; _tmp0[74] = 379; _tmp0[75] = 383; _tmp0[76] = 389; _tmp0[77] = 397; _tmp0[78] = 401; _tmp0[79] = 409; _tmp0[80] = 419; _tmp0[81] = 421; _tmp0[82] = 431; _tmp0[83] = 433; _tmp0[84] = 439; _tmp0[85] = 443; _tmp0[86] = 449; _tmp0[87] = 457; _tmp0[88] = 461; _tmp0[89] = 463; _tmp0[90] = 467; _tmp0[91] = 479; _tmp0[92] = 487; _tmp0[93] = 491; _tmp0[94] = 499; _tmp0[95] = 503; _tmp0[96] = 509; _tmp0[97] = 521; _tmp0[98] = 523; _tmp0[99] = 541; _tmp0[100] = 547; _tmp0[101] = 557; _tmp0[102] = 563; _tmp0[103] = 569; _tmp0[104] = 571; _tmp0[105] = 577; _tmp0[106] = 587; _tmp0[107] = 593; _tmp0[108] = 599; _tmp0[109] = 601; _tmp0[110] = 607; _tmp0[111] = 613; _tmp0[112] = 617; _tmp0[113] = 619; _tmp0[114] = 631; _tmp0[115] = 641; _tmp0[116] = 643; _tmp0[117] = 647; _tmp0[118] = 653; _tmp0[119] = 659; _tmp0[120] = 661; _tmp0[121] = 673; _tmp0[122] = 677; _tmp0[123] = 683; _tmp0[124] = 691; _tmp0[125] = 701; _tmp0[126] = 709; _tmp0[127] = 719; _tmp0[128] = 727; _tmp0[129] = 733; _tmp0[130] = 739; _tmp0[131] = 743; _tmp0[132] = 751; _tmp0[133] = 757; _tmp0[134] = 761; _tmp0[135] = 769; _tmp0[136] = 773; _tmp0[137] = 787; _tmp0[138] = 797; _tmp0[139] = 809; _tmp0[140] = 811; _tmp0[141] = 821; _tmp0[142] = 823; _tmp0[143] = 827; _tmp0[144] = 829; _tmp0[145] = 839; _tmp0[146] = 853; _tmp0[147] = 857; _tmp0[148] = 859; _tmp0[149] = 863; _tmp0[150] = 877; _tmp0[151] = 881; _tmp0[152] = 883; _tmp0[153] = 887; _tmp0[154] = 907; _tmp0[155] = 911; _tmp0[156] = 919; _tmp0[157] = 929; _tmp0[158] = 937; _tmp0[159] = 941; _tmp0[160] = 947; _tmp0[161] = 953; _tmp0[162] = 967; _tmp0[163] = 971; _tmp0[164] = 977; _tmp0[165] = 983; _tmp0[166] = 991; _tmp0[167] = 997; break :blk0 _tmp0; };
    low_primes = low_primes;
    if (std.mem.indexOfScalar(i64, low_primes, num) != null) {
        return true;
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(low_primes.len))) {
        var p_var_1: i64 = low_primes[@as(usize, @intCast(i))];
        p_var_1 = p_var_1;
        if (@mod(num, p_var_1) == 0) {
            return false;
        }
        i = i + 1;
    }
    return rabin_miller(num);
}

fn generate_large_prime(keysize: i64) i64 {
    var start: i64 = int_pow(2, keysize - 1);
    start = start;
    var end: i64 = int_pow(2, keysize);
    end = end;
    while (true) {
        var num: i64 = rand_range(start, end);
        num = num;
        if (is_prime_low_num(num)) {
            return num;
        }
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        p_var = generate_large_prime(16);
        std.debug.print("{s}\n", .{_concat_string("Prime number: ", _str(p_var))});
        std.debug.print("{s}\n", .{_concat_string("is_prime_low_num: ", _str(is_prime_low_num(p_var)))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
