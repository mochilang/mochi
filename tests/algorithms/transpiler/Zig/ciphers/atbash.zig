// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn index_of(s: []const u8, c: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], c)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn atbash(sequence: []const u8) []const u8 {
    var lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    lower = lower;
    var upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    upper = upper;
    var lower_rev: []const u8 = "zyxwvutsrqponmlkjihgfedcba";
    lower_rev = lower_rev;
    var upper_rev: []const u8 = "ZYXWVUTSRQPONMLKJIHGFEDCBA";
    upper_rev = upper_rev;
    var result: []const u8 = "";
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(sequence.len))) {
        var ch: []const u8 = sequence[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        var idx: i64 = index_of(lower, ch);
        idx = idx;
        if (idx != 0 - 1) {
            result = _concat_string(result, lower_rev[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1]);
        } else {
            var idx2: i64 = index_of(upper, ch);
            idx2 = idx2;
            if (idx2 != 0 - 1) {
                result = _concat_string(result, upper_rev[@as(usize, @intCast(idx2))..@as(usize, @intCast(idx2)) + 1]);
            } else {
                result = _concat_string(result, ch);
            }
        }
        i = i + 1;
    }
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{atbash("ABCDEFGH")});
        std.debug.print("{s}\n", .{atbash("123GGjj")});
        std.debug.print("{s}\n", .{atbash("testStringtest")});
        std.debug.print("{s}\n", .{atbash("with space")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
