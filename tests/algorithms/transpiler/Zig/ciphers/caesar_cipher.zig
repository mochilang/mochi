// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const default_alphabet_var: []const u8 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

fn index_of(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn encrypt(input_string: []const u8, key: i64, alphabet: []const u8) []const u8 {
    var result: []const u8 = "";
    result = result;
    var i: i64 = 0;
    i = i;
    var n: i64 = @as(i64, @intCast(alphabet.len));
    n = n;
    while (i < @as(i64, @intCast(input_string.len))) {
        var ch: []const u8 = input_string[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(input_string.len)))];
        ch = ch;
        var idx: i64 = index_of(alphabet, ch);
        idx = idx;
        if (idx < 0) {
            result = _concat_string(result, ch);
        } else {
            var new_key: i64 = @mod(idx + key, n);
            new_key = new_key;
            if (new_key < 0) {
                new_key = new_key + n;
            }
            result = _concat_string(result, alphabet[@as(usize, @intCast(new_key))..@min(@as(usize, @intCast(new_key + 1)), @as(usize, @intCast(alphabet.len)))]);
        }
        i = i + 1;
    }
    return result;
}

fn decrypt(input_string: []const u8, key: i64, alphabet: []const u8) []const u8 {
    var result: []const u8 = "";
    result = result;
    var i: i64 = 0;
    i = i;
    var n: i64 = @as(i64, @intCast(alphabet.len));
    n = n;
    while (i < @as(i64, @intCast(input_string.len))) {
        var ch: []const u8 = input_string[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(input_string.len)))];
        ch = ch;
        var idx: i64 = index_of(alphabet, ch);
        idx = idx;
        if (idx < 0) {
            result = _concat_string(result, ch);
        } else {
            var new_key: i64 = @mod(idx - key, n);
            new_key = new_key;
            if (new_key < 0) {
                new_key = new_key + n;
            }
            result = _concat_string(result, alphabet[@as(usize, @intCast(new_key))..@min(@as(usize, @intCast(new_key + 1)), @as(usize, @intCast(alphabet.len)))]);
        }
        i = i + 1;
    }
    return result;
}

fn brute_force(input_string: []const u8, alphabet: []const u8) [][]const u8 {
    var results: [][]const u8 = &[_][]const u8{};
    results = results;
    var key: i64 = 1;
    key = key;
    var n: i64 = @as(i64, @intCast(alphabet.len));
    n = n;
    while (key <= n) {
        var message: []const u8 = decrypt(input_string, key, alphabet);
        message = message;
        results = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, results)) catch |err| handleError(err); _tmp.append(message) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        key = key + 1;
    }
    return results;
}

fn mochi_main() void {
    var alpha: []const u8 = default_alphabet_var;
    alpha = alpha;
    var enc: []const u8 = encrypt("The quick brown fox jumps over the lazy dog", 8, alpha);
    enc = enc;
    std.debug.print("{s}\n", .{enc});
    var dec: []const u8 = decrypt(enc, 8, alpha);
    dec = dec;
    std.debug.print("{s}\n", .{dec});
    var brute: [][]const u8 = brute_force("jFyuMy xIH'N vLONy zILwy Gy!", alpha);
    brute = brute;
    std.debug.print("{d}\n", .{brute[@as(usize, @intCast(19))]});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
