// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const ascii_var: []const u8 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
const sample_var: []const u8 = "hallo welt";
var enc_var: []const u8 = &[_]u8{};
var dec_var: []const u8 = &[_]u8{};

fn xor(a: i64, b: i64) i64 {
    var res: i64 = 0;
    res = res;
    var bit: i64 = 1;
    bit = bit;
    var x: i64 = a;
    x = x;
    var y: i64 = b;
    y = y;
    while (x > 0 or y > 0) {
        var abit: i64 = @mod(x, 2);
        abit = abit;
        var bbit: i64 = @mod(y, 2);
        bbit = bbit;
        if (abit != bbit) {
            res = res + bit;
        }
        x = @divTrunc(x, 2);
        y = @divTrunc(y, 2);
        bit = bit * 2;
    }
    return res;
}

fn ord(ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(ascii_var.len))) {
        if (std.mem.eql(u8, ascii_var[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(ascii_var.len)))], ch)) {
            return 32 + i;
        }
        i = i + 1;
    }
    return 0;
}

fn chr(n: i64) []const u8 {
    if (n >= 32 and n < 127) {
        return ascii_var[@as(usize, @intCast(n - 32))..@min(@as(usize, @intCast(n - 31)), @as(usize, @intCast(ascii_var.len)))];
    }
    return "";
}

fn normalize_key(key: i64) i64 {
    var k: i64 = key;
    k = k;
    if (k == 0) {
        k = 1;
    }
    k = @mod(k, 256);
    if (k < 0) {
        k = k + 256;
    }
    return k;
}

fn encrypt(content: []const u8, key: i64) [][]const u8 {
    var k: i64 = normalize_key(key);
    k = k;
    var result: [][]const u8 = &[_][]const u8{};
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(content.len))) {
        var c: i64 = ord(content[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(content.len)))]);
        c = c;
        var e: i64 = xor(c, k);
        e = e;
        result = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, result)) catch |err| handleError(err); _tmp.append(chr(e)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return result;
}

fn encrypt_string(content: []const u8, key: i64) []const u8 {
    var chars: [][]const u8 = encrypt(content, key);
    chars = chars;
    var out: []const u8 = "";
    out = out;
    for (chars) |__it0| {
        const ch = __it0;
        out = _concat_string(out, ch);
    }
    return out;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        enc_var = encrypt_string(sample_var, 1);
        dec_var = encrypt_string(enc_var, 1);
        std.debug.print("{s}\n", .{_str(encrypt(sample_var, 1))});
        std.debug.print("{s}\n", .{enc_var});
        std.debug.print("{s}\n", .{dec_var});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
