// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var seed_var: i64 = 123456789;
const PRIME_var: i64 = 23;
const generator_var: i64 = 5;
var alice_private_var: i64 = 0;
var alice_public_var: i64 = 0;
var bob_private_var: i64 = 0;
var bob_public_var: i64 = 0;
var alice_shared_var: i64 = 0;
var bob_shared_var: i64 = 0;

fn int_to_hex(n: i64) []const u8 {
    if (n == 0) {
        return "0";
    }
    var digits: []const u8 = "0123456789abcdef";
    digits = digits;
    var num: i64 = n;
    num = num;
    var res: []const u8 = "";
    res = res;
    while (num > 0) {
        var d: i64 = @mod(num, 16);
        d = d;
        res = _concat_string(digits[@as(usize, @intCast(d))..@as(usize, @intCast(d)) + 1], res);
        num = @divTrunc(num, 16);
    }
    return res;
}

fn rand_int() i64 {
    seed_var = @mod(1103515245 * seed_var + 12345, 2147483648);
    return seed_var;
}

fn mod_pow(base: i64, exp: i64) i64 {
    var result: i64 = 1;
    result = result;
    var b: i64 = @mod(base, PRIME_var);
    b = b;
    var e: i64 = exp;
    e = e;
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = @mod(result * b, PRIME_var);
        }
        b = @mod(b * b, PRIME_var);
        e = @divTrunc(e, 2);
    }
    return result;
}

fn is_valid_public_key(key: i64) bool {
    if (key < 2 or key > PRIME_var - 2) {
        return false;
    }
    return mod_pow(key, @divTrunc(PRIME_var - 1, 2)) == 1;
}

fn generate_private_key() i64 {
    return @mod(rand_int(), PRIME_var - 2) + 2;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        alice_private_var = generate_private_key();
        alice_public_var = mod_pow(generator_var, alice_private_var);
        bob_private_var = generate_private_key();
        bob_public_var = mod_pow(generator_var, bob_private_var);
        alice_shared_var = mod_pow(bob_public_var, alice_private_var);
        bob_shared_var = mod_pow(alice_public_var, bob_private_var);
        if (!(is_valid_public_key(alice_public_var))) {
            @panic("Invalid public key");
        }
        if (!(is_valid_public_key(bob_public_var))) {
            @panic("Invalid public key");
        }
        std.debug.print("{s}\n", .{int_to_hex(alice_shared_var)});
        std.debug.print("{s}\n", .{int_to_hex(bob_shared_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
