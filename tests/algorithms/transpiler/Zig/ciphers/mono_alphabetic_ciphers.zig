// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const LETTERS_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

fn find_char(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn encrypt_message(key: []const u8, message: []const u8) []const u8 {
    var chars_a: []const u8 = key;
    chars_a = chars_a;
    var chars_b: []const u8 = LETTERS_var;
    chars_b = chars_b;
    var translated: []const u8 = "";
    translated = translated;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(message.len))) {
        var symbol: []const u8 = message[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        symbol = symbol;
        var upper_sym: []const u8 = _upper(symbol);
        upper_sym = upper_sym;
        var sym_index: i64 = find_char(chars_a, upper_sym);
        sym_index = sym_index;
        if (sym_index >= 0) {
            var sub_char: []const u8 = chars_b[@as(usize, @intCast(sym_index))..@as(usize, @intCast(sym_index)) + 1];
            sub_char = sub_char;
            if (std.mem.eql(u8, symbol, upper_sym)) {
                translated = _concat_string(translated, _upper(sub_char));
            } else {
                translated = _concat_string(translated, _lower(sub_char));
            }
        } else {
            translated = _concat_string(translated, symbol);
        }
        i = i + 1;
    }
    return translated;
}

fn decrypt_message(key: []const u8, message: []const u8) []const u8 {
    var chars_a: []const u8 = LETTERS_var;
    chars_a = chars_a;
    var chars_b: []const u8 = key;
    chars_b = chars_b;
    var translated: []const u8 = "";
    translated = translated;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(message.len))) {
        var symbol: []const u8 = message[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        symbol = symbol;
        var upper_sym: []const u8 = _upper(symbol);
        upper_sym = upper_sym;
        var sym_index: i64 = find_char(chars_a, upper_sym);
        sym_index = sym_index;
        if (sym_index >= 0) {
            var sub_char: []const u8 = chars_b[@as(usize, @intCast(sym_index))..@as(usize, @intCast(sym_index)) + 1];
            sub_char = sub_char;
            if (std.mem.eql(u8, symbol, upper_sym)) {
                translated = _concat_string(translated, _upper(sub_char));
            } else {
                translated = _concat_string(translated, _lower(sub_char));
            }
        } else {
            translated = _concat_string(translated, symbol);
        }
        i = i + 1;
    }
    return translated;
}

fn mochi_main() void {
    var message: []const u8 = "Hello World";
    message = message;
    var key: []const u8 = "QWERTYUIOPASDFGHJKLZXCVBNM";
    key = key;
    var mode: []const u8 = "decrypt";
    mode = mode;
    var translated: []const u8 = "";
    translated = translated;
    if (std.mem.eql(u8, mode, "encrypt")) {
        translated = encrypt_message(key, message);
    } else {
        if (std.mem.eql(u8, mode, "decrypt")) {
            translated = decrypt_message(key, message);
        }
    }
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Using the key ", key), ", the "), mode), "ed message is: "), translated)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
