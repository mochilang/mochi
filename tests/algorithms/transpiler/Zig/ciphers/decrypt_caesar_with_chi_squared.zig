// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Result = struct {
    shift: i64,
    chi: f64,
    decoded: []const u8,
};

var r1_var: Result = undefined;
var r2_var: Result = undefined;
var r3_var: Result = undefined;

fn default_alphabet() [][]const u8 {
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 26) catch unreachable; _tmp0[0] = "a"; _tmp0[1] = "b"; _tmp0[2] = "c"; _tmp0[3] = "d"; _tmp0[4] = "e"; _tmp0[5] = "f"; _tmp0[6] = "g"; _tmp0[7] = "h"; _tmp0[8] = "i"; _tmp0[9] = "j"; _tmp0[10] = "k"; _tmp0[11] = "l"; _tmp0[12] = "m"; _tmp0[13] = "n"; _tmp0[14] = "o"; _tmp0[15] = "p"; _tmp0[16] = "q"; _tmp0[17] = "r"; _tmp0[18] = "s"; _tmp0[19] = "t"; _tmp0[20] = "u"; _tmp0[21] = "v"; _tmp0[22] = "w"; _tmp0[23] = "x"; _tmp0[24] = "y"; _tmp0[25] = "z"; break :blk0 _tmp0; };
}

fn default_frequencies() std.StringHashMap(f64) {
    return blk: { var m = std.StringHashMap(f64).init(std.heap.page_allocator); m.put("a", 0.08497) catch unreachable; m.put("b", 0.01492) catch unreachable; m.put("c", 0.02202) catch unreachable; m.put("d", 0.04253) catch unreachable; m.put("e", 0.11162) catch unreachable; m.put("f", 0.02228) catch unreachable; m.put("g", 0.02015) catch unreachable; m.put("h", 0.06094) catch unreachable; m.put("i", 0.07546) catch unreachable; m.put("j", 0.00153) catch unreachable; m.put("k", 0.01292) catch unreachable; m.put("l", 0.04025) catch unreachable; m.put("m", 0.02406) catch unreachable; m.put("n", 0.06749) catch unreachable; m.put("o", 0.07507) catch unreachable; m.put("p", 0.01929) catch unreachable; m.put("q", 0.00095) catch unreachable; m.put("r", 0.07587) catch unreachable; m.put("s", 0.06327) catch unreachable; m.put("t", 0.09356) catch unreachable; m.put("u", 0.02758) catch unreachable; m.put("v", 0.00978) catch unreachable; m.put("w", 0.0256) catch unreachable; m.put("x", 0.0015) catch unreachable; m.put("y", 0.01994) catch unreachable; m.put("z", 0.00077) catch unreachable; break :blk m; };
}

fn index_of(xs: [][]const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[@as(usize, @intCast(i))], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn count_char(s: []const u8, ch: []const u8) i64 {
    var count: i64 = 0;
    count = count;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))], ch)) {
            count = count + 1;
        }
        i = i + 1;
    }
    return count;
}

fn decrypt_caesar_with_chi_squared(ciphertext_param: []const u8, cipher_alphabet: [][]const u8, frequencies_dict: std.StringHashMap(f64), case_sensitive: bool) Result {
    var ciphertext_var: []const u8 = ciphertext_param;
    ciphertext_var = ciphertext_var;
    var alphabet_letters: [][]const u8 = blk: { const tmp = std.heap.page_allocator.alloc([]const u8, cipher_alphabet.len) catch unreachable; @memcpy(tmp, cipher_alphabet); break :blk tmp; };
    alphabet_letters = alphabet_letters;
    if (@as(i64, @intCast(alphabet_letters.len)) == 0) {
        alphabet_letters = default_alphabet();
    }
    var frequencies: std.StringHashMap(f64) = frequencies_dict;
    frequencies = frequencies;
    if (@as(i64, @intCast(frequencies.count())) == 0) {
        frequencies = default_frequencies();
    }
    if (!(case_sensitive)) {
        ciphertext_var = _lower(ciphertext_var);
    }
    var best_shift: i64 = 0;
    best_shift = best_shift;
    var best_chi: f64 = 0.0;
    best_chi = best_chi;
    var best_text: []const u8 = "";
    best_text = best_text;
    var shift: i64 = 0;
    shift = shift;
    while (shift < @as(i64, @intCast(alphabet_letters.len))) {
        var decrypted: []const u8 = "";
        decrypted = decrypted;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(ciphertext_var.len))) {
            var ch: []const u8 = ciphertext_var[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(ciphertext_var.len)))];
            ch = ch;
            var idx: i64 = index_of(alphabet_letters, _lower(ch));
            idx = idx;
            if (idx >= 0) {
                var m: i64 = @as(i64, @intCast(alphabet_letters.len));
                m = m;
                var new_idx: i64 = @mod(idx - shift, m);
                new_idx = new_idx;
                if (new_idx < 0) {
                    new_idx = new_idx + m;
                }
                var new_char: []const u8 = alphabet_letters[@as(usize, @intCast(new_idx))];
                new_char = new_char;
                if (case_sensitive and !std.mem.eql(u8, ch, _lower(ch))) {
                    decrypted = _concat_string(decrypted, _upper(new_char));
                } else {
                    decrypted = _concat_string(decrypted, new_char);
                }
            } else {
                decrypted = _concat_string(decrypted, ch);
            }
            i = i + 1;
        }
        var chi: f64 = 0.0;
        chi = chi;
        var lowered: []const u8 = if (case_sensitive) _lower(decrypted) else decrypted;
        lowered = lowered;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(alphabet_letters.len))) {
            var letter: []const u8 = alphabet_letters[@as(usize, @intCast(j))];
            letter = letter;
            var occ: i64 = count_char(lowered, letter);
            occ = occ;
            if (occ > 0) {
                var occf: f64 = @as(f64, @floatFromInt(occ));
                occf = occf;
                var expected: f64 = frequencies.get(letter).? * occf;
                expected = expected;
                var diff: f64 = occf - expected;
                diff = diff;
                chi = chi + diff * diff / expected * occf;
            }
            j = j + 1;
        }
        if (shift == 0 or chi < best_chi) {
            best_shift = shift;
            best_chi = chi;
            best_text = decrypted;
        }
        shift = shift + 1;
    }
    return .{ .shift = best_shift, .chi = best_chi, .decoded = best_text };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        r1_var = decrypt_caesar_with_chi_squared("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!", &[_]i64{}[0..], std.StringHashMap(i64).init(std.heap.page_allocator), false);
        r2_var = decrypt_caesar_with_chi_squared("crybd cdbsxq", &[_]i64{}[0..], std.StringHashMap(i64).init(std.heap.page_allocator), false);
        r3_var = decrypt_caesar_with_chi_squared("Crybd Cdbsxq", &[_]i64{}[0..], std.StringHashMap(i64).init(std.heap.page_allocator), true);
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_str(r1_var.shift), ", "), _str(r1_var.chi)), ", "), r1_var.decoded)});
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_str(r2_var.shift), ", "), _str(r2_var.chi)), ", "), r2_var.decoded)});
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_str(r3_var.shift), ", "), _str(r3_var.chi)), ", "), r3_var.decoded)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
