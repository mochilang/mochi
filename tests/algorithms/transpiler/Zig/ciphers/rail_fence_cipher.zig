// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var bf_var: std.AutoHashMap(i64,[]const u8) = std.AutoHashMap(i64,[]const u8).init(std.heap.page_allocator);

fn encrypt(input_string: []const u8, key: i64) []const u8 {
    if (key <= 0) {
        @panic("Height of grid can't be 0 or negative");
    }
    if (key == 1 or @as(i64, @intCast(input_string.len)) <= key) {
        return input_string;
    }
    var lowest: i64 = key - 1;
    lowest = lowest;
    var temp_grid: [][][]const u8 = &[_][][]const u8{};
    temp_grid = temp_grid;
    var i: i64 = 0;
    i = i;
    while (i < key) {
        temp_grid = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, temp_grid)) catch |err| handleError(err); _tmp.append(&[_][]const u8{}) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var position: i64 = 0;
    position = position;
    while (position < @as(i64, @intCast(input_string.len))) {
        var num: i64 = @mod(position, lowest * 2);
        num = num;
        var alt: i64 = lowest * 2 - num;
        alt = alt;
        if (num > alt) {
            num = alt;
        }
        var row: [][]const u8 = temp_grid[@as(usize, @intCast(num))];
        row = row;
        row = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, row)) catch |err| handleError(err); _tmp.append(input_string[@as(usize, @intCast(position))..@min(@as(usize, @intCast(position + 1)), @as(usize, @intCast(input_string.len)))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        temp_grid[@as(usize, @intCast(num))] = row;
        position = position + 1;
    }
    var output: []const u8 = "";
    output = output;
    i = 0;
    while (i < key) {
        var row: [][]const u8 = temp_grid[@as(usize, @intCast(i))];
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(row.len))) {
            output = _concat_string(output, row[@as(usize, @intCast(j))]);
            j = j + 1;
        }
        i = i + 1;
    }
    return output;
}

fn decrypt(input_string: []const u8, key: i64) []const u8 {
    if (key <= 0) {
        @panic("Height of grid can't be 0 or negative");
    }
    if (key == 1) {
        return input_string;
    }
    var lowest: i64 = key - 1;
    lowest = lowest;
    var counts: []i64 = &[_]i64{};
    counts = counts;
    var i: i64 = 0;
    i = i;
    while (i < key) {
        counts = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, counts)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var pos: i64 = 0;
    pos = pos;
    while (pos < @as(i64, @intCast(input_string.len))) {
        var num: i64 = @mod(pos, lowest * 2);
        num = num;
        var alt: i64 = lowest * 2 - num;
        alt = alt;
        if (num > alt) {
            num = alt;
        }
        counts[@as(usize, @intCast(num))] = counts[@as(usize, @intCast(num))] + 1;
        pos = pos + 1;
    }
    var grid: [][][]const u8 = &[_][][]const u8{};
    grid = grid;
    var counter: i64 = 0;
    counter = counter;
    i = 0;
    while (i < key) {
        var length: i64 = counts[@as(usize, @intCast(i))];
        length = length;
        var slice: []const u8 = input_string[@as(usize, @intCast(counter))..@min(@as(usize, @intCast(counter + length)), @as(usize, @intCast(input_string.len)))];
        slice = slice;
        var row: [][]const u8 = &[_][]const u8{};
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(slice.len))) {
            row = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, row)) catch |err| handleError(err); _tmp.append(slice[@as(usize, @intCast(j))..@as(usize, @intCast(j)) + 1]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        grid = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, grid)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        counter = counter + length;
        i = i + 1;
    }
    var indices: []i64 = &[_]i64{};
    indices = indices;
    i = 0;
    while (i < key) {
        indices = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, indices)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var output: []const u8 = "";
    output = output;
    pos = 0;
    while (pos < @as(i64, @intCast(input_string.len))) {
        var num: i64 = @mod(pos, lowest * 2);
        num = num;
        var alt: i64 = lowest * 2 - num;
        alt = alt;
        if (num > alt) {
            num = alt;
        }
        output = _concat_string(output, grid[@as(usize, @intCast(num))][@as(usize, @intCast(indices[@as(usize, @intCast(num))]))]);
        indices[@as(usize, @intCast(num))] = indices[@as(usize, @intCast(num))] + 1;
        pos = pos + 1;
    }
    return output;
}

fn bruteforce(input_string: []const u8) std.AutoHashMap(i64,[]const u8) {
    var results: std.AutoHashMap(i64,[]const u8) = std.AutoHashMap(i64, []const u8).init(std.heap.page_allocator);
    results = results;
    var key_guess: i64 = 1;
    key_guess = key_guess;
    while (key_guess < @as(i64, @intCast(input_string.len))) {
        results.put(key_guess, decrypt(input_string, key_guess)) catch unreachable;
        key_guess = key_guess + 1;
    }
    return results;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        bf_var = bruteforce("HWe olordll");
        std.debug.print("{s}\n", .{encrypt("Hello World", 4)});
        std.debug.print("{s}\n", .{decrypt("HWe olordll", 4)});
        std.debug.print("{s}\n", .{bf_var.get(4).?});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
