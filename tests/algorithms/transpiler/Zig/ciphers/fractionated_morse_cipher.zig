// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var MORSE_CODE_DICT_var: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
var MORSE_COMBINATIONS_var: [][]const u8 = &[_][]const u8{};
var REVERSE_DICT_var: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
const plaintext_var: []const u8 = "defend the east";
const key_var: []const u8 = "ROUNDTABLE";
var ciphertext_var: []const u8 = &[_]u8{};
var decrypted_var: []const u8 = &[_]u8{};

fn encodeToMorse(plaintext_param: []const u8) []const u8 {
    var morse: []const u8 = "";
    morse = morse;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(plaintext_param.len))) {
        var ch: []const u8 = _upper(plaintext_param[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(plaintext_param.len)))]);
        ch = ch;
        var code: []const u8 = "";
        code = code;
        if (MORSE_CODE_DICT_var.contains(ch)) {
            code = MORSE_CODE_DICT_var.get(ch).?;
        }
        if (i > 0) {
            morse = _concat_string(morse, "x");
        }
        morse = _concat_string(morse, code);
        i = i + 1;
    }
    return morse;
}

fn encryptFractionatedMorse(plaintext_param: []const u8, key_param: []const u8) []const u8 {
    var morseCode: []const u8 = encodeToMorse(plaintext_param);
    morseCode = morseCode;
    var combinedKey: []const u8 = _concat_string(_upper(key_param), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    combinedKey = combinedKey;
    var dedupKey: []const u8 = "";
    dedupKey = dedupKey;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(combinedKey.len))) {
        var ch: []const u8 = combinedKey[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(combinedKey.len)))];
        ch = ch;
        if (!(std.mem.indexOfScalar(const u8, dedupKey, ch) != null)) {
            dedupKey = _concat_string(dedupKey, ch);
        }
        i = i + 1;
    }
    var paddingLength: i64 = 3 - @mod(@as(i64, @intCast(morseCode.len)), 3);
    paddingLength = paddingLength;
    var p: i64 = 0;
    p = p;
    while (p < paddingLength) {
        morseCode = _concat_string(morseCode, "x");
        p = p + 1;
    }
    var dict: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
    dict = dict;
    var j: i64 = 0;
    j = j;
    while (j < 26) {
        var combo: []const u8 = MORSE_COMBINATIONS_var[@as(usize, @intCast(j))];
        combo = combo;
        var letter: []const u8 = dedupKey[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(dedupKey.len)))];
        letter = letter;
        dict.put(combo, letter) catch unreachable;
        j = j + 1;
    }
    dict.put("xxx", "") catch unreachable;
    var encrypted: []const u8 = "";
    encrypted = encrypted;
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(morseCode.len))) {
        var group: []const u8 = morseCode[@as(usize, @intCast(k))..@min(@as(usize, @intCast(k + 3)), @as(usize, @intCast(morseCode.len)))];
        group = group;
        encrypted = _concat_string(encrypted, dict.get(group).?);
        k = k + 3;
    }
    return encrypted;
}

fn decryptFractionatedMorse(ciphertext_param: []const u8, key_param: []const u8) []const u8 {
    var combinedKey: []const u8 = _concat_string(_upper(key_param), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    combinedKey = combinedKey;
    var dedupKey: []const u8 = "";
    dedupKey = dedupKey;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(combinedKey.len))) {
        var ch: []const u8 = combinedKey[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(combinedKey.len)))];
        ch = ch;
        if (!(std.mem.indexOfScalar(const u8, dedupKey, ch) != null)) {
            dedupKey = _concat_string(dedupKey, ch);
        }
        i = i + 1;
    }
    var inv: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
    inv = inv;
    var j: i64 = 0;
    j = j;
    while (j < 26) {
        var letter: []const u8 = dedupKey[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(dedupKey.len)))];
        letter = letter;
        inv.put(letter, MORSE_COMBINATIONS_var[@as(usize, @intCast(j))]) catch unreachable;
        j = j + 1;
    }
    var morse: []const u8 = "";
    morse = morse;
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(ciphertext_param.len))) {
        var ch: []const u8 = ciphertext_param[@as(usize, @intCast(k))..@min(@as(usize, @intCast(k + 1)), @as(usize, @intCast(ciphertext_param.len)))];
        ch = ch;
        if (inv.contains(ch)) {
            morse = _concat_string(morse, inv.get(ch).?);
        }
        k = k + 1;
    }
    var codes: [][]const u8 = &[_][]const u8{};
    codes = codes;
    var current: []const u8 = "";
    current = current;
    var m: i64 = 0;
    m = m;
    while (m < @as(i64, @intCast(morse.len))) {
        var ch: []const u8 = morse[@as(usize, @intCast(m))..@min(@as(usize, @intCast(m + 1)), @as(usize, @intCast(morse.len)))];
        ch = ch;
        if (std.mem.eql(u8, ch, "x")) {
            codes = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, codes)) catch |err| handleError(err); _tmp.append(current) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            current = "";
        } else {
            current = _concat_string(current, ch);
        }
        m = m + 1;
    }
    codes = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, codes)) catch |err| handleError(err); _tmp.append(current) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    var decrypted_var_1: []const u8 = "";
    decrypted_var_1 = decrypted_var_1;
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(codes.len))) {
        var code: []const u8 = codes[@as(usize, @intCast(idx))];
        code = code;
        decrypted_var_1 = _concat_string(decrypted_var_1, REVERSE_DICT_var.get(code).?);
        idx = idx + 1;
    }
    var start: i64 = 0;
    start = start;
    while (true) {
        if (start < @as(i64, @intCast(decrypted_var_1.len))) {
            if (std.mem.eql(u8, decrypted_var_1[@as(usize, @intCast(start))..@min(@as(usize, @intCast(start + 1)), @as(usize, @intCast(decrypted_var_1.len)))], " ")) {
                start = start + 1;
                continue;
            }
        }
        break;
    }
    var end: i64 = @as(i64, @intCast(decrypted_var_1.len));
    end = end;
    while (true) {
        if (end > start) {
            if (std.mem.eql(u8, decrypted_var_1[@as(usize, @intCast(end - 1))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(decrypted_var_1.len)))], " ")) {
                end = end - 1;
                continue;
            }
        }
        break;
    }
    return decrypted_var_1[@as(usize, @intCast(start))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(decrypted_var_1.len)))];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        MORSE_CODE_DICT_var = blk: { var m = std.StringHashMap([]const u8).init(std.heap.page_allocator); m.put("A", ".-") catch unreachable; m.put("B", "-...") catch unreachable; m.put("C", "-.-.") catch unreachable; m.put("D", "-..") catch unreachable; m.put("E", ".") catch unreachable; m.put("F", "..-.") catch unreachable; m.put("G", "--.") catch unreachable; m.put("H", "....") catch unreachable; m.put("I", "..") catch unreachable; m.put("J", ".---") catch unreachable; m.put("K", "-.-") catch unreachable; m.put("L", ".-..") catch unreachable; m.put("M", "--") catch unreachable; m.put("N", "-.") catch unreachable; m.put("O", "---") catch unreachable; m.put("P", ".--.") catch unreachable; m.put("Q", "--.-") catch unreachable; m.put("R", ".-.") catch unreachable; m.put("S", "...") catch unreachable; m.put("T", "-") catch unreachable; m.put("U", "..-") catch unreachable; m.put("V", "...-") catch unreachable; m.put("W", ".--") catch unreachable; m.put("X", "-..-") catch unreachable; m.put("Y", "-.--") catch unreachable; m.put("Z", "--..") catch unreachable; m.put(" ", "") catch unreachable; break :blk m; };
        MORSE_COMBINATIONS_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 27) catch unreachable; _tmp0[0] = "..."; _tmp0[1] = "..-"; _tmp0[2] = "..x"; _tmp0[3] = ".-."; _tmp0[4] = ".--"; _tmp0[5] = ".-x"; _tmp0[6] = ".x."; _tmp0[7] = ".x-"; _tmp0[8] = ".xx"; _tmp0[9] = "-.."; _tmp0[10] = "-.-"; _tmp0[11] = "-.x"; _tmp0[12] = "--."; _tmp0[13] = "---"; _tmp0[14] = "--x"; _tmp0[15] = "-x."; _tmp0[16] = "-x-"; _tmp0[17] = "-xx"; _tmp0[18] = "x.."; _tmp0[19] = "x.-"; _tmp0[20] = "x.x"; _tmp0[21] = "x-."; _tmp0[22] = "x--"; _tmp0[23] = "x-x"; _tmp0[24] = "xx."; _tmp0[25] = "xx-"; _tmp0[26] = "xxx"; break :blk0 _tmp0; };
        REVERSE_DICT_var = blk: { var m = std.StringHashMap([]const u8).init(std.heap.page_allocator); m.put(".-", "A") catch unreachable; m.put("-...", "B") catch unreachable; m.put("-.-.", "C") catch unreachable; m.put("-..", "D") catch unreachable; m.put(".", "E") catch unreachable; m.put("..-.", "F") catch unreachable; m.put("--.", "G") catch unreachable; m.put("....", "H") catch unreachable; m.put("..", "I") catch unreachable; m.put(".---", "J") catch unreachable; m.put("-.-", "K") catch unreachable; m.put(".-..", "L") catch unreachable; m.put("--", "M") catch unreachable; m.put("-.", "N") catch unreachable; m.put("---", "O") catch unreachable; m.put(".--.", "P") catch unreachable; m.put("--.-", "Q") catch unreachable; m.put(".-.", "R") catch unreachable; m.put("...", "S") catch unreachable; m.put("-", "T") catch unreachable; m.put("..-", "U") catch unreachable; m.put("...-", "V") catch unreachable; m.put(".--", "W") catch unreachable; m.put("-..-", "X") catch unreachable; m.put("-.--", "Y") catch unreachable; m.put("--..", "Z") catch unreachable; m.put("", " ") catch unreachable; break :blk m; };
        ciphertext_var = encryptFractionatedMorse(plaintext_var, key_var);
        decrypted_var = decryptFractionatedMorse(ciphertext_var, key_var);
        std.debug.print("{s} {s}\n", .{"Plain Text:", plaintext_var});
        std.debug.print("{s} {s}\n", .{"Encrypted:", ciphertext_var});
        std.debug.print("{s} {s}\n", .{"Decrypted:", decrypted_var});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
