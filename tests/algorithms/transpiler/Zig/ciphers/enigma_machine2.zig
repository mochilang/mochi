// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const abc_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const low_abc_var: []const u8 = "abcdefghijklmnopqrstuvwxyz";
const rotor1_var: []const u8 = "EGZWVONAHDCLFQMSIPJBYUKXTR";
const rotor2_var: []const u8 = "FOBHMDKEXQNRAULPGSJVTYICZW";
const rotor3_var: []const u8 = "ZJXESIUQLHAVRMDOYGTNFWPBKC";
const rotor4_var: []const u8 = "RMDJXFUWGISLHVTCQNKYPBEZOA";
const rotor5_var: []const u8 = "SGLCPQWZHKXAREONTFBVIYJUDM";
const rotor6_var: []const u8 = "HVSICLTYKQUBXDWAJZOMFGPREN";
const rotor7_var: []const u8 = "RZWQHFMVDBKICJLNTUXAGYPSOE";
const rotor8_var: []const u8 = "LFKIJODBEGAMQPXVUHYSTCZRWN";
const rotor9_var: []const u8 = "KOAEGVDHXPQZMLFTYWJNBRCIUS";
var reflector_pairs_var: [][]const u8 = &[_][]const u8{};

fn list_contains(xs: [][]const u8, x: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[@as(usize, @intCast(i))], x)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn index_in_string(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn contains_char(s: []const u8, ch: []const u8) bool {
    return index_in_string(s, ch) >= 0;
}

fn to_uppercase(s: []const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        var ch: []const u8 = s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))];
        ch = ch;
        var idx: i64 = index_in_string(low_abc_var, ch);
        idx = idx;
        if (idx >= 0) {
            res = _concat_string(res, abc_var[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(abc_var.len)))]);
        } else {
            res = _concat_string(res, ch);
        }
        i = i + 1;
    }
    return res;
}

fn plugboard_map(pb: [][]const u8, ch: []const u8) []const u8 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(pb.len))) {
        var pair: []const u8 = pb[@as(usize, @intCast(i))];
        pair = pair;
        var a: []const u8 = pair[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(pair.len)))];
        a = a;
        var b: []const u8 = pair[@as(usize, @intCast(1))..@min(@as(usize, @intCast(2)), @as(usize, @intCast(pair.len)))];
        b = b;
        if (std.mem.eql(u8, ch, a)) {
            return b;
        }
        if (std.mem.eql(u8, ch, b)) {
            return a;
        }
        i = i + 1;
    }
    return ch;
}

fn reflector_map(ch: []const u8) []const u8 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(reflector_pairs_var.len))) {
        var pair: []const u8 = reflector_pairs_var[@as(usize, @intCast(i))];
        pair = pair;
        var a: []const u8 = pair[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(pair.len)))];
        a = a;
        var b: []const u8 = pair[@as(usize, @intCast(1))..@min(@as(usize, @intCast(2)), @as(usize, @intCast(pair.len)))];
        b = b;
        if (std.mem.eql(u8, ch, a)) {
            return b;
        }
        if (std.mem.eql(u8, ch, b)) {
            return a;
        }
        i = i + 1;
    }
    return ch;
}

fn count_unique(xs: [][]const u8) i64 {
    var unique: [][]const u8 = &[_][]const u8{};
    unique = unique;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (!(list_contains(unique, xs[@as(usize, @intCast(i))]))) {
            unique = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, unique)) catch |err| handleError(err); _tmp.append(xs[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return @as(i64, @intCast(unique.len));
}

fn build_plugboard(pbstring: []const u8) [][]const u8 {
    if (@as(i64, @intCast(pbstring.len)) == 0) {
        return &[_][]const u8{};
    }
    if (@mod(@as(i64, @intCast(pbstring.len)), 2) != 0) {
        @panic(_concat_string(_concat_string("Odd number of symbols(", _str(@as(i64, @intCast(pbstring.len)))), ")"));
    }
    var pbstring_nospace: []const u8 = "";
    pbstring_nospace = pbstring_nospace;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(pbstring.len))) {
        var ch: []const u8 = pbstring[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(pbstring.len)))];
        ch = ch;
        if (!std.mem.eql(u8, ch, " ")) {
            pbstring_nospace = _concat_string(pbstring_nospace, ch);
        }
        i = i + 1;
    }
    var seen: [][]const u8 = &[_][]const u8{};
    seen = seen;
    i = 0;
    while (i < @as(i64, @intCast(pbstring_nospace.len))) {
        var ch: []const u8 = pbstring_nospace[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(pbstring_nospace.len)))];
        ch = ch;
        if (!(contains_char(abc_var, ch))) {
            @panic(_concat_string(_concat_string("'", ch), "' not in list of symbols"));
        }
        if (list_contains(seen, ch)) {
            @panic(_concat_string(_concat_string("Duplicate symbol(", ch), ")"));
        }
        seen = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, seen)) catch |err| handleError(err); _tmp.append(ch) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var pb: [][]const u8 = &[_][]const u8{};
    pb = pb;
    i = 0;
    while (i < @as(i64, @intCast(pbstring_nospace.len)) - 1) {
        var a: []const u8 = pbstring_nospace[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(pbstring_nospace.len)))];
        a = a;
        var b: []const u8 = pbstring_nospace[@as(usize, @intCast(i + 1))..@min(@as(usize, @intCast(i + 2)), @as(usize, @intCast(pbstring_nospace.len)))];
        b = b;
        pb = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, pb)) catch |err| handleError(err); _tmp.append(_concat_string(a, b)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 2;
    }
    return pb;
}

fn validator(rotpos: []i64, rotsel: [][]const u8, _: []const u8) void {
    if (count_unique(rotsel) < 3) {
        @panic(_concat_string(_concat_string("Please use 3 unique rotors (not ", _str(count_unique(rotsel))), ")"));
    }
    if (@as(i64, @intCast(rotpos.len)) != 3) {
        @panic("Rotor position must have 3 values");
    }
    var r1: i64 = rotpos[@as(usize, @intCast(0))];
    r1 = r1;
    var r2: i64 = rotpos[@as(usize, @intCast(1))];
    r2 = r2;
    var r3: i64 = rotpos[@as(usize, @intCast(2))];
    r3 = r3;
    if (!(0 < r1 and r1 <= @as(i64, @intCast(abc_var.len)))) {
        @panic(_concat_string(_concat_string("First rotor position is not within range of 1..26 (", _str(r1)), ")"));
    }
    if (!(0 < r2 and r2 <= @as(i64, @intCast(abc_var.len)))) {
        @panic(_concat_string(_concat_string("Second rotor position is not within range of 1..26 (", _str(r2)), ")"));
    }
    if (!(0 < r3 and r3 <= @as(i64, @intCast(abc_var.len)))) {
        @panic(_concat_string(_concat_string("Third rotor position is not within range of 1..26 (", _str(r3)), ")"));
    }
}

fn enigma(text: []const u8, rotor_position: []i64, rotor_selection: [][]const u8, plugb: []const u8) []const u8 {
    var up_text: []const u8 = to_uppercase(text);
    up_text = up_text;
    var up_pb: []const u8 = to_uppercase(plugb);
    up_pb = up_pb;
    validator(rotor_position, rotor_selection, up_pb);
    var plugboard: [][]const u8 = build_plugboard(up_pb);
    plugboard = plugboard;
    var rotorpos1: i64 = rotor_position[@as(usize, @intCast(0))] - 1;
    rotorpos1 = rotorpos1;
    var rotorpos2: i64 = rotor_position[@as(usize, @intCast(1))] - 1;
    rotorpos2 = rotorpos2;
    var rotorpos3: i64 = rotor_position[@as(usize, @intCast(2))] - 1;
    rotorpos3 = rotorpos3;
    var rotor_a: []const u8 = rotor_selection[@as(usize, @intCast(0))];
    rotor_a = rotor_a;
    var rotor_b: []const u8 = rotor_selection[@as(usize, @intCast(1))];
    rotor_b = rotor_b;
    var rotor_c: []const u8 = rotor_selection[@as(usize, @intCast(2))];
    rotor_c = rotor_c;
    var result: []const u8 = "";
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(up_text.len))) {
        var symbol: []const u8 = up_text[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(up_text.len)))];
        symbol = symbol;
        if (contains_char(abc_var, symbol)) {
            symbol = plugboard_map(plugboard, symbol);
            var index: i64 = index_in_string(abc_var, symbol) + rotorpos1;
            index = index;
            symbol = rotor_a[@as(usize, @intCast(@mod(index, @as(i64, @intCast(abc_var.len)))))..@min(@as(usize, @intCast(@mod(index, @as(i64, @intCast(abc_var.len))) + 1)), @as(usize, @intCast(rotor_a.len)))];
            index = index_in_string(abc_var, symbol) + rotorpos2;
            symbol = rotor_b[@as(usize, @intCast(@mod(index, @as(i64, @intCast(abc_var.len)))))..@min(@as(usize, @intCast(@mod(index, @as(i64, @intCast(abc_var.len))) + 1)), @as(usize, @intCast(rotor_b.len)))];
            index = index_in_string(abc_var, symbol) + rotorpos3;
            symbol = rotor_c[@as(usize, @intCast(@mod(index, @as(i64, @intCast(abc_var.len)))))..@min(@as(usize, @intCast(@mod(index, @as(i64, @intCast(abc_var.len))) + 1)), @as(usize, @intCast(rotor_c.len)))];
            symbol = reflector_map(symbol);
            index = index_in_string(rotor_c, symbol) - rotorpos3;
            if (index < 0) {
                index = index + @as(i64, @intCast(abc_var.len));
            }
            symbol = abc_var[@as(usize, @intCast(index))..@min(@as(usize, @intCast(index + 1)), @as(usize, @intCast(abc_var.len)))];
            index = index_in_string(rotor_b, symbol) - rotorpos2;
            if (index < 0) {
                index = index + @as(i64, @intCast(abc_var.len));
            }
            symbol = abc_var[@as(usize, @intCast(index))..@min(@as(usize, @intCast(index + 1)), @as(usize, @intCast(abc_var.len)))];
            index = index_in_string(rotor_a, symbol) - rotorpos1;
            if (index < 0) {
                index = index + @as(i64, @intCast(abc_var.len));
            }
            symbol = abc_var[@as(usize, @intCast(index))..@min(@as(usize, @intCast(index + 1)), @as(usize, @intCast(abc_var.len)))];
            symbol = plugboard_map(plugboard, symbol);
            rotorpos1 = rotorpos1 + 1;
            if (rotorpos1 >= @as(i64, @intCast(abc_var.len))) {
                rotorpos1 = 0;
                rotorpos2 = rotorpos2 + 1;
            }
            if (rotorpos2 >= @as(i64, @intCast(abc_var.len))) {
                rotorpos2 = 0;
                rotorpos3 = rotorpos3 + 1;
            }
            if (rotorpos3 >= @as(i64, @intCast(abc_var.len))) {
                rotorpos3 = 0;
            }
        }
        result = _concat_string(result, symbol);
        i = i + 1;
    }
    return result;
}

fn mochi_main() void {
    var message: []const u8 = "This is my Python script that emulates the Enigma machine from WWII.";
    message = message;
    var rotor_pos: []i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp0[0] = 1; _tmp0[1] = 1; _tmp0[2] = 1; break :blk0 _tmp0; };
    rotor_pos = rotor_pos;
    var pb: []const u8 = "pictures";
    pb = pb;
    var rotor_sel: [][]const u8 = blk1: { var _tmp1 = std.heap.page_allocator.alloc([]const u8, 3) catch unreachable; _tmp1[0] = rotor2_var; _tmp1[1] = rotor4_var; _tmp1[2] = rotor8_var; break :blk1 _tmp1; };
    rotor_sel = rotor_sel;
    var en: []const u8 = enigma(message, rotor_pos, rotor_sel, pb);
    en = en;
    std.debug.print("{s}\n", .{_concat_string("Encrypted message: ", en)});
    std.debug.print("{s}\n", .{_concat_string("Decrypted message: ", enigma(en, rotor_pos, rotor_sel, pb))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        reflector_pairs_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc([]const u8, 13) catch unreachable; _tmp2[0] = "AN"; _tmp2[1] = "BO"; _tmp2[2] = "CP"; _tmp2[3] = "DQ"; _tmp2[4] = "ER"; _tmp2[5] = "FS"; _tmp2[6] = "GT"; _tmp2[7] = "HU"; _tmp2[8] = "IV"; _tmp2[9] = "JW"; _tmp2[10] = "KX"; _tmp2[11] = "LY"; _tmp2[12] = "MZ"; break :blk2 _tmp2; };
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
