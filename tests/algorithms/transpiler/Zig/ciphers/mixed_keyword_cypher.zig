// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const UPPER_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const LOWER_var: []const u8 = "abcdefghijklmnopqrstuvwxyz";

fn to_upper(s: []const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        var ch: []const u8 = s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        var j: i64 = 0;
        j = j;
        var found: bool = false;
        found = found;
        while (j < 26) {
            if (std.mem.eql(u8, ch, LOWER_var[@as(usize, @intCast(j))..@as(usize, @intCast(j)) + 1])) {
                res = _concat_string(res, UPPER_var[@as(usize, @intCast(j))..@as(usize, @intCast(j)) + 1]);
                found = true;
                break;
            }
            j = j + 1;
        }
        if (found == false) {
            res = _concat_string(res, ch);
        }
        i = i + 1;
    }
    return res;
}

fn contains(xs: [][]const u8, x: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[@as(usize, @intCast(i))], x)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn contains_char(s: []const u8, ch: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn get_value(keys: [][]const u8, values: [][]const u8, key: []const u8) []const u8 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(keys.len))) {
        if (std.mem.eql(u8, keys[@as(usize, @intCast(i))], key)) {
            return values[@as(usize, @intCast(i))];
        }
        i = i + 1;
    }
    return "";
}

fn print_mapping(keys: [][]const u8, values: [][]const u8) void {
    var s: []const u8 = "{";
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(keys.len))) {
        s = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(s, "'"), keys[@as(usize, @intCast(i))]), "': '"), values[@as(usize, @intCast(i))]), "'");
        if (i + 1 < @as(i64, @intCast(keys.len))) {
            s = _concat_string(s, ", ");
        }
        i = i + 1;
    }
    s = _concat_string(s, "}");
    std.debug.print("{s}\n", .{s});
}

fn mixed_keyword(keyword: []const u8, plaintext: []const u8, verbose: bool) []const u8 {
    var alphabet: []const u8 = UPPER_var;
    alphabet = alphabet;
    var keyword_u: []const u8 = to_upper(keyword);
    keyword_u = keyword_u;
    var plaintext_u: []const u8 = to_upper(plaintext);
    plaintext_u = plaintext_u;
    var unique: [][]const u8 = &[_][]const u8{};
    unique = unique;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(keyword_u.len))) {
        var ch: []const u8 = keyword_u[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        if (contains_char(alphabet, ch) and contains(unique, ch) == false) {
            unique = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, unique)) catch |err| handleError(err); _tmp.append(ch) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    var num_unique: i64 = @as(i64, @intCast(unique.len));
    num_unique = num_unique;
    var shifted: [][]const u8 = &[_][]const u8{};
    shifted = shifted;
    i = 0;
    while (i < @as(i64, @intCast(unique.len))) {
        shifted = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, shifted)) catch |err| handleError(err); _tmp.append(unique[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = 0;
    while (i < @as(i64, @intCast(alphabet.len))) {
        var ch: []const u8 = alphabet[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        if (contains(unique, ch) == false) {
            shifted = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, shifted)) catch |err| handleError(err); _tmp.append(ch) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    var modified: [][][]const u8 = &[_][][]const u8{};
    modified = modified;
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(shifted.len))) {
        var row: [][]const u8 = &[_][]const u8{};
        row = row;
        var r: i64 = 0;
        r = r;
        while (r < num_unique and k + r < @as(i64, @intCast(shifted.len))) {
            row = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, row)) catch |err| handleError(err); _tmp.append(shifted[@as(usize, @intCast(k + r))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            r = r + 1;
        }
        modified = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, modified)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        k = k + num_unique;
    }
    var keys: [][]const u8 = &[_][]const u8{};
    keys = keys;
    var values: [][]const u8 = &[_][]const u8{};
    values = values;
    var column: i64 = 0;
    column = column;
    var letter_index: i64 = 0;
    letter_index = letter_index;
    while (column < num_unique) {
        var row_idx: i64 = 0;
        row_idx = row_idx;
        while (row_idx < @as(i64, @intCast(modified.len))) {
            var row: [][]const u8 = modified[@as(usize, @intCast(row_idx))];
            row = row;
            if (@as(i64, @intCast(row.len)) <= column) {
                break;
            }
            keys = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, keys)) catch |err| handleError(err); _tmp.append(alphabet[@as(usize, @intCast(letter_index))..@as(usize, @intCast(letter_index)) + 1]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            values = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, values)) catch |err| handleError(err); _tmp.append(row[@as(usize, @intCast(column))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            letter_index = letter_index + 1;
            row_idx = row_idx + 1;
        }
        column = column + 1;
    }
    if (verbose) {
        print_mapping(keys, values);
    }
    var result: []const u8 = "";
    result = result;
    i = 0;
    while (i < @as(i64, @intCast(plaintext_u.len))) {
        var ch: []const u8 = plaintext_u[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        var mapped: []const u8 = get_value(keys, values, ch);
        mapped = mapped;
        if (std.mem.eql(u8, mapped, "")) {
            result = _concat_string(result, ch);
        } else {
            result = _concat_string(result, mapped);
        }
        i = i + 1;
    }
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{mixed_keyword("college", "UNIVERSITY", true)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
