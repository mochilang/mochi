// Generated by Mochi Zig transpiler on 2025-08-06 23:15 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Keys = struct {
    public_key: []i64,
    private_key: []i64,
};

var seed_var: i64 = 1;
var keys_var: Keys = undefined;
var pub_var: []i64 = &[_]i64{};
var priv_var: []i64 = &[_]i64{};

fn pow2(exp: i64) i64 {
    var res: i64 = 1;
    var i: i64 = 0;
    while (i < exp) {
        res = res * 2;
        i = i + 1;
    }
    return res;
}

fn next_seed(x: i64) i64 {
    return @mod(x * 1103515245 + 12345, 2147483648);
}

fn rand_range(min: i64, max: i64) i64 {
    seed_var = next_seed(seed_var);
    return min + @mod(seed_var, max - min);
}

fn gcd(a: i64, b: i64) i64 {
    var x: i64 = a;
    var y: i64 = b;
    while (y != 0) {
        const temp: i64 = @mod(x, y);
        x = y;
        y = temp;
    }
    return x;
}

fn mod_inverse(e: i64, phi: i64) i64 {
    var t: i64 = 0;
    var newt: i64 = 1;
    var r: i64 = phi;
    var newr: i64 = e;
    while (newr != 0) {
        const quotient: i64 = @divTrunc(r, newr);
        const tmp: i64 = newt;
        newt = t - quotient * newt;
        t = tmp;
        const tmp_r: i64 = newr;
        newr = r - quotient * newr;
        r = tmp_r;
    }
    if (r > 1) {
        return 0;
    }
    if (t < 0) {
        t = t + phi;
    }
    return t;
}

fn is_prime(n: i64) bool {
    if (n < 2) {
        return false;
    }
    var i: i64 = 2;
    while (i * i <= n) {
        if (@mod(n, i) == 0) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn generate_prime(bits: i64) i64 {
    const min: i64 = pow2(bits - 1);
    const max: i64 = pow2(bits);
    var p: i64 = rand_range(min, max);
    if (@mod(p, 2) == 0) {
        p = p + 1;
    }
    while (!(is_prime(p))) {
        p = p + 2;
        if (p >= max) {
            p = min + 1;
        }
    }
    return p;
}

fn generate_key(bits: i64) Keys {
    const p: i64 = generate_prime(bits);
    const q: i64 = generate_prime(bits);
    const n: i64 = p * q;
    const phi: i64 = (p - 1) * (q - 1);
    var e: i64 = rand_range(2, phi);
    while (gcd(e, phi) != 1) {
        e = e + 1;
        if (e >= phi) {
            e = 2;
        }
    }
    const d: i64 = mod_inverse(e, phi);
    return .{ .public_key = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp0[0] = n; _tmp0[1] = e; break :blk0 _tmp0; }, .private_key = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp1[0] = n; _tmp1[1] = d; break :blk1 _tmp1; } };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        keys_var = generate_key(8);
        pub_var = keys_var.public_key;
        priv_var = keys_var.private_key;
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("Public key: (", _str(pub_var[@as(usize, @intCast(0))])), ", "), _str(pub_var[@as(usize, @intCast(1))])), ")")});
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("Private key: (", _str(priv_var[@as(usize, @intCast(0))])), ", "), _str(priv_var[@as(usize, @intCast(1))])), ")")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
