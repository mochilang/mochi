// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var cipher_map_var: [][]const u8 = &[_][]const u8{};
var encoded_var: []const u8 = &[_]u8{};

fn index_in_string(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn contains_char(s: []const u8, ch: []const u8) bool {
    return index_in_string(s, ch) >= 0;
}

fn is_alpha(ch: []const u8) bool {
    var lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    lower = lower;
    var upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    upper = upper;
    return contains_char(lower, ch) or contains_char(upper, ch);
}

fn to_upper(s: []const u8) []const u8 {
    var lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    lower = lower;
    var upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    upper = upper;
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        var ch: []const u8 = s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        var idx: i64 = index_in_string(lower, ch);
        idx = idx;
        if (idx >= 0) {
            res = _concat_string(res, upper[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1]);
        } else {
            res = _concat_string(res, ch);
        }
        i = i + 1;
    }
    return res;
}

fn remove_duplicates(key: []const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(key.len))) {
        var ch: []const u8 = key[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        if (std.mem.eql(u8, ch, " ") or is_alpha(ch) and contains_char(res, ch) == false) {
            res = _concat_string(res, ch);
        }
        i = i + 1;
    }
    return res;
}

fn create_cipher_map(key: []const u8) [][]const u8 {
    var alphabet: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    alphabet = alphabet;
    var cleaned: []const u8 = remove_duplicates(to_upper(key));
    cleaned = cleaned;
    var cipher: [][]const u8 = &[_][]const u8{};
    cipher = cipher;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(cleaned.len))) {
        cipher = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, cipher)) catch |err| handleError(err); _tmp.append(cleaned[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var offset: i64 = @as(i64, @intCast(cleaned.len));
    offset = offset;
    var j: i64 = @as(i64, @intCast(cipher.len));
    j = j;
    while (j < 26) {
        var char: []const u8 = alphabet[@as(usize, @intCast(j - offset))..@as(usize, @intCast(j - offset)) + 1];
        char = char;
        while (contains_char(cleaned, char)) {
            offset = offset - 1;
            char = alphabet[@as(usize, @intCast(j - offset))..@as(usize, @intCast(j - offset)) + 1];
        }
        cipher = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, cipher)) catch |err| handleError(err); _tmp.append(char) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    return cipher;
}

fn index_in_list(lst: [][]const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(lst.len))) {
        if (std.mem.eql(u8, lst[@as(usize, @intCast(i))], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn encipher(message: []const u8, cipher: [][]const u8) []const u8 {
    var alphabet: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    alphabet = alphabet;
    var msg: []const u8 = to_upper(message);
    msg = msg;
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(msg.len))) {
        var ch: []const u8 = msg[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        var idx: i64 = index_in_string(alphabet, ch);
        idx = idx;
        if (idx >= 0) {
            res = _concat_string(res, cipher[@as(usize, @intCast(idx))]);
        } else {
            res = _concat_string(res, ch);
        }
        i = i + 1;
    }
    return res;
}

fn decipher(message: []const u8, cipher: [][]const u8) []const u8 {
    var alphabet: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    alphabet = alphabet;
    var msg: []const u8 = to_upper(message);
    msg = msg;
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(msg.len))) {
        var ch: []const u8 = msg[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        ch = ch;
        var idx: i64 = index_in_list(cipher, ch);
        idx = idx;
        if (idx >= 0) {
            res = _concat_string(res, alphabet[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1]);
        } else {
            res = _concat_string(res, ch);
        }
        i = i + 1;
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        cipher_map_var = create_cipher_map("Goodbye!!");
        encoded_var = encipher("Hello World!!", cipher_map_var);
        std.debug.print("{s}\n", .{encoded_var});
        std.debug.print("{s}\n", .{decipher(encoded_var, cipher_map_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
