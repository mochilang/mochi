// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const ALPHABET_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const message_var: []const u8 = "THE GERMAN ATTACK";
const key_var: []const u8 = "SECRET";
var key_new_var: []const u8 = &[_]u8{};
var encrypted_var: []const u8 = &[_]u8{};

fn index_of(ch: []const u8) i64 {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(ALPHABET_var.len))))) |__it0| {
        const i: i64 = @as(i64, @intCast(__it0));
        if (std.mem.eql(u8, ALPHABET_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return i;
        }
    }
    return 0 - 1;
}

fn generate_key(message_param: []const u8, key_param: []const u8) []const u8 {
    var key_new_var_1: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, key_param.len) catch unreachable; @memcpy(tmp, key_param); break :blk tmp; };
    key_new_var_1 = key_new_var_1;
    var i: i64 = 0;
    i = i;
    while (@as(i64, @intCast(key_new_var_1.len)) < @as(i64, @intCast(message_param.len))) {
        key_new_var_1 = _concat_string(key_new_var_1, key_param[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
        i = i + 1;
        if (i == @as(i64, @intCast(key_param.len))) {
            i = 0;
        }
    }
    return key_new_var_1;
}

fn cipher_text(message_param: []const u8, key_new_param: []const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(message_param.len))))) |__it1| {
        const idx: i64 = @as(i64, @intCast(__it1));
        var ch: []const u8 = message_param[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1];
        ch = ch;
        if (std.mem.eql(u8, ch, " ")) {
            res = _concat_string(res, " ");
        } else {
            var x: i64 = @mod(index_of(ch) - index_of(key_new_param[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]) + 26, 26);
            x = x;
            i = i + 1;
            res = _concat_string(res, ALPHABET_var[@as(usize, @intCast(x))..@as(usize, @intCast(x)) + 1]);
        }
    }
    return res;
}

fn original_text(cipher: []const u8, key_new_param: []const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(cipher.len))))) |__it2| {
        const idx: i64 = @as(i64, @intCast(__it2));
        var ch: []const u8 = cipher[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1];
        ch = ch;
        if (std.mem.eql(u8, ch, " ")) {
            res = _concat_string(res, " ");
        } else {
            var x: i64 = @mod(index_of(ch) + index_of(key_new_param[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]) + 26, 26);
            x = x;
            i = i + 1;
            res = _concat_string(res, ALPHABET_var[@as(usize, @intCast(x))..@as(usize, @intCast(x)) + 1]);
        }
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        key_new_var = generate_key(message_var, key_var);
        encrypted_var = cipher_text(message_var, key_new_var);
        std.debug.print("{s}\n", .{_concat_string("Encrypted Text = ", encrypted_var)});
        std.debug.print("{s}\n", .{_concat_string("Original Text = ", original_text(encrypted_var, key_new_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
