// Generated by Mochi Zig transpiler on 2025-08-06 23:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Cipher = struct {
    passcode: [][]const u8,
    key_list: [][]const u8,
    shift_key: i64,
};

var ssc_var: Cipher = undefined;
var encoded_var: []const u8 = &[_]u8{};

fn ord(ch: []const u8) i64 {
    const digits: []const u8 = "0123456789";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(digits.len))) {
        if (std.mem.eql(u8, digits[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(digits.len)))], ch)) {
            return 48 + i;
        }
        i = i + 1;
    }
    const upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    i = 0;
    while (i < @as(i64, @intCast(upper.len))) {
        if (std.mem.eql(u8, upper[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(upper.len)))], ch)) {
            return 65 + i;
        }
        i = i + 1;
    }
    const lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    i = 0;
    while (i < @as(i64, @intCast(lower.len))) {
        if (std.mem.eql(u8, lower[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(lower.len)))], ch)) {
            return 97 + i;
        }
        i = i + 1;
    }
    return 0;
}

fn neg_pos(iterlist: []i64) []i64 {
    var i: i64 = 1;
    while (i < @as(i64, @intCast(iterlist.len))) {
        iterlist[@as(usize, @intCast(i))] = 0 - iterlist[@as(usize, @intCast(i))];
        i = i + 2;
    }
    return iterlist;
}

fn passcode_creator() [][]const u8 {
    const choices: []const u8 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var seed: i64 = _now();
    const length: i64 = 10 + @mod(seed, 11);
    var password: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < length) {
        seed = @mod(seed * 1103515245 + 12345, 2147483647);
        const idx: i64 = @mod(seed, @as(i64, @intCast(choices.len)));
        password = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, password)) catch |err| handleError(err); _tmp.append(choices[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(choices.len)))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return password;
}

fn unique_sorted(chars: [][]const u8) [][]const u8 {
    var uniq: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(chars.len))) {
        const ch: []const u8 = chars[@as(usize, @intCast(i))];
        if (!(blk: { var _found = false; for (uniq) |v| { if (std.mem.eql(u8, v, ch)) { _found = true; break; } } break :blk _found; })) {
            uniq = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, uniq)) catch |err| handleError(err); _tmp.append(ch) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    var j: i64 = 0;
    while (j < @as(i64, @intCast(uniq.len))) {
        var k: i64 = j + 1;
        var min_idx: i64 = j;
        while (k < @as(i64, @intCast(uniq.len))) {
            if (std.mem.order(u8, uniq[@as(usize, @intCast(k))], uniq[@as(usize, @intCast(min_idx))]) == .lt) {
                min_idx = k;
            }
            k = k + 1;
        }
        if (min_idx != j) {
            const tmp: []const u8 = uniq[@as(usize, @intCast(j))];
            uniq[@as(usize, @intCast(j))] = uniq[@as(usize, @intCast(min_idx))];
            uniq[@as(usize, @intCast(min_idx))] = tmp;
        }
        j = j + 1;
    }
    return uniq;
}

fn make_key_list(passcode: [][]const u8) [][]const u8 {
    const key_list_options: []const u8 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n";
    const breakpoints: [][]const u8 = unique_sorted(passcode);
    var keys_l: [][]const u8 = &[_][]const u8{};
    var temp_list: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(key_list_options.len))) {
        const ch: []const u8 = key_list_options[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(key_list_options.len)))];
        temp_list = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, temp_list)) catch |err| handleError(err); _tmp.append(ch) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        if (blk: { var _found = false; for (breakpoints) |v_1| { if (std.mem.eql(u8, v_1, ch)) { _found = true; break; } } break :blk _found; } or i == @as(i64, @intCast(key_list_options.len)) - 1) {
            var k: i64 = @as(i64, @intCast(temp_list.len)) - 1;
            while (k >= 0) {
                keys_l = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, keys_l)) catch |err| handleError(err); _tmp.append(temp_list[@as(usize, @intCast(k))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                k = k - 1;
            }
            temp_list = &[_][]const u8{};
        }
        i = i + 1;
    }
    return keys_l;
}

fn make_shift_key(passcode: [][]const u8) i64 {
    var codes: []i64 = &[_]i64{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(passcode.len))) {
        codes = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, codes)) catch |err| handleError(err); _tmp.append(ord(passcode[@as(usize, @intCast(i))])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    codes = neg_pos(codes);
    var total: i64 = 0;
    i = 0;
    while (i < @as(i64, @intCast(codes.len))) {
        total = total + codes[@as(usize, @intCast(i))];
        i = i + 1;
    }
    if (total > 0) {
        return total;
    }
    return @as(i64, @intCast(passcode.len));
}

fn new_cipher(passcode_str: []const u8) Cipher {
    var passcode: [][]const u8 = &[_][]const u8{};
    if (@as(i64, @intCast(passcode_str.len)) == 0) {
        passcode = passcode_creator();
    } else {
        var i: i64 = 0;
        while (i < @as(i64, @intCast(passcode_str.len))) {
            passcode = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, passcode)) catch |err| handleError(err); _tmp.append(passcode_str[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(passcode_str.len)))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            i = i + 1;
        }
    }
    const key_list: [][]const u8 = make_key_list(passcode);
    const shift_key: i64 = make_shift_key(passcode);
    return .{ .passcode = passcode, .key_list = key_list, .shift_key = shift_key };
}

fn index_of(lst: [][]const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(lst.len))) {
        if (std.mem.eql(u8, lst[@as(usize, @intCast(i))], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn encrypt(c: Cipher, plaintext: []const u8) []const u8 {
    var encoded_var_1: []const u8 = "";
    var i: i64 = 0;
    const n: i64 = @as(i64, @intCast(c.key_list.len));
    while (i < @as(i64, @intCast(plaintext.len))) {
        const ch: []const u8 = plaintext[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(plaintext.len)))];
        const position: i64 = index_of(c.key_list, ch);
        var new_pos: i64 = @mod(position + c.shift_key, n);
        encoded_var_1 = _concat_string(encoded_var_1, c.key_list[@as(usize, @intCast(new_pos))]);
        i = i + 1;
    }
    return encoded_var_1;
}

fn decrypt(c: Cipher, encoded_message: []const u8) []const u8 {
    var decoded: []const u8 = "";
    var i: i64 = 0;
    const n: i64 = @as(i64, @intCast(c.key_list.len));
    while (i < @as(i64, @intCast(encoded_message.len))) {
        const ch: []const u8 = encoded_message[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(encoded_message.len)))];
        const position: i64 = index_of(c.key_list, ch);
        var new_pos: i64 = @mod(position - c.shift_key, n);
        if (new_pos < 0) {
            new_pos = new_pos + n;
        }
        decoded = _concat_string(decoded, c.key_list[@as(usize, @intCast(new_pos))]);
        i = i + 1;
    }
    return decoded;
}

fn test_end_to_end() []const u8 {
    const msg: []const u8 = "Hello, this is a modified Caesar cipher";
    const cip: Cipher = new_cipher("");
    return decrypt(cip, encrypt(cip, msg));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        ssc_var = new_cipher("4PYIXyqeQZr44");
        encoded_var = encrypt(ssc_var, "Hello, this is a modified Caesar cipher");
        std.debug.print("{s}\n", .{encoded_var});
        std.debug.print("{s}\n", .{decrypt(ssc_var, encoded_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
