// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn gcd(a: i64, b: i64) i64 {
    var x: i64 = a;
    x = x;
    var y: i64 = b;
    y = y;
    while (y != 0) {
        var t: i64 = @mod(x, y);
        t = t;
        x = y;
        y = t;
    }
    if (x < 0) {
        return 0 - x;
    }
    return x;
}

fn pow_mod(base: i64, exp: i64, mod: i64) i64 {
    var result: i64 = 1;
    result = result;
    var b: i64 = @mod(base, mod);
    b = b;
    var e: i64 = exp;
    e = e;
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = @mod(result * b, mod);
        }
        e = @divTrunc(e, 2);
        b = @mod(b * b, mod);
    }
    return result;
}

fn rsa_factor(d: i64, e: i64, n: i64) []i64 {
    var k: i64 = d * e - 1;
    k = k;
    var p: i64 = 0;
    p = p;
    var q: i64 = 0;
    q = q;
    var g: i64 = 2;
    g = g;
    while (p == 0 and g < n) {
        var t: i64 = k;
        t = t;
        while (@mod(t, 2) == 0) {
            t = @divTrunc(t, 2);
            var x: i64 = pow_mod(g, t, n);
            x = x;
            var y: i64 = gcd(x - 1, n);
            y = y;
            if (x > 1 and y > 1) {
                p = y;
                q = @divTrunc(n, y);
                break;
            }
        }
        g = g + 1;
    }
    if (p > q) {
        return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp0[0] = q; _tmp0[1] = p; break :blk0 _tmp0; };
    }
    return blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp1[0] = p; _tmp1[1] = q; break :blk1 _tmp1; };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(rsa_factor(3, 16971, 25777))});
        std.debug.print("{s}\n", .{_str(rsa_factor(7331, 11, 27233))});
        std.debug.print("{s}\n", .{_str(rsa_factor(4021, 13, 17711))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
