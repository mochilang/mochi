// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.141592653589793;
const AXIS_A_var: f64 = 6378137.0;
const AXIS_B_var: f64 = 6356752.314245;
const RADIUS_var: f64 = 6378137.0;
var SAN_FRANCISCO_var: []f64 = &[_]f64{};
var YOSEMITE_var: []f64 = &[_]f64{};

fn to_radians(deg: f64) f64 {
    return deg * PI_var / 180.0;
}

fn sin_taylor(x: f64) f64 {
    var term: f64 = x;
    term = term;
    var sum: f64 = x;
    sum = sum;
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        const k1: f64 = 2.0 * @as(f64, @floatFromInt(i));
        const k2: f64 = k1 + 1.0;
        term = (@as(f64, @floatFromInt(0)) - term) * x * x / (k1 * k2);
        sum = sum + term;
        i = i + 1;
    }
    return sum;
}

fn cos_taylor(x: f64) f64 {
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        const k1: f64 = 2.0 * @as(f64, @floatFromInt(i)) - 1.0;
        const k2: f64 = 2.0 * @as(f64, @floatFromInt(i));
        term = (@as(f64, @floatFromInt(0)) - term) * x * x / (k1 * k2);
        sum = sum + term;
        i = i + 1;
    }
    return sum;
}

fn tan_approx(x: f64) f64 {
    return sin_taylor(x) / cos_taylor(x);
}

fn sqrtApprox(x: f64) f64 {
    var guess: f64 = x / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

fn atanApprox(x: f64) f64 {
    if (x > 1.0) {
        return PI_var / 2.0 - x / (x * x + 0.28);
    }
    if (x < @as(f64, @floatFromInt(0)) - 1.0) {
        return (@as(f64, @floatFromInt(0)) - PI_var) / 2.0 - x / (x * x + 0.28);
    }
    return x / (1.0 + 0.28 * x * x);
}

fn atan2Approx(y: f64, x: f64) f64 {
    if (x > 0.0) {
        const val: f64 = atanApprox(y / x);
        return val;
    }
    if (x < 0.0) {
        if (y >= 0.0) {
            return atanApprox(y / x) + PI_var;
        }
        return atanApprox(y / x) - PI_var;
    }
    if (y > 0.0) {
        return PI_var / 2.0;
    }
    if (y < 0.0) {
        return (@as(f64, @floatFromInt(0)) - PI_var) / 2.0;
    }
    return 0.0;
}

fn asinApprox(x: f64) f64 {
    const denom: f64 = sqrtApprox(1.0 - x * x);
    const res: f64 = atan2Approx(x, denom);
    return res;
}

fn haversine_distance(lat1: f64, lon1: f64, lat2: f64, lon2: f64) f64 {
    const flattening: f64 = (AXIS_A_var - AXIS_B_var) / AXIS_A_var;
    const phi_1: f64 = atanApprox((1.0 - flattening) * tan_approx(to_radians(lat1)));
    const phi_2: f64 = atanApprox((1.0 - flattening) * tan_approx(to_radians(lat2)));
    const lambda_1: f64 = to_radians(lon1);
    const lambda_2: f64 = to_radians(lon2);
    var sin_sq_phi: f64 = sin_taylor((phi_2 - phi_1) / 2.0);
    sin_sq_phi = sin_sq_phi;
    var sin_sq_lambda: f64 = sin_taylor((lambda_2 - lambda_1) / 2.0);
    sin_sq_lambda = sin_sq_lambda;
    sin_sq_phi = sin_sq_phi * sin_sq_phi;
    sin_sq_lambda = sin_sq_lambda * sin_sq_lambda;
    const h_value: f64 = sqrtApprox(sin_sq_phi + cos_taylor(phi_1) * cos_taylor(phi_2) * sin_sq_lambda);
    return 2.0 * RADIUS_var * asinApprox(h_value);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        SAN_FRANCISCO_var = std.heap.page_allocator.dupe(f64, (&([2]f64{37.774856, @as(f64, @floatFromInt(0)) - 122.424227}))[0..]) catch unreachable;
        YOSEMITE_var = std.heap.page_allocator.dupe(f64, (&([2]f64{37.864742, @as(f64, @floatFromInt(0)) - 119.537521}))[0..]) catch unreachable;
        std.debug.print("{s}\n", .{_str(haversine_distance(SAN_FRANCISCO_var[_idx(SAN_FRANCISCO_var.len, 0)], SAN_FRANCISCO_var[_idx(SAN_FRANCISCO_var.len, 1)], YOSEMITE_var[_idx(YOSEMITE_var.len, 0)], YOSEMITE_var[_idx(YOSEMITE_var.len, 1)]))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
