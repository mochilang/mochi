// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.141592653589793;
const EQUATORIAL_RADIUS_var: f64 = 6378137.0;

fn to_radians(deg: f64) f64 {
    return deg * PI_var / 180.0;
}

fn sin_approx(x: f64) f64 {
    var term: f64 = x;
    term = term;
    var sum: f64 = x;
    sum = sum;
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        const k1: f64 = 2.0 * @as(f64, @floatFromInt(i));
        const k2: f64 = k1 + 1.0;
        term = (@as(f64, @floatFromInt(0)) - term) * x * x / (k1 * k2);
        sum = sum + term;
        i = i + 1;
    }
    return sum;
}

fn cos_approx(x: f64) f64 {
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        const k1: f64 = 2.0 * @as(f64, @floatFromInt(i)) - 1.0;
        const k2: f64 = 2.0 * @as(f64, @floatFromInt(i));
        term = (@as(f64, @floatFromInt(0)) - term) * x * x / (k1 * k2);
        sum = sum + term;
        i = i + 1;
    }
    return sum;
}

fn sqrt_approx(x: f64) f64 {
    if (x <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

fn lamberts_ellipsoidal_distance(lat1: f64, lon1: f64, lat2: f64, lon2: f64) f64 {
    const phi1: f64 = to_radians(lat1);
    const phi2: f64 = to_radians(lat2);
    const lambda1: f64 = to_radians(lon1);
    const lambda2: f64 = to_radians(lon2);
    const x: f64 = (lambda2 - lambda1) * cos_approx((phi1 + phi2) / 2.0);
    const y: f64 = phi2 - phi1;
    return EQUATORIAL_RADIUS_var * sqrt_approx(x * x + y * y);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{d}\n", .{lamberts_ellipsoidal_distance(37.774856, @as(f64, @floatFromInt(0)) - 122.424227, 37.864742, @as(f64, @floatFromInt(0)) - 119.537521)});
        std.debug.print("{d}\n", .{lamberts_ellipsoidal_distance(37.774856, @as(f64, @floatFromInt(0)) - 122.424227, 40.713019, @as(f64, @floatFromInt(0)) - 74.012647)});
        std.debug.print("{d}\n", .{lamberts_ellipsoidal_distance(37.774856, @as(f64, @floatFromInt(0)) - 122.424227, 45.443012, 12.313071)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
