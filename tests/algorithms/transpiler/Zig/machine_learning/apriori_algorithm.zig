// Generated by Mochi Zig transpiler on 2025-08-16 12:39 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Itemset = struct {
    items: [][]const u8,
    support: i64,
};

var frequent_itemsets_var_1: []Itemset = &[_]Itemset{};

fn load_data() [][][]const u8 {
    return blk0: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.append(@constCast(([1][]const u8{"milk"})[0..1])) catch |err| handleError(err); _tmp.append(@constCast(([2][]const u8{"milk", "butter"})[0..2])) catch |err| handleError(err); _tmp.append(@constCast(([2][]const u8{"milk", "bread"})[0..2])) catch |err| handleError(err); _tmp.append(@constCast(([3][]const u8{"milk", "bread", "chips"})[0..3])) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn contains_string(xs: [][]const u8, s: []const u8) bool {
    for (xs) |__it0| {
        const v = __it0;
        if (std.mem.eql(u8, v, s)) {
            return true;
        }
    }
    return false;
}

fn is_subset(candidate: [][]const u8, transaction: [][]const u8) bool {
    for (candidate) |__it1| {
        const it = __it1;
        if (!(contains_string(transaction, it))) {
            return false;
        }
    }
    return true;
}

fn lists_equal(a: [][]const u8, b: [][]const u8) bool {
    if (@as(i64, @intCast(a.len)) != @as(i64, @intCast(b.len))) {
        return false;
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.len))) {
        if (!std.mem.eql(u8, a[_idx(a.len, i)], b[_idx(b.len, i)])) {
            return false;
        }
        i = i +% 1;
    }
    return true;
}

fn contains_list(itemset: [][][]const u8, item: [][]const u8) bool {
    for (itemset) |__it2| {
        const l = __it2;
        if (lists_equal(l, item)) {
            return true;
        }
    }
    return false;
}

fn count_list(itemset_1: [][][]const u8, item_1: [][]const u8) i64 {
    var c: i64 = 0;
    c = c;
    for (itemset_1) |__it3| {
        const l_1 = __it3;
        if (lists_equal(l_1, item_1)) {
            c = c +% 1;
        }
    }
    return c;
}

fn slice_list(xs_1: [][][]const u8, start: i64) [][][]const u8 {
    var res: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
    res = res;
    var i_1: i64 = start;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(xs_1.len))) {
        res = blk1: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, res)) catch |err| handleError(err); _tmp.append(xs_1[_idx(xs_1.len, i_1)]) catch |err| handleError(err); break :blk1 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return res;
}

fn combinations_lists(xs_2: [][][]const u8, k: i64) [][][][]const u8 {
    var result: [][][][]const u8 = std.heap.page_allocator.alloc([][][]const u8, 0) catch unreachable;
    result = result;
    if (k == 0) {
        result = blk2: { var _tmp_1 = std.ArrayList([][][]const u8).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const [][][]const u8, result)) catch |err| handleError(err); _tmp_1.append(@constCast((&[_][][]const u8{})[0..0])) catch |err| handleError(err); break :blk2 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        return result;
    }
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(xs_2.len))) {
        const head: [][]const u8 = xs_2[_idx(xs_2.len, i_2)];
        const tail: [][][]const u8 = slice_list(xs_2, i_2 +% 1);
        const tail_combos: [][][][]const u8 = combinations_lists(tail, k -% 1);
        for (tail_combos) |__it4| {
            const combo = __it4;
            var new_combo: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
            new_combo = new_combo;
            new_combo = blk3: { var _tmp_2 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const [][]const u8, new_combo)) catch |err| handleError(err); _tmp_2.append(head) catch |err| handleError(err); break :blk3 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            for (combo) |__it5| {
                const c_1 = __it5;
                new_combo = blk4: { var _tmp_3 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const [][]const u8, new_combo)) catch |err| handleError(err); _tmp_3.append(c_1) catch |err| handleError(err); break :blk4 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            }
            result = blk5: { var _tmp_4 = std.ArrayList([][][]const u8).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const [][][]const u8, result)) catch |err| handleError(err); _tmp_4.append(new_combo) catch |err| handleError(err); break :blk5 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_2 = i_2 +% 1;
    }
    return result;
}

fn prune(itemset_2: [][][]const u8, candidates: [][][][]const u8, length: i64) [][][]const u8 {
    var pruned: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
    pruned = pruned;
    for (candidates) |__it6| {
        const candidate_1 = __it6;
        var is_subsequence: bool = true;
        is_subsequence = is_subsequence;
        for (candidate_1) |__it7| {
            const item_2 = __it7;
            if (!(contains_list(itemset_2, item_2)) or count_list(itemset_2, item_2) < length -% 1) {
                is_subsequence = false;
                break;
            }
        }
        if (is_subsequence) {
            var merged: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
            merged = merged;
            for (candidate_1) |__it8| {
                const item_3 = __it8;
                for (item_3) |__it9| {
                    const s_1 = __it9;
                    if (!(contains_string(merged, s_1))) {
                        merged = blk6: { var _tmp_5 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []const u8, merged)) catch |err| handleError(err); _tmp_5.append(@constCast(s_1)) catch |err| handleError(err); break :blk6 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
                    }
                }
            }
            pruned = blk7: { var _tmp_6 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const [][]const u8, pruned)) catch |err| handleError(err); _tmp_6.append(merged) catch |err| handleError(err); break :blk7 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return pruned;
}

fn sort_strings(xs_3: [][]const u8) [][]const u8 {
    var res_1: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res_1 = res_1;
    for (xs_3) |__it10| {
        const s_2 = __it10;
        res_1 = blk8: { var _tmp_7 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []const u8, res_1)) catch |err| handleError(err); _tmp_7.append(@constCast(s_2)) catch |err| handleError(err); break :blk8 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
    }
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(res_1.len))) {
        var j: i64 = i_3 +% 1;
        j = j;
        while (j < @as(i64, @intCast(res_1.len))) {
            if (std.mem.order(u8, res_1[_idx(res_1.len, j)], res_1[_idx(res_1.len, i_3)]) == .lt) {
                const tmp: []const u8 = res_1[_idx(res_1.len, i_3)];
                res_1[_idx(res_1.len, i_3)] = res_1[_idx(res_1.len, j)];
                res_1[_idx(res_1.len, j)] = tmp;
            }
            j = j +% 1;
        }
        i_3 = i_3 +% 1;
    }
    return res_1;
}

fn itemset_to_string(xs_4: [][]const u8) []const u8 {
    var s_3: []const u8 = "[";
    s_3 = s_3;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(xs_4.len))) {
        if (i_4 > 0) {
            s_3 = _concat_string(s_3, ", ");
        }
        s_3 = _concat_string(_concat_string(_concat_string(s_3, "'"), xs_4[_idx(xs_4.len, i_4)]), "'");
        i_4 = i_4 +% 1;
    }
    s_3 = _concat_string(s_3, "]");
    return s_3;
}

fn apriori(data: [][][]const u8, min_support: i64) []Itemset {
    var itemset_3: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
    itemset_3 = itemset_3;
    for (data) |__it11| {
        const transaction_1 = __it11;
        var t: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
        t = t;
        for (transaction_1) |__it12| {
            const v_1 = __it12;
            t = blk9: { var _tmp_8 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const []const u8, t)) catch |err| handleError(err); _tmp_8.append(@constCast(v_1)) catch |err| handleError(err); break :blk9 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
        }
        itemset_3 = blk10: { var _tmp_9 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const [][]const u8, itemset_3)) catch |err| handleError(err); _tmp_9.append(t) catch |err| handleError(err); break :blk10 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
    }
    var frequent: []Itemset = std.heap.page_allocator.alloc(Itemset, 0) catch unreachable;
    frequent = frequent;
    var length_1: i64 = 1;
    length_1 = length_1;
    while (@as(i64, @intCast(itemset_3.len)) > 0) {
        var counts: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        counts = counts;
        var idx: i64 = 0;
        idx = idx;
        while (idx < @as(i64, @intCast(itemset_3.len))) {
            counts = blk11: { var _tmp_10 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const i64, counts)) catch |err| handleError(err); _tmp_10.append(0) catch |err| handleError(err); break :blk11 (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
            idx = idx +% 1;
        }
        for (data) |__it13| {
            const transaction_2 = __it13;
            var j_1: i64 = 0;
            j_1 = j_1;
            while (j_1 < @as(i64, @intCast(itemset_3.len))) {
                const candidate_2: [][]const u8 = itemset_3[_idx(itemset_3.len, j_1)];
                if (is_subset(candidate_2, transaction_2)) {
                    counts[_idx(counts.len, j_1)] = counts[_idx(counts.len, j_1)] +% 1;
                }
                j_1 = j_1 +% 1;
            }
        }
        var new_itemset: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
        new_itemset = new_itemset;
        var k_1: i64 = 0;
        k_1 = k_1;
        while (k_1 < @as(i64, @intCast(itemset_3.len))) {
            if (counts[_idx(counts.len, k_1)] >= min_support) {
                new_itemset = blk12: { var _tmp_11 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_11.appendSlice(@as([]const [][]const u8, new_itemset)) catch |err| handleError(err); _tmp_11.append(itemset_3[_idx(itemset_3.len, k_1)]) catch |err| handleError(err); break :blk12 (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
            }
            k_1 = k_1 +% 1;
        }
        itemset_3 = new_itemset;
        var m: i64 = 0;
        m = m;
        while (m < @as(i64, @intCast(itemset_3.len))) {
            const sorted_item: [][]const u8 = sort_strings(itemset_3[_idx(itemset_3.len, m)]);
            frequent = blk13: { var _tmp_12 = std.ArrayList(Itemset).init(std.heap.page_allocator); _tmp_12.appendSlice(@as([]const Itemset, frequent)) catch |err| handleError(err); _tmp_12.append(.{ .items = sorted_item, .support = counts[_idx(counts.len, m)] }) catch |err| handleError(err); break :blk13 (_tmp_12.toOwnedSlice() catch |err| handleError(err)); };
            m = m +% 1;
        }
        length_1 = length_1 +% 1;
        const combos: [][][][]const u8 = combinations_lists(itemset_3, length_1);
        itemset_3 = prune(itemset_3, combos, length_1);
    }
    return frequent;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        frequent_itemsets_var_1 = apriori(load_data(), 2);
        for (frequent_itemsets_var_1) |__it14| {
            const fi = __it14;
            std.debug.print("{s}\n", .{_concat_string(_concat_string(itemset_to_string(fi.items), ": "), _str(fi.support))});
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
