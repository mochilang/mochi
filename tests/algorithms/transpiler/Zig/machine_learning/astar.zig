// Generated by Mochi Zig transpiler on 2025-08-16 13:01 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Point = struct {
    x: i64,
    y: i64,
};

const Node = struct {
    pos: Point,
    parent: Point,
    g: i64,
    h: i64,
    f: i64,
};

const world_x_var: i64 = 5;
const world_y_var: i64 = 5;
var start_var: Point = undefined;
var goal_var: Point = undefined;
var path_var: []Point = &[_]Point{};
var world_var: [][]i64 = &[_][]i64{};

fn get_neighbours(p: Point, x_limit: i64, y_limit: i64) []Point {
    const deltas: []Point = blk0: { var _tmp = std.ArrayList(Point).init(std.heap.page_allocator); _tmp.append(.{ .x = -1, .y = -1 }) catch unreachable; _tmp.append(.{ .x = -1, .y = 0 }) catch unreachable; _tmp.append(.{ .x = -1, .y = 1 }) catch unreachable; _tmp.append(.{ .x = 0, .y = -1 }) catch unreachable; _tmp.append(.{ .x = 0, .y = 1 }) catch unreachable; _tmp.append(.{ .x = 1, .y = -1 }) catch unreachable; _tmp.append(.{ .x = 1, .y = 0 }) catch unreachable; _tmp.append(.{ .x = 1, .y = 1 }) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
    var neighbours: []Point = std.heap.page_allocator.alloc(Point, 0) catch unreachable;
    neighbours = neighbours;
    for (deltas) |__it0| {
        const d = __it0;
        const nx: i64 = p.x +% d.x;
        const ny: i64 = p.y +% d.y;
        if (0 <= nx and nx < x_limit and 0 <= ny and ny < y_limit) {
            neighbours = blk1: { var _tmp_1 = std.ArrayList(Point).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const Point, neighbours)) catch |err| handleError(err); _tmp_1.append(.{ .x = nx, .y = ny }) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return neighbours;
}

fn contains(nodes: []Node, p_1: Point) bool {
    for (nodes) |__it1| {
        const n = __it1;
        if (n.pos.x == p_1.x and n.pos.y == p_1.y) {
            return true;
        }
    }
    return false;
}

fn get_node(nodes_1: []Node, p_2: Point) Node {
    for (nodes_1) |__it2| {
        const n_1 = __it2;
        if (n_1.pos.x == p_2.x and n_1.pos.y == p_2.y) {
            return n_1;
        }
    }
    return .{ .pos = p_2, .parent = .{ .x = -1, .y = -1 }, .g = 0, .h = 0, .f = 0 };
}

fn astar(x_limit_1: i64, y_limit_1: i64, start_param: Point, goal_param: Point) []Point {
    var open: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
    open = open;
    var closed: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
    closed = closed;
    open = blk2: { var _tmp_2 = std.ArrayList(Node).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const Node, open)) catch |err| handleError(err); _tmp_2.append(.{ .pos = start_param, .parent = .{ .x = -1, .y = -1 }, .g = 0, .h = 0, .f = 0 }) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    var current: Node = open[_idx(open.len, 0)];
    current = current;
    while (@as(i64, @intCast(open.len)) > 0) {
        var min_index: i64 = 0;
        min_index = min_index;
        var i: i64 = 1;
        i = i;
        while (i < @as(i64, @intCast(open.len))) {
            if (open[_idx(open.len, i)].f < open[_idx(open.len, min_index)].f) {
                min_index = i;
            }
            i = i +% 1;
        }
        current = open[_idx(open.len, min_index)];
        var new_open: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
        new_open = new_open;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(open.len))) {
            if (j != min_index) {
                new_open = blk3: { var _tmp_3 = std.ArrayList(Node).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const Node, new_open)) catch |err| handleError(err); _tmp_3.append(open[_idx(open.len, j)]) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            }
            j = j +% 1;
        }
        open = new_open;
        closed = blk4: { var _tmp_4 = std.ArrayList(Node).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const Node, closed)) catch |err| handleError(err); _tmp_4.append(current) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        if (current.pos.x == goal_param.x and current.pos.y == goal_param.y) {
            break;
        }
        const neighbours_1: []Point = get_neighbours(current.pos, x_limit_1, y_limit_1);
        for (neighbours_1) |__it3| {
            const np = __it3;
            if (contains(closed, np)) {
                continue;
            }
            const g: i64 = current.g +% 1;
            const dx: i64 = goal_param.x -% np.x;
            const dy: i64 = goal_param.y -% np.y;
            const h: i64 = dx *% dx +% dy *% dy;
            const f: i64 = g +% h;
            var skip: bool = false;
            skip = skip;
            for (open) |__it4| {
                const node = __it4;
                if (node.pos.x == np.x and node.pos.y == np.y and node.f < f) {
                    skip = true;
                }
            }
            if (skip) {
                continue;
            }
            open = blk5: { var _tmp_5 = std.ArrayList(Node).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const Node, open)) catch |err| handleError(err); _tmp_5.append(.{ .pos = np, .parent = current.pos, .g = g, .h = h, .f = f }) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    var path_var_1: []Point = std.heap.page_allocator.alloc(Point, 0) catch unreachable;
    path_var_1 = path_var_1;
    path_var_1 = blk6: { var _tmp_6 = std.ArrayList(Point).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const Point, path_var_1)) catch |err| handleError(err); _tmp_6.append(current.pos) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
    while (!(current.parent.x == -1 and current.parent.y == -1)) {
        current = get_node(closed, current.parent);
        path_var_1 = blk7: { var _tmp_7 = std.ArrayList(Point).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const Point, path_var_1)) catch |err| handleError(err); _tmp_7.append(current.pos) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
    }
    var rev: []Point = std.heap.page_allocator.alloc(Point, 0) catch unreachable;
    rev = rev;
    var k: i64 = @as(i64, @intCast(path_var_1.len)) -% 1;
    k = k;
    while (k >= 0) {
        rev = blk8: { var _tmp_8 = std.ArrayList(Point).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const Point, rev)) catch |err| handleError(err); _tmp_8.append(path_var_1[_idx(path_var_1.len, k)]) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
        k = k -% 1;
    }
    return rev;
}

fn create_world(x_limit_2: i64, y_limit_2: i64) [][]i64 {
    var world_var_1: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    world_var_1 = world_var_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < x_limit_2) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < y_limit_2) {
            row = blk9: { var _tmp_9 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp_9.append(0) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 +% 1;
        }
        world_var_1 = blk10: { var _tmp_10 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const []i64, world_var_1)) catch |err| handleError(err); _tmp_10.append(row) catch |err| handleError(err); break :blk10 (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return world_var_1;
}

fn mark_path(world_param: [][]i64, path_param: []Point) void {
    var world_var_2: [][]i64 = world_param;
    world_var_2 = world_var_2;
    for (path_param) |__it5| {
        const p_3 = __it5;
        world_var_2[_idx(world_var_2.len, p_3.x)][_idx(world_var_2[_idx(world_var_2.len, p_3.x)].len, p_3.y)] = 1;
    }
}

fn print_world(world_param_1: [][]i64) void {
    for (world_param_1) |__it6| {
        const row_1 = __it6;
        std.debug.print("{s}\n", .{_str(row_1)});
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        start_var = .{ .x = 0, .y = 0 };
        goal_var = .{ .x = 4, .y = 4 };
        path_var = astar(world_x_var, world_y_var, start_var, goal_var);
        world_var = create_world(world_x_var, world_y_var);
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("path from (", _str(start_var.x)), ", "), _str(start_var.y)), ") to ("), _str(goal_var.x)), ", "), _str(goal_var.y)), ")")});
        mark_path(world_var, path_var);
        print_world(world_var);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
