// Generated by Mochi Zig transpiler on 2025-08-17 08:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const KMeansResult = struct {
    centroids: [][]f64,
    assignments: []i64,
    heterogeneity: []f64,
};

const data_var: [][]f64 = @constCast(([6][]f64{@constCast(([2]f64{1.0, 2.0})[0..2]), @constCast(([2]f64{1.5, 1.8})[0..2]), @constCast(([2]f64{5.0, 8.0})[0..2]), @constCast(([2]f64{8.0, 8.0})[0..2]), @constCast(([2]f64{1.0, 0.6})[0..2]), @constCast(([2]f64{9.0, 11.0})[0..2])})[0..6]);
const k_var: i64 = 3;
var initial_centroids_var: [][]f64 = &[_][]f64{};
var result_var: KMeansResult = undefined;

fn distance_sq(a: []f64, b: []f64) f64 {
    var sum: f64 = 0.0;
    sum = sum;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(a.len))))) |__it0| {
        const i_7: i64 = @as(i64, @intCast(__it0));
        const diff: f64 = a[_idx(a.len, i_7)] - b[_idx(b.len, i_7)];
        sum = sum + diff * diff;
    }
    return sum;
}

fn assign_clusters(data_param: [][]f64, centroids: [][]f64) []i64 {
    var assignments: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    assignments = assignments;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(data_param.len))))) |__it1| {
        const i_1: i64 = @as(i64, @intCast(__it1));
        var best_idx: i64 = 0;
        best_idx = best_idx;
        var best: f64 = distance_sq(data_param[_idx(data_param.len, i_1)], centroids[_idx(centroids.len, 0)]);
        best = best;
        for (@as(usize, @intCast(1))..@as(usize, @intCast(@as(i64, @intCast(centroids.len))))) |__it2| {
            const j_5: i64 = @as(i64, @intCast(__it2));
            const dist: f64 = distance_sq(data_param[_idx(data_param.len, i_1)], centroids[_idx(centroids.len, j_5)]);
            if (dist < best) {
                best = dist;
                best_idx = j_5;
            }
        }
        assignments = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, assignments)) catch |err| handleError(err); _tmp.append(best_idx) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return assignments;
}

fn revise_centroids(data_param_1: [][]f64, k_param: i64, assignment: []i64) [][]f64 {
    const dim: i64 = @as(i64, @intCast(data_param_1[_idx(data_param_1.len, 0)].len));
    var sums: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    sums = sums;
    var counts: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    counts = counts;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(k_param))) |_| {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        for (@as(usize, @intCast(0))..@as(usize, @intCast(dim))) |_| {
            row = blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp_1.append(0.0) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        }
        sums = blk2: { var _tmp_2 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []f64, sums)) catch |err| handleError(err); _tmp_2.append(row) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        counts = blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, counts)) catch |err| handleError(err); _tmp_3.append(0) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
    }
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(data_param_1.len))))) |__it5| {
        const i_3: i64 = @as(i64, @intCast(__it5));
        const c: i64 = assignment[_idx(assignment.len, i_3)];
        counts[_idx(counts.len, c)] = counts[_idx(counts.len, c)] +% 1;
        for (@as(usize, @intCast(0))..@as(usize, @intCast(dim))) |__it6| {
            const j_2: i64 = @as(i64, @intCast(__it6));
            sums[_idx(sums.len, c)][_idx(sums[_idx(sums.len, c)].len, j_2)] = sums[_idx(sums.len, c)][_idx(sums[_idx(sums.len, c)].len, j_2)] + data_param_1[_idx(data_param_1.len, i_3)][_idx(data_param_1[_idx(data_param_1.len, i_3)].len, j_2)];
        }
    }
    var centroids_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    centroids_1 = centroids_1;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(k_param))) |__it7| {
        const i_4: i64 = @as(i64, @intCast(__it7));
        var row_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_1 = row_1;
        if (counts[_idx(counts.len, i_4)] > 0) {
            for (@as(usize, @intCast(0))..@as(usize, @intCast(dim))) |__it8| {
                const j_3: i64 = @as(i64, @intCast(__it8));
                row_1 = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, row_1)) catch |err| handleError(err); _tmp_4.append(sums[_idx(sums.len, i_4)][_idx(sums[_idx(sums.len, i_4)].len, j_3)] / @as(f64, @floatFromInt(counts[_idx(counts.len, i_4)]))) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            }
        } else {
            for (@as(usize, @intCast(0))..@as(usize, @intCast(dim))) |_| {
                row_1 = blk5: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const f64, row_1)) catch |err| handleError(err); _tmp_5.append(0.0) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        centroids_1 = blk6: { var _tmp_6 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const []f64, centroids_1)) catch |err| handleError(err); _tmp_6.append(row_1) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
    }
    return centroids_1;
}

fn compute_heterogeneity(data_param_2: [][]f64, centroids_2: [][]f64, assignment_1: []i64) f64 {
    var total: f64 = 0.0;
    total = total;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(data_param_2.len))))) |__it10| {
        const i_5: i64 = @as(i64, @intCast(__it10));
        const c_1: i64 = assignment_1[_idx(assignment_1.len, i_5)];
        total = total + distance_sq(data_param_2[_idx(data_param_2.len, i_5)], centroids_2[_idx(centroids_2.len, c_1)]);
    }
    return total;
}

fn lists_equal(a_1: []i64, b_1: []i64) bool {
    if (@as(i64, @intCast(a_1.len)) != @as(i64, @intCast(b_1.len))) {
        return false;
    }
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(a_1.len))))) |__it11| {
        const i_6: i64 = @as(i64, @intCast(__it11));
        if (a_1[_idx(a_1.len, i_6)] != b_1[_idx(b_1.len, i_6)]) {
            return false;
        }
    }
    return true;
}

fn kmeans(data_param_3: [][]f64, k_param_1: i64, initial_centroids_param: [][]f64, max_iter: i64) KMeansResult {
    var centroids_3: [][]f64 = blk7: { const tmp = std.heap.page_allocator.alloc([]f64, initial_centroids_param.len) catch unreachable; @memcpy(tmp, initial_centroids_param); break :blk7 tmp; };
    centroids_3 = centroids_3;
    var assignment_2: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    assignment_2 = assignment_2;
    var prev: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    prev = prev;
    var heterogeneity: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    heterogeneity = heterogeneity;
    var iter: i64 = 0;
    iter = iter;
    while (iter < max_iter) {
        assignment_2 = assign_clusters(data_param_3, centroids_3);
        centroids_3 = revise_centroids(data_param_3, k_param_1, assignment_2);
        const h: f64 = compute_heterogeneity(data_param_3, centroids_3, assignment_2);
        heterogeneity = blk8: { var _tmp_7 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const f64, heterogeneity)) catch |err| handleError(err); _tmp_7.append(h) catch |err| handleError(err); break :blk8 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        if (iter > 0 and lists_equal(prev, assignment_2)) {
            break;
        }
        prev = assignment_2;
        iter = iter +% 1;
    }
    return .{ .centroids = centroids_3, .assignments = assignment_2, .heterogeneity = heterogeneity };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        initial_centroids_var = std.heap.page_allocator.dupe([]f64, blk9: { var _tmp_8 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_8.append(data_var[_idx(data_var.len, 0)]) catch unreachable; _tmp_8.append(data_var[_idx(data_var.len, 2)]) catch unreachable; _tmp_8.append(data_var[_idx(data_var.len, 5)]) catch unreachable; break :blk9 (_tmp_8.toOwnedSlice() catch unreachable); }) catch unreachable;
        result_var = kmeans(data_var, k_var, initial_centroids_var, 10);
        std.debug.print("{s}\n", .{_str(result_var.centroids)});
        std.debug.print("{s}\n", .{_str(result_var.assignments)});
        std.debug.print("{s}\n", .{_str(result_var.heterogeneity)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
