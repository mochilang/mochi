// Generated by Mochi Zig transpiler on 2025-08-16 21:23 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const xs_var: []f64 = @constCast(([11]f64{0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0})[0..11]);
var ys_var_1: []f64 = &[_]f64{};
var i_var_7: i64 = 0;
var X_var_1: [][]f64 = &[_][]f64{};
var Xt_var_1: [][]f64 = &[_][]f64{};
var XtX_var_1: [][]f64 = &[_][]f64{};
var Xty_var_1: []f64 = &[_]f64{};
var coeffs_var: []f64 = &[_]f64{};

fn design_matrix(xs_param: []f64, degree: i64) [][]f64 {
    var i_var_1: i64 = 0;
    i_var_1 = i_var_1;
    var matrix: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    matrix = matrix;
    while (i_var_1 < @as(i64, @intCast(xs_param.len))) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        var pow: f64 = 1.0;
        pow = pow;
        while (j <= degree) {
            row = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(pow) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            pow = pow * xs_param[_idx(xs_param.len, i_var_1)];
            j = j +% 1;
        }
        matrix = blk1: { var _tmp_1 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []f64, matrix)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_var_1 = i_var_1 +% 1;
    }
    return matrix;
}

fn transpose(matrix_1: [][]f64) [][]f64 {
    const rows: i64 = @as(i64, @intCast(matrix_1.len));
    const cols: i64 = @as(i64, @intCast(matrix_1[_idx(matrix_1.len, 0)].len));
    var j_1: i64 = 0;
    j_1 = j_1;
    var result: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    result = result;
    while (j_1 < cols) {
        var row_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_1 = row_1;
        var i_var_2: i64 = 0;
        i_var_2 = i_var_2;
        while (i_var_2 < rows) {
            row_1 = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, row_1)) catch |err| handleError(err); _tmp_2.append(matrix_1[_idx(matrix_1.len, i_var_2)][_idx(matrix_1[_idx(matrix_1.len, i_var_2)].len, j_1)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            i_var_2 = i_var_2 +% 1;
        }
        result = blk3: { var _tmp_3 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []f64, result)) catch |err| handleError(err); _tmp_3.append(row_1) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        j_1 = j_1 +% 1;
    }
    return result;
}

fn matmul(A: [][]f64, B: [][]f64) [][]f64 {
    const n: i64 = @as(i64, @intCast(A.len));
    const m: i64 = @as(i64, @intCast(A[_idx(A.len, 0)].len));
    const p: i64 = @as(i64, @intCast(B[_idx(B.len, 0)].len));
    var i_var_3: i64 = 0;
    i_var_3 = i_var_3;
    var result_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    result_1 = result_1;
    while (i_var_3 < n) {
        var row_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_2 = row_2;
        var k: i64 = 0;
        k = k;
        while (k < p) {
            var sum: f64 = 0.0;
            sum = sum;
            var j_2: i64 = 0;
            j_2 = j_2;
            while (j_2 < m) {
                sum = sum + A[_idx(A.len, i_var_3)][_idx(A[_idx(A.len, i_var_3)].len, j_2)] * B[_idx(B.len, j_2)][_idx(B[_idx(B.len, j_2)].len, k)];
                j_2 = j_2 +% 1;
            }
            row_2 = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, row_2)) catch |err| handleError(err); _tmp_4.append(sum) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            k = k +% 1;
        }
        result_1 = blk5: { var _tmp_5 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []f64, result_1)) catch |err| handleError(err); _tmp_5.append(row_2) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        i_var_3 = i_var_3 +% 1;
    }
    return result_1;
}

fn matvec_mul(A_1: [][]f64, v: []f64) []f64 {
    const n_1: i64 = @as(i64, @intCast(A_1.len));
    const m_1: i64 = @as(i64, @intCast(A_1[_idx(A_1.len, 0)].len));
    var i_var_4: i64 = 0;
    i_var_4 = i_var_4;
    var result_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    result_2 = result_2;
    while (i_var_4 < n_1) {
        var sum_1: f64 = 0.0;
        sum_1 = sum_1;
        var j_3: i64 = 0;
        j_3 = j_3;
        while (j_3 < m_1) {
            sum_1 = sum_1 + A_1[_idx(A_1.len, i_var_4)][_idx(A_1[_idx(A_1.len, i_var_4)].len, j_3)] * v[_idx(v.len, j_3)];
            j_3 = j_3 +% 1;
        }
        result_2 = blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const f64, result_2)) catch |err| handleError(err); _tmp_6.append(sum_1) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        i_var_4 = i_var_4 +% 1;
    }
    return result_2;
}

fn gaussian_elimination(A_2: [][]f64, b: []f64) []f64 {
    const n_2: i64 = @as(i64, @intCast(A_2.len));
    var M: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    M = M;
    var i_var_5: i64 = 0;
    i_var_5 = i_var_5;
    while (i_var_5 < n_2) {
        M = blk7: { var _tmp_7 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []f64, M)) catch |err| handleError(err); _tmp_7.append(blk8: { var _tmp_8 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const f64, A_2[_idx(A_2.len, i_var_5)])) catch |err| handleError(err); _tmp_8.append(b[_idx(b.len, i_var_5)]) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); }) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_var_5 = i_var_5 +% 1;
    }
    var k_1: i64 = 0;
    k_1 = k_1;
    while (k_1 < n_2) {
        var j_4: i64 = k_1 +% 1;
        j_4 = j_4;
        while (j_4 < n_2) {
            const factor: f64 = M[_idx(M.len, j_4)][_idx(M[_idx(M.len, j_4)].len, k_1)] / M[_idx(M.len, k_1)][_idx(M[_idx(M.len, k_1)].len, k_1)];
            var rowj: []f64 = M[_idx(M.len, j_4)];
            rowj = rowj;
            const rowk: []f64 = M[_idx(M.len, k_1)];
            var l: i64 = k_1;
            l = l;
            while (l <= n_2) {
                rowj[_idx(rowj.len, l)] = rowj[_idx(rowj.len, l)] - factor * rowk[_idx(rowk.len, l)];
                l = l +% 1;
            }
            M[_idx(M.len, j_4)] = rowj;
            j_4 = j_4 +% 1;
        }
        k_1 = k_1 +% 1;
    }
    var x: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    x = x;
    var t: i64 = 0;
    t = t;
    while (t < n_2) {
        x = blk9: { var _tmp_9 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const f64, x)) catch |err| handleError(err); _tmp_9.append(0.0) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        t = t +% 1;
    }
    var _i2: i64 = n_2 -% 1;
    _i2 = _i2;
    while (_i2 >= 0) {
        var sum_2: f64 = M[_idx(M.len, _i2)][_idx(M[_idx(M.len, _i2)].len, n_2)];
        sum_2 = sum_2;
        var j2: i64 = _i2 +% 1;
        j2 = j2;
        while (j2 < n_2) {
            sum_2 = sum_2 - M[_idx(M.len, _i2)][_idx(M[_idx(M.len, _i2)].len, j2)] * x[_idx(x.len, j2)];
            j2 = j2 +% 1;
        }
        x[_idx(x.len, _i2)] = sum_2 / M[_idx(M.len, _i2)][_idx(M[_idx(M.len, _i2)].len, _i2)];
        _i2 = _i2 -% 1;
    }
    return x;
}

fn predict(xs_param_1: []f64, coeffs_param: []f64) []f64 {
    var i_var_6: i64 = 0;
    i_var_6 = i_var_6;
    var result_3: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    result_3 = result_3;
    while (i_var_6 < @as(i64, @intCast(xs_param_1.len))) {
        const x_1: f64 = xs_param_1[_idx(xs_param_1.len, i_var_6)];
        var j_5: i64 = 0;
        j_5 = j_5;
        var pow_1: f64 = 1.0;
        pow_1 = pow_1;
        var sum_3: f64 = 0.0;
        sum_3 = sum_3;
        while (j_5 < @as(i64, @intCast(coeffs_param.len))) {
            sum_3 = sum_3 + coeffs_param[_idx(coeffs_param.len, j_5)] * pow_1;
            pow_1 = pow_1 * x_1;
            j_5 = j_5 +% 1;
        }
        result_3 = blk10: { var _tmp_10 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const f64, result_3)) catch |err| handleError(err); _tmp_10.append(sum_3) catch |err| handleError(err); break :blk10 (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
        i_var_6 = i_var_6 +% 1;
    }
    return result_3;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        ys_var_1 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        X_var_1 = design_matrix(xs_var, 3);
        Xt_var_1 = transpose(X_var_1);
        XtX_var_1 = matmul(Xt_var_1, X_var_1);
        Xty_var_1 = matvec_mul(Xt_var_1, ys_var_1);
        coeffs_var = gaussian_elimination(XtX_var_1, Xty_var_1);
        while (i_var_7 < @as(i64, @intCast(xs_var.len))) {
            const x_2: f64 = xs_var[_idx(xs_var.len, i_var_7)];
            ys_var_1 = blk11: { var _tmp_11 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_11.appendSlice(@as([]const f64, ys_var_1)) catch |err| handleError(err); _tmp_11.append(x_2 * x_2 * x_2 - 2.0 * x_2 * x_2 + 3.0 * x_2 - 5.0) catch |err| handleError(err); break :blk11 (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
            i_var_7 = i_var_7 +% 1;
        }
        std.debug.print("{s}\n", .{_str(coeffs_var)});
        std.debug.print("{s}\n", .{_str(predict(@constCast(blk12: { var _tmp_12 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_12.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; break :blk12 (_tmp_12.toOwnedSlice() catch unreachable); }), coeffs_var))});
        std.debug.print("{s}\n", .{_str(predict(@constCast(blk13: { var _tmp_13 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_13.append(@as(f64, @floatFromInt(0)) - 2.0) catch unreachable; break :blk13 (_tmp_13.toOwnedSlice() catch unreachable); }), coeffs_var))});
        std.debug.print("{s}\n", .{_str(predict(@constCast(([1]f64{6.0})[0..1]), coeffs_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
