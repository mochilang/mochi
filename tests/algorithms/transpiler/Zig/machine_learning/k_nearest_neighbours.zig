// Generated by Mochi Zig transpiler on 2025-08-17 08:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PointLabel = struct {
    point: []f64,
    label: i64,
};

const KNN = struct {
    data: []PointLabel,
    labels: [][]const u8,
};

const DistLabel = struct {
    dist: f64,
    label: i64,
};

const train_X_var: [][]f64 = @constCast(([7][]f64{@constCast(([2]f64{0.0, 0.0})[0..2]), @constCast(([2]f64{1.0, 0.0})[0..2]), @constCast(([2]f64{0.0, 1.0})[0..2]), @constCast(([2]f64{0.5, 0.5})[0..2]), @constCast(([2]f64{3.0, 3.0})[0..2]), @constCast(([2]f64{2.0, 3.0})[0..2]), @constCast(([2]f64{3.0, 2.0})[0..2])})[0..7]);
const train_y_var: []i64 = @constCast(([7]i64{0, 0, 0, 0, 1, 1, 1})[0..7]);
const classes_var: [][]const u8 = @constCast(([2][]const u8{"A", "B"})[0..2]);
var knn_var: KNN = undefined;
const point_var: []f64 = @constCast(([2]f64{1.2, 1.2})[0..2]);

fn sqrtApprox(x: f64) f64 {
    if (x <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn make_knn(train_data: [][]f64, train_target: []i64, class_labels: [][]const u8) KNN {
    var items: []PointLabel = std.heap.page_allocator.alloc(PointLabel, 0) catch unreachable;
    items = items;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(train_data.len))) {
        const pl: PointLabel = .{ .point = train_data[_idx(train_data.len, i_1)], .label = train_target[_idx(train_target.len, i_1)] };
        items = blk0: { var _tmp = std.ArrayList(PointLabel).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const PointLabel, items)) catch |err| handleError(err); _tmp.append(pl) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return .{ .data = items, .labels = class_labels };
}

fn euclidean_distance(a: []f64, b: []f64) f64 {
    var sum: f64 = 0.0;
    sum = sum;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(a.len))) {
        const diff: f64 = a[_idx(a.len, i_2)] - b[_idx(b.len, i_2)];
        sum = sum + diff * diff;
        i_2 = i_2 +% 1;
    }
    return sqrtApprox(sum);
}

fn classify(knn_param: KNN, pred_point: []f64, k: i64) []const u8 {
    var distances: []DistLabel = std.heap.page_allocator.alloc(DistLabel, 0) catch unreachable;
    distances = distances;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(knn_param.data.len))) {
        const d: f64 = euclidean_distance(knn_param.data[_idx(knn_param.data.len, i_3)].point, pred_point);
        distances = blk1: { var _tmp_1 = std.ArrayList(DistLabel).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const DistLabel, distances)) catch |err| handleError(err); _tmp_1.append(.{ .dist = d, .label = knn_param.data[_idx(knn_param.data.len, i_3)].label }) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    var votes: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    votes = votes;
    var count: i64 = 0;
    count = count;
    while (count < k) {
        var min_index: i64 = 0;
        min_index = min_index;
        var j: i64 = 1;
        j = j;
        while (j < @as(i64, @intCast(distances.len))) {
            if (distances[_idx(distances.len, j)].dist < distances[_idx(distances.len, min_index)].dist) {
                min_index = j;
            }
            j = j +% 1;
        }
        votes = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, votes)) catch |err| handleError(err); _tmp_2.append(distances[_idx(distances.len, min_index)].label) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        distances[_idx(distances.len, min_index)].dist = 1000000000000000000.0;
        count = count +% 1;
    }
    var tally: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    tally = tally;
    var t: i64 = 0;
    t = t;
    while (t < @as(i64, @intCast(knn_param.labels.len))) {
        tally = blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, tally)) catch |err| handleError(err); _tmp_3.append(0) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        t = t +% 1;
    }
    var v: i64 = 0;
    v = v;
    while (v < @as(i64, @intCast(votes.len))) {
        const lbl: i64 = votes[_idx(votes.len, v)];
        tally[_idx(tally.len, lbl)] = tally[_idx(tally.len, lbl)] +% 1;
        v = v +% 1;
    }
    var max_idx: i64 = 0;
    max_idx = max_idx;
    var m: i64 = 1;
    m = m;
    while (m < @as(i64, @intCast(tally.len))) {
        if (tally[_idx(tally.len, m)] > tally[_idx(tally.len, max_idx)]) {
            max_idx = m;
        }
        m = m +% 1;
    }
    return knn_param.labels[_idx(knn_param.labels.len, max_idx)];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        knn_var = make_knn(train_X_var, train_y_var, classes_var);
        std.debug.print("{s}\n", .{classify(knn_var, point_var, 5)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
