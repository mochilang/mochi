// Generated by Mochi Zig transpiler on 2025-08-17 08:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const X_var: [][]f64 = @constCast(([4][]f64{@constCast(([2]f64{0.0, 0.0})[0..2]), @constCast(([2]f64{1.0, 1.0})[0..2]), @constCast(([2]f64{1.0, 0.0})[0..2]), @constCast(([2]f64{0.0, 1.0})[0..2])})[0..4]);
const Y_var: []f64 = @constCast(([4]f64{0.0, 1.0, 0.0, 0.0})[0..4]);
const test_data_var: [][]f64 = @constCast(([3][]f64{@constCast(([2]f64{0.0, 0.0})[0..2]), @constCast(([2]f64{0.0, 1.0})[0..2]), @constCast(([2]f64{1.0, 1.0})[0..2])})[0..3]);
var w1_var_1: [][]f64 = &[_][]f64{};
_ = ([2]f64{0.0, 0.0})[0..2];
var w2_var_1: []f64 = &[_]f64{};
var b2_var_1: f64 = 0.0;
var preds_var: []i64 = &[_]i64{};

fn exp_taylor(x: f64) f64 {
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var i: f64 = 1.0;
    i = i;
    while (i < 20.0) {
        term = term * x / i;
        sum = sum + term;
        i = i + 1.0;
    }
    return sum;
}

fn sigmoid(x_1: f64) f64 {
    return 1.0 / (1.0 + exp_taylor(@as(f64, @floatFromInt(0)) - x_1));
}

fn train(epochs: i64, lr: f64) void {
    var e: i64 = 0;
    e = e;
    while (e < epochs) {
        var i_1: i64 = 0;
        i_1 = i_1;
        while (i_1 < @as(i64, @intCast(X_var.len))) {
            const x0: f64 = X_var[_idx(X_var.len, i_1)][_idx(X_var[_idx(X_var.len, i_1)].len, 0)];
            const x1: f64 = X_var[_idx(X_var.len, i_1)][_idx(X_var[_idx(X_var.len, i_1)].len, 1)];
            const target: f64 = Y_var[_idx(Y_var.len, i_1)];
            const z1: f64 = w1_var_1[_idx(w1_var_1.len, 0)][_idx(w1_var_1[_idx(w1_var_1.len, 0)].len, 0)] * x0 + w1_var_1[_idx(w1_var_1.len, 1)][_idx(w1_var_1[_idx(w1_var_1.len, 1)].len, 0)] * x1 + b1_var_1[_idx(b1_var_1.len, 0)];
            const z2: f64 = w1_var_1[_idx(w1_var_1.len, 0)][_idx(w1_var_1[_idx(w1_var_1.len, 0)].len, 1)] * x0 + w1_var_1[_idx(w1_var_1.len, 1)][_idx(w1_var_1[_idx(w1_var_1.len, 1)].len, 1)] * x1 + b1_var_1[_idx(b1_var_1.len, 1)];
            const h1: f64 = sigmoid(z1);
            const h2: f64 = sigmoid(z2);
            const z3: f64 = w2_var_1[_idx(w2_var_1.len, 0)] * h1 + w2_var_1[_idx(w2_var_1.len, 1)] * h2 + b2_var_1;
            const out: f64 = sigmoid(z3);
            const error_: f64 = out - target;
            const d1: f64 = h1 * (1.0 - h1) * w2_var_1[_idx(w2_var_1.len, 0)] * error_;
            const d2: f64 = h2 * (1.0 - h2) * w2_var_1[_idx(w2_var_1.len, 1)] * error_;
            w2_var_1[_idx(w2_var_1.len, 0)] = w2_var_1[_idx(w2_var_1.len, 0)] - lr * error_ * h1;
            w2_var_1[_idx(w2_var_1.len, 1)] = w2_var_1[_idx(w2_var_1.len, 1)] - lr * error_ * h2;
            b2_var_1 = b2_var_1 - lr * error_;
            w1_var_1[_idx(w1_var_1.len, 0)][_idx(w1_var_1[_idx(w1_var_1.len, 0)].len, 0)] = w1_var_1[_idx(w1_var_1.len, 0)][_idx(w1_var_1[_idx(w1_var_1.len, 0)].len, 0)] - lr * d1 * x0;
            w1_var_1[_idx(w1_var_1.len, 1)][_idx(w1_var_1[_idx(w1_var_1.len, 1)].len, 0)] = w1_var_1[_idx(w1_var_1.len, 1)][_idx(w1_var_1[_idx(w1_var_1.len, 1)].len, 0)] - lr * d1 * x1;
            b1_var_1[_idx(b1_var_1.len, 0)] = b1_var_1[_idx(b1_var_1.len, 0)] - lr * d1;
            w1_var_1[_idx(w1_var_1.len, 0)][_idx(w1_var_1[_idx(w1_var_1.len, 0)].len, 1)] = w1_var_1[_idx(w1_var_1.len, 0)][_idx(w1_var_1[_idx(w1_var_1.len, 0)].len, 1)] - lr * d2 * x0;
            w1_var_1[_idx(w1_var_1.len, 1)][_idx(w1_var_1[_idx(w1_var_1.len, 1)].len, 1)] = w1_var_1[_idx(w1_var_1.len, 1)][_idx(w1_var_1[_idx(w1_var_1.len, 1)].len, 1)] - lr * d2 * x1;
            b1_var_1[_idx(b1_var_1.len, 1)] = b1_var_1[_idx(b1_var_1.len, 1)] - lr * d2;
            i_1 = i_1 +% 1;
        }
        e = e +% 1;
    }
}

fn predict(samples: [][]f64) []i64 {
    var preds_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    preds_var_1 = preds_var_1;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(samples.len))) {
        const x0_1: f64 = samples[_idx(samples.len, i_2)][_idx(samples[_idx(samples.len, i_2)].len, 0)];
        const x1_1: f64 = samples[_idx(samples.len, i_2)][_idx(samples[_idx(samples.len, i_2)].len, 1)];
        const z1_1: f64 = w1_var_1[_idx(w1_var_1.len, 0)][_idx(w1_var_1[_idx(w1_var_1.len, 0)].len, 0)] * x0_1 + w1_var_1[_idx(w1_var_1.len, 1)][_idx(w1_var_1[_idx(w1_var_1.len, 1)].len, 0)] * x1_1 + b1_var_1[_idx(b1_var_1.len, 0)];
        const z2_1: f64 = w1_var_1[_idx(w1_var_1.len, 0)][_idx(w1_var_1[_idx(w1_var_1.len, 0)].len, 1)] * x0_1 + w1_var_1[_idx(w1_var_1.len, 1)][_idx(w1_var_1[_idx(w1_var_1.len, 1)].len, 1)] * x1_1 + b1_var_1[_idx(b1_var_1.len, 1)];
        const h1_1: f64 = sigmoid(z1_1);
        const h2_1: f64 = sigmoid(z2_1);
        const z3_1: f64 = w2_var_1[_idx(w2_var_1.len, 0)] * h1_1 + w2_var_1[_idx(w2_var_1.len, 1)] * h2_1 + b2_var_1;
        const out_1: f64 = sigmoid(z3_1);
        var label: i64 = 0;
        label = label;
        if (out_1 >= 0.5) {
            label = 1;
        }
        preds_var_1 = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, preds_var_1)) catch |err| handleError(err); _tmp.append(label) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    return preds_var_1;
}

fn wrapper(y: []i64) []i64 {
    return y;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        w1_var_1 = std.heap.page_allocator.dupe([]f64, blk1: { var _tmp_1 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_1.append(@constCast(blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.append(0.5) catch unreachable; _tmp_2.append(@as(f64, @floatFromInt(0)) - 0.5) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_1.append(@constCast(([2]f64{0.5, 0.5})[0..2])) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); }) catch unreachable;
        w2_var_1 = std.heap.page_allocator.dupe(f64, blk3: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.append(0.5) catch unreachable; _tmp_3.append(@as(f64, @floatFromInt(0)) - 0.5) catch unreachable; break :blk3 (_tmp_3.toOwnedSlice() catch unreachable); }) catch unreachable;
        preds_var = wrapper(predict(test_data_var));
        train(4000, 0.5);
        std.debug.print("{s}\n", .{_str(preds_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
