// Generated by Mochi Zig transpiler on 2025-08-17 08:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const LSTMWeights = struct {
    w_i: f64,
    u_i: f64,
    b_i: f64,
    w_f: f64,
    u_f: f64,
    b_f: f64,
    w_o: f64,
    u_o: f64,
    b_o: f64,
    w_c: f64,
    u_c: f64,
    b_c: f64,
    w_y: f64,
    b_y: f64,
};

const LSTMState = struct {
    i: []f64,
    f: []f64,
    o: []f64,
    g: []f64,
    c: []f64,
    h: []f64,
};

const Samples = struct {
    x: [][]f64,
    y: []f64,
};

const data_var: []f64 = @constCast(([8]f64{0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8})[0..8]);
const look_back_var: i64 = 3;
const epochs_var: i64 = 200;
const lr_var: f64 = 0.1;
var w_var: LSTMWeights = undefined;
const test_seq_var: []f64 = @constCast(([3]f64{0.6, 0.7, 0.8})[0..3]);
var pred_var: f64 = 0;

fn exp_approx(x: f64) f64 {
    var sum: f64 = 1.0;
    sum = sum;
    var term: f64 = 1.0;
    term = term;
    var n: i64 = 1;
    n = n;
    while (n < 20) {
        term = term * x / @as(f64, @floatFromInt(n));
        sum = sum + term;
        n = n +% 1;
    }
    return sum;
}

fn sigmoid(x_1: f64) f64 {
    return 1.0 / (1.0 + exp_approx(@as(f64, @floatFromInt(0)) - x_1));
}

fn tanh_approx(x_2: f64) f64 {
    const e: f64 = exp_approx(2.0 * x_2);
    return (e - 1.0) / (e + 1.0);
}

fn forward(seq: []f64, w_param: LSTMWeights) LSTMState {
    var i_arr: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    i_arr = i_arr;
    var f_arr: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    f_arr = f_arr;
    var o_arr: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    o_arr = o_arr;
    var g_arr: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    g_arr = g_arr;
    var c_arr_: []f64 = @constCast(([1]f64{0.0})[0..1]);
    c_arr_ = c_arr_;
    var h_arr: []f64 = @constCast(([1]f64{0.0})[0..1]);
    h_arr = h_arr;
    var t: i64 = 0;
    t = t;
    while (t < @as(i64, @intCast(seq.len))) {
        const x_3: f64 = seq[_idx(seq.len, t)];
        const h_prev: f64 = h_arr[_idx(h_arr.len, t)];
        const c_prev_: f64 = c_arr_[_idx(c_arr_.len, t)];
        const i_t: f64 = sigmoid(w_param.w_i * x_3 + w_param.u_i * h_prev + w_param.b_i);
        const f_t: f64 = sigmoid(w_param.w_f * x_3 + w_param.u_f * h_prev + w_param.b_f);
        const o_t: f64 = sigmoid(w_param.w_o * x_3 + w_param.u_o * h_prev + w_param.b_o);
        const g_t: f64 = tanh_approx(w_param.w_c * x_3 + w_param.u_c * h_prev + w_param.b_c);
        const c_t_: f64 = f_t * c_prev_ + i_t * g_t;
        const h_t: f64 = o_t * tanh_approx(c_t_);
        i_arr = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, i_arr)) catch |err| handleError(err); _tmp.append(i_t) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        f_arr = blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, f_arr)) catch |err| handleError(err); _tmp_1.append(f_t) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        o_arr = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, o_arr)) catch |err| handleError(err); _tmp_2.append(o_t) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        g_arr = blk3: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const f64, g_arr)) catch |err| handleError(err); _tmp_3.append(g_t) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        c_arr_ = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, c_arr_)) catch |err| handleError(err); _tmp_4.append(c_t_) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        h_arr = blk5: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const f64, h_arr)) catch |err| handleError(err); _tmp_5.append(h_t) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        t = t +% 1;
    }
    return .{ .i = i_arr, .f = f_arr, .o = o_arr, .g = g_arr, .c = c_arr_, .h = h_arr };
}

fn backward(seq_1: []f64, target: f64, w_param_1: *LSTMWeights, s: LSTMState, lr_param: f64) LSTMWeights {
    var dw_i: f64 = 0.0;
    dw_i = dw_i;
    var du_i: f64 = 0.0;
    du_i = du_i;
    var db_i: f64 = 0.0;
    db_i = db_i;
    var dw_f: f64 = 0.0;
    dw_f = dw_f;
    var du_f: f64 = 0.0;
    du_f = du_f;
    var db_f: f64 = 0.0;
    db_f = db_f;
    var dw_o: f64 = 0.0;
    dw_o = dw_o;
    var du_o: f64 = 0.0;
    du_o = du_o;
    var db_o: f64 = 0.0;
    db_o = db_o;
    var dw_c: f64 = 0.0;
    dw_c = dw_c;
    var du_c: f64 = 0.0;
    du_c = du_c;
    var db_c: f64 = 0.0;
    db_c = db_c;
    var dw_y: f64 = 0.0;
    dw_y = dw_y;
    var db_y: f64 = 0.0;
    db_y = db_y;
    const T: i64 = @as(i64, @intCast(seq_1.len));
    const h_last: f64 = s.h[_idx(s.h.len, T)];
    const y: f64 = w_param_1.w_y * h_last + w_param_1.b_y;
    const dy: f64 = y - target;
    dw_y = dy * h_last;
    db_y = dy;
    var dh_next: f64 = dy * w_param_1.w_y;
    dh_next = dh_next;
    var dc_next: f64 = 0.0;
    dc_next = dc_next;
    var t_1: i64 = T -% 1;
    t_1 = t_1;
    while (t_1 >= 0) {
        const i_t_1: f64 = s.i[_idx(s.i.len, t_1)];
        const f_t_1: f64 = s.f[_idx(s.f.len, t_1)];
        const o_t_1: f64 = s.o[_idx(s.o.len, t_1)];
        const g_t_1: f64 = s.g[_idx(s.g.len, t_1)];
        const c_t__1: f64 = s.c[_idx(s.c.len, t_1 +% 1)];
        const c_prev__1: f64 = s.c[_idx(s.c.len, t_1)];
        const h_prev_1: f64 = s.h[_idx(s.h.len, t_1)];
        const tanh_c: f64 = tanh_approx(c_t__1);
        const do_t: f64 = dh_next * tanh_c;
        const da_o: f64 = do_t * o_t_1 * (1.0 - o_t_1);
        const dc: f64 = dh_next * o_t_1 * (1.0 - tanh_c * tanh_c) + dc_next;
        const di_t: f64 = dc * g_t_1;
        const da_i: f64 = di_t * i_t_1 * (1.0 - i_t_1);
        const dg_t: f64 = dc * i_t_1;
        const da_g: f64 = dg_t * (1.0 - g_t_1 * g_t_1);
        const df_t: f64 = dc * c_prev__1;
        const da_f: f64 = df_t * f_t_1 * (1.0 - f_t_1);
        dw_i = dw_i + da_i * seq_1[_idx(seq_1.len, t_1)];
        du_i = du_i + da_i * h_prev_1;
        db_i = db_i + da_i;
        dw_f = dw_f + da_f * seq_1[_idx(seq_1.len, t_1)];
        du_f = du_f + da_f * h_prev_1;
        db_f = db_f + da_f;
        dw_o = dw_o + da_o * seq_1[_idx(seq_1.len, t_1)];
        du_o = du_o + da_o * h_prev_1;
        db_o = db_o + da_o;
        dw_c = dw_c + da_g * seq_1[_idx(seq_1.len, t_1)];
        du_c = du_c + da_g * h_prev_1;
        db_c = db_c + da_g;
        dh_next = da_i * w_param_1.u_i + da_f * w_param_1.u_f + da_o * w_param_1.u_o + da_g * w_param_1.u_c;
        dc_next = dc * f_t_1;
        t_1 = t_1 -% 1;
    }
    w_param_1.w_y = w_param_1.w_y - lr_param * dw_y;
    w_param_1.b_y = w_param_1.b_y - lr_param * db_y;
    w_param_1.w_i = w_param_1.w_i - lr_param * dw_i;
    w_param_1.u_i = w_param_1.u_i - lr_param * du_i;
    w_param_1.b_i = w_param_1.b_i - lr_param * db_i;
    w_param_1.w_f = w_param_1.w_f - lr_param * dw_f;
    w_param_1.u_f = w_param_1.u_f - lr_param * du_f;
    w_param_1.b_f = w_param_1.b_f - lr_param * db_f;
    w_param_1.w_o = w_param_1.w_o - lr_param * dw_o;
    w_param_1.u_o = w_param_1.u_o - lr_param * du_o;
    w_param_1.b_o = w_param_1.b_o - lr_param * db_o;
    w_param_1.w_c = w_param_1.w_c - lr_param * dw_c;
    w_param_1.u_c = w_param_1.u_c - lr_param * du_c;
    w_param_1.b_c = w_param_1.b_c - lr_param * db_c;
    return w_param_1.*;
}

fn make_samples(data_param: []f64, look_back_param: i64) Samples {
    var X: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    X = X;
    var Y: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    Y = Y;
    var i: i64 = 0;
    i = i;
    while (i +% look_back_param < @as(i64, @intCast(data_param.len))) {
        const seq_2: []f64 = data_param[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% look_back_param)), @as(usize, @intCast(data_param.len)))];
        X = blk6: { var _tmp_6 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const []f64, X)) catch |err| handleError(err); _tmp_6.append(seq_2) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        Y = blk7: { var _tmp_7 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const f64, Y)) catch |err| handleError(err); _tmp_7.append(data_param[_idx(data_param.len, i +% look_back_param)]) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return .{ .x = X, .y = Y };
}

fn init_weights() LSTMWeights {
    return .{ .w_i = 0.1, .u_i = 0.2, .b_i = 0.0, .w_f = 0.1, .u_f = 0.2, .b_f = 0.0, .w_o = 0.1, .u_o = 0.2, .b_o = 0.0, .w_c = 0.1, .u_c = 0.2, .b_c = 0.0, .w_y = 0.1, .b_y = 0.0 };
}

fn train(data_param_1: []f64, look_back_param_1: i64, epochs_param: i64, lr_param_1: f64) LSTMWeights {
    const samples: Samples = make_samples(data_param_1, look_back_param_1);
    var w_var_1: LSTMWeights = init_weights();
    w_var_1 = w_var_1;
    var ep: i64 = 0;
    ep = ep;
    while (ep < epochs_param) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(samples.x.len))) {
            const seq_3: []f64 = samples.x[_idx(samples.x.len, j)];
            const target_1: f64 = samples.y[_idx(samples.y.len, j)];
            const state: LSTMState = forward(seq_3, w_var_1);
            w_var_1 = backward(seq_3, target_1, &w_var_1, state, lr_param_1);
            j = j +% 1;
        }
        ep = ep +% 1;
    }
    return w_var_1;
}

fn predict(seq_4: []f64, w_param_2: LSTMWeights) f64 {
    const state_1: LSTMState = forward(seq_4, w_param_2);
    const h_last_1: f64 = state_1.h[_idx(state_1.h.len, @as(i64, @intCast(state_1.h.len)) -% 1)];
    return w_param_2.w_y * h_last_1 + w_param_2.b_y;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        w_var = train(data_var, look_back_var, epochs_var, lr_var);
        pred_var = predict(test_seq_var, w_var);
        std.debug.print("{s}\n", .{_concat_string("Predicted value: ", _str(pred_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
