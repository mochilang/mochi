// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Stump = struct {
    feature: i64,
    threshold: f64,
    left: f64,
    right: f64,
};

fn mean(xs: []f64) f64 {
    var sum: f64 = 0.0;
    sum = sum;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        sum = sum + xs[_idx(xs.len, i)];
        i = i +% 1;
    }
    return sum / (@as(f64, @floatFromInt(@as(i64, @intCast(xs.len)))) * 1.0);
}

fn stump_predict(s: Stump, x: []f64) f64 {
    if (x[_idx(x.len, s.feature)] < s.threshold) {
        return s.left;
    }
    return s.right;
}

fn train_stump(features: [][]f64, residuals: []f64) Stump {
    var best_feature: i64 = 0;
    best_feature = best_feature;
    var best_threshold: f64 = 0.0;
    best_threshold = best_threshold;
    var best_error: f64 = 1000000000.0;
    best_error = best_error;
    var best_left: f64 = 0.0;
    best_left = best_left;
    var best_right: f64 = 0.0;
    best_right = best_right;
    const num_features: i64 = @as(i64, @intCast(features[_idx(features.len, 0)].len));
    var f: i64 = 0;
    f = f;
    while (f < num_features) {
        var i_1: i64 = 0;
        i_1 = i_1;
        while (i_1 < @as(i64, @intCast(features.len))) {
            const threshold: f64 = features[_idx(features.len, i_1)][_idx(features[_idx(features.len, i_1)].len, f)];
            var left: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
            left = left;
            var right: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
            right = right;
            var j: i64 = 0;
            j = j;
            while (j < @as(i64, @intCast(features.len))) {
                if (features[_idx(features.len, j)][_idx(features[_idx(features.len, j)].len, f)] < threshold) {
                    left = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, left)) catch |err| handleError(err); _tmp.appendSlice(@as([]const f64, blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.append(residuals[_idx(residuals.len, j)]) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                } else {
                    right = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, right)) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const f64, blk3: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.append(residuals[_idx(residuals.len, j)]) catch unreachable; break :blk3 (_tmp_3.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
                }
                j = j +% 1;
            }
            if (@as(i64, @intCast(left.len)) != 0 and @as(i64, @intCast(right.len)) != 0) {
                const left_mean: f64 = mean(left);
                const right_mean: f64 = mean(right);
                var err: f64 = 0.0;
                err = err;
                j = 0;
                while (j < @as(i64, @intCast(features.len))) {
                    const pred: f64 = if (features[_idx(features.len, j)][_idx(features[_idx(features.len, j)].len, f)] < threshold) left_mean else right_mean;
                    const diff: f64 = residuals[_idx(residuals.len, j)] - pred;
                    err = err + diff * diff;
                    j = j +% 1;
                }
                if (err < best_error) {
                    best_error = err;
                    best_feature = f;
                    best_threshold = threshold;
                    best_left = left_mean;
                    best_right = right_mean;
                }
            }
            i_1 = i_1 +% 1;
        }
        f = f +% 1;
    }
    return .{ .feature = best_feature, .threshold = best_threshold, .left = best_left, .right = best_right };
}

fn boost(features_1: [][]f64, targets: []i64, rounds: i64) []Stump {
    var model: []Stump = std.heap.page_allocator.alloc(Stump, 0) catch unreachable;
    model = model;
    var preds: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    preds = preds;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(targets.len))) {
        preds = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, preds)) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const f64, ([1]f64{0.0})[0..1])) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    var r: i64 = 0;
    r = r;
    while (r < rounds) {
        var residuals_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        residuals_1 = residuals_1;
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < @as(i64, @intCast(targets.len))) {
            residuals_1 = blk5: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const f64, residuals_1)) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const f64, blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.append(@as(f64, @floatFromInt(targets[_idx(targets.len, j_1)])) - preds[_idx(preds.len, j_1)]) catch unreachable; break :blk6 (_tmp_6.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 +% 1;
        }
        const stump: Stump = train_stump(features_1, residuals_1);
        model = blk7: { var _tmp_7 = std.ArrayList(Stump).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const Stump, model)) catch |err| handleError(err); _tmp_7.appendSlice(@as([]const Stump, blk8: { var _tmp_8 = std.ArrayList(Stump).init(std.heap.page_allocator); _tmp_8.append(stump) catch unreachable; break :blk8 (_tmp_8.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        j_1 = 0;
        while (j_1 < @as(i64, @intCast(preds.len))) {
            preds[_idx(preds.len, j_1)] = preds[_idx(preds.len, j_1)] + stump_predict(stump, features_1[_idx(features_1.len, j_1)]);
            j_1 = j_1 +% 1;
        }
        r = r +% 1;
    }
    return model;
}

fn predict(model_1: []Stump, x_1: []f64) f64 {
    var score: f64 = 0.0;
    score = score;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(model_1.len))) {
        const s_1: Stump = model_1[_idx(model_1.len, i_3)];
        if (x_1[_idx(x_1.len, s_1.feature)] < s_1.threshold) {
            score = score + s_1.left;
        } else {
            score = score + s_1.right;
        }
        i_3 = i_3 +% 1;
    }
    return score;
}

fn mochi_main() void {
    const features_2: [][]f64 = @constCast(([4][]f64{@constCast(([2]f64{5.1, 3.5})[0..2]), @constCast(([2]f64{4.9, 3.0})[0..2]), @constCast(([2]f64{6.2, 3.4})[0..2]), @constCast(([2]f64{5.9, 3.0})[0..2])})[0..4]);
    const targets_1: []i64 = @constCast(([4]i64{0, 0, 1, 1})[0..4]);
    const model_2: []Stump = boost(features_2, targets_1, 3);
    var out: []const u8 = "";
    out = out;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(features_2.len))) {
        const s_2: f64 = predict(model_2, features_2[_idx(features_2.len, i_4)]);
        const label: i64 = if (s_2 >= 0.5) 1 else 0;
        if (i_4 == 0) {
            out = _str(label);
        } else {
            out = _concat_string(_concat_string(out, " "), _str(label));
        }
        i_4 = i_4 +% 1;
    }
    std.debug.print("{s}\n", .{out});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
