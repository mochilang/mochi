// Generated by Mochi Zig transpiler on 2025-08-17 08:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const DataPoint = struct {
    x: []f64,
    y: f64,
};

var train_data_var: []DataPoint = &[_]DataPoint{};
var test_data_var: []DataPoint = &[_]DataPoint{};
var parameter_vector_var_1: []f64 = @constCast(([4]f64{2.0, 4.0, 1.0, 5.0})[0..4]);

fn absf(x: f64) f64 {
    if (x < 0.0) {
        return @as(f64, @floatFromInt(0)) - x;
    }
    return x;
}

fn hypothesis_value(input: []f64, params: []f64) f64 {
    var value: f64 = params[_idx(params.len, 0)];
    value = value;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(input.len))) {
        value = value + input[_idx(input.len, i)] * params[_idx(params.len, i +% 1)];
        i = i +% 1;
    }
    return value;
}

fn calc_error(dp: DataPoint, params_1: []f64) f64 {
    return hypothesis_value(dp.x, params_1) - dp.y;
}

fn summation_of_cost_derivative(index: i64, params_2: []f64, data: []DataPoint) f64 {
    var sum: f64 = 0.0;
    sum = sum;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(data.len))) {
        const dp_1: DataPoint = data[_idx(data.len, i_1)];
        const e: f64 = calc_error(dp_1, params_2);
        if (index == 0 -% 1) {
            sum = sum + e;
        } else {
            sum = sum + e * dp_1.x[_idx(dp_1.x.len, index)];
        }
        i_1 = i_1 +% 1;
    }
    return sum;
}

fn get_cost_derivative(index_1: i64, params_3: []f64, data_1: []DataPoint) f64 {
    return summation_of_cost_derivative(index_1, params_3, data_1) / @as(f64, @floatFromInt(@as(i64, @intCast(data_1.len))));
}

fn allclose(a: []f64, b: []f64, atol: f64, rtol: f64) bool {
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(a.len))) {
        const diff: f64 = absf(a[_idx(a.len, i_2)] - b[_idx(b.len, i_2)]);
        const limit: f64 = atol + rtol * absf(b[_idx(b.len, i_2)]);
        if (diff > limit) {
            return false;
        }
        i_2 = i_2 +% 1;
    }
    return true;
}

fn run_gradient_descent(train_data_param: []DataPoint, initial_params: []f64) []f64 {
    const learning_rate: f64 = 0.009;
    const absolute_error_limit: f64 = 0.000002;
    const relative_error_limit: f64 = 0.0;
    var j: i64 = 0;
    j = j;
    var params_4: []f64 = blk0: { const tmp = std.heap.page_allocator.alloc(f64, initial_params.len) catch unreachable; @memcpy(tmp, initial_params); break :blk0 tmp; };
    params_4 = params_4;
    while (true) {
        j = j +% 1;
        var temp: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        temp = temp;
        var i_3: i64 = 0;
        i_3 = i_3;
        while (i_3 < @as(i64, @intCast(params_4.len))) {
            const deriv: f64 = get_cost_derivative(i_3 -% 1, params_4, train_data_param);
            temp = blk1: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, temp)) catch |err| handleError(err); _tmp.append(params_4[_idx(params_4.len, i_3)] - learning_rate * deriv) catch |err| handleError(err); break :blk1 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            i_3 = i_3 +% 1;
        }
        if (allclose(params_4, temp, absolute_error_limit, relative_error_limit)) {
            std.debug.print("{s}\n", .{_concat_string("Number of iterations:", _str(j))});
            break;
        }
        params_4 = temp;
    }
    return params_4;
}

fn test_gradient_descent(test_data_param: []DataPoint, params_5: []f64) void {
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(test_data_param.len))) {
        const dp_2: DataPoint = test_data_param[_idx(test_data_param.len, i_4)];
        std.debug.print("{s}\n", .{_concat_string("Actual output value:", _str(dp_2.y))});
        std.debug.print("{s}\n", .{_concat_string("Hypothesis output:", _str(hypothesis_value(dp_2.x, params_5)))});
        i_4 = i_4 +% 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        train_data_var = blk2: { var _tmp_1 = std.ArrayList(DataPoint).init(std.heap.page_allocator); _tmp_1.append(.{ .x = @constCast(([3]f64{5.0, 2.0, 3.0})[0..3]), .y = 15.0 }) catch unreachable; _tmp_1.append(.{ .x = @constCast(([3]f64{6.0, 5.0, 9.0})[0..3]), .y = 25.0 }) catch unreachable; _tmp_1.append(.{ .x = @constCast(([3]f64{11.0, 12.0, 13.0})[0..3]), .y = 41.0 }) catch unreachable; _tmp_1.append(.{ .x = @constCast(([3]f64{1.0, 1.0, 1.0})[0..3]), .y = 8.0 }) catch unreachable; _tmp_1.append(.{ .x = @constCast(([3]f64{11.0, 12.0, 13.0})[0..3]), .y = 41.0 }) catch unreachable; break :blk2 (_tmp_1.toOwnedSlice() catch unreachable); };
        test_data_var = blk3: { var _tmp_2 = std.ArrayList(DataPoint).init(std.heap.page_allocator); _tmp_2.append(.{ .x = @constCast(([3]f64{515.0, 22.0, 13.0})[0..3]), .y = 555.0 }) catch unreachable; _tmp_2.append(.{ .x = @constCast(([3]f64{61.0, 35.0, 49.0})[0..3]), .y = 150.0 }) catch unreachable; break :blk3 (_tmp_2.toOwnedSlice() catch unreachable); };
        parameter_vector_var_1 = run_gradient_descent(train_data_var[0..], parameter_vector_var_1);
        std.debug.print("{s}\n", .{"\nTesting gradient descent for a linear hypothesis function.\n"});
        test_gradient_descent(test_data_var[0..], parameter_vector_var_1);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
