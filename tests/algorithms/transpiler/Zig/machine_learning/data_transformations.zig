// Generated by Mochi Zig transpiler on 2025-08-16 13:01 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn floor(x: f64) f64 {
    var i: i64 = @as(i64, @intFromFloat(x));
    i = i;
    if (@as(f64, @floatFromInt(i)) > x) {
        i = i -% 1;
    }
    return @as(f64, @floatFromInt(i));
}

fn pow10(n: i64) f64 {
    var result: f64 = 1.0;
    result = result;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < n) {
        result = result * 10.0;
        i_1 = i_1 +% 1;
    }
    return result;
}

fn round(x_1: f64, n_1: i64) f64 {
    const m: f64 = pow10(n_1);
    const y: f64 = @as(f64, std.math.floor(x_1 * m + 0.5));
    return y / m;
}

fn sqrtApprox(x_2: f64) f64 {
    var guess: f64 = x_2;
    guess = guess;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < 20) {
        guess = (guess + x_2 / guess) / 2.0;
        i_2 = i_2 +% 1;
    }
    return guess;
}

fn mean(data: []f64) f64 {
    var total: f64 = 0.0;
    total = total;
    var i_3: i64 = 0;
    i_3 = i_3;
    const n_2: i64 = @as(i64, @intCast(data.len));
    while (i_3 < n_2) {
        total = total + data[_idx(data.len, i_3)];
        i_3 = i_3 +% 1;
    }
    return total / @as(f64, @floatFromInt(n_2));
}

fn stdev(data_1: []f64) f64 {
    const n_3: i64 = @as(i64, @intCast(data_1.len));
    if (n_3 <= 1) {
        @panic("data length must be > 1");
    }
    const m_1: f64 = mean(data_1);
    var sum_sq: f64 = 0.0;
    sum_sq = sum_sq;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < n_3) {
        const diff: f64 = data_1[_idx(data_1.len, i_4)] - m_1;
        sum_sq = sum_sq + diff * diff;
        i_4 = i_4 +% 1;
    }
    return sqrtApprox(sum_sq / @as(f64, @floatFromInt(n_3 -% 1)));
}

fn normalization(data_2: []f64, ndigits: i64) []f64 {
    const x_min: f64 = @as(f64, blk0: { var arr = data_2; var m = arr[0]; for (arr[1..]) |v| { if (v < m) m = v; } break :blk0 m; });
    const x_max: f64 = @as(f64, blk1: { var arr = data_2; var m = arr[0]; for (arr[1..]) |v| { if (v > m) m = v; } break :blk1 m; });
    const denom: f64 = x_max - x_min;
    var result_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    result_1 = result_1;
    var i_5: i64 = 0;
    i_5 = i_5;
    const n_4: i64 = @as(i64, @intCast(data_2.len));
    while (i_5 < n_4) {
        const norm: f64 = (data_2[_idx(data_2.len, i_5)] - x_min) / denom;
        result_1 = blk2: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, result_1)) catch |err| handleError(err); _tmp.append(round(norm, ndigits)) catch |err| handleError(err); break :blk2 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_5 = i_5 +% 1;
    }
    return result_1;
}

fn standardization(data_3: []f64, ndigits_1: i64) []f64 {
    const mu: f64 = mean(data_3);
    const sigma: f64 = stdev(data_3);
    var result_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    result_2 = result_2;
    var i_6: i64 = 0;
    i_6 = i_6;
    const n_5: i64 = @as(i64, @intCast(data_3.len));
    while (i_6 < n_5) {
        const z: f64 = (data_3[_idx(data_3.len, i_6)] - mu) / sigma;
        result_2 = blk3: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, result_2)) catch |err| handleError(err); _tmp_1.append(round(z, ndigits_1)) catch |err| handleError(err); break :blk3 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_6 = i_6 +% 1;
    }
    return result_2;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(normalization(@constCast(([6]f64{2.0, 7.0, 10.0, 20.0, 30.0, 50.0})[0..6]), 3))});
        std.debug.print("{s}\n", .{_str(normalization(@constCast(([5]f64{5.0, 10.0, 15.0, 20.0, 25.0})[0..5]), 3))});
        std.debug.print("{s}\n", .{_str(standardization(@constCast(([6]f64{2.0, 7.0, 10.0, 20.0, 30.0, 50.0})[0..6]), 3))});
        std.debug.print("{s}\n", .{_str(standardization(@constCast(([5]f64{5.0, 10.0, 15.0, 20.0, 25.0})[0..5]), 3))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
