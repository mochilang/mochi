// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Tree = struct {
    threshold: f64,
    left_value: f64,
    right_value: f64,
};

const Dataset = struct {
    data: [][]f64,
    target: []f64,
};

fn data_handling(dataset: Dataset) Dataset {
    return dataset;
}

fn xgboost(features: [][]f64, target: []f64, test_features: [][]f64) []f64 {
    const learning_rate: f64 = 0.5;
    const n_estimators: i64 = 3;
    var trees: []Tree = std.heap.page_allocator.alloc(Tree, 0) catch unreachable;
    trees = trees;
    var predictions: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    predictions = predictions;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(target.len))) {
        predictions = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, predictions)) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    var est: i64 = 0;
    est = est;
    while (est < n_estimators) {
        var residuals: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        residuals = residuals;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(target.len))) {
            residuals = blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, residuals)) catch |err| handleError(err); _tmp_1.append(target[_idx(target.len, j)] - predictions[_idx(predictions.len, j)]) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        var sum_feat: f64 = 0.0;
        sum_feat = sum_feat;
        j = 0;
        while (j < @as(i64, @intCast(features.len))) {
            sum_feat = sum_feat + features[_idx(features.len, j)][_idx(features[_idx(features.len, j)].len, 0)];
            j = j +% 1;
        }
        const threshold: f64 = sum_feat / @as(f64, @floatFromInt(@as(i64, @intCast(features.len))));
        var left_sum: f64 = 0.0;
        left_sum = left_sum;
        var left_count: i64 = 0;
        left_count = left_count;
        var right_sum: f64 = 0.0;
        right_sum = right_sum;
        var right_count: i64 = 0;
        right_count = right_count;
        j = 0;
        while (j < @as(i64, @intCast(features.len))) {
            if (features[_idx(features.len, j)][_idx(features[_idx(features.len, j)].len, 0)] <= threshold) {
                left_sum = left_sum + residuals[_idx(residuals.len, j)];
                left_count = left_count +% 1;
            } else {
                right_sum = right_sum + residuals[_idx(residuals.len, j)];
                right_count = right_count +% 1;
            }
            j = j +% 1;
        }
        var left_value: f64 = 0.0;
        left_value = left_value;
        if (left_count > 0) {
            left_value = left_sum / @as(f64, @floatFromInt(left_count));
        }
        var right_value: f64 = 0.0;
        right_value = right_value;
        if (right_count > 0) {
            right_value = right_sum / @as(f64, @floatFromInt(right_count));
        }
        j = 0;
        while (j < @as(i64, @intCast(features.len))) {
            if (features[_idx(features.len, j)][_idx(features[_idx(features.len, j)].len, 0)] <= threshold) {
                predictions[_idx(predictions.len, j)] = predictions[_idx(predictions.len, j)] + learning_rate * left_value;
            } else {
                predictions[_idx(predictions.len, j)] = predictions[_idx(predictions.len, j)] + learning_rate * right_value;
            }
            j = j +% 1;
        }
        trees = blk2: { var _tmp_2 = std.ArrayList(Tree).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const Tree, trees)) catch |err| handleError(err); _tmp_2.append(.{ .threshold = threshold, .left_value = left_value, .right_value = right_value }) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        est = est +% 1;
    }
    var preds: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    preds = preds;
    var t: i64 = 0;
    t = t;
    while (t < @as(i64, @intCast(test_features.len))) {
        var pred: f64 = 0.0;
        pred = pred;
        var k: i64 = 0;
        k = k;
        while (k < @as(i64, @intCast(trees.len))) {
            if (test_features[_idx(test_features.len, t)][_idx(test_features[_idx(test_features.len, t)].len, 0)] <= trees[_idx(trees.len, k)].threshold) {
                pred = pred + learning_rate * trees[_idx(trees.len, k)].left_value;
            } else {
                pred = pred + learning_rate * trees[_idx(trees.len, k)].right_value;
            }
            k = k +% 1;
        }
        preds = blk3: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const f64, preds)) catch |err| handleError(err); _tmp_3.append(pred) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        t = t +% 1;
    }
    return preds;
}

fn mean_absolute_error(y_true: []f64, y_pred: []f64) f64 {
    var sum: f64 = 0.0;
    sum = sum;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(y_true.len))) {
        var diff: f64 = y_true[_idx(y_true.len, i_1)] - y_pred[_idx(y_pred.len, i_1)];
        diff = diff;
        if (diff < 0.0) {
            diff = @as(f64, @floatFromInt(0)) - diff;
        }
        sum = sum + diff;
        i_1 = i_1 +% 1;
    }
    return sum / @as(f64, @floatFromInt(@as(i64, @intCast(y_true.len))));
}

fn mean_squared_error(y_true_1: []f64, y_pred_1: []f64) f64 {
    var sum_1: f64 = 0.0;
    sum_1 = sum_1;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(y_true_1.len))) {
        const diff_1: f64 = y_true_1[_idx(y_true_1.len, i_2)] - y_pred_1[_idx(y_pred_1.len, i_2)];
        sum_1 = sum_1 + diff_1 * diff_1;
        i_2 = i_2 +% 1;
    }
    return sum_1 / @as(f64, @floatFromInt(@as(i64, @intCast(y_true_1.len))));
}

fn mochi_main() void {
    const california: Dataset = .{ .data = @constCast(([4][]f64{@constCast(([1]f64{1.0})[0..1]), @constCast(([1]f64{2.0})[0..1]), @constCast(([1]f64{3.0})[0..1]), @constCast(([1]f64{4.0})[0..1])})[0..4]), .target = @constCast(([4]f64{2.0, 3.0, 4.0, 5.0})[0..4]) };
    const ds: Dataset = data_handling(california);
    const x_test: [][]f64 = @constCast(([2][]f64{@constCast(([1]f64{1.5})[0..1]), @constCast(([1]f64{3.5})[0..1])})[0..2]);
    const y_test: []f64 = @constCast(([2]f64{2.5, 4.5})[0..2]);
    const predictions_1: []f64 = xgboost(ds.data, ds.target, x_test);
    std.debug.print("{s}\n", .{"Predictions:"});
    std.debug.print("{s}\n", .{_str(predictions_1)});
    std.debug.print("{s}\n", .{"Mean Absolute Error:"});
    std.debug.print("{d}\n", .{mean_absolute_error(y_test, predictions_1)});
    std.debug.print("{s}\n", .{"Mean Square Error:"});
    std.debug.print("{d}\n", .{mean_squared_error(y_test, predictions_1)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
