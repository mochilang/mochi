// Generated by Mochi Zig transpiler on 2025-08-17 08:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const x_train_var: [][]f64 = @constCast(([3][]f64{@constCast(([2]f64{16.99, 10.34})[0..2]), @constCast(([2]f64{21.01, 23.68})[0..2]), @constCast(([2]f64{24.59, 25.69})[0..2])})[0..3]);
const y_train_var: []f64 = @constCast(([3]f64{1.01, 1.66, 3.5})[0..3]);
var preds_var: []f64 = &[_]f64{};

fn expApprox(x: f64) f64 {
    if (x < 0.0) {
        return 1.0 / expApprox(@as(f64, @floatFromInt(0)) - x);
    }
    if (x > 1.0) {
        const half: f64 = expApprox(x / 2.0);
        return half * half;
    }
    var sum: f64 = 1.0;
    sum = sum;
    var term: f64 = 1.0;
    term = term;
    var n: i64 = 1;
    n = n;
    while (n < 20) {
        term = term * x / @as(f64, @floatFromInt(n));
        sum = sum + term;
        n = n +% 1;
    }
    return sum;
}

fn transpose(mat: [][]f64) [][]f64 {
    const rows: i64 = @as(i64, @intCast(mat.len));
    const cols: i64 = @as(i64, @intCast(mat[_idx(mat.len, 0)].len));
    var res: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < cols) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < rows) {
            row = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(mat[_idx(mat.len, j)][_idx(mat[_idx(mat.len, j)].len, i)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        res = blk1: { var _tmp_1 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []f64, res)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return res;
}

fn matMul(a: [][]f64, b: [][]f64) [][]f64 {
    const a_rows: i64 = @as(i64, @intCast(a.len));
    const a_cols: i64 = @as(i64, @intCast(a[_idx(a.len, 0)].len));
    const b_cols: i64 = @as(i64, @intCast(b[_idx(b.len, 0)].len));
    var res_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    res_1 = res_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < a_rows) {
        var row_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_1 = row_1;
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < b_cols) {
            var sum_1: f64 = 0.0;
            sum_1 = sum_1;
            var k: i64 = 0;
            k = k;
            while (k < a_cols) {
                sum_1 = sum_1 + a[_idx(a.len, i_1)][_idx(a[_idx(a.len, i_1)].len, k)] * b[_idx(b.len, k)][_idx(b[_idx(b.len, k)].len, j_1)];
                k = k +% 1;
            }
            row_1 = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, row_1)) catch |err| handleError(err); _tmp_2.append(sum_1) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 +% 1;
        }
        res_1 = blk3: { var _tmp_3 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []f64, res_1)) catch |err| handleError(err); _tmp_3.append(row_1) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return res_1;
}

fn matInv(mat_1: [][]f64) [][]f64 {
    const n_1: i64 = @as(i64, @intCast(mat_1.len));
    var aug: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    aug = aug;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < n_1) {
        var row_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_2 = row_2;
        var j_2: i64 = 0;
        j_2 = j_2;
        while (j_2 < n_1) {
            row_2 = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, row_2)) catch |err| handleError(err); _tmp_4.append(mat_1[_idx(mat_1.len, i_2)][_idx(mat_1[_idx(mat_1.len, i_2)].len, j_2)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            j_2 = j_2 +% 1;
        }
        j_2 = 0;
        while (j_2 < n_1) {
            if (i_2 == j_2) {
                row_2 = blk5: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const f64, row_2)) catch |err| handleError(err); _tmp_5.append(1.0) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                row_2 = blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const f64, row_2)) catch |err| handleError(err); _tmp_6.append(0.0) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
            }
            j_2 = j_2 +% 1;
        }
        aug = blk7: { var _tmp_7 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []f64, aug)) catch |err| handleError(err); _tmp_7.append(row_2) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    var col: i64 = 0;
    col = col;
    while (col < n_1) {
        const pivot: f64 = aug[_idx(aug.len, col)][_idx(aug[_idx(aug.len, col)].len, col)];
        if (pivot == 0.0) {
            @panic("Matrix is singular");
        }
        var j_3: i64 = 0;
        j_3 = j_3;
        while (j_3 < 2 *% n_1) {
            aug[_idx(aug.len, col)][_idx(aug[_idx(aug.len, col)].len, j_3)] = aug[_idx(aug.len, col)][_idx(aug[_idx(aug.len, col)].len, j_3)] / pivot;
            j_3 = j_3 +% 1;
        }
        var r: i64 = 0;
        r = r;
        while (r < n_1) {
            if (r != col) {
                const factor: f64 = aug[_idx(aug.len, r)][_idx(aug[_idx(aug.len, r)].len, col)];
                j_3 = 0;
                while (j_3 < 2 *% n_1) {
                    aug[_idx(aug.len, r)][_idx(aug[_idx(aug.len, r)].len, j_3)] = aug[_idx(aug.len, r)][_idx(aug[_idx(aug.len, r)].len, j_3)] - factor * aug[_idx(aug.len, col)][_idx(aug[_idx(aug.len, col)].len, j_3)];
                    j_3 = j_3 +% 1;
                }
            }
            r = r +% 1;
        }
        col = col +% 1;
    }
    var inv: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    inv = inv;
    i_2 = 0;
    while (i_2 < n_1) {
        var row_3: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_3 = row_3;
        var j_4: i64 = 0;
        j_4 = j_4;
        while (j_4 < n_1) {
            row_3 = blk8: { var _tmp_8 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const f64, row_3)) catch |err| handleError(err); _tmp_8.append(aug[_idx(aug.len, i_2)][_idx(aug[_idx(aug.len, i_2)].len, j_4 +% n_1)]) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
            j_4 = j_4 +% 1;
        }
        inv = blk9: { var _tmp_9 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const []f64, inv)) catch |err| handleError(err); _tmp_9.append(row_3) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    return inv;
}

fn weight_matrix(point: []f64, x_train_param: [][]f64, tau: f64) [][]f64 {
    const m: i64 = @as(i64, @intCast(x_train_param.len));
    var weights: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    weights = weights;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < m) {
        var row_4: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_4 = row_4;
        var j_5: i64 = 0;
        j_5 = j_5;
        while (j_5 < m) {
            if (i_3 == j_5) {
                row_4 = blk10: { var _tmp_10 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const f64, row_4)) catch |err| handleError(err); _tmp_10.append(1.0) catch |err| handleError(err); break :blk10 (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                row_4 = blk11: { var _tmp_11 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_11.appendSlice(@as([]const f64, row_4)) catch |err| handleError(err); _tmp_11.append(0.0) catch |err| handleError(err); break :blk11 (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
            }
            j_5 = j_5 +% 1;
        }
        weights = blk12: { var _tmp_12 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_12.appendSlice(@as([]const []f64, weights)) catch |err| handleError(err); _tmp_12.append(row_4) catch |err| handleError(err); break :blk12 (_tmp_12.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    var j_6: i64 = 0;
    j_6 = j_6;
    while (j_6 < m) {
        var diff_sq: f64 = 0.0;
        diff_sq = diff_sq;
        var k_1: i64 = 0;
        k_1 = k_1;
        while (k_1 < @as(i64, @intCast(point.len))) {
            const diff: f64 = point[_idx(point.len, k_1)] - x_train_param[_idx(x_train_param.len, j_6)][_idx(x_train_param[_idx(x_train_param.len, j_6)].len, k_1)];
            diff_sq = diff_sq + diff * diff;
            k_1 = k_1 +% 1;
        }
        weights[_idx(weights.len, j_6)][_idx(weights[_idx(weights.len, j_6)].len, j_6)] = expApprox((@as(f64, @floatFromInt(0)) - diff_sq) / (2.0 * tau * tau));
        j_6 = j_6 +% 1;
    }
    return weights;
}

fn local_weight(point_1: []f64, x_train_param_1: [][]f64, y_train_param: []f64, tau_1: f64) [][]f64 {
    const w: [][]f64 = weight_matrix(point_1, x_train_param_1, tau_1);
    const x_t: [][]f64 = transpose(x_train_param_1);
    const x_t_w: [][]f64 = matMul(x_t, w);
    const x_t_w_x: [][]f64 = matMul(x_t_w, x_train_param_1);
    const inv_part: [][]f64 = matInv(x_t_w_x);
    var y_col: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    y_col = y_col;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(y_train_param.len))) {
        y_col = blk13: { var _tmp_13 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_13.appendSlice(@as([]const []f64, y_col)) catch |err| handleError(err); _tmp_13.append(@constCast(blk14: { var _tmp_14 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_14.append(y_train_param[_idx(y_train_param.len, i_4)]) catch unreachable; break :blk14 (_tmp_14.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk13 (_tmp_13.toOwnedSlice() catch |err| handleError(err)); };
        i_4 = i_4 +% 1;
    }
    const x_t_w_y: [][]f64 = matMul(x_t_w, y_col);
    return matMul(inv_part, x_t_w_y);
}

fn local_weight_regression(x_train_param_2: [][]f64, y_train_param_1: []f64, tau_2: f64) []f64 {
    const m_1: i64 = @as(i64, @intCast(x_train_param_2.len));
    var preds_var_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    preds_var_1 = preds_var_1;
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < m_1) {
        const theta: [][]f64 = local_weight(x_train_param_2[_idx(x_train_param_2.len, i_5)], x_train_param_2, y_train_param_1, tau_2);
        var weights_vec: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        weights_vec = weights_vec;
        var k_2: i64 = 0;
        k_2 = k_2;
        while (k_2 < @as(i64, @intCast(theta.len))) {
            weights_vec = blk15: { var _tmp_15 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_15.appendSlice(@as([]const f64, weights_vec)) catch |err| handleError(err); _tmp_15.append(theta[_idx(theta.len, k_2)][_idx(theta[_idx(theta.len, k_2)].len, 0)]) catch |err| handleError(err); break :blk15 (_tmp_15.toOwnedSlice() catch |err| handleError(err)); };
            k_2 = k_2 +% 1;
        }
        var pred: f64 = 0.0;
        pred = pred;
        var j_7: i64 = 0;
        j_7 = j_7;
        while (j_7 < @as(i64, @intCast(x_train_param_2[_idx(x_train_param_2.len, i_5)].len))) {
            pred = pred + x_train_param_2[_idx(x_train_param_2.len, i_5)][_idx(x_train_param_2[_idx(x_train_param_2.len, i_5)].len, j_7)] * weights_vec[_idx(weights_vec.len, j_7)];
            j_7 = j_7 +% 1;
        }
        preds_var_1 = blk16: { var _tmp_16 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_16.appendSlice(@as([]const f64, preds_var_1)) catch |err| handleError(err); _tmp_16.append(pred) catch |err| handleError(err); break :blk16 (_tmp_16.toOwnedSlice() catch |err| handleError(err)); };
        i_5 = i_5 +% 1;
    }
    return preds_var_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        preds_var = local_weight_regression(x_train_var, y_train_var, 0.6);
        const __j = std.json.stringifyAlloc(std.heap.page_allocator, preds_var, .{}) catch unreachable;
        std.debug.print("{s}\n", .{__j});
        std.heap.page_allocator.free(__j);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}
