// Generated by Mochi Zig transpiler on 2025-08-17 08:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const x_var: [][]f64 = @constCast(([6][]f64{@constCast(([2]f64{0.5, 1.5})[0..2]), @constCast(([2]f64{1.0, 1.0})[0..2]), @constCast(([2]f64{1.5, 0.5})[0..2]), @constCast(([2]f64{3.0, 3.5})[0..2]), @constCast(([2]f64{3.5, 3.0})[0..2]), @constCast(([2]f64{4.0, 4.0})[0..2])})[0..6]);
const y_var: []f64 = @constCast(([6]f64{0.0, 0.0, 0.0, 1.0, 1.0, 1.0})[0..6]);
const alpha_var: f64 = 0.1;
const iterations_var: i64 = 1000;
var theta_var: []f64 = &[_]f64{};

fn expApprox(x_param: f64) f64 {
    var y_var_1: f64 = x_param;
    y_var_1 = y_var_1;
    var is_neg: bool = false;
    is_neg = is_neg;
    if (x_param < 0.0) {
        is_neg = true;
        y_var_1 = @as(f64, @floatFromInt(0)) - x_param;
    }
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var n: i64 = 1;
    n = n;
    while (n < 30) {
        term = term * y_var_1 / @as(f64, @floatFromInt(n));
        sum = sum + term;
        n = n +% 1;
    }
    if (is_neg) {
        return 1.0 / sum;
    }
    return sum;
}

fn sigmoid(z: f64) f64 {
    return 1.0 / (1.0 + expApprox(@as(f64, @floatFromInt(0)) - z));
}

fn dot(a: []f64, b: []f64) f64 {
    var s: f64 = 0.0;
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.len))) {
        s = s + a[_idx(a.len, i)] * b[_idx(b.len, i)];
        i = i +% 1;
    }
    return s;
}

fn zeros(n_1: i64) []f64 {
    var res: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res = res;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < n_1) {
        res = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, res)) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return res;
}

fn logistic_reg(alpha_param: f64, x_param_1: [][]f64, y_param: []f64, iterations_param: i64) []f64 {
    const m: i64 = @as(i64, @intCast(x_param_1.len));
    const n_2: i64 = @as(i64, @intCast(x_param_1[_idx(x_param_1.len, 0)].len));
    var theta_var_1: []f64 = zeros(n_2);
    theta_var_1 = theta_var_1;
    var iter: i64 = 0;
    iter = iter;
    while (iter < iterations_param) {
        var grad: []f64 = zeros(n_2);
        grad = grad;
        var i_2: i64 = 0;
        i_2 = i_2;
        while (i_2 < m) {
            const z_1: f64 = dot(x_param_1[_idx(x_param_1.len, i_2)], theta_var_1);
            const h: f64 = sigmoid(z_1);
            var k: i64 = 0;
            k = k;
            while (k < n_2) {
                grad[_idx(grad.len, k)] = grad[_idx(grad.len, k)] + (h - y_param[_idx(y_param.len, i_2)]) * x_param_1[_idx(x_param_1.len, i_2)][_idx(x_param_1[_idx(x_param_1.len, i_2)].len, k)];
                k = k +% 1;
            }
            i_2 = i_2 +% 1;
        }
        var k2: i64 = 0;
        k2 = k2;
        while (k2 < n_2) {
            theta_var_1[_idx(theta_var_1.len, k2)] = theta_var_1[_idx(theta_var_1.len, k2)] - alpha_param * grad[_idx(grad.len, k2)] / @as(f64, @floatFromInt(m));
            k2 = k2 +% 1;
        }
        iter = iter +% 1;
    }
    return theta_var_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        theta_var = logistic_reg(alpha_var, x_var, y_var, iterations_var);
        for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(theta_var.len))))) |__it0| {
            const i_3: i64 = @as(i64, @intCast(__it0));
            std.debug.print("{d}\n", .{theta_var[_idx(theta_var.len, i_3)]});
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
