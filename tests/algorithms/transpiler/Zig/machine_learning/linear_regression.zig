// Generated by Mochi Zig transpiler on 2025-08-17 08:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const data_x_var: [][]f64 = @constCast(([3][]f64{@constCast(([2]f64{1.0, 1.0})[0..2]), @constCast(([2]f64{1.0, 2.0})[0..2]), @constCast(([2]f64{1.0, 3.0})[0..2])})[0..3]);
const data_y_var: []f64 = @constCast(([3]f64{1.0, 2.0, 3.0})[0..3]);
var theta_var: []f64 = &[_]f64{};
var i_var_6: i64 = 0;
var predicted_y_var: []f64 = &[_]f64{};
const original_y_var: []f64 = @constCast(([4]f64{2.5, 0.0, 2.0, 8.0})[0..4]);
var mae_var: f64 = 0;

fn dot(x: []f64, y: []f64) f64 {
    var sum: f64 = 0.0;
    sum = sum;
    var i_var_1: i64 = 0;
    i_var_1 = i_var_1;
    while (i_var_1 < @as(i64, @intCast(x.len))) {
        sum = sum + x[_idx(x.len, i_var_1)] * y[_idx(y.len, i_var_1)];
        i_var_1 = i_var_1 +% 1;
    }
    return sum;
}

fn run_steep_gradient_descent(data_x_param: [][]f64, data_y_param: []f64, len_data: i64, alpha: f64, theta_param: []f64) []f64 {
    var gradients: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    gradients = gradients;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(theta_param.len))) {
        gradients = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, gradients)) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        j = j +% 1;
    }
    var i_var_2: i64 = 0;
    i_var_2 = i_var_2;
    while (i_var_2 < len_data) {
        const prediction: f64 = dot(theta_param, data_x_param[_idx(data_x_param.len, i_var_2)]);
        const error_: f64 = prediction - data_y_param[_idx(data_y_param.len, i_var_2)];
        var k: i64 = 0;
        k = k;
        while (k < @as(i64, @intCast(theta_param.len))) {
            gradients[_idx(gradients.len, k)] = gradients[_idx(gradients.len, k)] + error_ * data_x_param[_idx(data_x_param.len, i_var_2)][_idx(data_x_param[_idx(data_x_param.len, i_var_2)].len, k)];
            k = k +% 1;
        }
        i_var_2 = i_var_2 +% 1;
    }
    var t: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    t = t;
    var g: i64 = 0;
    g = g;
    while (g < @as(i64, @intCast(theta_param.len))) {
        t = blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, t)) catch |err| handleError(err); _tmp_1.append(theta_param[_idx(theta_param.len, g)] - alpha / @as(f64, @floatFromInt(len_data)) * gradients[_idx(gradients.len, g)]) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        g = g +% 1;
    }
    return t;
}

fn sum_of_square_error(data_x_param_1: [][]f64, data_y_param_1: []f64, len_data_1: i64, theta_param_1: []f64) f64 {
    var total: f64 = 0.0;
    total = total;
    var i_var_3: i64 = 0;
    i_var_3 = i_var_3;
    while (i_var_3 < len_data_1) {
        const prediction_1: f64 = dot(theta_param_1, data_x_param_1[_idx(data_x_param_1.len, i_var_3)]);
        const diff: f64 = prediction_1 - data_y_param_1[_idx(data_y_param_1.len, i_var_3)];
        total = total + diff * diff;
        i_var_3 = i_var_3 +% 1;
    }
    return total / (2.0 * @as(f64, @floatFromInt(len_data_1)));
}

fn run_linear_regression(data_x_param_2: [][]f64, data_y_param_2: []f64) []f64 {
    const iterations: i64 = 10;
    const alpha_1: f64 = 0.01;
    const no_features: i64 = @as(i64, @intCast(data_x_param_2[_idx(data_x_param_2.len, 0)].len));
    const len_data_2: i64 = @as(i64, @intCast(data_x_param_2.len));
    var theta_var_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    theta_var_1 = theta_var_1;
    var i_var_4: i64 = 0;
    i_var_4 = i_var_4;
    while (i_var_4 < no_features) {
        theta_var_1 = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, theta_var_1)) catch |err| handleError(err); _tmp_2.append(0.0) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i_var_4 = i_var_4 +% 1;
    }
    var iter: i64 = 0;
    iter = iter;
    while (iter < iterations) {
        theta_var_1 = run_steep_gradient_descent(data_x_param_2, data_y_param_2, len_data_2, alpha_1, theta_var_1);
        const error__1: f64 = sum_of_square_error(data_x_param_2, data_y_param_2, len_data_2, theta_var_1);
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("At Iteration ", _str(iter +% 1)), " - Error is "), _str(error__1))});
        iter = iter +% 1;
    }
    return theta_var_1;
}

fn absf(x_1: f64) f64 {
    if (x_1 < 0.0) {
        return @as(f64, @floatFromInt(0)) - x_1;
    } else {
        return x_1;
    }
    return 0;
}

fn mean_absolute_error(predicted_y_param: []f64, original_y_param: []f64) f64 {
    var total_1: f64 = 0.0;
    total_1 = total_1;
    var i_var_5: i64 = 0;
    i_var_5 = i_var_5;
    while (i_var_5 < @as(i64, @intCast(predicted_y_param.len))) {
        const diff_1: f64 = absf(predicted_y_param[_idx(predicted_y_param.len, i_var_5)] - original_y_param[_idx(original_y_param.len, i_var_5)]);
        total_1 = total_1 + diff_1;
        i_var_5 = i_var_5 +% 1;
    }
    return total_1 / @as(f64, @floatFromInt(@as(i64, @intCast(predicted_y_param.len))));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        theta_var = run_linear_regression(data_x_var, data_y_var);
        predicted_y_var = std.heap.page_allocator.dupe(f64, blk3: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.append(3.0) catch unreachable; _tmp_3.append(@as(f64, @floatFromInt(0)) - 0.5) catch unreachable; _tmp_3.append(2.0) catch unreachable; _tmp_3.append(7.0) catch unreachable; break :blk3 (_tmp_3.toOwnedSlice() catch unreachable); }) catch unreachable;
        mae_var = mean_absolute_error(predicted_y_var, original_y_var);
        std.debug.print("{s}\n", .{"Resultant Feature vector :"});
        while (i_var_6 < @as(i64, @intCast(theta_var.len))) {
            std.debug.print("{s}\n", .{_str(theta_var[_idx(theta_var.len, i_var_6)])});
            i_var_6 = i_var_6 +% 1;
        }
        std.debug.print("{s}\n", .{_concat_string("Mean Absolute Error : ", _str(mae_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
