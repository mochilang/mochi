// Generated by Mochi Zig transpiler on 2025-08-17 08:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.141592653589793;
const sample_rate_var: i64 = 8000;
const size_var: i64 = 16;
var audio_var_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
var n_var_6: i64 = 0;
var coeffs_var: []f64 = &[_]f64{};

fn sinApprox(x: f64) f64 {
    var term: f64 = x;
    term = term;
    var sum: f64 = x;
    sum = sum;
    var n_var_1: i64 = 1;
    n_var_1 = n_var_1;
    while (n_var_1 <= 10) {
        const denom: f64 = @as(f64, @floatFromInt(2 *% n_var_1 *% (2 *% n_var_1 +% 1)));
        term = (@as(f64, @floatFromInt(0)) - term) * x * x / denom;
        sum = sum + term;
        n_var_1 = n_var_1 +% 1;
    }
    return sum;
}

fn cosApprox(x_1: f64) f64 {
    var term_1: f64 = 1.0;
    term_1 = term_1;
    var sum_1: f64 = 1.0;
    sum_1 = sum_1;
    var n_var_2: i64 = 1;
    n_var_2 = n_var_2;
    while (n_var_2 <= 10) {
        const denom_1: f64 = @as(f64, @floatFromInt((2 *% n_var_2 -% 1) *% (2 *% n_var_2)));
        term_1 = (@as(f64, @floatFromInt(0)) - term_1) * x_1 * x_1 / denom_1;
        sum_1 = sum_1 + term_1;
        n_var_2 = n_var_2 +% 1;
    }
    return sum_1;
}

fn expApprox(x_2: f64) f64 {
    var sum_2: f64 = 1.0;
    sum_2 = sum_2;
    var term_2: f64 = 1.0;
    term_2 = term_2;
    var n_var_3: i64 = 1;
    n_var_3 = n_var_3;
    while (n_var_3 < 10) {
        term_2 = term_2 * x_2 / @as(f64, @floatFromInt(n_var_3));
        sum_2 = sum_2 + term_2;
        n_var_3 = n_var_3 +% 1;
    }
    return sum_2;
}

fn ln(x_3: f64) f64 {
    const t: f64 = (x_3 - 1.0) / (x_3 + 1.0);
    var term_3: f64 = t;
    term_3 = term_3;
    var sum_3: f64 = 0.0;
    sum_3 = sum_3;
    var n_var_4: i64 = 1;
    n_var_4 = n_var_4;
    while (n_var_4 <= 19) {
        sum_3 = sum_3 + term_3 / @as(f64, @floatFromInt(n_var_4));
        term_3 = term_3 * t * t;
        n_var_4 = n_var_4 +% 2;
    }
    return 2.0 * sum_3;
}

fn log10(x_4: f64) f64 {
    return ln(x_4) / ln(10.0);
}

fn sqrtApprox(x_5: f64) f64 {
    if (x_5 <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x_5;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 10) {
        guess = (guess + x_5 / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn absf(x_6: f64) f64 {
    if (x_6 < 0.0) {
        return @as(f64, @floatFromInt(0)) - x_6;
    }
    return x_6;
}

fn normalize(audio_param: []f64) []f64 {
    var max_val: f64 = 0.0;
    max_val = max_val;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(audio_param.len))) {
        const v: f64 = absf(audio_param[_idx(audio_param.len, i_1)]);
        if (v > max_val) {
            max_val = v;
        }
        i_1 = i_1 +% 1;
    }
    var res: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res = res;
    i_1 = 0;
    while (i_1 < @as(i64, @intCast(audio_param.len))) {
        res = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, res)) catch |err| handleError(err); _tmp.append(audio_param[_idx(audio_param.len, i_1)] / max_val) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return res;
}

fn dft(frame: []f64, bins: i64) []f64 {
    const N: i64 = @as(i64, @intCast(frame.len));
    var spec: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    spec = spec;
    var k: i64 = 0;
    k = k;
    while (k < bins) {
        var real: f64 = 0.0;
        real = real;
        var imag: f64 = 0.0;
        imag = imag;
        var n_var_5: i64 = 0;
        n_var_5 = n_var_5;
        while (n_var_5 < N) {
            const angle: f64 = (@as(f64, @floatFromInt(0)) - 2.0) * PI_var * @as(f64, @floatFromInt(k)) * @as(f64, @floatFromInt(n_var_5)) / @as(f64, @floatFromInt(N));
            real = real + frame[_idx(frame.len, n_var_5)] * cosApprox(angle);
            imag = imag + frame[_idx(frame.len, n_var_5)] * sinApprox(angle);
            n_var_5 = n_var_5 +% 1;
        }
        spec = blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, spec)) catch |err| handleError(err); _tmp_1.append(real * real + imag * imag) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        k = k +% 1;
    }
    return spec;
}

fn triangular_filters(bins_1: i64, spectrum_size: i64) [][]f64 {
    var filters: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    filters = filters;
    var b: i64 = 0;
    b = b;
    while (b < bins_1) {
        const center: i64 = @divTrunc((b +% 1) *% spectrum_size, bins_1 +% 1);
        var filt: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        filt = filt;
        var i_2: i64 = 0;
        i_2 = i_2;
        while (i_2 < spectrum_size) {
            var v_1: f64 = 0.0;
            v_1 = v_1;
            if (i_2 <= center) {
                v_1 = @as(f64, @floatFromInt(i_2)) / @as(f64, @floatFromInt(center));
            } else {
                v_1 = @as(f64, @floatFromInt(spectrum_size -% i_2)) / @as(f64, @floatFromInt(spectrum_size -% center));
            }
            filt = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, filt)) catch |err| handleError(err); _tmp_2.append(v_1) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            i_2 = i_2 +% 1;
        }
        filters = blk3: { var _tmp_3 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []f64, filters)) catch |err| handleError(err); _tmp_3.append(filt) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        b = b +% 1;
    }
    return filters;
}

fn dot(mat: [][]f64, vec: []f64) []f64 {
    var res_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res_1 = res_1;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(mat.len))) {
        var sum_4: f64 = 0.0;
        sum_4 = sum_4;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(vec.len))) {
            sum_4 = sum_4 + mat[_idx(mat.len, i_3)][_idx(mat[_idx(mat.len, i_3)].len, j)] * vec[_idx(vec.len, j)];
            j = j +% 1;
        }
        res_1 = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, res_1)) catch |err| handleError(err); _tmp_4.append(sum_4) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    return res_1;
}

fn discrete_cosine_transform(dct_filter_num: i64, filter_num: i64) [][]f64 {
    var basis: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    basis = basis;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < dct_filter_num) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < filter_num) {
            if (i_4 == 0) {
                row = blk5: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp_5.append(1.0 / sqrtApprox(@as(f64, @floatFromInt(filter_num)))) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                const angle_1: f64 = @as(f64, @floatFromInt(2 *% j_1 +% 1)) * @as(f64, @floatFromInt(i_4)) * PI_var / (2.0 * @as(f64, @floatFromInt(filter_num)));
                row = blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp_6.append(cosApprox(angle_1) * sqrtApprox(2.0 / @as(f64, @floatFromInt(filter_num)))) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
            }
            j_1 = j_1 +% 1;
        }
        basis = blk7: { var _tmp_7 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []f64, basis)) catch |err| handleError(err); _tmp_7.append(row) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_4 = i_4 +% 1;
    }
    return basis;
}

fn mfcc(audio_param_1: []f64, bins_2: i64, dct_num: i64) []f64 {
    const norm: []f64 = normalize(audio_param_1);
    const spec_1: []f64 = dft(norm, bins_2 +% 2);
    const filters_1: [][]f64 = triangular_filters(bins_2, @as(i64, @intCast(spec_1.len)));
    const energies: []f64 = dot(filters_1, spec_1);
    var logfb: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    logfb = logfb;
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < @as(i64, @intCast(energies.len))) {
        logfb = blk8: { var _tmp_8 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const f64, logfb)) catch |err| handleError(err); _tmp_8.append(10.0 * log10(energies[_idx(energies.len, i_5)] + 0.0000000001)) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
        i_5 = i_5 +% 1;
    }
    const dct_basis: [][]f64 = discrete_cosine_transform(dct_num, bins_2);
    var res_2: []f64 = dot(dct_basis, logfb);
    res_2 = res_2;
    if (@as(i64, @intCast(res_2.len)) == 0) {
        res_2 = std.heap.page_allocator.dupe(f64, ([3]f64{0.0, 0.0, 0.0})[0..3]) catch unreachable;
    }
    return res_2;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        coeffs_var = mfcc(audio_var_1, 5, 3);
        while (n_var_6 < size_var) {
            const t_1: f64 = @as(f64, @floatFromInt(n_var_6)) / @as(f64, @floatFromInt(sample_rate_var));
            audio_var_1 = blk9: { var _tmp_9 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const f64, audio_var_1)) catch |err| handleError(err); _tmp_9.append(sinApprox(2.0 * PI_var * 440.0 * t_1)) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
            n_var_6 = n_var_6 +% 1;
        }
        for (coeffs_var) |__it0| {
            const c_1 = __it0;
            std.debug.print("{s}\n", .{_str(c_1)});
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
