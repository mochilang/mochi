// Generated by Mochi Zig transpiler on 2025-08-16 19:42 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Stump = struct {
    feature: i64,
    threshold: f64,
    left: f64,
    right: f64,
};

const features_var: [][]f64 = @constCast(([4][]f64{@constCast(([1]f64{1.0})[0..1]), @constCast(([1]f64{2.0})[0..1]), @constCast(([1]f64{3.0})[0..1]), @constCast(([1]f64{4.0})[0..1])})[0..4]);
var target_var: []f64 = &[_]f64{};
var models_var: []Stump = &[_]Stump{};
var predictions_var: []f64 = &[_]f64{};
var acc_var: f64 = 0;

fn exp_approx(x: f64) f64 {
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        term = term * x / @as(f64, @floatFromInt(i));
        sum = sum + term;
        i = i +% 1;
    }
    return sum;
}

fn signf(x_1: f64) f64 {
    if (x_1 >= 0.0) {
        return 1.0;
    }
    return @as(f64, @floatFromInt(0)) - 1.0;
}

fn gradient(target_param: []f64, preds: []f64) []f64 {
    const n: i64 = @as(i64, @intCast(target_param.len));
    var residuals: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    residuals = residuals;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < n) {
        const t: f64 = target_param[_idx(target_param.len, i_1)];
        const y: f64 = preds[_idx(preds.len, i_1)];
        const exp_val: f64 = exp_approx(t * y);
        const res: f64 = (@as(f64, @floatFromInt(0)) - t) / (1.0 + exp_val);
        residuals = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, residuals)) catch |err| handleError(err); _tmp.append(res) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return residuals;
}

fn predict_raw(models_param: []Stump, features_param: [][]f64, learning_rate: f64) []f64 {
    const n_1: i64 = @as(i64, @intCast(features_param.len));
    var preds_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    preds_1 = preds_1;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < n_1) {
        preds_1 = blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, preds_1)) catch |err| handleError(err); _tmp_1.append(0.0) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    var m: i64 = 0;
    m = m;
    while (m < @as(i64, @intCast(models_param.len))) {
        const stump: Stump = models_param[_idx(models_param.len, m)];
        i_2 = 0;
        while (i_2 < n_1) {
            const value: f64 = features_param[_idx(features_param.len, i_2)][_idx(features_param[_idx(features_param.len, i_2)].len, stump.feature)];
            if (value <= stump.threshold) {
                preds_1[_idx(preds_1.len, i_2)] = preds_1[_idx(preds_1.len, i_2)] + learning_rate * stump.left;
            } else {
                preds_1[_idx(preds_1.len, i_2)] = preds_1[_idx(preds_1.len, i_2)] + learning_rate * stump.right;
            }
            i_2 = i_2 +% 1;
        }
        m = m +% 1;
    }
    return preds_1;
}

fn predict(models_param_1: []Stump, features_param_1: [][]f64, learning_rate_1: f64) []f64 {
    const raw: []f64 = predict_raw(models_param_1, features_param_1, learning_rate_1);
    var result: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    result = result;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(raw.len))) {
        result = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, result)) catch |err| handleError(err); _tmp_2.append(signf(raw[_idx(raw.len, i_3)])) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    return result;
}

fn train_stump(features_param_2: [][]f64, residuals_1: []f64) Stump {
    const n_samples: i64 = @as(i64, @intCast(features_param_2.len));
    const n_features: i64 = @as(i64, @intCast(features_param_2[_idx(features_param_2.len, 0)].len));
    var best_feature: i64 = 0;
    best_feature = best_feature;
    var best_threshold: f64 = 0.0;
    best_threshold = best_threshold;
    var best_error: f64 = 1000000000.0;
    best_error = best_error;
    var best_left: f64 = 0.0;
    best_left = best_left;
    var best_right: f64 = 0.0;
    best_right = best_right;
    var j: i64 = 0;
    j = j;
    while (j < n_features) {
        var t_index: i64 = 0;
        t_index = t_index;
        while (t_index < n_samples) {
            const t_1: f64 = features_param_2[_idx(features_param_2.len, t_index)][_idx(features_param_2[_idx(features_param_2.len, t_index)].len, j)];
            var sum_left: f64 = 0.0;
            sum_left = sum_left;
            var count_left: i64 = 0;
            count_left = count_left;
            var sum_right: f64 = 0.0;
            sum_right = sum_right;
            var count_right: i64 = 0;
            count_right = count_right;
            var i_4: i64 = 0;
            i_4 = i_4;
            while (i_4 < n_samples) {
                if (features_param_2[_idx(features_param_2.len, i_4)][_idx(features_param_2[_idx(features_param_2.len, i_4)].len, j)] <= t_1) {
                    sum_left = sum_left + residuals_1[_idx(residuals_1.len, i_4)];
                    count_left = count_left +% 1;
                } else {
                    sum_right = sum_right + residuals_1[_idx(residuals_1.len, i_4)];
                    count_right = count_right +% 1;
                }
                i_4 = i_4 +% 1;
            }
            var left_val: f64 = 0.0;
            left_val = left_val;
            if (count_left != 0) {
                left_val = sum_left / @as(f64, @floatFromInt(count_left));
            }
            var right_val: f64 = 0.0;
            right_val = right_val;
            if (count_right != 0) {
                right_val = sum_right / @as(f64, @floatFromInt(count_right));
            }
            var error_: f64 = 0.0;
            error_ = error_;
            i_4 = 0;
            while (i_4 < n_samples) {
                const pred: f64 = if (features_param_2[_idx(features_param_2.len, i_4)][_idx(features_param_2[_idx(features_param_2.len, i_4)].len, j)] <= t_1) left_val else right_val;
                const diff: f64 = residuals_1[_idx(residuals_1.len, i_4)] - pred;
                error_ = error_ + diff * diff;
                i_4 = i_4 +% 1;
            }
            if (error_ < best_error) {
                best_error = error_;
                best_feature = j;
                best_threshold = t_1;
                best_left = left_val;
                best_right = right_val;
            }
            t_index = t_index +% 1;
        }
        j = j +% 1;
    }
    return .{ .feature = best_feature, .threshold = best_threshold, .left = best_left, .right = best_right };
}

fn fit(n_estimators: i64, learning_rate_2: f64, features_param_3: [][]f64, target_param_1: []f64) []Stump {
    var models_var_1: []Stump = std.heap.page_allocator.alloc(Stump, 0) catch unreachable;
    models_var_1 = models_var_1;
    var m_1: i64 = 0;
    m_1 = m_1;
    while (m_1 < n_estimators) {
        const preds_2: []f64 = predict_raw(models_var_1, features_param_3, learning_rate_2);
        const grad: []f64 = gradient(target_param_1, preds_2);
        var residuals_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        residuals_2 = residuals_2;
        var i_5: i64 = 0;
        i_5 = i_5;
        while (i_5 < @as(i64, @intCast(grad.len))) {
            residuals_2 = blk3: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const f64, residuals_2)) catch |err| handleError(err); _tmp_3.append(@as(f64, @floatFromInt(0)) - grad[_idx(grad.len, i_5)]) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            i_5 = i_5 +% 1;
        }
        const stump_1: Stump = train_stump(features_param_3, residuals_2);
        models_var_1 = blk4: { var _tmp_4 = std.ArrayList(Stump).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const Stump, models_var_1)) catch |err| handleError(err); _tmp_4.append(stump_1) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        m_1 = m_1 +% 1;
    }
    return models_var_1;
}

fn accuracy(preds_3: []f64, target_param_2: []f64) f64 {
    const n_2: i64 = @as(i64, @intCast(target_param_2.len));
    var correct: i64 = 0;
    correct = correct;
    var i_6: i64 = 0;
    i_6 = i_6;
    while (i_6 < n_2) {
        if (preds_3[_idx(preds_3.len, i_6)] == target_param_2[_idx(target_param_2.len, i_6)]) {
            correct = correct +% 1;
        }
        i_6 = i_6 +% 1;
    }
    return @as(f64, @floatFromInt(correct)) / @as(f64, @floatFromInt(n_2));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        target_var = std.heap.page_allocator.dupe(f64, blk5: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_5.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_5.append(1.0) catch unreachable; _tmp_5.append(1.0) catch unreachable; break :blk5 (_tmp_5.toOwnedSlice() catch unreachable); }) catch unreachable;
        models_var = fit(5, 0.5, features_var, target_var);
        predictions_var = predict(models_var, features_var, 0.5);
        acc_var = accuracy(predictions_var, target_var);
        std.debug.print("{s}\n", .{_concat_string("Accuracy: ", _str(acc_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
