// Generated by Mochi Zig transpiler on 2025-08-17 08:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.141592653589793;
const TWO_PI_var: f64 = 6.283185307179586;
var seed_var_1: i64 = 1;

fn rand() i64 {
    seed_var_1 = @mod(seed_var_1 *% 1103515245 +% 12345, 2147483648);
    return seed_var_1;
}

fn random() f64 {
    return @as(f64, @floatFromInt(rand())) / 2147483648.0;
}

fn _mod(x: f64, m: f64) f64 {
    return x - @as(f64, @floatFromInt(@as(i64, @intFromFloat(x / m)))) * m;
}

fn cos(x_1: f64) f64 {
    const y: f64 = _mod(x_1 + PI_var, TWO_PI_var) - PI_var;
    const y2: f64 = y * y;
    const y4: f64 = y2 * y2;
    const y6: f64 = y4 * y2;
    return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0;
}

fn sqrtApprox(x_2: f64) f64 {
    if (x_2 <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x_2;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 10) {
        guess = (guess + x_2 / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn ln(x_3: f64) f64 {
    const t: f64 = (x_3 - 1.0) / (x_3 + 1.0);
    var term: f64 = t;
    term = term;
    var sum: f64 = 0.0;
    sum = sum;
    var n: i64 = 1;
    n = n;
    while (n <= 19) {
        sum = sum + term / @as(f64, @floatFromInt(n));
        term = term * t * t;
        n = n +% 2;
    }
    return 2.0 * sum;
}

fn gaussian_distribution(mean: f64, std_dev: f64, instance_count: i64) []f64 {
    var res: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res = res;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < instance_count) {
        const _u1: f64 = random();
        const _u2: f64 = random();
        const r: f64 = sqrtApprox((@as(f64, @floatFromInt(0)) - 2.0) * ln(_u1));
        const theta: f64 = TWO_PI_var * _u2;
        const z: f64 = r * cos(theta);
        res = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, res)) catch |err| handleError(err); _tmp.append(mean + z * std_dev) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return res;
}

fn y_generator(class_count: i64, instance_count_1: []i64) []i64 {
    var res_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res_1 = res_1;
    var k: i64 = 0;
    k = k;
    while (k < class_count) {
        var i_2: i64 = 0;
        i_2 = i_2;
        while (i_2 < instance_count_1[_idx(instance_count_1.len, k)]) {
            res_1 = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, res_1)) catch |err| handleError(err); _tmp_1.append(k) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            i_2 = i_2 +% 1;
        }
        k = k +% 1;
    }
    return res_1;
}

fn calculate_mean(instance_count_2: i64, items: []f64) f64 {
    var total: f64 = 0.0;
    total = total;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < instance_count_2) {
        total = total + items[_idx(items.len, i_3)];
        i_3 = i_3 +% 1;
    }
    return total / @as(f64, @floatFromInt(instance_count_2));
}

fn calculate_probabilities(instance_count_3: i64, total_count: i64) f64 {
    return @as(f64, @floatFromInt(instance_count_3)) / @as(f64, @floatFromInt(total_count));
}

fn calculate_variance(items_1: [][]f64, means: []f64, total_count_1: i64) f64 {
    var squared_diff: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    squared_diff = squared_diff;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(items_1.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(items_1[_idx(items_1.len, i_4)].len))) {
            const diff: f64 = items_1[_idx(items_1.len, i_4)][_idx(items_1[_idx(items_1.len, i_4)].len, j)] - means[_idx(means.len, i_4)];
            squared_diff = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, squared_diff)) catch |err| handleError(err); _tmp_2.append(diff * diff) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        i_4 = i_4 +% 1;
    }
    var sum_sq: f64 = 0.0;
    sum_sq = sum_sq;
    var k_1: i64 = 0;
    k_1 = k_1;
    while (k_1 < @as(i64, @intCast(squared_diff.len))) {
        sum_sq = sum_sq + squared_diff[_idx(squared_diff.len, k_1)];
        k_1 = k_1 +% 1;
    }
    const n_classes: i64 = @as(i64, @intCast(means.len));
    return 1.0 / @as(f64, @floatFromInt(total_count_1 -% n_classes)) * sum_sq;
}

fn predict_y_values(x_items: [][]f64, means_1: []f64, variance: f64, probabilities: []f64) []i64 {
    var results: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    results = results;
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < @as(i64, @intCast(x_items.len))) {
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < @as(i64, @intCast(x_items[_idx(x_items.len, i_5)].len))) {
            var temp: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
            temp = temp;
            var k_2: i64 = 0;
            k_2 = k_2;
            while (k_2 < @as(i64, @intCast(x_items.len))) {
                const discr: f64 = x_items[_idx(x_items.len, i_5)][_idx(x_items[_idx(x_items.len, i_5)].len, j_1)] * (means_1[_idx(means_1.len, k_2)] / variance) - means_1[_idx(means_1.len, k_2)] * means_1[_idx(means_1.len, k_2)] / (2.0 * variance) + ln(probabilities[_idx(probabilities.len, k_2)]);
                temp = blk3: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const f64, temp)) catch |err| handleError(err); _tmp_3.append(discr) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
                k_2 = k_2 +% 1;
            }
            var max_idx: i64 = 0;
            max_idx = max_idx;
            var max_val: f64 = temp[_idx(temp.len, 0)];
            max_val = max_val;
            var t_1: i64 = 1;
            t_1 = t_1;
            while (t_1 < @as(i64, @intCast(temp.len))) {
                if (temp[_idx(temp.len, t_1)] > max_val) {
                    max_val = temp[_idx(temp.len, t_1)];
                    max_idx = t_1;
                }
                t_1 = t_1 +% 1;
            }
            results = blk4: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const i64, results)) catch |err| handleError(err); _tmp_4.append(max_idx) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 +% 1;
        }
        i_5 = i_5 +% 1;
    }
    return results;
}

fn accuracy(actual_y: []i64, predicted_y: []i64) f64 {
    var correct: i64 = 0;
    correct = correct;
    var i_6: i64 = 0;
    i_6 = i_6;
    while (i_6 < @as(i64, @intCast(actual_y.len))) {
        if (actual_y[_idx(actual_y.len, i_6)] == predicted_y[_idx(predicted_y.len, i_6)]) {
            correct = correct +% 1;
        }
        i_6 = i_6 +% 1;
    }
    return @as(f64, @floatFromInt(correct)) / @as(f64, @floatFromInt(@as(i64, @intCast(actual_y.len)))) * 100.0;
}

fn mochi_main() void {
    seed_var_1 = 1;
    const counts: []i64 = @constCast(([3]i64{20, 20, 20})[0..3]);
    const means_2: []f64 = @constCast(([3]f64{5.0, 10.0, 15.0})[0..3]);
    const std_dev_1: f64 = 1.0;
    var x_4: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    x_4 = x_4;
    var i_7: i64 = 0;
    i_7 = i_7;
    while (i_7 < @as(i64, @intCast(counts.len))) {
        x_4 = blk5: { var _tmp_5 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []f64, x_4)) catch |err| handleError(err); _tmp_5.append(gaussian_distribution(means_2[_idx(means_2.len, i_7)], std_dev_1, counts[_idx(counts.len, i_7)])) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        i_7 = i_7 +% 1;
    }
    const y_1: []i64 = y_generator(@as(i64, @intCast(counts.len)), counts);
    var actual_means: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    actual_means = actual_means;
    i_7 = 0;
    while (i_7 < @as(i64, @intCast(counts.len))) {
        actual_means = blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const f64, actual_means)) catch |err| handleError(err); _tmp_6.append(calculate_mean(counts[_idx(counts.len, i_7)], x_4[_idx(x_4.len, i_7)])) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        i_7 = i_7 +% 1;
    }
    var total_count_2: i64 = 0;
    total_count_2 = total_count_2;
    i_7 = 0;
    while (i_7 < @as(i64, @intCast(counts.len))) {
        total_count_2 = total_count_2 +% counts[_idx(counts.len, i_7)];
        i_7 = i_7 +% 1;
    }
    var probabilities_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    probabilities_1 = probabilities_1;
    i_7 = 0;
    while (i_7 < @as(i64, @intCast(counts.len))) {
        probabilities_1 = blk7: { var _tmp_7 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const f64, probabilities_1)) catch |err| handleError(err); _tmp_7.append(calculate_probabilities(counts[_idx(counts.len, i_7)], total_count_2)) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_7 = i_7 +% 1;
    }
    const variance_1: f64 = calculate_variance(x_4, actual_means, total_count_2);
    const predicted: []i64 = predict_y_values(x_4, actual_means, variance_1, probabilities_1);
    std.debug.print("{s}\n", .{_str(predicted)});
    std.debug.print("{d}\n", .{accuracy(y_1, predicted)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
