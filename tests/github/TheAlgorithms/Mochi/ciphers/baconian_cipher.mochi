/*
Encode and decode messages using the Baconian cipher.
Each letter maps to a five-character pattern of 'A' and 'B'.
Encoding converts the input to lowercase, replaces each letter with
its pattern, and preserves spaces. Decoding verifies the string
contains only 'A', 'B', and spaces, splits on spaces, and converts
each five-letter group back to a character using the inverse mapping.
The algorithm runs in O(n) time for n characters.
*/

let encode_map: map<string, string> = {
  "a": "AAAAA",
  "b": "AAAAB",
  "c": "AAABA",
  "d": "AAABB",
  "e": "AABAA",
  "f": "AABAB",
  "g": "AABBA",
  "h": "AABBB",
  "i": "ABAAA",
  "j": "BBBAA",
  "k": "ABAAB",
  "l": "ABABA",
  "m": "ABABB",
  "n": "ABBAA",
  "o": "ABBAB",
  "p": "ABBBA",
  "q": "ABBBB",
  "r": "BAAAA",
  "s": "BAAAB",
  "t": "BAABA",
  "u": "BAABB",
  "v": "BBBAB",
  "w": "BABAA",
  "x": "BABAB",
  "y": "BABBA",
  "z": "BABBB",
  " ": " "
}

fun make_decode_map(): map<string, string> {
  var m: map<string, string> = {}
  for k in encode_map {
    m[encode_map[k]] = k
  }
  return m
}

let decode_map: map<string, string> = make_decode_map()

fun split_spaces(s: string): list<string> {
  var parts: list<string> = []
  var current = ""
  var i = 0
  while i < len(s) {
    let ch = substring(s, i, i + 1)
    if ch == " " {
      parts = append(parts, current)
      current = ""
    } else {
      current = current + ch
    }
    i = i + 1
  }
  parts = append(parts, current)
  return parts
}

fun encode(word: string): string {
  let w = lower(word)
  var encoded = ""
  var i = 0
  while i < len(w) {
    let ch = substring(w, i, i + 1)
    if ch in encode_map {
      encoded = encoded + encode_map[ch]
    } else {
      panic("encode() accepts only letters of the alphabet and spaces")
    }
    i = i + 1
  }
  return encoded
}

fun decode(coded: string): string {
  var i = 0
  while i < len(coded) {
    let ch = substring(coded, i, i + 1)
    if ch != "A" && ch != "B" && ch != " " {
      panic("decode() accepts only 'A', 'B' and spaces")
    }
    i = i + 1
  }
  let words = split_spaces(coded)
  var decoded = ""
  var w = 0
  while w < len(words) {
    let word = words[w]
    var j = 0
    while j < len(word) {
      let segment = substring(word, j, j + 5)
      decoded = decoded + decode_map[segment]
      j = j + 5
    }
    if w < len(words) - 1 {
      decoded = decoded + " "
    }
    w = w + 1
  }
  return decoded
}

print(encode("hello"))
print(encode("hello world"))
print(decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB"))
print(decode("AABBBAABAAABABAABABAABBAB"))
