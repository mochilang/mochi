/*
Perform the Diffie-Hellman key exchange using modular arithmetic.

The function `find_primitive` searches for a primitive root modulo a given
prime by testing each candidate to ensure its powers generate every
non-zero residue.  Modular exponentiation is handled by `mod_pow`, which
uses repeated squaring in O(log exponent) time.  With a primitive root g
and prime modulus p, two parties select private exponents a and b.  They
compute public values g^a mod p and g^b mod p, exchange them, and raise
the received value to their own exponent to obtain a shared secret
g^(ab) mod p.  This script demonstrates the process with sample values.
*/

fun mod_pow(base: int, exp: int, mod: int): int {
  var result = 1
  var b = base % mod
  var e = exp
  while e > 0 {
    if e % 2 == 1 {
      result = (result * b) % mod
    }
    e = e / 2
    b = (b * b) % mod
  }
  return result
}

fun contains(xs: list<int>, val: int): bool {
  var i = 0
  while i < len(xs) {
    if xs[i] == val {
      return true
    }
    i = i + 1
  }
  return false
}

fun find_primitive(modulus: int): int {
  var r = 1
  while r < modulus {
    var li: list<int> = []
    var x = 0
    var valid = true
    while x < modulus - 1 && valid {
      let value = mod_pow(r, x, modulus)
      if contains(li, value) {
        valid = false
      } else {
        li = append(li, value)
        x = x + 1
      }
    }
    if valid {
      return r
    }
    r = r + 1
  }
  return -1
}

print(find_primitive(7))
print(find_primitive(11))
print(find_primitive(8))

let prime = 23
let primitive_root = find_primitive(prime)
if primitive_root == (0 - 1) {
  print("Cannot find the primitive for the value: -1")
} else {
  let a_private = 6
  let b_private = 15
  let a_public = mod_pow(primitive_root, a_private, prime)
  let b_public = mod_pow(primitive_root, b_private, prime)
  let a_secret = mod_pow(b_public, a_private, prime)
  let b_secret = mod_pow(a_public, b_private, prime)
  print("The key value generated by A is: " + str(a_secret))
  print("The key value generated by B is: " + str(b_secret))
}
