/*
K-th Order Statistic via Quickselect

This program finds the k-th smallest element of an integer list using the
quickselect algorithm. A pivot is chosen from the list and the list is
partitioned into elements smaller or greater than the pivot. Depending on the
number of elements less than the pivot, the algorithm recurses into the
appropriate partition until the pivot is in its k-th position. The approach
runs in expected linear time.
*/

fun pivot(lst: list<int>): int {
  return lst[0]
}

fun kth_number(lst: list<int>, k: int): int {
  let p = pivot(lst)
  var small: list<int> = []
  var big: list<int> = []
  var i = 0
  while i < len(lst) {
    let e = lst[i]
    if e < p {
      small = append(small, e)
    } else if e > p {
      big = append(big, e)
    }
    i = i + 1
  }
  if len(small) == k - 1 {
    return p
  } else if len(small) < k - 1 {
    return kth_number(big, k - len(small) - 1)
  } else {
    return kth_number(small, k)
  }
}

print(str(kth_number([2, 1, 3, 4, 5], 3)))
print(str(kth_number([2, 1, 3, 4, 5], 1)))
print(str(kth_number([2, 1, 3, 4, 5], 5)))
print(str(kth_number([3, 2, 5, 6, 7, 8], 2)))
print(str(kth_number([25, 21, 98, 100, 76, 22, 43, 60, 89, 87], 4)))
