/*
Interest Calculations

This module implements three basic financial formulas:

1. Simple Interest:  interest = principal * daily_rate * days
   Calculates interest earned with no compounding. Inputs must be
   positive principal, non-negative daily rate, and a positive number of days.

2. Compound Interest: interest = principal * ((1 + rate)^periods - 1)
   Computes interest when it is compounded a certain number of times.
   Uses a small power helper to perform exponentiation without FFI.

3. APR Interest: calls compound_interest using daily compounding.
   APR (annual percentage rate) is converted to a daily rate and applied
   over days in the given number of years.

Each function performs basic validation and prints an error message if
parameters are out of range, returning 0.0 in that case.
*/

fun panic(msg: string) {
  print(msg)
}

fun powf(base: float, exp: float): float {
  var result = 1.0
  var i = 0
  while i < exp as int {
    result = result * base
    i = i + 1
  }
  return result
}

fun simple_interest(principal: float, daily_rate: float, days: float): float {
  if days <= 0.0 {
    panic("days_between_payments must be > 0")
    return 0.0
  }
  if daily_rate < 0.0 {
    panic("daily_interest_rate must be >= 0")
    return 0.0
  }
  if principal <= 0.0 {
    panic("principal must be > 0")
    return 0.0
  }
  return principal * daily_rate * days
}

fun compound_interest(principal: float, nominal_rate: float, periods: float): float {
  if periods <= 0.0 {
    panic("number_of_compounding_periods must be > 0")
    return 0.0
  }
  if nominal_rate < 0.0 {
    panic("nominal_annual_interest_rate_percentage must be >= 0")
    return 0.0
  }
  if principal <= 0.0 {
    panic("principal must be > 0")
    return 0.0
  }
  return principal * (powf(1.0 + nominal_rate, periods) - 1.0)
}

fun apr_interest(principal: float, apr: float, years: float): float {
  if years <= 0.0 {
    panic("number_of_years must be > 0")
    return 0.0
  }
  if apr < 0.0 {
    panic("nominal_annual_percentage_rate must be >= 0")
    return 0.0
  }
  if principal <= 0.0 {
    panic("principal must be > 0")
    return 0.0
  }
  return compound_interest(principal, apr / 365.0, years * 365.0)
}

fun main() {
  print(str(simple_interest(18000.0, 0.06, 3.0)))
  print(str(simple_interest(0.5, 0.06, 3.0)))
  print(str(simple_interest(18000.0, 0.01, 10.0)))
  print(str(compound_interest(10000.0, 0.05, 3.0)))
  print(str(compound_interest(10000.0, 0.05, 1.0)))
  print(str(apr_interest(10000.0, 0.05, 3.0)))
  print(str(apr_interest(10000.0, 0.05, 1.0)))
}

main()
