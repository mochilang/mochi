/*
Apply mean thresholding to a grayscale image represented as a 2D list of
pixel intensities (0-255).  The algorithm computes the average value of
all pixels and then assigns each pixel to 255 if it exceeds the mean
or 0 otherwise.  This produces a binary image based on global intensity
statistics.  Time complexity is O(n*m) for an n by m image as every pixel
is inspected twice: once for summation and once for thresholding.
*/

fun mean_threshold(image: list<list<int>>): list<list<int>> {
  let height = len(image)
  let width = len(image[0])
  var total = 0
  var i = 0
  while i < height {
    var j = 0
    while j < width {
      total = total + image[i][j]
      j = j + 1
    }
    i = i + 1
  }
  let mean = total / (height * width)
  i = 0
  while i < height {
    var j = 0
    while j < width {
      if image[i][j] > mean {
        image[i][j] = 255
      } else {
        image[i][j] = 0
      }
      j = j + 1
    }
    i = i + 1
  }
  return image
}

fun print_image(image: list<list<int>>) {
  var i = 0
  while i < len(image) {
    print(image[i])
    i = i + 1
  }
}

let img = [
  [10, 200, 50],
  [100, 150, 30],
  [90, 80, 220],
]

let result = mean_threshold(img)
print_image(result)
