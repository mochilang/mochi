/*
Implement a basic singly linked list of integers using a dynamic array to
store elements.  The interface mimics a traditional singly linked list with
operations to insert or delete at any position, query by index, reverse the
list, and inspect its contents.  Each operation runs in O(n) time where n is
the number of traversed elements.  The demonstration builds a list, performs
several insertions and deletions, updates a value, reverses the list, and
prints intermediate states and removed values.
*/

type SinglyLinkedList {
  data: list<int>
}

fun empty_list(): SinglyLinkedList {
  return SinglyLinkedList { data: [] }
}

fun length(list: SinglyLinkedList): int {
  return len(list.data)
}

fun is_empty(list: SinglyLinkedList): bool {
  return len(list.data) == 0
}

fun to_string(list: SinglyLinkedList): string {
  if len(list.data) == 0 { return "" }
  var s = str(list.data[0])
  var i = 1
  while i < len(list.data) {
    s = s + " -> " + str(list.data[i])
    i = i + 1
  }
  return s
}

fun insert_nth(list: SinglyLinkedList, index: int, value: int): SinglyLinkedList {
  if index < 0 || index > len(list.data) { panic("index out of range") }
  var res: list<int> = []
  var i = 0
  while i < index {
    res = append(res, list.data[i])
    i = i + 1
  }
  res = append(res, value)
  while i < len(list.data) {
    res = append(res, list.data[i])
    i = i + 1
  }
  return SinglyLinkedList { data: res }
}

fun insert_head(list: SinglyLinkedList, value: int): SinglyLinkedList {
  return insert_nth(list, 0, value)
}

fun insert_tail(list: SinglyLinkedList, value: int): SinglyLinkedList {
  return insert_nth(list, len(list.data), value)
}

type DeleteResult {
  list: SinglyLinkedList
  value: int
}

fun delete_nth(list: SinglyLinkedList, index: int): DeleteResult {
  if index < 0 || index >= len(list.data) { panic("index out of range") }
  var res: list<int> = []
  var val = 0
  var i = 0
  while i < len(list.data) {
    if i == index {
      val = list.data[i]
    } else {
      res = append(res, list.data[i])
    }
    i = i + 1
  }
  return DeleteResult { list: SinglyLinkedList { data: res }, value: val }
}

fun delete_head(list: SinglyLinkedList): DeleteResult {
  return delete_nth(list, 0)
}

fun delete_tail(list: SinglyLinkedList): DeleteResult {
  return delete_nth(list, len(list.data) - 1)
}

fun get_item(list: SinglyLinkedList, index: int): int {
  if index < 0 || index >= len(list.data) { panic("index out of range") }
  return list.data[index]
}

fun set_item(list: SinglyLinkedList, index: int, value: int): SinglyLinkedList {
  if index < 0 || index >= len(list.data) { panic("index out of range") }
  var res: list<int> = []
  var i = 0
  while i < len(list.data) {
    if i == index {
      res = append(res, value)
    } else {
      res = append(res, list.data[i])
    }
    i = i + 1
  }
  return SinglyLinkedList { data: res }
}

fun reverse_list(list: SinglyLinkedList): SinglyLinkedList {
  var res: list<int> = []
  var i = len(list.data) - 1
  while i >= 0 {
    res = append(res, list.data[i])
    i = i - 1
  }
  return SinglyLinkedList { data: res }
}

fun main() {
  var lst = empty_list()
  var i = 1
  while i <= 5 {
    lst = insert_tail(lst, i)
    i = i + 1
  }
  print(to_string(lst))
  lst = insert_head(lst, 0)
  print(to_string(lst))
  var del = delete_head(lst)
  lst = del.list
  print(str(del.value))
  del = delete_tail(lst)
  lst = del.list
  print(str(del.value))
  del = delete_nth(lst, 2)
  lst = del.list
  print(str(del.value))
  lst = set_item(lst, 1, 99)
  print(str(get_item(lst, 1)))
  lst = reverse_list(lst)
  print(to_string(lst))
}

main()
