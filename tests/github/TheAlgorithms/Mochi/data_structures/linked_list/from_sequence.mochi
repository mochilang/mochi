/*
Construct a singly linked list from a sequence of integers. Each node
stores an integer and the index of its successor; -1 represents the
end of the list. The make_linked_list function takes a list of integers
and returns the index of the head node. node_to_string creates a string
representation in the form "<1> ---> <2> ---> <END>".

The demonstration builds a list from a sample array and prints both the
original array and the linked list string.
*/

type Node {
  data: int,
  next: int,
}

let NIL = 0 - 1
var nodes: list<Node> = []

fun make_linked_list(elements: list<int>): int {
  if len(elements) == 0 { panic("The Elements List is empty") }
  nodes = []
  nodes = append(nodes, Node { data: elements[0], next: NIL })
  var head = 0
  var current = head
  var i = 1
  while i < len(elements) {
    nodes = append(nodes, Node { data: elements[i], next: NIL })
    nodes[current].next = len(nodes) - 1
    current = len(nodes) - 1
    i = i + 1
  }
  return head
}

fun node_to_string(head: int): string {
  var s = ""
  var index = head
  while index != NIL {
    let node = nodes[index]
    s = s + "<" + str(node.data) + "> ---> "
    index = node.next
  }
  s = s + "<END>"
  return s
}

fun main() {
  let list_data: list<int> = [1, 3, 5, 32, 44, 12, 43]
  print("List: " + str(list_data))
  print("Creating Linked List from List.")
  let head = make_linked_list(list_data)
  print("Linked List:")
  print(node_to_string(head))
}

main()
