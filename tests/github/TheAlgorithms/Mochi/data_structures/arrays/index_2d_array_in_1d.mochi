/*
Indexing into a flattened 2D array
----------------------------------
Provides a simple iterator over a two dimensional array and a function
that retrieves the value at a 0-indexed position as if the matrix were
flattened in row-major order. The iterator walks each row and collects
all elements sequentially. The lookup function computes the row and
column via integer division and modulus, validating bounds and raising
errors for empty matrices or out-of-range indices. Iteration touches
all n*m elements while a single lookup runs in O(1).
*/

fun iterator_values(matrix: list<list<int>>): list<int> {
  var result: list<int> = []
  for row in matrix {
    for value in row {
      result = append(result, value)
    }
  }
  return result
}

fun index_2d_array_in_1d(array: list<list<int>>, index: int): int {
  let rows = len(array)
  let cols = len(array[0])
  if rows == 0 || cols == 0 {
    panic("no items in array")
  }
  if index < 0 || index >= rows * cols {
    panic("index out of range")
  }
  return array[int(index / cols)][index % cols]
}

print(str(iterator_values([[5], [-523], [-1], [34], [0]])))
print(str(iterator_values([[5, -523, -1], [34, 0]])))
print(str(index_2d_array_in_1d([[0,1,2,3],[4,5,6,7],[8,9,10,11]], 5)))
