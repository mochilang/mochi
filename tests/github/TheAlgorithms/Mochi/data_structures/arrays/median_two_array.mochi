/*
Median of Two Arrays

Given two arrays of numbers, find the median of the combined dataset.
Both arrays may be empty individually but not simultaneously. The
algorithm concatenates the arrays, sorts the resulting list using a
simple bubble sort, and then selects the middle element(s). If the
combined length is odd, the middle value is returned. If even, the
median is the average of the two central values.
Time complexity: O((m+n)^2) due to bubble sort.
Space complexity: O(m+n) for the merged list.
*/

fun sortFloats(xs: list<float>): list<float> {
  var arr = xs
  var i = 0
  while i < len(arr) {
    var j = 0
    while j < len(arr) - 1 {
      if arr[j] > arr[j + 1] {
        let t = arr[j]
        arr[j] = arr[j + 1]
        arr[j + 1] = t
      }
      j = j + 1
    }
    i = i + 1
  }
  return arr
}

fun find_median_sorted_arrays(nums1: list<float>, nums2: list<float>): float {
  if len(nums1) == 0 && len(nums2) == 0 { panic("Both input arrays are empty.") }
  var merged: list<float> = []
  var i = 0
  while i < len(nums1) {
    merged = append(merged, nums1[i])
    i = i + 1
  }
  var j = 0
  while j < len(nums2) {
    merged = append(merged, nums2[j])
    j = j + 1
  }
  let sorted = sortFloats(merged)
  let total = len(sorted)
  if total % 2 == 1 {
    return sorted[total / 2]
  }
  let middle1 = sorted[total / 2 - 1]
  let middle2 = sorted[total / 2]
  return (middle1 + middle2) / 2.0
}

print(find_median_sorted_arrays([1.0, 3.0], [2.0]))
print(find_median_sorted_arrays([1.0, 2.0], [3.0, 4.0]))
print(find_median_sorted_arrays([0.0, 0.0], [0.0, 0.0]))
print(find_median_sorted_arrays([] as list<float>, [1.0]))
print(find_median_sorted_arrays([-1000.0], [1000.0]))
print(find_median_sorted_arrays([-1.1, -2.2], [-3.3, -4.4]))
