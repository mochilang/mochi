/*
Compute the nth Fibonacci number using matrix exponentiation.

The Fibonacci sequence satisfies f(n) = f(n-1) + f(n-2).
This relation can be expressed as multiplying the vector [f(n-1), f(n-2)]
by the matrix [[1,1],[1,0]].  Raising this matrix to the (n-1)th power
and multiplying it by the base vector [f(1), f(0)] yields f(n).
Exponentiation by squaring performs the power in O(log n) matrix
multiplications, each requiring eight integer multiplications for
2x2 matrices. A simple iterative brute-force method is also provided
for comparison.  Implemented in pure Mochi without FFI or the "any"
type so it runs on runtime/vm.
*/

fun multiply(matrix_a: list<list<int>>, matrix_b: list<list<int>>): list<list<int>> {
  let n = len(matrix_a)
  var matrix_c: list<list<int>> = []
  var i = 0
  while i < n {
    var row: list<int> = []
    var j = 0
    while j < n {
      var val = 0
      var k = 0
      while k < n {
        val = val + matrix_a[i][k] * matrix_b[k][j]
        k = k + 1
      }
      row = append(row, val)
      j = j + 1
    }
    matrix_c = append(matrix_c, row)
    i = i + 1
  }
  return matrix_c
}

fun identity(n: int): list<list<int>> {
  var res: list<list<int>> = []
  var i = 0
  while i < n {
    var row: list<int> = []
    var j = 0
    while j < n {
      if i == j {
        row = append(row, 1)
      } else {
        row = append(row, 0)
      }
      j = j + 1
    }
    res = append(res, row)
    i = i + 1
  }
  return res
}

fun nth_fibonacci_matrix(n: int): int {
  if n <= 1 {
    return n
  }
  var res_matrix = identity(2)
  var fib_matrix = [[1, 1], [1, 0]]
  var m = n - 1
  while m > 0 {
    if m % 2 == 1 {
      res_matrix = multiply(res_matrix, fib_matrix)
    }
    fib_matrix = multiply(fib_matrix, fib_matrix)
    m = m / 2
  }
  return res_matrix[0][0]
}

fun nth_fibonacci_bruteforce(n: int): int {
  if n <= 1 {
    return n
  }
  var fib0 = 0
  var fib1 = 1
  var i = 2
  while i <= n {
    let next = fib0 + fib1
    fib0 = fib1
    fib1 = next
    i = i + 1
  }
  return fib1
}

fun parse_number(s: string): int {
  var result = 0
  var i = 0
  while i < len(s) {
    let ch = substring(s, i, i + 1)
    if ch >= "0" && ch <= "9" {
      result = result * 10 + (ch as int)
    }
    i = i + 1
  }
  return result
}

fun main() {
  let ordinals = ["0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"]
  var i = 0
  while i < len(ordinals) {
    let ordinal = ordinals[i]
    let n = parse_number(ordinal)
    let msg = ordinal + " fibonacci number using matrix exponentiation is " + str(nth_fibonacci_matrix(n)) + " and using bruteforce is " + str(nth_fibonacci_bruteforce(n))
    print(msg)
    i = i + 1
  }
}

main()
