/*
Given a vector of integers and a positive step size, determine the
minimum number of update operations needed to make all elements
identical. An update replaces the current element and the next
step_size - 1 elements with a chosen target value. For each unique
value in the vector, the algorithm simulates this process: traverse
the array and when a mismatch with the target value is found,
perform an update and skip ahead by step_size positions; otherwise,
advance by one. The minimal count across all candidate targets is
the answer. Time complexity is O(n * u) where n is the length of the
vector and u is the number of distinct values.
*/

fun unique(nums: list<int>): list<int> {
  var res: list<int> = []
  var i = 0
  while i < len(nums) {
    let v = nums[i]
    var found = false
    var j = 0
    while j < len(res) {
      if res[j] == v {
        found = true
        break
      }
      j = j + 1
    }
    if !found {
      res = append(res, v)
    }
    i = i + 1
  }
  return res
}

fun array_equalization(vector: list<int>, step_size: int): int {
  if step_size <= 0 {
    error("Step size must be positive and non-zero.")
  }
  let elems = unique(vector)
  var min_updates = len(vector)
  var i = 0
  while i < len(elems) {
    let target = elems[i]
    var idx = 0
    var updates = 0
    while idx < len(vector) {
      if vector[idx] != target {
        updates = updates + 1
        idx = idx + step_size
      } else {
        idx = idx + 1
      }
    }
    if updates < min_updates {
      min_updates = updates
    }
    i = i + 1
  }
  return min_updates
}

print(str(array_equalization([1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2], 4)))
print(str(array_equalization([22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92], 2)))
print(str(array_equalization([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5)))
print(str(array_equalization([22, 22, 22, 33, 33, 33], 2)))
print(str(array_equalization([1, 2, 3], 2147483647)))
