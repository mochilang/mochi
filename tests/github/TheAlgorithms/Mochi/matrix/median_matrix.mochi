/*
Median of a matrix
------------------
This program finds the median value of a matrix containing integers.
The matrix is assumed to be sorted row-wise.

Algorithm:
1. Flatten the 2D matrix into a single list of all elements.
2. Sort the flattened list using a simple bubble sort (O(n^2)).
3. The median of an odd-length list is the element at index (n-1) / 2.

Examples:
[[1, 3, 5], [2, 6, 9], [3, 6, 9]] -> 5
[[1, 2, 3], [4, 5, 6]] -> 3
*/

fun bubble_sort(a: list<int>): list<int> {
  var arr = a
  let n = len(arr)
  var i = 0
  while i < n {
    var j = 0
    while j + 1 < n - i {
      if arr[j] > arr[j + 1] {
        let temp = arr[j]
        arr[j] = arr[j + 1]
        arr[j + 1] = temp
      }
      j = j + 1
    }
    i = i + 1
  }
  return arr
}

fun median(matrix: list<list<int>>): int {
  var linear: list<int> = []
  var i = 0
  while i < len(matrix) {
    let row = matrix[i]
    var j = 0
    while j < len(row) {
      linear = append(linear, row[j])
      j = j + 1
    }
    i = i + 1
  }
  let sorted = bubble_sort(linear)
  let mid = (len(sorted) - 1) / 2
  return sorted[mid]
}

let matrix1: list<list<int>> = [[1, 3, 5], [2, 6, 9], [3, 6, 9]]
print(str(median(matrix1)))

let matrix2: list<list<int>> = [[1, 2, 3], [4, 5, 6]]
print(str(median(matrix2)))
