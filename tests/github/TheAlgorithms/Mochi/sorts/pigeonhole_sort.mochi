/*
Pigeonhole Sort
---------------
Pigeonhole sort orders a list of integers by counting occurrences of each
value. The algorithm creates an array of "holes" covering the range from the
minimum to the maximum element. Each input number increments its hole.
Finally the holes are scanned from smallest to largest index and the original
array is rebuilt in sorted order. The complexity is O(n + N) where n is the
number of elements and N is the value range, using O(N) extra space.
*/

fun pigeonhole_sort(arr: list<int>): list<int> {
  if len(arr) == 0 { return arr }
  let min_val = min(arr) as int
  let max_val = max(arr) as int
  let size: int = max_val - min_val + 1

  var holes: list<int> = []
  var i = 0
  while i < size {
    holes = append(holes, 0)
    i = i + 1
  }

  i = 0
  while i < len(arr) {
    let x = arr[i]
    let index = x - min_val
    holes[index] = holes[index] + 1
    i = i + 1
  }

  var sorted_index = 0
  var count = 0
  while count < size {
    while holes[count] > 0 {
      arr[sorted_index] = count + min_val
      holes[count] = holes[count] - 1
      sorted_index = sorted_index + 1
    }
    count = count + 1
  }
  return arr
}

let example: list<int> = [8, 3, 2, 7, 4, 6, 8]
let result = pigeonhole_sort(example)

var output = "Sorted order is:"
var j = 0
while j < len(result) {
  output = output + " " + str(result[j])
  j = j + 1
}
print(output)
