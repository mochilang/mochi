/*
Sort a list containing only the three values 0, 1, and 2 using the
Dutch National Flag algorithm. The method maintains three regions:
0s at the beginning, 1s in the middle, and 2s at the end. Pointers
`low`, `mid`, and `high` delimit these regions. When the value at `mid`
is 0, it is swapped toward the front; if it is 2, it is swapped toward
the end; and if it is 1, the pointer simply advances. Any value other
than 0, 1, or 2 triggers a panic. This algorithm runs in O(n) time and
uses O(1) extra space.
*/

fun dutch_national_flag_sort(seq: list<int>): list<int> {
  var a = seq
  var low: int = 0
  var mid: int = 0
  var high: int = len(a) - 1
  while mid <= high {
    let v = a[mid]
    if v == 0 {
      let tmp = a[low]
      a[low] = v
      a[mid] = tmp
      low = low + 1
      mid = mid + 1
    } else if v == 1 {
      mid = mid + 1
    } else if v == 2 {
      let tmp2 = a[high]
      a[high] = v
      a[mid] = tmp2
      high = high - 1
    } else {
      panic("The elements inside the sequence must contains only (0, 1, 2) values")
    }
  }
  return a
}

print(dutch_national_flag_sort([]))
print(dutch_national_flag_sort([0]))
print(dutch_national_flag_sort([2, 1, 0, 0, 1, 2]))
print(dutch_national_flag_sort([0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]))
