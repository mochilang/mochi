/*
Recursive merge sort that sorts an array in place.

This algorithm recursively splits the input list into halves until
single-element sublists remain, then merges the sorted halves back
into the original list using three indices:

- left_index: current index in the left sublist
- right_index: current index in the right sublist
- index: current write position in the original array

During merging, the smaller of the two current elements from the left
and right sublists is written into the original array. After one side
is exhausted, the remaining elements from the other side are copied.

Time complexity: O(n log n)
Space complexity: O(n) extra space for the temporary sublists.
*/

fun subarray(xs: list<int>, start: int, end: int): list<int> {
  var result: list<int> = []
  var k = start
  while k < end {
    result = append(result, xs[k])
    k = k + 1
  }
  return result
}

fun merge(arr: list<int>): list<int> {
  if len(arr) > 1 {
    let middle_length = len(arr) / 2
    let left_array = subarray(arr, 0, middle_length)
    let right_array = subarray(arr, middle_length, len(arr))
    let left_size = len(left_array)
    let right_size = len(right_array)
    merge(left_array)
    merge(right_array)
    var left_index = 0
    var right_index = 0
    var index = 0
    while left_index < left_size && right_index < right_size {
      if left_array[left_index] < right_array[right_index] {
        arr[index] = left_array[left_index]
        left_index = left_index + 1
      } else {
        arr[index] = right_array[right_index]
        right_index = right_index + 1
      }
      index = index + 1
    }
    while left_index < left_size {
      arr[index] = left_array[left_index]
      left_index = left_index + 1
      index = index + 1
    }
    while right_index < right_size {
      arr[index] = right_array[right_index]
      right_index = right_index + 1
      index = index + 1
    }
  }
  return arr
}

print(str(merge([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])))
print(str(merge([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))
print(str(merge([10, 22, 1, 2, 3, 9, 15, 23])))
print(str(merge([100])))
print(str(merge([])))
