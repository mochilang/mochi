/*
Pigeonhole Sort Algorithm

Pigeonhole sort is a sorting algorithm for lists of integers within a known range.
1. Find the minimum and maximum values to determine the number of pigeonholes.
2. Allocate arrays of holes and counts for each value in range.
3. Place each element in its corresponding hole and increment its count.
4. Reconstruct the sorted array by iterating over holes and counts.

This implementation supports negative numbers and preserves duplicates.
*/

fun make_list(n: int, value: int): list<int> {
  var result: list<int> = []
  var i = 0
  while i < n {
    result = append(result, value)
    i = i + 1
  }
  return result
}

fun min_value(arr: list<int>): int {
  var m = arr[0]
  var i = 1
  while i < len(arr) {
    if arr[i] < m {
      m = arr[i]
    }
    i = i + 1
  }
  return m
}

fun max_value(arr: list<int>): int {
  var m = arr[0]
  var i = 1
  while i < len(arr) {
    if arr[i] > m {
      m = arr[i]
    }
    i = i + 1
  }
  return m
}

fun pigeon_sort(array: list<int>): list<int> {
  if len(array) == 0 {
    return array
  }

  let mn = min_value(array)
  let mx = max_value(array)
  let holes_range = mx - mn + 1
  var holes: list<int> = make_list(holes_range, 0)
  var holes_repeat: list<int> = make_list(holes_range, 0)

  var i = 0
  while i < len(array) {
    let index = array[i] - mn
    holes[index] = array[i]
    holes_repeat[index] = holes_repeat[index] + 1
    i = i + 1
  }

  var array_index = 0
  var h = 0
  while h < holes_range {
    while holes_repeat[h] > 0 {
      array[array_index] = holes[h]
      array_index = array_index + 1
      holes_repeat[h] = holes_repeat[h] - 1
    }
    h = h + 1
  }
  return array
}

print(str(pigeon_sort([0, 5, 3, 2, 2])))
print(str(pigeon_sort([])))
print(str(pigeon_sort([-2, -5, -45])))
