/*
Iterative Merge Sort
--------------------
Sorts a list of integers using a bottom-up, iterative merge sort. The list is
repeatedly merged in pairs of sublists whose size doubles each pass. A helper
function merges two adjacent sorted sublists defined by indices [low:mid) and
[mid:high]. After processing all blocks of size `p`, a final merge combines the
two halves. Time complexity is O(n log n) with O(n) auxiliary space.
The implementation uses only core Mochi features so it runs on runtime/vm
without any FFI and avoids the `any` type.
*/

fun merge(a: list<int>, low: int, mid: int, high: int): list<int> {
  var left: list<int> = a[low:mid]
  var right: list<int> = a[mid:high+1]
  var result: list<int> = []
  while len(left) > 0 && len(right) > 0 {
    if left[0] <= right[0] {
      result = append(result, left[0])
      left = left[1:]
    } else {
      result = append(result, right[0])
      right = right[1:]
    }
  }
  var i = 0
  while i < len(left) {
    result = append(result, left[i])
    i = i + 1
  }
  i = 0
  while i < len(right) {
    result = append(result, right[i])
    i = i + 1
  }
  i = 0
  while i < len(result) {
    a[low + i] = result[i]
    i = i + 1
  }
  return a
}

fun iter_merge_sort(items: list<int>): list<int> {
  let n = len(items)
  if n <= 1 { return items }
  var arr = items[0:]
  var p = 2
  while p <= n {
    var i = 0
    while i < n {
      var high = i + p - 1
      if high >= n { high = n - 1 }
      let low = i
      let mid = (low + high + 1) / 2
      arr = merge(arr, low, mid, high)
      i = i + p
    }
    if p * 2 >= n {
      let mid2 = i - p
      arr = merge(arr, 0, mid2, n - 1)
      break
    }
    p = p * 2
  }
  return arr
}

fun list_to_string(arr: list<int>): string {
  var s = "["
  var i = 0
  while i < len(arr) {
    s = s + str(arr[i])
    if i < len(arr) - 1 { s = s + ", " }
    i = i + 1
  }
  return s + "]"
}

print(list_to_string(iter_merge_sort([5, 9, 8, 7, 1, 2, 7])))
print(list_to_string(iter_merge_sort([1])))
print(list_to_string(iter_merge_sort([2, 1])))
print(list_to_string(iter_merge_sort([4, 3, 2, 1])))
print(list_to_string(iter_merge_sort([5, 4, 3, 2, 1])))
print(list_to_string(iter_merge_sort([-2, -9, -1, -4])))
print(list_to_string(iter_merge_sort([])))
