/*
Comb sort is an improvement over bubble sort that eliminates small values ("turtles")
by comparing and swapping elements separated by a gap that shrinks by a fixed
shrink factor (commonly 1.3). Starting with a gap equal to the list length, the
gap is divided by the shrink factor each pass. When the gap reaches 1, a final
bubble sort pass is performed. The process repeats until a full pass with gap 1
occurs without any swaps, ensuring the list is sorted.
*/

fun comb_sort(data: list<int>): list<int> {
  let shrink_factor = 1.3
  var gap = len(data)
  var completed = false
  while !completed {
    gap = int(gap / shrink_factor)
    if gap <= 1 {
      gap = 1
      completed = true
    }
    var index = 0
    while index + gap < len(data) {
      if data[index] > data[index + gap] {
        let tmp = data[index]
        data[index] = data[index + gap]
        data[index + gap] = tmp
        completed = false
      }
      index = index + 1
    }
  }
  return data
}

fun main() {
  print(comb_sort([0, 5, 3, 2, 2]))
  print(comb_sort([]))
  print(comb_sort([99, 45, -7, 8, 2, 0, -15, 3]))
}

main()
