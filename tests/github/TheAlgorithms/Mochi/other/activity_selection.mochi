/*
Activity Selection Problem
--------------------------
Given a list of activities with start and finish times already sorted by
finish time, choose the maximum number of activities that can be performed by
one person assuming a person can only work on a single activity at a time.

The greedy algorithm chooses the first activity and then iteratively selects
the next activity with a start time greater than or equal to the finish time
of the last selected activity. This implementation prints the indices of the
selected activities for a given start and finish time list.
*/

fun print_max_activities(start: list<int>, finish: list<int>): unit {
    let n: int = len(finish)
    print("The following activities are selected:")

    var i: int = 0
    var result: string = "0,"
    var j: int = 1
    while j < n {
        if start[j] >= finish[i] {
            result = result + str(j) + ","
            i = j
        }
        j = j + 1
    }
    print(result)
}

let start: list<int> = [1, 3, 0, 5, 8, 5]
let finish: list<int> = [2, 4, 6, 7, 9, 9]
print_max_activities(start, finish)
