/*
Calculate the h-index for a researcher given a list of citation counts.

The h-index is the largest number h such that the researcher has at least h
papers with h or more citations each, while the remaining papers have no more
than h citations. This implementation sorts the citation counts using merge
sort and then scans from the highest citation counts downwards until the
condition is met. Sorting provides an O(n log n) time complexity and the scan
runs in O(n). Space complexity is O(n) for the sorted copy.
*/

fun subarray(xs: list<int>, start: int, end: int): list<int> {
  var result: list<int> = []
  var k = start
  while k < end {
    result = append(result, xs[k])
    k = k + 1
  }
  return result
}

fun merge(left_half: list<int>, right_half: list<int>): list<int> {
  var result: list<int> = []
  var i = 0
  var j = 0
  while i < len(left_half) && j < len(right_half) {
    if left_half[i] < right_half[j] {
      result = append(result, left_half[i])
      i = i + 1
    } else {
      result = append(result, right_half[j])
      j = j + 1
    }
  }
  while i < len(left_half) {
    result = append(result, left_half[i])
    i = i + 1
  }
  while j < len(right_half) {
    result = append(result, right_half[j])
    j = j + 1
  }
  return result
}

fun merge_sort(array: list<int>): list<int> {
  if len(array) <= 1 {
    return array
  }
  let middle = len(array) / 2
  let left_half = subarray(array, 0, middle)
  let right_half = subarray(array, middle, len(array))
  let sorted_left = merge_sort(left_half)
  let sorted_right = merge_sort(right_half)
  return merge(sorted_left, sorted_right)
}

fun h_index(citations: list<int>): int {
  var idx = 0
  while idx < len(citations) {
    if citations[idx] < 0 {
      panic("The citations should be a list of non negative integers.")
    }
    idx = idx + 1
  }
  let sorted = merge_sort(citations)
  let n = len(sorted)
  var i = 0
  while i < n {
    if sorted[n - 1 - i] <= i {
      return i
    }
    i = i + 1
  }
  return n
}

print(str(h_index([3, 0, 6, 1, 5])))
print(str(h_index([1, 3, 1])))
print(str(h_index([1, 2, 3])))
