/*
Minimum Waiting Time via Greedy Scheduling

Given a list of query durations, schedule them so the total waiting
 time is minimized.  The optimal strategy sorts the queries in
 nonâ€‘decreasing order and executes them in that sequence.  Each query
 contributes its duration to every query that follows it, so the first
 queries should be the shortest.

Algorithm:
1. Sort the list of query times in ascending order using insertion sort.
2. For each query at index i, add query * (n - i - 1) to the total, where
   n is the number of queries and (n - i - 1) counts the remaining
   queries that must wait.

This greedy approach produces the minimum total waiting time.  Sorting
 dominates the complexity at O(n^2) for insertion sort (sufficient for
 small inputs) and O(1) extra space.
*/

fun insertion_sort(a: list<int>): list<int> {
  var i = 1
  while i < len(a) {
    let key = a[i]
    var j = i - 1
    while j >= 0 && a[j] > key {
      a[j + 1] = a[j]
      j = j - 1
    }
    a[j + 1] = key
    i = i + 1
  }
  return a
}

fun minimum_waiting_time(queries: list<int>): int {
  let n = len(queries)
  if n == 0 || n == 1 {
    return 0
  }
  let sorted = insertion_sort(queries)
  var total = 0
  var i = 0
  while i < n {
    total = total + sorted[i] * (n - i - 1)
    i = i + 1
  }
  return total
}

print(minimum_waiting_time([3, 2, 1, 2, 6]))
print(minimum_waiting_time([3, 2, 1]))
print(minimum_waiting_time([1, 2, 3, 4]))
print(minimum_waiting_time([5, 5, 5, 5]))
print(minimum_waiting_time([]))

