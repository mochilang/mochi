/*
Median filter algorithm for removing noise from grayscale images.
For each pixel that has a complete neighborhood defined by an odd
square mask, the algorithm collects the surrounding mask×mask
pixels, sorts them using insertion sort, and replaces the central
pixel with the median value. Pixels near the border remain zero in
this simplified implementation. The complexity for an R×C image with
mask size M is O(R * C * M^2), as each pixel processes M^2 values.
*/

fun insertion_sort(a: list<int>): list<int> {
  var i = 1
  while i < len(a) {
    let key = a[i]
    var j = i - 1
    while j >= 0 && a[j] > key {
      a[j + 1] = a[j]
      j = j - 1
    }
    a[j + 1] = key
    i = i + 1
  }
  return a
}

fun median_filter(gray_img: list<list<int>>, mask: int): list<list<int>> {
  let rows = len(gray_img)
  let cols = len(gray_img[0])
  let bd = mask / 2
  var result: list<list<int>> = []
  var i = 0
  while i < rows {
    var row: list<int> = []
    var j = 0
    while j < cols {
      row = append(row, 0)
      j = j + 1
    }
    result = append(result, row)
    i = i + 1
  }

  i = bd
  while i < rows - bd {
    var j = bd
    while j < cols - bd {
      var kernel: list<int> = []
      var x = i - bd
      while x <= i + bd {
        var y = j - bd
        while y <= j + bd {
          kernel = append(kernel, gray_img[x][y])
          y = y + 1
        }
        x = x + 1
      }
      kernel = insertion_sort(kernel)
      let idx = (mask * mask) / 2
      result[i][j] = kernel[idx]
      j = j + 1
    }
    i = i + 1
  }
  return result
}

fun main() {
  let img: list<list<int>> = [
    [10, 10, 10, 10, 10],
    [10, 255, 10, 255, 10],
    [10, 10, 10, 10, 10],
    [10, 255, 10, 255, 10],
    [10, 10, 10, 10, 10]
  ]
  let filtered = median_filter(img, 3)
  print(filtered)
}

main()
