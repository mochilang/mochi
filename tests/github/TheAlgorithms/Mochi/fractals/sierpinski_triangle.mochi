/*
Generate points of the Sierpinski triangle using recursion.
The Sierpinski triangle is built by repeatedly subdividing an
equilateral triangle into four smaller triangles and removing
the central one.  This implementation prints the vertices of
each triangle encountered in the recursion, starting from the
outer triangle down to the smallest triangles at the given
recursion depth.
Time complexity is O(3^d) for depth d because each call spawns
three additional recursive calls until the base case is reached.
*/

type Point {
  x: int
  y: int
}

fun get_mid(p1: Point, p2: Point): Point {
  return Point{x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2}
}

fun point_to_string(p: Point): string {
  return "(" + str(p.x) + "," + str(p.y) + ")"
}

fun triangle(v1: Point, v2: Point, v3: Point, depth: int) {
  print(point_to_string(v1) + " " + point_to_string(v2) + " " + point_to_string(v3))
  if depth == 0 {
    return
  }
  triangle(v1, get_mid(v1, v2), get_mid(v1, v3), depth - 1)
  triangle(v2, get_mid(v1, v2), get_mid(v2, v3), depth - 1)
  triangle(v3, get_mid(v3, v2), get_mid(v1, v3), depth - 1)
}

triangle(Point{x: -175, y: -125}, Point{x: 0, y: 175}, Point{x: 175, y: -125}, 2)
