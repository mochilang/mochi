/*
Sudoku Solver using Backtracking

Given a 9x9 grid with some cells filled with digits 1-9 and the rest
represented by 0, the goal is to fill the empty cells so that each row,
column and each of the nine 3x3 subgrids contain all digits from 1 to 9
exactly once.

The algorithm searches for an empty cell, then tries digits 1 through 9.
For each digit we check whether placing it violates Sudoku constraints.
If a digit is valid we recurse to fill the rest of the grid. When no digit
leads to a solution we backtrack by resetting the cell to 0. The process
continues until the puzzle is solved or determined unsolvable.
*/

fun is_safe(grid: list<list<int>>, row: int, column: int, n: int): bool {
  for i in 0..9 {
    if grid[row][i] == n || grid[i][column] == n {
      return false
    }
  }
  for i in 0..3 {
    for j in 0..3 {
      if grid[(row - row % 3) + i][(column - column % 3) + j] == n {
        return false
      }
    }
  }
  return true
}

fun find_empty_location(grid: list<list<int>>): list<int> {
  for i in 0..9 {
    for j in 0..9 {
      if grid[i][j] == 0 {
        return [i, j]
      }
    }
  }
  return []
}

fun sudoku(grid: list<list<int>>): bool {
  let loc = find_empty_location(grid)
  if len(loc) == 0 {
    return true
  }
  let row = loc[0]
  let column = loc[1]
  for digit in 1..10 {
    if is_safe(grid, row, column, digit) {
      grid[row][column] = digit
      if sudoku(grid) {
        return true
      }
      grid[row][column] = 0
    }
  }
  return false
}

fun print_solution(grid: list<list<int>>): void {
  for r in 0..len(grid) {
    var line = ""
    for c in 0..len(grid[r]) {
      line = line + str(grid[r][c])
      if c < len(grid[r]) - 1 {
        line = line + " "
      }
    }
    print(line)
  }
}

let initial_grid = [
  [3,0,6,5,0,8,4,0,0],
  [5,2,0,0,0,0,0,0,0],
  [0,8,7,0,0,0,0,3,1],
  [0,0,3,0,1,0,0,8,0],
  [9,0,0,8,6,3,0,0,5],
  [0,5,0,0,9,0,6,0,0],
  [1,3,0,0,0,0,2,5,0],
  [0,0,0,0,0,0,0,7,4],
  [0,0,5,2,0,6,3,0,0]
]

let no_solution = [
  [5,0,6,5,0,8,4,0,3],
  [5,2,0,0,0,0,0,0,2],
  [1,8,7,0,0,0,0,3,1],
  [0,0,3,0,1,0,0,8,0],
  [9,0,0,8,6,3,0,0,5],
  [0,5,0,0,9,0,6,0,0],
  [1,3,0,0,0,0,2,5,0],
  [0,0,0,0,0,0,0,7,4],
  [0,0,5,2,0,6,3,0,0]
]

let examples = [initial_grid, no_solution]
var idx = 0
while idx < len(examples) {
  print("\nExample grid:\n====================")
  print_solution(examples[idx])
  print("\nExample grid solution:")
  if sudoku(examples[idx]) {
    print_solution(examples[idx])
  } else {
    print("Cannot find a solution.")
  }
  idx = idx + 1
}
