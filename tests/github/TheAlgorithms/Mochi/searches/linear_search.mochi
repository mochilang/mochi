/*
Linear Search Algorithms
-----------------------
Implements two versions of the linear search technique for locating an
integer within a list:

1. `linear_search` iteratively scans the list from left to right until
   the target value is found or the list ends. The function returns the
   index of the matching element or -1 if absent. This approach runs in
   O(n) time and uses O(1) extra space.

2. `rec_linear_search` performs the same search using recursion. It
   checks both ends of the current range (`low` and `high`) and then
   recurses inward. The algorithm also runs in O(n) time but uses O(n)
   stack space in the worst case due to recursion.
*/

fun linear_search(sequence: list<int>, target: int): int {
  var i = 0
  while i < len(sequence) {
    if sequence[i] == target {
      return i
    }
    i = i + 1
  }
  return -1
}

fun rec_linear_search(sequence: list<int>, low: int, high: int, target: int): int {
  if !(0 <= high && high < len(sequence) && 0 <= low && low < len(sequence)) {
    panic("Invalid upper or lower bound!")
  }
  if high < low {
    return -1
  }
  if sequence[low] == target {
    return low
  }
  if sequence[high] == target {
    return high
  }
  return rec_linear_search(sequence, low + 1, high - 1, target)
}

print(str(linear_search([0, 5, 7, 10, 15], 0)))
print(str(linear_search([0, 5, 7, 10, 15], 15)))
print(str(linear_search([0, 5, 7, 10, 15], 5)))
print(str(linear_search([0, 5, 7, 10, 15], 6)))
print(str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 0)))
print(str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 700)))
print(str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 30)))
print(str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, -6)))
