/*
  Trapped Rainwater (Dynamic Programming)

  Given a list of non-negative integers representing an elevation map where the width of each bar is 1,
  compute the total amount of rainwater that can be trapped between the bars. For each position we need
  the tallest bar to its left and to its right; the trapped water at that index is the minimum of these
  two maxima minus the height at the index. Summing this value over the array gives the total trapped
  water.

  Algorithm:
    1. Validate that all heights are non-negative; return 0 for an empty list.
    2. Build left_max where left_max[i] holds the highest bar from start up to i.
    3. Build right_max where right_max[i] holds the highest bar from end down to i.
    4. The trapped water above index i is min(left_max[i], right_max[i]) - heights[i].
    5. Sum the trapped water for all indices.

  Time complexity: O(n) where n is the number of bars.
  Space complexity: O(n) for the two auxiliary arrays.
*/

fun make_list(len: int, value: int): list<int> {
  var arr: list<int> = []
  var i = 0
  while i < len {
    arr = append(arr, value)
    i = i + 1
  }
  return arr
}

fun trapped_rainwater(heights: list<int>): int {
  if len(heights) == 0 {
    return 0
  }
  var i = 0
  while i < len(heights) {
    if heights[i] < 0 {
      panic("No height can be negative")
    }
    i = i + 1
  }
  let length: int = len(heights)

  var left_max = make_list(length, 0)
  left_max[0] = heights[0]
  i = 1
  while i < length {
    if heights[i] > left_max[i - 1] {
      left_max[i] = heights[i]
    } else {
      left_max[i] = left_max[i - 1]
    }
    i = i + 1
  }

  var right_max = make_list(length, 0)
  let last: int = length - 1
  right_max[last] = heights[last]
  i = last - 1
  while i >= 0 {
    if heights[i] > right_max[i + 1] {
      right_max[i] = heights[i]
    } else {
      right_max[i] = right_max[i + 1]
    }
    i = i - 1
  }

  var total = 0
  i = 0
  while i < length {
    let left = left_max[i]
    let right = right_max[i]
    let smaller = if left < right { left } else { right }
    total = total + (smaller - heights[i])
    i = i + 1
  }
  return total
}

print(str(trapped_rainwater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])))
print(str(trapped_rainwater([7, 1, 5, 3, 6, 4])))
