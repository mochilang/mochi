/*
Convert between various length units such as meters, inches and miles.

The function `length_conversion` normalizes both the source and target
unit names by converting them to lowercase, removing a trailing "s" and
mapping full names like "meter" or "feet" to their common abbreviations.

Each abbreviation has two factors relative to meters:
  * `from_factor` converts the input value from the given unit to meters.
  * `to_factor` converts a value in meters to the desired unit.

The result is computed as:
`value * from_factor(from_unit) * to_factor(to_unit)`

If an unknown unit is supplied, the function panics with a message listing
the supported abbreviations: mm, cm, m, km, in, ft, yd, mi.
*/

fun rstrip_s(s: string): string {
  if len(s) > 0 && s[len(s) - 1] == "s" {
    return substring(s, 0, len(s) - 1)
  }
  return s
}

fun normalize_alias(u: string): string {
  if u == "millimeter" { return "mm" }
  if u == "centimeter" { return "cm" }
  if u == "meter" { return "m" }
  if u == "kilometer" { return "km" }
  if u == "inch" { return "in" }
  if u == "inche" { return "in" }
  if u == "feet" { return "ft" }
  if u == "foot" { return "ft" }
  if u == "yard" { return "yd" }
  if u == "mile" { return "mi" }
  return u
}

fun has_unit(u: string): bool {
  return u == "mm" || u == "cm" || u == "m" || u == "km" || u == "in" || u == "ft" || u == "yd" || u == "mi"
}

fun from_factor(u: string): float {
  if u == "mm" { return 0.001 }
  if u == "cm" { return 0.01 }
  if u == "m" { return 1.0 }
  if u == "km" { return 1000.0 }
  if u == "in" { return 0.0254 }
  if u == "ft" { return 0.3048 }
  if u == "yd" { return 0.9144 }
  if u == "mi" { return 1609.34 }
  return 0.0
}

fun to_factor(u: string): float {
  if u == "mm" { return 1000.0 }
  if u == "cm" { return 100.0 }
  if u == "m" { return 1.0 }
  if u == "km" { return 0.001 }
  if u == "in" { return 39.3701 }
  if u == "ft" { return 3.28084 }
  if u == "yd" { return 1.09361 }
  if u == "mi" { return 0.000621371 }
  return 0.0
}

fun length_conversion(value: float, from_type: string, to_type: string): float {
  var new_from = normalize_alias(rstrip_s(lower(from_type)))
  var new_to = normalize_alias(rstrip_s(lower(to_type)))
  if !has_unit(new_from) {
    panic("Invalid 'from_type' value: '" + from_type + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi")
  }
  if !has_unit(new_to) {
    panic("Invalid 'to_type' value: '" + to_type + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi")
  }
  return value * from_factor(new_from) * to_factor(new_to)
}

print(length_conversion(4.0, "METER", "FEET"))
print(length_conversion(1.0, "kilometer", "inch"))
print(length_conversion(2.0, "feet", "meter"))
print(length_conversion(2.0, "centimeter", "millimeter"))
print(length_conversion(4.0, "yard", "kilometer"))
print(length_conversion(3.0, "foot", "inch"))
print(length_conversion(3.0, "mm", "in"))
