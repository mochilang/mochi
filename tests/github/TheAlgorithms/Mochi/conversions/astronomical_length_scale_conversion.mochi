/*
Conversion between astronomical length units.

This module supports meter, kilometer, megametre, gigametre,
terametre, petametre, exametre, zettametre, and yottametre.
Each unit corresponds to a power of ten relative to meters.
Inputs are normalized to lowercase, optional plural 's' is removed,
then full names are converted to unit abbreviations.  The algorithm
looks up the exponent for both units and multiplies the value by
10 raised to the difference of exponents to produce the converted
measurement.
*/

let UNIT_SYMBOL: map<string, string> = {"meter": "m", "kilometer": "km", "megametre": "Mm", "gigametre": "Gm", "terametre": "Tm", "petametre": "Pm", "exametre": "Em", "zettametre": "Zm", "yottametre": "Ym"}

let METRIC_CONVERSION: map<string, int> = {"m": 0, "km": 3, "Mm": 6, "Gm": 9, "Tm": 12, "Pm": 15, "Em": 18, "Zm": 21, "Ym": 24}

let ABBREVIATIONS = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym"

fun sanitize(unit: string): string {
  var res = lower(unit)
  if len(res) > 0 {
    let last = substring(res, len(res) - 1, len(res))
    if last == "s" {
      res = substring(res, 0, len(res) - 1)
    }
  }
  if res in UNIT_SYMBOL {
    return UNIT_SYMBOL[res]
  }
  return res
}

fun pow10(exp: int): float {
  if exp == 0 {
    return 1.0
  }
  var e = exp
  var res = 1.0
  if e < 0 {
    e = -e
  }
  var i = 0
  while i < e {
    res = res * 10.0
    i = i + 1
  }
  if exp < 0 {
    return 1.0 / res
  }
  return res
}

fun length_conversion(value: float, from_type: string, to_type: string): float {
  let from_sanitized = sanitize(from_type)
  let to_sanitized = sanitize(to_type)
  if !(from_sanitized in METRIC_CONVERSION) {
    panic("Invalid 'from_type' value: '" + from_type + "'.\nConversion abbreviations are: " + ABBREVIATIONS)
  }
  if !(to_sanitized in METRIC_CONVERSION) {
    panic("Invalid 'to_type' value: '" + to_type + "'.\nConversion abbreviations are: " + ABBREVIATIONS)
  }
  let from_exp = METRIC_CONVERSION[from_sanitized]
  let to_exp = METRIC_CONVERSION[to_sanitized]
  var exponent = 0
  if from_exp > to_exp {
    exponent = from_exp - to_exp
  } else {
    exponent = -(to_exp - from_exp)
  }
  return value * pow10(exponent)
}

print(str(length_conversion(1.0, "meter", "kilometer")))
print(str(length_conversion(1.0, "meter", "megametre")))
print(str(length_conversion(1.0, "gigametre", "meter")))
print(str(length_conversion(1.0, "terametre", "zettametre")))
print(str(length_conversion(1.0, "yottametre", "zettametre")))
