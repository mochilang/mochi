/*
Convert a binary string to its hexadecimal representation using the grouping method.

Steps:
1. Strip whitespace and detect an optional leading minus sign.
2. Validate that the remaining characters are only '0' or '1'.
3. Left-pad with zeros so the length is a multiple of four and at least one
   extra group of four bits exists (mirrors the Python implementation).
4. Convert each group of four bits to a hexadecimal digit by interpreting the
   bits as an integer and indexing into "0123456789abcdef".
5. Prefix the result with "0x" and reapply the negative sign if necessary.

The algorithm runs in O(n) time where n is the number of bits.
*/

fun strip_spaces(s: string): string {
  var start = 0
  var end = len(s) - 1
  while start < len(s) && s[start] == " " {
    start = start + 1
  }
  while end >= start && s[end] == " " {
    end = end - 1
  }
  var res = ""
  var i = start
  while i <= end {
    res = res + s[i]
    i = i + 1
  }
  return res
}

fun repeat_char(ch: string, count: int): string {
  var res = ""
  var i = 0
  while i < count {
    res = res + ch
    i = i + 1
  }
  return res
}

fun slice(s: string, start: int, end: int): string {
  var res = ""
  var i = start
  while i < end {
    res = res + s[i]
    i = i + 1
  }
  return res
}

fun bits_to_int(bits: string): int {
  var value = 0
  var i = 0
  while i < len(bits) {
    value = value * 2
    if bits[i] == "1" {
      value = value + 1
    }
    i = i + 1
  }
  return value
}

fun bin_to_hexadecimal(binary_str: string): string {
  var s = strip_spaces(binary_str)
  if len(s) == 0 {
    panic("Empty string was passed to the function")
  }
  var is_negative = false
  if s[0] == "-" {
    is_negative = true
    s = slice(s, 1, len(s))
  }
  var i = 0
  while i < len(s) {
    let c = s[i]
    if c != "0" && c != "1" {
      panic("Non-binary value was passed to the function")
    }
    i = i + 1
  }
  let groups = len(s) / 4 + 1
  let pad_len = groups * 4 - len(s)
  s = repeat_char("0", pad_len) + s
  let digits = "0123456789abcdef"
  var res = "0x"
  var j = 0
  while j < len(s) {
    let chunk = slice(s, j, j + 4)
    let val = bits_to_int(chunk)
    res = res + digits[val]
    j = j + 4
  }
  if is_negative {
    return "-" + res
  }
  return res
}

print(bin_to_hexadecimal("101011111"))
print(bin_to_hexadecimal(" 1010   "))
print(bin_to_hexadecimal("-11101"))
