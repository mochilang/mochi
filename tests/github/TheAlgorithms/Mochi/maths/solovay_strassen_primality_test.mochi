/*
Solovay-Strassen Primality Test
------------------------------

This probabilistic test uses properties of quadratic residues to determine
if a number is likely prime. For each iteration a random base `a` is chosen
from [2, n-2]. The Jacobi symbol (a/n) is compared with
`a^((n-1)/2) mod n`. If they differ or the Jacobi symbol is zero the number
is composite. Repeating the test with multiple random bases decreases
the chance of falsely identifying a composite as prime.

The implementation uses a simple linear congruential generator (LCG)
for pseudo-random numbers to keep the example self contained.

The main function demonstrates the test on several integers.
*/

var seed: int = 1

fun set_seed(s: int) {
  seed = s
}

fun randint(a: int, b: int): int {
  seed = (seed * 1103515245 + 12345) % 2147483648
  return (seed % (b - a + 1)) + a
}

fun jacobi_symbol(random_a: int, number: int): int {
  if random_a == 0 || random_a == 1 {
    return random_a
  }
  random_a = random_a % number
  var t: int = 1
  while random_a != 0 {
    while random_a % 2 == 0 {
      random_a = random_a / 2
      let r = number % 8
      if r == 3 || r == 5 {
        t = -t
      }
    }
    let temp = random_a
    random_a = number
    number = temp
    if random_a % 4 == 3 && number % 4 == 3 {
      t = -t
    }
    random_a = random_a % number
  }
  if number == 1 {
    return t
  }
  return 0
}

fun pow_mod(base: int, exp: int, mod: int): int {
  var result: int = 1
  var b = base % mod
  var e = exp
  while e > 0 {
    if e % 2 == 1 {
      result = (result * b) % mod
    }
    b = (b * b) % mod
    e = e / 2
  }
  return result
}

fun solovay_strassen(number: int, iterations: int): bool {
  if number <= 1 { return false }
  if number <= 3 { return true }

  var i: int = 0
  while i < iterations {
    let a = randint(2, number - 2)
    let x = jacobi_symbol(a, number)
    let y = pow_mod(a, (number - 1) / 2, number)
    var mod_x = x % number
    if mod_x < 0 { mod_x = mod_x + number }
    if x == 0 || y != mod_x {
      return false
    }
    i = i + 1
  }
  return true
}

fun main() {
  set_seed(10)
  print(str(solovay_strassen(13, 5)))
  print(str(solovay_strassen(9, 10)))
  print(str(solovay_strassen(17, 15)))
}

main()
