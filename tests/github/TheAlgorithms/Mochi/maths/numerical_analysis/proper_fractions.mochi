/*
Proper Fractions
----------------
This program generates all proper fractions between 0 and 1 that can be
formed with a given positive integer denominator. A proper fraction has a
numerator less than the denominator and shares no common factors with it.

The algorithm iterates through all numerators from 1 up to but excluding the
denominator, uses the Euclidean algorithm to test if the numerator and
denominator are coprime, and collects those that are. The time complexity is
O(n log d) where n is the denominator because each gcd computation runs in
logarithmic time.

Negative denominators cause a panic. A denominator of 0 results in an empty
list.
*/

fun gcd(a: int, b: int): int {
  var x = a
  var y = b
  while y != 0 {
    let t = x % y
    x = y
    y = t
  }
  if x < 0 {
    return -x
  }
  return x
}

fun proper_fractions(den: int): list<string> {
  if den < 0 {
    panic("The Denominator Cannot be less than 0")
  }
  var res: list<string> = []
  var n = 1
  while n < den {
    if gcd(n, den) == 1 {
      res = append(res, str(n) + "/" + str(den))
    }
    n = n + 1
  }
  return res
}

fun test_proper_fractions() {
  let a = proper_fractions(10)
  if a != ["1/10", "3/10", "7/10", "9/10"] { panic("test 10 failed") }
  let b = proper_fractions(5)
  if b != ["1/5", "2/5", "3/5", "4/5"] { panic("test 5 failed") }
  let c = proper_fractions(0)
  if c != [] { panic("test 0 failed") }
}

fun main() {
  test_proper_fractions()
  print(str(proper_fractions(10)))
  print(str(proper_fractions(5)))
  print(str(proper_fractions(0)))
}

main()
