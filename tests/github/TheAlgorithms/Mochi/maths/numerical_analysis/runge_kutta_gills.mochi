/*
Runge-Kutta-Gill Method (4th order)

This routine solves first-order ordinary differential equations of the form
y' = f(x, y) between an initial point x_initial and x_final using the
Runge-Kutta-Gill scheme. It adjusts the classic fourth-order Runge-Kutta
coefficients to reduce rounding error. For each step of size h it computes:

  k1 = h * f(x, y)
  k2 = h * f(x + h/2, y + k1/2)
  k3 = h * f(x + h/2, y + (-1/2 + 1/√2) * k1 + (1 - 1/√2) * k2)
  k4 = h * f(x + h,   y - (1/√2) * k2 + (1 + 1/√2) * k3)

and updates y_{n+1} = y_n + (k1 + (2 - √2) * k2 + (2 + √2) * k3 + k4) / 6.

The implementation validates inputs and uses Newton's method to compute
square roots so it can execute on the runtime/vm without foreign
interfaces.
*/

fun sqrt(x: float): float {
  var guess = if x > 1.0 { x / 2.0 } else { 1.0 }
  var i = 0
  while i < 20 {
    guess = 0.5 * (guess + x / guess)
    i = i + 1
  }
  return guess
}

fun runge_kutta_gills(func: fun(float, float): float, x_initial: float, y_initial: float, step_size: float, x_final: float): list<float> {
  if x_initial >= x_final { panic("The final value of x must be greater than initial value of x.") }
  if step_size <= 0.0 { panic("Step size must be positive.") }
  let n = ((x_final - x_initial) / step_size) as int
  var y: list<float> = []
  var i = 0
  while i <= n {
    y = append(y, 0.0)
    i = i + 1
  }
  y[0] = y_initial
  var xi = x_initial
  var idx = 0
  let root2 = sqrt(2.0)
  while idx < n {
    let k1 = step_size * func(xi, y[idx])
    let k2 = step_size * func(xi + step_size / 2.0, y[idx] + k1 / 2.0)
    let k3 = step_size * func(
      xi + step_size / 2.0,
      y[idx] + (-0.5 + 1.0 / root2) * k1 + (1.0 - 1.0 / root2) * k2
    )
    let k4 = step_size * func(
      xi + step_size,
      y[idx] - (1.0 / root2) * k2 + (1.0 + 1.0 / root2) * k3
    )
    y[idx + 1] = y[idx] + (k1 + (2.0 - root2) * k2 + (2.0 + root2) * k3 + k4) / 6.0
    xi = xi + step_size
    idx = idx + 1
  }
  return y
}

fun f1(x: float, y: float): float {
  return (x - y) / 2.0
}

let y1 = runge_kutta_gills(f1, 0.0, 3.0, 0.2, 5.0)
print(str(y1[len(y1) - 1]))

fun f2(x: float, y: float): float {
  return x
}

let y2 = runge_kutta_gills(f2, -1.0, 0.0, 0.2, 0.0)
print(str(y2))
