/*
Sock Merchant
------------
Given a list of integers representing sock colors, determine how many matching pairs of socks are present.
This implementation copies the list and sorts it with a simple selection sort. Consecutive equal values
form pairs. For each group of identical colors, the number of pairs is count/2 using integer division.
The algorithm uses only Mochi built-ins and avoids the "any" type and FFI so it runs on runtime/vm.
*/

fun sock_merchant(colors: list<int>): int {
  // Copy colors into a new list so the input remains untouched
  var arr: list<int> = []
  var i = 0
  while i < len(colors) {
    arr = append(arr, colors[i])
    i = i + 1
  }
  // Selection sort
  var n = len(arr)
  var a = 0
  while a < n {
    var min_idx = a
    var b = a + 1
    while b < n {
      if arr[b] < arr[min_idx] {
        min_idx = b
      }
      b = b + 1
    }
    let temp = arr[a]
    arr[a] = arr[min_idx]
    arr[min_idx] = temp
    a = a + 1
  }
  // Count pairs
  var pairs = 0
  i = 0
  while i < n {
    var count = 1
    while i + 1 < n && arr[i] == arr[i + 1] {
      count = count + 1
      i = i + 1
    }
    pairs = pairs + count / 2
    i = i + 1
  }
  return pairs
}

fun test_sock_merchant() {
  let example1: list<int> = [10, 20, 20, 10, 10, 30, 50, 10, 20]
  if sock_merchant(example1) != 3 {
    panic("example1 failed")
  }
  let example2: list<int> = [1, 1, 3, 3]
  if sock_merchant(example2) != 2 {
    panic("example2 failed")
  }
}

fun main() {
  test_sock_merchant()
  let example1: list<int> = [10, 20, 20, 10, 10, 30, 50, 10, 20]
  print(str(sock_merchant(example1)))
  let example2: list<int> = [1, 1, 3, 3]
  print(str(sock_merchant(example2)))
}

main()
