/*
K-th Lexicographic Permutation
------------------------------
Given integers `k` and `n`, generate the k-th lexicographic permutation of the
sequence [0, 1, ..., n-1].  The permutations are ordered as numbers in the
factorial number system.  For position i (from high to low) the algorithm uses
the factorial of remaining digits to determine which element should appear,
removing it from the pool.  This repeats until all digits are fixed, yielding
an O(n^2) procedure due to element removal from a list of length n.
*/

fun remove_at(xs: list<int>, idx: int): list<int> {
  var res: list<int> = []
  var i = 0
  while i < len(xs) {
    if i != idx {
      res = append(res, xs[i])
    }
    i = i + 1
  }
  return res
}

fun kth_permutation(k: int, n: int): list<int> {
  if n <= 0 { panic("n must be positive") }
  var factorials: list<int> = [1]
  var i = 2
  while i < n {
    factorials = append(factorials, factorials[len(factorials) - 1] * i)
    i = i + 1
  }
  let total = factorials[len(factorials) - 1] * n
  if (k < 0) || (k >= total) { panic("k out of bounds") }
  var elements: list<int> = []
  var e = 0
  while e < n {
    elements = append(elements, e)
    e = e + 1
  }
  var permutation: list<int> = []
  var idx = len(factorials) - 1
  while idx >= 0 {
    let factorial = factorials[idx]
    let number = k / factorial
    k = k % factorial
    permutation = append(permutation, elements[number])
    elements = remove_at(elements, number)
    idx = idx - 1
  }
  permutation = append(permutation, elements[0])
  return permutation
}

fun list_equal(a: list<int>, b: list<int>): bool {
  if len(a) != len(b) { return false }
  var i = 0
  while i < len(a) {
    if a[i] != b[i] { return false }
    i = i + 1
  }
  return true
}

fun list_to_string(xs: list<int>): string {
  if len(xs) == 0 { return "[]" }
  var s = "[" + str(xs[0])
  var i = 1
  while i < len(xs) {
    s = s + ", " + str(xs[i])
    i = i + 1
  }
  s = s + "]"
  return s
}

fun test_kth_permutation() {
  let expected1: list<int> = [0, 1, 2, 3, 4]
  let res1 = kth_permutation(0, 5)
  if !list_equal(res1, expected1) { panic("test case 1 failed") }
  let expected2: list<int> = [1, 3, 0, 2]
  let res2 = kth_permutation(10, 4)
  if !list_equal(res2, expected2) { panic("test case 2 failed") }
}

fun main() {
  test_kth_permutation()
  let res = kth_permutation(10, 4)
  print(list_to_string(res))
}

main()
