/*
Distance Between Two Points in 3D Space
--------------------------------------
This program computes the Euclidean distance between two points using the
Pythagorean theorem. Each point is represented by x, y, and z coordinates.
The distance is the square root of the sum of squared differences of the
coordinates.

Algorithm:
1. Subtract corresponding coordinates of the two points to get dx, dy, dz.
2. Square each difference and sum them.
3. Take the square root of the absolute value of the sum to avoid negative
   inputs due to floating point error.

Square roots are approximated with Newton's method so the code runs on the
VM without external libraries.
*/

type Point = { x: float, y: float, z: float }

fun absf(x: float): float {
  if x < 0.0 { return -x }
  return x
}

fun sqrt_approx(x: float): float {
  if x <= 0.0 { return 0.0 }
  var guess = x / 2.0
  var i = 0
  while i < 20 {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

fun distance(a: Point, b: Point): float {
  let dx = b.x - a.x
  let dy = b.y - a.y
  let dz = b.z - a.z
  return sqrt_approx(absf(dx * dx + dy * dy + dz * dz))
}

fun point_to_string(p: Point): string {
  return "Point(" + str(p.x) + ", " + str(p.y) + ", " + str(p.z) + ")"
}

fun test_distance() {
  let p1: Point = Point{ x: 2.0, y: -1.0, z: 7.0 }
  let p2: Point = Point{ x: 1.0, y: -3.0, z: 5.0 }
  let d = distance(p1, p2)
  if absf(d - 3.0) > 0.0001 {
    panic("distance test failed")
  }
  print("Distance from " + point_to_string(p1) + " to " + point_to_string(p2) + " is " + str(d))
}

fun main() {
  test_distance()
}

main()
