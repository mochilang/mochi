/*
Absolute Value Utilities
-----------------------
This module implements basic operations based on absolute values:

1. abs_val(num): returns the absolute value of a floating-point number by
   conditionally negating negative inputs.
2. abs_min(xs): returns the element with the smallest absolute value from a
   list of integers.
3. abs_max(xs): returns the element with the largest absolute value from a
   list of integers using iteration.
4. abs_max_sort(xs): returns the element with the largest absolute value after
   sorting the list using a simple bubble sort ordered by absolute value.

All functions avoid foreign function interfaces so they can execute on the
runtime/vm. Test cases mirror the Python version from TheAlgorithms.
*/

fun abs_val(num: float): float {
  if num < 0.0 {
    return -num
  }
  return num
}

fun abs_min(x: list<int>): int {
  if len(x) == 0 {
    panic("abs_min() arg is an empty sequence")
  }
  var j = x[0]
  var idx = 0
  while idx < len(x) {
    let i = x[idx]
    if abs_val(float(i)) < abs_val(float(j)) {
      j = i
    }
    idx = idx + 1
  }
  return j
}

fun abs_max(x: list<int>): int {
  if len(x) == 0 {
    panic("abs_max() arg is an empty sequence")
  }
  var j = x[0]
  var idx = 0
  while idx < len(x) {
    let i = x[idx]
    if abs_val(float(i)) > abs_val(float(j)) {
      j = i
    }
    idx = idx + 1
  }
  return j
}

fun abs_max_sort(x: list<int>): int {
  if len(x) == 0 {
    panic("abs_max_sort() arg is an empty sequence")
  }
  var arr: list<int> = []
  var i = 0
  while i < len(x) {
    arr = append(arr, x[i])
    i = i + 1
  }
  var n = len(arr)
  var a = 0
  while a < n {
    var b = 0
    while b < n - a - 1 {
      if abs_val(float(arr[b])) > abs_val(float(arr[b + 1])) {
        let temp = arr[b]
        arr[b] = arr[b + 1]
        arr[b + 1] = temp
      }
      b = b + 1
    }
    a = a + 1
  }
  return arr[n - 1]
}

fun test_abs_val() {
  if abs_val(0.0) != 0.0 { panic("abs_val(0) failed") }
  if abs_val(34.0) != 34.0 { panic("abs_val(34) failed") }
  if abs_val(-100000000000.0) != 100000000000.0 {
    panic("abs_val large failed")
  }
  let a: list<int> = [-3, -1, 2, -11]
  if abs_max(a) != (-11) { panic("abs_max failed") }
  if abs_max_sort(a) != (-11) { panic("abs_max_sort failed") }
  if abs_min(a) != (-1) { panic("abs_min failed") }
}

fun main() {
  test_abs_val()
  print(abs_val(-34.0))
}

main()
