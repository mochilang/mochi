/*
Maclaurin Series Approximations for Sine and Cosine
--------------------------------------------------
This program computes sine and cosine using their Maclaurin series
expansions:

  sin(x) = Σ (-1)^r * x^(2r+1) / (2r+1)!
  cos(x) = Σ (-1)^r * x^(2r)   / (2r)!

Reducing the angle modulo 2π improves convergence for large |x|.
All computations are implemented in pure Mochi without external libraries.
*/

let PI = 3.141592653589793

fun floor(x: float): float {
  var i: int = x as int
  if (i as float) > x { i = i - 1 }
  return i as float
}

fun pow(x: float, n: int): float {
  var result: float = 1.0
  var i: int = 0
  while i < n {
    result = result * x
    i = i + 1
  }
  return result
}

fun factorial(n: int): float {
  var result: float = 1.0
  var i: int = 2
  while i <= n {
    result = result * (i as float)
    i = i + 1
  }
  return result
}

fun maclaurin_sin(theta: float, accuracy: int): float {
  var t: float = theta
  let div = floor(t / (2.0 * PI))
  t = t - 2.0 * div * PI
  var sum: float = 0.0
  var r: int = 0
  while r < accuracy {
    let power = 2 * r + 1
    let sign = if r % 2 == 0 { 1.0 } else { -1.0 }
    sum = sum + sign * pow(t, power) / factorial(power)
    r = r + 1
  }
  return sum
}

fun maclaurin_cos(theta: float, accuracy: int): float {
  var t: float = theta
  let div = floor(t / (2.0 * PI))
  t = t - 2.0 * div * PI
  var sum: float = 0.0
  var r: int = 0
  while r < accuracy {
    let power = 2 * r
    let sign = if r % 2 == 0 { 1.0 } else { -1.0 }
    sum = sum + sign * pow(t, power) / factorial(power)
    r = r + 1
  }
  return sum
}

print(str(maclaurin_sin(10.0, 30)))
print(str(maclaurin_sin(-10.0, 30)))
print(str(maclaurin_sin(10.0, 15)))
print(str(maclaurin_sin(-10.0, 15)))
print(str(maclaurin_cos(5.0, 30)))
print(str(maclaurin_cos(-5.0, 30)))
print(str(maclaurin_cos(10.0, 15)))
print(str(maclaurin_cos(-10.0, 15)))
