/*
Interquartile Range (IQR)
------------------------
This module computes the interquartile range, a measure of statistical
variation defined as the difference between the third quartile (Q3) and the
first quartile (Q1). To obtain Q1 and Q3 the data is sorted, split into lower
and upper halves and the median of each half is calculated. The implementation
uses a simple bubble sort to order the numbers so it can run on the pure Mochi
runtime without foreign function calls.

Functions implemented:
1. bubble_sort(nums): return a sorted copy of a list of floats.
2. find_median(nums): return the median of a sorted list of floats.
3. interquartile_range(nums): compute Q3 - Q1 for the given list.

Test cases mirror the Python version from TheAlgorithms repository.
*/

fun bubble_sort(nums: list<float>): list<float> {
  var arr: list<float> = []
  var i = 0
  while i < len(nums) {
    arr = append(arr, nums[i])
    i = i + 1
  }
  var n = len(arr)
  var a = 0
  while a < n {
    var b = 0
    while b < n - a - 1 {
      if arr[b] > arr[b + 1] {
        let temp = arr[b]
        arr[b] = arr[b + 1]
        arr[b + 1] = temp
      }
      b = b + 1
    }
    a = a + 1
  }
  return arr
}

fun find_median(nums: list<float>): float {
  let length = len(nums)
  let div = length / 2
  let mod = length % 2
  if mod != 0 {
    return nums[div]
  }
  return (nums[div] + nums[div - 1]) / 2.0
}

fun interquartile_range(nums: list<float>): float {
  if len(nums) == 0 {
    panic("The list is empty. Provide a non-empty list.")
  }
  let sorted = bubble_sort(nums)
  let length = len(sorted)
  let div = length / 2
  let mod = length % 2
  var lower: list<float> = []
  var i = 0
  while i < div {
    lower = append(lower, sorted[i])
    i = i + 1
  }
  var upper: list<float> = []
  var j = div + mod
  while j < length {
    upper = append(upper, sorted[j])
    j = j + 1
  }
  let q1 = find_median(lower)
  let q3 = find_median(upper)
  return q3 - q1
}

fun absf(x: float): float {
  if x < 0.0 {
    return -x
  }
  return x
}

fun float_equal(a: float, b: float): bool {
  let diff = absf(a - b)
  return diff < 0.0000001
}

fun test_interquartile_range() {
  if !float_equal(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0]), 2.0) {
    panic("interquartile_range case1 failed")
  }
  if !float_equal(interquartile_range([-2.0, -7.0, -10.0, 9.0, 8.0, 4.0, -67.0, 45.0]), 17.0) {
    panic("interquartile_range case2 failed")
  }
  if !float_equal(interquartile_range([-2.1, -7.1, -10.1, 9.1, 8.1, 4.1, -67.1, 45.1]), 17.2) {
    panic("interquartile_range case3 failed")
  }
  if !float_equal(interquartile_range([0.0, 0.0, 0.0, 0.0, 0.0]), 0.0) {
    panic("interquartile_range case4 failed")
  }
}

fun main() {
  test_interquartile_range()
  print(str(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0])))
}

main()
