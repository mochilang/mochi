/*
Compute the greatest common divisor (GCD) of N positive integers.

This implementation applies the classic Euclidean algorithm pairwise
across the input list:
1. `gcd(a, b)` repeatedly replaces the larger value by the remainder of
dividing the larger by the smaller until the remainder is zero.
2. `get_greatest_common_divisor` reduces the list by calling `gcd`
   successively, producing the GCD for all numbers.

Time complexity is O(k * log m) where k is the number of inputs and m is
the magnitude of the numbers.
*/

fun gcd(a: int, b: int): int {
  var x = a
  var y = b
  while y != 0 {
    let r = x % y
    x = y
    y = r
  }
  if x < 0 { return -x }
  return x
}

fun get_greatest_common_divisor(nums: list<int>): int {
  if len(nums) == 0 { panic("at least one number is required") }
  var g = nums[0]
  if g <= 0 { panic("numbers must be integer and greater than zero") }
  var i = 1
  while i < len(nums) {
    let n = nums[i]
    if n <= 0 { panic("numbers must be integer and greater than zero") }
    g = gcd(g, n)
    i = i + 1
  }
  return g
}

print(str(get_greatest_common_divisor([18, 45])))
print(str(get_greatest_common_divisor([23, 37])))
print(str(get_greatest_common_divisor([2520, 8350])))
print(str(get_greatest_common_divisor([1,2,3,4,5,6,7,8,9,10])))
