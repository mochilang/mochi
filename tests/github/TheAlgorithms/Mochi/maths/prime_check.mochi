/*
Determine if a non-negative integer is prime.

A prime number has exactly two positive divisors: 1 and itself. This
implementation uses an optimized trial division method:

1. Reject numbers less than 2 as well as even numbers and multiples of 3.
2. Recognize 2 and 3 as primes directly.
3. For larger numbers, possible factors occur in pairs of the form 6k Â± 1.
   Check these candidates up to the square root of the number.
   If any candidate divides the number evenly, it is composite;
   otherwise it is prime.

The algorithm runs in O(sqrt(n)) time.
*/

fun is_prime(number: int): bool {
  if number < 0 {
    panic("is_prime() only accepts positive integers")
  }
  if (1 < number) && (number < 4) {
    return true
  } else if (number < 2) || (number % 2 == 0) || (number % 3 == 0) {
    return false
  }
  var i = 5
  while i * i <= number {
    if (number % i == 0) || (number % (i + 2) == 0) {
      return false
    }
    i = i + 6
  }
  return true
}

print(str(is_prime(0)))
print(str(is_prime(1)))
print(str(is_prime(2)))
print(str(is_prime(3)))
print(str(is_prime(27)))
print(str(is_prime(87)))
print(str(is_prime(563)))
print(str(is_prime(2999)))
print(str(is_prime(67483)))
