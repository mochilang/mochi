/*
Large Exponent Comparison
-------------------------
This program compares numbers of the form x^y without computing the power
directly. For very large x and y the value might overflow, so we use the
identity log10(x^y) = y * log10(x) to compare magnitudes instead.

The `res` function returns this scaled logarithm. Special cases handle
bases of 0 and exponents of 0, and negative bases raise an error. The
`compare` function uses `res` to determine which of two exponentials is
larger.

The implementation avoids any foreign interfaces so it can run on
`runtime/vm`.
*/
fun ln(x: float): float {
  let t = (x - 1.0) / (x + 1.0)
  var term = t
  var sum = 0.0
  var k = 1
  while k <= 99 {
    sum = sum + term / (k as float)
    term = term * t * t
    k = k + 2
  }
  return 2.0 * sum
}

fun log10(x: float): float {
  return ln(x) / ln(10.0)
}

fun absf(x: float): float {
  if x < 0.0 { return -x }
  return x
}

fun res(x: int, y: int): float {
  if x == 0 { return 0.0 }
  if y == 0 { return 1.0 }
  if x < 0 { panic("math domain error") }
  return (y as float) * log10(x as float)
}

fun test_res() {
  if absf(res(5, 7) - 4.892790030352132) > 0.0000001 {
    panic("res(5,7) failed")
  }
  if res(0, 5) != 0.0 { panic("res(0,5) failed") }
  if res(3, 0) != 1.0 { panic("res(3,0) failed") }
}

fun compare(x1: int, y1: int, x2: int, y2: int): string {
  let r1 = res(x1, y1)
  let r2 = res(x2, y2)
  if r1 > r2 {
    return "Largest number is " + str(x1) + " ^ " + str(y1)
  }
  if r2 > r1 {
    return "Largest number is " + str(x2) + " ^ " + str(y2)
  }
  return "Both are equal"
}

test_res()
print(compare(5, 7, 4, 8))
