/*
Graham's law of effusion relates the rate at which two gases leak through a tiny hole.
For gases with molar masses m1 and m2 and effusion rates r1 and r2 it holds:
    r1 / r2 = sqrt(m2 / m1)
This module provides helper routines to compute one variable when the others are
known.  Input values must be positive; otherwise a ValueError message is printed
and 0.0 is returned.  Square roots are approximated with Newton's method and
results are rounded to 6 decimal places.
*/

fun to_float(x: int): float {
  return x * 1.0
}

fun round6(x: float): float {
  let factor = 1000000.0
  return to_float(int(x * factor + 0.5)) / factor
}

fun sqrtApprox(x: float): float {
  var guess = x / 2.0
  var i = 0
  while i < 20 {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

fun validate(values: list<float>): bool {
  if len(values) == 0 { return false }
  var i = 0
  while i < len(values) {
    if values[i] <= 0.0 { return false }
    i = i + 1
  }
  return true
}

fun effusion_ratio(m1: float, m2: float): float {
  if !validate([m1, m2]) {
    print("ValueError: Molar mass values must greater than 0.")
    return 0.0
  }
  return round6(sqrtApprox(m2 / m1))
}

fun first_effusion_rate(rate: float, m1: float, m2: float): float {
  if !validate([rate, m1, m2]) {
    print("ValueError: Molar mass and effusion rate values must greater than 0.")
    return 0.0
  }
  return round6(rate * sqrtApprox(m2 / m1))
}

fun second_effusion_rate(rate: float, m1: float, m2: float): float {
  if !validate([rate, m1, m2]) {
    print("ValueError: Molar mass and effusion rate values must greater than 0.")
    return 0.0
  }
  return round6(rate / sqrtApprox(m2 / m1))
}

fun first_molar_mass(mass: float, r1: float, r2: float): float {
  if !validate([mass, r1, r2]) {
    print("ValueError: Molar mass and effusion rate values must greater than 0.")
    return 0.0
  }
  let ratio = r1 / r2
  return round6(mass / (ratio * ratio))
}

fun second_molar_mass(mass: float, r1: float, r2: float): float {
  if !validate([mass, r1, r2]) {
    print("ValueError: Molar mass and effusion rate values must greater than 0.")
    return 0.0
  }
  let ratio = r1 / r2
  return round6((ratio * ratio) / mass)
}

print(effusion_ratio(2.016, 4.002))
print(first_effusion_rate(1.0, 2.016, 4.002))
print(second_effusion_rate(1.0, 2.016, 4.002))
print(first_molar_mass(2.0, 1.408943, 0.709752))
print(second_molar_mass(2.0, 1.408943, 0.709752))
