/*
Solve linear Diophantine equations of the form a*x + b*y = c.
An equation has integer solutions only when gcd(a, b) divides c.
Using the extended Euclidean algorithm we find integers x and y such
that a*x + b*y = gcd(a, b).  Multiplying these coefficients by c / gcd(a, b)
produces one solution of the original equation.  All solutions can then be
generated by x = x0 + t*(b/d) and y = y0 - t*(a/d) for integer t where
d = gcd(a, b).  The extended Euclidean algorithm runs in O(log min(a,b)) time.
*/

fun gcd(a: int, b: int): int {
  var x = if a < 0 { -a } else { a }
  var y = if b < 0 { -b } else { b }
  while y != 0 {
    let t = x % y
    x = y
    y = t
  }
  return x
}

fun extended_gcd(a: int, b: int): list<int> {
  if b == 0 {
    return [a, 1, 0]
  }
  let res = extended_gcd(b, a % b)
  let d = res[0]
  let p = res[1]
  let q = res[2]
  let x = q
  let y = p - q * (a / b)
  return [d, x, y]
}

fun diophantine(a: int, b: int, c: int): list<int> {
  let d = gcd(a, b)
  if c % d != 0 { panic("No solution") }
  let eg = extended_gcd(a, b)
  let r = c / d
  let x = eg[1] * r
  let y = eg[2] * r
  return [x, y]
}

fun diophantine_all_soln(a: int, b: int, c: int, n: int): list<list<int>> {
  let base = diophantine(a, b, c)
  let x0 = base[0]
  let y0 = base[1]
  let d = gcd(a, b)
  let p = a / d
  let q = b / d
  var sols: list<list<int>> = []
  var i = 0
  while i < n {
    let x = x0 + i * q
    let y = y0 - i * p
    sols = append(sols, [x, y])
    i = i + 1
  }
  return sols
}

let s1 = diophantine(10, 6, 14)
print(str(s1))
let sols = diophantine_all_soln(10, 6, 14, 4)
var j = 0
while j < len(sols) {
  print(str(sols[j]))
  j = j + 1
}
print(str(diophantine(391, 299, -69)))
print(str(extended_gcd(10, 6)))
print(str(extended_gcd(7, 5)))
