/*
Binary Count Trailing Zeros

Given a non-negative integer, determine how many zero bits appear
consecutively at the end of its binary representation. The algorithm
repeatedly divides the number by two while the least significant bit is
zero, incrementing a counter on each step. Once the number becomes odd,
the loop terminates and the counter represents the number of trailing
zeros. Passing a negative value results in a panic because the function
expects only non-negative integers.
*/

fun binary_count_trailing_zeros(a: int): int {
  if a < 0 {
    panic("Input value must be a non-negative integer")
  }
  if a == 0 {
    return 0
  }
  var n = a
  var count = 0
  while n % 2 == 0 {
    count = count + 1
    n = n / 2
  }
  return count
}

print(str(binary_count_trailing_zeros(25)))
print(str(binary_count_trailing_zeros(36)))
print(str(binary_count_trailing_zeros(16)))
print(str(binary_count_trailing_zeros(58)))
print(str(binary_count_trailing_zeros(4294967296)))
print(str(binary_count_trailing_zeros(0)))
