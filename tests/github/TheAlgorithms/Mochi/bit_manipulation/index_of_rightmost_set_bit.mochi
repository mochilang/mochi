/*
Index of Rightmost Set Bit
--------------------------
Given a non-negative integer, find the zero-based index of the least significant bit set to 1.
If the number is 0, return -1 to indicate no set bits.

Algorithm:
1. Verify input is non-negative.
2. If number is zero, return -1.
3. Repeatedly divide the number by 2 while counting the divisions until the remainder is 1.
   Each division discards one trailing zero bit.
4. Return the count which corresponds to the position of the first set bit.

Examples:
index_of_rightmost_set_bit(0) -> -1
index_of_rightmost_set_bit(5) -> 0
index_of_rightmost_set_bit(36) -> 2
index_of_rightmost_set_bit(8) -> 3
*/

fun index_of_rightmost_set_bit(number: int): int {
  if number < 0 {
    panic("Input must be a non-negative integer")
  }
  if number == 0 {
    return -1
  }
  var n = number
  var index = 0
  while n % 2 == 0 {
    n = n / 2
    index = index + 1
  }
  return index
}

print(str(index_of_rightmost_set_bit(0)))
print(str(index_of_rightmost_set_bit(5)))
print(str(index_of_rightmost_set_bit(36)))
print(str(index_of_rightmost_set_bit(8)))
