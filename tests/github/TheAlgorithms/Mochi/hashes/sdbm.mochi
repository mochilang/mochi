/*
SDBM Hash Function

This algorithm iteratively computes a hash for a given string using the recurrence:
  hash(i) = hash(i-1) * 65599 + ord(str[i])
The multiplier 65599 provides good bit scrambling properties and was used in the
sdbm database library. The process yields a large integer unique to the string.
Time complexity is O(n) for n characters.
*/

let ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

fun ord(ch: string): int {
  var i = 0
  while i < len(ascii) {
    if ascii[i:i+1] == ch { return 32 + i }
    i = i + 1
  }
  return 0
}

fun sdbm(plain_text: string): int {
  var hash_value: int = 0
  var i = 0
  while i < len(plain_text) {
    let code = ord(plain_text[i:i+1])
    hash_value = hash_value * 65599 + code
    i = i + 1
  }
  return hash_value
}

print(str(sdbm("Algorithms")))
print(str(sdbm("scramble bits")))
