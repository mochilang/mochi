/*
Project Euler Problem 7: 10001st prime number.

The goal is to find the 10001st prime.  A prime has no positive divisors other than
1 and itself.  The algorithm uses trial division with the 6k ± 1 optimization:
- Numbers less than 2 or divisible by 2 or 3 are immediately rejected.
- Candidates of the form 6k ± 1 are tested up to the square root of the number.
To obtain the n-th prime, integers are tested sequentially and counted when prime.
This has roughly O(n * sqrt(p_n)) time complexity, where p_n is the n-th prime.
*/

fun is_prime(number: int): bool {
  if 1 < number && number < 4 {
    return true
  } else if number < 2 || number % 2 == 0 || number % 3 == 0 {
    return false
  }
  var i = 5
  while i * i <= number {
    if number % i == 0 || number % (i + 2) == 0 {
      return false
    }
    i = i + 6
  }
  return true
}

fun solution(nth: int): int {
  var count = 0
  var num = 2
  while true {
    if is_prime(num) {
      count = count + 1
      if count == nth {
        return num
      }
    }
    num = num + 1
  }
  return 0
}

print("solution() = " + str(solution(10001)))
