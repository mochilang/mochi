/*
Project Euler Problem 38 - Pandigital Multiples
------------------------------------------------
Find the largest 1 to 9 pandigital 9-digit number that can be written
as the concatenated product of an integer with (1,2,...,n) where n > 1.

Observation:
If n > 1 and the result has 9 digits, the base integer can have at most
4 digits when multiplied by (1,2).  Concatenating a four-digit number `a`
with its double `2a` yields `100002 * a`.  Searching the range 9999..5000
covers all such candidates.

If no four-digit base works, try three-digit bases where the concatenation
of `a`, `2a`, and `3a` yields `1002003 * a` for 333..100.

Pandigital Test:
A number is 1-9 pandigital if it has nine digits, none are zero and each
of the digits 1..9 appears exactly once.  We test this by scanning digits
and marking them in an array.  Any zero, duplicate, or missing digit fails
the test.  The algorithm runs in O(k) time for k candidates.
*/

fun is_9_pandigital(n: int): bool {
  var digits: list<int> = []
  var i = 0
  while i < 10 {
    digits = append(digits, 0)
    i = i + 1
  }
  var count = 0
  var x = n
  while x > 0 {
    let digit = x % 10
    if digit == 0 { return false }
    if digits[digit] == 1 { return false }
    digits[digit] = 1
    x = x / 10
    count = count + 1
  }
  return count == 9 && digits[1] == 1 && digits[2] == 1 && digits[3] == 1 && digits[4] == 1 && digits[5] == 1 && digits[6] == 1 && digits[7] == 1 && digits[8] == 1 && digits[9] == 1
}

fun solution(): int {
  var base_num = 9999
  while base_num >= 5000 {
    let candidate = 100002 * base_num
    if is_9_pandigital(candidate) { return candidate }
    base_num = base_num - 1
  }
  base_num = 333
  while base_num >= 100 {
    let candidate = 1002003 * base_num
    if is_9_pandigital(candidate) { return candidate }
    base_num = base_num - 1
  }
  return 0
}

print("solution() = " + str(solution()))
