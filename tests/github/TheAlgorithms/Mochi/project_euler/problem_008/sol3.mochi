/*
Project Euler Problem 8: Largest product in a series.

Given a 1000-digit number, find the greatest product of thirteen adjacent digits.
This implementation maintains a sliding window of thirteen digits. When the next
incoming digit is at least as large as the digit leaving the window, the window
slides forward by one position. Otherwise the current window's product is
computed and the window jumps ahead by thirteen characters. The maximum product
encountered is returned. The code is written in pure Mochi and runs on
runtime/vm without any FFI.
*/

let N: string =
  "73167176531330624919225119674426574742355349194934" +
  "96983520312774506326239578318016984801869478851843" +
  "85861560789112949495459501737958331952853208805511" +
  "12540698747158523863050715693290963295227443043557" +
  "66896648950445244523161731856403098711121722383113" +
  "62229893423380308135336276614282806444486645238749" +
  "30358907296290491560440772390713810515859307960866" +
  "70172427121883998797908792274921901699720888093776" +
  "65727333001053367881220235421809751254540594752243" +
  "52584907711670556013604839586446706324415722155397" +
  "53697817977846174064955149290862569321978468622482" +
  "83972241375657056057490261407972968652414535100474" +
  "82166370484403199890008895243450658541227588666881" +
  "16427171479924442928230863465674813919123162824586" +
  "17866458359124566529476545682848912883142607690042" +
  "24219022671055626321111109370544217506941658960408" +
  "07198403850962455444362981230987879927244284909188" +
  "84580156166097919133875499200524063689912560717606" +
  "05886116467109405077541002256983155200055935729725" +
  "71636269561882670428252483600823257530420752963450"

fun str_eval(s: string): int {
  var product: int = 1
  var i: int = 0
  while i < len(s) {
    product = product * (s[i:i+1] as int)
    i = i + 1
  }
  return product
}

fun solution(n: string): int {
  var largest_product: int = -1
  var substr: string = n[0:13]
  var cur_index: int = 13
  while cur_index < len(n) - 13 {
    if (n[cur_index:cur_index+1] as int) >= (substr[0:1] as int) {
      substr = substr[1:len(substr)] + n[cur_index:cur_index+1]
      cur_index = cur_index + 1
    } else {
      let prod: int = str_eval(substr)
      if prod > largest_product {
        largest_product = prod
      }
      substr = n[cur_index:cur_index+13]
      cur_index = cur_index + 13
    }
  }
  return largest_product
}

fun main() {
  let res: int = solution(N)
  print("solution() = " + str(res))
}

main()
