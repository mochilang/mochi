/*
Project Euler Problem 58: Spiral primes.
----------------------------------------
Starting with 1 and forming a square spiral, we count primes on both
Diagonals. As each layer of the spiral is added, four new corner numbers
appear. Only the first three of these corners can be prime because the
last corner is always a perfect square. We expand the spiral until the
ratio of diagonal primes to total diagonal numbers drops below a given
threshold. This implementation uses a 6k Â± 1 primality test and runs
on runtime/vm without FFI or the `any` type.
*/

fun is_prime(number: int): bool {
  if 1 < number && number < 4 { return true }
  if number < 2 || number % 2 == 0 || number % 3 == 0 { return false }
  var i = 5
  while i * i <= number {
    if number % i == 0 || number % (i + 2) == 0 { return false }
    i = i + 6
  }
  return true
}

fun solution(ratio: float): int {
  var j: int = 3
  var primes: int = 3
  while (primes as float) / (2 * j - 1) >= ratio {
    var i = j * j + j + 1
    let limit = (j + 2) * (j + 2)
    let step = j + 1
    while i < limit {
      if is_prime(i) { primes = primes + 1 }
      i = i + step
    }
    j = j + 2
  }
  return j
}

fun test_solution() {
  if solution(0.5) != 11 { panic("solution 0.5 failed") }
  if solution(0.2) != 309 { panic("solution 0.2 failed") }
  if solution(0.111) != 11317 { panic("solution 0.111 failed") }
}

fun main() {
  test_solution()
  print(str(solution(0.1)))
}

main()
