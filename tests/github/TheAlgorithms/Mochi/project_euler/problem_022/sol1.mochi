/*
Project Euler Problem 22: Name scores

Given a text file containing over five thousand first names in quotes and
separated by commas, the goal is to compute the sum of all name scores.
Each name score is calculated by first sorting the list of names in
alphabetical order, then for each name multiplying its alphabetical value
(the sum of positions of its letters in the alphabet where A=1, B=2, ...)
by its 1-based position in the sorted list.

This program reads the comma-separated names from standard input, parses
them into a list, sorts the names using insertion sort (O(n^2) time, O(1)
extra space), computes each name's alphabetical value, and accumulates the
final total.
*/

fun parse_names(line: string): list<string> {
  var names: list<string> = []
  var current = ""
  var i = 0
  while i < len(line) {
    let ch = substring(line, i, i + 1)
    if ch == "," {
      names = append(names, current)
      current = ""
    } else if ch != "\"" {
      current = current + ch
    }
    i = i + 1
  }
  names = append(names, current)
  return names
}

fun insertion_sort(arr: list<string>): list<string> {
  var a = arr
  var i = 1
  while i < len(a) {
    let key = a[i]
    var j = i - 1
    while j >= 0 && a[j] > key {
      a[j + 1] = a[j]
      j = j - 1
    }
    a[j + 1] = key
    i = i + 1
  }
  return a
}

fun letter_value(ch: string): int {
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  var idx = 0
  while idx < len(alphabet) {
    if substring(alphabet, idx, idx + 1) == ch {
      return idx + 1
    }
    idx = idx + 1
  }
  return 0
}

fun name_score(name: string): int {
  var score = 0
  var i = 0
  while i < len(name) {
    score = score + letter_value(substring(name, i, i + 1))
    i = i + 1
  }
  return score
}

fun main() {
  let line = input()
  let names = insertion_sort(parse_names(line))
  var total = 0
  var i = 0
  while i < len(names) {
    total = total + (i + 1) * name_score(names[i])
    i = i + 1
  }
  print(str(total))
}

main()
