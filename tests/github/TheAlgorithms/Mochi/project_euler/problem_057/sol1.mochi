/*
Project Euler Problem 57: Square Root Convergents

The square root of 2 can be written as the continued fraction
1 + 1/(2 + 1/(2 + 1/(2 + ...))). Each expansion produces a fraction.

The numerators and denominators of successive expansions obey:
  numerator   = prev_numerator + 2 * prev_denominator
  denominator = prev_numerator + prev_denominator

This program counts how many of the first n expansions have
a numerator with more digits than the denominator.

Time Complexity: O(n)
Space Complexity: O(1)
*/
fun solution(n: int): int {
  var prev_num = 1
  var prev_den = 1
  var count = 0
  var i = 1
  while i <= n {
    let num = prev_num + 2 * prev_den
    let den = prev_num + prev_den
    if len(str(num)) > len(str(den)) {
      count = count + 1
    }
    prev_num = num
    prev_den = den
    i = i + 1
  }
  return count
}

print(solution(14))
print(solution(100))
print(solution(1000))
