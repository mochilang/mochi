/*
Champernowne's Constant Digit Product
------------------------------------
Project Euler Problem 40:

An irrational decimal fraction is created by concatenating positive integers:
0.123456789101112131415...

Let d_n be the nth digit of the fractional part.
Compute d_1 × d_10 × d_100 × d_1000 × d_10000 × d_100000 × d_1000000.

This program generates the constant on the fly by iterating over
successive integers and counting digits without storing the entire
million‑digit string. When a target position is reached, it records the
current digit. The digits are then multiplied to obtain the result.
The approach runs in O(n) time with constant memory.
*/

fun solution(): int {
  let targets = [1, 10, 100, 1000, 10000, 100000, 1000000]
  var idx = 0
  var product = 1
  var count = 0
  var i = 1
  while idx < len(targets) {
    let s = str(i)
    var j = 0
    while j < len(s) {
      count = count + 1
      if count == targets[idx] {
        product = product * (s[j] as int)
        idx = idx + 1
        if idx == len(targets) { break }
      }
      j = j + 1
    }
    i = i + 1
  }
  return product
}

fun test_solution() {
  if solution() != 210 { panic("solution failed") }
}

fun main() {
  test_solution()
  print(str(solution()))
}

main()
