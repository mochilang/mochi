/*
Truncatable Primes (Project Euler Problem 37)

A prime number is called truncatable if every number formed by successively removing
digits from left to right and from right to left remains prime. For example, 3797 is
truncatable because 3797, 797, 97, 7 and 3797, 379, 37, 3 are all primes.

This program searches for the first eleven primes with this property and computes
their sum. It implements:
  - is_prime: checks primality using trial division with 6k Â± 1 optimization.
  - list_truncated_nums: generates all left and right truncations of a number.
  - validate: quickly rejects numbers whose first or last three digits are not prime.
  - compute_truncated_primes: iterates over odd numbers collecting truncatable primes.
*/

fun is_prime(number: int): bool {
  if 1 < number && number < 4 { return true }
  if number < 2 || number % 2 == 0 || number % 3 == 0 { return false }
  var i = 5
  while i * i <= number {
    if number % i == 0 || number % (i + 2) == 0 { return false }
    i = i + 6
  }
  return true
}

fun list_truncated_nums(n: int): list<int> {
  let str_num = str(n)
  var list_nums: list<int> = [n]
  var i = 1
  let length = len(str_num)
  while i < length {
    let right = int(substring(str_num, i, length))
    let left = int(substring(str_num, 0, length - i))
    list_nums = append(list_nums, right)
    list_nums = append(list_nums, left)
    i = i + 1
  }
  return list_nums
}

fun validate(n: int): bool {
  let s = str(n)
  let length = len(s)
  if length > 3 {
    let last3 = int(substring(s, length - 3, length))
    let first3 = int(substring(s, 0, 3))
    if !(is_prime(last3) && is_prime(first3)) { return false }
  }
  return true
}

fun compute_truncated_primes(count: int): list<int> {
  var list_truncated_primes: list<int> = []
  var num = 13
  while len(list_truncated_primes) != count {
    if validate(num) {
      let list_nums = list_truncated_nums(num)
      var all_prime = true
      var j = 0
      while j < len(list_nums) {
        if !is_prime(list_nums[j]) {
          all_prime = false
          break
        }
        j = j + 1
      }
      if all_prime { list_truncated_primes = append(list_truncated_primes, num) }
    }
    num = num + 2
  }
  return list_truncated_primes
}

fun solution(): int {
  let primes = compute_truncated_primes(11)
  var total = 0
  var i = 0
  while i < len(primes) {
    total = total + primes[i]
    i = i + 1
  }
  return total
}

print("sum(compute_truncated_primes(11)) = " + str(solution()))
