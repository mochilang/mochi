/*
Project Euler Problem 4: Largest palindrome product

Given a positive integer n (default 998001) representing an upper bound,
find the largest palindromic number that is less than n and can be written
as the product of two 3-digit numbers (from 100 to 999).

Algorithm:
1. Iterate descending numbers from n-1 down to 10000, since 100*100=10000.
2. For each candidate, check if it is a palindrome by comparing characters
   from both ends of its string representation.
3. If palindrome, test divisibility by three-digit numbers starting at 999
   and decreasing. When a divisor evenly divides the candidate and the
   quotient also has three digits, the candidate is the answer.
4. If no such number exists below n, raise an error.

This implementation is pure Mochi and uses only the runtime VM features.
*/

fun is_palindrome(num: int): bool {
  let s = str(num)
  var i = 0
  var j = len(s) - 1
  while i < j {
    if s[i:i+1] != s[j:j+1] { return false }
    i = i + 1
    j = j - 1
  }
  return true
}

fun solution(n: int): int {
  var number = n - 1
  while number > 9999 {
    if is_palindrome(number) {
      var divisor = 999
      while divisor > 99 {
        if number % divisor == 0 {
          let other = number / divisor
          if len(str(other)) == 3 { return number }
        }
        divisor = divisor - 1
      }
    }
    number = number - 1
  }
  print("That number is larger than our acceptable range.")
  return 0
}

print("solution() = " + str(solution(998001)))
