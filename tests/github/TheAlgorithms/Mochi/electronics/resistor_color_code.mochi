/*
Resistor Color Code
-------------------
Computes the resistance of a resistor from its color bands following the
IEC 60062 standard. Bands encode significant digits, a multiplier, optional
tolerance and temperature coefficient. The algorithm:
1. Validate the number of bands (3-6) and that each color name is known.
2. Determine how many bands encode significant digits for the given size.
3. Convert significant colors to a number using lookup tables.
4. Multiply by the band specific multiplier and append tolerance and
   optional temperature coefficient.
Implementation uses only pure Mochi with typed maps and lists.
*/

let valid_colors: list<string> = [
  "Black", "Brown", "Red", "Orange", "Yellow", "Green",
  "Blue", "Violet", "Grey", "White", "Gold", "Silver",
]

let significant_figures_color_values = {
  "Black": 0, "Brown": 1, "Red": 2, "Orange": 3, "Yellow": 4,
  "Green": 5, "Blue": 6, "Violet": 7, "Grey": 8, "White": 9,
}

let multiplier_color_values = {
  "Black": 1.0, "Brown": 10.0, "Red": 100.0, "Orange": 1000.0,
  "Yellow": 10000.0, "Green": 100000.0, "Blue": 1000000.0,
  "Violet": 10000000.0, "Grey": 100000000.0, "White": 1000000000.0,
  "Gold": 0.1, "Silver": 0.01,
}

let tolerance_color_values = {
  "Brown": 1.0, "Red": 2.0, "Orange": 0.05, "Yellow": 0.02,
  "Green": 0.5, "Blue": 0.25, "Violet": 0.1, "Grey": 0.01,
  "Gold": 5.0, "Silver": 10.0,
}

let temperature_coeffecient_color_values = {
  "Black": 250, "Brown": 100, "Red": 50, "Orange": 15,
  "Yellow": 25, "Green": 20, "Blue": 10, "Violet": 5, "Grey": 1,
}

fun contains(list: list<string>, value: string): bool {
  for c in list {
    if c == value { return true }
  }
  return false
}

fun get_significant_digits(colors: list<string>): int {
  var digit = 0
  for color in colors {
    if !(color in significant_figures_color_values) {
      panic(color + " is not a valid color for significant figure bands")
    }
    digit = digit * 10 + significant_figures_color_values[color]
  }
  return digit
}

fun get_multiplier(color: string): float {
  if !(color in multiplier_color_values) {
    panic(color + " is not a valid color for multiplier band")
  }
  return multiplier_color_values[color]
}

fun get_tolerance(color: string): float {
  if !(color in tolerance_color_values) {
    panic(color + " is not a valid color for tolerance band")
  }
  return tolerance_color_values[color]
}

fun get_temperature_coeffecient(color: string): int {
  if !(color in temperature_coeffecient_color_values) {
    panic(color + " is not a valid color for temperature coeffecient band")
  }
  return temperature_coeffecient_color_values[color]
}

fun get_band_type_count(total: int, typ: string): int {
  if total == 3 {
    if typ == "significant" { return 2 }
    if typ == "multiplier" { return 1 }
    panic(typ + " is not valid for a 3 band resistor")
  } else if total == 4 {
    if typ == "significant" { return 2 }
    if typ == "multiplier" { return 1 }
    if typ == "tolerance" { return 1 }
    panic(typ + " is not valid for a 4 band resistor")
  } else if total == 5 {
    if typ == "significant" { return 3 }
    if typ == "multiplier" { return 1 }
    if typ == "tolerance" { return 1 }
    panic(typ + " is not valid for a 5 band resistor")
  } else if total == 6 {
    if typ == "significant" { return 3 }
    if typ == "multiplier" { return 1 }
    if typ == "tolerance" { return 1 }
    if typ == "temp_coeffecient" { return 1 }
    panic(typ + " is not valid for a 6 band resistor")
  } else {
    panic(str(total) + " is not a valid number of bands")
  }
}

fun check_validity(number_of_bands: int, colors: list<string>): bool {
  if number_of_bands < 3 || number_of_bands > 6 {
    panic("Invalid number of bands. Resistor bands must be 3 to 6")
  }
  if number_of_bands != len(colors) {
    panic("Expecting " + str(number_of_bands) + " colors, provided " + str(len(colors)) + " colors")
  }
  for color in colors {
    if !contains(valid_colors, color) {
      panic(color + " is not a valid color")
    }
  }
  return true
}

fun calculate_resistance(number_of_bands: int, color_code_list: list<string>): string {
  check_validity(number_of_bands, color_code_list)
  let sig_count = get_band_type_count(number_of_bands, "significant")
  let significant_colors = color_code_list[0:sig_count]
  let significant_digits = get_significant_digits(significant_colors)
  let multiplier_color = color_code_list[sig_count]
  let multiplier = get_multiplier(multiplier_color)
  var tolerance = 20.0
  if number_of_bands >= 4 {
    let tolerance_color = color_code_list[sig_count + 1]
    tolerance = get_tolerance(tolerance_color)
  }
  var temp_coeff = 0
  if number_of_bands == 6 {
    let temp_color = color_code_list[sig_count + 2]
    temp_coeff = get_temperature_coeffecient(temp_color)
  }
  let resistance_value = multiplier * significant_digits
  var resistance_str = str(resistance_value)
  if resistance_value == int(resistance_value) {
    resistance_str = str(int(resistance_value))
  }
  var answer = resistance_str + "Ω ±" + str(tolerance) + "% "
  if temp_coeff != 0 {
    answer = answer + str(temp_coeff) + " ppm/K"
  }
  return answer
}

test "3 band resistor" {
  expect calculate_resistance(3, ["Black","Blue","Orange"]) == "6000Ω ±20% "
}

test "4 band resistor" {
  expect calculate_resistance(4, ["Orange","Green","Blue","Gold"]) == "35000000Ω ±5% "
}

test "5 band resistor" {
  expect calculate_resistance(5, ["Violet","Brown","Grey","Silver","Green"]) == "7.18Ω ±0.5% "
}

test "6 band resistor" {
  expect calculate_resistance(6, ["Red","Green","Blue","Yellow","Orange","Grey"]) == "2560000Ω ±0.05% 1 ppm/K"
}

