// Generated by Mochi Zig transpiler on 2025-07-24 20:52 +0700
const std = @import("std");

const LDAPClient = struct {
    base: []const u8,
    host: []const u8,
    port: i64,
    use_s_s_l: bool,
    bind_d_n: []const u8,
    bind_password: []const u8,
    user_filter: []const u8,
    group_filter: []const u8,
    attributes: [][]const u8,
};

fn connect(client: LDAPClient) bool {
    return !std.mem.eql(u8, client.host, "") and client.port > 0;
}

fn mochi_main() void {
    const client: LDAPClient = .{ .base = "dc=example,dc=com", .host = "ldap.example.com", .port = 389, .use_s_s_l = false, .bind_d_n = "uid=readonlyuser,ou=People,dc=example,dc=com", .bind_password = "readonlypassword", .user_filter = "(uid=%s)", .group_filter = "(memberUid=%s)", .attributes = @constCast(&[_][]const u8{"givenName", "sn", "mail", "uid"})[0..] };
    if (connect(client)) {
        std.io.getStdOut().writer().print("{s}\n", .{_concat_string("Connected to ", client.host)}) catch unreachable;
    } else {
        std.io.getStdOut().writer().print("{s}\n", .{"Failed to connect"}) catch unreachable;
    }
}

pub fn main() void {
    mochi_main();
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
