// Generated by Mochi Zig transpiler on 2025-08-01 18:38 +0700
const std = @import("std");

const a: []f64 = @constCast(&[_]f64{1.0, 0 - 0.00000000000000027756, 0.33333333, 0 - 0.0000000000000000185})[0..];
const b: []f64 = @constCast(&[_]f64{0.16666667, 0.5, 0.5, 0.16666667})[0..];
const sig: []f64 = @constCast(&[_]f64{0 - 0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, 0 - 0.662370894973, 0 - 1.00700480494, 0 - 0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, 0 - 0.2085993586, 0 - 0.172842103641, 0 - 0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589})[0..];
var res: []f64 = &[_]f64{};
var k: i64 = 0;

fn applyFilter(input: []f64, a_param: []f64, b_param: []f64) []f64 {
    var out: []f64 = &[_]f64{};
    const scale: f64 = 1.0 / a_param[@as(usize, @intCast(0))];
    var i: i64 = 0;
    while (i < input.len) {
        var tmp: f64 = 0.0;
        var j: i64 = 0;
        while (j <= i and j < b_param.len) {
            tmp = tmp + b_param[@as(usize, @intCast(j))] * input[@as(usize, @intCast(i - j))];
            j = j + 1;
        }
        j = 0;
        while (j < i and j + 1 < a_param.len) {
            tmp = tmp - a_param[@as(usize, @intCast(j + 1))] * out[@as(usize, @intCast(i - j - 1))];
            j = j + 1;
        }
        out = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(out) catch unreachable; _tmp.append(tmp * scale) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
        i = i + 1;
    }
    return out;
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        res = applyFilter(sig, a, b);
        while (k < res.len) {
            std.debug.print("{d}\n", .{res[@as(usize, @intCast(k))]});
            k = k + 1;
        }
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.fmt.allocPrint(std.heap.page_allocator, "{f}", .{std.json.fmt(__bench, .{ .whitespace = .indent_2 })}) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    var usage: std.os.linux.rusage = undefined;
    if (std.os.linux.getrusage(std.os.linux.rusage.SELF, &usage) != 0) return 0;
    return @as(i64, usage.maxrss) * 1024;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
