// Generated by Mochi Zig transpiler on 2025-07-27 16:50 +0700
const std = @import("std");

fn mochi_main() void {
    const m: std.StringHashMap(i64) = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("hello", 13) catch unreachable; m.put("world", 31) catch unreachable; m.put("!", 71) catch unreachable; break :blk m; };
    for (blk: { var it = m.keyIterator(); var arr = std.ArrayList([]const u8).init(std.heap.page_allocator); while (it.next()) |k| { arr.append(k.*) catch unreachable; } break :blk arr.toOwnedSlice() catch unreachable; }) |__it0| {
        const k = __it0;
        _print(_concat_string(_concat_string(_concat_string("key = ", k), ", value = "), _str(m.get(k).?)));
    }
    for (blk: { var it = m.keyIterator(); var arr = std.ArrayList([]const u8).init(std.heap.page_allocator); while (it.next()) |k| { arr.append(k.*) catch unreachable; } break :blk arr.toOwnedSlice() catch unreachable; }) |__it1| {
        const k = __it1;
        _print(_concat_string("key = ", k));
    }
    for (blk: { var it = m.keyIterator(); var arr = std.ArrayList([]const u8).init(std.heap.page_allocator); while (it.next()) |k| { arr.append(k.*) catch unreachable; } break :blk arr.toOwnedSlice() catch unreachable; }) |__it2| {
        const k = __it2;
        _print(_concat_string("value = ", _str(m.get(k).?)));
    }
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.fmt.allocPrint(std.heap.page_allocator, "{f}", .{std.json.fmt(__bench, .{ .whitespace = .indent_2 })}) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}

fn _mem() i64 {
    var usage: std.os.linux.rusage = undefined;
    if (std.os.linux.getrusage(std.os.linux.rusage.SELF, &usage) != 0) return 0;
    return @as(i64, usage.maxrss) * 1024;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
