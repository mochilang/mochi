// Generated by Mochi Zig transpiler on 2025-08-05 00:37 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn trimSpace(s: []const u8) []const u8 {
    var start: i64 = 0;
    while (start < @as(i64, @intCast(s.len)) and std.mem.eql(u8, s[@intCast(start)..@intCast(start + 1)], " ")) {
        start = start + 1;
    }
    var end: i64 = @as(i64, @intCast(s.len));
    while (end > start and std.mem.eql(u8, s[@intCast(end - 1)..@intCast(end)], " ")) {
        end = end - 1;
    }
    return s[@intCast(start)..@intCast(end)];
}

fn isUpper(ch: []const u8) bool {
    return std.mem.order(u8, ch, "A") != .lt and std.mem.order(u8, ch, "Z") != .gt;
}

fn padLeft(s_1: []const u8, w: i64) []const u8 {
    var res: []const u8 = "";
    var n: i64 = w - @as(i64, @intCast(s_1.len));
    while (n > 0) {
        res = _concat_string(res, " ");
        n = n - 1;
    }
    return _concat_string(res, s_1);
}

fn snakeToCamel(s_param: []const u8) []const u8 {
    var s_var: []const u8 = s_param;
    s_var = trimSpace(s_var);
    var out: []const u8 = "";
    var up: bool = false;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s_var.len))) {
        const ch_1: []const u8 = s_var[@intCast(i)..@intCast(i + 1)];
        if (std.mem.eql(u8, ch_1, "_") or std.mem.eql(u8, ch_1, "-") or std.mem.eql(u8, ch_1, " ") or std.mem.eql(u8, ch_1, ".")) {
            up = true;
            i = i + 1;
            continue;
        }
        if (i == 0) {
            out = _concat_string(out, _lower(ch_1));
            up = false;
            i = i + 1;
            continue;
        }
        if (up) {
            out = _concat_string(out, _upper(ch_1));
            up = false;
        } else {
            out = _concat_string(out, ch_1);
        }
        i = i + 1;
    }
    return out;
}

fn camelToSnake(s_param_1: []const u8) []const u8 {
    var s_var_1: []const u8 = s_param_1;
    s_var_1 = trimSpace(s_var_1);
    var out_1: []const u8 = "";
    var prev_und: bool = false;
    var i_1: i64 = 0;
    while (i_1 < @as(i64, @intCast(s_var_1.len))) {
        const ch_2: []const u8 = s_var_1[@intCast(i_1)..@intCast(i_1 + 1)];
        if (std.mem.eql(u8, ch_2, " ") or std.mem.eql(u8, ch_2, "-") or std.mem.eql(u8, ch_2, ".")) {
            if (!(prev_und) and @as(i64, @intCast(out_1.len)) > 0) {
                out_1 = _concat_string(out_1, "_");
                prev_und = true;
            }
            i_1 = i_1 + 1;
            continue;
        }
        if (std.mem.eql(u8, ch_2, "_")) {
            if (!(prev_und) and @as(i64, @intCast(out_1.len)) > 0) {
                out_1 = _concat_string(out_1, "_");
                prev_und = true;
            }
            i_1 = i_1 + 1;
            continue;
        }
        if (isUpper(ch_2)) {
            if (i_1 > 0 and !(prev_und)) {
                out_1 = _concat_string(out_1, "_");
            }
            out_1 = _concat_string(out_1, _lower(ch_2));
            prev_und = false;
        } else {
            out_1 = _concat_string(out_1, _lower(ch_2));
            prev_und = false;
        }
        i_1 = i_1 + 1;
    }
    var start_1: i64 = 0;
    while (start_1 < @as(i64, @intCast(out_1.len)) and std.mem.eql(u8, out_1[@intCast(start_1)..@intCast(start_1 + 1)], "_")) {
        start_1 = start_1 + 1;
    }
    var end_1: i64 = @as(i64, @intCast(out_1.len));
    while (end_1 > start_1 and std.mem.eql(u8, out_1[@intCast(end_1 - 1)..@intCast(end_1)], "_")) {
        end_1 = end_1 - 1;
    }
    out_1 = out_1[@intCast(start_1)..@intCast(end_1)];
    var res_1: []const u8 = "";
    var j: i64 = 0;
    var last_und: bool = false;
    while (j < @as(i64, @intCast(out_1.len))) {
        const c: []const u8 = out_1[@intCast(j)..@intCast(j + 1)];
        if (std.mem.eql(u8, c, "_")) {
            if (!(last_und)) {
                res_1 = _concat_string(res_1, c);
            }
            last_und = true;
        } else {
            res_1 = _concat_string(res_1, c);
            last_und = false;
        }
        j = j + 1;
    }
    return res_1;
}

fn mochi_main() void {
    const samples: [][]const u8 = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 12) catch unreachable; _tmp0[0] = "snakeCase"; _tmp0[1] = "snake_case"; _tmp0[2] = "snake-case"; _tmp0[3] = "snake case"; _tmp0[4] = "snake CASE"; _tmp0[5] = "snake.case"; _tmp0[6] = "variable_10_case"; _tmp0[7] = "variable10Case"; _tmp0[8] = "É›rgo rE tHis"; _tmp0[9] = "hurry-up-joe!"; _tmp0[10] = "c://my-docs/happy_Flag-Day/12.doc"; _tmp0[11] = " spaces "; break :blk0 _tmp0; };
    std.debug.print("{s}\n", .{"=== To snake_case ==="});
    for (samples) |__it0| {
        const s_2 = __it0;
        std.debug.print("{s}\n", .{_concat_string(_concat_string(padLeft(s_2, 34), " => "), camelToSnake(s_2))});
    }
    std.debug.print("{s}\n", .{""});
    std.debug.print("{s}\n", .{"=== To camelCase ==="});
    for (samples) |__it1| {
        const s_3 = __it1;
        std.debug.print("{s}\n", .{_concat_string(_concat_string(padLeft(s_3, 34), " => "), snakeToCamel(s_3))});
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
