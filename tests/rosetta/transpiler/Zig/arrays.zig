// Generated by Mochi Zig transpiler on 2025-08-02 12:10 +0700
const std = @import("std");

var a: [5]i64 = [5]i64{0, 0, 0, 0, 0};
var s: []i64 = &[_]i64{};
var cap_s: i64 = 5;

fn listStr(xs: []i64) []const u8 {
    var s_var: []const u8 = "[";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(xs.len))) {
        s_var = _concat_string(s_var, _str(xs[@as(usize, @intCast(i))]));
        if (i + 1 < @as(i64, @intCast(xs.len))) {
            s_var = _concat_string(s_var, " ");
        }
        i = i + 1;
    }
    s_var = _concat_string(s_var, "]");
    return s_var;
}

pub fn main() void {
    s = a[0..4];
    std.debug.print("{s}\n", .{_concat_string("len(a) = ", _str(@as(i64, @intCast(a.len))))});
    std.debug.print("{s}\n", .{_concat_string("a = ", listStr(a[0..]))});
    a[@as(usize, @intCast(0))] = 3;
    std.debug.print("{s}\n", .{_concat_string("a = ", listStr(a[0..]))});
    std.debug.print("{s}\n", .{_concat_string("a[0] = ", _str(a[@as(usize, @intCast(0))]))});
    std.debug.print("{s}\n", .{_concat_string("s = ", listStr(s))});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("len(s) = ", _str(@as(i64, @intCast(s.len)))), "  cap(s) = "), _str(cap_s))});
    s = a[0..5];
    std.debug.print("{s}\n", .{_concat_string("s = ", listStr(s))});
    a[@as(usize, @intCast(0))] = 22;
    s[@as(usize, @intCast(0))] = 22;
    std.debug.print("{s}\n", .{_concat_string("a = ", listStr(a[0..]))});
    std.debug.print("{s}\n", .{_concat_string("s = ", listStr(s))});
    s = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(s) catch unreachable; _tmp.append(4) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    s = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(s) catch unreachable; _tmp.append(5) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    s = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(s) catch unreachable; _tmp.append(6) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    cap_s = 10;
    std.debug.print("{s}\n", .{_concat_string("s = ", listStr(s))});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("len(s) = ", _str(@as(i64, @intCast(s.len)))), "  cap(s) = "), _str(cap_s))});
    a[@as(usize, @intCast(4))] = 0 - 1;
    std.debug.print("{s}\n", .{_concat_string("a = ", listStr(a[0..]))});
    std.debug.print("{s}\n", .{_concat_string("s = ", listStr(s))});
    s = &[_]i64{};
    for (0..8) |_| {
        s = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(s) catch unreachable; _tmp.append(0) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    }
    cap_s = 8;
    std.debug.print("{s}\n", .{_concat_string("s = ", listStr(s))});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("len(s) = ", _str(@as(i64, @intCast(s.len)))), "  cap(s) = "), _str(cap_s))});
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ lhs, rhs }) catch unreachable;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
