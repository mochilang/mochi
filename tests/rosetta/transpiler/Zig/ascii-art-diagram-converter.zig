// Generated by Mochi Zig transpiler on 2025-08-02 10:28 +0700
const std = @import("std");

fn mochi_main() void {
    std.debug.print("{s}\n", .{"Diagram after trimming whitespace and removal of blank lines:\n"});
    std.debug.print("{s}\n", .{"+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"});
    std.debug.print("{s}\n", .{"|                      ID                       |"});
    std.debug.print("{s}\n", .{"+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"});
    std.debug.print("{s}\n", .{"|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |"});
    std.debug.print("{s}\n", .{"+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"});
    std.debug.print("{s}\n", .{"|                    QDCOUNT                    |"});
    std.debug.print("{s}\n", .{"+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"});
    std.debug.print("{s}\n", .{"|                    ANCOUNT                    |"});
    std.debug.print("{s}\n", .{"+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"});
    std.debug.print("{s}\n", .{"|                    NSCOUNT                    |"});
    std.debug.print("{s}\n", .{"+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"});
    std.debug.print("{s}\n", .{"|                    ARCOUNT                    |"});
    std.debug.print("{s}\n", .{"+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"});
    std.debug.print("{s}\n", .{"\nDecoded:\n"});
    std.debug.print("{s}\n", .{"Name     Bits  Start  End"});
    std.debug.print("{s}\n", .{"=======  ====  =====  ==="});
    std.debug.print("{s}\n", .{"ID        16      0    15"});
    std.debug.print("{s}\n", .{"QR         1     16    16"});
    std.debug.print("{s}\n", .{"Opcode     4     17    20"});
    std.debug.print("{s}\n", .{"AA         1     21    21"});
    std.debug.print("{s}\n", .{"TC         1     22    22"});
    std.debug.print("{s}\n", .{"RD         1     23    23"});
    std.debug.print("{s}\n", .{"RA         1     24    24"});
    std.debug.print("{s}\n", .{"Z          3     25    27"});
    std.debug.print("{s}\n", .{"RCODE      4     28    31"});
    std.debug.print("{s}\n", .{"QDCOUNT   16     32    47"});
    std.debug.print("{s}\n", .{"ANCOUNT   16     48    63"});
    std.debug.print("{s}\n", .{"NSCOUNT   16     64    79"});
    std.debug.print("{s}\n", .{"ARCOUNT   16     80    95"});
    std.debug.print("{s}\n", .{"\nTest string in hex:"});
    std.debug.print("{s}\n", .{"78477bbf5496e12e1bf169a4"});
    std.debug.print("{s}\n", .{"\nTest string in binary:"});
    std.debug.print("{s}\n", .{"011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100"});
    std.debug.print("{s}\n", .{"\nUnpacked:\n"});
    std.debug.print("{s}\n", .{"Name     Size  Bit pattern"});
    std.debug.print("{s}\n", .{"=======  ====  ================"});
    std.debug.print("{s}\n", .{"ID        16   0111100001000111"});
    std.debug.print("{s}\n", .{"QR         1   0"});
    std.debug.print("{s}\n", .{"Opcode     4   1111"});
    std.debug.print("{s}\n", .{"AA         1   0"});
    std.debug.print("{s}\n", .{"TC         1   1"});
    std.debug.print("{s}\n", .{"RD         1   1"});
    std.debug.print("{s}\n", .{"RA         1   1"});
    std.debug.print("{s}\n", .{"Z          3   011"});
    std.debug.print("{s}\n", .{"RCODE      4   1111"});
    std.debug.print("{s}\n", .{"QDCOUNT   16   0101010010010110"});
    std.debug.print("{s}\n", .{"ANCOUNT   16   1110000100101110"});
    std.debug.print("{s}\n", .{"NSCOUNT   16   0001101111110001"});
    std.debug.print("{s}\n", .{"ARCOUNT   16   0110100110100100"});
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.json.stringifyAlloc(std.heap.page_allocator, __bench, .{ .whitespace = .indent_2 }) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    var usage: std.os.linux.rusage = undefined;
    if (std.os.linux.getrusage(std.os.linux.rusage.SELF, &usage) != 0) return 0;
    return @as(i64, usage.maxrss) * 1024;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
