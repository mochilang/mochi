// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:59:55Z
const std = @import("std");

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

const Beast = union(enum) {
    Dog: struct { kind: []const u8, name: []const u8 },
    Cat: struct { kind: []const u8, name: []const u8 },
};

fn beastKind(b: *Beast) []const u8 {
    return switch (b.*) {.Dog => |_tmp0| _tmp0.kind, .Cat => |_tmp1| _tmp1.kind, };
}

fn beastName(b: *Beast) []const u8 {
    return switch (b.*) {.Dog => |_tmp2| _tmp2.name, .Cat => |_tmp3| _tmp3.name, };
}

fn beastCry(b: *Beast) []const u8 {
    return switch (b.*) {.Dog => |_tmp4| "Woof", .Cat => |_tmp5| "Meow", };
}

fn bprint(b: *Beast) void {
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(beastName(&b), ", who's a "), beastKind(&b)), ", cries: \""), beastCry(&b)), "\".")});
}

fn user_main() void {
    const d: Beast = Beast{ .Dog = .{
    .kind = "labrador",
    .name = "Max",
} }; // Beast
    const c: Beast = Beast{ .Cat = .{
    .kind = "siamese",
    .name = "Sammy",
} }; // Beast
    bprint(&d);
    bprint(&c);
}

pub fn main() void {
    user_main();
}
