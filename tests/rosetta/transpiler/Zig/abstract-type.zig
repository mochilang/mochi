// Generated by Mochi Zig transpiler on 2025-07-24 20:52 +0700
const std = @import("std");

const Cat = struct {
    kind: []const u8,
    name: []const u8,
};

const Dog = struct {
    kind: []const u8,
    name: []const u8,
};

fn beastKind(b: std.StringHashMap(i64)) []const u8 {
    return if (b.get("op").? == 0) 0 else if (b.get("op").? == 1) 0 else "";
}

fn beastName(b: std.StringHashMap(i64)) []const u8 {
    return if (b.get("op").? == 0) 0 else if (b.get("op").? == 1) 0 else "";
}

fn beastCry(b: std.StringHashMap(i64)) []const u8 {
    return if (b.get("op").? == 0) 0 else if (b.get("op").? == 1) 0 else "";
}

fn bprint(b: std.StringHashMap(i64)) void {
    std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(beastName(b), ", who's a "), beastKind(b)), ", cries: \""), beastCry(b)), "\".")}) catch unreachable;
}

fn mochi_main() void {
    const d: Dog = .{ .op = 0, .kind = "labrador", .name = "Max" };
    const c: Cat = .{ .op = 1, .kind = "siamese", .name = "Sammy" };
    bprint(d);
    bprint(c);
}

pub fn main() void {
    mochi_main();
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
