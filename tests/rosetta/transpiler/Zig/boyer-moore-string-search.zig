// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:01:18Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn indexOfStr(h: []const u8, n: []const u8) i32 {
    const hlen = @as(i32, @intCast((h).len)); // i32
    const nlen = @as(i32, @intCast((n).len)); // i32
    if (nlen == 0) {
        return 0;
    }
    var i = 0; // i32
    while (i <= (hlen - nlen)) {
        if (std.mem.eql(u8, _slice_string(h, i, (i + nlen), 1), n)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

fn stringSearchSingle(h: []const u8, n: []const u8) i32 {
    return indexOfStr(h, n);
}

fn stringSearch(h: []const u8, n: []const u8) []const i32 {
    var result = std.ArrayList(i32).init(std.heap.page_allocator);
    var start = 0; // i32
    const hlen = @as(i32, @intCast((h).len)); // i32
    const nlen = @as(i32, @intCast((n).len)); // i32
    while (start < hlen) {
        const idx = indexOfStr(_slice_string(h, start, hlen, 1), n); // i32
        if (idx >= 0) {
            result = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(result) catch |err| handleError(err); _tmp0.append((start + idx)) catch |err| handleError(err); const res = _tmp0.toOwnedSlice() catch |err| handleError(err); break :blk0 res; };
            start = ((start + idx) + nlen);
        } else {
            break;
        }
    }
    return result.items;
}

fn display(nums: []const i32) []const u8 {
    var s = "["; // []const u8
    var i = 0; // i32
    while (i < @as(i32, @intCast((nums).len))) {
        if (i > 0) {
            s = _concat_string(s, ", ");
        }
        s = _concat_string(s, std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{nums[i]}) catch |err| handleError(err));
        i = (i + 1);
    }
    s = _concat_string(s, "]");
    return s;
}

fn user_main() void {
    const texts = &[_][]const u8{
    "GCTAGCTCTACGAGTCTA",
    "GGCTATAATGCGTA",
    "there would have been a time for such a word",
    "needle need noodle needle",
    "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages",
    "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk.",
}; // []const []const u8
    const patterns = &[_][]const u8{
    "TCTA",
    "TAATAAA",
    "word",
    "needle",
    "and",
    "alfalfa",
}; // []const []const u8
    var i = 0; // i32
    while (i < @as(i32, @intCast((texts).len))) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("text", std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(i + 1)}) catch |err| handleError(err)), " = "), texts[i])});
        i = (i + 1);
    }
    std.debug.print("\n", .{});
    var j = 0; // i32
    while (j < @as(i32, @intCast((texts).len))) {
        const idxs = stringSearch(texts[j], patterns[j]); // []const i32
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Found \"", patterns[j]), "\" in 'text"), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(j + 1)}) catch |err| handleError(err)), "' at indexes "), display(idxs))});
        j = (j + 1);
    }
}

pub fn main() void {
    user_main();
}
