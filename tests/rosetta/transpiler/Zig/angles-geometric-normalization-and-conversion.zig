// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:00:26Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn d2d(d: f64) f64 {
    return @mod(d, 360.0);
}

fn g2g(g: f64) f64 {
    return @mod(g, 400.0);
}

fn m2m(m: f64) f64 {
    return @mod(m, 6400.0);
}

fn r2r(r: f64) f64 {
    return @mod(r, ((2.0 * 3.141592653589793)));
}

fn d2g(d: f64) f64 {
    return ((d2d(d) * 400.0) / 360.0);
}

fn d2m(d: f64) f64 {
    return ((d2d(d) * 6400.0) / 360.0);
}

fn d2r(d: f64) f64 {
    return ((d2d(d) * 3.141592653589793) / 180.0);
}

fn g2d(g: f64) f64 {
    return ((g2g(g) * 360.0) / 400.0);
}

fn g2m(g: f64) f64 {
    return ((g2g(g) * 6400.0) / 400.0);
}

fn g2r(g: f64) f64 {
    return ((g2g(g) * 3.141592653589793) / 200.0);
}

fn m2d(m: f64) f64 {
    return ((m2m(m) * 360.0) / 6400.0);
}

fn m2g(m: f64) f64 {
    return ((m2m(m) * 400.0) / 6400.0);
}

fn m2r(m: f64) f64 {
    return ((m2m(m) * 3.141592653589793) / 3200.0);
}

fn r2d(r: f64) f64 {
    return ((r2r(r) * 180.0) / 3.141592653589793);
}

fn r2g(r: f64) f64 {
    return ((r2r(r) * 200.0) / 3.141592653589793);
}

fn r2m(r: f64) f64 {
    return ((r2r(r) * 3200.0) / 3.141592653589793);
}

fn user_main() void {
    const angles = &[_]f64{
    -2.0,
    -1.0,
    0.0,
    1.0,
    2.0,
    6.2831853,
    16.0,
    57.2957795,
    359.0,
    399.0,
    6399.0,
    1000000.0,
}; // []const f64
    std.debug.print("degrees normalized_degs gradians mils radians\n", .{});
    for (angles) |a| {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{a}) catch |err| handleError(err), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{d2d(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{d2g(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{d2m(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{d2r(a)}) catch |err| handleError(err))});
    }
    std.debug.print("\ngradians normalized_grds degrees mils radians\n", .{});
    for (angles) |a| {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{a}) catch |err| handleError(err), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{g2g(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{g2d(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{g2m(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{g2r(a)}) catch |err| handleError(err))});
    }
    std.debug.print("\nmils normalized_mils degrees gradians radians\n", .{});
    for (angles) |a| {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{a}) catch |err| handleError(err), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{m2m(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{m2d(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{m2g(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{m2r(a)}) catch |err| handleError(err))});
    }
    std.debug.print("\nradians normalized_rads degrees gradians mils\n", .{});
    for (angles) |a| {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{a}) catch |err| handleError(err), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{r2r(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{r2d(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{r2g(a)}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{r2m(a)}) catch |err| handleError(err))});
    }
}

pub fn main() void {
    user_main();
}
