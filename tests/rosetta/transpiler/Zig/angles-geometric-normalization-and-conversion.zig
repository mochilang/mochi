// Generated by Mochi Zig transpiler on 2025-07-25 00:22 +0700
const std = @import("std");

fn d2d(d: f64) f64 {
    return @mod(d, 360.0);
}

fn g2g(g: f64) f64 {
    return @mod(g, 400.0);
}

fn m2m(m: f64) f64 {
    return @mod(m, 6400.0);
}

fn r2r(r: f64) f64 {
    return @mod(r, 2.0 * 3.141592653589793);
}

fn d2g(d: f64) f64 {
    return d2d(d) * 400.0 / 360.0;
}

fn d2m(d: f64) f64 {
    return d2d(d) * 6400.0 / 360.0;
}

fn d2r(d: f64) f64 {
    return d2d(d) * 3.141592653589793 / 180.0;
}

fn g2d(g: f64) f64 {
    return g2g(g) * 360.0 / 400.0;
}

fn g2m(g: f64) f64 {
    return g2g(g) * 6400.0 / 400.0;
}

fn g2r(g: f64) f64 {
    return g2g(g) * 3.141592653589793 / 200.0;
}

fn m2d(m: f64) f64 {
    return m2m(m) * 360.0 / 6400.0;
}

fn m2g(m: f64) f64 {
    return m2m(m) * 400.0 / 6400.0;
}

fn m2r(m: f64) f64 {
    return m2m(m) * 3.141592653589793 / 3200.0;
}

fn r2d(r: f64) f64 {
    return r2r(r) * 180.0 / 3.141592653589793;
}

fn r2g(r: f64) f64 {
    return r2r(r) * 200.0 / 3.141592653589793;
}

fn r2m(r: f64) f64 {
    return r2r(r) * 3200.0 / 3.141592653589793;
}

fn mochi_main() void {
    const angles: []f64 = @constCast(&[_]f64{0 - 2.0, 0 - 1.0, 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1000000.0})[0..];
    std.io.getStdOut().writer().print("{s}\n", .{"degrees normalized_degs gradians mils radians"}) catch unreachable;
    for (angles) |__it0| {
        const a = __it0;
        std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_str(a), " "), _str(d2d(a))), " "), _str(d2g(a))), " "), _str(d2m(a))), " "), _str(d2r(a)))}) catch unreachable;
    }
    std.io.getStdOut().writer().print("{s}\n", .{"\ngradians normalized_grds degrees mils radians"}) catch unreachable;
    for (angles) |__it1| {
        const a = __it1;
        std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_str(a), " "), _str(g2g(a))), " "), _str(g2d(a))), " "), _str(g2m(a))), " "), _str(g2r(a)))}) catch unreachable;
    }
    std.io.getStdOut().writer().print("{s}\n", .{"\nmils normalized_mils degrees gradians radians"}) catch unreachable;
    for (angles) |__it2| {
        const a = __it2;
        std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_str(a), " "), _str(m2m(a))), " "), _str(m2d(a))), " "), _str(m2g(a))), " "), _str(m2r(a)))}) catch unreachable;
    }
    std.io.getStdOut().writer().print("{s}\n", .{"\nradians normalized_rads degrees gradians mils"}) catch unreachable;
    for (angles) |__it3| {
        const a = __it3;
        std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_str(a), " "), _str(r2r(a))), " "), _str(r2d(a))), " "), _str(r2g(a))), " "), _str(r2m(a)))}) catch unreachable;
    }
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
