// Generated by Mochi Zig transpiler on 2025-08-04 17:00 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn indexOf(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@intCast(i)..@intCast(i + 1)], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn ord(ch: []const u8) i64 {
    const upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    var idx: i64 = indexOf(upper, ch);
    if (idx >= 0) {
        return 65 + idx;
    }
    idx = indexOf(lower, ch);
    if (idx >= 0) {
        return 97 + idx;
    }
    return 0;
}

fn chr(n: i64) []const u8 {
    const upper_1: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const lower_1: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    if (n >= 65 and n < 91) {
        return upper_1[@intCast(n - 65)..@intCast(n - 64)];
    }
    if (n >= 97 and n < 123) {
        return lower_1[@intCast(n - 97)..@intCast(n - 96)];
    }
    return "?";
}

fn shiftRune(r: []const u8, k: i64) []const u8 {
    if (std.mem.order(u8, r, "a") != .lt and std.mem.order(u8, r, "z") != .gt) {
        return chr(@mod(ord(r) - 97 + k, 26) + 97);
    }
    if (std.mem.order(u8, r, "A") != .lt and std.mem.order(u8, r, "Z") != .gt) {
        return chr(@mod(ord(r) - 65 + k, 26) + 65);
    }
    return r;
}

fn encipher(s: []const u8, k: i64) []const u8 {
    var out: []const u8 = "";
    var i_1: i64 = 0;
    while (i_1 < @as(i64, @intCast(s.len))) {
        out = _concat_string(out, shiftRune(s[@intCast(i_1)..@intCast(i_1 + 1)], k));
        i_1 = i_1 + 1;
    }
    return out;
}

fn decipher(s: []const u8, k: i64) []const u8 {
    return encipher(s, @mod(26 - @mod(k, 26), 26));
}

fn mochi_main() void {
    const pt: []const u8 = "The five boxing wizards jump quickly";
    std.debug.print("{s}\n", .{_concat_string("Plaintext: ", pt)});
    for (blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp0[0] = 0; _tmp0[1] = 1; _tmp0[2] = 7; _tmp0[3] = 25; _tmp0[4] = 26; break :blk0 _tmp0; }) |__it0| {
        const key = __it0;
        if (key < 1 or key > 25) {
            std.debug.print("{s}\n", .{_concat_string(_concat_string("Key ", _str(key)), " invalid")});
            continue;
        }
        const ct: []const u8 = encipher(pt, key);
        std.debug.print("{s}\n", .{_concat_string("Key ", _str(key))});
        std.debug.print("{s}\n", .{_concat_string("  Enciphered: ", ct)});
        std.debug.print("{s}\n", .{_concat_string("  Deciphered: ", decipher(ct, key))});
    }
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
