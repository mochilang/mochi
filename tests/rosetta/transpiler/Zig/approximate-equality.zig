// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:00:41Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn abs(x: f64) f64 {
    if (x < 0.0) {
        return -x;
    }
    return x;
}

fn maxf(a: f64, b: f64) f64 {
    if (a > b) {
        return a;
    }
    return b;
}

fn isClose(a: f64, b: f64) bool {
    const relTol = 0.000000001; // f64
    const t: i32 = std.math.abs((a - b)); // i32
    const u = (relTol * maxf(std.math.abs(a), std.math.abs(b))); // f64
    return (t <= u);
}

fn sqrtApprox(x: f64) f64 {
    var guess = x; // f64
    var i = 0; // i32
    while (i < 10) {
        guess = (((guess + (x / guess))) / 2.0);
        i = (i + 1);
    }
    return guess;
}

fn user_main() void {
    const root2 = sqrtApprox(2.0); // f64
    const pairs = &[_][]const f64{
    &[_]f64{
    100000000000000.02,
    100000000000000.02,
},
    &[_]f64{
    100.01,
    100.011,
},
    &[_]f64{
    (10000000000000.002 / 10000.0),
    1000000000.0000001,
},
    &[_]f64{
    0.001,
    0.0010000001,
},
    &[_]f64{
    0.000000000000000000000101,
    0.0,
},
    &[_]f64{
    (root2 * root2),
    2.0,
},
    &[_]f64{
    ((-root2) * root2),
    -2.0,
},
    &[_]f64{
    100000000000000000.0,
    100000000000000000.0,
},
    &[_]f64{
    3.141592653589793,
    3.141592653589793,
},
}; // []const []const f64
    for (pairs) |pair| {
        const a = pair[0]; // f64
        const b = pair[1]; // f64
        const s = if (isClose(a, b)) ("≈") else ("≉"); // []const u8
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{a}) catch |err| handleError(err), " "), s), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{b}) catch |err| handleError(err))});
    }
}

pub fn main() void {
    user_main();
}
