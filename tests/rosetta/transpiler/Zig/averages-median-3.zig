// Generated by Mochi Zig transpiler on 2025-08-02 18:10 +0700
const std = @import("std");

fn qsel(a: []f64, k_param: i64) f64 {
    var k_var: i64 = k_param;
    var arr: []f64 = a;
    while (@as(i64, @intCast(arr.len)) > 1) {
        var px: i64 = @mod(_now(), @as(i64, @intCast(arr.len)));
        const pv: f64 = arr[@as(usize, @intCast(px))];
        const last: i64 = @as(i64, @intCast(arr.len)) - 1;
        const tmp: f64 = arr[@as(usize, @intCast(px))];
        arr[@as(usize, @intCast(px))] = arr[@as(usize, @intCast(last))];
        arr[@as(usize, @intCast(last))] = tmp;
        px = 0;
        var i: i64 = 0;
        while (i < last) {
            const v: f64 = arr[@as(usize, @intCast(i))];
            if (v < pv) {
                const tmp2: f64 = arr[@as(usize, @intCast(px))];
                arr[@as(usize, @intCast(px))] = arr[@as(usize, @intCast(i))];
                arr[@as(usize, @intCast(i))] = tmp2;
                px = px + 1;
            }
            i = i + 1;
        }
        if (px == k_var) {
            return pv;
        }
        if (k_var < px) {
            arr = arr[@as(usize, @intCast(0))..@as(usize, @intCast(px))];
        } else {
            const tmp2: f64 = arr[@as(usize, @intCast(px))];
            arr[@as(usize, @intCast(px))] = pv;
            arr[@as(usize, @intCast(last))] = tmp2;
            arr = arr[@as(usize, @intCast(px + 1))..];
            k_var = k_var - (px + 1);
        }
    }
    return arr[@as(usize, @intCast(0))];
}

fn median(list: []f64) f64 {
    const arr: []f64 = list;
    const half: i64 = @divTrunc(@as(i64, @intCast(arr.len)), 2);
    const med: f64 = qsel(arr, half);
    if (@mod(@as(i64, @intCast(arr.len)), 2) == 0) {
        return (med + qsel(arr, half - 1)) / 2.0;
    }
    return med;
}

pub fn main() void {
    std.debug.print("{s}\n", .{_str(median(@constCast(&[_]f64{3.0, 1.0, 4.0, 1.0})[0..]))});
    std.debug.print("{s}\n", .{_str(median(@constCast(&[_]f64{3.0, 1.0, 4.0, 1.0, 5.0})[0..]))});
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
