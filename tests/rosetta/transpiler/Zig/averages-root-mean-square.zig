// Generated by Mochi Zig transpiler on 2025-08-02 23:01 +0700
const std = @import("std");

const n_var: i64 = 10;
var sum_var: f64 = 0.0;
var x_var: i64 = 1;
var rms_var: f64 = 0;

fn sqrtApprox(x_param: f64) f64 {
    var guess: f64 = x_param;
    var i: i64 = 0;
    while (i < 20) {
        guess = (guess + x_param / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

pub fn main() void {
    {
        const __start = _now();
        rms_var = sqrtApprox(sum_var / @as(f64, @floatFromInt(n_var)));
        while (x_var <= n_var) {
            sum_var = sum_var + @as(f64, @floatFromInt(x_var)) * @as(f64, @floatFromInt(x_var));
            x_var = x_var + 1;
        }
        std.debug.print("{s}\n", .{_str(rms_var)});
        const __end = _now();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = _mem();
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var f = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer f.close();
    var buf: [64]u8 = undefined;
    const n = f.readAll(&buf) catch return 0;
    var it = std.mem.tokenize(u8, buf[0..n], " " );
    _ = it.next(); // skip total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * 4096;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
