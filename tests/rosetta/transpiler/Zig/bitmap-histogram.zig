// Generated by Mochi Zig transpiler on 2025-08-04 18:31 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn image() [][]i64 {
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc([]i64, 3) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp1[0] = 0; _tmp1[1] = 0; _tmp1[2] = 10000; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp2[0] = 65535; _tmp2[1] = 65535; _tmp2[2] = 65535; break :blk2 _tmp2; }; _tmp0[2] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp3[0] = 65535; _tmp3[1] = 65535; _tmp3[2] = 65535; break :blk3 _tmp3; }; break :blk0 _tmp0; };
}

fn histogram(g: [][]i64, bins_param: i64) []i64 {
    var bins_var: i64 = bins_param;
    if (bins_var <= 0) {
        bins_var = @as(i64, @intCast(g[@intCast(0)].len));
    }
    var h: []i64 = &[_]i64{};
    var i: i64 = 0;
    while (i < bins_var) {
        h = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, h)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var y: i64 = 0;
    while (y < @as(i64, @intCast(g.len))) {
        const row: []i64 = g[@intCast(y)];
        var x: i64 = 0;
        while (x < @as(i64, @intCast(row.len))) {
            const p: i64 = row[@intCast(x)];
            const idx: i64 = @as(i64, @divTrunc(p * (bins_var - 1), 65535));
            h[@intCast(idx)] = h[@intCast(idx)] + 1;
            x = x + 1;
        }
        y = y + 1;
    }
    return h;
}

fn medianThreshold(h: []i64) i64 {
    var lb: i64 = 0;
    var ub: i64 = @as(i64, @intCast(h.len)) - 1;
    var l_sum: i64 = 0;
    var u_sum: i64 = 0;
    while (lb <= ub) {
        if (l_sum + h[@intCast(lb)] < u_sum + h[@intCast(ub)]) {
            l_sum = l_sum + h[@intCast(lb)];
            lb = lb + 1;
        } else {
            u_sum = u_sum + h[@intCast(ub)];
            ub = ub - 1;
        }
    }
    return @as(i64, @divTrunc(ub * 65535, @as(i64, @intCast(h.len))));
}

fn threshold(g: [][]i64, t: i64) [][]i64 {
    var out: [][]i64 = &[_][]i64{};
    var y_1: i64 = 0;
    while (y_1 < @as(i64, @intCast(g.len))) {
        const row_1: []i64 = g[@intCast(y_1)];
        var new_row: []i64 = &[_]i64{};
        var x_1: i64 = 0;
        while (x_1 < @as(i64, @intCast(row_1.len))) {
            if (row_1[@intCast(x_1)] < t) {
                new_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, new_row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                new_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, new_row)) catch |err| handleError(err); _tmp.append(65535) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            x_1 = x_1 + 1;
        }
        out = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, out)) catch |err| handleError(err); _tmp.append(new_row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        y_1 = y_1 + 1;
    }
    return out;
}

fn printImage(g: [][]i64) void {
    var y_2: i64 = 0;
    while (y_2 < @as(i64, @intCast(g.len))) {
        const row_2: []i64 = g[@intCast(y_2)];
        var line: []const u8 = "";
        var x_2: i64 = 0;
        while (x_2 < @as(i64, @intCast(row_2.len))) {
            if (row_2[@intCast(x_2)] == 0) {
                line = _concat_string(line, "0");
            } else {
                line = _concat_string(line, "1");
            }
            x_2 = x_2 + 1;
        }
        std.debug.print("{s}\n", .{line});
        y_2 = y_2 + 1;
    }
}

fn mochi_main() void {
    const img: [][]i64 = image();
    const h_1: []i64 = histogram(img, 0);
    std.debug.print("{s}\n", .{_concat_string("Histogram: ", _str(h_1))});
    const t: i64 = medianThreshold(h_1);
    std.debug.print("{s}\n", .{_concat_string("Threshold: ", _str(t))});
    const bw: [][]i64 = threshold(img, t);
    printImage(bw);
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.fmt.allocPrint(std.heap.page_allocator, "{f}", .{std.json.fmt(__bench, .{ .whitespace = .indent_2 })}) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var f = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer f.close();
    var buf: [64]u8 = undefined;
    const n = f.readAll(&buf) catch return 0;
    var it = std.mem.tokenize(u8, buf[0..n], " " );
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
