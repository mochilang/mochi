// Generated by Mochi Zig transpiler on 2025-08-01 20:46 +0700
const std = @import("std");

var c: []const u8 = &[_]u8{};
var rows: [][][]const u8 = &[_][][]const u8{};

pub fn main() void {
    c = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Character,Speech\n", "The multitude,The messiah! Show us the messiah!\n"), "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n"), "The multitude,Who are you?\n"), "Brians mother,I'm his mother; that's who!\n"), "The multitude,Behold his mother! Behold his mother!");
    for (_split_string(c, "\n")) |__it0| {
        const line = __it0;
        rows = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(rows) catch unreachable; _tmp.append(_split_string(line, ",")) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    }
    std.debug.print("{s}\n", .{"<table>"});
    for (rows) |__it1| {
        const row = __it1;
        var cells: []const u8 = "";
        for (row) |__it2| {
            const cell = __it2;
            cells = _concat_string(_concat_string(_concat_string(cells, "<td>"), cell), "</td>");
        }
        std.debug.print("{s}\n", .{_concat_string(_concat_string("    <tr>", cells), "</tr>")});
    }
    std.debug.print("{s}\n", .{"</table>"});
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ lhs, rhs }) catch unreachable;
}

fn _split_string(s: []const u8, sep: []const u8) [][]const u8 {
    var res = std.ArrayList([]const u8).init(std.heap.page_allocator);
    defer res.deinit();
    var it = std.mem.splitSequence(u8, s, sep);
    while (it.next()) |p| { res.append(p) catch unreachable; }
    return res.toOwnedSlice() catch unreachable;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
