// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:00:26Z
const std = @import("std");

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

const msg = "Hello World! "; // []const u8
var shift = 0; // i32
var inc = 1; // i32
var clicks = 0; // i32
var frames = 0; // i32

pub fn main() void {
    while (clicks < 5) {
        var line = ""; // []const u8
        var i = 0; // i32
        while (i < @as(i32, @intCast((msg).len))) {
            const idx = @mod(((shift + i)), @as(i32, @intCast((msg).len))); // i32
            line = _concat_string(line, _slice_string(msg, idx, (idx + 1), 1));
            i = (i + 1);
        }
        std.debug.print("{s}\n", .{line});
        shift = @mod(((shift + inc)), @as(i32, @intCast((msg).len)));
        frames = (frames + 1);
        if (@mod(frames, @as(i32, @intCast((msg).len))) == 0) {
            inc = (@as(i32, @intCast((msg).len)) - inc);
            clicks = (clicks + 1);
        }
    }
}
