// Generated by Mochi Zig transpiler on 2025-07-23 09:39 +0700
const std = @import("std");

fn fields(s: []const u8) [][]const u8 {
    var words: [][]const u8 = &[_][]const u8{};
    var cur = "";
    var i: i64 = 0;
    while (i < std.mem.len(s)) {
        const ch = substring(s, i, i + 1);
        if (ch == " " or ch == "\n" or ch == "\t") {
            if (std.mem.len(cur) > 0) {
                words = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(words) catch unreachable; _tmp.append(cur) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
                cur = "";
            }
        } else {
            cur = _concat_string(cur, ch);
        }
        i = i + 1;
    }
    if (std.mem.len(cur) > 0) {
        words = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(words) catch unreachable; _tmp.append(cur) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
    }
    return words;
}

fn join(xs: [][]const u8, sep: []const u8) []const u8 {
    var res = "";
    var i: i64 = 0;
    while (i < std.mem.len(xs)) {
        if (i > 0) {
            res = _concat_string(res, sep);
        }
        res = _concat_string(res, xs[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    return res;
}

fn numberName(n: i64) []const u8 {
    const small = [20][]const u8{"no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
    const tens = [10][]const u8{"ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};
    if (n < 0) {
        return "";
    }
    if (n < 20) {
        return small[@as(usize, @intCast(n))];
    }
    if (n < 100) {
        var t = tens[@as(usize, @intCast(std.fmt.parseInt(i64, n / 10, 10) catch 0))];
        var s = @mod(n, 10);
        if (s > 0) {
            t = _concat_string(t, " ") + small[@as(usize, @intCast(s))];
        }
        return t;
    }
    return "";
}

fn pluralizeFirst(s: []const u8, n: i64) []const u8 {
    if (n == 1) {
        return s;
    }
    const w = fields(s);
    if (std.mem.len(w) > 0) {
        w[@as(usize, @intCast(0))] = _concat_string(w[@as(usize, @intCast(0))], "s");
    }
    return join(w, " ");
}

fn randInt(seed: i64, n: i64) i64 {
    const next = @mod(seed * 1664525 + 1013904223, 2147483647);
    return @mod(next, n);
}

fn slur(p: []const u8, d: i64) []const u8 {
    if (std.mem.len(p) <= 2) {
        return p;
    }
    var a: []i64 = &[_]i64{};
    var i: i64 = 1;
    while (i < std.mem.len(p) - 1) {
        a = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(a) catch unreachable; _tmp.append(substring(p, i, i + 1)) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
        i = i + 1;
    }
    var idx = std.mem.len(a) - 1;
    var seed = d;
    while (idx >= 1) {
        seed = @mod(seed * 1664525 + 1013904223, 2147483647);
        if (@mod(seed, 100) >= d) {
            const j = @mod(seed, idx + 1);
            const tmp = a[@as(usize, @intCast(idx))];
            a[@as(usize, @intCast(idx))] = a[@as(usize, @intCast(j))];
            a[@as(usize, @intCast(j))] = tmp;
        }
        idx = idx - 1;
    }
    var s = substring(p, 0, 1);
    var k: i64 = 0;
    while (k < std.mem.len(a)) {
        s = s + a[@as(usize, @intCast(k))];
        k = k + 1;
    }
    s = s + substring(p, std.mem.len(p) - 1, std.mem.len(p));
    const w = fields(s);
    return join(w, " ");
}

fn mochi_main() void {
    var i: i64 = 99;
    while (i > 0) {
        std.io.getStdOut().writer().print("{any}\n", .{_concat_string(_concat_string(slur(numberName(i), i), " ") + pluralizeFirst(slur("bottle of", i), i), " ") + slur("beer on the wall", i)}) catch unreachable;
        std.io.getStdOut().writer().print("{any}\n", .{_concat_string(_concat_string(slur(numberName(i), i), " ") + pluralizeFirst(slur("bottle of", i), i), " ") + slur("beer", i)}) catch unreachable;
        std.io.getStdOut().writer().print("{any}\n", .{_concat_string(_concat_string(slur("take one", i), " ") + slur("down", i), " ") + slur("pass it around", i)}) catch unreachable;
        std.io.getStdOut().writer().print("{any}\n", .{_concat_string(_concat_string(slur(numberName(i - 1), i), " ") + pluralizeFirst(slur("bottle of", i), i - 1), " ") + slur("beer on the wall", i)}) catch unreachable;
        i = i - 1;
    }
}

pub fn main() void {
    mochi_main();
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
