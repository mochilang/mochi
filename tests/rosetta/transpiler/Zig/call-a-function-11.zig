// Generated by Mochi Zig transpiler on 2025-08-04 19:36 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn zeroval(ival: i64) i64 {
    var x: i64 = ival;
    x = 0;
    return x;
}

fn zeroptr(ref: []i64) void {
    ref[@intCast(0)] = 0;
}

fn mochi_main() void {
    var i: i64 = 1;
    std.debug.print("{s}\n", .{_concat_string("initial: ", _str(i))});
    const tmp: i64 = zeroval(i); _ = tmp;
    std.debug.print("{s}\n", .{_concat_string("zeroval: ", _str(i))});
    const box: []i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 1) catch unreachable; _tmp0[0] = i; break :blk0 _tmp0; };
    zeroptr(box);
    i = box[@intCast(0)];
    std.debug.print("{s}\n", .{_concat_string("zeroptr: ", _str(i))});
    std.debug.print("{s}\n", .{"pointer: 0"});
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
