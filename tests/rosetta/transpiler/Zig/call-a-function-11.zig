// Generated by Mochi Zig transpiler on 2025-08-01 22:14 +0700
const std = @import("std");

fn zeroval(ival: i64) i64 {
    var x: i64 = ival;
    x = 0;
    return x;
}

fn zeroptr(ref_param: []i64) void {
    var ref_var: []i64 = ref_param;
    ref_var[@as(usize, @intCast(0))] = 0;
}

fn mochi_main() void {
    var i: i64 = 1;
    std.debug.print("{s}\n", .{_concat_string("initial: ", _str(i))});
    _ = zeroval(i);
    std.debug.print("{s}\n", .{_concat_string("zeroval: ", _str(i))});
    const box: []i64 = @constCast(&[_]i64{i})[0..];
    zeroptr(box);
    i = box[@as(usize, @intCast(0))];
    std.debug.print("{s}\n", .{_concat_string("zeroptr: ", _str(i))});
    std.debug.print("{s}\n", .{"pointer: 0"});
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ lhs, rhs }) catch unreachable;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
