// Generated by Mochi Zig transpiler on 2025-08-04 18:31 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Point = struct {
    x: i64,
    y: i64,
};

fn absi(x: i64) i64 {
    if (x < 0) {
        return 0 - x;
    }
    return x;
}

fn bresenham(x0_param: i64, y0_param: i64, x1: i64, y1: i64) []Point {
    var x0_var: i64 = x0_param;
    var y0_var: i64 = y0_param;
    const dx: i64 = absi(x1 - x0_var);
    const dy: i64 = absi(y1 - y0_var);
    var sx: i64 = 0 - 1;
    if (x0_var < x1) {
        sx = 1;
    }
    var sy: i64 = 0 - 1;
    if (y0_var < y1) {
        sy = 1;
    }
    var errv: i64 = dx - dy;
    var pts: []Point = &[_]Point{};
    while (true) {
        pts = blk: { var _tmp = std.ArrayList(Point).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Point, pts)) catch |err| handleError(err); _tmp.append(.{ .x = x0_var, .y = y0_var }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        if (x0_var == x1 and y0_var == y1) {
            break;
        }
        const e2: i64 = 2 * errv;
        if (e2 > 0 - dy) {
            errv = errv - dy;
            x0_var = x0_var + sx;
        }
        if (e2 < dx) {
            errv = errv + dx;
            y0_var = y0_var + sy;
        }
    }
    return pts;
}

fn mochi_main() void {
    const pts_1: []Point = bresenham(0, 0, 6, 4);
    var i: i64 = 0;
    while (i < @as(i64, @intCast(pts_1.len))) {
        const p: Point = pts_1[@intCast(i)];
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("(", _str(p.x)), ","), _str(p.y)), ")")});
        i = i + 1;
    }
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.fmt.allocPrint(std.heap.page_allocator, "{f}", .{std.json.fmt(__bench, .{ .whitespace = .indent_2 })}) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var f = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer f.close();
    var buf: [64]u8 = undefined;
    const n = f.readAll(&buf) catch return 0;
    var it = std.mem.tokenize(u8, buf[0..n], " " );
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
