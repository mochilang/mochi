// Generated by Mochi Zig transpiler on 2025-07-25 20:17 +0700
const std = @import("std");

var doors: []bool = &[_]bool{};

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        for (0..100) |_| {
            doors = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(doors) catch unreachable; _tmp.append(false) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
        }
        for (1..101) |__it1| {
            const pass: i64 = @intCast(__it1);
            var idx: i64 = pass - 1;
            while (idx < 100) {
                doors[@as(usize, @intCast(idx))] = !(doors[@as(usize, @intCast(idx))]);
                idx = idx + pass;
            }
        }
        for (0..10) |__it2| {
            const row: i64 = @intCast(__it2);
            var line: []const u8 = "";
            for (0..10) |__it3| {
                const col: i64 = @intCast(__it3);
                const idx: i64 = row * 10 + col;
                if (doors[@as(usize, @intCast(idx))]) {
                    line = _concat_string(line, "1");
                } else {
                    line = _concat_string(line, "0");
                }
                if (col < 9) {
                    line = _concat_string(line, " ");
                }
            }
            std.io.getStdOut().writer().print("{s}\n", .{line}) catch unreachable;
        }
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.fmt.allocPrint(std.heap.page_allocator, "{f}", .{std.json.fmt(__bench, .{ .whitespace = .indent_2 })}) catch unreachable;
        std.io.getStdOut().writer().print("{s}\n", .{__bj}) catch unreachable;
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}

fn _mem() i64 {
    var usage: std.os.linux.rusage = undefined;
    if (std.os.linux.getrusage(std.os.linux.rusage.SELF, &usage) != 0) return 0;
    return @as(i64, usage.maxrss) * 1024;
}
