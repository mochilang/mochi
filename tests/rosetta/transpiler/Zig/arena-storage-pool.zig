// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:00:41Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn poolPut(p: []const i32, x: i32) []const i32 {
    return blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(p) catch |err| handleError(err); _tmp0.append(x) catch |err| handleError(err); const res = _tmp0.toOwnedSlice() catch |err| handleError(err); break :blk0 res; };
}

fn poolGet(p: []const i32) std.AutoHashMap([]const u8, i32) {
    if (@as(i32, @intCast((p).len)) == 0) {
        std.debug.print("pool empty\n", .{});
        return struct {
    pool: []const i32,
    val: i32,
}{
    .pool = p,
    .val = 0,
};
    }
    const idx = (@as(i32, @intCast((p).len)) - 1); // i32
    const v = p[idx]; // i32
    p = p[0..@as(usize, @intCast(idx))];
    return struct {
    pool: []const i32,
    val: i32,
}{
    .pool = p,
    .val = v,
};
}

fn clearPool(p: []const i32) []const i32 {
    return []i32{};
}

fn user_main() void {
    var pool = std.ArrayList(i32).init(std.heap.page_allocator);
    var i = 1; // i32
    var j = 2; // i32
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(i + j)}) catch |err| handleError(err)});
    pool = poolPut(pool, i);
    pool = poolPut(pool, j);
    i = 0;
    j = 0;
    const res1 = poolGet(pool); // std.StringHashMap(i32)
    pool = @as([]const i32, res1["pool"]);
    i = @as(i32, res1["val"]);
    const res2 = poolGet(pool); // std.StringHashMap(i32)
    pool = @as([]const i32, res2["pool"]);
    j = @as(i32, res2["val"]);
    i = 4;
    j = 5;
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(i + j)}) catch |err| handleError(err)});
    pool = poolPut(pool, i);
    pool = poolPut(pool, j);
    i = 0;
    j = 0;
    pool = clearPool(pool);
    const res3 = poolGet(pool); // std.StringHashMap(i32)
    pool = @as([]const i32, res3["pool"]);
    i = @as(i32, res3["val"]);
    const res4 = poolGet(pool); // std.StringHashMap(i32)
    pool = @as([]const i32, res4["pool"]);
    j = @as(i32, res4["val"]);
    i = 7;
    j = 8;
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(i + j)}) catch |err| handleError(err)});
}

pub fn main() void {
    user_main();
}
