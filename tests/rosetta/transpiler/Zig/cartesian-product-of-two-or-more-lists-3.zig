// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_list(comptime T: type, v: []const T, start: i32, end: i32, step: i32) []T {
    var s = start;
    var e = end;
    var st = step;
    const n: i32 = @as(i32, @intCast(v.len));
    if (s < 0) s += n;
    if (e < 0) e += n;
    if (st == 0) st = 1;
    if (s < 0) s = 0;
    if (e > n) e = n;
    if (st > 0 and e < s) e = s;
    if (st < 0 and e > s) e = s;
    var res = std.ArrayList(T).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = s;
    while ((st > 0 and i < e) or (st < 0 and i > e)) : (i += st) {
        res.append(v[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn listStr(xs: []const i32) []const u8 {
    var s = "["; // []const u8
    var i = 0; // i32
    while (i < (xs).len) {
        s = _concat_string(s, std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{xs[i]}) catch |err| handleError(err));
        if (i < ((xs).len - 1)) {
            s = _concat_string(s, " ");
        }
        i = (i + 1);
    }
    s = _concat_string(s, "]");
    return s;
}

fn llStr(lst: []const []const i32) []const u8 {
    var s = "["; // []const u8
    var i = 0; // i32
    while (i < (lst).len) {
        s = _concat_string(s, listStr(lst[i]));
        if (i < ((lst).len - 1)) {
            s = _concat_string(s, " ");
        }
        i = (i + 1);
    }
    s = _concat_string(s, "]");
    return s;
}

fn concat(a: []const i32, b: []const i32) []const i32 {
    var out = std.ArrayList(i32).init(std.heap.page_allocator);
    for (a) |v| {
        out = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(out) catch |err| handleError(err); _tmp0.append(v) catch |err| handleError(err); break :blk0 _tmp0.items; };
    }
    for (b) |v| {
        out = blk1: { var _tmp1 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(out) catch |err| handleError(err); _tmp1.append(v) catch |err| handleError(err); break :blk1 _tmp1.items; };
    }
    return out.items;
}

fn cartN(lists: i32) []const []const i32 {
    if (lists == 0) {
        return []i32{};
    }
    const a = @as([]const []const i32, lists); // []const []const i32
    if ((a).len == 0) {
        return [_][]const i32{&[]i32{}};
    }
    var out = std.ArrayList(i32).init(std.heap.page_allocator);
    const rest = cartN(_slice_list([]const i32, a, 1, (a).len, 1)); // []const []const i32
    for (a[0]) |x| {
        for (rest) |p| {
            out = blk2: { var _tmp2 = std.ArrayList([]const i32).init(std.heap.page_allocator); defer _tmp2.deinit(); _tmp2.appendSlice(out) catch |err| handleError(err); _tmp2.append(concat(&[_]i32{x}, p)) catch |err| handleError(err); break :blk2 _tmp2.items; };
        }
    }
    return out.items;
}

fn user_main() void {
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[_]i32{
    1,
    2,
},
    &[_]i32{
    3,
    4,
},
}))});
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[_]i32{
    3,
    4,
},
    &[_]i32{
    1,
    2,
},
}))});
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[_]i32{
    1,
    2,
},
    &[]i32{},
}))});
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[]i32{},
    &[_]i32{
    1,
    2,
},
}))});
    std.debug.print("\n", .{});
    std.debug.print("[\n", .{});
    for (cartN(&[_][]const i32{
    &[_]i32{
    1776,
    1789,
},
    &[_]i32{
    7,
    12,
},
    &[_]i32{
    4,
    14,
    23,
},
    &[_]i32{
    0,
    1,
},
})) |p| {
        std.debug.print("{s}\n", .{_concat_string(" ", listStr(p))});
    }
    std.debug.print("]\n", .{});
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[_]i32{
    1,
    2,
    3,
},
    &[_]i32{30},
    &[_]i32{
    500,
    100,
},
}))});
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[_]i32{
    1,
    2,
    3,
},
    &[]i32{},
    &[_]i32{
    500,
    100,
},
}))});
    std.debug.print("\n", .{});
    std.debug.print("{s}\n", .{llStr(cartN(0))});
    std.debug.print("{s}\n", .{llStr(cartN(&[]i32{}))});
}

pub fn main() void {
    user_main();
}
