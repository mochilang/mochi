// Generated by Mochi Zig transpiler on 2025-08-05 01:53 +0700
const std = @import("std");
const Value = union(enum) { Null: void, Int: i64, Float: f64, Str: []const u8, Bool: bool, List: [][]i64, };

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn listStr(xs: []i64) []const u8 {
    var s: []const u8 = "[";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(xs.len))) {
        s = _concat_string(s, _str(xs[@intCast(i)]));
        if (i < @as(i64, @intCast(xs.len)) - 1) {
            s = _concat_string(s, " ");
        }
        i = i + 1;
    }
    s = _concat_string(s, "]");
    return s;
}

fn llStr(lst: [][]i64) []const u8 {
    var s_1: []const u8 = "[";
    var i_1: i64 = 0;
    while (i_1 < @as(i64, @intCast(lst.len))) {
        s_1 = _concat_string(s_1, listStr(lst[@intCast(i_1)]));
        if (i_1 < @as(i64, @intCast(lst.len)) - 1) {
            s_1 = _concat_string(s_1, " ");
        }
        i_1 = i_1 + 1;
    }
    s_1 = _concat_string(s_1, "]");
    return s_1;
}

fn concat(a: []i64, b: []i64) []i64 {
    var out: []i64 = &[_]i64{};
    for (a) |__it0| {
        const v = __it0;
        out = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, out)) catch |err| handleError(err); _tmp.append(v) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    for (b) |__it1| {
        const v_1 = __it1;
        out = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, out)) catch |err| handleError(err); _tmp.append(v_1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return out;
}

fn cartN(lists: Value) [][]i64 {
    if (lists == .Null) {
        return &[_][]i64{};
    }
    const a_1: [][]i64 = lists.List;
    if (@as(i64, @intCast(a_1.len)) == 0) {
        return blk0: { var _tmp0 = std.heap.page_allocator.alloc([]i64, 1) catch unreachable; _tmp0[0] = &[_]i64{}; break :blk0 _tmp0; };
    }
    var out_1: [][]i64 = &[_][]i64{};
    const rest: [][]i64 = cartN(Value{.List = a_1[@intCast(1)..@intCast(@as(i64, @intCast(a_1.len)))]});
    for (a_1[@intCast(0)]) |__it2| {
        const x = __it2;
        for (rest) |__it3| {
            const p = __it3;
            out_1 = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, out_1)) catch |err| handleError(err); _tmp.append(concat(blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 1) catch unreachable; _tmp1[0] = x; break :blk1 _tmp1; }, p)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return out_1;
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{llStr(cartN(Value{.List = blk2: { var _tmp2 = std.heap.page_allocator.alloc([]i64, 2) catch unreachable; _tmp2[0] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp3[0] = 1; _tmp3[1] = 2; break :blk3 _tmp3; }; _tmp2[1] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp4[0] = 3; _tmp4[1] = 4; break :blk4 _tmp4; }; break :blk2 _tmp2; }}))});
    std.debug.print("{s}\n", .{llStr(cartN(Value{.List = blk5: { var _tmp5 = std.heap.page_allocator.alloc([]i64, 2) catch unreachable; _tmp5[0] = blk6: { var _tmp6 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp6[0] = 3; _tmp6[1] = 4; break :blk6 _tmp6; }; _tmp5[1] = blk7: { var _tmp7 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp7[0] = 1; _tmp7[1] = 2; break :blk7 _tmp7; }; break :blk5 _tmp5; }}))});
    std.debug.print("{s}\n", .{llStr(cartN(Value{.List = blk8: { var _tmp8 = std.heap.page_allocator.alloc([]i64, 2) catch unreachable; _tmp8[0] = blk9: { var _tmp9 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp9[0] = 1; _tmp9[1] = 2; break :blk9 _tmp9; }; _tmp8[1] = &[_]i64{}; break :blk8 _tmp8; }}))});
    std.debug.print("{s}\n", .{llStr(cartN(Value{.List = blk10: { var _tmp10 = std.heap.page_allocator.alloc([]i64, 2) catch unreachable; _tmp10[0] = &[_]i64{}; _tmp10[1] = blk11: { var _tmp11 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp11[0] = 1; _tmp11[1] = 2; break :blk11 _tmp11; }; break :blk10 _tmp10; }}))});
    std.debug.print("{s}\n", .{""});
    std.debug.print("{s}\n", .{"["});
    for (cartN(Value{.List = blk12: { var _tmp12 = std.heap.page_allocator.alloc([]i64, 4) catch unreachable; _tmp12[0] = blk13: { var _tmp13 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp13[0] = 1776; _tmp13[1] = 1789; break :blk13 _tmp13; }; _tmp12[1] = blk14: { var _tmp14 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp14[0] = 7; _tmp14[1] = 12; break :blk14 _tmp14; }; _tmp12[2] = blk15: { var _tmp15 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp15[0] = 4; _tmp15[1] = 14; _tmp15[2] = 23; break :blk15 _tmp15; }; _tmp12[3] = blk16: { var _tmp16 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp16[0] = 0; _tmp16[1] = 1; break :blk16 _tmp16; }; break :blk12 _tmp12; }})) |__it4| {
        const p_1 = __it4;
        std.debug.print("{s}\n", .{_concat_string(" ", listStr(p_1))});
    }
    std.debug.print("{s}\n", .{"]"});
    std.debug.print("{s}\n", .{llStr(cartN(Value{.List = blk17: { var _tmp17 = std.heap.page_allocator.alloc([]i64, 3) catch unreachable; _tmp17[0] = blk18: { var _tmp18 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp18[0] = 1; _tmp18[1] = 2; _tmp18[2] = 3; break :blk18 _tmp18; }; _tmp17[1] = blk19: { var _tmp19 = std.heap.page_allocator.alloc(i64, 1) catch unreachable; _tmp19[0] = 30; break :blk19 _tmp19; }; _tmp17[2] = blk20: { var _tmp20 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp20[0] = 500; _tmp20[1] = 100; break :blk20 _tmp20; }; break :blk17 _tmp17; }}))});
    std.debug.print("{s}\n", .{llStr(cartN(Value{.List = blk21: { var _tmp21 = std.heap.page_allocator.alloc([]i64, 3) catch unreachable; _tmp21[0] = blk22: { var _tmp22 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp22[0] = 1; _tmp22[1] = 2; _tmp22[2] = 3; break :blk22 _tmp22; }; _tmp21[1] = &[_]i64{}; _tmp21[2] = blk23: { var _tmp23 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp23[0] = 500; _tmp23[1] = 100; break :blk23 _tmp23; }; break :blk21 _tmp21; }}))});
    std.debug.print("{s}\n", .{""});
    std.debug.print("{s}\n", .{llStr(cartN(Value{.Null = {}}))});
    std.debug.print("{s}\n", .{llStr(cartN(Value{.List = &[_][]i64{}}))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
