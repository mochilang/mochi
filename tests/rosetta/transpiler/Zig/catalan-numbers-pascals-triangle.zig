// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

const n = 15; // i32
var t: []const i32 = &[]i32{};

pub fn main() void {
    for (0 .. ((n + 2))) |_| {
        t = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(t) catch |err| handleError(err); _tmp0.append(0) catch |err| handleError(err); break :blk0 _tmp0.items; };
    }
    t.items[1] = 1;
    for (1 .. ((n + 1))) |i| {
        var j = i; // i32
        while (j > 1) {
            t.items[j] = (t[j] + t[(j - 1)]);
            j = (j - 1);
        }
        t.items[(i + 1)] = t[i];
        j = (i + 1);
        while (j > 1) {
            t.items[j] = (t[j] + t[(j - 1)]);
            j = (j - 1);
        }
        const cat = (t[(i + 1)] - t[i]); // i32
        if (i < 10) {
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(" ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{i}) catch |err| handleError(err)), " : "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{cat}) catch |err| handleError(err))});
        } else {
            std.debug.print("{s}\n", .{_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{i}) catch |err| handleError(err), " : "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{cat}) catch |err| handleError(err))});
        }
    }
}
