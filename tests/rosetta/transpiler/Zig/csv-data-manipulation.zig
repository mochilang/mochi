// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn _join_strings(parts: []const []const u8, sep: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.join(u8, sep, parts, alloc) catch |err| handleError(err);
}

var rows = &[_][]const []const u8{
    &[_][]const u8{
    "A",
    "B",
    "C",
},
    &[_][]const u8{
    "1",
    "2",
    "3",
},
    &[_][]const u8{
    "4",
    "5",
    "6",
},
    &[_][]const u8{
    "7",
    "8",
    "9",
},
}; // []const []const []const u8
var i = 1; // i32

fn join(xs: []const []const u8, sep: []const u8) []const u8 {
    var res = ""; // []const u8
    var i = 0; // i32
    while (i < (xs).len) {
        if (i > 0) {
            res = _concat_string(res, sep);
        }
        res = _concat_string(res, xs[i]);
        i = (i + 1);
    }
    return res;
}

fn parseIntStr(str: []const u8) i32 {
    var i = 0; // i32
    var neg = false; // bool
    if (((str).len > 0) and std.mem.eql(u8, _slice_string(str, 0, 1, 1), "-")) {
        neg = true;
        i = 1;
    }
    var n = 0; // i32
    const Digits = struct {
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
};
    const digits = Digits{
    ._ = 0,
    ._ = 1,
    ._ = 2,
    ._ = 3,
    ._ = 4,
    ._ = 5,
    ._ = 6,
    ._ = 7,
    ._ = 8,
    ._ = 9,
}; // struct {
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
}
    while (i < (str).len) {
        n = ((n * 10) + digits[_slice_string(str, i, (i + 1), 1)]);
        i = (i + 1);
    }
    if (neg) {
        n = -n;
    }
    return n;
}

pub fn main() void {
    rows.items[0] = blk0: { var _tmp0 = std.ArrayList([]const []const u8).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(rows[0]) catch |err| handleError(err); _tmp0.append("SUM") catch |err| handleError(err); break :blk0 _tmp0.items; };
    while (i < (rows).len) {
        var sum = 0; // i32
        for (rows[i]) |s| {
            sum = (sum + parseIntStr(s));
        }
        rows.items[i] = blk1: { var _tmp1 = std.ArrayList([]const []const u8).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(rows[i]) catch |err| handleError(err); _tmp1.append(std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{sum}) catch |err| handleError(err)) catch |err| handleError(err); break :blk1 _tmp1.items; };
        i = (i + 1);
    }
    for (rows) |r| {
        std.debug.print("{s}\n", .{_join_strings(r, ",")});
    }
}
