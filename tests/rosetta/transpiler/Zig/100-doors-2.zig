// Generated by Mochi Zig transpiler on 2025-07-25 12:38 +0700
const std = @import("std");

var door: i64 = 1;
var incrementer: i64 = 0;

pub fn main() void {
    for (1..101) |__it0| {
        const current: i64 = @intCast(__it0);
        var line: []const u8 = _concat_string(_concat_string("Door ", _str(current)), " ");
        if (current == door) {
            line = _concat_string(line, "Open");
            incrementer = incrementer + 1;
            door = door + 2 * incrementer + 1;
        } else {
            line = _concat_string(line, "Closed");
        }
        std.io.getStdOut().writer().print("{s}\n", .{line}) catch unreachable;
    }
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
