// Generated by Mochi Zig transpiler on 2025-08-02 14:01 +0700
const std = @import("std");

fn intSqrt(x: i64) i64 {
    if (x < 2) {
        return x;
    }
    var left: i64 = 1;
    var right: i64 = @divTrunc(x, 2);
    var ans: i64 = 0;
    while (left <= right) {
        const mid: i64 = left + @divTrunc(right - left, 2);
        const sq: i64 = mid * mid;
        if (sq == x) {
            return mid;
        }
        if (sq < x) {
            left = mid + 1;
            ans = mid;
        } else {
            right = mid - 1;
        }
    }
    return ans;
}

fn sumRecip(n: i64) i64 {
    var s: i64 = 1;
    const limit: i64 = intSqrt(n);
    var f: i64 = 2;
    while (f <= limit) {
        if (@mod(n, f) == 0) {
            s = s + @divTrunc(n, f);
            const f2: i64 = @divTrunc(n, f);
            if (f2 != f) {
                s = s + f;
            }
        }
        f = f + 1;
    }
    return s;
}

fn mochi_main() void {
    const nums: []i64 = @constCast(&[_]i64{6, 28, 120, 496, 672, 8128, 30240, 32760, 523776})[0..];
    for (nums) |__it0| {
        const n = __it0;
        const s: i64 = sumRecip(n);
        if (@mod(s, n) == 0) {
            const val: i64 = @divTrunc(s, n);
            var perfect: []const u8 = "";
            if (val == 1) {
                perfect = "perfect!";
            }
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Sum of recipr. factors of ", _str(n)), " = "), _str(val)), " exactly "), perfect)});
        }
    }
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.json.stringifyAlloc(std.heap.page_allocator, __bench, .{ .whitespace = .indent_2 }) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ lhs, rhs }) catch unreachable;
}

fn _mem() i64 {
    var usage: std.os.linux.rusage = undefined;
    if (std.os.linux.getrusage(std.os.linux.rusage.SELF, &usage) != 0) return 0;
    return @as(i64, usage.maxrss) * 1024;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
