// Generated by Mochi Zig transpiler on 2025-07-24 20:52 +0700
const std = @import("std");

fn pfacSum(i: i64) i64 {
    var sum: i64 = 0;
    var p: i64 = 1;
    while (p <= i / 2) {
        if (@mod(i, p) == 0) {
            sum = sum + p;
        }
        p = p + 1;
    }
    return sum;
}

fn mochi_main() void {
    var d: i64 = 0;
    var a: i64 = 0;
    var pnum: i64 = 0;
    var i: i64 = 1;
    while (i <= 20000) {
        const j: i64 = pfacSum(i);
        if (j < i) {
            d = d + 1;
        }
        if (j == i) {
            pnum = pnum + 1;
        }
        if (j > i) {
            a = a + 1;
        }
        i = i + 1;
    }
    std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string("There are ", _str(d)), " deficient numbers between 1 and 20000")}) catch unreachable;
    std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string("There are ", _str(a)), " abundant numbers  between 1 and 20000")}) catch unreachable;
    std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string("There are ", _str(pnum)), " perfect numbers between 1 and 20000")}) catch unreachable;
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
