// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:59:55Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn pfacSum(i: i32) i32 {
    var sum = 0; // i32
    var p = 1; // i32
    while (p <= (i / 2)) {
        if (@mod(i, p) == 0) {
            sum = (sum + p);
        }
        p = (p + 1);
    }
    return sum;
}

fn user_main() void {
    var d = 0; // i32
    var a = 0; // i32
    var pnum = 0; // i32
    var i = 1; // i32
    while (i <= 20000) {
        const j = pfacSum(i); // i32
        if (j < i) {
            d = (d + 1);
        }
        if (j == i) {
            pnum = (pnum + 1);
        }
        if (j > i) {
            a = (a + 1);
        }
        i = (i + 1);
    }
    std.debug.print("{s}\n", .{_concat_string(_concat_string("There are ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{d}) catch |err| handleError(err)), " deficient numbers between 1 and 20000")});
    std.debug.print("{s}\n", .{_concat_string(_concat_string("There are ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{a}) catch |err| handleError(err)), " abundant numbers  between 1 and 20000")});
    std.debug.print("{s}\n", .{_concat_string(_concat_string("There are ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{pnum}) catch |err| handleError(err)), " perfect numbers between 1 and 20000")});
}

pub fn main() void {
    user_main();
}
