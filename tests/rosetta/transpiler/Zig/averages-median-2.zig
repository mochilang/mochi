// Generated by Mochi Zig transpiler on 2025-08-02 17:56 +0700
const std = @import("std");

fn sel(list: []f64, k: i64) f64 {
    var i: i64 = 0;
    while (i <= k) {
        var min_index: i64 = i;
        var j: i64 = i + 1;
        while (j < @as(i64, @intCast(list.len))) {
            if (list[@intCast(j)] < list[@intCast(min_index)]) {
                min_index = j;
            }
            j = j + 1;
        }
        const tmp: f64 = list[@intCast(i)];
        list[@intCast(i)] = list[@intCast(min_index)];
        list[@intCast(min_index)] = tmp;
        i = i + 1;
    }
    return list[@intCast(k)];
}

fn median(a: []f64) f64 {
    const arr: []f64 = blk: { const tmp = std.heap.page_allocator.alloc(f64, a.len) catch unreachable; @memcpy(tmp, a); break :blk tmp; };
    const half: i64 = @divTrunc(@as(i64, @intCast(arr.len)), 2);
    const med: f64 = sel(arr, half);
    if (@mod(@as(i64, @intCast(arr.len)), 2) == 0) {
        return (med + arr[@intCast(half - 1)]) / 2.0;
    }
    return med;
}

pub fn main() void {
    std.debug.print("{s}\n", .{_str(median(@constCast(&[_]f64{3.0, 1.0, 4.0, 1.0})[0..]))});
    std.debug.print("{s}\n", .{_str(median(@constCast(&[_]f64{3.0, 1.0, 4.0, 1.0, 5.0})[0..]))});
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
