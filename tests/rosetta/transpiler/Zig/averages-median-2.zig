// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:01:12Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn sel(list: []const f64, k: i32) f64 {
    var i = 0; // i32
    while (i <= k) {
        var minIndex = i; // i32
        var j = (i + 1); // i32
        while (j < @as(i32, @intCast((list).len))) {
            if (list[j] < list[minIndex]) {
                minIndex = j;
            }
            j = (j + 1);
        }
        const tmp = list[i]; // f64
        list.items[i] = list[minIndex];
        list.items[minIndex] = tmp;
        i = (i + 1);
    }
    return list.items[k];
}

fn median(a: []const f64) f64 {
    var arr = a; // []const f64
    const half = @as(i32, ((@as(i32, @intCast((arr).len)) / 2))); // i32
    const med = sel(arr, half); // f64
    if (@mod(@as(i32, @intCast((arr).len)), 2) == 0) {
        return (((med + arr.items[(half - 1)])) / 2.0);
    }
    return med;
}

pub fn main() void {
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{median(&[_]f64{
    3.0,
    1.0,
    4.0,
    1.0,
})}) catch |err| handleError(err)});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{median(&[_]f64{
    3.0,
    1.0,
    4.0,
    1.0,
    5.0,
})}) catch |err| handleError(err)});
}
