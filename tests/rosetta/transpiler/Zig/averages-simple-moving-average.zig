// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:01:12Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn indexOf(s: []const u8, ch: []const u8) i32 {
    var i = 0; // i32
    while (i < @as(i32, @intCast((s).len))) {
        if (std.mem.eql(u8, _slice_string(s, i, (i + 1), 1), ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

fn fmt3(x: f64) []const u8 {
    var y = (@as(f64, @as(i32, ((((x * 1000.0)) + 0.5)))) / 1000.0); // f64
    var s = std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{y}) catch |err| handleError(err); // []const u8
    var dot = indexOf(s, "."); // i32
    if (dot == (0 - 1)) {
        s = _concat_string(s, ".000");
    } else {
        var decs = ((@as(i32, @intCast((s).len)) - dot) - 1); // i32
        if (decs > 3) {
            s = s[0..@as(usize, @intCast(dot + 4))];
        } else {
            while (decs < 3) {
                s = _concat_string(s, "0");
                decs = (decs + 1);
            }
        }
    }
    return s;
}

fn pad(s: []const u8, width: i32) []const u8 {
    var out = s; // []const u8
    while (@as(i32, @intCast((out).len)) < width) {
        out = _concat_string(" ", out);
    }
    return out;
}

fn smaSeries(xs: []const f64, period: i32) []const f64 {
    var res = std.ArrayList(f64).init(std.heap.page_allocator);
    var sum = 0.0; // f64
    var i = 0; // i32
    while (i < @as(i32, @intCast((xs).len))) {
        sum = (sum + xs[i]);
        if (i >= period) {
            sum = (sum - xs[(i - period)]);
        }
        var denom = (i + 1); // i32
        if (denom > period) {
            denom = period;
        }
        res = blk0: { var _tmp0 = std.ArrayList(f64).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(res) catch |err| handleError(err); _tmp0.append((sum / (@as(f64, denom)))) catch |err| handleError(err); const res = _tmp0.toOwnedSlice() catch |err| handleError(err); break :blk0 res; };
        i = (i + 1);
    }
    return res.items;
}

fn user_main() void {
    var xs = &[_]f64{
    1.0,
    2.0,
    3.0,
    4.0,
    5.0,
    5.0,
    4.0,
    3.0,
    2.0,
    1.0,
}; // []const f64
    var sma3 = smaSeries(xs, 3); // []const f64
    var sma5 = smaSeries(xs, 5); // []const f64
    std.debug.print("x       sma3   sma5\n", .{});
    var i = 0; // i32
    while (i < @as(i32, @intCast((xs).len))) {
        const line = _concat_string(_concat_string(_concat_string(_concat_string(pad(fmt3(xs[i]), 5), "  "), pad(fmt3(sma3[i]), 5)), "  "), pad(fmt3(sma5[i]), 5)); // []const u8
        std.debug.print("{s}\n", .{line});
        i = (i + 1);
    }
}

pub fn main() void {
    user_main();
}
