// Generated by Mochi Zig transpiler on 2025-08-02 23:50 +0700
const std = @import("std");

fn indexOf(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@intCast(i)..@intCast(i + 1)], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn fmt3(x: f64) []const u8 {
    const y: f64 = @as(f64, @floatFromInt(@as(i64, @intFromFloat(x * 1000.0 + 0.5)))) / 1000.0;
    var s: []const u8 = _str(y);
    const dot: i64 = indexOf(s, ".");
    if (dot == 0 - 1) {
        s = _concat_string(s, ".000");
    } else {
        var decs: i64 = @as(i64, @intCast(s.len)) - dot - 1;
        if (decs > 3) {
            s = s[@intCast(0)..@intCast(dot + 4)];
        } else {
            while (decs < 3) {
                s = _concat_string(s, "0");
                decs = decs + 1;
            }
        }
    }
    return s;
}

fn pad(s: []const u8, width: i64) []const u8 {
    var out: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, s.len) catch unreachable; @memcpy(tmp, s); break :blk tmp; };
    while (@as(i64, @intCast(out.len)) < width) {
        out = _concat_string(" ", out);
    }
    return out;
}

fn smaSeries(xs: []f64, period: i64) []f64 {
    var res: []f64 = &[_]f64{};
    var sum: f64 = 0.0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(xs.len))) {
        sum = sum + xs[@intCast(i)];
        if (i >= period) {
            sum = sum - xs[@intCast(i - period)];
        }
        var denom: i64 = i + 1;
        if (denom > period) {
            denom = period;
        }
        res = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(res) catch unreachable; _tmp.append(sum / @as(f64, @floatFromInt(denom))) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
        i = i + 1;
    }
    return res;
}

fn mochi_main() void {
    const xs: []f64 = @constCast(&[_]f64{1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0})[0..];
    const sma3: []f64 = smaSeries(xs, 3);
    const sma5: []f64 = smaSeries(xs, 5);
    std.debug.print("{s}\n", .{"x       sma3   sma5"});
    var i: i64 = 0;
    while (i < @as(i64, @intCast(xs.len))) {
        const line: []const u8 = _concat_string(_concat_string(_concat_string(_concat_string(pad(fmt3(xs[@intCast(i)]), 5), "  "), pad(fmt3(sma3[@intCast(i)]), 5)), "  "), pad(fmt3(sma5[@intCast(i)]), 5));
        std.debug.print("{s}\n", .{line});
        i = i + 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = _mem();
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ lhs, rhs }) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/status";
    var f = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer f.close();
    var buf: [4096]u8 = undefined;
    const n = f.readAll(&buf) catch return 0;
    var it = std.mem.tokenize(u8, buf[0..n], "\n");
    while (it.next()) |line| {
        if (std.mem.startsWith(u8, line, "VmRSS:")) {
            var it2 = std.mem.splitAny(u8, line, &[_]u8{' ', '\t'});
            _ = it2.next(); // label
            while (it2.next()) |tok| {
                if (tok.len == 0) continue;
                const kb = std.fmt.parseInt(i64, tok, 10) catch return 0;
                return kb * 1024;
            }
        }
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
