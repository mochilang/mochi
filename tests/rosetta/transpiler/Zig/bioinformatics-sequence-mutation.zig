// Generated by Mochi Zig transpiler on 2025-08-04 00:29 +0700
const std = @import("std");
const Value = union(enum) { Int: i64, Str: []const u8, };

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn randInt(s: i64, n: i64) []i64 {
    const next: i64 = @mod(s * 1664525 + 1013904223, 2147483647);
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp0[0] = next; _tmp0[1] = @mod(next, n); break :blk0 _tmp0; };
}

fn padLeft(s: []const u8, w: i64) []const u8 {
    var res: []const u8 = "";
    var n: i64 = w - @as(i64, @intCast(s.len));
    while (n > 0) {
        res = _concat_string(res, " ");
        n = n - 1;
    }
    return _concat_string(res, s);
}

fn makeSeq(s_param: i64, le: i64) []Value {
    var s_var: i64 = s_param;
    const bases: []const u8 = "ACGT";
    var out: []const u8 = "";
    var i: i64 = 0;
    while (i < le) {
        const r: []i64 = randInt(s_var, 4);
        s_var = r[@intCast(0)];
        const idx: i64 = @as(i64, r[@intCast(1)]);
        out = _concat_string(out, bases[@intCast(idx)..@intCast(idx + 1)]);
        i = i + 1;
    }
    return blk1: { var _tmp1 = std.heap.page_allocator.alloc(Value, 2) catch unreachable; _tmp1[0] = Value{.Int = s_var}; _tmp1[1] = Value{.Str = out}; break :blk1 _tmp1; };
}

fn mutate(s_param_1: i64, dna: []const u8, w: []i64) []Value {
    var s_var_1: i64 = s_param_1;
    const bases_1: []const u8 = "ACGT";
    const le: i64 = @as(i64, @intCast(dna.len));
    var r_1: []i64 = randInt(s_var_1, le);
    s_var_1 = r_1[@intCast(0)];
    const p: i64 = @as(i64, r_1[@intCast(1)]);
    r_1 = randInt(s_var_1, 300);
    s_var_1 = r_1[@intCast(0)];
    const x: i64 = @as(i64, r_1[@intCast(1)]);
    var arr: [][]const u8 = &[_][]const u8{};
    var i_1: i64 = 0;
    while (i_1 < le) {
        arr = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, arr)) catch |err| handleError(err); _tmp.append(dna[@intCast(i_1)..@intCast(i_1 + 1)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 + 1;
    }
    if (x < w[@intCast(0)]) {
        r_1 = randInt(s_var_1, 4);
        s_var_1 = r_1[@intCast(0)];
        const idx_1: i64 = @as(i64, r_1[@intCast(1)]);
        const b: []const u8 = bases_1[@intCast(idx_1)..@intCast(idx_1 + 1)];
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("  Change @", padLeft(_str(p), 3)), " '"), arr[@intCast(p)]), "' to '"), b), "'")});
        arr[@intCast(p)] = b;
    } else {
        if (x < w[@intCast(0)] + w[@intCast(1)]) {
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("  Delete @", padLeft(_str(p), 3)), " '"), arr[@intCast(p)]), "'")});
            var j: i64 = p;
            while (j < @as(i64, @intCast(arr.len)) - 1) {
                arr[@intCast(j)] = arr[@intCast(j + 1)];
                j = j + 1;
            }
            arr = arr[@intCast(0)..@intCast(@as(i64, @intCast(arr.len)) - 1)];
        } else {
            r_1 = randInt(s_var_1, 4);
            s_var_1 = r_1[@intCast(0)];
            const idx2: i64 = @as(i64, r_1[@intCast(1)]);
            const b_1: []const u8 = bases_1[@intCast(idx2)..@intCast(idx2 + 1)];
            arr = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, arr)) catch |err| handleError(err); _tmp.append("") catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            var j_1: i64 = @as(i64, @intCast(arr.len)) - 1;
            while (j_1 > p) {
                arr[@intCast(j_1)] = arr[@intCast(j_1 - 1)];
                j_1 = j_1 - 1;
            }
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("  Insert @", padLeft(_str(p), 3)), " '"), b_1), "'")});
            arr[@intCast(p)] = b_1;
        }
    }
    var out_1: []const u8 = "";
    i_1 = 0;
    while (i_1 < @as(i64, @intCast(arr.len))) {
        out_1 = _concat_string(out_1, arr[@intCast(i_1)]);
        i_1 = i_1 + 1;
    }
    return blk2: { var _tmp2 = std.heap.page_allocator.alloc(Value, 2) catch unreachable; _tmp2[0] = Value{.Int = s_var_1}; _tmp2[1] = Value{.Str = out_1}; break :blk2 _tmp2; };
}

fn prettyPrint(dna: []const u8, rowLen: i64) void {
    std.debug.print("{s}\n", .{"SEQUENCE:"});
    const le_1: i64 = @as(i64, @intCast(dna.len));
    var i_2: i64 = 0;
    while (i_2 < le_1) {
        var k: i64 = i_2 + rowLen;
        if (k > le_1) {
            k = le_1;
        }
        std.debug.print("{s}\n", .{_concat_string(_concat_string(padLeft(_str(i_2), 5), ": "), dna[@intCast(i_2)..@intCast(k)])});
        i_2 = i_2 + rowLen;
    }
    var a: i64 = 0;
    var c: i64 = 0;
    var g: i64 = 0;
    var t: i64 = 0;
    var idx_2: i64 = 0;
    while (idx_2 < le_1) {
        const ch: []const u8 = dna[@intCast(idx_2)..@intCast(idx_2 + 1)];
        if (std.mem.eql(u8, ch, "A")) {
            a = a + 1;
        } else {
            if (std.mem.eql(u8, ch, "C")) {
                c = c + 1;
            } else {
                if (std.mem.eql(u8, ch, "G")) {
                    g = g + 1;
                } else {
                    if (std.mem.eql(u8, ch, "T")) {
                        t = t + 1;
                    }
                }
            }
        }
        idx_2 = idx_2 + 1;
    }
    std.debug.print("{s}\n", .{""});
    std.debug.print("{s}\n", .{"BASE COUNT:"});
    std.debug.print("{s}\n", .{_concat_string("    A: ", padLeft(_str(a), 3))});
    std.debug.print("{s}\n", .{_concat_string("    C: ", padLeft(_str(c), 3))});
    std.debug.print("{s}\n", .{_concat_string("    G: ", padLeft(_str(g), 3))});
    std.debug.print("{s}\n", .{_concat_string("    T: ", padLeft(_str(t), 3))});
    std.debug.print("{s}\n", .{"    ------"});
    std.debug.print("{s}\n", .{_concat_string("    Î£: ", _str(le_1))});
    std.debug.print("{s}\n", .{"    ======"});
}

fn wstring(w: []i64) []const u8 {
    return _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("  Change: ", _str(w[@intCast(0)])), "\n  Delete: "), _str(w[@intCast(1)])), "\n  Insert: "), _str(w[@intCast(2)])), "\n");
}

fn mochi_main() void {
    var seed: i64 = 1;
    var res_1: []Value = makeSeq(seed, 250);
    seed = res_1[@intCast(0)].Int;
    var dna: []const u8 = res_1[@intCast(1)].Str;
    prettyPrint(dna, 50);
    const muts: i64 = 10;
    const w: []i64 = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp3[0] = 100; _tmp3[1] = 100; _tmp3[2] = 100; break :blk3 _tmp3; };
    std.debug.print("{s}\n", .{"\nWEIGHTS (ex 300):"});
    std.debug.print("{s}\n", .{wstring(w)});
    std.debug.print("{s}\n", .{_concat_string(_concat_string("MUTATIONS (", _str(muts)), "):")});
    var i_3: i64 = 0;
    while (i_3 < muts) {
        res_1 = mutate(seed, dna, w);
        seed = res_1[@intCast(0)].Int;
        dna = res_1[@intCast(1)].Str;
        i_3 = i_3 + 1;
    }
    std.debug.print("{s}\n", .{""});
    prettyPrint(dna, 50);
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
