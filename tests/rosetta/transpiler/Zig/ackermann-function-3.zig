// Generated by Mochi Zig transpiler on 2025-07-24 20:52 +0700
const std = @import("std");

var err: []const u8 = "";

fn pow_big(base: i64, exp: i64) i64 {
    var result: i64 = 1;
    var b: i64 = base;
    var e: i64 = exp;
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = result * b;
        }
        b = b * b;
        e = e / 2;
    }
    return result;
}

fn bit_len(x: i64) i64 {
    var n: i64 = x;
    var c: i64 = 0;
    while (n > 0) {
        n = n / 2;
        c = c + 1;
    }
    return c;
}

fn ackermann2(m: i64, n: i64) i64 {
    if (!std.mem.eql(u8, err, "")) {
        return 0;
    }
    if (m <= 3) {
        const mi: i64 = int(m);
        if (mi == 0) {
            return n + 1;
        }
        if (mi == 1) {
            return n + 2;
        }
        if (mi == 2) {
            return 2 * n + 3;
        }
        if (mi == 3) {
            const nb: i64 = bit_len(n);
            if (nb > 64) {
                err = _concat_string(_concat_string("A(m,n) had n of ", _str(nb)), " bits; too large");
                return 0;
            }
            const r: i64 = pow_big(2, int(n));
            return 8 * r - 3;
        }
    }
    if (bit_len(n) == 0) {
        return ackermann2(m - 1, 1);
    }
    return ackermann2(m - 1, ackermann2(m, n - 1));
}

fn show(m: i64, n: i64) void {
    err = "";
    const res: i64 = ackermann2(m, n);
    if (!std.mem.eql(u8, err, "")) {
        std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("A(", _str(m)), ", "), _str(n)), ") = Error: "), err)}) catch unreachable;
        return;
    }
    if (bit_len(res) <= 256) {
        std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("A(", _str(m)), ", "), _str(n)), ") = "), _str(res))}) catch unreachable;
    } else {
        const s: []const u8 = _str(res);
        const pre: []const u8 = s[0..20];
        const suf: []const u8 = s[std.mem.len(s) - 20..std.mem.len(s)];
        std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("A(", _str(m)), ", "), _str(n)), ") = "), _str(std.mem.len(s))), " digits starting/ending with: "), pre), "..."), suf)}) catch unreachable;
    }
}

fn mochi_main() void {
    show(0, 0);
    show(1, 2);
    show(2, 4);
    show(3, 100);
    show(3, 1000000);
    show(4, 1);
    show(4, 2);
    show(4, 3);
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
