// Generated by Mochi Zig transpiler on 2025-08-03 17:37 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn getBins(limits: []i64, data: []i64) []i64 {
    const n: i64 = @as(i64, @intCast(limits.len));
    var bins: []i64 = &[_]i64{};
    var i: i64 = 0;
    while (i < n + 1) {
        bins = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(bins) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var j: i64 = 0;
    while (j < @as(i64, @intCast(data.len))) {
        const d: i64 = data[@intCast(j)];
        var index: i64 = 0;
        while (index < @as(i64, @intCast(limits.len))) {
            if (d < limits[@intCast(index)]) {
                break;
            }
            if (d == limits[@intCast(index)]) {
                index = index + 1;
                break;
            }
            index = index + 1;
        }
        bins[@intCast(index)] = bins[@intCast(index)] + 1;
        j = j + 1;
    }
    return bins;
}

fn padLeft(n: i64, width: i64) []const u8 {
    const s: []const u8 = _str(n);
    const pad: i64 = width - @as(i64, @intCast(s.len));
    var out: []const u8 = "";
    var i: i64 = 0;
    while (i < pad) {
        out = _concat_string(out, " ");
        i = i + 1;
    }
    return _concat_string(out, s);
}

fn printBins(limits: []i64, bins: []i64) void {
    const n: i64 = @as(i64, @intCast(limits.len));
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("           < ", padLeft(limits[@intCast(0)], 3)), " = "), padLeft(bins[@intCast(0)], 2))});
    var i: i64 = 1;
    while (i < n) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(">= ", padLeft(limits[@intCast(i - 1)], 3)), " and < "), padLeft(limits[@intCast(i)], 3)), " = "), padLeft(bins[@intCast(i)], 2))});
        i = i + 1;
    }
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(">= ", padLeft(limits[@intCast(n - 1)], 3)), "           = "), padLeft(bins[@intCast(n)], 2))});
    std.debug.print("{s}\n", .{""});
}

fn mochi_main() void {
    const limits_list: [][]i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]i64, 2) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 6) catch unreachable; _tmp1[0] = 23; _tmp1[1] = 37; _tmp1[2] = 43; _tmp1[3] = 53; _tmp1[4] = 67; _tmp1[5] = 83; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 10) catch unreachable; _tmp2[0] = 14; _tmp2[1] = 18; _tmp2[2] = 249; _tmp2[3] = 312; _tmp2[4] = 389; _tmp2[5] = 392; _tmp2[6] = 513; _tmp2[7] = 591; _tmp2[8] = 634; _tmp2[9] = 720; break :blk2 _tmp2; }; break :blk0 _tmp0; };
    const data_list: [][]i64 = blk3: { var _tmp3 = std.heap.page_allocator.alloc([]i64, 2) catch unreachable; _tmp3[0] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 50) catch unreachable; _tmp4[0] = 95; _tmp4[1] = 21; _tmp4[2] = 94; _tmp4[3] = 12; _tmp4[4] = 99; _tmp4[5] = 4; _tmp4[6] = 70; _tmp4[7] = 75; _tmp4[8] = 83; _tmp4[9] = 93; _tmp4[10] = 52; _tmp4[11] = 80; _tmp4[12] = 57; _tmp4[13] = 5; _tmp4[14] = 53; _tmp4[15] = 86; _tmp4[16] = 65; _tmp4[17] = 17; _tmp4[18] = 92; _tmp4[19] = 83; _tmp4[20] = 71; _tmp4[21] = 61; _tmp4[22] = 54; _tmp4[23] = 58; _tmp4[24] = 47; _tmp4[25] = 16; _tmp4[26] = 8; _tmp4[27] = 9; _tmp4[28] = 32; _tmp4[29] = 84; _tmp4[30] = 7; _tmp4[31] = 87; _tmp4[32] = 46; _tmp4[33] = 19; _tmp4[34] = 30; _tmp4[35] = 37; _tmp4[36] = 96; _tmp4[37] = 6; _tmp4[38] = 98; _tmp4[39] = 40; _tmp4[40] = 79; _tmp4[41] = 97; _tmp4[42] = 45; _tmp4[43] = 64; _tmp4[44] = 60; _tmp4[45] = 29; _tmp4[46] = 49; _tmp4[47] = 36; _tmp4[48] = 43; _tmp4[49] = 55; break :blk4 _tmp4; }; _tmp3[1] = blk5: { var _tmp5 = std.heap.page_allocator.alloc(i64, 200) catch unreachable; _tmp5[0] = 445; _tmp5[1] = 814; _tmp5[2] = 519; _tmp5[3] = 697; _tmp5[4] = 700; _tmp5[5] = 130; _tmp5[6] = 255; _tmp5[7] = 889; _tmp5[8] = 481; _tmp5[9] = 122; _tmp5[10] = 932; _tmp5[11] = 77; _tmp5[12] = 323; _tmp5[13] = 525; _tmp5[14] = 570; _tmp5[15] = 219; _tmp5[16] = 367; _tmp5[17] = 523; _tmp5[18] = 442; _tmp5[19] = 933; _tmp5[20] = 416; _tmp5[21] = 589; _tmp5[22] = 930; _tmp5[23] = 373; _tmp5[24] = 202; _tmp5[25] = 253; _tmp5[26] = 775; _tmp5[27] = 47; _tmp5[28] = 731; _tmp5[29] = 685; _tmp5[30] = 293; _tmp5[31] = 126; _tmp5[32] = 133; _tmp5[33] = 450; _tmp5[34] = 545; _tmp5[35] = 100; _tmp5[36] = 741; _tmp5[37] = 583; _tmp5[38] = 763; _tmp5[39] = 306; _tmp5[40] = 655; _tmp5[41] = 267; _tmp5[42] = 248; _tmp5[43] = 477; _tmp5[44] = 549; _tmp5[45] = 238; _tmp5[46] = 62; _tmp5[47] = 678; _tmp5[48] = 98; _tmp5[49] = 534; _tmp5[50] = 622; _tmp5[51] = 907; _tmp5[52] = 406; _tmp5[53] = 714; _tmp5[54] = 184; _tmp5[55] = 391; _tmp5[56] = 913; _tmp5[57] = 42; _tmp5[58] = 560; _tmp5[59] = 247; _tmp5[60] = 346; _tmp5[61] = 860; _tmp5[62] = 56; _tmp5[63] = 138; _tmp5[64] = 546; _tmp5[65] = 38; _tmp5[66] = 985; _tmp5[67] = 948; _tmp5[68] = 58; _tmp5[69] = 213; _tmp5[70] = 799; _tmp5[71] = 319; _tmp5[72] = 390; _tmp5[73] = 634; _tmp5[74] = 458; _tmp5[75] = 945; _tmp5[76] = 733; _tmp5[77] = 507; _tmp5[78] = 916; _tmp5[79] = 123; _tmp5[80] = 345; _tmp5[81] = 110; _tmp5[82] = 720; _tmp5[83] = 917; _tmp5[84] = 313; _tmp5[85] = 845; _tmp5[86] = 426; _tmp5[87] = 9; _tmp5[88] = 457; _tmp5[89] = 628; _tmp5[90] = 410; _tmp5[91] = 723; _tmp5[92] = 354; _tmp5[93] = 895; _tmp5[94] = 881; _tmp5[95] = 953; _tmp5[96] = 677; _tmp5[97] = 137; _tmp5[98] = 397; _tmp5[99] = 97; _tmp5[100] = 854; _tmp5[101] = 740; _tmp5[102] = 83; _tmp5[103] = 216; _tmp5[104] = 421; _tmp5[105] = 94; _tmp5[106] = 517; _tmp5[107] = 479; _tmp5[108] = 292; _tmp5[109] = 963; _tmp5[110] = 376; _tmp5[111] = 981; _tmp5[112] = 480; _tmp5[113] = 39; _tmp5[114] = 257; _tmp5[115] = 272; _tmp5[116] = 157; _tmp5[117] = 5; _tmp5[118] = 316; _tmp5[119] = 395; _tmp5[120] = 787; _tmp5[121] = 942; _tmp5[122] = 456; _tmp5[123] = 242; _tmp5[124] = 759; _tmp5[125] = 898; _tmp5[126] = 576; _tmp5[127] = 67; _tmp5[128] = 298; _tmp5[129] = 425; _tmp5[130] = 894; _tmp5[131] = 435; _tmp5[132] = 831; _tmp5[133] = 241; _tmp5[134] = 989; _tmp5[135] = 614; _tmp5[136] = 987; _tmp5[137] = 770; _tmp5[138] = 384; _tmp5[139] = 692; _tmp5[140] = 698; _tmp5[141] = 765; _tmp5[142] = 331; _tmp5[143] = 487; _tmp5[144] = 251; _tmp5[145] = 600; _tmp5[146] = 879; _tmp5[147] = 342; _tmp5[148] = 982; _tmp5[149] = 527; _tmp5[150] = 736; _tmp5[151] = 795; _tmp5[152] = 585; _tmp5[153] = 40; _tmp5[154] = 54; _tmp5[155] = 901; _tmp5[156] = 408; _tmp5[157] = 359; _tmp5[158] = 577; _tmp5[159] = 237; _tmp5[160] = 605; _tmp5[161] = 847; _tmp5[162] = 353; _tmp5[163] = 968; _tmp5[164] = 832; _tmp5[165] = 205; _tmp5[166] = 838; _tmp5[167] = 427; _tmp5[168] = 876; _tmp5[169] = 959; _tmp5[170] = 686; _tmp5[171] = 646; _tmp5[172] = 835; _tmp5[173] = 127; _tmp5[174] = 621; _tmp5[175] = 892; _tmp5[176] = 443; _tmp5[177] = 198; _tmp5[178] = 988; _tmp5[179] = 791; _tmp5[180] = 466; _tmp5[181] = 23; _tmp5[182] = 707; _tmp5[183] = 467; _tmp5[184] = 33; _tmp5[185] = 670; _tmp5[186] = 921; _tmp5[187] = 180; _tmp5[188] = 991; _tmp5[189] = 396; _tmp5[190] = 160; _tmp5[191] = 436; _tmp5[192] = 717; _tmp5[193] = 918; _tmp5[194] = 8; _tmp5[195] = 374; _tmp5[196] = 101; _tmp5[197] = 684; _tmp5[198] = 727; _tmp5[199] = 749; break :blk5 _tmp5; }; break :blk3 _tmp3; };
    var i: i64 = 0;
    while (i < @as(i64, @intCast(limits_list.len))) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string("Example ", _str(i + 1)), "\n")});
        var bins: []i64 = getBins(limits_list[@intCast(i)], data_list[@intCast(i)]);
        printBins(limits_list[@intCast(i)], bins);
        i = i + 1;
    }
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        const s = std.fmt.allocPrintZ(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
        return s[0..s.len];
    }
    const s = std.fmt.allocPrintZ(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
    return s[0..s.len];
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copy(u8, out[0..lhs.len], lhs);
    std.mem.copy(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
