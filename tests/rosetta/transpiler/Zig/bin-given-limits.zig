// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:01:15Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn getBins(limits: []const i32, data: []const i32) []const i32 {
    var n = @as(i32, @intCast((limits).len)); // i32
    var bins = std.ArrayList(i32).init(std.heap.page_allocator);
    var i = 0; // i32
    while (i < (n + 1)) {
        bins = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(bins) catch |err| handleError(err); _tmp0.append(0) catch |err| handleError(err); const res = _tmp0.toOwnedSlice() catch |err| handleError(err); break :blk0 res; };
        i = (i + 1);
    }
    var j = 0; // i32
    while (j < @as(i32, @intCast((data).len))) {
        const d = data[j]; // i32
        var index = 0; // i32
        while (index < @as(i32, @intCast((limits).len))) {
            if (d < limits[index]) {
                break;
            }
            if (d == limits[index]) {
                index = (index + 1);
                break;
            }
            index = (index + 1);
        }
        bins.items[index] = (bins[index] + 1);
        j = (j + 1);
    }
    return bins.items;
}

fn padLeft(n: i32, width: i32) []const u8 {
    var s = std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err); // []const u8
    var pad = (width - @as(i32, @intCast((s).len))); // i32
    var out = ""; // []const u8
    var i = 0; // i32
    while (i < pad) {
        out = _concat_string(out, " ");
        i = (i + 1);
    }
    return _concat_string(out, s);
}

fn printBins(limits: []const i32, bins: []const i32) void {
    var n = @as(i32, @intCast((limits).len)); // i32
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("           < ", padLeft(limits[0], 3)), " = "), padLeft(bins[0], 2))});
    var i = 1; // i32
    while (i < n) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(">= ", padLeft(limits[(i - 1)], 3)), " and < "), padLeft(limits[i], 3)), " = "), padLeft(bins[i], 2))});
        i = (i + 1);
    }
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(">= ", padLeft(limits[(n - 1)], 3)), "           = "), padLeft(bins[n], 2))});
    std.debug.print("\n", .{});
}

fn user_main() void {
    const limitsList = &[_][]const i32{
    &[_]i32{
    23,
    37,
    43,
    53,
    67,
    83,
},
    &[_]i32{
    14,
    18,
    249,
    312,
    389,
    392,
    513,
    591,
    634,
    720,
},
}; // []const []const i32
    const dataList = &[_][]const i32{
    &[_]i32{
    95,
    21,
    94,
    12,
    99,
    4,
    70,
    75,
    83,
    93,
    52,
    80,
    57,
    5,
    53,
    86,
    65,
    17,
    92,
    83,
    71,
    61,
    54,
    58,
    47,
    16,
    8,
    9,
    32,
    84,
    7,
    87,
    46,
    19,
    30,
    37,
    96,
    6,
    98,
    40,
    79,
    97,
    45,
    64,
    60,
    29,
    49,
    36,
    43,
    55,
},
    &[_]i32{
    445,
    814,
    519,
    697,
    700,
    130,
    255,
    889,
    481,
    122,
    932,
    77,
    323,
    525,
    570,
    219,
    367,
    523,
    442,
    933,
    416,
    589,
    930,
    373,
    202,
    253,
    775,
    47,
    731,
    685,
    293,
    126,
    133,
    450,
    545,
    100,
    741,
    583,
    763,
    306,
    655,
    267,
    248,
    477,
    549,
    238,
    62,
    678,
    98,
    534,
    622,
    907,
    406,
    714,
    184,
    391,
    913,
    42,
    560,
    247,
    346,
    860,
    56,
    138,
    546,
    38,
    985,
    948,
    58,
    213,
    799,
    319,
    390,
    634,
    458,
    945,
    733,
    507,
    916,
    123,
    345,
    110,
    720,
    917,
    313,
    845,
    426,
    9,
    457,
    628,
    410,
    723,
    354,
    895,
    881,
    953,
    677,
    137,
    397,
    97,
    854,
    740,
    83,
    216,
    421,
    94,
    517,
    479,
    292,
    963,
    376,
    981,
    480,
    39,
    257,
    272,
    157,
    5,
    316,
    395,
    787,
    942,
    456,
    242,
    759,
    898,
    576,
    67,
    298,
    425,
    894,
    435,
    831,
    241,
    989,
    614,
    987,
    770,
    384,
    692,
    698,
    765,
    331,
    487,
    251,
    600,
    879,
    342,
    982,
    527,
    736,
    795,
    585,
    40,
    54,
    901,
    408,
    359,
    577,
    237,
    605,
    847,
    353,
    968,
    832,
    205,
    838,
    427,
    876,
    959,
    686,
    646,
    835,
    127,
    621,
    892,
    443,
    198,
    988,
    791,
    466,
    23,
    707,
    467,
    33,
    670,
    921,
    180,
    991,
    396,
    160,
    436,
    717,
    918,
    8,
    374,
    101,
    684,
    727,
    749,
},
}; // []const []const i32
    var i = 0; // i32
    while (i < @as(i32, @intCast((limitsList).len))) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string("Example ", std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(i + 1)}) catch |err| handleError(err)), "\n")});
        const bins = getBins(limitsList[i], dataList[i]); // []const i32
        printBins(limitsList[i], bins);
        i = (i + 1);
    }
}

pub fn main() void {
    user_main();
}
