// Generated by Mochi Zig transpiler on 2025-08-01 22:14 +0700
const std = @import("std");

fn mochi_main() void {
    var list: []i64 = &[_]i64{};
    const a: i64 = 1;
    const d: i64 = 2;
    const e: i64 = 3;
    var i: i64 = 4;
    list = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(list) catch unreachable; _tmp.append(a) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    list = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(list) catch unreachable; _tmp.append(d) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    list = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(list) catch unreachable; _tmp.append(e) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    list = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(list) catch unreachable; _tmp.append(i) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    i = @intCast(list.len);
}

pub fn main() void {
    mochi_main();
}
