// Generated by Mochi Zig transpiler on 2025-08-04 17:00 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn mochi_main() void {
    var list: []i64 = &[_]i64{};
    const a: i64 = 1;
    const d: i64 = 2;
    const e: i64 = 3;
    var i: i64 = 4;
    list = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, list)) catch |err| handleError(err); _tmp.append(a) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    list = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, list)) catch |err| handleError(err); _tmp.append(d) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    list = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, list)) catch |err| handleError(err); _tmp.append(e) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    list = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, list)) catch |err| handleError(err); _tmp.append(i) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    i = @as(i64, @intCast(list.len));
}

pub fn main() void {
    mochi_main();
}
