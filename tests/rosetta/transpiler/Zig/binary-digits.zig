// Generated by Mochi Zig transpiler on 2025-08-03 21:06 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn toBin(n: i64) []const u8 {
    if (n == 0) {
        return "0";
    }
    var bits: []const u8 = "";
    var x: i64 = n;
    while (x > 0) {
        bits = _concat_string(_str(@mod(x, 2)), bits);
        x = @as(i64, @divTrunc(x, 2));
    }
    return bits;
}

pub fn main() void {
    for (0..16) |__it0| {
        const i: i64 = @as(i64, @intCast(__it0));
        std.debug.print("{s}\n", .{toBin(i)});
    }
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        const s = std.fmt.allocPrintZ(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
        return s[0..s.len];
    }
    const s = std.fmt.allocPrintZ(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
    return s[0..s.len];
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copy(u8, out[0..lhs.len], lhs);
    std.mem.copy(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
