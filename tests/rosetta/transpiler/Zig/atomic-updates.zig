// Generated by Mochi Zig transpiler on 2025-08-02 16:31 +0700
const std = @import("std");

fn randOrder(seed: i64, n: i64) []i64 {
    const next: i64 = @mod(seed * 1664525 + 1013904223, 2147483647);
    return @constCast(&[_]i64{next, @mod(next, n)})[0..];
}

fn randChaos(seed: i64, n: i64) []i64 {
    const next: i64 = @mod(seed * 1103515245 + 12345, 2147483647);
    return @constCast(&[_]i64{next, @mod(next, n)})[0..];
}

fn mochi_main() void {
    const n_buckets: i64 = 10;
    const initial_sum: i64 = 1000;
    var buckets: []i64 = &[_]i64{};
    for (0..n_buckets) |_| {
        buckets = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(buckets) catch unreachable; _tmp.append(0) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    }
    var i: i64 = n_buckets;
    var dist: i64 = initial_sum;
    while (i > 0) {
        const v: i64 = @divTrunc(dist, i);
        i = i - 1;
        buckets[@as(usize, @intCast(i))] = v;
        dist = dist - v;
    }
    var tc0: i64 = 0;
    var tc1: i64 = 0;
    var total: i64 = 0;
    var n_ticks: i64 = 0;
    var seed_order: i64 = 1;
    var seed_chaos: i64 = 2;
    std.debug.print("{s}\n", .{"sum  ---updates---    mean  buckets"});
    var t: i64 = 0;
    while (t < 5) {
        var r: []i64 = randOrder(seed_order, n_buckets);
        seed_order = r[@as(usize, @intCast(0))];
        var b1: i64 = r[@as(usize, @intCast(1))];
        var b2: i64 = @mod(b1 + 1, n_buckets);
        const v1: i64 = buckets[@as(usize, @intCast(b1))];
        const v2: i64 = buckets[@as(usize, @intCast(b2))];
        if (v1 > v2) {
            var a: i64 = @divTrunc(v1 - v2, 2);
            if (a > buckets[@as(usize, @intCast(b1))]) {
                a = buckets[@as(usize, @intCast(b1))];
            }
            buckets[@as(usize, @intCast(b1))] = buckets[@as(usize, @intCast(b1))] - a;
            buckets[@as(usize, @intCast(b2))] = buckets[@as(usize, @intCast(b2))] + a;
        } else {
            var a: i64 = @divTrunc(v2 - v1, 2);
            if (a > buckets[@as(usize, @intCast(b2))]) {
                a = buckets[@as(usize, @intCast(b2))];
            }
            buckets[@as(usize, @intCast(b2))] = buckets[@as(usize, @intCast(b2))] - a;
            buckets[@as(usize, @intCast(b1))] = buckets[@as(usize, @intCast(b1))] + a;
        }
        tc0 = tc0 + 1;
        r = randChaos(seed_chaos, n_buckets);
        seed_chaos = r[@as(usize, @intCast(0))];
        b1 = r[@as(usize, @intCast(1))];
        b2 = @mod(b1 + 1, n_buckets);
        r = randChaos(seed_chaos, buckets[@as(usize, @intCast(b1))] + 1);
        seed_chaos = r[@as(usize, @intCast(0))];
        var amt: i64 = r[@as(usize, @intCast(1))];
        if (amt > buckets[@as(usize, @intCast(b1))]) {
            amt = buckets[@as(usize, @intCast(b1))];
        }
        buckets[@as(usize, @intCast(b1))] = buckets[@as(usize, @intCast(b1))] - amt;
        buckets[@as(usize, @intCast(b2))] = buckets[@as(usize, @intCast(b2))] + amt;
        tc1 = tc1 + 1;
        var sum: i64 = 0;
        var idx: i64 = 0;
        while (idx < n_buckets) {
            sum = sum + buckets[@as(usize, @intCast(idx))];
            idx = idx + 1;
        }
        total = total + tc0 + tc1;
        n_ticks = n_ticks + 1;
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_str(sum), " "), _str(tc0)), " "), _str(tc1)), " "), _str(@divTrunc(total, n_ticks))), "  "), _str(buckets))});
        tc0 = 0;
        tc1 = 0;
        t = t + 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = _mem();
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ lhs, rhs }) catch unreachable;
}

fn _mem() i64 {
    const usage = std.posix.getrusage(0);
    return @as(i64, usage.maxrss) * 1024;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
