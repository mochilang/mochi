// Generated by Mochi Zig transpiler on 2025-07-24 07:31 +0700
const std = @import("std");

const Rational = struct {
    num: i64,
    denom: i64,
};

const Num = struct {
    value: Rational,
};

const Bin = struct {
    op: i64,
    left: i64,
    right: i64,
};

const OP_ADD: i64 = 1;
const OP_SUB: i64 = 2;
const OP_MUL: i64 = 3;
const OP_DIV: i64 = 4;
const n_cards: i64 = 4;
const goal: i64 = 24;
const digit_range: i64 = 9;

fn binEval(op: i64, l: std.StringHashMap(i64), r: std.StringHashMap(i64)) Rational {
    const lv: i64 = exprEval(l);
    const rv: i64 = exprEval(r);
    if (op == OP_ADD) {
        return .{ .num = lv.num * rv.denom + lv.denom * rv.num, .denom = lv.denom * rv.denom };
    }
    if (op == OP_SUB) {
        return .{ .num = lv.num * rv.denom - lv.denom * rv.num, .denom = lv.denom * rv.denom };
    }
    if (op == OP_MUL) {
        return .{ .num = lv.num * rv.num, .denom = lv.denom * rv.denom };
    }
    return .{ .num = lv.num * rv.denom, .denom = lv.denom * rv.num };
}

fn binString(op: i64, l: std.StringHashMap(i64), r: std.StringHashMap(i64)) []const u8 {
    const ls: i64 = exprString(l);
    const rs: i64 = exprString(r);
    var opstr: []const u8 = "";
    if (op == OP_ADD) {
        opstr = " + ";
    } else {
        if (op == OP_SUB) {
            opstr = " - ";
        } else {
            if (op == OP_MUL) {
                opstr = " * ";
            } else {
                opstr = " / ";
            }
        }
    }
    return _concat_string(_concat_string(_concat_string(_concat_string("(", ls), opstr), rs), ")");
}

fn newNum(n: i64) std.StringHashMap(i64) {
    return .{ .op = 0, .value = .{ .num = n, .denom = 1 } };
}

fn exprEval(x: std.StringHashMap(i64)) Rational {
    return if (x.get("op").? == 0) x.get("value").? else if (x.get("op").? == 1) binEval(x.get("op").?, x.get("left").?, x.get("right").?) else "";
}

fn exprString(x: std.StringHashMap(i64)) []const u8 {
    return if (x.get("op").? == 0) x.get("value").? else if (x.get("op").? == 1) binEval(x.get("op").?, x.get("left").?, x.get("right").?) else "";
}

fn solve(xs: []std.StringHashMap(i64)) bool {
    if (std.mem.len(xs) == 1) {
        const f: Rational = exprEval(xs[@as(usize, @intCast(0))]);
        if (f.denom != 0 and f.num == f.denom * goal) {
            std.io.getStdOut().writer().print("{s}\n", .{exprString(xs[@as(usize, @intCast(0))])}) catch unreachable;
            return true;
        }
        return false;
    }
    var i: i64 = 0;
    while (i < std.mem.len(xs)) {
        var j: i64 = i + 1;
        while (j < std.mem.len(xs)) {
            var rest: []std.StringHashMap(i64) = &[_]std.StringHashMap(i64){};
            var k: i64 = 0;
            while (k < std.mem.len(xs)) {
                if (k != i and k != j) {
                    rest = blk: { var _tmp = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(rest) catch unreachable; _tmp.append(xs[@as(usize, @intCast(k))]) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
                }
                k = k + 1;
            }
            const a: std.StringHashMap(i64) = xs[@as(usize, @intCast(i))];
            const b: std.StringHashMap(i64) = xs[@as(usize, @intCast(j))];
            for ([4]i64{OP_ADD, OP_SUB, OP_MUL, OP_DIV}) |__it0| {
                const op = __it0;
                var node: Bin = .{ .op = 1, .op = op, .left = a, .right = b };
                if (solve(blk: { var _tmp = std.ArrayList(Bin).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(rest) catch unreachable; _tmp.append(node) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; })) {
                    return true;
                }
            }
            var node: Bin = .{ .op = 1, .op = OP_SUB, .left = b, .right = a };
            if (solve(blk: { var _tmp = std.ArrayList(Bin).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(rest) catch unreachable; _tmp.append(node) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; })) {
                return true;
            }
            node = .{ .op = 1, .op = OP_DIV, .left = b, .right = a };
            if (solve(blk: { var _tmp = std.ArrayList(Bin).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(rest) catch unreachable; _tmp.append(node) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; })) {
                return true;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return false;
}

fn mochi_main() void {
    var iter: i64 = 0;
    while (iter < 10) {
        var cards: []std.StringHashMap(i64) = &[_]std.StringHashMap(i64){};
        var i: i64 = 0;
        while (i < n_cards) {
            const n: i64 = @mod(_now(), digit_range - 1) + 1;
            cards = blk: { var _tmp = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(cards) catch unreachable; _tmp.append(newNum(n)) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
            std.io.getStdOut().writer().print("{s}\n", .{_concat_string(" ", _str(n))}) catch unreachable;
            i = i + 1;
        }
        std.io.getStdOut().writer().print("{s}\n", .{":  "}) catch unreachable;
        if (!(solve(cards))) {
            std.io.getStdOut().writer().print("{s}\n", .{"No solution"}) catch unreachable;
        }
        iter = iter + 1;
    }
}

pub fn main() void {
    mochi_main();
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
