// Generated by Mochi Zig transpiler on 2025-08-04 19:36 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn mkAdd(a: i64) fn(i64) i64 {
    return fn_0;
}

fn mysum(x: i64, y: i64) i64 {
    return x + y;
}

fn partialSum(x: i64) fn(i64) i64 {
    return fn_1;
}

fn mochi_main() void {
    const add2: fn(i64) i64 = mkAdd(2); _ = add2;
    const add3: fn(i64) i64 = mkAdd(3); _ = add3;
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_str(add2(5)), " "), _str(add3(6)))});
    const partial: fn(i64) i64 = partialSum(13); _ = partial;
    std.debug.print("{s}\n", .{_str(partial(5))});
}

fn fn_0(a: i64, b: i64) i64 {
    return a + b;
}

fn fn_1(x: i64, y: i64) i64 {
    return mysum(x, y);
}

pub fn main() void {
    {
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes: i64 = 0;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
