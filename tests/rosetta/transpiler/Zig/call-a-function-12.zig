// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:01:20Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn mkAdd(a: i32) fn(i32) i32 {
    return (blk: { const closure = struct { a: i32, }{ .a = a }; break :blk struct { fn inner(b: i32) i32 {
        return (closure.a + b);
} }.inner; });
}

fn mysum(x: i32, y: i32) i32 {
    return (x + y);
}

fn partialSum(x: i32) fn(i32) i32 {
    return (blk: { const closure = struct { x: i32, }{ .x = x }; break :blk struct { fn inner(y: i32) i32 {
        return mysum(closure.x, y);
} }.inner; });
}

fn user_main() void {
    const add2: i32 = mkAdd(2); // i32
    const add3: i32 = mkAdd(3); // i32
    std.debug.print("{any}\n", .{_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{add2(5)}) catch |err| handleError(err), " "), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{add3(6)}) catch |err| handleError(err))});
    const partial: i32 = partialSum(13); // i32
    std.debug.print("{any}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{partial(5)}) catch |err| handleError(err)});
}

pub fn main() void {
    user_main();
}
