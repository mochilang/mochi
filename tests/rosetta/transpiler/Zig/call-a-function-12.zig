// Generated by Mochi Zig transpiler on 2025-08-01 22:14 +0700
const std = @import("std");

fn mkAdd(a: i64) fn(i64) i64 {
    return fn_0;
}

fn mysum(x: i64, y: i64) i64 {
    return x + y;
}

fn partialSum(x: i64) fn(i64) i64 {
    return fn_1;
}

fn mochi_main() void {
    const add2: fn(i64) i64 = mkAdd(2); _ = add2;
    const add3: fn(i64) i64 = mkAdd(3); _ = add3;
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_str(add2(5)), " "), _str(add3(6)))});
    const partial: fn(i64) i64 = partialSum(13); _ = partial;
    std.debug.print("{s}\n", .{_str(partial(5))});
}

fn fn_0(a: i64, b: i64) i64 {
    return a + b;
}

fn fn_1(x: i64, y: i64) i64 {
    return mysum(x, y);
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ lhs, rhs }) catch unreachable;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
