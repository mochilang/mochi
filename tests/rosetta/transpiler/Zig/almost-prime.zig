// Generated by Mochi Zig transpiler on 2025-07-24 20:52 +0700
const std = @import("std");

fn kPrime(n: i64, k: i64) bool {
    var nf: i64 = 0;
    var i: i64 = 2;
    while (i <= n) {
        while (@mod(n, i) == 0) {
            if (nf == k) {
                return false;
            }
            nf = nf + 1;
            n = n / i;
        }
        i = i + 1;
    }
    return nf == k;
}

fn gen(k: i64, count: i64) []i64 {
    var r: []i64 = &[_]i64{};
    var n: i64 = 2;
    while (std.mem.len(r) < count) {
        if (kPrime(n, k)) {
            r = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(r) catch unreachable; _tmp.append(n) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
        }
        n = n + 1;
    }
    return r;
}

fn mochi_main() void {
    var k: i64 = 1;
    while (k <= 5) {
        std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_str(k), " "), _str(gen(k, 10)))}) catch unreachable;
        k = k + 1;
    }
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
