// Generated by Mochi Zig transpiler on 2025-08-02 01:22 +0700
const std = @import("std");

const msg: []const u8 = "Rosetta Code Base64 decode data task";
var enc: []const u8 = &[_]u8{};
var dec: []const u8 = &[_]u8{};

fn indexOf(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn parseIntStr(str: []const u8) i64 {
    var i: i64 = 0;
    var neg: bool = false;
    if (@as(i64, @intCast(str.len)) > 0 and std.mem.eql(u8, str[@as(usize, @intCast(0))..@as(usize, @intCast(0)) + 1], "-")) {
        neg = true;
        i = 1;
    }
    var n: i64 = 0;
    const digits: []const u8 = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("0", 0) catch unreachable; m.put("1", 1) catch unreachable; m.put("2", 2) catch unreachable; m.put("3", 3) catch unreachable; m.put("4", 4) catch unreachable; m.put("5", 5) catch unreachable; m.put("6", 6) catch unreachable; m.put("7", 7) catch unreachable; m.put("8", 8) catch unreachable; m.put("9", 9) catch unreachable; break :blk m; };
    while (i < @as(i64, @intCast(str.len))) {
        n = n * 10 + digits.get(str[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]).?;
        i = i + 1;
    }
    if (neg) {
        n = 0 - n;
    }
    return n;
}

fn ord(ch: []const u8) i64 {
    const upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    var idx: i64 = indexOf(upper, ch);
    if (idx >= 0) {
        return 65 + idx;
    }
    idx = indexOf(lower, ch);
    if (idx >= 0) {
        return 97 + idx;
    }
    if (std.mem.order(u8, ch, "0") != .lt and std.mem.order(u8, ch, "9") != .gt) {
        return 48 + parseIntStr(ch);
    }
    if (std.mem.eql(u8, ch, "+")) {
        return 43;
    }
    if (std.mem.eql(u8, ch, "/")) {
        return 47;
    }
    if (std.mem.eql(u8, ch, " ")) {
        return 32;
    }
    if (std.mem.eql(u8, ch, "=")) {
        return 61;
    }
    return 0;
}

fn chr(n: i64) []const u8 {
    const upper: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const lower: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    if (n >= 65 and n < 91) {
        return upper[n - 65..n - 64];
    }
    if (n >= 97 and n < 123) {
        return lower[n - 97..n - 96];
    }
    if (n >= 48 and n < 58) {
        const digits: []const u8 = "0123456789";
        return digits[n - 48..n - 47];
    }
    if (n == 43) {
        return "+";
    }
    if (n == 47) {
        return "/";
    }
    if (n == 32) {
        return " ";
    }
    if (n == 61) {
        return "=";
    }
    return "?";
}

fn toBinary(n: i64, bits: i64) []const u8 {
    var b: []const u8 = "";
    var val: i64 = n;
    var i: i64 = 0;
    while (i < bits) {
        b = _concat_string(_str(@mod(val, 2)), b);
        val = @divTrunc(val, 2);
        i = i + 1;
    }
    return b;
}

fn binToInt(bits: []const u8) i64 {
    var n: i64 = 0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(bits.len))) {
        n = n * 2 + parseIntStr(bits[i..i + 1]);
        i = i + 1;
    }
    return n;
}

fn base64Encode(text: []const u8) []const u8 {
    const alphabet: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var bin: []const u8 = "";
    for (text) |__it0| {
        const ch: []const u8 = &[_]u8{__it0};
        bin = _concat_string(bin, toBinary(ord(ch), 8));
    }
    while (@mod(@as(i64, @intCast(bin.len)), 6) != 0) {
        bin = _concat_string(bin, "0");
    }
    var out: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(bin.len))) {
        const chunk: []const u8 = bin[i..i + 6];
        const val: i64 = binToInt(chunk);
        out = _concat_string(out, alphabet[val..val + 1]);
        i = i + 6;
    }
    const pad: i64 = @mod(3 - @mod(@as(i64, @intCast(text.len)), 3), 3);
    if (pad == 1) {
        out = _concat_string(out[0..@as(i64, @intCast(out.len)) - 1], "=");
    }
    if (pad == 2) {
        out = _concat_string(out[0..@as(i64, @intCast(out.len)) - 2], "==");
    }
    return out;
}

fn base64Decode(enc_param: []const u8) []const u8 {
    const alphabet: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var bin: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(enc_param.len))) {
        const ch: []const u8 = enc_param[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        if (std.mem.eql(u8, ch, "=")) {
            break;
        }
        const idx: i64 = indexOf(alphabet, ch);
        bin = _concat_string(bin, toBinary(idx, 6));
        i = i + 1;
    }
    var out: []const u8 = "";
    i = 0;
    while (i + 8 <= @as(i64, @intCast(bin.len))) {
        const chunk: []const u8 = bin[i..i + 8];
        const val: i64 = binToInt(chunk);
        out = _concat_string(out, chr(val));
        i = i + 8;
    }
    return out;
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        enc = base64Encode(msg);
        dec = base64Decode(enc);
        std.debug.print("{s}\n", .{_concat_string("Original : ", msg)});
        std.debug.print("{s}\n", .{_concat_string("\nEncoded  : ", enc)});
        std.debug.print("{s}\n", .{_concat_string("\nDecoded  : ", dec)});
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.json.stringifyAlloc(std.heap.page_allocator, __bench, .{ .whitespace = .indent_2 }) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ lhs, rhs }) catch unreachable;
}

fn _mem() i64 {
    var usage: std.os.linux.rusage = undefined;
    if (std.os.linux.getrusage(std.os.linux.rusage.SELF, &usage) != 0) return 0;
    return @as(i64, usage.maxrss) * 1024;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
