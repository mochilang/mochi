// Generated by Mochi Zig transpiler on 2025-08-01 15:22 +0700
const std = @import("std");

fn mochi_main() void {
    const i_n_f: i64 = 1000000000;
    const n: i64 = 4;
    var dist: [][]i64 = &[_][]i64{};
    var next: [][]i64 = &[_][]i64{};
    var i: i64 = 0;
    while (i < n) {
        var row: []i64 = &[_]i64{};
        var nrow: []i64 = &[_]i64{};
        var j: i64 = 0;
        while (j < n) {
            if (i == j) {
                row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(row) catch unreachable; _tmp.append(0) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
            } else {
                row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(row) catch unreachable; _tmp.append(i_n_f) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
            }
            nrow = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(nrow) catch unreachable; _tmp.append(0 - 1) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
            j = j + 1;
        }
        dist = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(dist) catch unreachable; _tmp.append(row) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
        next = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(next) catch unreachable; _tmp.append(nrow) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
        i = i + 1;
    }
    dist[@as(usize, @intCast(0))][@as(usize, @intCast(2))] = 0 - 2;
    next[@as(usize, @intCast(0))][@as(usize, @intCast(2))] = 2;
    dist[@as(usize, @intCast(2))][@as(usize, @intCast(3))] = 2;
    next[@as(usize, @intCast(2))][@as(usize, @intCast(3))] = 3;
    dist[@as(usize, @intCast(3))][@as(usize, @intCast(1))] = 0 - 1;
    next[@as(usize, @intCast(3))][@as(usize, @intCast(1))] = 1;
    dist[@as(usize, @intCast(1))][@as(usize, @intCast(0))] = 4;
    next[@as(usize, @intCast(1))][@as(usize, @intCast(0))] = 0;
    dist[@as(usize, @intCast(1))][@as(usize, @intCast(2))] = 3;
    next[@as(usize, @intCast(1))][@as(usize, @intCast(2))] = 2;
    var k: i64 = 0;
    while (k < n) {
        var i_1: i64 = 0;
        while (i_1 < n) {
            var j: i64 = 0;
            while (j < n) {
                if (dist[@as(usize, @intCast(i_1))][@as(usize, @intCast(k))] < i_n_f and dist[@as(usize, @intCast(k))][@as(usize, @intCast(j))] < i_n_f) {
                    const alt: i64 = dist[@as(usize, @intCast(i_1))][@as(usize, @intCast(k))] + dist[@as(usize, @intCast(k))][@as(usize, @intCast(j))];
                    if (alt < dist[@as(usize, @intCast(i_1))][@as(usize, @intCast(j))]) {
                        dist[@as(usize, @intCast(i_1))][@as(usize, @intCast(j))] = alt;
                        next[@as(usize, @intCast(i_1))][@as(usize, @intCast(j))] = next[@as(usize, @intCast(i_1))][@as(usize, @intCast(k))];
                    }
                }
                j = j + 1;
            }
            i_1 = i_1 + 1;
        }
        k = k + 1;
    }
    _print("pair\tdist\tpath");
    var a: i64 = 0;
    while (a < n) {
        var b: i64 = 0;
        while (b < n) {
            if (a != b) {
                _print(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_str(a + 1), " -> "), _str(b + 1)), "\t"), _str(dist[@as(usize, @intCast(a))][@as(usize, @intCast(b))])), "\t"), pathStr(path(next, a + 1, b + 1))));
            }
            b = b + 1;
        }
        a = a + 1;
    }
}

fn path(next: [][]i64, u: i64, v: i64) []i64 {
    const ui: i64 = u - 1;
    const vi: i64 = v - 1;
    if (next[@as(usize, @intCast(ui))][@as(usize, @intCast(vi))] == 0 - 1) {
        return &[_]i64{};
    }
    var p: []i64 = @constCast(&[_]i64{u})[0..];
    var cur: i64 = ui;
    while (cur != vi) {
        cur = next[@as(usize, @intCast(cur))][@as(usize, @intCast(vi))];
        p = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(p) catch unreachable; _tmp.append(cur + 1) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
    }
    return p;
}

fn pathStr(p: []i64) []const u8 {
    var s: []const u8 = "";
    var first: bool = true;
    var idx: i64 = 0;
    while (idx < p.len) {
        const x: i64 = p[@as(usize, @intCast(idx))];
        if (!(first)) {
            s = _concat_string(s, " -> ");
        }
        s = _concat_string(s, _str(x));
        first = false;
        idx = idx + 1;
    }
    return s;
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.fmt.allocPrint(std.heap.page_allocator, "{f}", .{std.json.fmt(__bench, .{ .whitespace = .indent_2 })}) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ lhs, rhs }) catch unreachable;
}

fn _mem() i64 {
    var usage: std.os.linux.rusage = undefined;
    if (std.os.linux.getrusage(std.os.linux.rusage.SELF, &usage) != 0) return 0;
    return @as(i64, usage.maxrss) * 1024;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
