// Generated by Mochi Zig transpiler on 2025-08-02 18:10 +0700
const std = @import("std");

fn sortFloat(xs: []f64) []f64 {
    var arr: []f64 = xs;
    const n: i64 = @as(i64, @intCast(arr.len));
    var i: i64 = 0;
    while (i < n) {
        var j: i64 = 0;
        while (j < n - 1) {
            if (arr[@as(usize, @intCast(j))] > arr[@as(usize, @intCast(j + 1))]) {
                const tmp: f64 = arr[@as(usize, @intCast(j))];
                arr[@as(usize, @intCast(j))] = arr[@as(usize, @intCast(j + 1))];
                arr[@as(usize, @intCast(j + 1))] = tmp;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return arr;
}

fn median(a: []f64) f64 {
    const arr: []f64 = sortFloat(a);
    const half: i64 = @divTrunc(@as(i64, @intCast(arr.len)), 2);
    var m: f64 = arr[@as(usize, @intCast(half))];
    if (@mod(@as(i64, @intCast(arr.len)), 2) == 0) {
        m = (m + arr[@as(usize, @intCast(half - 1))]) / 2.0;
    }
    return m;
}

pub fn main() void {
    std.debug.print("{s}\n", .{_str(median(@constCast(&[_]f64{3.0, 1.0, 4.0, 1.0})[0..]))});
    std.debug.print("{s}\n", .{_str(median(@constCast(&[_]f64{3.0, 1.0, 4.0, 1.0, 5.0})[0..]))});
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
