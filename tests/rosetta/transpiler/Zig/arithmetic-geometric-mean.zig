// Generated by Mochi Zig transpiler on 2025-07-28 01:16 +0700
const std = @import("std");

fn abs(x: f64) f64 {
    if (x < 0.0) {
        return 0 - x;
    }
    return x;
}

fn sqrtApprox(x: f64) f64 {
    var guess: f64 = x;
    var i: i64 = 0;
    while (i < 20) {
        guess = (guess + x / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

fn agm(a_param: f64, g_param: f64) f64 {
    var a: f64 = a_param;
    var g: f64 = g_param;
    const eps: f64 = 0.00000000000001;
    while (abs(a - g) > abs(a) * eps) {
        const newA: f64 = (a + g) / 2.0;
        const newG: f64 = sqrtApprox(a * g);
        a = newA;
        g = newG;
    }
    return a;
}

fn mochi_main() void {
    _print(_str(agm(1.0, 1.0 / sqrtApprox(2.0))));
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.json.stringifyAlloc(std.heap.page_allocator, __bench, .{ .whitespace = .indent_2 }) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    var usage: std.os.linux.rusage = undefined;
    if (std.os.linux.getrusage(std.os.linux.rusage.SELF, &usage) != 0) return 0;
    return @as(i64, usage.maxrss) * 1024;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
