// Generated by Mochi Zig transpiler on 2025-08-03 22:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var dna_var: []const u8 = &[_]u8{};
var le_var: i64 = 0;
var i_var: i64 = 0;
var a_var: i64 = 0;
var c_var: i64 = 0;
var g_var: i64 = 0;
var t_var: i64 = 0;
var idx_var: i64 = 0;

fn padLeft(s: []const u8, w: i64) []const u8 {
    var res: []const u8 = "";
    var n: i64 = w - @as(i64, @intCast(s.len));
    while (n > 0) {
        res = _concat_string(res, " ");
        n = n - 1;
    }
    return _concat_string(res, s);
}

pub fn main() void {
    {
        const __start = _now();
        dna_var = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG"), "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG"), "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT"), "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT"), "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG"), "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"), "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT"), "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG"), "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC"), "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT");
        le_var = @as(i64, @intCast(dna_var.len));
        std.debug.print("{s}\n", .{"SEQUENCE:"});
        while (i_var < le_var) {
            var k: i64 = i_var + 50;
            if (k > le_var) {
                k = le_var;
            }
            std.debug.print("{s}\n", .{_concat_string(_concat_string(padLeft(_str(i_var), 5), ": "), dna_var[@intCast(i_var)..@intCast(k)])});
            i_var = i_var + 50;
        }
        while (idx_var < le_var) {
            const ch: []const u8 = dna_var[@intCast(idx_var)..@intCast(idx_var + 1)];
            if (std.mem.eql(u8, ch, "A")) {
                a_var = a_var + 1;
            } else {
                if (std.mem.eql(u8, ch, "C")) {
                    c_var = c_var + 1;
                } else {
                    if (std.mem.eql(u8, ch, "G")) {
                        g_var = g_var + 1;
                    } else {
                        if (std.mem.eql(u8, ch, "T")) {
                            t_var = t_var + 1;
                        }
                    }
                }
            }
            idx_var = idx_var + 1;
        }
        std.debug.print("{s}\n", .{""});
        std.debug.print("{s}\n", .{"BASE COUNT:"});
        std.debug.print("{s}\n", .{_concat_string("    A: ", padLeft(_str(a_var), 3))});
        std.debug.print("{s}\n", .{_concat_string("    C: ", padLeft(_str(c_var), 3))});
        std.debug.print("{s}\n", .{_concat_string("    G: ", padLeft(_str(g_var), 3))});
        std.debug.print("{s}\n", .{_concat_string("    T: ", padLeft(_str(t_var), 3))});
        std.debug.print("{s}\n", .{"    ------"});
        std.debug.print("{s}\n", .{_concat_string("    Î£: ", _str(le_var))});
        std.debug.print("{s}\n", .{"    ======"});
        const __end = _now();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes: i64 = 0;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
