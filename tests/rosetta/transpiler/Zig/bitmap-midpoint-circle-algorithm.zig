// Generated by Mochi Zig transpiler on 2025-08-04 18:31 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var g_var: [][][]const u8 = &[_][][]const u8{};

fn initGrid(size: i64) [][][]const u8 {
    var g_var_1: [][][]const u8 = &[_][][]const u8{};
    var y: i64 = 0;
    while (y < size) {
        var row: [][]const u8 = &[_][]const u8{};
        var x: i64 = 0;
        while (x < size) {
            row = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, row)) catch |err| handleError(err); _tmp.append(" ") catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            x = x + 1;
        }
        g_var_1 = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, g_var_1)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        y = y + 1;
    }
    return g_var_1;
}

fn set(g_param: [][][]const u8, x: i64, y: i64) void {
    if (x >= 0 and x < @as(i64, @intCast(g_param[@intCast(0)].len)) and y >= 0 and y < @as(i64, @intCast(g_param.len))) {
        g_param[@intCast(y)][@intCast(x)] = "#";
    }
}

fn circle(r: i64) [][][]const u8 {
    const size: i64 = r * 2 + 1;
    const g_var_2: [][][]const u8 = initGrid(size);
    var x_1: i64 = r;
    var y_1: i64 = 0;
    var err: i64 = 1 - r;
    while (y_1 <= x_1) {
        set(g_var_2, r + x_1, r + y_1);
        set(g_var_2, r + y_1, r + x_1);
        set(g_var_2, r - x_1, r + y_1);
        set(g_var_2, r - y_1, r + x_1);
        set(g_var_2, r - x_1, r - y_1);
        set(g_var_2, r - y_1, r - x_1);
        set(g_var_2, r + x_1, r - y_1);
        set(g_var_2, r + y_1, r - x_1);
        y_1 = y_1 + 1;
        if (err < 0) {
            err = err + 2 * y_1 + 1;
        } else {
            x_1 = x_1 - 1;
            err = err + 2 * (y_1 - x_1) + 1;
        }
    }
    return g_var_2;
}

fn trimRight(row: [][]const u8) []const u8 {
    var end: i64 = @as(i64, @intCast(row.len));
    while (end > 0 and std.mem.eql(u8, row[@intCast(end - 1)], " ")) {
        end = end - 1;
    }
    var s: []const u8 = "";
    var i: i64 = 0;
    while (i < end) {
        s = _concat_string(s, row[@intCast(i)]);
        i = i + 1;
    }
    return s;
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        g_var = circle(10);
        for (g_var) |__it0| {
            const row_1 = __it0;
            std.debug.print("{s}\n", .{trimRight(row_1)});
        }
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.fmt.allocPrint(std.heap.page_allocator, "{f}", .{std.json.fmt(__bench, .{ .whitespace = .indent_2 })}) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var f = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer f.close();
    var buf: [64]u8 = undefined;
    const n = f.readAll(&buf) catch return 0;
    var it = std.mem.tokenize(u8, buf[0..n], " " );
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
