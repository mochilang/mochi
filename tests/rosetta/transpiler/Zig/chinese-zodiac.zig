// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

const Info = struct {
    animal: []const u8,
    yinYang: []const u8,
    element: []const u8,
    stemBranch: []const u8,
    cycle: i32,
};

const animal = &[_][]const u8{
    "Rat",
    "Ox",
    "Tiger",
    "Rabbit",
    "Dragon",
    "Snake",
    "Horse",
    "Goat",
    "Monkey",
    "Rooster",
    "Dog",
    "Pig",
}; // []const []const u8
const yinYang = &[_][]const u8{
    "Yang",
    "Yin",
}; // []const []const u8
const element = &[_][]const u8{
    "Wood",
    "Fire",
    "Earth",
    "Metal",
    "Water",
}; // []const []const u8
const stemChArr = &[_][]const u8{
    "甲",
    "乙",
    "丙",
    "丁",
    "戊",
    "己",
    "庚",
    "辛",
    "壬",
    "癸",
}; // []const []const u8
const branchChArr = &[_][]const u8{
    "子",
    "丑",
    "寅",
    "卯",
    "辰",
    "巳",
    "午",
    "未",
    "申",
    "酉",
    "戌",
    "亥",
}; // []const []const u8

fn cz(yr: i32, animal: []const []const u8, yinYang: []const []const u8, element: []const []const u8, sc: []const []const u8, bc: []const []const u8) Info {
    var y = (yr - 4); // i32
    const stem = @mod(y, 10); // i32
    const branch = @mod(y, 12); // i32
    const sb = (sc[stem] + bc[branch]); // []const u8
    return Info{
    .animal = @as([]const u8, animal[branch]),
    .yinYang = @as([]const u8, yinYang[@mod(stem, 2)]),
    .element = @as([]const u8, element[@as(i32, ((stem / 2)))]),
    .stemBranch = sb,
    .cycle = (@mod(y, 60) + 1),
};
}

pub fn main() void {
    for (&[_]i32{
    1935,
    1938,
    1968,
    1972,
    1976,
}) |yr| {
        const r = cz(yr, animal, yinYang, element, stemChArr, branchChArr); // Info
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{yr}) catch |err| handleError(err), ": "), r.element), " "), r.animal), ", "), r.yinYang), ", Cycle year "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{r.cycle}) catch |err| handleError(err)), " "), r.stemBranch)});
    }
}
