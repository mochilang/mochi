// Generated by Mochi Zig transpiler on 2025-08-04 21:43 +0700
const std = @import("std");
const Value = union(enum) { Int: i64, Float: f64, Str: []const u8, Bool: bool, };

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn f() []Value {
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc(Value, 2) catch unreachable; _tmp0[0] = Value{.Int = 0}; _tmp0[1] = Value{.Float = 0.0}; break :blk0 _tmp0; };
}

fn g(_: i64, _: f64) i64 {
    return 0;
}

fn h(_: []const u8, _: []i64) void {
}

fn mochi_main() void {
    h("ex1", &[_]i64{});
    h("ex2", blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp1[0] = 1; _tmp1[1] = 2; break :blk1 _tmp1; });
    h("ex3", blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp2[0] = 1; _tmp2[1] = 2; _tmp2[2] = 3; _tmp2[3] = 4; break :blk2 _tmp2; });
    const list: []i64 = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp3[0] = 1; _tmp3[1] = 2; _tmp3[2] = 3; _tmp3[3] = 4; break :blk3 _tmp3; };
    h("ex4", list);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.heap.page_size_min;
    }
    return 0;
}
