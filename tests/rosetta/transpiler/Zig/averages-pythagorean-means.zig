// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:01:12Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn powf(base: f64, exp: i32) f64 {
    var result = 1.0; // f64
    var i = 0; // i32
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result;
}

fn nthRoot(x: f64, n: i32) f64 {
    var low = 0.0; // f64
    var high = x; // f64
    var i = 0; // i32
    while (i < 60) {
        const mid = (((low + high)) / 2.0); // f64
        if (powf(mid, n) > x) {
            high = mid;
        } else {
            low = mid;
        }
        i = (i + 1);
    }
    return low;
}

fn user_main() void {
    var sum = 0.0; // f64
    var sumRecip = 0.0; // f64
    var prod = 1.0; // f64
    var n = 1; // i32
    while (n <= 10) {
        const f = @as(f64, n); // f64
        sum = (sum + f);
        sumRecip = (sumRecip + (1.0 / f));
        prod = (prod * f);
        n = (n + 1);
    }
    const count = 10.0; // f64
    const a: i32 = (sum / count); // i32
    const g = nthRoot(prod, 10); // f64
    const h: i32 = (count / sumRecip); // i32
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("A: ", std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{a}) catch |err| handleError(err)), " G: "), std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{g}) catch |err| handleError(err)), " H: "), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{h}) catch |err| handleError(err))});
    std.debug.print("{s}\n", .{_concat_string("A >= G >= H: ", std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{((a >= g) and (g >= h))}) catch |err| handleError(err))});
}

pub fn main() void {
    user_main();
}
