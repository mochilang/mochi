// Generated by Mochi Zig transpiler on 2025-07-24 20:52 +0700
const std = @import("std");

const Map0 = struct {
    base: []const u8,
    host: []const u8,
    port: i64,
    group_filter: []const u8,
};

const Map1 = struct {
    username: [][]const u8,
    john: [][]const u8,
};

fn search_user(directory: i64, username: []const u8) [][]const u8 {
    return directory[@as(usize, @intCast(username))];
}

fn mochi_main() void {
    const client: Map0 = .{ .base = "dc=example,dc=com", .host = "ldap.example.com", .port = 389, .group_filter = "(memberUid=%s)" };
    const directory: Map1 = .{ .username = @constCast(&[_][]const u8{"admins", "users"})[0..], .john = @constCast(&[_][]const u8{"users"})[0..] };
    const groups: [][]const u8 = search_user(directory, "username");
    if (std.mem.len(groups) > 0) {
        var out: []const u8 = "Groups: [";
        var i: i64 = 0;
        while (i < std.mem.len(groups)) {
            out = _concat_string(_concat_string(_concat_string(out, "\""), groups[@as(usize, @intCast(i))]), "\"");
            if (i < std.mem.len(groups) - 1) {
                out = _concat_string(out, ", ");
            }
            i = i + 1;
        }
        out = _concat_string(out, "]");
        std.io.getStdOut().writer().print("{s}\n", .{out}) catch unreachable;
    } else {
        std.io.getStdOut().writer().print("{s}\n", .{"User not found"}) catch unreachable;
    }
}

pub fn main() void {
    mochi_main();
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
