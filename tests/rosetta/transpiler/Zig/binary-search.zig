// Generated by Mochi Zig transpiler on 2025-08-03 21:06 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn bsearch(arr: []i64, x: i64) i64 {
    var low: i64 = 0;
    var high: i64 = @as(i64, @intCast(arr.len)) - 1;
    while (low <= high) {
        const mid: i64 = @divTrunc(low + high, 2);
        if (arr[@intCast(mid)] > x) {
            high = mid - 1;
        } else {
            if (arr[@intCast(mid)] < x) {
                low = mid + 1;
            } else {
                return mid;
            }
        }
    }
    return 0 - 1;
}

fn bsearchRec(arr: []i64, x: i64, low: i64, high: i64) i64 {
    if (high < low) {
        return 0 - 1;
    }
    const mid: i64 = @divTrunc(low + high, 2);
    if (arr[@intCast(mid)] > x) {
        return bsearchRec(arr, x, low, mid - 1);
    } else {
        if (arr[@intCast(mid)] < x) {
            return bsearchRec(arr, x, mid + 1, high);
        }
    }
    return mid;
}

fn mochi_main() void {
    const nums: []i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 10) catch unreachable; _tmp0[0] = 0 - 31; _tmp0[1] = 0; _tmp0[2] = 1; _tmp0[3] = 2; _tmp0[4] = 2; _tmp0[5] = 4; _tmp0[6] = 65; _tmp0[7] = 83; _tmp0[8] = 99; _tmp0[9] = 782; break :blk0 _tmp0; };
    var x: i64 = 2;
    var idx: i64 = bsearch(nums, x);
    if (idx >= 0) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_str(x), " is at index "), _str(idx)), ".")});
    } else {
        std.debug.print("{s}\n", .{_concat_string(_str(x), " is not found.")});
    }
    x = 5;
    idx = bsearchRec(nums, x, 0, @as(i64, @intCast(nums.len)) - 1);
    if (idx >= 0) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_str(x), " is at index "), _str(idx)), ".")});
    } else {
        std.debug.print("{s}\n", .{_concat_string(_str(x), " is not found.")});
    }
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        const s = std.fmt.allocPrintZ(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
        return s[0..s.len];
    }
    const s = std.fmt.allocPrintZ(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
    return s[0..s.len];
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copy(u8, out[0..lhs.len], lhs);
    std.mem.copy(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
