// Generated by Mochi Zig transpiler on 2025-07-24 20:52 +0700
const std = @import("std");

fn pfacSum(i: i64) i64 {
    var sum: i64 = 0;
    var p: i64 = 1;
    while (p <= i / 2) {
        if (@mod(i, p) == 0) {
            sum = sum + p;
        }
        p = p + 1;
    }
    return sum;
}

fn pad(n: i64, width: i64) []const u8 {
    var s: []const u8 = _str(n);
    while (std.mem.len(s) < width) {
        s = _concat_string(" ", s);
    }
    return s;
}

fn mochi_main() void {
    var sums: []i64 = &[_]i64{};
    var i: i64 = 0;
    while (i < 20000) {
        sums = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(sums) catch unreachable; _tmp.append(0) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
        i = i + 1;
    }
    i = 1;
    while (i < 20000) {
        sums[@as(usize, @intCast(i))] = pfacSum(i);
        i = i + 1;
    }
    std.io.getStdOut().writer().print("{s}\n", .{"The amicable pairs below 20,000 are:"}) catch unreachable;
    var n: i64 = 2;
    while (n < 19999) {
        const m: i64 = sums[@as(usize, @intCast(n))];
        if (m > n and m < 20000 and n == sums[@as(usize, @intCast(m))]) {
            std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_concat_string("  ", pad(n, 5)), " and "), pad(m, 5))}) catch unreachable;
        }
        n = n + 1;
    }
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
