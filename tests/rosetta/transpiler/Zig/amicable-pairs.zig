// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn pfacSum(i: i32) i32 {
    var sum = 0; // i32
    var p = 1; // i32
    while (p <= (i / 2)) {
        if (@mod(i, p) == 0) {
            sum = (sum + p);
        }
        p = (p + 1);
    }
    return sum;
}

fn pad(n: i32, width: i32) []const u8 {
    var s = std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err); // []const u8
    while (@as(i32, @intCast((s).len)) < width) {
        s = _concat_string(" ", s);
    }
    return s;
}

fn user_main() void {
    var sums = std.ArrayList(i32).init(std.heap.page_allocator);
    var i = 0; // i32
    while (i < 20000) {
        sums = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(sums) catch |err| handleError(err); _tmp0.append(0) catch |err| handleError(err); const res = _tmp0.toOwnedSlice() catch |err| handleError(err); break :blk0 res; };
        i = (i + 1);
    }
    i = 1;
    while (i < 20000) {
        sums.items[i] = pfacSum(i);
        i = (i + 1);
    }
    std.debug.print("The amicable pairs below 20,000 are:\n", .{});
    var n = 2; // i32
    while (n < 19999) {
        const m = sums[n]; // i32
        if (((m > n) and (m < 20000)) and (n == sums[m])) {
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("  ", pad(n, 5)), " and "), pad(m, 5))});
        }
        n = (n + 1);
    }
}

pub fn main() void {
    user_main();
}
