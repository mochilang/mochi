// Generated by Mochi Zig transpiler on 2025-08-01 19:20 +0700
const std = @import("std");

fn absf(x: f64) f64 {
    if (x < 0.0) {
        return 0 - x;
    }
    return x;
}

fn floorf(x: f64) f64 {
    const y: f64 = x;
    return @as(f64, @floatFromInt(y));
}

fn indexOf(s: []const u8, ch: []const u8) i64 {
    var i: f64 = 0;
    while (i < s.len) {
        if (std.mem.eql(u8, s[i..i + 1], ch)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn fmtF(x: f64) []const u8 {
    const y: f64 = floorf(x * 10000.0 + 0.5) / 10000.0;
    var s: []const u8 = _str(y);
    const dot: i64 = indexOf(s, ".");
    if (dot == 0 - 1) {
        s = _concat_string(s, ".0000");
    } else {
        var decs: i64 = s.len - dot - 1;
        if (decs > 4) {
            s = s[0..dot + 5];
        } else {
            while (decs < 4) {
                s = _concat_string(s, "0");
                decs = decs + 1;
            }
        }
    }
    return s;
}

fn padInt(n: i64, width: i64) []const u8 {
    var s: []const u8 = _str(n);
    while (s.len < width) {
        s = _concat_string(" ", s);
    }
    return s;
}

fn padFloat(x: f64, width: i64) []const u8 {
    var s: []const u8 = fmtF(x);
    while (s.len < width) {
        s = _concat_string(" ", s);
    }
    return s;
}

fn avgLen(n: i64) f64 {
    const tests: i64 = 10000;
    var sum: f64 = 0;
    var seed: i64 = 1;
    var t: i64 = 0;
    while (t < tests) {
        var visited: []bool = &[_]bool{};
        var i: f64 = 0;
        while (i < n) {
            visited = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(visited) catch unreachable; _tmp.append(false) catch unreachable; const _res = _tmp.toOwnedSlice() catch unreachable; break :blk _res; };
            i = i + 1;
        }
        var x: i64 = 0;
        while (!(visited[@as(usize, @intCast(x))])) {
            visited[@as(usize, @intCast(x))] = true;
            sum = sum + 1;
            seed = @mod(seed * 1664525 + 1013904223, 2147483647);
            x = @mod(seed, n);
        }
        t = t + 1;
    }
    return @as(f64, @floatFromInt(sum)) / tests;
}

fn ana(n: i64) f64 {
    const nn: f64 = @as(f64, @floatFromInt(n));
    var term: f64 = 1.0;
    var sum: f64 = 1.0;
    var i: f64 = nn - 1.0;
    while (i >= 1.0) {
        term = term * (i / nn);
        sum = sum + term;
        i = i - 1.0;
    }
    return sum;
}

fn mochi_main() void {
    const nmax: i64 = 20;
    std.debug.print("{s}\n", .{" N    average    analytical    (error)"});
    std.debug.print("{s}\n", .{"===  =========  ============  ========="});
    var n: i64 = 1;
    while (n <= nmax) {
        const a: f64 = avgLen(n);
        const b: f64 = ana(n);
        const err: f64 = absf(a - b) / b * 100.0;
        const line: []const u8 = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(padInt(n, 3), "  "), padFloat(a, 9)), "  "), padFloat(b, 12)), "  ("), padFloat(err, 6)), "%)");
        std.debug.print("{s}\n", .{line});
        n = n + 1;
    }
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        const __bench = .{ .duration_us = __duration_us, .memory_bytes = __memory_bytes, .name = "main" };
        const __bj = std.json.stringifyAlloc(std.heap.page_allocator, __bench, .{ .whitespace = .indent_2 }) catch unreachable;
        std.debug.print("{s}\n", .{__bj});
        std.heap.page_allocator.free(__bj);
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ lhs, rhs }) catch unreachable;
}

fn _mem() i64 {
    var usage: std.os.linux.rusage = undefined;
    if (std.os.linux.getrusage(std.os.linux.rusage.SELF, &usage) != 0) return 0;
    return @as(i64, usage.maxrss) * 1024;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
