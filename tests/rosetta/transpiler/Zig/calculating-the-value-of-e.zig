// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:01:20Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

const epsilon = 0.000000000000001; // f64
var factval = 1; // i32
var e = 2.0; // f64
var n = 2; // i32
var term = 1.0; // f64

fn absf(x: f64) f64 {
    if (x < 0.0) {
        return -x;
    }
    return x;
}

fn pow10(n: i32) f64 {
    var r: f64 = 1.0; // f64
    var i = 0; // i32
    while (i < n) {
        r = (r * 10.0);
        i = (i + 1);
    }
    return r;
}

fn formatFloat(f: f64, prec: i32) []const u8 {
    const scale = pow10(prec); // f64
    const scaled = (((f * scale)) + 0.5); // f64
    var n = (@as(i32, scaled)); // i32
    var digits = std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err); // []const u8
    while (@as(i32, @intCast((digits).len)) <= prec) {
        digits = _concat_string("0", digits);
    }
    const intPart = digits[0..@as(usize, @intCast(@as(i32, @intCast((digits).len)) - prec))]; // []const u8
    const fracPart = _slice_string(digits, (@as(i32, @intCast((digits).len)) - prec), @as(i32, @intCast((digits).len)), 1); // []const u8
    return _concat_string(_concat_string(intPart, "."), fracPart);
}

pub fn main() void {
    while (true) {
        factval = (factval * n);
        n = (n + 1);
        term = (1.0 / (@as(f64, factval)));
        e = (e + term);
        if (absf(term) < epsilon) {
            break;
        }
    }
    std.debug.print("{s}\n", .{_concat_string("e = ", formatFloat(e, 15))});
}
