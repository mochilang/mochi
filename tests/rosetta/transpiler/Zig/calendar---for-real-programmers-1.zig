// Generated by Mochi Zig transpiler on 2025-08-04 17:00 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var days_in_month_var: []i64 = &[_]i64{};
var start_var: []i64 = &[_]i64{};
var months_var: [][]const u8 = &[_][]const u8{};
var days_var: [][]const u8 = &[_][]const u8{};
var qtr_var: i64 = 0;

pub fn main() void {
    days_in_month_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 12) catch unreachable; _tmp0[0] = 31; _tmp0[1] = 28; _tmp0[2] = 31; _tmp0[3] = 30; _tmp0[4] = 31; _tmp0[5] = 30; _tmp0[6] = 31; _tmp0[7] = 31; _tmp0[8] = 30; _tmp0[9] = 31; _tmp0[10] = 30; _tmp0[11] = 31; break :blk0 _tmp0; };
    start_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 12) catch unreachable; _tmp1[0] = 3; _tmp1[1] = 6; _tmp1[2] = 6; _tmp1[3] = 2; _tmp1[4] = 4; _tmp1[5] = 0; _tmp1[6] = 2; _tmp1[7] = 5; _tmp1[8] = 1; _tmp1[9] = 3; _tmp1[10] = 6; _tmp1[11] = 1; break :blk1 _tmp1; };
    months_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc([]const u8, 12) catch unreachable; _tmp2[0] = " January "; _tmp2[1] = " February"; _tmp2[2] = "  March  "; _tmp2[3] = "  April  "; _tmp2[4] = "   May   "; _tmp2[5] = "   June  "; _tmp2[6] = "   July  "; _tmp2[7] = "  August "; _tmp2[8] = "September"; _tmp2[9] = " October "; _tmp2[10] = " November"; _tmp2[11] = " December"; break :blk2 _tmp2; };
    days_var = blk3: { var _tmp3 = std.heap.page_allocator.alloc([]const u8, 7) catch unreachable; _tmp3[0] = "Su"; _tmp3[1] = "Mo"; _tmp3[2] = "Tu"; _tmp3[3] = "We"; _tmp3[4] = "Th"; _tmp3[5] = "Fr"; _tmp3[6] = "Sa"; break :blk3 _tmp3; };
    std.debug.print("{s}\n", .{"                                [SNOOPY]\n"});
    std.debug.print("{s}\n", .{"                                  1969\n"});
    while (qtr_var < 4) {
        var mi: i64 = 0;
        while (mi < 3) {
            std.debug.print("{s} {any}\n", .{_concat_string(_concat_string("      ", months_var[@intCast(qtr_var * 3 + mi)]), "           "), false});
            mi = mi + 1;
        }
        std.debug.print("{s}\n", .{""});
        mi = 0;
        while (mi < 3) {
            var d: i64 = 0;
            while (d < 7) {
                std.debug.print("{s} {any}\n", .{_concat_string(" ", days_var[@intCast(d)]), false});
                d = d + 1;
            }
            std.debug.print("{s} {any}\n", .{"     ", false});
            mi = mi + 1;
        }
        std.debug.print("{s}\n", .{""});
        var week: i64 = 0;
        while (week < 6) {
            mi = 0;
            while (mi < 3) {
                var day: i64 = 0;
                while (day < 7) {
                    const m: i64 = qtr_var * 3 + mi;
                    const val: i64 = week * 7 + day - start_var[@intCast(m)] + 1;
                    if (val >= 1 and val <= days_in_month_var[@intCast(m)]) {
                        var s: []const u8 = _str(val);
                        if (@as(i64, @intCast(s.len)) == 1) {
                            s = _concat_string(" ", s);
                        }
                        std.debug.print("{s} {any}\n", .{_concat_string(" ", s), false});
                    } else {
                        std.debug.print("{s} {any}\n", .{"   ", false});
                    }
                    day = day + 1;
                }
                std.debug.print("{s} {any}\n", .{"     ", false});
                mi = mi + 1;
            }
            std.debug.print("{s}\n", .{""});
            week = week + 1;
        }
        std.debug.print("{s}\n", .{""});
        qtr_var = qtr_var + 1;
    }
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
