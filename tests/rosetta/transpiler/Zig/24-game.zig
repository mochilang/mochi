// Generated by Mochi Zig transpiler on 2025-07-23 10:13 +0700
const std = @import("std");

fn randDigit() i64 {
    return @mod(_now(), 9) + 1;
}

fn mochi_main() void {
    var digits: []i64 = &[_]i64{};
    for (0..4) |i| {
        digits = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(digits) catch unreachable; _tmp.append(randDigit()) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
    }
    var numstr = "";
    for (0..4) |i| {
        numstr = _concat_string(numstr, _str(digits[@as(usize, @intCast(i))]));
    }
    std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string("Your numbers: ", numstr), "\n")}) catch unreachable;
    std.io.getStdOut().writer().print("{s}\n", .{"Enter RPN: "}) catch unreachable;
    var expr = input();
    if (std.mem.len(expr) != 7) {
        std.io.getStdOut().writer().print("{s}\n", .{"invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)"}) catch unreachable;
        return;
    }
    var stack: []i64 = &[_]i64{};
    var i: i64 = 0;
    var valid = true;
    while (i < std.mem.len(expr)) {
        const ch = substring(expr, i, i + 1);
        if (ch >= "0" and ch <= "9") {
            if (std.mem.len(digits) == 0) {
                std.io.getStdOut().writer().print("{s}\n", .{"too many numbers."}) catch unreachable;
                return;
            }
            var j: i64 = 0;
            while (digits[@as(usize, @intCast(j))] != int(ch) - int("0")) {
                j = j + 1;
                if (j == std.mem.len(digits)) {
                    std.io.getStdOut().writer().print("{s}\n", .{"wrong numbers."}) catch unreachable;
                    return;
                }
            }
            digits = digits[..j] + digits[j + 1..];
            stack = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(stack) catch unreachable; _tmp.append(float(int(ch) - int("0"))) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
        } else {
            if (std.mem.len(stack) < 2) {
                std.io.getStdOut().writer().print("{s}\n", .{"invalid expression syntax."}) catch unreachable;
                valid = false;
                break;
            }
            var b = stack[@as(usize, @intCast(std.mem.len(stack) - 1))];
            var a = stack[@as(usize, @intCast(std.mem.len(stack) - 2))];
            if (ch == "+") {
                stack[@as(usize, @intCast(std.mem.len(stack) - 2))] = a + b;
            } else {
                if (ch == "-") {
                    stack[@as(usize, @intCast(std.mem.len(stack) - 2))] = a - b;
                } else {
                    if (ch == "*") {
                        stack[@as(usize, @intCast(std.mem.len(stack) - 2))] = a * b;
                    } else {
                        if (ch == "/") {
                            stack[@as(usize, @intCast(std.mem.len(stack) - 2))] = a / b;
                        } else {
                            std.io.getStdOut().writer().print("{s}\n", .{_concat_string(ch, " invalid.")}) catch unreachable;
                            valid = false;
                            break;
                        }
                    }
                }
            }
            stack = stack[..std.mem.len(stack) - 1];
        }
        i = i + 1;
    }
    if (valid) {
        if (abs(stack[@as(usize, @intCast(0))] - 24.0) > 0.000001) {
            std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string("incorrect. ", _str(stack[@as(usize, @intCast(0))])), " != 24")}) catch unreachable;
        } else {
            std.io.getStdOut().writer().print("{s}\n", .{"correct."}) catch unreachable;
        }
    }
}

pub fn main() void {
    mochi_main();
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
