// Generated by Mochi Zig transpiler on 2025-07-24 20:52 +0700
const std = @import("std");

fn accumulator(sum: i64) i64 {
    var store: []i64 = @constCast(&[_]i64{sum})[0..];
    return add;
}

fn mochi_main() void {
    const x: i64 = accumulator(1);
    x(5);
    accumulator(3);
    std.io.getStdOut().writer().print("{s}\n", .{_str(x(2.3))}) catch unreachable;
}

fn add(sum: i64, nv: i64) i64 {
    store[@as(usize, @intCast(0))] = store[@as(usize, @intCast(0))] + nv;
    return store[@as(usize, @intCast(0))];
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}
