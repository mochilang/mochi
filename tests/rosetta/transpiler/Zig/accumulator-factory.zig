// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:59:55Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn accumulator(sum: i32) fn(i32) void {
    var store: []const i32 = &[_]fn(i32) f64{sum}; // []const i32
    const add = (blk: { const closure = struct { store: []const i32, }{ .store = store }; break :blk struct { fn inner(nv: i32) i32 {
        store.items[0] = (closure.store[0] + nv);
        return closure.store.items[0];
} }.inner; });
    return add;
}

fn user_main() void {
    const x: i32 = accumulator(1); // i32
    x(5);
    accumulator(3);
    std.debug.print("{any}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{x(2.3)}) catch |err| handleError(err)});
}

pub fn main() void {
    user_main();
}
