// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn listStr(xs: []const i32) []const u8 {
    var s = "["; // []const u8
    var i = 0; // i32
    while (i < (xs).len) {
        s = _concat_string(s, std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{xs[i]}) catch |err| handleError(err));
        if (i < ((xs).len - 1)) {
            s = _concat_string(s, " ");
        }
        i = (i + 1);
    }
    s = _concat_string(s, "]");
    return s;
}

fn llStr(lst: []const []const i32) []const u8 {
    var s = "["; // []const u8
    var i = 0; // i32
    while (i < (lst).len) {
        s = _concat_string(s, listStr(lst[i]));
        if (i < ((lst).len - 1)) {
            s = _concat_string(s, " ");
        }
        i = (i + 1);
    }
    s = _concat_string(s, "]");
    return s;
}

fn cartN(lists: i32) []const []const i32 {
    if (lists == 0) {
        return []i32{};
    }
    const a = @as([]const []const i32, lists); // []const []const i32
    if ((a).len == 0) {
        return [_][]const i32{&[]i32{}};
    }
    var c = 1; // i32
    for (a) |xs| {
        c = (c * (xs).len);
    }
    if (c == 0) {
        return []i32{};
    }
    var res = std.ArrayList(i32).init(std.heap.page_allocator);
    var idx = std.ArrayList(i32).init(std.heap.page_allocator);
    for (a) |_| {
        idx = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(idx) catch |err| handleError(err); _tmp0.append(0) catch |err| handleError(err); break :blk0 _tmp0.items; };
    }
    var n = (a).len; // i32
    var count = 0; // i32
    while (count < c) {
        var row = std.ArrayList(i32).init(std.heap.page_allocator);
        var j = 0; // i32
        while (j < n) {
            row = blk1: { var _tmp1 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(row) catch |err| handleError(err); _tmp1.append(a[j][idx[j]]) catch |err| handleError(err); break :blk1 _tmp1.items; };
            j = (j + 1);
        }
        res = blk2: { var _tmp2 = std.ArrayList([]const i32).init(std.heap.page_allocator); defer _tmp2.deinit(); _tmp2.appendSlice(res) catch |err| handleError(err); _tmp2.append(row) catch |err| handleError(err); break :blk2 _tmp2.items; };
        var k = (n - 1); // i32
        while (k >= 0) {
            idx.items[k] = (idx[k] + 1);
            if (idx[k] < (a[k]).len) {
                break;
            }
            idx.items[k] = 0;
            k = (k - 1);
        }
        count = (count + 1);
    }
    return res.items;
}

fn user_main() void {
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[_]i32{
    1,
    2,
},
    &[_]i32{
    3,
    4,
},
}))});
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[_]i32{
    3,
    4,
},
    &[_]i32{
    1,
    2,
},
}))});
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[_]i32{
    1,
    2,
},
    &[]i32{},
}))});
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[]i32{},
    &[_]i32{
    1,
    2,
},
}))});
    std.debug.print("\n", .{});
    std.debug.print("[\n", .{});
    for (cartN(&[_][]const i32{
    &[_]i32{
    1776,
    1789,
},
    &[_]i32{
    7,
    12,
},
    &[_]i32{
    4,
    14,
    23,
},
    &[_]i32{
    0,
    1,
},
})) |p| {
        std.debug.print("{s}\n", .{_concat_string(" ", listStr(p))});
    }
    std.debug.print("]\n", .{});
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[_]i32{
    1,
    2,
    3,
},
    &[_]i32{30},
    &[_]i32{
    500,
    100,
},
}))});
    std.debug.print("{s}\n", .{llStr(cartN(&[_][]const i32{
    &[_]i32{
    1,
    2,
    3,
},
    &[]i32{},
    &[_]i32{
    500,
    100,
},
}))});
    std.debug.print("\n", .{});
    std.debug.print("{s}\n", .{llStr(cartN(0))});
    std.debug.print("{s}\n", .{llStr(cartN(&[]i32{}))});
}

pub fn main() void {
    user_main();
}
