// Generated by Mochi Zig transpiler on 2025-07-24 20:52 +0700
const std = @import("std");

const Map0 = struct {
};

fn sortRunes(s: []const u8) []const u8 {
    var arr: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < std.mem.len(s)) {
        arr = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(arr) catch unreachable; _tmp.append(s[i..i + 1]) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
        i = i + 1;
    }
    var n: i64 = std.mem.len(arr);
    var m: i64 = 0;
    while (m < n) {
        var j: i64 = 0;
        while (j < n - 1) {
            if (std.mem.order(u8, arr[@as(usize, @intCast(j))], arr[@as(usize, @intCast(j + 1))]) == .gt) {
                const tmp: []const u8 = arr[@as(usize, @intCast(j))];
                arr[@as(usize, @intCast(j))] = arr[@as(usize, @intCast(j + 1))];
                arr[@as(usize, @intCast(j + 1))] = tmp;
            }
            j = j + 1;
        }
        m = m + 1;
    }
    var out: []const u8 = "";
    i = 0;
    while (i < n) {
        out = _concat_string(out, arr[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    return out;
}

fn deranged(a: []const u8, b: []const u8) bool {
    if (std.mem.len(a) != std.mem.len(b)) {
        return false;
    }
    var i: i64 = 0;
    while (i < std.mem.len(a)) {
        if (std.mem.eql(u8, a[i..i + 1], b[i..i + 1])) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn mochi_main() void {
    const words: [][]const u8 = @constCast(&[_][]const u8{"constitutionalism", "misconstitutional"})[0..];
    var m: Map0 = .{  };
    var bestLen: i64 = 0;
    var w1: []const u8 = "";
    var w2: []const u8 = "";
    for (words) |__it0| {
        const w = __it0;
        if (std.mem.len(w) <= bestLen) {
            continue;
        }
        const k: []const u8 = sortRunes(w);
        if (!(std.mem.indexOfScalar(i64, m, k) != null)) {
            m[@as(usize, @intCast(k))] = @constCast(&[_]i64{w})[0..];
            continue;
        }
        for (m[@as(usize, @intCast(k))]) |__it1| {
            const c = __it1;
            if (deranged(w, c)) {
                bestLen = std.mem.len(w);
                w1 = c;
                w2 = w;
                break;
            }
        }
        m[@as(usize, @intCast(k))] = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(m[@as(usize, @intCast(k))]) catch unreachable; _tmp.append(w) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
    }
    std.io.getStdOut().writer().print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(w1, " "), w2), " : Length "), _str(bestLen))}) catch unreachable;
}

pub fn main() void {
    mochi_main();
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
