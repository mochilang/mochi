// Generated by Mochi Zig transpiler on 2025-08-03 21:50 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var b_var: []i64 = &[_]i64{};
var c_var: []i64 = &[_]i64{};
var d_var: []i64 = &[_]i64{};
var i_var: i64 = 0;
var z_var: []i64 = &[_]i64{};
var sub_var: []i64 = &[_]i64{};
var f_var: []i64 = &[_]i64{};
var rem_var: []i64 = &[_]i64{};

fn char(n: i64) []const u8 {
    const letters: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    const idx: i64 = n - 97;
    if (idx < 0 or idx >= @as(i64, @intCast(letters.len))) {
        return "?";
    }
    return letters[@intCast(idx)..@intCast(idx + 1)];
}

fn fromBytes(bs: []i64) []const u8 {
    var s: []const u8 = "";
    var i_var_1: i64 = 0;
    while (i_var_1 < @as(i64, @intCast(bs.len))) {
        s = _concat_string(s, char(bs[@intCast(i_var_1)]));
        i_var_1 = i_var_1 + 1;
    }
    return s;
}

pub fn main() void {
    {
        const __start = _now();
        b_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 6) catch unreachable; _tmp0[0] = 98; _tmp0[1] = 105; _tmp0[2] = 110; _tmp0[3] = 97; _tmp0[4] = 114; _tmp0[5] = 121; break :blk0 _tmp0; };
        c_var = b_var;
        d_var = &[_]i64{};
        z_var = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, b_var)) catch |err| handleError(err); _tmp.append(122) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        sub_var = b_var[@intCast(1)..@intCast(3)];
        f_var = &[_]i64{};
        rem_var = &[_]i64{};
        std.debug.print("{s}\n", .{_str(b_var)});
        std.debug.print("{s}\n", .{_str(c_var)});
        std.debug.print("{s}\n", .{_str(std.mem.eql(i64, b_var, c_var))});
        while (i_var < @as(i64, @intCast(b_var.len))) {
            d_var = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, d_var)) catch |err| handleError(err); _tmp.append(b_var[@intCast(i_var)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            i_var = i_var + 1;
        }
        d_var[@intCast(1)] = 97;
        d_var[@intCast(4)] = 110;
        std.debug.print("{s}\n", .{fromBytes(b_var)});
        std.debug.print("{s}\n", .{fromBytes(d_var)});
        std.debug.print("{s}\n", .{_str(@as(i64, @intCast(b_var.len)) == 0)});
        std.debug.print("{s}\n", .{fromBytes(z_var)});
        std.debug.print("{s}\n", .{fromBytes(sub_var)});
        i_var = 0;
        while (i_var < @as(i64, @intCast(d_var.len))) {
            const val: i64 = d_var[@intCast(i_var)];
            if (val == 110) {
                f_var = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, f_var)) catch |err| handleError(err); _tmp.append(109) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                f_var = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, f_var)) catch |err| handleError(err); _tmp.append(val) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i_var = i_var + 1;
        }
        std.debug.print("{s}\n", .{_concat_string(_concat_string(fromBytes(d_var), " -> "), fromBytes(f_var))});
        rem_var = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, rem_var)) catch |err| handleError(err); _tmp.append(b_var[@intCast(0)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_var = 3;
        while (i_var < @as(i64, @intCast(b_var.len))) {
            rem_var = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, rem_var)) catch |err| handleError(err); _tmp.append(b_var[@intCast(i_var)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            i_var = i_var + 1;
        }
        std.debug.print("{s}\n", .{fromBytes(rem_var)});
        const __end = _now();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = _mem();
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        const s = std.fmt.allocPrintZ(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
        return s[0..s.len];
    }
    const s = std.fmt.allocPrintZ(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
    return s[0..s.len];
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var f = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer f.close();
    var buf: [64]u8 = undefined;
    const n = f.readAll(&buf) catch return 0;
    var it = std.mem.tokenize(u8, buf[0..n], " " );
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
