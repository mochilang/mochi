// Generated by Mochi Zig transpiler on 2025-08-02 14:46 +0700
const std = @import("std");

fn removeKey(m: i64, k: []const u8) i64 {
    var out: i64 = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); break :blk m; };
    for (m) |__it0| {
        const key = __it0;
        if (key != k) {
            out.put(key, m[@as(usize, @intCast(key))]) catch unreachable;
        }
    }
    return out;
}

fn mochi_main() void {
    var x: i64 = null;
    x = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); break :blk m; };
    x.put("foo", 3) catch unreachable;
    const y1: i64 = x.get("bar").?;
    const ok: bool = std.mem.indexOf(u8, x, "bar") != null;
    std.debug.print("{any}\n", .{y1});
    std.debug.print("{any}\n", .{ok});
    x = removeKey(x, "foo");
    x = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("foo", 2) catch unreachable; m.put("bar", 42) catch unreachable; m.put("baz", 0 - 1) catch unreachable; break :blk m; };
    std.debug.print("{s} {s} {s}\n", .{x.get("foo").?, x.get("bar").?, x.get("baz").?});
}

pub fn main() void {
    {
        const __start_mem = _mem();
        const __start = _now();
        mochi_main();
        const __end = _now();
        const __end_mem = _mem();
        const __duration_us = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __memory_bytes = __end_mem - __start_mem;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    var usage: std.os.linux.rusage = undefined;
    if (std.os.linux.getrusage(std.os.linux.rusage.SELF, &usage) != 0) return 0;
    return @as(i64, usage.maxrss) * 1024;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
