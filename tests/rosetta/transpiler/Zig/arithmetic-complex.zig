// Generated by Mochi Zig transpiler on 2025-07-27 22:20 +0700
const std = @import("std");

const Complex = struct {
    re: f64,
    im: f64,
};

const a: Complex = .{ .re = 1.0, .im = 1.0 };
const b: Complex = .{ .re = 3.14159, .im = 1.25 };

fn add(a_param: Complex, b_param: Complex) Complex {
    return .{ .re = a_param.re + b_param.re, .im = a_param.im + b_param.im };
}

fn mul(a_param: Complex, b_param: Complex) Complex {
    return .{ .re = a_param.re * b_param.re - a_param.im * b_param.im, .im = a_param.re * b_param.im + a_param.im * b_param.re };
}

fn neg(a_param: Complex) Complex {
    return .{ .re = 0 - a_param.re, .im = 0 - a_param.im };
}

fn inv(a_param: Complex) Complex {
    const denom: i64 = a_param.re * a_param.re + a_param.im * a_param.im;
    return .{ .re = a_param.re / denom, .im = (0 - a_param.im) / denom };
}

fn conj(a_param: Complex) Complex {
    return .{ .re = a_param.re, .im = 0 - a_param.im };
}

fn cstr(a_param: Complex) []const u8 {
    var s: []const u8 = _concat_string("(", _str(a_param.re));
    if (a_param.im >= 0) {
        s = _concat_string(_concat_string(_concat_string(s, "+"), _str(a_param.im)), "i)");
    } else {
        s = _concat_string(_concat_string(s, _str(a_param.im)), "i)");
    }
    return s;
}

pub fn main() void {
    _print(_concat_string("a:       ", cstr(a)));
    _print(_concat_string("b:       ", cstr(b)));
    _print(_concat_string("a + b:   ", cstr(add(a, b))));
    _print(_concat_string("a * b:   ", cstr(mul(a, b))));
    _print(_concat_string("-a:      ", cstr(neg(a))));
    _print(_concat_string("1 / a:   ", cstr(inv(a))));
    _print(_concat_string("aÌ…:       ", cstr(conj(a))));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d:.1}", .{v}) catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
