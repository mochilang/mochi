-- Generated by Mochi v0.10.42 on 2025-07-28 11:14 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function ord(ch)
    if (ch == "5") then
      return 53
    end
    if (ch == "T") then
      return 84
    end
    if (ch == " ") then
      return 32
    end
    if (ch == "é") then
      return 233
    end
    if (ch == "🐺") then
      return 128058
    end
    return 0
  end
  function hex(n)
    local digits = "0123456789abcdef"
    if (n == 0) then
      return "0x0"
    end
    local m = n
    local out = ""
    while (m > 0) do
      local d = (m % 16)
      out = (_substring(digits, d, (d + 1)) .. out)
      m = (m // 16)
    end
    return ("0x" .. out)
  end
  function quote(s)
    return (("'" .. s) .. "'")
  end
  function analyze(s)
    local le = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)
        print((((("Analyzing " .. quote(s)) .. " which has a length of ") .. tostring(le)) .. ":"))
        if (le > 1) then
          local i = 1
          while (i < le) do
            local cur = _substring(s, i, (i + 1))
            local prev = _substring(s, (i - 1), i)
            if (cur ~= prev) then
              print("  Not all characters in the string are the same.")
              print((((((("  " .. quote(cur)) .. " (") .. hex(ord(cur))) .. ") is different at position ") .. tostring((i + 1))) .. "."))
              print("")
              return
            end
            i = (i + 1)
          end
        end
        print("  All characters in the string are the same.")
        print("")
      end
      function main()
        local strings = {"", "   ", "2", "333", ".55", "tttTTT", "4444 444k", "pépé", "🐶🐶🐺🐶", "🎄🎄🎄🎄"}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(strings)) do
              analyze(strings[i + 1])
              i = (i + 1)
            end
          end
          main()
          local _bench_end = _now()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
