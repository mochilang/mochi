-- Generated by Mochi v0.10.42 on 2025-07-28 00:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
  start = {3, 6, 6, 2, 4, 0, 2, 5, 1, 3, 6, 1}
  months = {" January ", " February", "  March  ", "  April  ", "   May   ", "   June  ", "   July  ", "  August ", "September", " October ", " November", " December"}
  days = {"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}
  print("                                [SNOOPY]\n")
  print("                                  1969\n")
  qtr = 0
  while (qtr < 4) do
    mi = 0
    while (mi < 3) do
      print((string.gsub(string.format("%s %d", (("      " .. months[((qtr * 3) + mi) + 1]) .. "           "), ((false) and (1) or (0))), "%s+$", "")))
      mi = (mi + 1)
    end
    print("")
    mi = 0
    while (mi < 3) do
      d = 0
      while (d < 7) do
        print((string.gsub(string.format("%s %d", (" " .. days[d + 1]), ((false) and (1) or (0))), "%s+$", "")))
        d = (d + 1)
      end
      print((string.gsub(string.format("      %d", ((false) and (1) or (0))), "%s+$", "")))
      mi = (mi + 1)
    end
    print("")
    week = 0
    while (week < 6) do
      mi = 0
      while (mi < 3) do
        day = 0
        while (day < 7) do
          m = ((qtr * 3) + mi)
          val = ((((week * 7) + day) - start[m + 1]) + 1)
          if ((val >= 1) and (val <= daysInMonth[m + 1])) then
            s = tostring(val)
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s) == 1) then
                  s = (" " .. s)
                end
                print((string.gsub(string.format("%s %d", (" " .. s), ((false) and (1) or (0))), "%s+$", "")))
              else
                print((string.gsub(string.format("    %d", ((false) and (1) or (0))), "%s+$", "")))
              end
              day = (day + 1)
            end
            print((string.gsub(string.format("      %d", ((false) and (1) or (0))), "%s+$", "")))
            mi = (mi + 1)
          end
          print("")
          week = (week + 1)
        end
        print("")
        qtr = (qtr + 1)
      end
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
