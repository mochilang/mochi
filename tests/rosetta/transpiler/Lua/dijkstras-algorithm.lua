-- Generated by Mochi v0.10.41 on 2025-07-26 19:27 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  INF = 1000000000
  graph = {}
  function addEdge(u, v, w)
    if (not (graph[u] ~= nil)) then
      graph[u] = {}
    end
    graph[u][v] = w
    if (not (graph[v] ~= nil)) then
      graph[v] = {}
    end
  end
  function removeAt(xs, idx)
    local out = {}
    local i = 0
    for _, x in ipairs(xs) do
      if (i ~= idx) then
        out = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(out, x)
    end
    i = (i + 1)
  end
  return out
end
function dijkstra(source)
  local dist = {}
  local prev = {}
  for v in pairs(graph) do
    dist[v] = INF
    prev[v] = ""
  end
  dist[source] = 0
  local q = {}
  for v in pairs(graph) do
    q = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(q, v)
end
while ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' or type(v) == 'table' then
      return #v
    else
      return 0
    end
  end)(q) > 0) do
    local bestIdx = 0
    local u = q[0 + 1]
    local i = 1
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(q)) do
        local v = q[i + 1]
        if (dist[v] < dist[u]) then
          u = v
          bestIdx = i
        end
        i = (i + 1)
      end
      q = removeAt(q, bestIdx)
      for v in pairs(graph[u]) do
        local alt = (dist[u] + graph[u][v])
        if (alt < dist[v]) then
          dist[v] = alt
          prev[v] = u
        end
      end
    end
    return {__name = "GenType1", __order = {"dist", "prev"}, dist = dist, prev = prev}
  end
  function path(prev, v)
    local s = v
    local cur = v
    while (prev[cur] ~= "") do
      cur = prev[cur]
      s = (cur .. s)
    end
    return s
  end
  function main()
    addEdge("a", "b", 7)
    addEdge("a", "c", 9)
    addEdge("a", "f", 14)
    addEdge("b", "c", 10)
    addEdge("b", "d", 15)
    addEdge("c", "d", 11)
    addEdge("c", "f", 2)
    addEdge("d", "e", 6)
    addEdge("e", "f", 9)
    local res = dijkstra("a")
    local dist = res.dist
    local prev = res.prev
    print(((("Distance to e: " .. tostring(dist.e)) .. ", Path: ") .. path(prev, "e")))
    print(((("Distance to f: " .. tostring(dist.f)) .. ", Path: ") .. path(prev, "f")))
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
