-- Generated by Mochi v0.10.37 on 2025-07-23 13:23 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
function amb(wordsets, res, idx)
  if (idx == (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(wordsets)) then
    return true
  end
  local prev = ""
  if (idx > 0) then
    prev = res[(idx - 1) + 1]
  end
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(wordsets[idx + 1])) do
    local w = wordsets[idx + 1][i + 1]
    if ((idx == 0) or (string.sub(prev, ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(prev) - 1) + 1, (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(prev)) == string.sub(w, 0 + 1, 1))) then
      res[idx + 1] = w
      if amb(wordsets, res, (idx + 1)) then
        return true
      end
    end
    i = (i + 1)
  end
  return false
end;

function main()
  local wordset = {{"the", "that", "a"}, {"frog", "elephant", "thing"}, {"walked", "treaded", "grows"}, {"slowly", "quickly"}}
  local res = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(wordset)) do
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, "")
  i = (i + 1)
end
if amb(wordset, res, 0) then
  local out = ("[" .. res[0 + 1])
  local j = 1
  while (j < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(res)) do
    out = ((out .. " ") .. res[j + 1])
    j = (j + 1)
  end
  out = (out .. "]")
  print(out)
else
  print("No amb found")
end
end;

main();
