-- Generated by Mochi v0.10.39 on 2025-07-24 14:53 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end
function newBitmap(w, h, c)
  local rows = {}
  local y = 0
  while (y < h) do
    local row = {}
    local x = 0
    while (x < w) do
      row = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(row, c)
    x = (x + 1)
  end
  rows = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(rows, row)
y = (y + 1)
end
return {width = w, height = h, pixels = rows}
end;

function setPixel(b, x, y, c)
  local rows = b.pixels
  local row = rows[y + 1]
  row[x + 1] = c
  rows[y + 1] = row
  b.pixels = rows
end;

function fillRect(b, x, y, w, h, c)
  local yy = y
  while (yy < (y + h)) do
    local xx = x
    while (xx < (x + w)) do
      setPixel((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(b), xx, yy, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c))
      xx = (xx + 1)
    end
    yy = (yy + 1)
  end
end;

function pad(n, width)
  local s = tostring(n)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s) < width) do
      s = (" " .. s)
    end
    return s
  end;
  
  function writePPMP3(b)
    local maxv = 0
    local y = 0
    while (y < b.height) do
      local x = 0
      while (x < b.width) do
        local p = b.pixels[y + 1][x + 1]
        if (p.R > maxv) then
          maxv = p.R
        end
        if (p.G > maxv) then
          maxv = p.G
        end
        if (p.B > maxv) then
          maxv = p.B
        end
        x = (x + 1)
      end
      y = (y + 1)
    end
    local out = (((((("P3\n# generated from Bitmap.writeppmp3\n" .. tostring(b.width)) .. " ") .. tostring(b.height)) .. "\n") .. tostring(maxv)) .. "\n")
    local numsize = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(tostring(maxv))
      y = (b.height - 1)
      while (y >= 0) do
        local line = ""
        local x = 0
        while (x < b.width) do
          local p = b.pixels[y + 1][x + 1]
          line = ((((((line .. "   ") .. pad(p.R, numsize)) .. " ") .. pad(p.G, numsize)) .. " ") .. pad(p.B, numsize))
          x = (x + 1)
        end
        out = (out .. line)
        if (y > 0) then
          out = (out .. "\n")
        else
          out = (out .. "\n")
        end
        y = (y - 1)
      end
      return out
    end;
    
    function main()
      local black = {R = 0, G = 0, B = 0}
      local white = {R = 255, G = 255, B = 255}
      local bm = newBitmap(4, 4, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(black))
      fillRect((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), 1, 0, 1, 2, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(white))
      setPixel((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), 3, 3, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)({R = 127, G = 0, B = 63}))
      local ppm = writePPMP3((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm))
      print(ppm)
    end;
    
    main();
