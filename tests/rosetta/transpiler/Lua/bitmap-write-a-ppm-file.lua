-- Generated by Mochi v0.10.42 on 2025-07-28 00:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function newBitmap(w, h, c)
    local rows = {}
    local y = 0
    while (y < h) do
      local row = {}
      local x = 0
      while (x < w) do
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, c)
      x = (x + 1)
    end
    rows = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(rows, row)
  y = (y + 1)
end
return {width = w, height = h, pixels = rows}
end
function setPixel(b, x, y, c)
  local rows = b.pixels
  local row = rows[y + 1]
  row[x + 1] = c
  rows[y + 1] = row
  b.pixels = rows
end
function fillRect(b, x, y, w, h, c)
  local yy = y
  while (yy < (y + h)) do
    local xx = x
    while (xx < (x + w)) do
      setPixel(b, xx, yy, c)
      xx = (xx + 1)
    end
    yy = (yy + 1)
  end
end
function pad(n, width)
  local s = tostring(n)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s) < width) do
        s = (" " .. s)
      end
      return s
    end
    function writePPMP3(b)
      local maxv = 0
      local y = 0
      while (y < b.height) do
        local x = 0
        while (x < b.width) do
          local p = b.pixels[y + 1][x + 1]
          if (p.R > maxv) then
            maxv = p.R
          end
          if (p.G > maxv) then
            maxv = p.G
          end
          if (p.B > maxv) then
            maxv = p.B
          end
          x = (x + 1)
        end
        y = (y + 1)
      end
      local out = (((((("P3\n# generated from Bitmap.writeppmp3\n" .. tostring(b.width)) .. " ") .. tostring(b.height)) .. "\n") .. tostring(maxv)) .. "\n")
      local numsize = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(tostring(maxv))
          y = (b.height - 1)
          while (y >= 0) do
            local line = ""
            local x = 0
            while (x < b.width) do
              local p = b.pixels[y + 1][x + 1]
              line = ((((((line .. "   ") .. pad(p.R, numsize)) .. " ") .. pad(p.G, numsize)) .. " ") .. pad(p.B, numsize))
              x = (x + 1)
            end
            out = (out .. line)
            if (y > 0) then
              out = (out .. "\n")
            else
              out = (out .. "\n")
            end
            y = (y - 1)
          end
          return out
        end
        function main()
          local black = {R = 0, G = 0, B = 0}
          local white = {R = 255, G = 255, B = 255}
          local bm = newBitmap(4, 4, black)
          fillRect(bm, 1, 0, 1, 2, white)
          setPixel(bm, 3, 3, {R = 127, G = 0, B = 63})
          local ppm = writePPMP3(bm)
          print(ppm)
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
