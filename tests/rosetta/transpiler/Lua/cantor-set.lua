-- Generated by Mochi v0.10.40 on 2025-07-25 20:06 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  width = 81
  height = 5
  lines = {}
  for i = 0, height - 1 do
    row = ""
    j = 0
    while (j < width) do
      row = (row .. "*")
      j = (j + 1)
    end
    lines = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(lines, row)
end
function setChar(s, idx, ch)
  return ((string.sub(s, 0 + 1, idx) .. ch) .. string.sub(s, (idx + 1) + 1, (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)))
  end
  stack = {{__name = "GenType1", __order = {"start", "len", "index"}, start = 0, len = width, index = 1}}
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(stack) > 0) do
      frame = stack[((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(stack) - 1) + 1]
        stack = (function(lst,s,e)
        local r={}
        for i=s+1,e do
          r[#r+1]=lst[i]
        end
        return r
      end)(stack, 0, ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(stack) - 1))
        start = frame.start
        lenSeg = frame.len
        index = frame.index
        seg = math.floor((lenSeg // 3))
        if (seg == 0) then
          goto __cont_1
        end
        i = index
        while (i < height) do
          j = (start + seg)
          while (j < (start + (2 * seg))) do
            lines[i + 1] = setChar(lines[i + 1], j, " ")
            j = (j + 1)
          end
          i = (i + 1)
        end
        stack = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(stack, {__name = "GenType2", __order = {"start", "len", "index"}, start = start, len = seg, index = (index + 1)})
      stack = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(stack, {__name = "GenType3", __order = {"start", "len", "index"}, start = (start + (seg * 2)), len = seg, index = (index + 1)})
    ::__cont_1::
  end
  for _, line in ipairs(lines) do
    print(line)
  end
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
