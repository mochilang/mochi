-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function powInt(base, exp)
    local r = 1
    local b = base
    local e = exp
    while (e > 0) do
      if ((e % 2) == 1) then
        r = (r * b)
      end
      b = (b * b)
      e = (e // math.floor(2))
    end
    return r
  end
  function minInt(x, y)
    if (x < y) then
      return x
    end
    return y
  end
  function throwDie(nSides, nDice, s, counts)
    if (nDice == 0) then
      counts[s + 1] = (counts[s + 1] + 1)
      return
    end
    local i = 1
    while (i <= nSides) do
      throwDie(nSides, (nDice - 1), (s + i), counts)
      i = (i + 1)
    end
  end
  function beatingProbability(nSides1, nDice1, nSides2, nDice2)
    local len1 = ((nSides1 + 1) * nDice1)
    local c1 = {}
    local i = 0
    while (i < len1) do
      c1 = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(c1, 0)
    i = (i + 1)
  end
  throwDie(nSides1, nDice1, 0, c1)
  local len2 = ((nSides2 + 1) * nDice2)
  local c2 = {}
  local j = 0
  while (j < len2) do
    c2 = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(c2, 0)
  j = (j + 1)
end
throwDie(nSides2, nDice2, 0, c2)
local p12 = (powInt(nSides1, nDice1) * powInt(nSides2, nDice2))
local tot = 0
i = 0
while (i < len1) do
  j = 0
  local m = minInt(i, len2)
  while (j < m) do
    tot = (tot + ((c1[i + 1] * c2[j + 1]) / p12))
    j = (j + 1)
  end
  i = (i + 1)
end
return tot
end
print(tostring(beatingProbability(4, 9, 6, 6)))
print(tostring(beatingProbability(10, 5, 7, 6)))
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
