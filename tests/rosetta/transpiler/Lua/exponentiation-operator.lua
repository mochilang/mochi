-- Generated by Mochi v0.10.42 on 2025-07-27 16:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function printExpI(b, p)
  if (p < 0) then
    print((((tostring(b) .. "^") .. tostring(p)) .. ": negative power not allowed"))
    return
  end
  local r = 1
  local i = 1
  while (i <= p) do
    r = (r * b)
    i = (i + 1)
  end
  print(((((tostring(b) .. "^") .. tostring(p)) .. ": ") .. tostring(r)))
end;

function expF(b, p)
  local neg = false
  if (p < 0) then
    neg = true
    p = (-p)
  end
  local r = 1
  local pow = b
  while (p > 0) do
    if ((p % 2) == 1) then
      r = (r * pow)
    end
    pow = (pow * pow)
    p = (p // 2)
  end
  if neg then
    r = (1 / r)
  end
  return r
end;

function printExpF(b, p)
  if ((b == 0) and (p < 0)) then
    print((((tostring(b) .. "^") .. tostring(p)) .. ": +Inf"))
    return
  end
  print(((((tostring(b) .. "^") .. tostring(p)) .. ": ") .. tostring(expF(b, p))))
end;

print("expI tests");

printExpI(2, 10);

printExpI(2, (-10));

printExpI((-2), 10);

printExpI((-2), 11);

printExpI(11, 0);

print("overflow undetected");

printExpI(10, 10);

print("\nexpF tests:");

printExpF(2, 10);

printExpF(2, (-10));

printExpF((-2), 10);

printExpF((-2), 11);

printExpF(11, 0);

print("disallowed in expI, allowed here");

printExpF(0, (-1));

print("other interesting cases for 32 bit float type");

printExpF(10, 39);

printExpF(10, (-39));

printExpF((-10), 39);
