-- Generated by Mochi v0.10.50 on 2025-07-30 21:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function validComb(a, b, c, d, e, f, g)
    local square1 = (a + b)
    local square2 = ((b + c) + d)
    local square3 = ((d + e) + f)
    local square4 = (f + g)
    return (((square1 == square2) and (square2 == square3)) and (square3 == square4))
  end
  function isUnique(a, b, c, d, e, f, g)
    local nums = {a, b, c, d, e, f, g}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(nums)) do
          local j = (i + 1)
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(nums)) do
                if (nums[i + 1] == nums[j + 1]) then
                  return false
                end
                j = (j + 1)
              end
              i = (i + 1)
            end
            return true
          end
          function getCombs(low, high, unique)
            local valid = {}
            local count = 0
            for b = low, (high + 1) - 1 do
              for c = low, (high + 1) - 1 do
                for d = low, (high + 1) - 1 do
                  local s = ((tonumber(((tonumber(b) or 0) + (tonumber(c) or 0))) or 0) + (tonumber(d) or 0))
                  for e = low, (high + 1) - 1 do
                    for f = low, (high + 1) - 1 do
                      local a = (s - b)
                      local g = (s - f)
                      if ((a < low) or (a > high)) then
                        goto __cont_5
                      end
                      if ((g < low) or (g > high)) then
                        goto __cont_5
                      end
                      if (((tonumber(((tonumber(d) or 0) + (tonumber(e) or 0))) or 0) + (tonumber(f) or 0)) ~= s) then
                        goto __cont_5
                      end
                      if (((tonumber(f) or 0) + (tonumber(g) or 0)) ~= s) then
                        goto __cont_5
                      end
                      if ((not unique) or isUnique(a, b, c, d, e, f, g)) then
                        valid = (function(lst, item)
                        local res = {table.unpack(lst)}
                        table.insert(res, item)
                        return res
                      end)(valid, {a, b, c, d, e, f, g})
                      count = (count + 1)
                    end
                    ::__cont_5::
                  end
                  ::__cont_4::
                end
                ::__cont_3::
              end
              ::__cont_2::
            end
            ::__cont_1::
          end
          return {__name = "GenType1", __order = {"count", "list"}, count = count, list = valid}
        end
        r1 = getCombs(1, 7, true)
        print((tostring(r1.count) .. " unique solutions in 1 to 7"))
        print(r1.list)
        r2 = getCombs(3, 9, true)
        print((tostring(r2.count) .. " unique solutions in 3 to 9"))
        print(r2.list)
        r3 = getCombs(0, 9, false)
        print((tostring(r3.count) .. " non-unique solutions in 0 to 9"))
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
