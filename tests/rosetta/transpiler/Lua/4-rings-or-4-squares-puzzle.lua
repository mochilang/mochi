-- Generated by Mochi v0.10.37 on 2025-07-23 11:36 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
function validComb(a, b, c, d, e, f, g)
  local square1 = (a + b)
  local square2 = ((b + c) + d)
  local square3 = ((d + e) + f)
  local square4 = (f + g)
  return (((square1 == square2) and (square2 == square3)) and (square3 == square4))
end;

function isUnique(a, b, c, d, e, f, g)
  local nums = {a, b, c, d, e, f, g}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(nums)) do
    local j = (i + 1)
    while (j < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(nums)) do
      if (nums[i + 1] == nums[j + 1]) then
        return false
      end
      j = (j + 1)
    end
    i = (i + 1)
  end
  return true
end;

function getCombs(low, high, unique)
  local valid = {}
  local count = 0
  for b = low, (high + 1) - 1 do
    for c = low, (high + 1) - 1 do
      for d = low, (high + 1) - 1 do
        local s = ((b + c) + d)
        for e = low, (high + 1) - 1 do
          for f = low, (high + 1) - 1 do
            local a = (s - b)
            local g = (s - f)
            if ((a < low) or (a > high)) then
              goto __cont_5
            end
            if ((g < low) or (g > high)) then
              goto __cont_5
            end
            if (((d + e) + f) ~= s) then
              goto __cont_5
            end
            if ((f + g) ~= s) then
              goto __cont_5
            end
            if ((not unique) or isUnique(a, b, c, d, e, f, g)) then
              valid = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(valid, {a, b, c, d, e, f, g})
            count = (count + 1)
          end
          ::__cont_5::
        end
        ::__cont_4::
      end
      ::__cont_3::
    end
    ::__cont_2::
  end
  ::__cont_1::
end
return {__name = "GenType1", __order = {"count", "list"}, count = count, list = valid}
end;

r1 = getCombs(1, 7, true);

print((tostring(r1.count) .. " unique solutions in 1 to 7"));

print(
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(r1.list));

r2 = getCombs(3, 9, true);

print((tostring(r2.count) .. " unique solutions in 3 to 9"));

print(
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(r2.list));

r3 = getCombs(0, 9, false);

print((tostring(r3.count) .. " non-unique solutions in 0 to 9"));
