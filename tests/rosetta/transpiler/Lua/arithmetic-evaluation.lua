-- Generated by Mochi v0.10.42 on 2025-07-27 23:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _parseIntStr(str)
if type(str) == 'table' then
  str = table.concat(str)
end
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function skipWS(p)
    local i = p.pos
    while ((i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(p.expr)) and (_substring(p.expr, i, (i + 1)) == " ")) do
          i = (i + 1)
        end
        p.pos = i
        return p
      end
      function parseIntStr(str)
        local i = 0
        local n = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(str)) do
              n = (((n * 10) + math.floor(string.sub(str, (i + 1), (i + 1)))) - 48)
              i = (i + 1)
            end
            return n
          end
          function parseNumber(p)
            p = skipWS((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))
            local start = p.pos
            while (p.pos < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(p.expr)) do
                  local ch = _substring(p.expr, p.pos, (p.pos + 1))
                  if ((ch >= "0") and (ch <= "9")) then
                    p.pos = (p.pos + 1)
                  else
                    break
                  end
                end
                local token = _substring(p.expr, start, p.pos)
                return {v = _parseIntStr(token), p = p}
              end
              function parseFactor(p)
                p = skipWS((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))
                if ((p.pos < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(p.expr)) and (_substring(p.expr, p.pos, (p.pos + 1)) == "(")) then
                      p.pos = (p.pos + 1)
                      local r = parseExpr(p)
                      local v = r.v
                      p = r.p
                      p = skipWS((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))
                      if ((p.pos < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(p.expr)) and (_substring(p.expr, p.pos, (p.pos + 1)) == ")")) then
                            p.pos = (p.pos + 1)
                          end
                          return {v = v, p = p}
                        end
                        if ((p.pos < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(p.expr)) and (_substring(p.expr, p.pos, (p.pos + 1)) == "-")) then
                              p.pos = (p.pos + 1)
                              local r = parseFactor(p)
                              local v = r.v
                              p = r.p
                              return {v = (-v), p = p}
                            end
                            return parseNumber(p)
                          end
                          function powInt(base, exp)
                            local r = 1
                            local b = base
                            local e = exp
                            while (e > 0) do
                              if ((e % 2) == 1) then
                                r = (r * b)
                              end
                              b = (b * b)
                              e = (e // math.floor(2))
                            end
                            return r
                          end
                          function parsePower(p)
                            local r = parseFactor(p)
                            local v = r.v
                            p = r.p
                            while true do
                              p = skipWS((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))
                              if ((p.pos < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(p.expr)) and (_substring(p.expr, p.pos, (p.pos + 1)) == "^")) then
                                    p.pos = (p.pos + 1)
                                    local r2 = parseFactor(p)
                                    local rhs = r2.v
                                    p = r2.p
                                    v = powInt(v, rhs)
                                  else
                                    break
                                  end
                                end
                                return {v = v, p = p}
                              end
                              function parseTerm(p)
                                local r = parsePower(p)
                                local v = r.v
                                p = r.p
                                while true do
                                  ::__cont_1::
                                  p = skipWS((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))
                                  if (p.pos < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(p.expr)) then
                                        local op = _substring(p.expr, p.pos, (p.pos + 1))
                                        if (op == "*") then
                                          p.pos = (p.pos + 1)
                                          local r2 = parsePower(p)
                                          local rhs = r2.v
                                          p = r2.p
                                          v = (v * rhs)
                                          goto __cont_1
                                        end
                                        if (op == "/") then
                                          p.pos = (p.pos + 1)
                                          local r2 = parsePower(p)
                                          local rhs = r2.v
                                          p = r2.p
                                          v = (v // math.floor(rhs))
                                          goto __cont_1
                                        end
                                      end
                                      break
                                    end
                                    return {v = v, p = p}
                                  end
                                  function parseExpr(p)
                                    local r = parseTerm(p)
                                    local v = r.v
                                    p = r.p
                                    while true do
                                      ::__cont_2::
                                      p = skipWS((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))
                                      if (p.pos < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(p.expr)) then
                                            local op = _substring(p.expr, p.pos, (p.pos + 1))
                                            if (op == "+") then
                                              p.pos = (p.pos + 1)
                                              local r2 = parseTerm(p)
                                              local rhs = r2.v
                                              p = r2.p
                                              v = (v + rhs)
                                              goto __cont_2
                                            end
                                            if (op == "-") then
                                              p.pos = (p.pos + 1)
                                              local r2 = parseTerm(p)
                                              local rhs = r2.v
                                              p = r2.p
                                              v = (v - rhs)
                                              goto __cont_2
                                            end
                                          end
                                          break
                                        end
                                        return {v = v, p = p}
                                      end
                                      function evalExpr(expr)
                                        local p = {expr = expr, pos = 0}
                                        local r = parseExpr(p)
                                        return r.v
                                      end
                                      function main()
                                        local expr = "2*(3-1)+2*5"
                                        print(((expr .. " = ") .. tostring(evalExpr(expr))))
                                      end
                                      main()
                                      local _bench_end = _now()
                                      collectgarbage()
                                      local _bench_end_mem = collectgarbage('count') * 1024
                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                    end;
