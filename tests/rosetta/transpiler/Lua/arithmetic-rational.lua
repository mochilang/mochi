-- Generated by Mochi v0.10.40 on 2025-07-25 17:45 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function intSqrt(x)
    if (x < 2) then
      return x
    end
    local left = 1
    local right = (x // 2)
    local ans = 0
    while (left <= right) do
      local mid = (left + ((right - left) // 2))
      local sq = (mid * mid)
      if (sq == x) then
        return mid
      end
      if (sq < x) then
        left = (mid + 1)
        ans = mid
      else
        right = (mid - 1)
      end
    end
    return ans
  end
  function sumRecip(n)
    local s = 1
    local limit = intSqrt(n)
    local f = 2
    while (f <= limit) do
      if ((n % f) == 0) then
        s = (s + (n // f))
        local f2 = (n // f)
        if (f2 ~= f) then
          s = (s + f)
        end
      end
      f = (f + 1)
    end
    return s
  end
  function main()
    local nums = {6, 28, 120, 496, 672, 8128, 30240, 32760, 523776}
    for _, n in ipairs(nums) do
      local s = sumRecip(n)
      if ((s % n) == 0) then
        local val = (s // n)
        local perfect = ""
        if (val == 1) then
          perfect = "perfect!"
        end
        print(((((("Sum of recipr. factors of " .. tostring(n)) .. " = ") .. tostring(val)) .. " exactly ") .. perfect))
      end
    end
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
