-- Generated by Mochi v0.10.40 on 2025-07-25 17:59 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function square_to_maps(square)
    local emap = {}
    local dmap = {}
    local x = 0
    while (x < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(square)) do
        local row = square[x + 1]
        local y = 0
        while (y < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(row)) do
            local ch = row[y + 1]
            emap[ch] = {x, y}
            dmap[((tostring(x) .. ",") .. tostring(y))] = ch
            y = (y + 1)
          end
          x = (x + 1)
        end
        return {__name = "GenType1", __order = {"e", "d"}, e = emap, d = dmap}
      end
      function remove_space(text, emap)
        local s = string.upper(text)
        local out = ""
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s)) do
            local ch = string.sub(s, (i + 1), (i + 1))
            if ((ch ~= " ") and (emap[ch] ~= nil)) then
              out = (out .. ch)
            end
            i = (i + 1)
          end
          return out
        end
        function encrypt(text, emap, dmap)
          text = remove_space(text, emap)
          local row0 = {}
          local row1 = {}
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(text)) do
              local ch = string.sub(text, (i + 1), (i + 1))
              local xy = emap[ch]
              row0 = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(row0, xy[0 + 1])
            row1 = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(row1, xy[1 + 1])
          i = (i + 1)
        end
        for _, v in ipairs(row1) do
          row0 = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(row0, v)
      end
      local res = ""
      local j = 0
      while (j < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(row0)) do
          local key = ((tostring(row0[j + 1]) .. ",") .. tostring(row0[(j + 1) + 1]))
          res = (res .. dmap[key])
          j = (j + 2)
        end
        return res
      end
      function decrypt(text, emap, dmap)
        text = remove_space(text, emap)
        local coords = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(text)) do
            local ch = string.sub(text, (i + 1), (i + 1))
            local xy = emap[ch]
            coords = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(coords, xy[0 + 1])
          coords = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(coords, xy[1 + 1])
        i = (i + 1)
      end
      local half = ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(coords) // 2)
        local k1 = {}
        local k2 = {}
        local idx = 0
        while (idx < half) do
          k1 = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(k1, coords[idx + 1])
        idx = (idx + 1)
      end
      while (idx < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(coords)) do
          k2 = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(k2, coords[idx + 1])
        idx = (idx + 1)
      end
      local res = ""
      local j = 0
      while (j < half) do
        local key = ((tostring(k1[j + 1]) .. ",") .. tostring(k2[j + 1]))
        res = (res .. dmap[key])
        j = (j + 1)
      end
      return res
    end
    function main()
      local squareRosetta = {{"A", "B", "C", "D", "E"}, {"F", "G", "H", "I", "K"}, {"L", "M", "N", "O", "P"}, {"Q", "R", "S", "T", "U"}, {"V", "W", "X", "Y", "Z"}, {"J", "1", "2", "3", "4"}}
      local squareWikipedia = {{"B", "G", "W", "K", "Z"}, {"Q", "P", "N", "D", "S"}, {"I", "O", "A", "X", "E"}, {"F", "C", "L", "U", "M"}, {"T", "H", "Y", "V", "R"}, {"J", "1", "2", "3", "4"}}
      local textRosetta = "0ATTACKATDAWN"
      local textWikipedia = "FLEEATONCE"
      local textTest = "The invasion will start on the first of January"
      local maps = square_to_maps(squareRosetta)
      local emap = maps.e
      local dmap = maps.d
      print("from Rosettacode")
      print(("original:\t " .. textRosetta))
      local s = encrypt(textRosetta, emap, dmap)
      print(("codiert:\t " .. s))
      s = decrypt(s, emap, dmap)
      print(("and back:\t " .. s))
      maps = square_to_maps(squareWikipedia)
      emap = maps.e
      dmap = maps.d
      print("from Wikipedia")
      print(("original:\t " .. textWikipedia))
      s = encrypt(textWikipedia, emap, dmap)
      print(("codiert:\t " .. s))
      s = decrypt(s, emap, dmap)
      print(("and back:\t " .. s))
      maps = square_to_maps(squareWikipedia)
      emap = maps.e
      dmap = maps.d
      print("from Rosettacode long part")
      print(("original:\t " .. textTest))
      s = encrypt(textTest, emap, dmap)
      print(("codiert:\t " .. s))
      s = decrypt(s, emap, dmap)
      print(("and back:\t " .. s))
    end
    main()
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
