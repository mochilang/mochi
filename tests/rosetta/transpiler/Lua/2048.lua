-- Generated by Mochi v0.10.37 on 2025-07-23 09:27 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
SIZE = 4;

function newBoard()
  local b = {}
  local y = 0
  while (y < SIZE) do
    local row = {}
    local x = 0
    while (x < SIZE) do
      row = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(row, 0)
    x = (x + 1)
  end
  b = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(b, row)
y = (y + 1)
end
return b
end;

function spawnTile(b)
  local empty = {}
  local y = 0
  while (y < SIZE) do
    local x = 0
    while (x < SIZE) do
      if (b[y + 1][x + 1] == 0) then
        empty = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(empty, {x, y})
    end
    x = (x + 1)
  end
  y = (y + 1)
end
if ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  else
    return #v
  end
end)(empty) == 0) then
  return {__name = "GenType1", __order = {"board", "full"}, board = b, full = true}
end
local idx = (_now() % (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  else
    return #v
  end
end)(empty))
local cell = empty[idx + 1]
local val = 4
if ((_now() % 10) < 9) then
  val = 2
end
b[cell[1 + 1] + 1][cell[0 + 1] + 1] = val
return {__name = "GenType2", __order = {"board", "full"}, board = b, full = ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  else
    return #v
  end
end)(empty) == 1)}
end;

function pad(n)
  local s = tostring(n)
  local pad = (4 - (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s))
  local i = 0
  local out = ""
  while (i < pad) do
    out = (out .. " ")
    i = (i + 1)
  end
  return (out .. s)
end;

function draw(b, score)
  print(("Score: " .. tostring(score)))
  local y = 0
  while (y < SIZE) do
    print("+----+----+----+----+")
    local line = "|"
    local x = 0
    while (x < SIZE) do
      local v = b[y + 1][x + 1]
      if (v == 0) then
        line = (line .. "    |")
      else
        line = ((line .. pad(v)) .. "|")
      end
      x = (x + 1)
    end
    print(line)
    y = (y + 1)
  end
  print("+----+----+----+----+")
  print("W=Up S=Down A=Left D=Right Q=Quit")
end;

function reverseRow(r)
  local out = {}
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(r) - 1)
  while (i >= 0) do
    out = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(out, r[i + 1])
  i = (i - 1)
end
return out
end;

function slideLeft(row)
  local xs = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(row)) do
    if (row[i + 1] ~= 0) then
      xs = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(xs, row[i + 1])
  end
  i = (i + 1)
end
local res = {}
local gain = 0
i = 0
while (i < (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  else
    return #v
  end
end)(xs)) do
  if (((i + 1) < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(xs)) and (xs[i + 1] == xs[(i + 1) + 1])) then
    local v = (xs[i + 1] * 2)
    gain = (gain .. v)
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, v)
  i = (i + 2)
else
  res = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(res, xs[i + 1])
i = (i + 1)
end
end
while ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  else
    return #v
  end
end)(res) < SIZE) do
  res = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(res, 0)
end
return {__name = "GenType3", __order = {"row", "gain"}, row = res, gain = gain}
end;

function moveLeft(b, score)
  local moved = false
  local y = 0
  while (y < SIZE) do
    local r = slideLeft(b[y + 1])
    local new = r.row
    score = (score + r.gain)
    local x = 0
    while (x < SIZE) do
      if (b[y + 1][x + 1] ~= new[x + 1]) then
        moved = true
      end
      b[y + 1][x + 1] = new[x + 1]
      x = (x + 1)
    end
    y = (y + 1)
  end
  return {__name = "GenType4", __order = {"board", "score", "moved"}, board = b, score = score, moved = moved}
end;

function moveRight(b, score)
  local moved = false
  local y = 0
  while (y < SIZE) do
    local rev = reverseRow(b[y + 1])
    local r = slideLeft(rev)
    rev = r.row
    score = (score + r.gain)
    rev = reverseRow(rev)
    local x = 0
    while (x < SIZE) do
      if (b[y + 1][x + 1] ~= rev[x + 1]) then
        moved = true
      end
      b[y + 1][x + 1] = rev[x + 1]
      x = (x + 1)
    end
    y = (y + 1)
  end
  return {__name = "GenType5", __order = {"board", "score", "moved"}, board = b, score = score, moved = moved}
end;

function getCol(b, x)
  local col = {}
  local y = 0
  while (y < SIZE) do
    col = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(col, b[y + 1][x + 1])
  y = (y + 1)
end
return col
end;

function setCol(b, x, col)
  local y = 0
  while (y < SIZE) do
    b[y + 1][x + 1] = col[y + 1]
    y = (y + 1)
  end
end;

function moveUp(b, score)
  local moved = false
  local x = 0
  while (x < SIZE) do
    local col = getCol(b, x)
    local r = slideLeft(col)
    local new = r.row
    score = (score + r.gain)
    local y = 0
    while (y < SIZE) do
      if (b[y + 1][x + 1] ~= new[y + 1]) then
        moved = true
      end
      b[y + 1][x + 1] = new[y + 1]
      y = (y + 1)
    end
    x = (x + 1)
  end
  return {__name = "GenType6", __order = {"board", "score", "moved"}, board = b, score = score, moved = moved}
end;

function moveDown(b, score)
  local moved = false
  local x = 0
  while (x < SIZE) do
    local col = reverseRow(getCol(b, x))
    local r = slideLeft(col)
    col = r.row
    score = (score + r.gain)
    col = reverseRow(col)
    local y = 0
    while (y < SIZE) do
      if (b[y + 1][x + 1] ~= col[y + 1]) then
        moved = true
      end
      b[y + 1][x + 1] = col[y + 1]
      y = (y + 1)
    end
    x = (x + 1)
  end
  return {__name = "GenType7", __order = {"board", "score", "moved"}, board = b, score = score, moved = moved}
end;

function hasMoves(b)
  local y = 0
  while (y < SIZE) do
    local x = 0
    while (x < SIZE) do
      if (b[y + 1][x + 1] == 0) then
        return true
      end
      if (((x + 1) < SIZE) and (b[y + 1][x + 1] == b[y + 1][(x + 1) + 1])) then
        return true
      end
      if (((y + 1) < SIZE) and (b[y + 1][x + 1] == b[(y + 1) + 1][x + 1])) then
        return true
      end
      x = (x + 1)
    end
    y = (y + 1)
  end
  return false
end;

function has2048(b)
  local y = 0
  while (y < SIZE) do
    local x = 0
    while (x < SIZE) do
      if (b[y + 1][x + 1] >= 2048) then
        return true
      end
      x = (x + 1)
    end
    y = (y + 1)
  end
  return false
end;

board = newBoard();

r = spawnTile(board);

board = r.board;

full = r.full;

r = spawnTile(board);

board = r.board;

full = r.full;

score = 0;

draw(board, score);

while true do
  print("Move: ")
  cmd = input()
  moved = false
  if ((cmd == "a") or (cmd == "A")) then
    m = moveLeft(board, score)
    board = m.board
    score = m.score
    moved = m.moved
  end
  if ((cmd == "d") or (cmd == "D")) then
    m = moveRight(board, score)
    board = m.board
    score = m.score
    moved = m.moved
  end
  if ((cmd == "w") or (cmd == "W")) then
    m = moveUp(board, score)
    board = m.board
    score = m.score
    moved = m.moved
  end
  if ((cmd == "s") or (cmd == "S")) then
    m = moveDown(board, score)
    board = m.board
    score = m.score
    moved = m.moved
  end
  if ((cmd == "q") or (cmd == "Q")) then
    break
  end
  if moved then
    r2 = spawnTile(board)
    board = r2.board
    full = r2.full
    if (full and (not hasMoves(board))) then
      draw(board, score)
      print("Game Over")
      break
    end
  end
  draw(board, score)
  if has2048(board) then
    print("You win!")
    break
  end
  if (not hasMoves(board)) then
    print("Game Over")
    break
  end
end;
