-- Generated by Mochi v0.10.42 on 2025-07-28 11:14 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function parseIntDigits(s)
    local n = 0
    local i = 0
    local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          local ch = string.sub(s, (i + 1), (i + 1))
          if (not (digits[ch] ~= nil)) then
            return 0
          end
          n = ((n * 10) + digits[ch])
          i = (i + 1)
        end
        return n
      end
      function parseDC(s)
        local neg = false
        if (((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s) > 0) and (string.sub(s, (0 + 1), 1) == "-")) then
              neg = true
              s = _substring(s, 1, (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(s))
                end
                local dollars = 0
                local cents = 0
                local i = 0
                local seenDot = false
                local centDigits = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s)) do
                      local ch = string.sub(s, (i + 1), (i + 1))
                      if (ch == ".") then
                        seenDot = true
                        i = (i + 1)
                        goto __cont_1
                      end
                      local d = parseIntDigits(ch)
                      if seenDot then
                        if (centDigits < 2) then
                          cents = ((cents * 10) + d)
                          centDigits = (centDigits + 1)
                        end
                      else
                        dollars = ((dollars * 10) + d)
                      end
                      i = (i + 1)
                      ::__cont_1::
                    end
                    if (centDigits == 1) then
                      cents = (cents * 10)
                    end
                    local val = ((dollars * 100) + cents)
                    if neg then
                      val = (-val)
                    end
                    return val
                  end
                  function parseRate(s)
                    local neg = false
                    if (((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(s) > 0) and (string.sub(s, (0 + 1), 1) == "-")) then
                          neg = true
                          s = _substring(s, 1, (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(s))
                            end
                            local whole = 0
                            local frac = 0
                            local digits = 0
                            local seenDot = false
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(s)) do
                                  local ch = string.sub(s, (i + 1), (i + 1))
                                  if (ch == ".") then
                                    seenDot = true
                                    i = (i + 1)
                                    goto __cont_2
                                  end
                                  local d = parseIntDigits(ch)
                                  if seenDot then
                                    if (digits < 4) then
                                      frac = ((frac * 10) + d)
                                      digits = (digits + 1)
                                    end
                                  else
                                    whole = ((whole * 10) + d)
                                  end
                                  i = (i + 1)
                                  ::__cont_2::
                                end
                                while (digits < 4) do
                                  frac = (frac * 10)
                                  digits = (digits + 1)
                                end
                                local val = ((whole * 10000) + frac)
                                if neg then
                                  val = (-val)
                                end
                                return val
                              end
                              function dcString(dc)
                                local d = (dc // 100)
                                local n = dc
                                if (n < 0) then
                                  n = (-n)
                                end
                                local c = (n % 100)
                                local cstr = tostring(c)
                                if ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(cstr) == 1) then
                                      cstr = ("0" .. cstr)
                                    end
                                    return ((tostring(d) .. ".") .. cstr)
                                  end
                                  function extend(dc, n)
                                    return (dc * n)
                                  end
                                  function tax(total, rate)
                                    return math.floor((((total * rate) + 5000) // 10000))
                                  end
                                  function padLeft(s, n)
                                    local out = s
                                    while ((function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(out) < n) do
                                          out = (" " .. out)
                                        end
                                        return out
                                      end
                                      function main()
                                        local hp = parseDC("5.50")
                                        local mp = parseDC("2.86")
                                        local rate = parseRate("0.0765")
                                        local totalBeforeTax = ((tonumber(extend(hp, 4000000000000000)) or 0) + (tonumber(extend(mp, 2)) or 0))
                                        local t = tax(totalBeforeTax, rate)
                                        local total = (totalBeforeTax + t)
                                        print(("Total before tax: " .. padLeft(dcString(totalBeforeTax), 22)))
                                        print(("             Tax: " .. padLeft(dcString(t), 22)))
                                        print(("           Total: " .. padLeft(dcString(total), 22)))
                                      end
                                      main()
                                      local _bench_end = _now()
                                      collectgarbage()
                                      local _bench_end_mem = collectgarbage('count') * 1024
                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                    end;
