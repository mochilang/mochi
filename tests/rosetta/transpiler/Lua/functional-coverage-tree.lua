-- Generated by Mochi v0.10.50 on 2025-07-30 21:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pow10(n)
    local r = 1
    local i = 0
    while (i < n) do
      r = (r * 10)
      i = (i + 1)
    end
    return r
  end
  function formatFloat(f, prec)
    local scale = pow10(prec)
    local scaled = ((f * scale) + 0.5)
    local n = math.floor(scaled)
    local digits = tostring(n)
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(digits) <= prec) do
          digits = ("0" .. digits)
        end
        local intPart = _substring(digits, 0, ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(digits) - prec))
            local fracPart = _substring(digits, ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(digits) - prec), (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(digits))
                    return ((intPart .. ".") .. fracPart)
                  end
                  function padLeft(s, w)
                    local res = ""
                    local n = (w - (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(s))
                        while (n > 0) do
                          res = (res .. " ")
                          n = (n - 1)
                        end
                        return (res .. s)
                      end
                      function _repeat(ch, n)
                        local s = ""
                        local i = 0
                        while (i < n) do
                          s = (s .. ch)
                          i = (i + 1)
                        end
                        return s
                      end
                      function toFloat(i)
                        return i
                      end
                      function newNode(name, weight, coverage)
                        return {__name = "GenType1", __order = {"name", "weight", "coverage", "children"}, name = name, weight = weight, coverage = coverage, children = {}}
                      end
                      function addChildren(n, nodes)
                        local cs = n.children
                        for _, node in ipairs(nodes) do
                          cs = (function(lst, item)
                          local res = {table.unpack(lst)}
                          table.insert(res, item)
                          return res
                        end)(cs, node)
                      end
                      n.children = cs
                    end
                    function setCoverage(n, value)
                      n.coverage = value
                    end
                    function computeCoverage(n)
                      local cs = n.children
                      if ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(cs) == 0) then
                            return n.coverage
                          end
                          local v1 = 0
                          local v2 = 0
                          for _, node in ipairs(cs) do
                            local m = node
                            local c = computeCoverage(m)
                            v1 = (v1 + (toFloat(math.floor(m.weight)) * c))
                            v2 = (v2 + math.floor(m.weight))
                          end
                          return (v1 / toFloat(v2))
                        end
                        function spaces(n)
                          return string.rep(" ", n)
                        end
                        function show(n, level)
                          local indent = (level * 4)
                          local name = n.name
                          local nl = ((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(name) + indent)
                              local line = (spaces(indent) .. name)
                              line = ((line .. spaces((32 - nl))) .. "|  ")
                              line = ((line .. padLeft(tostring(math.floor(n.weight)), 3)) .. "   | ")
                              line = ((line .. formatFloat(computeCoverage(n), 6)) .. " |")
                              print(line)
                              local cs = n.children
                              for _, child in ipairs(cs) do
                                show(child, (level + 1))
                              end
                            end
                            function main()
                              local cleaning = newNode("cleaning", 1, 0)
                              addChildren(h1_bathrooms, {h1_bathroom1, h1_bathroom2, h1_outside})
                              addChildren(h1_living_rooms, {h1_lounge, h1_dining, h1_conservatory, h1_playroom})
                              addChildren(house1, {h1_bedrooms, h1_bathrooms, h1_attic, h1_kitchen, h1_living_rooms, h1_basement, h1_garage, h1_garden})
                              addChildren(h2_bedrooms, {h2_suite1, h2_suite2, h2_bedroom3, h2_bedroom4})
                              addChildren(h2_upstairs, {h2_bedrooms, h2_bathroom, h2_toilet, h2_attics})
                              addChildren(h2_living_rooms, {h2_lounge, h2_dining, h2_conservatory, h2_playroom})
                              addChildren(h2_groundfloor, {h2_kitchen, h2_living_rooms, h2_wet_room, h2_garage, h2_garden, h2_hot_tub})
                              addChildren(h2_basement, {h2_cellars, h2_wine_cellar, h2_cinema})
                              addChildren(house2, {h2_upstairs, h2_groundfloor, h2_basement})
                              addChildren(cleaning, {house1, house2})
                              local topCoverage = computeCoverage(cleaning)
                              print(("TOP COVERAGE = " .. formatFloat(topCoverage, 6)))
                              print("")
                              print("NAME HIERARCHY                 | WEIGHT | COVERAGE |")
                              show(cleaning, 0)
                              setCoverage(h2_cinema, 1)
                              local diff = (computeCoverage(cleaning) - topCoverage)
                              print("")
                              print("If the coverage of the Cinema node were increased from 0.75 to 1")
                              print(((("the top level coverage would increase by " .. formatFloat(diff, 6)) .. " to ") .. formatFloat((topCoverage + diff), 6)))
                              setCoverage(h2_cinema, 0.75)
                            end
                            house1 = newNode("house1", 40, 0)
                            house2 = newNode("house2", 60, 0)
                            h1_bedrooms = newNode("bedrooms", 1, 0.25)
                            h1_bathrooms = newNode("bathrooms", 1, 0)
                            h1_attic = newNode("attic", 1, 0.75)
                            h1_kitchen = newNode("kitchen", 1, 0.1)
                            h1_living_rooms = newNode("living_rooms", 1, 0)
                            h1_basement = newNode("basement", 1, 0)
                            h1_garage = newNode("garage", 1, 0)
                            h1_garden = newNode("garden", 1, 0.8)
                            h2_upstairs = newNode("upstairs", 1, 0)
                            h2_groundfloor = newNode("groundfloor", 1, 0)
                            h2_basement = newNode("basement", 1, 0)
                            h1_bathroom1 = newNode("bathroom1", 1, 0.5)
                            h1_bathroom2 = newNode("bathroom2", 1, 0)
                            h1_outside = newNode("outside_lavatory", 1, 1)
                            h1_lounge = newNode("lounge", 1, 0)
                            h1_dining = newNode("dining_room", 1, 0)
                            h1_conservatory = newNode("conservatory", 1, 0)
                            h1_playroom = newNode("playroom", 1, 1)
                            h2_bedrooms = newNode("bedrooms", 1, 0)
                            h2_bathroom = newNode("bathroom", 1, 0)
                            h2_toilet = newNode("toilet", 1, 0)
                            h2_attics = newNode("attics", 1, 0.6)
                            h2_kitchen = newNode("kitchen", 1, 0)
                            h2_living_rooms = newNode("living_rooms", 1, 0)
                            h2_wet_room = newNode("wet_room_&_toilet", 1, 0)
                            h2_garage = newNode("garage", 1, 0)
                            h2_garden = newNode("garden", 1, 0.9)
                            h2_hot_tub = newNode("hot_tub_suite", 1, 1)
                            h2_cellars = newNode("cellars", 1, 1)
                            h2_wine_cellar = newNode("wine_cellar", 1, 1)
                            h2_cinema = newNode("cinema", 1, 0.75)
                            h2_suite1 = newNode("suite_1", 1, 0)
                            h2_suite2 = newNode("suite_2", 1, 0)
                            h2_bedroom3 = newNode("bedroom_3", 1, 0)
                            h2_bedroom4 = newNode("bedroom_4", 1, 0)
                            h2_lounge = newNode("lounge", 1, 0)
                            h2_dining = newNode("dining_room", 1, 0)
                            h2_conservatory = newNode("conservatory", 1, 0)
                            h2_playroom = newNode("playroom", 1, 0)
                            main()
                            local _bench_end = _now()
                            collectgarbage()
                            local _bench_end_mem = collectgarbage('count') * 1024
                            local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                          end;
