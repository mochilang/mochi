-- Generated by Mochi v0.10.42 on 2025-07-27 16:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function makeInf()
  local x = 1
  local i = 0
  while (i < 400) do
    x = (x * 10)
    i = (i + 1)
  end
  return x
end;

function makeMax()
  local x = 1
  local i = 0
  while (i < 308) do
    x = (x * 10)
    i = (i + 1)
  end
  return x
end;

function isNaN(x)
  return (x ~= x)
end;

function validateNaN(n, op)
  if isNaN(n) then
    print((op .. " -> NaN"))
  else
    print((string.gsub(string.format("!!! Expected NaN from %s  Found %s", op, n), "%s+$", "")))
  end
end;

function validateZero(n, op)
  if (n == 0) then
    print((op .. " -> 0"))
  else
    print((string.gsub(string.format("!!! Expected 0 from %s  Found %s", op, n), "%s+$", "")))
  end
end;

function validateGT(a, b, op)
  if (a > b) then
    print(op)
  else
    print((string.gsub(string.format("!!! Expected %s  Found not true.", op), "%s+$", "")))
  end
end;

function validateNE(a, b, op)
  if (a == b) then
    print((string.gsub(string.format("!!! Expected %s  Found not true.", op), "%s+$", "")))
  else
    print(op)
  end
end;

function validateEQ(a, b, op)
  if (a == b) then
    print(op)
  else
    print((string.gsub(string.format("!!! Expected %s  Found not true.", op), "%s+$", "")))
  end
end;

function main()
  local negZero = (-0)
  local posInf = makeInf()
  local negInf = (-posInf)
  local nan = (posInf / posInf)
  local maxVal = makeMax()
  print((string.gsub(string.format("%s %s %s %s", negZero, posInf, negInf, nan), "%s+$", "")))
  print((string.gsub(string.format("%s %s %s %s", negZero, posInf, negInf, nan), "%s+$", "")))
  print("")
  validateNaN((negInf + posInf), "-Inf + Inf")
  validateNaN((0 * posInf), "0 * Inf")
  validateNaN((posInf / posInf), "Inf / Inf")
  validateNaN((posInf % 1), "Inf % 1")
  validateNaN((1 + nan), "1 + NaN")
  validateZero((1 / posInf), "1 / Inf")
  validateGT(posInf, maxVal, "Inf > max value")
  validateGT((-maxVal), negInf, "-Inf < max neg value")
  validateNE(nan, nan, "NaN != NaN")
  validateEQ(negZero, 0, "-0 == 0")
end;

main();
