-- Generated by Mochi v0.10.37 on 2025-07-23 11:51 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
function fields(s)
  local words = {}
  local cur = ""
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s)) do
    local ch = string.sub(s, i + 1, (i + 1))
    if (((ch == " ") or (ch == "\n")) or (ch == "\t")) then
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(cur) > 0) then
        words = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(words, cur)
      cur = ""
    end
  else
    cur = (cur .. ch)
  end
  i = (i + 1)
end
if ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  else
    return #v
  end
end)(cur) > 0) then
  words = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(words, cur)
end
return words
end;

function padRight(s, width)
  local out = s
  local i = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s)
  while (i < width) do
    out = (out .. " ")
    i = (i + 1)
  end
  return out
end;

function join(xs, sep)
  local res = ""
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(xs)) do
    if (i > 0) then
      res = (res .. sep)
    end
    res = (res .. xs[i + 1])
    i = (i + 1)
  end
  return res
end;

function validate(commands, words, mins)
  local results = {}
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(words) == 0) then
    return results
  end
  local wi = 0
  while (wi < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(words)) do
    local w = words[wi + 1]
    local found = false
    local wlen = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(w)
    local ci = 0
    while (ci < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(commands)) do
      local cmd = commands[ci + 1]
      if (((mins[ci + 1] ~= 0) and (wlen >= mins[ci + 1])) and (wlen <= (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(cmd))) then
        local c = string.upper(cmd)
        local ww = string.upper(w)
        if (string.sub(c, 0 + 1, wlen) == ww) then
          results = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(results, c)
        found = true
        break
      end
    end
    ci = (ci + 1)
  end
  if (not found) then
    results = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(results, "*error*")
end
wi = (wi + 1)
end
return results
end;

function main()
  local _table = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " .. "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") .. "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") .. " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") .. "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") .. "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") .. "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ")
  local commands = fields(_table)
  local mins = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(commands)) do
    local count = 0
    local j = 0
    local cmd = commands[i + 1]
    while (j < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(cmd)) do
      local ch = string.sub(cmd, j + 1, (j + 1))
      if ((ch >= "A") and (ch <= "Z")) then
        count = (count + 1)
      end
      j = (j + 1)
    end
    mins = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(mins, count)
  i = (i + 1)
end
local sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
local words = fields(sentence)
local results = validate(commands, words, mins)
local out1 = "user words:  "
local k = 0
while (k < (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  else
    return #v
  end
end)(words)) do
  out1 = ((out1 .. padRight(words[k + 1], (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(results[k + 1]))) .. " ")
  k = (k + 1)
end
print(out1)
print(("full words:  " .. join(results, " ")))
end;

main();
