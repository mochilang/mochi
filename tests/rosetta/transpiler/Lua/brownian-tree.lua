-- Generated by Mochi v0.10.40 on 2025-07-25 19:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  w = 400
  h = 300
  n = 15000
  frost = 255
  grid = {}
  y = 0
  while (y < h) do
    row = {}
    x = 0
    while (x < w) do
      row = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(row, 0)
    x = (x + 1)
  end
  grid = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(grid, row)
y = (y + 1)
end
grid[(h // 3) + 1][(w // 3) + 1] = frost
function inBounds(x, y)
  return ((((x >= 0) and (x < w)) and (y >= 0)) and (y < h))
end
function hasNeighbor(x, y)
  local dy = (-1)
  while (dy <= 1) do
    local dx = (-1)
    while (dx <= 1) do
      if (not ((dx == 0) and (dy == 0))) then
        local nx = (x + dx)
        local ny = (y + dy)
        if (inBounds(nx, ny) and (grid[ny + 1][nx + 1] == frost)) then
          return true
        end
      end
      dx = (dx + 1)
    end
    dy = (dy + 1)
  end
  return false
end
a = 0
while (a < n) do
  px = (_now() % w)
  py = (_now() % h)
  if (grid[py + 1][px + 1] == frost) then
    lost = false
    while true do
      px = ((px + (_now() % 3)) - 1)
      py = ((py + (_now() % 3)) - 1)
      if (not inBounds(px, py)) then
        lost = true
        break
      end
      if (grid[py + 1][px + 1] ~= frost) then
        break
      end
    end
    if lost then
      goto __cont_1
    end
  else
    lost = false
    while (not hasNeighbor(px, py)) do
      px = ((px + (_now() % 3)) - 1)
      py = ((py + (_now() % 3)) - 1)
      if (not inBounds(px, py)) then
        lost = true
        break
      end
    end
    if lost then
      goto __cont_1
    end
  end
  grid[py + 1][px + 1] = frost
  a = (a + 1)
  ::__cont_1::
end
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
