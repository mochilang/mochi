-- Generated by Mochi v0.10.39 on 2025-07-24 19:43 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
w = 400;

h = 300;

n = 15000;

frost = 255;

grid = {};

y = 0;

while (y < h) do
  row = {}
  x = 0
  while (x < w) do
    row = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(row, 0)
  x = (x + 1)
end
grid = (function(lst, item)
local res = {table.unpack(lst)}
table.insert(res, item)
return res
end)(grid, row)
y = (y + 1)
end;

grid[(h // 3) + 1][(w // 3) + 1] = frost;

function inBounds(x, y)
  return ((((x >= 0) and (x < w)) and (y >= 0)) and (y < h))
end;

function hasNeighbor(x, y)
  local dy = (0 - 1)
  while (dy <= 1) do
    local dx = (0 - 1)
    while (dx <= 1) do
      if (not ((dx == 0) and (dy == 0))) then
        local nx = (x + dx)
        local ny = (y + dy)
        if (inBounds(nx, ny) and (grid[ny + 1][nx + 1] == frost)) then
          return true
        end
      end
      dx = (dx + 1)
    end
    dy = (dy + 1)
  end
  return false
end;

a = 0;

while (a < n) do
  px = (_now() % w)
  py = (_now() % h)
  if (grid[py + 1][px + 1] == frost) then
    lost = false
    while true do
      px = ((px + (_now() % 3)) - 1)
      py = ((py + (_now() % 3)) - 1)
      if (not inBounds(px, py)) then
        lost = true
        break
      end
      if (grid[py + 1][px + 1] ~= frost) then
        break
      end
    end
    if lost then
      goto __cont_1
    end
  else
    lost = false
    while (not hasNeighbor(px, py)) do
      px = ((px + (_now() % 3)) - 1)
      py = ((py + (_now() % 3)) - 1)
      if (not inBounds(px, py)) then
        lost = true
        break
      end
    end
    if lost then
      goto __cont_1
    end
  end
  grid[py + 1][px + 1] = frost
  a = (a + 1)
  ::__cont_1::
end;
