-- Generated by Mochi v0.10.39 on 2025-07-24 22:55 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
function primeFactors(n)
  local factors = {}
  local x = n
  while ((x % 2) == 0) do
    factors = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(factors, 2)
  x = math.floor((x // 2))
end
local p = 3
while ((p * p) <= x) do
  while ((x % p) == 0) do
    factors = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(factors, p)
  x = math.floor((x // p))
end
p = (p + 2)
end
if (x > 1) then
  factors = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(factors, x)
end
return factors
end;

function commatize(n)
  local s = tostring(n)
  local out = ""
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s) - 1)
    local c = 0
    while (i >= 0) do
      out = (string.sub(s, i + 1, (i + 1)) .. out)
      c = (c + 1)
      if (((c % 3) == 0) and (i > 0)) then
        out = ("," .. out)
      end
      i = (i - 1)
    end
    return out
  end;
  
  function indexOf(s, sub)
    local i = 0
    while ((i + (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(sub)) <= (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if (string.sub(s, i + 1, (i + (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(sub))) == sub) then
              return i
            end
            i = (i + 1)
          end
          return (-1)
        end;
        
        function pad10(s)
          local str = s
          while ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(str) < 10) do
              str = (" " .. str)
            end
            return str
          end;
          
          function trimRightStr(s)
            local _end = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s)
              while ((_end > 0) and (string.sub(s, (_end - 1) + 1, _end) == " ")) do
                _end = (_end - 1)
              end
              return string.sub(s, 0 + 1, _end)
            end;
            
            function main()
              local res = {}
              local count = 0
              local k = (11 * 11)
              while (count < 20) do
                if ((((k % 3) == 0) or ((k % 5) == 0)) or ((k % 7) == 0)) then
                  k = (k + 2)
                  goto __cont_1
                end
                local factors = primeFactors(k)
                if ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(factors) > 1) then
                    local s = tostring(k)
                    local includesAll = true
                    local prev = (-1)
                    for _, f in ipairs(factors) do
                      if (f == prev) then
                        goto __cont_2
                      end
                      local fs = tostring(f)
                      if (_indexOf(s, fs) == (-1)) then
                        includesAll = false
                        break
                      end
                      prev = f
                      ::__cont_2::
                    end
                    if includesAll then
                      res = (function(lst, item)
                      local res = {table.unpack(lst)}
                      table.insert(res, item)
                      return res
                    end)(res, k)
                    count = (count + 1)
                  end
                end
                k = (k + 2)
                ::__cont_1::
              end
              local line = ""
              for _, e in ipairs((function(lst,s,e)
              local r={}
              for i=s+1,e do
                r[#r+1]=lst[i]
              end
              return r
            end)(res, 0, 10)) do
              line = ((line .. pad10(commatize(e))) .. " ")
            end
            print(trimRightStr(line))
            line = ""
            for _, e in ipairs((function(lst,s,e)
            local r={}
            for i=s+1,e do
              r[#r+1]=lst[i]
            end
            return r
          end)(res, 10, 20)) do
            line = ((line .. pad10(commatize(e))) .. " ")
          end
          print(trimRightStr(line))
        end;
        
        main();
