-- Generated by Mochi v0.10.42 on 2025-07-28 08:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function primeFactors(n)
    local factors = {}
    local x = n
    while ((x % 2) == 0) do
      factors = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(factors, 2)
    x = math.floor((x // 2))
  end
  local p = 3
  while ((p * p) <= x) do
    while ((x % p) == 0) do
      factors = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(factors, p)
    x = math.floor((x // p))
  end
  p = (p + 2)
end
if (x > 1) then
  factors = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(factors, x)
end
return factors
end
function commatize(n)
  local s = tostring(n)
  local out = ""
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s) - 1)
      local c = 0
      while (i >= 0) do
        out = (_substring(s, i, (i + 1)) .. out)
        c = (c + 1)
        if (((c % 3) == 0) and (i > 0)) then
          out = ("," .. out)
        end
        i = (i - 1)
      end
      return out
    end
    function indexOf(s, sub)
      local i = 0
      while ((i + (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(sub)) <= (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s)) do
                if (_substring(s, i, (i + (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(sub))) == sub) then
                      return i
                    end
                    i = (i + 1)
                  end
                  return (-1)
                end
                function pad10(s)
                  local str = s
                  while ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(str) < 10) do
                        str = (" " .. str)
                      end
                      return str
                    end
                    function trimRightStr(s)
                      local _end = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(s)
                          while ((_end > 0) and (_substring(s, (_end - 1), _end) == " ")) do
                            _end = (_end - 1)
                          end
                          return _substring(s, 0, _end)
                        end
                        function main()
                          local res = {}
                          local count = 0
                          local k = (11 * 11)
                          while (count < 20) do
                            if ((((k % 3) == 0) or ((k % 5) == 0)) or ((k % 7) == 0)) then
                              k = (k + 2)
                              goto __cont_1
                            end
                            local factors = primeFactors(k)
                            if ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(factors) > 1) then
                                  local s = tostring(k)
                                  local includesAll = true
                                  local prev = (-1)
                                  for _, f in ipairs(factors) do
                                    if (f == prev) then
                                      goto __cont_2
                                    end
                                    local fs = tostring(f)
                                    if (_indexOf(s, fs) == (-1)) then
                                      includesAll = false
                                      break
                                    end
                                    prev = f
                                    ::__cont_2::
                                  end
                                  if includesAll then
                                    res = (function(lst, item)
                                    local res = {table.unpack(lst)}
                                    table.insert(res, item)
                                    return res
                                  end)(res, k)
                                  count = (count + 1)
                                end
                              end
                              k = (k + 2)
                              ::__cont_1::
                            end
                            local line = ""
                            for _, e in ipairs((function(lst,s,e)
                            local r={}
                            for i=s+1,e do
                              r[#r+1]=lst[i]
                            end
                            return r
                          end)(res, 0, 10)) do
                            line = ((line .. pad10(commatize(e))) .. " ")
                          end
                          print(trimRightStr(line))
                          line = ""
                          for _, e in ipairs((function(lst,s,e)
                          local r={}
                          for i=s+1,e do
                            r[#r+1]=lst[i]
                          end
                          return r
                        end)(res, 10, 20)) do
                          line = ((line .. pad10(commatize(e))) .. " ")
                        end
                        print(trimRightStr(line))
                      end
                      main()
                      local _bench_end = _now()
                      collectgarbage()
                      local _bench_end_mem = collectgarbage('count') * 1024
                      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                    end;
