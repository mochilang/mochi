-- Generated by Mochi v0.10.42 on 2025-07-28 00:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pixelFromRgb(c)
    local r = (math.floor((c // 65536)) % 256)
    local g = (math.floor((c // 256)) % 256)
    local b = (c % 256)
    return {R = r, G = g, B = b}
  end
  function rgbFromPixel(p)
    return ((tonumber(((tonumber((p.R * 65536)) or 0) + (tonumber((p.G * 256)) or 0))) or 0) + (tonumber(p.B) or 0))
  end
  function NewBitmap(x, y)
    local data = {}
    local row = 0
    while (row < y) do
      local r = {}
      local col = 0
      while (col < x) do
        r = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(r, {R = 0, G = 0, B = 0})
      col = (col + 1)
    end
    data = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(data, r)
  row = (row + 1)
end
return {cols = x, rows = y, px = data}
end
function FillRgb(b, c)
  local y = 0
  local p = pixelFromRgb(c)
  while (y < b.rows) do
    local x = 0
    while (x < b.cols) do
      local px = b.px
      local row = px[y + 1]
      row[x + 1] = p
      px[y + 1] = row
      b.px = px
      x = (x + 1)
    end
    y = (y + 1)
  end
end
function SetPxRgb(b, x, y, c)
  if ((((x < 0) or (x >= b.cols)) or (y < 0)) or (y >= b.rows)) then
    return false
  end
  local px = b.px
  local row = px[y + 1]
  row[x + 1] = pixelFromRgb(c)
  px[y + 1] = row
  b.px = px
  return true
end
function nextRand(seed)
  return (((seed * 1664525) + 1013904223) % 2147483648)
end
function main()
  local bm = NewBitmap(400, 300)
  FillRgb(bm, 12615744)
  local seed = _now()
  local i = 0
  while (i < 2000) do
    seed = nextRand(seed)
    local x = (seed % 400)
    seed = nextRand(seed)
    local y = (seed % 300)
    SetPxRgb(bm, x, y, 8405024)
    i = (i + 1)
  end
  local x = 0
  while (x < 400) do
    local y = 240
    while (y < 245) do
      SetPxRgb(bm, x, y, 8405024)
      y = (y + 1)
    end
    y = 260
    while (y < 265) do
      SetPxRgb(bm, x, y, 8405024)
      y = (y + 1)
    end
    x = (x + 1)
  end
  local y = 0
  while (y < 300) do
    local x = 80
    while (x < 85) do
      SetPxRgb(bm, x, y, 8405024)
      x = (x + 1)
    end
    x = 95
    while (x < 100) do
      SetPxRgb(bm, x, y, 8405024)
      x = (x + 1)
    end
    y = (y + 1)
  end
end
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
