-- Generated by Mochi v0.10.39 on 2025-07-24 14:51 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end
function pixelFromRgb(c)
  local r = (math.floor((c // 65536)) % 256)
  local g = (math.floor((c // 256)) % 256)
  local b = (c % 256)
  return {R = r, G = g, B = b}
end;

function rgbFromPixel(p)
  return (((p.R * 65536) + (p.G * 256)) + p.B)
end;

function NewBitmap(x, y)
  local data = {}
  local row = 0
  while (row < y) do
    local r = {}
    local col = 0
    while (col < x) do
      r = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(r, {R = 0, G = 0, B = 0})
    col = (col + 1)
  end
  data = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(data, r)
row = (row + 1)
end
return {cols = x, rows = y, px = data}
end;

function FillRgb(b, c)
  local y = 0
  local p = pixelFromRgb(c)
  while (y < b.rows) do
    local x = 0
    while (x < b.cols) do
      local px = b.px
      local row = px[y + 1]
      row[x + 1] = p
      px[y + 1] = row
      b.px = px
      x = (x + 1)
    end
    y = (y + 1)
  end
end;

function SetPxRgb(b, x, y, c)
  if ((((x < 0) or (x >= b.cols)) or (y < 0)) or (y >= b.rows)) then
    return false
  end
  local px = b.px
  local row = px[y + 1]
  row[x + 1] = pixelFromRgb(c)
  px[y + 1] = row
  b.px = px
  return true
end;

function nextRand(seed)
  return (((seed * 1664525) + 1013904223) % 2147483648)
end;

function main()
  local bm = NewBitmap(400, 300)
  FillRgb((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), 12615744)
  local seed = _now()
  local i = 0
  while (i < 2000) do
    seed = nextRand(seed)
    local x = (seed % 400)
    seed = nextRand(seed)
    local y = (seed % 300)
    SetPxRgb((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), x, y, 8405024)
    i = (i + 1)
  end
  local x = 0
  while (x < 400) do
    local y = 240
    while (y < 245) do
      SetPxRgb((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), x, y, 8405024)
      y = (y + 1)
    end
    y = 260
    while (y < 265) do
      SetPxRgb((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), x, y, 8405024)
      y = (y + 1)
    end
    x = (x + 1)
  end
  local y = 0
  while (y < 300) do
    local x = 80
    while (x < 85) do
      SetPxRgb((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), x, y, 8405024)
      x = (x + 1)
    end
    x = 95
    while (x < 100) do
      SetPxRgb((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), x, y, 8405024)
      x = (x + 1)
    end
    y = (y + 1)
  end
end;

main();
