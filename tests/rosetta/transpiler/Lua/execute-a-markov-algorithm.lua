-- Generated by Mochi v0.10.42 on 2025-07-27 16:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local function _split(s, sep)
local t = {}
local pattern = string.format("([^%s]+)", sep)
string.gsub(s, pattern, function(c) t[#t+1] = c end)
return t
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
function split(s, sep)
  local parts = {}
  local cur = ""
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      if ((((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(sep) > 0) and ((i + (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(sep)) <= (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s))) and (string.sub(s, i + 1, (i + (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(sep))) == sep)) then
                parts = (function(lst, item)
                local res = {table.unpack(lst)}
                table.insert(res, item)
                return res
              end)(parts, cur)
              cur = ""
              i = (i + (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(sep))
              else
                cur = (cur .. string.sub(s, i + 1, (i + 1)))
                i = (i + 1)
              end
            end
            parts = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(parts, cur)
          return parts
        end;
        
        function trimSpace(s)
          local start = 0
          while ((start < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)) and ((string.sub(s, (start + 1), (start + 1)) == " ") or (string.sub(s, (start + 1), (start + 1)) == "\t"))) do
              start = (start + 1)
            end
            local _end = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s)
              while ((_end > start) and ((string.sub(s, ((_end - 1) + 1), _end) == " ") or (string.sub(s, ((_end - 1) + 1), _end) == "\t"))) do
                _end = (_end - 1)
              end
              return string.sub(s, (start + 1), _end)
            end;
            
            function indexOfSub(s, sub)
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(sub) == 0) then
                  return 0
                end
                local i = 0
                while ((i + (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(sub)) <= (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s)) do
                      if (string.sub(s, i + 1, (i + (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' or type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(sub))) == sub) then
                          return i
                        end
                        i = (i + 1)
                      end
                      return (0 - 1)
                    end;
                    
                    function parseRules(rs)
                      local rules = {}
                      for _, line in ipairs(_split(rs, "\n")) do
                        local ln = line
                        local hash = indexOfSub(ln, "#")
                        if (hash >= 0) then
                          ln = string.sub(ln, 1, hash)
                        end
                        ln = trimSpace(ln)
                        if ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' or type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(ln) == 0) then
                            goto __cont_1
                          end
                          local arrow = (0 - 1)
                          local j = 0
                          while ((j + 2) <= (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' or type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(ln)) do
                              if (string.sub(ln, j + 1, (j + 2)) == "->") then
                                local pre = ((j > 0) and ((string.sub(ln, ((j - 1) + 1), j) == " ") or (string.sub(ln, ((j - 1) + 1), j) == "\t")))
                                local post = (((j + 2) < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' or type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(ln)) and ((string.sub(ln, ((j + 2) + 1), (j + 3)) == " ") or (string.sub(ln, ((j + 2) + 1), (j + 3)) == "\t")))
                                  if (pre and post) then
                                    arrow = j
                                    break
                                  end
                                end
                                j = (j + 1)
                              end
                              if (arrow < 0) then
                                arrow = indexOfSub(ln, "->")
                              end
                              if (arrow < 0) then
                                return {__name = "GenType1", __order = {"ok"}, ok = false}
                              end
                              local pat = trimSpace(string.sub(ln, 1, arrow))
                              local rest = trimSpace(string.sub(ln, ((arrow + 2) + 1), (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' or type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(ln)))
                                local term = false
                                if (((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' or type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(rest) > 0) and (string.sub(rest, (0 + 1), 1) == ".")) then
                                    term = true
                                    rest = string.sub(rest, (1 + 1), (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' or type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(rest))
                                    end
                                    local rep = rest
                                    rules = (function(lst, item)
                                    local res = {table.unpack(lst)}
                                    table.insert(res, item)
                                    return res
                                  end)(rules, {__name = "GenType2", __order = {"pat", "rep", "term"}, pat = pat, rep = rep, term = term})
                                  ::__cont_1::
                                end
                                return {__name = "GenType3", __order = {"ok", "rules"}, ok = true, rules = rules}
                              end;
                              
                              function runRules(rules, s)
                                local changed = true
                                while changed do
                                  changed = false
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' or type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(rules)) do
                                      local r = rules[i + 1]
                                      local pat = r.pat
                                      local rep = r.rep
                                      local term = r.term
                                      local idx = indexOfSub(s, pat)
                                      if (idx >= 0) then
                                        s = ((string.sub(s, 1, idx) .. tostring(rep)) .. string.sub(s, ((idx + (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' or type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(pat)) + 1), #s))
                                          changed = true
                                          if term then
                                            return s
                                          end
                                          break
                                        end
                                        i = (i + 1)
                                      end
                                    end
                                    return s
                                  end;
                                  
                                  function interpret(ruleset, input)
                                    local p = parseRules(ruleset)
                                    if (not p.ok) then
                                      return {__name = "GenType4", __order = {"ok", "out"}, ok = false, out = ""}
                                    end
                                    local out = runRules(p.rules, input)
                                    return {__name = "GenType5", __order = {"ok", "out"}, ok = true, out = out}
                                  end;
                                  
                                  testSet = {{__name = "GenType6", __order = {"ruleSet", "sample", "output"}, ruleSet = "# This rules file is extracted from Wikipedia:\n# http://en.wikipedia.org/wiki/Markov_Algorithm\nA -> apple\nB -> bag\nS -> shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n", sample = "I bought a B of As from T S.", output = "I bought a bag of apples from my brother."}, {__name = "GenType6", __order = {"ruleSet", "sample", "output"}, ruleSet = "# Slightly modified from the rules on Wikipedia\nA -> apple\nB -> bag\nS -> .shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n", sample = "I bought a B of As from T S.", output = "I bought a bag of apples from T shop."}, {__name = "GenType6", __order = {"ruleSet", "sample", "output"}, ruleSet = "# BNF Syntax testing rules\nA -> apple\nWWWW -> with\nBgage -> ->.*\nB -> bag\n->.* -> money\nW -> WW\nS -> .shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n", sample = "I bought a B of As W my Bgage from T S.", output = "I bought a bag of apples with my money from T shop."}, {__name = "GenType6", __order = {"ruleSet", "sample", "output"}, ruleSet = "### Unary Multiplication Engine, for testing Markov Algorithm implementations\n### By Donal Fellows.\n# Unary addition engine\n_+1 -> _1+\n1+1 -> 11+\n# Pass for converting from the splitting of multiplication into ordinary\n# addition\n1! -> !1\n,! -> !+\n_! -> _\n# Unary multiplication by duplicating left side, right side times\n1*1 -> x,@y\n1x -> xX\nX, -> 1,1\nX1 -> 1X\n_x -> _X\n,x -> ,X\ny1 -> 1y\ny_ -> _\n# Next phase of applying\n1@1 -> x,@y\n1@_ -> @_\n,@_ -> !_\n++ -> +\n# Termination cleanup for addition\n_1 -> 1\n1+_ -> 1\n_+_ ->\n", sample = "_1111*11111_", output = "11111111111111111111"}, {__name = "GenType6", __order = {"ruleSet", "sample", "output"}, ruleSet = "# Turing machine: three-state busy beaver\n#\n# state A, symbol 0 => write 1, move right, new state B\nA0 -> 1B\n# state A, symbol 1 => write 1, move left, new state C\n0A1 -> C01\n1A1 -> C11\n# state B, symbol 0 => write 1, move left, new state A\n0B0 -> A01\n1B0 -> A11\n# state B, symbol 1 => write 1, move right, new state B\nB1 -> 1B\n# state C, symbol 0 => write 1, move left, new state B\n0C0 -> B01\n1C0 -> B11\n# state C, symbol 1 => write 1, move left, halt\n0C1 -> H01\n1C1 -> H11\n", sample = "000000A000000", output = "00011H1111000"}};
                                  
                                  function main()
                                    print((("validating " .. tostring((function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' or type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(testSet))) .. " test cases"))
                                      local failures = false
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' or type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(testSet)) do
                                          local tc = testSet[i + 1]
                                          local res = interpret(tc.ruleSet, tc.sample)
                                          if (not res.ok) then
                                            print((("test " .. tostring((i + 1))) .. " invalid ruleset"))
                                            failures = true
                                          else
                                            if (res.out ~= tc.output) then
                                              print(((((("test " .. tostring((i + 1))) .. ": got ") .. tostring(res.out)) .. ", want ") .. tc.output))
                                              failures = true
                                            end
                                          end
                                          i = (i + 1)
                                        end
                                        if (not failures) then
                                          print("no failures")
                                        end
                                      end;
                                      
                                      main();
