-- Generated by Mochi v0.10.39 on 2025-07-24 20:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

start = {3, 6, 6, 2, 4, 0, 2, 5, 1, 3, 6, 1};

months = {" January ", " February", "  March  ", "  April  ", "   May   ", "   June  ", "   July  ", "  August ", "September", " October ", " November", " December"};

days = {"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"};

print("                                [SNOOPY]\n");

print("                                  1969\n");

qtr = 0;

while (qtr < 4) do
  mi = 0
  while (mi < 3) do
    print((string.gsub(string.format("%s %d", (("      " .. months[((qtr * 3) + mi) + 1]) .. "           "), ((false) and (1) or (0))), "%s+$", "")))
    mi = (mi + 1)
  end
  print("")
  mi = 0
  while (mi < 3) do
    d = 0
    while (d < 7) do
      print((string.gsub(string.format("%s %d", (" " .. days[d + 1]), ((false) and (1) or (0))), "%s+$", "")))
      d = (d + 1)
    end
    print((string.gsub(string.format("      %d", ((false) and (1) or (0))), "%s+$", "")))
    mi = (mi + 1)
  end
  print("")
  week = 0
  while (week < 6) do
    mi = 0
    while (mi < 3) do
      day = 0
      while (day < 7) do
        m = ((qtr * 3) + mi)
        val = ((((week * 7) + day) - start[m + 1]) + 1)
        if ((val >= 1) and (val <= daysInMonth[m + 1])) then
          s = tostring(val)
          if ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s) == 1) then
              s = (" " .. s)
            end
            print((string.gsub(string.format("%s %d", (" " .. s), ((false) and (1) or (0))), "%s+$", "")))
          else
            print((string.gsub(string.format("    %d", ((false) and (1) or (0))), "%s+$", "")))
          end
          day = (day + 1)
        end
        print((string.gsub(string.format("      %d", ((false) and (1) or (0))), "%s+$", "")))
        mi = (mi + 1)
      end
      print("")
      week = (week + 1)
    end
    print("")
    qtr = (qtr + 1)
  end;
