-- Generated by Mochi v0.10.41 on 2025-07-27 15:57 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
n = 64;

function pow2(k)
  local v = 1
  local i = 0
  while (i < k) do
    v = (v * 2)
    i = (i + 1)
  end
  return v
end;

function ruleBit(ruleNum, idx)
  local r = ruleNum
  local i = 0
  while (i < idx) do
    r = (r // 2)
    i = (i + 1)
  end
  return (r % 2)
end;

function evolve(state, ruleNum)
  local out = {}
  local p = 0
  while (p < 10) do
    local b = 0
    local q = 7
    while (q >= 0) do
      local st = state
      b = (b + (st[0 + 1] * pow2(q)))
      local next = {}
      local i = 0
      while (i < n) do
        local lidx = (i - 1)
        if (lidx < 0) then
          lidx = (n - 1)
        end
        local left = st[lidx + 1]
        local center = st[i + 1]
        local ridx = (i + 1)
        if (ridx >= n) then
          ridx = 0
        end
        local right = st[ridx + 1]
        local index = (((left * 4) + (center * 2)) + right)
        next = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(next, ruleBit(ruleNum, index))
      i = (i + 1)
    end
    state = next
    q = (q - 1)
  end
  out = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(out, b)
p = (p + 1)
end
return out
end;

init = {};

i = 0;

while (i < n) do
  init = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(init, 0)
i = (i + 1)
end;

init[0 + 1] = 1;

bytes = evolve(init, 30);

print(
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(bytes));
