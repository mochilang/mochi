-- Generated by Mochi v0.10.40 on 2025-07-25 17:45 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function trimLeftZeros(s)
    local i = 0
    while ((i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) and (string.sub(s, i + 1, (i + 1)) == "0")) do
        i = (i + 1)
      end
      return string.sub(s, i + 1, (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s))
      end
      function btString(s)
        s = trimLeftZeros(s)
        local b = {}
        local i = ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s) - 1)
          while (i >= 0) do
            local ch = string.sub(s, i + 1, (i + 1))
            if (ch == "+") then
              b = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(b, 1)
          else
            if (ch == "0") then
              b = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(b, 0)
          else
            if (ch == "-") then
              b = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(b, (0 - 1))
          else
            return {__name = "GenType1", __order = {"bt", "ok"}, bt = {}, ok = false}
          end
        end
      end
      i = (i - 1)
    end
    return {__name = "GenType2", __order = {"bt", "ok"}, bt = b, ok = true}
  end
  function btToString(b)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(b) == 0) then
        return "0"
      end
      local r = ""
      local i = ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(b) - 1)
        while (i >= 0) do
          local d = b[i + 1]
          if (d == (0 - 1)) then
            r = (r .. "-")
          else
            if (d == 0) then
              r = (r .. "0")
            else
              r = (r .. "+")
            end
          end
          i = (i - 1)
        end
        return r
      end
      function btInt(i)
        if (i == 0) then
          return {}
        end
        local n = i
        local b = {}
        while (n ~= 0) do
          local m = (n % 3)
          n = math.floor((n // 3))
          if (m == 2) then
            m = (0 - 1)
            n = (n + 1)
          else
            if (m == (0 - 2)) then
              m = 1
              n = (n - 1)
            end
          end
          b = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(b, m)
      end
      return b
    end
    function btToInt(b)
      local r = 0
      local pt = 1
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(b)) do
          r = (r + (b[i + 1] * pt))
          pt = (pt * 3)
          i = (i + 1)
        end
        return r
      end
      function btNeg(b)
        local r = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(b)) do
            r = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(r, (-b[i + 1]))
          i = (i + 1)
        end
        return r
      end
      function btAdd(a, b)
        return btInt(((tonumber(btToInt(a)) or 0) + (tonumber(btToInt(b)) or 0)))
      end
      function btMul(a, b)
        return btInt((btToInt(a) * btToInt(b)))
      end
      function padLeft(s, w)
        local r = s
        while ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(r) < w) do
            r = (" " .. r)
          end
          return r
        end
        function show(label, b)
          local l = padLeft(label, 7)
          local bs = padLeft(btToString(b), 12)
          local is = padLeft(tostring(btToInt(b)), 7)
          print(((((l .. " ") .. bs) .. " ") .. is))
        end
        function main()
          local ares = btString("+-0++0+")
          local a = ares.bt
          local b = btInt((-436))
          local cres = btString("+-++-")
          local c = cres.bt
          show("a:", a)
          show("b:", b)
          show("c:", c)
          show("a(b-c):", btMul(a, btAdd(b, btNeg(c))))
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
