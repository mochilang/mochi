-- Generated by Mochi v0.10.40 on 2025-07-25 17:45 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function isPrime(n)
    if (n < 2) then
      return false
    end
    if ((n % 2) == 0) then
      return (n == 2)
    end
    if ((n % 3) == 0) then
      return (n == 3)
    end
    local d = 5
    while ((d * d) <= n) do
      if ((n % d) == 0) then
        return false
      end
      d = (d + 2)
      if ((n % d) == 0) then
        return false
      end
      d = (d + 4)
    end
    return true
  end
  function countPrimeFactors(n)
    if (n == 1) then
      return 0
    end
    if isPrime(n) then
      return 1
    end
    local count = 0
    local f = 2
    while true do
      if ((n % f) == 0) then
        count = (count + 1)
        n = (n // f)
        if (n == 1) then
          return count
        end
        if isPrime(n) then
          f = n
        end
      else
        if (f >= 3) then
          f = (f + 2)
        else
          f = 3
        end
      end
    end
    return count
  end
  function pad4(n)
    local s = tostring(n)
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s) < 4) do
        s = (" " .. s)
      end
      return s
    end
    function main()
      local max = 120
      print((("The attractive numbers up to and including " .. tostring(max)) .. " are:"))
      local count = 0
      local line = ""
      local lineCount = 0
      local i = 1
      while (i <= max) do
        local c = countPrimeFactors(i)
        if isPrime(c) then
          line = (line .. pad4(i))
          count = (count + 1)
          lineCount = (lineCount + 1)
          if (lineCount == 20) then
            print(line)
            line = ""
            lineCount = 0
          end
        end
        i = (i + 1)
      end
      if (lineCount > 0) then
        print(line)
      end
    end
    main()
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
