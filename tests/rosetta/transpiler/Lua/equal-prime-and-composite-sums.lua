-- Generated by Mochi v0.10.42 on 2025-07-27 16:28 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function commatize(n)
    local s = tostring(n)
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s) - 3)
      while (i >= 1) do
        s = ((string.sub(s, (0 + 1), i) .. ",") .. string.sub(s, (i + 1), (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s)))
          i = (i - 3)
        end
        return s
      end
      function primeSieve(n)
        local sieve = {}
        local i = 0
        while (i <= n) do
          sieve = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(sieve, false)
        i = (i + 1)
      end
      sieve[0 + 1] = true
      sieve[1 + 1] = true
      local p = 2
      while ((p * p) <= n) do
        if (not sieve[p + 1]) then
          local m = (p * p)
          while (m <= n) do
            sieve[m + 1] = true
            m = (m + p)
          end
        end
        p = (p + 1)
      end
      return sieve
    end
    function search(xs, target)
      local low = 0
      local high = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)
        while (low < high) do
          local mid = ((low + high) // 2)
          if (xs[mid + 1] < target) then
            low = (mid + 1)
          else
            high = mid
          end
        end
        return low
      end
      function main()
        local limit = 45000
        local compMap = primeSieve(limit)
        local compSums = {}
        local primeSums = {}
        local csum = 0
        local psum = 0
        local i = 2
        while (i <= limit) do
          if compMap[i] then
            csum = (csum + i)
            compSums = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(compSums, csum)
        else
          psum = (psum + i)
          primeSums = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(primeSums, psum)
      end
      i = (i + 1)
    end
    print("Sum        | Prime Index | Composite Index")
    print("------------------------------------------")
    local idx = 0
    while (idx < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(primeSums)) do
        local s = primeSums[idx + 1]
        local j = search(compSums, s)
        if ((j < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(compSums)) and (compSums[j + 1] == s)) then
            local sumStr = _padStart(tostring(commatize(s)), 10, " ")
            local piStr = _padStart(tostring(commatize((idx + 1))), 11, " ")
            local ciStr = _padStart(tostring(commatize((j + 1))), 15, " ")
            print(((((tostring(sumStr) .. " | ") .. tostring(piStr)) .. " | ") .. tostring(ciStr)))
          end
          idx = (idx + 1)
        end
      end
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
