-- Generated by Mochi v0.10.40 on 2025-07-25 17:45 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function qsel(a, k)
    local arr = a
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(arr) > 1) do
        local px = (_now() % (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(arr))
          local pv = arr[px + 1]
          local last = ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(arr) - 1)
            local tmp = arr[px + 1]
            arr[px + 1] = arr[last + 1]
            arr[last + 1] = tmp
            px = 0
            local i = 0
            while (i < last) do
              local v = arr[i + 1]
              if (v < pv) then
                local tmp2 = arr[px + 1]
                arr[px + 1] = arr[i + 1]
                arr[i + 1] = tmp2
                px = (px + 1)
              end
              i = (i + 1)
            end
            if (px == k) then
              return pv
            end
            if (k < px) then
              arr = (function(lst,s,e)
              local r={}
              for i=s+1,e do
                r[#r+1]=lst[i]
              end
              return r
            end)(arr, 0, px)
          else
            local tmp2 = arr[px + 1]
            arr[px + 1] = pv
            arr[last + 1] = tmp2
            arr = (function(lst,s,e)
            local r={}
            for i=s+1,e do
              r[#r+1]=lst[i]
            end
            return r
          end)(arr, (px + 1), #arr)
          k = (k - (px + 1))
        end
      end
      return arr[0 + 1]
    end
    function median(list)
      local arr = list
      local half = math.floor(((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(arr) // 2))
        local med = qsel(arr, half)
        if (((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(arr) % 2) == 0) then
            return ((med + qsel(arr, (half - 1))) / 2)
          end
          return med
        end
        print(tostring(median({3, 1, 4, 1})))
        print(tostring(median({3, 1, 4, 1, 5})))
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
