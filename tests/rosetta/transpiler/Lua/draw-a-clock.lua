-- Generated by Mochi v0.10.41 on 2025-07-26 20:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pow2(exp)
    local r = 1
    local i = 0
    while (i < exp) do
      r = (r * 2)
      i = (i + 1)
    end
    return r
  end
  function bin(n, digits)
    local s = ""
    local i = (digits - 1)
    while (i >= 0) do
      local p = pow2(i)
      if (n >= p) then
        s = (s .. "x")
        n = (n - p)
      else
        s = (s .. " ")
      end
      if (i > 0) then
        s = (s .. "|")
      end
      i = (i - 1)
    end
    return s
  end
  t = (_now() // 1000000000)
  sec = (t % 60)
  mins = (t // 60)
  min = (mins % 60)
  hour = ((mins // 60) % 24)
  print(bin(hour, 8))
  print("")
  print(bin(min, 8))
  print("")
  xs = ""
  i = 0
  while (i < sec) do
    xs = (xs .. "x")
    i = (i + 1)
  end
  out = ""
  j = 0
  while (j < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(xs)) do
      out = (out .. string.sub(xs, j + 1, (j + 1)))
      if ((((j + 1) % 5) == 0) and ((j + 1) < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs))) then
          out = (out .. "|")
        end
        j = (j + 1)
      end
      print(out)
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
