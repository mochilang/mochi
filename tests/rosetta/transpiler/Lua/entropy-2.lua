-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function log2(x)
    local k = 0
    local v = x
    while (v >= 2) do
      v = (v / 2)
      k = (k + 1)
    end
    while (v < 1) do
      v = (v * 2)
      k = (k - 1)
    end
    local z = ((v - 1) / (v + 1))
    local zpow = z
    local sum = z
    local i = 3
    while (i <= 9) do
      zpow = ((zpow * z) * z)
      sum = (sum + (zpow / i))
      i = (i + 2)
    end
    local ln2 = 0.6931471805599453
    return (k + ((2 * sum) / ln2))
  end
  function main()
    local s = "1223334444"
    local counts = {}
    local l = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          local ch = _substring(s, i, (i + 1))
          if (counts[ch] ~= nil) then
            counts[ch] = (counts[ch] + 1)
          else
            counts[ch] = 1
          end
          l = (l + 1)
          i = (i + 1)
        end
        local hm = 0
        for ch in pairs(counts) do
          local c = counts[ch]
          hm = (hm + (c * log2(c)))
        end
        print(tostring((log2(l) - (hm / l))))
      end
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
