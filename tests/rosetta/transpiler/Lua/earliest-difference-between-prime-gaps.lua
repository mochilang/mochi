-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function commatize(n)
    local s = tostring(n)
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - 3)
        while (i > 0) do
          s = ((string.sub(s, (0 + 1), i) .. ",") .. string.sub(s, (i + 1), (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s)))
              i = (i - 3)
            end
            return s
          end
          function main()
            local data = {{__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 10, g1 = 4, s1 = 7, g2 = 6, s2 = 23, d = 16}, {__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 100, g1 = 14, s1 = 113, g2 = 16, s2 = 1831, d = 1718}, {__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 1000, g1 = 14, s1 = 113, g2 = 16, s2 = 1831, d = 1718}, {__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 10000, g1 = 36, s1 = 9551, g2 = 38, s2 = 30593, d = 21042}, {__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 100000, g1 = 70, s1 = 173359, g2 = 72, s2 = 31397, d = 141962}, {__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 1000000, g1 = 100, s1 = 396733, g2 = 102, s2 = 1444309, d = 1047576}, {__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 10000000, g1 = 148, s1 = 2010733, g2 = 150, s2 = 13626257, d = 11615524}, {__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 100000000, g1 = 198, s1 = 46006769, g2 = 200, s2 = 378043979, d = 332037210}, {__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 1000000000, g1 = 276, s1 = 649580171, g2 = 278, s2 = 4260928601, d = 3611348430}, {__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 10000000000, g1 = 332, s1 = 5893180121, g2 = 334, s2 = 30827138509, d = 24933958388}, {__name = "GenType1", __order = {"pm", "g1", "s1", "g2", "s2", "d"}, pm = 100000000000, g1 = 386, s1 = 35238645587, g2 = 388, s2 = 156798792223, d = 121560146636}}
            for _, entry in ipairs(data) do
              local pm = commatize(entry.pm)
              local line1 = (("Earliest difference > " .. tostring(pm)) .. " between adjacent prime gap starting primes:")
              print(line1)
              local line2 = (((((((((("Gap " .. tostring(entry.g1)) .. " starts at ") .. commatize(entry.s1)) .. ", gap ") .. tostring(entry.g2)) .. " starts at ") .. commatize(entry.s2)) .. ", difference is ") .. commatize(entry.d)) .. ".")
              print(line2)
              print("")
            end
          end
          main()
          local _bench_end = _now()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
