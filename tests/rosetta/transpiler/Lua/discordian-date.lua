-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function isLeap(y)
    if ((y % 400) == 0) then
      return true
    end
    if ((y % 100) == 0) then
      return false
    end
    return ((y % 4) == 0)
  end
  function dayOfYear(y, m, d)
    local doy = (daysBefore[(m - 1) + 1] + d)
    if ((m > 2) and isLeap(y)) then
      doy = (doy + 1)
    end
    return doy
  end
  function ordinal(n)
    local suff = "th"
    local mod100 = (n % 100)
    if ((mod100 < 11) or (mod100 > 13)) then
      local r = (n % 10)
      if (r == 1) then
        suff = "st"
      else
        if (r == 2) then
          suff = "nd"
        else
          if (r == 3) then
            suff = "rd"
          end
        end
      end
    end
    return (tostring(n) .. suff)
  end
  function discordian(y, m, d)
    if ((isLeap(y) and (m == 2)) and (d == 29)) then
      return ("St. Tib's Day, YOLD " .. tostring((y + 1166)))
    end
    local doy = dayOfYear(y, m, d)
    if (isLeap(y) and (doy > 60)) then
      doy = (doy - 1)
    end
    local idx = (doy - 1)
    local season = (idx // 73)
    local day = (idx % 73)
    local res = ((((((dayNames[(idx % 5) + 1] .. ", the ") .. ordinal((day + 1))) .. " day of ") .. seasons[season + 1]) .. " in the YOLD ") .. tostring((y + 1166)))
    if (day == 4) then
      res = (((res .. ". Celebrate ") .. holydays[season + 1][0 + 1]) .. "!")
    end
    if (day == 49) then
      res = (((res .. ". Celebrate ") .. holydays[season + 1][1 + 1]) .. "!")
    end
    return res
  end
  function main()
    local dates = {{2010, 7, 22}, {2012, 2, 28}, {2012, 2, 29}, {2012, 3, 1}, {2012, 12, 31}, {2013, 1, 1}, {2100, 12, 31}, {2015, 10, 19}, {2010, 1, 5}, {2011, 5, 3}, {2000, 3, 13}}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(dates)) do
          local dt = dates[i + 1]
          print(discordian(dt[0 + 1], dt[1 + 1], dt[2 + 1]))
          i = (i + 1)
        end
      end
      dayNames = {"Sweetmorn", "Boomtime", "Pungenday", "Prickle-Prickle", "Setting Orange"}
      seasons = {"Chaos", "Discord", "Confusion", "Bureaucracy", "The Aftermath"}
      holydays = {{"Mungday", "Chaoflux"}, {"Mojoday", "Discoflux"}, {"Syaday", "Confuflux"}, {"Zaraday", "Bureflux"}, {"Maladay", "Afflux"}}
      daysBefore = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334}
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
