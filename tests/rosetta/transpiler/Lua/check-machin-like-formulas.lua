-- Generated by Mochi v0.10.39 on 2025-07-24 22:55 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function br(n, d)
  return _div(_bigrat(n), _bigrat(_bigrat(d)))
end;

testCases = {{{__name = "GenType1", __order = {"a", "n", "d"}, a = 1, n = 1, d = 2}, {__name = "GenType1", __order = {"a", "n", "d"}, a = 1, n = 1, d = 3}}, {{__name = "GenType2", __order = {"a", "n", "d"}, a = 2, n = 1, d = 3}, {__name = "GenType2", __order = {"a", "n", "d"}, a = 1, n = 1, d = 7}}, {{__name = "GenType3", __order = {"a", "n", "d"}, a = 4, n = 1, d = 5}, {__name = "GenType3", __order = {"a", "n", "d"}, a = (-1), n = 1, d = 239}}, {{__name = "GenType4", __order = {"a", "n", "d"}, a = 5, n = 1, d = 7}, {__name = "GenType4", __order = {"a", "n", "d"}, a = 2, n = 3, d = 79}}, {{__name = "GenType5", __order = {"a", "n", "d"}, a = 1, n = 1, d = 2}, {__name = "GenType5", __order = {"a", "n", "d"}, a = 1, n = 1, d = 5}, {__name = "GenType5", __order = {"a", "n", "d"}, a = 1, n = 1, d = 8}}, {{__name = "GenType6", __order = {"a", "n", "d"}, a = 4, n = 1, d = 5}, {__name = "GenType6", __order = {"a", "n", "d"}, a = (-1), n = 1, d = 70}, {__name = "GenType6", __order = {"a", "n", "d"}, a = 1, n = 1, d = 99}}, {{__name = "GenType7", __order = {"a", "n", "d"}, a = 5, n = 1, d = 7}, {__name = "GenType7", __order = {"a", "n", "d"}, a = 4, n = 1, d = 53}, {__name = "GenType7", __order = {"a", "n", "d"}, a = 2, n = 1, d = 4443}}, {{__name = "GenType8", __order = {"a", "n", "d"}, a = 6, n = 1, d = 8}, {__name = "GenType8", __order = {"a", "n", "d"}, a = 2, n = 1, d = 57}, {__name = "GenType8", __order = {"a", "n", "d"}, a = 1, n = 1, d = 239}}, {{__name = "GenType9", __order = {"a", "n", "d"}, a = 8, n = 1, d = 10}, {__name = "GenType9", __order = {"a", "n", "d"}, a = (-1), n = 1, d = 239}, {__name = "GenType9", __order = {"a", "n", "d"}, a = (-4), n = 1, d = 515}}, {{__name = "GenType10", __order = {"a", "n", "d"}, a = 12, n = 1, d = 18}, {__name = "GenType10", __order = {"a", "n", "d"}, a = 8, n = 1, d = 57}, {__name = "GenType10", __order = {"a", "n", "d"}, a = (-5), n = 1, d = 239}}, {{__name = "GenType11", __order = {"a", "n", "d"}, a = 16, n = 1, d = 21}, {__name = "GenType11", __order = {"a", "n", "d"}, a = 3, n = 1, d = 239}, {__name = "GenType11", __order = {"a", "n", "d"}, a = 4, n = 3, d = 1042}}, {{__name = "GenType12", __order = {"a", "n", "d"}, a = 22, n = 1, d = 28}, {__name = "GenType12", __order = {"a", "n", "d"}, a = 2, n = 1, d = 443}, {__name = "GenType12", __order = {"a", "n", "d"}, a = (-5), n = 1, d = 1393}, {__name = "GenType12", __order = {"a", "n", "d"}, a = (-10), n = 1, d = 11018}}, {{__name = "GenType13", __order = {"a", "n", "d"}, a = 22, n = 1, d = 38}, {__name = "GenType13", __order = {"a", "n", "d"}, a = 17, n = 7, d = 601}, {__name = "GenType13", __order = {"a", "n", "d"}, a = 10, n = 7, d = 8149}}, {{__name = "GenType14", __order = {"a", "n", "d"}, a = 44, n = 1, d = 57}, {__name = "GenType14", __order = {"a", "n", "d"}, a = 7, n = 1, d = 239}, {__name = "GenType14", __order = {"a", "n", "d"}, a = (-12), n = 1, d = 682}, {__name = "GenType14", __order = {"a", "n", "d"}, a = 24, n = 1, d = 12943}}, {{__name = "GenType15", __order = {"a", "n", "d"}, a = 88, n = 1, d = 172}, {__name = "GenType15", __order = {"a", "n", "d"}, a = 51, n = 1, d = 239}, {__name = "GenType15", __order = {"a", "n", "d"}, a = 32, n = 1, d = 682}, {__name = "GenType15", __order = {"a", "n", "d"}, a = 44, n = 1, d = 5357}, {__name = "GenType15", __order = {"a", "n", "d"}, a = 68, n = 1, d = 12943}}, {{__name = "GenType16", __order = {"a", "n", "d"}, a = 88, n = 1, d = 172}, {__name = "GenType16", __order = {"a", "n", "d"}, a = 51, n = 1, d = 239}, {__name = "GenType16", __order = {"a", "n", "d"}, a = 32, n = 1, d = 682}, {__name = "GenType16", __order = {"a", "n", "d"}, a = 44, n = 1, d = 5357}, {__name = "GenType16", __order = {"a", "n", "d"}, a = 68, n = 1, d = 12944}}};

function format(ts)
  local s = "["
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(ts)) do
      local t = ts[i + 1]
      s = (((((((s .. "{") .. tostring(t.a)) .. " ") .. tostring(t.n)) .. " ") .. tostring(t.d)) .. "}")
      if (i < ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(ts) - 1)) then
          s = (s .. " ")
        end
        i = (i + 1)
      end
      return (s .. "]")
    end;
    
    function tanEval(coef, f)
      if (coef == 1) then
        return f
      end
      if (coef < 0) then
        return _sub(_bigrat(0), _bigrat(tanEval((-coef), f)))
      end
      local ca = (coef // 2)
      local cb = (coef - ca)
      local a = tanEval(ca, f)
      local b = tanEval(cb, f)
      return _div(_bigrat(_add(a, b)), _bigrat(_sub(_bigrat(1), _mul(a, b))))
    end;
    
    function tans(m)
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(m) == 1) then
          local t = m[0 + 1]
          return tanEval(t.a, br(t.n, t.d))
        end
        local half = ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(m) // 2)
          local a = tans((function(lst,s,e)
          local r={}
          for i=s+1,e do
            r[#r+1]=lst[i]
          end
          return r
        end)(m, 0, half))
        local b = tans((function(lst,s,e)
        local r={}
        for i=s+1,e do
          r[#r+1]=lst[i]
        end
        return r
      end)(m, half, #m))
      return _div(_bigrat(_add(a, b)), _bigrat(_sub(_bigrat(1), _mul(a, b))))
    end;
    
    for _, ts in ipairs(testCases) do
      print(((("tan " .. format(ts)) .. " = ") .. tostring(tans(ts))))
    end;
