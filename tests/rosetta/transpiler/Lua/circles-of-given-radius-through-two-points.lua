-- Generated by Mochi v0.10.39 on 2025-07-24 22:55 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function sqrtApprox(x)
  local g = x
  local i = 0
  while (i < 40) do
    g = ((g + (x / g)) / 2)
    i = (i + 1)
  end
  return g
end;

function hypot(x, y)
  return sqrtApprox(((x * x) + (y * y)))
end;

Two = "Two circles.";

R0 = "R==0.0 does not describe circles.";

Co = "Coincident points describe an infinite number of circles.";

CoR0 = "Coincident points with r==0.0 describe a degenerate circle.";

Diam = "Points form a diameter and describe only a single circle.";

Far = "Points too far apart to form circles.";

function circles(p1, p2, r)
  if ((p1.x == p2.x) and (p1.y == p2.y)) then
    if (r == 0) then
      return {p1, p1, "Coincident points with r==0.0 describe a degenerate circle."}
    end
    return {p1, p2, "Coincident points describe an infinite number of circles."}
  end
  if (r == 0) then
    return {p1, p2, "R==0.0 does not describe circles."}
  end
  local dx = (p2.x - p1.x)
  local dy = (p2.y - p1.y)
  local q = hypot(dx, dy)
  if (q > (2 * r)) then
    return {p1, p2, "Points too far apart to form circles."}
  end
  local m = {x = ((p1.x + p2.x) / 2), y = ((p1.y + p2.y) / 2)}
  if (q == (2 * r)) then
    return {m, m, "Points form a diameter and describe only a single circle."}
  end
  local d = sqrtApprox(((r * r) - ((q * q) / 4)))
  local ox = ((d * dx) / q)
  local oy = ((d * dy) / q)
  return {{x = (m.x - oy), y = (m.y + ox)}, {x = (m.x + oy), y = (m.y - ox)}, "Two circles."}
end;

td = {{{x = 0.1234, y = 0.9876}, {x = 0.8765, y = 0.2345}, 2}, {{x = 0, y = 2}, {x = 0, y = 0}, 1}, {{x = 0.1234, y = 0.9876}, {x = 0.1234, y = 0.9876}, 2}, {{x = 0.1234, y = 0.9876}, {x = 0.8765, y = 0.2345}, 0.5}, {{x = 0.1234, y = 0.9876}, {x = 0.1234, y = 0.9876}, 0}};

for _, tc in ipairs(td) do
  p1 = tc[0 + 1]
  p2 = tc[1 + 1]
  r = tc[2 + 1]
  print((((("p1:  {" .. tostring(p1.x)) .. " ") .. tostring(p1.y)) .. "}"))
  print((((("p2:  {" .. tostring(p2.x)) .. " ") .. tostring(p2.y)) .. "}"))
  print(("r:  " .. tostring(r)))
  res = circles(p1, p2, r)
  c1 = res[0 + 1]
  c2 = res[1 + 1]
  caseStr = res[2 + 1]
  print(("   " .. tostring(caseStr)))
  if ((caseStr == "Points form a diameter and describe only a single circle.") or (caseStr == "Coincident points with r==0.0 describe a degenerate circle.")) then
    print((((("   Center:  {" .. tostring(c1.x)) .. " ") .. tostring(c1.y)) .. "}"))
  else
    if (caseStr == "Two circles.") then
      print((((("   Center 1:  {" .. tostring(c1.x)) .. " ") .. tostring(c1.y)) .. "}"))
      print((((("   Center 2:  {" .. tostring(c2.x)) .. " ") .. tostring(c2.y)) .. "}"))
    end
  end
  print("")
end;
