-- Generated by Mochi v0.10.39 on 2025-07-24 14:48 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end
b3Seg = 30;

function pixelFromRgb(rgb)
  local r = math.floor(((rgb // 65536) % 256))
  local g = math.floor(((rgb // 256) % 256))
  local b = math.floor((rgb % 256))
  return {r = r, g = g, b = b}
end;

function newBitmap(cols, rows)
  local d = {}
  local y = 0
  while (y < rows) do
    local row = {}
    local x = 0
    while (x < cols) do
      row = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(row, {r = 0, g = 0, b = 0})
    x = (x + 1)
  end
  d = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(d, row)
y = (y + 1)
end
return {__name = "GenType1", __order = {"cols", "rows", "data"}, cols = cols, rows = rows, data = d}
end;

function setPx(b, x, y, p)
  local cols = math.floor(b.cols)
  local rows = math.floor(b.rows)
  if ((((x >= 0) and (x < cols)) and (y >= 0)) and (y < rows)) then
    b.data[y + 1][x + 1] = p
  end
end;

function fill(b, p)
  local cols = math.floor(b.cols)
  local rows = math.floor(b.rows)
  local y = 0
  while (y < rows) do
    local x = 0
    while (x < cols) do
      b.data[y + 1][x + 1] = p
      x = (x + 1)
    end
    y = (y + 1)
  end
end;

function fillRgb(b, rgb)
  fill(b, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(pixelFromRgb(rgb)))
end;

function line(b, x0, y0, x1, y1, p)
  local dx = (x1 - x0)
  if (dx < 0) then
    dx = (0 - dx)
  end
  local dy = (y1 - y0)
  if (dy < 0) then
    dy = (0 - dy)
  end
  local sx = (0 - 1)
  if (x0 < x1) then
    sx = 1
  end
  local sy = (0 - 1)
  if (y0 < y1) then
    sy = 1
  end
  local err = (dx - dy)
  while true do
    setPx(b, x0, y0, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))
    if ((x0 == x1) and (y0 == y1)) then
      break
    end
    local e2 = (2 * err)
    if (e2 > (0 - dy)) then
      err = (err - dy)
      x0 = (x0 + sx)
    end
    if (e2 < dx) then
      err = (err + dx)
      y0 = (y0 + sy)
    end
  end
end;

function bezier3(b, x1, y1, x2, y2, x3, y3, x4, y4, p)
  local px = {}
  local py = {}
  local i = 0
  while (i <= b3Seg) do
    px = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(px, 0)
  py = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(py, 0)
i = (i + 1)
end
local fx1 = x1
local fy1 = y1
local fx2 = x2
local fy2 = y2
local fx3 = x3
local fy3 = y3
local fx4 = x4
local fy4 = y4
i = 0
while (i <= b3Seg) do
  local d = (i // b3Seg)
  local a = (1 - d)
  local bcoef = (a * a)
  local ccoef = (d * d)
  local a2 = (a * bcoef)
  local b2 = ((3 * bcoef) * d)
  local c2 = ((3 * a) * ccoef)
  local d2 = (ccoef * d)
  px[i + 1] = math.floor(((((a2 * fx1) + (b2 * fx2)) + (c2 * fx3)) + (d2 * fx4)))
  py[i + 1] = math.floor(((((a2 * fy1) + (b2 * fy2)) + (c2 * fy3)) + (d2 * fy4)))
  i = (i + 1)
end
local x0 = px[0 + 1]
local y0 = py[0 + 1]
i = 1
while (i <= b3Seg) do
  local x = px[i + 1]
  local y = py[i + 1]
  line(b, x0, y0, x, y, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))
  x0 = x
  y0 = y
  i = (i + 1)
end
end;

b = newBitmap(400, 300);

fillRgb(b, 16773055);

bezier3(b, 20, 200, 700, 50, (0 - 300), 50, 380, 150, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(pixelFromRgb(4165615)));
