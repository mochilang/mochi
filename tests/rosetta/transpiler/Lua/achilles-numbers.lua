-- Generated by Mochi v0.10.40 on 2025-07-25 14:32 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pow10(exp)
    local n = 1
    local i = 0
    while (i < exp) do
      n = (n * 10)
      i = (i + 1)
    end
    return n
  end
  function totient(n)
    local tot = n
    local nn = n
    local i = 2
    while ((i * i) <= nn) do
      if ((nn % i) == 0) then
        while ((nn % i) == 0) do
          nn = (nn // i)
        end
        tot = (tot - (tot // i))
      end
      if (i == 2) then
        i = 1
      end
      i = (i + 2)
    end
    if (nn > 1) then
      tot = (tot - (tot // nn))
    end
    return tot
  end
  pps = {}
  function getPerfectPowers(maxExp)
    local upper = pow10(maxExp)
    local i = 2
    while ((i * i) < upper) do
      local p = i
      while true do
        p = (p * i)
        if (p >= upper) then
          break
        end
        pps[p] = true
      end
      i = (i + 1)
    end
  end
  function getAchilles(minExp, maxExp)
    local lower = pow10(minExp)
    local upper = pow10(maxExp)
    local achilles = {}
    local b = 1
    while (((b * b) * b) < upper) do
      local b3 = ((b * b) * b)
      local a = 1
      while true do
        local p = ((b3 * a) * a)
        if (p >= upper) then
          break
        end
        if (p >= lower) then
          if (not (pps[p] ~= nil)) then
            achilles[p] = true
          end
        end
        a = (a + 1)
      end
      b = (b + 1)
    end
    return achilles
  end
  function sortInts(xs)
    local res = {}
    local tmp = xs
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(tmp) > 0) do
        local min = tmp[0 + 1]
        local idx = 0
        local i = 1
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(tmp)) do
            if (tmp[i + 1] < min) then
              min = tmp[i + 1]
              idx = i
            end
            i = (i + 1)
          end
          res = (function(a,b) local res={table.unpack(a)} for _,v in ipairs(b) do res[#res+1]=v end return res end)(res, {min})
          local out = {}
          local j = 0
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(tmp)) do
              if (j ~= idx) then
                out = (function(a,b) local res={table.unpack(a)} for _,v in ipairs(b) do res[#res+1]=v end return res end)(out, {tmp[j + 1]})
              end
              j = (j + 1)
            end
            tmp = out
          end
          return res
        end
        function pad(n, width)
          local s = tostring(n)
          while ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s) < width) do
              s = (" " .. s)
            end
            return s
          end
          function main()
            local maxDigits = 15
            getPerfectPowers(5)
            local achSet = getAchilles(1, 5)
            local ach = {}
            for _, k in ipairs((function(m)
            local keys = {}
            for k in pairs(m) do
              if k ~= '__name' and k ~= '__order' then table.insert(keys, k) end
            end
            table.sort(keys, function(a,b) return a<b end)
            return keys
          end)(achSet)) do
            ach = (function(a,b) local res={table.unpack(a)} for _,v in ipairs(b) do res[#res+1]=v end return res end)(ach, {k})
          end
          ach = sortInts(ach)
          print("First 50 Achilles numbers:")
          local i = 0
          while (i < 50) do
            local line = ""
            local j = 0
            while (j < 10) do
              line = (line .. pad(ach[i + 1], 4))
              if (j < 9) then
                line = (line .. " ")
              end
              i = (i + 1)
              j = (j + 1)
            end
            print(line)
          end
          print("\nFirst 30 strong Achilles numbers:")
          local strong = {}
          local count = 0
          local idx = 0
          while (count < 30) do
            local tot = totient(ach[idx + 1])
            if (achSet[tot] ~= nil) then
              strong = (function(a,b) local res={table.unpack(a)} for _,v in ipairs(b) do res[#res+1]=v end return res end)(strong, {ach[idx + 1]})
              count = (count + 1)
            end
            idx = (idx + 1)
          end
          i = 0
          while (i < 30) do
            local line = ""
            local j = 0
            while (j < 10) do
              line = (line .. pad(strong[i + 1], 5))
              if (j < 9) then
                line = (line .. " ")
              end
              i = (i + 1)
              j = (j + 1)
            end
            print(line)
          end
          print("\nNumber of Achilles numbers with:")
          local counts = {1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383}
          local d = 2
          while (d <= maxDigits) do
            local c = counts[(d - 2) + 1]
            print(((pad(d, 2) .. " digits: ") .. tostring(c)))
            d = (d + 1)
          end
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
