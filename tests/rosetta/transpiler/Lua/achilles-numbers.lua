-- Generated by Mochi v0.10.37 on 2025-07-23 12:43 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
function pow10(exp)
  local n = 1
  local i = 0
  while (i < exp) do
    n = (n * 10)
    i = (i + 1)
  end
  return n
end;

function totient(n)
  local tot = n
  local nn = n
  local i = 2
  while ((i * i) <= nn) do
    if ((nn % i) == 0) then
      while ((nn % i) == 0) do
        nn = (nn // i)
      end
      tot = (tot - (tot // i))
    end
    if (i == 2) then
      i = 1
    end
    i = (i + 2)
  end
  if (nn > 1) then
    tot = (tot - (tot // nn))
  end
  return tot
end;

pps = {};

function getPerfectPowers(maxExp)
  local upper = pow10(maxExp)
  local i = 2
  while ((i * i) < upper) do
    local p = (i * i)
    while true do
      p = (p * i)
      if (p >= upper) then
        break
      end
      pps[p] = true
    end
    i = (i + 1)
  end
end;

function getAchilles(minExp, maxExp)
  local lower = pow10(minExp)
  local upper = pow10(maxExp)
  local achilles = {}
  local b = 1
  while (((b * b) * b) < upper) do
    local b3 = ((b * b) * b)
    local a = 1
    while true do
      local p = ((b3 * a) * a)
      if (p >= upper) then
        break
      end
      if (p >= lower) then
        if (not (pps[p] ~= nil)) then
          achilles[p] = true
        end
      end
      a = (a + 1)
    end
    b = (b + 1)
  end
  return achilles
end;

function sortInts(xs)
  local res = {}
  local tmp = xs
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(tmp) > 0) do
    local min = tmp[0 + 1]
    local idx = 0
    local i = 1
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(tmp)) do
      if (tmp[i + 1] < min) then
        min = tmp[i + 1]
        idx = i
      end
      i = (i + 1)
    end
    res = (res + {min})
    local out = {}
    local j = 0
    while (j < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(tmp)) do
      if (j ~= idx) then
        out = (out + {tmp[j + 1]})
      end
      j = (j + 1)
    end
    tmp = out
  end
  return res
end;

function pad(n, width)
  local s = tostring(n)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s) < width) do
    s = (" " .. s)
  end
  return s
end;

function main()
  local maxDigits = 15
  getPerfectPowers(maxDigits)
  local achSet = getAchilles(1, 5)
  local ach = {}
  for _, k in ipairs(achSet.keys()) do
    ach = (ach + {k})
  end
  ach = sortInts(ach)
  print("First 50 Achilles numbers:")
  local i = 0
  while (i < 50) do
    local line = ""
    local j = 0
    while (j < 10) do
      line = (line .. pad(ach[i + 1], 4))
      if (j < 9) then
        line = (line .. " ")
      end
      i = (i + 1)
      j = (j + 1)
    end
    print(line)
  end
  print("\nFirst 30 strong Achilles numbers:")
  local strong = {}
  local count = 0
  local idx = 0
  while (count < 30) do
    local tot = totient(ach[idx + 1])
    if (achSet[tot] ~= nil) then
      strong = (strong + {ach[idx + 1]})
      count = (count + 1)
    end
    idx = (idx + 1)
  end
  i = 0
  while (i < 30) do
    local line = ""
    local j = 0
    while (j < 10) do
      line = (line .. pad(strong[i + 1], 5))
      if (j < 9) then
        line = (line .. " ")
      end
      i = (i + 1)
      j = (j + 1)
    end
    print(line)
  end
  print("\nNumber of Achilles numbers with:")
  local counts = {1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383}
  local d = 2
  while (d <= maxDigits) do
    local c = counts[(d - 2) + 1]
    print(((pad(d, 2) .. " digits: ") .. tostring(c)))
    d = (d + 1)
  end
end;

main();
