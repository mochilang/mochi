-- Generated by Mochi v0.10.50 on 2025-07-30 21:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function connect(hostport)
    print(("Connected to " .. hostport))
    return {dir = "/"}
  end
  function login(conn, user, pass)
    print(("Logged in as " .. user))
  end
  function changeDir(conn, dir)
    conn.dir = dir
  end
  function list(conn)
    local names = serverNames[conn.dir]
    local dataDir = serverData[conn.dir]
    local out = {}
    for name in pairs(names) do
      local content = dataDir[name]
      out = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(out, {name = name, size = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(content), kind = "file"})
      end
      return out
    end
    function retrieve(conn, name)
      return serverData[conn.dir][name]
    end
    function main()
      local conn = connect("localhost:21")
      login(conn, "anonymous", "anonymous")
      changeDir(conn, "pub")
      print(conn.dir)
      local files = list(conn)
      for _, f in ipairs(files) do
        print(((tostring(f.name) .. " ") .. tostring(f.size)))
      end
      local data = retrieve(conn, "somefile.bin")
      print((("Wrote " .. tostring((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(data))) .. " bytes to somefile.bin"))
        end
        serverData = {__name = "GenType1", __order = {"pub"}, pub = {__name = "GenType2", __order = {"somefile.bin", "readme.txt"}, ["somefile.bin"] = "This is a file from the FTP server.", ["readme.txt"] = "Hello from ftp."}}
        serverNames = {__name = "GenType3", __order = {"pub"}, pub = {"somefile.bin", "readme.txt"}}
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
