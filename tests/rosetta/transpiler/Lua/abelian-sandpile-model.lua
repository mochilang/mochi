-- Generated by Mochi v0.10.40 on 2025-07-25 14:32 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  dim = 16
  function newPile(d)
    local b = {}
    local y = 0
    while (y < d) do
      local row = {}
      local x = 0
      while (x < d) do
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, 0)
      x = (x + 1)
    end
    b = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(b, row)
  y = (y + 1)
end
return b
end
function handlePile(pile, x, y)
  if (pile[y + 1][x + 1] >= 4) then
    pile[y + 1][x + 1] = (pile[y + 1][x + 1] - 4)
    if (y > 0) then
      pile[(y - 1) + 1][x + 1] = (pile[(y - 1) + 1][x + 1] + 1)
      if (pile[(y - 1) + 1][x + 1] >= 4) then
        pile = handlePile(pile, x, (y - 1))
      end
    end
    if (x > 0) then
      pile[y + 1][(x - 1) + 1] = (pile[y + 1][(x - 1) + 1] + 1)
      if (pile[y + 1][(x - 1) + 1] >= 4) then
        pile = handlePile(pile, (x - 1), y)
      end
    end
    if (y < (dim - 1)) then
      pile[(y + 1) + 1][x + 1] = (pile[(y + 1) + 1][x + 1] + 1)
      if (pile[(y + 1) + 1][x + 1] >= 4) then
        pile = handlePile(pile, x, (y + 1))
      end
    end
    if (x < (dim - 1)) then
      pile[y + 1][(x + 1) + 1] = (pile[y + 1][(x + 1) + 1] + 1)
      if (pile[y + 1][(x + 1) + 1] >= 4) then
        pile = handlePile(pile, (x + 1), y)
      end
    end
    pile = handlePile(pile, x, y)
  end
  return pile
end
function drawPile(pile, d)
  local chars = {" ", "░", "▓", "█"}
  local row = 0
  while (row < d) do
    local line = ""
    local col = 0
    while (col < d) do
      local v = pile[row + 1][col + 1]
      if (v > 3) then
        v = 3
      end
      line = (line .. chars[v + 1])
      col = (col + 1)
    end
    print(line)
    row = (row + 1)
  end
end
function main()
  local pile = newPile(16)
  local hdim = 7
  pile[hdim + 1][hdim + 1] = 16
  pile = handlePile(pile, hdim, hdim)
  drawPile(pile, 16)
end
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
