-- Generated by Mochi v0.10.50 on 2025-07-30 21:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function randPerm(n)
    local arr = {}
    local i = 0
    while (i < n) do
      arr = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(arr, i)
    i = (i + 1)
  end
  local idx = (n - 1)
  while (idx > 0) do
    local j = (_now() % (idx + 1))
    local tmp = arr[idx + 1]
    arr[idx + 1] = arr[j + 1]
    arr[j + 1] = tmp
    idx = (idx - 1)
  end
  return arr
end
function even(xs)
  local r = {}
  for _, x in ipairs(xs) do
    if ((x % 2) == 0) then
      r = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(r, x)
  end
end
return r
end
function reduceToEven(xs)
  local arr = xs
  local last = 0
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(arr)) do
        local e = arr[i + 1]
        if ((e % 2) == 0) then
          arr[last + 1] = e
          last = (last + 1)
        end
        i = (i + 1)
      end
      return (function(lst,s,e)
      local r={}
      for i=s+1,e do
        r[#r+1]=lst[i]
      end
      return r
    end)(arr, 0, last)
  end
  function listStr(xs)
    local s = "["
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          s = (s .. tostring(xs[i + 1]))
          if ((i + 1) < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(xs)) then
                s = (s .. " ")
              end
              i = (i + 1)
            end
            s = (s .. "]")
            return s
          end
          function main()
            local a = randPerm(20)
            local cap_a = 20
            print(listStr(a))
            print(listStr(even(a)))
            print(listStr(a))
            a = reduceToEven(a)
            print(listStr(a))
            print(((("a len: " .. tostring((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(a))) .. " cap: ") .. tostring(cap_a)))
              end
              main()
              local _bench_end = _now()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
