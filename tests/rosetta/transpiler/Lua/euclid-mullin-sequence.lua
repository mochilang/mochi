-- Generated by Mochi v0.10.42 on 2025-07-27 16:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
zero = 0;

one = 1;

two = 2;

three = 3;

four = 4;

five = 5;

six = 6;

ten = 10;

k100 = 100000;

function gcd(a, b)
  local x = a
  local y = b
  while (y ~= zero) do
    local t = (x % y)
    x = y
    y = t
  end
  return x
end;

function absBig(x)
  if (x < zero) then
    return (zero - x)
  end
  return x
end;

function pollardRho(n, c)
  function g(x, y)
    local x2 = (x * x)
    x2 = ((tonumber(x2) or 0) + (tonumber(c) or 0))
    return (x2 % y)
  end
  local x = 2
  local y = 2
  local z = 1
  local d = 0
  local count = 0
  while true do
    x = g(x, n)
    y = g(g(y, n), n)
    d = absBig((x - y))
    d = (d % n)
    z = (z * d)
    count = (count + 1)
    if (count == 100) then
      d = gcd(z, n)
      if (d ~= one) then
        break
      end
      z = one
      count = 0
    end
  end
  if (d == n) then
    return zero
  end
  return d
end;

function smallestPrimeFactorWheel(n, max)
  if ((n % two) == zero) then
    return two
  end
  if ((n % three) == zero) then
    return three
  end
  if ((n % five) == zero) then
    return five
  end
  local k = 7
  local inc = {four, two, four, two, four, six, two, six}
  local i = 0
  while ((k * k) <= n) do
    if ((n % k) == zero) then
      return k
    end
    k = ((tonumber(k) or 0) + (tonumber(inc[i + 1]) or 0))
    if (k > max) then
      break
    end
    i = ((i + 1) % 8)
  end
  return zero
end;

function smallestPrimeFactor(n)
  local s = smallestPrimeFactorWheel(n, k100)
  if (s ~= zero) then
    return s
  end
  local c = 1
  while true do
    local d = pollardRho(n, c)
    if (d == zero) then
      if (c == ten) then
        return n
      end
      c = ((tonumber(c) or 0) + (tonumber(one) or 0))
    else
      local factor = smallestPrimeFactorWheel(d, d)
      local s2 = smallestPrimeFactorWheel((n // d), factor)
      if (s2 ~= zero) then
        if (s2 < factor) then
          return s2
        else
          return factor
        end
      end
      return factor
    end
  end
end;

function main()
  local k = 19
  print((("First " .. tostring(k)) .. " terms of the Euclidâ€“Mullin sequence:"))
  print(2)
  local prod = 2
  local count = 1
  while (count < k) do
    local z = ((tonumber(prod) or 0) + (tonumber(one) or 0))
    local t = smallestPrimeFactor(z)
    print(t)
    prod = (prod * t)
    count = (count + 1)
  end
end;

main();
