-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function contains(xs, n)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (xs[i + 1] == n) then
            return true
          end
          i = (i + 1)
        end
        return false
      end
      function gcd(a, b)
        local x = a
        local y = b
        while (y ~= 0) do
          local t = (x % y)
          x = y
          y = t
        end
        if (x < 0) then
          x = (-x)
        end
        return x
      end
      function sortInts(xs)
        local arr = xs
        local n = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(arr)
            local i = 0
            while (i < n) do
              local j = 0
              while (j < (n - 1)) do
                if (arr[j + 1] > arr[(j + 1) + 1]) then
                  local tmp = arr[j + 1]
                  arr[j + 1] = arr[(j + 1) + 1]
                  arr[(j + 1) + 1] = tmp
                end
                j = (j + 1)
              end
              i = (i + 1)
            end
            return arr
          end
          function areSame(s, t)
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s) ~= (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(t)) then
                      return false
                    end
                    local a = sortInts(s)
                    local b = sortInts(t)
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(a)) do
                          if (a[i + 1] ~= b[i + 1]) then
                            return false
                          end
                          i = (i + 1)
                        end
                        return true
                      end
                      function printSlice(start, seq)
                        local first = {}
                        local i = 0
                        while (i < 30) do
                          first = (function(lst, item)
                          local res = {table.unpack(lst)}
                          table.insert(res, item)
                          return res
                        end)(first, seq[i + 1])
                        i = (i + 1)
                      end
                      local pad = ""
                      if (start < 10) then
                        pad = " "
                      end
                      print((((("EKG(" .. pad) .. tostring(start)) .. "): ") ..
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(first)))
                    end
                    function main()
                      local limit = 100
                      local starts = {2, 5, 7, 9, 10}
                      local ekg = {}
                      local s = 0
                      while (s < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(starts)) do
                            local seq = {1, starts[s + 1]}
                            local n = 2
                            while (n < limit) do
                              local i = 2
                              local done = false
                              while (not done) do
                                if ((not (function(lst, v)
                                for _, x in ipairs(lst) do
                                  if x == v then
                                    return true
                                  end
                                end
                                return false
                              end)(seq, i)) and (gcd(seq[(n - 1) + 1], i) > 1)) then
                                seq = (function(lst, item)
                                local res = {table.unpack(lst)}
                                table.insert(res, item)
                                return res
                              end)(seq, i)
                              done = true
                            end
                            i = (i + 1)
                          end
                          n = (n + 1)
                        end
                        ekg = (function(lst, item)
                        local res = {table.unpack(lst)}
                        table.insert(res, item)
                        return res
                      end)(ekg, seq)
                      printSlice(starts[s + 1], seq)
                      s = (s + 1)
                    end
                    local i = 2
                    local found = false
                    while (i < limit) do
                      if ((ekg[1 + 1][i + 1] == ekg[2 + 1][i + 1]) and areSame((function(lst,s,e)
                      local r={}
                      for i=s+1,e do
                        r[#r+1]=lst[i]
                      end
                      return r
                    end)(ekg[1 + 1], 0, i), (function(lst,s,e)
                    local r={}
                    for i=s+1,e do
                      r[#r+1]=lst[i]
                    end
                    return r
                  end)(ekg[2 + 1], 0, i))) then
                    print(("\nEKG(5) and EKG(7) converge at term " .. tostring((i + 1))))
                    found = true
                    break
                  end
                  i = (i + 1)
                end
                if (not found) then
                  print((("\nEKG5(5) and EKG(7) do not converge within " .. tostring(limit)) .. " terms"))
                end
              end
              main()
              local _bench_end = _now()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
