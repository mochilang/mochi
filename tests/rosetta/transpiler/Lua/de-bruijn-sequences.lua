-- Generated by Mochi v0.10.40 on 2025-07-25 21:10 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
function dbRec(k, n, t, p, a, seq)
  if (t > n) then
    if ((n % p) == 0) then
      local j = 1
      while (j <= p) do
        seq = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(seq, a[j + 1])
      j = (j + 1)
    end
  end
else
  a[t + 1] = a[(t - p) + 1]
  seq = dbRec(k, n, (t + 1), p, a, seq)
  local j = (a[(t - p) + 1] + 1)
  while (j < k) do
    a[t + 1] = j
    seq = dbRec(k, n, (t + 1), t, a, seq)
    j = (j + 1)
  end
end
return seq
end;

function deBruijn(k, n)
  local digits = "0123456789"
  local alphabet = digits
  if (k < 10) then
    alphabet = string.sub(digits, (0 + 1), k)
  end
  local a = {}
  local i = 0
  while (i < (k * n)) do
    a = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(a, 0)
  i = (i + 1)
end
local seq = {}
seq = dbRec(k, n, 1, 1, a, seq)
local b = ""
local idx = 0
while (idx < (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' or type(v) == 'table' then
      return #v
    else
      return 0
    end
  end)(seq)) do
    b = (b .. string.sub(alphabet, (seq[idx + 1] + 1), (seq[idx + 1] + 1)))
    idx = (idx + 1)
  end
  b = (b .. string.sub(b, (0 + 1), (n - 1)))
  return b
end;

function allDigits(s)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      local ch = string.sub(s, (i + 1), (i + 1))
      if ((ch < "0") or (ch > "9")) then
        return false
      end
      i = (i + 1)
    end
    return true
  end;
  
  function parseIntStr(str)
    local n = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(str)) do
        n = ((n * 10) + math.floor(string.sub(str, (i + 1), (i + 1))))
        i = (i + 1)
      end
      return n
    end;
    
    function validate(db)
      local le = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(db)
        local found = {}
        local i = 0
        while (i < 10000) do
          found = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(found, 0)
        i = (i + 1)
      end
      local j = 0
      while (j < (le - 3)) do
        local s = string.sub(db, (j + 1), (j + 4))
        if allDigits(s) then
          local n = _parseIntStr(s)
          found[n + 1] = (found[n + 1] + 1)
        end
        j = (j + 1)
      end
      local errs = {}
      local k = 0
      while (k < 10000) do
        if (found[k + 1] == 0) then
          errs = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(errs, (("    PIN number " .. padLeft(k, 4)) .. " missing"))
      else
        if (found[k + 1] > 1) then
          errs = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(errs, (((("    PIN number " .. padLeft(k, 4)) .. " occurs ") .. tostring(found[k + 1])) .. " times"))
      end
    end
    k = (k + 1)
  end
  local lerr = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(errs)
    if (lerr == 0) then
      print("  No errors found")
    else
      local pl = "s"
      if (lerr == 1) then
        pl = ""
      end
      print((((("  " .. tostring(lerr)) .. " error") .. pl) .. " found:"))
      local msg = joinStr(errs, "\n")
      print(msg)
    end
  end;
  
  function padLeft(n, width)
    local s = tostring(n)
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s) < width) do
        s = ("0" .. s)
      end
      return s
    end;
    
    function joinStr(xs, sep)
      local res = ""
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (i > 0) then
            res = (res .. sep)
          end
          res = (res .. xs[i + 1])
          i = (i + 1)
        end
        return res
      end;
      
      function reverse(s)
        local out = ""
        local i = ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s) - 1)
          while (i >= 0) do
            out = (out .. string.sub(s, (i + 1), (i + 1)))
            i = (i - 1)
          end
          return out
        end;
        
        function main()
          local db = deBruijn(10, 4)
          local le = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(db)
            print(("The length of the de Bruijn sequence is " .. tostring(le)))
            print("\nThe first 130 digits of the de Bruijn sequence are:")
            print(string.sub(db, (0 + 1), 130))
            print("\nThe last 130 digits of the de Bruijn sequence are:")
            print(string.sub(db, ((le - 130) + 1), #db))
            print("\nValidating the de Bruijn sequence:")
            validate(db)
            print("\nValidating the reversed de Bruijn sequence:")
            local dbr = reverse(db)
            validate(dbr)
            db = ((string.sub(db, (0 + 1), 4443) .. ".") .. string.sub(db, (4444 + 1), (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(db)))
              print("\nValidating the overlaid de Bruijn sequence:")
              validate(db)
            end;
            
            main();
