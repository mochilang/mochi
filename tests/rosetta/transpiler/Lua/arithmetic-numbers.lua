-- Generated by Mochi v0.10.40 on 2025-07-25 17:45 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function sieve(limit)
  local spf = {}
  local i = 0
  while (i <= limit) do
    spf = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(spf, 0)
  i = (i + 1)
end
i = 2
while (i <= limit) do
  if (spf[i + 1] == 0) then
    spf[i + 1] = i
    if ((i * i) <= limit) then
      local j = (i * i)
      while (j <= limit) do
        if (spf[j + 1] == 0) then
          spf[j + 1] = i
        end
        j = (j + i)
      end
    end
  end
  i = (i + 1)
end
return spf
end;

function primesFrom(spf, limit)
  local primes = {}
  local i = 3
  while (i <= limit) do
    if (spf[i + 1] == i) then
      primes = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(primes, i)
  end
  i = (i + 1)
end
return primes
end;

function pad3(n)
  local s = tostring(n)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s) < 3) do
      s = (" " .. s)
    end
    return s
  end;
  
  function commatize(n)
    local s = tostring(n)
    local out = ""
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s) - 1)
      local c = 0
      while (i >= 0) do
        out = (string.sub(s, i + 1, (i + 1)) .. out)
        c = (c + 1)
        if (((c % 3) == 0) and (i > 0)) then
          out = ("," .. out)
        end
        i = (i - 1)
      end
      return out
    end;
    
    function primeCount(primes, last, spf)
      local lo = 0
      local hi = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(primes)
        while (lo < hi) do
          local mid = math.floor(((lo + hi) // 2))
          if (primes[mid + 1] < last) then
            lo = (mid + 1)
          else
            hi = mid
          end
        end
        local count = (lo + 1)
        if (spf[last + 1] ~= last) then
          count = (count - 1)
        end
        return count
      end;
      
      function arithmeticNumbers(limit, spf)
        local arr = {1}
        local n = 3
        while ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(arr) < limit) do
            if (spf[n + 1] == n) then
              arr = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(arr, n)
          else
            local x = n
            local sigma = 1
            local tau = 1
            while (x > 1) do
              local p = spf[x + 1]
              if (p == 0) then
                p = x
              end
              local cnt = 0
              local power = p
              local sum = 1
              while ((x % p) == 0) do
                x = (x // p)
                cnt = (cnt + 1)
                sum = (sum + power)
                power = (power * p)
              end
              sigma = (sigma * sum)
              tau = (tau * (cnt + 1))
            end
            if ((sigma % tau) == 0) then
              arr = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(arr, n)
          end
        end
        n = (n + 1)
      end
      return arr
    end;
    
    function main()
      local limit = 1228663
      local spf = sieve(limit)
      local primes = primesFrom(spf, limit)
      local arr = arithmeticNumbers(1000000, spf)
      print("The first 100 arithmetic numbers are:")
      local i = 0
      while (i < 100) do
        local line = ""
        local j = 0
        while (j < 10) do
          line = (line .. pad3(arr[(i + j) + 1]))
          if (j < 9) then
            line = (line .. " ")
          end
          j = (j + 1)
        end
        print(line)
        i = (i + 10)
      end
      for _, x in ipairs({1000, 10000, 100000, 1000000}) do
        local last = arr[(x - 1) + 1]
        local lastc = commatize(last)
        print(((("\nThe " .. commatize(x)) .. "th arithmetic number is: ") .. lastc))
        local pc = primeCount(primes, last, spf)
        local comp = ((x - pc) - 1)
        print((((("The count of such numbers <= " .. lastc) .. " which are composite is ") .. commatize(comp)) .. "."))
      end
    end;
    
    main();
