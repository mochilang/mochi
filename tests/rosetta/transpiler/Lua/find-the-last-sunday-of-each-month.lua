-- Generated by Mochi v0.10.42 on 2025-07-27 21:41 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function leapYear(y)
    return ((((y % 4) == 0) and ((y % 100) ~= 0)) or ((y % 400) == 0))
  end
  function monthDays(y, m)
    local days = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
    if ((m == 2) and leapYear(y)) then
      return 29
    end
    return days[m + 1]
  end
  function zeller(y, m, d)
    local mm = m
    local yy = y
    if (mm < 3) then
      mm = (mm + 12)
      yy = (yy - 1)
    end
    local K = (yy % 100)
    local J = (yy // 100)
    local h = ((((((d + ((13 * (mm + 1)) // 5)) + K) + (K // 4)) + (J // 4)) + (5 * J)) % 7)
    return ((h + 6) % 7)
  end
  function lastSunday(y, m)
    local day = monthDays(y, m)
    while ((day > 0) and (zeller(y, m, day) ~= 0)) do
      day = (day - 1)
    end
    return day
  end
  function monthName(m)
    local names = {"", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
    return names[m + 1]
  end
  function main()
    local year = math.floor(input())
    print(("Last Sundays of each month of " .. tostring(year)))
    print("==================================")
    local m = 1
    while (m <= 12) do
      local day = lastSunday(year, m)
      print(((monthName(m) .. ": ") .. tostring(day)))
      m = (m + 1)
    end
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
