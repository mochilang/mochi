-- Generated by Mochi v0.10.42 on 2025-07-28 11:14 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pow_big(base, exp)
    local result = 1
    local b = base
    local e = exp
    while (e > 0) do
      if ((e % 2) == 1) then
        result = (result * b)
      end
      b = (b * b)
      e = math.floor((e // 2))
    end
    return result
  end
  function cullen(n)
    local two_n = pow_big(2, n)
    return ((two_n * n) + 1)
  end
  function woodall(n)
    return (cullen(n) - 2)
  end
  function show_list(xs)
    local line = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          line = (line .. tostring(xs[i + 1]))
          if (i < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(xs) - 1)) then
                line = (line .. " ")
              end
              i = (i + 1)
            end
            return line
          end
          function main()
            local cnums = {}
            local i = 1
            while (i <= 20) do
              cnums = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(cnums, cullen(i))
            i = (i + 1)
          end
          print("First 20 Cullen numbers (n * 2^n + 1):")
          print(show_list(cnums))
          local wnums = {}
          i = 1
          while (i <= 20) do
            wnums = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(wnums, woodall(i))
          i = (i + 1)
        end
        print("\nFirst 20 Woodall numbers (n * 2^n - 1):")
        print(show_list(wnums))
        local cprimes = {1, 141, 4713, 5795, 6611}
        print("\nFirst 5 Cullen primes (in terms of n):")
        print(show_list(cprimes))
        local wprimes = {2, 3, 6, 30, 75, 81, 115, 123, 249, 362, 384, 462}
        print("\nFirst 12 Woodall primes (in terms of n):")
        print(show_list(wprimes))
      end
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
