-- Generated by Mochi v0.10.50 on 2025-07-30 21:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function weekday(y, m, d)
    local yy = y
    local mm = m
    if (mm < 3) then
      mm = (mm + 12)
      yy = (yy - 1)
    end
    local k = (yy % 100)
    local j = math.floor((yy // 100))
    local a = math.floor(((13 * (mm + 1)) // 5))
    local b = math.floor((k // 4))
    local c = math.floor((j // 4))
    return ((((((d + a) + k) + b) + c) + (5 * j)) % 7)
  end
  function main()
    local months31 = {1, 3, 5, 7, 8, 10, 12}
    local names = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
    local count = 0
    local firstY = 0
    local firstM = 0
    local lastY = 0
    local lastM = 0
    local haveNone = {}
    print("Months with five weekends:")
    for year = 1900, 2101 - 1 do
      local hasOne = false
      for _, m in ipairs(months31) do
        if (weekday(year, m, 1) == 6) then
          print(((("  " .. tostring(year)) .. " ") .. names[(m - 1) + 1]))
          count = (count + 1)
          hasOne = true
          lastY = year
          lastM = m
          if (firstY == 0) then
            firstY = year
            firstM = m
          end
        end
      end
      if (not hasOne) then
        haveNone = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(haveNone, year)
    end
  end
  print((tostring(count) .. " total"))
  print("")
  print("First five dates of weekends:")
  for i = 0, 5 - 1 do
    local day = (1 + (7 * i))
    print(((((("  Friday, " .. names[(firstM - 1) + 1]) .. " ") .. tostring(day)) .. ", ") .. tostring(firstY)))
  end
  print("Last five dates of weekends:")
  for i = 0, 5 - 1 do
    local day = (1 + (7 * i))
    print(((((("  Friday, " .. names[(lastM - 1) + 1]) .. " ") .. tostring(day)) .. ", ") .. tostring(lastY)))
  end
  print("")
  print("Years with no months with five weekends:")
  for _, y in ipairs(haveNone) do
    print(("  " .. tostring(y)))
  end
  print((tostring((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(haveNone)) .. " total"))
    end
    main()
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
