-- Generated by Mochi v0.10.40 on 2025-07-25 17:25 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function ord(ch)
    local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if ((ch >= "0") and (ch <= "9")) then
      return (_parseIntStr(ch) + 48)
    end
    local idx = _indexOf(upper, ch)
    if (idx >= 0) then
      return (65 + idx)
    end
    return 0
  end
  function isCusip(s)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s) ~= 9) then
        return false
      end
      local sum = 0
      local i = 0
      while (i < 8) do
        local c = string.sub(s, (i + 1), (i + 1))
        local v = 0
        if ((c >= "0") and (c <= "9")) then
          v = _parseIntStr(c)
        else
          if ((c >= "A") and (c <= "Z")) then
            v = (ord(c) - 55)
          else
            if (c == "*") then
              v = 36
            else
              if (c == "@") then
                v = 37
              else
                if (c == "#") then
                  v = 38
                else
                  return false
                end
              end
            end
          end
        end
        if ((i % 2) == 1) then
          v = (v * 2)
        end
        sum = ((sum + (v // 10)) + (v % 10))
        i = (i + 1)
      end
      return (_parseIntStr(string.sub(s, (8 + 1), 9)) == ((10 - (sum % 10)) % 10))
    end
    candidates = {"037833100", "17275R102", "38259P508", "594918104", "68389X106", "68389X105"}
    for _, cand in ipairs(candidates) do
      b = "incorrect"
      if isCusip(cand) then
        b = "correct"
      end
      print(((tostring(cand) .. " -> ") .. b))
    end
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
