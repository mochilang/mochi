-- Generated by Mochi v0.10.39 on 2025-07-25 00:28 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
nPts = 100;

rMin = 10;

rMax = 15;

span = ((rMax + 1) + rMax);

poss = {};

min2 = (rMin * rMin);

max2 = (rMax * rMax);

y = (-rMax);

while (y <= rMax) do
  x = (-rMax)
  while (x <= rMax) do
    r2 = ((x * x) + (y * y))
    if ((r2 >= min2) and (r2 <= max2)) then
      poss = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(poss, {x, y})
  end
  x = (x + 1)
end
y = (y + 1)
end;

print((tostring((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' or type(v) == 'table' then
      return #v
    else
      return 0
    end
  end)(poss)) .. " possible points"));
  
  rows = {};
  
  r = 0;
  
  while (r < span) do
    row = {}
    c = 0
    while (c < (span * 2)) do
      row = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(row, " ")
    c = (c + 1)
  end
  rows = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(rows, row)
r = (r + 1)
end;

u = 0;

seen = {};

n = 0;

while (n < nPts) do
  i = (_now() % (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(poss))
    x = poss[i + 1][0 + 1]
    yy = poss[i + 1][1 + 1]
    row = (yy + rMax)
    col = ((x + rMax) * 2)
    rows[row + 1][col + 1] = "*"
    key = ((tostring(row) .. ",") .. tostring(col))
    if (not seen[key]) then
      seen[key] = true
      u = (u + 1)
    end
    n = (n + 1)
  end;
  
  i2 = 0;
  
  while (i2 < span) do
    line = ""
    j = 0
    while (j < (span * 2)) do
      line = (line .. rows[i2 + 1][j + 1])
      j = (j + 1)
    end
    print(line)
    i2 = (i2 + 1)
  end;
  
  print((tostring(u) .. " unique points"));
