-- Generated by Mochi v0.10.37 on 2025-07-23 13:23 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
function sortRunes(s)
  local arr = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      arr = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(arr, string.sub(s, (i + 1), (i + 1)))
    i = (i + 1)
  end
  local n = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(arr)
    local m = 0
    while (m < n) do
      local j = 0
      while (j < (n - 1)) do
        if (arr[j + 1] > arr[(j + 1) + 1]) then
          local tmp = arr[j + 1]
          arr[j + 1] = arr[(j + 1) + 1]
          arr[(j + 1) + 1] = tmp
        end
        j = (j + 1)
      end
      m = (m + 1)
    end
    local out = ""
    i = 0
    while (i < n) do
      out = (out .. arr[i + 1])
      i = (i + 1)
    end
    return out
  end;
  
  function sortStrings(xs)
    local res = {}
    local tmp = xs
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(tmp) > 0) do
        local min = tmp[0 + 1]
        local idx = 0
        local i = 1
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(tmp)) do
            if (tmp[i + 1] < min) then
              min = tmp[i + 1]
              idx = i
            end
            i = (i + 1)
          end
          res = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(res, min)
        local out = {}
        local j = 0
        while (j < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(tmp)) do
            if (j ~= idx) then
              out = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(out, tmp[j + 1])
          end
          j = (j + 1)
        end
        tmp = out
      end
      return res
    end;
    
    function main()
      local words = {"abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"}
      local groups = {}
      local maxLen = 0
      for _, w in ipairs(words) do
        local k = sortRunes(w)
        if (not (groups[k] ~= nil)) then
          groups[k] = {w}
        else
          groups[k] = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(groups[k], w)
      end
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(groups[k]) > maxLen) then
          maxLen = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(groups[k])
          end
        end
        local printed = {}
        for _, w in ipairs(words) do
          local k = sortRunes(w)
          if ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(groups[k]) == maxLen) then
              if (not (printed[k] ~= nil)) then
                local g = sortStrings(groups[k])
                local line = ("[" .. g[0 + 1])
                local i = 1
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(g)) do
                    line = ((line .. " ") .. g[i + 1])
                    i = (i + 1)
                  end
                  line = (line .. "]")
                  print(line)
                  printed[k] = true
                end
              end
            end
          end;
          
          main();
