-- Generated by Mochi v0.10.42 on 2025-07-27 16:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function expI(b, p)
  local r = 1
  local i = 0
  while (i < p) do
    r = (r * b)
    i = (i + 1)
  end
  return r
end;

function expF(b, p)
  local r = 1
  local pow = b
  local n = p
  local neg = false
  if (p < 0) then
    n = (-p)
    neg = true
  end
  while (n > 0) do
    if ((n % 2) == 1) then
      r = (r * pow)
    end
    pow = (pow * pow)
    n = (n // 2)
  end
  if neg then
    r = (1 / r)
  end
  return r
end;

function printExpF(b, p)
  if ((b == 0) and (p < 0)) then
    print((((tostring(b) .. "^") .. tostring(p)) .. ": +Inf"))
  else
    print(((((tostring(b) .. "^") .. tostring(p)) .. ": ") .. tostring(expF(b, p))))
  end
end;

function main()
  print("expI tests")
  for _, pair in ipairs({{2, 10}, {2, (-10)}, {(-2), 10}, {(-2), 11}, {11, 0}}) do
    if (pair[1 + 1] < 0) then
      print((((tostring(pair[0 + 1]) .. "^") .. tostring(pair[1 + 1])) .. ": negative power not allowed"))
    else
      print(((((tostring(pair[0 + 1]) .. "^") .. tostring(pair[1 + 1])) .. ": ") .. tostring(expI(pair[0 + 1], pair[1 + 1]))))
    end
  end
  print("overflow undetected")
  print(("10^10: " .. tostring(expI(10, 10))))
  print("\nexpF tests:")
  for _, pair in ipairs({{2, 10}, {2, (-10)}, {(-2), 10}, {(-2), 11}, {11, 0}}) do
    printExpF(pair[0 + 1], pair[1 + 1])
  end
  print("disallowed in expI, allowed here")
  printExpF(0, (-1))
  print("other interesting cases for 32 bit float type")
  printExpF(10, 39)
  printExpF(10, (-39))
  printExpF((-10), 39)
end;

main();
