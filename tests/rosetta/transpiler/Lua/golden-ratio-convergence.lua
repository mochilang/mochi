-- Generated by Mochi v0.10.50 on 2025-07-30 21:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function sqrtApprox(x)
    if (x <= 0) then
      return 0
    end
    local g = x
    local i = 0
    while (i < 20) do
      g = ((g + (x / g)) / 2)
      i = (i + 1)
    end
    return g
  end
  function abs(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function main()
    local oldPhi = 1
    local phi = 0
    local iters = 0
    local limit = 1e-05
    while true do
      phi = (1 + (1 / oldPhi))
      iters = (iters + 1)
      if (abs((phi - oldPhi)) <= limit) then
        break
      end
      oldPhi = phi
    end
    local actual = ((1 + sqrtApprox(5)) / 2)
    print(("Final value of phi : " .. tostring(phi)))
    print(("Number of iterations : " .. tostring(iters)))
    print(("Error (approx) : " .. tostring((phi - actual))))
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
