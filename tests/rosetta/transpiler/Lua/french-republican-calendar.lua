-- Generated by Mochi v0.10.50 on 2025-07-30 21:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function greLeap(year)
    local a = math.floor((year % 4))
    local b = math.floor((year % 100))
    local c = math.floor((year % 400))
    return ((a == 0) and ((b ~= 0) or (c == 0)))
  end
  function repLeap(year)
    local a = math.floor(((year + 1) % 4))
    local b = math.floor(((year + 1) % 100))
    local c = math.floor(((year + 1) % 400))
    return ((a == 0) and ((b ~= 0) or (c == 0)))
  end
  function greToDay(d, m, y)
    local yy = y
    local mm = m
    if (mm < 3) then
      yy = (yy - 1)
      mm = (mm + 12)
    end
    return (((((((yy * 36525) // 100) - (yy // 100)) + (yy // 400)) + ((306 * (mm + 1)) // 10)) + d) - 654842)
  end
  function repToDay(d, m, y)
    local dd = d
    local mm = m
    if (mm == 13) then
      mm = (mm - 1)
      dd = (dd + 30)
    end
    if repLeap(y) then
      dd = (dd - 1)
    end
    return (((((((365 * y) + ((y + 1) // 4)) - ((y + 1) // 100)) + ((y + 1) // 400)) + (30 * mm)) + dd) - 395)
  end
  function dayToGre(day)
    local y = ((day * 100) // 36525)
    local d = ((day - ((y * 36525) // 100)) + 21)
    y = (y + 1792)
    d = (((d + (y // 100)) - (y // 400)) - 13)
    local m = 8
    while (d > gregorian[m + 1]) do
      d = (d - gregorian[m + 1])
      m = (m + 1)
      if (m == 12) then
        m = 0
        y = (y + 1)
        if greLeap(y) then
          gregorian[1 + 1] = 29
        else
          gregorian[1 + 1] = 28
        end
      end
    end
    m = (m + 1)
    return {d, m, y}
  end
  function dayToRep(day)
    local y = (((day - 1) * 100) // 36525)
    if repLeap(y) then
      y = (y - 1)
    end
    local d = ((((day - (((y + 1) * 36525) // 100)) + 365) + ((y + 1) // 100)) - ((y + 1) // 400))
    y = (y + 1)
    local m = 1
    local sc = 5
    if repLeap(y) then
      sc = 6
    end
    while (d > 30) do
      d = (d - 30)
      m = (m + 1)
      if (m == 13) then
        if (d > sc) then
          d = (d - sc)
          m = 1
          y = (y + 1)
          sc = 5
          if repLeap(y) then
            sc = 6
          end
        end
      end
    end
    return {d, m, y}
  end
  function formatRep(d, m, y)
    if (m == 13) then
      return ((sansculotidesStr[(d - 1) + 1] .. " ") .. tostring(y))
    end
    return ((((tostring(d) .. " ") .. republicanStr[(m - 1) + 1]) .. " ") .. tostring(y))
  end
  function formatGre(d, m, y)
    return ((((tostring(d) .. " ") .. gregorianStr[(m - 1) + 1]) .. " ") .. tostring(y))
  end
  gregorianStr = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
  gregorian = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
  republicanStr = {"Vendemiaire", "Brumaire", "Frimaire", "Nivose", "Pluviose", "Ventose", "Germinal", "Floreal", "Prairial", "Messidor", "Thermidor", "Fructidor"}
  sansculotidesStr = {"Fete de la vertu", "Fete du genie", "Fete du travail", "Fete de l'opinion", "Fete des recompenses", "Fete de la Revolution"}
  rep = dayToRep(greToDay(20, 5, 1795))
  print(formatRep(rep[0 + 1], rep[1 + 1], rep[2 + 1]))
  gre = dayToGre(repToDay(1, 9, 3))
  print(formatGre(gre[0 + 1], gre[1 + 1], gre[2 + 1]))
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
