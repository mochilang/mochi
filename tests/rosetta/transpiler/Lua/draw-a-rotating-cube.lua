-- Generated by Mochi v0.10.41 on 2025-07-26 20:04 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  PI = 3.141592653589793
  TWO_PI = 6.283185307179586
  function _mod(x, m)
    return (x - (math.floor((x / m)) * m))
  end
  function _sin(x)
    local y = (_mod((x + PI), TWO_PI) - PI)
    local y2 = (y * y)
    local y3 = (y2 * y)
    local y5 = (y3 * y2)
    local y7 = (y5 * y2)
    return (((y - (y3 / 6)) + (y5 / 120)) - (y7 / 5040))
  end
  function _cos(x)
    local y = (_mod((x + PI), TWO_PI) - PI)
    local y2 = (y * y)
    local y4 = (y2 * y2)
    local y6 = (y4 * y2)
    return (((1 - (y2 / 2)) + (y4 / 24)) - (y6 / 720))
  end
  nodes = {{x = (-1), y = (-1), z = (-1)}, {x = (-1), y = (-1), z = 1}, {x = (-1), y = 1, z = (-1)}, {x = (-1), y = 1, z = 1}, {x = 1, y = (-1), z = (-1)}, {x = 1, y = (-1), z = 1}, {x = 1, y = 1, z = (-1)}, {x = 1, y = 1, z = 1}}
  edges = {{0, 1}, {1, 3}, {3, 2}, {2, 0}, {4, 5}, {5, 7}, {7, 6}, {6, 4}, {0, 4}, {1, 5}, {2, 6}, {3, 7}}
  function rotate(p, ax, ay)
    local sinx = _sin(ax)
    local cosx = _cos(ax)
    local siny = _sin(ay)
    local cosy = _cos(ay)
    local x1 = p.x
    local y1 = ((p.y * cosx) - (p.z * sinx))
    local z1 = ((p.y * sinx) + (p.z * cosx))
    local x2 = ((x1 * cosy) + (z1 * siny))
    local z2 = (((-x1) * siny) + (z1 * cosy))
    return {x = x2, y = y1, z = z2}
  end
  width = 40
  height = 20
  distance = 3
  scale = 8
  function project(p)
    local factor = (scale / (p.z + distance))
    local x = (math.floor((p.x * factor)) + (width // 2))
    local y = (math.floor(((-p.y) * factor)) + (height // 2))
    return {x = x, y = y}
  end
  function clearGrid()
    local g = {}
    local y = 0
    while (y < height) do
      local row = {}
      local x = 0
      while (x < width) do
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, " ")
      x = (x + 1)
    end
    g = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(g, row)
  y = (y + 1)
end
return g
end
function drawPoint(g, x, y, ch)
  if ((((x >= 0) and (x < width)) and (y >= 0)) and (y < height)) then
    local row = g[y + 1]
    row[x + 1] = ch
    g[y + 1] = row
  end
end
function bresenham(x0, y0, x1, y1, g, ch)
  local dx = (x1 - x0)
  if (dx < 0) then
    dx = (-dx)
  end
  local dy = (y1 - y0)
  if (dy < 0) then
    dy = (-dy)
  end
  local sx = (-1)
  if (x0 < x1) then
    sx = 1
  end
  local sy = (-1)
  if (y0 < y1) then
    sy = 1
  end
  local err = (dx - dy)
  while true do
    drawPoint(g, x0, y0, ch)
    if ((x0 == x1) and (y0 == y1)) then
      break
    end
    local e2 = (2 * err)
    if (e2 > (-dy)) then
      err = (err - dy)
      x0 = (x0 + sx)
    end
    if (e2 < dx) then
      err = (err + dx)
      y0 = (y0 + sy)
    end
  end
end
function render(g)
  local out = ""
  local y = 0
  while (y < height) do
    local line = ""
    local x = 0
    while (x < width) do
      line = (line .. g[y + 1][x + 1])
      x = (x + 1)
    end
    out = ((out .. line) .. "\n")
    y = (y + 1)
  end
  return out
end
function main()
  local f = 0
  while (f < 10) do
    local grid = clearGrid()
    local rot = {}
    local i = 0
    local ay = ((PI / 4) + ((f * PI) / 10))
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(nodes)) do
        local p = rotate((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(nodes[i + 1]), (PI / 4), ay)
        local pp = project(p)
        rot = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(rot, pp)
      i = (i + 1)
    end
    local e = 0
    while (e < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(edges)) do
        local a = edges[e + 1][0 + 1]
        local b = edges[e + 1][1 + 1]
        local p1 = rot[a + 1]
        local p2 = rot[b + 1]
        bresenham(p1.x, p1.y, p2.x, p2.y, grid, "#")
        e = (e + 1)
      end
      print(render(grid))
      f = (f + 1)
    end
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
