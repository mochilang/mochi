-- Generated by Mochi v0.10.40 on 2025-07-25 17:25 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pad2(n)
    if (n < 10) then
      return ("0" .. tostring(n))
    end
    return tostring(n)
  end
  function weekdayName(z)
    local names = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
    return names[((z + 4) % 7) + 1]
  end
  function main()
    local ts = math.floor((_now() // 1000000000))
    local days = math.floor((ts // 86400))
    local z = (days + 719468)
    local era = math.floor((z // 146097))
    local doe = (z - (era * 146097))
    local yoe = ((((doe - (doe // 1460)) + (doe // 36524)) - (doe // 146096)) // math.floor(365))
    local y = (yoe + (era * 400))
    local doy = (doe - (((365 * yoe) + (yoe // 4)) - (yoe // 100)))
    local mp = (((5 * doy) + 2) // math.floor(153))
    local d = math.floor(((doy - (((153 * mp) + 2) // math.floor(5))) + 1))
    local m = math.floor((mp + 3))
    if (m > 12) then
      y = (y + 1)
      m = (m - 12)
    end
    local iso = ((((tostring(y) .. "-") .. pad2(m)) .. "-") .. pad2(d))
    print(iso)
    local months = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
    local line = ((((((weekdayName(days) .. ", ") .. months[(m - 1) + 1]) .. " ") .. tostring(d)) .. ", ") .. tostring(y))
    print(line)
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
