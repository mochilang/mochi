-- Generated by Mochi v0.10.40 on 2025-07-25 21:10 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function primesUpTo(n)
  local sieve = {}
  local i = 0
  while (i <= n) do
    sieve = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(sieve, true)
  i = (i + 1)
end
local p = 2
while ((p * p) <= n) do
  if sieve[p + 1] then
    local m = (p * p)
    while (m <= n) do
      sieve[m + 1] = false
      m = (m + p)
    end
  end
  p = (p + 1)
end
local res = {}
local x = 2
while (x <= n) do
  if sieve[x + 1] then
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, x)
end
x = (x + 1)
end
return res
end;

LIMIT = 999999;

primes = primesUpTo(LIMIT);

function longestSeq(dir)
  local pd = 0
  local longSeqs = {{2}}
  local currSeq = {2}
  local i = 1
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(primes)) do
      local d = (primes[i + 1] - primes[(i - 1) + 1])
      if (((dir == "ascending") and (d <= pd)) or ((dir == "descending") and (d >= pd))) then
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(currSeq) > (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(longSeqs[0 + 1])) then
              longSeqs = {currSeq}
            else
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(currSeq) == (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(longSeqs[0 + 1])) then
                    longSeqs = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(longSeqs, currSeq)
                end
              end
              currSeq = {primes[(i - 1) + 1], primes[i + 1]}
            else
              currSeq = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(currSeq, primes[i + 1])
          end
          pd = d
          i = (i + 1)
        end
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(currSeq) > (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(longSeqs[0 + 1])) then
              longSeqs = {currSeq}
            else
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(currSeq) == (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(longSeqs[0 + 1])) then
                    longSeqs = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(longSeqs, currSeq)
                end
              end
              print((((("Longest run(s) of primes with " .. dir) .. " differences is ") .. tostring((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(longSeqs[0 + 1]))) .. " :"))
                for _, ls in ipairs(longSeqs) do
                  local diffs = {}
                  local j = 1
                  while (j < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(ls)) do
                      diffs = (function(lst, item)
                      local res = {table.unpack(lst)}
                      table.insert(res, item)
                      return res
                    end)(diffs, (ls[j + 1] - ls[(j - 1) + 1]))
                    j = (j + 1)
                  end
                  local k = 0
                  while (k < ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(ls) - 1)) do
                      print((string.gsub(string.format("%s %d", (((tostring(ls[k + 1]) .. " (") .. tostring(diffs[k + 1])) .. ") "), ((false) and (1) or (0))), "%s+$", "")))
                      k = (k + 1)
                    end
                    print(tostring(ls[((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(ls) - 1) + 1]))
                    end
                    print("")
                  end;
                  
                  function main()
                    print("For primes < 1 million:\n")
                    for _, dir in ipairs({"ascending", "descending"}) do
                      longestSeq(dir)
                    end
                  end;
                  
                  main();
