-- Generated by Mochi v0.10.41 on 2025-07-26 17:02 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  seed = 1
  function rnd()
    seed = (((seed * 214013) + 2531011) % 2147483648)
    return (seed // 65536)
  end
  function deal(game)
    seed = game
    local deck = {}
    local i = 0
    while (i < 52) do
      deck = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(deck, (51 - i))
    i = (i + 1)
  end
  i = 0
  while (i < 51) do
    local j = (51 - (rnd() % (52 - i)))
    local tmp = deck[i + 1]
    deck[i + 1] = deck[j + 1]
    deck[j + 1] = tmp
    i = (i + 1)
  end
  return deck
end
suits = "CDHS"
nums = "A23456789TJQK"
function show(cards)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(cards)) do
      local c = cards[i + 1]
      io.write(((" " .. string.sub(nums, (c // 4) + 1, ((c // 4) + 1))) .. string.sub(suits, (c % 4) + 1, ((c % 4) + 1))))
      if ((((i + 1) % 8) == 0) or ((i + 1) == (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(cards))) then
          print("")
        end
        i = (i + 1)
      end
    end
    print("")
    print("Game #1")
    show(deal(1))
    print("")
    print("Game #617")
    show(deal(617))
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
