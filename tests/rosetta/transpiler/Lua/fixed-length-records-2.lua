-- Generated by Mochi v0.10.50 on 2025-07-30 21:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function _repeat(s, n)
    local out = ""
    local i = 0
    while (i < n) do
      out = (out .. s)
      i = (i + 1)
    end
    return out
  end
  function trimRightSpace(s)
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - 1)
        while ((i >= 0) and (string.sub(s, (i + 1), (i + 1)) == " ")) do
          i = (i - 1)
        end
        return string.sub(s, 1, (i + 1))
      end
      function block2text(block)
        local out = {}
        for _, b in ipairs(block) do
          out = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(out, trimRightSpace(b))
      end
      return out
    end
    function text2block(lines)
      local out = {}
      local count = 0
      for _, line in ipairs(lines) do
        local s = line
        local le = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)
            if (le > 64) then
              s = string.sub(s, 1, 64)
            else
              if (le < 64) then
                s = (tostring(s) .. string.rep(" ", (64 - le)))
              end
            end
            out = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(out, s)
          count = (count + 1)
        end
        if ((count % 16) ~= 0) then
          local pad = (16 - (count % 16))
          local i = 0
          while (i < pad) do
            out = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(out, string.rep(" ", 64))
          i = (i + 1)
        end
      end
      return out
    end
    lines = {"alpha", "beta", "gamma"}
    blocks = text2block(lines)
    outLines = block2text(blocks)
    for _, l in ipairs(outLines) do
      if (l ~= "") then
        print(l)
      end
    end
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
