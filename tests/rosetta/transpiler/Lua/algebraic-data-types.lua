-- Generated by Mochi v0.10.42 on 2025-07-27 22:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function node(cl, le, aa, ri)
    return {__name = "GenType1", __order = {"cl", "le", "aa", "ri"}, cl = cl, le = le, aa = aa, ri = ri}
  end
  function treeString(t)
    if (t == _nil) then
      return "E"
    end
    local m = t
    return (((((((("T(" .. tostring(m.cl)) .. ", ") .. treeString(m.le)) .. ", ") .. tostring(m.aa)) .. ", ") .. treeString(m.ri)) .. ")")
  end
  function balance(t)
    if (t == _nil) then
      return t
    end
    local m = t
    if (m.cl ~= "B") then
      return t
    end
    local le = m.le
    local ri = m.ri
    if (le ~= _nil) then
      local leMap = le
      if (leMap.cl == "R") then
        local lele = leMap.le
        if (lele ~= _nil) then
          local leleMap = lele
          if (leleMap.cl == "R") then
            return node("R", node("B", leleMap.le, leleMap.aa, leleMap.ri), leMap.aa, node("B", leMap.ri, m.aa, ri))
          end
        end
        local leri = leMap.ri
        if (leri ~= _nil) then
          local leriMap = leri
          if (leriMap.cl == "R") then
            return node("R", node("B", leMap.le, leMap.aa, leriMap.le), leriMap.aa, node("B", leriMap.ri, m.aa, ri))
          end
        end
      end
    end
    if (ri ~= _nil) then
      local riMap = ri
      if (riMap.cl == "R") then
        local rile = riMap.le
        if (rile ~= _nil) then
          local rileMap = rile
          if (rileMap.cl == "R") then
            return node("R", node("B", m.le, m.aa, rileMap.le), rileMap.aa, node("B", rileMap.ri, riMap.aa, riMap.ri))
          end
        end
        local riri = riMap.ri
        if (riri ~= _nil) then
          local ririMap = riri
          if (ririMap.cl == "R") then
            return node("R", node("B", m.le, m.aa, riMap.le), riMap.aa, node("B", ririMap.le, ririMap.aa, ririMap.ri))
          end
        end
      end
    end
    return t
  end
  function ins(tr, x)
    if (tr == _nil) then
      return node("R", _nil, x, _nil)
    end
    if (x < tr.aa) then
      return balance(node(tr.cl, ins(tr.le, x), tr.aa, tr.ri))
    end
    if (x > tr.aa) then
      return balance(node(tr.cl, tr.le, tr.aa, ins(tr.ri, x)))
    end
    return tr
  end
  function insert(tr, x)
    local t = ins(tr, x)
    if (t == _nil) then
      return _nil
    end
    local m = t
    return node("B", m.le, m.aa, m.ri)
  end
  tr = _nil
  i = 1
  while (i <= 16) do
    tr = insert(tr, i)
    i = (i + 1)
  end
  print(treeString(tr))
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
