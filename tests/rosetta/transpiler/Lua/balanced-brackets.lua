-- Generated by Mochi v0.10.40 on 2025-07-25 17:45 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  seed = 1
  function prng(max)
    seed = (((seed * 1103515245) + 12345) % 2147483648)
    return (seed % max)
  end
  function gen(n)
    local arr = {}
    local i = 0
    while (i < n) do
      arr = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(arr, "[")
    arr = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(arr, "]")
  i = (i + 1)
end
local j = ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' or type(v) == 'table' then
      return #v
    else
      return 0
    end
  end)(arr) - 1)
  while (j > 0) do
    local k = prng((j + 1))
    local tmp = arr[j + 1]
    arr[j + 1] = arr[k + 1]
    arr[k + 1] = tmp
    j = (j - 1)
  end
  local out = ""
  for _, ch in ipairs(arr) do
    out = (out .. tostring(ch))
  end
  return out
end
function testBalanced(s)
  local open = 0
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      local c = string.sub(s, (i + 1), (i + 1))
      if (c == "[") then
        open = (open + 1)
      else
        if (c == "]") then
          if (open == 0) then
            print((s .. ": not ok"))
            return
          end
          open = (open - 1)
        else
          print((s .. ": not ok"))
          return
        end
      end
      i = (i + 1)
    end
    if (open == 0) then
      print((s .. ": ok"))
    else
      print((s .. ": not ok"))
    end
  end
  function main()
    local i = 0
    while (i < 10) do
      testBalanced(gen(i))
      i = (i + 1)
    end
    testBalanced("()")
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
