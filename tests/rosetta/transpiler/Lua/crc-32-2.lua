-- Generated by Mochi v0.10.40 on 2025-07-25 17:25 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function xor(a, b)
    local res = 0
    local bit = 1
    local x = a
    local y = b
    while ((x > 0) or (y > 0)) do
      local abit = (x % 2)
      local bbit = (y % 2)
      if (abit ~= bbit) then
        res = (res + bit)
      end
      x = (x // 2)
      y = (y // 2)
      bit = (bit * 2)
    end
    return res
  end
  function rshift(x, n)
    local v = x
    local i = 0
    while (i < n) do
      v = (v // 2)
      i = (i + 1)
    end
    return v
  end
  function ord(ch)
    local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    local lower = "abcdefghijklmnopqrstuvwxyz"
    local idx = _indexOf(upper, ch)
    if (idx >= 0) then
      return (65 + idx)
    end
    idx = _indexOf(lower, ch)
    if (idx >= 0) then
      return (97 + idx)
    end
    if (ch == " ") then
      return 32
    end
    return 0
  end
  function toHex(n)
    local digits = "0123456789ABCDEF"
    if (n == 0) then
      return "0"
    end
    local v = n
    local out = ""
    while (v > 0) do
      local d = (v % 16)
      out = (string.sub(digits, (d + 1), (d + 1)) .. out)
      v = (v // 16)
    end
    return out
  end
  function crc32Table()
    local _table = {}
    local i = 0
    while (i < 256) do
      local word = i
      local j = 0
      while (j < 8) do
        if ((word % 2) == 1) then
          word = xor(rshift(word, 1), 3988292384)
        else
          word = rshift(word, 1)
        end
        j = (j + 1)
      end
      _table = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(_table, word)
    i = (i + 1)
  end
  return _table
end
_table = crc32Table()
function crc32(s)
  local crc = 4294967295
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      local c = ord(string.sub(s, (i + 1), (i + 1)))
      local idx = xor((crc % 256), c)
      crc = xor(_table[idx + 1], rshift(crc, 8))
      i = (i + 1)
    end
    return (4294967295 - crc)
  end
  function main()
    local s = "The quick brown fox jumps over the lazy dog"
    local result = crc32(s)
    local hex = string.lower(toHex(result))
    print(hex)
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
