-- Generated by Mochi v0.10.40 on 2025-07-25 22:07 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function gcd(a, b)
    local x = a
    if (x < 0) then
      x = (-x)
    end
    local y = b
    if (y < 0) then
      y = (-y)
    end
    while (y ~= 0) do
      local t = (x % y)
      x = y
      y = t
    end
    return x
  end
  function parseRational(s)
    local intPart = 0
    local fracPart = 0
    local denom = 1
    local afterDot = false
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        local ch = string.sub(s, i + 1, (i + 1))
        if (ch == ".") then
          afterDot = true
        else
          local d = (math.floor(ch) - math.floor("0"))
          if (not afterDot) then
            intPart = ((intPart * 10) + d)
          else
            fracPart = ((fracPart * 10) + d)
            denom = (denom * 10)
          end
        end
        i = (i + 1)
      end
      local num = ((intPart * denom) + fracPart)
      local g = gcd(num, denom)
      return {__name = "GenType1", __order = {"num", "den"}, num = math.floor((num // g)), den = math.floor((denom // g))}
    end
    function main()
      local inputs = {"0.9054054", "0.518518", "0.75"}
      for _, s in ipairs(inputs) do
        local r = parseRational(s)
        print(((((tostring(s) .. " = ") .. tostring(r.num)) .. "/") .. tostring(r.den)))
      end
    end
    main()
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
