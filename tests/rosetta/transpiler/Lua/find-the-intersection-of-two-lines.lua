-- Generated by Mochi v0.10.50 on 2025-07-30 21:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function createLine(a, b)
    local slope = ((b.y - a.y) // (b.x - a.x))
    local yint = (a.y - (slope * a.x))
    return {slope = slope, yint = yint}
  end
  function evalX(l, x)
    return ((l.slope * x) + l.yint)
  end
  function intersection(l1, l2)
    if (l1.slope == l2.slope) then
      return {x = 0, y = 0}
    end
    local x = ((l2.yint - l1.yint) // (l1.slope - l2.slope))
    local y = evalX(l1, x)
    return {x = x, y = y}
  end
  function main()
    local l1 = createLine({x = 4, y = 0}, {x = 6, y = 10})
    local l2 = createLine({x = 0, y = 3}, {x = 10, y = 7})
    local p = intersection(l1, l2)
    print((((("{" .. tostring(p.x)) .. " ") .. tostring(p.y)) .. "}"))
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
