-- Generated by Mochi v0.10.41 on 2025-07-27 15:57 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function pow10(n)
  local r = 1
  local i = 0
  while (i < n) do
    r = (r * 10)
    i = (i + 1)
  end
  return r
end;

function powf(base, exp)
  if (exp == 0.5) then
    local guess = base
    local i = 0
    while (i < 20) do
      guess = ((guess + (base / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  local result = 1
  local n = math.floor(exp)
  local i = 0
  while (i < n) do
    result = (result * base)
    i = (i + 1)
  end
  return result
end;

function formatFloat(f, prec)
  local scale = pow10(prec)
  local scaled = ((f * scale) + 0.5)
  local n = math.floor(scaled)
  local digits = tostring(n)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(digits) <= prec) do
      digits = ("0" .. digits)
    end
    local intPart = string.sub(digits, 0 + 1, ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(digits) - prec))
      local fracPart = string.sub(digits, ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(digits) - prec) + 1, (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(digits))
          return ((intPart .. ".") .. fracPart)
        end;
        
        function padLeft(s, w)
          local res = ""
          local n = (w - (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s))
            while (n > 0) do
              res = (res .. " ")
              n = (n - 1)
            end
            return (res .. s)
          end;
          
          function rowString(row)
            local s = "["
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(row)) do
                s = (s .. padLeft(formatFloat(row[i + 1], 3), 6))
                if (i < ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(row) - 1)) then
                    s = (s .. " ")
                  end
                  i = (i + 1)
                end
                return (s .. "] ")
              end;
              
              function printMatrix(heading, m)
                print(heading)
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(m)) do
                    print(rowString(m[i + 1]))
                    i = (i + 1)
                  end
                end;
                
                function elementWiseMM(m1, m2, f)
                  local z = {}
                  local r = 0
                  while (r < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(m1)) do
                      local row = {}
                      local c = 0
                      while (c < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' or type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(m1[r + 1])) do
                          row = (function(lst, item)
                          local res = {table.unpack(lst)}
                          table.insert(res, item)
                          return res
                        end)(row, f(m1[r + 1][c + 1], m2[r + 1][c + 1]))
                        c = (c + 1)
                      end
                      z = (function(lst, item)
                      local res = {table.unpack(lst)}
                      table.insert(res, item)
                      return res
                    end)(z, row)
                    r = (r + 1)
                  end
                  return z
                end;
                
                function elementWiseMS(m, s, f)
                  local z = {}
                  local r = 0
                  while (r < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(m)) do
                      local row = {}
                      local c = 0
                      while (c < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' or type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(m[r + 1])) do
                          row = (function(lst, item)
                          local res = {table.unpack(lst)}
                          table.insert(res, item)
                          return res
                        end)(row, f(m[r + 1][c + 1], s))
                        c = (c + 1)
                      end
                      z = (function(lst, item)
                      local res = {table.unpack(lst)}
                      table.insert(res, item)
                      return res
                    end)(z, row)
                    r = (r + 1)
                  end
                  return z
                end;
                
                function add(a, b)
                  return (a + b)
                end;
                
                function sub(a, b)
                  return (a - b)
                end;
                
                function mul(a, b)
                  return (a * b)
                end;
                
                function div(a, b)
                  return (a / b)
                end;
                
                function exp(a, b)
                  return powf(a, b)
                end;
                
                function main()
                  local m1 = {{3, 1, 4}, {1, 5, 9}}
                  local m2 = {{2, 7, 1}, {8, 2, 8}}
                  printMatrix("m1:", m1)
                  printMatrix("m2:", m2)
                  print("")
                  printMatrix("m1 + m2:", elementWiseMM(m1, m2, add))
                  printMatrix("m1 - m2:", elementWiseMM(m1, m2, sub))
                  printMatrix("m1 * m2:", elementWiseMM(m1, m2, mul))
                  printMatrix("m1 / m2:", elementWiseMM(m1, m2, div))
                  printMatrix("m1 ^ m2:", elementWiseMM(m1, m2, exp))
                  print("")
                  local s = 0.5
                  print(("s: " .. tostring(s)))
                  printMatrix("m1 + s:", elementWiseMS(m1, s, add))
                  printMatrix("m1 - s:", elementWiseMS(m1, s, sub))
                  printMatrix("m1 * s:", elementWiseMS(m1, s, mul))
                  printMatrix("m1 / s:", elementWiseMS(m1, s, div))
                  printMatrix("m1 ^ s:", elementWiseMS(m1, s, exp))
                end;
                
                main();
