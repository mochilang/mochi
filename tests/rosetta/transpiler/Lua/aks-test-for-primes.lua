-- Generated by Mochi v0.10.55 on 2025-08-02 17:26 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function poly(p)
    local s = ""
    local coef = 1
    local i = p
    if (coef ~= 1) then
      s = (s .. tostring(coef))
    end
    while (i > 0) do
      s = (s .. "x")
      if (i ~= 1) then
        s = ((s .. "^") .. tostring(i))
      end
      coef = math.floor(((coef * i) // ((p - i) + 1)))
      local d = coef
      if (((p - (i - 1)) % 2) == 1) then
        d = (-d)
      end
      if (d < 0) then
        s = ((s .. " - ") .. tostring((-d)))
      else
        s = ((s .. " + ") .. tostring(d))
      end
      i = (i - 1)
    end
    if (s == "") then
      s = "1"
    end
    return s
  end
  function aks(n)
    if (n < 2) then
      return false
    end
    local c = n
    local i = 1
    while (i < n) do
      if ((c % n) ~= 0) then
        return false
      end
      c = math.floor(((c * (n - i)) // (i + 1)))
      i = (i + 1)
    end
    return true
  end
  function main()
    local p = 0
    while (p <= 7) do
      print(((tostring(p) .. ":  ") .. poly(p)))
      p = (p + 1)
    end
    local first = true
    p = 2
    local line = ""
    while (p < 50) do
      if aks(p) then
        if first then
          line = (line .. tostring(p))
          first = false
        else
          line = ((line .. " ") .. tostring(p))
        end
      end
      p = (p + 1)
    end
    print(line)
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
