-- Generated by Mochi v0.10.40 on 2025-07-25 17:25 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _split(s, sep)
local t = {}
local pattern = string.format("([^%s]+)", sep)
string.gsub(s, pattern, function(c) t[#t+1] = c end)
return t
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  c = ((((("Character,Speech\n" .. "The multitude,The messiah! Show us the messiah!\n") .. "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n") .. "The multitude,Who are you?\n") .. "Brians mother,I'm his mother; that's who!\n") .. "The multitude,Behold his mother! Behold his mother!")
  rows = {}
  for _, line in ipairs(_split(c, "\n")) do
    rows = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(rows, _split(line, ","))
end
headings = true
print("<table>")
if headings then
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(rows) > 0) then
      th = ""
      for _, h in ipairs(rows[0 + 1]) do
        th = (((th .. "<th>") .. tostring(h)) .. "</th>")
      end
      print("   <thead>")
      print((("      <tr>" .. th) .. "</tr>"))
      print("   </thead>")
      print("   <tbody>")
      i = 1
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(rows)) do
          cells = ""
          for _, cell in ipairs(rows[i + 1]) do
            cells = (((cells .. "<td>") .. tostring(cell)) .. "</td>")
          end
          print((("      <tr>" .. cells) .. "</tr>"))
          i = (i + 1)
        end
        print("   </tbody>")
      end
    else
      for _, row in ipairs(rows) do
        cells = ""
        for _, cell in ipairs(row) do
          cells = (((cells .. "<td>") .. tostring(cell)) .. "</td>")
        end
        print((("    <tr>" .. cells) .. "</tr>"))
      end
    end
    print("</table>")
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
