-- Generated by Mochi v0.10.40 on 2025-07-25 17:25 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function sqrtApprox(x)
    if (x <= 0) then
      return 0
    end
    local guess = x
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function powf(base, exp)
    local result = 1
    local i = 0
    while (i < exp) do
      result = (result * base)
      i = (i + 1)
    end
    return result
  end
  function normalize(v)
    local len = sqrtApprox((((v.x * v.x) + (v.y * v.y)) + (v.z * v.z)))
    return {x = (v.x / len), y = (v.y / len), z = (v.z / len)}
  end
  function dot(a, b)
    local d = (((a.x * b.x) + (a.y * b.y)) + (a.z * b.z))
    if (d < 0) then
      return (-d)
    end
    return 0
  end
  function hitSphere(s, x, y)
    local dx = (x - s.cx)
    local dy = (y - s.cy)
    local zsq = ((s.r * s.r) - ((dx * dx) + (dy * dy)))
    if (zsq < 0) then
      return {__name = "GenType1", __order = {"hit"}, hit = false}
    end
    local z = sqrtApprox(zsq)
    return {__name = "GenType2", __order = {"hit", "z1", "z2"}, hit = true, z1 = (s.cz - z), z2 = (s.cz + z)}
  end
  function main()
    local shades = ".:!*oe&#%@"
    local light = normalize((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)({x = (-50), y = 30, z = 50}))
    local pos = {cx = 20, cy = 20, cz = 0, r = 20}
    local neg = {cx = 1, cy = 1, cz = (-6), r = 20}
    local yi = 0
    while (yi <= 40) do
      local y = (yi + 0.5)
      local line = ""
      local xi = (-20)
      while (xi <= 60) do
        local x = ((((xi - pos.cx) / 2) + 0.5) + pos.cx)
        local hb = hitSphere(pos, x, y)
        if (not hb.hit) then
          line = (line .. " ")
          xi = (xi + 1)
          goto __cont_2
        end
        local zb1 = hb.z1
        local zb2 = hb.z2
        local hs = hitSphere(neg, x, y)
        local hitRes = 1
        if (not hs.hit) then
          hitRes = 1
        else
          if (hs.z1 > zb1) then
            hitRes = 1
          else
            if (hs.z2 > zb2) then
              hitRes = 0
            else
              if (hs.z2 > zb1) then
                hitRes = 2
              else
                hitRes = 1
              end
            end
          end
        end
        if (hitRes == 0) then
          line = (line .. " ")
          xi = (xi + 1)
          goto __cont_2
        end
        local vec = nil
        if (hitRes == 1) then
          vec = {x = (x - pos.cx), y = (y - pos.cy), z = (zb1 - pos.cz)}
        else
          vec = {x = (neg.cx - x), y = (neg.cy - y), z = (neg.cz - hs.z2)}
        end
        vec = normalize((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(vec))
        local b = (powf(dot(light, vec), 2) + 0.5)
        local intensity = math.floor(((1 - b) * (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(shades)))
          if (intensity < 0) then
            intensity = 0
          end
          if (intensity >= (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(shades)) then
              intensity = ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(shades) - 1)
              end
              line = (line .. string.sub(shades, intensity + 1, (intensity + 1)))
              xi = (xi + 1)
              ::__cont_2::
            end
            print(line)
            yi = (yi + 1)
            ::__cont_1::
          end
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
