-- Generated by Mochi v0.10.40 on 2025-07-25 20:06 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  n = 15
  t = {}
  for _ = 0, (n + 2) - 1 do
    t = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(t, 0)
end
t[1 + 1] = 1
for i = 1, (n + 1) - 1 do
  j = i
  while (j > 1) do
    t[j + 1] = (t[j + 1] + t[(j - 1) + 1])
    j = (j - 1)
  end
  t[math.floor((i + 1)) + 1] = t[i + 1]
  j = (i + 1)
  while (j > 1) do
    t[j + 1] = (t[j + 1] + t[(j - 1) + 1])
    j = (j - 1)
  end
  cat = (t[(i + 1) + 1] - t[i + 1])
  if (i < 10) then
    print((((" " .. tostring(i)) .. " : ") .. tostring(cat)))
  else
    print(((tostring(i) .. " : ") .. tostring(cat)))
  end
end
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
