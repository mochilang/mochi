-- Generated by Mochi v0.10.42 on 2025-07-28 00:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function randInt(s, n)
    local next = (((s * 1664525) + 1013904223) % 2147483647)
    return {next, (next % n)}
  end
  function padLeft(s, w)
    local res = ""
    local n = (w - (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s))
        while (n > 0) do
          res = (res .. " ")
          n = (n - 1)
        end
        return (res .. s)
      end
      function makeSeq(s, le)
        local bases = "ACGT"
        local out = ""
        local i = 0
        while (i < le) do
          local r = randInt(s, 4)
          s = r[0 + 1]
          local idx = math.floor(r[1 + 1])
          out = (out .. _substring(bases, idx, (idx + 1)))
          i = (i + 1)
        end
        return {s, out}
      end
      function mutate(s, dna, w)
        local bases = "ACGT"
        local le = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(dna)
            local r = randInt(s, le)
            s = r[0 + 1]
            local p = math.floor(r[1 + 1])
            r = randInt(s, 300)
            s = r[0 + 1]
            local x = math.floor(r[1 + 1])
            local arr = {}
            local i = 0
            while (i < le) do
              arr = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(arr, _substring(dna, i, (i + 1)))
            i = (i + 1)
          end
          if (x < w[0 + 1]) then
            r = randInt(s, 4)
            s = r[0 + 1]
            local idx = math.floor(r[1 + 1])
            local b = _substring(bases, idx, (idx + 1))
            print((((((("  Change @" .. padLeft(tostring(p), 3)) .. " '") .. arr[p + 1]) .. "' to '") .. b) .. "'"))
            arr[p + 1] = b
          else
            if (x < (w[0 + 1] + w[1 + 1])) then
              print((((("  Delete @" .. padLeft(tostring(p), 3)) .. " '") .. arr[p + 1]) .. "'"))
              local j = p
              while (j < ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(arr) - 1)) do
                    arr[j + 1] = arr[(j + 1) + 1]
                    j = (j + 1)
                  end
                  arr = (function(lst,s,e)
                  local r={}
                  for i=s+1,e do
                    r[#r+1]=lst[i]
                  end
                  return r
                end)(arr, 0, ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(arr) - 1))
                  else
                    r = randInt(s, 4)
                    s = r[0 + 1]
                    local idx2 = math.floor(r[1 + 1])
                    local b = _substring(bases, idx2, (idx2 + 1))
                    arr = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(arr, "")
                  local j = ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(arr) - 1)
                      while (j > p) do
                        arr[j + 1] = arr[(j - 1) + 1]
                        j = (j - 1)
                      end
                      print((((("  Insert @" .. padLeft(tostring(p), 3)) .. " '") .. b) .. "'"))
                      arr[p + 1] = b
                    end
                  end
                  local out = ""
                  i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(arr)) do
                        out = (out .. arr[i + 1])
                        i = (i + 1)
                      end
                      return {s, out}
                    end
                    function prettyPrint(dna, rowLen)
                      print("SEQUENCE:")
                      local le = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(dna)
                          local i = 0
                          while (i < le) do
                            local k = (i + rowLen)
                            if (k > le) then
                              k = le
                            end
                            print(((padLeft(tostring(i), 5) .. ": ") .. string.sub(dna, (i + 1), k)))
                            i = (i + rowLen)
                          end
                          local a = 0
                          local c = 0
                          local g = 0
                          local t = 0
                          local idx = 0
                          while (idx < le) do
                            local ch = _substring(dna, idx, (idx + 1))
                            if (ch == "A") then
                              a = (a + 1)
                            else
                              if (ch == "C") then
                                c = (c + 1)
                              else
                                if (ch == "G") then
                                  g = (g + 1)
                                else
                                  if (ch == "T") then
                                    t = (t + 1)
                                  end
                                end
                              end
                            end
                            idx = (idx + 1)
                          end
                          print("")
                          print("BASE COUNT:")
                          print(("    A: " .. padLeft(tostring(a), 3)))
                          print(("    C: " .. padLeft(tostring(c), 3)))
                          print(("    G: " .. padLeft(tostring(g), 3)))
                          print(("    T: " .. padLeft(tostring(t), 3)))
                          print("    ------")
                          print(("    Σ: " .. tostring(le)))
                          print("    ======")
                        end
                        function wstring(w)
                          return (((((("  Change: " .. tostring(w[0 + 1])) .. "\n  Delete: ") .. tostring(w[1 + 1])) .. "\n  Insert: ") .. tostring(w[2 + 1])) .. "\n")
                        end
                        function main()
                          local seed = 1
                          local res = makeSeq(seed, 250)
                          seed = res[0 + 1]
                          local dna = res[1 + 1]
                          prettyPrint(dna, 50)
                          local muts = 10
                          local w = {100, 100, 100}
                          print("\nWEIGHTS (ex 300):")
                          print(wstring(w))
                          print((("MUTATIONS (" .. tostring(muts)) .. "):"))
                          local i = 0
                          while (i < muts) do
                            res = mutate(seed, dna, w)
                            seed = res[0 + 1]
                            dna = res[1 + 1]
                            i = (i + 1)
                          end
                          print("")
                          prettyPrint(dna, 50)
                        end
                        main()
                        local _bench_end = _now()
                        collectgarbage()
                        local _bench_end_mem = collectgarbage('count') * 1024
                        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                      end;
