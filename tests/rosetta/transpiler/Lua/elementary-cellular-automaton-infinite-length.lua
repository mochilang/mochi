-- Generated by Mochi v0.10.41 on 2025-07-27 15:57 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function pow2(n)
  local p = 1
  local i = 0
  while (i < n) do
    p = (p * 2)
    i = (i + 1)
  end
  return p
end;

function btoi(b)
  if b then
    return 1
  end
  return 0
end;

function addNoCells(cells)
  local l = "O"
  local r = "O"
  if (string.sub(cells, 0 + 1, 1) == "O") then
    l = "."
  end
  if (string.sub(cells, ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(cells) - 1) + 1, (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(cells)) == "O") then
        r = "."
      end
      cells = ((l .. cells) .. r)
      cells = ((l .. cells) .. r)
      return cells
    end;
    
    function step(cells, ruleVal)
      local newCells = ""
      local i = 0
      while (i < ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(cells) - 2)) do
          local bin = 0
          local b = 2
          local n = i
          while (n < (i + 3)) do
            bin = (bin + (btoi((string.sub(cells, n + 1, (n + 1)) == "O")) * pow2(b)))
            b = (b - 1)
            n = (n + 1)
          end
          local a = "."
          if (((ruleVal // pow2(bin)) % 2) == 1) then
            a = "O"
          end
          newCells = (newCells .. a)
          i = (i + 1)
        end
        return newCells
      end;
      
      function _repeat(ch, n)
        local s = ""
        local i = 0
        while (i < n) do
          s = (s .. ch)
          i = (i + 1)
        end
        return s
      end;
      
      function evolve(l, ruleVal)
        print(((" Rule #" .. tostring(ruleVal)) .. ":"))
        local cells = "O"
        local x = 0
        while (x < l) do
          cells = addNoCells(cells)
          local width = (40 + ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(cells) // 2))
            local spaces = string.rep(" ", (width - (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(cells)))
              print((spaces .. cells))
              cells = step(cells, ruleVal)
              x = (x + 1)
            end
          end;
          
          function main()
            for _, r in ipairs({90, 30}) do
              evolve(25, r)
              print("")
            end
          end;
          
          main();
