-- Generated by Mochi v0.10.42 on 2025-07-28 08:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function zero(f)
    return function(x)
    return x
  end
end
function succ(c)
  return function(f)
  return function(x)
  return f(c(f)(x))
end
end
end
function add(c, d)
  return function(f)
  return function(x)
  return c(f)(d(f)(x))
end
end
end
function mul(c, d)
  return function(f)
  return function(x)
  return c(d(f))(x)
end
end
end
function pow(c, d)
  local di = toInt(d)
  local prod = c
  local i = 1
  while (i < di) do
    prod = mul(prod, c)
    i = (i + 1)
  end
  return prod
end
function incr(i)
  return (math.floor(i) + 1)
end
function toInt(c)
  return math.floor(c(incr)(0))
end
function intToChurch(i)
  if (i == 0) then
    return zero
  end
  return succ(intToChurch((i - 1)))
end
z = zero
three = succ(succ(succ(z)))
four = succ(three)
print(("three        -> " .. tostring(toInt(three))))
print(("four         -> " .. tostring(toInt(four))))
print(("three + four -> " .. tostring(toInt(add(three, four)))))
print(("three * four -> " .. tostring(toInt(mul(three, four)))))
print(("three ^ four -> " .. tostring(toInt(pow(three, four)))))
print(("four ^ three -> " .. tostring(toInt(pow(four, three)))))
print(("5 -> five    -> " .. tostring(toInt(intToChurch(5)))))
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
