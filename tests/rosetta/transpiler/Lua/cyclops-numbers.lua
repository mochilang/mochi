-- Generated by Mochi v0.10.40 on 2025-07-25 21:10 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function _split(s, sep)
local t = {}
local pattern = string.format("([^%s]+)", sep)
string.gsub(s, pattern, function(c) t[#t+1] = c end)
return t
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
function digits(n)
  if (n == 0) then
    return {0}
  end
  local rev = {}
  local x = n
  while (x > 0) do
    rev = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(rev, (x % 10))
  x = math.floor((x // 10))
end
local out = {}
local i = ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' or type(v) == 'table' then
      return #v
    else
      return 0
    end
  end)(rev) - 1)
  while (i >= 0) do
    out = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(out, rev[i + 1])
  i = (i - 1)
end
return out
end;

function commatize(n)
  local s = tostring(n)
  local out = ""
  local i = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)
    while (i > 3) do
      out = (("," .. string.sub(s, ((i - 3) + 1), i)) .. out)
      i = (i - 3)
    end
    out = (string.sub(s, (0 + 1), i) .. out)
    return out
  end;
  
  function isPrime(n)
    if (n < 2) then
      return false
    end
    if ((n % 2) == 0) then
      return (n == 2)
    end
    if ((n % 3) == 0) then
      return (n == 3)
    end
    local d = 5
    while ((d * d) <= n) do
      if ((n % d) == 0) then
        return false
      end
      d = (d + 2)
      if ((n % d) == 0) then
        return false
      end
      d = (d + 4)
    end
    return true
  end;
  
  function split(s, sep)
    local parts = {}
    local cur = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        if (((i + (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(sep)) <= (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)) and (string.sub(s, i + 1, (i + (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(sep))) == sep)) then
                parts = (function(lst, item)
                local res = {table.unpack(lst)}
                table.insert(res, item)
                return res
              end)(parts, cur)
              cur = ""
              i = (i + (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(sep))
              else
                cur = (cur .. string.sub(s, (i + 1), (i + 1)))
                i = (i + 1)
              end
            end
            parts = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(parts, cur)
          return parts
        end;
        
        function parseIntStr(str)
          local i = 0
          local neg = false
          if (((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(str) > 0) and (string.sub(str, (0 + 1), 1) == "-")) then
              neg = true
              i = 1
            end
            local n = 0
            local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(str)) do
                n = ((n * 10) + digits[string.sub(str, (i + 1), (i + 1))])
                i = (i + 1)
              end
              if neg then
                n = (-n)
              end
              return n
            end;
            
            function reverseStr(s)
              local out = ""
              local i = ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s) - 1)
                while (i >= 0) do
                  out = (out .. string.sub(s, (i + 1), (i + 1)))
                  i = (i - 1)
                end
                return out
              end;
              
              function pad(s, w)
                local out = s
                while ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(out) < w) do
                    out = (" " .. out)
                  end
                  return out
                end;
                
                function findFirst(list)
                  local i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(list)) do
                      if (list[i + 1] > 10000000) then
                        return {list[i + 1], i}
                      end
                      i = (i + 1)
                    end
                    return {(-1), (-1)}
                  end;
                  
                  function main()
                    local ranges = {{0, 0}, {101, 909}, {11011, 99099}, {1110111, 9990999}, {111101111, 119101111}}
                    local cyclops = {}
                    for _, r in ipairs(ranges) do
                      local start = r[0 + 1]
                      local _end = r[1 + 1]
                      local numDigits = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' or type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(tostring(start))
                        local center = (numDigits // 2)
                        local i = start
                        while (i <= _end) do
                          local ds = digits(i)
                          if (ds[center + 1] == 0) then
                            local count = 0
                            for _, d in ipairs(ds) do
                              if (d == 0) then
                                count = (count + 1)
                              end
                            end
                            if (count == 1) then
                              cyclops = (function(lst, item)
                              local res = {table.unpack(lst)}
                              table.insert(res, item)
                              return res
                            end)(cyclops, i)
                          end
                        end
                        i = (i + 1)
                      end
                    end
                    print("The first 50 cyclops numbers are:")
                    local idx = 0
                    while (idx < 50) do
                      print((pad(commatize(cyclops[idx + 1]), 6) .. " "))
                      idx = (idx + 1)
                      if ((idx % 10) == 0) then
                        print("\n")
                      end
                    end
                    local fi = findFirst(cyclops)
                    print(((("\nFirst such number > 10 million is " .. commatize(fi[0 + 1])) .. " at zero-based index ") .. commatize(fi[1 + 1])))
                    local primes = {}
                    for _, n in ipairs(cyclops) do
                      if isPrime(n) then
                        primes = (function(lst, item)
                        local res = {table.unpack(lst)}
                        table.insert(res, item)
                        return res
                      end)(primes, n)
                    end
                  end
                  print("\n\nThe first 50 prime cyclops numbers are:")
                  idx = 0
                  while (idx < 50) do
                    print((pad(commatize(primes[idx + 1]), 6) .. " "))
                    idx = (idx + 1)
                    if ((idx % 10) == 0) then
                      print("\n")
                    end
                  end
                  local fp = findFirst(primes)
                  print(((("\nFirst such number > 10 million is " .. commatize(fp[0 + 1])) .. " at zero-based index ") .. commatize(fp[1 + 1])))
                  local bpcyclops = {}
                  local ppcyclops = {}
                  for _, p in ipairs(primes) do
                    local ps = tostring(p)
                    local splitp = _split(ps, "0")
                    local noMiddle = _parseIntStr((splitp[0 + 1] .. splitp[1 + 1]))
                    if isPrime(noMiddle) then
                      bpcyclops = (function(lst, item)
                      local res = {table.unpack(lst)}
                      table.insert(res, item)
                      return res
                    end)(bpcyclops, p)
                  end
                  if (ps == reverseStr(ps)) then
                    ppcyclops = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(ppcyclops, p)
                end
              end
              print("\n\nThe first 50 blind prime cyclops numbers are:")
              idx = 0
              while (idx < 50) do
                print((pad(commatize(bpcyclops[idx + 1]), 6) .. " "))
                idx = (idx + 1)
                if ((idx % 10) == 0) then
                  print("\n")
                end
              end
              local fb = findFirst(bpcyclops)
              print(((("\nFirst such number > 10 million is " .. commatize(fb[0 + 1])) .. " at zero-based index ") .. commatize(fb[1 + 1])))
              print("\n\nThe first 50 palindromic prime cyclops numbers are:")
              idx = 0
              while (idx < 50) do
                print((pad(commatize(ppcyclops[idx + 1]), 9) .. " "))
                idx = (idx + 1)
                if ((idx % 8) == 0) then
                  print("\n")
                end
              end
              local fpp = findFirst(ppcyclops)
              print(((("\n\nFirst such number > 10 million is " .. commatize(fpp[0 + 1])) .. " at zero-based index ") .. commatize(fpp[1 + 1])))
            end;
