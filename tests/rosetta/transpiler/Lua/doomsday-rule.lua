-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _parseIntStr(str)
if type(str) == 'table' then
  str = table.concat(str)
end
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function parseIntStr(str)
    local i = 0
    local neg = false
    if (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(str) > 0) and (string.sub(str, (0 + 1), 1) == "-")) then
          neg = true
          i = 1
        end
        local n = 0
        local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(str)) do
              n = ((n * 10) + digits[string.sub(str, (i + 1), (i + 1))])
              i = (i + 1)
            end
            if neg then
              n = (-n)
            end
            return n
          end
          function anchorDay(y)
            return ((((2 + (5 * (y % 4))) + (4 * (y % 100))) + (6 * (y % 400))) % 7)
          end
          function isLeapYear(y)
            return (((y % 4) == 0) and (((y % 100) ~= 0) or ((y % 400) == 0)))
          end
          function main()
            local dates = {"1800-01-06", "1875-03-29", "1915-12-07", "1970-12-23", "2043-05-14", "2077-02-12", "2101-04-02"}
            print("Days of week given by Doomsday rule:")
            for _, date in ipairs(dates) do
              local y = _parseIntStr(string.sub(date, (0 + 1), 4))
              local m = (_parseIntStr(string.sub(date, (5 + 1), 7)) - 1)
              local d = _parseIntStr(string.sub(date, (8 + 1), 10))
              local a = anchorDay(y)
              local f = firstDaysCommon[m + 1]
              if isLeapYear(y) then
                f = firstDaysLeap[m + 1]
              end
              local w = (d - f)
              if (w < 0) then
                w = (7 + w)
              end
              local dow = (((tonumber(a) or 0) + (tonumber(w) or 0)) % 7)
              print(((tostring(date) .. " -> ") .. days[dow + 1]))
            end
          end
          days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
          firstDaysCommon = {3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5}
          firstDaysLeap = {4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5}
          main()
          local _bench_end = _now()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
