-- Generated by Mochi v0.10.41 on 2025-07-26 20:06 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  vals = {0, 2, 4, 6, 30, 32, 34, 36, 40, 42, 44, 46, 50, 52, 54, 56, 60, 62, 64, 66}
  billions = {0, 2, 4, 6}
  function ebanNumbers(start, stop)
    local nums = {}
    for _, b in ipairs(billions) do
      for _, m in ipairs(vals) do
        for _, t in ipairs(vals) do
          for _, r in ipairs(vals) do
            local n = ((tonumber(((tonumber(((tonumber((b * 1000000000)) or 0) + (tonumber((m * 1000000)) or 0))) or 0) + (tonumber((t * 1000)) or 0))) or 0) + (tonumber(r) or 0))
            if ((n >= start) and (n <= stop)) then
              nums = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(nums, n)
          end
        end
      end
    end
  end
  return nums
end
function countEban(start, stop)
  local count = 0
  for _, b in ipairs(billions) do
    for _, m in ipairs(vals) do
      for _, t in ipairs(vals) do
        for _, r in ipairs(vals) do
          local n = ((tonumber(((tonumber(((tonumber((b * 1000000000)) or 0) + (tonumber((m * 1000000)) or 0))) or 0) + (tonumber((t * 1000)) or 0))) or 0) + (tonumber(r) or 0))
          if ((n >= start) and (n <= stop)) then
            count = (count + 1)
          end
        end
      end
    end
  end
  return count
end
function main()
  local ranges = {{2, 1000, true}, {1000, 4000, true}, {2, 10000, false}, {2, 100000, false}, {2, 1000000, false}, {2, 10000000, false}, {2, 100000000, false}, {2, 1000000000, false}}
  for _, rg in ipairs(ranges) do
    local start = math.floor(rg[0 + 1])
    local stop = math.floor(rg[1 + 1])
    local show = rg[2 + 1]
    if (start == 2) then
      print((("eban numbers up to and including " .. tostring(stop)) .. ":"))
    else
      print((((("eban numbers between " .. tostring(start)) .. " and ") .. tostring(stop)) .. " (inclusive):"))
    end
    if show then
      local nums = ebanNumbers(start, stop)
      local line = ""
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(nums)) do
          line = ((tostring(line) .. tostring(nums[i + 1])) .. " ")
          i = (i + 1)
        end
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(line) > 0) then
            print(string.sub(line, 0 + 1, ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(line) - 1)))
            end
          end
          local c = countEban(start, stop)
          print((("count = " .. tostring(c)) .. "\n"))
        end
      end
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
