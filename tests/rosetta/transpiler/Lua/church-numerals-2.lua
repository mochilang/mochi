-- Generated by Mochi v0.10.42 on 2025-07-28 08:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function id(x)
    return x
  end
  function compose(f, g)
    return function(x)
    return f(g(x))
  end
end
function zero()
  return function(f)
  return id
end
end
function one()
  return id
end
function succ(n)
  return function(f)
  return compose(f, n(f))
end
end
function plus(m, n)
  return function(f)
  return compose(m(f), n(f))
end
end
function mult(m, n)
  return compose(m, n)
end
function exp(m, n)
  return n(m)
end
function toInt(x)
  local counter = 0
  local function fCounter(f)
  counter = (counter + 1)
  return f
end
x(fCounter)(id)
return counter
end
function toStr(x)
  local s = ""
  local function fCounter(f)
  s = (s .. "|")
  return f
end
x(fCounter)(id)
return s
end
function main()
  print(("zero = " .. tostring(toInt(zero()))))
  local onev = one()
  print(("one = " .. tostring(toInt(onev))))
  local two = succ(succ(zero()))
  print(("two = " .. tostring(toInt(two))))
  local three = plus(onev, two)
  print(("three = " .. tostring(toInt(three))))
  local four = mult(two, two)
  print(("four = " .. tostring(toInt(four))))
  local eight = exp(two, three)
  print(("eight = " .. tostring(toInt(eight))))
  print(("toStr(four) = " .. toStr(four)))
end
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
