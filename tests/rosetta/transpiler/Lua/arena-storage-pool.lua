-- Generated by Mochi v0.10.40 on 2025-07-25 17:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function poolPut(p, x)
    return (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(p, x)
end
function poolGet(p)
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(p) == 0) then
      print("pool empty")
      return {__name = "GenType1", __order = {"pool", "val"}, pool = p, val = 0}
    end
    local idx = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(p) - 1)
      local v = p[idx + 1]
      p = (function(lst,s,e)
      local r={}
      for i=s+1,e do
        r[#r+1]=lst[i]
      end
      return r
    end)(p, 0, idx)
    return {__name = "GenType2", __order = {"pool", "val"}, pool = p, val = v}
  end
  function clearPool(p)
    return {}
  end
  function main()
    local pool = {}
    local i = 1
    local j = 2
    print(tostring((i + j)))
    pool = poolPut(pool, i)
    pool = poolPut(pool, j)
    i = 0
    j = 0
    local res1 = poolGet(pool)
    pool = res1.pool
    i = math.floor(res1.val)
    local res2 = poolGet(pool)
    pool = res2.pool
    j = math.floor(res2.val)
    i = 4
    j = 5
    print(tostring((i + j)))
    pool = poolPut(pool, i)
    pool = poolPut(pool, j)
    i = 0
    j = 0
    pool = clearPool(pool)
    local res3 = poolGet(pool)
    pool = res3.pool
    i = math.floor(res3.val)
    local res4 = poolGet(pool)
    pool = res4.pool
    j = math.floor(res4.val)
    i = 7
    j = 8
    print(tostring((i + j)))
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
