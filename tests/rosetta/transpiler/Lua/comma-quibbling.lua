-- Generated by Mochi v0.10.42 on 2025-07-28 08:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function quibble(items)
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(items)
        if (n == 0) then
          return "{}"
        else
          if (n == 1) then
            return (("{" .. items[0 + 1]) .. "}")
          else
            if (n == 2) then
              return (((("{" .. items[0 + 1]) .. " and ") .. items[1 + 1]) .. "}")
            else
              local prefix = ""
              for i = 0, (n - 1) - 1 do
                if (i == (n - 1)) then
                  break
                end
                if (i > 0) then
                  prefix = (prefix .. ", ")
                end
                prefix = (prefix .. items[i + 1])
              end
              return (((("{" .. prefix) .. " and ") .. items[(n - 1) + 1]) .. "}")
            end
          end
        end
      end
      function main()
        print(quibble({}))
        print(quibble({"ABC"}))
        print(quibble({"ABC", "DEF"}))
        print(quibble({"ABC", "DEF", "G", "H"}))
      end
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
