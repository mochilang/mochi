-- Generated by Mochi v0.10.39 on 2025-07-24 16:12 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function toUnsigned16(n)
  local u = n
  if (u < 0) then
    u = (u + 65536)
  end
  return (u % 65536)
end;

function bin16(n)
  local u = toUnsigned16(n)
  local bits = ""
  local mask = 32768
  for i = 0, 16 - 1 do
    if (u >= mask) then
      bits = (bits .. "1")
      u = (u - mask)
    else
      bits = (bits .. "0")
    end
    mask = math.floor((mask // 2))
  end
  return bits
end;

function bit_and(a, b)
  local ua = toUnsigned16(a)
  local ub = toUnsigned16(b)
  local res = 0
  local bit = 1
  for i = 0, 16 - 1 do
    if (((ua % 2) == 1) and ((ub % 2) == 1)) then
      res = (res + bit)
    end
    ua = math.floor((ua // 2))
    ub = math.floor((ub // 2))
    bit = (bit * 2)
  end
  return res
end;

function bit_or(a, b)
  local ua = toUnsigned16(a)
  local ub = toUnsigned16(b)
  local res = 0
  local bit = 1
  for i = 0, 16 - 1 do
    if (((ua % 2) == 1) or ((ub % 2) == 1)) then
      res = (res + bit)
    end
    ua = math.floor((ua // 2))
    ub = math.floor((ub // 2))
    bit = (bit * 2)
  end
  return res
end;

function bit_xor(a, b)
  local ua = toUnsigned16(a)
  local ub = toUnsigned16(b)
  local res = 0
  local bit = 1
  for i = 0, 16 - 1 do
    local abit = (ua % 2)
    local bbit = (ub % 2)
    if (((abit == 1) and (bbit == 0)) or ((abit == 0) and (bbit == 1))) then
      res = (res + bit)
    end
    ua = math.floor((ua // 2))
    ub = math.floor((ub // 2))
    bit = (bit * 2)
  end
  return res
end;

function bit_not(a)
  local ua = toUnsigned16(a)
  return (65535 - ua)
end;

function shl(a, b)
  local ua = toUnsigned16(a)
  local i = 0
  while (i < b) do
    ua = ((ua * 2) % 65536)
    i = (i + 1)
  end
  return ua
end;

function shr(a, b)
  local ua = toUnsigned16(a)
  local i = 0
  while (i < b) do
    ua = math.floor((ua // 2))
    i = (i + 1)
  end
  return ua
end;

function las(a, b)
  return shl(a, b)
end;

function ras(a, b)
  local val = a
  local i = 0
  while (i < b) do
    if (val >= 0) then
      val = math.floor((val // 2))
    else
      val = math.floor(((val - 1) // 2))
    end
    i = (i + 1)
  end
  return toUnsigned16(val)
end;

function rol(a, b)
  local ua = toUnsigned16(a)
  local left = shl(ua, b)
  local right = shr(ua, (16 - b))
  return toUnsigned16((left + right))
end;

function ror(a, b)
  local ua = toUnsigned16(a)
  local right = shr(ua, b)
  local left = shl(ua, (16 - b))
  return toUnsigned16((left + right))
end;

function bitwise(a, b)
  print(("a:   " .. bin16(a)))
  print(("b:   " .. bin16(b)))
  print(("and: " .. bin16(bit_and(a, b))))
  print(("or:  " .. bin16(bit_or(a, b))))
  print(("xor: " .. bin16(bit_xor(a, b))))
  print(("not: " .. bin16(bit_not(a))))
  if (b < 0) then
    print("Right operand is negative, but all shifts require an unsigned right operand (shift distance).")
    return _nil
  end
  print(("shl: " .. bin16(shl(a, b))))
  print(("shr: " .. bin16(shr(a, b))))
  print(("las: " .. bin16(las(a, b))))
  print(("ras: " .. bin16(ras(a, b))))
  print(("rol: " .. bin16(rol(a, b))))
  print(("ror: " .. bin16(ror(a, b))))
end;

bitwise((0 - 460), 6);
