-- Generated by Mochi v0.10.39 on 2025-07-24 16:17 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function sameDigits(n, b)
  local f = (n % b)
  n = math.floor((n // b))
  while (n > 0) do
    if ((n % b) ~= f) then
      return false
    end
    n = math.floor((n // b))
  end
  return true
end;

function isBrazilian(n)
  if (n < 7) then
    return false
  end
  if (((n % 2) == 0) and (n >= 8)) then
    return true
  end
  local b = 2
  while (b < (n - 1)) do
    if sameDigits(n, b) then
      return true
    end
    b = (b + 1)
  end
  return false
end;

function isPrime(n)
  if (n < 2) then
    return false
  end
  if ((n % 2) == 0) then
    return (n == 2)
  end
  if ((n % 3) == 0) then
    return (n == 3)
  end
  local d = 5
  while ((d * d) <= n) do
    if ((n % d) == 0) then
      return false
    end
    d = (d + 2)
    if ((n % d) == 0) then
      return false
    end
    d = (d + 4)
  end
  return true
end;

function main()
  local kinds = {" ", " odd ", " prime "}
  for _, kind in ipairs(kinds) do
    print((("First 20" .. tostring(kind)) .. "Brazilian numbers:"))
    local c = 0
    local n = 7
    while true do
      if isBrazilian(n) then
        print((tostring(n) .. " "))
        c = (c + 1)
        if (c == 20) then
          print("\n")
          break
        end
      end
      if (kind == " ") then
        n = (n + 1)
      else
        if (kind == " odd ") then
          n = (n + 2)
        else
          while true do
            n = (n + 2)
            if isPrime(n) then
              break
            end
          end
        end
      end
    end
  end
  local n = 7
  local c = 0
  while (c < 100000) do
    if isBrazilian(n) then
      c = (c + 1)
    end
    n = (n + 1)
  end
  print(("The 100,000th Brazilian number: " .. tostring((n - 1))))
end;

main();
