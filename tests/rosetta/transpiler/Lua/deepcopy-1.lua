-- Generated by Mochi v0.10.40 on 2025-07-25 17:25 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function copyList(src)
    local out = {}
    for _, v in ipairs(src) do
      out = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(out, v)
  end
  return out
end
function copyMap(src)
  local out = {}
  for k in pairs(src) do
    out[k] = src[k]
  end
  return out
end
function deepcopy(c)
  return {i = c.i, s = c.s, b = copyList(c.b), m = copyMap(c.m)}
end
function cdsStr(c)
  local bs = "["
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(c.b)) do
      bs = (bs .. tostring(c.b[i + 1]))
      if (i < ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(c.b) - 1)) then
          bs = (bs .. " ")
        end
        i = (i + 1)
      end
      bs = (bs .. "]")
      local ms = "map["
      local first = true
      for k in pairs(c.m) do
        if (not first) then
          ms = (ms .. " ")
        end
        ms = (((ms .. tostring(k)) .. ":") .. tostring(c.m[k]))
        first = false
      end
      ms = (ms .. "]")
      return (((((((("{" .. tostring(c.i)) .. " ") .. c.s) .. " ") .. bs) .. " ") .. ms) .. "}")
    end
    c1 = {i = 1, s = "one", b = {117, 110, 105, 116}, m = {[1] = true}}
    c2 = deepcopy((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c1))
    print(cdsStr(c1))
    print(cdsStr(c2))
    c1 = {i = 0, s = "nil", b = {122, 101, 114, 111}, m = {[1] = false}}
    print(cdsStr(c1))
    print(cdsStr(c2))
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
