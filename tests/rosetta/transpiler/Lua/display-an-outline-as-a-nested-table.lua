-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _split(s, sep)
local t = {}
local pattern = string.format("([^%s]+)", sep)
string.gsub(s, pattern, function(c) t[#t+1] = c end)
return t
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function split(s, sep)
    local out = {}
    local cur = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if (((i + (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(sep)) <= (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(s)) and (_substring(s, i, (i + (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(sep))) == sep)) then
                        out = (function(lst, item)
                        local res = {table.unpack(lst)}
                        table.insert(res, item)
                        return res
                      end)(out, cur)
                      cur = ""
                      i = (i + (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(sep))
                        else
                          cur = (cur .. _substring(s, i, (i + 1)))
                          i = (i + 1)
                        end
                      end
                      out = (function(lst, item)
                      local res = {table.unpack(lst)}
                      table.insert(res, item)
                      return res
                    end)(out, cur)
                    return out
                  end
                  function join(xs, sep)
                    local res = ""
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(xs)) do
                          if (i > 0) then
                            res = (res .. sep)
                          end
                          res = (res .. xs[i + 1])
                          i = (i + 1)
                        end
                        return res
                      end
                      function trimLeftSpaces(s)
                        local i = 0
                        while ((i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(s)) and (string.sub(s, (i + 1), (i + 1)) == " ")) do
                              i = (i + 1)
                            end
                            return string.sub(s, (i + 1), (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(s))
                              end
                              function makeIndent(outline, tab)
                                local lines = _split(outline, "\n")
                                local nodes = {}
                                for _, line in ipairs(lines) do
                                  local line2 = trimLeftSpaces(line)
                                  local level = (((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(line) - (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(line2)) // tab)
                                          nodes = (function(lst, item)
                                          local res = {table.unpack(lst)}
                                          table.insert(res, item)
                                          return res
                                        end)(nodes, {__name = "GenType1", __order = {"level", "name"}, level = level, name = line2})
                                      end
                                      return nodes
                                    end
                                    function toNest(nodes, start, level, n)
                                      if (level == 0) then
                                        n.name = nodes[0 + 1].name
                                      end
                                      local i = (start + 1)
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(nodes)) do
                                            local node = nodes[i + 1]
                                            local lev = math.floor(node.level)
                                            if (lev == (level + 1)) then
                                              local child = {__name = "GenType2", __order = {"name", "children"}, name = node.name, children = {}}
                                              toNest(nodes, i, (level + 1), child)
                                              local cs = n.children
                                              cs = (function(lst, item)
                                              local res = {table.unpack(lst)}
                                              table.insert(res, item)
                                              return res
                                            end)(cs, child)
                                            n.children = cs
                                          else
                                            if (lev <= level) then
                                              return
                                            end
                                          end
                                          i = (i + 1)
                                        end
                                      end
                                      function countLeaves(n)
                                        local kids = n.children
                                        if ((function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(kids) == 0) then
                                              return 1
                                            end
                                            local total = 0
                                            for _, k in ipairs(kids) do
                                              total = (total + countLeaves(k))
                                            end
                                            return total
                                          end
                                          function nodesByDepth(root, depth)
                                            local levels = {}
                                            local current = {root}
                                            local d = 0
                                            while (d < depth) do
                                              levels = (function(lst, item)
                                              local res = {table.unpack(lst)}
                                              table.insert(res, item)
                                              return res
                                            end)(levels, current)
                                            local next = {}
                                            for _, n in ipairs(current) do
                                              local kids = n.children
                                              for _, k in ipairs(kids) do
                                                next = (function(lst, item)
                                                local res = {table.unpack(lst)}
                                                table.insert(res, item)
                                                return res
                                              end)(next, k)
                                            end
                                          end
                                          current = next
                                          d = (d + 1)
                                        end
                                        return levels
                                      end
                                      function toMarkup(n, cols, depth)
                                        local lines = {}
                                        lines = (function(lst, item)
                                        local res = {table.unpack(lst)}
                                        table.insert(res, item)
                                        return res
                                      end)(lines, "{| class=\"wikitable\" style=\"text-align: center;\"")
                                      local l1 = "|-"
                                      lines = (function(lst, item)
                                      local res = {table.unpack(lst)}
                                      table.insert(res, item)
                                      return res
                                    end)(lines, l1)
                                    local span = countLeaves(n)
                                    lines = (function(lst, item)
                                    local res = {table.unpack(lst)}
                                    table.insert(res, item)
                                    return res
                                  end)(lines, ((((("| style=\"background: " .. cols[0 + 1]) .. " \" colSpan=") .. tostring(span)) .. " | ") .. tostring(n.name)))
                                  lines = (function(lst, item)
                                  local res = {table.unpack(lst)}
                                  table.insert(res, item)
                                  return res
                                end)(lines, l1)
                                local lvls = nodesByDepth(n, depth)
                                local lvl = 1
                                while (lvl < depth) do
                                  local nodes = lvls[lvl + 1]
                                  if ((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(nodes) == 0) then
                                        lines = (function(lst, item)
                                        local res = {table.unpack(lst)}
                                        table.insert(res, item)
                                        return res
                                      end)(lines, "|  |")
                                    else
                                      local idx = 0
                                      while (idx < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(nodes)) do
                                            local node = nodes[idx + 1]
                                            span = countLeaves(node)
                                            local col = lvl
                                            if (lvl == 1) then
                                              col = (idx + 1)
                                            end
                                            if (col >= (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(cols)) then
                                                  col = ((function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(cols) - 1)
                                                    end
                                                    local cell = ((((("| style=\"background: " .. cols[col + 1]) .. " \" colspan=") .. tostring(span)) .. " | ") .. tostring(node.name))
                                                    lines = (function(lst, item)
                                                    local res = {table.unpack(lst)}
                                                    table.insert(res, item)
                                                    return res
                                                  end)(lines, cell)
                                                  idx = (idx + 1)
                                                end
                                              end
                                              if (lvl < (depth - 1)) then
                                                lines = (function(lst, item)
                                                local res = {table.unpack(lst)}
                                                table.insert(res, item)
                                                return res
                                              end)(lines, l1)
                                            end
                                            lvl = (lvl + 1)
                                          end
                                          lines = (function(lst, item)
                                          local res = {table.unpack(lst)}
                                          table.insert(res, item)
                                          return res
                                        end)(lines, "|}")
                                        return join(lines, "\n")
                                      end
                                      function main()
                                        local outline = ((((((((((("Display an outline as a nested table.\n" .. "    Parse the outline to a tree,\n") .. "        measuring the indent of each line,\n") .. "        translating the indentation to a nested structure,\n") .. "        and padding the tree to even depth.\n") .. "    count the leaves descending from each node,\n") .. "        defining the width of a leaf as 1,\n") .. "        and the width of a parent node as a sum.\n") .. "            (The sum of the widths of its children)\n") .. "    and write out a table with 'colspan' values\n") .. "        either as a wiki table,\n") .. "        or as HTML.")
                                        local yellow = "#ffffe6;"
                                        local orange = "#ffebd2;"
                                        local green = "#f0fff0;"
                                        local blue = "#e6ffff;"
                                        local pink = "#ffeeff;"
                                        local cols = {yellow, orange, green, blue, pink}
                                        local nodes = makeIndent(outline, 4)
                                        local n = {__name = "GenType3", __order = {"name", "children"}, name = "", children = {}}
                                        toNest(nodes, 0, 0, n)
                                        print(toMarkup(n, cols, 4))
                                        print("\n")
                                        local outline2 = ((((((((((((("Display an outline as a nested table.\n" .. "    Parse the outline to a tree,\n") .. "        measuring the indent of each line,\n") .. "        translating the indentation to a nested structure,\n") .. "        and padding the tree to even depth.\n") .. "    count the leaves descending from each node,\n") .. "        defining the width of a leaf as 1,\n") .. "        and the width of a parent node as a sum.\n") .. "            (The sum of the widths of its children)\n") .. "            Propagating the sums upward as necessary.\n") .. "    and write out a table with 'colspan' values\n") .. "        either as a wiki table,\n") .. "        or as HTML.\n") .. "    Optionally add color to the nodes.")
                                        local cols2 = {blue, yellow, orange, green, pink}
                                        local nodes2 = makeIndent(outline2, 4)
                                        local n2 = {__name = "GenType4", __order = {"name", "children"}, name = "", children = {}}
                                        toNest(nodes2, 0, 0, n2)
                                        print(toMarkup(n2, cols2, 4))
                                      end
                                      main()
                                      local _bench_end = _now()
                                      collectgarbage()
                                      local _bench_end_mem = collectgarbage('count') * 1024
                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                    end;
