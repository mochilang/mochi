-- Generated by Mochi v0.10.42 on 2025-07-27 16:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
function hailstone(n)
  local seq = {}
  local x = n
  seq = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(seq, x)
while (x > 1) do
  if ((x % 2) == 0) then
    x = (x // 2)
  else
    x = ((3 * x) + 1)
  end
  seq = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(seq, x)
end
return seq
end;

function listString(xs)
  local s = "["
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(xs)) do
      s = (s .. tostring(xs[i + 1]))
      if (i < ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs) - 1)) then
          s = (s .. " ")
        end
        i = (i + 1)
      end
      s = (s .. "]")
      return s
    end;
    
    function libMain()
      local seq = hailstone(27)
      print("")
      print("Hailstone sequence for the number 27:")
      print((("  has " .. tostring((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(seq))) .. " elements"))
        print(("  starts with " .. listString((function(lst,s,e)
        local r={}
        for i=s+1,e do
          r[#r+1]=lst[i]
        end
        return r
      end)(seq, 0, 4))))
      print(("  ends with " .. listString((function(lst,s,e)
      local r={}
      for i=s+1,e do
        r[#r+1]=lst[i]
      end
      return r
    end)(seq, ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(seq) - 4), (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(seq)))))
        local longest = 0
        local length = 0
        local i = 1
        while (i < 100000) do
          local l = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(hailstone(i))
            if (l > length) then
              longest = i
              length = l
            end
            i = (i + 1)
          end
          print("")
          print((((tostring(longest) .. " has the longest Hailstone sequence, its length being ") .. tostring(length)) .. "."))
        end;
        
        libMain();
