-- Generated by Mochi v0.10.42 on 2025-07-27 21:41 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function sieve(limit)
    local primes = {}
    local i = 0
    while (i < limit) do
      primes = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(primes, true)
    i = (i + 1)
  end
  primes[0 + 1] = false
  primes[1 + 1] = false
  local p = 2
  while ((p * p) < limit) do
    if primes[p + 1] then
      local k = (p * p)
      while (k < limit) do
        primes[k + 1] = false
        k = (k + p)
      end
    end
    p = (p + 1)
  end
  return primes
end
function goldbachCount(primes, n)
  local c = 0
  local i = 1
  while (i <= (n // 2)) do
    if (primes[i + 1] and primes[(n - i) + 1]) then
      c = (c + 1)
    end
    i = (i + 1)
  end
  return c
end
function pad(n)
  if (n < 10) then
    return ("  " .. tostring(n))
  end
  if (n < 100) then
    return (" " .. tostring(n))
  end
  return tostring(n)
end
function main()
  local primes = sieve(1000)
  print("The first 100 Goldbach numbers:")
  local line = ""
  local n = 2
  local count = 0
  while (count < 100) do
    local v = goldbachCount(primes, (2 * n))
    line = ((line .. pad(v)) .. " ")
    count = (count + 1)
    n = (n + 1)
    if ((count % 10) == 0) then
      print(_substring(line, 0, ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(line) - 1)))
          line = ""
        end
      end
      local val = goldbachCount(primes, 1000)
      print(("\nThe 1,000th Goldbach number = " .. tostring(val)))
    end
    main()
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
