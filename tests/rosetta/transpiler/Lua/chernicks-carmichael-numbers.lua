-- Generated by Mochi v0.10.39 on 2025-07-24 22:55 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function isPrime(n)
  if (n < 2) then
    return false
  end
  if ((n % 2) == 0) then
    return (n == 2)
  end
  if ((n % 3) == 0) then
    return (n == 3)
  end
  local d = 5
  while ((d * d) <= n) do
    if ((n % d) == 0) then
      return false
    end
    d = (d + 2)
    if ((n % d) == 0) then
      return false
    end
    d = (d + 4)
  end
  return true
end;

function bigTrim(a)
  local n = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(a)
    while ((n > 1) and (a[(n - 1) + 1] == 0)) do
      a = (function(lst,s,e)
      local r={}
      for i=s+1,e do
        r[#r+1]=lst[i]
      end
      return r
    end)(a, 0, (n - 1))
    n = (n - 1)
  end
  return a
end;

function bigFromInt(x)
  if (x == 0) then
    return {0}
  end
  local digits = {}
  local n = x
  while (n > 0) do
    digits = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(digits, (n % 10))
  n = (n // 10)
end
return digits
end;

function bigMulSmall(a, m)
  if (m == 0) then
    return {0}
  end
  local res = {}
  local carry = 0
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(a)) do
      local prod = ((a[i + 1] * m) + carry)
      res = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(res, (prod % 10))
    carry = (prod // 10)
    i = (i + 1)
  end
  while (carry > 0) do
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, (carry % 10))
  carry = (carry // 10)
end
return bigTrim(res)
end;

function bigToString(a)
  local s = ""
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(a) - 1)
    while (i >= 0) do
      s = (s .. tostring(a[i + 1]))
      i = (i - 1)
    end
    return s
  end;
  
  function pow2(k)
    local r = 1
    local i = 0
    while (i < k) do
      r = (r * 2)
      i = (i + 1)
    end
    return r
  end;
  
  function ccFactors(n, m)
    local p = ((6 * m) + 1)
    if (not isPrime(p)) then
      return {}
    end
    local prod = bigFromInt(p)
    p = ((12 * m) + 1)
    if (not isPrime(p)) then
      return {}
    end
    prod = bigMulSmall(prod, p)
    local i = 1
    while (i <= (n - 2)) do
      p = (((pow2(i) * 9) * m) + 1)
      if (not isPrime(p)) then
        return {}
      end
      prod = bigMulSmall(prod, p)
      i = (i + 1)
    end
    return prod
  end;
  
  function ccNumbers(start, _end)
    local n = start
    while (n <= _end) do
      local m = 1
      if (n > 4) then
        m = pow2((n - 4))
      end
      while true do
        local num = ccFactors(n, m)
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(num) > 0) then
            print(((("a(" .. tostring(n)) .. ") = ") .. bigToString(num)))
            break
          end
          if (n <= 4) then
            m = (m + 1)
          else
            m = (m + pow2((n - 4)))
          end
        end
        n = (n + 1)
      end
    end;
    
    ccNumbers(3, 9);
