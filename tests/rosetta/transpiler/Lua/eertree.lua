-- Generated by Mochi v0.10.42 on 2025-07-28 00:49 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function newNode(len)
    return {__name = "GenType1", __order = {"length", "edges", "suffix"}, length = len, edges = {}, suffix = 0}
  end
  function eertree(s)
    local tree = {}
    tree = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(tree, {__name = "GenType2", __order = {"length", "suffix", "edges"}, length = 0, suffix = ODD_ROOT, edges = {}})
  tree = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(tree, {__name = "GenType3", __order = {"length", "suffix", "edges"}, length = (-1), suffix = ODD_ROOT, edges = {}})
local suffix = ODD_ROOT
local i = 0
while (i < (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      local c = string.sub(s, (i + 1), (i + 1))
      local n = suffix
      local k = 0
      while true do
        k = math.floor(tree[n + 1].length)
        local b = ((i - k) - 1)
        if ((b >= 0) and (string.sub(s, (b + 1), (b + 1)) == c)) then
          break
        end
        n = math.floor(tree[n + 1].suffix)
      end
      local edges = tree[n + 1].edges
      if (edges[c] ~= nil) then
        suffix = edges[c]
        i = (i + 1)
        goto __cont_1
      end
      suffix = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(tree)
          tree = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(tree, newNode((k + 2)))
        edges[c] = suffix
        tree[n + 1].edges = edges
        if (math.floor(tree[suffix + 1].length) == 1) then
          tree[suffix + 1].suffix = 0
          i = (i + 1)
          goto __cont_1
        end
        while true do
          n = math.floor(tree[n + 1].suffix)
          local b = ((i - math.floor(tree[n + 1].length)) - 1)
          if ((b >= 0) and (string.sub(s, (b + 1), (b + 1)) == c)) then
            break
          end
        end
        local en = tree[n + 1].edges
        tree[suffix + 1].suffix = en[c]
        i = (i + 1)
        ::__cont_1::
      end
      return tree
    end
    function child(tree, idx, p, acc)
      local edges = tree[idx + 1].edges
      for ch in pairs(edges) do
        local nxt = edges[ch]
        local pal = ((tostring(ch) .. p) .. tostring(ch))
        acc = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(acc, pal)
      acc = child(tree, nxt, pal, acc)
    end
    return acc
  end
  function subPalindromes(tree)
    local res = {}
    res = child(tree, EVEN_ROOT, "", res)
    local oEdges = tree[ODD_ROOT + 1].edges
    for ch in pairs(oEdges) do
      res = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(res, ch)
    res = child(tree, oEdges[ch], ch, res)
  end
  return res
end
function main()
  local tree = eertree("eertree")
  local subs = subPalindromes(tree)
  print(
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(subs))
end
EVEN_ROOT = 0
ODD_ROOT = 1
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
