-- Generated by Mochi v0.10.50 on 2025-07-30 21:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function bernoulli(n)
    local a = {}
    local m = 0
    while (m <= n) do
      a = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(a, _div(_bigrat(1), _bigrat((m + 1))))
    local j = m
    while (j >= 1) do
      a[(j - 1) + 1] = _mul(_bigrat(j), _sub(a[(j - 1) + 1], a[j + 1]))
      j = (j - 1)
    end
    m = (m + 1)
  end
  return a[0 + 1]
end
function binom(n, k)
  if ((k < 0) or (k > n)) then
    return 0
  end
  local kk = k
  if (kk > (n - kk)) then
    kk = (n - kk)
  end
  local res = 1
  local i = 0
  while (i < kk) do
    res = (res * (n - i))
    i = (i + 1)
    res = (res // i)
  end
  return res
end
function coeff(p, j)
  local base = _div(_bigrat(1), _bigrat((p + 1)))
  local c = base
  if ((j % 2) == 1) then
    c = _sub(_bigrat(0), c)
  end
  c = _mul(c, _bigrat(binom((p + 1), j)))
  c = _mul(c, bernoulli(j))
  return c
end
function main()
  local p = 0
  while (p < 10) do
    local line = (tostring(p) .. " :")
    local j = 0
    while (j <= p) do
      local c = coeff(p, j)
      if ((tostring(c.num) .. '/' .. tostring(c.den)) ~= "0/1") then
        line = (((line .. " ") .. (tostring(c.num) .. '/' .. tostring(c.den))) .. "Ã—n")
        local exp = ((p + 1) - j)
        if (exp > 1) then
          line = ((line .. "^") .. tostring(exp))
        end
      end
      j = (j + 1)
    end
    print(line)
    p = (p + 1)
  end
end
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
