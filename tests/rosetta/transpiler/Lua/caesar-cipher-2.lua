-- Generated by Mochi v0.10.39 on 2025-07-24 20:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function indexOf(s, ch)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      if (string.sub(s, i + 1, (i + 1)) == ch) then
        return i
      end
      i = (i + 1)
    end
    return (0 - 1)
  end;
  
  function ord(ch)
    local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    local lower = "abcdefghijklmnopqrstuvwxyz"
    local idx = _indexOf(upper, ch)
    if (idx >= 0) then
      return (65 + idx)
    end
    idx = _indexOf(lower, ch)
    if (idx >= 0) then
      return (97 + idx)
    end
    return 0
  end;
  
  function chr(n)
    local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    local lower = "abcdefghijklmnopqrstuvwxyz"
    if ((n >= 65) and (n < 91)) then
      return string.sub(upper, ((n - 65) + 1), (n - 64))
    end
    if ((n >= 97) and (n < 123)) then
      return string.sub(lower, ((n - 97) + 1), (n - 96))
    end
    return "?"
  end;
  
  function shiftRune(r, k)
    if ((r >= "a") and (r <= "z")) then
      return chr(((((ord(r) - 97) + k) % 26) + 97))
    end
    if ((r >= "A") and (r <= "Z")) then
      return chr(((((ord(r) - 65) + k) % 26) + 65))
    end
    return r
  end;
  
  function encipher(s, k)
    local out = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        out = (out .. shiftRune(string.sub(s, (i + 1), (i + 1)), k))
        i = (i + 1)
      end
      return out
    end;
    
    function decipher(s, k)
      return encipher(s, ((26 - (k % 26)) % 26))
    end;
    
    function main()
      local pt = "The five boxing wizards jump quickly"
      print(("Plaintext: " .. pt))
      for _, key in ipairs({0, 1, 7, 25, 26}) do
        if ((key < 1) or (key > 25)) then
          print((("Key " .. tostring(key)) .. " invalid"))
          goto __cont_1
        end
        local ct = encipher(pt, key)
        print(("Key " .. tostring(key)))
        print(("  Enciphered: " .. ct))
        print(("  Deciphered: " .. decipher(ct, key)))
        ::__cont_1::
      end
    end;
    
    main();
