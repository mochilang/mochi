-- Generated by Mochi v0.10.42 on 2025-07-27 17:23 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end
function sinApprox(x)
  local term = x
  local sum = x
  local n = 1
  while (n <= 10) do
    local denom = ((2 * n) * ((2 * n) + 1))
    term = ((((-term) * x) * x) / denom)
    sum = (sum + term)
    n = (n + 1)
  end
  return sum
end;

function cosApprox(x)
  local term = 1
  local sum = 1
  local n = 1
  while (n <= 10) do
    local denom = (((2 * n) - 1) * (2 * n))
    term = ((((-term) * x) * x) / denom)
    sum = (sum + term)
    n = (n + 1)
  end
  return sum
end;

function cis(x)
  return {re = cosApprox(x), im = sinApprox(x)}
end;

function add(a, b)
  return {re = ((tonumber(a.re) or 0) + (tonumber(b.re) or 0)), im = ((tonumber(a.im) or 0) + (tonumber(b.im) or 0))}
end;

function sub(a, b)
  return {re = (a.re - b.re), im = (a.im - b.im)}
end;

function mul(a, b)
  return {re = ((a.re * b.re) - (a.im * b.im)), im = ((tonumber((a.re * b.im)) or 0) + (tonumber((a.im * b.re)) or 0))}
end;

function ditfft2Rec(x, y, offX, offY, n, s)
  if (n == 1) then
    y[offY + 1] = {re = x[offX + 1], im = 0}
    return
  end
  ditfft2Rec(x, y, offX, offY, (n // 2), (2 * s))
  ditfft2Rec(x, y, (offX + s), (offY + (n // 2)), (n // 2), (2 * s))
  local k = 0
  while (k < (n // 2)) do
    local angle = ((((-2) * PI) * k) / n)
    local tf = mul((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cis(angle)), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(y[((offY + k) + (n // 2)) + 1]))
    local a = add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(y[(offY + k) + 1]), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(tf))
    local b = sub((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(y[(offY + k) + 1]), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(tf))
    y[(offY + k) + 1] = a
    y[((offY + k) + (n // 2)) + 1] = b
    k = (k + 1)
  end
end;

function ditfft2(x, y, n, s)
  ditfft2Rec(x, y, 0, 0, n, s)
end;

function main()
  local x = {1, 1, 1, 1, 0, 0, 0, 0}
  local y = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(x)) do
      y = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(y, {re = 0, im = 0})
    i = (i + 1)
  end
  ditfft2(x, y, (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(x), 1)
    for _, c in ipairs(y) do
      local line = pad(fmt(c.re), 8)
      if (c.im >= 0) then
        line = ((tostring(line) .. "+") .. fmt(c.im))
      else
        line = (tostring(line) .. fmt(c.im))
      end
      print(line)
    end
  end;
  
  function pad(s, w)
    local t = s
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(t) < w) do
        t = (" " .. t)
      end
      return t
    end;
    
    function fmt(x)
      local y = (floorf(((x * 10000) + 0.5)) / 10000)
      local s = tostring(y)
      local dot = _indexOf(s, ".")
      if (dot == (0 - 1)) then
        s = (s .. ".0000")
      else
        local d = (((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s) - dot) - 1)
          while (d < 4) do
            s = (s .. "0")
            d = (d + 1)
          end
        end
        return s
      end;
      
      function floorf(x)
        local y = math.floor(x)
        return y
      end;
      
      function indexOf(s, ch)
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s)) do
            if (string.sub(s, i + 1, (i + 1)) == ch) then
              return i
            end
            i = (i + 1)
          end
          return (0 - 1)
        end;
        
        PI = 3.141592653589793;
        
        main();
