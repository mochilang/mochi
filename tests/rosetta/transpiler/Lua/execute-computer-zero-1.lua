-- Generated by Mochi v0.10.42 on 2025-07-27 16:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function _parseIntStr(str)
if type(str) == 'table' then
  str = table.concat(str)
end
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function _split(s, sep)
local t = {}
local pattern = string.format("([^%s]+)", sep)
string.gsub(s, pattern, function(c) t[#t+1] = c end)
return t
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
function trim(s)
  local start = 0
  while ((start < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) and ((string.sub(s, (start + 1), (start + 1)) == " ") or (string.sub(s, (start + 1), (start + 1)) == "\t"))) do
      start = (start + 1)
    end
    local _end = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)
      while ((_end > start) and ((string.sub(s, ((_end - 1) + 1), _end) == " ") or (string.sub(s, ((_end - 1) + 1), _end) == "\t"))) do
        _end = (_end - 1)
      end
      return string.sub(s, start + 1, _end)
    end;
    
    function split(s, sep)
      local parts = {}
      local cur = ""
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if ((((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(sep) > 0) and ((i + (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(sep)) <= (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s))) and (string.sub(s, i + 1, (i + (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(sep))) == sep)) then
                    parts = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(parts, cur)
                  cur = ""
                  i = (i + (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(sep))
                  else
                    cur = (cur .. string.sub(s, i + 1, (i + 1)))
                    i = (i + 1)
                  end
                end
                parts = (function(lst, item)
                local res = {table.unpack(lst)}
                table.insert(res, item)
                return res
              end)(parts, cur)
              return parts
            end;
            
            function splitWS(s)
              local out = {}
              local cur = ""
              local i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s)) do
                  local ch = string.sub(s, i + 1, (i + 1))
                  if ((ch == " ") or (ch == "\t")) then
                    if ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(cur) > 0) then
                        out = (function(lst, item)
                        local res = {table.unpack(lst)}
                        table.insert(res, item)
                        return res
                      end)(out, cur)
                      cur = ""
                    end
                  else
                    cur = (cur .. ch)
                  end
                  i = (i + 1)
                end
                if ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(cur) > 0) then
                    out = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(out, cur)
                end
                return out
              end;
              
              function indexOf(s, ch)
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(s)) do
                    if (string.sub(s, i + 1, (i + 1)) == ch) then
                      return i
                    end
                    i = (i + 1)
                  end
                  return (-1)
                end;
                
                function parseIntStr(str)
                  local i = 0
                  local neg = false
                  if (((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(str) > 0) and (string.sub(str, (0 + 1), 1) == "-")) then
                      neg = true
                      i = 1
                    end
                    local n = 0
                    local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(str)) do
                        n = ((n * 10) + digits[string.sub(str, (i + 1), (i + 1))])
                        i = (i + 1)
                      end
                      if neg then
                        n = (-n)
                      end
                      return n
                    end;
                    
                    function parseAsm(asm)
                      local lines = _split(asm, "\n")
                      local instrs = {}
                      local labels = {}
                      local lineNum = 0
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' or type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(lines)) do
                          local line = lines[i + 1]
                          if (_indexOf(line, ";") ~= (-1)) then
                            line = string.sub(line, 0 + 1, _indexOf(line, ";"))
                          end
                          line = trim(line)
                          local label = ""
                          if (_indexOf(line, ":") ~= (-1)) then
                            local idx = _indexOf(line, ":")
                            label = trim(string.sub(line, 0 + 1, idx))
                            line = trim(string.sub(line, (idx + 1) + 1, (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' or type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(line)))
                            end
                            local opcode = ""
                            local arg = ""
                            if ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' or type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(line) > 0) then
                                local parts = splitWS(line)
                                if ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' or type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(parts) > 0) then
                                    opcode = parts[0 + 1]
                                  end
                                  if ((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' or type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(parts) > 1) then
                                      arg = parts[1 + 1]
                                    else
                                      local ops = {__name = "GenType2", __order = {"NOP", "LDA", "STA", "ADD", "SUB", "BRZ", "JMP", "STP"}, NOP = 0, LDA = 1, STA = 2, ADD = 3, SUB = 4, BRZ = 5, JMP = 6, STP = 7}
                                      if (not (ops[opcode] ~= nil)) then
                                        arg = opcode
                                        opcode = ""
                                      end
                                    end
                                  end
                                  if (label ~= "") then
                                    labels[label] = lineNum
                                  end
                                  instrs = (function(lst, item)
                                  local res = {table.unpack(lst)}
                                  table.insert(res, item)
                                  return res
                                end)(instrs, {Label = label, Opcode = opcode, Arg = arg})
                                lineNum = (lineNum + 1)
                                i = (i + 1)
                              end
                              return {__name = "GenType3", __order = {"instructions", "labels"}, instructions = instrs, labels = labels}
                            end;
                            
                            function compile(p)
                              local instrs = p.instructions
                              local labels = p.labels
                              local bytecode = {}
                              local i = 0
                              local opcodes = {__name = "GenType4", __order = {"NOP", "LDA", "STA", "ADD", "SUB", "BRZ", "JMP", "STP"}, NOP = 0, LDA = 1, STA = 2, ADD = 3, SUB = 4, BRZ = 5, JMP = 6, STP = 7}
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' or type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(instrs)) do
                                  local ins = instrs[i + 1]
                                  local arg = 0
                                  if (ins.Arg ~= "") then
                                    if (labels[ins.Arg] ~= nil) then
                                      arg = labels[ins.Arg]
                                    else
                                      arg = _parseIntStr(ins.Arg)
                                    end
                                  end
                                  local code = 0
                                  if (ins.Opcode ~= "") then
                                    code = opcodes[ins.Opcode]
                                  end
                                  bytecode = (function(lst, item)
                                  local res = {table.unpack(lst)}
                                  table.insert(res, item)
                                  return res
                                end)(bytecode, ((code * 32) + arg))
                                i = (i + 1)
                              end
                              while ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' or type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(bytecode) < 32) do
                                  bytecode = (function(lst, item)
                                  local res = {table.unpack(lst)}
                                  table.insert(res, item)
                                  return res
                                end)(bytecode, 0)
                              end
                              return bytecode
                            end;
                            
                            function floorMod(a, b)
                              local r = (a % b)
                              if (r < 0) then
                                r = (r + b)
                              end
                              return r
                            end;
                            
                            function run(bytecode)
                              local acc = 0
                              local pc = 0
                              local mem = {}
                              local i = 0
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' or type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(bytecode)) do
                                  mem = (function(lst, item)
                                  local res = {table.unpack(lst)}
                                  table.insert(res, item)
                                  return res
                                end)(mem, bytecode[i + 1])
                                i = (i + 1)
                              end
                              while (pc < 32) do
                                local op = (mem[pc + 1] // 32)
                                local arg = (mem[pc + 1] % 32)
                                pc = (pc + 1)
                                if (op == 0) then
                                  goto __cont_1
                                else
                                  if (op == 1) then
                                    acc = mem[arg + 1]
                                  else
                                    if (op == 2) then
                                      mem[arg + 1] = acc
                                    else
                                      if (op == 3) then
                                        acc = floorMod((acc + mem[arg + 1]), 256)
                                      else
                                        if (op == 4) then
                                          acc = floorMod((acc - mem[arg + 1]), 256)
                                        else
                                          if (op == 5) then
                                            if (acc == 0) then
                                              pc = arg
                                            end
                                          else
                                            if (op == 6) then
                                              pc = arg
                                            else
                                              if (op == 7) then
                                                break
                                              else
                                                break
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                                ::__cont_1::
                              end
                              return acc
                            end;
                            
                            function execute(asm)
                              local parsed = parseAsm(asm)
                              local bc = compile(parsed)
                              return run(bc)
                            end;
                            
                            function main()
                              local examples = {(((("LDA   x\n" .. "ADD   y       ; accumulator = x + y\n") .. "STP\n") .. "x:            2\n") .. "y:            2"), ((((((((((((("loop:   LDA   prodt\n" .. "        ADD   x\n") .. "        STA   prodt\n") .. "        LDA   y\n") .. "        SUB   one\n") .. "        STA   y\n") .. "        BRZ   done\n") .. "        JMP   loop\n") .. "done:   LDA   prodt   ; to display it\n") .. "        STP\n") .. "x:            8\n") .. "y:            7\n") .. "prodt:        0\n") .. "one:          1"), ((((((((((((((((("loop:   LDA   n\n" .. "        STA   temp\n") .. "        ADD   m\n") .. "        STA   n\n") .. "        LDA   temp\n") .. "        STA   m\n") .. "        LDA   count\n") .. "        SUB   one\n") .. "        BRZ   done\n") .. "        STA   count\n") .. "        JMP   loop\n") .. "done:   LDA   n       ; to display it\n") .. "        STP\n") .. "m:            1\n") .. "n:            1\n") .. "temp:         0\n") .. "count:        8       ; valid range: 1-11\n") .. "one:          1"), ((((((((((((((((((((((((((((((("start:  LDA   load\n" .. "ADD   car     ; head of list\n") .. "STA   ldcar\n") .. "ADD   one\n") .. "STA   ldcdr   ; next CONS cell\n") .. "ldcar:  NOP\n") .. "STA   value\n") .. "ldcdr:  NOP\n") .. "BRZ   done    ; 0 stands for NIL\n") .. "STA   car\n") .. "JMP   start\n") .. "done:   LDA   value   ; CAR of last CONS\n") .. "STP\n") .. "load:   LDA   0\n") .. "value:        0\n") .. "car:          28\n") .. "one:          1\n") .. "                        ; order of CONS cells\n") .. "                        ; in memory\n") .. "                        ; does not matter\n") .. "        6\n") .. "        0       ; 0 stands for NIL\n") .. "        2       ; (CADR ls)\n") .. "        26      ; (CDDR ls) -- etc.\n") .. "        5\n") .. "        20\n") .. "        3\n") .. "        30\n") .. "        1       ; value of (CAR ls)\n") .. "        22      ; points to (CDR ls)\n") .. "        4\n") .. "        24"), (((("LDA  3\n" .. "SUB  4\n") .. "STP  0\n") .. "         0\n") .. "         255"), (((("LDA  3\n" .. "SUB  4\n") .. "STP  0\n") .. "                0\n") .. "                1"), (((("LDA  3\n" .. "ADD  4\n") .. "STP  0\n") .. "                1\n") .. "                255")}
                              local i = 0
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' or type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(examples)) do
                                  local res = execute(examples[i + 1])
                                  print(tostring(res))
                                  i = (i + 1)
                                end
                              end;
                              
                              main();
