-- Generated by Mochi v0.10.42 on 2025-07-27 23:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function randOrder(seed, n)
    local next = (((seed * 1664525) + 1013904223) % 2147483647)
    return {next, (next % n)}
  end
  function randChaos(seed, n)
    local next = (((seed * 1103515245) + 12345) % 2147483647)
    return {next, (next % n)}
  end
  function main()
    local nBuckets = 10
    local initialSum = 1000
    local buckets = {}
    for i = 0, nBuckets - 1 do
      buckets = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(buckets, 0)
  end
  local i = nBuckets
  local dist = initialSum
  while (i > 0) do
    local v = (dist // i)
    i = (i - 1)
    buckets[i + 1] = v
    dist = (dist - v)
  end
  local tc0 = 0
  local tc1 = 0
  local total = 0
  local nTicks = 0
  local seedOrder = 1
  local seedChaos = 2
  print("sum  ---updates---    mean  buckets")
  local t = 0
  while (t < 5) do
    local r = randOrder(seedOrder, nBuckets)
    seedOrder = r[0 + 1]
    local b1 = r[1 + 1]
    local b2 = ((b1 + 1) % nBuckets)
    local v1 = buckets[b1 + 1]
    local v2 = buckets[b2 + 1]
    if (v1 > v2) then
      local a = math.floor(((v1 - v2) // 2))
      if (a > buckets[b1 + 1]) then
        a = buckets[b1 + 1]
      end
      buckets[b1 + 1] = (buckets[b1 + 1] - a)
      buckets[b2 + 1] = (buckets[b2 + 1] + a)
    else
      local a = math.floor(((v2 - v1) // 2))
      if (a > buckets[b2 + 1]) then
        a = buckets[b2 + 1]
      end
      buckets[b2 + 1] = (buckets[b2 + 1] - a)
      buckets[b1 + 1] = (buckets[b1 + 1] + a)
    end
    tc0 = (tc0 + 1)
    r = randChaos(seedChaos, nBuckets)
    seedChaos = r[0 + 1]
    b1 = r[1 + 1]
    b2 = ((b1 + 1) % nBuckets)
    r = randChaos(seedChaos, (buckets[b1 + 1] + 1))
    seedChaos = r[0 + 1]
    local amt = r[1 + 1]
    if (amt > buckets[b1 + 1]) then
      amt = buckets[b1 + 1]
    end
    buckets[b1 + 1] = (buckets[b1 + 1] - amt)
    buckets[b2 + 1] = (buckets[b2 + 1] + amt)
    tc1 = (tc1 + 1)
    local sum = 0
    local idx = 0
    while (idx < nBuckets) do
      sum = (sum + buckets[idx + 1])
      idx = (idx + 1)
    end
    total = ((total + tc0) + tc1)
    nTicks = (nTicks + 1)
    print(((((((((tostring(sum) .. " ") .. tostring(tc0)) .. " ") .. tostring(tc1)) .. " ") .. tostring((total // nTicks))) .. "  ") ..
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(buckets)))
    tc0 = 0
    tc1 = 0
    t = (t + 1)
  end
end
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
