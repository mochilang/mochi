-- Generated by Mochi v0.10.41 on 2025-07-26 19:27 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pad(s, width)
    local out = s
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(out) < width) do
        out = (" " .. out)
      end
      return out
    end
    function mult(n, base)
      local m = 1
      local x = n
      local b = base
      while (x > 0) do
        m = (m * (x % b))
        x = (x // b)
      end
      return m
    end
    function multDigitalRoot(n, base)
      local m = n
      local mp = 0
      local b = base
      while (m >= b) do
        m = mult(m, base)
        mp = (mp + 1)
      end
      return {mp = mp, mdr = math.floor(m)}
    end
    function main()
      local base = 10
      local size = 5
      print(((((pad("Number", 20) .. " ") .. pad("MDR", 3)) .. " ") .. pad("MP", 3)))
      local nums = {123321, 7739, 893, 899998, 3778888999, 277777788888899}
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(nums)) do
          local n = nums[i + 1]
          local r = multDigitalRoot(n, base)
          print(((((pad(tostring(n), 20) .. " ") .. pad(tostring(r.mdr), 3)) .. " ") .. pad(tostring(r.mp), 3)))
          i = (i + 1)
        end
        print("")
        local list = {}
        local idx = 0
        while (idx < base) do
          list = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(list, {})
        idx = (idx + 1)
      end
      local cnt = (size * base)
      local n = 0
      local b = base
      while (cnt > 0) do
        local r = multDigitalRoot(n, base)
        local mdr = r.mdr
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(list[mdr + 1]) < size) then
            list[mdr + 1] = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(list[mdr + 1], math.floor(n))
          cnt = (cnt - 1)
        end
        n = (n + 1)
      end
      print("MDR: First")
      local j = 0
      while (j < base) do
        print(((pad(tostring(j), 3) .. ": ") ..
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(list[j + 1])))
        j = (j + 1)
      end
    end
    main()
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
