-- Generated by Mochi v0.10.40 on 2025-07-25 20:06 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  PI = 3.141592653589793
  function conv2d(img, k)
    local h = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(img)
      local w = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(img[0 + 1])
        local n = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(k)
          local half = (n // 2)
          local out = {}
          local y = 0
          while (y < h) do
            local row = {}
            local x = 0
            while (x < w) do
              local sum = 0
              local j = 0
              while (j < n) do
                local i = 0
                while (i < n) do
                  local yy = ((y + j) - half)
                  if (yy < 0) then
                    yy = 0
                  end
                  if (yy >= h) then
                    yy = (h - 1)
                  end
                  local xx = ((x + i) - half)
                  if (xx < 0) then
                    xx = 0
                  end
                  if (xx >= w) then
                    xx = (w - 1)
                  end
                  sum = (sum + (img[yy + 1][xx + 1] * k[j + 1][i + 1]))
                  i = (i + 1)
                end
                j = (j + 1)
              end
              row = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(row, sum)
            x = (x + 1)
          end
          out = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(out, row)
        y = (y + 1)
      end
      return out
    end
    function gradient(img)
      local hx = {{(-1), 0, 1}, {(-2), 0, 2}, {(-1), 0, 1}}
      local hy = {{1, 2, 1}, {0, 0, 0}, {(-1), (-2), (-1)}}
      local gx = conv2d(img, hx)
      local gy = conv2d(img, hy)
      local h = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(img)
        local w = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(img[0 + 1])
          local out = {}
          local y = 0
          while (y < h) do
            local row = {}
            local x = 0
            while (x < w) do
              local g = ((gx[y + 1][x + 1] * gx[y + 1][x + 1]) + (gy[y + 1][x + 1] * gy[y + 1][x + 1]))
              row = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(row, g)
            x = (x + 1)
          end
          out = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(out, row)
        y = (y + 1)
      end
      return out
    end
    function threshold(g, t)
      local h = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(g)
        local w = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(g[0 + 1])
          local out = {}
          local y = 0
          while (y < h) do
            local row = {}
            local x = 0
            while (x < w) do
              if (g[y + 1][x + 1] >= t) then
                row = (function(lst, item)
                local res = {table.unpack(lst)}
                table.insert(res, item)
                return res
              end)(row, 1)
            else
              row = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(row, 0)
          end
          x = (x + 1)
        end
        out = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(out, row)
      y = (y + 1)
    end
    return out
  end
  function printMatrix(m)
    local y = 0
    while (y < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(m)) do
        local line = ""
        local x = 0
        while (x < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(m[0 + 1])) do
            line = (line .. tostring(m[y + 1][x + 1]))
            if (x < ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(m[0 + 1]) - 1)) then
                line = (line .. " ")
              end
              x = (x + 1)
            end
            print(line)
            y = (y + 1)
          end
        end
        function main()
          local img = {{0, 0, 0, 0, 0}, {0, 255, 255, 255, 0}, {0, 255, 255, 255, 0}, {0, 255, 255, 255, 0}, {0, 0, 0, 0, 0}}
          local g = gradient(img)
          local edges = threshold(g, (1020 * 1020))
          printMatrix(edges)
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
