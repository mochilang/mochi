-- Generated by Mochi v0.10.39 on 2025-07-24 20:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
PI = 3.141592653589793;

function conv2d(img, k)
  local h = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(img)
    local w = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(img[0 + 1])
      local n = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(k)
        local half = (n // 2)
        local out = {}
        local y = 0
        while (y < h) do
          local row = {}
          local x = 0
          while (x < w) do
            local sum = 0
            local j = 0
            while (j < n) do
              local i = 0
              while (i < n) do
                local yy = ((y + j) - half)
                if (yy < 0) then
                  yy = 0
                end
                if (yy >= h) then
                  yy = (h - 1)
                end
                local xx = ((x + i) - half)
                if (xx < 0) then
                  xx = 0
                end
                if (xx >= w) then
                  xx = (w - 1)
                end
                sum = (sum + (img[yy + 1][xx + 1] * k[j + 1][i + 1]))
                i = (i + 1)
              end
              j = (j + 1)
            end
            row = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(row, sum)
          x = (x + 1)
        end
        out = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(out, row)
      y = (y + 1)
    end
    return out
  end;
  
  function gradient(img)
    local hx = {{(0 - 1), 0, 1}, {(0 - 2), 0, 2}, {(0 - 1), 0, 1}}
    local hy = {{1, 2, 1}, {0, 0, 0}, {(0 - 1), (0 - 2), (0 - 1)}}
    local gx = conv2d(img, hx)
    local gy = conv2d(img, hy)
    local h = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(img)
      local w = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(img[0 + 1])
        local out = {}
        local y = 0
        while (y < h) do
          local row = {}
          local x = 0
          while (x < w) do
            local g = ((gx[y + 1][x + 1] * gx[y + 1][x + 1]) + (gy[y + 1][x + 1] * gy[y + 1][x + 1]))
            row = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(row, g)
          x = (x + 1)
        end
        out = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(out, row)
      y = (y + 1)
    end
    return out
  end;
  
  function threshold(g, t)
    local h = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(g)
      local w = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(g[0 + 1])
        local out = {}
        local y = 0
        while (y < h) do
          local row = {}
          local x = 0
          while (x < w) do
            if (g[y + 1][x + 1] >= t) then
              row = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(row, 1)
          else
            row = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(row, 0)
        end
        x = (x + 1)
      end
      out = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(out, row)
    y = (y + 1)
  end
  return out
end;

function printMatrix(m)
  local y = 0
  while (y < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(m)) do
      local line = ""
      local x = 0
      while (x < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(m[0 + 1])) do
          line = (line .. tostring(m[y + 1][x + 1]))
          if (x < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(m[0 + 1]) - 1)) then
              line = (line .. " ")
            end
            x = (x + 1)
          end
          print(line)
          y = (y + 1)
        end
      end;
      
      function main()
        local img = {{0, 0, 0, 0, 0}, {0, 255, 255, 255, 0}, {0, 255, 255, 255, 0}, {0, 255, 255, 255, 0}, {0, 0, 0, 0, 0}}
        local g = gradient(img)
        local edges = threshold(g, (1020 * 1020))
        printMatrix(edges)
      end;
      
      main();
