-- Generated by Mochi v0.10.52 on 2025-08-02 01:52 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function sqrtApprox(x)
  local guess = x
  local i = 0
  while (i < 20) do
    guess = ((guess + (x / guess)) / 2)
    i = (i + 1)
  end
  return guess
end;

function cholesky(a)
  local n = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(a)
      local l = {}
      local i = 0
      while (i < n) do
        local row = {}
        local j = 0
        while (j < n) do
          row = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(row, 0)
        j = (j + 1)
      end
      l = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(l, row)
    i = (i + 1)
  end
  i = 0
  while (i < n) do
    local j = 0
    while (j <= i) do
      local sum = a[i + 1][j + 1]
      local k = 0
      while (k < j) do
        sum = (sum - (l[i + 1][k + 1] * l[j + 1][k + 1]))
        k = (k + 1)
      end
      if (i == j) then
        l[i + 1][j + 1] = sqrtApprox(sum)
      else
        l[i + 1][j + 1] = (sum / l[j + 1][j + 1])
      end
      j = (j + 1)
    end
    i = (i + 1)
  end
  return l
end;

function printMat(m)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(m)) do
        local line = ""
        local j = 0
        while (j < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(m[i + 1])) do
              line = (line .. tostring(m[i + 1][j + 1]))
              if (j < ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(m[i + 1]) - 1)) then
                    line = (line .. " ")
                  end
                  j = (j + 1)
                end
                print(line)
                i = (i + 1)
              end
            end;
            
            function demo(a)
              print("A:")
              printMat(a)
              local l = cholesky(a)
              print("L:")
              printMat(l)
            end;
            
            demo({{25, 15, (-5)}, {15, 18, 0}, {(-5), 0, 11}});
            
            demo({{18, 22, 54, 42}, {22, 70, 86, 62}, {54, 86, 174, 134}, {42, 62, 134, 106}});
