-- Generated by Mochi v0.10.41 on 2025-07-26 20:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function listStr(xs)
    local s = "["
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(xs)) do
        s = (s .. tostring(xs[i + 1]))
        if (i < ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(xs) - 1)) then
            s = (s .. " ")
          end
          i = (i + 1)
        end
        s = (s .. "]")
        return s
      end
      function ordered(xs)
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(xs) == 0) then
            return true
          end
          local prev = xs[0 + 1]
          local i = 1
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(xs)) do
              if (xs[i + 1] < prev) then
                return false
              end
              prev = xs[i + 1]
              i = (i + 1)
            end
            return true
          end
          function outOfOrder(n)
            if (n < 2) then
              return {}
            end
            local r = {}
            while true do
              r = {}
              local i = 0
              while (i < n) do
                r = (function(lst, item)
                local res = {table.unpack(lst)}
                table.insert(res, item)
                return res
              end)(r, (_now() % 3))
              i = (i + 1)
            end
            if (not ordered(r)) then
              break
            end
          end
          return r
        end
        function sort3(a)
          local lo = 0
          local mid = 0
          local hi = ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(a) - 1)
            while (mid <= hi) do
              local v = a[mid + 1]
              if (v == 0) then
                local tmp = a[lo + 1]
                a[lo + 1] = a[mid + 1]
                a[mid + 1] = tmp
                lo = (lo + 1)
                mid = (mid + 1)
              else
                if (v == 1) then
                  mid = (mid + 1)
                else
                  local tmp = a[mid + 1]
                  a[mid + 1] = a[hi + 1]
                  a[hi + 1] = tmp
                  hi = (hi - 1)
                end
              end
            end
            return a
          end
          function main()
            local f = outOfOrder(12)
            print(listStr(f))
            f = sort3(f)
            print(listStr(f))
          end
          main()
          local _bench_end = _now()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
