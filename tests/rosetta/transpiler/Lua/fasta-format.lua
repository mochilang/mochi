-- Generated by Mochi v0.10.42 on 2025-07-27 17:23 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function splitLines(s)
  local lines = {}
  local start = 0
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      if (string.sub(s, i + 1, (i + 1)) == "\n") then
        lines = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(lines, string.sub(s, start + 1, i))
      i = (i + 1)
      start = i
    else
      i = (i + 1)
    end
  end
  lines = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(lines, string.sub(s, start + 1, (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' or type(v) == 'table' then
      return #v
    else
      return 0
    end
  end)(s)))
  return lines
end;

function parseFasta(text)
  local key = ""
  local val = ""
  local out = {}
  for _, line in ipairs(splitLines(text)) do
    if (line == "") then
      goto __cont_1
    end
    if (string.sub(line, 0 + 1, 1) == ">") then
      if (key ~= "") then
        out = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(out, ((key .. ": ") .. val))
    end
    local hdr = string.sub(line, 1 + 1, (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(line))
      local idx = 0
      while ((idx < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(hdr)) and (string.sub(hdr, idx + 1, (idx + 1)) ~= " ")) do
          idx = (idx + 1)
        end
        key = string.sub(hdr, 0 + 1, idx)
        val = ""
      else
        if (key == "") then
          print("missing header")
          return {}
        end
        val = (val .. tostring(line))
      end
      ::__cont_1::
    end
    if (key ~= "") then
      out = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(out, ((key .. ": ") .. val))
  end
  return out
end;

function main()
  local res = parseFasta(FASTA)
  for _, line in ipairs(res) do
    print(line)
  end
end;

FASTA = (((((">Rosetta_Example_1\n" .. "THERECANBENOSPACE\n") .. ">Rosetta_Example_2\n") .. "THERECANBESEVERAL\n") .. "LINESBUTTHEYALLMUST\n") .. "BECONCATENATED");

main();
