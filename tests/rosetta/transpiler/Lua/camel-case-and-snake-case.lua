-- Generated by Mochi v0.10.39 on 2025-07-24 20:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function trimSpace(s)
  local start = 0
  while ((start < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) and (string.sub(s, (start + 1), (start + 1)) == " ")) do
      start = (start + 1)
    end
    local _end = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)
      while ((_end > start) and (string.sub(s, ((_end - 1) + 1), _end) == " ")) do
        _end = (_end - 1)
      end
      return string.sub(s, (start + 1), _end)
    end;
    
    function isUpper(ch)
      return ((ch >= "A") and (ch <= "Z"))
    end;
    
    function padLeft(s, w)
      local res = ""
      local n = (w - (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s))
        while (n > 0) do
          res = (res .. " ")
          n = (n - 1)
        end
        return (res .. s)
      end;
      
      function snakeToCamel(s)
        s = trimSpace(s)
        local out = ""
        local up = false
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s)) do
            local ch = string.sub(s, (i + 1), (i + 1))
            if ((((ch == "_") or (ch == "-")) or (ch == " ")) or (ch == ".")) then
              up = true
              i = (i + 1)
              goto __cont_1
            end
            if (i == 0) then
              out = (out .. string.lower(ch))
              up = false
              i = (i + 1)
              goto __cont_1
            end
            if up then
              out = (out .. string.upper(ch))
              up = false
            else
              out = (out .. ch)
            end
            i = (i + 1)
            ::__cont_1::
          end
          return out
        end;
        
        function camelToSnake(s)
          s = trimSpace(s)
          local out = ""
          local prevUnd = false
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)) do
              local ch = string.sub(s, (i + 1), (i + 1))
              if (((ch == " ") or (ch == "-")) or (ch == ".")) then
                if ((not prevUnd) and ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(out) > 0)) then
                    out = (out .. "_")
                    prevUnd = true
                  end
                  i = (i + 1)
                  goto __cont_2
                end
                if (ch == "_") then
                  if ((not prevUnd) and ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(out) > 0)) then
                      out = (out .. "_")
                      prevUnd = true
                    end
                    i = (i + 1)
                    goto __cont_2
                  end
                  if isUpper(ch) then
                    if ((i > 0) and (not prevUnd)) then
                      out = (out .. "_")
                    end
                    out = (out .. string.lower(ch))
                    prevUnd = false
                  else
                    out = (out .. string.lower(ch))
                    prevUnd = false
                  end
                  i = (i + 1)
                  ::__cont_2::
                end
                local start = 0
                while ((start < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(out)) and (string.sub(out, (start + 1), (start + 1)) == "_")) do
                    start = (start + 1)
                  end
                  local _end = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(out)
                    while ((_end > start) and (string.sub(out, ((_end - 1) + 1), _end) == "_")) do
                      _end = (_end - 1)
                    end
                    out = string.sub(out, (start + 1), _end)
                    local res = ""
                    local j = 0
                    local lastUnd = false
                    while (j < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(out)) do
                        local c = string.sub(out, (j + 1), (j + 1))
                        if (c == "_") then
                          if (not lastUnd) then
                            res = (res .. c)
                          end
                          lastUnd = true
                        else
                          res = (res .. c)
                          lastUnd = false
                        end
                        j = (j + 1)
                      end
                      return res
                    end;
                    
                    function main()
                      local samples = {"snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "ɛrgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "}
                      print("=== To snake_case ===")
                      for _, s in ipairs(samples) do
                        print(((padLeft(s, 34) .. " => ") .. camelToSnake(s)))
                      end
                      print("")
                      print("=== To camelCase ===")
                      for _, s in ipairs(samples) do
                        print(((padLeft(s, 34) .. " => ") .. snakeToCamel(s)))
                      end
                    end;
                    
                    main();
