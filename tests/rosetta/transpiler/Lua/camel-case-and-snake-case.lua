-- Generated by Mochi v0.10.40 on 2025-07-25 20:06 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function trimSpace(s)
    local start = 0
    while ((start < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) and (string.sub(s, (start + 1), (start + 1)) == " ")) do
        start = (start + 1)
      end
      local _end = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)
        while ((_end > start) and (string.sub(s, ((_end - 1) + 1), _end) == " ")) do
          _end = (_end - 1)
        end
        return string.sub(s, (start + 1), _end)
      end
      function isUpper(ch)
        return ((ch >= "A") and (ch <= "Z"))
      end
      function padLeft(s, w)
        local res = ""
        local n = (w - (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s))
          while (n > 0) do
            res = (res .. " ")
            n = (n - 1)
          end
          return (res .. s)
        end
        function snakeToCamel(s)
          s = trimSpace(s)
          local out = ""
          local up = false
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)) do
              local ch = string.sub(s, (i + 1), (i + 1))
              if ((((ch == "_") or (ch == "-")) or (ch == " ")) or (ch == ".")) then
                up = true
                i = (i + 1)
                goto __cont_1
              end
              if (i == 0) then
                out = (out .. string.lower(ch))
                up = false
                i = (i + 1)
                goto __cont_1
              end
              if up then
                out = (out .. string.upper(ch))
                up = false
              else
                out = (out .. ch)
              end
              i = (i + 1)
              ::__cont_1::
            end
            return out
          end
          function camelToSnake(s)
            s = trimSpace(s)
            local out = ""
            local prevUnd = false
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s)) do
                local ch = string.sub(s, (i + 1), (i + 1))
                if (((ch == " ") or (ch == "-")) or (ch == ".")) then
                  if ((not prevUnd) and ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(out) > 0)) then
                      out = (out .. "_")
                      prevUnd = true
                    end
                    i = (i + 1)
                    goto __cont_2
                  end
                  if (ch == "_") then
                    if ((not prevUnd) and ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(out) > 0)) then
                        out = (out .. "_")
                        prevUnd = true
                      end
                      i = (i + 1)
                      goto __cont_2
                    end
                    if isUpper(ch) then
                      if ((i > 0) and (not prevUnd)) then
                        out = (out .. "_")
                      end
                      out = (out .. string.lower(ch))
                      prevUnd = false
                    else
                      out = (out .. string.lower(ch))
                      prevUnd = false
                    end
                    i = (i + 1)
                    ::__cont_2::
                  end
                  local start = 0
                  while ((start < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(out)) and (string.sub(out, (start + 1), (start + 1)) == "_")) do
                      start = (start + 1)
                    end
                    local _end = (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(out)
                      while ((_end > start) and (string.sub(out, ((_end - 1) + 1), _end) == "_")) do
                        _end = (_end - 1)
                      end
                      out = string.sub(out, (start + 1), _end)
                      local res = ""
                      local j = 0
                      local lastUnd = false
                      while (j < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' or type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(out)) do
                          local c = string.sub(out, (j + 1), (j + 1))
                          if (c == "_") then
                            if (not lastUnd) then
                              res = (res .. c)
                            end
                            lastUnd = true
                          else
                            res = (res .. c)
                            lastUnd = false
                          end
                          j = (j + 1)
                        end
                        return res
                      end
                      function main()
                        local samples = {"snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "}
                        print("=== To snake_case ===")
                        for _, s in ipairs(samples) do
                          print(((padLeft(s, 34) .. " => ") .. camelToSnake(s)))
                        end
                        print("")
                        print("=== To camelCase ===")
                        for _, s in ipairs(samples) do
                          print(((padLeft(s, 34) .. " => ") .. snakeToCamel(s)))
                        end
                      end
                      main()
                      local _bench_end = _now()
                      collectgarbage()
                      local _bench_end_mem = collectgarbage('count') * 1024
                      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                    end;
