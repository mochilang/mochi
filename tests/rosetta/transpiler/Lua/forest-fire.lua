-- Generated by Mochi v0.10.47 on 2025-07-28 11:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function _repeat(ch, n)
    local s = ""
    local i = 0
    while (i < n) do
      s = (s .. ch)
      i = (i + 1)
    end
    return s
  end
  function chance(prob)
    local threshold = math.floor((prob * 1000))
    return ((_now() % 1000) < threshold)
  end
  function newBoard()
    local b = {}
    local r = 0
    while (r < rows) do
      local row = {}
      local c = 0
      while (c < cols) do
        if ((_now() % 2) == 0) then
          row = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(row, "T")
      else
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, " ")
    end
    c = (c + 1)
  end
  b = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(b, row)
r = (r + 1)
end
return b
end
function step(src)
  local dst = {}
  local r = 0
  while (r < rows) do
    local row = {}
    local c = 0
    while (c < cols) do
      local cell = src[r + 1][c + 1]
      local next = cell
      if (cell == "#") then
        next = " "
      else
        if (cell == "T") then
          local burning = false
          local dr = (-1)
          while (dr <= 1) do
            local dc = (-1)
            while (dc <= 1) do
              if ((dr ~= 0) or (dc ~= 0)) then
                local rr = (r + dr)
                local cc = (c + dc)
                if ((((rr >= 0) and (rr < rows)) and (cc >= 0)) and (cc < cols)) then
                  if (src[rr + 1][cc + 1] == "#") then
                    burning = true
                  end
                end
              end
              dc = (dc + 1)
            end
            dr = (dr + 1)
          end
          if (burning or chance(f)) then
            next = "#"
          end
        else
          if chance(p) then
            next = "T"
          end
        end
      end
      row = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(row, next)
    c = (c + 1)
  end
  dst = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(dst, row)
r = (r + 1)
end
return dst
end
function printBoard(b)
  print((string.rep("__", cols) .. "\n\n"))
  local r = 0
  while (r < rows) do
    local line = ""
    local c = 0
    while (c < cols) do
      local cell = b[r + 1][c + 1]
      if (cell == " ") then
        line = (line .. "  ")
      else
        line = ((line .. " ") .. cell)
      end
      c = (c + 1)
    end
    print((line .. "\n"))
    r = (r + 1)
  end
end
rows = 20
cols = 30
p = 0.01
f = 0.001
board = newBoard()
printBoard(board)
board = step(board)
printBoard(board)
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
