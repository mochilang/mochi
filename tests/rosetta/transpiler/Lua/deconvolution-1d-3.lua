-- Generated by Mochi v0.10.40 on 2025-07-25 21:10 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end
function indexOf(s, ch)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      if (string.sub(s, i + 1, (i + 1)) == ch) then
        return i
      end
      i = (i + 1)
    end
    return (-1)
  end;
  
  function fmt1(x)
    local y = (math.floor(((x * 10) + 0.5)) / 10)
    local s = tostring(y)
    local dot = _indexOf(s, ".")
    if (dot < 0) then
      s = (s .. ".0")
    end
    return s
  end;
  
  function printColumnMatrix(xs)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(xs) == 0) then
        return
      end
      print((("⎡" .. fmt1(xs[0 + 1])) .. "⎤"))
      local i = 1
      while (i < ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs) - 1)) do
          print((("⎢" .. fmt1(xs[i + 1])) .. "⎥"))
          i = (i + 1)
        end
        print((("⎣ " .. fmt1(xs[((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(xs) - 1) + 1])) .. "⎦"))
        end;
        
        function deconv(g, f)
          local h = {}
          local n = 0
          local hn = (((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(g) - (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(f)) + 1)
              while (n < hn) do
                local v = g[n + 1]
                local lower = 0
                if (n >= (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(f)) then
                    lower = ((n - (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(f)) + 1)
                    end
                    local i = lower
                    while (i < n) do
                      v = (v - (h[i + 1] * f[(n - i) + 1]))
                      i = (i + 1)
                    end
                    v = (v / f[0 + 1])
                    h = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(h, v)
                  n = (n + 1)
                end
                return h
              end;
              
              function main()
                local h = {(-8), (-9), (-3), (-1), (-6), 7}
                local f = {(-3), (-6), (-1), 8, (-6), 3, (-1), (-9), (-9), 3, (-2), 5, 2, (-2), (-7), (-1)}
                local g = {24, 75, 71, (-34), 3, 22, (-45), 23, 245, 25, 52, 25, (-67), (-96), 96, 31, 55, 36, 29, (-43), (-7)}
                print("deconv(g, f) =")
                printColumnMatrix(deconv(g, f))
                print("")
                print("deconv(g, h) =")
                printColumnMatrix(deconv(g, h))
              end;
              
              main();
