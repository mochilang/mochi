-- Generated by Mochi v0.10.38 on 2025-07-24 08:13 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end
function fields(s)
  local words = {}
  local cur = ""
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      local ch = string.sub(s, i + 1, (i + 1))
      if (((ch == " ") or (ch == "\n")) or (ch == "\t")) then
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(cur) > 0) then
            words = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(words, cur)
          cur = ""
        end
      else
        cur = (cur .. ch)
      end
      i = (i + 1)
    end
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(cur) > 0) then
        words = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(words, cur)
    end
    return words
  end;
  
  function join(xs, sep)
    local res = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(xs)) do
        if (i > 0) then
          res = (res .. sep)
        end
        res = (res .. xs[i + 1])
        i = (i + 1)
      end
      return res
    end;
    
    function numberName(n)
      local small = {"no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"}
      local tens = {"ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"}
      if (n < 0) then
        return ""
      end
      if (n < 20) then
        return small[n + 1]
      end
      if (n < 100) then
        local t = tens[math.floor((n // 10)) + 1]
        local s = (n % 10)
        if (s > 0) then
          t = ((t .. " ") .. small[s + 1])
        end
        return t
      end
      return ""
    end;
    
    function pluralizeFirst(s, n)
      if (n == 1) then
        return s
      end
      local w = fields(s)
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(w) > 0) then
          w[0 + 1] = (w[0 + 1] .. "s")
        end
        return join(w, " ")
      end;
      
      function randInt(seed, n)
        local next = (((seed * 1664525) + 1013904223) % 2147483647)
        return (next % n)
      end;
      
      function slur(p, d)
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(p) <= 2) then
            return p
          end
          local a = {}
          local i = 1
          while (i < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(p) - 1)) do
              a = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(a, string.sub(p, i + 1, (i + 1)))
            i = (i + 1)
          end
          local idx = ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(a) - 1)
            local seed = d
            while (idx >= 1) do
              seed = (((seed * 1664525) + 1013904223) % 2147483647)
              if ((seed % 100) >= d) then
                local j = (seed % (idx + 1))
                local tmp = a[idx + 1]
                a[idx + 1] = a[j + 1]
                a[j + 1] = tmp
              end
              idx = (idx - 1)
            end
            local s = string.sub(p, 0 + 1, 1)
            local k = 0
            while (k < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(a)) do
                s = (s .. a[k + 1])
                k = (k + 1)
              end
              s = (s .. string.sub(p, ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(p) - 1) + 1, (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(p)))
                  local w = fields(s)
                  return join(w, " ")
                end;
                
                function main()
                  local i = 99
                  while (i > 0) do
                    print(((((slur(numberName(i), i) .. " ") .. pluralizeFirst(slur("bottle of", i), i)) .. " ") .. slur("beer on the wall", i)))
                    print(((((slur(numberName(i), i) .. " ") .. pluralizeFirst(slur("bottle of", i), i)) .. " ") .. slur("beer", i)))
                    print(((((slur("take one", i) .. " ") .. slur("down", i)) .. " ") .. slur("pass it around", i)))
                    print(((((slur(numberName((i - 1)), i) .. " ") .. pluralizeFirst(slur("bottle of", i), (i - 1))) .. " ") .. slur("beer on the wall", i)))
                    i = (i - 1)
                  end
                end;
                
                main();
