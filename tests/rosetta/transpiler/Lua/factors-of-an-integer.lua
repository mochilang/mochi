-- Generated by Mochi v0.10.42 on 2025-07-27 17:23 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function printFactors(n)
  if (n < 1) then
    print((("\nFactors of " .. tostring(n)) .. " not computed"))
    return
  end
  print((("\nFactors of " .. tostring(n)) .. ": "))
  local fs = {1}
  function apf(p, e)
    local orig = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(fs)
      local pp = p
      local i = 0
      while (i < e) do
        local j = 0
        while (j < orig) do
          fs = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(fs, (fs[j + 1] * pp))
        j = (j + 1)
      end
      i = (i + 1)
      pp = (pp * p)
    end
  end
  local e = 0
  local m = n
  while ((m % 2) == 0) do
    m = math.floor((m // 2))
    e = (e + 1)
  end
  apf(2, e)
  local d = 3
  while (m > 1) do
    if ((d * d) > m) then
      d = m
    end
    e = 0
    while ((m % d) == 0) do
      m = math.floor((m // d))
      e = (e + 1)
    end
    if (e > 0) then
      apf(d, e)
    end
    d = (d + 2)
  end
  print(
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(fs))
  print(("Number of factors = " .. tostring((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(fs))))
  end;
  
  printFactors((-1));
  
  printFactors(0);
  
  printFactors(1);
  
  printFactors(2);
  
  printFactors(3);
  
  printFactors(53);
  
  printFactors(45);
  
  printFactors(64);
  
  printFactors(600851475143);
  
  printFactors(999999999999999989);
