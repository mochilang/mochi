-- Generated by Mochi v0.10.42 on 2025-07-28 11:14 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function fmt1(f)
    local s = tostring(f)
    local idx = _indexOf(s, ".")
    if (idx < 0) then
      s = (s .. ".0")
    else
      local need = (idx + 2)
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s) > need) then
            s = _substring(s, 0, need)
          else
            while ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s) < need) do
                  s = (s .. "0")
                end
              end
            end
            return s
          end
          function pointStr(p)
            return (((("(" .. fmt1(p.x)) .. ", ") .. fmt1(p.y)) .. ")")
          end
          function triangleStr(t)
            return ((((("Triangle " .. pointStr(t.p1)) .. ", ") .. pointStr(t.p2)) .. ", ") .. pointStr(t.p3))
          end
          function orient(a, b, c)
            return (((b.x - a.x) * (c.y - a.y)) - ((b.y - a.y) * (c.x - a.x)))
          end
          function pointInTri(p, t, onBoundary)
            local d1 = orient(p, t.p1, t.p2)
            local d2 = orient(p, t.p2, t.p3)
            local d3 = orient(p, t.p3, t.p1)
            local hasNeg = (((d1 < 0) or (d2 < 0)) or (d3 < 0))
            local hasPos = (((d1 > 0) or (d2 > 0)) or (d3 > 0))
            if onBoundary then
              return (not (hasNeg and hasPos))
            end
            return ((((not (hasNeg and hasPos)) and (d1 ~= 0)) and (d2 ~= 0)) and (d3 ~= 0))
          end
          function edgeCheck(a0, a1, bs, onBoundary)
            local d0 = orient(a0, a1, bs[0 + 1])
            local d1 = orient(a0, a1, bs[1 + 1])
            local d2 = orient(a0, a1, bs[2 + 1])
            if onBoundary then
              return (((d0 <= 0) and (d1 <= 0)) and (d2 <= 0))
            end
            return (((d0 < 0) and (d1 < 0)) and (d2 < 0))
          end
          function triTri2D(t1, t2, onBoundary)
            local a = {t1.p1, t1.p2, t1.p3}
            local b = {t2.p1, t2.p2, t2.p3}
            local i = 0
            while (i < 3) do
              local j = ((i + 1) % 3)
              if edgeCheck(a[i + 1], a[j + 1], b, onBoundary) then
                return false
              end
              i = (i + 1)
            end
            i = 0
            while (i < 3) do
              local j = ((i + 1) % 3)
              if edgeCheck(b[i + 1], b[j + 1], a, onBoundary) then
                return false
              end
              i = (i + 1)
            end
            return true
          end
          function iff(cond, a, b)
            if cond then
              return a
            else
              return b
            end
          end
          function main()
            local t1 = {p1 = {x = 0, y = 0}, p2 = {x = 5, y = 0}, p3 = {x = 0, y = 5}}
            local t2 = {p1 = {x = 0, y = 0}, p2 = {x = 5, y = 0}, p3 = {x = 0, y = 6}}
            print((triangleStr(t1) .. " and"))
            print(triangleStr(t2))
            local overlapping = triTri2D(t1, t2, true)
            print(iff(overlapping, "overlap", "do not overlap"))
            print("")
            t1 = {p1 = {x = 0, y = 0}, p2 = {x = 0, y = 5}, p3 = {x = 5, y = 0}}
            t2 = t1
            print((triangleStr(t1) .. " and"))
            print(triangleStr(t2))
            overlapping = triTri2D(t1, t2, true)
            print(iff(overlapping, "overlap (reversed)", "do not overlap"))
            print("")
            t1 = {p1 = {x = 0, y = 0}, p2 = {x = 5, y = 0}, p3 = {x = 0, y = 5}}
            t2 = {p1 = {x = (-10), y = 0}, p2 = {x = (-5), y = 0}, p3 = {x = (-1), y = 6}}
            print((triangleStr(t1) .. " and"))
            print(triangleStr(t2))
            overlapping = triTri2D(t1, t2, true)
            print(iff(overlapping, "overlap", "do not overlap"))
            print("")
            t1.p3 = {x = 2.5, y = 5}
            t2 = {p1 = {x = 0, y = 4}, p2 = {x = 2.5, y = (-1)}, p3 = {x = 5, y = 4}}
            print((triangleStr(t1) .. " and"))
            print(triangleStr(t2))
            overlapping = triTri2D(t1, t2, true)
            print(iff(overlapping, "overlap", "do not overlap"))
            print("")
            t1 = {p1 = {x = 0, y = 0}, p2 = {x = 1, y = 1}, p3 = {x = 0, y = 2}}
            t2 = {p1 = {x = 2, y = 1}, p2 = {x = 3, y = 0}, p3 = {x = 3, y = 2}}
            print((triangleStr(t1) .. " and"))
            print(triangleStr(t2))
            overlapping = triTri2D(t1, t2, true)
            print(iff(overlapping, "overlap", "do not overlap"))
            print("")
            t2 = {p1 = {x = 2, y = 1}, p2 = {x = 3, y = (-2)}, p3 = {x = 3, y = 4}}
            print((triangleStr(t1) .. " and"))
            print(triangleStr(t2))
            overlapping = triTri2D(t1, t2, true)
            print(iff(overlapping, "overlap", "do not overlap"))
            print("")
            t1 = {p1 = {x = 0, y = 0}, p2 = {x = 1, y = 0}, p3 = {x = 0, y = 1}}
            t2 = {p1 = {x = 1, y = 0}, p2 = {x = 2, y = 0}, p3 = {x = 1, y = 1.1}}
            print((triangleStr(t1) .. " and"))
            print(triangleStr(t2))
            print("which have only a single corner in contact, if boundary points collide")
            overlapping = triTri2D(t1, t2, true)
            print(iff(overlapping, "overlap", "do not overlap"))
            print("")
            print((triangleStr(t1) .. " and"))
            print(triangleStr(t2))
            print("which have only a single corner in contact, if boundary points do not collide")
            overlapping = triTri2D(t1, t2, false)
            print(iff(overlapping, "overlap", "do not overlap"))
          end
          main()
          local _bench_end = _now()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
