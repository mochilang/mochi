-- Generated by Mochi v0.10.42 on 2025-07-27 16:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
function contains(xs, v)
  for _, x in ipairs(xs) do
    if (x == v) then
      return true
    end
  end
  return false
end;

function sliceEqual(a, b)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(a)) do
      if (a[i + 1] ~= b[i + 1]) then
        return false
      end
      i = (i + 1)
    end
    return true
  end;
  
  function reverse(xs)
    local i = 0
    local j = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(xs) - 1)
      while (i < j) do
        local t = xs[i + 1]
        xs[i + 1] = xs[j + 1]
        xs[j + 1] = t
        i = (i + 1)
        j = (j - 1)
      end
    end;
    
    function copyInts(xs)
      local out = {}
      for _, v in ipairs(xs) do
        out = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(out, v)
    end
    return out
  end;
  
  function perimEqual(p1, p2)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(p1) ~= (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(p2)) then
          return false
        end
        for _, v in ipairs(p1) do
          if (not (function(lst, v)
          for _, x in ipairs(lst) do
            if x == v then
              return true
            end
          end
          return false
        end)(p2, v)) then
          return false
        end
      end
      local c = copyInts(p1)
      local r = 0
      while (r < 2) do
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(p1)) do
            if sliceEqual(c, p2) then
              return true
            end
            local t = c[((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(c) - 1) + 1]
              local j = ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(c) - 1)
                while (j > 0) do
                  c[j + 1] = c[(j - 1) + 1]
                  j = (j - 1)
                end
                c[0 + 1] = t
                i = (i + 1)
              end
              reverse(c)
              r = (r + 1)
            end
            return false
          end;
          
          function sortEdges(es)
            local arr = es
            local n = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(arr)
              local i = 0
              while (i < n) do
                local j = 0
                while (j < (n - 1)) do
                  local a = arr[j + 1]
                  local b = arr[(j + 1) + 1]
                  if ((a.a > b.a) or ((a.a == b.a) and (a.b > b.b))) then
                    arr[j + 1] = b
                    arr[(j + 1) + 1] = a
                  end
                  j = (j + 1)
                end
                i = (i + 1)
              end
              return arr
            end;
            
            function concat(a, b)
              local out = {}
              for _, x in ipairs(a) do
                out = (function(lst, item)
                local res = {table.unpack(lst)}
                table.insert(res, item)
                return res
              end)(out, x)
            end
            for _, x in ipairs(b) do
              out = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(out, x)
          end
          return out
        end;
        
        function faceToPerim(face)
          local le = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(face)
            if (le == 0) then
              return _nil
            end
            local edges = {}
            local i = 0
            while (i < le) do
              local e = face[i + 1]
              if (e.b <= e.a) then
                return _nil
              end
              edges = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(edges, e)
            i = (i + 1)
          end
          edges = sortEdges(edges)
          local firstEdge = edges[0 + 1]
          local perim = {firstEdge.a, firstEdge.b}
          local first = firstEdge.a
          local last = firstEdge.b
          edges = (function(lst,s,e)
          local r={}
          for i=s+1,e do
            r[#r+1]=lst[i]
          end
          return r
        end)(edges, 1, (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(edges))
          le = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(edges)
            local done = false
            while ((le > 0) and (not done)) do
              local idx = 0
              local found = false
              while (idx < le) do
                local e = edges[idx + 1]
                if (e.a == last) then
                  perim = (function(lst, item)
                  local res = {table.unpack(lst)}
                  table.insert(res, item)
                  return res
                end)(perim, e.b)
                last = e.b
                found = true
              else
                if (e.b == last) then
                  perim = (function(lst, item)
                  local res = {table.unpack(lst)}
                  table.insert(res, item)
                  return res
                end)(perim, e.a)
                last = e.a
                found = true
              end
            end
            if found then
              edges = concat((function(lst,s,e)
              local r={}
              for i=s+1,e do
                r[#r+1]=lst[i]
              end
              return r
            end)(edges, 0, idx), (function(lst,s,e)
            local r={}
            for i=s+1,e do
              r[#r+1]=lst[i]
            end
            return r
          end)(edges, (idx + 1), (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(edges)))
            le = (le - 1)
            if (last == first) then
              if (le == 0) then
                done = true
              else
                return _nil
              end
            end
            break
          end
          idx = (idx + 1)
        end
        if (not found) then
          return _nil
        end
      end
      return (function(lst,s,e)
      local r={}
      for i=s+1,e do
        r[#r+1]=lst[i]
      end
      return r
    end)(perim, 0, ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(perim) - 1))
    end;
    
    function listStr(xs)
      local s = "["
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          s = (s .. tostring(xs[i + 1]))
          if (i < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(xs) - 1)) then
              s = (s .. " ")
            end
            i = (i + 1)
          end
          s = (s .. "]")
          return s
        end;
        
        print("Perimeter format equality checks:");
        
        print(("  Q == R is " .. tostring(perimEqual({8, 1, 3}, {1, 3, 8}))));
        
        print(("  U == V is " .. tostring(perimEqual({18, 8, 14, 10, 12, 17, 19}, {8, 14, 10, 12, 17, 19, 18}))));
        
        e = {{a = 7, b = 11}, {a = 1, b = 11}, {a = 1, b = 7}};
        
        f = {{a = 11, b = 23}, {a = 1, b = 17}, {a = 17, b = 23}, {a = 1, b = 11}};
        
        g = {{a = 8, b = 14}, {a = 17, b = 19}, {a = 10, b = 12}, {a = 10, b = 14}, {a = 12, b = 17}, {a = 8, b = 18}, {a = 18, b = 19}};
        
        h = {{a = 1, b = 3}, {a = 9, b = 11}, {a = 3, b = 11}, {a = 1, b = 11}};
        
        print("\nEdge to perimeter format translations:");
        
        faces = {e, f, g, h};
        
        names = {"E", "F", "G", "H"};
        
        idx2 = 0;
        
        while (idx2 < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(faces)) do
            per = faceToPerim(faces[idx2 + 1])
            if (per == _nil) then
              print((("  " .. names[idx2 + 1]) .. " => Invalid edge format"))
            else
              print(((("  " .. names[idx2 + 1]) .. " => ") .. listStr(per)))
            end
            idx2 = (idx2 + 1)
          end;
