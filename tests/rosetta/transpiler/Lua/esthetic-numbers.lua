-- Generated by Mochi v0.10.42 on 2025-07-27 16:28 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  digits = "0123456789abcdef"
  function toBase(n, b)
    if (n == 0) then
      return "0"
    end
    local v = n
    local out = ""
    while (v > 0) do
      local d = (v % b)
      out = (string.sub(digits, (d + 1), (d + 1)) .. out)
      v = (v // b)
    end
    return out
  end
  function uabs(a, b)
    if (a > b) then
      return (a - b)
    end
    return (b - a)
  end
  function isEsthetic(n, b)
    if (n == 0) then
      return false
    end
    local i = (n % b)
    n = (n // b)
    while (n > 0) do
      local j = (n % b)
      if (uabs(i, j) ~= 1) then
        return false
      end
      n = (n // b)
      i = j
    end
    return true
  end
  esths = {}
  function dfs(n, m, i)
    if ((i >= n) and (i <= m)) then
      esths = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(esths, i)
  end
  if ((i == 0) or (i > m)) then
    return
  end
  local d = (i % 10)
  local i1 = (((i * 10) + d) - 1)
  local i2 = (i1 + 2)
  if (d == 0) then
    dfs(n, m, i2)
  else
    if (d == 9) then
      dfs(n, m, i1)
    else
      dfs(n, m, i1)
      dfs(n, m, i2)
    end
  end
end
function commatize(n)
  local s = tostring(n)
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s) - 3)
    while (i >= 1) do
      s = ((string.sub(s, (0 + 1), i) .. ",") .. string.sub(s, (i + 1), (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)))
        i = (i - 3)
      end
      return s
    end
    function listEsths(n, n2, m, m2, perLine, showAll)
      esths = {}
      local i = 0
      while (i < 10) do
        dfs(n2, m2, i)
        i = (i + 1)
      end
      local le = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(esths)
        print((((((("Base 10: " .. commatize(le)) .. " esthetic numbers between ") .. commatize(n)) .. " and ") .. commatize(m)) .. ":"))
        if showAll then
          local c = 0
          local line = ""
          for _, v in ipairs(esths) do
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(line) > 0) then
                line = (line .. " ")
              end
              line = (line .. tostring(v))
              c = (c + 1)
              if ((c % perLine) == 0) then
                print(line)
                line = ""
              end
            end
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(line) > 0) then
                print(line)
              end
            else
              local line = ""
              local idx = 0
              while (idx < perLine) do
                if ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(line) > 0) then
                    line = (line .. " ")
                  end
                  line = (line .. tostring(esths[idx + 1]))
                  idx = (idx + 1)
                end
                print(line)
                print("............")
                line = ""
                idx = (le - perLine)
                while (idx < le) do
                  if ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(line) > 0) then
                      line = (line .. " ")
                    end
                    line = (line .. tostring(esths[idx + 1]))
                    idx = (idx + 1)
                  end
                  print(line)
                end
                print("")
              end
              function main()
                local b = 2
                while (b <= 16) do
                  local start = (4 * b)
                  local stop = (6 * b)
                  print((((((("Base " .. tostring(b)) .. ": ") .. tostring(start)) .. "th to ") .. tostring(stop)) .. "th esthetic numbers:"))
                  local n = 1
                  local c = 0
                  local line = ""
                  while (c < stop) do
                    if isEsthetic(n, b) then
                      c = (c + 1)
                      if (c >= start) then
                        if ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' or type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(line) > 0) then
                            line = (line .. " ")
                          end
                          line = (line .. toBase(n, b))
                        end
                      end
                      n = (n + 1)
                    end
                    print(line)
                    print("")
                    b = (b + 1)
                  end
                  listEsths(1000, 1010, 9999, 9898, 16, true)
                  listEsths(100000000, 101010101, 130000000, 123456789, 9, true)
                  listEsths(100000000000, 101010101010, 130000000000, 123456789898, 7, false)
                  listEsths(100000000000000, 101010101010101, 130000000000000, 123456789898989, 5, false)
                  listEsths(100000000000000000, 101010101010101010, 130000000000000000, 123456789898989898, 4, false)
                end
                main()
                local _bench_end = _now()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
