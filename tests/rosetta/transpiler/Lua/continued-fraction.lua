-- Generated by Mochi v0.10.42 on 2025-07-28 08:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function newTerm(a, b)
    return {__name = "GenType1", __order = {"a", "b"}, a = a, b = b}
  end
  function cfSqrt2(nTerms)
    local f = {}
    local n = 0
    while (n < nTerms) do
      f = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(f, newTerm(2, 1))
    n = (n + 1)
  end
  if (nTerms > 0) then
    f[0 + 1].a = 1
  end
  return f
end
function cfNap(nTerms)
  local f = {}
  local n = 0
  while (n < nTerms) do
    f = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(f, newTerm(n, (n - 1)))
  n = (n + 1)
end
if (nTerms > 0) then
  f[0 + 1].a = 2
end
if (nTerms > 1) then
  f[1 + 1].b = 1
end
return f
end
function cfPi(nTerms)
  local f = {}
  local n = 0
  while (n < nTerms) do
    local g = ((2 * n) - 1)
    f = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(f, newTerm(6, (g * g)))
  n = (n + 1)
end
if (nTerms > 0) then
  f[0 + 1].a = 3
end
return f
end
function real(f)
  local r = 0
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(f) - 1)
      while (i > 0) do
        r = (f[i + 1].b / (f[i + 1].a + r))
        i = (i - 1)
      end
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(f) > 0) then
            r = (r + f[0 + 1].a)
          end
          return r
        end
        function main()
          print(("sqrt2: " .. tostring(real(cfSqrt2(20)))))
          print(("nap:   " .. tostring(real(cfNap(20)))))
          print(("pi:    " .. tostring(real(cfPi(20)))))
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
