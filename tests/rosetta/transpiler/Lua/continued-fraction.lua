-- Generated by Mochi v0.10.40 on 2025-07-25 21:10 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function newTerm(a, b)
  return {__name = "GenType1", __order = {"a", "b"}, a = a, b = b}
end;

function cfSqrt2(nTerms)
  local f = {}
  local n = 0
  while (n < nTerms) do
    f = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(f, newTerm(2, 1))
  n = (n + 1)
end
if (nTerms > 0) then
  f[0 + 1].a = 1
end
return f
end;

function cfNap(nTerms)
  local f = {}
  local n = 0
  while (n < nTerms) do
    f = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(f, newTerm(n, (n - 1)))
  n = (n + 1)
end
if (nTerms > 0) then
  f[0 + 1].a = 2
end
if (nTerms > 1) then
  f[1 + 1].b = 1
end
return f
end;

function cfPi(nTerms)
  local f = {}
  local n = 0
  while (n < nTerms) do
    local g = ((2 * n) - 1)
    f = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(f, newTerm(6, (g * g)))
  n = (n + 1)
end
if (nTerms > 0) then
  f[0 + 1].a = 3
end
return f
end;

function real(f)
  local r = 0
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(f) - 1)
    while (i > 0) do
      r = (f[i + 1].b / (f[i + 1].a + r))
      i = (i - 1)
    end
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(f) > 0) then
        r = (r + f[0 + 1].a)
      end
      return r
    end;
    
    function main()
      print(("sqrt2: " .. tostring(real(cfSqrt2(20)))))
      print(("nap:   " .. tostring(real(cfNap(20)))))
      print(("pi:    " .. tostring(real(cfPi(20)))))
    end;
    
    main();
