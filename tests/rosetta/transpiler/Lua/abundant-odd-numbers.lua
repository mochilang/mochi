-- Generated by Mochi v0.10.37 on 2025-07-23 12:31 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
function divisors(n)
  local divs = {1}
  local divs2 = {}
  local i = 2
  while ((i * i) <= n) do
    if ((n % i) == 0) then
      local j = (n // i)
      divs = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(divs, i)
    if (i ~= j) then
      divs2 = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(divs2, j)
  end
end
i = (i + 1)
end
local j = ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  else
    return #v
  end
end)(divs2) - 1)
while (j >= 0) do
  divs = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(divs, divs2[j + 1])
j = (j - 1)
end
return divs
end;

function sum(xs)
  local tot = 0
  for _, v in ipairs(xs) do
    tot = (tot + v)
  end
  return tot
end;

function sumStr(xs)
  local s = ""
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(xs)) do
    s = ((s .. tostring(xs[i + 1])) .. " + ")
    i = (i + 1)
  end
  return string.sub(s, 0 + 1, ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s) - 3))
end;

function pad2(n)
  local s = tostring(n)
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s) < 2) then
    return (" " .. s)
  end
  return s
end;

function pad5(n)
  local s = tostring(n)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s) < 5) do
    s = (" " .. s)
  end
  return s
end;

function abundantOdd(searchFrom, countFrom, countTo, printOne)
  local count = countFrom
  local n = searchFrom
  while (count < countTo) do
    local divs = divisors(n)
    local tot = (function(lst)
    local s = 0
    for _, v in ipairs(lst) do
      s = s + v
    end
    return s
  end)(divs)
  if (tot > n) then
    count = (count + 1)
    if (printOne and (count < countTo)) then
      n = (n + 2)
      goto __cont_1
    end
    local s = sumStr(divs)
    if (not printOne) then
      print(((((((pad2(count) .. ". ") .. pad5(n)) .. " < ") .. s) .. " = ") .. tostring(tot)))
    else
      print(((((tostring(n) .. " < ") .. s) .. " = ") .. tostring(tot)))
    end
  end
  n = (n + 2)
  ::__cont_1::
end
return n
end;

function main()
  local max = 25
  print((("The first " .. tostring(max)) .. " abundant odd numbers are:"))
  local n = abundantOdd(1, 0, max, false)
  print("\nThe one thousandth abundant odd number is:")
  abundantOdd(n, max, 1000, true)
  print("\nThe first abundant odd number above one billion is:")
  abundantOdd(1000000001, 0, 1, true)
end;

main();
