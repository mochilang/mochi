-- Generated by Mochi v0.10.42 on 2025-07-27 23:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function push(h, it)
    h = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(h, it)
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(h) - 1)
      while ((i > 0) and (h[(i - 1) + 1].s > h[i + 1].s)) do
        local tmp = h[(i - 1) + 1]
        h[(i - 1) + 1] = h[i + 1]
        h[i + 1] = tmp
        i = (i - 1)
      end
      return h
    end
    function step(h, nv, dir)
      while (((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(h) == 0) or ((nv * nv) <= h[0 + 1].s)) do
            h = push(h, {__name = "GenType1", __order = {"s", "a", "b"}, s = (nv * nv), a = nv, b = 0})
            nv = (nv + 1)
          end
          local s = h[0 + 1].s
          local v = {}
          while (((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(h) > 0) and (h[0 + 1].s == s)) do
                local it = h[0 + 1]
                h = (function(lst,s,e)
                local r={}
                for i=s+1,e do
                  r[#r+1]=lst[i]
                end
                return r
              end)(h, 1, #h)
              v = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(v, {it.a, it.b})
            if (it.a > it.b) then
              h = push(h, {__name = "GenType2", __order = {"s", "a", "b"}, s = ((it.a * it.a) + ((it.b + 1) * (it.b + 1))), a = it.a, b = (it.b + 1)})
            end
          end
          local list = {}
          for _, p in ipairs(v) do
            list = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(list, p)
        end
        local temp = list
        for _, p in ipairs(temp) do
          if (p[0 + 1] ~= p[1 + 1]) then
            list = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(list, {p[1 + 1], p[0 + 1]})
        end
      end
      temp = list
      for _, p in ipairs(temp) do
        if (p[1 + 1] ~= 0) then
          list = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(list, {p[0 + 1], (-p[1 + 1])})
      end
    end
    temp = list
    for _, p in ipairs(temp) do
      if (p[0 + 1] ~= 0) then
        list = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(list, {(-p[0 + 1]), p[1 + 1]})
    end
  end
  local bestDot = (-999999999)
  local best = dir
  for _, p in ipairs(list) do
    local cross = ((p[0 + 1] * dir[1 + 1]) - (p[1 + 1] * dir[0 + 1]))
    if (cross >= 0) then
      local dot = ((tonumber((p[0 + 1] * dir[0 + 1])) or 0) + (tonumber((p[1 + 1] * dir[1 + 1])) or 0))
      if (dot > bestDot) then
        bestDot = dot
        best = p
      end
    end
  end
  return {__name = "GenType3", __order = {"d", "heap", "n"}, d = best, heap = h, n = nv}
end
function positions(n)
  local pos = {}
  local x = 0
  local y = 0
  local dir = {0, 1}
  local heap = {}
  local nv = 1
  local i = 0
  while (i < n) do
    pos = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(pos, {x, y})
  local st = step(heap, nv, dir)
  dir = st.d
  heap = st.heap
  nv = math.floor(st.n)
  x = (x + dir[0 + 1])
  y = (y + dir[1 + 1])
  i = (i + 1)
end
return pos
end
function pad(s, w)
  local r = s
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(r) < w) do
        r = (r .. " ")
      end
      return r
    end
    function main()
      local pts = positions(40)
      print("The first 40 Babylonian spiral points are:")
      local line = ""
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(pts)) do
            local p = pts[i + 1]
            local s = pad((((("(" .. tostring(p[0 + 1])) .. ", ") .. tostring(p[1 + 1])) .. ")"), 10)
            line = (line .. s)
            if (((i + 1) % 10) == 0) then
              print(line)
              line = ""
            end
            i = (i + 1)
          end
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
