-- Generated by Mochi v0.10.40 on 2025-07-25 21:10 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function det(m)
  local n = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(m)
    if (n == 1) then
      return m[0 + 1][0 + 1]
    end
    local total = 0
    local sign = 1
    local c = 0
    while (c < n) do
      local sub = {}
      local r = 1
      while (r < n) do
        local row = {}
        local cc = 0
        while (cc < n) do
          if (cc ~= c) then
            row = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(row, m[r + 1][cc + 1])
        end
        cc = (cc + 1)
      end
      sub = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(sub, row)
    r = (r + 1)
  end
  total = (total + ((sign * m[0 + 1][c + 1]) * det(sub)))
  sign = (sign * (-1))
  c = (c + 1)
end
return total
end;

function replaceCol(m, col, v)
  local res = {}
  local r = 0
  while (r < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(m)) do
      local row = {}
      local c = 0
      while (c < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(m[r + 1])) do
          if (c == col) then
            row = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(row, v[r + 1])
        else
          row = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(row, m[r + 1][c + 1])
      end
      c = (c + 1)
    end
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, row)
  r = (r + 1)
end
return res
end;

m = {{2, (-1), 5, 1}, {3, 2, 2, (-6)}, {1, 3, 3, (-1)}, {5, (-2), (-3), 3}};

v = {(-3), (-32), (-47), 49};

d = det(m);

x = {};

i = 0;

while (i < (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' or type(v) == 'table' then
      return #v
    else
      return 0
    end
  end)(v)) do
    mc = replaceCol(m, i, v)
    x = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(x, (det(mc) / d))
  i = (i + 1)
end;

s = "[";

j = 0;

while (j < (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' or type(v) == 'table' then
      return #v
    else
      return 0
    end
  end)(x)) do
    s = (s .. tostring(x[j + 1]))
    if (j < ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(x) - 1)) then
        s = (s .. " ")
      end
      j = (j + 1)
    end;
    
    s = (s .. "]");
    
    print(s);
