-- Generated by Mochi v0.10.42 on 2025-07-28 00:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function flood(x, y, repl)
    local target = grid[y + 1][x + 1]
    if (target == repl) then
      return
    end
    local function ff(px, py)
    if ((((px < 0) or (py < 0)) or (py >= (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(grid))) or (px >= (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(grid[0 + 1]))) then
              return
            end
            if (grid[py + 1][px + 1] ~= target) then
              return
            end
            grid[py + 1][px + 1] = repl
            ff((px - 1), py)
            ff((px + 1), py)
            px.ff((py - 1))
            px.ff((py + 1))
          end
          x.ff(y)
        end
        grid = {{".", ".", ".", ".", "."}, {".", "#", "#", "#", "."}, {".", "#", ".", "#", "."}, {".", "#", "#", "#", "."}, {".", ".", ".", ".", "."}}
        flood(2, 2, "o")
        for _, row in ipairs(grid) do
          line = ""
          for _, ch in ipairs(row) do
            line = ((tonumber(line) or 0) + (tonumber(ch) or 0))
          end
          print(line)
        end
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
