-- Generated by Mochi v0.10.40 on 2025-07-25 17:45 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function Node(data)
    return {__name = "GenType1", __order = {"Data", "Balance", "Link"}, Data = data, Balance = 0, Link = {_nil, _nil}}
  end
  function getLink(n, dir)
    return n.Link[dir + 1]
  end
  function setLink(n, dir, v)
    local links = n.Link
    links[dir + 1] = v
    n.Link = links
  end
  function opp(dir)
    return (1 - dir)
  end
  function single(root, dir)
    local tmp = getLink(root, opp(dir))
    setLink(root, opp(dir), getLink(tmp, dir))
    setLink(tmp, dir, root)
    return tmp
  end
  function double(root, dir)
    local tmp = getLink(getLink(root, opp(dir)), dir)
    setLink(getLink(root, opp(dir)), dir, getLink(tmp, opp(dir)))
    setLink(tmp, opp(dir), getLink(root, opp(dir)))
    setLink(root, opp(dir), tmp)
    tmp = getLink(root, opp(dir))
    setLink(root, opp(dir), getLink(tmp, dir))
    setLink(tmp, dir, root)
    return tmp
  end
  function adjustBalance(root, dir, bal)
    local n = getLink(root, dir)
    local nn = getLink(n, opp(dir))
    if (nn.Balance == 0) then
      root.Balance = 0
      n.Balance = 0
    else
      if (nn.Balance == bal) then
        root.Balance = (-bal)
        n.Balance = 0
      else
        root.Balance = 0
        n.Balance = bal
      end
    end
    nn.Balance = 0
  end
  function insertBalance(root, dir)
    local n = getLink(root, dir)
    local bal = ((2 * dir) - 1)
    if (n.Balance == bal) then
      root.Balance = 0
      n.Balance = 0
      return single(root, opp(dir))
    end
    adjustBalance(root, dir, bal)
    return double(root, opp(dir))
  end
  function insertR(root, data)
    if (root == _nil) then
      return {__name = "GenType2", __order = {"node", "done"}, node = Node(data), done = false}
    end
    local node = root
    local dir = 0
    if (math.floor(node.Data) < data) then
      dir = 1
    end
    local r = insertR(getLink(node, dir), data)
    setLink(node, dir, r.node)
    if r.done then
      return {__name = "GenType3", __order = {"node", "done"}, node = node, done = true}
    end
    node.Balance = (math.floor(node.Balance) + ((2 * dir) - 1))
    if (node.Balance == 0) then
      return {__name = "GenType4", __order = {"node", "done"}, node = node, done = true}
    end
    if ((node.Balance == 1) or (node.Balance == (-1))) then
      return {__name = "GenType5", __order = {"node", "done"}, node = node, done = false}
    end
    return {__name = "GenType6", __order = {"node", "done"}, node = insertBalance(node, dir), done = true}
  end
  function Insert(tree, data)
    local r = insertR(tree, data)
    return r.node
  end
  function removeBalance(root, dir)
    local n = getLink(root, opp(dir))
    local bal = ((2 * dir) - 1)
    if (n.Balance == (-bal)) then
      root.Balance = 0
      n.Balance = 0
      return {__name = "GenType7", __order = {"node", "done"}, node = single(root, dir), done = false}
    end
    if (n.Balance == bal) then
      adjustBalance(root, opp(dir), (-bal))
      return {__name = "GenType8", __order = {"node", "done"}, node = double(root, dir), done = false}
    end
    root.Balance = (-bal)
    n.Balance = bal
    return {__name = "GenType9", __order = {"node", "done"}, node = single(root, dir), done = true}
  end
  function removeR(root, data)
    if (root == _nil) then
      return {__name = "GenType10", __order = {"node", "done"}, node = _nil, done = false}
    end
    local node = root
    if (math.floor(node.Data) == data) then
      if (getLink(node, 0) == _nil) then
        return {__name = "GenType11", __order = {"node", "done"}, node = getLink(node, 1), done = false}
      end
      if (getLink(node, 1) == _nil) then
        return {__name = "GenType12", __order = {"node", "done"}, node = getLink(node, 0), done = false}
      end
      local heir = getLink(node, 0)
      while (getLink(heir, 1) ~= _nil) do
        heir = getLink(heir, 1)
      end
      node.Data = heir.Data
      data = math.floor(heir.Data)
    end
    local dir = 0
    if (math.floor(node.Data) < data) then
      dir = 1
    end
    local r = removeR(getLink(node, dir), data)
    setLink(node, dir, r.node)
    if r.done then
      return {__name = "GenType13", __order = {"node", "done"}, node = node, done = true}
    end
    node.Balance = ((math.floor(node.Balance) + 1) - (2 * dir))
    if ((node.Balance == 1) or (node.Balance == (-1))) then
      return {__name = "GenType14", __order = {"node", "done"}, node = node, done = true}
    end
    if (node.Balance == 0) then
      return {__name = "GenType15", __order = {"node", "done"}, node = node, done = false}
    end
    return removeBalance(node, dir)
  end
  function Remove(tree, data)
    local r = removeR(tree, data)
    return r.node
  end
  function indentStr(n)
    local s = ""
    local i = 0
    while (i < n) do
      s = (s .. " ")
      i = (i + 1)
    end
    return s
  end
  function dumpNode(node, indent, comma)
    local sp = indentStr(indent)
    if (node == _nil) then
      local line = (sp .. "null")
      if comma then
        line = (line .. ",")
      end
      print(line)
    else
      print((sp .. "{"))
      print((((indentStr((indent + 3)) .. "\"Data\": ") .. tostring(node.Data)) .. ","))
      print((((indentStr((indent + 3)) .. "\"Balance\": ") .. tostring(node.Balance)) .. ","))
      print((indentStr((indent + 3)) .. "\"Link\": ["))
      dumpNode(getLink(node, 0), (indent + 6), true)
      dumpNode(getLink(node, 1), (indent + 6), false)
      print((indentStr((indent + 3)) .. "]"))
      local _end = (sp .. "}")
      if comma then
        _end = (_end .. ",")
      end
      print(_end)
    end
  end
  function dump(node, indent)
    dumpNode(node, indent, false)
  end
  function main()
    local tree = _nil
    print("Empty tree:")
    dump(tree, 0)
    print("")
    print("Insert test:")
    tree = Insert(tree, 3)
    tree = Insert(tree, 1)
    tree = Insert(tree, 4)
    tree = Insert(tree, 1)
    tree = Insert(tree, 5)
    dump(tree, 0)
    print("")
    print("Remove test:")
    tree = Remove(tree, 3)
    tree = Remove(tree, 1)
    local t = tree
    t.Balance = 0
    tree = t
    dump(tree, 0)
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
