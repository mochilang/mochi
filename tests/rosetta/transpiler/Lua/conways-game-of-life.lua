-- Generated by Mochi v0.10.40 on 2025-07-25 22:07 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  seed = 1
  function randN(n)
    seed = (((seed * 1664525) + 1013904223) % 2147483647)
    return (seed % n)
  end
  function newField(w, h)
    local rows = {}
    local y = 0
    while (y < h) do
      local row = {}
      local x = 0
      while (x < w) do
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, false)
      x = (x + 1)
    end
    rows = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(rows, row)
  y = (y + 1)
end
return {s = rows, w = w, h = h}
end
function setCell(f, x, y, b)
  local rows = f.s
  local row = rows[y + 1]
  row[x + 1] = b
  rows[y + 1] = row
  f.s = rows
end
function state(f, x, y)
  while (y < 0) do
    y = (y + f.h)
  end
  while (x < 0) do
    x = (x + f.w)
  end
  return f.s[(y % f.h) + 1][(x % f.w) + 1]
end
function nextState(f, x, y)
  local count = 0
  local dy = (-1)
  while (dy <= 1) do
    local dx = (-1)
    while (dx <= 1) do
      if ((not ((dx == 0) and (dy == 0))) and state(f, (x + dx), (y + dy))) then
        count = (count + 1)
      end
      dx = (dx + 1)
    end
    dy = (dy + 1)
  end
  return ((count == 3) or ((count == 2) and state(f, x, y)))
end
function newLife(w, h)
  local a = newField(w, h)
  local i = 0
  while (i < ((w * h) // 2)) do
    setCell(a, randN(w), randN(h), true)
    i = (i + 1)
  end
  return {a = a, b = newField(w, h), w = w, h = h}
end
function step(l)
  local y = 0
  while (y < l.h) do
    local x = 0
    while (x < l.w) do
      setCell(l.b, x, y, nextState(l.a, x, y))
      x = (x + 1)
    end
    y = (y + 1)
  end
  local tmp = l.a
  l.a = l.b
  l.b = tmp
end
function lifeString(l)
  local out = ""
  local y = 0
  while (y < l.h) do
    local x = 0
    while (x < l.w) do
      if state(l.a, x, y) then
        out = (out .. "*")
      else
        out = (out .. " ")
      end
      x = (x + 1)
    end
    out = (out .. "\n")
    y = (y + 1)
  end
  return out
end
function main()
  local l = newLife(80, 15)
  local i = 0
  while (i < 300) do
    step(l)
    print("\f")
    print(lifeString(l))
    i = (i + 1)
  end
end
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
