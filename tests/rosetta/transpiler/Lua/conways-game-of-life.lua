-- Generated by Mochi v0.10.39 on 2025-07-25 00:28 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
seed = 1;

function randN(n)
  seed = (((seed * 1664525) + 1013904223) % 2147483647)
  return (seed % n)
end;

function newField(w, h)
  local rows = {}
  local y = 0
  while (y < h) do
    local row = {}
    local x = 0
    while (x < w) do
      row = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(row, false)
    x = (x + 1)
  end
  rows = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(rows, row)
y = (y + 1)
end
return {s = rows, w = w, h = h}
end;

function setCell(f, x, y, b)
  local rows = f.s
  local row = rows[y + 1]
  row[x + 1] = b
  rows[y + 1] = row
  f.s = rows
end;

function state(f, x, y)
  while (y < 0) do
    y = (y + f.h)
  end
  while (x < 0) do
    x = (x + f.w)
  end
  return f.s[(y % f.h) + 1][(x % f.w) + 1]
end;

function nextState(f, x, y)
  local count = 0
  local dy = (-1)
  while (dy <= 1) do
    local dx = (-1)
    while (dx <= 1) do
      if ((not ((dx == 0) and (dy == 0))) and state(f, (x + dx), (y + dy))) then
        count = (count + 1)
      end
      dx = (dx + 1)
    end
    dy = (dy + 1)
  end
  return ((count == 3) or ((count == 2) and state(f, x, y)))
end;

function newLife(w, h)
  local a = newField(w, h)
  local i = 0
  while (i < ((w * h) // 2)) do
    setCell(a, randN(w), randN(h), true)
    i = (i + 1)
  end
  return {a = a, b = newField(w, h), w = w, h = h}
end;

function step(l)
  local y = 0
  while (y < l.h) do
    local x = 0
    while (x < l.w) do
      setCell(l.b, x, y, nextState(l.a, x, y))
      x = (x + 1)
    end
    y = (y + 1)
  end
  local tmp = l.a
  l.a = l.b
  l.b = tmp
end;

function lifeString(l)
  local out = ""
  local y = 0
  while (y < l.h) do
    local x = 0
    while (x < l.w) do
      if state(l.a, x, y) then
        out = (out .. "*")
      else
        out = (out .. " ")
      end
      x = (x + 1)
    end
    out = (out .. "\n")
    y = (y + 1)
  end
  return out
end;

function main()
  local l = newLife(80, 15)
  local i = 0
  while (i < 300) do
    step(l)
    print("\f")
    print(lifeString(l))
    i = (i + 1)
  end
end;

main();
