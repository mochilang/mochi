-- Generated by Mochi v0.10.42 on 2025-07-28 00:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _parseIntStr(str)
if type(str) == 'table' then
  str = table.concat(str)
end
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function bigrat(a, b)
    return _div(_bigrat(a), _bigrat(b))
  end
  function calkinWilf(n)
    local seq = {}
    seq = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(seq, bigrat(1, 1))
  local i = 1
  while (i < n) do
    local prev = seq[(i - 1) + 1]
    local a = num(prev)
    local b = denom(prev)
    local f = (a // b)
    local t = bigrat(f, 1)
    t = _mul(t, _bigrat(2))
    t = _sub(t, prev)
    t = _add(t, _bigrat(1))
    t = _div(_bigrat(1), t)
    seq = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(seq, t)
  i = (i + 1)
end
return seq
end
function toContinued(r)
  local a = num(r)
  local b = denom(r)
  local res = {}
  while true do
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, math.floor((a // b)))
  local t = (a % b)
  a = b
  b = t
  if (a == 1) then
    break
  end
end
if (((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(res) % 2) == 0) then
      res[((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(res) - 1) + 1] = (res[((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(res) - 1)] - 1)
              res = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(res, 1)
          end
          return res
        end
        function termNumber(cf)
          local b = ""
          local d = "1"
          for _, n in ipairs(cf) do
            b = (string.rep(d, n) .. b)
            if (d == "1") then
              d = "0"
            else
              d = "1"
            end
          end
          return _parseIntStr(b)
        end
        function commatize(n)
          local s = tostring(n)
          local out = ""
          local i = 0
          local cnt = 0
          local neg = false
          if (string.sub(s, (0 + 1), 1) == "-") then
            neg = true
            s = string.sub(s, (1 + 1), #s)
          end
          i = ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s) - 1)
              while (i >= 0) do
                out = (string.sub(s, (i + 1), (i + 1)) .. out)
                cnt = (cnt + 1)
                if ((cnt == 3) and (i ~= 0)) then
                  out = ("," .. out)
                  cnt = 0
                end
                i = (i - 1)
              end
              if neg then
                out = ("-" .. out)
              end
              return out
            end
            function main()
              local cw = calkinWilf(20)
              print("The first 20 terms of the Calkin-Wilf sequnence are:")
              local i = 0
              while (i < 20) do
                local r = cw[i + 1]
                local s = tostring(num(r))
                if (denom(r) ~= 1) then
                  s = ((s .. "/") .. tostring(denom(r)))
                end
                print(((_padStart(tostring((i + math.floor(1))), 2, " ") .. ": ") .. s))
                i = (i + 1)
              end
              local r = bigrat(83116, 51639)
              local cf = toContinued(r)
              local tn = termNumber(cf)
              print((((((("" .. tostring(num(r))) .. "/") .. tostring(denom(r))) .. " is the ") .. commatize(tn)) .. "th term of the sequence."))
            end
            main()
            local _bench_end = _now()
            collectgarbage()
            local _bench_end_mem = collectgarbage('count') * 1024
            local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
          end;
