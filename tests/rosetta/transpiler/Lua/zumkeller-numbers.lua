-- Generated by Mochi v0.10.42 on 2025-07-27 21:41 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function getDivisors(n)
    local divs = {1, n}
    local i = 2
    while ((i * i) <= n) do
      if ((n % i) == 0) then
        local j = math.floor((n // i))
        divs = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(divs, i)
      if (i ~= j) then
        divs = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(divs, j)
    end
  end
  i = (i + 1)
end
return divs
end
function sum(xs)
  local s = 0
  for _, x in ipairs(xs) do
    s = (s + x)
  end
  return s
end
function isPartSum(divs, target)
  local possible = {}
  local i = 0
  while (i <= target) do
    possible = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(possible, false)
  i = (i + 1)
end
possible[0 + 1] = true
for _, v in ipairs(divs) do
  local s = target
  while (s >= v) do
    if possible[(s - v) + 1] then
      possible[s + 1] = true
    end
    s = (s - 1)
  end
end
return possible[target + 1]
end
function isZumkeller(n)
  local divs = getDivisors(n)
  local s = (function(lst)
  local s = 0
  for _, v in ipairs(lst) do
    s = s + v
  end
  return s
end)(divs)
if ((s % 2) == 1) then
  return false
end
if ((n % 2) == 1) then
  local abundance = (s - (2 * n))
  return ((abundance > 0) and ((abundance % 2) == 0))
end
return isPartSum(divs, (s // 2))
end
function pad(n, width)
  local s = tostring(n)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s) < width) do
        s = (" " .. s)
      end
      return s
    end
    function main()
      print("The first 220 Zumkeller numbers are:")
      local count = 0
      local line = ""
      local i = 2
      while (count < 220) do
        if isZumkeller(i) then
          line = ((line .. pad(i, 3)) .. " ")
          count = (count + 1)
          if ((count % 20) == 0) then
            print(_substring(line, 0, ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(line) - 1)))
                line = ""
              end
            end
            i = (i + 1)
          end
          print("\nThe first 40 odd Zumkeller numbers are:")
          count = 0
          line = ""
          i = 3
          while (count < 40) do
            if isZumkeller(i) then
              line = ((line .. pad(i, 5)) .. " ")
              count = (count + 1)
              if ((count % 10) == 0) then
                print(_substring(line, 0, ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(line) - 1)))
                    line = ""
                  end
                end
                i = (i + 2)
              end
              print("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:")
              count = 0
              line = ""
              i = 3
              while (count < 40) do
                if (((i % 10) ~= 5) and isZumkeller(i)) then
                  line = ((line .. pad(i, 7)) .. " ")
                  count = (count + 1)
                  if ((count % 8) == 0) then
                    print(_substring(line, 0, ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(line) - 1)))
                        line = ""
                      end
                    end
                    i = (i + 2)
                  end
                end
                main()
                local _bench_end = _now()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
