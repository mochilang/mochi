-- Generated by Mochi v0.10.42 on 2025-07-28 00:18 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  doors = {}
  for i = 0, 100 - 1 do
    doors = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(doors, false)
end
for pass = 1, 101 - 1 do
  idx = (pass - 1)
  while (idx < 100) do
    doors[idx + 1] = (not doors[idx])
    idx = ((tonumber(idx) or 0) + (tonumber(pass) or 0))
  end
end
for row = 0, 10 - 1 do
  line = ""
  for col = 0, 10 - 1 do
    idx = ((tonumber((row * 10)) or 0) + (tonumber(col) or 0))
    if doors[idx] then
      line = (line .. "1")
    else
      line = (line .. "0")
    end
    if (col < 9) then
      line = (line .. " ")
    end
  end
  print(line)
end
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
