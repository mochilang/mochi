-- Generated by Mochi v0.10.40 on 2025-07-25 17:59 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  PI = 3.141592653589793
  TWO_PI = 6.283185307179586
  function sinApprox(x)
    local term = x
    local sum = x
    local n = 1
    while (n <= 8) do
      local denom = ((2 * n) * ((2 * n) + 1))
      term = ((((-term) * x) * x) / denom)
      sum = (sum + term)
      n = (n + 1)
    end
    return sum
  end
  function floor(x)
    local i = math.floor(x)
    if (i > x) then
      i = (i - 1)
    end
    return i
  end
  function absFloat(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function absInt(n)
    if (n < 0) then
      return (-n)
    end
    return n
  end
  function parseIntStr(str)
    local i = 0
    local neg = false
    if (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(str) > 0) and (string.sub(str, (0 + 1), 1) == "-")) then
        neg = true
        i = 1
      end
      local n = 0
      local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(str)) do
          n = ((n * 10) + digits[string.sub(str, (i + 1), (i + 1))])
          i = (i + 1)
        end
        if neg then
          n = (-n)
        end
        return n
      end
      function parseDate(s)
        local y = _parseIntStr(string.sub(s, (0 + 1), 4))
        local m = _parseIntStr(string.sub(s, (5 + 1), 7))
        local d = _parseIntStr(string.sub(s, (8 + 1), 10))
        return {y, m, d}
      end
      function leap(y)
        if ((y % 400) == 0) then
          return true
        end
        if ((y % 100) == 0) then
          return false
        end
        return ((y % 4) == 0)
      end
      function daysInMonth(y, m)
        local feb = ((leap(y)) and (29) or (28))
        local lengths = {31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
        return lengths[(m - 1) + 1]
      end
      function addDays(y, m, d, n)
        local yy = y
        local mm = m
        local dd = d
        if (n >= 0) then
          local i = 0
          while (i < n) do
            dd = (dd + 1)
            if (dd > daysInMonth(yy, mm)) then
              dd = 1
              mm = (mm + 1)
              if (mm > 12) then
                mm = 1
                yy = (yy + 1)
              end
            end
            i = (i + 1)
          end
        else
          local i = 0
          while (i > n) do
            dd = (dd - 1)
            if (dd < 1) then
              mm = (mm - 1)
              if (mm < 1) then
                mm = 12
                yy = (yy - 1)
              end
              dd = daysInMonth(yy, mm)
            end
            i = (i - 1)
          end
        end
        return {yy, mm, dd}
      end
      function pad2(n)
        if (n < 10) then
          return ("0" .. tostring(n))
        end
        return tostring(n)
      end
      function dateString(y, m, d)
        return ((((tostring(y) .. "-") .. pad2(m)) .. "-") .. pad2(d))
      end
      function day(y, m, d)
        local part1 = (367 * y)
        local part2 = math.floor(((7 * math.floor((y + ((m + 9) // 12)))) // 4))
        local part3 = math.floor(((275 * m) // 9))
        return ((((part1 - part2) + part3) + d) - 730530)
      end
      function biorhythms(birth, target)
        local bparts = parseDate(birth)
        local by = bparts[0 + 1]
        local bm = bparts[1 + 1]
        local bd = bparts[2 + 1]
        local tparts = parseDate(target)
        local ty = tparts[0 + 1]
        local tm = tparts[1 + 1]
        local td = tparts[2 + 1]
        local diff = absInt((day(ty, tm, td) - day(by, bm, bd)))
        print(((("Born " .. birth) .. ", Target ") .. target))
        print(("Day " .. tostring(diff)))
        local cycles = {"Physical day ", "Emotional day", "Mental day   "}
        local lengths = {23, 28, 33}
        local quadrants = {{"up and rising", "peak"}, {"up but falling", "transition"}, {"down and falling", "valley"}, {"down but rising", "transition"}}
        local i = 0
        while (i < 3) do
          local length = lengths[i + 1]
          local cycle = cycles[i + 1]
          local position = (diff % length)
          local quadrant = ((position * 4) // length)
          local percent = sinApprox((((2 * PI) * position) / length))
          percent = (floor((percent * 1000)) / 10)
          local description = ""
          if (percent > 95) then
            description = " peak"
          else
            if (percent < (-95)) then
              description = " valley"
            else
              if (absFloat(percent) < 5) then
                description = " critical transition"
              else
                local daysToAdd = ((((quadrant + 1) * length) // 4) - position)
                local res = addDays(ty, tm, td, daysToAdd)
                local ny = res[0 + 1]
                local nm = res[1 + 1]
                local nd = res[2 + 1]
                local transition = dateString(ny, nm, nd)
                local trend = quadrants[quadrant + 1][0 + 1]
                local next = quadrants[quadrant + 1][1 + 1]
                local pct = tostring(percent)
                if (not (string.find(pct, ".", 1, true) ~= nil)) then
                  pct = (pct .. ".0")
                end
                description = ((((((((" " .. pct) .. "% (") .. trend) .. ", next ") .. next) .. " ") .. transition) .. ")")
              end
            end
          end
          local posStr = tostring(position)
          if (position < 10) then
            posStr = (" " .. posStr)
          end
          print((((cycle .. posStr) .. " : ") .. description))
          i = (i + 1)
        end
        print("")
      end
      function main()
        local pairs = {{"1943-03-09", "1972-07-11"}, {"1809-01-12", "1863-11-19"}, {"1809-02-12", "1863-11-19"}}
        local idx = 0
        while (idx < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(pairs)) do
            local p = pairs[idx + 1]
            biorhythms(p[0 + 1], p[1 + 1])
            idx = (idx + 1)
          end
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
