-- Generated by Mochi v0.10.39 on 2025-07-24 14:54 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end
function pow2(n)
  local v = 1
  local i = 0
  while (i < n) do
    v = (v * 2)
    i = (i + 1)
  end
  return v
end;

function lshift(x, n)
  return (x * pow2(n))
end;

function rshift(x, n)
  return (x // pow2(n))
end;

function NewWriter(order)
  return {order = order, bits = 0, nbits = 0, data = {}}
end;

function writeBitsLSB(w, c, width)
  w.bits = (w.bits + lshift(c, w.nbits))
  w.nbits = (w.nbits + width)
  while (w.nbits >= 8) do
    local b = (w.bits % 256)
    w.data = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(w.data, b)
  w.bits = rshift(w.bits, 8)
  w.nbits = (w.nbits - 8)
end
return w
end;

function writeBitsMSB(w, c, width)
  w.bits = (w.bits + lshift(c, ((32 - width) - w.nbits)))
  w.nbits = (w.nbits + width)
  while (w.nbits >= 8) do
    local b = (rshift(w.bits, 24) % 256)
    w.data = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(w.data, b)
  w.bits = ((w.bits % pow2(24)) * 256)
  w.nbits = (w.nbits - 8)
end
return w
end;

function WriteBits(w, c, width)
  if (w.order == "LSB") then
    return writeBitsLSB((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(w), c, width)
  end
  return writeBitsMSB((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(w), c, width)
end;

function CloseWriter(w)
  if (w.nbits > 0) then
    if (w.order == "MSB") then
      w.bits = rshift(w.bits, 24)
    end
    w.data = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(w.data, (w.bits % 256))
end
w.bits = 0
w.nbits = 0
return w
end;

function toBinary(n, bits)
  local b = ""
  local val = n
  local i = 0
  while (i < bits) do
    b = (tostring((val % 2)) .. b)
    val = (val // 2)
    i = (i + 1)
  end
  return b
end;

function bytesToBits(bs)
  local out = "["
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(bs)) do
      out = (out .. toBinary(bs[i + 1], 8))
      if ((i + 1) < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(bs)) then
          out = (out .. " ")
        end
        i = (i + 1)
      end
      out = (out .. "]")
      return out
    end;
    
    function ExampleWriter_WriteBits()
      local bw = NewWriter("MSB")
      bw = WriteBits((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bw), 15, 4)
      bw = WriteBits((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bw), 0, 1)
      bw = WriteBits((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bw), 19, 5)
      bw = CloseWriter((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bw))
      print(bytesToBits(bw.data))
    end;
    
    ExampleWriter_WriteBits();
