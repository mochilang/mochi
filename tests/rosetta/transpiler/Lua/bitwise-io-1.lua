-- Generated by Mochi v0.10.42 on 2025-07-28 00:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pow2(n)
    local v = 1
    local i = 0
    while (i < n) do
      v = (v * 2)
      i = (i + 1)
    end
    return v
  end
  function lshift(x, n)
    return (x * pow2(n))
  end
  function rshift(x, n)
    return (x // pow2(n))
  end
  function NewWriter(order)
    return {order = order, bits = 0, nbits = 0, data = {}}
  end
  function writeBitsLSB(w, c, width)
    w.bits = ((tonumber(w.bits) or 0) + (tonumber(lshift(c, w.nbits)) or 0))
    w.nbits = (w.nbits + width)
    while (w.nbits >= 8) do
      local b = (w.bits % 256)
      w.data = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(w.data, b)
    w.bits = rshift(w.bits, 8)
    w.nbits = (w.nbits - 8)
  end
  return w
end
function writeBitsMSB(w, c, width)
  w.bits = ((tonumber(w.bits) or 0) + (tonumber(lshift(c, ((32 - width) - w.nbits))) or 0))
  w.nbits = (w.nbits + width)
  while (w.nbits >= 8) do
    local b = (rshift(w.bits, 24) % 256)
    w.data = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(w.data, b)
  w.bits = ((w.bits % pow2(24)) * 256)
  w.nbits = (w.nbits - 8)
end
return w
end
function WriteBits(w, c, width)
  if (w.order == "LSB") then
    return writeBitsLSB((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(w), c, width)
  end
  return writeBitsMSB((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(w), c, width)
end
function CloseWriter(w)
  if (w.nbits > 0) then
    if (w.order == "MSB") then
      w.bits = rshift(w.bits, 24)
    end
    w.data = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(w.data, (w.bits % 256))
end
w.bits = 0
w.nbits = 0
return w
end
function toBinary(n, bits)
  local b = ""
  local val = n
  local i = 0
  while (i < bits) do
    b = (tostring((val % 2)) .. b)
    val = (val // 2)
    i = (i + 1)
  end
  return b
end
function bytesToBits(bs)
  local out = "["
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(bs)) do
        out = (out .. toBinary(bs[i + 1], 8))
        if ((i + 1) < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(bs)) then
              out = (out .. " ")
            end
            i = (i + 1)
          end
          out = (out .. "]")
          return out
        end
        function ExampleWriter_WriteBits()
          local bw = NewWriter("MSB")
          bw = WriteBits((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bw), 15, 4)
          bw = WriteBits((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bw), 0, 1)
          bw = WriteBits((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bw), 19, 5)
          bw = CloseWriter((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bw))
          print(bytesToBits(bw.data))
        end
        ExampleWriter_WriteBits()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
