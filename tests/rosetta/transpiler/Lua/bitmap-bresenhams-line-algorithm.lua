-- Generated by Mochi v0.10.39 on 2025-07-24 14:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end
function absi(x)
  if (x < 0) then
    return (0 - x)
  end
  return x
end;

function bresenham(x0, y0, x1, y1)
  local dx = absi((x1 - x0))
  local dy = absi((y1 - y0))
  local sx = (0 - 1)
  if (x0 < x1) then
    sx = 1
  end
  local sy = (0 - 1)
  if (y0 < y1) then
    sy = 1
  end
  local err = (dx - dy)
  local pts = {}
  while true do
    pts = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(pts, {x = x0, y = y0})
  if ((x0 == x1) and (y0 == y1)) then
    break
  end
  local e2 = (2 * err)
  if (e2 > (0 - dy)) then
    err = (err - dy)
    x0 = (x0 + sx)
  end
  if (e2 < dx) then
    err = (err + dx)
    y0 = (y0 + sy)
  end
end
return pts
end;

function main()
  local pts = bresenham(0, 0, 6, 4)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(pts)) do
      local p = pts[i + 1]
      print((((("(" .. tostring(p.x)) .. ",") .. tostring(p.y)) .. ")"))
      i = (i + 1)
    end
  end;
  
  main();
