-- Generated by Mochi v0.10.40 on 2025-07-25 12:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function parseIntStr(str)
    local i = 0
    local neg = false
    if (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(str) > 0) and (string.sub(str, (0 + 1), 1) == "-")) then
        neg = true
        i = 1
      end
      local n = 0
      local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(str)) do
          n = ((n * 10) + digits[string.sub(str, (i + 1), (i + 1))])
          i = (i + 1)
        end
        if neg then
          n = (-n)
        end
        return n
      end
      function main()
        local total = 0
        local computer = ((_now() % 2) == 0)
        print("Enter q to quit at any time\n")
        if computer then
          print("The computer will choose first")
        else
          print("You will choose first")
        end
        print("\n\nRunning total is now 0\n\n")
        local round = 1
        local done = false
        while (not done) do
          print((("ROUND " .. tostring(round)) .. ":\n\n"))
          local i = 0
          while ((i < 2) and (not done)) do
            if computer then
              local choice = 0
              if (total < 18) then
                choice = ((_now() % 3) + 1)
              else
                choice = (21 - total)
              end
              total = (total + choice)
              print(("The computer chooses " .. tostring(choice)))
              print(("Running total is now " .. tostring(total)))
              if (total == 21) then
                print("\nSo, commiserations, the computer has won!")
                done = true
              end
            else
              while true do
                ::__cont_3::
                print("Your choice 1 to 3 : ")
                local line = input()
                if ((line == "q") or (line == "Q")) then
                  print("OK, quitting the game")
                  done = true
                  break
                end
                local num = _parseIntStr(line)
                if ((num < 1) or (num > 3)) then
                  if ((total + num) > 21) then
                    print("Too big, try again")
                  else
                    print("Out of range, try again")
                  end
                  goto __cont_3
                end
                if ((total + num) > 21) then
                  print("Too big, try again")
                  goto __cont_3
                end
                total = (total + num)
                print(("Running total is now " .. tostring(total)))
                break
              end
              if (total == 21) then
                print("\nSo, congratulations, you've won!")
                done = true
              end
            end
            print("\n")
            computer = (not computer)
            i = (i + 1)
            ::__cont_2::
          end
          round = (round + 1)
          ::__cont_1::
        end
      end
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
