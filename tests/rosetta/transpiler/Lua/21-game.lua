-- Generated by Mochi v0.10.42 on 2025-07-27 22:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _parseIntStr(str)
if type(str) == 'table' then
  str = table.concat(str)
end
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function parseIntStr(str)
    local i = 0
    local neg = false
    if (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(str) > 0) and (string.sub(str, (0 + 1), 1) == "-")) then
          neg = true
          i = 1
        end
        local n = 0
        local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(str)) do
              n = ((n * 10) + digits[string.sub(str, (i + 1), (i + 1))])
              i = (i + 1)
            end
            if neg then
              n = (-n)
            end
            return n
          end
          function main()
            local total = 0
            local computer = ((_now() % 2) == 0)
            print("Enter q to quit at any time\n")
            if computer then
              print("The computer will choose first")
            else
              print("You will choose first")
            end
            print("\n\nRunning total is now 0\n\n")
            local round = 1
            local done = false
            while (not done) do
              print((("ROUND " .. tostring(round)) .. ":\n\n"))
              local i = 0
              while ((i < 2) and (not done)) do
                if computer then
                  local choice = 0
                  if (total < 18) then
                    choice = ((_now() % 3) + 1)
                  else
                    choice = (21 - total)
                  end
                  total = (total + choice)
                  print(("The computer chooses " .. tostring(choice)))
                  print(("Running total is now " .. tostring(total)))
                  if (total == 21) then
                    print("\nSo, commiserations, the computer has won!")
                    done = true
                  end
                else
                  while true do
                    ::__cont_3::
                    print("Your choice 1 to 3 : ")
                    local line = input()
                    if ((line == "q") or (line == "Q")) then
                      print("OK, quitting the game")
                      done = true
                      break
                    end
                    local num = _parseIntStr(line)
                    if ((num < 1) or (num > 3)) then
                      if ((total + num) > 21) then
                        print("Too big, try again")
                      else
                        print("Out of range, try again")
                      end
                      goto __cont_3
                    end
                    if ((total + num) > 21) then
                      print("Too big, try again")
                      goto __cont_3
                    end
                    total = (total + num)
                    print(("Running total is now " .. tostring(total)))
                    break
                  end
                  if (total == 21) then
                    print("\nSo, congratulations, you've won!")
                    done = true
                  end
                end
                print("\n")
                computer = (not computer)
                i = (i + 1)
                ::__cont_2::
              end
              round = (round + 1)
              ::__cont_1::
            end
          end
          main()
          local _bench_end = _now()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
