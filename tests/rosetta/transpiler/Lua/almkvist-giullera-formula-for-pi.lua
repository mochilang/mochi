-- Generated by Mochi v0.10.37 on 2025-07-23 13:23 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
function bigTrim(a)
  local n = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(a)
  while ((n > 1) and (a[(n - 1) + 1] == 0)) do
    a = (function(lst,s,e)
    local r={}
    for i=s+1,e do
      r[#r+1]=lst[i]
    end
    return r
  end)(a, 0, (n - 1))
  n = (n - 1)
end
return a
end;

function bigFromInt(x)
  if (x == 0) then
    return {0}
  end
  local digits = {}
  local n = x
  while (n > 0) do
    digits = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(digits, (n % 10))
  n = (n // 10)
end
return digits
end;

function bigCmp(a, b)
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(a) > (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(b)) then
    return 1
  end
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(a) < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(b)) then
    return (0 - 1)
  end
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(a) - 1)
  while (i >= 0) do
    if (a[i + 1] > b[i + 1]) then
      return 1
    end
    if (a[i + 1] < b[i + 1]) then
      return (0 - 1)
    end
    i = (i - 1)
  end
  return 0
end;

function bigAdd(a, b)
  local res = {}
  local carry = 0
  local i = 0
  while (((i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(a)) or (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(b))) or (carry > 0)) do
    local av = 0
    if (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(a)) then
      av = a[i + 1]
    end
    local bv = 0
    if (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(b)) then
      bv = b[i + 1]
    end
    local s = ((av + bv) + carry)
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, (s % 10))
  carry = (s // 10)
  i = (i + 1)
end
return bigTrim(res)
end;

function bigSub(a, b)
  local res = {}
  local borrow = 0
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(a)) do
    local av = a[i + 1]
    local bv = 0
    if (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(b)) then
      bv = b[i + 1]
    end
    local diff = ((av - bv) - borrow)
    if (diff < 0) then
      diff = (diff + 10)
      borrow = 1
    else
      borrow = 0
    end
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, diff)
  i = (i + 1)
end
return bigTrim(res)
end;

function bigMulSmall(a, m)
  if (m == 0) then
    return {0}
  end
  local res = {}
  local carry = 0
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(a)) do
    local prod = ((a[i + 1] * m) + carry)
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, (prod % 10))
  carry = (prod // 10)
  i = (i + 1)
end
while (carry > 0) do
  res = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(res, (carry % 10))
carry = (carry // 10)
end
return bigTrim(res)
end;

function bigMulBig(a, b)
  local res = {}
  local i = 0
  while (i < ((tonumber((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(a)) or 0) + (tonumber((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(b)) or 0))) do
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, 0)
  i = (i + 1)
end
i = 0
while (i < (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  else
    return #v
  end
end)(a)) do
  local carry = 0
  local j = 0
  while (j < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(b)) do
    local idx = (i + j)
    local prod = ((res[idx + 1] + (a[i + 1] * b[j + 1])) + carry)
    res[idx + 1] = (prod % 10)
    carry = (prod // 10)
    j = (j + 1)
  end
  local idx = (i + (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(b))
  while (carry > 0) do
    local prod = (res[idx + 1] + carry)
    res[idx + 1] = (prod % 10)
    carry = (prod // 10)
    idx = (idx + 1)
  end
  i = (i + 1)
end
return bigTrim(res)
end;

function bigMulPow10(a, k)
  local i = 0
  while (i < k) do
    a = (function(a,b) local res={table.unpack(a)} for _,v in ipairs(b) do res[#res+1]=v end return res end)({0}, a)
    i = (i + 1)
  end
  return a
end;

function bigDivSmall(a, m)
  local res = {}
  local rem = 0
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(a) - 1)
  while (i >= 0) do
    local cur = ((rem * 10) + a[i + 1])
    local q = (cur // m)
    rem = (cur % m)
    res = (function(a,b) local res={table.unpack(a)} for _,v in ipairs(b) do res[#res+1]=v end return res end)({q}, res)
    i = (i - 1)
  end
  return bigTrim(res)
end;

function bigToString(a)
  local s = ""
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(a) - 1)
  while (i >= 0) do
    s = (s .. tostring(a[i + 1]))
    i = (i - 1)
  end
  return s
end;

function _repeat(ch, n)
  local s = ""
  local i = 0
  while (i < n) do
    s = (s .. ch)
    i = (i + 1)
  end
  return s
end;

function sortInts(xs)
  local res = {}
  local tmp = xs
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(tmp) > 0) do
    local min = tmp[0 + 1]
    local idx = 0
    local i = 1
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(tmp)) do
      if (tmp[i + 1] < min) then
        min = tmp[i + 1]
        idx = i
      end
      i = (i + 1)
    end
    res = (function(a,b) local res={table.unpack(a)} for _,v in ipairs(b) do res[#res+1]=v end return res end)(res, {min})
    local out = {}
    local j = 0
    while (j < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(tmp)) do
      if (j ~= idx) then
        out = (function(a,b) local res={table.unpack(a)} for _,v in ipairs(b) do res[#res+1]=v end return res end)(out, {tmp[j + 1]})
      end
      j = (j + 1)
    end
    tmp = out
  end
  return res
end;

function primesUpTo(n)
  local sieve = {}
  local i = 0
  while (i <= n) do
    sieve = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(sieve, true)
  i = (i + 1)
end
local p = 2
while ((p * p) <= n) do
  if sieve[p + 1] then
    local m = (p * p)
    while (m <= n) do
      sieve[m + 1] = false
      m = (m + p)
    end
  end
  p = (p + 1)
end
local res = {}
local x = 2
while (x <= n) do
  if sieve[x + 1] then
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, x)
end
x = (x + 1)
end
return res
end;

function factorialExp(n, primes)
  local m = {}
  for _, p in ipairs(primes) do
    if (p > n) then
      break
    end
    local t = n
    local e = 0
    while (t > 0) do
      t = (t // p)
      e = (e + t)
    end
    m[tostring(p)] = e
  end
  return m
end;

function factorSmall(x, primes)
  local f = {}
  local n = x
  for _, p in ipairs(primes) do
    if ((p * p) > n) then
      break
    end
    local c = 0
    while ((n % p) == 0) do
      c = (c + 1)
      n = (n // p)
    end
    if (c > 0) then
      f[tostring(p)] = c
    end
  end
  if (n > 1) then
    f[tostring(n)] = (((function(m,k,d) local v=m[k] if v==nil then return d end return v end)(f, tostring(n), 0)) + 1)
  end
  return f
end;

function computeIP(n, primes)
  local exps = factorialExp((6 * n), primes)
  local fn = factorialExp(n, primes)
  for k in pairs(fn) do
    exps[k] = (((function(m,k,d) local v=m[k] if v==nil then return d end return v end)(exps, k, 0)) - (6 * fn[k]))
  end
  exps["2"] = (((function(m,k,d) local v=m[k] if v==nil then return d end return v end)(exps, "2", 0)) + 5)
  local t2 = ((((532 * n) * n) + (126 * n)) + 9)
  local ft2 = factorSmall(t2, primes)
  for k in pairs(ft2) do
    exps[k] = (((function(m,k,d) local v=m[k] if v==nil then return d end return v end)(exps, k, 0)) + ft2[k])
  end
  exps["3"] = (((function(m,k,d) local v=m[k] if v==nil then return d end return v end)(exps, "3", 0)) - 1)
  local keys = {}
  for k in pairs(exps) do
    keys = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(keys, math.floor(k))
end
keys = sortInts(keys)
local res = bigFromInt(1)
for _, p in ipairs(keys) do
  local e = exps[tostring(p)]
  local i = 0
  while (i < e) do
    res = bigMulSmall(res, p)
    i = (i + 1)
  end
end
return res
end;

function formatTerm(ip, pw)
  local s = bigToString(ip)
  if (pw >= (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s)) then
    local frac = (_repeat("0", (pw - (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(s))) .. s)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(frac) < 33) then
      frac = (frac .. _repeat("0", (33 - (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(frac))))
    end
    return ("0." .. string.sub(frac, 0 + 1, 33))
  end
  local intpart = string.sub(s, 0 + 1, ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s) - pw))
  local frac = string.sub(s, ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s) - pw) + 1, (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s))
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(frac) < 33) then
    frac = (frac .. _repeat("0", (33 - (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(frac))))
  end
  return ((intpart .. ".") .. string.sub(frac, 0 + 1, 33))
end;

function bigAbsDiff(a, b)
  if (bigCmp(a, b) >= 0) then
    return bigSub(a, b)
  end
  return bigSub(b, a)
end;

function main()
  local primes = primesUpTo(2000)
  print("N                               Integer Portion  Pow  Nth Term (33 dp)")
  local line = _repeat("-", 89)
  print(line)
  local sum = bigFromInt(0)
  local prev = bigFromInt(0)
  local denomPow = 0
  local n = 0
  while true do
    local ip = computeIP(n, primes)
    local pw = ((6 * n) + 3)
    if (pw > denomPow) then
      sum = bigMulPow10(sum, (pw - denomPow))
      prev = bigMulPow10(prev, (pw - denomPow))
      denomPow = pw
    end
    if (n < 10) then
      local termStr = formatTerm(ip, pw)
      local ipStr = bigToString(ip)
      while ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(ipStr) < 44) do
        ipStr = (" " .. ipStr)
      end
      local pwStr = tostring((0 - pw))
      while ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(pwStr) < 3) do
        pwStr = (" " .. pwStr)
      end
      local padTerm = termStr
      while ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(padTerm) < 35) do
        padTerm = (padTerm .. " ")
      end
      print(((((((tostring(n) .. "  ") .. ipStr) .. "  ") .. pwStr) .. "  ") .. padTerm))
    end
    sum = bigAdd(sum, ip)
    local diff = bigAbsDiff(sum, prev)
    if ((denomPow >= 70) and (bigCmp(diff, bigMulPow10(bigFromInt(1), (denomPow - 70))) < 0)) then
      break
    end
    prev = sum
    n = (n + 1)
  end
  local precision = 70
  local target = bigMulPow10(bigFromInt(1), (denomPow + (2 * precision)))
  local low = bigFromInt(0)
  local high = bigMulPow10(bigFromInt(1), (precision + 1))
  while (bigCmp(low, bigSub(high, bigFromInt(1))) < 0) do
    local mid = bigDivSmall(bigAdd(low, high), 2)
    local prod = bigMulBig(bigMulBig(mid, mid), sum)
    if (bigCmp(prod, target) <= 0) then
      low = mid
    else
      high = bigSub(mid, bigFromInt(1))
    end
  end
  local piInt = low
  local piStr = bigToString(piInt)
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(piStr) <= precision) then
    piStr = (_repeat("0", ((precision - (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(piStr)) + 1)) .. piStr)
  end
  local out = ((string.sub(piStr, 0 + 1, ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(piStr) - precision)) .. ".") .. string.sub(piStr, ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(piStr) - precision) + 1, (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(piStr)))
  print("")
  print("Pi to 70 decimal places is:")
  print(out)
end;

main();
