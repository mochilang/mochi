-- Generated by Mochi v0.10.42 on 2025-07-27 21:41 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function ln(x)
    local k = 0
    local v = x
    while (v >= 2) do
      v = (v / 2)
      k = (k + 1)
    end
    while (v < 1) do
      v = (v * 2)
      k = (k - 1)
    end
    local z = ((v - 1) / (v + 1))
    local zpow = z
    local sum = z
    local i = 3
    while (i <= 9) do
      zpow = ((zpow * z) * z)
      sum = (sum + (zpow / i))
      i = (i + 2)
    end
    local ln2 = 0.6931471805599453
    return ((k * ln2) + (2 * sum))
  end
  function expf(x)
    local term = 1
    local sum = 1
    local i = 1
    while (i < 20) do
      term = ((term * x) / tonumber(i))
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function powf(base, exp)
    return expf((exp * ln(base)))
  end
  function lanczos7(z)
    local t = (z + 6.5)
    local x = ((((((((0.9999999999998099 + (676.5203681218851 / z)) - (1259.1392167224028 / (z + 1))) + (771.3234287776531 / (z + 2))) - (176.6150291621406 / (z + 3))) + (12.507343278686905 / (z + 4))) - (0.13857109526572012 / (z + 5))) + (9.984369578019572e-06 / (z + 6))) + (1.5056327351493116e-07 / (z + 7)))
    return (((2.5066282746310002 * powf(t, (z - 0.5))) * powf(2.718281828459045, (-t))) * x)
  end
  xs = {(-0.5), 0.1, 0.5, 1, 1.5, 2, 3, 10, 140, 170}
  for _, x in ipairs(xs) do
    print(((tostring(x) .. " ") .. tostring(lanczos7(x))))
  end
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
