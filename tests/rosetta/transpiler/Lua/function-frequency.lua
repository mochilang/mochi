-- Generated by Mochi v0.10.50 on 2025-07-30 21:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function join(xs, sep)
    local res = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (i > 0) then
            res = (res .. sep)
          end
          res = (res .. xs[i + 1])
          i = (i + 1)
        end
        return res
      end
      function sortPairs(xs)
        local arr = xs
        local i = 1
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(arr)) do
              local j = i
              while ((j > 0) and (math.floor(arr[(j - 1) + 1].count) < math.floor(arr[j + 1].count))) do
                local tmp = arr[(j - 1) + 1]
                arr[(j - 1) + 1] = arr[j + 1]
                arr[j + 1] = tmp
                j = (j - 1)
              end
              i = (i + 1)
            end
            return arr
          end
          function isAlphaNumDot(ch)
            return ((((((ch >= "A") and (ch <= "Z")) or ((ch >= "a") and (ch <= "z"))) or ((ch >= "0") and (ch <= "9"))) or (ch == "_")) or (ch == "."))
          end
          function main()
            local srcLines = {"package main", "", "import (", "    \"fmt\"", "    \"go/ast\"", "    \"go/parser\"", "    \"go/token\"", "    \"io/ioutil\"", "    \"os\"", "    \"sort\"", ")", "", "func main() {", "    if len(os.Args) != 2 {", "        fmt.Println(\"usage ff <go source filename>\")", "        return", "    }", "    src, err := ioutil.ReadFile(os.Args[1])", "    if err != nil {", "        fmt.Println(err)", "        return", "    }", "    fs := token.NewFileSet()", "    a, err := parser.ParseFile(fs, os.Args[1], src, 0)", "    if err != nil {", "        fmt.Println(err)", "        return", "    }", "    f := fs.File(a.Pos())", "    m := make(map[string]int)", "    ast.Inspect(a, func(n ast.Node) bool {", "        if ce, ok := n.(*ast.CallExpr); ok {", "            start := f.Offset(ce.Pos())", "            end := f.Offset(ce.Lparen)", "            m[string(src[start:end])]++", "        }", "        return true", "    })", "    cs := make(calls, 0, len(m))", "    for k, v := range m {", "        cs = append(cs, &call{k, v})", "    }", "    sort.Sort(cs)", "    for i, c := range cs {", "        fmt.Printf(\"%-20s %4d\\n\", c.expr, c.count)", "        if i == 9 {", "            break", "        }", "    }", "}", "", "type call struct {", "    expr  string", "    count int", "}", "type calls []*call", "", "func (c calls) Len() int           { return len(c) }", "func (c calls) Swap(i, j int)      { c[i], c[j] = c[j], c[i] }", "func (c calls) Less(i, j int) bool { return c[i].count > c[j].count }"}
            local src = join(srcLines, "\n")
            local freq = {}
            local i = 0
            local order = {}
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(src)) do
                  local ch = _substring(src, i, (i + 1))
                  if ((((ch >= "A") and (ch <= "Z")) or ((ch >= "a") and (ch <= "z"))) or (ch == "_")) then
                    local j = (i + 1)
                    while ((j < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(src)) and isAlphaNumDot(_substring(src, j, (j + 1)))) do
                          j = (j + 1)
                        end
                        local token = _substring(src, i, j)
                        local k = j
                        while (k < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(src)) do
                              local cc = _substring(src, k, (k + 1))
                              if ((((cc == " ") or (cc == "\t")) or (cc == "\n")) or (cc == "\r")) then
                                k = (k + 1)
                              else
                                break
                              end
                            end
                            if ((k < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(src)) and (_substring(src, k, (k + 1)) == "(")) then
                                  local p = (i - 1)
                                  while ((p >= 0) and ((_substring(src, p, (p + 1)) == " ") or (_substring(src, p, (p + 1)) == "\t"))) do
                                    p = (p - 1)
                                  end
                                  local skip = false
                                  if (p >= 3) then
                                    local before = _substring(src, (p - 3), (p + 1))
                                    if (before == "func") then
                                      skip = true
                                    end
                                  end
                                  if (not skip) then
                                    if (freq[token] ~= nil) then
                                      freq[token] = (freq[token] + 1)
                                    else
                                      freq[token] = 1
                                      order = (function(lst, item)
                                      local res = {table.unpack(lst)}
                                      table.insert(res, item)
                                      return res
                                    end)(order, token)
                                  end
                                end
                              end
                              i = j
                            else
                              i = (i + 1)
                            end
                          end
                          local pairs = {}
                          for _, t in ipairs(order) do
                            pairs = (function(lst, item)
                            local res = {table.unpack(lst)}
                            table.insert(res, item)
                            return res
                          end)(pairs, {__name = "GenType1", __order = {"expr", "count"}, expr = t, count = freq[t]})
                        end
                        pairs = sortPairs(pairs)
                        local idx = 0
                        while ((idx < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(pairs)) and (idx < 10)) do
                              local p = pairs[idx + 1]
                              print(((tostring(p.expr) .. " ") .. tostring(p.count)))
                              idx = (idx + 1)
                            end
                          end
                          main()
                          local _bench_end = _now()
                          collectgarbage()
                          local _bench_end_mem = collectgarbage('count') * 1024
                          local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                        end;
