-- Generated by Mochi v0.10.40 on 2025-07-25 20:06 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  width = 60
  height = math.floor((width * 0.86602540378))
  iterations = 5000
  grid = {}
  y = 0
  while (y < height) do
    line = {}
    x = 0
    while (x < width) do
      line = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(line, " ")
    x = (x + 1)
  end
  grid = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(grid, line)
y = (y + 1)
end
function randInt(s, n)
  local next = (((s * 1664525) + 1013904223) % 2147483647)
  return {next, (next % n)}
end
seed = 1
vertices = {{0, (height - 1)}, {(width - 1), (height - 1)}, {math.floor((width // 2)), 0}}
px = math.floor((width // 2))
py = math.floor((height // 2))
i = 0
while (i < iterations) do
  r = randInt(seed, 3)
  seed = r[0 + 1]
  idx = math.floor(r[1 + 1])
  v = vertices[idx + 1]
  px = math.floor(((px + v[0 + 1]) // 2))
  py = math.floor(((py + v[1 + 1]) // 2))
  if ((((px >= 0) and (px < width)) and (py >= 0)) and (py < height)) then
    grid[py + 1][px + 1] = "*"
  end
  i = (i + 1)
end
y = 0
while (y < height) do
  line = ""
  x = 0
  while (x < width) do
    line = (line .. grid[y + 1][x + 1])
    x = (x + 1)
  end
  print(line)
  y = (y + 1)
end
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
