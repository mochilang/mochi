-- Generated by Mochi v0.10.40 on 2025-07-25 17:59 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function parseBool(s)
    local l = string.lower(s)
    if (((((l == "1") or (l == "t")) or (l == true)) or (l == "yes")) or (l == "y")) then
      return true
    end
    return false
  end
  function main()
    local n = true
    print(((n) and (1) or (0)))
    print("bool")
    n = (not n)
    print(((n) and (1) or (0)))
    local x = 5
    local y = 8
    print((string.gsub(string.format("x == y: %d", (((x == y)) and (1) or (0))), "%s+$", "")))
    print((string.gsub(string.format("x < y: %d", (((x < y)) and (1) or (0))), "%s+$", "")))
    print("\nConvert String into Boolean Data type\n")
    local str1 = "japan"
    print("Before : string")
    local bolStr = parseBool(str1)
    print("After : bool")
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
