-- Generated by Mochi v0.10.42 on 2025-07-28 00:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function primesUpTo(n)
    local sieve = {}
    local i = 0
    while (i <= n) do
      sieve = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(sieve, true)
    i = (i + 1)
  end
  local p = 2
  while ((p * p) <= n) do
    if sieve[p + 1] then
      local m = (p * p)
      while (m <= n) do
        sieve[m + 1] = false
        m = (m + p)
      end
    end
    p = (p + 1)
  end
  local res = {}
  local x = 2
  while (x <= n) do
    if sieve[x + 1] then
      res = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(res, x)
  end
  x = (x + 1)
end
return res
end
function sortInts(xs)
  local res = {}
  local tmp = xs
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(tmp) > 0) do
        local min = tmp[0 + 1]
        local idx = 0
        local i = 1
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(tmp)) do
              if (tmp[i + 1] < min) then
                min = tmp[i + 1]
                idx = i
              end
              i = (i + 1)
            end
            res = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(res, min)
          local out = {}
          local j = 0
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(tmp)) do
                if (j ~= idx) then
                  out = (function(lst, item)
                  local res = {table.unpack(lst)}
                  table.insert(res, item)
                  return res
                end)(out, tmp[j + 1])
              end
              j = (j + 1)
            end
            tmp = out
          end
          return res
        end
        function commatize(n)
          local s = tostring(n)
          local i = ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s) - 3)
              while (i >= 1) do
                s = ((string.sub(s, (0 + 1), i) .. ",") .. string.sub(s, (i + 1), (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s)))
                    i = (i - 3)
                  end
                  return s
                end
                function getBrilliant(digits, limit, countOnly)
                  local brilliant = {}
                  local count = 0
                  local pow = 1
                  local next = 999999999999999
                  local k = 1
                  while (k <= digits) do
                    local s = {}
                    for _, p in ipairs(primes) do
                      if (p >= (pow * 10)) then
                        break
                      end
                      if (p > pow) then
                        s = (function(lst, item)
                        local res = {table.unpack(lst)}
                        table.insert(res, item)
                        return res
                      end)(s, p)
                    end
                  end
                  local i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(s)) do
                        local j = i
                        while (j < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(s)) do
                              local prod = (s[i + 1] * s[j + 1])
                              if (prod < limit) then
                                if countOnly then
                                  count = (count + 1)
                                else
                                  brilliant = (function(lst, item)
                                  local res = {table.unpack(lst)}
                                  table.insert(res, item)
                                  return res
                                end)(brilliant, prod)
                              end
                            else
                              if (prod < next) then
                                next = prod
                              end
                              break
                            end
                            j = (j + 1)
                          end
                          i = (i + 1)
                        end
                        pow = (pow * 10)
                        k = (k + 1)
                      end
                      if countOnly then
                        return {__name = "GenType1", __order = {"bc", "next"}, bc = count, next = next}
                      end
                      return {__name = "GenType2", __order = {"bc", "next"}, bc = brilliant, next = next}
                    end
                    function main()
                      print("First 100 brilliant numbers:")
                      local r = getBrilliant(2, 10000, false)
                      local br = sortInts(r.bc)
                      br = (function(lst,s,e)
                      local r={}
                      for i=s+1,e do
                        r[#r+1]=lst[i]
                      end
                      return r
                    end)(br, 0, 100)
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(br)) do
                          print((string.gsub(string.format("%s %d", (_padStart(tostring(tostring(br[i + 1])), 4, " ") .. " "), ((false) and (1) or (0))), "%s+$", "")))
                          if (((i + 1) % 10) == 0) then
                            print((string.gsub(string.format(" %d", ((true) and (1) or (0))), "%s+$", "")))
                          end
                          i = (i + 1)
                        end
                        print((string.gsub(string.format(" %d", ((true) and (1) or (0))), "%s+$", "")))
                        local k = 1
                        while (k <= 13) do
                          local limit = pow(10, k)
                          local r2 = getBrilliant(k, limit, true)
                          local total = r2.bc
                          local next = r2.next
                          local climit = commatize(limit)
                          local ctotal = commatize((total + 1))
                          local cnext = commatize(next)
                          print(((((("First >= " .. _padStart(tostring(climit), 18, " ")) .. " is ") .. _padStart(tostring(ctotal), 14, " ")) .. " in the series: ") .. _padStart(tostring(cnext), 18, " ")))
                          k = (k + 1)
                        end
                      end
                      primes = primesUpTo(3200000)
                      local _bench_end = _now()
                      collectgarbage()
                      local _bench_end_mem = collectgarbage('count') * 1024
                      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                    end;
