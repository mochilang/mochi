-- Generated by Mochi v0.10.39 on 2025-07-24 18:57 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function primesUpTo(n)
  local sieve = {}
  local i = 0
  while (i <= n) do
    sieve = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(sieve, true)
  i = (i + 1)
end
local p = 2
while ((p * p) <= n) do
  if sieve[p + 1] then
    local m = (p * p)
    while (m <= n) do
      sieve[m + 1] = false
      m = (m + p)
    end
  end
  p = (p + 1)
end
local res = {}
local x = 2
while (x <= n) do
  if sieve[x + 1] then
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, x)
end
x = (x + 1)
end
return res
end;

function sortInts(xs)
  local res = {}
  local tmp = xs
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(tmp) > 0) do
      local min = tmp[0 + 1]
      local idx = 0
      local i = 1
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(tmp)) do
          if (tmp[i + 1] < min) then
            min = tmp[i + 1]
            idx = i
          end
          i = (i + 1)
        end
        res = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(res, min)
      local out = {}
      local j = 0
      while (j < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(tmp)) do
          if (j ~= idx) then
            out = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(out, tmp[j + 1])
        end
        j = (j + 1)
      end
      tmp = out
    end
    return res
  end;
  
  function commatize(n)
    local s = tostring(n)
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s) - 3)
      while (i >= 1) do
        s = ((string.sub(s, (0 + 1), i) .. ",") .. string.sub(s, (i + 1), (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s)))
          i = (i - 3)
        end
        return s
      end;
      
      primes = primesUpTo(3200000);
      
      function getBrilliant(digits, limit, countOnly)
        local brilliant = {}
        local count = 0
        local pow = 1
        local next = 999999999999999
        local k = 1
        while (k <= digits) do
          local s = {}
          for _, p in ipairs(primes) do
            if (p >= (pow * 10)) then
              break
            end
            if (p > pow) then
              s = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(s, p)
          end
        end
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s)) do
            local j = i
            while (j < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s)) do
                local prod = (s[i + 1] * s[j + 1])
                if (prod < limit) then
                  if countOnly then
                    count = (count + 1)
                  else
                    brilliant = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(brilliant, prod)
                end
              else
                if (prod < next) then
                  next = prod
                end
                break
              end
              j = (j + 1)
            end
            i = (i + 1)
          end
          pow = (pow * 10)
          k = (k + 1)
        end
        if countOnly then
          return {__name = "GenType1", __order = {"bc", "next"}, bc = count, next = next}
        end
        return {__name = "GenType2", __order = {"bc", "next"}, bc = brilliant, next = next}
      end;
      
      function main()
        print("First 100 brilliant numbers:")
        local r = getBrilliant(2, 10000, false)
        local br = sortInts(r.bc)
        br = (function(lst,s,e)
        local r={}
        for i=s+1,e do
          r[#r+1]=lst[i]
        end
        return r
      end)(br, 0, 100)
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(br)) do
          print((string.gsub(string.format("%s %d", (_padStart(tostring(br[i + 1]), 4, " ") .. " "), ((false) and (1) or (0))), "%s+$", "")))
          if (((i + 1) % 10) == 0) then
            print((string.gsub(string.format(" %d", ((true) and (1) or (0))), "%s+$", "")))
          end
          i = (i + 1)
        end
        print((string.gsub(string.format(" %d", ((true) and (1) or (0))), "%s+$", "")))
        local k = 1
        while (k <= 13) do
          local limit = pow(10, k)
          local r2 = getBrilliant(k, limit, true)
          local total = r2.bc
          local next = r2.next
          local climit = commatize(limit)
          local ctotal = commatize((total + 1))
          local cnext = commatize(next)
          print(((((("First >= " .. _padStart(climit, 18, " ")) .. " is ") .. _padStart(ctotal, 14, " ")) .. " in the series: ") .. _padStart(cnext, 18, " ")))
          k = (k + 1)
        end
      end;
