-- Generated by Mochi v0.10.47 on 2025-07-28 11:48 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function main()
    local INF = 1000000000
    local n = 4
    local dist = {}
    local next = {}
    local i = 0
    while (i < n) do
      local row = {}
      local nrow = {}
      local j = 0
      while (j < n) do
        if (i == j) then
          row = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(row, 0)
      else
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, INF)
    end
    nrow = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(nrow, (0 - 1))
  j = (j + 1)
end
dist = (function(lst, item)
local res = {table.unpack(lst)}
table.insert(res, item)
return res
end)(dist, row)
next = (function(lst, item)
local res = {table.unpack(lst)}
table.insert(res, item)
return res
end)(next, nrow)
i = (i + 1)
end
dist[0 + 1][2 + 1] = (-2)
next[0 + 1][2 + 1] = 2
dist[2 + 1][3 + 1] = 2
next[2 + 1][3 + 1] = 3
dist[3 + 1][1 + 1] = (-1)
next[3 + 1][1 + 1] = 1
dist[1 + 1][0 + 1] = 4
next[1 + 1][0 + 1] = 0
dist[1 + 1][2 + 1] = 3
next[1 + 1][2 + 1] = 2
local k = 0
while (k < n) do
  local i = 0
  while (i < n) do
    local j = 0
    while (j < n) do
      if ((dist[i + 1][k + 1] < INF) and (dist[k + 1][j + 1] < INF)) then
        local alt = (dist[i + 1][k + 1] + dist[k + 1][j + 1])
        if (alt < dist[i + 1][j + 1]) then
          dist[i + 1][j + 1] = alt
          next[i + 1][j + 1] = next[i + 1][k + 1]
        end
      end
      j = (j + 1)
    end
    i = (i + 1)
  end
  k = (k + 1)
end
local function path(u, v)
local ui = (u - 1)
local vi = (v - 1)
if (next[ui + 1][vi + 1] == (0 - 1)) then
  return {}
end
local p = {u}
local cur = ui
while (cur ~= vi) do
  cur = next[cur + 1][vi + 1]
  p = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(p, (cur + 1))
end
return p
end
local function pathStr(p)
local s = ""
local first = true
local idx = 0
while (idx < (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(p)) do
      local x = p[idx + 1]
      if (not first) then
        s = (s .. " -> ")
      end
      s = (s .. tostring(x))
      first = false
      idx = (idx + 1)
    end
    return s
  end
  print("pair\tdist\tpath")
  local a = 0
  while (a < n) do
    local b = 0
    while (b < n) do
      if (a ~= b) then
        print(((((((tostring((a + 1)) .. " -> ") .. tostring((b + 1))) .. "\t") .. tostring(dist[a + 1][b + 1])) .. "\t") .. tostring(pathStr(path((a + 1), (b + 1))))))
      end
      b = (b + 1)
    end
    a = (a + 1)
  end
end
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
