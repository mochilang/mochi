-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function egyptianDivide(dividend, divisor)
    if ((dividend < 0) or (divisor <= 0)) then
      panic("Invalid argument(s)")
    end
    if (dividend < divisor) then
      return {q = 0, r = dividend}
    end
    local powers = {1}
    local doublings = {divisor}
    local doubling = (divisor * 2)
    while (doubling <= dividend) do
      powers = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(powers, (powers[((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(powers) - 1) + 1] * 2))
        doublings = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(doublings, doubling)
      doubling = (doubling * 2)
    end
    local ans = 0
    local accum = 0
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(doublings) - 1)
        while (i >= 0) do
          if ((accum + doublings[i + 1]) <= dividend) then
            accum = (accum + doublings[i + 1])
            ans = (ans + powers[i + 1])
            if (accum == dividend) then
              break
            end
          end
          i = (i - 1)
        end
        return {q = ans, r = (dividend - accum)}
      end
      function main()
        local dividend = 580
        local divisor = 34
        local res = egyptianDivide(dividend, divisor)
        print(((((((tostring(dividend) .. " divided by ") .. tostring(divisor)) .. " is ") .. tostring(res.q)) .. " with remainder ") .. tostring(res.r)))
      end
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
