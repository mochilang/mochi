-- Generated by Mochi v0.10.40 on 2025-07-25 17:59 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function floorf(x)
    local y = math.floor(x)
    return y
  end
  function indexOf(s, ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        if (string.sub(s, i + 1, (i + 1)) == ch) then
          return i
        end
        i = (i + 1)
      end
      return (-1)
    end
    function fmtF3(x)
      local y = (floorf(((x * 1000) + 0.5)) / 1000)
      local s = tostring(y)
      local dot = _indexOf(s, ".")
      if (dot == (0 - 1)) then
        s = (s .. ".000")
      else
        local decs = (((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s) - dot) - 1)
          if (decs > 3) then
            s = string.sub(s, 0 + 1, (dot + 4))
          else
            while (decs < 3) do
              s = (s .. "0")
              decs = (decs + 1)
            end
          end
        end
        return s
      end
      function padFloat3(x, width)
        local s = fmtF3(x)
        while ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s) < width) do
            s = (" " .. s)
          end
          return s
        end
        function fib1000()
          local a = 0
          local b = 1
          local res = {}
          local i = 0
          while (i < 1000) do
            res = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(res, b)
          local t = b
          b = (b + a)
          a = t
          i = (i + 1)
        end
        return res
      end
      function leadingDigit(x)
        if (x < 0) then
          x = (-x)
        end
        while (x >= 10) do
          x = (x / 10)
        end
        while ((x > 0) and (x < 1)) do
          x = (x * 10)
        end
        return math.floor(x)
      end
      function show(nums, title)
        local counts = {0, 0, 0, 0, 0, 0, 0, 0, 0}
        for _, n in ipairs(nums) do
          local d = leadingDigit(n)
          if ((d >= 1) and (d <= 9)) then
            counts[(d - 1) + 1] = (counts[(d - 1) + 1] + 1)
          end
        end
        local preds = {0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046}
        local total = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(nums)
          print(title)
          print("Digit  Observed  Predicted")
          local i = 0
          while (i < 9) do
            local obs = (counts[i + 1] // total)
            local line = ((((("  " .. tostring((i + 1))) .. "  ") .. padFloat3(obs, 9)) .. "  ") .. padFloat3(preds[i + 1], 8))
            print(line)
            i = (i + 1)
          end
        end
        function main()
          show(fib1000(), "First 1000 Fibonacci numbers")
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
