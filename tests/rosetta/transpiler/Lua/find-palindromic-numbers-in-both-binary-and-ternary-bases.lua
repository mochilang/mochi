-- Generated by Mochi v0.10.50 on 2025-07-30 21:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _parseIntStr(str)
if type(str) == 'table' then
  str = table.concat(str)
end
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function toBase(n, b)
    if (n == 0) then
      return "0"
    end
    local s = ""
    local x = n
    while (x > 0) do
      s = (tostring((x % b)) .. s)
      x = math.floor((x // b))
    end
    return s
    local function parseIntStr(str)
    local i = 0
    local neg = false
    if (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(str) > 0) and (string.sub(str, (0 + 1), (0 + 1)) == "-")) then
          neg = true
          i = 1
        end
        local n = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(str)) do
              n = (((n * 10) + math.floor(string.sub(str, (i + 1), (i + 1)))) - math.floor("0"))
              i = (i + 1)
            end
            if neg then
              n = (-n)
            end
            return n
          end
        end
        function parseIntBase(s, b)
          local n = 0
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s)) do
                n = ((n * b) + _parseIntStr(string.sub(s, (i + 1), (i + 1))))
                i = (i + 1)
              end
              return n
            end
            function reverseStr(s)
              local out = ""
              local i = ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(s) - 1)
                  while (i >= 0) do
                    out = (out .. string.sub(s, (i + 1), (i + 1)))
                    i = (i - 1)
                  end
                  return out
                end
                function isPalindrome(s)
                  return (s == reverseStr(s))
                end
                function isPalindromeBin(n)
                  local b = toBase(n, 2)
                  return isPalindrome(b)
                end
                function myMin(a, b)
                  if (a < b) then
                    return a
                  end
                  return b
                end
                function myMax(a, b)
                  if (a > b) then
                    return a
                  end
                  return b
                end
                function reverse3(n)
                  local x = 0
                  local y = n
                  while (y ~= 0) do
                    x = ((x * 3) + (y % 3))
                    y = math.floor((y // 3))
                  end
                  return x
                end
                function show(n)
                  print(("Decimal : " .. tostring(n)))
                  print(("Binary  : " .. toBase(n, 2)))
                  print(("Ternary : " .. toBase(n, 3)))
                  print("")
                end
                function main()
                  print("The first 6 numbers which are palindromic in both binary and ternary are :\n")
                  show(0)
                  local count = 1
                  local lo = 0
                  local hi = 1
                  local pow2 = 1
                  local pow3 = 1
                  while true do
                    local i = lo
                    while (i < hi) do
                      local n = ((((i * 3) + 1) * pow3) + reverse3(i))
                      if isPalindromeBin(n) then
                        show(n)
                        count = (count + 1)
                        if (count >= 6) then
                          return
                        end
                      end
                      i = (i + 1)
                    end
                    if (i == pow3) then
                      pow3 = (pow3 * 3)
                    else
                      pow2 = (pow2 * 4)
                    end
                    while true do
                      while (pow2 <= pow3) do
                        pow2 = (pow2 * 4)
                      end
                      local lo2 = math.floor((((pow2 // pow3) - 1) // 3))
                      local hi2 = (math.floor(((((pow2 * 2) // pow3) - 1) // 3)) + 1)
                      local lo3 = math.floor((pow3 // 3))
                      local hi3 = pow3
                      if (lo2 >= hi3) then
                        pow3 = (pow3 * 3)
                      else
                        if (lo3 >= hi2) then
                          pow2 = (pow2 * 4)
                        else
                          lo = myMax(lo2, lo3)
                          hi = myMin(hi2, hi3)
                          break
                        end
                      end
                    end
                  end
                end
                main()
                local _bench_end = _now()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
