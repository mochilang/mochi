-- Generated by Mochi v0.10.42 on 2025-07-27 21:41 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function toBase(n, b)
    if (n == 0) then
      return "0"
    end
    local s = ""
    local x = n
    while (x > 0) do
      s = (tostring((x % b)) .. s)
      x = math.floor((x // b))
    end
    return s
  end
  function reverseStr(s)
    local out = ""
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - 1)
        while (i >= 0) do
          out = (out .. string.sub(s, (i + 1), (i + 1)))
          i = (i - 1)
        end
        return out
      end
      function isPal(s)
        return (s == reverseStr(s))
      end
      function main()
        print("Numbers palindromic in both binary and ternary :\n")
        local count = 0
        local n = 0
        while (count < 4) do
          local b2 = toBase(n, 2)
          local b3 = toBase(n, 3)
          if (isPal(b2) and isPal(b3)) then
            print(tostring(n))
            count = (count + 1)
          end
          n = (n + 1)
        end
      end
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
