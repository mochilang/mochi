-- Generated by Mochi v0.10.39 on 2025-07-24 16:16 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function isPrime(n)
  if (n < 2) then
    return false
  end
  if ((n % 2) == 0) then
    return (n == 2)
  end
  if ((n % 3) == 0) then
    return (n == 3)
  end
  local d = 5
  while ((d * d) <= n) do
    if ((n % d) == 0) then
      return false
    end
    d = (d + 2)
    if ((n % d) == 0) then
      return false
    end
    d = (d + 4)
  end
  return true
end;

function firstPrimeFactor(n)
  if (n == 1) then
    return 1
  end
  if ((n % 3) == 0) then
    return 3
  end
  if ((n % 5) == 0) then
    return 5
  end
  local inc = {4, 2, 4, 2, 4, 6, 2, 6}
  local k = 7
  local i = 0
  while ((k * k) <= n) do
    if ((n % k) == 0) then
      return k
    end
    k = (k + inc[i + 1])
    i = ((i + 1) % (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(inc))
    end
    return n
  end;
  
  function indexOf(s, ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        if (string.sub(s, i + 1, (i + 1)) == ch) then
          return i
        end
        i = (i + 1)
      end
      return (0 - 1)
    end;
    
    function padLeft(n, width)
      local s = tostring(n)
      while ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) < width) do
          s = (" " .. s)
        end
        return s
      end;
      
      function formatFloat(f, prec)
        local s = tostring(f)
        local idx = _indexOf(s, ".")
        if (idx < 0) then
          return s
        end
        local need = ((idx + 1) + prec)
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s) > need) then
            return string.sub(s, 0 + 1, need)
          end
          return s
        end;
        
        function main()
          local blum = {}
          local counts = {0, 0, 0, 0}
          local digits = {1, 3, 7, 9}
          local i = 1
          local bc = 0
          while true do
            local p = firstPrimeFactor(i)
            if ((p % 4) == 3) then
              local q = math.floor((i // p))
              if (((q ~= p) and ((q % 4) == 3)) and isPrime(q)) then
                if (bc < 50) then
                  blum = (function(lst, item)
                  local res = {table.unpack(lst)}
                  table.insert(res, item)
                  return res
                end)(blum, i)
              end
              local d = (i % 10)
              if (d == 1) then
                counts[0 + 1] = (counts[0 + 1] + 1)
              else
                if (d == 3) then
                  counts[1 + 1] = (counts[1 + 1] + 1)
                else
                  if (d == 7) then
                    counts[2 + 1] = (counts[2 + 1] + 1)
                  else
                    if (d == 9) then
                      counts[3 + 1] = (counts[3 + 1] + 1)
                    end
                  end
                end
              end
              bc = (bc + 1)
              if (bc == 50) then
                print("First 50 Blum integers:")
                local idx = 0
                while (idx < 50) do
                  local line = ""
                  local j = 0
                  while (j < 10) do
                    line = ((line .. padLeft(blum[idx + 1], 3)) .. " ")
                    idx = (idx + 1)
                    j = (j + 1)
                  end
                  print(string.sub(line, 0 + 1, ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(line) - 1)))
                  end
                  break
                end
              end
            end
            if ((i % 5) == 3) then
              i = (i + 4)
            else
              i = (i + 2)
            end
          end
        end;
        
        main();
