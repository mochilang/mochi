-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pow(base, exp)
    local result = 1
    local i = 0
    while (i < exp) do
      result = (result * base)
      i = (i + 1)
    end
    return result
  end
  function isDisarium(n)
    local digits = {}
    local x = n
    if (x == 0) then
      digits = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(digits, 0)
  end
  while (x > 0) do
    digits = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(digits, (x % 10))
  x = math.floor((x // 10))
end
local sum = 0
local pos = 1
local i = ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(digits) - 1)
    while (i >= 0) do
      sum = (sum + pow(digits[i + 1], pos))
      pos = (pos + 1)
      i = (i - 1)
    end
    return (sum == n)
  end
  function main()
    local count = 0
    local n = 0
    while ((count < 19) and (n < 3000000)) do
      if isDisarium(n) then
        print(tostring(n))
        count = (count + 1)
      end
      n = (n + 1)
    end
    print((("\nFound the first " .. tostring(count)) .. " Disarium numbers."))
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
