-- Generated by Mochi v0.10.42 on 2025-07-27 21:41 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function xor(a, b)
    local res = 0
    local bit = 1
    local x = a
    local y = b
    while ((x > 0) or (y > 0)) do
      if ((((x % 2) + (y % 2)) % 2) == 1) then
        res = (res + bit)
      end
      x = (x // 2)
      y = (y // 2)
      bit = (bit * 2)
    end
    return res
  end
  function enc(b)
    return xor(b, (b // 2))
  end
  function dec(g)
    local b = 0
    local x = g
    while (x > 0) do
      b = xor(b, x)
      x = (x // 2)
    end
    return b
  end
  function binary(n)
    if (n == 0) then
      return "0"
    end
    local s = ""
    local x = n
    while (x > 0) do
      if ((x % 2) == 1) then
        s = ("1" .. s)
      else
        s = ("0" .. s)
      end
      x = (x // 2)
    end
    return s
  end
  function pad5(s)
    local p = s
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(p) < 5) do
          p = ("0" .. p)
        end
        return p
      end
      function main()
        print("decimal  binary   gray    decoded")
        local b = 0
        while (b < 32) do
          local g = enc(b)
          local d = dec(g)
          print(((((((("  " .. pad5(binary(b))) .. "   ") .. pad5(binary(g))) .. "   ") .. pad5(binary(d))) .. "  ") .. tostring(d)))
          b = (b + 1)
        end
      end
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
