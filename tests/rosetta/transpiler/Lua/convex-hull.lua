-- Generated by Mochi v0.10.39 on 2025-07-25 00:28 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
function ccw(a, b, c)
  local lhs = ((b.x - a.x) * (c.y - a.y))
  local rhs = ((b.y - a.y) * (c.x - a.x))
  return (lhs > rhs)
end;

function sortPoints(ps)
  local arr = ps
  local n = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(arr)
    local i = 0
    while (i < n) do
      local j = 0
      while (j < (n - 1)) do
        local p = arr[j + 1]
        local q = arr[(j + 1) + 1]
        if ((p.x > q.x) or ((p.x == q.x) and (p.y > q.y))) then
          arr[j + 1] = q
          arr[(j + 1) + 1] = p
        end
        j = (j + 1)
      end
      i = (i + 1)
    end
    return arr
  end;
  
  function convexHull(ps)
    ps = sortPoints(ps)
    local h = {}
    for _, pt in ipairs(ps) do
      while (((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(h) >= 2) and (ccw(h[((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(h) - 2) + 1], h[((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(h) - 1) + 1], pt) == false)) do
              h = (function(lst,s,e)
              local r={}
              for i=s+1,e do
                r[#r+1]=lst[i]
              end
              return r
            end)(h, 0, ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(h) - 1))
            end
            h = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(h, pt)
        end
        local i = ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(ps) - 2)
          local t = ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(h) + 1)
            while (i >= 0) do
              local pt = ps[i + 1]
              while (((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(h) >= t) and (ccw(h[((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(h) - 2) + 1], h[((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(h) - 1) + 1], pt) == false)) do
                      h = (function(lst,s,e)
                      local r={}
                      for i=s+1,e do
                        r[#r+1]=lst[i]
                      end
                      return r
                    end)(h, 0, ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(h) - 1))
                    end
                    h = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(h, pt)
                  i = (i - 1)
                end
                return (function(lst,s,e)
                local r={}
                for i=s+1,e do
                  r[#r+1]=lst[i]
                end
                return r
              end)(h, 0, ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(h) - 1))
              end;
              
              function pointStr(p)
                return (((("(" .. tostring(p.x)) .. ",") .. tostring(p.y)) .. ")")
              end;
              
              function hullStr(h)
                local s = "["
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(h)) do
                    s = (s .. pointStr(h[i + 1]))
                    if (i < ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(h) - 1)) then
                        s = (s .. " ")
                      end
                      i = (i + 1)
                    end
                    s = (s .. "]")
                    return s
                  end;
                  
                  pts = {{x = 16, y = 3}, {x = 12, y = 17}, {x = 0, y = 6}, {x = (-4), y = (-6)}, {x = 16, y = 6}, {x = 16, y = (-7)}, {x = 16, y = (-3)}, {x = 17, y = (-4)}, {x = 5, y = 19}, {x = 19, y = (-8)}, {x = 3, y = 16}, {x = 12, y = 13}, {x = 3, y = (-4)}, {x = 17, y = 5}, {x = (-3), y = 15}, {x = (-3), y = (-9)}, {x = 0, y = 11}, {x = (-9), y = (-3)}, {x = (-4), y = (-2)}, {x = 12, y = 10}};
                  
                  hull = convexHull(pts);
                  
                  print(("Convex Hull: " .. hullStr(hull)));
