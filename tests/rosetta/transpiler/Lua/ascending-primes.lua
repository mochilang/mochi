-- Generated by Mochi v0.10.37 on 2025-07-23 14:12 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
function isPrime(n)
  if (n < 2) then
    return false
  end
  if ((n % 2) == 0) then
    return (n == 2)
  end
  if ((n % 3) == 0) then
    return (n == 3)
  end
  local d = 5
  while ((d * d) <= n) do
    if ((n % d) == 0) then
      return false
    end
    d = (d + 2)
    if ((n % d) == 0) then
      return false
    end
    d = (d + 4)
  end
  return true
end;

asc = {};

function gen(first, cand, digits)
  if (digits == 0) then
    if isPrime(cand) then
      asc = (function(a,b) local res={table.unpack(a)} for _,v in ipairs(b) do res[#res+1]=v end return res end)(asc, {cand})
    end
    return
  end
  local i = first
  while (i < 10) do
    gen((i + 1), ((cand * 10) + i), (digits - 1))
    i = (i + 1)
  end
end;

function pad(n, width)
  local s = tostring(n)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s) < width) do
      s = (" " .. s)
    end
    return s
  end;
  
  function main()
    local digits = 1
    while (digits < 10) do
      gen(1, 0, digits)
      digits = (digits + 1)
    end
    print((("There are " .. tostring((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(asc))) .. " ascending primes, namely:"))
      local i = 0
      local line = ""
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(asc)) do
          line = ((line .. pad(asc[i + 1], 8)) .. " ")
          if (((i + 1) % 10) == 0) then
            print(string.sub(line, 0 + 1, ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(line) - 1)))
              line = ""
            end
            i = (i + 1)
          end
          if ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(line) > 0) then
              print(string.sub(line, 0 + 1, ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(line) - 1)))
              end
            end;
            
            main();
