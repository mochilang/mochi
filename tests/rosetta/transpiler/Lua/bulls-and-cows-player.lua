-- Generated by Mochi v0.10.39 on 2025-07-24 20:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function indexOf(s, ch)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      if (string.sub(s, i + 1, (i + 1)) == ch) then
        return i
      end
      i = (i + 1)
    end
    return (0 - 1)
  end;
  
  function fields(s)
    local words = {}
    local cur = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        local ch = string.sub(s, i + 1, (i + 1))
        if (((ch == " ") or (ch == "\t")) or (ch == "\n")) then
          if ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(cur) > 0) then
              words = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(words, cur)
            cur = ""
          end
        else
          cur = (cur .. ch)
        end
        i = (i + 1)
      end
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(cur) > 0) then
          words = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(words, cur)
      end
      return words
    end;
    
    function makePatterns()
      local digits = {"1", "2", "3", "4", "5", "6", "7", "8", "9"}
      local pats = {}
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(digits)) do
          local j = 0
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(digits)) do
              if (j ~= i) then
                local k = 0
                while (k < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(digits)) do
                    if ((k ~= i) and (k ~= j)) then
                      local l = 0
                      while (l < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' or type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(digits)) do
                          if (((l ~= i) and (l ~= j)) and (l ~= k)) then
                            pats = (function(lst, item)
                            local res = {table.unpack(lst)}
                            table.insert(res, item)
                            return res
                          end)(pats, (((digits[i + 1] .. digits[j + 1]) .. digits[k + 1]) .. digits[l + 1]))
                        end
                        l = (l + 1)
                      end
                    end
                    k = (k + 1)
                  end
                end
                j = (j + 1)
              end
              i = (i + 1)
            end
            return pats
          end;
          
          function main()
            print(((((("Cows and bulls/player\n" .. "You think of four digit number of unique digits in the range 1 to 9.\n") .. "I guess.  You score my guess:\n") .. "    A correct digit but not in the correct place is a cow.\n") .. "    A correct digit in the correct place is a bull.\n") .. "You give my score as two numbers separated with a space."))
            local patterns = makePatterns()
            while true do
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(patterns) == 0) then
                  print("Oops, check scoring.")
                  return
                end
                local guess = patterns[0 + 1]
                patterns = (function(lst,s,e)
                local r={}
                for i=s+1,e do
                  r[#r+1]=lst[i]
                end
                return r
              end)(patterns, 1, #patterns)
              local cows = 0
              local bulls = 0
              while true do
                print((("My guess: " .. guess) .. ".  Score? (c b) "))
                local line = input()
                local toks = fields(line)
                if ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(toks) == 2) then
                    local c = math.floor(toks[0 + 1])
                    local b = math.floor(toks[1 + 1])
                    if (((((c >= 0) and (c <= 4)) and (b >= 0)) and (b <= 4)) and ((c + b) <= 4)) then
                      cows = c
                      bulls = b
                      break
                    end
                  end
                  print("Score guess as two numbers: cows bulls")
                end
                if (bulls == 4) then
                  print("I did it. :)")
                  return
                end
                local next = {}
                local idx = 0
                while (idx < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(patterns)) do
                    local pat = patterns[idx + 1]
                    local c = 0
                    local b = 0
                    local i = 0
                    while (i < 4) do
                      local cg = string.sub(guess, i + 1, (i + 1))
                      local cp = string.sub(pat, i + 1, (i + 1))
                      if (cg == cp) then
                        b = (b + 1)
                      else
                        if (_indexOf(pat, cg) >= 0) then
                          c = (c + 1)
                        end
                      end
                      i = (i + 1)
                    end
                    if ((c == cows) and (b == bulls)) then
                      next = (function(lst, item)
                      local res = {table.unpack(lst)}
                      table.insert(res, item)
                      return res
                    end)(next, pat)
                  end
                  idx = (idx + 1)
                end
                patterns = next
              end
            end;
            
            main();
