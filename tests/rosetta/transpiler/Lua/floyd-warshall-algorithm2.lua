-- Generated by Mochi v0.10.50 on 2025-07-30 21:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function floydWarshall(graph)
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(graph)
        local dist = {}
        local next = {}
        local i = 0
        while (i < n) do
          local drow = {}
          local nrow = {}
          local j = 0
          while (j < n) do
            drow = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(drow, graph[i + 1][j + 1])
          if ((graph[i + 1][j + 1] < INF) and (i ~= j)) then
            nrow = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(nrow, j)
        else
          nrow = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(nrow, (-1))
      end
      j = (j + 1)
    end
    dist = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(dist, drow)
  next = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(next, nrow)
i = (i + 1)
end
local k = 0
while (k < n) do
  local i = 0
  while (i < n) do
    local j = 0
    while (j < n) do
      if ((dist[i + 1][k + 1] < INF) and (dist[k + 1][j + 1] < INF)) then
        local alt = (dist[i + 1][k + 1] + dist[k + 1][j + 1])
        if (alt < dist[i + 1][j + 1]) then
          dist[i + 1][j + 1] = alt
          next[i + 1][j + 1] = next[i + 1][k + 1]
        end
      end
      j = (j + 1)
    end
    i = (i + 1)
  end
  k = (k + 1)
end
return {dist = dist, next = next}
end
function path(u, v, next)
  if (next[u + 1][v + 1] < 0) then
    return {}
  end
  local p = {u}
  local x = u
  while (x ~= v) do
    x = next[x + 1][v + 1]
    p = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(p, x)
end
return p
end
function pathStr(p)
  local s = ""
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(p)) do
        s = (s .. tostring((p[i + 1] + 1)))
        if (i < ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(p) - 1)) then
              s = (s .. " -> ")
            end
            i = (i + 1)
          end
          return s
        end
        INF = 1000000
        n = 4
        g = {}
        for i = 0, n - 1 do
          row = {}
          for j = 0, n - 1 do
            if (i == j) then
              row = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(row, 0)
          else
            row = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(row, INF)
        end
      end
      g = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(g, row)
  end
  g[0 + 1][2 + 1] = (-2)
  g[2 + 1][3 + 1] = 2
  g[3 + 1][1 + 1] = (-1)
  g[1 + 1][0 + 1] = 4
  g[1 + 1][2 + 1] = 3
  res = floydWarshall(g)
  print("pair\tdist\tpath")
  i = 0
  while (i < n) do
    j = 0
    while (j < n) do
      if (i ~= j) then
        p = path(i, j, res.next)
        print(((((((tostring((i + 1)) .. " -> ") .. tostring((j + 1))) .. "\t") .. tostring(res.dist[i + 1][j + 1])) .. "\t") .. pathStr(p)))
      end
      j = (j + 1)
    end
    i = (i + 1)
  end
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
