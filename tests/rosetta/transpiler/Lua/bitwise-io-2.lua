-- Generated by Mochi v0.10.39 on 2025-07-24 15:20 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function pow2(n)
  local v = 1
  local i = 0
  while (i < n) do
    v = (v * 2)
    i = (i + 1)
  end
  return v
end;

function lshift(x, n)
  return (x * pow2(n))
end;

function rshift(x, n)
  return (x // pow2(n))
end;

function NewWriter(order)
  return {order = order, bits = 0, nbits = 0, data = {}}
end;

function writeBitsLSB(w, c, width)
  w.bits = (w.bits + lshift(c, w.nbits))
  w.nbits = (w.nbits + width)
  while (w.nbits >= 8) do
    local b = (w.bits % 256)
    w.data = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(w.data, b)
  w.bits = rshift(w.bits, 8)
  w.nbits = (w.nbits - 8)
end
return w
end;

function writeBitsMSB(w, c, width)
  w.bits = (w.bits + lshift(c, ((32 - width) - w.nbits)))
  w.nbits = (w.nbits + width)
  while (w.nbits >= 8) do
    local b = (rshift(w.bits, 24) % 256)
    w.data = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(w.data, b)
  w.bits = ((w.bits % pow2(24)) * 256)
  w.nbits = (w.nbits - 8)
end
return w
end;

function WriteBits(w, c, width)
  if (w.order == "LSB") then
    return writeBitsLSB((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(w), c, width)
  end
  return writeBitsMSB((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(w), c, width)
end;

function CloseWriter(w)
  if (w.nbits > 0) then
    if (w.order == "MSB") then
      w.bits = rshift(w.bits, 24)
    end
    w.data = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(w.data, (w.bits % 256))
end
w.bits = 0
w.nbits = 0
return w
end;

function NewReader(data, order)
  return {order = order, data = data, idx = 0, bits = 0, nbits = 0}
end;

function readBitsLSB(r, width)
  while (r.nbits < width) do
    if (r.idx >= (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(r.data)) then
        return {__name = "GenType1", __order = {"val", "eof"}, val = 0, eof = true}
      end
      local b = r.data[r.idx + 1]
      r.idx = (r.idx + 1)
      r.bits = (r.bits + lshift(b, r.nbits))
      r.nbits = (r.nbits + 8)
    end
    local mask = (pow2(width) - 1)
    local out = (r.bits % (mask + 1))
    r.bits = rshift(r.bits, width)
    r.nbits = (r.nbits - width)
    return {__name = "GenType2", __order = {"val", "eof"}, val = out, eof = false}
  end;
  
  function readBitsMSB(r, width)
    while (r.nbits < width) do
      if (r.idx >= (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(r.data)) then
          return {__name = "GenType3", __order = {"val", "eof"}, val = 0, eof = true}
        end
        local b = r.data[r.idx + 1]
        r.idx = (r.idx + 1)
        r.bits = (r.bits + lshift(b, (24 - r.nbits)))
        r.nbits = (r.nbits + 8)
      end
      local out = rshift(r.bits, (32 - width))
      r.bits = ((r.bits * pow2(width)) % pow2(32))
      r.nbits = (r.nbits - width)
      return {__name = "GenType4", __order = {"val", "eof"}, val = out, eof = false}
    end;
    
    function ReadBits(r, width)
      if (r.order == "LSB") then
        return readBitsLSB(r, width)
      end
      return readBitsMSB(r, width)
    end;
    
    function toBinary(n, bits)
      local b = ""
      local val = n
      local i = 0
      while (i < bits) do
        b = (tostring((val % 2)) .. b)
        val = (val // 2)
        i = (i + 1)
      end
      return b
    end;
    
    function bytesToBits(bs)
      local out = "["
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(bs)) do
          out = (out .. toBinary(bs[i + 1], 8))
          if ((i + 1) < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(bs)) then
              out = (out .. " ")
            end
            i = (i + 1)
          end
          out = (out .. "]")
          return out
        end;
        
        function bytesToHex(bs)
          local digits = "0123456789ABCDEF"
          local out = ""
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(bs)) do
              local b = bs[i + 1]
              local hi = (b // 16)
              local lo = (b % 16)
              out = ((out .. string.sub(digits, (hi + 1), (hi + 1))) .. string.sub(digits, (lo + 1), (lo + 1)))
              if ((i + 1) < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(bs)) then
                  out = (out .. " ")
                end
                i = (i + 1)
              end
              return out
            end;
            
            function ord(ch)
              local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
              local lower = "abcdefghijklmnopqrstuvwxyz"
              local idx = _indexOf(upper, ch)
              if (idx >= 0) then
                return (65 + idx)
              end
              idx = _indexOf(lower, ch)
              if (idx >= 0) then
                return (97 + idx)
              end
              if ((ch >= "0") and (ch <= "9")) then
                return (48 + _parseIntStr(ch))
              end
              if (ch == " ") then
                return 32
              end
              if (ch == ".") then
                return 46
              end
              return 0
            end;
            
            function chr(n)
              local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
              local lower = "abcdefghijklmnopqrstuvwxyz"
              if ((n >= 65) and (n < 91)) then
                return string.sub(upper, ((n - 65) + 1), (n - 64))
              end
              if ((n >= 97) and (n < 123)) then
                return string.sub(lower, ((n - 97) + 1), (n - 96))
              end
              if ((n >= 48) and (n < 58)) then
                local digits = "0123456789"
                return string.sub(digits, ((n - 48) + 1), (n - 47))
              end
              if (n == 32) then
                return " "
              end
              if (n == 46) then
                return "."
              end
              return "?"
            end;
            
            function bytesOfStr(s)
              local bs = {}
              local i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s)) do
                  bs = (function(lst, item)
                  local res = {table.unpack(lst)}
                  table.insert(res, item)
                  return res
                end)(bs, ord(string.sub(s, (i + 1), (i + 1))))
                i = (i + 1)
              end
              return bs
            end;
            
            function bytesToDec(bs)
              local out = ""
              local i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(bs)) do
                  out = (out .. tostring(bs[i + 1]))
                  if ((i + 1) < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(bs)) then
                      out = (out .. " ")
                    end
                    i = (i + 1)
                  end
                  return out
                end;
                
                function Example()
                  local message = "This is a test."
                  local msgBytes = bytesOfStr(message)
                  print(((("\"" .. message) .. "\" as bytes: ") .. bytesToDec(msgBytes)))
                  print(("    original bits: " .. bytesToBits(msgBytes)))
                  local bw = NewWriter("MSB")
                  local i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(msgBytes)) do
                      bw = WriteBits((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bw), msgBytes[i + 1], 7)
                      i = (i + 1)
                    end
                    bw = CloseWriter((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bw))
                    print(("Written bitstream: " .. bytesToBits(bw.data)))
                    print(("Written bytes: " .. bytesToHex(bw.data)))
                    local br = NewReader(bw.data, "MSB")
                    local result = ""
                    while true do
                      local r = ReadBits(br, 7)
                      if r.eof then
                        break
                      end
                      local v = math.floor(r.val)
                      if (v ~= 0) then
                        result = (result .. chr(v))
                      end
                    end
                    print((("Read back as \"" .. result) .. "\""))
                  end;
                  
                  Example();
