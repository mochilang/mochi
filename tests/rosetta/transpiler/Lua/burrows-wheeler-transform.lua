-- Generated by Mochi v0.10.56 on 2025-08-03 17:00 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function contains(s, ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if (_substring(s, i, (i + 1)) == ch) then
            return true
          end
          i = (i + 1)
        end
        return false
      end
      function sortStrings(xs)
        local arr = xs
        local n = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(arr)
            local i = 0
            while (i < n) do
              local j = 0
              while (j < (n - 1)) do
                if (arr[j + 1] > arr[(j + 1) + 1]) then
                  local tmp = arr[j + 1]
                  arr[j + 1] = arr[(j + 1) + 1]
                  arr[(j + 1) + 1] = tmp
                end
                j = (j + 1)
              end
              i = (i + 1)
            end
            return arr
          end
          function bwt(s)
            if ((string.find(s, stx, 1, true) ~= nil) or (string.find(s, etx, 1, true) ~= nil)) then
              return {__name = "GenType1", __order = {"err", "res"}, err = true, res = ""}
            end
            s = ((stx .. s) .. etx)
            local le = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s)
                local _table = {}
                local i = 0
                while (i < le) do
                  local rot = (_substring(s, i, le) .. _substring(s, 0, i))
                  _table = (function(lst, item)
                  local res = {table.unpack(lst)}
                  table.insert(res, item)
                  return res
                end)(_table, rot)
                i = (i + 1)
              end
              _table = sortStrings(_table)
              local last = ""
              i = 0
              while (i < le) do
                last = (last .. _substring(_table[i + 1], (le - 1), le))
                i = (i + 1)
              end
              return {__name = "GenType2", __order = {"err", "res"}, err = false, res = last}
            end
            function ibwt(r)
              local le = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(r)
                  local _table = {}
                  local i = 0
                  while (i < le) do
                    _table = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(_table, "")
                  i = (i + 1)
                end
                local n = 0
                while (n < le) do
                  i = 0
                  while (i < le) do
                    _table[i + 1] = (_substring(r, i, (i + 1)) .. _table[i + 1])
                    i = (i + 1)
                  end
                  _table = sortStrings(_table)
                  n = (n + 1)
                end
                i = 0
                while (i < le) do
                  if (_substring(_table[i + 1], (le - 1), le) == etx) then
                    return _substring(_table[i + 1], 1, (le - 1))
                  end
                  i = (i + 1)
                end
                return ""
              end
              function makePrintable(s)
                local out = ""
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s)) do
                      local ch = _substring(s, i, (i + 1))
                      if (ch == stx) then
                        out = (out .. "^")
                      else
                        if (ch == etx) then
                          out = (out .. "|")
                        else
                          out = (out .. ch)
                        end
                      end
                      i = (i + 1)
                    end
                    return out
                  end
                  function main()
                    local examples = {"banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"}
                    for _, t in ipairs(examples) do
                      print(makePrintable(t))
                      local res = bwt(t)
                      if res.err then
                        print(" --> ERROR: String can't contain STX or ETX")
                        print(" -->")
                      else
                        local enc = res.res
                        print((" --> " .. makePrintable(enc)))
                        local r = ibwt(enc)
                        print((" --> " .. tostring(r)))
                      end
                      print("")
                    end
                  end
                  stx = "\x02"
                  etx = "\x03"
                  main()
                  local _bench_end = os.clock()
                  collectgarbage()
                  local _bench_end_mem = collectgarbage('count') * 1024
                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                end;
