-- Generated by Mochi v0.10.39 on 2025-07-24 20:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
stx = "\x02";

etx = "\x03";

function contains(s, ch)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      if (string.sub(s, i + 1, (i + 1)) == ch) then
        return true
      end
      i = (i + 1)
    end
    return false
  end;
  
  function sortStrings(xs)
    local arr = xs
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(arr)
      local i = 0
      while (i < n) do
        local j = 0
        while (j < (n - 1)) do
          if (arr[j + 1] > arr[(j + 1) + 1]) then
            local tmp = arr[j + 1]
            arr[j + 1] = arr[(j + 1) + 1]
            arr[(j + 1) + 1] = tmp
          end
          j = (j + 1)
        end
        i = (i + 1)
      end
      return arr
    end;
    
    function bwt(s)
      if ((string.find(s, stx, 1, true) ~= nil) or (string.find(s, etx, 1, true) ~= nil)) then
        return {__name = "GenType1", __order = {"err", "res"}, err = true, res = ""}
      end
      s = ((stx .. s) .. etx)
      local le = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)
        local _table = {}
        local i = 0
        while (i < le) do
          local rot = (string.sub(s, i + 1, le) .. string.sub(s, 0 + 1, i))
          _table = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(_table, rot)
        i = (i + 1)
      end
      _table = sortStrings(_table)
      local last = ""
      i = 0
      while (i < le) do
        last = (last .. string.sub(_table[i + 1], (le - 1) + 1, le))
        i = (i + 1)
      end
      return {__name = "GenType2", __order = {"err", "res"}, err = false, res = last}
    end;
    
    function ibwt(r)
      local le = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(r)
        local _table = {}
        local i = 0
        while (i < le) do
          _table = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(_table, "")
        i = (i + 1)
      end
      local n = 0
      while (n < le) do
        i = 0
        while (i < le) do
          _table[i + 1] = (string.sub(r, i + 1, (i + 1)) .. _table[i + 1])
          i = (i + 1)
        end
        _table = sortStrings(_table)
        n = (n + 1)
      end
      i = 0
      while (i < le) do
        if (string.sub(_table[i + 1], (le - 1) + 1, le) == etx) then
          return string.sub(_table[i + 1], 1 + 1, (le - 1))
        end
        i = (i + 1)
      end
      return ""
    end;
    
    function makePrintable(s)
      local out = ""
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          local ch = string.sub(s, i + 1, (i + 1))
          if (ch == stx) then
            out = (out .. "^")
          else
            if (ch == etx) then
              out = (out .. "|")
            else
              out = (out .. ch)
            end
          end
          i = (i + 1)
        end
        return out
      end;
      
      function main()
        local examples = {"banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"}
        for _, t in ipairs(examples) do
          print(makePrintable(t))
          local res = bwt(t)
          if res.err then
            print(" --> ERROR: String can't contain STX or ETX")
            print(" -->")
          else
            local enc = res.res
            print((" --> " .. makePrintable(enc)))
            local r = ibwt(enc)
            print((" --> " .. r))
          end
          print("")
        end
      end;
      
      main();
