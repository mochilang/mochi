-- Generated by Mochi v0.10.39 on 2025-07-24 13:19 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end
function bernoulli(n)
  local a = {}
  local m = 0
  while (m <= n) do
    a = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(a, _div(_bigrat(1), _bigrat((m + 1))))
  local j = m
  while (j >= 1) do
    a[(j - 1) + 1] = _mul(_bigrat(j), _sub(a[(j - 1) + 1], a[j + 1]))
    j = (j - 1)
  end
  m = (m + 1)
end
return a[0 + 1]
end;

for i = 0, 61 - 1 do
  b = bernoulli(i)
  if (num(b) ~= 0) then
    numStr = tostring(num(b))
    denStr = tostring(denom(b))
    print(((((("B(" .. _padStart(tostring(i), 2, " ")) .. ") =") .. _padStart(numStr, 45, " ")) .. "/") .. denStr))
  end
end;
