-- Generated by Mochi v0.10.50 on 2025-07-30 21:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function xor(a, b)
    return ((a and (not b)) or ((not a) and b))
  end
  function ha(a, b)
    return {s = xor(a, b), c = (a and b)}
  end
  function fa(a, b, c0)
    local r1 = ha(a, c0)
    local r2 = ha(r1.s, b)
    return {s = r2.s, c = (r1.c or r2.c)}
  end
  function add4(a3, a2, a1, a0, b3, b2, b1, b0)
    local r0 = fa(a0, b0, false)
    local r1 = fa(a1, b1, r0.c)
    local r2 = fa(a2, b2, r1.c)
    local r3 = fa(a3, b3, r2.c)
    return {v = r3.c, s3 = r3.s, s2 = r2.s, s1 = r1.s, s0 = r0.s}
  end
  function b2i(b)
    if b then
      return 1
    end
    return 0
  end
  function main()
    local r = add4(true, false, true, false, true, false, false, true)
    print(((((((((tostring(b2i(r.v)) .. " ") .. tostring(b2i(r.s3))) .. " ") .. tostring(b2i(r.s2))) .. " ") .. tostring(b2i(r.s1))) .. " ") .. tostring(b2i(r.s0))))
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
