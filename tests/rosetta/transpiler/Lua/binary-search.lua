-- Generated by Mochi v0.10.39 on 2025-07-24 14:41 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end
function bsearch(arr, x)
  local low = 0
  local high = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(arr) - 1)
    while (low <= high) do
      local mid = ((low + high) // 2)
      if (arr[mid + 1] > x) then
        high = (mid - 1)
      else
        if (arr[mid + 1] < x) then
          low = (mid + 1)
        else
          return mid
        end
      end
    end
    return (0 - 1)
  end;
  
  function bsearchRec(arr, x, low, high)
    if (high < low) then
      return (0 - 1)
    end
    local mid = ((low + high) // 2)
    if (arr[mid + 1] > x) then
      return bsearchRec(arr, x, low, (mid - 1))
    else
      if (arr[mid + 1] < x) then
        return bsearchRec(arr, x, (mid + 1), high)
      end
    end
    return mid
  end;
  
  function main()
    local nums = {(0 - 31), 0, 1, 2, 2, 4, 65, 83, 99, 782}
    local x = 2
    local idx = bsearch(nums, x)
    if (idx >= 0) then
      print((((tostring(x) .. " is at index ") .. tostring(idx)) .. "."))
    else
      print((tostring(x) .. " is not found."))
    end
    x = 5
    idx = bsearchRec(nums, x, 0, ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(nums) - 1))
      if (idx >= 0) then
        print((((tostring(x) .. " is at index ") .. tostring(idx)) .. "."))
      else
        print((tostring(x) .. " is not found."))
      end
    end;
    
    main();
