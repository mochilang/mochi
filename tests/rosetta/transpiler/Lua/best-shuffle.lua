-- Generated by Mochi v0.10.40 on 2025-07-25 17:59 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function nextRand(seed)
    return (((seed * 1664525) + 1013904223) % 2147483647)
  end
  function shuffleChars(s, seed)
    local chars = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        chars = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(chars, string.sub(s, i + 1, (i + 1)))
      i = (i + 1)
    end
    local sd = seed
    local idx = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(chars) - 1)
      while (idx > 0) do
        sd = nextRand(sd)
        local j = (sd % (idx + 1))
        local tmp = chars[idx + 1]
        chars[idx + 1] = chars[j + 1]
        chars[j + 1] = tmp
        idx = (idx - 1)
      end
      local res = ""
      i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(chars)) do
          res = (res .. chars[i + 1])
          i = (i + 1)
        end
        return {res, sd}
      end
      function bestShuffle(s, seed)
        local r = shuffleChars(s, seed)
        local t = r[0 + 1]
        local sd = r[1 + 1]
        local arr = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(t)) do
            arr = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(arr, string.sub(t, i + 1, (i + 1)))
          i = (i + 1)
        end
        i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(arr)) do
            local j = 0
            while (j < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(arr)) do
                if (((i ~= j) and (arr[i + 1] ~= string.sub(s, j + 1, (j + 1)))) and (arr[j + 1] ~= string.sub(s, i + 1, (i + 1)))) then
                  local tmp = arr[i + 1]
                  arr[i + 1] = arr[j + 1]
                  arr[j + 1] = tmp
                  break
                end
                j = (j + 1)
              end
              i = (i + 1)
            end
            local count = 0
            i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(arr)) do
                if (arr[i + 1] == string.sub(s, i + 1, (i + 1))) then
                  count = (count + 1)
                end
                i = (i + 1)
              end
              local out = ""
              i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(arr)) do
                  out = (out .. arr[i + 1])
                  i = (i + 1)
                end
                return {out, sd, count}
              end
              function main()
                local ts = {"abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"}
                local seed = 1
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(ts)) do
                    local r = bestShuffle(ts[i + 1], seed)
                    local shuf = r[0 + 1]
                    seed = r[1 + 1]
                    local cnt = r[2 + 1]
                    print((((((ts[i + 1] .. " -> ") .. tostring(shuf)) .. " (") .. tostring(cnt)) .. ")"))
                    i = (i + 1)
                  end
                end
                main()
                local _bench_end = _now()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
