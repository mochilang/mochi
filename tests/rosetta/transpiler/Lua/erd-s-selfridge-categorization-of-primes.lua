-- Generated by Mochi v0.10.42 on 2025-07-27 16:28 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function generatePrimes(n)
    local primes = {2}
    local cand = 3
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(primes) < n) do
        local isP = true
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(primes)) do
            local p = primes[i + 1]
            if ((p * p) > cand) then
              break
            end
            if ((cand % p) == 0) then
              isP = false
              break
            end
            i = (i + 1)
          end
          if isP then
            primes = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(primes, cand)
        end
        cand = (cand + 2)
      end
      return primes
    end
    function primeFactors(n, primes)
      local factors = {}
      local num = n
      local i = 0
      while ((i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(primes)) and ((primes[i + 1] * primes[i + 1]) <= num)) do
          local p = primes[i + 1]
          while ((num % p) == 0) do
            factors = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(factors, p)
          num = (num // p)
        end
        i = (i + 1)
      end
      if (num > 1) then
        factors = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(factors, num)
    end
    return factors
  end
  prevCats = {}
  function cat(p, primes)
    if (function(m, k)
    return m[k] ~= nil
  end)(prevCats, p) then
    return prevCats[p]
  end
  local pf = primeFactors((p + 1), primes)
  local all23 = true
  for _, f in ipairs(pf) do
    if ((f ~= 2) and (f ~= 3)) then
      all23 = false
      break
    end
  end
  if all23 then
    prevCats[p] = 1
    return 1
  end
  if (p > 2) then
    local unique = {}
    local last = (-1)
    for _, f in ipairs(pf) do
      if (f ~= last) then
        unique = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(unique, f)
      last = f
    end
  end
  pf = unique
end
local c = 2
while (c <= 11) do
  local ok = true
  for _, f in ipairs(pf) do
    if (cat(f, primes) >= c) then
      ok = false
      break
    end
  end
  if ok then
    prevCats[p] = c
    return c
  end
  c = (c + 1)
end
prevCats[p] = 12
return 12
end
function padLeft(n, width)
  local s = tostring(n)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s) < width) do
      s = (" " .. s)
    end
    return s
  end
  function main()
    local primes = generatePrimes(1000)
    local es = {}
    for _ = 0, 12 - 1 do
      es = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(es, {})
  end
  print("First 200 primes:\n")
  local idx = 0
  while (idx < 200) do
    local p = primes[idx + 1]
    local c = cat(p, primes)
    es[(c - 1) + 1] = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(es[(c - 1) + 1], p)
  idx = (idx + 1)
end
local c = 1
while (c <= 6) do
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(es[(c - 1) + 1]) > 0) then
      print((("Category " .. tostring(c)) .. ":"))
      print(
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(es[(c - 1) + 1]))
      print("")
    end
    c = (c + 1)
  end
  print("First thousand primes:\n")
  while (idx < 1000) do
    local p = primes[idx + 1]
    local cv = cat(p, primes)
    es[(cv - 1) + 1] = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(es[(cv - 1) + 1], p)
  idx = (idx + 1)
end
c = 1
while (c <= 12) do
  local e = es[(c - 1) + 1]
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(e) > 0) then
      local line = ((((((("Category " .. padLeft(c, 2)) .. ": First = ") .. padLeft(e[0 + 1], 7)) .. "  Last = ") .. padLeft(e[((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(e) - 1) + 1], 8)) .. "  Count = ") .. padLeft((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(e), 6))
          print(line)
        end
        c = (c + 1)
      end
    end
    main()
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
