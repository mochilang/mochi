-- Generated by Mochi v0.10.42 on 2025-07-28 11:14 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function main()
    local row = 3
    local col = 4
    local a = {}
    local i = 0
    while (i < row) do
      local rowArr = {}
      local j = 0
      while (j < col) do
        rowArr = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(rowArr, 0)
      j = (j + 1)
    end
    a = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(a, rowArr)
  i = (i + 1)
end
print(("a[0][0] = " .. tostring(a[0 + 1][0 + 1])))
a[math.floor((row - 1)) + 1][math.floor((col - 1)) + 1] = 7
print(((((("a[" .. tostring((row - 1))) .. "][") .. tostring((col - 1))) .. "] = ") .. tostring(a[math.floor((row - 1)) + 1][math.floor((col - 1)) + 1])))
a = _nil
end
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
