-- Generated by Mochi v0.10.42 on 2025-07-27 21:41 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function isPrime(n)
    if (n < 2) then
      return false
    end
    local i = 2
    while ((i * i) <= n) do
      if ((n % i) == 0) then
        return false
      end
      i = (i + 1)
    end
    return true
  end
  function search(base, prefix, depth, limit, max)
    local best = max
    local d = 1
    while (d < base) do
      local val = ((prefix * base) + d)
      if isPrime(val) then
        if (val > best) then
          best = val
        end
        if ((depth + 1) < limit) then
          best = search(base, val, (depth + 1), limit, best)
        end
      end
      d = (d + 1)
    end
    return best
  end
  function largest(base)
    return search(base, 0, 0, 6, 0)
  end
  function main()
    local b = 3
    while (b <= 10) do
      print(((tostring(b) .. ": ") .. tostring(largest(b))))
      b = (b + 1)
    end
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
