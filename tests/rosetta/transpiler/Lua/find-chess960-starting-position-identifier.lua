-- Generated by Mochi v0.10.42 on 2025-07-27 17:23 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function indexOf(s, sub)
    local i = 0
    while (i <= ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(sub))) do
              if (_substring(s, i, (i + (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(sub))) == sub) then
                    return i
                  end
                  i = (i + 1)
                end
                return (-1)
              end
              function strReplace(s, old, new)
                local res = ""
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s)) do
                      if ((((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(old) > 0) and ((i + (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(old)) <= (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(s))) and (_substring(s, i, (i + (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(old))) == old)) then
                                        res = (res .. new)
                                        i = (i + (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(old))
                                          else
                                            res = (res .. _substring(s, i, (i + 1)))
                                            i = (i + 1)
                                          end
                                        end
                                        return res
                                      end
                                      function g2l(pieces)
                                        local lets = ""
                                        local i = 0
                                        while (i < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(pieces)) do
                                              local ch = _substring(pieces, i, (i + 1))
                                              lets = (lets .. g2lMap[ch])
                                              i = (i + 1)
                                            end
                                            return lets
                                          end
                                          function spid(pieces)
                                            pieces = g2l(pieces)
                                            if ((function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(pieces) ~= 8) then
                                                  return (-1)
                                                end
                                                for _, one in ipairs({"K", "Q"}) do
                                                  local count = 0
                                                  local i = 0
                                                  while (i < (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(pieces)) do
                                                        if (_substring(pieces, i, (i + 1)) == one) then
                                                          count = (count + 1)
                                                        end
                                                        i = (i + 1)
                                                      end
                                                      if (count ~= 1) then
                                                        return (-1)
                                                      end
                                                    end
                                                    for _, two in ipairs({"R", "N", "B"}) do
                                                      local count = 0
                                                      local i = 0
                                                      while (i < (function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(pieces)) do
                                                            if (_substring(pieces, i, (i + 1)) == two) then
                                                              count = (count + 1)
                                                            end
                                                            i = (i + 1)
                                                          end
                                                          if (count ~= 2) then
                                                            return (-1)
                                                          end
                                                        end
                                                        local r1 = _indexOf(pieces, "R")
                                                        local r2 = ((_indexOf(_substring(pieces, (r1 + 1), (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(pieces)), "R") + r1) + 1)
                                                            local k = _indexOf(pieces, "K")
                                                            if ((k < r1) or (k > r2)) then
                                                              return (-1)
                                                            end
                                                            local b1 = _indexOf(pieces, "B")
                                                            local b2 = ((_indexOf(_substring(pieces, (b1 + 1), (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(pieces)), "B") + b1) + 1)
                                                                if (((b2 - b1) % 2) == 0) then
                                                                  return (-1)
                                                                end
                                                                local piecesN = strReplace(pieces, "Q", "")
                                                                piecesN = strReplace(piecesN, "B", "")
                                                                local n1 = _indexOf(piecesN, "N")
                                                                local n2 = ((_indexOf(_substring(piecesN, (n1 + 1), (function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(piecesN)), "N") + n1) + 1)
                                                                    local np = (tostring(n1) .. tostring(n2))
                                                                    local N = ntable[np]
                                                                    local piecesQ = strReplace(pieces, "B", "")
                                                                    local Q = _indexOf(piecesQ, "Q")
                                                                    local D = _indexOf("0246", tostring(b1))
                                                                    local L = _indexOf("1357", tostring(b2))
                                                                    if (D == (0 - 1)) then
                                                                      D = _indexOf("0246", tostring(b2))
                                                                      L = _indexOf("1357", tostring(b1))
                                                                    end
                                                                    return ((((96 * N) + (16 * Q)) + (4 * D)) + L)
                                                                  end
                                                                  function main()
                                                                    for _, pieces in ipairs({"♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"}) do
                                                                      print(((((tostring(pieces) .. " or ") .. g2l(pieces)) .. " has SP-ID of ") .. tostring(spid(pieces))))
                                                                    end
                                                                  end
                                                                  glyphs = "♜♞♝♛♚♖♘♗♕♔"
                                                                  g2lMap = {__name = "GenType1", __order = {"♜", "♞", "♝", "♛", "♚", "♖", "♘", "♗", "♕", "♔"}, ["♜"] = "R", ["♞"] = "N", ["♝"] = "B", ["♛"] = "Q", ["♚"] = "K", ["♖"] = "R", ["♘"] = "N", ["♗"] = "B", ["♕"] = "Q", ["♔"] = "K"}
                                                                  names = {__name = "GenType2", __order = {"R", "N", "B", "Q", "K"}, R = "rook", N = "knight", B = "bishop", Q = "queen", K = "king"}
                                                                  ntable = {__name = "GenType3", __order = {"01", "02", "03", "04", "12", "13", "14", "23", "24", "34"}, ["01"] = 0, ["02"] = 1, ["03"] = 2, ["04"] = 3, ["12"] = 4, ["13"] = 5, ["14"] = 6, ["23"] = 7, ["24"] = 8, ["34"] = 9}
                                                                  main()
                                                                  local _bench_end = _now()
                                                                  collectgarbage()
                                                                  local _bench_end_mem = collectgarbage('count') * 1024
                                                                  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                                                                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                end;
