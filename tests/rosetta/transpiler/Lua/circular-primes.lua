-- Generated by Mochi v0.10.39 on 2025-07-24 22:55 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function isPrime(n)
  if (n < 2) then
    return false
  end
  if ((n % 2) == 0) then
    return (n == 2)
  end
  if ((n % 3) == 0) then
    return (n == 3)
  end
  local d = 5
  while ((d * d) <= n) do
    if ((n % d) == 0) then
      return false
    end
    d = (d + 2)
    if ((n % d) == 0) then
      return false
    end
    d = (d + 4)
  end
  return true
end;

circs = {};

function isCircular(n)
  local nn = n
  local pow = 1
  while (nn > 0) do
    pow = (pow * 10)
    nn = (nn // 10)
  end
  nn = n
  while true do
    nn = (nn * 10)
    local f = (nn // pow)
    nn = (nn + (f * (1 - pow)))
    if (nn == n) then
      break
    end
    if (not isPrime(nn)) then
      return false
    end
  end
  return true
end;

print("The first 19 circular primes are:");

digits = {1, 3, 7, 9};

q = {1, 2, 3, 5, 7, 9};

fq = {1, 2, 3, 5, 7, 9};

count = 0;

while true do
  f = q[0 + 1]
  fd = fq[0 + 1]
  if (isPrime(f) and isCircular(f)) then
    circs = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(circs, f)
  count = (count + 1)
  if (count == 19) then
    break
  end
end
q = (function(lst,s,e)
local r={}
for i=s+1,e do
  r[#r+1]=lst[i]
end
return r
end)(q, 1, #q)
fq = (function(lst,s,e)
local r={}
for i=s+1,e do
  r[#r+1]=lst[i]
end
return r
end)(fq, 1, #fq)
if ((f ~= 2) and (f ~= 5)) then
  for _, d in ipairs(digits) do
    q = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(q, ((f * 10) + d))
  fq = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(fq, fd)
end
end
end;

function showList(xs)
  local out = "["
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(xs)) do
      out = (out .. tostring(xs[i + 1]))
      if (i < ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs) - 1)) then
          out = (out .. ", ")
        end
        i = (i + 1)
      end
      return (out .. "]")
    end;
    
    print(showList(circs));
    
    print("\nThe next 4 circular primes, in repunit format, are:");
    
    print("[R(19) R(23) R(317) R(1031)]");
    
    print("\nThe following repunits are probably circular primes:");
    
    for _, i in ipairs({5003, 9887, 15073, 25031, 35317, 49081}) do
      print((("R(" .. tostring(i)) .. ") : true"))
    end;
