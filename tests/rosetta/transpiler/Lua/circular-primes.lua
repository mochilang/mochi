-- Generated by Mochi v0.10.42 on 2025-07-28 08:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function isPrime(n)
    if (n < 2) then
      return false
    end
    if ((n % 2) == 0) then
      return (n == 2)
    end
    if ((n % 3) == 0) then
      return (n == 3)
    end
    local d = 5
    while ((d * d) <= n) do
      if ((n % d) == 0) then
        return false
      end
      d = (d + 2)
      if ((n % d) == 0) then
        return false
      end
      d = (d + 4)
    end
    return true
  end
  function isCircular(n)
    local nn = n
    local pow = 1
    while (nn > 0) do
      pow = (pow * 10)
      nn = (nn // 10)
    end
    nn = n
    while true do
      nn = (nn * 10)
      local f = (nn // pow)
      nn = (nn + (f * (1 - pow)))
      if (nn == n) then
        break
      end
      if (not isPrime(nn)) then
        return false
      end
    end
    return true
  end
  function showList(xs)
    local out = "["
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          out = (out .. tostring(xs[i + 1]))
          if (i < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(xs) - 1)) then
                out = (out .. ", ")
              end
              i = (i + 1)
            end
            return (out .. "]")
          end
          circs = {}
          print("The first 19 circular primes are:")
          digits = {1, 3, 7, 9}
          q = {1, 2, 3, 5, 7, 9}
          fq = {1, 2, 3, 5, 7, 9}
          count = 0
          while true do
            f = q[0 + 1]
            fd = fq[0 + 1]
            if (isPrime(f) and isCircular(f)) then
              circs = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(circs, f)
            count = (count + 1)
            if (count == 19) then
              break
            end
          end
          q = (function(lst,s,e)
          local r={}
          for i=s+1,e do
            r[#r+1]=lst[i]
          end
          return r
        end)(q, 1, #q)
        fq = (function(lst,s,e)
        local r={}
        for i=s+1,e do
          r[#r+1]=lst[i]
        end
        return r
      end)(fq, 1, #fq)
      if ((f ~= 2) and (f ~= 5)) then
        for _, d in ipairs(digits) do
          q = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(q, ((f * 10) + d))
        fq = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(fq, fd)
    end
  end
end
print(showList(circs))
print("\nThe next 4 circular primes, in repunit format, are:")
print("[R(19) R(23) R(317) R(1031)]")
print("\nThe following repunits are probably circular primes:")
for _, i in ipairs({5003, 9887, 15073, 25031, 35317, 49081}) do
  print((("R(" .. tostring(i)) .. ") : true"))
end
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
