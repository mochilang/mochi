-- Generated by Mochi v0.10.42 on 2025-07-28 11:14 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pow(base, exp)
    local result = 1
    local i = 0
    while (i < math.floor(exp)) do
      result = (result * base)
      i = (i + 1)
    end
    return result
  end
  function PowN(b)
    return function(e)
    return pow(b, e)
  end
end
function PowE(e)
  return function(b)
  return pow(b, e)
end
end
function main()
  local pow2 = PowN(2)
  local cube = PowE(3)
  print(("2^8 = " .. tostring(pow2(8))))
  print(("4Â³ = " .. tostring(cube(4))))
  local a = {value = 2}
  local fn1 = function(b)
  return Method(a, b)
end
local fn2 = function(f, b)
return Method(f, b)
end
print(("2 + 2 = " .. tostring(Method(a, 2))))
print(("2 + 3 = " .. tostring(fn1(3))))
print(("2 + 4 = " .. tostring(fn2(a, 4))))
print(("3 + 5 = " .. tostring(fn2({value = 3}, 5))))
end
function Method(self, b)
  local value = self.value
  return (value + b)
end
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
