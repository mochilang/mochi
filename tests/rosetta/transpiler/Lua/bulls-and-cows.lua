-- Generated by Mochi v0.10.56 on 2025-08-03 17:00 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function indexOf(s, ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if (_substring(s, i, (i + 1)) == ch) then
            return i
          end
          i = (i + 1)
        end
        return (-1)
      end
      function shuffle(xs)
        local arr = xs
        local i = ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(arr) - 1)
            while (i > 0) do
              local j = (_now() % (i + 1))
              local tmp = arr[i + 1]
              arr[i + 1] = arr[j + 1]
              arr[j + 1] = tmp
              i = (i - 1)
            end
            return arr
          end
          function main()
            print("Cows and Bulls")
            print("Guess four digit number of unique digits in the range 1 to 9.")
            print("A correct digit but not in the correct place is a cow.")
            print("A correct digit in the correct place is a bull.")
            local digits = {"1", "2", "3", "4", "5", "6", "7", "8", "9"}
            digits = shuffle(digits)
            local pat = (((digits[0 + 1] .. digits[1 + 1]) .. digits[2 + 1]) .. digits[3 + 1])
            local valid = "123456789"
            while true do
              ::__cont_1::
              print("Guess: ")
              local guess = input()
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(guess) ~= 4) then
                    print("Please guess a four digit number.")
                    goto __cont_1
                  end
                  local cows = 0
                  local bulls = 0
                  local seen = ""
                  local i = 0
                  local malformed = false
                  while (i < 4) do
                    local cg = _substring(guess, i, (i + 1))
                    if (_indexOf(seen, cg) ~= (-1)) then
                      print(("Repeated digit: " .. cg))
                      malformed = true
                      break
                    end
                    seen = (seen .. cg)
                    local pos = _indexOf(pat, cg)
                    if (pos == (-1)) then
                      if (_indexOf(valid, cg) == (-1)) then
                        print(("Invalid digit: " .. cg))
                        malformed = true
                        break
                      end
                    else
                      if (pos == i) then
                        bulls = (bulls + 1)
                      else
                        cows = (cows + 1)
                      end
                    end
                    i = (i + 1)
                  end
                  if malformed then
                    goto __cont_1
                  end
                  print(((("Cows: " .. tostring(cows)) .. ", bulls: ") .. tostring(bulls)))
                  if (bulls == 4) then
                    print("You got it.")
                    break
                  end
                end
              end
              main()
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
