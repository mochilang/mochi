-- Generated by Mochi v0.10.39 on 2025-07-24 20:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function indexOf(s, ch)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      if (string.sub(s, i + 1, (i + 1)) == ch) then
        return i
      end
      i = (i + 1)
    end
    return (0 - 1)
  end;
  
  function shuffle(xs)
    local arr = xs
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(arr) - 1)
      while (i > 0) do
        local j = (_now() % (i + 1))
        local tmp = arr[i + 1]
        arr[i + 1] = arr[j + 1]
        arr[j + 1] = tmp
        i = (i - 1)
      end
      return arr
    end;
    
    function main()
      print("Cows and Bulls")
      print("Guess four digit number of unique digits in the range 1 to 9.")
      print("A correct digit but not in the correct place is a cow.")
      print("A correct digit in the correct place is a bull.")
      local digits = {"1", "2", "3", "4", "5", "6", "7", "8", "9"}
      digits = shuffle(digits)
      local pat = (((digits[0 + 1] .. digits[1 + 1]) .. digits[2 + 1]) .. digits[3 + 1])
      local valid = "123456789"
      while true do
        ::__cont_1::
        print("Guess: ")
        local guess = input()
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(guess) ~= 4) then
            print("Please guess a four digit number.")
            goto __cont_1
          end
          local cows = 0
          local bulls = 0
          local seen = ""
          local i = 0
          local malformed = false
          while (i < 4) do
            local cg = string.sub(guess, i + 1, (i + 1))
            if (_indexOf(seen, cg) ~= (0 - 1)) then
              print(("Repeated digit: " .. cg))
              malformed = true
              break
            end
            seen = (seen .. cg)
            local pos = _indexOf(pat, cg)
            if (pos == (0 - 1)) then
              if (_indexOf(valid, cg) == (0 - 1)) then
                print(("Invalid digit: " .. cg))
                malformed = true
                break
              end
            else
              if (pos == i) then
                bulls = (bulls + 1)
              else
                cows = (cows + 1)
              end
            end
            i = (i + 1)
          end
          if malformed then
            goto __cont_1
          end
          print(((("Cows: " .. tostring(cows)) .. ", bulls: ") .. tostring(bulls)))
          if (bulls == 4) then
            print("You got it.")
            break
          end
        end
      end;
      
      main();
