-- Generated by Mochi v0.10.39 on 2025-07-24 22:55 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
function sqrtApprox(x)
  local guess = x
  local i = 0
  while (i < 20) do
    guess = ((guess + (x / guess)) / 2)
    i = (i + 1)
  end
  return guess
end;

function makeSym(order, elements)
  return {__name = "GenType1", __order = {"order", "ele"}, order = order, ele = elements}
end;

function unpackSym(m)
  local n = m.order
  local ele = m.ele
  local mat = {}
  local idx = 0
  local r = 0
  while (r < n) do
    local row = {}
    local c = 0
    while (c <= r) do
      row = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(row, ele[idx + 1])
    idx = (idx + 1)
    c = (c + 1)
  end
  while (c < n) do
    row = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(row, 0)
  c = (c + 1)
end
mat = (function(lst, item)
local res = {table.unpack(lst)}
table.insert(res, item)
return res
end)(mat, row)
r = (r + 1)
end
r = 0
while (r < n) do
  local c = (r + 1)
  while (c < n) do
    mat[r + 1][c + 1] = mat[c + 1][r + 1]
    c = (c + 1)
  end
  r = (r + 1)
end
return mat
end;

function printMat(m)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(m)) do
      local line = ""
      local j = 0
      while (j < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(m[i + 1])) do
          line = (line .. tostring(m[i + 1][j + 1]))
          if (j < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(m[i + 1]) - 1)) then
              line = (line .. " ")
            end
            j = (j + 1)
          end
          print(line)
          i = (i + 1)
        end
      end;
      
      function printSym(m)
        printMat(unpackSym(m))
      end;
      
      function printLower(m)
        local n = m.order
        local ele = m.ele
        local mat = {}
        local idx = 0
        local r = 0
        while (r < n) do
          local row = {}
          local c = 0
          while (c <= r) do
            row = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(row, ele[idx + 1])
          idx = (idx + 1)
          c = (c + 1)
        end
        while (c < n) do
          row = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(row, 0)
        c = (c + 1)
      end
      mat = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(mat, row)
    r = (r + 1)
  end
  printMat(mat)
end;

function choleskyLower(a)
  local n = a.order
  local ae = a.ele
  local le = {}
  local idx = 0
  while (idx < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(ae)) do
      le = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(le, 0)
    idx = (idx + 1)
  end
  local row = 1
  local col = 1
  local dr = 0
  local dc = 0
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(ae)) do
      local e = ae[i + 1]
      if (i < dr) then
        local d = ((e - le[i + 1]) / le[dc + 1])
        le[i + 1] = d
        local ci = col
        local cx = dc
        local j = (i + 1)
        while (j <= dr) do
          cx = (cx + ci)
          ci = (ci + 1)
          le[j + 1] = (le[j + 1] + (d * le[cx + 1]))
          j = (j + 1)
        end
        col = (col + 1)
        dc = (dc + col)
      else
        le[i + 1] = sqrtApprox((e - le[i + 1]))
        row = (row + 1)
        dr = (dr + row)
        col = 1
        dc = 0
      end
      i = (i + 1)
    end
    return {__name = "GenType2", __order = {"order", "ele"}, order = n, ele = le}
  end;
  
  function demo(a)
    print("A:")
    printSym(a)
    print("L:")
    local l = choleskyLower(a)
    printLower(l)
  end;
  
  demo(makeSym(3, {25, 15, 18, (-5), 0, 11}));
  
  demo(makeSym(4, {18, 22, 70, 54, 86, 174, 42, 62, 134, 106}));
