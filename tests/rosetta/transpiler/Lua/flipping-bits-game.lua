-- Generated by Mochi v0.10.50 on 2025-07-30 21:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function randInt(seed, n)
    local next = (((seed * 1664525) + 1013904223) % 2147483647)
    return {next, (next % n)}
  end
  function newBoard(n, seed)
    local board = {}
    local s = seed
    local i = 0
    while (i < n) do
      local row = {}
      local j = 0
      while (j < n) do
        local r = randInt(s, 2)
        s = r[0 + 1]
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, r[1 + 1])
      j = (j + 1)
    end
    board = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(board, row)
  i = (i + 1)
end
return {board, s}
end
function copyBoard(b)
  local nb = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(b)) do
        local row = {}
        local j = 0
        while (j < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(b[i + 1])) do
              row = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(row, b[i + 1][j + 1])
            j = (j + 1)
          end
          nb = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(nb, row)
        i = (i + 1)
      end
      return nb
    end
    function flipRow(b, r)
      local j = 0
      while (j < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(b[r + 1])) do
            b[r + 1][j + 1] = (1 - b[r + 1][j + 1])
            j = (j + 1)
          end
          return b
        end
        function flipCol(b, c)
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(b)) do
                b[i + 1][c + 1] = (1 - b[i + 1][c + 1])
                i = (i + 1)
              end
              return b
            end
            function boardsEqual(a, b)
              local i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(a)) do
                    local j = 0
                    while (j < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(a[i + 1])) do
                          if (a[i + 1][j + 1] ~= b[i + 1][j + 1]) then
                            return false
                          end
                          j = (j + 1)
                        end
                        i = (i + 1)
                      end
                      return true
                    end
                    function shuffleBoard(b, seed)
                      local s = seed
                      local n = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(b)
                          local k = 0
                          while (k < (2 * n)) do
                            local r = randInt(s, n)
                            s = r[0 + 1]
                            local idx = math.floor(r[1 + 1])
                            if ((k % 2) == 0) then
                              b = flipRow(b, idx)
                            else
                              b = flipCol(b, idx)
                            end
                            k = (k + 1)
                          end
                          return {b, s}
                        end
                        function solve(board, target)
                          local n = (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(board)
                              local row = {}
                              local col = {}
                              local i = 0
                              while (i < n) do
                                local diff = (((board[i + 1][0 + 1] ~= target[i + 1][0 + 1])) and (1) or (0))
                                row = (function(lst, item)
                                local res = {table.unpack(lst)}
                                table.insert(res, item)
                                return res
                              end)(row, diff)
                              i = (i + 1)
                            end
                            local j = 0
                            while (j < n) do
                              local diff = (((board[0 + 1][j + 1] ~= target[0 + 1][j + 1])) and (1) or (0))
                              local val = ((diff + row[0 + 1]) % 2)
                              col = (function(lst, item)
                              local res = {table.unpack(lst)}
                              table.insert(res, item)
                              return res
                            end)(col, val)
                            j = (j + 1)
                          end
                          return {__name = "GenType1", __order = {"row", "col"}, row = row, col = col}
                        end
                        function applySolution(b, sol)
                          local board = b
                          local moves = 0
                          local i = 0
                          while (i < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(sol.row)) do
                                if (sol.row[i + 1] == 1) then
                                  board = flipRow(board, i)
                                  moves = (moves + 1)
                                end
                                i = (i + 1)
                              end
                              local j = 0
                              while (j < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(sol.col)) do
                                    if (sol.col[j + 1] == 1) then
                                      board = flipCol(board, j)
                                      moves = (moves + 1)
                                    end
                                    j = (j + 1)
                                  end
                                  return {board, moves}
                                end
                                function printBoard(b)
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(b)) do
                                        local line = ""
                                        local j = 0
                                        while (j < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(b[i + 1])) do
                                              line = (line .. tostring(b[i + 1][j + 1]))
                                              if (j < ((function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(b[i + 1]) - 1)) then
                                                    line = (line .. " ")
                                                  end
                                                  j = (j + 1)
                                                end
                                                print(line)
                                                i = (i + 1)
                                              end
                                            end
                                            function main()
                                              local n = 3
                                              local seed = 1
                                              local res = newBoard(n, seed)
                                              local target = res[0 + 1]
                                              seed = math.floor(res[1 + 1])
                                              local board = copyBoard(target)
                                              while true do
                                                local sres = shuffleBoard(copyBoard(board), seed)
                                                board = sres[0 + 1]
                                                seed = math.floor(sres[1 + 1])
                                                if (not boardsEqual(board, target)) then
                                                  break
                                                end
                                              end
                                              print("Target:")
                                              printBoard(target)
                                              print("Board:")
                                              printBoard(board)
                                              local sol = solve(board, target)
                                              local ares = applySolution(board, sol)
                                              board = ares[0 + 1]
                                              local moves = math.floor(ares[1 + 1])
                                              print("Solved:")
                                              printBoard(board)
                                              print(("Moves: " .. tostring(moves)))
                                            end
                                            main()
                                            local _bench_end = _now()
                                            collectgarbage()
                                            local _bench_end_mem = collectgarbage('count') * 1024
                                            local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                          end;
