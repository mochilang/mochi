-- Generated by Mochi v0.10.41 on 2025-07-26 19:51 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function absInt(n)
    if (n < 0) then
      return (-n)
    end
    return n
  end
  function main()
    local b = 1
    while (b <= 5) do
      if (b ~= 5) then
        local c = 1
        while (c <= 5) do
          if ((c ~= 1) and (c ~= b)) then
            local f = 1
            while (f <= 5) do
              if (((((f ~= 1) and (f ~= 5)) and (f ~= b)) and (f ~= c)) and (absInt((f - c)) > 1)) then
                local m = 1
                while (m <= 5) do
                  if ((((m ~= b) and (m ~= c)) and (m ~= f)) and (m > c)) then
                    local s = 1
                    while (s <= 5) do
                      if (((((s ~= b) and (s ~= c)) and (s ~= f)) and (s ~= m)) and (absInt((s - f)) > 1)) then
                        print((((((((((("Baker in " .. tostring(b)) .. ", Cooper in ") .. tostring(c)) .. ", Fletcher in ") .. tostring(f)) .. ", Miller in ") .. tostring(m)) .. ", Smith in ") .. tostring(s)) .. "."))
                        return
                      end
                      s = (s + 1)
                    end
                  end
                  m = (m + 1)
                end
              end
              f = (f + 1)
            end
          end
          c = (c + 1)
        end
      end
      b = (b + 1)
    end
    print("No solution found.")
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
