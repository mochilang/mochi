-- Generated by Mochi v0.10.42 on 2025-07-28 00:18 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function padLeft(s, w)
    local res = ""
    local n = (w - (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s))
        while (n > 0) do
          res = (res .. " ")
          n = (n - 1)
        end
        return (res .. s)
      end
      dna = (((((((((("" .. "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG") .. "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG") .. "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT") .. "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT") .. "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG") .. "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA") .. "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT") .. "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG") .. "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC") .. "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT")
      print("SEQUENCE:")
      le = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(dna)
          i = 0
          while (i < le) do
            k = (i + 50)
            if (k > le) then
              k = le
            end
            print(((padLeft(tostring(i), 5) .. ": ") .. string.sub(dna, (i + 1), k)))
            i = (i + 50)
          end
          a = 0
          c = 0
          g = 0
          t = 0
          idx = 0
          while (idx < le) do
            ch = _substring(dna, idx, (idx + 1))
            if (ch == "A") then
              a = (a + 1)
            else
              if (ch == "C") then
                c = (c + 1)
              else
                if (ch == "G") then
                  g = (g + 1)
                else
                  if (ch == "T") then
                    t = (t + 1)
                  end
                end
              end
            end
            idx = (idx + 1)
          end
          print("")
          print("BASE COUNT:")
          print(("    A: " .. padLeft(tostring(a), 3)))
          print(("    C: " .. padLeft(tostring(c), 3)))
          print(("    G: " .. padLeft(tostring(g), 3)))
          print(("    T: " .. padLeft(tostring(t), 3)))
          print("    ------")
          print(("    Î£: " .. tostring(le)))
          print("    ======")
          local _bench_end = _now()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
