-- Generated by Mochi v0.10.39 on 2025-07-24 14:42 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end
function padLeft(s, w)
  local res = ""
  local n = (w - (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s))
    while (n > 0) do
      res = (res .. " ")
      n = (n - 1)
    end
    return (res .. s)
  end;
  
  dna = (((((((((("" .. "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG") .. "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG") .. "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT") .. "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT") .. "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG") .. "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA") .. "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT") .. "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG") .. "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC") .. "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT");
  
  print("SEQUENCE:");
  
  le = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(dna);
    
    i = 0;
    
    while (i < le) do
      k = (i + 50)
      if (k > le) then
        k = le
      end
      print(((padLeft(tostring(i), 5) .. ": ") .. string.sub(dna, (i + 1), k)))
      i = (i + 50)
    end;
    
    a = 0;
    
    c = 0;
    
    g = 0;
    
    t = 0;
    
    idx = 0;
    
    while (idx < le) do
      ch = string.sub(dna, idx + 1, (idx + 1))
      if (ch == "A") then
        a = (a + 1)
      else
        if (ch == "C") then
          c = (c + 1)
        else
          if (ch == "G") then
            g = (g + 1)
          else
            if (ch == "T") then
              t = (t + 1)
            end
          end
        end
      end
      idx = (idx + 1)
    end;
    
    print("");
    
    print("BASE COUNT:");
    
    print(("    A: " .. padLeft(tostring(a), 3)));
    
    print(("    C: " .. padLeft(tostring(c), 3)));
    
    print(("    G: " .. padLeft(tostring(g), 3)));
    
    print(("    T: " .. padLeft(tostring(t), 3)));
    
    print("    ------");
    
    print(("    Î£: " .. tostring(le)));
    
    print("    ======");
