-- Generated by Mochi v0.10.42 on 2025-07-27 17:23 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function entropy(s)
    local counts = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        local ch = string.sub(s, i + 1, (i + 1))
        if (counts[ch] ~= nil) then
          counts[ch] = (counts[ch] + 1)
        else
          counts[ch] = 1
        end
        i = (i + 1)
      end
      local hm = 0
      for _, k in ipairs((function(m)
      local keys = {}
      for k in pairs(m) do
        if k ~= '__name' and k ~= '__order' then table.insert(keys, k) end
      end
      table.sort(keys, function(a,b) return a<b end)
      return keys
    end)(counts)) do
      local c = counts[k]
      hm = (hm + (c * (math.log(c) // math.log(2))))
    end
    local l = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)
      return ((math.log(l) // math.log(2)) - (hm / l))
    end
    function fibonacciWord(n)
      local a = "1"
      local b = "0"
      local i = 1
      while (i < n) do
        local tmp = b
        b = (b .. a)
        a = tmp
        i = (i + 1)
      end
      return a
    end
    function main()
      print(((pad("N", 3) .. pad("Length", 9)) .. "  Entropy      Word"))
      local n = 1
      while (n < 10) do
        local s = fibonacciWord(n)
        print((((((pad(tostring(n), 3) .. pad(tostring((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s)), 9)) .. "  ") .. fmt(entropy(s))) .. "  ") .. s))
          n = (n + 1)
        end
        while (n <= 37) do
          local s = fibonacciWord(n)
          print((((pad(tostring(n), 3) .. pad(tostring((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)), 9)) .. "  ") .. fmt(entropy(s))))
            n = (n + 1)
          end
        end
        function pad(s, w)
          local t = s
          while ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(t) < w) do
              t = (" " .. t)
            end
            return t
          end
          function fmt(x)
            local y = (floorf(((x * 1e+08) + 0.5)) / 1e+08)
            local s = tostring(y)
            local dot = _indexOf(s, ".")
            if (dot == (0 - 1)) then
              s = (s .. ".00000000")
            else
              local d = (((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s) - dot) - 1)
                while (d < 8) do
                  s = (s .. "0")
                  d = (d + 1)
                end
              end
              return s
            end
            function floorf(x)
              local y = math.floor(x)
              return y
            end
            function indexOf(s, ch)
              local i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s)) do
                  if (string.sub(s, i + 1, (i + 1)) == ch) then
                    return i
                  end
                  i = (i + 1)
                end
                return (0 - 1)
              end
              _math = {sqrt = math.sqrt, pow = math.pow, sin = math.sin, log = math.log, pi = math.pi, e = math.exp(1)}
              main()
              local _bench_end = _now()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
