-- Generated by Mochi v0.10.37 on 2025-07-23 09:27 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
OP_NUM = 0;

OP_ADD = 1;

OP_SUB = 2;

OP_MUL = 3;

OP_DIV = 4;

function newNum(n)
  return {__name = "GenType1", __order = {"op", "value"}, op = OP_NUM, value = {__name = "GenType2", __order = {"num", "denom"}, num = n, denom = 1}}
end;

function exprEval(x)
  if (x.op == OP_NUM) then
    return x.value
  end
  local l = exprEval(x.left)
  local r = exprEval(x.right)
  if (x.op == OP_ADD) then
    return {__name = "GenType3", __order = {"num", "denom"}, num = ((l.num * r.denom) + (l.denom * r.num)), denom = (l.denom * r.denom)}
  end
  if (x.op == OP_SUB) then
    return {__name = "GenType4", __order = {"num", "denom"}, num = ((l.num * r.denom) - (l.denom * r.num)), denom = (l.denom * r.denom)}
  end
  if (x.op == OP_MUL) then
    return {__name = "GenType5", __order = {"num", "denom"}, num = (l.num * r.num), denom = (l.denom * r.denom)}
  end
  return {__name = "GenType6", __order = {"num", "denom"}, num = (l.num * r.denom), denom = (l.denom * r.num)}
end;

function exprString(x)
  if (x.op == OP_NUM) then
    return tostring(x.value.num)
  end
  local ls = exprString(x.left)
  local rs = exprString(x.right)
  local opstr = ""
  if (x.op == OP_ADD) then
    opstr = " + "
  else
    if (x.op == OP_SUB) then
      opstr = " - "
    else
      if (x.op == OP_MUL) then
        opstr = " * "
      else
        opstr = " / "
      end
    end
  end
  return (((("(" .. ls) .. opstr) .. rs) .. ")")
end;

n_cards = 4;

goal = 24;

digit_range = 9;

function solve(xs)
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(xs) == 1) then
    local f = exprEval(xs[0 + 1])
    if ((f.denom ~= 0) and (f.num == (f.denom * goal))) then
      print(exprString(xs[0 + 1]))
      return true
    end
    return false
  end
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(xs)) do
    local j = (i + 1)
    while (j < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(xs)) do
      local rest = {}
      local k = 0
      while (k < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(xs)) do
        if ((k ~= i) and (k ~= j)) then
          rest = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(rest, xs[k + 1])
      end
      k = (k + 1)
    end
    local a = xs[i + 1]
    local b = xs[j + 1]
    for _, op in ipairs({OP_ADD, OP_SUB, OP_MUL, OP_DIV}) do
      local node = {__name = "GenType7", __order = {"op", "left", "right"}, op = op, left = a, right = b}
      if solve((function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(rest, node)) then
      return true
    end
  end
  local node = {__name = "GenType8", __order = {"op", "left", "right"}, op = OP_SUB, left = b, right = a}
  if solve((function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(rest, node)) then
  return true
end
node = {__name = "GenType9", __order = {"op", "left", "right"}, op = OP_DIV, left = b, right = a}
if solve((function(lst, item)
local res = {table.unpack(lst)}
table.insert(res, item)
return res
end)(rest, node)) then
  return true
end
j = (j + 1)
end
i = (i + 1)
end
return false
end;

function main()
  local iter = 0
  while (iter < 10) do
    local cards = {}
    local i = 0
    while (i < n_cards) do
      local n = ((_now() % (digit_range - 1)) + 1)
      cards = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(cards, newNum(n))
    print((" " .. tostring(n)))
    i = (i + 1)
  end
  print(":  ")
  if (not solve(cards)) then
    print("No solution")
  end
  iter = (iter + 1)
end
end;

main();
