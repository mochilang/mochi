-- Generated by Mochi v0.10.40 on 2025-07-25 12:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  OP_ADD = 1
  OP_SUB = 2
  OP_MUL = 3
  OP_DIV = 4
  function binEval(op, l, r)
    local lv = exprEval(l)
    local rv = exprEval(r)
    if (op == OP_ADD) then
      return {num = ((lv.num * rv.denom) + (lv.denom * rv.num)), denom = (lv.denom * rv.denom)}
    end
    if (op == OP_SUB) then
      return {num = ((lv.num * rv.denom) - (lv.denom * rv.num)), denom = (lv.denom * rv.denom)}
    end
    if (op == OP_MUL) then
      return {num = (lv.num * rv.num), denom = (lv.denom * rv.denom)}
    end
    return {num = (lv.num * rv.denom), denom = (lv.denom * rv.num)}
  end
  function binString(op, l, r)
    local ls = exprString(l)
    local rs = exprString(r)
    local opstr = ""
    if (op == OP_ADD) then
      opstr = " + "
    else
      if (op == OP_SUB) then
        opstr = " - "
      else
        if (op == OP_MUL) then
          opstr = " * "
        else
          opstr = " / "
        end
      end
    end
    return (((("(" .. ls) .. opstr) .. rs) .. ")")
  end
  function newNum(n)
    return {__name = "Num", value = {num = n, denom = 1}}
  end
  function exprEval(x)
    return (function(_m)
    if _m['__name'] == "Num" then
      local v = _m["value"]
      return v
    elseif _m['__name'] == "Bin" then
        local op = _m["op"]
        local l = _m["left"]
        local r = _m["right"]
        return binEval(op, l, r)
      end
    end)(x)
  end
  function exprString(x)
    return (function(_m)
    if _m['__name'] == "Num" then
      local v = _m["value"]
      return tostring(v.num)
    elseif _m['__name'] == "Bin" then
        local op = _m["op"]
        local l = _m["left"]
        local r = _m["right"]
        return binString(op, l, r)
      end
    end)(x)
  end
  n_cards = 4
  goal = 24
  digit_range = 9
  function solve(xs)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(xs) == 1) then
        local f = exprEval(xs[0 + 1])
        if ((f.denom ~= 0) and (f.num == (f.denom * goal))) then
          print(exprString(xs[0 + 1]))
          return true
        end
        return false
      end
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          local j = (i + 1)
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(xs)) do
              local rest = {}
              local k = 0
              while (k < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(xs)) do
                  if ((k ~= i) and (k ~= j)) then
                    rest = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(rest, xs[k + 1])
                end
                k = (k + 1)
              end
              local a = xs[i + 1]
              local b = xs[j + 1]
              local node = {__name = "Bin", op = OP_ADD, left = a, right = b}
              for _, op in ipairs({OP_ADD, OP_SUB, OP_MUL, OP_DIV}) do
                node = {__name = "Bin", op = op, left = a, right = b}
                if solve((function(lst, item)
                local res = {table.unpack(lst)}
                table.insert(res, item)
                return res
              end)(rest, node)) then
                return true
              end
            end
            node = {__name = "Bin", op = OP_SUB, left = b, right = a}
            if solve((function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(rest, node)) then
            return true
          end
          node = {__name = "Bin", op = OP_DIV, left = b, right = a}
          if solve((function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(rest, node)) then
          return true
        end
        j = (j + 1)
      end
      i = (i + 1)
    end
    return false
  end
  function main()
    local iter = 0
    while (iter < 10) do
      local cards = {}
      local i = 0
      while (i < n_cards) do
        local n = ((_now() % (digit_range - 1)) + 1)
        cards = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(cards, newNum(n))
      print((" " .. tostring(n)))
      i = (i + 1)
    end
    print(":  ")
    if (not solve(cards)) then
      print("No solution")
    end
    iter = (iter + 1)
  end
end
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
