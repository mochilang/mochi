-- Generated by Mochi v0.10.42 on 2025-07-28 11:14 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function modPow(base, exp, m)
    local result = (1 % m)
    local b = (base % m)
    local e = exp
    while (e > 0) do
      if ((e % 2) == 1) then
        result = ((result * b) % m)
      end
      b = ((b * b) % m)
      e = math.floor((e // 2))
    end
    return result
  end
  function isPrime(n)
    if (n < 2) then
      return false
    end
    for _, p in ipairs({2, 3, 5, 7, 11, 13, 17, 19, 23, 29}) do
      if ((n % p) == 0) then
        return (n == p)
      end
    end
    local d = (n - 1)
    local s = 0
    while ((d % 2) == 0) do
      d = (d // 2)
      s = (s + 1)
    end
    for _, a in ipairs({2, 325, 9375, 28178, 450775, 9780504, 1795265022}) do
      if ((a % n) == 0) then
        return true
      end
      local x = modPow(a, d, n)
      if ((x == 1) or (x == (n - 1))) then
        goto __cont_1
      end
      local r = 1
      local passed = false
      while (r < s) do
        x = ((x * x) % n)
        if (x == (n - 1)) then
          passed = true
          break
        end
        r = (r + 1)
      end
      if (not passed) then
        return false
      end
      ::__cont_1::
    end
    return true
  end
  function commatize(n)
    local s = tostring(n)
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - 3)
        while (i > 0) do
          s = ((_substring(s, 0, i) .. ",") .. _substring(s, i, (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s)))
              i = (i - 3)
            end
            return s
          end
          function pad(s, width)
            local out = s
            while ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(out) < width) do
                  out = (" " .. out)
                end
                return out
              end
              function join(xs, sep)
                local res = ""
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(xs)) do
                      if (i > 0) then
                        res = (res .. sep)
                      end
                      res = (res .. xs[i + 1])
                      i = (i + 1)
                    end
                    return res
                  end
                  function formatRow(row)
                    local padded = {}
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(row)) do
                          padded = (function(lst, item)
                          local res = {table.unpack(lst)}
                          table.insert(res, item)
                          return res
                        end)(padded, pad(row[i + 1], 9))
                        i = (i + 1)
                      end
                      return (("[" .. join(padded, " ")) .. "]")
                    end
                    function main()
                      local cubans = {}
                      local cube1 = 1
                      local count = 0
                      local cube100k = 0
                      local i = 1
                      while true do
                        local j = (i + 1)
                        local cube2 = ((j * j) * j)
                        local diff = (cube2 - cube1)
                        if isPrime(diff) then
                          if (count < 200) then
                            cubans = (function(lst, item)
                            local res = {table.unpack(lst)}
                            table.insert(res, item)
                            return res
                          end)(cubans, commatize(diff))
                        end
                        count = (count + 1)
                        if (count == 100000) then
                          cube100k = diff
                          break
                        end
                      end
                      cube1 = cube2
                      i = (i + 1)
                    end
                    print("The first 200 cuban primes are:-")
                    local row = 0
                    while (row < 20) do
                      local slice = {}
                      local k = 0
                      while (k < 10) do
                        slice = (function(lst, item)
                        local res = {table.unpack(lst)}
                        table.insert(res, item)
                        return res
                      end)(slice, cubans[((row * 10) + k) + 1])
                      k = (k + 1)
                    end
                    print(formatRow(slice))
                    row = (row + 1)
                  end
                  print(("\nThe 100,000th cuban prime is " .. commatize(cube100k)))
                end
                main()
                local _bench_end = _now()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
