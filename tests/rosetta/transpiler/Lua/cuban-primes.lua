-- Generated by Mochi v0.10.40 on 2025-07-25 21:10 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}
function modPow(base, exp, m)
  local result = (1 % m)
  local b = (base % m)
  local e = exp
  while (e > 0) do
    if ((e % 2) == 1) then
      result = ((result * b) % m)
    end
    b = ((b * b) % m)
    e = math.floor((e // 2))
  end
  return result
end;

function isPrime(n)
  if (n < 2) then
    return false
  end
  for _, p in ipairs({2, 3, 5, 7, 11, 13, 17, 19, 23, 29}) do
    if ((n % p) == 0) then
      return (n == p)
    end
  end
  local d = (n - 1)
  local s = 0
  while ((d % 2) == 0) do
    d = (d // 2)
    s = (s + 1)
  end
  for _, a in ipairs({2, 325, 9375, 28178, 450775, 9780504, 1795265022}) do
    if ((a % n) == 0) then
      return true
    end
    local x = modPow(a, d, n)
    if ((x == 1) or (x == (n - 1))) then
      goto __cont_1
    end
    local r = 1
    local passed = false
    while (r < s) do
      x = ((x * x) % n)
      if (x == (n - 1)) then
        passed = true
        break
      end
      r = (r + 1)
    end
    if (not passed) then
      return false
    end
    ::__cont_1::
  end
  return true
end;

function commatize(n)
  local s = tostring(n)
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s) - 3)
    while (i > 0) do
      s = ((string.sub(s, 0 + 1, i) .. ",") .. string.sub(s, i + 1, (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)))
        i = (i - 3)
      end
      return s
    end;
    
    function pad(s, width)
      local out = s
      while ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(out) < width) do
          out = (" " .. out)
        end
        return out
      end;
      
      function join(xs, sep)
        local res = ""
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(xs)) do
            if (i > 0) then
              res = (res .. sep)
            end
            res = (res .. xs[i + 1])
            i = (i + 1)
          end
          return res
        end;
        
        function formatRow(row)
          local padded = {}
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(row)) do
              padded = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(padded, pad(row[i + 1], 9))
            i = (i + 1)
          end
          return (("[" .. join(padded, " ")) .. "]")
        end;
        
        function main()
          local cubans = {}
          local cube1 = 1
          local count = 0
          local cube100k = 0
          local i = 1
          while true do
            local j = (i + 1)
            local cube2 = ((j * j) * j)
            local diff = (cube2 - cube1)
            if isPrime(diff) then
              if (count < 200) then
                cubans = (function(lst, item)
                local res = {table.unpack(lst)}
                table.insert(res, item)
                return res
              end)(cubans, commatize(diff))
            end
            count = (count + 1)
            if (count == 100000) then
              cube100k = diff
              break
            end
          end
          cube1 = cube2
          i = (i + 1)
        end
        print("The first 200 cuban primes are:-")
        local row = 0
        while (row < 20) do
          local slice = {}
          local k = 0
          while (k < 10) do
            slice = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(slice, cubans[((row * 10) + k) + 1])
          k = (k + 1)
        end
        print(formatRow(slice))
        row = (row + 1)
      end
      print(("\nThe 100,000th cuban prime is " .. commatize(cube100k)))
    end;
    
    main();
