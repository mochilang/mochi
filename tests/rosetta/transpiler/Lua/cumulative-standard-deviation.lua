-- Generated by Mochi v0.10.40 on 2025-07-25 17:25 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function sqrtApprox(x)
    if (x <= 0) then
      return 0
    end
    local g = x
    local i = 0
    while (i < 20) do
      g = ((g + (x / g)) / 2)
      i = (i + 1)
    end
    return g
  end
  function newRsdv()
    return {n = 0, a = 0, q = 0}
  end
  function add(r, x)
    local n1 = (r.n + 1)
    local a1 = (r.a + ((x - r.a) / n1))
    local q1 = (r.q + ((x - r.a) * (x - a1)))
    return {n = n1, a = a1, q = q1}
  end
  function sd(r)
    return sqrtApprox((r.q / r.n))
  end
  function main()
    local r = newRsdv()
    for _, x in ipairs({2, 4, 4, 4, 5, 5, 7, 9}) do
      r = add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(r), x)
      print(tostring(sd(r)))
    end
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
