-- Generated by Mochi v0.10.50 on 2025-07-30 21:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function _mod(x, m)
    return (x - (math.floor((x / m)) * m))
  end
  function _sin(x)
    local y = (_mod((x + PI), (2 * PI)) - PI)
    local y2 = (y * y)
    local y3 = (y2 * y)
    local y5 = (y3 * y2)
    local y7 = (y5 * y2)
    return (((y - (y3 / 6)) + (y5 / 120)) - (y7 / 5040))
  end
  function _cos(x)
    local y = (_mod((x + PI), (2 * PI)) - PI)
    local y2 = (y * y)
    local y4 = (y2 * y2)
    local y6 = (y4 * y2)
    return (((1 - (y2 / 2)) + (y4 / 24)) - (y6 / 720))
  end
  function clearGrid()
    local g = {}
    local y = 0
    while (y < height) do
      local row = {}
      local x = 0
      while (x < width) do
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, " ")
      x = (x + 1)
    end
    g = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(g, row)
  y = (y + 1)
end
return g
end
function drawPoint(g, x, y)
  if ((((x >= 0) and (x < width)) and (y >= 0)) and (y < height)) then
    local row = g[y + 1]
    row[x + 1] = "#"
    g[y + 1] = row
  end
end
function bresenham(x0, y0, x1, y1, g)
  local dx = (x1 - x0)
  if (dx < 0) then
    dx = (-dx)
  end
  local dy = (y1 - y0)
  if (dy < 0) then
    dy = (-dy)
  end
  local sx = (-1)
  if (x0 < x1) then
    sx = 1
  end
  local sy = (-1)
  if (y0 < y1) then
    sy = 1
  end
  local err = (dx - dy)
  while true do
    drawPoint(g, x0, y0)
    if ((x0 == x1) and (y0 == y1)) then
      break
    end
    local e2 = (2 * err)
    if (e2 > (-dy)) then
      err = (err - dy)
      x0 = (x0 + sx)
    end
    if (e2 < dx) then
      err = (err + dx)
      y0 = (y0 + sy)
    end
  end
end
function ftree(g, x, y, dist, dir, d)
  local rad = ((dir * PI) / 180)
  local x2 = (x + (dist * _sin(rad)))
  local y2 = (y - (dist * _cos(rad)))
  bresenham(math.floor(x), math.floor(y), math.floor(x2), math.floor(y2), g)
  if (d > 0) then
    ftree(g, x2, y2, (dist * frac), (dir - angle), (d - 1))
    ftree(g, x2, y2, (dist * frac), (dir + angle), (d - 1))
  end
end
function render(g)
  local out = ""
  local y = 0
  while (y < height) do
    local line = ""
    local x = 0
    while (x < width) do
      line = (line .. g[y + 1][x + 1])
      x = (x + 1)
    end
    out = (out .. line)
    if (y < (height - 1)) then
      out = (out .. "\n")
    end
    y = (y + 1)
  end
  return out
end
function main()
  local grid = clearGrid()
  ftree(grid, (width // 2), (height - 1), length, 0, depth)
  print(render(grid))
end
PI = 3.141592653589793
width = 80
height = 40
depth = 6
angle = 12
length = 12
frac = 0.8
main()
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
