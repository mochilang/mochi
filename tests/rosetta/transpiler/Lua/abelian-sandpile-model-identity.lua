-- Generated by Mochi v0.10.42 on 2025-07-27 22:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function neighborsList()
    return {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4, 6}, {1, 3, 5, 7}, {2, 4, 8}, {3, 7}, {4, 6, 8}, {5, 7}}
  end
  function plus(a, b)
    local res = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(a)) do
          res = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(res, (a[i + 1] + b[i + 1]))
        i = (i + 1)
      end
      return res
    end
    function isStable(p)
      for _, v in ipairs(p) do
        if (v > 3) then
          return false
        end
      end
      return true
    end
    function topple(p)
      local neighbors = neighborsList()
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(p)) do
            if (p[i + 1] > 3) then
              p[i + 1] = (p[i + 1] - 4)
              local nbs = neighbors[i + 1]
              for _, j in ipairs(nbs) do
                p[j + 1] = (p[j + 1] + 1)
              end
              return 0
            end
            i = (i + 1)
          end
          return 0
        end
        function pileString(p)
          local s = ""
          local r = 0
          while (r < 3) do
            local c = 0
            while (c < 3) do
              s = ((s .. tostring(p[((3 * r) + c) + 1])) .. " ")
              c = (c + 1)
            end
            s = (s .. "\n")
            r = (r + 1)
          end
          return s
        end
        print("Avalanche of topplings:\n")
        s4 = {4, 3, 3, 3, 1, 2, 0, 2, 3}
        print(pileString(s4))
        while (not isStable(s4)) do
          topple(s4)
          print(pileString(s4))
        end
        print("Commutative additions:\n")
        s1 = {1, 2, 0, 2, 1, 1, 0, 1, 3}
        s2 = {2, 1, 3, 1, 0, 1, 0, 1, 0}
        s3_a = plus(s1, s2)
        while (not isStable(s3_a)) do
          topple(s3_a)
        end
        s3_b = plus(s2, s1)
        while (not isStable(s3_b)) do
          topple(s3_b)
        end
        print(((((pileString(s1) .. "\nplus\n\n") .. pileString(s2)) .. "\nequals\n\n") .. pileString(s3_a)))
        print(((((("and\n\n" .. pileString(s2)) .. "\nplus\n\n") .. pileString(s1)) .. "\nalso equals\n\n") .. pileString(s3_b)))
        print("Addition of identity sandpile:\n")
        s3 = {3, 3, 3, 3, 3, 3, 3, 3, 3}
        s3_id = {2, 1, 2, 1, 0, 1, 2, 1, 2}
        s4b = plus(s3, s3_id)
        while (not isStable(s4b)) do
          topple(s4b)
        end
        print(((((pileString(s3) .. "\nplus\n\n") .. pileString(s3_id)) .. "\nequals\n\n") .. pileString(s4b)))
        print("Addition of identities:\n")
        s5 = plus(s3_id, s3_id)
        while (not isStable(s5)) do
          topple(s5)
        end
        print(((((pileString(s3_id) .. "\nplus\n\n") .. pileString(s3_id)) .. "\nequals\n\n") .. pileString(s5)))
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
