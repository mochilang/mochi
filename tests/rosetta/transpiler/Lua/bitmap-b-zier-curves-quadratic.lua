-- Generated by Mochi v0.10.40 on 2025-07-25 17:59 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  b2Seg = 20
  function pixelFromRgb(rgb)
    local r = math.floor(((rgb // 65536) % 256))
    local g = math.floor(((rgb // 256) % 256))
    local b = math.floor((rgb % 256))
    return {r = r, g = g, b = b}
  end
  function newBitmap(cols, rows)
    local d = {}
    local y = 0
    while (y < rows) do
      local row = {}
      local x = 0
      while (x < cols) do
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, {r = 0, g = 0, b = 0})
      x = (x + 1)
    end
    d = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(d, row)
  y = (y + 1)
end
return {__name = "GenType1", __order = {"cols", "rows", "data"}, cols = cols, rows = rows, data = d}
end
function setPx(b, x, y, p)
  local cols = math.floor(b.cols)
  local rows = math.floor(b.rows)
  if ((((x >= 0) and (x < cols)) and (y >= 0)) and (y < rows)) then
    b.data[y + 1][x + 1] = p
  end
end
function fill(b, p)
  local cols = math.floor(b.cols)
  local rows = math.floor(b.rows)
  local y = 0
  while (y < rows) do
    local x = 0
    while (x < cols) do
      b.data[y + 1][x + 1] = p
      x = (x + 1)
    end
    y = (y + 1)
  end
end
function fillRgb(b, rgb)
  fill(b, pixelFromRgb(rgb))
end
function line(b, x0, y0, x1, y1, p)
  local dx = (x1 - x0)
  if (dx < 0) then
    dx = (-dx)
  end
  local dy = (y1 - y0)
  if (dy < 0) then
    dy = (-dy)
  end
  local sx = (-1)
  if (x0 < x1) then
    sx = 1
  end
  local sy = (-1)
  if (y0 < y1) then
    sy = 1
  end
  local err = (dx - dy)
  while true do
    setPx(b, x0, y0, p)
    if ((x0 == x1) and (y0 == y1)) then
      break
    end
    local e2 = (2 * err)
    if (e2 > (0 - dy)) then
      err = (err - dy)
      x0 = (x0 + sx)
    end
    if (e2 < dx) then
      err = (err + dx)
      y0 = (y0 + sy)
    end
  end
end
function bezier2(b, x1, y1, x2, y2, x3, y3, p)
  local px = {}
  local py = {}
  local i = 0
  while (i <= b2Seg) do
    px = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(px, 0)
  py = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(py, 0)
i = (i + 1)
end
local fx1 = x1
local fy1 = y1
local fx2 = x2
local fy2 = y2
local fx3 = x3
local fy3 = y3
i = 0
while (i <= b2Seg) do
  local c = (i // b2Seg)
  local a = (1 - c)
  local a2 = (a * a)
  local b2 = ((2 * c) * a)
  local c2 = (c * c)
  px[i + 1] = math.floor((((a2 * fx1) + (b2 * fx2)) + (c2 * fx3)))
  py[i + 1] = math.floor((((a2 * fy1) + (b2 * fy2)) + (c2 * fy3)))
  i = (i + 1)
end
local x0 = px[0 + 1]
local y0 = py[0 + 1]
i = 1
while (i <= b2Seg) do
  local x = px[i + 1]
  local y = py[i + 1]
  line(b, x0, y0, x, y, p)
  x0 = x
  y0 = y
  i = (i + 1)
end
end
b = newBitmap(400, 300)
fillRgb(b, 14614575)
bezier2(b, 20, 150, 500, (-100), 300, 280, pixelFromRgb(4165615))
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
