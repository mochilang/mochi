-- Generated by Mochi v0.10.39 on 2025-07-24 14:52 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end
function newBitmap(w, h, max)
  local rows = {}
  local y = 0
  while (y < h) do
    local row = {}
    local x = 0
    while (x < w) do
      row = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(row, {R = 0, G = 0, B = 0})
    x = (x + 1)
  end
  rows = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(rows, row)
y = (y + 1)
end
return {w = w, h = h, max = max, data = rows}
end;

function setPx(b, x, y, p)
  local rows = b.data
  local row = rows[y + 1]
  row[x + 1] = p
  rows[y + 1] = row
  b.data = rows
end;

function getPx(b, x, y)
  return b.data[y + 1][x + 1]
end;

function splitLines(s)
  local out = {}
  local cur = ""
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      local ch = string.sub(s, i + 1, (i + 1))
      if (ch == "\n") then
        out = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(out, cur)
      cur = ""
    else
      cur = (cur .. ch)
    end
    i = (i + 1)
  end
  out = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(out, cur)
return out
end;

function splitWS(s)
  local out = {}
  local cur = ""
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      local ch = string.sub(s, i + 1, (i + 1))
      if ((((ch == " ") or (ch == "\t")) or (ch == "\r")) or (ch == "\n")) then
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(cur) > 0) then
            out = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(out, cur)
          cur = ""
        end
      else
        cur = (cur .. ch)
      end
      i = (i + 1)
    end
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(cur) > 0) then
        out = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(out, cur)
    end
    return out
  end;
  
  function parseIntStr(str)
    local i = 0
    local neg = false
    if (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(str) > 0) and (string.sub(str, (0 + 1), 1) == "-")) then
        neg = true
        i = 1
      end
      local n = 0
      local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(str)) do
          n = ((n * 10) + digits[string.sub(str, (i + 1), (i + 1))])
          i = (i + 1)
        end
        if neg then
          n = (0 - n)
        end
        return n
      end;
      
      function tokenize(s)
        local lines = splitLines(s)
        local toks = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(lines)) do
            local line = lines[i + 1]
            if (((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(line) > 0) and (string.sub(line, 0 + 1, 1) == "#")) then
                i = (i + 1)
                goto __cont_1
              end
              local parts = splitWS(line)
              local j = 0
              while (j < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(parts)) do
                  toks = (function(lst, item)
                  local res = {table.unpack(lst)}
                  table.insert(res, item)
                  return res
                end)(toks, parts[j + 1])
                j = (j + 1)
              end
              i = (i + 1)
              ::__cont_1::
            end
            return toks
          end;
          
          function readP3(text)
            local toks = tokenize(text)
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(toks) < 4) then
                return newBitmap(0, 0, 0)
              end
              if (toks[0 + 1] ~= "P3") then
                return newBitmap(0, 0, 0)
              end
              local w = parseIntStr(toks[1 + 1])
              local h = parseIntStr(toks[2 + 1])
              local maxv = parseIntStr(toks[3 + 1])
              local idx = 4
              local bm = newBitmap(w, h, maxv)
              local y = (h - 1)
              while (y >= 0) do
                local x = 0
                while (x < w) do
                  local r = parseIntStr(toks[idx + 1])
                  local g = parseIntStr(toks[(idx + 1) + 1])
                  local b = parseIntStr(toks[(idx + 2) + 1])
                  setPx((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), x, y, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)({R = r, G = g, B = b}))
                  idx = (idx + 3)
                  x = (x + 1)
                end
                y = (y - 1)
              end
              return bm
            end;
            
            function toGrey(b)
              local h = b.h
              local w = b.w
              local m = 0
              local y = 0
              while (y < h) do
                local x = 0
                while (x < w) do
                  local p = getPx((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(b), x, y)
                  local l = ((((p.R * 2126) + (p.G * 7152)) + (p.B * 722)) // 10000)
                  if (l > b.max) then
                    l = b.max
                  end
                  setPx((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(b), x, y, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)({R = l, G = l, B = l}))
                  if (l > m) then
                    m = l
                  end
                  x = (x + 1)
                end
                y = (y + 1)
              end
              b.max = m
            end;
            
            function pad(n, w)
              local s = tostring(n)
              while ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s) < w) do
                  s = (" " .. s)
                end
                return s
              end;
              
              function writeP3(b)
                local h = b.h
                local w = b.w
                local max = b.max
                local digits = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' or type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(tostring(max))
                  local out = (((((("P3\n# generated from Bitmap.writeppmp3\n" .. tostring(w)) .. " ") .. tostring(h)) .. "\n") .. tostring(max)) .. "\n")
                  local y = (h - 1)
                  while (y >= 0) do
                    local line = ""
                    local x = 0
                    while (x < w) do
                      local p = getPx((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(b), x, y)
                      line = ((((((line .. "   ") .. pad(p.R, digits)) .. " ") .. pad(p.G, digits)) .. " ") .. pad(p.B, digits))
                      x = (x + 1)
                    end
                    out = ((out .. line) .. "\n")
                    y = (y - 1)
                  end
                  return out
                end;
                
                ppmtxt = ((((((("P3\n" .. "# feep.ppm\n") .. "4 4\n") .. "15\n") .. " 0  0  0    0  0  0    0  0  0   15  0 15\n") .. " 0  0  0    0 15  7    0  0  0    0  0  0\n") .. " 0  0  0    0  0  0    0 15  7    0  0  0\n") .. "15  0 15    0  0  0    0  0  0    0  0  0\n");
                
                print("Original Colour PPM file");
                
                print(ppmtxt);
                
                bm = readP3(ppmtxt);
                
                print("Grey PPM:");
                
                toGrey((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm));
                
                out = writeP3((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm));
                
                print(out);
