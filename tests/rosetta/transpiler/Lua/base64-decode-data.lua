-- Generated by Mochi v0.10.37 on 2025-07-23 15:02 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
function indexOf(s, ch)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      if (string.sub(s, (i + 1), (i + 1)) == ch) then
        return i
      end
      i = (i + 1)
    end
    return (0 - 1)
  end;
  
  function parseIntStr(str)
    local i = 0
    local neg = false
    if (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(str) > 0) and (string.sub(str, (0 + 1), (0 + 1)) == "-")) then
        neg = true
        i = 1
      end
      local n = 0
      local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(str)) do
          n = ((n * 10) + digits[string.sub(str, (i + 1), (i + 1))])
          i = (i + 1)
        end
        if neg then
          n = (0 - n)
        end
        return n
      end;
      
      function ord(ch)
        local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        local lower = "abcdefghijklmnopqrstuvwxyz"
        local idx = indexOf(upper, ch)
        if (idx >= 0) then
          return (65 + idx)
        end
        idx = indexOf(lower, ch)
        if (idx >= 0) then
          return (97 + idx)
        end
        if ((ch >= "0") and (ch <= "9")) then
          return (48 + parseIntStr(ch))
        end
        if (ch == "+") then
          return 43
        end
        if (ch == "/") then
          return 47
        end
        if (ch == " ") then
          return 32
        end
        if (ch == "=") then
          return 61
        end
        return 0
      end;
      
      function chr(n)
        local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        local lower = "abcdefghijklmnopqrstuvwxyz"
        if ((n >= 65) and (n < 91)) then
          return string.sub(upper, ((n - 65) + 1), (n - 64))
        end
        if ((n >= 97) and (n < 123)) then
          return string.sub(lower, ((n - 97) + 1), (n - 96))
        end
        if ((n >= 48) and (n < 58)) then
          local digits = "0123456789"
          return string.sub(digits, ((n - 48) + 1), (n - 47))
        end
        if (n == 43) then
          return "+"
        end
        if (n == 47) then
          return "/"
        end
        if (n == 32) then
          return " "
        end
        if (n == 61) then
          return "="
        end
        return "?"
      end;
      
      function toBinary(n, bits)
        local b = ""
        local val = n
        local i = 0
        while (i < bits) do
          b = (tostring((val % 2)) .. b)
          val = math.floor((val // 2))
          i = (i + 1)
        end
        return b
      end;
      
      function binToInt(bits)
        local n = 0
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(bits)) do
            n = ((n * 2) + parseIntStr(string.sub(bits, (i + 1), (i + 1))))
            i = (i + 1)
          end
          return n
        end;
        
        function base64Encode(text)
          local alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
          local bin = ""
          local _s0 = text
          for _i0 = 1, #_s0 do
            local ch = string.sub(_s0, _i0, _i0)
            bin = (bin .. toBinary(ord(ch), 8))
          end
          while (((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(bin) % 6) ~= 0) do
              bin = (bin .. "0")
            end
            local out = ""
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(bin)) do
                local chunk = string.sub(bin, (i + 1), (i + 6))
                local val = binToInt(chunk)
                out = (out .. string.sub(alphabet, (val + 1), (val + 1)))
                i = (i + 6)
              end
              local pad = ((3 - ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(text) % 3)) % 3)
                if (pad == 1) then
                  out = (string.sub(out, (0 + 1), ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(out) - 1)) .. "=")
                  end
                  if (pad == 2) then
                    out = (string.sub(out, (0 + 1), ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(out) - 2)) .. "==")
                    end
                    return out
                  end;
                  
                  function base64Decode(enc)
                    local alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
                    local bin = ""
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' or type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(enc)) do
                        local ch = string.sub(enc, (i + 1), (i + 1))
                        if (ch == "=") then
                          break
                        end
                        local idx = indexOf(alphabet, ch)
                        bin = (bin .. toBinary(idx, 6))
                        i = (i + 1)
                      end
                      local out = ""
                      i = 0
                      while ((i + 8) <= (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' or type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(bin)) do
                          local chunk = string.sub(bin, (i + 1), (i + 8))
                          local val = binToInt(chunk)
                          out = (out .. chr(val))
                          i = (i + 8)
                        end
                        return out
                      end;
                      
                      msg = "Rosetta Code Base64 decode data task";
                      
                      print(("Original : " .. msg));
                      
                      enc = base64Encode(msg);
                      
                      print(("\nEncoded  : " .. enc));
                      
                      dec = base64Decode(enc);
                      
                      print(("\nDecoded  : " .. dec));
