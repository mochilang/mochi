-- Generated by Mochi v0.10.39 on 2025-07-24 22:55 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end
n = {};

function initN()
  local i = 0
  while (i < 15) do
    local row = {}
    local j = 0
    while (j < 11) do
      row = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(row, " ")
    j = (j + 1)
  end
  row[5 + 1] = "x"
  n = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(n, row)
i = (i + 1)
end
end;

function horiz(c1, c2, r)
  local c = c1
  while (c <= c2) do
    n[r + 1][c + 1] = "x"
    c = (c + 1)
  end
end;

function verti(r1, r2, c)
  local r = r1
  while (r <= r2) do
    n[r + 1][c + 1] = "x"
    r = (r + 1)
  end
end;

function diagd(c1, c2, r)
  local c = c1
  while (c <= c2) do
    n[((r + c) - c1) + 1][c + 1] = "x"
    c = (c + 1)
  end
end;

function diagu(c1, c2, r)
  local c = c1
  while (c <= c2) do
    n[((r - c) + c1) + 1][c + 1] = "x"
    c = (c + 1)
  end
end;

draw = {};

function initDraw()
  draw[1] = function()
  horiz(6, 10, 0)
end
draw[2] = function()
horiz(6, 10, 4)
end
draw[3] = function()
diagd(6, 10, 0)
end
draw[4] = function()
diagu(6, 10, 4)
end
draw[5] = function()
draw[1]()
draw[4]()
end
draw[6] = function()
verti(0, 4, 10)
end
draw[7] = function()
draw[1]()
draw[6]()
end
draw[8] = function()
draw[2]()
draw[6]()
end
draw[9] = function()
draw[1]()
draw[8]()
end
draw[10] = function()
horiz(0, 4, 0)
end
draw[20] = function()
horiz(0, 4, 4)
end
draw[30] = function()
diagu(0, 4, 4)
end
draw[40] = function()
diagd(0, 4, 0)
end
draw[50] = function()
draw[10]()
draw[40]()
end
draw[60] = function()
verti(0, 4, 0)
end
draw[70] = function()
draw[10]()
draw[60]()
end
draw[80] = function()
draw[20]()
draw[60]()
end
draw[90] = function()
draw[10]()
draw[80]()
end
draw[100] = function()
horiz(6, 10, 14)
end
draw[200] = function()
horiz(6, 10, 10)
end
draw[300] = function()
diagu(6, 10, 14)
end
draw[400] = function()
diagd(6, 10, 10)
end
draw[500] = function()
draw[100]()
draw[400]()
end
draw[600] = function()
verti(10, 14, 10)
end
draw[700] = function()
draw[100]()
draw[600]()
end
draw[800] = function()
draw[200]()
draw[600]()
end
draw[900] = function()
draw[100]()
draw[800]()
end
draw[1000] = function()
horiz(0, 4, 14)
end
draw[2000] = function()
horiz(0, 4, 10)
end
draw[3000] = function()
diagd(0, 4, 10)
end
draw[4000] = function()
diagu(0, 4, 14)
end
draw[5000] = function()
draw[1000]()
draw[4000]()
end
draw[6000] = function()
verti(10, 14, 0)
end
draw[7000] = function()
draw[1000]()
draw[6000]()
end
draw[8000] = function()
draw[2000]()
draw[6000]()
end
draw[9000] = function()
draw[1000]()
draw[8000]()
end
end;

function printNumeral()
  local i = 0
  while (i < 15) do
    local line = ""
    local j = 0
    while (j < 11) do
      line = ((line .. n[i + 1][j + 1]) .. " ")
      j = (j + 1)
    end
    print(line)
    i = (i + 1)
  end
  print("")
end;

initDraw();

numbers = {0, 1, 20, 300, 4000, 5555, 6789, 9999};

for _, number in ipairs(numbers) do
  initN()
  print((tostring(number) .. ":"))
  num = number
  thousands = (num // 1000)
  num = (num % 1000)
  hundreds = (num // 100)
  num = (num % 100)
  tens = (num // 10)
  ones = (num % 10)
  if (thousands > 0) then
    draw[(thousands * 1000)]()
  end
  if (hundreds > 0) then
    draw[(hundreds * 100)]()
  end
  if (tens > 0) then
    draw[(tens * 10)]()
  end
  if (ones > 0) then
    draw[ones]()
  end
  printNumeral()
end;
