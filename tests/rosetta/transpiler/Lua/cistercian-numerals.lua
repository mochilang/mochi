-- Generated by Mochi v0.10.42 on 2025-07-28 08:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function initN()
    local i = 0
    while (i < 15) do
      local row = {}
      local j = 0
      while (j < 11) do
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, " ")
      j = (j + 1)
    end
    row[5 + 1] = "x"
    n = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(n, row)
  i = (i + 1)
end
end
function horiz(c1, c2, r)
  local c = c1
  while (c <= c2) do
    n[r + 1][c + 1] = "x"
    c = (c + 1)
  end
end
function verti(r1, r2, c)
  local r = r1
  while (r <= r2) do
    n[r + 1][c + 1] = "x"
    r = (r + 1)
  end
end
function diagd(c1, c2, r)
  local c = c1
  while (c <= c2) do
    n[((r + c) - c1) + 1][c + 1] = "x"
    c = (c + 1)
  end
end
function diagu(c1, c2, r)
  local c = c1
  while (c <= c2) do
    n[((r - c) + c1) + 1][c + 1] = "x"
    c = (c + 1)
  end
end
function initDraw()
  draw[1] = function()
  horiz(6, 10, 0)
end
draw[2] = function()
horiz(6, 10, 4)
end
draw[3] = function()
diagd(6, 10, 0)
end
draw[4] = function()
diagu(6, 10, 4)
end
draw[5] = function()
draw[1]()
draw[4]()
end
draw[6] = function()
verti(0, 4, 10)
end
draw[7] = function()
draw[1]()
draw[6]()
end
draw[8] = function()
draw[2]()
draw[6]()
end
draw[9] = function()
draw[1]()
draw[8]()
end
draw[10] = function()
horiz(0, 4, 0)
end
draw[20] = function()
horiz(0, 4, 4)
end
draw[30] = function()
diagu(0, 4, 4)
end
draw[40] = function()
diagd(0, 4, 0)
end
draw[50] = function()
draw[10]()
draw[40]()
end
draw[60] = function()
verti(0, 4, 0)
end
draw[70] = function()
draw[10]()
draw[60]()
end
draw[80] = function()
draw[20]()
draw[60]()
end
draw[90] = function()
draw[10]()
draw[80]()
end
draw[100] = function()
horiz(6, 10, 14)
end
draw[200] = function()
horiz(6, 10, 10)
end
draw[300] = function()
diagu(6, 10, 14)
end
draw[400] = function()
diagd(6, 10, 10)
end
draw[500] = function()
draw[100]()
draw[400]()
end
draw[600] = function()
verti(10, 14, 10)
end
draw[700] = function()
draw[100]()
draw[600]()
end
draw[800] = function()
draw[200]()
draw[600]()
end
draw[900] = function()
draw[100]()
draw[800]()
end
draw[1000] = function()
horiz(0, 4, 14)
end
draw[2000] = function()
horiz(0, 4, 10)
end
draw[3000] = function()
diagd(0, 4, 10)
end
draw[4000] = function()
diagu(0, 4, 14)
end
draw[5000] = function()
draw[1000]()
draw[4000]()
end
draw[6000] = function()
verti(10, 14, 0)
end
draw[7000] = function()
draw[1000]()
draw[6000]()
end
draw[8000] = function()
draw[2000]()
draw[6000]()
end
draw[9000] = function()
draw[1000]()
draw[8000]()
end
end
function printNumeral()
  local i = 0
  while (i < 15) do
    local line = ""
    local j = 0
    while (j < 11) do
      line = ((line .. n[i + 1][j + 1]) .. " ")
      j = (j + 1)
    end
    print(line)
    i = (i + 1)
  end
  print("")
end
n = {}
draw = {}
initDraw()
numbers = {0, 1, 20, 300, 4000, 5555, 6789, 9999}
for _, number in ipairs(numbers) do
  initN()
  print((tostring(number) .. ":"))
  num = number
  thousands = (num // 1000)
  num = (num % 1000)
  hundreds = (num // 100)
  num = (num % 100)
  tens = (num // 10)
  ones = (num % 10)
  if (thousands > 0) then
    draw[(thousands * 1000)]()
  end
  if (hundreds > 0) then
    draw[(hundreds * 100)]()
  end
  if (tens > 0) then
    draw[(tens * 10)]()
  end
  if (ones > 0) then
    draw[ones]()
  end
  printNumeral()
end
local _bench_end = _now()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
