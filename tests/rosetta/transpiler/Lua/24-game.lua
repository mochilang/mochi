-- Generated by Mochi v0.10.38 on 2025-07-24 08:13 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end
function randDigit()
  return ((_now() % 9) + 1)
end;

function main()
  local digits = {}
  for i = 0, 4 - 1 do
    digits = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(digits, randDigit())
end
local numstr = ""
for i = 0, 4 - 1 do
  numstr = (numstr .. tostring(digits[i + 1]))
end
print((("Your numbers: " .. numstr) .. "\n"))
print("Enter RPN: ")
local expr = input()
if ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' or type(v) == 'table' then
      return #v
    else
      return 0
    end
  end)(expr) ~= 7) then
    print("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
    return
  end
  local stack = {}
  local i = 0
  local valid = true
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(expr)) do
      local ch = string.sub(expr, i + 1, (i + 1))
      if ((ch >= "0") and (ch <= "9")) then
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(digits) == 0) then
            print("too many numbers.")
            return
          end
          local j = 0
          while (digits[j + 1] ~= (math.floor(ch) - math.floor("0"))) do
            j = (j + 1)
            if (j == (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' or type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(digits)) then
                print("wrong numbers.")
                return
              end
            end
            digits = (function(a,b) local res={table.unpack(a)} for _,v in ipairs(b) do res[#res+1]=v end return res end)((function(lst,s,e)
            local r={}
            for i=s+1,e do
              r[#r+1]=lst[i]
            end
            return r
          end)(digits, 0, j), (function(lst,s,e)
          local r={}
          for i=s+1,e do
            r[#r+1]=lst[i]
          end
          return r
        end)(digits, (j + 1), #digits))
        stack = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(stack, float((math.floor(ch) - math.floor("0"))))
    else
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(stack) < 2) then
          print("invalid expression syntax.")
          valid = false
          break
        end
        local b = stack[((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(stack) - 1) + 1]
          local a = stack[((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(stack) - 2) + 1]
            if (ch == "+") then
              stack[((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' or type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(stack) - 2) + 1] = ((tonumber(a) or 0) + (tonumber(b) or 0))
              else
                if (ch == "-") then
                  stack[((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(stack) - 2) + 1] = (a - b)
                  else
                    if (ch == "*") then
                      stack[((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' or type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(stack) - 2) + 1] = (a * b)
                      else
                        if (ch == "/") then
                          stack[((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' or type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(stack) - 2) + 1] = (a // b)
                          else
                            print((ch .. " invalid."))
                            valid = false
                            break
                          end
                        end
                      end
                    end
                    stack = (function(lst,s,e)
                    local r={}
                    for i=s+1,e do
                      r[#r+1]=lst[i]
                    end
                    return r
                  end)(stack, 0, ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' or type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(stack) - 1))
                  end
                  i = (i + 1)
                end
                if valid then
                  if (abs((stack[0 + 1] - 24)) > 1e-06) then
                    print((("incorrect. " .. tostring(stack[0 + 1])) .. " != 24"))
                  else
                    print("correct.")
                  end
                end
              end;
              
              main();
