-- Generated by Mochi v0.10.42 on 2025-07-28 00:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pixelFromRgb(c)
    local r = (math.floor((c // 65536)) % 256)
    local g = (math.floor((c // 256)) % 256)
    local b = (c % 256)
    return {R = r, G = g, B = b}
  end
  function rgbFromPixel(p)
    return ((tonumber(((tonumber((p.R * 65536)) or 0) + (tonumber((p.G * 256)) or 0))) or 0) + (tonumber(p.B) or 0))
  end
  function NewBitmap(x, y)
    local data = {}
    local row = 0
    while (row < y) do
      local r = {}
      local col = 0
      while (col < x) do
        r = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(r, {R = 0, G = 0, B = 0})
      col = (col + 1)
    end
    data = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(data, r)
  row = (row + 1)
end
return {cols = x, rows = y, px = data}
end
function Extent(b)
  return {__name = "GenType1", __order = {"cols", "rows"}, cols = b.cols, rows = b.rows}
end
function Fill(b, p)
  local y = 0
  while (y < b.rows) do
    local x = 0
    while (x < b.cols) do
      local px = b.px
      local row = px[y + 1]
      row[x + 1] = p
      px[y + 1] = row
      b.px = px
      x = (x + 1)
    end
    y = (y + 1)
  end
end
function FillRgb(b, c)
  Fill(b, pixelFromRgb(c))
end
function SetPx(b, x, y, p)
  if ((((x < 0) or (x >= b.cols)) or (y < 0)) or (y >= b.rows)) then
    return false
  end
  local px = b.px
  local row = px[y + 1]
  row[x + 1] = p
  px[y + 1] = row
  b.px = px
  return true
end
function SetPxRgb(b, x, y, c)
  return SetPx(b, x, y, pixelFromRgb(c))
end
function GetPx(b, x, y)
  if ((((x < 0) or (x >= b.cols)) or (y < 0)) or (y >= b.rows)) then
    return {__name = "GenType2", __order = {"ok"}, ok = false}
  end
  local row = b.px[y + 1]
  return {__name = "GenType3", __order = {"ok", "pixel"}, ok = true, pixel = row[x + 1]}
end
function GetPxRgb(b, x, y)
  local r = GetPx(b, x, y)
  if (not r.ok) then
    return {__name = "GenType4", __order = {"ok"}, ok = false}
  end
  return {__name = "GenType5", __order = {"ok", "rgb"}, ok = true, rgb = rgbFromPixel(r.pixel)}
end
function ppmSize(b)
  local header = (((("P6\n# Creator: Rosetta Code http://rosettacode.org/\n" .. tostring(b.cols)) .. " ") .. tostring(b.rows)) .. "\n255\n")
  return ((tonumber((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(header)) or 0) + (tonumber(((3 * b.cols) * b.rows)) or 0))
    end
    function pixelStr(p)
      return (((((("{" .. tostring(p.R)) .. " ") .. tostring(p.G)) .. " ") .. tostring(p.B)) .. "}")
    end
    function main()
      local bm = NewBitmap(300, 240)
      FillRgb(bm, 16711680)
      SetPxRgb(bm, 10, 20, 255)
      SetPxRgb(bm, 20, 30, 0)
      SetPxRgb(bm, 30, 40, 1056816)
      local c1 = GetPx(bm, 0, 0)
      local c2 = GetPx(bm, 10, 20)
      local c3 = GetPx(bm, 30, 40)
      print(((("Image size: " .. tostring(bm.cols)) .. " Ã— ") .. tostring(bm.rows)))
      print((tostring(ppmSize(bm)) .. " bytes when encoded as PPM."))
      if c1.ok then
        print(("Pixel at (0,0) is " .. pixelStr(c1.pixel)))
      end
      if c2.ok then
        print(("Pixel at (10,20) is " .. pixelStr(c2.pixel)))
      end
      if c3.ok then
        local p = c3.pixel
        local r16 = (p.R * 257)
        local g16 = (p.G * 257)
        local b16 = (p.B * 257)
        print(((((("Pixel at (30,40) has R=" .. tostring(r16)) .. ", G=") .. tostring(g16)) .. ", B=") .. tostring(b16)))
      end
    end
    main()
    local _bench_end = _now()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
