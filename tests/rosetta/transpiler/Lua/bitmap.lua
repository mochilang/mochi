-- Generated by Mochi v0.10.39 on 2025-07-24 14:54 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end
function pixelFromRgb(c)
  local r = (math.floor((c // 65536)) % 256)
  local g = (math.floor((c // 256)) % 256)
  local b = (c % 256)
  return {R = r, G = g, B = b}
end;

function rgbFromPixel(p)
  return (((p.R * 65536) + (p.G * 256)) + p.B)
end;

function NewBitmap(x, y)
  local data = {}
  local row = 0
  while (row < y) do
    local r = {}
    local col = 0
    while (col < x) do
      r = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(r, {R = 0, G = 0, B = 0})
    col = (col + 1)
  end
  data = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(data, r)
row = (row + 1)
end
return {cols = x, rows = y, px = data}
end;

function Extent(b)
  return {__name = "GenType1", __order = {"cols", "rows"}, cols = b.cols, rows = b.rows}
end;

function Fill(b, p)
  local y = 0
  while (y < b.rows) do
    local x = 0
    while (x < b.cols) do
      local px = b.px
      local row = px[y + 1]
      row[x + 1] = p
      px[y + 1] = row
      b.px = px
      x = (x + 1)
    end
    y = (y + 1)
  end
end;

function FillRgb(b, c)
  Fill((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(b), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(pixelFromRgb(c)))
end;

function SetPx(b, x, y, p)
  if ((((x < 0) or (x >= b.cols)) or (y < 0)) or (y >= b.rows)) then
    return false
  end
  local px = b.px
  local row = px[y + 1]
  row[x + 1] = p
  px[y + 1] = row
  b.px = px
  return true
end;

function SetPxRgb(b, x, y, c)
  return SetPx((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(b), x, y, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(pixelFromRgb(c)))
end;

function GetPx(b, x, y)
  if ((((x < 0) or (x >= b.cols)) or (y < 0)) or (y >= b.rows)) then
    return {__name = "GenType2", __order = {"ok"}, ok = false}
  end
  local row = b.px[y + 1]
  return {__name = "GenType3", __order = {"ok", "pixel"}, ok = true, pixel = row[x + 1]}
end;

function GetPxRgb(b, x, y)
  local r = GetPx((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(b), x, y)
  if (not r.ok) then
    return {__name = "GenType4", __order = {"ok"}, ok = false}
  end
  return {__name = "GenType5", __order = {"ok", "rgb"}, ok = true, rgb = rgbFromPixel((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(r.pixel))}
end;

function ppmSize(b)
  local header = (((("P6\n# Creator: Rosetta Code http://rosettacode.org/\n" .. tostring(b.cols)) .. " ") .. tostring(b.rows)) .. "\n255\n")
  return ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(header) + ((3 * b.cols) * b.rows))
  end;
  
  function pixelStr(p)
    return (((((("{" .. tostring(p.R)) .. " ") .. tostring(p.G)) .. " ") .. tostring(p.B)) .. "}")
  end;
  
  function main()
    local bm = NewBitmap(300, 240)
    FillRgb((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), 16711680)
    SetPxRgb((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), 10, 20, 255)
    SetPxRgb((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), 20, 30, 0)
    SetPxRgb((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), 30, 40, 1056816)
    local c1 = GetPx((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), 0, 0)
    local c2 = GetPx((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), 10, 20)
    local c3 = GetPx((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm), 30, 40)
    print(((("Image size: " .. tostring(bm.cols)) .. " Ã— ") .. tostring(bm.rows)))
    print((tostring(ppmSize((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(bm))) .. " bytes when encoded as PPM."))
    if c1.ok then
      print(("Pixel at (0,0) is " .. pixelStr((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c1.pixel))))
    end
    if c2.ok then
      print(("Pixel at (10,20) is " .. pixelStr((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c2.pixel))))
    end
    if c3.ok then
      local p = c3.pixel
      local r16 = (p.R * 257)
      local g16 = (p.G * 257)
      local b16 = (p.B * 257)
      print(((((("Pixel at (30,40) has R=" .. tostring(r16)) .. ", G=") .. tostring(g16)) .. ", B=") .. tostring(b16)))
    end
  end;
  
  main();
