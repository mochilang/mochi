-- Generated by Mochi v0.10.37 on 2025-07-23 14:12 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
PI = 3.141592653589793;

function sinApprox(x)
  local term = x
  local sum = x
  local n = 1
  while (n <= 8) do
    local denom = ((2 * n) * ((2 * n) + 1))
    term = ((((0 - term) * x) * x) / denom)
    sum = (sum + term)
    n = (n + 1)
  end
  return sum
end;

function cosApprox(x)
  local term = 1
  local sum = 1
  local n = 1
  while (n <= 8) do
    local denom = (((2 * n) - 1) * (2 * n))
    term = ((((0 - term) * x) * x) / denom)
    sum = (sum + term)
    n = (n + 1)
  end
  return sum
end;

function atanApprox(x)
  if (x > 1) then
    return ((PI / 2) - (x / ((x * x) + 0.28)))
  end
  if (x < (0 - 1)) then
    return (((0 - PI) / 2) - (x / ((x * x) + 0.28)))
  end
  return (x / (1 + ((0.28 * x) * x)))
end;

function atan2Approx(y, x)
  if (x > 0) then
    return atanApprox((y / x))
  end
  if (x < 0) then
    if (y >= 0) then
      return (atanApprox((y / x)) + PI)
    end
    return (atanApprox((y / x)) - PI)
  end
  if (y > 0) then
    return (PI / 2)
  end
  if (y < 0) then
    return ((0 - PI) / 2)
  end
  return 0
end;

function digit(ch)
  local digits = "0123456789"
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(digits)) do
      if (string.sub(digits, i + 1, (i + 1)) == ch) then
        return i
      end
      i = (i + 1)
    end
    return 0
  end;
  
  function parseTwo(s, idx)
    return ((tonumber((digit(string.sub(s, idx + 1, (idx + 1))) * 10)) or 0) + (tonumber(digit(string.sub(s, (idx + 1) + 1, (idx + 2)))) or 0))
  end;
  
  function parseSec(s)
    local h = parseTwo(s, 0)
    local m = parseTwo(s, 3)
    local sec = parseTwo(s, 6)
    return ((((h * 60) + m) * 60) + sec)
  end;
  
  function pad(n)
    if (n < 10) then
      return ("0" .. tostring(n))
    end
    return tostring(n)
  end;
  
  function meanTime(times)
    local ssum = 0
    local csum = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(times)) do
        local sec = parseSec(times[i + 1])
        local ang = (((sec * 2) * PI) / 86400)
        ssum = (ssum + sinApprox(ang))
        csum = (csum + cosApprox(ang))
        i = (i + 1)
      end
      local theta = atan2Approx(ssum, csum)
      local frac = (theta / (2 * PI))
      while (frac < 0) do
        frac = (frac + 1)
      end
      local total = (frac * 86400)
      local si = total
      local h = (si // 3600)
      local m = ((si % 3600) // 60)
      local s = (si % 60)
      return ((((pad(h) .. ":") .. pad(m)) .. ":") .. pad(s))
    end;
    
    function main()
      local inputs = {"23:00:17", "23:40:20", "00:12:45", "00:17:19"}
      print(meanTime(inputs))
    end;
    
    main();
