-- Generated by Mochi v0.10.41 on 2025-07-26 19:27 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function indexOf(s, ch, start)
    local i = start
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        if (string.sub(s, i + 1, (i + 1)) == ch) then
          return i
        end
        i = (i + 1)
      end
      return (-1)
    end
    function ord(ch)
      local digits = "0123456789"
      local idx = _indexOf(digits, ch)
      if (idx >= 0) then
        return (48 + idx)
      end
      if (ch == "X") then
        return 88
      end
      if (ch == "é") then
        return 233
      end
      if (ch == "😍") then
        return 128525
      end
      if (ch == "🐡") then
        return 128033
      end
      return 0
    end
    function toHex(n)
      local digits = "0123456789ABCDEF"
      if (n == 0) then
        return "0"
      end
      local v = n
      local out = ""
      while (v > 0) do
        local d = (v % 16)
        out = (string.sub(digits, (d + 1), (d + 1)) .. out)
        v = (v // 16)
      end
      return out
    end
    function analyze(s)
      local le = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)
        print((((("Analyzing \"" .. s) .. "\" which has a length of ") .. tostring(le)) .. ":"))
        if (le > 1) then
          local i = 0
          while (i < (le - 1)) do
            local j = (i + 1)
            while (j < le) do
              if (string.sub(s, j + 1, (j + 1)) == string.sub(s, i + 1, (i + 1))) then
                local ch = string.sub(s, i + 1, (i + 1))
                print("  Not all characters in the string are unique.")
                print((((((((("  '" .. ch) .. "' (0x") .. string.lower(toHex(ord(ch)))) .. ") is duplicated at positions ") .. tostring((i + 1))) .. " and ") .. tostring((j + 1))) .. ".\n"))
                return
              end
              j = (j + 1)
            end
            i = (i + 1)
          end
        end
        print("  All characters in the string are unique.\n")
      end
      function main()
        local strings = {"", ".", "abcABC", "XYZ ZYX", "1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ", "01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X", "hétérogénéité", "🎆🎃🎇🎈", "😍😀🙌💃😍🙌", "🐠🐟🐡🦈🐬🐳🐋🐡"}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(strings)) do
            analyze(strings[i + 1])
            i = (i + 1)
          end
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
