-- Generated by Mochi v0.10.37 on 2025-07-23 12:16 GMT+7
function input()
  return io.read('*l')
end

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
  return _now_seed
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
function fields(s)
  local words = {}
  local cur = ""
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s)) do
    local ch = string.sub(s, i + 1, (i + 1))
    if (((ch == " ") or (ch == "\n")) or (ch == "\t")) then
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(cur) > 0) then
        words = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(words, cur)
      cur = ""
    end
  else
    cur = (cur .. ch)
  end
  i = (i + 1)
end
if ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  else
    return #v
  end
end)(cur) > 0) then
  words = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(words, cur)
end
return words
end;

function padRight(s, width)
  local out = s
  local i = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s)
  while (i < width) do
    out = (out .. " ")
    i = (i + 1)
  end
  return out
end;

function join(xs, sep)
  local res = ""
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(xs)) do
    if (i > 0) then
      res = (res .. sep)
    end
    res = (res .. xs[i + 1])
    i = (i + 1)
  end
  return res
end;

function parseIntStr(str)
  local i = 0
  local neg = false
  if (((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(str) > 0) and (string.sub(str, (0 + 1), 1) == "-")) then
    neg = true
    i = 1
  end
  local n = 0
  local digits = {__name = "GenType1", __order = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5, ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9}
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(str)) do
    n = ((n * 10) + digits[string.sub(str, (i + 1), (i + 1))])
    i = (i + 1)
  end
  if neg then
    n = (0 - n)
  end
  return n
end;

function isDigits(s)
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s) == 0) then
    return false
  end
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(s)) do
    local ch = string.sub(s, i + 1, (i + 1))
    if ((ch < "0") or (ch > "9")) then
      return false
    end
    i = (i + 1)
  end
  return true
end;

function readTable(_table)
  local toks = fields(_table)
  local cmds = {}
  local mins = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(toks)) do
    local cmd = toks[i + 1]
    local minlen = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(cmd)
    i = (i + 1)
    if ((i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(toks)) and isDigits(toks[i + 1])) then
      local num = parseIntStr(toks[i + 1])
      if ((num >= 1) and (num < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(cmd))) then
        minlen = num
        i = (i + 1)
      end
    end
    cmds = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(cmds, cmd)
  mins = (function(lst, item)
  local res = {table.unpack(lst)}
  table.insert(res, item)
  return res
end)(mins, minlen)
end
return {__name = "GenType2", __order = {"commands", "mins"}, commands = cmds, mins = mins}
end;

function validate(commands, mins, words)
  local results = {}
  local wi = 0
  while (wi < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(words)) do
    local w = words[wi + 1]
    local found = false
    local wlen = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(w)
    local ci = 0
    while (ci < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(commands)) do
      local cmd = commands[ci + 1]
      if (((mins[ci + 1] ~= 0) and (wlen >= mins[ci + 1])) and (wlen <= (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(cmd))) then
        local c = string.upper(cmd)
        local ww = string.upper(w)
        if (string.sub(c, 0 + 1, wlen) == ww) then
          results = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(results, c)
        found = true
        break
      end
    end
    ci = (ci + 1)
  end
  if (not found) then
    results = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(results, "*error*")
end
wi = (wi + 1)
end
return results
end;

function main()
  local _table = (((((((("" .. "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") .. "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") .. "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") .. "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") .. "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") .. "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") .. "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") .. "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ")
  local sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
  local tbl = readTable(_table)
  local commands = tbl.commands
  local mins = tbl.mins
  local words = fields(sentence)
  local results = validate(commands, mins, words)
  local out1 = "user words:"
  local k = 0
  while (k < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    else
      return #v
    end
  end)(words)) do
    out1 = (out1 .. " ")
    if (k < ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      else
        return #v
      end
    end)(words) - 1)) then
      out1 = (out1 .. padRight(words[k + 1], (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        else
          return #v
        end
      end)(results[k + 1])))
    else
      out1 = (out1 .. words[k + 1])
    end
    k = (k + 1)
  end
  print(out1)
  print(("full words: " .. join(results, " ")))
end;

main();
