-- Generated by Mochi v0.10.42 on 2025-07-27 21:41 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function floorf(x)
    local i = math.floor(x)
    if (i > x) then
      i = (i - 1)
    end
    return i
  end
  function frac(x)
    return (x - floorf(x))
  end
  function sinApprox(x)
    local term = x
    local sum = x
    local n = 1
    while (n <= 10) do
      local denom = ((2 * n) * ((2 * n) + 1))
      term = ((((-term) * x) * x) / denom)
      sum = (sum + term)
      n = (n + 1)
    end
    return sum
  end
  function sqrtApprox(x)
    if (x <= 0) then
      return 0
    end
    local guess = x
    local i = 0
    while (i < 10) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  PI = 3.141592653589793
  nframes = 10
  w = 32
  h = 32
  total = 0
  f = 1
  while (f <= nframes) do
    y = 0
    while (y < h) do
      x = 0
      while (x < w) do
        fx = x
        fy = y
        value = sinApprox((fx / 16))
        value = (value + sinApprox((fy / 8)))
        value = (value + sinApprox(((fx + fy) / 16)))
        value = (value + sinApprox((sqrtApprox(((fx * fx) + (fy * fy))) / 8)))
        value = (value + 4)
        value = (value / 8)
        rem = frac((value + (f // nframes)))
        ci = (math.floor((nframes * rem)) + 1)
        total = (total + ci)
        x = (x + 1)
      end
      y = (y + 1)
    end
    f = (f + 1)
  end
  print(total)
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
