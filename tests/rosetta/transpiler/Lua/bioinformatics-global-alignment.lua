-- Generated by Mochi v0.10.57 on 2025-08-04 15:16 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function padLeft(s, w)
    local res = ""
    local n = (w - (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s))
        while (n > 0) do
          res = (res .. " ")
          n = (n - 1)
        end
        return (res .. s)
      end
      function indexOfFrom(s, ch, start)
        local i = start
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)) do
              if (_substring(s, i, (i + 1)) == ch) then
                return i
              end
              i = (i + 1)
            end
            return (-1)
          end
          function containsStr(s, sub)
            local i = 0
            local sl = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s)
                local subl = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(sub)
                    while (i <= (sl - subl)) do
                      if (_substring(s, i, (i + subl)) == sub) then
                        return true
                      end
                      i = (i + 1)
                    end
                    return false
                  end
                  function distinct(slist)
                    local res = {}
                    for _, s in ipairs(slist) do
                      local found = false
                      for _, r in ipairs(res) do
                        if (r == s) then
                          found = true
                          break
                        end
                      end
                      if (not found) then
                        res = (function(lst, item)
                        local res = {table.unpack(lst)}
                        table.insert(res, item)
                        return res
                      end)(res, s)
                    end
                  end
                  return res
                end
                function permutations(xs)
                  if ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(xs) <= 1) then
                        return {xs}
                      end
                      local res = {}
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(xs)) do
                            local rest = {}
                            local j = 0
                            while (j < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(xs)) do
                                  if (j ~= i) then
                                    rest = (function(lst, item)
                                    local res = {table.unpack(lst)}
                                    table.insert(res, item)
                                    return res
                                  end)(rest, xs[j + 1])
                                end
                                j = (j + 1)
                              end
                              local subs = permutations(rest)
                              for _, p in ipairs(subs) do
                                local perm = {xs[i + 1]}
                                local k = 0
                                while (k < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(p)) do
                                      perm = (function(lst, item)
                                      local res = {table.unpack(lst)}
                                      table.insert(res, item)
                                      return res
                                    end)(perm, p[k + 1])
                                    k = (k + 1)
                                  end
                                  res = (function(lst, item)
                                  local res = {table.unpack(lst)}
                                  table.insert(res, item)
                                  return res
                                end)(res, perm)
                              end
                              i = (i + 1)
                            end
                            return res
                          end
                          function headTailOverlap(s1, s2)
                            local start = 0
                            while true do
                              local ix = indexOfFrom(s1, string.sub(s2, (0 + 1), 1), start)
                              if (ix == (0 - 1)) then
                                return 0
                              end
                              start = ix
                              local sublen = ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(s1) - start)
                                  if (sublen > (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(s2)) then
                                        sublen = (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(s2)
                                          end
                                          if (_substring(s2, 0, sublen) == _substring(s1, start, (start + sublen))) then
                                            return sublen
                                          end
                                          start = (start + 1)
                                        end
                                      end
                                      function deduplicate(slist)
                                        local arr = distinct(slist)
                                        local filtered = {}
                                        local i = 0
                                        while (i < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(arr)) do
                                              local s1 = arr[i + 1]
                                              local within = false
                                              local j = 0
                                              while (j < (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(arr)) do
                                                    if ((j ~= i) and containsStr(arr[j + 1], s1)) then
                                                      within = true
                                                      break
                                                    end
                                                    j = (j + 1)
                                                  end
                                                  if (not within) then
                                                    filtered = (function(lst, item)
                                                    local res = {table.unpack(lst)}
                                                    table.insert(res, item)
                                                    return res
                                                  end)(filtered, s1)
                                                end
                                                i = (i + 1)
                                              end
                                              return filtered
                                            end
                                            function joinAll(ss)
                                              local out = ""
                                              for _, s in ipairs(ss) do
                                                out = (out .. tostring(s))
                                              end
                                              return out
                                            end
                                            function shortestCommonSuperstring(slist)
                                              local ss = deduplicate(slist)
                                              local shortest = joinAll(ss)
                                              local perms = permutations(ss)
                                              local idx = 0
                                              while (idx < (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(perms)) do
                                                    local perm = perms[idx + 1]
                                                    local sup = perm[0 + 1]
                                                    local i = 0
                                                    while (i < ((function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(ss) - 1)) do
                                                          local ov = headTailOverlap(perm[i + 1], perm[(i + 1) + 1])
                                                          sup = (sup .. _substring(perm[(i + 1) + 1], ov, (function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(perm[(i + 1) + 1])))
                                                              i = (i + 1)
                                                            end
                                                            if ((function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(sup) < (function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(shortest)) then
                                                                      shortest = sup
                                                                    end
                                                                    idx = (idx + 1)
                                                                  end
                                                                  return shortest
                                                                end
                                                                function printCounts(seq)
                                                                  local a = 0
                                                                  local c = 0
                                                                  local g = 0
                                                                  local t = 0
                                                                  local i = 0
                                                                  while (i < (function(v)
                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                    return #v.items
                                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                                      local c = 0
                                                                      for _ in pairs(v) do c = c + 1 end
                                                                      return c
                                                                    elseif type(v) == 'string' then
                                                                        local l = utf8.len(v)
                                                                        if l then return l end
                                                                        return #v
                                                                      elseif type(v) == 'table' then
                                                                          return #v
                                                                        else
                                                                          return 0
                                                                        end
                                                                      end)(seq)) do
                                                                        local ch = _substring(seq, i, (i + 1))
                                                                        if (ch == "A") then
                                                                          a = (a + 1)
                                                                        else
                                                                          if (ch == "C") then
                                                                            c = (c + 1)
                                                                          else
                                                                            if (ch == "G") then
                                                                              g = (g + 1)
                                                                            else
                                                                              if (ch == "T") then
                                                                                t = (t + 1)
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                        i = (i + 1)
                                                                      end
                                                                      local total = (function(v)
                                                                      if type(v) == 'table' and v.items ~= nil then
                                                                        return #v.items
                                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                                          local c = 0
                                                                          for _ in pairs(v) do c = c + 1 end
                                                                          return c
                                                                        elseif type(v) == 'string' then
                                                                            local l = utf8.len(v)
                                                                            if l then return l end
                                                                            return #v
                                                                          elseif type(v) == 'table' then
                                                                              return #v
                                                                            else
                                                                              return 0
                                                                            end
                                                                          end)(seq)
                                                                          print((("\nNucleotide counts for " .. seq) .. ":\n"))
                                                                          print((padLeft("A", 10) .. padLeft(tostring(a), 12)))
                                                                          print((padLeft("C", 10) .. padLeft(tostring(c), 12)))
                                                                          print((padLeft("G", 10) .. padLeft(tostring(g), 12)))
                                                                          print((padLeft("T", 10) .. padLeft(tostring(t), 12)))
                                                                          print((padLeft("Other", 10) .. padLeft(tostring((total - (((a + c) + g) + t))), 12)))
                                                                          print("  ____________________")
                                                                          print((padLeft("Total length", 14) .. padLeft(tostring(total), 8)))
                                                                        end
                                                                        function main()
                                                                          local tests = {{"TA", "AAG", "TA", "GAA", "TA"}, {"CATTAGGG", "ATTAG", "GGG", "TA"}, {"AAGAUGGA", "GGAGCGCAUC", "AUCGCAAUAAGGA"}, {"ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT", "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT", "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC", "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC", "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT", "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA"}}
                                                                          for _, seqs in ipairs(tests) do
                                                                            local scs = shortestCommonSuperstring(seqs)
                                                                            printCounts(scs)
                                                                          end
                                                                        end
                                                                        main()
                                                                        local _bench_end = os.clock()
                                                                        collectgarbage()
                                                                        local _bench_end_mem = collectgarbage('count') * 1024
                                                                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                      end;
