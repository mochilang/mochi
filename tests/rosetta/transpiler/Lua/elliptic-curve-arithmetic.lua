-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function zero()
    return {x = 0, y = 0, inf = true}
  end
  function isZero(p)
    return p.inf
  end
  function neg(p)
    return {x = p.x, y = (-p.y), inf = p.inf}
  end
  function dbl(p)
    if isZero(p) then
      return p
    end
    local L = (((3 * p.x) * p.x) / (2 * p.y))
    local x = ((L * L) - (2 * p.x))
    return {x = x, y = ((L * (p.x - x)) - p.y), inf = false}
  end
  function add(p, q)
    if isZero(p) then
      return q
    end
    if isZero(q) then
      return p
    end
    if (p.x == q.x) then
      if (p.y == q.y) then
        return dbl((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))
      end
      return zero()
    end
    local L = ((q.y - p.y) // (q.x - p.x))
    local x = (((L * L) - p.x) - q.x)
    return {x = x, y = ((L * (p.x - x)) - p.y), inf = false}
  end
  function mul(p, n)
    local r = zero()
    local q = p
    local k = n
    while (k > 0) do
      if ((k % 2) == 1) then
        r = add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(r), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(q))
      end
      q = dbl((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(q))
      k = (k // 2)
    end
    return r
  end
  function cbrtApprox(x)
    local guess = x
    local i = 0
    while (i < 40) do
      guess = (((2 * guess) + (x / (guess * guess))) / 3)
      i = (i + 1)
    end
    return guess
  end
  function fromY(y)
    return {x = cbrtApprox(((y * y) - bCoeff)), y = y, inf = false}
  end
  function show(s, p)
    if isZero(p) then
      print((s .. "Zero"))
    else
      print((((((s .. "(") .. tostring(p.x)) .. ", ") .. tostring(p.y)) .. ")"))
    end
  end
  function main()
    local a = fromY(1)
    local b = fromY(2)
    show("a = ", a)
    show("b = ", b)
    local c = add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(a), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(b))
    show("c = a + b = ", c)
    local d = neg((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c))
    show("d = -c = ", d)
    show("c + d = ", add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(d)))
    show("a + b + d = ", add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(a), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(b), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(d)))))
    show("a * 12345 = ", mul((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(a), 12345))
  end
  bCoeff = 7
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
