-- Generated by Mochi v0.10.42 on 2025-07-27 22:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function shuffleStr(s)
    local arr = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          arr = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(arr, string.sub(s, (i + 1), (i + 1)))
        i = (i + 1)
      end
      local j = ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(arr) - 1)
          while (j > 0) do
            local k = (_now() % (j + 1))
            local tmp = arr[j + 1]
            arr[j + 1] = arr[k + 1]
            arr[k + 1] = tmp
            j = (j - 1)
          end
          local out = ""
          i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(arr)) do
                out = (out .. arr[i + 1])
                i = (i + 1)
              end
              return out
            end
            function createPolybius()
              local shuffled = shuffleStr(alphabet)
              local labels = {}
              local li = 0
              while (li < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(adfgvx)) do
                    labels = (function(lst, item)
                    local res = {table.unpack(lst)}
                    table.insert(res, item)
                    return res
                  end)(labels, string.sub(adfgvx, (li + 1), (li + 1)))
                  li = (li + 1)
                end
                print("6 x 6 Polybius square:\n")
                print("  | A D F G V X")
                print("---------------")
                local p = {}
                local i = 0
                while (i < 6) do
                  local row = string.sub(shuffled, ((i * 6) + 1), ((i + 1) * 6))
                  p = (function(lst, item)
                  local res = {table.unpack(lst)}
                  table.insert(res, item)
                  return res
                end)(p, row)
                local line = (labels[i + 1] .. " | ")
                local j = 0
                while (j < 6) do
                  line = ((line .. string.sub(row, (j + 1), (j + 1))) .. " ")
                  j = (j + 1)
                end
                print(line)
                i = (i + 1)
              end
              return p
            end
            function createKey(n)
              if ((n < 7) or (n > 12)) then
                print("Key should be within 7 and 12 letters long.")
              end
              local pool = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
              local key = ""
              local i = 0
              while (i < n) do
                local idx = (_now() % (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(pool))
                    key = (key .. string.sub(pool, (idx + 1), (idx + 1)))
                    pool = (string.sub(pool, 1, idx) .. string.sub(pool, ((idx + 1) + 1), (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(pool)))
                        i = (i + 1)
                      end
                      print(("\nThe key is " .. key))
                      return key
                    end
                    function orderKey(key)
                      local pairs = {}
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(key)) do
                            pairs = (function(lst, item)
                            local res = {table.unpack(lst)}
                            table.insert(res, item)
                            return res
                          end)(pairs, {string.sub(key, (i + 1), (i + 1)), i})
                          i = (i + 1)
                        end
                        local n = (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(pairs)
                            local m = 0
                            while (m < n) do
                              local j = 0
                              while (j < (n - 1)) do
                                if (pairs[j + 1][0 + 1] > pairs[(j + 1) + 1][0 + 1]) then
                                  local tmp = pairs[j + 1]
                                  pairs[j + 1] = pairs[(j + 1) + 1]
                                  pairs[(j + 1) + 1] = tmp
                                end
                                j = (j + 1)
                              end
                              m = (m + 1)
                            end
                            local res = {}
                            i = 0
                            while (i < n) do
                              res = (function(lst, item)
                              local res = {table.unpack(lst)}
                              table.insert(res, item)
                              return res
                            end)(res, math.floor(pairs[i + 1][1 + 1]))
                            i = (i + 1)
                          end
                          return res
                        end
                        function encrypt(polybius, key, plainText)
                          local labels = {}
                          local li = 0
                          while (li < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(adfgvx)) do
                                labels = (function(lst, item)
                                local res = {table.unpack(lst)}
                                table.insert(res, item)
                                return res
                              end)(labels, string.sub(adfgvx, (li + 1), (li + 1)))
                              li = (li + 1)
                            end
                            local temp = ""
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(plainText)) do
                                  local r = 0
                                  while (r < 6) do
                                    local c = 0
                                    while (c < 6) do
                                      if (string.sub(polybius[r + 1], (c + 1), (c + 1)) == string.sub(plainText, (i + 1), (i + 1))) then
                                        temp = ((temp .. labels[r + 1]) .. labels[c + 1])
                                      end
                                      c = (c + 1)
                                    end
                                    r = (r + 1)
                                  end
                                  i = (i + 1)
                                end
                                local colLen = ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(temp) // (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(key))
                                        if (((function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(temp) % (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(key)) > 0) then
                                                  colLen = (colLen + 1)
                                                end
                                                local _table = {}
                                                local rIdx = 0
                                                while (rIdx < colLen) do
                                                  local row = {}
                                                  local j = 0
                                                  while (j < (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(key)) do
                                                        row = (function(lst, item)
                                                        local res = {table.unpack(lst)}
                                                        table.insert(res, item)
                                                        return res
                                                      end)(row, "")
                                                      j = (j + 1)
                                                    end
                                                    _table = (function(lst, item)
                                                    local res = {table.unpack(lst)}
                                                    table.insert(res, item)
                                                    return res
                                                  end)(_table, row)
                                                  rIdx = (rIdx + 1)
                                                end
                                                local idx = 0
                                                while (idx < (function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(temp)) do
                                                      local row = (idx // (function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(key))
                                                          local col = (idx % (function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(key))
                                                              _table[row + 1][col + 1] = string.sub(temp, (idx + 1), (idx + 1))
                                                              idx = (idx + 1)
                                                            end
                                                            local order = orderKey(key)
                                                            local cols = {}
                                                            local ci = 0
                                                            while (ci < (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(key)) do
                                                                  local colStr = ""
                                                                  local ri = 0
                                                                  while (ri < colLen) do
                                                                    colStr = (colStr .. _table[ri + 1][order[ci + 1] + 1])
                                                                    ri = (ri + 1)
                                                                  end
                                                                  cols = (function(lst, item)
                                                                  local res = {table.unpack(lst)}
                                                                  table.insert(res, item)
                                                                  return res
                                                                end)(cols, colStr)
                                                                ci = (ci + 1)
                                                              end
                                                              local result = ""
                                                              ci = 0
                                                              while (ci < (function(v)
                                                              if type(v) == 'table' and v.items ~= nil then
                                                                return #v.items
                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                  local c = 0
                                                                  for _ in pairs(v) do c = c + 1 end
                                                                  return c
                                                                elseif type(v) == 'string' then
                                                                    local l = utf8.len(v)
                                                                    if l then return l end
                                                                    return #v
                                                                  elseif type(v) == 'table' then
                                                                      return #v
                                                                    else
                                                                      return 0
                                                                    end
                                                                  end)(cols)) do
                                                                    result = (result .. cols[ci + 1])
                                                                    if (ci < ((function(v)
                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                      return #v.items
                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                        local c = 0
                                                                        for _ in pairs(v) do c = c + 1 end
                                                                        return c
                                                                      elseif type(v) == 'string' then
                                                                          local l = utf8.len(v)
                                                                          if l then return l end
                                                                          return #v
                                                                        elseif type(v) == 'table' then
                                                                            return #v
                                                                          else
                                                                            return 0
                                                                          end
                                                                        end)(cols) - 1)) then
                                                                          result = (result .. " ")
                                                                        end
                                                                        ci = (ci + 1)
                                                                      end
                                                                      return result
                                                                    end
                                                                    function indexOf(s, ch)
                                                                      local i = 0
                                                                      while (i < (function(v)
                                                                      if type(v) == 'table' and v.items ~= nil then
                                                                        return #v.items
                                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                                          local c = 0
                                                                          for _ in pairs(v) do c = c + 1 end
                                                                          return c
                                                                        elseif type(v) == 'string' then
                                                                            local l = utf8.len(v)
                                                                            if l then return l end
                                                                            return #v
                                                                          elseif type(v) == 'table' then
                                                                              return #v
                                                                            else
                                                                              return 0
                                                                            end
                                                                          end)(s)) do
                                                                            if (string.sub(s, (i + 1), (i + 1)) == ch) then
                                                                              return i
                                                                            end
                                                                            i = (i + 1)
                                                                          end
                                                                          return (-1)
                                                                        end
                                                                        function decrypt(polybius, key, cipherText)
                                                                          local colStrs = {}
                                                                          local start = 0
                                                                          local i = 0
                                                                          while (i <= (function(v)
                                                                          if type(v) == 'table' and v.items ~= nil then
                                                                            return #v.items
                                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                                              local c = 0
                                                                              for _ in pairs(v) do c = c + 1 end
                                                                              return c
                                                                            elseif type(v) == 'string' then
                                                                                local l = utf8.len(v)
                                                                                if l then return l end
                                                                                return #v
                                                                              elseif type(v) == 'table' then
                                                                                  return #v
                                                                                else
                                                                                  return 0
                                                                                end
                                                                              end)(cipherText)) do
                                                                                if ((i == (function(v)
                                                                                if type(v) == 'table' and v.items ~= nil then
                                                                                  return #v.items
                                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                                    local c = 0
                                                                                    for _ in pairs(v) do c = c + 1 end
                                                                                    return c
                                                                                  elseif type(v) == 'string' then
                                                                                      local l = utf8.len(v)
                                                                                      if l then return l end
                                                                                      return #v
                                                                                    elseif type(v) == 'table' then
                                                                                        return #v
                                                                                      else
                                                                                        return 0
                                                                                      end
                                                                                    end)(cipherText)) or (string.sub(cipherText, (i + 1), (i + 1)) == " ")) then
                                                                                      colStrs = (function(lst, item)
                                                                                      local res = {table.unpack(lst)}
                                                                                      table.insert(res, item)
                                                                                      return res
                                                                                    end)(colStrs, string.sub(cipherText, (start + 1), i))
                                                                                    start = (i + 1)
                                                                                  end
                                                                                  i = (i + 1)
                                                                                end
                                                                                local maxColLen = 0
                                                                                i = 0
                                                                                while (i < (function(v)
                                                                                if type(v) == 'table' and v.items ~= nil then
                                                                                  return #v.items
                                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                                    local c = 0
                                                                                    for _ in pairs(v) do c = c + 1 end
                                                                                    return c
                                                                                  elseif type(v) == 'string' then
                                                                                      local l = utf8.len(v)
                                                                                      if l then return l end
                                                                                      return #v
                                                                                    elseif type(v) == 'table' then
                                                                                        return #v
                                                                                      else
                                                                                        return 0
                                                                                      end
                                                                                    end)(colStrs)) do
                                                                                      if ((function(v)
                                                                                      if type(v) == 'table' and v.items ~= nil then
                                                                                        return #v.items
                                                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                                                          local c = 0
                                                                                          for _ in pairs(v) do c = c + 1 end
                                                                                          return c
                                                                                        elseif type(v) == 'string' then
                                                                                            local l = utf8.len(v)
                                                                                            if l then return l end
                                                                                            return #v
                                                                                          elseif type(v) == 'table' then
                                                                                              return #v
                                                                                            else
                                                                                              return 0
                                                                                            end
                                                                                          end)(colStrs[i + 1]) > maxColLen) then
                                                                                            maxColLen = (function(v)
                                                                                            if type(v) == 'table' and v.items ~= nil then
                                                                                              return #v.items
                                                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                local c = 0
                                                                                                for _ in pairs(v) do c = c + 1 end
                                                                                                return c
                                                                                              elseif type(v) == 'string' then
                                                                                                  local l = utf8.len(v)
                                                                                                  if l then return l end
                                                                                                  return #v
                                                                                                elseif type(v) == 'table' then
                                                                                                    return #v
                                                                                                  else
                                                                                                    return 0
                                                                                                  end
                                                                                                end)(colStrs[i + 1])
                                                                                              end
                                                                                              i = (i + 1)
                                                                                            end
                                                                                            local cols = {}
                                                                                            i = 0
                                                                                            while (i < (function(v)
                                                                                            if type(v) == 'table' and v.items ~= nil then
                                                                                              return #v.items
                                                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                local c = 0
                                                                                                for _ in pairs(v) do c = c + 1 end
                                                                                                return c
                                                                                              elseif type(v) == 'string' then
                                                                                                  local l = utf8.len(v)
                                                                                                  if l then return l end
                                                                                                  return #v
                                                                                                elseif type(v) == 'table' then
                                                                                                    return #v
                                                                                                  else
                                                                                                    return 0
                                                                                                  end
                                                                                                end)(colStrs)) do
                                                                                                  local s = colStrs[i + 1]
                                                                                                  local ls = {}
                                                                                                  local j = 0
                                                                                                  while (j < (function(v)
                                                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                                                    return #v.items
                                                                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                      local c = 0
                                                                                                      for _ in pairs(v) do c = c + 1 end
                                                                                                      return c
                                                                                                    elseif type(v) == 'string' then
                                                                                                        local l = utf8.len(v)
                                                                                                        if l then return l end
                                                                                                        return #v
                                                                                                      elseif type(v) == 'table' then
                                                                                                          return #v
                                                                                                        else
                                                                                                          return 0
                                                                                                        end
                                                                                                      end)(s)) do
                                                                                                        ls = (function(lst, item)
                                                                                                        local res = {table.unpack(lst)}
                                                                                                        table.insert(res, item)
                                                                                                        return res
                                                                                                      end)(ls, string.sub(s, (j + 1), (j + 1)))
                                                                                                      j = (j + 1)
                                                                                                    end
                                                                                                    if ((function(v)
                                                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                                                      return #v.items
                                                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                        local c = 0
                                                                                                        for _ in pairs(v) do c = c + 1 end
                                                                                                        return c
                                                                                                      elseif type(v) == 'string' then
                                                                                                          local l = utf8.len(v)
                                                                                                          if l then return l end
                                                                                                          return #v
                                                                                                        elseif type(v) == 'table' then
                                                                                                            return #v
                                                                                                          else
                                                                                                            return 0
                                                                                                          end
                                                                                                        end)(s) < maxColLen) then
                                                                                                          local pad = {}
                                                                                                          local k = 0
                                                                                                          while (k < maxColLen) do
                                                                                                            if (k < (function(v)
                                                                                                            if type(v) == 'table' and v.items ~= nil then
                                                                                                              return #v.items
                                                                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                                local c = 0
                                                                                                                for _ in pairs(v) do c = c + 1 end
                                                                                                                return c
                                                                                                              elseif type(v) == 'string' then
                                                                                                                  local l = utf8.len(v)
                                                                                                                  if l then return l end
                                                                                                                  return #v
                                                                                                                elseif type(v) == 'table' then
                                                                                                                    return #v
                                                                                                                  else
                                                                                                                    return 0
                                                                                                                  end
                                                                                                                end)(ls)) then
                                                                                                                  pad = (function(lst, item)
                                                                                                                  local res = {table.unpack(lst)}
                                                                                                                  table.insert(res, item)
                                                                                                                  return res
                                                                                                                end)(pad, ls[k + 1])
                                                                                                              else
                                                                                                                pad = (function(lst, item)
                                                                                                                local res = {table.unpack(lst)}
                                                                                                                table.insert(res, item)
                                                                                                                return res
                                                                                                              end)(pad, "")
                                                                                                            end
                                                                                                            k = (k + 1)
                                                                                                          end
                                                                                                          cols = (function(lst, item)
                                                                                                          local res = {table.unpack(lst)}
                                                                                                          table.insert(res, item)
                                                                                                          return res
                                                                                                        end)(cols, pad)
                                                                                                      else
                                                                                                        cols = (function(lst, item)
                                                                                                        local res = {table.unpack(lst)}
                                                                                                        table.insert(res, item)
                                                                                                        return res
                                                                                                      end)(cols, ls)
                                                                                                    end
                                                                                                    i = (i + 1)
                                                                                                  end
                                                                                                  local _table = {}
                                                                                                  local r = 0
                                                                                                  while (r < maxColLen) do
                                                                                                    local row = {}
                                                                                                    local c = 0
                                                                                                    while (c < (function(v)
                                                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                                                      return #v.items
                                                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                        local c = 0
                                                                                                        for _ in pairs(v) do c = c + 1 end
                                                                                                        return c
                                                                                                      elseif type(v) == 'string' then
                                                                                                          local l = utf8.len(v)
                                                                                                          if l then return l end
                                                                                                          return #v
                                                                                                        elseif type(v) == 'table' then
                                                                                                            return #v
                                                                                                          else
                                                                                                            return 0
                                                                                                          end
                                                                                                        end)(key)) do
                                                                                                          row = (function(lst, item)
                                                                                                          local res = {table.unpack(lst)}
                                                                                                          table.insert(res, item)
                                                                                                          return res
                                                                                                        end)(row, "")
                                                                                                        c = (c + 1)
                                                                                                      end
                                                                                                      _table = (function(lst, item)
                                                                                                      local res = {table.unpack(lst)}
                                                                                                      table.insert(res, item)
                                                                                                      return res
                                                                                                    end)(_table, row)
                                                                                                    r = (r + 1)
                                                                                                  end
                                                                                                  local order = orderKey(key)
                                                                                                  r = 0
                                                                                                  while (r < maxColLen) do
                                                                                                    local c = 0
                                                                                                    while (c < (function(v)
                                                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                                                      return #v.items
                                                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                        local c = 0
                                                                                                        for _ in pairs(v) do c = c + 1 end
                                                                                                        return c
                                                                                                      elseif type(v) == 'string' then
                                                                                                          local l = utf8.len(v)
                                                                                                          if l then return l end
                                                                                                          return #v
                                                                                                        elseif type(v) == 'table' then
                                                                                                            return #v
                                                                                                          else
                                                                                                            return 0
                                                                                                          end
                                                                                                        end)(key)) do
                                                                                                          _table[r + 1][order[c + 1] + 1] = cols[c + 1][r + 1]
                                                                                                          c = (c + 1)
                                                                                                        end
                                                                                                        r = (r + 1)
                                                                                                      end
                                                                                                      local temp = ""
                                                                                                      r = 0
                                                                                                      while (r < (function(v)
                                                                                                      if type(v) == 'table' and v.items ~= nil then
                                                                                                        return #v.items
                                                                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                          local c = 0
                                                                                                          for _ in pairs(v) do c = c + 1 end
                                                                                                          return c
                                                                                                        elseif type(v) == 'string' then
                                                                                                            local l = utf8.len(v)
                                                                                                            if l then return l end
                                                                                                            return #v
                                                                                                          elseif type(v) == 'table' then
                                                                                                              return #v
                                                                                                            else
                                                                                                              return 0
                                                                                                            end
                                                                                                          end)(_table)) do
                                                                                                            local j = 0
                                                                                                            while (j < (function(v)
                                                                                                            if type(v) == 'table' and v.items ~= nil then
                                                                                                              return #v.items
                                                                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                                local c = 0
                                                                                                                for _ in pairs(v) do c = c + 1 end
                                                                                                                return c
                                                                                                              elseif type(v) == 'string' then
                                                                                                                  local l = utf8.len(v)
                                                                                                                  if l then return l end
                                                                                                                  return #v
                                                                                                                elseif type(v) == 'table' then
                                                                                                                    return #v
                                                                                                                  else
                                                                                                                    return 0
                                                                                                                  end
                                                                                                                end)(_table[r + 1])) do
                                                                                                                  temp = (temp .. _table[r + 1][j + 1])
                                                                                                                  j = (j + 1)
                                                                                                                end
                                                                                                                r = (r + 1)
                                                                                                              end
                                                                                                              local plainText = ""
                                                                                                              local idx = 0
                                                                                                              while (idx < (function(v)
                                                                                                              if type(v) == 'table' and v.items ~= nil then
                                                                                                                return #v.items
                                                                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                                  local c = 0
                                                                                                                  for _ in pairs(v) do c = c + 1 end
                                                                                                                  return c
                                                                                                                elseif type(v) == 'string' then
                                                                                                                    local l = utf8.len(v)
                                                                                                                    if l then return l end
                                                                                                                    return #v
                                                                                                                  elseif type(v) == 'table' then
                                                                                                                      return #v
                                                                                                                    else
                                                                                                                      return 0
                                                                                                                    end
                                                                                                                  end)(temp)) do
                                                                                                                    local rIdx = _indexOf(adfgvx, string.sub(temp, (idx + 1), (idx + 1)))
                                                                                                                    local cIdx = _indexOf(adfgvx, string.sub(temp, ((idx + 1) + 1), (idx + 2)))
                                                                                                                    plainText = (plainText .. string.sub(polybius[rIdx + 1], (cIdx + 1), (cIdx + 1)))
                                                                                                                    idx = (idx + 2)
                                                                                                                  end
                                                                                                                  return plainText
                                                                                                                end
                                                                                                                function main()
                                                                                                                  local plainText = "ATTACKAT1200AM"
                                                                                                                  local polybius = createPolybius()
                                                                                                                  local key = createKey(9)
                                                                                                                  print(("\nPlaintext : " .. plainText))
                                                                                                                  local cipherText = encrypt(polybius, key, plainText)
                                                                                                                  print(("\nEncrypted : " .. cipherText))
                                                                                                                  local plainText2 = decrypt(polybius, key, cipherText)
                                                                                                                  print(("\nDecrypted : " .. plainText2))
                                                                                                                end
                                                                                                                adfgvx = "ADFGVX"
                                                                                                                alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
                                                                                                                main()
                                                                                                                local _bench_end = _now()
                                                                                                                collectgarbage()
                                                                                                                local _bench_end_mem = collectgarbage('count') * 1024
                                                                                                                local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
                                                                                                                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                                                                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                                                              end;
