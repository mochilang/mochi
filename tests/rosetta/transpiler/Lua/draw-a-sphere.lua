-- Generated by Mochi v0.10.42 on 2025-07-28 10:03 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function sqrtApprox(x)
    if (x <= 0) then
      return 0
    end
    local guess = x
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function powf(base, exp)
    local result = 1
    local i = 0
    while (i < exp) do
      result = (result * base)
      i = (i + 1)
    end
    return result
  end
  function normalize(v)
    local len = sqrtApprox(((tonumber(((tonumber((v.x * v.x)) or 0) + (tonumber((v.y * v.y)) or 0))) or 0) + (tonumber((v.z * v.z)) or 0)))
    return {x = (v.x / len), y = (v.y / len), z = (v.z / len)}
  end
  function dot(a, b)
    local d = ((tonumber(((tonumber((a.x * b.x)) or 0) + (tonumber((a.y * b.y)) or 0))) or 0) + (tonumber((a.z * b.z)) or 0))
    if (d < 0) then
      return (-d)
    end
    return 0
  end
  function drawSphere(r, k, ambient, light, shades)
    local i = (-r)
    while (i <= r) do
      local x = (i + 0.5)
      local line = ""
      local j = (-(2 * r))
      while (j <= (2 * r)) do
        local y = ((j / 2) + 0.5)
        if (((x * x) + (y * y)) <= (r * r)) then
          local zsq = (((r * r) - (x * x)) - (y * y))
          local vec = normalize((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)({x = x, y = y, z = sqrtApprox(zsq)}))
          local b = (powf(dot(light, vec), k) + ambient)
          local intensity = math.floor(((1 - b) * ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(shades) - 1)))
              if (intensity < 0) then
                intensity = 0
              end
              if (intensity >= (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(shades)) then
                    intensity = ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(shades) - 1)
                      end
                      line = (line .. _substring(shades, intensity, (intensity + 1)))
                    else
                      line = (line .. " ")
                    end
                    j = (j + 1)
                  end
                  print(line)
                  i = (i + 1)
                end
              end
              function main()
                local shades = ".:!*oe&#%@"
                local light = normalize((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)({x = 30, y = 30, z = (-50)}))
                drawSphere(20, 4, 0.1, light, shades)
                drawSphere(10, 2, 0.4, light, shades)
              end
              main()
              local _bench_end = _now()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
