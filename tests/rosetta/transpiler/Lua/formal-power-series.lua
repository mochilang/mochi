-- Generated by Mochi v0.10.50 on 2025-07-30 21:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function newFps(fn)
    return {coeffs = {}, compute = fn}
  end
  function extract(f, n)
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(f.coeffs) <= n) do
          local idx = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(f.coeffs)
              local v = f.compute(idx)
              f.coeffs = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(f.coeffs, v)
          end
          return f.coeffs[n + 1]
        end
        function one()
          return newFps(function(i)
          if (i == 0) then
            return 1
          end
          return 0
        end)
      end
      function add(a, b)
        return newFps(function(n)
        return ((tonumber(extract(a, n)) or 0) + (tonumber(extract(b, n)) or 0))
      end)
    end
    function sub(a, b)
      return newFps(function(n)
      return (extract(a, n) - extract(b, n))
    end)
  end
  function mul(a, b)
    return newFps(function(n)
    local s = 0
    local k = 0
    while (k <= n) do
      s = (s + (extract(a, k) * extract(b, (n - k))))
      k = (k + 1)
    end
    return s
  end)
end
function div(a, b)
  local q = newFps(function(n)
  return 0
end)
q.compute = function(n)
local b0 = extract(b, 0)
if (b0 == 0) then
  return (0 / 0)
end
local s = extract(a, n)
local k = 1
while (k <= n) do
  s = (s - (extract(b, k) * extract(q, (n - k))))
  k = (k + 1)
end
return (s / b0)
end
return q
end
function differentiate(a)
  return newFps(function(n)
  return ((n + 1) * extract(a, (n + 1)))
end)
end
function integrate(a)
  return newFps(function(n)
  if (n == 0) then
    return 0
  end
  return (extract(a, (n - 1)) // n)
end)
end
function sinCos()
  local sin = newFps(function(n)
  return 0
end)
local cos = sub((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(one()), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(integrate((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(sin))))
sin.compute = function(n)
if (n == 0) then
  return 0
end
return (extract(cos, (n - 1)) // n)
end
return {sin = sin, cos = cos}
end
function floorf(x)
  local y = math.floor(x)
  return y
end
function fmtF5(x)
  local y = (floorf(((x * 100000) + 0.5)) / 100000)
  local s = tostring(y)
  local dot = _indexOf(s, ".")
  if (dot == (0 - 1)) then
    s = (s .. ".00000")
  else
    local decs = (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - dot) - 1)
        if (decs > 5) then
          s = _substring(s, 0, (dot + 6))
        else
          while (decs < 5) do
            s = (s .. "0")
            decs = (decs + 1)
          end
        end
      end
      return s
    end
    function padFloat5(x, width)
      local s = fmtF5(x)
      while ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s) < width) do
            s = (" " .. s)
          end
          return s
        end
        function partialSeries(f)
          local out = ""
          local i = 0
          while (i < 6) do
            out = (((out .. " ") .. padFloat5(extract(f, i), 8)) .. " ")
            i = (i + 1)
          end
          return out
        end
        function main()
          local p = sinCos()
          print(("sin:" .. partialSeries(p.sin)))
          print(("cos:" .. partialSeries(p.cos)))
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
