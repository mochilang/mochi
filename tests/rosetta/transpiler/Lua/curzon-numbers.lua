-- Generated by Mochi v0.10.42 on 2025-07-28 11:14 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function padLeft(n, width)
    local s = tostring(n)
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) < width) do
          s = (" " .. s)
        end
        return s
      end
      function modPow(base, exp, mod)
        local result = (1 % mod)
        local b = (base % mod)
        local e = exp
        while (e > 0) do
          if ((e % 2) == 1) then
            result = ((result * b) % mod)
          end
          b = ((b * b) % mod)
          e = (e // 2)
        end
        return result
      end
      function main()
        local k = 2
        while (k <= 10) do
          print((("The first 50 Curzon numbers using a base of " .. tostring(k)) .. " :"))
          local count = 0
          local n = 1
          local curzon50 = {}
          while true do
            local d = ((k * n) + 1)
            if (((modPow(k, n, d) + 1) % d) == 0) then
              if (count < 50) then
                curzon50 = (function(lst, item)
                local res = {table.unpack(lst)}
                table.insert(res, item)
                return res
              end)(curzon50, n)
            end
            count = (count + 1)
            if (count == 50) then
              local idx = 0
              while (idx < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(curzon50)) do
                    local line = ""
                    local j = 0
                    while (j < 10) do
                      line = ((line .. padLeft(curzon50[idx + 1], 4)) .. " ")
                      idx = (idx + 1)
                      j = (j + 1)
                    end
                    print(_substring(line, 0, ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(line) - 1)))
                      end
                    end
                    if (count == 1000) then
                      print(("\nOne thousandth: " .. tostring(n)))
                      break
                    end
                  end
                  n = (n + 1)
                end
                print("")
                k = (k + 2)
              end
            end
            main()
            local _bench_end = _now()
            collectgarbage()
            local _bench_end_mem = collectgarbage('count') * 1024
            local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
          end;
