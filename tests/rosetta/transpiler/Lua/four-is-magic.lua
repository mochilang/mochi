-- Generated by Mochi v0.10.47 on 2025-07-28 11:52 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function capitalize(s)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) == 0) then
          return s
        end
        return (string.upper(_substring(s, 0, 1)) .. _substring(s, 1, (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)))
          end
          function say(n)
            local t = ""
            if (n < 0) then
              t = "negative "
              n = (-n)
            end
            if (n < 20) then
              return (t .. small[n + 1])
            else
              if (n < 100) then
                t = tens[(n // 10) + 1]
                local s = (n % 10)
                if (s > 0) then
                  t = ((t .. "-") .. small[s + 1])
                end
                return t
              else
                if (n < 1000) then
                  t = (small[(n // 100) + 1] .. " hundred")
                  local s = (n % 100)
                  if (s > 0) then
                    t = ((t .. " ") .. say(s))
                  end
                  return t
                end
              end
            end
            local sx = ""
            local i = 0
            local nn = n
            while (nn > 0) do
              local p = (nn % 1000)
              nn = (nn // 1000)
              if (p > 0) then
                local ix = (say(p) .. illions[i + 1])
                if (sx ~= "") then
                  ix = ((ix .. " ") .. sx)
                end
                sx = ix
              end
              i = (i + 1)
            end
            return (t .. sx)
          end
          function fourIsMagic(n)
            local s = say(n)
            s = capitalize(s)
            local t = s
            while (n ~= 4) do
              n = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(s)
                  s = say(n)
                  t = ((((t .. " is ") .. s) .. ", ") .. s)
                end
                t = (t .. " is magic.")
                return t
              end
              function main()
                local nums = {0, 4, 6, 11, 13, 75, 100, 337, (-164), 9223372036854775807}
                for _, n in ipairs(nums) do
                  print(fourIsMagic(n))
                end
              end
              small = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"}
              tens = {"", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"}
              illions = {"", " thousand", " million", " billion", " trillion", " quadrillion", " quintillion"}
              main()
              local _bench_end = _now()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
