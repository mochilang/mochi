-- Generated by Mochi v0.10.50 on 2025-07-30 21:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pad(n)
    local s = tostring(n)
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) < 4) do
          s = (" " .. s)
        end
        return s
      end
      function hail(seq, cnt)
        local out = pad(seq)
        if (seq ~= 1) then
          cnt = (cnt + 1)
          if ((seq % 2) ~= 0) then
            seq = ((3 * seq) + 1)
          else
            seq = (seq // 2)
          end
        end
        return {seq = seq, cnt = cnt, out = out}
      end
      function main()
        local seqs = {}
        local cnts = {}
        for i = 0, jobs - 1 do
          seqs = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(seqs, (i + 1))
        cnts = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(cnts, 0)
    end
    while true do
      local line = ""
      local i = 0
      while (i < jobs) do
        local res = hail(seqs[i + 1], cnts[i + 1])
        seqs[i + 1] = res.seq
        cnts[i + 1] = res.cnt
        line = (line .. res.out)
        i = (i + 1)
      end
      print(line)
      local done = true
      local j = 0
      while (j < jobs) do
        if (seqs[j + 1] ~= 1) then
          done = false
        end
        j = (j + 1)
      end
      if done then
        break
      end
    end
    print("")
    print("COUNTS:")
    local counts = ""
    local k = 0
    while (k < jobs) do
      counts = (counts .. pad(cnts[k + 1]))
      k = (k + 1)
    end
    print(counts)
    print("")
  end
  jobs = 12
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
