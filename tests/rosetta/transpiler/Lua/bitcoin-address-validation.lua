-- Generated by Mochi v0.10.42 on 2025-07-28 00:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function indexOf(s, ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if (string.sub(s, (i + 1), (i + 1)) == ch) then
            return i
          end
          i = (i + 1)
        end
        return (-1)
      end
      function set58(addr)
        local tmpl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
        local a = {}
        local i = 0
        while (i < 25) do
          a = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(a, 0)
        i = (i + 1)
      end
      local idx = 0
      while (idx < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(addr)) do
            local ch = string.sub(addr, (idx + 1), (idx + 1))
            local c = _indexOf(tmpl, ch)
            if (c < 0) then
              return {}
            end
            local j = 24
            while (j >= 0) do
              c = (c + (58 * a[j + 1]))
              a[j + 1] = (c % 256)
              c = math.floor((c // 256))
              j = (j - 1)
            end
            if (c > 0) then
              return {}
            end
            idx = (idx + 1)
          end
          return a
        end
        function doubleSHA256(bs)
          local first = _sha256(bs)
          return _sha256(first)
        end
        function computeChecksum(a)
          local hash = doubleSHA256((function(lst,s,e)
          local r={}
          for i=s+1,e do
            r[#r+1]=lst[i]
          end
          return r
        end)(a, 0, 21))
        return (function(lst,s,e)
        local r={}
        for i=s+1,e do
          r[#r+1]=lst[i]
        end
        return r
      end)(hash, 0, 4)
    end
    function validA58(addr)
      local a = set58(addr)
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(a) ~= 25) then
            return false
          end
          if (a[0 + 1] ~= 0) then
            return false
          end
          local sum = computeChecksum(a)
          local i = 0
          while (i < 4) do
            if (a[(21 + i) + 1] ~= sum[i + 1]) then
              return false
            end
            i = (i + 1)
          end
          return true
        end
        print(tostring(validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")))
        print(tostring(validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")))
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
