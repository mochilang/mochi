-- Generated by Mochi v0.10.42 on 2025-07-27 16:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end
function indexOf(s, ch)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(s)) do
      if (string.sub(s, i + 1, (i + 1)) == ch) then
        return i
      end
      i = (i + 1)
    end
    return (-1)
  end;
  
  function floorf(x)
    local y = math.floor(x)
    return y
  end;
  
  function powf(base, exp)
    local r = 1
    local i = 0
    while (i < exp) do
      r = (r * base)
      i = (i + 1)
    end
    return r
  end;
  
  function fmtF(x, width, prec)
    local factor = powf(10, prec)
    local y = (floorf(((x * factor) + 0.5)) / factor)
    local s = tostring(y)
    local dot = _indexOf(s, ".")
    if (dot == (0 - 1)) then
      s = (s .. ".")
      local j = 0
      while (j < prec) do
        s = (s .. "0")
        j = (j + 1)
      end
    else
      local decs = (((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - dot) - 1)
        while (decs < prec) do
          s = (s .. "0")
          decs = (decs + 1)
        end
      end
      while ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) < width) do
          s = (" " .. s)
        end
        return s
      end;
      
      function expf(x)
        if (x < 0) then
          return (1 / expf((-x)))
        end
        local term = 1
        local sum = 1
        local i = 1
        while (i < 20) do
          term = ((term * x) / i)
          sum = (sum + term)
          i = (i + 1)
        end
        return sum
      end;
      
      function eulerStep(f, x, y, h)
        return (y + (h * f(x, y)))
      end;
      
      function newCoolingRate(k)
        return function(dt)
        return ((-k) * dt)
      end
    end;
    
    function newTempFunc(k, ambient, initial)
      return function(t)
      return (ambient + ((initial - ambient) * expf(((-k) * t))))
    end
  end;
  
  function newCoolingRateDy(k, ambient)
    local cr = newCoolingRate(k)
    return function(_x, obj)
    return cr((obj - ambient))
  end
end;

function main()
  local k = 0.07
  local tempRoom = 20
  local tempObject = 100
  local fcr = newCoolingRateDy(k, tempRoom)
  local analytic = newTempFunc(k, tempRoom, tempObject)
  for _, step in ipairs({2, 5, 10}) do
    print(("Step size = " .. fmtF(step, 0, 1)))
    print(" Time Euler's Analytic")
    local temp = tempObject
    local time = 0
    while (time <= 100) do
      local line = ((((fmtF(time, 5, 1) .. " ") .. fmtF(temp, 7, 3)) .. " ") .. fmtF(analytic(time), 7, 3))
      print(line)
      temp = eulerStep(fcr, time, temp, step)
      time = ((tonumber(time) or 0) + (tonumber(step) or 0))
    end
    print("")
  end
end;

main();
