-- Generated by Mochi v0.10.42 on 2025-07-27 23:29 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function removeKey(m, k)
    local out = {}
    for key in pairs(m) do
      if (key ~= k) then
        out[key] = m[key]
      end
    end
    return out
  end
  function main()
    local x = _nil
    x = {}
    x.foo = 3
    local y1 = x.bar
    local ok = (x["bar"] ~= nil)
    print(y1)
    print(((ok) and (1) or (0)))
    x = removeKey(x, "foo")
    x = {__name = "GenType1", __order = {"foo", "bar", "baz"}, foo = 2, bar = 42, baz = (-1)}
    print((string.gsub(string.format("%d %d %d", x.foo, x.bar, x.baz), "%s+$", "")))
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
