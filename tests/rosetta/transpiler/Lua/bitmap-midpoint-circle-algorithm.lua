-- Generated by Mochi v0.10.40 on 2025-07-25 17:59 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function initGrid(size)
    local g = {}
    local y = 0
    while (y < size) do
      local row = {}
      local x = 0
      while (x < size) do
        row = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(row, " ")
      x = (x + 1)
    end
    g = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(g, row)
  y = (y + 1)
end
return g
end
function set(g, x, y)
  if ((((x >= 0) and (x < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(g[0 + 1]))) and (y >= 0)) and (y < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(g))) then
        g[y + 1][x + 1] = "#"
      end
    end
    function circle(r)
      local size = ((r * 2) + 1)
      local g = initGrid(size)
      local x = r
      local y = 0
      local err = (1 - r)
      while (y <= x) do
        set(g, (r + x), (r + y))
        set(g, (r + y), (r + x))
        set(g, (r - x), (r + y))
        set(g, (r - y), (r + x))
        set(g, (r - x), (r - y))
        set(g, (r - y), (r - x))
        set(g, (r + x), (r - y))
        set(g, (r + y), (r - x))
        y = (y + 1)
        if (err < 0) then
          err = ((err + (2 * y)) + 1)
        else
          x = (x - 1)
          err = ((err + (2 * (y - x))) + 1)
        end
      end
      return g
    end
    function trimRight(row)
      local _end = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(row)
        while ((_end > 0) and (row[(_end - 1) + 1] == " ")) do
          _end = (_end - 1)
        end
        local s = ""
        local i = 0
        while (i < _end) do
          s = (s .. row[i + 1])
          i = (i + 1)
        end
        return s
      end
      g = circle(10)
      for _, row in ipairs(g) do
        print(trimRight(row))
      end
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
