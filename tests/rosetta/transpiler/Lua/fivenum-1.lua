-- Generated by Mochi v0.10.50 on 2025-07-30 21:05 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function sortFloat(xs)
    local arr = xs
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(arr)
        local i = 0
        while (i < n) do
          local j = 0
          while (j < (n - 1)) do
            if (arr[j + 1] > arr[(j + 1) + 1]) then
              local t = arr[j + 1]
              arr[j + 1] = arr[(j + 1) + 1]
              arr[(j + 1) + 1] = t
            end
            j = (j + 1)
          end
          i = (i + 1)
        end
        return arr
      end
      function median(s)
        local n = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)
            if ((n % 2) == 1) then
              return s[(n // 2) + 1]
            end
            return ((s[((n // 2) - 1) + 1] + s[(n // 2) + 1]) / 2)
          end
          function fivenum(xs)
            local s = sortFloat(xs)
            local n = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s)
                local q1 = s[((n - 1) // 4) + 1]
                local med = median(s)
                local q3 = s[((3 * (n - 1)) // 4) + 1]
                return {s[0 + 1], q1, med, q3, s[(n - 1) + 1]}
              end
              x1 = {36, 40, 7, 39, 41, 15}
              x2 = {15, 6, 42, 41, 7, 36, 49, 40, 39, 47, 43}
              x3 = {0.14082834, 0.0974879, 1.73131507, 0.87636009, (-1.95059594), 0.73438555, (-0.03035726), 1.4667597, (-0.74621349), (-0.72588772), 0.6390516, 0.61501527, (-0.9898378), (-1.00447874), (-0.62759469), 0.66206163, 1.04312009, (-0.10305385), 0.75775634, 0.32566578}
              print(
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(fivenum(x1)))
              print(
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(fivenum(x2)))
              print(
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(fivenum(x3)))
              local _bench_end = _now()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
