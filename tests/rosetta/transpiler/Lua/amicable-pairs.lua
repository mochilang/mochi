-- Generated by Mochi v0.10.55 on 2025-08-02 17:26 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pfacSum(i)
    local sum = 0
    local p = 1
    while (p <= (i // 2)) do
      if ((i % p) == 0) then
        sum = (sum + p)
      end
      p = (p + 1)
    end
    return sum
  end
  function pad(n, width)
    local s = tostring(n)
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) < width) do
          s = (" " .. s)
        end
        return s
      end
      function main()
        local sums = {}
        local i = 0
        while (i < 20000) do
          sums = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(sums, 0)
        i = (i + 1)
      end
      i = 1
      while (i < 20000) do
        sums[i + 1] = pfacSum(i)
        i = (i + 1)
      end
      print("The amicable pairs below 20,000 are:")
      local n = 2
      while (n < 19999) do
        local m = sums[n + 1]
        if (((m > n) and (m < 20000)) and (n == sums[m + 1])) then
          print(((("  " .. pad(n, 5)) .. " and ") .. pad(m, 5)))
        end
        n = (n + 1)
      end
    end
    main()
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
