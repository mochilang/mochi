-- Generated by Mochi v0.10.42 on 2025-07-27 21:41 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function showState(w, label)
    print(((((((((((((((label .. ": pos=(") .. tostring(w.x)) .. ",") .. tostring(w.y)) .. ") size=(") .. tostring(w.w)) .. "x") .. tostring(w.h)) .. ") max=") .. tostring(w.maximized)) .. " icon=") .. tostring(w.iconified)) .. " visible=") .. tostring(w.visible)))
  end
  function maximize(w)
    w.maximized = true
    w.w = 800
    w.h = 600
    return w
  end
  function unmaximize(w)
    w.maximized = false
    w.w = 640
    w.h = 480
    return w
  end
  function iconify(w)
    w.iconified = true
    w.visible = false
    return w
  end
  function deiconify(w)
    w.iconified = false
    w.visible = true
    return w
  end
  function hide(w)
    w.visible = false
    return w
  end
  function showWindow(w)
    w.visible = true
    return w
  end
  function move(w)
    if w.shifted then
      w.x = (w.x - 10)
      w.y = (w.y - 10)
    else
      w.x = (w.x + 10)
      w.y = (w.y + 10)
    end
    w.shifted = (not w.shifted)
    return w
  end
  function main()
    local win = {x = 100, y = 100, w = 640, h = 480, maximized = false, iconified = false, visible = true, shifted = false}
    showState(win, "Start")
    win = maximize((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(win))
    showState(win, "Maximize")
    win = unmaximize((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(win))
    showState(win, "Unmaximize")
    win = iconify((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(win))
    showState(win, "Iconify")
    win = deiconify((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(win))
    showState(win, "Deiconify")
    win = hide((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(win))
    showState(win, "Hide")
    win = showWindow((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(win))
    showState(win, "Show")
    win = move((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(win))
    showState(win, "Move")
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
