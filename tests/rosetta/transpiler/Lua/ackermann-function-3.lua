-- Generated by Mochi v0.10.40 on 2025-07-25 14:32 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end

local function _gcd(a, b)
a = math.abs(a)
b = math.abs(b)
while b ~= 0 do
  a, b = b, a % b
end
return a
end
local function _bigrat(n, d)
if type(n) == 'table' and n.num ~= nil and n.den ~= nil and d == nil then
  return n
end
if d == nil then d = 1 end
if d < 0 then n, d = -n, -d end
local g = _gcd(n, d)
return {num = n // g, den = d // g}
end
local function _add(a, b)
return _bigrat(a.num * b.den + b.num * a.den, a.den * b.den)
end
local function _sub(a, b)
return _bigrat(a.num * b.den - b.num * a.den, a.den * b.den)
end
local function _mul(a, b)
return _bigrat(a.num * b.num, a.den * b.den)
end
local function _div(a, b)
return _bigrat(a.num * b.den, a.den * b.num)
end
function num(x)
  if type(x) == 'table' and x.num ~= nil then return x.num end
  return x
end
function denom(x)
  if type(x) == 'table' and x.den ~= nil then return x.den end
  return 1
end

local function _sha256(bs)
local tmp = os.tmpname()
local f = assert(io.open(tmp, 'wb'))
for i = 1, #bs do
  f:write(string.char(bs[i]))
end
f:close()
local p = io.popen('sha256sum ' .. tmp)
local out = p:read('*l') or ''
p:close()
os.remove(tmp)
local hex = string.sub(out, 1, 64)
local res = {}
for i = 1, #hex, 2 do
  res[#res+1] = tonumber(string.sub(hex, i, i+1), 16)
end
return res
end

local function _indexOf(s, ch)
for i = 1, #s do
  if string.sub(s, i, i) == ch then
    return i - 1
  end
end
return -1
end

local function _parseIntStr(str)
local n = tonumber(str, 10)
if n == nil then return 0 end
return math.floor(n)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pow_big(base, exp)
    local result = 1
    local b = base
    local e = exp
    while (e > 0) do
      if ((e % 2) == 1) then
        result = (result * b)
      end
      b = (b * b)
      e = math.floor((e // 2))
    end
    return result
  end
  function bit_len(x)
    local n = x
    local c = 0
    while (n > 0) do
      n = (n // 2)
      c = (c + 1)
    end
    return c
  end
  err = ""
  function ackermann2(m, n)
    if (err ~= "") then
      return 0
    end
    if (m <= 3) then
      local mi = math.floor(m)
      if (mi == 0) then
        return (n + 1)
      end
      if (mi == 1) then
        return (n + 2)
      end
      if (mi == 2) then
        return ((2 * n) + 3)
      end
      if (mi == 3) then
        local nb = bit_len(n)
        if (nb > 64) then
          err = (("A(m,n) had n of " .. tostring(nb)) .. " bits; too large")
          return 0
        end
        local r = pow_big(2, math.floor(n))
        return ((8 * r) - 3)
      end
    end
    if (bit_len(n) == 0) then
      return ackermann2((m - 1), 1)
    end
    return ackermann2((m - 1), ackermann2(m, (n - 1)))
  end
  function show(m, n)
    err = ""
    local res = ackermann2(m, n)
    if (err ~= "") then
      print(((((("A(" .. tostring(m)) .. ", ") .. tostring(n)) .. ") = Error: ") .. err))
      return
    end
    if (bit_len(res) <= 256) then
      print(((((("A(" .. tostring(m)) .. ", ") .. tostring(n)) .. ") = ") .. tostring(res)))
    else
      local s = tostring(res)
      local pre = string.sub(s, 0 + 1, 20)
      local suf = string.sub(s, ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - 20) + 1, (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s))
          print(((((((((("A(" .. tostring(m)) .. ", ") .. tostring(n)) .. ") = ") .. tostring((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' or type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s))) .. " digits starting/ending with: ") .. pre) .. "...") .. suf))
          end
        end
        function main()
          show(0, 0)
          show(1, 2)
          show(2, 4)
          show(3, 100)
          show(3, 1000000)
          show(4, 1)
          show(4, 2)
          show(4, 3)
        end
        main()
        local _bench_end = _now()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
