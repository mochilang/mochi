-- Generated by Mochi v0.10.42 on 2025-07-27 22:50 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function pow_big(base, exp)
    local result = 1
    local b = base
    local e = exp
    while (e > 0) do
      if ((e % 2) == 1) then
        result = (result * b)
      end
      b = (b * b)
      e = math.floor((e // 2))
    end
    return result
  end
  function bit_len(x)
    local n = x
    local c = 0
    while (n > 0) do
      n = (n // 2)
      c = (c + 1)
    end
    return c
  end
  function ackermann2(m, n)
    if (err ~= "") then
      return 0
    end
    if (m <= 3) then
      local mi = math.floor(m)
      if (mi == 0) then
        return (n + 1)
      end
      if (mi == 1) then
        return (n + 2)
      end
      if (mi == 2) then
        return ((2 * n) + 3)
      end
      if (mi == 3) then
        local nb = bit_len(n)
        if (nb > 64) then
          err = (("A(m,n) had n of " .. tostring(nb)) .. " bits; too large")
          return 0
        end
        local r = pow_big(2, math.floor(n))
        return ((8 * r) - 3)
      end
    end
    if (bit_len(n) == 0) then
      return ackermann2((m - 1), 1)
    end
    return ackermann2((m - 1), ackermann2(m, (n - 1)))
  end
  function show(m, n)
    err = ""
    local res = ackermann2(m, n)
    if (err ~= "") then
      print(((((("A(" .. tostring(m)) .. ", ") .. tostring(n)) .. ") = Error: ") .. err))
      return
    end
    if (bit_len(res) <= 256) then
      print(((((("A(" .. tostring(m)) .. ", ") .. tostring(n)) .. ") = ") .. tostring(res)))
    else
      local s = tostring(res)
      local pre = _substring(s, 0, 20)
      local suf = _substring(s, ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s) - 20), (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s))
              print(((((((((("A(" .. tostring(m)) .. ", ") .. tostring(n)) .. ") = ") .. tostring((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(s))) .. " digits starting/ending with: ") .. pre) .. "...") .. suf))
                end
              end
              function main()
                show(0, 0)
                show(1, 2)
                show(2, 4)
                show(3, 100)
                show(3, 1000000)
                show(4, 1)
                show(4, 2)
                show(4, 3)
              end
              err = ""
              main()
              local _bench_end = _now()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
