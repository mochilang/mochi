-- Generated by Mochi v0.10.42 on 2025-07-27 17:23 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local function _padStart(s, len, ch)
if ch == nil or ch == '' then ch = ' ' end
if #s >= len then return s end
local fill = string.sub(ch, 1, 1)
return string.rep(fill, len - #s) .. s
end
function digitSumMod(n, base)
  local sum = 0
  local j = n
  while (j > 0) do
    sum = (sum + (j % base))
    j = (j // base)
  end
  return (sum % base)
end;

function fairshareList(n, base)
  local res = {}
  local i = 0
  while (i < n) do
    res = (function(lst, item)
    local res = {table.unpack(lst)}
    table.insert(res, item)
    return res
  end)(res, digitSumMod(i, base))
  i = (i + 1)
end
return res
end;

function sortInts(xs)
  local arr = xs
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(arr)) do
      local j = 0
      while (j < ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(arr) - 1)) do
          if (arr[j + 1] > arr[(j + 1) + 1]) then
            local t = arr[j + 1]
            arr[j + 1] = arr[(j + 1) + 1]
            arr[(j + 1) + 1] = t
          end
          j = (j + 1)
        end
        i = (i + 1)
      end
      return arr
    end;
    
    function turns(n, base)
      local counts = {}
      local i = 0
      while (i < base) do
        counts = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(counts, 0)
      i = (i + 1)
    end
    i = 0
    while (i < n) do
      local v = digitSumMod(i, base)
      counts[v + 1] = (counts[v + 1] + 1)
      i = (i + 1)
    end
    local freq = {}
    local fkeys = {}
    i = 0
    while (i < base) do
      local c = counts[i + 1]
      if (c > 0) then
        if (freq[c] ~= nil) then
          freq[c] = (freq[c] + 1)
        else
          freq[c] = 1
          fkeys = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(fkeys, c)
      end
    end
    i = (i + 1)
  end
  local total = 0
  i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' or type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(fkeys)) do
      total = (total + freq[fkeys[i + 1]])
      i = (i + 1)
    end
    if (total ~= base) then
      return (("only " .. tostring(total)) .. " have a turn")
    end
    fkeys = sortInts(fkeys)
    local res = ""
    i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(fkeys)) do
        if (i > 0) then
          res = (res .. " or ")
        end
        res = (res .. tostring(fkeys[i + 1]))
        i = (i + 1)
      end
      return res
    end;
    
    function main()
      local bases1 = {2, 3, 5, 11}
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(bases1)) do
          local b = bases1[i + 1]
          print(((_padStart(tostring(tostring(b)), 2, " ") .. " : ") ..
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(fairshareList(25, b))))
          i = (i + 1)
        end
        print("")
        print("How many times does each get a turn in 50000 iterations?")
        local bases2 = {191, 1377, 49999, 50000, 50001}
        i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' or type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(bases2)) do
            local b = bases2[i + 1]
            local t = turns(50000, b)
            print(((("  With " .. tostring(b)) .. " people: ") .. t))
            i = (i + 1)
          end
        end;
        
        main();
