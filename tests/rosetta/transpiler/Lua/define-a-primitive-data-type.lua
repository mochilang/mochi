-- Generated by Mochi v0.10.41 on 2025-07-26 19:27 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function Add(self, t2)
    local value = self.value
    return NewTinyInt(((tonumber(value) or 0) + (tonumber(t2.value) or 0)))
  end
  function Sub(self, t2)
    local value = self.value
    return NewTinyInt((value - t2.value))
  end
  function Mul(self, t2)
    local value = self.value
    return NewTinyInt((value * t2.value))
  end
  function Div(self, t2)
    local value = self.value
    return NewTinyInt((value // t2.value))
  end
  function Rem(self, t2)
    local value = self.value
    return NewTinyInt((value % t2.value))
  end
  function Inc(self)
    local value = self.value
    return Add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(self), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(NewTinyInt(1)))
  end
  function Dec(self)
    local value = self.value
    return Sub((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(self), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(NewTinyInt(1)))
  end
  function NewTinyInt(i)
    if (i < 1) then
      i = 1
    else
      if (i > 10) then
        i = 10
      end
    end
    return {value = i}
  end
  function main()
    local t1 = NewTinyInt(6)
    local t2 = NewTinyInt(3)
    print(("t1      = " .. tostring(t1.value)))
    print(("t2      = " .. tostring(t2.value)))
    print(("t1 + t2 = " .. tostring(Add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t1), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t2)).value)))
    print(("t1 - t2 = " .. tostring(Sub((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t1), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t2)).value)))
    print(("t1 * t2 = " .. tostring(Mul((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t1), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t2)).value)))
    print(("t1 / t2 = " .. tostring(Div((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t1), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t2)).value)))
    print(("t1 % t2 = " .. tostring(Rem((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t1), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t2)).value)))
    print(("t1 + 1  = " .. tostring(Inc((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t1)).value)))
    print(("t1 - 1  = " .. tostring(Dec((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t1)).value)))
  end
  main()
  local _bench_end = _now()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
