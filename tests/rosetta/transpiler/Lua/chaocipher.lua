-- Generated by Mochi v0.10.40 on 2025-07-25 20:06 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = _now()
  function indexOf(s, ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' or type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        if (string.sub(s, (i + 1), (i + 1)) == ch) then
          return i
        end
        i = (i + 1)
      end
      return (-1)
    end
    function rotate(s, n)
      return (string.sub(s, (n + 1), #s) .. string.sub(s, 1, n))
    end
    function scrambleLeft(s)
      return (((string.sub(s, (0 + 1), 1) .. string.sub(s, (2 + 1), 14)) .. string.sub(s, (1 + 1), 2)) .. string.sub(s, (14 + 1), #s))
    end
    function scrambleRight(s)
      return ((((string.sub(s, (1 + 1), 3) .. string.sub(s, (4 + 1), 15)) .. string.sub(s, (3 + 1), 4)) .. string.sub(s, (15 + 1), #s)) .. string.sub(s, (0 + 1), 1))
    end
    function chao(text, encode)
      local left = "HXUCZVAMDSLKPEFJRIGTWOBNYQ"
      local right = "PTLNBQDEOYSFAVZKGJRIHWXUMC"
      local out = ""
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' or type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(text)) do
          local ch = string.sub(text, (i + 1), (i + 1))
          local idx = 0
          if encode then
            idx = _indexOf(right, ch)
            out = (out .. string.sub(left, (idx + 1), (idx + 1)))
          else
            idx = _indexOf(left, ch)
            out = (out .. string.sub(right, (idx + 1), (idx + 1)))
          end
          left = rotate(left, idx)
          right = rotate(right, idx)
          left = scrambleLeft(left)
          right = scrambleRight(right)
          i = (i + 1)
        end
        return out
      end
      function main()
        local plain = "WELLDONEISBETTERTHANWELLSAID"
        local cipher = chao(plain, true)
        print(plain)
        print(cipher)
        print(chao(cipher, false))
      end
      main()
      local _bench_end = _now()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) / 1000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
