:- initialization(main).
:- style_check(-singleton).

newBoard(R) :-
    B = [],
    Y is 0,
    Row = [],
    X is 0,
    append([], [0], Row1),
    X1 is 1,
    append(Row1, [0], Row2),
    X2 is 2,
    append(Row2, [0], Row3),
    X3 is 3,
    append(Row3, [0], Row4),
    X4 is 4,
    append(Row4, [0], Row5),
    X5 is 5,
    append([], [Row5], B1),
    Y1 is 1,
    Row6 = [],
    X6 is 0,
    append([], [0], Row7),
    X7 is 1,
    append(Row7, [0], Row8),
    X8 is 2,
    append(Row8, [0], Row9),
    X9 is 3,
    append(Row9, [0], Row10),
    X10 is 4,
    append(Row10, [0], Row11),
    X11 is 5,
    append(B1, [Row11], B2),
    Y2 is 2,
    Row12 = [],
    X12 is 0,
    append([], [0], Row13),
    X13 is 1,
    append(Row13, [0], Row14),
    X14 is 2,
    append(Row14, [0], Row15),
    X15 is 3,
    append(Row15, [0], Row16),
    X16 is 4,
    append(Row16, [0], Row17),
    X17 is 5,
    append(B2, [Row17], B3),
    Y3 is 3,
    Row18 = [],
    X18 is 0,
    append([], [0], Row19),
    X19 is 1,
    append(Row19, [0], Row20),
    X20 is 2,
    append(Row20, [0], Row21),
    X21 is 3,
    append(Row21, [0], Row22),
    X22 is 4,
    append(Row22, [0], Row23),
    X23 is 5,
    append(B3, [Row23], B4),
    Y4 is 4,
    Row24 = [],
    X24 is 0,
    append([], [0], Row25),
    X25 is 1,
    append(Row25, [0], Row26),
    X26 is 2,
    append(Row26, [0], Row27),
    X27 is 3,
    append(Row27, [0], Row28),
    X28 is 4,
    append(Row28, [0], Row29),
    X29 is 5,
    append(B4, [Row29], B5),
    Y5 is 5,
    Return1 = map{tag: "Board", cells: B5},
    R = Return1.

spawnTile(B, R) :-
    get_dict(cells, B, Grid),
    Empty = [],
    Y is 0,
    X is 0,
    (nth0(0, nth0(0, Grid, R), R) =:= 0 ->
    append([], [[0, 0]], Empty1) ; true),
    X1 is 1,
    (nth0(1, nth0(0, Grid, R), R) =:= 0 ->
    append(Empty1, [[1, 0]], Empty2) ; true),
    X2 is 2,
    (nth0(2, nth0(0, Grid, R), R) =:= 0 ->
    append(Empty2, [[2, 0]], Empty3) ; true),
    X3 is 3,
    (nth0(3, nth0(0, Grid, R), R) =:= 0 ->
    append(Empty3, [[3, 0]], Empty4) ; true),
    X4 is 4,
    (nth0(4, nth0(0, Grid, R), R) =:= 0 ->
    append(Empty4, [[4, 0]], Empty5) ; true),
    X5 is 5,
    Y1 is 1,
    X6 is 0,
    (nth0(0, nth0(1, Grid, R), R) =:= 0 ->
    append(Empty5, [[0, 1]], Empty6) ; true),
    X7 is 1,
    (nth0(1, nth0(1, Grid, R), R) =:= 0 ->
    append(Empty6, [[1, 1]], Empty7) ; true),
    X8 is 2,
    (nth0(2, nth0(1, Grid, R), R) =:= 0 ->
    append(Empty7, [[2, 1]], Empty8) ; true),
    X9 is 3,
    (nth0(3, nth0(1, Grid, R), R) =:= 0 ->
    append(Empty8, [[3, 1]], Empty9) ; true),
    X10 is 4,
    (nth0(4, nth0(1, Grid, R), R) =:= 0 ->
    append(Empty9, [[4, 1]], Empty10) ; true),
    X11 is 5,
    Y2 is 2,
    X12 is 0,
    (nth0(0, nth0(2, Grid, R), R) =:= 0 ->
    append(Empty10, [[0, 2]], Empty11) ; true),
    X13 is 1,
    (nth0(1, nth0(2, Grid, R), R) =:= 0 ->
    append(Empty11, [[1, 2]], Empty12) ; true),
    X14 is 2,
    (nth0(2, nth0(2, Grid, R), R) =:= 0 ->
    append(Empty12, [[2, 2]], Empty13) ; true),
    X15 is 3,
    (nth0(3, nth0(2, Grid, R), R) =:= 0 ->
    append(Empty13, [[3, 2]], Empty14) ; true),
    X16 is 4,
    (nth0(4, nth0(2, Grid, R), R) =:= 0 ->
    append(Empty14, [[4, 2]], Empty15) ; true),
    X17 is 5,
    Y3 is 3,
    X18 is 0,
    (nth0(0, nth0(3, Grid, R), R) =:= 0 ->
    append(Empty15, [[0, 3]], Empty16) ; true),
    X19 is 1,
    (nth0(1, nth0(3, Grid, R), R) =:= 0 ->
    append(Empty16, [[1, 3]], Empty17) ; true),
    X20 is 2,
    (nth0(2, nth0(3, Grid, R), R) =:= 0 ->
    append(Empty17, [[2, 3]], Empty18) ; true),
    X21 is 3,
    (nth0(3, nth0(3, Grid, R), R) =:= 0 ->
    append(Empty18, [[3, 3]], Empty19) ; true),
    X22 is 4,
    (nth0(4, nth0(3, Grid, R), R) =:= 0 ->
    append(Empty19, [[4, 3]], Empty20) ; true),
    X23 is 5,
    Y4 is 4,
    X24 is 0,
    (nth0(0, nth0(4, Grid, R), R) =:= 0 ->
    append(Empty20, [[0, 4]], Empty21) ; true),
    X25 is 1,
    (nth0(1, nth0(4, Grid, R), R) =:= 0 ->
    append(Empty21, [[1, 4]], Empty22) ; true),
    X26 is 2,
    (nth0(2, nth0(4, Grid, R), R) =:= 0 ->
    append(Empty22, [[2, 4]], Empty23) ; true),
    X27 is 3,
    (nth0(3, nth0(4, Grid, R), R) =:= 0 ->
    append(Empty23, [[3, 4]], Empty24) ; true),
    X28 is 4,
    (nth0(4, nth0(4, Grid, R), R) =:= 0 ->
    append(Empty24, [[4, 4]], Empty25) ; true),
    X29 is 5,
    Y5 is 5,
    (len(Empty25) =:= 0 ->
    Return1 = map{tag: "SpawnResult", board: B, full: true} ; true),
    Idx is now() mod len(Empty25),
    Cell = nth0(Idx, Empty25, R),
    Val is 4,
    (now() mod 10 < 9 ->
    Val1 is 2 ; true),
    Tmp = nth0(nth0(1, Cell, R), Grid, R),
    nth0(nth0(0, Cell, R), Tmp, _, T69),
    nth0(nth0(0, Cell, R), Tmp1, 2, T69),
    nth0(nth0(1, Cell, R), Grid1, _, T70),
    nth0(nth0(1, Cell, R), Grid1, Tmp1, T70),
    Return2 = map{tag: "SpawnResult", board: map{tag: "Board", cells: Grid1}, full: len(Empty25) =:= 1},
    R = Return2.

pad(N, R) :-
    S = N,
    Pad is 4 - len(S),
    I is 0,
    Out = "",
    Out1 = " ",
    I1 is 1,
    Out2 = "  ",
    I2 is 2,
    Out3 = "   ",
    I3 is 3,
    Out4 = "    ",
    I4 is 4,
    Out5 = "     ",
    I5 is 5,
    Return1 = (string_concat("     ", S, T), T),
    R = Return1.

draw(B, Score, R) :-
    writeln((string_concat("Score: ", Score, T), T)),
    Y is 0,
    writeln("+----+----+----+----+"),
    Line = "|",
    X is 0,
    V = sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 0, 1, _, R),
    (V =:= 0 ->
    Line1 = "|    |" ;
    Line2 = (string_concat((string_concat("|    |", pad(V), T), T), "|", T), T)),
    X1 is 1,
    V1 = sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 1, 1, _, R),
    (V1 =:= 0 ->
    Line3 = (string_concat(Line2, "    |", T), T) ;
    Line4 = (string_concat(Line3 + pad(V1), "|", T), T)),
    X2 is 2,
    V2 = sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 2, 1, _, R),
    (V2 =:= 0 ->
    Line5 = (string_concat(Line4, "    |", T), T) ;
    Line6 = (string_concat(Line5 + pad(V2), "|", T), T)),
    X3 is 3,
    V3 = sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 3, 1, _, R),
    (V3 =:= 0 ->
    Line7 = (string_concat(Line6, "    |", T), T) ;
    Line8 = (string_concat(Line7 + pad(V3), "|", T), T)),
    X4 is 4,
    V4 = sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 4, 1, _, R),
    (V4 =:= 0 ->
    Line9 = (string_concat(Line8, "    |", T), T) ;
    Line10 = (string_concat(Line9 + pad(V4), "|", T), T)),
    X5 is 5,
    writeln(Line10),
    Y1 is 1,
    writeln("+----+----+----+----+"),
    Line11 = "|",
    X6 is 0,
    V5 = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 0, 1, _, R),
    (V5 =:= 0 ->
    Line12 = "|    |" ;
    Line13 = (string_concat((string_concat("|    |", pad(V5), T), T), "|", T), T)),
    X7 is 1,
    V6 = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 1, 1, _, R),
    (V6 =:= 0 ->
    Line14 = (string_concat(Line13, "    |", T), T) ;
    Line15 = (string_concat(Line14 + pad(V6), "|", T), T)),
    X8 is 2,
    V7 = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 2, 1, _, R),
    (V7 =:= 0 ->
    Line16 = (string_concat(Line15, "    |", T), T) ;
    Line17 = (string_concat(Line16 + pad(V7), "|", T), T)),
    X9 is 3,
    V8 = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 3, 1, _, R),
    (V8 =:= 0 ->
    Line18 = (string_concat(Line17, "    |", T), T) ;
    Line19 = (string_concat(Line18 + pad(V8), "|", T), T)),
    X10 is 4,
    V9 = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 4, 1, _, R),
    (V9 =:= 0 ->
    Line20 = (string_concat(Line19, "    |", T), T) ;
    Line21 = (string_concat(Line20 + pad(V9), "|", T), T)),
    X11 is 5,
    writeln(Line21),
    Y2 is 2,
    writeln("+----+----+----+----+"),
    Line22 = "|",
    X12 is 0,
    V10 = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 0, 1, _, R),
    (V10 =:= 0 ->
    Line23 = "|    |" ;
    Line24 = (string_concat((string_concat("|    |", pad(V10), T), T), "|", T), T)),
    X13 is 1,
    V11 = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 1, 1, _, R),
    (V11 =:= 0 ->
    Line25 = (string_concat(Line24, "    |", T), T) ;
    Line26 = (string_concat(Line25 + pad(V11), "|", T), T)),
    X14 is 2,
    V12 = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 2, 1, _, R),
    (V12 =:= 0 ->
    Line27 = (string_concat(Line26, "    |", T), T) ;
    Line28 = (string_concat(Line27 + pad(V12), "|", T), T)),
    X15 is 3,
    V13 = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 3, 1, _, R),
    (V13 =:= 0 ->
    Line29 = (string_concat(Line28, "    |", T), T) ;
    Line30 = (string_concat(Line29 + pad(V13), "|", T), T)),
    X16 is 4,
    V14 = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 4, 1, _, R),
    (V14 =:= 0 ->
    Line31 = (string_concat(Line30, "    |", T), T) ;
    Line32 = (string_concat(Line31 + pad(V14), "|", T), T)),
    X17 is 5,
    writeln(Line32),
    Y3 is 3,
    writeln("+----+----+----+----+"),
    Line33 = "|",
    X18 is 0,
    V15 = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 0, 1, _, R),
    (V15 =:= 0 ->
    Line34 = "|    |" ;
    Line35 = (string_concat((string_concat("|    |", pad(V15), T), T), "|", T), T)),
    X19 is 1,
    V16 = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 1, 1, _, R),
    (V16 =:= 0 ->
    Line36 = (string_concat(Line35, "    |", T), T) ;
    Line37 = (string_concat(Line36 + pad(V16), "|", T), T)),
    X20 is 2,
    V17 = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 2, 1, _, R),
    (V17 =:= 0 ->
    Line38 = (string_concat(Line37, "    |", T), T) ;
    Line39 = (string_concat(Line38 + pad(V17), "|", T), T)),
    X21 is 3,
    V18 = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 3, 1, _, R),
    (V18 =:= 0 ->
    Line40 = (string_concat(Line39, "    |", T), T) ;
    Line41 = (string_concat(Line40 + pad(V18), "|", T), T)),
    X22 is 4,
    V19 = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 4, 1, _, R),
    (V19 =:= 0 ->
    Line42 = (string_concat(Line41, "    |", T), T) ;
    Line43 = (string_concat(Line42 + pad(V19), "|", T), T)),
    X23 is 5,
    writeln(Line43),
    Y4 is 4,
    writeln("+----+----+----+----+"),
    Line44 = "|",
    X24 is 0,
    V20 = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 0, 1, _, R),
    (V20 =:= 0 ->
    Line45 = "|    |" ;
    Line46 = (string_concat((string_concat("|    |", pad(V20), T), T), "|", T), T)),
    X25 is 1,
    V21 = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 1, 1, _, R),
    (V21 =:= 0 ->
    Line47 = (string_concat(Line46, "    |", T), T) ;
    Line48 = (string_concat(Line47 + pad(V21), "|", T), T)),
    X26 is 2,
    V22 = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 2, 1, _, R),
    (V22 =:= 0 ->
    Line49 = (string_concat(Line48, "    |", T), T) ;
    Line50 = (string_concat(Line49 + pad(V22), "|", T), T)),
    X27 is 3,
    V23 = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 3, 1, _, R),
    (V23 =:= 0 ->
    Line51 = (string_concat(Line50, "    |", T), T) ;
    Line52 = (string_concat(Line51 + pad(V23), "|", T), T)),
    X28 is 4,
    V24 = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 4, 1, _, R),
    (V24 =:= 0 ->
    Line53 = (string_concat(Line52, "    |", T), T) ;
    Line54 = (string_concat(Line53 + pad(V24), "|", T), T)),
    X29 is 5,
    writeln(Line54),
    Y5 is 5,
    writeln("+----+----+----+----+"),
    writeln("W=Up S=Down A=Left D=Right Q=Quit"),
    R = Return.

reverseRow(R, R) :-
    Out = [],
    I is len(R) - 1,
    append([], [nth0(I, R, R)], Out1),
    I1 is I - 1,
    append(Out1, [nth0(I1, R, R)], Out2),
    I2 is I1 - 1,
    append(Out2, [nth0(I2, R, R)], Out3),
    I3 is I2 - 1,
    append(Out3, [nth0(I3, R, R)], Out4),
    I4 is I3 - 1,
    append(Out4, [nth0(I4, R, R)], Out5),
    I5 is I4 - 1,
    Return1 = Out5,
    R = Return1.

slideLeft(Row, R) :-
    Xs = [],
    I is 0,
    (nth0(0, Row, R) =\= 0 ->
    append([], [nth0(0, Row, R)], Xs1) ; true),
    I1 is 1,
    (nth0(1, Row, R) =\= 0 ->
    append(Xs1, [nth0(1, Row, R)], Xs2) ; true),
    I2 is 2,
    (nth0(2, Row, R) =\= 0 ->
    append(Xs2, [nth0(2, Row, R)], Xs3) ; true),
    I3 is 3,
    (nth0(3, Row, R) =\= 0 ->
    append(Xs3, [nth0(3, Row, R)], Xs4) ; true),
    I4 is 4,
    (nth0(4, Row, R) =\= 0 ->
    append(Xs4, [nth0(4, Row, R)], Xs5) ; true),
    I5 is 5,
    Res = [],
    Gain is 0,
    I6 is 0,
    (1 < len(Xs5) , nth0(0, Xs5, R) =:= nth0(1, Xs5, R) ->
    V is nth0(0, Xs5, R) * 2,
    Gain1 is 0 + V,
    append([], [V], Res1),
    I7 is 2 ;
    append(Res1, [nth0(2, Xs5, R)], Res2),
    I8 is 3),
    (4 < len(Xs5) , nth0(3, Xs5, R) =:= nth0(4, Xs5, R) ->
    V1 is nth0(3, Xs5, R) * 2,
    Gain2 is Gain1 + V1,
    append(Res2, [V1], Res3),
    I9 is 5 ;
    append(Res3, [nth0(5, Xs5, R)], Res4),
    I10 is 6),
    (7 < len(Xs5) , nth0(6, Xs5, R) =:= nth0(7, Xs5, R) ->
    V2 is nth0(6, Xs5, R) * 2,
    Gain3 is Gain2 + V2,
    append(Res4, [V2], Res5),
    I11 is 8 ;
    append(Res5, [nth0(8, Xs5, R)], Res6),
    I12 is 9),
    (10 < len(Xs5) , nth0(9, Xs5, R) =:= nth0(10, Xs5, R) ->
    V3 is nth0(9, Xs5, R) * 2,
    Gain4 is Gain3 + V3,
    append(Res6, [V3], Res7),
    I13 is 11 ;
    append(Res7, [nth0(11, Xs5, R)], Res8),
    I14 is 12),
    (13 < len(Xs5) , nth0(12, Xs5, R) =:= nth0(13, Xs5, R) ->
    V4 is nth0(12, Xs5, R) * 2,
    Gain5 is Gain4 + V4,
    append(Res8, [V4], Res9),
    I15 is 14 ;
    append(Res9, [nth0(14, Xs5, R)], Res10),
    I16 is 15),
    append(Res10, [0], Res11),
    append(Res11, [0], Res12),
    append(Res12, [0], Res13),
    append(Res13, [0], Res14),
    append(Res14, [0], Res15),
    Return1 = map{tag: "SlideResult", row: Res15, gain: Gain5},
    R = Return1.

moveLeft(B, Score, R) :-
    get_dict(cells, B, Grid),
    Moved = false,
    Y is 0,
    slideLeft(nth0(0, Grid, R), R),
    get_dict(row, R, New),
    Score1 is (string_concat(Score, get_dict(gain, R, R), T), T),
    X is 0,
    (nth0(0, nth0(0, Grid, R), R) =\= nth0(0, New, R) ->
    Moved1 = true ; true),
    Tmp = nth0(0, Grid, R),
    nth0(0, Tmp, _, T9),
    nth0(0, Tmp1, nth0(0, New, R), T9),
    nth0(0, Grid1, _, T10),
    nth0(0, Grid1, Tmp1, T10),
    X1 is 1,
    (nth0(1, nth0(0, Grid1, R), R) =\= nth0(1, New, R) ->
    Moved2 = true ; true),
    Tmp2 = nth0(0, Grid1, R),
    nth0(1, Tmp2, _, T14),
    nth0(1, Tmp3, nth0(1, New, R), T14),
    nth0(0, Grid2, _, T15),
    nth0(0, Grid2, Tmp3, T15),
    X2 is 2,
    (nth0(2, nth0(0, Grid2, R), R) =\= nth0(2, New, R) ->
    Moved3 = true ; true),
    Tmp4 = nth0(0, Grid2, R),
    nth0(2, Tmp4, _, T19),
    nth0(2, Tmp5, nth0(2, New, R), T19),
    nth0(0, Grid3, _, T20),
    nth0(0, Grid3, Tmp5, T20),
    X3 is 3,
    (nth0(3, nth0(0, Grid3, R), R) =\= nth0(3, New, R) ->
    Moved4 = true ; true),
    Tmp6 = nth0(0, Grid3, R),
    nth0(3, Tmp6, _, T24),
    nth0(3, Tmp7, nth0(3, New, R), T24),
    nth0(0, Grid4, _, T25),
    nth0(0, Grid4, Tmp7, T25),
    X4 is 4,
    (nth0(4, nth0(0, Grid4, R), R) =\= nth0(4, New, R) ->
    Moved5 = true ; true),
    Tmp8 = nth0(0, Grid4, R),
    nth0(4, Tmp8, _, T29),
    nth0(4, Tmp9, nth0(4, New, R), T29),
    nth0(0, Grid5, _, T30),
    nth0(0, Grid5, Tmp9, T30),
    X5 is 5,
    Y1 is 1,
    slideLeft(nth0(1, Grid5, R), R1),
    get_dict(row, R1, New1),
    Score2 is (string_concat(Score1, get_dict(gain, R1, R), T), T),
    X6 is 0,
    (nth0(0, nth0(1, Grid5, R), R) =\= nth0(0, New1, R) ->
    Moved6 = true ; true),
    Tmp10 = nth0(1, Grid5, R),
    nth0(0, Tmp10, _, T39),
    nth0(0, Tmp11, nth0(0, New1, R), T39),
    nth0(1, Grid6, _, T40),
    nth0(1, Grid6, Tmp11, T40),
    X7 is 1,
    (nth0(1, nth0(1, Grid6, R), R) =\= nth0(1, New1, R) ->
    Moved7 = true ; true),
    Tmp12 = nth0(1, Grid6, R),
    nth0(1, Tmp12, _, T44),
    nth0(1, Tmp13, nth0(1, New1, R), T44),
    nth0(1, Grid7, _, T45),
    nth0(1, Grid7, Tmp13, T45),
    X8 is 2,
    (nth0(2, nth0(1, Grid7, R), R) =\= nth0(2, New1, R) ->
    Moved8 = true ; true),
    Tmp14 = nth0(1, Grid7, R),
    nth0(2, Tmp14, _, T49),
    nth0(2, Tmp15, nth0(2, New1, R), T49),
    nth0(1, Grid8, _, T50),
    nth0(1, Grid8, Tmp15, T50),
    X9 is 3,
    (nth0(3, nth0(1, Grid8, R), R) =\= nth0(3, New1, R) ->
    Moved9 = true ; true),
    Tmp16 = nth0(1, Grid8, R),
    nth0(3, Tmp16, _, T54),
    nth0(3, Tmp17, nth0(3, New1, R), T54),
    nth0(1, Grid9, _, T55),
    nth0(1, Grid9, Tmp17, T55),
    X10 is 4,
    (nth0(4, nth0(1, Grid9, R), R) =\= nth0(4, New1, R) ->
    Moved10 = true ; true),
    Tmp18 = nth0(1, Grid9, R),
    nth0(4, Tmp18, _, T59),
    nth0(4, Tmp19, nth0(4, New1, R), T59),
    nth0(1, Grid10, _, T60),
    nth0(1, Grid10, Tmp19, T60),
    X11 is 5,
    Y2 is 2,
    slideLeft(nth0(2, Grid10, R), R2),
    get_dict(row, R2, New2),
    Score3 is (string_concat(Score2, get_dict(gain, R2, R), T), T),
    X12 is 0,
    (nth0(0, nth0(2, Grid10, R), R) =\= nth0(0, New2, R) ->
    Moved11 = true ; true),
    Tmp20 = nth0(2, Grid10, R),
    nth0(0, Tmp20, _, T69),
    nth0(0, Tmp21, nth0(0, New2, R), T69),
    nth0(2, Grid11, _, T70),
    nth0(2, Grid11, Tmp21, T70),
    X13 is 1,
    (nth0(1, nth0(2, Grid11, R), R) =\= nth0(1, New2, R) ->
    Moved12 = true ; true),
    Tmp22 = nth0(2, Grid11, R),
    nth0(1, Tmp22, _, T74),
    nth0(1, Tmp23, nth0(1, New2, R), T74),
    nth0(2, Grid12, _, T75),
    nth0(2, Grid12, Tmp23, T75),
    X14 is 2,
    (nth0(2, nth0(2, Grid12, R), R) =\= nth0(2, New2, R) ->
    Moved13 = true ; true),
    Tmp24 = nth0(2, Grid12, R),
    nth0(2, Tmp24, _, T79),
    nth0(2, Tmp25, nth0(2, New2, R), T79),
    nth0(2, Grid13, _, T80),
    nth0(2, Grid13, Tmp25, T80),
    X15 is 3,
    (nth0(3, nth0(2, Grid13, R), R) =\= nth0(3, New2, R) ->
    Moved14 = true ; true),
    Tmp26 = nth0(2, Grid13, R),
    nth0(3, Tmp26, _, T84),
    nth0(3, Tmp27, nth0(3, New2, R), T84),
    nth0(2, Grid14, _, T85),
    nth0(2, Grid14, Tmp27, T85),
    X16 is 4,
    (nth0(4, nth0(2, Grid14, R), R) =\= nth0(4, New2, R) ->
    Moved15 = true ; true),
    Tmp28 = nth0(2, Grid14, R),
    nth0(4, Tmp28, _, T89),
    nth0(4, Tmp29, nth0(4, New2, R), T89),
    nth0(2, Grid15, _, T90),
    nth0(2, Grid15, Tmp29, T90),
    X17 is 5,
    Y3 is 3,
    slideLeft(nth0(3, Grid15, R), R3),
    get_dict(row, R3, New3),
    Score4 is (string_concat(Score3, get_dict(gain, R3, R), T), T),
    X18 is 0,
    (nth0(0, nth0(3, Grid15, R), R) =\= nth0(0, New3, R) ->
    Moved16 = true ; true),
    Tmp30 = nth0(3, Grid15, R),
    nth0(0, Tmp30, _, T99),
    nth0(0, Tmp31, nth0(0, New3, R), T99),
    nth0(3, Grid16, _, T100),
    nth0(3, Grid16, Tmp31, T100),
    X19 is 1,
    (nth0(1, nth0(3, Grid16, R), R) =\= nth0(1, New3, R) ->
    Moved17 = true ; true),
    Tmp32 = nth0(3, Grid16, R),
    nth0(1, Tmp32, _, T104),
    nth0(1, Tmp33, nth0(1, New3, R), T104),
    nth0(3, Grid17, _, T105),
    nth0(3, Grid17, Tmp33, T105),
    X20 is 2,
    (nth0(2, nth0(3, Grid17, R), R) =\= nth0(2, New3, R) ->
    Moved18 = true ; true),
    Tmp34 = nth0(3, Grid17, R),
    nth0(2, Tmp34, _, T109),
    nth0(2, Tmp35, nth0(2, New3, R), T109),
    nth0(3, Grid18, _, T110),
    nth0(3, Grid18, Tmp35, T110),
    X21 is 3,
    (nth0(3, nth0(3, Grid18, R), R) =\= nth0(3, New3, R) ->
    Moved19 = true ; true),
    Tmp36 = nth0(3, Grid18, R),
    nth0(3, Tmp36, _, T114),
    nth0(3, Tmp37, nth0(3, New3, R), T114),
    nth0(3, Grid19, _, T115),
    nth0(3, Grid19, Tmp37, T115),
    X22 is 4,
    (nth0(4, nth0(3, Grid19, R), R) =\= nth0(4, New3, R) ->
    Moved20 = true ; true),
    Tmp38 = nth0(3, Grid19, R),
    nth0(4, Tmp38, _, T119),
    nth0(4, Tmp39, nth0(4, New3, R), T119),
    nth0(3, Grid20, _, T120),
    nth0(3, Grid20, Tmp39, T120),
    X23 is 5,
    Y4 is 4,
    slideLeft(nth0(4, Grid20, R), R4),
    get_dict(row, R4, New4),
    Score5 is (string_concat(Score4, get_dict(gain, R4, R), T), T),
    X24 is 0,
    (nth0(0, nth0(4, Grid20, R), R) =\= nth0(0, New4, R) ->
    Moved21 = true ; true),
    Tmp40 = nth0(4, Grid20, R),
    nth0(0, Tmp40, _, T129),
    nth0(0, Tmp41, nth0(0, New4, R), T129),
    nth0(4, Grid21, _, T130),
    nth0(4, Grid21, Tmp41, T130),
    X25 is 1,
    (nth0(1, nth0(4, Grid21, R), R) =\= nth0(1, New4, R) ->
    Moved22 = true ; true),
    Tmp42 = nth0(4, Grid21, R),
    nth0(1, Tmp42, _, T134),
    nth0(1, Tmp43, nth0(1, New4, R), T134),
    nth0(4, Grid22, _, T135),
    nth0(4, Grid22, Tmp43, T135),
    X26 is 2,
    (nth0(2, nth0(4, Grid22, R), R) =\= nth0(2, New4, R) ->
    Moved23 = true ; true),
    Tmp44 = nth0(4, Grid22, R),
    nth0(2, Tmp44, _, T139),
    nth0(2, Tmp45, nth0(2, New4, R), T139),
    nth0(4, Grid23, _, T140),
    nth0(4, Grid23, Tmp45, T140),
    X27 is 3,
    (nth0(3, nth0(4, Grid23, R), R) =\= nth0(3, New4, R) ->
    Moved24 = true ; true),
    Tmp46 = nth0(4, Grid23, R),
    nth0(3, Tmp46, _, T144),
    nth0(3, Tmp47, nth0(3, New4, R), T144),
    nth0(4, Grid24, _, T145),
    nth0(4, Grid24, Tmp47, T145),
    X28 is 4,
    (nth0(4, nth0(4, Grid24, R), R) =\= nth0(4, New4, R) ->
    Moved25 = true ; true),
    Tmp48 = nth0(4, Grid24, R),
    nth0(4, Tmp48, _, T149),
    nth0(4, Tmp49, nth0(4, New4, R), T149),
    nth0(4, Grid25, _, T150),
    nth0(4, Grid25, Tmp49, T150),
    X29 is 5,
    Y5 is 5,
    Return1 = map{tag: "MoveResult", board: map{tag: "Board", cells: Grid25}, score: Score5, moved: true},
    R = Return1.

moveRight(B, Score, R) :-
    get_dict(cells, B, Grid),
    Moved = false,
    Y is 0,
    reverseRow(nth0(0, Grid, R), Rev),
    slideLeft(Rev, R),
    get_dict(row, R, Rev1),
    Score1 is (string_concat(Score, get_dict(gain, R, R), T), T),
    reverseRow(Rev1, Rev2),
    X is 0,
    (nth0(0, nth0(0, Grid, R), R) =\= nth0(0, Rev2, R) ->
    Moved1 = true ; true),
    Tmp = nth0(0, Grid, R),
    nth0(0, Tmp, _, T11),
    nth0(0, Tmp1, nth0(0, Rev2, R), T11),
    nth0(0, Grid1, _, T12),
    nth0(0, Grid1, Tmp1, T12),
    X1 is 1,
    (nth0(1, nth0(0, Grid1, R), R) =\= nth0(1, Rev2, R) ->
    Moved2 = true ; true),
    Tmp2 = nth0(0, Grid1, R),
    nth0(1, Tmp2, _, T16),
    nth0(1, Tmp3, nth0(1, Rev2, R), T16),
    nth0(0, Grid2, _, T17),
    nth0(0, Grid2, Tmp3, T17),
    X2 is 2,
    (nth0(2, nth0(0, Grid2, R), R) =\= nth0(2, Rev2, R) ->
    Moved3 = true ; true),
    Tmp4 = nth0(0, Grid2, R),
    nth0(2, Tmp4, _, T21),
    nth0(2, Tmp5, nth0(2, Rev2, R), T21),
    nth0(0, Grid3, _, T22),
    nth0(0, Grid3, Tmp5, T22),
    X3 is 3,
    (nth0(3, nth0(0, Grid3, R), R) =\= nth0(3, Rev2, R) ->
    Moved4 = true ; true),
    Tmp6 = nth0(0, Grid3, R),
    nth0(3, Tmp6, _, T26),
    nth0(3, Tmp7, nth0(3, Rev2, R), T26),
    nth0(0, Grid4, _, T27),
    nth0(0, Grid4, Tmp7, T27),
    X4 is 4,
    (nth0(4, nth0(0, Grid4, R), R) =\= nth0(4, Rev2, R) ->
    Moved5 = true ; true),
    Tmp8 = nth0(0, Grid4, R),
    nth0(4, Tmp8, _, T31),
    nth0(4, Tmp9, nth0(4, Rev2, R), T31),
    nth0(0, Grid5, _, T32),
    nth0(0, Grid5, Tmp9, T32),
    X5 is 5,
    Y1 is 1,
    reverseRow(nth0(1, Grid5, R), Rev3),
    slideLeft(Rev3, R1),
    get_dict(row, R1, Rev4),
    Score2 is (string_concat(Score1, get_dict(gain, R1, R), T), T),
    reverseRow(Rev4, Rev5),
    X6 is 0,
    (nth0(0, nth0(1, Grid5, R), R) =\= nth0(0, Rev5, R) ->
    Moved6 = true ; true),
    Tmp10 = nth0(1, Grid5, R),
    nth0(0, Tmp10, _, T43),
    nth0(0, Tmp11, nth0(0, Rev5, R), T43),
    nth0(1, Grid6, _, T44),
    nth0(1, Grid6, Tmp11, T44),
    X7 is 1,
    (nth0(1, nth0(1, Grid6, R), R) =\= nth0(1, Rev5, R) ->
    Moved7 = true ; true),
    Tmp12 = nth0(1, Grid6, R),
    nth0(1, Tmp12, _, T48),
    nth0(1, Tmp13, nth0(1, Rev5, R), T48),
    nth0(1, Grid7, _, T49),
    nth0(1, Grid7, Tmp13, T49),
    X8 is 2,
    (nth0(2, nth0(1, Grid7, R), R) =\= nth0(2, Rev5, R) ->
    Moved8 = true ; true),
    Tmp14 = nth0(1, Grid7, R),
    nth0(2, Tmp14, _, T53),
    nth0(2, Tmp15, nth0(2, Rev5, R), T53),
    nth0(1, Grid8, _, T54),
    nth0(1, Grid8, Tmp15, T54),
    X9 is 3,
    (nth0(3, nth0(1, Grid8, R), R) =\= nth0(3, Rev5, R) ->
    Moved9 = true ; true),
    Tmp16 = nth0(1, Grid8, R),
    nth0(3, Tmp16, _, T58),
    nth0(3, Tmp17, nth0(3, Rev5, R), T58),
    nth0(1, Grid9, _, T59),
    nth0(1, Grid9, Tmp17, T59),
    X10 is 4,
    (nth0(4, nth0(1, Grid9, R), R) =\= nth0(4, Rev5, R) ->
    Moved10 = true ; true),
    Tmp18 = nth0(1, Grid9, R),
    nth0(4, Tmp18, _, T63),
    nth0(4, Tmp19, nth0(4, Rev5, R), T63),
    nth0(1, Grid10, _, T64),
    nth0(1, Grid10, Tmp19, T64),
    X11 is 5,
    Y2 is 2,
    reverseRow(nth0(2, Grid10, R), Rev6),
    slideLeft(Rev6, R2),
    get_dict(row, R2, Rev7),
    Score3 is (string_concat(Score2, get_dict(gain, R2, R), T), T),
    reverseRow(Rev7, Rev8),
    X12 is 0,
    (nth0(0, nth0(2, Grid10, R), R) =\= nth0(0, Rev8, R) ->
    Moved11 = true ; true),
    Tmp20 = nth0(2, Grid10, R),
    nth0(0, Tmp20, _, T75),
    nth0(0, Tmp21, nth0(0, Rev8, R), T75),
    nth0(2, Grid11, _, T76),
    nth0(2, Grid11, Tmp21, T76),
    X13 is 1,
    (nth0(1, nth0(2, Grid11, R), R) =\= nth0(1, Rev8, R) ->
    Moved12 = true ; true),
    Tmp22 = nth0(2, Grid11, R),
    nth0(1, Tmp22, _, T80),
    nth0(1, Tmp23, nth0(1, Rev8, R), T80),
    nth0(2, Grid12, _, T81),
    nth0(2, Grid12, Tmp23, T81),
    X14 is 2,
    (nth0(2, nth0(2, Grid12, R), R) =\= nth0(2, Rev8, R) ->
    Moved13 = true ; true),
    Tmp24 = nth0(2, Grid12, R),
    nth0(2, Tmp24, _, T85),
    nth0(2, Tmp25, nth0(2, Rev8, R), T85),
    nth0(2, Grid13, _, T86),
    nth0(2, Grid13, Tmp25, T86),
    X15 is 3,
    (nth0(3, nth0(2, Grid13, R), R) =\= nth0(3, Rev8, R) ->
    Moved14 = true ; true),
    Tmp26 = nth0(2, Grid13, R),
    nth0(3, Tmp26, _, T90),
    nth0(3, Tmp27, nth0(3, Rev8, R), T90),
    nth0(2, Grid14, _, T91),
    nth0(2, Grid14, Tmp27, T91),
    X16 is 4,
    (nth0(4, nth0(2, Grid14, R), R) =\= nth0(4, Rev8, R) ->
    Moved15 = true ; true),
    Tmp28 = nth0(2, Grid14, R),
    nth0(4, Tmp28, _, T95),
    nth0(4, Tmp29, nth0(4, Rev8, R), T95),
    nth0(2, Grid15, _, T96),
    nth0(2, Grid15, Tmp29, T96),
    X17 is 5,
    Y3 is 3,
    reverseRow(nth0(3, Grid15, R), Rev9),
    slideLeft(Rev9, R3),
    get_dict(row, R3, Rev10),
    Score4 is (string_concat(Score3, get_dict(gain, R3, R), T), T),
    reverseRow(Rev10, Rev11),
    X18 is 0,
    (nth0(0, nth0(3, Grid15, R), R) =\= nth0(0, Rev11, R) ->
    Moved16 = true ; true),
    Tmp30 = nth0(3, Grid15, R),
    nth0(0, Tmp30, _, T107),
    nth0(0, Tmp31, nth0(0, Rev11, R), T107),
    nth0(3, Grid16, _, T108),
    nth0(3, Grid16, Tmp31, T108),
    X19 is 1,
    (nth0(1, nth0(3, Grid16, R), R) =\= nth0(1, Rev11, R) ->
    Moved17 = true ; true),
    Tmp32 = nth0(3, Grid16, R),
    nth0(1, Tmp32, _, T112),
    nth0(1, Tmp33, nth0(1, Rev11, R), T112),
    nth0(3, Grid17, _, T113),
    nth0(3, Grid17, Tmp33, T113),
    X20 is 2,
    (nth0(2, nth0(3, Grid17, R), R) =\= nth0(2, Rev11, R) ->
    Moved18 = true ; true),
    Tmp34 = nth0(3, Grid17, R),
    nth0(2, Tmp34, _, T117),
    nth0(2, Tmp35, nth0(2, Rev11, R), T117),
    nth0(3, Grid18, _, T118),
    nth0(3, Grid18, Tmp35, T118),
    X21 is 3,
    (nth0(3, nth0(3, Grid18, R), R) =\= nth0(3, Rev11, R) ->
    Moved19 = true ; true),
    Tmp36 = nth0(3, Grid18, R),
    nth0(3, Tmp36, _, T122),
    nth0(3, Tmp37, nth0(3, Rev11, R), T122),
    nth0(3, Grid19, _, T123),
    nth0(3, Grid19, Tmp37, T123),
    X22 is 4,
    (nth0(4, nth0(3, Grid19, R), R) =\= nth0(4, Rev11, R) ->
    Moved20 = true ; true),
    Tmp38 = nth0(3, Grid19, R),
    nth0(4, Tmp38, _, T127),
    nth0(4, Tmp39, nth0(4, Rev11, R), T127),
    nth0(3, Grid20, _, T128),
    nth0(3, Grid20, Tmp39, T128),
    X23 is 5,
    Y4 is 4,
    reverseRow(nth0(4, Grid20, R), Rev12),
    slideLeft(Rev12, R4),
    get_dict(row, R4, Rev13),
    Score5 is (string_concat(Score4, get_dict(gain, R4, R), T), T),
    reverseRow(Rev13, Rev14),
    X24 is 0,
    (nth0(0, nth0(4, Grid20, R), R) =\= nth0(0, Rev14, R) ->
    Moved21 = true ; true),
    Tmp40 = nth0(4, Grid20, R),
    nth0(0, Tmp40, _, T139),
    nth0(0, Tmp41, nth0(0, Rev14, R), T139),
    nth0(4, Grid21, _, T140),
    nth0(4, Grid21, Tmp41, T140),
    X25 is 1,
    (nth0(1, nth0(4, Grid21, R), R) =\= nth0(1, Rev14, R) ->
    Moved22 = true ; true),
    Tmp42 = nth0(4, Grid21, R),
    nth0(1, Tmp42, _, T144),
    nth0(1, Tmp43, nth0(1, Rev14, R), T144),
    nth0(4, Grid22, _, T145),
    nth0(4, Grid22, Tmp43, T145),
    X26 is 2,
    (nth0(2, nth0(4, Grid22, R), R) =\= nth0(2, Rev14, R) ->
    Moved23 = true ; true),
    Tmp44 = nth0(4, Grid22, R),
    nth0(2, Tmp44, _, T149),
    nth0(2, Tmp45, nth0(2, Rev14, R), T149),
    nth0(4, Grid23, _, T150),
    nth0(4, Grid23, Tmp45, T150),
    X27 is 3,
    (nth0(3, nth0(4, Grid23, R), R) =\= nth0(3, Rev14, R) ->
    Moved24 = true ; true),
    Tmp46 = nth0(4, Grid23, R),
    nth0(3, Tmp46, _, T154),
    nth0(3, Tmp47, nth0(3, Rev14, R), T154),
    nth0(4, Grid24, _, T155),
    nth0(4, Grid24, Tmp47, T155),
    X28 is 4,
    (nth0(4, nth0(4, Grid24, R), R) =\= nth0(4, Rev14, R) ->
    Moved25 = true ; true),
    Tmp48 = nth0(4, Grid24, R),
    nth0(4, Tmp48, _, T159),
    nth0(4, Tmp49, nth0(4, Rev14, R), T159),
    nth0(4, Grid25, _, T160),
    nth0(4, Grid25, Tmp49, T160),
    X29 is 5,
    Y5 is 5,
    Return1 = map{tag: "MoveResult", board: map{tag: "Board", cells: Grid25}, score: Score5, moved: true},
    R = Return1.

getCol(B, X, R) :-
    Col = [],
    Y is 0,
    append([], [sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), X, 1, _, R)], Col1),
    Y1 is 1,
    append(Col1, [sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), X, 1, _, R)], Col2),
    Y2 is 2,
    append(Col2, [sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), X, 1, _, R)], Col3),
    Y3 is 3,
    append(Col3, [sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), X, 1, _, R)], Col4),
    Y4 is 4,
    append(Col4, [sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), X, 1, _, R)], Col5),
    Y5 is 5,
    Return1 = Col5,
    R = Return1.

setCol(B, X, Col, R) :-
    get_dict(cells, B, Rows),
    Y is 0,
    Row = nth0(0, Rows, R),
    nth0(X, Row, _, T3),
    nth0(X, Row1, nth0(0, Col, R), T3),
    nth0(0, Rows, _, T4),
    nth0(0, Rows1, Row1, T4),
    Y1 is 1,
    Row2 = nth0(1, Rows1, R),
    nth0(X, Row2, _, T7),
    nth0(X, Row3, nth0(1, Col, R), T7),
    nth0(1, Rows1, _, T8),
    nth0(1, Rows2, Row3, T8),
    Y2 is 2,
    Row4 = nth0(2, Rows2, R),
    nth0(X, Row4, _, T11),
    nth0(X, Row5, nth0(2, Col, R), T11),
    nth0(2, Rows2, _, T12),
    nth0(2, Rows3, Row5, T12),
    Y3 is 3,
    Row6 = nth0(3, Rows3, R),
    nth0(X, Row6, _, T15),
    nth0(X, Row7, nth0(3, Col, R), T15),
    nth0(3, Rows3, _, T16),
    nth0(3, Rows4, Row7, T16),
    Y4 is 4,
    Row8 = nth0(4, Rows4, R),
    nth0(X, Row8, _, T19),
    nth0(X, Row9, nth0(4, Col, R), T19),
    nth0(4, Rows4, _, T20),
    nth0(4, Rows5, Row9, T20),
    Y5 is 5,
    get_dict(cells, B, Tmp),
    get_dict(cells, B, V23),
    V231 is Rows5, put_dict(cells, B, V231, B1),
    R = Return.

moveUp(B, Score, R) :-
    get_dict(cells, B, Grid),
    Moved = false,
    X is 0,
    getCol(B, 0, Col),
    slideLeft(Col, R),
    get_dict(row, R, New),
    Score1 is (string_concat(Score, get_dict(gain, R, R), T), T),
    Y is 0,
    (nth0(0, nth0(0, Grid, R), R) =\= nth0(0, New, R) ->
    Moved1 = true ; true),
    Tmp = nth0(0, Grid, R),
    nth0(0, Tmp, _, T10),
    nth0(0, Tmp1, nth0(0, New, R), T10),
    nth0(0, Grid1, _, T11),
    nth0(0, Grid1, Tmp1, T11),
    Y1 is 1,
    (nth0(0, nth0(1, Grid1, R), R) =\= nth0(1, New, R) ->
    Moved2 = true ; true),
    Tmp2 = nth0(1, Grid1, R),
    nth0(0, Tmp2, _, T15),
    nth0(0, Tmp3, nth0(1, New, R), T15),
    nth0(1, Grid2, _, T16),
    nth0(1, Grid2, Tmp3, T16),
    Y2 is 2,
    (nth0(0, nth0(2, Grid2, R), R) =\= nth0(2, New, R) ->
    Moved3 = true ; true),
    Tmp4 = nth0(2, Grid2, R),
    nth0(0, Tmp4, _, T20),
    nth0(0, Tmp5, nth0(2, New, R), T20),
    nth0(2, Grid3, _, T21),
    nth0(2, Grid3, Tmp5, T21),
    Y3 is 3,
    (nth0(0, nth0(3, Grid3, R), R) =\= nth0(3, New, R) ->
    Moved4 = true ; true),
    Tmp6 = nth0(3, Grid3, R),
    nth0(0, Tmp6, _, T25),
    nth0(0, Tmp7, nth0(3, New, R), T25),
    nth0(3, Grid4, _, T26),
    nth0(3, Grid4, Tmp7, T26),
    Y4 is 4,
    (nth0(0, nth0(4, Grid4, R), R) =\= nth0(4, New, R) ->
    Moved5 = true ; true),
    Tmp8 = nth0(4, Grid4, R),
    nth0(0, Tmp8, _, T30),
    nth0(0, Tmp9, nth0(4, New, R), T30),
    nth0(4, Grid5, _, T31),
    nth0(4, Grid5, Tmp9, T31),
    Y5 is 5,
    X1 is 1,
    getCol(B, 1, Col1),
    slideLeft(Col1, R1),
    get_dict(row, R1, New1),
    Score2 is (string_concat(Score1, get_dict(gain, R1, R), T), T),
    Y6 is 0,
    (nth0(1, nth0(0, Grid5, R), R) =\= nth0(0, New1, R) ->
    Moved6 = true ; true),
    Tmp10 = nth0(0, Grid5, R),
    nth0(1, Tmp10, _, T41),
    nth0(1, Tmp11, nth0(0, New1, R), T41),
    nth0(0, Grid6, _, T42),
    nth0(0, Grid6, Tmp11, T42),
    Y7 is 1,
    (nth0(1, nth0(1, Grid6, R), R) =\= nth0(1, New1, R) ->
    Moved7 = true ; true),
    Tmp12 = nth0(1, Grid6, R),
    nth0(1, Tmp12, _, T46),
    nth0(1, Tmp13, nth0(1, New1, R), T46),
    nth0(1, Grid7, _, T47),
    nth0(1, Grid7, Tmp13, T47),
    Y8 is 2,
    (nth0(1, nth0(2, Grid7, R), R) =\= nth0(2, New1, R) ->
    Moved8 = true ; true),
    Tmp14 = nth0(2, Grid7, R),
    nth0(1, Tmp14, _, T51),
    nth0(1, Tmp15, nth0(2, New1, R), T51),
    nth0(2, Grid8, _, T52),
    nth0(2, Grid8, Tmp15, T52),
    Y9 is 3,
    (nth0(1, nth0(3, Grid8, R), R) =\= nth0(3, New1, R) ->
    Moved9 = true ; true),
    Tmp16 = nth0(3, Grid8, R),
    nth0(1, Tmp16, _, T56),
    nth0(1, Tmp17, nth0(3, New1, R), T56),
    nth0(3, Grid9, _, T57),
    nth0(3, Grid9, Tmp17, T57),
    Y10 is 4,
    (nth0(1, nth0(4, Grid9, R), R) =\= nth0(4, New1, R) ->
    Moved10 = true ; true),
    Tmp18 = nth0(4, Grid9, R),
    nth0(1, Tmp18, _, T61),
    nth0(1, Tmp19, nth0(4, New1, R), T61),
    nth0(4, Grid10, _, T62),
    nth0(4, Grid10, Tmp19, T62),
    Y11 is 5,
    X2 is 2,
    getCol(B, 2, Col2),
    slideLeft(Col2, R2),
    get_dict(row, R2, New2),
    Score3 is (string_concat(Score2, get_dict(gain, R2, R), T), T),
    Y12 is 0,
    (nth0(2, nth0(0, Grid10, R), R) =\= nth0(0, New2, R) ->
    Moved11 = true ; true),
    Tmp20 = nth0(0, Grid10, R),
    nth0(2, Tmp20, _, T72),
    nth0(2, Tmp21, nth0(0, New2, R), T72),
    nth0(0, Grid11, _, T73),
    nth0(0, Grid11, Tmp21, T73),
    Y13 is 1,
    (nth0(2, nth0(1, Grid11, R), R) =\= nth0(1, New2, R) ->
    Moved12 = true ; true),
    Tmp22 = nth0(1, Grid11, R),
    nth0(2, Tmp22, _, T77),
    nth0(2, Tmp23, nth0(1, New2, R), T77),
    nth0(1, Grid12, _, T78),
    nth0(1, Grid12, Tmp23, T78),
    Y14 is 2,
    (nth0(2, nth0(2, Grid12, R), R) =\= nth0(2, New2, R) ->
    Moved13 = true ; true),
    Tmp24 = nth0(2, Grid12, R),
    nth0(2, Tmp24, _, T82),
    nth0(2, Tmp25, nth0(2, New2, R), T82),
    nth0(2, Grid13, _, T83),
    nth0(2, Grid13, Tmp25, T83),
    Y15 is 3,
    (nth0(2, nth0(3, Grid13, R), R) =\= nth0(3, New2, R) ->
    Moved14 = true ; true),
    Tmp26 = nth0(3, Grid13, R),
    nth0(2, Tmp26, _, T87),
    nth0(2, Tmp27, nth0(3, New2, R), T87),
    nth0(3, Grid14, _, T88),
    nth0(3, Grid14, Tmp27, T88),
    Y16 is 4,
    (nth0(2, nth0(4, Grid14, R), R) =\= nth0(4, New2, R) ->
    Moved15 = true ; true),
    Tmp28 = nth0(4, Grid14, R),
    nth0(2, Tmp28, _, T92),
    nth0(2, Tmp29, nth0(4, New2, R), T92),
    nth0(4, Grid15, _, T93),
    nth0(4, Grid15, Tmp29, T93),
    Y17 is 5,
    X3 is 3,
    getCol(B, 3, Col3),
    slideLeft(Col3, R3),
    get_dict(row, R3, New3),
    Score4 is (string_concat(Score3, get_dict(gain, R3, R), T), T),
    Y18 is 0,
    (nth0(3, nth0(0, Grid15, R), R) =\= nth0(0, New3, R) ->
    Moved16 = true ; true),
    Tmp30 = nth0(0, Grid15, R),
    nth0(3, Tmp30, _, T103),
    nth0(3, Tmp31, nth0(0, New3, R), T103),
    nth0(0, Grid16, _, T104),
    nth0(0, Grid16, Tmp31, T104),
    Y19 is 1,
    (nth0(3, nth0(1, Grid16, R), R) =\= nth0(1, New3, R) ->
    Moved17 = true ; true),
    Tmp32 = nth0(1, Grid16, R),
    nth0(3, Tmp32, _, T108),
    nth0(3, Tmp33, nth0(1, New3, R), T108),
    nth0(1, Grid17, _, T109),
    nth0(1, Grid17, Tmp33, T109),
    Y20 is 2,
    (nth0(3, nth0(2, Grid17, R), R) =\= nth0(2, New3, R) ->
    Moved18 = true ; true),
    Tmp34 = nth0(2, Grid17, R),
    nth0(3, Tmp34, _, T113),
    nth0(3, Tmp35, nth0(2, New3, R), T113),
    nth0(2, Grid18, _, T114),
    nth0(2, Grid18, Tmp35, T114),
    Y21 is 3,
    (nth0(3, nth0(3, Grid18, R), R) =\= nth0(3, New3, R) ->
    Moved19 = true ; true),
    Tmp36 = nth0(3, Grid18, R),
    nth0(3, Tmp36, _, T118),
    nth0(3, Tmp37, nth0(3, New3, R), T118),
    nth0(3, Grid19, _, T119),
    nth0(3, Grid19, Tmp37, T119),
    Y22 is 4,
    (nth0(3, nth0(4, Grid19, R), R) =\= nth0(4, New3, R) ->
    Moved20 = true ; true),
    Tmp38 = nth0(4, Grid19, R),
    nth0(3, Tmp38, _, T123),
    nth0(3, Tmp39, nth0(4, New3, R), T123),
    nth0(4, Grid20, _, T124),
    nth0(4, Grid20, Tmp39, T124),
    Y23 is 5,
    X4 is 4,
    getCol(B, 4, Col4),
    slideLeft(Col4, R4),
    get_dict(row, R4, New4),
    Score5 is (string_concat(Score4, get_dict(gain, R4, R), T), T),
    Y24 is 0,
    (nth0(4, nth0(0, Grid20, R), R) =\= nth0(0, New4, R) ->
    Moved21 = true ; true),
    Tmp40 = nth0(0, Grid20, R),
    nth0(4, Tmp40, _, T134),
    nth0(4, Tmp41, nth0(0, New4, R), T134),
    nth0(0, Grid21, _, T135),
    nth0(0, Grid21, Tmp41, T135),
    Y25 is 1,
    (nth0(4, nth0(1, Grid21, R), R) =\= nth0(1, New4, R) ->
    Moved22 = true ; true),
    Tmp42 = nth0(1, Grid21, R),
    nth0(4, Tmp42, _, T139),
    nth0(4, Tmp43, nth0(1, New4, R), T139),
    nth0(1, Grid22, _, T140),
    nth0(1, Grid22, Tmp43, T140),
    Y26 is 2,
    (nth0(4, nth0(2, Grid22, R), R) =\= nth0(2, New4, R) ->
    Moved23 = true ; true),
    Tmp44 = nth0(2, Grid22, R),
    nth0(4, Tmp44, _, T144),
    nth0(4, Tmp45, nth0(2, New4, R), T144),
    nth0(2, Grid23, _, T145),
    nth0(2, Grid23, Tmp45, T145),
    Y27 is 3,
    (nth0(4, nth0(3, Grid23, R), R) =\= nth0(3, New4, R) ->
    Moved24 = true ; true),
    Tmp46 = nth0(3, Grid23, R),
    nth0(4, Tmp46, _, T149),
    nth0(4, Tmp47, nth0(3, New4, R), T149),
    nth0(3, Grid24, _, T150),
    nth0(3, Grid24, Tmp47, T150),
    Y28 is 4,
    (nth0(4, nth0(4, Grid24, R), R) =\= nth0(4, New4, R) ->
    Moved25 = true ; true),
    Tmp48 = nth0(4, Grid24, R),
    nth0(4, Tmp48, _, T154),
    nth0(4, Tmp49, nth0(4, New4, R), T154),
    nth0(4, Grid25, _, T155),
    nth0(4, Grid25, Tmp49, T155),
    Y29 is 5,
    X5 is 5,
    Return1 = map{tag: "MoveResult", board: map{tag: "Board", cells: Grid25}, score: Score5, moved: true},
    R = Return1.

moveDown(B, Score, R) :-
    get_dict(cells, B, Grid),
    Moved = false,
    X is 0,
    reverseRow(getCol(B, 0), Col),
    slideLeft(Col, R),
    get_dict(row, R, Col1),
    Score1 is (string_concat(Score, get_dict(gain, R, R), T), T),
    reverseRow(Col1, Col2),
    Y is 0,
    (nth0(0, nth0(0, Grid, R), R) =\= nth0(0, Col2, R) ->
    Moved1 = true ; true),
    Tmp = nth0(0, Grid, R),
    nth0(0, Tmp, _, T11),
    nth0(0, Tmp1, nth0(0, Col2, R), T11),
    nth0(0, Grid1, _, T12),
    nth0(0, Grid1, Tmp1, T12),
    Y1 is 1,
    (nth0(0, nth0(1, Grid1, R), R) =\= nth0(1, Col2, R) ->
    Moved2 = true ; true),
    Tmp2 = nth0(1, Grid1, R),
    nth0(0, Tmp2, _, T16),
    nth0(0, Tmp3, nth0(1, Col2, R), T16),
    nth0(1, Grid2, _, T17),
    nth0(1, Grid2, Tmp3, T17),
    Y2 is 2,
    (nth0(0, nth0(2, Grid2, R), R) =\= nth0(2, Col2, R) ->
    Moved3 = true ; true),
    Tmp4 = nth0(2, Grid2, R),
    nth0(0, Tmp4, _, T21),
    nth0(0, Tmp5, nth0(2, Col2, R), T21),
    nth0(2, Grid3, _, T22),
    nth0(2, Grid3, Tmp5, T22),
    Y3 is 3,
    (nth0(0, nth0(3, Grid3, R), R) =\= nth0(3, Col2, R) ->
    Moved4 = true ; true),
    Tmp6 = nth0(3, Grid3, R),
    nth0(0, Tmp6, _, T26),
    nth0(0, Tmp7, nth0(3, Col2, R), T26),
    nth0(3, Grid4, _, T27),
    nth0(3, Grid4, Tmp7, T27),
    Y4 is 4,
    (nth0(0, nth0(4, Grid4, R), R) =\= nth0(4, Col2, R) ->
    Moved5 = true ; true),
    Tmp8 = nth0(4, Grid4, R),
    nth0(0, Tmp8, _, T31),
    nth0(0, Tmp9, nth0(4, Col2, R), T31),
    nth0(4, Grid5, _, T32),
    nth0(4, Grid5, Tmp9, T32),
    Y5 is 5,
    X1 is 1,
    reverseRow(getCol(B, 1), Col3),
    slideLeft(Col3, R1),
    get_dict(row, R1, Col4),
    Score2 is (string_concat(Score1, get_dict(gain, R1, R), T), T),
    reverseRow(Col4, Col5),
    Y6 is 0,
    (nth0(1, nth0(0, Grid5, R), R) =\= nth0(0, Col5, R) ->
    Moved6 = true ; true),
    Tmp10 = nth0(0, Grid5, R),
    nth0(1, Tmp10, _, T43),
    nth0(1, Tmp11, nth0(0, Col5, R), T43),
    nth0(0, Grid6, _, T44),
    nth0(0, Grid6, Tmp11, T44),
    Y7 is 1,
    (nth0(1, nth0(1, Grid6, R), R) =\= nth0(1, Col5, R) ->
    Moved7 = true ; true),
    Tmp12 = nth0(1, Grid6, R),
    nth0(1, Tmp12, _, T48),
    nth0(1, Tmp13, nth0(1, Col5, R), T48),
    nth0(1, Grid7, _, T49),
    nth0(1, Grid7, Tmp13, T49),
    Y8 is 2,
    (nth0(1, nth0(2, Grid7, R), R) =\= nth0(2, Col5, R) ->
    Moved8 = true ; true),
    Tmp14 = nth0(2, Grid7, R),
    nth0(1, Tmp14, _, T53),
    nth0(1, Tmp15, nth0(2, Col5, R), T53),
    nth0(2, Grid8, _, T54),
    nth0(2, Grid8, Tmp15, T54),
    Y9 is 3,
    (nth0(1, nth0(3, Grid8, R), R) =\= nth0(3, Col5, R) ->
    Moved9 = true ; true),
    Tmp16 = nth0(3, Grid8, R),
    nth0(1, Tmp16, _, T58),
    nth0(1, Tmp17, nth0(3, Col5, R), T58),
    nth0(3, Grid9, _, T59),
    nth0(3, Grid9, Tmp17, T59),
    Y10 is 4,
    (nth0(1, nth0(4, Grid9, R), R) =\= nth0(4, Col5, R) ->
    Moved10 = true ; true),
    Tmp18 = nth0(4, Grid9, R),
    nth0(1, Tmp18, _, T63),
    nth0(1, Tmp19, nth0(4, Col5, R), T63),
    nth0(4, Grid10, _, T64),
    nth0(4, Grid10, Tmp19, T64),
    Y11 is 5,
    X2 is 2,
    reverseRow(getCol(B, 2), Col6),
    slideLeft(Col6, R2),
    get_dict(row, R2, Col7),
    Score3 is (string_concat(Score2, get_dict(gain, R2, R), T), T),
    reverseRow(Col7, Col8),
    Y12 is 0,
    (nth0(2, nth0(0, Grid10, R), R) =\= nth0(0, Col8, R) ->
    Moved11 = true ; true),
    Tmp20 = nth0(0, Grid10, R),
    nth0(2, Tmp20, _, T75),
    nth0(2, Tmp21, nth0(0, Col8, R), T75),
    nth0(0, Grid11, _, T76),
    nth0(0, Grid11, Tmp21, T76),
    Y13 is 1,
    (nth0(2, nth0(1, Grid11, R), R) =\= nth0(1, Col8, R) ->
    Moved12 = true ; true),
    Tmp22 = nth0(1, Grid11, R),
    nth0(2, Tmp22, _, T80),
    nth0(2, Tmp23, nth0(1, Col8, R), T80),
    nth0(1, Grid12, _, T81),
    nth0(1, Grid12, Tmp23, T81),
    Y14 is 2,
    (nth0(2, nth0(2, Grid12, R), R) =\= nth0(2, Col8, R) ->
    Moved13 = true ; true),
    Tmp24 = nth0(2, Grid12, R),
    nth0(2, Tmp24, _, T85),
    nth0(2, Tmp25, nth0(2, Col8, R), T85),
    nth0(2, Grid13, _, T86),
    nth0(2, Grid13, Tmp25, T86),
    Y15 is 3,
    (nth0(2, nth0(3, Grid13, R), R) =\= nth0(3, Col8, R) ->
    Moved14 = true ; true),
    Tmp26 = nth0(3, Grid13, R),
    nth0(2, Tmp26, _, T90),
    nth0(2, Tmp27, nth0(3, Col8, R), T90),
    nth0(3, Grid14, _, T91),
    nth0(3, Grid14, Tmp27, T91),
    Y16 is 4,
    (nth0(2, nth0(4, Grid14, R), R) =\= nth0(4, Col8, R) ->
    Moved15 = true ; true),
    Tmp28 = nth0(4, Grid14, R),
    nth0(2, Tmp28, _, T95),
    nth0(2, Tmp29, nth0(4, Col8, R), T95),
    nth0(4, Grid15, _, T96),
    nth0(4, Grid15, Tmp29, T96),
    Y17 is 5,
    X3 is 3,
    reverseRow(getCol(B, 3), Col9),
    slideLeft(Col9, R3),
    get_dict(row, R3, Col10),
    Score4 is (string_concat(Score3, get_dict(gain, R3, R), T), T),
    reverseRow(Col10, Col11),
    Y18 is 0,
    (nth0(3, nth0(0, Grid15, R), R) =\= nth0(0, Col11, R) ->
    Moved16 = true ; true),
    Tmp30 = nth0(0, Grid15, R),
    nth0(3, Tmp30, _, T107),
    nth0(3, Tmp31, nth0(0, Col11, R), T107),
    nth0(0, Grid16, _, T108),
    nth0(0, Grid16, Tmp31, T108),
    Y19 is 1,
    (nth0(3, nth0(1, Grid16, R), R) =\= nth0(1, Col11, R) ->
    Moved17 = true ; true),
    Tmp32 = nth0(1, Grid16, R),
    nth0(3, Tmp32, _, T112),
    nth0(3, Tmp33, nth0(1, Col11, R), T112),
    nth0(1, Grid17, _, T113),
    nth0(1, Grid17, Tmp33, T113),
    Y20 is 2,
    (nth0(3, nth0(2, Grid17, R), R) =\= nth0(2, Col11, R) ->
    Moved18 = true ; true),
    Tmp34 = nth0(2, Grid17, R),
    nth0(3, Tmp34, _, T117),
    nth0(3, Tmp35, nth0(2, Col11, R), T117),
    nth0(2, Grid18, _, T118),
    nth0(2, Grid18, Tmp35, T118),
    Y21 is 3,
    (nth0(3, nth0(3, Grid18, R), R) =\= nth0(3, Col11, R) ->
    Moved19 = true ; true),
    Tmp36 = nth0(3, Grid18, R),
    nth0(3, Tmp36, _, T122),
    nth0(3, Tmp37, nth0(3, Col11, R), T122),
    nth0(3, Grid19, _, T123),
    nth0(3, Grid19, Tmp37, T123),
    Y22 is 4,
    (nth0(3, nth0(4, Grid19, R), R) =\= nth0(4, Col11, R) ->
    Moved20 = true ; true),
    Tmp38 = nth0(4, Grid19, R),
    nth0(3, Tmp38, _, T127),
    nth0(3, Tmp39, nth0(4, Col11, R), T127),
    nth0(4, Grid20, _, T128),
    nth0(4, Grid20, Tmp39, T128),
    Y23 is 5,
    X4 is 4,
    reverseRow(getCol(B, 4), Col12),
    slideLeft(Col12, R4),
    get_dict(row, R4, Col13),
    Score5 is (string_concat(Score4, get_dict(gain, R4, R), T), T),
    reverseRow(Col13, Col14),
    Y24 is 0,
    (nth0(4, nth0(0, Grid20, R), R) =\= nth0(0, Col14, R) ->
    Moved21 = true ; true),
    Tmp40 = nth0(0, Grid20, R),
    nth0(4, Tmp40, _, T139),
    nth0(4, Tmp41, nth0(0, Col14, R), T139),
    nth0(0, Grid21, _, T140),
    nth0(0, Grid21, Tmp41, T140),
    Y25 is 1,
    (nth0(4, nth0(1, Grid21, R), R) =\= nth0(1, Col14, R) ->
    Moved22 = true ; true),
    Tmp42 = nth0(1, Grid21, R),
    nth0(4, Tmp42, _, T144),
    nth0(4, Tmp43, nth0(1, Col14, R), T144),
    nth0(1, Grid22, _, T145),
    nth0(1, Grid22, Tmp43, T145),
    Y26 is 2,
    (nth0(4, nth0(2, Grid22, R), R) =\= nth0(2, Col14, R) ->
    Moved23 = true ; true),
    Tmp44 = nth0(2, Grid22, R),
    nth0(4, Tmp44, _, T149),
    nth0(4, Tmp45, nth0(2, Col14, R), T149),
    nth0(2, Grid23, _, T150),
    nth0(2, Grid23, Tmp45, T150),
    Y27 is 3,
    (nth0(4, nth0(3, Grid23, R), R) =\= nth0(3, Col14, R) ->
    Moved24 = true ; true),
    Tmp46 = nth0(3, Grid23, R),
    nth0(4, Tmp46, _, T154),
    nth0(4, Tmp47, nth0(3, Col14, R), T154),
    nth0(3, Grid24, _, T155),
    nth0(3, Grid24, Tmp47, T155),
    Y28 is 4,
    (nth0(4, nth0(4, Grid24, R), R) =\= nth0(4, Col14, R) ->
    Moved25 = true ; true),
    Tmp48 = nth0(4, Grid24, R),
    nth0(4, Tmp48, _, T159),
    nth0(4, Tmp49, nth0(4, Col14, R), T159),
    nth0(4, Grid25, _, T160),
    nth0(4, Grid25, Tmp49, T160),
    Y29 is 5,
    X5 is 5,
    Return1 = map{tag: "MoveResult", board: map{tag: "Board", cells: Grid25}, score: Score5, moved: true},
    R = Return1.

hasMoves(B, R) :-
    Y is 0,
    X is 0,
    (sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 0, 1, _, R) = 0 ->
    Return1 = true ; true),
    (1 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 0, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 1, 1, _, R) ->
    Return2 = true ; true),
    (1 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 0, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 0, 1, _, R) ->
    Return3 = true ; true),
    X1 is 1,
    (sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 1, 1, _, R) = 0 ->
    Return4 = true ; true),
    (2 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 1, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 2, 1, _, R) ->
    Return5 = true ; true),
    (1 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 1, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 1, 1, _, R) ->
    Return6 = true ; true),
    X2 is 2,
    (sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 2, 1, _, R) = 0 ->
    Return7 = true ; true),
    (3 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 2, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 3, 1, _, R) ->
    Return8 = true ; true),
    (1 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 2, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 2, 1, _, R) ->
    Return9 = true ; true),
    X3 is 3,
    (sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 3, 1, _, R) = 0 ->
    Return10 = true ; true),
    (4 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 3, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 4, 1, _, R) ->
    Return11 = true ; true),
    (1 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 3, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 3, 1, _, R) ->
    Return12 = true ; true),
    X4 is 4,
    (sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 4, 1, _, R) = 0 ->
    Return13 = true ; true),
    (5 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 4, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 5, 1, _, R) ->
    Return14 = true ; true),
    (1 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 4, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 4, 1, _, R) ->
    Return15 = true ; true),
    X5 is 5,
    Y1 is 1,
    X6 is 0,
    (sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 0, 1, _, R) = 0 ->
    Return16 = true ; true),
    (1 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 0, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 1, 1, _, R) ->
    Return17 = true ; true),
    (2 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 0, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 0, 1, _, R) ->
    Return18 = true ; true),
    X7 is 1,
    (sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 1, 1, _, R) = 0 ->
    Return19 = true ; true),
    (2 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 1, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 2, 1, _, R) ->
    Return20 = true ; true),
    (2 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 1, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 1, 1, _, R) ->
    Return21 = true ; true),
    X8 is 2,
    (sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 2, 1, _, R) = 0 ->
    Return22 = true ; true),
    (3 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 2, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 3, 1, _, R) ->
    Return23 = true ; true),
    (2 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 2, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 2, 1, _, R) ->
    Return24 = true ; true),
    X9 is 3,
    (sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 3, 1, _, R) = 0 ->
    Return25 = true ; true),
    (4 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 3, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 4, 1, _, R) ->
    Return26 = true ; true),
    (2 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 3, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 3, 1, _, R) ->
    Return27 = true ; true),
    X10 is 4,
    (sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 4, 1, _, R) = 0 ->
    Return28 = true ; true),
    (5 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 4, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 5, 1, _, R) ->
    Return29 = true ; true),
    (2 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 4, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 4, 1, _, R) ->
    Return30 = true ; true),
    X11 is 5,
    Y2 is 2,
    X12 is 0,
    (sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 0, 1, _, R) = 0 ->
    Return31 = true ; true),
    (1 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 0, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 1, 1, _, R) ->
    Return32 = true ; true),
    (3 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 0, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 0, 1, _, R) ->
    Return33 = true ; true),
    X13 is 1,
    (sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 1, 1, _, R) = 0 ->
    Return34 = true ; true),
    (2 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 1, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 2, 1, _, R) ->
    Return35 = true ; true),
    (3 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 1, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 1, 1, _, R) ->
    Return36 = true ; true),
    X14 is 2,
    (sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 2, 1, _, R) = 0 ->
    Return37 = true ; true),
    (3 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 2, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 3, 1, _, R) ->
    Return38 = true ; true),
    (3 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 2, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 2, 1, _, R) ->
    Return39 = true ; true),
    X15 is 3,
    (sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 3, 1, _, R) = 0 ->
    Return40 = true ; true),
    (4 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 3, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 4, 1, _, R) ->
    Return41 = true ; true),
    (3 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 3, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 3, 1, _, R) ->
    Return42 = true ; true),
    X16 is 4,
    (sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 4, 1, _, R) = 0 ->
    Return43 = true ; true),
    (5 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 4, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 5, 1, _, R) ->
    Return44 = true ; true),
    (3 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 4, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 4, 1, _, R) ->
    Return45 = true ; true),
    X17 is 5,
    Y3 is 3,
    X18 is 0,
    (sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 0, 1, _, R) = 0 ->
    Return46 = true ; true),
    (1 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 0, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 1, 1, _, R) ->
    Return47 = true ; true),
    (4 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 0, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 0, 1, _, R) ->
    Return48 = true ; true),
    X19 is 1,
    (sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 1, 1, _, R) = 0 ->
    Return49 = true ; true),
    (2 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 1, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 2, 1, _, R) ->
    Return50 = true ; true),
    (4 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 1, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 1, 1, _, R) ->
    Return51 = true ; true),
    X20 is 2,
    (sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 2, 1, _, R) = 0 ->
    Return52 = true ; true),
    (3 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 2, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 3, 1, _, R) ->
    Return53 = true ; true),
    (4 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 2, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 2, 1, _, R) ->
    Return54 = true ; true),
    X21 is 3,
    (sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 3, 1, _, R) = 0 ->
    Return55 = true ; true),
    (4 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 3, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 4, 1, _, R) ->
    Return56 = true ; true),
    (4 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 3, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 3, 1, _, R) ->
    Return57 = true ; true),
    X22 is 4,
    (sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 4, 1, _, R) = 0 ->
    Return58 = true ; true),
    (5 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 4, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 5, 1, _, R) ->
    Return59 = true ; true),
    (4 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 4, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 4, 1, _, R) ->
    Return60 = true ; true),
    X23 is 5,
    Y4 is 4,
    X24 is 0,
    (sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 0, 1, _, R) = 0 ->
    Return61 = true ; true),
    (1 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 0, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 1, 1, _, R) ->
    Return62 = true ; true),
    (5 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 0, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 5, 1, _, R), 0, 1, _, R) ->
    Return63 = true ; true),
    X25 is 1,
    (sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 1, 1, _, R) = 0 ->
    Return64 = true ; true),
    (2 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 1, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 2, 1, _, R) ->
    Return65 = true ; true),
    (5 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 1, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 5, 1, _, R), 1, 1, _, R) ->
    Return66 = true ; true),
    X26 is 2,
    (sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 2, 1, _, R) = 0 ->
    Return67 = true ; true),
    (3 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 2, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 3, 1, _, R) ->
    Return68 = true ; true),
    (5 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 2, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 5, 1, _, R), 2, 1, _, R) ->
    Return69 = true ; true),
    X27 is 3,
    (sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 3, 1, _, R) = 0 ->
    Return70 = true ; true),
    (4 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 3, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 4, 1, _, R) ->
    Return71 = true ; true),
    (5 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 3, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 5, 1, _, R), 3, 1, _, R) ->
    Return72 = true ; true),
    X28 is 4,
    (sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 4, 1, _, R) = 0 ->
    Return73 = true ; true),
    (5 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 4, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 5, 1, _, R) ->
    Return74 = true ; true),
    (5 < SIZE , sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 4, 1, _, R) = sub_string(sub_string(get_dict(cells, B, R), 5, 1, _, R), 4, 1, _, R) ->
    Return75 = true ; true),
    X29 is 5,
    Y5 is 5,
    Return76 = false,
    R = Return76.

has2048(B, R) :-
    Y is 0,
    X is 0,
    (sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 0, 1, _, R) @>= 2048 ->
    Return1 = true ; true),
    X1 is 1,
    (sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 1, 1, _, R) @>= 2048 ->
    Return2 = true ; true),
    X2 is 2,
    (sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 2, 1, _, R) @>= 2048 ->
    Return3 = true ; true),
    X3 is 3,
    (sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 3, 1, _, R) @>= 2048 ->
    Return4 = true ; true),
    X4 is 4,
    (sub_string(sub_string(get_dict(cells, B, R), 0, 1, _, R), 4, 1, _, R) @>= 2048 ->
    Return5 = true ; true),
    X5 is 5,
    Y1 is 1,
    X6 is 0,
    (sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 0, 1, _, R) @>= 2048 ->
    Return6 = true ; true),
    X7 is 1,
    (sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 1, 1, _, R) @>= 2048 ->
    Return7 = true ; true),
    X8 is 2,
    (sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 2, 1, _, R) @>= 2048 ->
    Return8 = true ; true),
    X9 is 3,
    (sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 3, 1, _, R) @>= 2048 ->
    Return9 = true ; true),
    X10 is 4,
    (sub_string(sub_string(get_dict(cells, B, R), 1, 1, _, R), 4, 1, _, R) @>= 2048 ->
    Return10 = true ; true),
    X11 is 5,
    Y2 is 2,
    X12 is 0,
    (sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 0, 1, _, R) @>= 2048 ->
    Return11 = true ; true),
    X13 is 1,
    (sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 1, 1, _, R) @>= 2048 ->
    Return12 = true ; true),
    X14 is 2,
    (sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 2, 1, _, R) @>= 2048 ->
    Return13 = true ; true),
    X15 is 3,
    (sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 3, 1, _, R) @>= 2048 ->
    Return14 = true ; true),
    X16 is 4,
    (sub_string(sub_string(get_dict(cells, B, R), 2, 1, _, R), 4, 1, _, R) @>= 2048 ->
    Return15 = true ; true),
    X17 is 5,
    Y3 is 3,
    X18 is 0,
    (sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 0, 1, _, R) @>= 2048 ->
    Return16 = true ; true),
    X19 is 1,
    (sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 1, 1, _, R) @>= 2048 ->
    Return17 = true ; true),
    X20 is 2,
    (sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 2, 1, _, R) @>= 2048 ->
    Return18 = true ; true),
    X21 is 3,
    (sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 3, 1, _, R) @>= 2048 ->
    Return19 = true ; true),
    X22 is 4,
    (sub_string(sub_string(get_dict(cells, B, R), 3, 1, _, R), 4, 1, _, R) @>= 2048 ->
    Return20 = true ; true),
    X23 is 5,
    Y4 is 4,
    X24 is 0,
    (sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 0, 1, _, R) @>= 2048 ->
    Return21 = true ; true),
    X25 is 1,
    (sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 1, 1, _, R) @>= 2048 ->
    Return22 = true ; true),
    X26 is 2,
    (sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 2, 1, _, R) @>= 2048 ->
    Return23 = true ; true),
    X27 is 3,
    (sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 3, 1, _, R) @>= 2048 ->
    Return24 = true ; true),
    X28 is 4,
    (sub_string(sub_string(get_dict(cells, B, R), 4, 1, _, R), 4, 1, _, R) @>= 2048 ->
    Return25 = true ; true),
    X29 is 5,
    Y5 is 5,
    Return26 = false,
    R = Return26.

main :-
    SIZE is 4,
    newBoard(Board),
    spawnTile(Board, R),
    get_dict(board, R, Board1),
    get_dict(full, R, Full),
    spawnTile(Board1, R1),
    get_dict(board, R1, Board2),
    get_dict(full, R1, Full1),
    Score is 0,
    draw(Board2, 0, _),
    writeln("Move: "),
    input(Cmd),
    Moved = false,
    (Cmd = "a" ; Cmd = "A" ->
    moveLeft(Board2, 0, M),
    get_dict(board, M, Board3),
    get_dict(score, M, Score1),
    get_dict(moved, M, Moved1) ; true),
    (Cmd = "d" ; Cmd = "D" ->
    moveRight(Board3, Score1, M1),
    get_dict(board, M1, Board4),
    get_dict(score, M1, Score2),
    get_dict(moved, M1, Moved2) ; true),
    (Cmd = "w" ; Cmd = "W" ->
    moveUp(Board4, Score2, M2),
    get_dict(board, M2, Board5),
    get_dict(score, M2, Score3),
    get_dict(moved, M2, Moved3) ; true),
    (Cmd = "s" ; Cmd = "S" ->
    moveDown(Board5, Score3, M3),
    get_dict(board, M3, Board6),
    get_dict(score, M3, Score4),
    get_dict(moved, M3, Moved4) ; true),
    (Cmd = "q" ; Cmd = "Q" ->
true ; true).
