# Code generated by Mochi transpiler 2025-07-26 19:45 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def intSqrt(x) do
    try do
      if x < 2 do
        throw {:return, x}
      end
      left = 1
      right = div(x, 2)
      ans = 0
      while_fun = fn while_fun, ans, left, right ->
        if left <= right do
          mid = left + div((right - left), 2)
          sq = mid * mid
          if sq == x do
            throw {:return, mid}
          end
          if sq < x do
            left = mid + 1
            ans = mid
          else
            right = mid - 1
          end
          while_fun.(while_fun, ans, left, right)
        else
          {ans, left, right}
        end
      end
      {ans, left, right} = try do
          while_fun.(while_fun, ans, left, right)
        catch
          :break -> {ans, left, right}
        end

      throw {:return, ans}
    catch
      {:return, val} -> val
    end
  end
  def sumRecip(n) do
    try do
      s = 1
      limit = Main.intSqrt(n)
      f = 2
      while_fun_2 = fn while_fun_2, f, s ->
        if f <= limit do
          if rem(n, f) == 0 do
            s = s + div(n, f)
            f2 = div(n, f)
            if f2 != f do
              s = s + f
            end
          end
          f = f + 1
          while_fun_2.(while_fun_2, f, s)
        else
          {f, s}
        end
      end
      {f, s} = try do
          while_fun_2.(while_fun_2, f, s)
        catch
          :break -> {f, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      nums = [6, 28, 120, 496, 672, 8128, 30240, 32760, 523776]
      Enum.each(nums, fn n ->
        s = Main.sumRecip(n)
        if rem(s, n) == 0 do
          val = s / n
          perfect = ""
          {perfect} = if val == 1 do
            perfect = "perfect!"
            {perfect}
          else
            {perfect}
          end
          IO.puts(((((("Sum of recipr. factors of " <> to_string(n)) <> " = ") <> to_string(val)) <> " exactly ") <> perfect))
        end
      end)
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
