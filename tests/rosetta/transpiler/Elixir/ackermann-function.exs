# Code generated by Mochi transpiler 2025-07-25 00:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  def ackermann(m, n) do
    try do
      if m == 0 do
        throw {:return, n + 1}
      end
      if n == 0 do
        throw {:return, ackermann(m - 1, 1)}
      end
      throw {:return, ackermann(m - 1, ackermann(m, n - 1))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(("A(0, 0) = " <> to_string(ackermann(0, 0))))
      IO.puts(("A(1, 2) = " <> to_string(ackermann(1, 2))))
      IO.puts(("A(2, 4) = " <> to_string(ackermann(2, 4))))
      IO.puts(("A(3, 4) = " <> to_string(ackermann(3, 4))))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
