# Code generated by Mochi transpiler 2025-08-04 15:00 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def pow10(n) do
    try do
      r = 1.0
      i = 0
      while_fun = fn while_fun, i, r ->
        if i < n do
          r = r * 10.0
          i = i + 1
          while_fun.(while_fun, i, r)
        else
          {i, r}
        end
      end
      {i, r} = try do
          while_fun.(while_fun, i, r)
        catch
          {:break, {i, r}} -> {i, r}
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def formatFloat(f, prec) do
    try do
      scale = pow10(prec)
      scaled = (f * scale) + 0.5
      n = (trunc(scaled))
      digits = Kernel.to_string(n)
      while_fun_2 = fn while_fun_2, digits ->
        if _len(digits) <= prec do
          digits = ("0" <> digits)
          while_fun_2.(while_fun_2, digits)
        else
          digits
        end
      end
      digits = try do
          while_fun_2.(while_fun_2, digits)
        catch
          {:break, digits} -> digits
        end

      intPart = _slice(digits, 0, _len(digits) - prec - (0))
      fracPart = _slice(digits, _len(digits) - prec, _len(digits) - (_len(digits) - prec))
      throw {:return, ((intPart <> ".") <> fracPart)}
    catch
      {:return, val} -> val
    end
  end
  def padLeft(s, w) do
    try do
      res = ""
      n = w - _len(s)
      while_fun_3 = fn while_fun_3, n, res ->
        if n > 0 do
          res = (res <> " ")
          n = n - 1
          while_fun_3.(while_fun_3, n, res)
        else
          {n, res}
        end
      end
      {n, res} = try do
          while_fun_3.(while_fun_3, n, res)
        catch
          {:break, {n, res}} -> {n, res}
        end

      throw {:return, (res <> s)}
    catch
      {:return, val} -> val
    end
  end
  def averageSquareDiff(f, preds) do
    try do
      av = 0.0
      i = 0
      while_fun_4 = fn while_fun_4, av, i ->
        if i < _len(preds) do
          av = av + (Enum.at(preds, i) - f) * (Enum.at(preds, i) - f)
          i = i + 1
          while_fun_4.(while_fun_4, av, i)
        else
          {av, i}
        end
      end
      {av, i} = try do
          while_fun_4.(while_fun_4, av, i)
        catch
          {:break, {av, i}} -> {av, i}
        end

      av = av / (_len(preds))
      throw {:return, av}
    catch
      {:return, val} -> val
    end
  end
  def diversityTheorem(truth, preds) do
    try do
      av = 0.0
      i = 0
      while_fun_5 = fn while_fun_5, av, i ->
        if i < _len(preds) do
          av = av + Enum.at(preds, i)
          i = i + 1
          while_fun_5.(while_fun_5, av, i)
        else
          {av, i}
        end
      end
      {av, i} = try do
          while_fun_5.(while_fun_5, av, i)
        catch
          {:break, {av, i}} -> {av, i}
        end

      av = av / (_len(preds))
      avErr = averageSquareDiff(truth, preds)
      crowdErr = (truth - av) * (truth - av)
      div_ = averageSquareDiff(av, preds)
      throw {:return, [avErr, crowdErr, div_]}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      predsArray = [[48.0, 47.0, 51.0], [48.0, 47.0, 51.0, 42.0]]
      truth = 49.0
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(predsArray) do
          preds = Enum.at(predsArray, i)
          res = diversityTheorem(truth, preds)
          IO.puts(("Average-error : " <> padLeft(formatFloat(Enum.at(res, 0), 3), 6)))
          IO.puts(("Crowd-error   : " <> padLeft(formatFloat(Enum.at(res, 1), 3), 6)))
          IO.puts(("Diversity     : " <> padLeft(formatFloat(Enum.at(res, 2), 3), 6)))
          IO.puts("")
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, i} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
