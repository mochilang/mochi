# Code generated by Mochi transpiler 2025-08-05 01:09 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def ln(x) do
    try do
      k = 0.0
      v = x
      while_fun = fn while_fun, k, v ->
        if v >= 2.0 do
          v = v / 2.0
          k = k + 1.0
          while_fun.(while_fun, k, v)
        else
          {k, v}
        end
      end
      {k, v} = try do
          while_fun.(while_fun, k, v)
        catch
          {:break, {k, v}} -> {k, v}
        end

      while_fun_2 = fn while_fun_2, k, v ->
        if v < 1.0 do
          v = v * 2.0
          k = k - 1.0
          while_fun_2.(while_fun_2, k, v)
        else
          {k, v}
        end
      end
      {k, v} = try do
          while_fun_2.(while_fun_2, k, v)
        catch
          {:break, {k, v}} -> {k, v}
        end

      z = (v - 1.0) / (v + 1.0)
      zpow = z
      sum = z
      i = 3
      while_fun_3 = fn while_fun_3, i, sum, zpow ->
        if i <= 9 do
          zpow = zpow * z * z
          sum = sum + zpow / (:erlang.float(i))
          i = i + 2
          while_fun_3.(while_fun_3, i, sum, zpow)
        else
          {i, sum, zpow}
        end
      end
      {i, sum, zpow} = try do
          while_fun_3.(while_fun_3, i, sum, zpow)
        catch
          {:break, {i, sum, zpow}} -> {i, sum, zpow}
        end

      ln2 = 0.6931471805599453
      throw {:return, (k * ln2) + 2.0 * sum}
    catch
      {:return, val} -> val
    end
  end
  def expf(x) do
    try do
      term = 1.0
      sum = 1.0
      i = 1
      while_fun_4 = fn while_fun_4, i, sum, term ->
        if i < 20 do
          term = term * x / :erlang.float(i)
          sum = sum + term
          i = i + 1
          while_fun_4.(while_fun_4, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun_4.(while_fun_4, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def powf(base, exp) do
    try do
      throw {:return, expf(exp * ln(base))}
    catch
      {:return, val} -> val
    end
  end
  def lanczos7(z) do
    try do
      t = z + 6.5
      x = 0.9999999999998099 + 676.5203681218851 / z - 1259.1392167224028 / (z + 1.0) + 771.3234287776531 / (z + 2.0) - 176.6150291621406 / (z + 3.0) + 12.507343278686905 / (z + 4.0) - 0.13857109526572012 / (z + 5.0) + 0.000009984369578019572 / (z + 6.0) + 0.00000015056327351493116 / (z + 7.0)
      throw {:return, 2.5066282746310002 * powf(t, z - 0.5) * powf(2.718281828459045, -t) * x}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:xs, [-0.5, 0.1, 0.5, 1.0, 1.5, 2.0, 3.0, 10.0, 140.0, 170.0])
    Enum.each(Process.get(:xs), fn x ->
      IO.puts(((Kernel.to_string(x) <> " ") <> Kernel.inspect(lanczos7(x))))
    end)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
