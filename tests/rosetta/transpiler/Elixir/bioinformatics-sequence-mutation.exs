# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def randInt(s, n) do
    try do
      next = rem((s * 1664525 + 1013904223), 2147483647)
      throw {:return, [next, rem(next, n)]}
    catch
      {:return, val} -> val
    end
  end
  def padLeft(s, w) do
    try do
      res = ""
      n = w - _len(s)
      while_fun = fn while_fun, n, res ->
        if n > 0 do
          res = (res <> " ")
          n = n - 1
          while_fun.(while_fun, n, res)
        else
          {n, res}
        end
      end
      {n, res} = try do
          while_fun.(while_fun, n, res)
        catch
          :break -> {n, res}
        end

      throw {:return, (res <> s)}
    catch
      {:return, val} -> val
    end
  end
  def makeSeq(s, le) do
    try do
      bases = "ACGT"
      out = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, out, s ->
        if i < le do
          r = Main.randInt(s, 4)
          s = Enum.at(r, 0)
          idx = trunc(Enum.at(r, 1))
          out = (out <> _slice(bases, idx, idx + 1 - (idx)))
          i = i + 1
          while_fun_2.(while_fun_2, i, out, s)
        else
          {i, out, s}
        end
      end
      {i, out, s} = try do
          while_fun_2.(while_fun_2, i, out, s)
        catch
          :break -> {i, out, s}
        end

      throw {:return, [s, out]}
    catch
      {:return, val} -> val
    end
  end
  def mutate(s, dna, w) do
    try do
      bases = "ACGT"
      le = _len(dna)
      r = Main.randInt(s, le)
      s = Enum.at(r, 0)
      p = trunc(Enum.at(r, 1))
      r = Main.randInt(s, 300)
      s = Enum.at(r, 0)
      x = trunc(Enum.at(r, 1))
      arr = []
      i = 0
      while_fun_3 = fn while_fun_3, arr, i ->
        if i < le do
          arr = (arr ++ [_slice(dna, i, i + 1 - (i))])
          i = i + 1
          while_fun_3.(while_fun_3, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun_3.(while_fun_3, arr, i)
        catch
          :break -> {arr, i}
        end

      {arr, r, s} = if x < Enum.at(w, 0) do
        r = Main.randInt(s, 4)
        s = Enum.at(r, 0)
        idx = trunc(Enum.at(r, 1))
        b = _slice(bases, idx, idx + 1 - (idx))
        IO.puts((((((("  Change @" <> Main.padLeft(Kernel.to_string(p), 3)) <> " '") <> Enum.at(arr, p)) <> "' to '") <> b) <> "'"))
        arr = List.replace_at(arr, p, b)
        {arr, r, s}
      else
        {arr, r, s} = if x < Enum.at(w, 0) + Enum.at(w, 1) do
          IO.puts((((("  Delete @" <> Main.padLeft(Kernel.to_string(p), 3)) <> " '") <> Enum.at(arr, p)) <> "'"))
          j = p
          while_fun_4 = fn while_fun_4, arr, j ->
            if j < _len(arr) - 1 do
              arr = List.replace_at(arr, j, Enum.at(arr, j + 1))
              j = j + 1
              while_fun_4.(while_fun_4, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_4.(while_fun_4, arr, j)
            catch
              :break -> {arr, j}
            end

          arr = _slice(arr, 0, (_len(arr) - 1) - 0)
          {arr, r, s}
        else
          r = Main.randInt(s, 4)
          s = Enum.at(r, 0)
          idx2 = trunc(Enum.at(r, 1))
          b = _slice(bases, idx2, idx2 + 1 - (idx2))
          arr = (arr ++ [""])
          j = _len(arr) - 1
          while_fun_5 = fn while_fun_5, arr, j ->
            if j > p do
              arr = List.replace_at(arr, j, Enum.at(arr, j - 1))
              j = j - 1
              while_fun_5.(while_fun_5, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_5.(while_fun_5, arr, j)
            catch
              :break -> {arr, j}
            end

          IO.puts((((("  Insert @" <> Main.padLeft(Kernel.to_string(p), 3)) <> " '") <> b) <> "'"))
          arr = List.replace_at(arr, p, b)
          {arr, r, s}
        end
        {arr, r, s}
      end
      out = ""
      i = 0
      while_fun_6 = fn while_fun_6, i, out ->
        if i < _len(arr) do
          out = (out <> Enum.at(arr, i))
          i = i + 1
          while_fun_6.(while_fun_6, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_6.(while_fun_6, i, out)
        catch
          :break -> {i, out}
        end

      throw {:return, [s, out]}
    catch
      {:return, val} -> val
    end
  end
  def prettyPrint(dna, rowLen) do
    try do
      IO.puts("SEQUENCE:")
      le = _len(dna)
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < le do
          k = i + rowLen
          {k} = if k > le do
            k = le
            {k}
          else
            {k}
          end
          IO.puts(Kernel.inspect(((Main.padLeft(Kernel.to_string(i), 5) <> ": ") <> _slice(dna, i, k - i))))
          i = i + rowLen
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          :break -> i
        end

      a = 0
      c = 0
      g = 0
      t = 0
      idx = 0
      while_fun_8 = fn while_fun_8, a, c, g, idx, t ->
        if idx < le do
          ch = _slice(dna, idx, idx + 1 - (idx))
          {a, c, g, t} = if ch == "A" do
            a = a + 1
            {a, c, g, t}
          else
            {c, g, t} = if ch == "C" do
              c = c + 1
              {c, g, t}
            else
              {g, t} = if ch == "G" do
                g = g + 1
                {g, t}
              else
                {t} = if ch == "T" do
                  t = t + 1
                  {t}
                else
                  {t}
                end
                {g, t}
              end
              {c, g, t}
            end
            {a, c, g, t}
          end
          idx = idx + 1
          while_fun_8.(while_fun_8, a, c, g, idx, t)
        else
          {a, c, g, idx, t}
        end
      end
      {a, c, g, idx, t} = try do
          while_fun_8.(while_fun_8, a, c, g, idx, t)
        catch
          :break -> {a, c, g, idx, t}
        end

      IO.puts("")
      IO.puts("BASE COUNT:")
      IO.puts(("    A: " <> Main.padLeft(Kernel.to_string(a), 3)))
      IO.puts(("    C: " <> Main.padLeft(Kernel.to_string(c), 3)))
      IO.puts(("    G: " <> Main.padLeft(Kernel.to_string(g), 3)))
      IO.puts(("    T: " <> Main.padLeft(Kernel.to_string(t), 3)))
      IO.puts("    ------")
      IO.puts(("    Î£: " <> Kernel.to_string(le)))
      IO.puts("    ======")
    catch
      {:return, val} -> val
    end
  end
  def wstring(w) do
    try do
      throw {:return, (((((("  Change: " <> Kernel.to_string(Enum.at(w, 0))) <> "\n  Delete: ") <> Kernel.to_string(Enum.at(w, 1))) <> "\n  Insert: ") <> Kernel.to_string(Enum.at(w, 2))) <> "\n")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      seed = 1
      res = Main.makeSeq(seed, 250)
      seed = Enum.at(res, 0)
      dna = Enum.at(res, 1)
      Main.prettyPrint(dna, 50)
      muts = 10
      w = [100, 100, 100]
      IO.puts("\nWEIGHTS (ex 300):")
      IO.puts(Kernel.inspect(Main.wstring(w)))
      IO.puts((("MUTATIONS (" <> Kernel.to_string(muts)) <> "):"))
      i = 0
      while_fun_9 = fn while_fun_9, dna, i, res, seed ->
        if i < muts do
          res = Main.mutate(seed, dna, w)
          seed = Enum.at(res, 0)
          dna = Enum.at(res, 1)
          i = i + 1
          while_fun_9.(while_fun_9, dna, i, res, seed)
        else
          {dna, i, res, seed}
        end
      end
      {dna, i, res, seed} = try do
          while_fun_9.(while_fun_9, dna, i, res, seed)
        catch
          :break -> {dna, i, res, seed}
        end

      IO.puts("")
      Main.prettyPrint(dna, 50)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
