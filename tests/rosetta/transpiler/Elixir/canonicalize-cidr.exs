# Code generated by Mochi transpiler 2025-08-03 22:12 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.monotonic_time(:microsecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def split(s, sep) do
    try do
      parts = []
      cur = ""
      i = 0
      while_fun = fn while_fun, cur, i, parts ->
        if i < _len(s) do
          {cur, i, parts} = if _len(sep) > 0 && i + _len(sep) <= _len(s) && _slice(s, i, i + _len(sep) - (i)) == sep do
            parts = (parts ++ [cur])
            cur = ""
            i = i + _len(sep)
            {cur, i, parts}
          else
            cur = (cur <> _slice(s, i, (i + 1) - i))
            i = i + 1
            {cur, i, parts}
          end
          while_fun.(while_fun, cur, i, parts)
        else
          {cur, i, parts}
        end
      end
      {cur, i, parts} = try do
          while_fun.(while_fun, cur, i, parts)
        catch
          {:break, {cur, i, parts}} -> {cur, i, parts}
        end

      parts = (parts ++ [cur])
      throw {:return, parts}
    catch
      {:return, val} -> val
    end
  end
  def join(xs, sep) do
    try do
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(xs) do
          {res} = if i > 0 do
            res = (res <> sep)
            {res}
          else
            {res}
          end
          res = (res <> Enum.at(xs, i))
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def repeat(ch, n) do
    try do
      out = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, out ->
        if i < n do
          out = (out <> ch)
          i = i + 1
          while_fun_3.(while_fun_3, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_3.(while_fun_3, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def parseIntStr(str) do
    try do
      i = 0
      neg = false
      {i, neg} = if _len(str) > 0 && _slice(str, 0, 1 - 0) == "-" do
        neg = true
        i = 1
        {i, neg}
      else
        {i, neg}
      end
      n = 0
      digits = %{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
      while_fun_4 = fn while_fun_4, i, n ->
        if i < _len(str) do
          n = n * 10 + digits[_slice(str, i, (i + 1) - i)]
          i = i + 1
          while_fun_4.(while_fun_4, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_4.(while_fun_4, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      {n} = if neg do
        n = -n
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def toBinary(n, bits) do
    try do
      b = ""
      val = n
      i = 0
      while_fun_5 = fn while_fun_5, b, i, val ->
        if i < bits do
          b = (Kernel.to_string(rem(val, 2)) <> b)
          val = trunc((div(val, 2)))
          i = i + 1
          while_fun_5.(while_fun_5, b, i, val)
        else
          {b, i, val}
        end
      end
      {b, i, val} = try do
          while_fun_5.(while_fun_5, b, i, val)
        catch
          {:break, {b, i, val}} -> {b, i, val}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def binToInt(bits) do
    try do
      n = 0
      i = 0
      while_fun_6 = fn while_fun_6, i, n ->
        if i < _len(bits) do
          n = n * 2 + Main.parseIntStr(_slice(bits, i, (i + 1) - i))
          i = i + 1
          while_fun_6.(while_fun_6, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_6.(while_fun_6, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def padRight(s, width) do
    try do
      out = s
      while_fun_7 = fn while_fun_7, out ->
        if _len(out) < width do
          out = (out <> " ")
          while_fun_7.(while_fun_7, out)
        else
          out
        end
      end
      out = try do
          while_fun_7.(while_fun_7, out)
        catch
          {:break, out} -> out
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def canonicalize(cidr) do
    try do
      parts = Main.split(cidr, "/")
      dotted = Enum.at(parts, 0)
      size = Main.parseIntStr(Enum.at(parts, 1))
      binParts = []
      {binParts} = Enum.reduce(Main.split(dotted, "."), {binParts}, fn p, {binParts} ->
        binParts = (binParts ++ [Main.toBinary(Main.parseIntStr(p), 8)])
        {binParts}
      end)
      binary = Main.join(binParts, "")
      binary = (_slice(binary, 0, size - 0) <> Main.repeat("0", 32 - size))
      canonParts = []
      i = 0
      while_fun_8 = fn while_fun_8, canonParts, i ->
        if i < _len(binary) do
          canonParts = (canonParts ++ [Kernel.inspect(Main.binToInt(_slice(binary, i, (i + 8) - i)))])
          i = i + 8
          while_fun_8.(while_fun_8, canonParts, i)
        else
          {canonParts, i}
        end
      end
      {canonParts, i} = try do
          while_fun_8.(while_fun_8, canonParts, i)
        catch
          {:break, {canonParts, i}} -> {canonParts, i}
        end

      throw {:return, ((Main.join(canonParts, ".") <> "/") <> Enum.at(parts, 1))}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:tests, ["87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _now()
    Enum.each(Process.get(:tests), fn t ->
      IO.puts(Kernel.inspect(((Main.padRight(t, 18) <> " -> ") <> Main.canonicalize(t))))
    end)
    mem_end = _mem()
    duration_us = max(_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
