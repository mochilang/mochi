# Code generated by Mochi transpiler 2025-08-04 17:03 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def commatize(n) do
    try do
      s = Kernel.to_string(n)
      i = _len(s) - 3
      while_fun = fn while_fun, i, s ->
        if i >= 1 do
          s = ((_slice(s, 0, i - 0) <> ",") <> _slice(s, i, _len(s) - i))
          i = i - 3
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def primeSieve(n) do
    try do
      sieve = []
      i = 0
      while_fun_2 = fn while_fun_2, i, sieve ->
        if i <= n do
          sieve = (sieve ++ [false])
          i = i + 1
          while_fun_2.(while_fun_2, i, sieve)
        else
          {i, sieve}
        end
      end
      {i, sieve} = try do
          while_fun_2.(while_fun_2, i, sieve)
        catch
          {:break, {i, sieve}} -> {i, sieve}
        end

      sieve = List.replace_at(sieve, 0, true)
      sieve = List.replace_at(sieve, 1, true)
      p = 2
      while_fun_3 = fn while_fun_3, p, sieve ->
        if p * p <= n do
          {sieve} = if !Enum.at(sieve, p) do
            m = p * p
            while_fun_4 = fn while_fun_4, m, sieve ->
              if m <= n do
                sieve = List.replace_at(sieve, m, true)
                m = m + p
                while_fun_4.(while_fun_4, m, sieve)
              else
                {m, sieve}
              end
            end
            {m, sieve} = try do
                while_fun_4.(while_fun_4, m, sieve)
              catch
                {:break, {m, sieve}} -> {m, sieve}
              end

            {sieve}
          else
            {sieve}
          end
          p = p + 1
          while_fun_3.(while_fun_3, p, sieve)
        else
          {p, sieve}
        end
      end
      {p, sieve} = try do
          while_fun_3.(while_fun_3, p, sieve)
        catch
          {:break, {p, sieve}} -> {p, sieve}
        end

      throw {:return, sieve}
    catch
      {:return, val} -> val
    end
  end
  def search(xs, target) do
    try do
      low = 0
      high = _len(xs)
      while_fun_5 = fn while_fun_5, high, low ->
        if low < high do
          mid = div((low + high), 2)
          {high, low} = if Enum.at(xs, mid) < target do
            low = mid + 1
            {high, low}
          else
            high = mid
            {high, low}
          end
          while_fun_5.(while_fun_5, high, low)
        else
          {high, low}
        end
      end
      {high, low} = try do
          while_fun_5.(while_fun_5, high, low)
        catch
          {:break, {high, low}} -> {high, low}
        end

      throw {:return, low}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      limit = 45000
      compMap = primeSieve(limit)
      compSums = []
      primeSums = []
      csum = 0
      psum = 0
      i = 2
      while_fun_6 = fn while_fun_6, compSums, csum, i, primeSums, psum ->
        if i <= limit do
          {compSums, csum, primeSums, psum} = if Enum.at(compMap, i) do
            csum = csum + i
            compSums = (compSums ++ [csum])
            {compSums, csum, primeSums, psum}
          else
            psum = psum + i
            primeSums = (primeSums ++ [psum])
            {compSums, csum, primeSums, psum}
          end
          i = i + 1
          while_fun_6.(while_fun_6, compSums, csum, i, primeSums, psum)
        else
          {compSums, csum, i, primeSums, psum}
        end
      end
      {compSums, csum, i, primeSums, psum} = try do
          while_fun_6.(while_fun_6, compSums, csum, i, primeSums, psum)
        catch
          {:break, {compSums, csum, i, primeSums, psum}} -> {compSums, csum, i, primeSums, psum}
        end

      IO.puts("Sum        | Prime Index | Composite Index")
      IO.puts("------------------------------------------")
      idx = 0
      while_fun_7 = fn while_fun_7, idx ->
        if idx < _len(primeSums) do
          s = Enum.at(primeSums, idx)
          j = search(compSums, s)
          if j < _len(compSums) && Enum.at(compSums, j) == s do
            sumStr = String.pad_leading(Kernel.to_string(commatize(s)), 10, " ")
            piStr = String.pad_leading(Kernel.to_string(commatize(idx + 1)), 11, " ")
            ciStr = String.pad_leading(Kernel.to_string(commatize(j + 1)), 15, " ")
            IO.puts(Kernel.inspect(((((sumStr <> " | ") <> piStr) <> " | ") <> ciStr)))
          end
          idx = idx + 1
          while_fun_7.(while_fun_7, idx)
        else
          idx
        end
      end
      idx = try do
          while_fun_7.(while_fun_7, idx)
        catch
          {:break, {idx}} -> idx
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
