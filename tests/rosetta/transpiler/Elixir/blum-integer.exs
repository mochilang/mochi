# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def isPrime(n) do
    try do
      if n < 2 do
        throw {:return, false}
      end
      if rem(n, 2) == 0 do
        throw {:return, n == 2}
      end
      if rem(n, 3) == 0 do
        throw {:return, n == 3}
      end
      d = 5
      while_fun = fn while_fun, d ->
        if d * d <= n do
          if rem(n, d) == 0 do
            throw {:return, false}
          end
          d = d + 2
          if rem(n, d) == 0 do
            throw {:return, false}
          end
          d = d + 4
          while_fun.(while_fun, d)
        else
          d
        end
      end
      d = try do
          while_fun.(while_fun, d)
        catch
          :break -> d
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def firstPrimeFactor(n) do
    try do
      if n == 1 do
        throw {:return, 1}
      end
      if rem(n, 3) == 0 do
        throw {:return, 3}
      end
      if rem(n, 5) == 0 do
        throw {:return, 5}
      end
      inc = [4, 2, 4, 2, 4, 6, 2, 6]
      k = 7
      i = 0
      while_fun_2 = fn while_fun_2, i, k ->
        if k * k <= n do
          if rem(n, k) == 0 do
            throw {:return, k}
          end
          k = k + Enum.at(inc, i)
          i = rem((i + 1), _len(inc))
          while_fun_2.(while_fun_2, i, k)
        else
          {i, k}
        end
      end
      {i, k} = try do
          while_fun_2.(while_fun_2, i, k)
        catch
          :break -> {i, k}
        end

      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def indexOf(s, ch) do
    try do
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(s) do
          if _slice(s, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          :break -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def padLeft(n, width) do
    try do
      s = Kernel.to_string(n)
      while_fun_4 = fn while_fun_4, s ->
        if _len(s) < width do
          s = (" " <> s)
          while_fun_4.(while_fun_4, s)
        else
          s
        end
      end
      s = try do
          while_fun_4.(while_fun_4, s)
        catch
          :break -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def formatFloat(f, prec) do
    try do
      s = Kernel.to_string(f)
      idx = Main.indexOf(s, ".")
      if idx < 0 do
        throw {:return, s}
      end
      need = idx + 1 + prec
      if _len(s) > need do
        throw {:return, _slice(s, 0, need - (0))}
      end
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      blum = []
      counts = [0, 0, 0, 0]
      digits = [1, 3, 7, 9]
      i = 1
      bc = 0
      while_fun_5 = fn while_fun_5, bc, blum, counts, i ->
        if true do
          p = Main.firstPrimeFactor(i)
          {bc, blum, counts} = if rem(p, 4) == 3 do
            q = trunc((div(i, p)))
            {bc, blum, counts} = if q != p && rem(q, 4) == 3 && Main.isPrime(q) do
              {blum} = if bc < 50 do
                blum = (blum ++ [i])
                {blum}
              else
                {blum}
              end
              d = rem(i, 10)
              {counts} = if d == 1 do
                counts = List.replace_at(counts, 0, Enum.at(counts, 0) + 1)
                {counts}
              else
                {counts} = if d == 3 do
                  counts = List.replace_at(counts, 1, Enum.at(counts, 1) + 1)
                  {counts}
                else
                  {counts} = if d == 7 do
                    counts = List.replace_at(counts, 2, Enum.at(counts, 2) + 1)
                    {counts}
                  else
                    {counts} = if d == 9 do
                      counts = List.replace_at(counts, 3, Enum.at(counts, 3) + 1)
                      {counts}
                    else
                      {counts}
                    end
                    {counts}
                  end
                  {counts}
                end
                {counts}
              end
              bc = bc + 1
              if bc == 50 do
                IO.puts("First 50 Blum integers:")
                idx = 0
                while_fun_6 = fn while_fun_6, idx ->
                  if idx < 50 do
                    line = ""
                    j = 0
                    while_fun_7 = fn while_fun_7, idx, j, line ->
                      if j < 10 do
                        line = ((line <> Main.padLeft(Enum.at(blum, idx), 3)) <> " ")
                        idx = idx + 1
                        j = j + 1
                        while_fun_7.(while_fun_7, idx, j, line)
                      else
                        {idx, j, line}
                      end
                    end
                    {idx, j, line} = try do
                        while_fun_7.(while_fun_7, idx, j, line)
                      catch
                        :break -> {idx, j, line}
                      end

                    IO.puts(Kernel.inspect(_slice(line, 0, _len(line) - 1 - (0))))
                    while_fun_6.(while_fun_6, idx)
                  else
                    idx
                  end
                end
                idx = try do
                    while_fun_6.(while_fun_6, idx)
                  catch
                    :break -> idx
                  end

                throw :break
              end
              {bc, blum, counts}
            else
              {bc, blum, counts}
            end
            {bc, blum, counts}
          else
            {bc, blum, counts}
          end
          i = (if rem(i, 5) == 3, do: i + 4, else: i + 2)
          while_fun_5.(while_fun_5, bc, blum, counts, i)
        else
          {bc, blum, counts, i}
        end
      end
      {bc, blum, counts, i} = try do
          while_fun_5.(while_fun_5, bc, blum, counts, i)
        catch
          :break -> {bc, blum, counts, i}
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
