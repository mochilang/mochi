# Code generated by Mochi transpiler 2025-08-04 21:47 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def log10floor(n) do
    try do
      p = 0
      v = n
      while_fun = fn while_fun, p, v ->
        if v >= 10 do
          v = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(v, 10)))
          p = p + 1
          while_fun.(while_fun, p, v)
        else
          {p, v}
        end
      end
      {p, v} = try do
          while_fun.(while_fun, p, v)
        catch
          {:break, {p, v}} -> {p, v}
        end

      throw {:return, p}
    catch
      {:return, val} -> val
    end
  end
  def commatize(n) do
    try do
      s = Kernel.to_string(n)
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(s) do
          {res} = if i > 0 && rem((_len(s) - i), 3) == 0 do
            res = (res <> ",")
            {res}
          else
            {res}
          end
          res = (res <> _slice(s, i, i + 1 - (i)))
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def showDistribution(sizes) do
    try do
      bins = []
      i = 0
      while_fun_3 = fn while_fun_3, bins, i ->
        if i < 12 do
          bins = (bins ++ [0])
          i = i + 1
          while_fun_3.(while_fun_3, bins, i)
        else
          {bins, i}
        end
      end
      {bins, i} = try do
          while_fun_3.(while_fun_3, bins, i)
        catch
          {:break, {bins, i}} -> {bins, i}
        end

      total = 0
      {bins, total} = Enum.reduce(sizes, {bins, total}, fn sz, {bins, total} ->
        total = total + sz
        idx = 0
        {idx} = if sz > 0 do
          idx = log10floor(sz) + 1
          {idx}
        else
          {idx}
        end
        bins = List.replace_at(bins, idx, Enum.at(bins, idx) + 1)
        {bins, total}
      end)
      IO.puts("File size distribution:\n")
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(bins) do
          prefix = "  "
          {prefix} = if i > 0 do
            prefix = "+ "
            {prefix}
          else
            {prefix}
          end
          IO.puts(((((prefix <> "Files less than 10 ^ ") <> Kernel.to_string(i)) <> " bytes : ") <> Kernel.to_string(Enum.at(bins, i))))
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      IO.puts("                                  -----")
      IO.puts(("= Total number of files         : " <> Kernel.inspect(_len(sizes))))
      IO.puts((("  Total size of files           : " <> commatize(total)) <> " bytes"))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      sizes = [0, 1, 9, 10, 99, 100, 1234, 50000, 730000, 8200000]
      showDistribution(sizes)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
