# Code generated by Mochi transpiler 2025-07-25 19:29 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.at(base, start)
      true -> Enum.slice(base, start, len)
    end
  end
  def newPile(d) do
    try do
      b = []
      y = 0
      while_fun = fn while_fun, b, y ->
        if y < d do
          row = []
          x = 0
          while_fun_2 = fn while_fun_2, row, x ->
            if x < d do
              row = (row ++ [0])
              x = x + 1
              while_fun_2.(while_fun_2, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_2.(while_fun_2, row, x)
            catch
              :break -> {row, x}
            end

          b = (b ++ [row])
          y = y + 1
          while_fun.(while_fun, b, y)
        else
          {b, y}
        end
      end
      {b, y} = try do
          while_fun.(while_fun, b, y)
        catch
          :break -> {b, y}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def handlePile(pile, x, y) do
    try do
      {pile} = if Enum.at(Enum.at(pile, y), x) >= 4 do
        pile = List.replace_at(pile, y, List.replace_at(Enum.at(pile, y), x, Enum.at(Enum.at(pile, y), x) - 4))
        {pile} = if y > 0 do
          pile = List.replace_at(pile, y - 1, List.replace_at(Enum.at(pile, y - 1), x, Enum.at(Enum.at(pile, y - 1), x) + 1))
          {pile} = if Enum.at(Enum.at(pile, y - 1), x) >= 4 do
            pile = handlePile(pile, x, y - 1)
            {pile}
          else
            {pile}
          end
          {pile}
        else
          {pile}
        end
        {pile} = if x > 0 do
          pile = List.replace_at(pile, y, List.replace_at(Enum.at(pile, y), x - 1, Enum.at(Enum.at(pile, y), x - 1) + 1))
          {pile} = if Enum.at(Enum.at(pile, y), x - 1) >= 4 do
            pile = handlePile(pile, x - 1, y)
            {pile}
          else
            {pile}
          end
          {pile}
        else
          {pile}
        end
        {pile} = if y < Process.get(:dim) - 1 do
          pile = List.replace_at(pile, y + 1, List.replace_at(Enum.at(pile, y + 1), x, Enum.at(Enum.at(pile, y + 1), x) + 1))
          {pile} = if Enum.at(Enum.at(pile, y + 1), x) >= 4 do
            pile = handlePile(pile, x, y + 1)
            {pile}
          else
            {pile}
          end
          {pile}
        else
          {pile}
        end
        {pile} = if x < Process.get(:dim) - 1 do
          pile = List.replace_at(pile, y, List.replace_at(Enum.at(pile, y), x + 1, Enum.at(Enum.at(pile, y), x + 1) + 1))
          {pile} = if Enum.at(Enum.at(pile, y), x + 1) >= 4 do
            pile = handlePile(pile, x + 1, y)
            {pile}
          else
            {pile}
          end
          {pile}
        else
          {pile}
        end
        pile = handlePile(pile, x, y)
        {pile}
      else
        {pile}
      end
      throw {:return, pile}
    catch
      {:return, val} -> val
    end
  end
  def drawPile(pile, d) do
    try do
      chars = [" ", "░", "▓", "█"]
      row = 0
      while_fun_3 = fn while_fun_3, row ->
        if row < d do
          line = ""
          col = 0
          while_fun_4 = fn while_fun_4, col, line ->
            if col < d do
              v = Enum.at(Enum.at(pile, row), col)
              {v} = if v > 3 do
                v = 3
                {v}
              else
                {v}
              end
              line = (line <> Enum.at(chars, v))
              col = col + 1
              while_fun_4.(while_fun_4, col, line)
            else
              {col, line}
            end
          end
          {col, line} = try do
              while_fun_4.(while_fun_4, col, line)
            catch
              :break -> {col, line}
            end

          IO.puts(line)
          row = row + 1
          while_fun_3.(while_fun_3, row)
        else
          row
        end
      end
      row = try do
          while_fun_3.(while_fun_3, row)
        catch
          :break -> row
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      pile = newPile(16)
      hdim = 7
      pile = List.replace_at(pile, hdim, List.replace_at(Enum.at(pile, hdim), hdim, 16))
      pile = handlePile(pile, hdim, hdim)
      drawPile(pile, 16)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:dim, 16)
  def bench_main() do
    Process.put(:dim, 16)
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
