# Code generated by Mochi transpiler 2025-08-04 22:33 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def commatize(n) do
    try do
      s = Kernel.to_string(n)
      i = rem(_len(s), 3)
      {i} = if i == 0 do
        i = 3
        {i}
      else
        {i}
      end
      out = _slice(s, 0, i - (0))
      while_fun = fn while_fun, i, out ->
        if i < _len(s) do
          out = ((out <> ",") <> _slice(s, i, i + 3 - (i)))
          i = i + 3
          while_fun.(while_fun, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun.(while_fun, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def p(l, n) do
    try do
      ls = Kernel.to_string(l)
      digits = 1
      d = 1
      while_fun_2 = fn while_fun_2, d, digits ->
        if d <= 18 - _len(ls) do
          digits = digits * 10
          d = d + 1
          while_fun_2.(while_fun_2, d, digits)
        else
          {d, digits}
        end
      end
      {d, digits} = try do
          while_fun_2.(while_fun_2, d, digits)
        catch
          {:break, {d, digits}} -> {d, digits}
        end

      ten18 = 1000000000000000000
      count = 0
      i = 0
      probe = 1
      while_fun_3 = fn while_fun_3, count, i, probe ->
        if true do
          probe = probe * 2
          i = i + 1
          {count, i, probe} = if probe >= ten18 do
            while_fun_4 = fn while_fun_4, count, i, probe ->
              if true do
                {probe} = if probe >= ten18 do
                  probe = div(probe, 10)
                  {probe}
                else
                  {probe}
                end
                {count} = if div(probe, digits) == l do
                  count = count + 1
                  {count} = if count >= n do
                    count = count - 1
                    throw {:break, {count, i, probe}}
                    {count}
                  else
                    {count}
                  end
                  {count}
                else
                  {count}
                end
                probe = probe * 2
                i = i + 1
                while_fun_4.(while_fun_4, count, i, probe)
              else
                {count, i, probe}
              end
            end
            {count, i, probe} = try do
                while_fun_4.(while_fun_4, count, i, probe)
              catch
                {:break, {count, i, probe}} -> {count, i, probe}
              end

            {count, i, probe}
          else
            {count, i, probe}
          end
          ps = Kernel.to_string(probe)
          le = _len(ls)
          {le} = if le > _len(ps) do
            le = _len(ps)
            {le}
          else
            {le}
          end
          {count} = if _slice(ps, 0, le - (0)) == ls do
            count = count + 1
            if count >= n do
              throw {:break, {count, i, probe}}
            end
            {count}
          else
            {count}
          end
          while_fun_3.(while_fun_3, count, i, probe)
        else
          {count, i, probe}
        end
      end
      {count, i, probe} = try do
          while_fun_3.(while_fun_3, count, i, probe)
        catch
          {:break, {count, i, probe}} -> {count, i, probe}
        end

      throw {:return, i}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:params, [[12, 1], [12, 2], [123, 45]])
  Process.put(:idx, 0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    while_fun_5 = fn while_fun_5 ->
      if Process.get(:idx) < _len(Process.get(:params)) do
        l = Enum.at(Enum.at(Process.get(:params), Process.get(:idx)), 0)
        m = Enum.at(Enum.at(Process.get(:params), Process.get(:idx)), 1)
        IO.puts(((((("p(" <> Kernel.to_string(l)) <> ", ") <> Kernel.to_string(m)) <> ") = ") <> commatize(p(l, m))))
        Process.put(:idx, Process.get(:idx) + 1)
        while_fun_5.(while_fun_5)
      else
        nil
      end
    end
    try do
      while_fun_5.(while_fun_5)
    catch
      :break -> nil
    end

    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
