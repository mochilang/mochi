# Code generated by Mochi transpiler 2025-07-22 22:49 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  def main() do
    result = ""
    {result} = Enum.reduce((1..(101 - 1)), {result}, fn i, {result} ->
      j = 1
      while_fun = fn while_fun, j ->
        if j * j < i do
          j = j + 1
          while_fun.(while_fun, j)
        else
          j
        end
      end
      j = try do
          while_fun.(while_fun, j)
        catch
          :break -> nil
        end

      result = if j * j == i, do: (result <> "O"), else: (result <> "-")
      {result}
    end)
    IO.puts(result)
  end
end
Main.main()
