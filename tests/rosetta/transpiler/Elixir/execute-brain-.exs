# Code generated by Mochi transpiler 2025-07-31 00:20 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def chr(n) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      if n >= 65 && n < 91 do
        throw {:return, _slice(upper, n - 65, (n - 64) - (n - 65))}
      end
      if n >= 97 && n < 123 do
        throw {:return, _slice(lower, n - 97, (n - 96) - (n - 97))}
      end
      if n == 32 do
        throw {:return, " "}
      end
      if n == 33 do
        throw {:return, "!"}
      end
      if n == 44 do
        throw {:return, ","}
      end
      if n == 13 do
        throw {:return, ""}
      end
      if n == 10 do
        throw {:return, "\n"}
      end
      throw {:return, "?"}
    catch
      {:return, val} -> val
    end
  end
  def bf(dLen, code) do
    try do
      ds = []
      {ds} = Enum.reduce((0..(dLen - 1)), {ds}, fn i, {ds} ->
        ds = (ds ++ [0])
        {ds}
      end)
      dp = 0
      ip = 0
      out = ""
      while_fun = fn while_fun, dp, ds, ip, out ->
        if ip < _len(code) do
          ch = _slice(code, ip, (ip + 1) - ip)
          {dp, ds, ip, out} = if ch == ">" do
            dp = dp + 1
            {dp, ds, ip, out}
          else
            {dp, ds, ip, out} = if ch == "<" do
              dp = dp - 1
              {dp, ds, ip, out}
            else
              {ds, ip, out} = if ch == "+" do
                ds = List.replace_at(ds, dp, Enum.at(ds, dp) + 1)
                {ds, ip, out}
              else
                {ds, ip, out} = if ch == "-" do
                  ds = List.replace_at(ds, dp, Enum.at(ds, dp) - 1)
                  {ds, ip, out}
                else
                  {ip, out} = if ch == "." do
                    out = (out <> Main.chr(Enum.at(ds, dp)))
                    {ip, out}
                  else
                    {ip} = if ch == "," do
                      {ip}
                    else
                      {ip} = if ch == "[" do
                        {ip} = if Enum.at(ds, dp) == 0 do
                          nc = 1
                          while_fun_2 = fn while_fun_2, ip, nc ->
                            if nc > 0 do
                              ip = ip + 1
                              cc = _slice(code, ip, (ip + 1) - ip)
                              {nc} = if cc == "[" do
                                nc = nc + 1
                                {nc}
                              else
                                {nc} = if cc == "]" do
                                  nc = nc - 1
                                  {nc}
                                else
                                  {nc}
                                end
                                {nc}
                              end
                              while_fun_2.(while_fun_2, ip, nc)
                            else
                              {ip, nc}
                            end
                          end
                          {ip, nc} = try do
                              while_fun_2.(while_fun_2, ip, nc)
                            catch
                              {:break, {ip, nc}} -> {ip, nc}
                            end

                          {ip}
                        else
                          {ip}
                        end
                        {ip}
                      else
                        {ip} = if ch == "]" do
                          {ip} = if Enum.at(ds, dp) != 0 do
                            nc = 1
                            while_fun_3 = fn while_fun_3, ip, nc ->
                              if nc > 0 do
                                ip = ip - 1
                                cc = _slice(code, ip, (ip + 1) - ip)
                                {nc} = if cc == "]" do
                                  nc = nc + 1
                                  {nc}
                                else
                                  {nc} = if cc == "[" do
                                    nc = nc - 1
                                    {nc}
                                  else
                                    {nc}
                                  end
                                  {nc}
                                end
                                while_fun_3.(while_fun_3, ip, nc)
                              else
                                {ip, nc}
                              end
                            end
                            {ip, nc} = try do
                                while_fun_3.(while_fun_3, ip, nc)
                              catch
                                {:break, {ip, nc}} -> {ip, nc}
                              end

                            {ip}
                          else
                            {ip}
                          end
                          {ip}
                        else
                          {ip}
                        end
                        {ip}
                      end
                      {ip}
                    end
                    {ip, out}
                  end
                  {ds, ip, out}
                end
                {ds, ip, out}
              end
              {dp, ds, ip, out}
            end
            {dp, ds, ip, out}
          end
          ip = ip + 1
          while_fun.(while_fun, dp, ds, ip, out)
        else
          {dp, ds, ip, out}
        end
      end
      {dp, ds, ip, out} = try do
          while_fun.(while_fun, dp, ds, ip, out)
        catch
          {:break, {dp, ds, ip, out}} -> {dp, ds, ip, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      prog = ((("++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++\n" <> "++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>\n") <> ">+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.\n") <> "<+++++++.--------.<<<<<+.<+++.---.")
      out = Main.bf(10, prog)
      IO.puts(out)
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
