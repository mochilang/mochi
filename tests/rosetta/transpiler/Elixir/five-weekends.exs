# Code generated by Mochi transpiler 2025-08-04 22:33 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def weekday(y, m, d) do
    try do
      yy = y
      mm = m
      {mm, yy} = if mm < 3 do
        mm = mm + 12
        yy = yy - 1
        {mm, yy}
      else
        {mm, yy}
      end
      k = rem(yy, 100)
      j = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(yy, 100)))
      a = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div((13 * (mm + 1)), 5)))
      b = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(k, 4)))
      c = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(j, 4)))
      throw {:return, rem((d + a + k + b + c + 5 * j), 7)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      months31 = [1, 3, 5, 7, 8, 10, 12]
      names = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
      count = 0
      firstY = 0
      firstM = 0
      lastY = 0
      lastM = 0
      haveNone = []
      IO.puts("Months with five weekends:")
      {count, firstM, firstY, haveNone, lastM, lastY} = Enum.reduce((1900..(2101 - 1)), {count, firstM, firstY, haveNone, lastM, lastY}, fn year, {count, firstM, firstY, haveNone, lastM, lastY} ->
        hasOne = false
        {count, firstM, firstY, hasOne, lastM, lastY} = Enum.reduce(months31, {count, firstM, firstY, hasOne, lastM, lastY}, fn m, {count, firstM, firstY, hasOne, lastM, lastY} ->
          {count, firstM, firstY, hasOne, lastM, lastY} = if weekday(year, m, 1) == 6 do
            IO.puts(((("  " <> Kernel.to_string(year)) <> " ") <> Enum.at(names, m - 1)))
            count = count + 1
            hasOne = true
            lastY = year
            lastM = m
            {firstM, firstY} = if firstY == 0 do
              firstY = year
              firstM = m
              {firstM, firstY}
            else
              {firstM, firstY}
            end
            {count, firstM, firstY, hasOne, lastM, lastY}
          else
            {count, firstM, firstY, hasOne, lastM, lastY}
          end
          {count, firstM, firstY, hasOne, lastM, lastY}
        end)
        {haveNone} = if !hasOne do
          haveNone = (haveNone ++ [year])
          {haveNone}
        else
          {haveNone}
        end
        {count, firstM, firstY, haveNone, lastM, lastY}
      end)
      IO.puts((Kernel.inspect(count) <> " total"))
      IO.puts("")
      IO.puts("First five dates of weekends:")
      Enum.each((0..(5 - 1)), fn i ->
        day = 1 + 7 * i
        IO.puts(((((("  Friday, " <> Enum.at(names, firstM - 1)) <> " ") <> Kernel.to_string(day)) <> ", ") <> Kernel.to_string(firstY)))
      end)
      IO.puts("Last five dates of weekends:")
      Enum.each((0..(5 - 1)), fn i ->
        day = 1 + 7 * i
        IO.puts(((((("  Friday, " <> Enum.at(names, lastM - 1)) <> " ") <> Kernel.to_string(day)) <> ", ") <> Kernel.to_string(lastY)))
      end)
      IO.puts("")
      IO.puts("Years with no months with five weekends:")
      Enum.each(haveNone, fn y ->
        IO.puts(("  " <> Kernel.to_string(y)))
      end)
      IO.puts((Kernel.inspect(_len(haveNone)) <> " total"))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
