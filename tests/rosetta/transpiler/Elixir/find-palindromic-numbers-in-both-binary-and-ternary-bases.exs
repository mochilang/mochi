# Code generated by Mochi transpiler 2025-08-04 21:47 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def toBase(n, b) do
    try do
      if n == 0 do
        throw {:return, "0"}
      end
      s = ""
      x = n
      while_fun = fn while_fun, s, x ->
        if x > 0 do
          s = (Kernel.to_string(rem(x, b)) <> s)
          x = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(x, b)))
          while_fun.(while_fun, s, x)
        else
          {s, x}
        end
      end
      {s, x} = try do
          while_fun.(while_fun, s, x)
        catch
          {:break, {s, x}} -> {s, x}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def parseIntStr(str) do
    try do
      i = 0
      neg = false
      {i, neg} = if _len(str) > 0 && String.at(str, 0) == "-" do
        neg = true
        i = 1
        {i, neg}
      else
        {i, neg}
      end
      n = 0
      while_fun_2 = fn while_fun_2, i, n ->
        if i < _len(str) do
          n = n * 10 + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(_slice(str, i, (i + 1) - i))) - ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).("0"))
          i = i + 1
          while_fun_2.(while_fun_2, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_2.(while_fun_2, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      {n} = if neg do
        n = -n
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def parseIntBase(s, b) do
    try do
      n = 0
      i = 0
      while_fun_3 = fn while_fun_3, i, n ->
        if i < _len(s) do
          n = n * b + parseIntStr(_slice(s, i, (i + 1) - i))
          i = i + 1
          while_fun_3.(while_fun_3, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_3.(while_fun_3, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def reverseStr(s) do
    try do
      out = ""
      i = _len(s) - 1
      while_fun_4 = fn while_fun_4, i, out ->
        if i >= 0 do
          out = (out <> _slice(s, i, (i + 1) - i))
          i = i - 1
          while_fun_4.(while_fun_4, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_4.(while_fun_4, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def isPalindrome(s) do
    try do
      throw {:return, s == reverseStr(s)}
    catch
      {:return, val} -> val
    end
  end
  def isPalindromeBin(n) do
    try do
      b = toBase(n, 2)
      throw {:return, isPalindrome(b)}
    catch
      {:return, val} -> val
    end
  end
  def myMin(a, b) do
    try do
      throw {:return, ((if a < b, do: a, else: b))}
    catch
      {:return, val} -> val
    end
  end
  def myMax(a, b) do
    try do
      throw {:return, ((if a > b, do: a, else: b))}
    catch
      {:return, val} -> val
    end
  end
  def reverse3(n) do
    try do
      x = 0
      y = n
      while_fun_5 = fn while_fun_5, x, y ->
        if y != 0 do
          x = x * 3 + (rem(y, 3))
          y = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(y, 3)))
          while_fun_5.(while_fun_5, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun_5.(while_fun_5, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def show(n) do
    try do
      IO.puts(("Decimal : " <> Kernel.to_string(n)))
      IO.puts(("Binary  : " <> toBase(n, 2)))
      IO.puts(("Ternary : " <> toBase(n, 3)))
      IO.puts("")
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts("The first 6 numbers which are palindromic in both binary and ternary are :\n")
      show(0)
      count = 1
      lo = 0
      hi = 1
      pow2 = 1
      pow3 = 1
      while_fun_6 = fn while_fun_6, count, hi, lo, pow2, pow3 ->
        if true do
          i = lo
          while_fun_7 = fn while_fun_7, count, i ->
            if i < hi do
              n = (i * 3 + 1) * pow3 + reverse3(i)
              {count} = if isPalindromeBin(n) do
                show(n)
                count = count + 1
                if count >= 6 do
                  throw {:return, nil}
                end
                {count}
              else
                {count}
              end
              i = i + 1
              while_fun_7.(while_fun_7, count, i)
            else
              {count, i}
            end
          end
          {count, i} = try do
              while_fun_7.(while_fun_7, count, i)
            catch
              {:break, {count, i}} -> {count, i}
            end

          {pow2, pow3} = if i == pow3 do
            pow3 = pow3 * 3
            {pow2, pow3}
          else
            pow2 = pow2 * 4
            {pow2, pow3}
          end
          while_fun_8 = fn while_fun_8, hi, lo, pow2, pow3 ->
            if true do
              while_fun_9 = fn while_fun_9, pow2 ->
                if pow2 <= pow3 do
                  pow2 = pow2 * 4
                  while_fun_9.(while_fun_9, pow2)
                else
                  pow2
                end
              end
              pow2 = try do
                  while_fun_9.(while_fun_9, pow2)
                catch
                  {:break, {pow2}} -> pow2
                end

              lo2 = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div((div(pow2, pow3) - 1), 3)))
              hi2 = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div((div(pow2 * 2, pow3) - 1), 3))) + 1
              lo3 = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(pow3, 3)))
              hi3 = pow3
              {hi, lo, pow2, pow3} = if lo2 >= hi3 do
                pow3 = pow3 * 3
                {hi, lo, pow2, pow3}
              else
                {hi, lo, pow2} = if lo3 >= hi2 do
                  pow2 = pow2 * 4
                  {hi, lo, pow2}
                else
                  lo = myMax(lo2, lo3)
                  hi = myMin(hi2, hi3)
                  throw {:break, {hi, lo, pow2, pow3}}
                  {hi, lo, pow2}
                end
                {hi, lo, pow2, pow3}
              end
              while_fun_8.(while_fun_8, hi, lo, pow2, pow3)
            else
              {hi, lo, pow2, pow3}
            end
          end
          {hi, lo, pow2, pow3} = try do
              while_fun_8.(while_fun_8, hi, lo, pow2, pow3)
            catch
              {:break, {hi, lo, pow2, pow3}} -> {hi, lo, pow2, pow3}
            end

          while_fun_6.(while_fun_6, count, hi, lo, pow2, pow3)
        else
          {count, hi, lo, pow2, pow3}
        end
      end
      {count, hi, lo, pow2, pow3} = try do
          while_fun_6.(while_fun_6, count, hi, lo, pow2, pow3)
        catch
          {:break, {count, hi, lo, pow2, pow3}} -> {count, hi, lo, pow2, pow3}
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
