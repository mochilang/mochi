# Code generated by Mochi transpiler 2025-07-26 19:45 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def add(a, b) do
    try do
      throw {:return, %{re: a.re + b.re, im: a.im + b.im}}
    catch
      {:return, val} -> val
    end
  end
  def mul(a, b) do
    try do
      throw {:return, %{re: a.re * b.re - a.im * b.im, im: a.re * b.im + a.im * b.re}}
    catch
      {:return, val} -> val
    end
  end
  def neg(a) do
    try do
      throw {:return, %{re: -a.re, im: -a.im}}
    catch
      {:return, val} -> val
    end
  end
  def inv(a) do
    try do
      denom = a.re * a.re + a.im * a.im
      throw {:return, %{re: a.re / denom, im: -a.im / denom}}
    catch
      {:return, val} -> val
    end
  end
  def conj(a) do
    try do
      throw {:return, %{re: a.re, im: -a.im}}
    catch
      {:return, val} -> val
    end
  end
  def cstr(a) do
    try do
      s = ("(" <> to_string(a.re))
      s = if a.im >= 0, do: (((s <> "+") <> to_string(a.im)) <> "i)"), else: ((s <> to_string(a.im)) <> "i)")
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:a, %{re: 1.0, im: 1.0})
  Process.put(:b, %{re: 3.14159, im: 1.25})
  def main() do
    mem_start = _mem()
    t_start = _now()
    IO.puts(("a:       " <> Main.cstr(Process.get(:a))))
    IO.puts(("b:       " <> Main.cstr(Process.get(:b))))
    IO.puts(("a + b:   " <> Main.cstr(Main.add(Process.get(:a), Process.get(:b)))))
    IO.puts(("a * b:   " <> Main.cstr(Main.mul(Process.get(:a), Process.get(:b)))))
    IO.puts(("-a:      " <> Main.cstr(Main.neg(Process.get(:a)))))
    IO.puts(("1 / a:   " <> Main.cstr(Main.inv(Process.get(:a)))))
    IO.puts(("aÌ…:       " <> Main.cstr(Main.conj(Process.get(:a)))))
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
