# Code generated by Mochi transpiler 2025-08-04 10:46 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def isLeap(y) do
    try do
      if rem(y, 400) == 0 do
        throw {:return, true}
      end
      if rem(y, 100) == 0 do
        throw {:return, false}
      end
      throw {:return, rem(y, 4) == 0}
    catch
      {:return, val} -> val
    end
  end
  def daysInMonth(y, m) do
    try do
      feb = (if Main.isLeap(y), do: 29, else: 28)
      lengths = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
      throw {:return, Enum.at(lengths, m - 1)}
    catch
      {:return, val} -> val
    end
  end
  def daysBeforeYear(y) do
    try do
      days = 0
      yy = 1970
      while_fun = fn while_fun, days, yy ->
        if yy < y do
          days = days + 365
          {days} = if Main.isLeap(yy) do
            days = days + 1
            {days}
          else
            {days}
          end
          yy = yy + 1
          while_fun.(while_fun, days, yy)
        else
          {days, yy}
        end
      end
      {days, yy} = try do
          while_fun.(while_fun, days, yy)
        catch
          {:break, {days, yy}} -> {days, yy}
        end

      throw {:return, days}
    catch
      {:return, val} -> val
    end
  end
  def daysBeforeMonth(y, m) do
    try do
      days = 0
      mm = 1
      while_fun_2 = fn while_fun_2, days, mm ->
        if mm < m do
          days = days + Main.daysInMonth(y, mm)
          mm = mm + 1
          while_fun_2.(while_fun_2, days, mm)
        else
          {days, mm}
        end
      end
      {days, mm} = try do
          while_fun_2.(while_fun_2, days, mm)
        catch
          {:break, {days, mm}} -> {days, mm}
        end

      throw {:return, days}
    catch
      {:return, val} -> val
    end
  end
  def epochSeconds(y, m, d, h, mi) do
    try do
      days = Main.daysBeforeYear(y) + Main.daysBeforeMonth(y, m) + (d - 1)
      throw {:return, days * 86400 + h * 3600 + mi * 60}
    catch
      {:return, val} -> val
    end
  end
  def fromEpoch(sec) do
    try do
      days = div(sec, 86400)
      rem = rem(sec, 86400)
      y = 1970
      while_fun_3 = fn while_fun_3, days, y ->
        if true do
          dy = (if Main.isLeap(y), do: 366, else: 365)
          {days, y} = if days >= dy do
            days = days - dy
            y = y + 1
            {days, y}
          else
            throw {:break, {days, y}}
            {days, y}
          end
          while_fun_3.(while_fun_3, days, y)
        else
          {days, y}
        end
      end
      {days, y} = try do
          while_fun_3.(while_fun_3, days, y)
        catch
          {:break, {days, y}} -> {days, y}
        end

      m = 1
      while_fun_4 = fn while_fun_4, days, m ->
        if true do
          dim = Main.daysInMonth(y, m)
          {days, m} = if days >= dim do
            days = days - dim
            m = m + 1
            {days, m}
          else
            throw {:break, {days, m}}
            {days, m}
          end
          while_fun_4.(while_fun_4, days, m)
        else
          {days, m}
        end
      end
      {days, m} = try do
          while_fun_4.(while_fun_4, days, m)
        catch
          {:break, {days, m}} -> {days, m}
        end

      d = days + 1
      h = div(rem, 3600)
      mi = div((rem(rem, 3600)), 60)
      throw {:return, [y, m, d, h, mi]}
    catch
      {:return, val} -> val
    end
  end
  def pad2(n) do
    try do
      throw {:return, ((if n < 10, do: ("0" <> Kernel.to_string(n)), else: Kernel.to_string(n)))}
    catch
      {:return, val} -> val
    end
  end
  def absInt(n) do
    try do
      throw {:return, ((if n < 0, do: -n, else: n))}
    catch
      {:return, val} -> val
    end
  end
  def formatDate(parts, offset, abbr) do
    try do
      y = Enum.at(parts, 0)
      m = Enum.at(parts, 1)
      d = Enum.at(parts, 2)
      h = Enum.at(parts, 3)
      mi = Enum.at(parts, 4)
      sign = "+"
      {sign} = if offset < 0 do
        sign = "-"
        {sign}
      else
        {sign}
      end
      off = div(Main.absInt(offset), 60)
      offh = Main.pad2(div(off, 60))
      offm = Main.pad2(rem(off, 60))
      throw {:return, ((((((((((((((Kernel.to_string(y) <> "-") <> Main.pad2(m)) <> "-") <> Main.pad2(d)) <> " ") <> Main.pad2(h)) <> ":") <> Main.pad2(mi)) <> ":00 ") <> sign) <> offh) <> offm) <> " ") <> abbr)}
    catch
      {:return, val} -> val
    end
  end
  def parseIntStr(str) do
    try do
      i = 0
      neg = false
      {i, neg} = if _len(str) > 0 && _slice(str, 0, 1 - (0)) == "-" do
        neg = true
        i = 1
        {i, neg}
      else
        {i, neg}
      end
      n = 0
      digits = %{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
      while_fun_5 = fn while_fun_5, i, n ->
        if i < _len(str) do
          n = n * 10 + digits[_slice(str, i, i + 1 - (i))]
          i = i + 1
          while_fun_5.(while_fun_5, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_5.(while_fun_5, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      {n} = if neg do
        n = -n
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def indexOf(s, ch) do
    try do
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(s) do
          if _slice(s, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, i} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def parseTime(s) do
    try do
      c = Main.indexOf(s, ":")
      h = Main.parseIntStr(_slice(s, 0, c - (0)))
      mi = Main.parseIntStr(_slice(s, c + 1, c + 3 - (c + 1)))
      ampm = _slice(s, _len(s) - 2, _len(s) - (_len(s) - 2))
      hh = h
      {hh} = if ampm == "pm" && h != 12 do
        hh = h + 12
        {hh}
      else
        {hh}
      end
      {hh} = if ampm == "am" && h == 12 do
        hh = 0
        {hh}
      else
        {hh}
      end
      throw {:return, [hh, mi]}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      input = "March 7 2009 7:30pm EST"
      IO.puts(("Input:              " <> input))
      parts = []
      cur = ""
      i = 0
      while_fun_7 = fn while_fun_7, cur, i, parts ->
        if i < _len(input) do
          ch = _slice(input, i, i + 1 - (i))
          {cur, parts} = if ch == " " do
            {cur, parts} = if _len(cur) > 0 do
              parts = (parts ++ [cur])
              cur = ""
              {cur, parts}
            else
              {cur, parts}
            end
            {cur, parts}
          else
            cur = (cur <> ch)
            {cur, parts}
          end
          i = i + 1
          while_fun_7.(while_fun_7, cur, i, parts)
        else
          {cur, i, parts}
        end
      end
      {cur, i, parts} = try do
          while_fun_7.(while_fun_7, cur, i, parts)
        catch
          {:break, {cur, i, parts}} -> {cur, i, parts}
        end

      {parts} = if _len(cur) > 0 do
        parts = (parts ++ [cur])
        {parts}
      else
        {parts}
      end
      month = Process.get(:months)[Enum.at(parts, 0)]
      day = Main.parseIntStr(Enum.at(parts, 1))
      year = Main.parseIntStr(Enum.at(parts, 2))
      tm = Main.parseTime(Enum.at(parts, 3))
      hour = Enum.at(tm, 0)
      minute = Enum.at(tm, 1)
      tz = Enum.at(parts, 4)
      zoneOffsets = %{"EST" => -18000, "EDT" => -14400, "MST" => -25200}
      local = Main.epochSeconds(year, month, day, hour, minute)
      utc = local - zoneOffsets[tz]
      utc12 = utc + 43200
      startDST = Main.epochSeconds(2009, 3, 8, 7, 0)
      offEast = -18000
      {offEast} = if utc12 >= startDST do
        offEast = -14400
        {offEast}
      else
        {offEast}
      end
      eastParts = Main.fromEpoch(utc12 + offEast)
      eastAbbr = "EST"
      {eastAbbr} = if offEast == (-14400) do
        eastAbbr = "EDT"
        {eastAbbr}
      else
        {eastAbbr}
      end
      IO.puts(("+12 hrs:            " <> Main.formatDate(eastParts, offEast, eastAbbr)))
      offAZ = -25200
      azParts = Main.fromEpoch(utc12 + offAZ)
      IO.puts(("+12 hrs in Arizona: " <> Main.formatDate(azParts, offAZ, "MST")))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:months, %{"January" => 1, "February" => 2, "March" => 3, "April" => 4, "May" => 5, "June" => 6, "July" => 7, "August" => 8, "September" => 9, "October" => 10, "November" => 11, "December" => 12})
  def bench_main() do
    Process.put(:months, %{"January" => 1, "February" => 2, "March" => 3, "April" => 4, "May" => 5, "June" => 6, "July" => 7, "August" => 8, "September" => 9, "October" => 10, "November" => 11, "December" => 12})
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
