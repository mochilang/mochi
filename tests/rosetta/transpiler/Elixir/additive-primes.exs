# Code generated by Mochi transpiler 2025-07-25 17:35 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  def isPrime(n) do
    try do
      if n < 2 do
        throw {:return, false}
      end
      if rem(n, 2) == 0 do
        throw {:return, n == 2}
      end
      if rem(n, 3) == 0 do
        throw {:return, n == 3}
      end
      d = 5
      while_fun = fn while_fun, d ->
        if d * d <= n do
          if rem(n, d) == 0 do
            throw {:return, false}
          end
          d = d + 2
          if rem(n, d) == 0 do
            throw {:return, false}
          end
          d = d + 4
          while_fun.(while_fun, d)
        else
          d
        end
      end
      d = try do
          while_fun.(while_fun, d)
        catch
          :break -> d
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def sumDigits(n) do
    try do
      s = 0
      x = n
      while_fun_2 = fn while_fun_2, s, x ->
        if x > 0 do
          s = s + rem(x, 10)
          x = (div(x, 10))
          while_fun_2.(while_fun_2, s, x)
        else
          {s, x}
        end
      end
      {s, x} = try do
          while_fun_2.(while_fun_2, s, x)
        catch
          :break -> {s, x}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def pad(n) do
    try do
      if n < 10 do
        throw {:return, ("  " <> to_string(n))}
      end
      if n < 100 do
        throw {:return, (" " <> to_string(n))}
      end
      throw {:return, to_string(n)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts("Additive primes less than 500:")
      count = 0
      line = ""
      lineCount = 0
      i = 2
      while_fun_3 = fn while_fun_3, count, i, line, lineCount ->
        if i < 500 do
          if isPrime(i) && isPrime(sumDigits(i)) do
            count = count + 1
            line = ((line <> pad(i)) <> "  ")
            lineCount = lineCount + 1
            if lineCount == 10 do
              IO.puts(Kernel.to_string(String.slice(line, 0, String.length(line) - 2 - (0))))
              line = ""
              lineCount = 0
            end
          end
          i = if i > 2, do: i + 2, else: i + 1
          while_fun_3.(while_fun_3, count, i, line, lineCount)
        else
          {count, i, line, lineCount}
        end
      end
      {count, i, line, lineCount} = try do
          while_fun_3.(while_fun_3, count, i, line, lineCount)
        catch
          :break -> {count, i, line, lineCount}
        end

      if lineCount > 0 do
        IO.puts(Kernel.to_string(String.slice(line, 0, String.length(line) - 2 - (0))))
      end
      IO.puts((to_string(count) <> " additive primes found."))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
