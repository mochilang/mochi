# Code generated by Mochi transpiler 2025-07-24 20:52 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defmodule NetHelper do
    def lookup_host(host) do
      h = to_charlist(host)
      {addrs, err} = case :inet_res.getbyname(h, :a) do
        {:ok, {:hostent, _, _, _, _, addrs}} -> {Enum.map(addrs, fn a -> to_string(:inet.ntoa(a)) end), nil}
        {:error, reason} -> {[], Atom.to_string(reason)}
      end
      addrs6 = case :inet_res.getbyname(h, :aaaa) do
        {:ok, {:hostent, _, _, _, _, addrs}} -> Enum.map(addrs, fn a -> to_string(:inet.ntoa(a)) end)
        _ -> []
      end
      [addrs ++ addrs6, err]
    end
  end
  Process.put(:res, NetHelper.lookup_host("www.kame.net"))
  Process.put(:addrs, Enum.at(Process.get(:res), 0))
  Process.put(:err, Enum.at(Process.get(:res), 1))
  def main() do
    if Process.get(:err) == nil do
      IO.inspect(Kernel.inspect(Process.get(:addrs)))
    else
      IO.inspect(Process.get(:err))
    end
  end
end
Main.main()
