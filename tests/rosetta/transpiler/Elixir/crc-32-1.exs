# Code generated by Mochi transpiler 2025-07-28 11:44 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  def xor(a, b) do
    try do
      res = 0
      bit = 1
      x = a
      y = b
      while_fun = fn while_fun, bit, res, x, y ->
        if x > 0 || y > 0 do
          abit = rem(x, 2)
          bbit = rem(y, 2)
          {res} = if abit != bbit do
            res = res + bit
            {res}
          else
            {res}
          end
          x = div(x, 2)
          y = div(y, 2)
          bit = bit * 2
          while_fun.(while_fun, bit, res, x, y)
        else
          {bit, res, x, y}
        end
      end
      {bit, res, x, y} = try do
          while_fun.(while_fun, bit, res, x, y)
        catch
          {:break, {bit, res, x, y}} -> {bit, res, x, y}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def rshift(x, n) do
    try do
      v = x
      i = 0
      while_fun_2 = fn while_fun_2, i, v ->
        if i < n do
          v = div(v, 2)
          i = i + 1
          while_fun_2.(while_fun_2, i, v)
        else
          {i, v}
        end
      end
      {i, v} = try do
          while_fun_2.(while_fun_2, i, v)
        catch
          {:break, {i, v}} -> {i, v}
        end

      throw {:return, v}
    catch
      {:return, val} -> val
    end
  end
  def ord(ch) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      idx = case :binary.match(upper, ch) do
  :nomatch -> -1
  t -> elem(t, 0)
end
      if idx >= 0 do
        throw {:return, 65 + idx}
      end
      idx = case :binary.match(lower, ch) do
  :nomatch -> -1
  t -> elem(t, 0)
end
      if idx >= 0 do
        throw {:return, 97 + idx}
      end
      if ch == " " do
        throw {:return, 32}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def toHex(n) do
    try do
      digits = "0123456789ABCDEF"
      if n == 0 do
        throw {:return, "0"}
      end
      v = n
      out = ""
      while_fun_3 = fn while_fun_3, out, v ->
        if v > 0 do
          d = rem(v, 16)
          out = (_slice(digits, d, (d + 1) - d) <> out)
          v = div(v, 16)
          while_fun_3.(while_fun_3, out, v)
        else
          {out, v}
        end
      end
      {out, v} = try do
          while_fun_3.(while_fun_3, out, v)
        catch
          {:break, {out, v}} -> {out, v}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def crc32Table() do
    try do
      table = []
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < 256 do
          word = i
          j = 0
          while_fun_5 = fn while_fun_5, j, word ->
            if j < 8 do
              word = (if rem(word, 2) == 1, do: Main.xor(Main.rshift(word, 1), 3988292384), else: Main.rshift(word, 1))
              j = j + 1
              while_fun_5.(while_fun_5, j, word)
            else
              {j, word}
            end
          end
          {j, word} = try do
              while_fun_5.(while_fun_5, j, word)
            catch
              {:break, {j, word}} -> {j, word}
            end

          table = (table ++ [word])
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, i} -> i
        end

      throw {:return, table}
    catch
      {:return, val} -> val
    end
  end
  def crc32(s) do
    try do
      crc = 4294967295
      i = 0
      while_fun_6 = fn while_fun_6, crc, i ->
        if i < _len(s) do
          c = Main.ord(_slice(s, i, (i + 1) - i))
          idx = Main.xor(rem(crc, 256), c)
          crc = Main.xor(Enum.at(Process.get(:table), idx), Main.rshift(crc, 8))
          i = i + 1
          while_fun_6.(while_fun_6, crc, i)
        else
          {crc, i}
        end
      end
      {crc, i} = try do
          while_fun_6.(while_fun_6, crc, i)
        catch
          {:break, {crc, i}} -> {crc, i}
        end

      throw {:return, 4294967295 - crc}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      s = "The quick brown fox jumps over the lazy dog"
      result = Main.crc32(s)
      hex = Main.toHex(result)
      IO.puts(hex)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Process.put(:table, Main.crc32Table())
Main.bench_main()
