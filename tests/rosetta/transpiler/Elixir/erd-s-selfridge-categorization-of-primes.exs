# Code generated by Mochi transpiler 2025-07-31 00:20 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def generatePrimes(n) do
    try do
      primes = [2]
      cand = 3
      while_fun = fn while_fun, cand, primes ->
        if _len(primes) < n do
          isP = true
          i = 0
          while_fun_2 = fn while_fun_2, i, isP ->
            if i < _len(primes) do
              p = Enum.at(primes, i)
              if p * p > cand do
                throw {:break, {i, isP}}
              end
              {isP} = if rem(cand, p) == 0 do
                isP = false
                throw {:break, {i, isP}}
                {isP}
              else
                {isP}
              end
              i = i + 1
              while_fun_2.(while_fun_2, i, isP)
            else
              {i, isP}
            end
          end
          {i, isP} = try do
              while_fun_2.(while_fun_2, i, isP)
            catch
              {:break, {i, isP}} -> {i, isP}
            end

          {primes} = if isP do
            primes = (primes ++ [cand])
            {primes}
          else
            {primes}
          end
          cand = cand + 2
          while_fun.(while_fun, cand, primes)
        else
          {cand, primes}
        end
      end
      {cand, primes} = try do
          while_fun.(while_fun, cand, primes)
        catch
          {:break, {cand, primes}} -> {cand, primes}
        end

      throw {:return, primes}
    catch
      {:return, val} -> val
    end
  end
  def primeFactors(n, primes) do
    try do
      factors = []
      num = n
      i = 0
      while_fun_3 = fn while_fun_3, factors, i, num ->
        if i < _len(primes) && Enum.at(primes, i) * Enum.at(primes, i) <= num do
          p = Enum.at(primes, i)
          while_fun_4 = fn while_fun_4, factors, num ->
            if rem(num, p) == 0 do
              factors = (factors ++ [p])
              num = num / p
              while_fun_4.(while_fun_4, factors, num)
            else
              {factors, num}
            end
          end
          {factors, num} = try do
              while_fun_4.(while_fun_4, factors, num)
            catch
              {:break, {factors, num}} -> {factors, num}
            end

          i = i + 1
          while_fun_3.(while_fun_3, factors, i, num)
        else
          {factors, i, num}
        end
      end
      {factors, i, num} = try do
          while_fun_3.(while_fun_3, factors, i, num)
        catch
          {:break, {factors, i, num}} -> {factors, i, num}
        end

      {factors} = if num > 1 do
        factors = (factors ++ [num])
        {factors}
      else
        {factors}
      end
      throw {:return, factors}
    catch
      {:return, val} -> val
    end
  end
  def cat(p, primes) do
    try do
      if Map.has_key?(Process.get(:prevCats), p) do
        throw {:return, Process.get(:prevCats)[p]}
      end
      pf = Main.primeFactors(p + 1, primes)
      all23 = true
      {all23} = Enum.reduce(pf, {all23}, fn f, {all23} ->
        try do
          {all23} = if f != 2 && f != 3 do
            all23 = false
            throw :break
            {all23}
          else
            {all23}
          end
        catch
          :continue -> {all23}
        end
        {all23}
      end)
      if all23 do
        Process.put(:prevCats, Map.put(Process.get(:prevCats), p, 1))
        throw {:return, 1}
      end
      {pf} = if p > 2 do
        unique = []
        last = -1
        {last, unique} = Enum.reduce(pf, {last, unique}, fn f, {last, unique} ->
          {last, unique} = if f != last do
            unique = (unique ++ [f])
            last = f
            {last, unique}
          else
            {last, unique}
          end
          {last, unique}
        end)
        pf = unique
        {pf}
      else
        {pf}
      end
      c = 2
      while_fun_5 = fn while_fun_5, c ->
        if c <= 11 do
          ok = true
          {ok} = Enum.reduce(pf, {ok}, fn f, {ok} ->
            try do
              {ok} = if Main.cat(f, primes) >= c do
                ok = false
                throw {:break, {c}}
                {ok}
              else
                {ok}
              end
            catch
              :continue -> {ok}
            end
            {ok}
          end)
          if ok do
            Process.put(:prevCats, Map.put(Process.get(:prevCats), p, c))
            throw {:return, c}
          end
          c = c + 1
          while_fun_5.(while_fun_5, c)
        else
          c
        end
      end
      c = try do
          while_fun_5.(while_fun_5, c)
        catch
          {:break, c} -> c
        end

      Process.put(:prevCats, Map.put(Process.get(:prevCats), p, 12))
      throw {:return, 12}
    catch
      {:return, val} -> val
    end
  end
  def padLeft(n, width) do
    try do
      s = Kernel.to_string(n)
      while_fun_6 = fn while_fun_6, s ->
        if _len(s) < width do
          s = (" " <> s)
          while_fun_6.(while_fun_6, s)
        else
          s
        end
      end
      s = try do
          while_fun_6.(while_fun_6, s)
        catch
          {:break, s} -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      primes = Main.generatePrimes(1000)
      es = []
      {es} = Enum.reduce((0..(12 - 1)), {es}, fn _, {es} ->
        es = (es ++ [[]])
        {es}
      end)
      IO.puts("First 200 primes:\n")
      idx = 0
      while_fun_7 = fn while_fun_7, es, idx ->
        if idx < 200 do
          p = Enum.at(primes, idx)
          c = Main.cat(p, primes)
          es = List.replace_at(es, c - 1, (Enum.at(es, c - 1) ++ [p]))
          idx = idx + 1
          while_fun_7.(while_fun_7, es, idx)
        else
          {es, idx}
        end
      end
      {es, idx} = try do
          while_fun_7.(while_fun_7, es, idx)
        catch
          {:break, {es, idx}} -> {es, idx}
        end

      c = 1
      while_fun_8 = fn while_fun_8, c ->
        if c <= 6 do
          if _len(Enum.at(es, c - 1)) > 0 do
            IO.puts((("Category " <> Kernel.to_string(c)) <> ":"))
            IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Enum.at(es, c - 1)])), ",", " "))
            IO.puts("")
          end
          c = c + 1
          while_fun_8.(while_fun_8, c)
        else
          c
        end
      end
      c = try do
          while_fun_8.(while_fun_8, c)
        catch
          {:break, c} -> c
        end

      IO.puts("First thousand primes:\n")
      while_fun_9 = fn while_fun_9, es, idx ->
        if idx < 1000 do
          p = Enum.at(primes, idx)
          cv = Main.cat(p, primes)
          es = List.replace_at(es, cv - 1, (Enum.at(es, cv - 1) ++ [p]))
          idx = idx + 1
          while_fun_9.(while_fun_9, es, idx)
        else
          {es, idx}
        end
      end
      {es, idx} = try do
          while_fun_9.(while_fun_9, es, idx)
        catch
          {:break, {es, idx}} -> {es, idx}
        end

      c = 1
      while_fun_10 = fn while_fun_10, c ->
        if c <= 12 do
          e = Enum.at(es, c - 1)
          if _len(e) > 0 do
            line = ((((((("Category " <> Main.padLeft(c, 2)) <> ": First = ") <> Main.padLeft(Enum.at(e, 0), 7)) <> "  Last = ") <> Main.padLeft(Enum.at(e, _len(e) - 1), 8)) <> "  Count = ") <> Main.padLeft(_len(e), 6))
            IO.puts(line)
          end
          c = c + 1
          while_fun_10.(while_fun_10, c)
        else
          c
        end
      end
      c = try do
          while_fun_10.(while_fun_10, c)
        catch
          {:break, c} -> c
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:prevCats, %{})
end
Main.main()
