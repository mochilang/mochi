# Code generated by Mochi transpiler 2025-08-04 21:47 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def endsWith(s, suf) do
    try do
      throw {:return, ((if _len(s) < _len(suf), do: false, else: _slice(s, _len(s) - _len(suf), _len(s) - (_len(s) - _len(suf))) == suf))}
    catch
      {:return, val} -> val
    end
  end
  def lastIndexOf(s, sub) do
    try do
      idx = 0 - 1
      i = 0
      while_fun = fn while_fun, i, idx ->
        if i <= _len(s) - _len(sub) do
          {idx} = if _slice(s, i, i + _len(sub) - (i)) == sub do
            idx = i
            {idx}
          else
            {idx}
          end
          i = i + 1
          while_fun.(while_fun, i, idx)
        else
          {i, idx}
        end
      end
      {i, idx} = try do
          while_fun.(while_fun, i, idx)
        catch
          {:break, {i, idx}} -> {i, idx}
        end

      throw {:return, idx}
    catch
      {:return, val} -> val
    end
  end
  def fileExtInList(filename) do
    try do
      fl = String.downcase(filename)
      Enum.each(Process.get(:extensions), fn ext ->
        ext2 = ("." <> String.downcase(ext))
        if endsWith(fl, ext2) do
          throw {:return, [true, ext]}
        end
      end)
      idx = lastIndexOf(filename, ".")
      if idx != 0 - 1 do
        t = _slice(filename, idx + 1, _len(filename) - (idx + 1))
        if t != "" do
          throw {:return, [false, t]}
        end
        throw {:return, [false, "<empty>"]}
      end
      throw {:return, [false, "<none>"]}
    catch
      {:return, val} -> val
    end
  end
  def pad(s, w) do
    try do
      t = s
      while_fun_2 = fn while_fun_2, t ->
        if _len(t) < w do
          t = (t <> " ")
          while_fun_2.(while_fun_2, t)
        else
          t
        end
      end
      t = try do
          while_fun_2.(while_fun_2, t)
        catch
          {:break, {t}} -> t
        end

      throw {:return, t}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts("The listed extensions are:")
      IO.puts(Kernel.inspect(Process.get(:extensions)))
      tests = ["MyData.a##", "MyData.tar.Gz", "MyData.gzip", "MyData.7z.backup", "MyData...", "MyData", "MyData_v1.0.tar.bz2", "MyData_v1.0.bz2"]
      Enum.each(tests, fn t ->
        res = fileExtInList(t)
        ok = Enum.at(res, 0)
        ext = Enum.at(res, 1)
        IO.puts(Kernel.inspect((((((pad(t, 20) <> " => ") <> Kernel.to_string(ok)) <> "  (extension = ") <> ext) <> ")")))
      end)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:extensions, ["zip", "rar", "7z", "gz", "archive", "A##", "tar.bz2"])
  def bench_main() do
    Process.put(:extensions, ["zip", "rar", "7z", "gz", "archive", "A##", "tar.bz2"])
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
