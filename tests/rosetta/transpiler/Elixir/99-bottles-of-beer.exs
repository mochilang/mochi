# Code generated by Mochi transpiler 2025-07-25 00:22 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  def bottles(n) do
    try do
      if n == 0 do
        throw {:return, "No more bottles"}
      end
      if n == 1 do
        throw {:return, "1 bottle"}
      end
      throw {:return, (to_string(n) <> " bottles")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      i = 99
      while_fun = fn while_fun, i ->
        if i > 0 do
          IO.puts(Kernel.to_string((bottles(i) <> " of beer on the wall")))
          IO.puts(Kernel.to_string((bottles(i) <> " of beer")))
          IO.puts("Take one down, pass it around")
          IO.puts(Kernel.to_string((bottles(i - 1) <> " of beer on the wall")))
          i = i - 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          :break -> i
        end

    catch
      {:return, val} -> val
    end
  end
end
Main.main()
