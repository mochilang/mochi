# Code generated by Mochi transpiler 2025-07-27 05:40 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def floorf(x) do
    try do
      y = trunc(x)
      throw {:return, y}
    catch
      {:return, val} -> val
    end
  end
  def indexOf(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < String.length(s) do
          if String.slice(s, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          :break -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def fmtF3(x) do
    try do
      y = Main.floorf(x * 1000.0 + 0.5) / 1000.0
      s = Kernel.to_string(y)
      dot = Main.indexOf(s, ".")
      {s} = if dot == 0 - 1 do
        s = (s <> ".000")
        {s}
      else
        decs = String.length(s) - dot - 1
        {decs, s} = if decs > 3 do
          s = String.slice(s, 0, dot + 4 - (0))
          {decs, s}
        else
          while_fun_2 = fn while_fun_2, decs, s ->
            if decs < 3 do
              s = (s <> "0")
              decs = decs + 1
              while_fun_2.(while_fun_2, decs, s)
            else
              {decs, s}
            end
          end
          {decs, s} = try do
              while_fun_2.(while_fun_2, decs, s)
            catch
              :break -> {decs, s}
            end

          {decs, s}
        end
        {s}
      end
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def padFloat3(x, width) do
    try do
      s = Main.fmtF3(x)
      while_fun_3 = fn while_fun_3, s ->
        if String.length(s) < width do
          s = (" " <> s)
          while_fun_3.(while_fun_3, s)
        else
          s
        end
      end
      s = try do
          while_fun_3.(while_fun_3, s)
        catch
          :break -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def fib1000() do
    try do
      a = 0.0
      b = 1.0
      res = []
      i = 0
      while_fun_4 = fn while_fun_4, a, b, i, res ->
        if i < 1000 do
          res = (res ++ [b])
          t = b
          b = b + a
          a = t
          i = i + 1
          while_fun_4.(while_fun_4, a, b, i, res)
        else
          {a, b, i, res}
        end
      end
      {a, b, i, res} = try do
          while_fun_4.(while_fun_4, a, b, i, res)
        catch
          :break -> {a, b, i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def leadingDigit(x) do
    try do
      {x} = if x < 0.0 do
        x = -x
        {x}
      else
        {x}
      end
      while_fun_5 = fn while_fun_5, x ->
        if x >= 10.0 do
          x = x / 10.0
          while_fun_5.(while_fun_5, x)
        else
          x
        end
      end
      x = try do
          while_fun_5.(while_fun_5, x)
        catch
          :break -> x
        end

      while_fun_6 = fn while_fun_6, x ->
        if x > 0.0 && x < 1.0 do
          x = x * 10.0
          while_fun_6.(while_fun_6, x)
        else
          x
        end
      end
      x = try do
          while_fun_6.(while_fun_6, x)
        catch
          :break -> x
        end

      throw {:return, trunc(x)}
    catch
      {:return, val} -> val
    end
  end
  def show(nums, title) do
    try do
      counts = [0, 0, 0, 0, 0, 0, 0, 0, 0]
      {counts} = Enum.reduce(nums, {counts}, fn n, {counts} ->
        d = Main.leadingDigit(n)
        {counts} = if d >= 1 && d <= 9 do
          counts = List.replace_at(counts, d - 1, Enum.at(counts, d - 1) + 1)
          {counts}
        else
          {counts}
        end
        {counts}
      end)
      preds = [0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046]
      total = length(nums)
      IO.puts(title)
      IO.puts("Digit  Observed  Predicted")
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < 9 do
          obs = (Enum.at(counts, i)) / (total)
          line = ((((("  " <> Kernel.to_string(i + 1)) <> "  ") <> Main.padFloat3(obs, 9)) <> "  ") <> Main.padFloat3(Enum.at(preds, i), 8))
          IO.puts(line)
          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          :break -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      Main.show(Main.fib1000(), "First 1000 Fibonacci numbers")
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
