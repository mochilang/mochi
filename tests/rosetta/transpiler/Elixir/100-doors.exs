# Code generated by Mochi transpiler 2025-07-25 12:29 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  def main() do
    mem_start = _mem()
    t_start = _now()
    doors = []
    Enum.each((0..(100 - 1)), fn i ->
      doors = (doors ++ [false])
    end)
    Enum.each((1..(101 - 1)), fn pass ->
      idx = pass - 1
      while_fun = fn while_fun, idx ->
        if idx < 100 do
          doors = List.replace_at(doors, idx, !Enum.at(doors, idx))
          idx = idx + pass
          while_fun.(while_fun, idx)
        else
          idx
        end
      end
      idx = try do
          while_fun.(while_fun, idx)
        catch
          :break -> idx
        end

    end)
    Enum.each((0..(10 - 1)), fn row ->
      line = ""
      {line} = Enum.reduce((0..(10 - 1)), {line}, fn col, {line} ->
        idx = row * 10 + col
        line = if Enum.at(doors, idx), do: (line <> "1"), else: (line <> "0")
        if col < 9 do
          line = (line <> " ")
        end
        {line}
      end)
      IO.puts(line)
    end)
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
