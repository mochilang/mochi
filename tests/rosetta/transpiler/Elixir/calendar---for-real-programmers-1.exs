# Code generated by Mochi transpiler 2025-07-28 00:36 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  def main() do
    mem_start = _mem()
    t_start = _now()
    daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    start = [3, 6, 6, 2, 4, 0, 2, 5, 1, 3, 6, 1]
    months = [" January ", " February", "  March  ", "  April  ", "   May   ", "   June  ", "   July  ", "  August ", "September", " October ", " November", " December"]
    days = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
    IO.puts("                                [SNOOPY]\n")
    IO.puts("                                  1969\n")
    qtr = 0
    while_fun = fn while_fun, qtr ->
      if qtr < 4 do
        mi = 0
        while_fun_2 = fn while_fun_2, mi ->
          if mi < 3 do
            IO.write((("      " <> Enum.at(months, qtr * 3 + mi)) <> "           "))
            mi = mi + 1
            while_fun_2.(while_fun_2, mi)
          else
            mi
          end
        end
        mi = try do
            while_fun_2.(while_fun_2, mi)
          catch
            {:break, mi} -> mi
          end

        IO.puts("")
        mi = 0
        while_fun_3 = fn while_fun_3, mi ->
          if mi < 3 do
            d = 0
            while_fun_4 = fn while_fun_4, d ->
              if d < 7 do
                IO.write((" " <> Enum.at(days, d)))
                d = d + 1
                while_fun_4.(while_fun_4, d)
              else
                d
              end
            end
            d = try do
                while_fun_4.(while_fun_4, d)
              catch
                {:break, d} -> d
              end

            IO.write("     ")
            mi = mi + 1
            while_fun_3.(while_fun_3, mi)
          else
            mi
          end
        end
        mi = try do
            while_fun_3.(while_fun_3, mi)
          catch
            {:break, mi} -> mi
          end

        IO.puts("")
        week = 0
        while_fun_5 = fn while_fun_5, mi, week ->
          if week < 6 do
            mi = 0
            while_fun_6 = fn while_fun_6, mi ->
              if mi < 3 do
                day = 0
                while_fun_7 = fn while_fun_7, day ->
                  if day < 7 do
                    m = qtr * 3 + mi
                    val = week * 7 + day - Enum.at(start, m) + 1
                    if val >= 1 && val <= Enum.at(daysInMonth, m) do
                      s = Kernel.to_string(val)
                      {s} = if _len(s) == 1 do
                        s = (" " <> s)
                        {s}
                      else
                        {s}
                      end
                      IO.write((" " <> s))
                    else
                      IO.write("   ")
                    end
                    day = day + 1
                    while_fun_7.(while_fun_7, day)
                  else
                    day
                  end
                end
                day = try do
                    while_fun_7.(while_fun_7, day)
                  catch
                    {:break, day} -> day
                  end

                IO.write("     ")
                mi = mi + 1
                while_fun_6.(while_fun_6, mi)
              else
                mi
              end
            end
            mi = try do
                while_fun_6.(while_fun_6, mi)
              catch
                {:break, mi} -> mi
              end

            IO.puts("")
            week = week + 1
            while_fun_5.(while_fun_5, mi, week)
          else
            {mi, week}
          end
        end
        {mi, week} = try do
            while_fun_5.(while_fun_5, mi, week)
          catch
            {:break, {mi, week}} -> {mi, week}
          end

        IO.puts("")
        qtr = qtr + 1
        while_fun.(while_fun, qtr)
      else
        qtr
      end
    end
    qtr = try do
        while_fun.(while_fun, qtr)
      catch
        {:break, qtr} -> qtr
      end

    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
