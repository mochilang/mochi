# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def newBitmap(w, h, c) do
    try do
      rows = []
      y = 0
      while_fun = fn while_fun, rows, y ->
        if y < h do
          row = []
          x = 0
          while_fun_2 = fn while_fun_2, row, x ->
            if x < w do
              row = (row ++ [c])
              x = x + 1
              while_fun_2.(while_fun_2, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_2.(while_fun_2, row, x)
            catch
              :break -> {row, x}
            end

          rows = (rows ++ [row])
          y = y + 1
          while_fun.(while_fun, rows, y)
        else
          {rows, y}
        end
      end
      {rows, y} = try do
          while_fun.(while_fun, rows, y)
        catch
          :break -> {rows, y}
        end

      throw {:return, %{width: w, height: h, pixels: rows}}
    catch
      {:return, val} -> val
    end
  end
  def setPixel(b, x, y, c) do
    try do
      rows = b.pixels
      row = Enum.at(rows, y)
      row = List.replace_at(row, x, c)
      rows = List.replace_at(rows, y, row)
      b = Map.put(b, :pixels, rows)
    catch
      {:return, val} -> val
    end
  end
  def fillRect(b, x, y, w, h, c) do
    try do
      yy = y
      while_fun_3 = fn while_fun_3, yy ->
        if yy < y + h do
          xx = x
          while_fun_4 = fn while_fun_4, xx ->
            if xx < x + w do
              Main.setPixel(b, xx, yy, c)
              xx = xx + 1
              while_fun_4.(while_fun_4, xx)
            else
              xx
            end
          end
          xx = try do
              while_fun_4.(while_fun_4, xx)
            catch
              :break -> xx
            end

          yy = yy + 1
          while_fun_3.(while_fun_3, yy)
        else
          yy
        end
      end
      yy = try do
          while_fun_3.(while_fun_3, yy)
        catch
          :break -> yy
        end

    catch
      {:return, val} -> val
    end
  end
  def pad(n, width) do
    try do
      s = Kernel.to_string(n)
      while_fun_5 = fn while_fun_5, s ->
        if _len(s) < width do
          s = (" " <> s)
          while_fun_5.(while_fun_5, s)
        else
          s
        end
      end
      s = try do
          while_fun_5.(while_fun_5, s)
        catch
          :break -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def writePPMP3(b) do
    try do
      maxv = 0
      y = 0
      while_fun_6 = fn while_fun_6, maxv, y ->
        if y < b.height do
          x = 0
          while_fun_7 = fn while_fun_7, maxv, x ->
            if x < b.width do
              p = Enum.at(Enum.at(b.pixels, y), x)
              {maxv} = if p[:R] > maxv do
                maxv = p[:R]
                {maxv}
              else
                {maxv}
              end
              {maxv} = if p[:G] > maxv do
                maxv = p[:G]
                {maxv}
              else
                {maxv}
              end
              {maxv} = if p[:B] > maxv do
                maxv = p[:B]
                {maxv}
              else
                {maxv}
              end
              x = x + 1
              while_fun_7.(while_fun_7, maxv, x)
            else
              {maxv, x}
            end
          end
          {maxv, x} = try do
              while_fun_7.(while_fun_7, maxv, x)
            catch
              :break -> {maxv, x}
            end

          y = y + 1
          while_fun_6.(while_fun_6, maxv, y)
        else
          {maxv, y}
        end
      end
      {maxv, y} = try do
          while_fun_6.(while_fun_6, maxv, y)
        catch
          :break -> {maxv, y}
        end

      out = (((((("P3\n# generated from Bitmap.writeppmp3\n" <> Kernel.to_string(b.width)) <> " ") <> Kernel.to_string(b.height)) <> "\n") <> Kernel.to_string(maxv)) <> "\n")
      numsize = _len(Kernel.to_string(maxv))
      y = b.height - 1
      while_fun_8 = fn while_fun_8, out, y ->
        if y >= 0 do
          line = ""
          x = 0
          while_fun_9 = fn while_fun_9, line, x ->
            if x < b.width do
              p = Enum.at(Enum.at(b.pixels, y), x)
              line = ((((((line <> "   ") <> Main.pad(p[:R], numsize)) <> " ") <> Main.pad(p[:G], numsize)) <> " ") <> Main.pad(p[:B], numsize))
              x = x + 1
              while_fun_9.(while_fun_9, line, x)
            else
              {line, x}
            end
          end
          {line, x} = try do
              while_fun_9.(while_fun_9, line, x)
            catch
              :break -> {line, x}
            end

          out = (out <> line)
          out = (if y > 0, do: (out <> "\n"), else: (out <> "\n"))
          y = y - 1
          while_fun_8.(while_fun_8, out, y)
        else
          {out, y}
        end
      end
      {out, y} = try do
          while_fun_8.(while_fun_8, out, y)
        catch
          :break -> {out, y}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      black = %{R: 0, G: 0, B: 0}
      white = %{R: 255, G: 255, B: 255}
      bm = Main.newBitmap(4, 4, black)
      Main.fillRect(bm, 1, 0, 1, 2, white)
      Main.setPixel(bm, 3, 3, %{R: 127, G: 0, B: 63})
      ppm = Main.writePPMP3(bm)
      IO.puts(ppm)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
