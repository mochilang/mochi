# Code generated by Mochi transpiler 2025-08-04 15:00 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def newList() do
    try do
      throw {:return, %{nodes: %{}, head: 0, tail: 0, nextID: 1}}
    catch
      {:return, val} -> val
    end
  end
  def newNode(l, v) do
    try do
      id = trunc(l["nextID"])
      l = Map.put(l, "nextID", id + 1)
      nodes = l["nodes"]
      n = %{id: id, value: v, next: 0, prev: 0}
      nodes = Map.put(nodes, id, n)
      l = Map.put(l, "nodes", nodes)
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def pushFront(l, v) do
    try do
      n = newNode(l, v)
      n = List.replace_at(n, "next", l["head"])
      {l} = if (trunc(l["head"])) != 0 do
        nodes = l["nodes"]
        h = nodes[trunc(l["head"])]
        h = List.replace_at(h, "prev", n["id"])
        nodes = Map.put(nodes, trunc(h["id"]), h)
        l = Map.put(l, "nodes", nodes)
        {l}
      else
        l = Map.put(l, "tail", n["id"])
        {l}
      end
      l = Map.put(l, "head", n["id"])
      nodes2 = l["nodes"]
      nodes2 = Map.put(nodes2, trunc(n["id"]), n)
      l = Map.put(l, "nodes", nodes2)
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def pushBack(l, v) do
    try do
      n = newNode(l, v)
      n = List.replace_at(n, "prev", l["tail"])
      {l} = if (trunc(l["tail"])) != 0 do
        nodes = l["nodes"]
        t = nodes[trunc(l["tail"])]
        t = List.replace_at(t, "next", n["id"])
        nodes = Map.put(nodes, trunc(t["id"]), t)
        l = Map.put(l, "nodes", nodes)
        {l}
      else
        l = Map.put(l, "head", n["id"])
        {l}
      end
      l = Map.put(l, "tail", n["id"])
      nodes2 = l["nodes"]
      nodes2 = Map.put(nodes2, trunc(n["id"]), n)
      l = Map.put(l, "nodes", nodes2)
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def insertBefore(l, refID, v) do
    try do
      if refID == 0 do
        throw {:return, pushFront(l, v)}
      end
      nodes = l["nodes"]
      ref = nodes[refID]
      n = newNode(l, v)
      n = List.replace_at(n, "prev", ref["prev"])
      n = List.replace_at(n, "next", ref["id"])
      {l, nodes} = if (trunc(ref["prev"])) != 0 do
        p = nodes[trunc(ref["prev"])]
        p = List.replace_at(p, "next", n["id"])
        nodes = Map.put(nodes, trunc(p["id"]), p)
        {l, nodes}
      else
        l = Map.put(l, "head", n["id"])
        {l, nodes}
      end
      ref = List.replace_at(ref, "prev", n["id"])
      nodes = Map.put(nodes, refID, ref)
      nodes = Map.put(nodes, trunc(n["id"]), n)
      l = Map.put(l, "nodes", nodes)
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def insertAfter(l, refID, v) do
    try do
      if refID == 0 do
        throw {:return, pushBack(l, v)}
      end
      nodes = l["nodes"]
      ref = nodes[refID]
      n = newNode(l, v)
      n = List.replace_at(n, "next", ref["next"])
      n = List.replace_at(n, "prev", ref["id"])
      {l, nodes} = if (trunc(ref["next"])) != 0 do
        nx = nodes[trunc(ref["next"])]
        nx = List.replace_at(nx, "prev", n["id"])
        nodes = Map.put(nodes, trunc(nx["id"]), nx)
        {l, nodes}
      else
        l = Map.put(l, "tail", n["id"])
        {l, nodes}
      end
      ref = List.replace_at(ref, "next", n["id"])
      nodes = Map.put(nodes, refID, ref)
      nodes = Map.put(nodes, trunc(n["id"]), n)
      l = Map.put(l, "nodes", nodes)
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      l = newList()
      e4 = pushBack(l, 4)
      e1 = pushFront(l, 1)
      insertBefore(l, trunc(e4["id"]), 3)
      insertAfter(l, trunc(e1["id"]), "two")
      id = trunc(l["head"])
      nodes = l["nodes"]
      while_fun = fn while_fun, id ->
        if id != 0 do
          node_ = nodes[id]
          IO.puts(Kernel.inspect(node_["value"]))
          id = trunc(node_["next"])
          while_fun.(while_fun, id)
        else
          id
        end
      end
      id = try do
          while_fun.(while_fun, id)
        catch
          {:break, id} -> id
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
