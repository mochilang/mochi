# Code generated by Mochi transpiler 2025-08-04 21:17 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def split(s, sep) do
    try do
      parts = []
      cur = ""
      i = 0
      while_fun = fn while_fun, cur, i, parts ->
        if i < _len(s) do
          {cur, i, parts} = if _len(sep) > 0 && i + _len(sep) <= _len(s) && _slice(s, i, i + _len(sep) - (i)) == sep do
            parts = (parts ++ [cur])
            cur = ""
            i = i + _len(sep)
            {cur, i, parts}
          else
            cur = (cur <> _slice(s, i, i + 1 - (i)))
            i = i + 1
            {cur, i, parts}
          end
          while_fun.(while_fun, cur, i, parts)
        else
          {cur, i, parts}
        end
      end
      {cur, i, parts} = try do
          while_fun.(while_fun, cur, i, parts)
        catch
          {:break, {cur, i, parts}} -> {cur, i, parts}
        end

      parts = (parts ++ [cur])
      throw {:return, parts}
    catch
      {:return, val} -> val
    end
  end
  def parseIntStr(str) do
    try do
      i = 0
      neg = false
      {i, neg} = if _len(str) > 0 && _slice(str, 0, 1 - 0) == "-" do
        neg = true
        i = 1
        {i, neg}
      else
        {i, neg}
      end
      n = 0
      digits = %{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
      while_fun_2 = fn while_fun_2, i, n ->
        if i < _len(str) do
          n = n * 10 + digits[_slice(str, i, (i + 1) - i)]
          i = i + 1
          while_fun_2.(while_fun_2, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_2.(while_fun_2, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      {n} = if neg do
        n = -n
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def joinInts(nums, sep) do
    try do
      s = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, s ->
        if i < _len(nums) do
          {s} = if i > 0 do
            s = (s <> sep)
            {s}
          else
            {s}
          end
          s = (s <> Kernel.to_string(Enum.at(nums, i)))
          i = i + 1
          while_fun_3.(while_fun_3, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_3.(while_fun_3, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def undot(s) do
    try do
      parts = split(s, ".")
      nums = []
      {nums} = Enum.reduce(parts, {nums}, fn p, {nums} ->
        nums = (nums ++ [parseIntStr(p)])
        {nums}
      end)
      throw {:return, nums}
    catch
      {:return, val} -> val
    end
  end
  def factorial(n) do
    try do
      f = 1
      i = 2
      while_fun_4 = fn while_fun_4, f, i ->
        if i <= n do
          f = f * i
          i = i + 1
          while_fun_4.(while_fun_4, f, i)
        else
          {f, i}
        end
      end
      {f, i} = try do
          while_fun_4.(while_fun_4, f, i)
        catch
          {:break, {f, i}} -> {f, i}
        end

      throw {:return, f}
    catch
      {:return, val} -> val
    end
  end
  def genFactBaseNums(size, countOnly) do
    try do
      results = []
      count = 0
      n = 0
      while_fun_5 = fn while_fun_5, count, n, results ->
        if true do
          radix = 2
          res = []
          {res} = if !countOnly do
            z = 0
            while_fun_6 = fn while_fun_6, res, z ->
              if z < size do
                res = (res ++ [0])
                z = z + 1
                while_fun_6.(while_fun_6, res, z)
              else
                {res, z}
              end
            end
            {res, z} = try do
                while_fun_6.(while_fun_6, res, z)
              catch
                {:break, {res, z}} -> {res, z}
              end

            {res}
          else
            {res}
          end
          k = n
          while_fun_7 = fn while_fun_7, k, radix, res ->
            if k > 0 do
              div_ = div(k, radix)
              rem_ = rem(k, radix)
              {res} = if !countOnly && radix <= size + 1 do
                res = List.replace_at(res, size - radix + 1, rem_)
                {res}
              else
                {res}
              end
              k = div_
              radix = radix + 1
              while_fun_7.(while_fun_7, k, radix, res)
            else
              {k, radix, res}
            end
          end
          {k, radix, res} = try do
              while_fun_7.(while_fun_7, k, radix, res)
            catch
              {:break, {k, radix, res}} -> {k, radix, res}
            end

          if radix > size + 2 do
            throw {:break, {count, n, results}}
          end
          count = count + 1
          {results} = if !countOnly do
            results = (results ++ [res])
            {results}
          else
            {results}
          end
          n = n + 1
          while_fun_5.(while_fun_5, count, n, results)
        else
          {count, n, results}
        end
      end
      {count, n, results} = try do
          while_fun_5.(while_fun_5, count, n, results)
        catch
          {:break, {count, n, results}} -> {count, n, results}
        end

      throw {:return, [results, count]}
    catch
      {:return, val} -> val
    end
  end
  def mapToPerms(factNums) do
    try do
      perms = []
      psize = _len(Enum.at(factNums, 0)) + 1
      start = []
      i = 0
      while_fun_8 = fn while_fun_8, i, start ->
        if i < psize do
          start = (start ++ [i])
          i = i + 1
          while_fun_8.(while_fun_8, i, start)
        else
          {i, start}
        end
      end
      {i, start} = try do
          while_fun_8.(while_fun_8, i, start)
        catch
          {:break, {i, start}} -> {i, start}
        end

      {perms} = Enum.reduce(factNums, {perms}, fn fn, {perms} ->
        perm = []
        j = 0
        while_fun_9 = fn while_fun_9, j, perm ->
          if j < _len(start) do
            perm = (perm ++ [Enum.at(start, j)])
            j = j + 1
            while_fun_9.(while_fun_9, j, perm)
          else
            {j, perm}
          end
        end
        {j, perm} = try do
            while_fun_9.(while_fun_9, j, perm)
          catch
            {:break, {j, perm}} -> {j, perm}
          end

        m = 0
        while_fun_10 = fn while_fun_10, m, perm ->
          if m < _len(fn_) do
            g = Enum.at(fn_, m)
            {perm} = if g != 0 do
              first = m
              last = m + g
              t = 1
              while_fun_11 = fn while_fun_11, perm, t ->
                if t <= g do
                  temp = Enum.at(perm, first)
                  x = first + 1
                  while_fun_12 = fn while_fun_12, perm, x ->
                    if x <= last do
                      perm = List.replace_at(perm, x - 1, Enum.at(perm, x))
                      x = x + 1
                      while_fun_12.(while_fun_12, perm, x)
                    else
                      {perm, x}
                    end
                  end
                  {perm, x} = try do
                      while_fun_12.(while_fun_12, perm, x)
                    catch
                      {:break, {perm, x}} -> {perm, x}
                    end

                  perm = List.replace_at(perm, last, temp)
                  t = t + 1
                  while_fun_11.(while_fun_11, perm, t)
                else
                  {perm, t}
                end
              end
              {perm, t} = try do
                  while_fun_11.(while_fun_11, perm, t)
                catch
                  {:break, {perm, t}} -> {perm, t}
                end

              {perm}
            else
              {perm}
            end
            m = m + 1
            while_fun_10.(while_fun_10, m, perm)
          else
            {m, perm}
          end
        end
        {m, perm} = try do
            while_fun_10.(while_fun_10, m, perm)
          catch
            {:break, {m, perm}} -> {m, perm}
          end

        perms = (perms ++ [perm])
        {perms}
      end)
      throw {:return, perms}
    catch
      {:return, val} -> val
    end
  end
  def randInt(n) do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1664525 + 1013904223), 2147483647))
      throw {:return, rem(Process.get(:seed), n)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      g = genFactBaseNums(3, false)
      factNums = Enum.at(g, 0)
      perms = mapToPerms(factNums)
      i = 0
      while_fun_13 = fn while_fun_13, i ->
        if i < _len(factNums) do
          IO.puts(Kernel.inspect(((joinInts(Enum.at(factNums, i), ".") <> " -> ") <> joinInts(Enum.at(perms, i), ""))))
          i = i + 1
          while_fun_13.(while_fun_13, i)
        else
          i
        end
      end
      i = try do
          while_fun_13.(while_fun_13, i)
        catch
          {:break, {i}} -> i
        end

      count2 = factorial(11)
      IO.puts(("\nPermutations generated = " <> Kernel.to_string(count2)))
      IO.puts(("compared to 11! which  = " <> Kernel.inspect(factorial(11))))
      IO.puts("")
      fbn51s = ["39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0", "51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1"]
      factNums = [undot(Enum.at(fbn51s, 0)), undot(Enum.at(fbn51s, 1))]
      perms = mapToPerms(factNums)
      shoe = "A♠K♠Q♠J♠T♠9♠8♠7♠6♠5♠4♠3♠2♠A♥K♥Q♥J♥T♥9♥8♥7♥6♥5♥4♥3♥2♥A♦K♦Q♦J♦T♦9♦8♦7♦6♦5♦4♦3♦2♦A♣K♣Q♣J♣T♣9♣8♣7♣6♣5♣4♣3♣2♣"
      cards = []
      i = 0
      while_fun_14 = fn while_fun_14, cards, i ->
        if i < 52 do
          card = _slice(shoe, 2 * i, 2 * i + 2 - (2 * i))
          {card} = if _slice(card, 0, 1 - 0) == "T" do
            card = ("10" <> _slice(card, 1, 2 - 1))
            {card}
          else
            {card}
          end
          cards = (cards ++ [card])
          i = i + 1
          while_fun_14.(while_fun_14, cards, i)
        else
          {cards, i}
        end
      end
      {cards, i} = try do
          while_fun_14.(while_fun_14, cards, i)
        catch
          {:break, {cards, i}} -> {cards, i}
        end

      i = 0
      while_fun_15 = fn while_fun_15, i ->
        if i < _len(fbn51s) do
          IO.puts(Enum.at(fbn51s, i))
          perm = Enum.at(perms, i)
          j = 0
          line = ""
          while_fun_16 = fn while_fun_16, j, line ->
            if j < _len(perm) do
              line = (line <> Enum.at(cards, Enum.at(perm, j)))
              j = j + 1
              while_fun_16.(while_fun_16, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_16.(while_fun_16, j, line)
            catch
              {:break, {j, line}} -> {j, line}
            end

          IO.puts((line <> "\n"))
          i = i + 1
          while_fun_15.(while_fun_15, i)
        else
          i
        end
      end
      i = try do
          while_fun_15.(while_fun_15, i)
        catch
          {:break, {i}} -> i
        end

      fbn51 = []
      i = 0
      while_fun_17 = fn while_fun_17, fbn51, i ->
        if i < 51 do
          fbn51 = (fbn51 ++ [randInt(52 - i)])
          i = i + 1
          while_fun_17.(while_fun_17, fbn51, i)
        else
          {fbn51, i}
        end
      end
      {fbn51, i} = try do
          while_fun_17.(while_fun_17, fbn51, i)
        catch
          {:break, {fbn51, i}} -> {fbn51, i}
        end

      IO.puts(Kernel.inspect(joinInts(fbn51, ".")))
      perms = mapToPerms([fbn51])
      line = ""
      i = 0
      while_fun_18 = fn while_fun_18, i, line ->
        if i < _len(Enum.at(perms, 0)) do
          line = (line <> Enum.at(cards, Enum.at(Enum.at(perms, 0), i)))
          i = i + 1
          while_fun_18.(while_fun_18, i, line)
        else
          {i, line}
        end
      end
      {i, line} = try do
          while_fun_18.(while_fun_18, i, line)
        catch
          {:break, {i, line}} -> {i, line}
        end

      IO.puts(line)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:seed, 1)
  def bench_main() do
    Process.put(:seed, 1)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
