# Code generated by Mochi transpiler 2025-07-27 12:23 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  defp _len(x) do
    (if is_binary(x), do: String.length(x), else: length(x))
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def getBins(limits, data) do
    try do
      n = _len(limits)
      bins = []
      i = 0
      while_fun = fn while_fun, bins, i ->
        if i < n + 1 do
          bins = (bins ++ [0])
          i = i + 1
          while_fun.(while_fun, bins, i)
        else
          {bins, i}
        end
      end
      {bins, i} = try do
          while_fun.(while_fun, bins, i)
        catch
          :break -> {bins, i}
        end

      j = 0
      while_fun_2 = fn while_fun_2, bins, j ->
        if j < _len(data) do
          d = Enum.at(data, j)
          index = 0
          while_fun_3 = fn while_fun_3, index ->
            if index < _len(limits) do
              if d < Enum.at(limits, index) do
                throw :break
              end
              {index} = if d == Enum.at(limits, index) do
                index = index + 1
                throw :break
                {index}
              else
                {index}
              end
              index = index + 1
              while_fun_3.(while_fun_3, index)
            else
              index
            end
          end
          index = try do
              while_fun_3.(while_fun_3, index)
            catch
              :break -> index
            end

          bins = List.replace_at(bins, index, Enum.at(bins, index) + 1)
          j = j + 1
          while_fun_2.(while_fun_2, bins, j)
        else
          {bins, j}
        end
      end
      {bins, j} = try do
          while_fun_2.(while_fun_2, bins, j)
        catch
          :break -> {bins, j}
        end

      throw {:return, bins}
    catch
      {:return, val} -> val
    end
  end
  def padLeft(n, width) do
    try do
      s = Kernel.to_string(n)
      pad = width - String.length(s)
      out = ""
      i = 0
      while_fun_4 = fn while_fun_4, i, out ->
        if i < pad do
          out = (out <> " ")
          i = i + 1
          while_fun_4.(while_fun_4, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_4.(while_fun_4, i, out)
        catch
          :break -> {i, out}
        end

      throw {:return, (out <> s)}
    catch
      {:return, val} -> val
    end
  end
  def printBins(limits, bins) do
    try do
      n = _len(limits)
      IO.puts(((("           < " <> Main.padLeft(Enum.at(limits, 0), 3)) <> " = ") <> Main.padLeft(Enum.at(bins, 0), 2)))
      i = 1
      while_fun_5 = fn while_fun_5, i ->
        if i < n do
          IO.puts((((((">= " <> Main.padLeft(Enum.at(limits, i - 1), 3)) <> " and < ") <> Main.padLeft(Enum.at(limits, i), 3)) <> " = ") <> Main.padLeft(Enum.at(bins, i), 2)))
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          :break -> i
        end

      IO.puts((((">= " <> Main.padLeft(Enum.at(limits, n - 1), 3)) <> "           = ") <> Main.padLeft(Enum.at(bins, n), 2)))
      IO.puts("")
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      limitsList = [[23, 37, 43, 53, 67, 83], [14, 18, 249, 312, 389, 392, 513, 591, 634, 720]]
      dataList = [[95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55], [445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749]]
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(limitsList) do
          IO.puts((("Example " <> Kernel.to_string(i + 1)) <> "\n"))
          bins = Main.getBins(Enum.at(limitsList, i), Enum.at(dataList, i))
          Main.printBins(Enum.at(limitsList, i), bins)
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          :break -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
