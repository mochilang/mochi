# Code generated by Mochi transpiler 2025-08-04 15:54 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def commatize(n) do
    try do
      s = Kernel.to_string(n)
      i = _len(s) - 3
      while_fun = fn while_fun, i, s ->
        if i > 0 do
          s = ((_slice(s, 0, i - 0) <> ",") <> _slice(s, i, _len(s) - i))
          i = i - 3
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      data = [%{"pm" => 10, "g1" => 4, "s1" => 7, "g2" => 6, "s2" => 23, "d" => 16}, %{"pm" => 100, "g1" => 14, "s1" => 113, "g2" => 16, "s2" => 1831, "d" => 1718}, %{"pm" => 1000, "g1" => 14, "s1" => 113, "g2" => 16, "s2" => 1831, "d" => 1718}, %{"pm" => 10000, "g1" => 36, "s1" => 9551, "g2" => 38, "s2" => 30593, "d" => 21042}, %{"pm" => 100000, "g1" => 70, "s1" => 173359, "g2" => 72, "s2" => 31397, "d" => 141962}, %{"pm" => 1000000, "g1" => 100, "s1" => 396733, "g2" => 102, "s2" => 1444309, "d" => 1047576}, %{"pm" => 10000000, "g1" => 148, "s1" => 2010733, "g2" => 150, "s2" => 13626257, "d" => 11615524}, %{"pm" => 100000000, "g1" => 198, "s1" => 46006769, "g2" => 200, "s2" => 378043979, "d" => 332037210}, %{"pm" => 1000000000, "g1" => 276, "s1" => 649580171, "g2" => 278, "s2" => 4260928601, "d" => 3611348430}, %{"pm" => 10000000000, "g1" => 332, "s1" => 5893180121, "g2" => 334, "s2" => 30827138509, "d" => 24933958388}, %{"pm" => 100000000000, "g1" => 386, "s1" => 35238645587, "g2" => 388, "s2" => 156798792223, "d" => 121560146636}]
      Enum.each(data, fn entry ->
        pm = commatize(entry["pm"])
        line1 = (("Earliest difference > " <> pm) <> " between adjacent prime gap starting primes:")
        IO.puts(line1)
        line2 = (((((((((("Gap " <> Kernel.inspect(entry["g1"])) <> " starts at ") <> commatize(entry["s1"])) <> ", gap ") <> Kernel.inspect(entry["g2"])) <> " starts at ") <> commatize(entry["s2"])) <> ", difference is ") <> commatize(entry["d"])) <> ".")
        IO.puts(line2)
        IO.puts("")
      end)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
