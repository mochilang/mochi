# Code generated by Mochi transpiler 2025-08-05 01:09 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def fuscVal(n) do
    try do
      a = 1
      b = 0
      x = n
      while_fun = fn while_fun, a, b, x ->
        if x > 0 do
          {a, b, x} = if rem(x, 2) == 0 do
            x = div(x, 2)
            a = a + b
            {a, b, x}
          else
            x = div((x - 1), 2)
            b = a + b
            {a, b, x}
          end
          while_fun.(while_fun, a, b, x)
        else
          {a, b, x}
        end
      end
      {a, b, x} = try do
          while_fun.(while_fun, a, b, x)
        catch
          {:break, {a, b, x}} -> {a, b, x}
        end

      if n == 0 do
        throw {:return, 0}
      end
      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def firstFusc(n) do
    try do
      arr = []
      i = 0
      while_fun_2 = fn while_fun_2, arr, i ->
        if i < n do
          arr = (arr ++ [fuscVal(i)])
          i = i + 1
          while_fun_2.(while_fun_2, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun_2.(while_fun_2, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def commatize(n) do
    try do
      s = Kernel.to_string(n)
      neg = false
      {neg, s} = if n < 0 do
        neg = true
        s = _slice(s, 1, _len(s) - (1))
        {neg, s}
      else
        {neg, s}
      end
      i = _len(s) - 3
      while_fun_3 = fn while_fun_3, i, s ->
        if i >= 1 do
          s = ((_slice(s, 0, i - (0)) <> ",") <> _slice(s, i, _len(s) - (i)))
          i = i - 3
          while_fun_3.(while_fun_3, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_3.(while_fun_3, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      if neg do
        throw {:return, ("-" <> s)}
      end
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def padLeft(s, w) do
    try do
      out = s
      while_fun_4 = fn while_fun_4, out ->
        if _len(out) < w do
          out = (" " <> out)
          while_fun_4.(while_fun_4, out)
        else
          out
        end
      end
      out = try do
          while_fun_4.(while_fun_4, out)
        catch
          {:break, {out}} -> out
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts("The first 61 fusc numbers are:")
      IO.puts(Kernel.inspect(firstFusc(61)))
      IO.puts("\nThe fusc numbers whose length > any previous fusc number length are:")
      idxs = [0, 37, 1173, 35499, 699051, 19573419]
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(idxs) do
          idx = Enum.at(idxs, i)
          val = fuscVal(idx)
          numStr = padLeft(commatize(val), 7)
          idxStr = padLeft(commatize(idx), 10)
          IO.puts((((numStr <> " (index ") <> idxStr) <> ")"))
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
