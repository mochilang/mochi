# Code generated by Mochi transpiler 2025-08-04 11:46 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def pad(s, width) do
    try do
      out = s
      while_fun = fn while_fun, out ->
        if _len(out) < width do
          out = (" " <> out)
          while_fun.(while_fun, out)
        else
          out
        end
      end
      out = try do
          while_fun.(while_fun, out)
        catch
          {:break, out} -> out
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def mult(n, base) do
    try do
      m = 1
      x = n
      b = base
      while_fun_2 = fn while_fun_2, m, x ->
        if x > 0 do
          m = m * (rem(x, b))
          x = div(x, b)
          while_fun_2.(while_fun_2, m, x)
        else
          {m, x}
        end
      end
      {m, x} = try do
          while_fun_2.(while_fun_2, m, x)
        catch
          {:break, {m, x}} -> {m, x}
        end

      throw {:return, m}
    catch
      {:return, val} -> val
    end
  end
  def multDigitalRoot(n, base) do
    try do
      m = n
      mp = 0
      b = base
      while_fun_3 = fn while_fun_3, m, mp ->
        if m >= b do
          m = mult(m, base)
          mp = mp + 1
          while_fun_3.(while_fun_3, m, mp)
        else
          {m, mp}
        end
      end
      {m, mp} = try do
          while_fun_3.(while_fun_3, m, mp)
        catch
          {:break, {m, mp}} -> {m, mp}
        end

      throw {:return, %{mp: mp, mdr: (trunc(m))}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      base = 10
      size = 5
      IO.puts(Kernel.inspect(((((pad("Number", 20) <> " ") <> pad("MDR", 3)) <> " ") <> pad("MP", 3))))
      nums = [123321, 7739, 893, 899998, 3778888999, 277777788888899]
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(nums) do
          n = Enum.at(nums, i)
          r = multDigitalRoot(n, base)
          IO.puts(Kernel.inspect(((((pad(Kernel.inspect(n), 20) <> " ") <> pad(Kernel.to_string(r.mdr), 3)) <> " ") <> pad(Kernel.to_string(r.mp), 3))))
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, i} -> i
        end

      IO.puts("")
      list = []
      idx = 0
      while_fun_5 = fn while_fun_5, idx, list ->
        if idx < base do
          list = (list ++ [[]])
          idx = idx + 1
          while_fun_5.(while_fun_5, idx, list)
        else
          {idx, list}
        end
      end
      {idx, list} = try do
          while_fun_5.(while_fun_5, idx, list)
        catch
          {:break, {idx, list}} -> {idx, list}
        end

      cnt = size * base
      n = 0
      b = base
      while_fun_6 = fn while_fun_6, cnt, list, n ->
        if cnt > 0 do
          r = multDigitalRoot(n, base)
          mdr = r.mdr
          {cnt, list} = if _len(Enum.at(list, mdr)) < size do
            list = List.replace_at(list, mdr, (Enum.at(list, mdr) ++ [trunc(n)]))
            cnt = cnt - 1
            {cnt, list}
          else
            {cnt, list}
          end
          n = n + 1
          while_fun_6.(while_fun_6, cnt, list, n)
        else
          {cnt, list, n}
        end
      end
      {cnt, list, n} = try do
          while_fun_6.(while_fun_6, cnt, list, n)
        catch
          {:break, {cnt, list, n}} -> {cnt, list, n}
        end

      IO.puts("MDR: First")
      j = 0
      while_fun_7 = fn while_fun_7, j ->
        if j < base do
          IO.puts(Kernel.inspect(((pad(Kernel.to_string(j), 3) <> ": ") <> String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Enum.at(list, j)])), ",", " "))))
          j = j + 1
          while_fun_7.(while_fun_7, j)
        else
          j
        end
      end
      j = try do
          while_fun_7.(while_fun_7, j)
        catch
          {:break, j} -> j
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
