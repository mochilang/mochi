# Code generated by Mochi transpiler 2025-08-02 17:26 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def randInt(s, n) do
    try do
      next = rem((s * 1664525 + 1013904223), 2147483647)
      throw {:return, [next, rem(next, n)]}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:xMax, 2.6558)
  Process.put(:yMin, 0.0)
  Process.put(:yMax, 9.9983)
  Process.put(:width, 60)
  Process.put(:nIter, 10000)
  Process.put(:grid, [])
  Process.put(:row, 0)
  Process.put(:seed, 1)
  Process.put(:x, 0.0)
  Process.put(:y, 0.0)
  Process.put(:i, 0)
  def main() do
    mem_start = _mem()
    t_start = _now()
    Process.put(:xMin, -2.182)
    Process.put(:dx, Process.get(:xMax) - Process.get(:xMin))
    Process.put(:dy, Process.get(:yMax) - Process.get(:yMin))
    Process.put(:height, trunc((Process.get(:width) * Process.get(:dy) / Process.get(:dx))))
    while_fun = fn while_fun ->
      if Process.get(:row) < Process.get(:height) do
        line = []
        col = 0
        while_fun_2 = fn while_fun_2, col, line ->
          if col < Process.get(:width) do
            line = (line ++ [" "])
            col = col + 1
            while_fun_2.(while_fun_2, col, line)
          else
            {col, line}
          end
        end
        {col, line} = try do
            while_fun_2.(while_fun_2, col, line)
          catch
            {:break, {col, line}} -> {col, line}
          end

        Process.put(:grid, (Process.get(:grid) ++ [line]))
        Process.put(:row, Process.get(:row) + 1)
        while_fun.(while_fun)
      else
        nil
      end
    end
    try do
      while_fun.(while_fun)
    catch
      :break -> nil
    end

    Process.put(:ix, trunc(((Process.get(:width)) * (Process.get(:x) - Process.get(:xMin)) / Process.get(:dx))))
    Process.put(:iy, trunc(((Process.get(:height)) * (Process.get(:yMax) - Process.get(:y)) / Process.get(:dy))))
    if Process.get(:ix) >= 0 && Process.get(:ix) < Process.get(:width) && Process.get(:iy) >= 0 && Process.get(:iy) < Process.get(:height) do
      Process.put(:grid, List.replace_at(Process.get(:grid), Process.get(:iy), List.replace_at(Enum.at(Process.get(:grid), Process.get(:iy)), Process.get(:ix), "*")))
    end
    while_fun_3 = fn while_fun_3 ->
      if Process.get(:i) < Process.get(:nIter) do
        res = Main.randInt(Process.get(:seed), 100)
        Process.put(:seed, Enum.at(res, 0))
        r = Enum.at(res, 1)
        if r < 85 do
          nx = 0.85 * Process.get(:x) + 0.04 * Process.get(:y)
          ny = -0.04 * Process.get(:x) + 0.85 * Process.get(:y) + 1.6
          Process.put(:x, nx)
          Process.put(:y, ny)
        else
          if r < 92 do
            nx = 0.2 * Process.get(:x) - 0.26 * Process.get(:y)
            ny = 0.23 * Process.get(:x) + 0.22 * Process.get(:y) + 1.6
            Process.put(:x, nx)
            Process.put(:y, ny)
          else
            if r < 99 do
              nx = -0.15 * Process.get(:x) + 0.28 * Process.get(:y)
              ny = 0.26 * Process.get(:x) + 0.24 * Process.get(:y) + 0.44
              Process.put(:x, nx)
              Process.put(:y, ny)
            else
              Process.put(:x, 0.0)
              Process.put(:y, 0.16 * Process.get(:y))
            end
          end
        end
        Process.put(:ix, trunc(((Process.get(:width)) * (Process.get(:x) - Process.get(:xMin)) / Process.get(:dx))))
        Process.put(:iy, trunc(((Process.get(:height)) * (Process.get(:yMax) - Process.get(:y)) / Process.get(:dy))))
        if Process.get(:ix) >= 0 && Process.get(:ix) < Process.get(:width) && Process.get(:iy) >= 0 && Process.get(:iy) < Process.get(:height) do
          Process.put(:grid, List.replace_at(Process.get(:grid), Process.get(:iy), List.replace_at(Enum.at(Process.get(:grid), Process.get(:iy)), Process.get(:ix), "*")))
        end
        Process.put(:i, Process.get(:i) + 1)
        while_fun_3.(while_fun_3)
      else
        nil
      end
    end
    try do
      while_fun_3.(while_fun_3)
    catch
      :break -> nil
    end

    Process.put(:row, 0)
    while_fun_4 = fn while_fun_4 ->
      if Process.get(:row) < Process.get(:height) do
        line = ""
        col = 0
        while_fun_5 = fn while_fun_5, col, line ->
          if col < Process.get(:width) do
            line = (line <> Enum.at(Enum.at(Process.get(:grid), Process.get(:row)), col))
            col = col + 1
            while_fun_5.(while_fun_5, col, line)
          else
            {col, line}
          end
        end
        {col, line} = try do
            while_fun_5.(while_fun_5, col, line)
          catch
            {:break, {col, line}} -> {col, line}
          end

        IO.puts(line)
        Process.put(:row, Process.get(:row) + 1)
        while_fun_4.(while_fun_4)
      else
        nil
      end
    end
    try do
      while_fun_4.(while_fun_4)
    catch
      :break -> nil
    end

    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
