# Code generated by Mochi transpiler 2025-07-31 00:20 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def main() do
    facts = [1]
    n = 1
    while_fun = fn while_fun, facts, n ->
      if n < 12 do
        facts = (facts ++ [Enum.at(facts, n - 1) * n])
        n = n + 1
        while_fun.(while_fun, facts, n)
      else
        {facts, n}
      end
    end
    {facts, n} = try do
        while_fun.(while_fun, facts, n)
      catch
        {:break, {facts, n}} -> {facts, n}
      end

    Enum.each((9..(13 - 1)), fn b ->
      IO.puts((("The factorions for base " <> Kernel.to_string(b)) <> " are:"))
      line = ""
      i = 1
      while_fun_2 = fn while_fun_2, i, line ->
        if i < 1500000 do
          m = i
          sum = 0
          while_fun_3 = fn while_fun_3, m, sum ->
            if m > 0 do
              d = rem(m, b)
              sum = sum + Enum.at(facts, d)
              m = div(m, b)
              while_fun_3.(while_fun_3, m, sum)
            else
              {m, sum}
            end
          end
          {m, sum} = try do
              while_fun_3.(while_fun_3, m, sum)
            catch
              {:break, {m, sum}} -> {m, sum}
            end

          {line} = if sum == i do
            line = ((line <> Kernel.to_string(i)) <> " ")
            {line}
          else
            {line}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, line)
        else
          {i, line}
        end
      end
      {i, line} = try do
          while_fun_2.(while_fun_2, i, line)
        catch
          {:break, {i, line}} -> {i, line}
        end

      IO.puts(line)
      IO.puts("")
    end)
  end
end
Main.main()
