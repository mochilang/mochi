# Code generated by Mochi transpiler 2025-07-26 23:50 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def sel(list, k) do
    try do
      i = 0
      while_fun = fn while_fun, i, list ->
        if i <= k do
          minIndex = i
          j = i + 1
          while_fun_2 = fn while_fun_2, j, minIndex ->
            if j < length(list) do
              if Enum.at(list, j) < Enum.at(list, minIndex) do
                minIndex = j
              end
              j = j + 1
              while_fun_2.(while_fun_2, j, minIndex)
            else
              {j, minIndex}
            end
          end
          {j, minIndex} = try do
              while_fun_2.(while_fun_2, j, minIndex)
            catch
              :break -> {j, minIndex}
            end

          tmp = Enum.at(list, i)
          list = List.replace_at(list, i, Enum.at(list, minIndex))
          list = List.replace_at(list, minIndex, tmp)
          i = i + 1
          while_fun.(while_fun, i, list)
        else
          {i, list}
        end
      end
      {i, list} = try do
          while_fun.(while_fun, i, list)
        catch
          :break -> {i, list}
        end

      throw {:return, Enum.at(list, k)}
    catch
      {:return, val} -> val
    end
  end
  def median(a) do
    try do
      arr = a
      half = trunc((div(length(arr), 2)))
      med = Main.sel(arr, half)
      if rem(length(arr), 2) == 0 do
        throw {:return, (med + Enum.at(arr, half - 1)) / 2.0}
      end
      throw {:return, med}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    mem_start = _mem()
    t_start = _now()
    IO.puts(Kernel.inspect(Main.median([3.0, 1.0, 4.0, 1.0])))
    IO.puts(Kernel.inspect(Main.median([3.0, 1.0, 4.0, 1.0, 5.0])))
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
