# Code generated by Mochi transpiler 2025-07-25 12:29 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  Process.put(:op_add, 1)
  Process.put(:op_sub, 2)
  Process.put(:op_mul, 3)
  Process.put(:op_div, 4)
  Process.put(:n_cards, 4)
  Process.put(:goal, 24)
  Process.put(:digit_range, 9)
  def binEval(op, l, r) do
    try do
      lv = exprEval(l)
      rv = exprEval(r)
      if op == Process.get(:op_add) do
        throw {:return, %{num: lv.num * rv.denom + lv.denom * rv.num, denom: lv.denom * rv.denom}}
      end
      if op == Process.get(:op_sub) do
        throw {:return, %{num: lv.num * rv.denom - lv.denom * rv.num, denom: lv.denom * rv.denom}}
      end
      if op == Process.get(:op_mul) do
        throw {:return, %{num: lv.num * rv.num, denom: lv.denom * rv.denom}}
      end
      throw {:return, %{num: lv.num * rv.denom, denom: lv.denom * rv.num}}
    catch
      {:return, val} -> val
    end
  end
  def binString(op, l, r) do
    try do
      ls = exprString(l)
      rs = exprString(r)
      opstr = ""
      {opstr} = if op == Process.get(:op_add) do
        opstr = " + "
        {opstr}
      else
        {opstr} = if op == Process.get(:op_sub) do
          opstr = " - "
          {opstr}
        else
          {opstr} = if op == Process.get(:op_mul) do
            opstr = " * "
            {opstr}
          else
            opstr = " / "
            {opstr}
          end
          {opstr}
        end
        {opstr}
      end
      throw {:return, (((("(" <> ls) <> opstr) <> rs) <> ")")}
    catch
      {:return, val} -> val
    end
  end
  def newNum(n) do
    try do
      throw {:return, %{value: %{num: n, denom: 1}}}
    catch
      {:return, val} -> val
    end
  end
  def exprEval(x) do
    try do
      throw {:return, case x do
  %{value: v} -> v
  %{op: op, left: l, right: r} -> binEval(op, l, r)
end}
    catch
      {:return, val} -> val
    end
  end
  def exprString(x) do
    try do
      throw {:return, case x do
  %{value: v} -> to_string(v.num)
  %{op: op, left: l, right: r} -> binString(op, l, r)
end}
    catch
      {:return, val} -> val
    end
  end
  def solve(xs) do
    try do
      if length(xs) == 1 do
        f = exprEval(Enum.at(xs, 0))
        if f.denom != 0 && f.num == f.denom * Process.get(:goal) do
          IO.puts(Kernel.to_string(exprString(Enum.at(xs, 0))))
          throw {:return, true}
        end
        throw {:return, false}
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i < length(xs) do
          j = i + 1
          while_fun_2 = fn while_fun_2, j ->
            if j < length(xs) do
              rest = []
              k = 0
              while_fun_3 = fn while_fun_3, k, rest ->
                if k < length(xs) do
                  if k != i && k != j do
                    rest = (rest ++ [Enum.at(xs, k)])
                  end
                  k = k + 1
                  while_fun_3.(while_fun_3, k, rest)
                else
                  {k, rest}
                end
              end
              {k, rest} = try do
                  while_fun_3.(while_fun_3, k, rest)
                catch
                  :break -> {k, rest}
                end

              a = Enum.at(xs, i)
              b = Enum.at(xs, j)
              node = %{op: Process.get(:op_add), left: a, right: b}
              Enum.each([Process.get(:op_add), Process.get(:op_sub), Process.get(:op_mul), Process.get(:op_div)], fn op ->
                node = %{op: op, left: a, right: b}
                if solve((rest ++ [node])) do
                  throw {:return, true}
                end
              end)
              node = %{op: Process.get(:op_sub), left: b, right: a}
              if solve((rest ++ [node])) do
                throw {:return, true}
              end
              node = %{op: Process.get(:op_div), left: b, right: a}
              if solve((rest ++ [node])) do
                throw {:return, true}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j)
            else
              j
            end
          end
          j = try do
              while_fun_2.(while_fun_2, j)
            catch
              :break -> j
            end

          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          :break -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      iter = 0
      while_fun_4 = fn while_fun_4, iter ->
        if iter < 10 do
          cards = []
          i = 0
          while_fun_5 = fn while_fun_5, cards, i ->
            if i < Process.get(:n_cards) do
              n = (rem(_now(), (Process.get(:digit_range) - 1))) + 1
              cards = (cards ++ [newNum(n)])
              IO.puts((" " <> to_string(n)))
              i = i + 1
              while_fun_5.(while_fun_5, cards, i)
            else
              {cards, i}
            end
          end
          {cards, i} = try do
              while_fun_5.(while_fun_5, cards, i)
            catch
              :break -> {cards, i}
            end

          IO.puts(":  ")
          if !solve(cards) do
            IO.puts("No solution")
          end
          iter = iter + 1
          while_fun_4.(while_fun_4, iter)
        else
          iter
        end
      end
      iter = try do
          while_fun_4.(while_fun_4, iter)
        catch
          :break -> iter
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
