# Code generated by Mochi transpiler 2025-08-05 01:42 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def makeNode(n) do
    try do
      throw {:return, %{val: %{num: n, denom: 1}, txt: Kernel.to_string(n)}}
    catch
      {:return, val} -> val
    end
  end
  def combine(op, l, r) do
    try do
      res = nil
      {res} = if op == Process.get(:op_add) do
        res = %{num: l.val.num * r.val.denom + l.val.denom * r.val.num, denom: l.val.denom * r.val.denom}
        {res}
      else
        {res} = if op == Process.get(:op_sub) do
          res = %{num: l.val.num * r.val.denom - l.val.denom * r.val.num, denom: l.val.denom * r.val.denom}
          {res}
        else
          {res} = if op == Process.get(:op_mul) do
            res = %{num: l.val.num * r.val.num, denom: l.val.denom * r.val.denom}
            {res}
          else
            res = %{num: l.val.num * r.val.denom, denom: l.val.denom * r.val.num}
            {res}
          end
          {res}
        end
        {res}
      end
      opstr = ""
      {opstr} = if op == Process.get(:op_add) do
        opstr = " + "
        {opstr}
      else
        {opstr} = if op == Process.get(:op_sub) do
          opstr = " - "
          {opstr}
        else
          {opstr} = if op == Process.get(:op_mul) do
            opstr = " * "
            {opstr}
          else
            opstr = " / "
            {opstr}
          end
          {opstr}
        end
        {opstr}
      end
      throw {:return, %{val: res, txt: (((("(" <> l.txt) <> opstr) <> r.txt) <> ")")}}
    catch
      {:return, val} -> val
    end
  end
  def exprEval(x) do
    try do
      throw {:return, x.val}
    catch
      {:return, val} -> val
    end
  end
  def exprString(x) do
    try do
      throw {:return, x.txt}
    catch
      {:return, val} -> val
    end
  end
  def solve(xs) do
    try do
      if _len(xs) == 1 do
        f = exprEval(Enum.at(xs, 0))
        if f.denom != 0 && f.num == f.denom * Process.get(:goal) do
          IO.puts(Kernel.inspect(exprString(Enum.at(xs, 0))))
          throw {:return, true}
        end
        throw {:return, false}
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          j = i + 1
          while_fun_2 = fn while_fun_2, j ->
            if j < _len(xs) do
              rest = []
              k = 0
              while_fun_3 = fn while_fun_3, k, rest ->
                if k < _len(xs) do
                  {rest} = if k != i && k != j do
                    rest = (rest ++ [Enum.at(xs, k)])
                    {rest}
                  else
                    {rest}
                  end
                  k = k + 1
                  while_fun_3.(while_fun_3, k, rest)
                else
                  {k, rest}
                end
              end
              {k, rest} = try do
                  while_fun_3.(while_fun_3, k, rest)
                catch
                  {:break, {k, rest}} -> {k, rest}
                end

              a = Enum.at(xs, i)
              b = Enum.at(xs, j)
              node_ = nil
              {node_} = Enum.reduce([Process.get(:op_add), Process.get(:op_sub), Process.get(:op_mul), Process.get(:op_div)], {node_}, fn op, {node_} ->
                node_ = combine(op, a, b)
                if solve((rest ++ [node_])) do
                  throw {:return, true}
                end
                {node_}
              end)
              node_ = combine(Process.get(:op_sub), b, a)
              if solve((rest ++ [node_])) do
                throw {:return, true}
              end
              node_ = combine(Process.get(:op_div), b, a)
              if solve((rest ++ [node_])) do
                throw {:return, true}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j)
            else
              j
            end
          end
          j = try do
              while_fun_2.(while_fun_2, j)
            catch
              {:break, {j}} -> j
            end

          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      iter = 0
      while_fun_4 = fn while_fun_4, iter ->
        if iter < 10 do
          cards = []
          i = 0
          while_fun_5 = fn while_fun_5, cards, i ->
            if i < Process.get(:n_cards) do
              n = (rem(_now(), (Process.get(:digit_range) - 1))) + 1
              cards = (cards ++ [makeNode(n)])
              IO.puts((" " <> Kernel.to_string(n)))
              i = i + 1
              while_fun_5.(while_fun_5, cards, i)
            else
              {cards, i}
            end
          end
          {cards, i} = try do
              while_fun_5.(while_fun_5, cards, i)
            catch
              {:break, {cards, i}} -> {cards, i}
            end

          IO.puts(":  ")
          if !solve(cards) do
            IO.puts("No solution")
          end
          iter = iter + 1
          while_fun_4.(while_fun_4, iter)
        else
          iter
        end
      end
      iter = try do
          while_fun_4.(while_fun_4, iter)
        catch
          {:break, {iter}} -> iter
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:op_add, 1)
  Process.put(:op_sub, 2)
  Process.put(:op_mul, 3)
  Process.put(:op_div, 4)
  Process.put(:n_cards, 4)
  Process.put(:goal, 24)
  Process.put(:digit_range, 9)
  def bench_main() do
    Process.put(:op_add, 1)
    Process.put(:op_sub, 2)
    Process.put(:op_mul, 3)
    Process.put(:op_div, 4)
    Process.put(:n_cards, 4)
    Process.put(:goal, 24)
    Process.put(:digit_range, 9)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
