# Code generated by Mochi transpiler 2025-07-26 05:21 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.at(base, start)
      true -> Enum.slice(base, start, len)
    end
  end
  def pfacSum(i) do
    try do
      sum = 0
      p = 1
      while_fun = fn while_fun, p, sum ->
        if p <= div(i, 2) do
          if rem(i, p) == 0 do
            sum = sum + p
          end
          p = p + 1
          while_fun.(while_fun, p, sum)
        else
          {p, sum}
        end
      end
      {p, sum} = try do
          while_fun.(while_fun, p, sum)
        catch
          :break -> {p, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def pad(n, width) do
    try do
      s = to_string(n)
      while_fun_2 = fn while_fun_2, s ->
        if String.length(s) < width do
          s = (" " <> s)
          while_fun_2.(while_fun_2, s)
        else
          s
        end
      end
      s = try do
          while_fun_2.(while_fun_2, s)
        catch
          :break -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      sums = []
      i = 0
      while_fun_3 = fn while_fun_3, i, sums ->
        if i < 20000 do
          sums = (sums ++ [0])
          i = i + 1
          while_fun_3.(while_fun_3, i, sums)
        else
          {i, sums}
        end
      end
      {i, sums} = try do
          while_fun_3.(while_fun_3, i, sums)
        catch
          :break -> {i, sums}
        end

      i = 1
      while_fun_4 = fn while_fun_4, i, sums ->
        if i < 20000 do
          sums = List.replace_at(sums, i, pfacSum(i))
          i = i + 1
          while_fun_4.(while_fun_4, i, sums)
        else
          {i, sums}
        end
      end
      {i, sums} = try do
          while_fun_4.(while_fun_4, i, sums)
        catch
          :break -> {i, sums}
        end

      IO.puts("The amicable pairs below 20,000 are:")
      n = 2
      while_fun_5 = fn while_fun_5, n ->
        if n < 19999 do
          m = Enum.at(sums, n)
          if m > n && m < 20000 && n == Enum.at(sums, m) do
            IO.puts(((("  " <> pad(n, 5)) <> " and ") <> pad(m, 5)))
          end
          n = n + 1
          while_fun_5.(while_fun_5, n)
        else
          n
        end
      end
      n = try do
          while_fun_5.(while_fun_5, n)
        catch
          :break -> n
        end

    catch
      {:return, val} -> val
    end
  end
end
Main.main()
