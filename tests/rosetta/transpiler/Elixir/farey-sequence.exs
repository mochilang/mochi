# Code generated by Mochi transpiler 2025-08-04 21:17 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def fracStr(f) do
    try do
      throw {:return, ((Kernel.to_string(f.num) <> "/") <> Kernel.to_string(f.den))}
    catch
      {:return, val} -> val
    end
  end
  def gen(l, r, n, acc) do
    try do
      m = %{num: l.num + r.num, den: l.den + r.den}
      {acc} = if m.den <= n do
        acc = gen(l, m, n, acc)
        acc = (acc ++ [m])
        acc = gen(m, r, n, acc)
        {acc}
      else
        {acc}
      end
      throw {:return, acc}
    catch
      {:return, val} -> val
    end
  end
  def totient(n) do
    try do
      tot = n
      nn = n
      p = 2
      while_fun = fn while_fun, nn, p, tot ->
        if p * p <= nn do
          {nn, tot} = if rem(nn, p) == 0 do
            while_fun_2 = fn while_fun_2, nn ->
              if rem(nn, p) == 0 do
                nn = div(nn, p)
                while_fun_2.(while_fun_2, nn)
              else
                nn
              end
            end
            nn = try do
                while_fun_2.(while_fun_2, nn)
              catch
                {:break, {nn}} -> nn
              end

            tot = tot - div(tot, p)
            {nn, tot}
          else
            {nn, tot}
          end
          {p} = if p == 2 do
            p = 1
            {p}
          else
            {p}
          end
          p = p + 2
          while_fun.(while_fun, nn, p, tot)
        else
          {nn, p, tot}
        end
      end
      {nn, p, tot} = try do
          while_fun.(while_fun, nn, p, tot)
        catch
          {:break, {nn, p, tot}} -> {nn, p, tot}
        end

      {tot} = if nn > 1 do
        tot = tot - div(tot, nn)
        {tot}
      else
        {tot}
      end
      throw {:return, tot}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      n = 1
      while_fun_3 = fn while_fun_3, n ->
        if n <= 11 do
          l = %{num: 0, den: 1}
          r = %{num: 1, den: 1}
          seq = gen(l, r, n, [])
          line = ((("F(" <> Kernel.to_string(n)) <> "): ") <> fracStr(l))
          {line} = Enum.reduce(seq, {line}, fn f, {line} ->
            line = ((line <> " ") <> fracStr(f))
            {line}
          end)
          line = ((line <> " ") <> fracStr(r))
          IO.puts(line)
          n = n + 1
          while_fun_3.(while_fun_3, n)
        else
          n
        end
      end
      n = try do
          while_fun_3.(while_fun_3, n)
        catch
          {:break, {n}} -> n
        end

      sum = 1
      i = 1
      next = 100
      while_fun_4 = fn while_fun_4, i, next, sum ->
        if i <= 1000 do
          sum = sum + totient(i)
          {next} = if i == next do
            IO.puts(((("|F(" <> Kernel.to_string(i)) <> ")|: ") <> Kernel.inspect(sum)))
            next = next + 100
            {next}
          else
            {next}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i, next, sum)
        else
          {i, next, sum}
        end
      end
      {i, next, sum} = try do
          while_fun_4.(while_fun_4, i, next, sum)
        catch
          {:break, {i, next, sum}} -> {i, next, sum}
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
