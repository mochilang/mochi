# Code generated by Mochi transpiler 2025-08-04 11:46 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def absInt(n) do
    try do
      throw {:return, ((if n < 0, do: -n, else: n))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      b = 1
      while_fun = fn while_fun, b ->
        if b <= 5 do
          if b != 5 do
            c = 1
            while_fun_2 = fn while_fun_2, c ->
              if c <= 5 do
                if c != 1 && c != b do
                  f = 1
                  while_fun_3 = fn while_fun_3, f ->
                    if f <= 5 do
                      if f != 1 && f != 5 && f != b && f != c && absInt(f - c) > 1 do
                        m = 1
                        while_fun_4 = fn while_fun_4, m ->
                          if m <= 5 do
                            if m != b && m != c && m != f && m > c do
                              s = 1
                              while_fun_5 = fn while_fun_5, s ->
                                if s <= 5 do
                                  if s != b && s != c && s != f && s != m && absInt(s - f) > 1 do
                                    IO.puts((((((((((("Baker in " <> Kernel.to_string(b)) <> ", Cooper in ") <> Kernel.to_string(c)) <> ", Fletcher in ") <> Kernel.to_string(f)) <> ", Miller in ") <> Kernel.to_string(m)) <> ", Smith in ") <> Kernel.to_string(s)) <> "."))
                                    throw {:return, nil}
                                  end
                                  s = s + 1
                                  while_fun_5.(while_fun_5, s)
                                else
                                  s
                                end
                              end
                              s = try do
                                  while_fun_5.(while_fun_5, s)
                                catch
                                  {:break, s} -> s
                                end

                            end
                            m = m + 1
                            while_fun_4.(while_fun_4, m)
                          else
                            m
                          end
                        end
                        m = try do
                            while_fun_4.(while_fun_4, m)
                          catch
                            {:break, m} -> m
                          end

                      end
                      f = f + 1
                      while_fun_3.(while_fun_3, f)
                    else
                      f
                    end
                  end
                  f = try do
                      while_fun_3.(while_fun_3, f)
                    catch
                      {:break, f} -> f
                    end

                end
                c = c + 1
                while_fun_2.(while_fun_2, c)
              else
                c
              end
            end
            c = try do
                while_fun_2.(while_fun_2, c)
              catch
                {:break, c} -> c
              end

          end
          b = b + 1
          while_fun.(while_fun, b)
        else
          b
        end
      end
      b = try do
          while_fun.(while_fun, b)
        catch
          {:break, b} -> b
        end

      IO.puts("No solution found.")
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
