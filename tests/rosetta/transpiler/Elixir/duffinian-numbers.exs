# Code generated by Mochi transpiler 2025-08-04 15:54 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def gcd(a, b) do
    try do
      x = a
      {x} = if x < 0 do
        x = -x
        {x}
      else
        {x}
      end
      y = b
      {y} = if y < 0 do
        y = -y
        {y}
      else
        {y}
      end
      while_fun = fn while_fun, x, y ->
        if y != 0 do
          t = rem(x, y)
          x = y
          y = t
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def divisors(n) do
    try do
      divs = []
      i = 1
      while_fun_2 = fn while_fun_2, divs, i ->
        if i * i <= n do
          {divs} = if rem(n, i) == 0 do
            divs = (divs ++ [i])
            j = trunc((div(n, i)))
            {divs} = if i != j do
              divs = (divs ++ [j])
              {divs}
            else
              {divs}
            end
            {divs}
          else
            {divs}
          end
          i = i + 1
          while_fun_2.(while_fun_2, divs, i)
        else
          {divs, i}
        end
      end
      {divs, i} = try do
          while_fun_2.(while_fun_2, divs, i)
        catch
          {:break, {divs, i}} -> {divs, i}
        end

      throw {:return, divs}
    catch
      {:return, val} -> val
    end
  end
  def sum(xs) do
    try do
      s = 0
      {s} = Enum.reduce(xs, {s}, fn v, {s} ->
        s = s + v
        {s}
      end)
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def isDuffinian(n) do
    try do
      divs = divisors(n)
      if _len(divs) <= 2 do
        throw {:return, false}
      end
      sigma = sum(divs)
      throw {:return, gcd(sigma, n) == 1}
    catch
      {:return, val} -> val
    end
  end
  def pad(n, width) do
    try do
      s = Kernel.to_string(n)
      while_fun_3 = fn while_fun_3, s ->
        if _len(s) < width do
          s = (" " <> s)
          while_fun_3.(while_fun_3, s)
        else
          s
        end
      end
      s = try do
          while_fun_3.(while_fun_3, s)
        catch
          {:break, {s}} -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def printTable(nums, perRow, width) do
    try do
      i = 0
      line = ""
      while_fun_4 = fn while_fun_4, i, line ->
        if i < _len(nums) do
          line = ((line <> " ") <> pad(Enum.at(nums, i), width))
          {line} = if rem((i + 1), perRow) == 0 do
            IO.puts(Kernel.inspect(_slice(line, 1, _len(line) - (1))))
            line = ""
            {line}
          else
            {line}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i, line)
        else
          {i, line}
        end
      end
      {i, line} = try do
          while_fun_4.(while_fun_4, i, line)
        catch
          {:break, {i, line}} -> {i, line}
        end

      if _len(line) > 0 do
        IO.puts(Kernel.inspect(_slice(line, 1, _len(line) - (1))))
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      duff = []
      n = 1
      while_fun_5 = fn while_fun_5, duff, n ->
        if _len(duff) < 50 do
          {duff} = if isDuffinian(n) do
            duff = (duff ++ [n])
            {duff}
          else
            {duff}
          end
          n = n + 1
          while_fun_5.(while_fun_5, duff, n)
        else
          {duff, n}
        end
      end
      {duff, n} = try do
          while_fun_5.(while_fun_5, duff, n)
        catch
          {:break, {duff, n}} -> {duff, n}
        end

      IO.puts("First 50 Duffinian numbers:")
      printTable(duff, 10, 3)
      triplets = []
      n = 1
      while_fun_6 = fn while_fun_6, n, triplets ->
        if _len(triplets) < 20 do
          {n, triplets} = if isDuffinian(n) && isDuffinian(n + 1) && isDuffinian(n + 2) do
            triplets = (triplets ++ [(((((("(" <> Kernel.to_string(n)) <> ",") <> Kernel.to_string(n + 1)) <> ",") <> Kernel.to_string(n + 2)) <> ")")])
            n = n + 3
            {n, triplets}
          else
            {n, triplets}
          end
          n = n + 1
          while_fun_6.(while_fun_6, n, triplets)
        else
          {n, triplets}
        end
      end
      {n, triplets} = try do
          while_fun_6.(while_fun_6, n, triplets)
        catch
          {:break, {n, triplets}} -> {n, triplets}
        end

      IO.puts("\nFirst 20 Duffinian triplets:")
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(triplets) do
          line = ""
          j = 0
          while_fun_8 = fn while_fun_8, i, j, line ->
            if j < 4 && i < _len(triplets) do
              line = (line <> padStr(Enum.at(triplets, i), 16))
              j = j + 1
              i = i + 1
              while_fun_8.(while_fun_8, i, j, line)
            else
              {i, j, line}
            end
          end
          {i, j, line} = try do
              while_fun_8.(while_fun_8, i, j, line)
            catch
              {:break, {i, j, line}} -> {i, j, line}
            end

          IO.puts(line)
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def padStr(s, width) do
    try do
      res = s
      while_fun_9 = fn while_fun_9, res ->
        if _len(res) < width do
          res = (res <> " ")
          while_fun_9.(while_fun_9, res)
        else
          res
        end
      end
      res = try do
          while_fun_9.(while_fun_9, res)
        catch
          {:break, {res}} -> res
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
