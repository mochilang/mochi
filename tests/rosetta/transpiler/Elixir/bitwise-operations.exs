# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def toUnsigned16(n) do
    try do
      u = n
      {u} = if u < 0 do
        u = u + 65536
        {u}
      else
        {u}
      end
      throw {:return, rem(u, 65536)}
    catch
      {:return, val} -> val
    end
  end
  def bin16(n) do
    try do
      u = Main.toUnsigned16(n)
      bits = ""
      mask = 32768
      {bits, mask, u} = Enum.reduce((0..(16 - 1)), {bits, mask, u}, fn i, {bits, mask, u} ->
        {bits, u} = if u >= mask do
          bits = (bits <> "1")
          u = u - mask
          {bits, u}
        else
          bits = (bits <> "0")
          {bits, u}
        end
        mask = trunc((div(mask, 2)))
        {bits, mask, u}
      end)
      throw {:return, bits}
    catch
      {:return, val} -> val
    end
  end
  def bit_and(a, b) do
    try do
      ua = Main.toUnsigned16(a)
      ub = Main.toUnsigned16(b)
      res = 0
      bit = 1
      {bit, res, ua, ub} = Enum.reduce((0..(16 - 1)), {bit, res, ua, ub}, fn i, {bit, res, ua, ub} ->
        {res} = if rem(ua, 2) == 1 && rem(ub, 2) == 1 do
          res = res + bit
          {res}
        else
          {res}
        end
        ua = trunc((div(ua, 2)))
        ub = trunc((div(ub, 2)))
        bit = bit * 2
        {bit, res, ua, ub}
      end)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bit_or(a, b) do
    try do
      ua = Main.toUnsigned16(a)
      ub = Main.toUnsigned16(b)
      res = 0
      bit = 1
      {bit, res, ua, ub} = Enum.reduce((0..(16 - 1)), {bit, res, ua, ub}, fn i, {bit, res, ua, ub} ->
        {res} = if rem(ua, 2) == 1 || rem(ub, 2) == 1 do
          res = res + bit
          {res}
        else
          {res}
        end
        ua = trunc((div(ua, 2)))
        ub = trunc((div(ub, 2)))
        bit = bit * 2
        {bit, res, ua, ub}
      end)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bit_xor(a, b) do
    try do
      ua = Main.toUnsigned16(a)
      ub = Main.toUnsigned16(b)
      res = 0
      bit = 1
      {bit, res, ua, ub} = Enum.reduce((0..(16 - 1)), {bit, res, ua, ub}, fn i, {bit, res, ua, ub} ->
        abit = rem(ua, 2)
        bbit = rem(ub, 2)
        {res} = if (abit == 1 && bbit == 0) || (abit == 0 && bbit == 1) do
          res = res + bit
          {res}
        else
          {res}
        end
        ua = trunc((div(ua, 2)))
        ub = trunc((div(ub, 2)))
        bit = bit * 2
        {bit, res, ua, ub}
      end)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bit_not(a) do
    try do
      ua = Main.toUnsigned16(a)
      throw {:return, 65535 - ua}
    catch
      {:return, val} -> val
    end
  end
  def shl(a, b) do
    try do
      ua = Main.toUnsigned16(a)
      i = 0
      while_fun = fn while_fun, i, ua ->
        if i < b do
          ua = rem((ua * 2), 65536)
          i = i + 1
          while_fun.(while_fun, i, ua)
        else
          {i, ua}
        end
      end
      {i, ua} = try do
          while_fun.(while_fun, i, ua)
        catch
          :break -> {i, ua}
        end

      throw {:return, ua}
    catch
      {:return, val} -> val
    end
  end
  def shr(a, b) do
    try do
      ua = Main.toUnsigned16(a)
      i = 0
      while_fun_2 = fn while_fun_2, i, ua ->
        if i < b do
          ua = trunc((div(ua, 2)))
          i = i + 1
          while_fun_2.(while_fun_2, i, ua)
        else
          {i, ua}
        end
      end
      {i, ua} = try do
          while_fun_2.(while_fun_2, i, ua)
        catch
          :break -> {i, ua}
        end

      throw {:return, ua}
    catch
      {:return, val} -> val
    end
  end
  def las(a, b) do
    try do
      throw {:return, Main.shl(a, b)}
    catch
      {:return, val} -> val
    end
  end
  def ras(a, b) do
    try do
      val = a
      i = 0
      while_fun_3 = fn while_fun_3, i, val ->
        if i < b do
          val = (if val >= 0, do: trunc((div(val, 2))), else: trunc((div((val - 1), 2))))
          i = i + 1
          while_fun_3.(while_fun_3, i, val)
        else
          {i, val}
        end
      end
      {i, val} = try do
          while_fun_3.(while_fun_3, i, val)
        catch
          :break -> {i, val}
        end

      throw {:return, Main.toUnsigned16(val)}
    catch
      {:return, val} -> val
    end
  end
  def rol(a, b) do
    try do
      ua = Main.toUnsigned16(a)
      left = Main.shl(ua, b)
      right = Main.shr(ua, 16 - b)
      throw {:return, Main.toUnsigned16(left + right)}
    catch
      {:return, val} -> val
    end
  end
  def ror(a, b) do
    try do
      ua = Main.toUnsigned16(a)
      right = Main.shr(ua, b)
      left = Main.shl(ua, 16 - b)
      throw {:return, Main.toUnsigned16(left + right)}
    catch
      {:return, val} -> val
    end
  end
  def bitwise(a, b) do
    try do
      IO.puts(("a:   " <> Main.bin16(a)))
      IO.puts(("b:   " <> Main.bin16(b)))
      IO.puts(("and: " <> Main.bin16(Main.bit_and(a, b))))
      IO.puts(("or:  " <> Main.bin16(Main.bit_or(a, b))))
      IO.puts(("xor: " <> Main.bin16(Main.bit_xor(a, b))))
      IO.puts(("not: " <> Main.bin16(Main.bit_not(a))))
      if b < 0 do
        IO.puts("Right operand is negative, but all shifts require an unsigned right operand (shift distance).")
        throw {:return, nil}
      end
      IO.puts(("shl: " <> Main.bin16(Main.shl(a, b))))
      IO.puts(("shr: " <> Main.bin16(Main.shr(a, b))))
      IO.puts(("las: " <> Main.bin16(Main.las(a, b))))
      IO.puts(("ras: " <> Main.bin16(Main.ras(a, b))))
      IO.puts(("rol: " <> Main.bin16(Main.rol(a, b))))
      IO.puts(("ror: " <> Main.bin16(Main.ror(a, b))))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    mem_start = _mem()
    t_start = _now()
    Main.bitwise(-460, 6)
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
