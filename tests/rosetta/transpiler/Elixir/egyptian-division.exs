# Code generated by Mochi transpiler 2025-08-04 15:54 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def egyptianDivide(dividend, divisor) do
    try do
      if dividend < 0 || divisor <= 0 do
        raise("Invalid argument(s)")
      end
      if dividend < divisor do
        throw {:return, %{q: 0, r: dividend}}
      end
      powers = [1]
      doublings = [divisor]
      doubling = divisor * 2
      while_fun = fn while_fun, doubling, doublings, powers ->
        if doubling <= dividend do
          powers = (powers ++ [Enum.at(powers, _len(powers) - 1) * 2])
          doublings = (doublings ++ [doubling])
          doubling = doubling * 2
          while_fun.(while_fun, doubling, doublings, powers)
        else
          {doubling, doublings, powers}
        end
      end
      {doubling, doublings, powers} = try do
          while_fun.(while_fun, doubling, doublings, powers)
        catch
          {:break, {doubling, doublings, powers}} -> {doubling, doublings, powers}
        end

      ans = 0
      accum = 0
      i = _len(doublings) - 1
      while_fun_2 = fn while_fun_2, accum, ans, i ->
        if i >= 0 do
          {accum, ans} = if accum + Enum.at(doublings, i) <= dividend do
            accum = accum + Enum.at(doublings, i)
            ans = ans + Enum.at(powers, i)
            if accum == dividend do
              throw {:break, {accum, ans, i}}
            end
            {accum, ans}
          else
            {accum, ans}
          end
          i = i - 1
          while_fun_2.(while_fun_2, accum, ans, i)
        else
          {accum, ans, i}
        end
      end
      {accum, ans, i} = try do
          while_fun_2.(while_fun_2, accum, ans, i)
        catch
          {:break, {accum, ans, i}} -> {accum, ans, i}
        end

      throw {:return, %{q: ans, r: dividend - accum}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      dividend = 580
      divisor = 34
      res = egyptianDivide(dividend, divisor)
      IO.puts(((((((Kernel.to_string(dividend) <> " divided by ") <> Kernel.to_string(divisor)) <> " is ") <> Kernel.to_string(res.q)) <> " with remainder ") <> Kernel.to_string(res.r)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
