# Code generated by Mochi transpiler 2025-08-04 22:33 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def randInt(seed, n) do
    try do
      next = rem((seed * 1664525 + 1013904223), 2147483647)
      throw {:return, [next, rem(next, n)]}
    catch
      {:return, val} -> val
    end
  end
  def newBoard(n, seed) do
    try do
      board = []
      s = seed
      i = 0
      while_fun = fn while_fun, board, i, s ->
        if i < n do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row, s ->
            if j < n do
              r = randInt(s, 2)
              s = Enum.at(r, 0)
              row = (row ++ [Enum.at(r, 1)])
              j = j + 1
              while_fun_2.(while_fun_2, j, row, s)
            else
              {j, row, s}
            end
          end
          {j, row, s} = try do
              while_fun_2.(while_fun_2, j, row, s)
            catch
              {:break, {j, row, s}} -> {j, row, s}
            end

          board = (board ++ [row])
          i = i + 1
          while_fun.(while_fun, board, i, s)
        else
          {board, i, s}
        end
      end
      {board, i, s} = try do
          while_fun.(while_fun, board, i, s)
        catch
          {:break, {board, i, s}} -> {board, i, s}
        end

      throw {:return, [board, s]}
    catch
      {:return, val} -> val
    end
  end
  def copyBoard(b) do
    try do
      nb = []
      i = 0
      while_fun_3 = fn while_fun_3, i, nb ->
        if i < _len(b) do
          row = []
          j = 0
          while_fun_4 = fn while_fun_4, j, row ->
            if j < _len(Enum.at(b, i)) do
              row = (row ++ [Enum.at(Enum.at(b, i), j)])
              j = j + 1
              while_fun_4.(while_fun_4, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_4.(while_fun_4, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          nb = (nb ++ [row])
          i = i + 1
          while_fun_3.(while_fun_3, i, nb)
        else
          {i, nb}
        end
      end
      {i, nb} = try do
          while_fun_3.(while_fun_3, i, nb)
        catch
          {:break, {i, nb}} -> {i, nb}
        end

      throw {:return, nb}
    catch
      {:return, val} -> val
    end
  end
  def flipRow(b, r) do
    try do
      j = 0
      while_fun_5 = fn while_fun_5, b, j ->
        if j < _len(Enum.at(b, r)) do
          b = List.replace_at(b, r, List.replace_at(Enum.at(b, r), j, 1 - Enum.at(Enum.at(b, r), j)))
          j = j + 1
          while_fun_5.(while_fun_5, b, j)
        else
          {b, j}
        end
      end
      {b, j} = try do
          while_fun_5.(while_fun_5, b, j)
        catch
          {:break, {b, j}} -> {b, j}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def flipCol(b, c) do
    try do
      i = 0
      while_fun_6 = fn while_fun_6, b, i ->
        if i < _len(b) do
          b = List.replace_at(b, i, List.replace_at(Enum.at(b, i), c, 1 - Enum.at(Enum.at(b, i), c)))
          i = i + 1
          while_fun_6.(while_fun_6, b, i)
        else
          {b, i}
        end
      end
      {b, i} = try do
          while_fun_6.(while_fun_6, b, i)
        catch
          {:break, {b, i}} -> {b, i}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def boardsEqual(a, b) do
    try do
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(a) do
          j = 0
          while_fun_8 = fn while_fun_8, j ->
            if j < _len(Enum.at(a, i)) do
              if Enum.at(Enum.at(a, i), j) != Enum.at(Enum.at(b, i), j) do
                throw {:return, false}
              end
              j = j + 1
              while_fun_8.(while_fun_8, j)
            else
              j
            end
          end
          j = try do
              while_fun_8.(while_fun_8, j)
            catch
              {:break, {j}} -> j
            end

          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def shuffleBoard(b, seed) do
    try do
      s = seed
      n = _len(b)
      k = 0
      while_fun_9 = fn while_fun_9, b, k, s ->
        if k < 2 * n do
          r = randInt(s, n)
          s = Enum.at(r, 0)
          idx = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(Enum.at(r, 1))
          b = (if rem(k, 2) == 0, do: flipRow(b, idx), else: flipCol(b, idx))
          k = k + 1
          while_fun_9.(while_fun_9, b, k, s)
        else
          {b, k, s}
        end
      end
      {b, k, s} = try do
          while_fun_9.(while_fun_9, b, k, s)
        catch
          {:break, {b, k, s}} -> {b, k, s}
        end

      throw {:return, [b, s]}
    catch
      {:return, val} -> val
    end
  end
  def solve(board, target) do
    try do
      n = _len(board)
      row = []
      col = []
      i = 0
      while_fun_10 = fn while_fun_10, i, row ->
        if i < n do
          diff = (if Enum.at(Enum.at(board, i), 0) != Enum.at(Enum.at(target, i), 0), do: 1, else: 0)
          row = (row ++ [diff])
          i = i + 1
          while_fun_10.(while_fun_10, i, row)
        else
          {i, row}
        end
      end
      {i, row} = try do
          while_fun_10.(while_fun_10, i, row)
        catch
          {:break, {i, row}} -> {i, row}
        end

      j = 0
      while_fun_11 = fn while_fun_11, col, j ->
        if j < n do
          diff = (if Enum.at(Enum.at(board, 0), j) != Enum.at(Enum.at(target, 0), j), do: 1, else: 0)
          val = rem((diff + Enum.at(row, 0)), 2)
          col = (col ++ [val])
          j = j + 1
          while_fun_11.(while_fun_11, col, j)
        else
          {col, j}
        end
      end
      {col, j} = try do
          while_fun_11.(while_fun_11, col, j)
        catch
          {:break, {col, j}} -> {col, j}
        end

      throw {:return, %{"row" => row, "col" => col}}
    catch
      {:return, val} -> val
    end
  end
  def applySolution(b, sol) do
    try do
      board = b
      moves = 0
      i = 0
      while_fun_12 = fn while_fun_12, board, i, moves ->
        if i < _len(Map.get(sol, "row", [])) do
          {board, moves} = if Enum.at(sol["row"], i) == 1 do
            board = flipRow(board, i)
            moves = moves + 1
            {board, moves}
          else
            {board, moves}
          end
          i = i + 1
          while_fun_12.(while_fun_12, board, i, moves)
        else
          {board, i, moves}
        end
      end
      {board, i, moves} = try do
          while_fun_12.(while_fun_12, board, i, moves)
        catch
          {:break, {board, i, moves}} -> {board, i, moves}
        end

      j = 0
      while_fun_13 = fn while_fun_13, board, j, moves ->
        if j < _len(Map.get(sol, "col", [])) do
          {board, moves} = if Enum.at(sol["col"], j) == 1 do
            board = flipCol(board, j)
            moves = moves + 1
            {board, moves}
          else
            {board, moves}
          end
          j = j + 1
          while_fun_13.(while_fun_13, board, j, moves)
        else
          {board, j, moves}
        end
      end
      {board, j, moves} = try do
          while_fun_13.(while_fun_13, board, j, moves)
        catch
          {:break, {board, j, moves}} -> {board, j, moves}
        end

      throw {:return, [board, moves]}
    catch
      {:return, val} -> val
    end
  end
  def printBoard(b) do
    try do
      i = 0
      while_fun_14 = fn while_fun_14, i ->
        if i < _len(b) do
          line = ""
          j = 0
          while_fun_15 = fn while_fun_15, j, line ->
            if j < _len(Enum.at(b, i)) do
              line = (line <> Kernel.to_string(Enum.at(Enum.at(b, i), j)))
              {line} = if j < _len(Enum.at(b, i)) - 1 do
                line = (line <> " ")
                {line}
              else
                {line}
              end
              j = j + 1
              while_fun_15.(while_fun_15, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_15.(while_fun_15, j, line)
            catch
              {:break, {j, line}} -> {j, line}
            end

          IO.puts(line)
          i = i + 1
          while_fun_14.(while_fun_14, i)
        else
          i
        end
      end
      i = try do
          while_fun_14.(while_fun_14, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      n = 3
      seed = 1
      res = newBoard(n, seed)
      target = Enum.at(res, 0)
      seed = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(Enum.at(res, 1))
      board = copyBoard(target)
      while_fun_16 = fn while_fun_16, board, seed ->
        if true do
          sres = shuffleBoard(copyBoard(board), seed)
          board = Enum.at(sres, 0)
          seed = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(Enum.at(sres, 1))
          if !boardsEqual(board, target) do
            throw {:break, {board, seed}}
          end
          while_fun_16.(while_fun_16, board, seed)
        else
          {board, seed}
        end
      end
      {board, seed} = try do
          while_fun_16.(while_fun_16, board, seed)
        catch
          {:break, {board, seed}} -> {board, seed}
        end

      IO.puts("Target:")
      printBoard(target)
      IO.puts("Board:")
      printBoard(board)
      sol = solve(board, target)
      ares = applySolution(board, sol)
      board = Enum.at(ares, 0)
      moves = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(Enum.at(ares, 1))
      IO.puts("Solved:")
      printBoard(board)
      IO.puts(("Moves: " <> Kernel.to_string(moves)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
