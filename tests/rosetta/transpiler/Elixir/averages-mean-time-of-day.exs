# Code generated by Mochi transpiler 2025-07-26 23:50 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def sinApprox(x) do
    try do
      term = x
      sum = x
      n = 1
      while_fun = fn while_fun, n, sum, term ->
        if n <= 8 do
          denom = ((2 * n) * (2 * n + 1))
          term = -term * x * x / denom
          sum = sum + term
          n = n + 1
          while_fun.(while_fun, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun.(while_fun, n, sum, term)
        catch
          :break -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def cosApprox(x) do
    try do
      term = 1.0
      sum = 1.0
      n = 1
      while_fun_2 = fn while_fun_2, n, sum, term ->
        if n <= 8 do
          denom = ((2 * n - 1) * (2 * n))
          term = -term * x * x / denom
          sum = sum + term
          n = n + 1
          while_fun_2.(while_fun_2, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun_2.(while_fun_2, n, sum, term)
        catch
          :break -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def atanApprox(x) do
    try do
      if x > 1.0 do
        throw {:return, Process.get(:pi) / 2.0 - x / (x * x + 0.28)}
      end
      if x < (-1.0) do
        throw {:return, -Process.get(:pi) / 2.0 - x / (x * x + 0.28)}
      end
      throw {:return, x / (1.0 + 0.28 * x * x)}
    catch
      {:return, val} -> val
    end
  end
  def atan2Approx(y, x) do
    try do
      if x > 0.0 do
        throw {:return, Main.atanApprox(y / x)}
      end
      if x < 0.0 do
        if y >= 0.0 do
          throw {:return, Main.atanApprox(y / x) + Process.get(:pi)}
        end
        throw {:return, Main.atanApprox(y / x) - Process.get(:pi)}
      end
      if y > 0.0 do
        throw {:return, Process.get(:pi) / 2.0}
      end
      if y < 0.0 do
        throw {:return, -Process.get(:pi) / 2.0}
      end
      throw {:return, 0.0}
    catch
      {:return, val} -> val
    end
  end
  def digit(ch) do
    try do
      digits = "0123456789"
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < String.length(digits) do
          if String.slice(digits, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          :break -> i
        end

      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def parseTwo(s, idx) do
    try do
      throw {:return, Main.digit(String.slice(s, idx, idx + 1 - (idx))) * 10 + Main.digit(String.slice(s, idx + 1, idx + 2 - (idx + 1)))}
    catch
      {:return, val} -> val
    end
  end
  def parseSec(s) do
    try do
      h = Main.parseTwo(s, 0)
      m = Main.parseTwo(s, 3)
      sec = Main.parseTwo(s, 6)
      tmp = (h * 60 + m) * 60 + sec
      throw {:return, tmp}
    catch
      {:return, val} -> val
    end
  end
  def pad(n) do
    try do
      throw {:return, (if n < 10, do: ("0" <> Kernel.to_string(n)), else: Kernel.to_string(n))}
    catch
      {:return, val} -> val
    end
  end
  def meanTime(times) do
    try do
      ssum = 0.0
      csum = 0.0
      i = 0
      while_fun_4 = fn while_fun_4, csum, i, ssum ->
        if i < length(times) do
          sec = Main.parseSec(Enum.at(times, i))
          ang = sec * 2.0 * Process.get(:pi) / 86400.0
          ssum = ssum + Main.sinApprox(ang)
          csum = csum + Main.cosApprox(ang)
          i = i + 1
          while_fun_4.(while_fun_4, csum, i, ssum)
        else
          {csum, i, ssum}
        end
      end
      {csum, i, ssum} = try do
          while_fun_4.(while_fun_4, csum, i, ssum)
        catch
          :break -> {csum, i, ssum}
        end

      theta = Main.atan2Approx(ssum, csum)
      frac = theta / (2.0 * Process.get(:pi))
      while_fun_5 = fn while_fun_5, frac ->
        if frac < 0.0 do
          frac = frac + 1.0
          while_fun_5.(while_fun_5, frac)
        else
          frac
        end
      end
      frac = try do
          while_fun_5.(while_fun_5, frac)
        catch
          :break -> frac
        end

      total = frac * 86400.0
      si = trunc(total)
      h = trunc((div(si, 3600)))
      m = trunc((div((rem(si, 3600)), 60)))
      s = trunc((rem(si, 60)))
      throw {:return, ((((Main.pad(h) <> ":") <> Main.pad(m)) <> ":") <> Main.pad(s))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      inputs = ["23:00:17", "23:40:20", "00:12:45", "00:17:19"]
      IO.puts(Kernel.inspect(Main.meanTime(inputs)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  def bench_main() do
    Process.put(:pi, 3.141592653589793)
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
