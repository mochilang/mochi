# Code generated by Mochi transpiler 2025-08-04 22:33 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def greLeap(year) do
    try do
      a = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((rem(year, 4)))
      b = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((rem(year, 100)))
      c = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((rem(year, 400)))
      throw {:return, a == 0 && (b != 0 || c == 0)}
    catch
      {:return, val} -> val
    end
  end
  def repLeap(year) do
    try do
      a = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((rem((year + 1), 4)))
      b = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((rem((year + 1), 100)))
      c = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((rem((year + 1), 400)))
      throw {:return, a == 0 && (b != 0 || c == 0)}
    catch
      {:return, val} -> val
    end
  end
  def greToDay(d, m, y) do
    try do
      yy = y
      mm = m
      {mm, yy} = if mm < 3 do
        yy = yy - 1
        mm = mm + 12
        {mm, yy}
      else
        {mm, yy}
      end
      throw {:return, div(yy * 36525, 100) - div(yy, 100) + div(yy, 400) + div(306 * (mm + 1), 10) + d - 654842}
    catch
      {:return, val} -> val
    end
  end
  def repToDay(d, m, y) do
    try do
      dd = d
      mm = m
      {dd, mm} = if mm == 13 do
        mm = mm - 1
        dd = dd + 30
        {dd, mm}
      else
        {dd, mm}
      end
      {dd} = if repLeap(y) do
        dd = dd - 1
        {dd}
      else
        {dd}
      end
      throw {:return, 365 * y + div((y + 1), 4) - div((y + 1), 100) + div((y + 1), 400) + 30 * mm + dd - 395}
    catch
      {:return, val} -> val
    end
  end
  def dayToGre(day) do
    try do
      y = div(day * 100, 36525)
      d = day - div(y * 36525, 100) + 21
      y = y + 1792
      d = d + div(y, 100) - div(y, 400) - 13
      m = 8
      while_fun = fn while_fun, d, m, y ->
        if d > Enum.at(Process.get(:gregorian), m) do
          d = d - Enum.at(Process.get(:gregorian), m)
          m = m + 1
          {m, y} = if m == 12 do
            m = 0
            y = y + 1
            if greLeap(y) do
              Process.put(:gregorian, List.replace_at(Process.get(:gregorian), 1, 29))
            else
              Process.put(:gregorian, List.replace_at(Process.get(:gregorian), 1, 28))
            end
            {m, y}
          else
            {m, y}
          end
          while_fun.(while_fun, d, m, y)
        else
          {d, m, y}
        end
      end
      {d, m, y} = try do
          while_fun.(while_fun, d, m, y)
        catch
          {:break, {d, m, y}} -> {d, m, y}
        end

      m = m + 1
      throw {:return, [d, m, y]}
    catch
      {:return, val} -> val
    end
  end
  def dayToRep(day) do
    try do
      y = div((day - 1) * 100, 36525)
      {y} = if repLeap(y) do
        y = y - 1
        {y}
      else
        {y}
      end
      d = day - div((y + 1) * 36525, 100) + 365 + div((y + 1), 100) - div((y + 1), 400)
      y = y + 1
      m = 1
      sc = 5
      {sc} = if repLeap(y) do
        sc = 6
        {sc}
      else
        {sc}
      end
      while_fun_2 = fn while_fun_2, d, m, sc, y ->
        if d > 30 do
          d = d - 30
          m = m + 1
          {d, m, sc, y} = if m == 13 do
            {d, m, sc, y} = if d > sc do
              d = d - sc
              m = 1
              y = y + 1
              sc = 5
              {sc} = if repLeap(y) do
                sc = 6
                {sc}
              else
                {sc}
              end
              {d, m, sc, y}
            else
              {d, m, sc, y}
            end
            {d, m, sc, y}
          else
            {d, m, sc, y}
          end
          while_fun_2.(while_fun_2, d, m, sc, y)
        else
          {d, m, sc, y}
        end
      end
      {d, m, sc, y} = try do
          while_fun_2.(while_fun_2, d, m, sc, y)
        catch
          {:break, {d, m, sc, y}} -> {d, m, sc, y}
        end

      throw {:return, [d, m, y]}
    catch
      {:return, val} -> val
    end
  end
  def formatRep(d, m, y) do
    try do
      throw {:return, ((if m == 13, do: ((Enum.at(Process.get(:sansculotidesStr), d - 1) <> " ") <> Kernel.to_string(y)), else: ((((Kernel.to_string(d) <> " ") <> Enum.at(Process.get(:republicanStr), m - 1)) <> " ") <> Kernel.to_string(y))))}
    catch
      {:return, val} -> val
    end
  end
  def formatGre(d, m, y) do
    try do
      throw {:return, ((((Kernel.to_string(d) <> " ") <> Enum.at(Process.get(:gregorianStr), m - 1)) <> " ") <> Kernel.to_string(y))}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:gregorianStr, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"])
  Process.put(:gregorian, [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])
  Process.put(:republicanStr, ["Vendemiaire", "Brumaire", "Frimaire", "Nivose", "Pluviose", "Ventose", "Germinal", "Floreal", "Prairial", "Messidor", "Thermidor", "Fructidor"])
  Process.put(:sansculotidesStr, ["Fete de la vertu", "Fete du genie", "Fete du travail", "Fete de l'opinion", "Fete des recompenses", "Fete de la Revolution"])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:rep, dayToRep(greToDay(20, 5, 1795)))
    IO.puts(Kernel.inspect(formatRep(Enum.at(Process.get(:rep), 0), Enum.at(Process.get(:rep), 1), Enum.at(Process.get(:rep), 2))))
    Process.put(:gre, dayToGre(repToDay(1, 9, 3)))
    IO.puts(Kernel.inspect(formatGre(Enum.at(Process.get(:gre), 0), Enum.at(Process.get(:gre), 1), Enum.at(Process.get(:gre), 2))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
