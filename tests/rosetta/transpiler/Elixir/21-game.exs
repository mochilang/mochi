# Code generated by Mochi transpiler 2025-07-25 12:29 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  def parseIntStr(str) do
    try do
      i = 0
      neg = false
      {i, neg} = if String.length(str) > 0 && String.slice(str, 0, 1 - 0) == "-" do
        neg = true
        i = 1
        {i, neg}
      else
        {i, neg}
      end
      n = 0
      digits = %{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
      while_fun = fn while_fun, i, n ->
        if i < String.length(str) do
          n = n * 10 + digits[String.slice(str, i, i + 1 - i)]
          i = i + 1
          while_fun.(while_fun, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun.(while_fun, i, n)
        catch
          :break -> {i, n}
        end

      {n} = if neg do
        n = -n
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      total = 0
      computer = rem(_now(), 2) == 0
      IO.puts("Enter q to quit at any time\n")
      if computer do
        IO.puts("The computer will choose first")
      else
        IO.puts("You will choose first")
      end
      IO.puts("\n\nRunning total is now 0\n\n")
      round = 1
      done = false
      while_fun_2 = fn while_fun_2, computer, done, round, total ->
        if !done do
          try do
            IO.puts((("ROUND " <> to_string(round)) <> ":\n\n"))
            i = 0
            while_fun_3 = fn while_fun_3, computer, done, i, total ->
              if i < 2 && (!done) do
                try do
                  if computer do
                    choice = 0
                    choice = if total < 18, do: rem(_now(), 3) + 1, else: 21 - total
                    total = total + choice
                    IO.puts(("The computer chooses " <> to_string(choice)))
                    IO.puts(("Running total is now " <> to_string(total)))
                    if total == 21 do
                      IO.puts("\nSo, commiserations, the computer has won!")
                      done = true
                    end
                  else
                    while_fun_4 = fn while_fun_4, done, total ->
                      if true do
                        try do
                          IO.puts("Your choice 1 to 3 : ")
                          line = case IO.gets("") do
  nil -> ""
  :eof -> ""
  line -> String.trim(line)
end
                          if line == "q" || line == "Q" do
                            IO.puts("OK, quitting the game")
                            done = true
                            throw :break
                          end
                          num = parseIntStr(line)
                          if num < 1 || num > 3 do
                            if total + num > 21 do
                              IO.puts("Too big, try again")
                            else
                              IO.puts("Out of range, try again")
                            end
                            throw :continue
                          end
                          if total + num > 21 do
                            IO.puts("Too big, try again")
                            throw :continue
                          end
                          total = total + num
                          IO.puts(("Running total is now " <> to_string(total)))
                          throw :break
                        catch
                          :continue -> nil
                        end
                        while_fun_4.(while_fun_4, done, total)
                      else
                        {done, total}
                      end
                    end
                    {done, total} = try do
                        while_fun_4.(while_fun_4, done, total)
                      catch
                        :break -> {done, total}
                      end

                    if total == 21 do
                      IO.puts("\nSo, congratulations, you've won!")
                      done = true
                    end
                  end
                  IO.puts("\n")
                  computer = !computer
                  i = i + 1
                catch
                  :continue -> nil
                end
                while_fun_3.(while_fun_3, computer, done, i, total)
              else
                {computer, done, i, total}
              end
            end
            {computer, done, i, total} = try do
                while_fun_3.(while_fun_3, computer, done, i, total)
              catch
                :break -> {computer, done, i, total}
              end

            round = round + 1
          catch
            :continue -> nil
          end
          while_fun_2.(while_fun_2, computer, done, round, total)
        else
          {computer, done, round, total}
        end
      end
      {computer, done, round, total} = try do
          while_fun_2.(while_fun_2, computer, done, round, total)
        catch
          :break -> {computer, done, round, total}
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
