# Code generated by Mochi transpiler 2025-07-22 17:27 +0700
defmodule Main do
  def parseIntStr(str) do
    try do
      i = 0
      neg = false
      if length(str) > 0 && Enum.slice(str, 0, 1 - 0) == "-" do
        neg = true
        i = 1
      end
      n = 0
      digits = %{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
      while_fun = fn while_fun ->
        if i < length(str) do
          n = n * 10 + Enum.at(digits, Enum.slice(str, i, i + 1 - i))
          i = i + 1
          while_fun.(while_fun)
        else
          nil
        end
      end
      while_fun.(while_fun)
      if neg do
        n = -n
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      total = 0
      computer = rem(now.(), 2) == 0
      IO.puts("Enter q to quit at any time\n")
      if computer do
        IO.puts("The computer will choose first")
      else
        IO.puts("You will choose first")
      end
      IO.puts("\n\nRunning total is now 0\n\n")
      round = 1
      done = false
      while_fun = fn while_fun ->
        if !done do
          try do
            IO.puts((("ROUND " <> to_string(round)) <> ":\n\n"))
            i = 0
            while_fun = fn while_fun ->
              if i < 2 && (!done) do
                try do
                  if computer do
                    choice = 0
                    if total < 18 do
                      choice = rem(now.(), 3) + 1
                    else
                      choice = 21 - total
                    end
                    total = total + choice
                    IO.puts(("The computer chooses " <> to_string(choice)))
                    IO.puts(("Running total is now " <> to_string(total)))
                    if total == 21 do
                      IO.puts("\nSo, commiserations, the computer has won!")
                      done = true
                    end
                  else
                    while_fun = fn while_fun ->
                      if true do
                        try do
                          IO.puts("Your choice 1 to 3 : ")
                          line = input.()
                          if line == "q" || line == "Q" do
                            IO.puts("OK, quitting the game")
                            done = true
                            throw :break
                          end
                          num = parseIntStr(line)
                          if num < 1 || num > 3 do
                            if total + num > 21 do
                              IO.puts("Too big, try again")
                            else
                              IO.puts("Out of range, try again")
                            end
                            throw :continue
                          end
                          if total + num > 21 do
                            IO.puts("Too big, try again")
                            throw :continue
                          end
                          total = total + num
                          IO.puts(("Running total is now " <> to_string(total)))
                          throw :break
                        catch
                          :continue -> nil
                        end
                        while_fun.(while_fun)
                      else
                        nil
                      end
                    end
                    while_fun.(while_fun)
                    if total == 21 do
                      IO.puts("\nSo, congratulations, you've won!")
                      done = true
                    end
                  end
                  IO.puts("\n")
                  computer = !computer
                  i = i + 1
                catch
                  :continue -> nil
                end
                while_fun.(while_fun)
              else
                nil
              end
            end
            while_fun.(while_fun)
            round = round + 1
          catch
            :continue -> nil
          end
          while_fun.(while_fun)
        else
          nil
        end
      end
      while_fun.(while_fun)
    catch
      {:return, val} -> val
    end
  end
  def main() do
    main()
  end
end
Main.main()
