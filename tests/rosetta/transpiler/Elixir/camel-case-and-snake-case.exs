# Code generated by Mochi transpiler 2025-08-03 22:12 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.monotonic_time(:microsecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def trimSpace(s) do
    try do
      start = 0
      while_fun = fn while_fun, start ->
        if start < _len(s) && _slice(s, start, (start + 1) - start) == " " do
          start = start + 1
          while_fun.(while_fun, start)
        else
          start
        end
      end
      start = try do
          while_fun.(while_fun, start)
        catch
          {:break, start} -> start
        end

      end_ = _len(s)
      while_fun_2 = fn while_fun_2, end_ ->
        if end_ > start && _slice(s, end_ - 1, end_ - (end_ - 1)) == " " do
          end_ = end_ - 1
          while_fun_2.(while_fun_2, end_)
        else
          end_
        end
      end
      end_ = try do
          while_fun_2.(while_fun_2, end_)
        catch
          {:break, end_} -> end_
        end

      throw {:return, _slice(s, start, end_ - start)}
    catch
      {:return, val} -> val
    end
  end
  def isUpper(ch) do
    try do
      throw {:return, ch >= "A" && ch <= "Z"}
    catch
      {:return, val} -> val
    end
  end
  def padLeft(s, w) do
    try do
      res = ""
      n = w - _len(s)
      while_fun_3 = fn while_fun_3, n, res ->
        if n > 0 do
          res = (res <> " ")
          n = n - 1
          while_fun_3.(while_fun_3, n, res)
        else
          {n, res}
        end
      end
      {n, res} = try do
          while_fun_3.(while_fun_3, n, res)
        catch
          {:break, {n, res}} -> {n, res}
        end

      throw {:return, (res <> s)}
    catch
      {:return, val} -> val
    end
  end
  def snakeToCamel(s) do
    try do
      s = Main.trimSpace(s)
      out = ""
      up = false
      i = 0
      while_fun_4 = fn while_fun_4, i, out, up ->
        if i < _len(s) do
          try do
            ch = _slice(s, i, (i + 1) - i)
            {i, up} = if ch == "_" || ch == "-" || ch == " " || ch == "." do
              up = true
              i = i + 1
              throw :continue
              {i, up}
            else
              {i, up}
            end
            {i, out, up} = if i == 0 do
              out = (out <> String.downcase(ch))
              up = false
              i = i + 1
              throw :continue
              {i, out, up}
            else
              {i, out, up}
            end
            {out, up} = if up do
              out = (out <> String.upcase(ch))
              up = false
              {out, up}
            else
              out = (out <> ch)
              {out, up}
            end
            i = i + 1
          catch
            :continue -> nil
          end
          while_fun_4.(while_fun_4, i, out, up)
        else
          {i, out, up}
        end
      end
      {i, out, up} = try do
          while_fun_4.(while_fun_4, i, out, up)
        catch
          {:break, {i, out, up}} -> {i, out, up}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def camelToSnake(s) do
    try do
      s = Main.trimSpace(s)
      out = ""
      prevUnd = false
      i = 0
      while_fun_5 = fn while_fun_5, i, out, prevUnd ->
        if i < _len(s) do
          try do
            ch = _slice(s, i, (i + 1) - i)
            {i, out, prevUnd} = if ch == " " || ch == "-" || ch == "." do
              {out, prevUnd} = if !prevUnd && _len(out) > 0 do
                out = (out <> "_")
                prevUnd = true
                {out, prevUnd}
              else
                {out, prevUnd}
              end
              i = i + 1
              throw :continue
              {i, out, prevUnd}
            else
              {i, out, prevUnd}
            end
            {i, out, prevUnd} = if ch == "_" do
              {out, prevUnd} = if !prevUnd && _len(out) > 0 do
                out = (out <> "_")
                prevUnd = true
                {out, prevUnd}
              else
                {out, prevUnd}
              end
              i = i + 1
              throw :continue
              {i, out, prevUnd}
            else
              {i, out, prevUnd}
            end
            {out, prevUnd} = if Main.isUpper(ch) do
              {out} = if i > 0 && (!prevUnd) do
                out = (out <> "_")
                {out}
              else
                {out}
              end
              out = (out <> String.downcase(ch))
              prevUnd = false
              {out, prevUnd}
            else
              out = (out <> String.downcase(ch))
              prevUnd = false
              {out, prevUnd}
            end
            i = i + 1
          catch
            :continue -> nil
          end
          while_fun_5.(while_fun_5, i, out, prevUnd)
        else
          {i, out, prevUnd}
        end
      end
      {i, out, prevUnd} = try do
          while_fun_5.(while_fun_5, i, out, prevUnd)
        catch
          {:break, {i, out, prevUnd}} -> {i, out, prevUnd}
        end

      start = 0
      while_fun_6 = fn while_fun_6, start ->
        if start < _len(out) && _slice(out, start, (start + 1) - start) == "_" do
          start = start + 1
          while_fun_6.(while_fun_6, start)
        else
          start
        end
      end
      start = try do
          while_fun_6.(while_fun_6, start)
        catch
          {:break, start} -> start
        end

      end_ = _len(out)
      while_fun_7 = fn while_fun_7, end_ ->
        if end_ > start && _slice(out, end_ - 1, end_ - (end_ - 1)) == "_" do
          end_ = end_ - 1
          while_fun_7.(while_fun_7, end_)
        else
          end_
        end
      end
      end_ = try do
          while_fun_7.(while_fun_7, end_)
        catch
          {:break, end_} -> end_
        end

      out = _slice(out, start, end_ - start)
      res = ""
      j = 0
      lastUnd = false
      while_fun_8 = fn while_fun_8, j, lastUnd, res ->
        if j < _len(out) do
          c = _slice(out, j, (j + 1) - j)
          {lastUnd, res} = if c == "_" do
            {res} = if !lastUnd do
              res = (res <> c)
              {res}
            else
              {res}
            end
            lastUnd = true
            {lastUnd, res}
          else
            res = (res <> c)
            lastUnd = false
            {lastUnd, res}
          end
          j = j + 1
          while_fun_8.(while_fun_8, j, lastUnd, res)
        else
          {j, lastUnd, res}
        end
      end
      {j, lastUnd, res} = try do
          while_fun_8.(while_fun_8, j, lastUnd, res)
        catch
          {:break, {j, lastUnd, res}} -> {j, lastUnd, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      samples = ["snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "]
      IO.puts("=== To snake_case ===")
      Enum.each(samples, fn s ->
        IO.puts(Kernel.inspect(((Main.padLeft(s, 34) <> " => ") <> Main.camelToSnake(s))))
      end)
      IO.puts("")
      IO.puts("=== To camelCase ===")
      Enum.each(samples, fn s ->
        IO.puts(Kernel.inspect(((Main.padLeft(s, 34) <> " => ") <> Main.snakeToCamel(s))))
      end)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _now()
    main()
    mem_end = _mem()
    duration_us = max(_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
