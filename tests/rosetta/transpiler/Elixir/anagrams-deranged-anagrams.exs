# Code generated by Mochi transpiler 2025-07-26 17:59 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.at(base, start)
      true -> Enum.slice(base, start, len)
    end
  end
  def sortRunes(s) do
    try do
      arr = []
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < String.length(s) do
          arr = (arr ++ [String.slice(s, i, i + 1 - i)])
          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          :break -> {arr, i}
        end

      n = length(arr)
      m = 0
      while_fun_2 = fn while_fun_2, arr, m ->
        if m < n do
          j = 0
          while_fun_3 = fn while_fun_3, arr, j ->
            if j < n - 1 do
              if Enum.at(arr, j) > Enum.at(arr, j + 1) do
                tmp = Enum.at(arr, j)
                arr = List.replace_at(arr, j, Enum.at(arr, j + 1))
                arr = List.replace_at(arr, j + 1, tmp)
              end
              j = j + 1
              while_fun_3.(while_fun_3, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_3.(while_fun_3, arr, j)
            catch
              :break -> {arr, j}
            end

          m = m + 1
          while_fun_2.(while_fun_2, arr, m)
        else
          {arr, m}
        end
      end
      {arr, m} = try do
          while_fun_2.(while_fun_2, arr, m)
        catch
          :break -> {arr, m}
        end

      out = ""
      i = 0
      while_fun_4 = fn while_fun_4, i, out ->
        if i < n do
          out = (out <> Enum.at(arr, i))
          i = i + 1
          while_fun_4.(while_fun_4, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_4.(while_fun_4, i, out)
        catch
          :break -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def deranged(a, b) do
    try do
      if String.length(a) != String.length(b) do
        throw {:return, false}
      end
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < String.length(a) do
          if String.slice(a, i, i + 1 - i) == String.slice(b, i, i + 1 - i) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          :break -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      words = ["constitutionalism", "misconstitutional"]
      m = %{}
      bestLen = 0
      w1 = ""
      w2 = ""
      {bestLen, m, w1, w2} = Enum.reduce(words, {bestLen, m, w1, w2}, fn w, {bestLen, m, w1, w2} ->
        try do
          if String.length(w) <= bestLen do
            throw :continue
          end
          k = sortRunes(w)
          if !(Map.has_key?(m, k)) do
            m = Map.put(m, k, [w])
            throw :continue
          end
          {bestLen, w1, w2} = Enum.reduce(m[k], {bestLen, w1, w2}, fn c, {bestLen, w1, w2} ->
            try do
              if deranged(w, c) do
                bestLen = String.length(w)
                w1 = c
                w2 = w
                throw :break
              end
            catch
              :continue -> {bestLen, w1, w2}
            end
            {bestLen, w1, w2}
          end)
          m = Map.put(m, k, (m[k] ++ [w]))
        catch
          :continue -> {bestLen, m, w1, w2}
        end
        {bestLen, m, w1, w2}
      end)
      IO.puts(((((w1 <> " ") <> w2) <> " : Length ") <> to_string(bestLen)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
