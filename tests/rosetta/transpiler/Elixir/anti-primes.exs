# Code generated by Mochi transpiler 2025-07-26 19:30 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.at(base, start)
      true -> Enum.slice(base, start, len)
    end
  end
  def countDivisors(n) do
    try do
      if n < 2 do
        throw {:return, 1}
      end
      count = 2
      i = 2
      while_fun = fn while_fun, count, i ->
        if i <= div(n, 2) do
          {count} = if rem(n, i) == 0 do
            count = count + 1
            {count}
          else
            {count}
          end
          i = i + 1
          while_fun.(while_fun, count, i)
        else
          {count, i}
        end
      end
      {count, i} = try do
          while_fun.(while_fun, count, i)
        catch
          :break -> {count, i}
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts("The first 20 anti-primes are:")
      maxDiv = 0
      count = 0
      n = 1
      line = ""
      while_fun_2 = fn while_fun_2, count, line, maxDiv, n ->
        if count < 20 do
          d = countDivisors(n)
          {count, line, maxDiv} = if d > maxDiv do
            line = ((line <> to_string(n)) <> " ")
            maxDiv = d
            count = count + 1
            {count, line, maxDiv}
          else
            {count, line, maxDiv}
          end
          n = n + 1
          while_fun_2.(while_fun_2, count, line, maxDiv, n)
        else
          {count, line, maxDiv, n}
        end
      end
      {count, line, maxDiv, n} = try do
          while_fun_2.(while_fun_2, count, line, maxDiv, n)
        catch
          :break -> {count, line, maxDiv, n}
        end

      line = String.slice(line, 0, String.length(line) - 1 - (0))
      IO.puts(line)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
