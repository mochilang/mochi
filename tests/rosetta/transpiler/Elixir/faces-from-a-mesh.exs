# Code generated by Mochi transpiler 2025-07-31 00:20 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def contains(xs, v) do
    try do
      Enum.each(xs, fn x ->
        if x == v do
          throw {:return, true}
        end
      end)
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def sliceEqual(a, b) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(a) do
          if Enum.at(a, i) != Enum.at(b, i) do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, i} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def reverse(xs) do
    try do
      i = 0
      j = _len(xs) - 1
      while_fun_2 = fn while_fun_2, i, j, xs ->
        if i < j do
          t = Enum.at(xs, i)
          xs = List.replace_at(xs, i, Enum.at(xs, j))
          xs = List.replace_at(xs, j, t)
          i = i + 1
          j = j - 1
          while_fun_2.(while_fun_2, i, j, xs)
        else
          {i, j, xs}
        end
      end
      {i, j, xs} = try do
          while_fun_2.(while_fun_2, i, j, xs)
        catch
          {:break, {i, j, xs}} -> {i, j, xs}
        end

    catch
      {:return, val} -> val
    end
  end
  def copyInts(xs) do
    try do
      out = []
      {out} = Enum.reduce(xs, {out}, fn v, {out} ->
        out = (out ++ [v])
        {out}
      end)
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def perimEqual(p1, p2) do
    try do
      if _len(p1) != _len(p2) do
        throw {:return, false}
      end
      Enum.each(p1, fn v ->
        if !Main.contains(p2, v) do
          throw {:return, false}
        end
      end)
      c = Main.copyInts(p1)
      r = 0
      while_fun_3 = fn while_fun_3, c, r ->
        if r < 2 do
          i = 0
          while_fun_4 = fn while_fun_4, c, i ->
            if i < _len(p1) do
              if Main.sliceEqual(c, p2) do
                throw {:return, true}
              end
              t = Enum.at(c, _len(c) - 1)
              j = _len(c) - 1
              while_fun_5 = fn while_fun_5, c, j ->
                if j > 0 do
                  c = List.replace_at(c, j, Enum.at(c, j - 1))
                  j = j - 1
                  while_fun_5.(while_fun_5, c, j)
                else
                  {c, j}
                end
              end
              {c, j} = try do
                  while_fun_5.(while_fun_5, c, j)
                catch
                  {:break, {c, j}} -> {c, j}
                end

              c = List.replace_at(c, 0, t)
              i = i + 1
              while_fun_4.(while_fun_4, c, i)
            else
              {c, i}
            end
          end
          {c, i} = try do
              while_fun_4.(while_fun_4, c, i)
            catch
              {:break, {c, i}} -> {c, i}
            end

          Main.reverse(c)
          r = r + 1
          while_fun_3.(while_fun_3, c, r)
        else
          {c, r}
        end
      end
      {c, r} = try do
          while_fun_3.(while_fun_3, c, r)
        catch
          {:break, {c, r}} -> {c, r}
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def sortEdges(es) do
    try do
      arr = es
      n = _len(arr)
      i = 0
      while_fun_6 = fn while_fun_6, arr, i ->
        if i < n do
          j = 0
          while_fun_7 = fn while_fun_7, arr, j ->
            if j < n - 1 do
              a = Enum.at(arr, j)
              b = Enum.at(arr, j + 1)
              {arr} = if a.a > b.a || (a.a == b.a && a.b > b.b) do
                arr = List.replace_at(arr, j, b)
                arr = List.replace_at(arr, j + 1, a)
                {arr}
              else
                {arr}
              end
              j = j + 1
              while_fun_7.(while_fun_7, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_7.(while_fun_7, arr, j)
            catch
              {:break, {arr, j}} -> {arr, j}
            end

          i = i + 1
          while_fun_6.(while_fun_6, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun_6.(while_fun_6, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def concat(a, b) do
    try do
      out = []
      {out} = Enum.reduce(a, {out}, fn x, {out} ->
        out = (out ++ [x])
        {out}
      end)
      {out} = Enum.reduce(b, {out}, fn x, {out} ->
        out = (out ++ [x])
        {out}
      end)
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def faceToPerim(face) do
    try do
      le = _len(face)
      if le == 0 do
        throw {:return, nil}
      end
      edges = []
      i = 0
      while_fun_8 = fn while_fun_8, edges, i ->
        if i < le do
          e = Enum.at(face, i)
          if Process.get(:e).b <= Process.get(:e).a do
            throw {:return, nil}
          end
          edges = (edges ++ [Process.get(:e)])
          i = i + 1
          while_fun_8.(while_fun_8, edges, i)
        else
          {edges, i}
        end
      end
      {edges, i} = try do
          while_fun_8.(while_fun_8, edges, i)
        catch
          {:break, {edges, i}} -> {edges, i}
        end

      edges = Main.sortEdges(edges)
      firstEdge = Enum.at(edges, 0)
      perim = [firstEdge.a, firstEdge.b]
      first = firstEdge.a
      last = firstEdge.b
      edges = _slice(edges, 1, _len(edges) - 1)
      le = _len(edges)
      done = false
      while_fun_9 = fn while_fun_9, done, edges, last, le, perim ->
        if le > 0 && (!done) do
          idx = 0
          found = false
          while_fun_10 = fn while_fun_10, done, edges, found, idx, last, le, perim ->
            if idx < le do
              e = Enum.at(edges, idx)
              {found, last, perim} = if Process.get(:e).a == last do
                perim = (perim ++ [Process.get(:e).b])
                last = Process.get(:e).b
                found = true
                {found, last, perim}
              else
                {found, last, perim} = if Process.get(:e).b == last do
                  perim = (perim ++ [Process.get(:e).a])
                  last = Process.get(:e).a
                  found = true
                  {found, last, perim}
                else
                  {found, last, perim}
                end
                {found, last, perim}
              end
              {done, edges, le} = if found do
                edges = Main.concat(_slice(edges, 0, idx - 0), _slice(edges, idx + 1, _len(edges) - (idx + 1)))
                le = le - 1
                {done} = if last == first do
                  {done} = if le == 0 do
                    done = true
                    {done}
                  else
                    throw {:return, nil}
                    {done}
                  end
                  {done}
                else
                  {done}
                end
                throw {:break, {done, edges, found, idx, last, le, perim}}
                {done, edges, le}
              else
                {done, edges, le}
              end
              idx = idx + 1
              while_fun_10.(while_fun_10, done, edges, found, idx, last, le, perim)
            else
              {done, edges, found, idx, last, le, perim}
            end
          end
          {done, edges, found, idx, last, le, perim} = try do
              while_fun_10.(while_fun_10, done, edges, found, idx, last, le, perim)
            catch
              {:break, {done, edges, found, idx, last, le, perim}} -> {done, edges, found, idx, last, le, perim}
            end

          if !found do
            throw {:return, nil}
          end
          while_fun_9.(while_fun_9, done, edges, last, le, perim)
        else
          {done, edges, last, le, perim}
        end
      end
      {done, edges, last, le, perim} = try do
          while_fun_9.(while_fun_9, done, edges, last, le, perim)
        catch
          {:break, {done, edges, last, le, perim}} -> {done, edges, last, le, perim}
        end

      throw {:return, _slice(perim, 0, (_len(perim) - 1) - 0)}
    catch
      {:return, val} -> val
    end
  end
  def listStr(xs) do
    try do
      s = "["
      i = 0
      while_fun_11 = fn while_fun_11, i, s ->
        if i < _len(xs) do
          s = (s <> Kernel.to_string(Enum.at(xs, i)))
          {s} = if i < _len(xs) - 1 do
            s = (s <> " ")
            {s}
          else
            {s}
          end
          i = i + 1
          while_fun_11.(while_fun_11, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_11.(while_fun_11, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      s = (s <> "]")
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:e, [%{a: 7, b: 11}, %{a: 1, b: 11}, %{a: 1, b: 7}])
  Process.put(:f, [%{a: 11, b: 23}, %{a: 1, b: 17}, %{a: 17, b: 23}, %{a: 1, b: 11}])
  Process.put(:g, [%{a: 8, b: 14}, %{a: 17, b: 19}, %{a: 10, b: 12}, %{a: 10, b: 14}, %{a: 12, b: 17}, %{a: 8, b: 18}, %{a: 18, b: 19}])
  Process.put(:h, [%{a: 1, b: 3}, %{a: 9, b: 11}, %{a: 3, b: 11}, %{a: 1, b: 11}])
  Process.put(:names, ["E", "F", "G", "H"])
  Process.put(:idx2, 0)
  def main() do
    IO.puts("Perimeter format equality checks:")
    IO.puts(("  Q == R is " <> Kernel.inspect(Main.perimEqual([8, 1, 3], [1, 3, 8]))))
    IO.puts(("  U == V is " <> Kernel.inspect(Main.perimEqual([18, 8, 14, 10, 12, 17, 19], [8, 14, 10, 12, 17, 19, 18]))))
    IO.puts("\nEdge to perimeter format translations:")
    Process.put(:faces, [Process.get(:e), Process.get(:f), Process.get(:g), Process.get(:h)])
    while_fun_12 = fn while_fun_12 ->
      if Process.get(:idx2) < _len(Process.get(:faces)) do
        per = Main.faceToPerim(Enum.at(Process.get(:faces), Process.get(:idx2)))
        if per == nil do
          IO.puts((("  " <> Enum.at(Process.get(:names), Process.get(:idx2))) <> " => Invalid edge format"))
        else
          IO.puts(((("  " <> Enum.at(Process.get(:names), Process.get(:idx2))) <> " => ") <> Main.listStr(per)))
        end
        Process.put(:idx2, Process.get(:idx2) + 1)
        while_fun_12.(while_fun_12)
      else
        nil
      end
    end
    try do
      while_fun_12.(while_fun_12)
    catch
      :break -> nil
    end

  end
end
Main.main()
