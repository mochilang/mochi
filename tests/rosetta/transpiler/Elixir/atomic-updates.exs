# Code generated by Mochi transpiler 2025-07-26 20:39 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def randOrder(seed, n) do
    try do
      next = rem((seed * 1664525 + 1013904223), 2147483647)
      throw {:return, [next, rem(next, n)]}
    catch
      {:return, val} -> val
    end
  end
  def randChaos(seed, n) do
    try do
      next = rem((seed * 1103515245 + 12345), 2147483647)
      throw {:return, [next, rem(next, n)]}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      nBuckets = 10
      initialSum = 1000
      buckets = []
      {buckets} = Enum.reduce((0..(nBuckets - 1)), {buckets}, fn i, {buckets} ->
        buckets = (buckets ++ [0])
        {buckets}
      end)
      i = nBuckets
      dist = initialSum
      while_fun = fn while_fun, buckets, dist, i ->
        if i > 0 do
          v = div(dist, i)
          i = i - 1
          buckets = List.replace_at(buckets, i, v)
          dist = dist - v
          while_fun.(while_fun, buckets, dist, i)
        else
          {buckets, dist, i}
        end
      end
      {buckets, dist, i} = try do
          while_fun.(while_fun, buckets, dist, i)
        catch
          :break -> {buckets, dist, i}
        end

      tc0 = 0
      tc1 = 0
      total = 0
      nTicks = 0
      seedOrder = 1
      seedChaos = 2
      IO.puts("sum  ---updates---    mean  buckets")
      t = 0
      while_fun_2 = fn while_fun_2, buckets, nTicks, seedChaos, seedOrder, t, tc0, tc1, total ->
        if t < 5 do
          r = Main.randOrder(seedOrder, nBuckets)
          seedOrder = Enum.at(r, 0)
          b1 = Enum.at(r, 1)
          b2 = rem((b1 + 1), nBuckets)
          v1 = Enum.at(buckets, b1)
          v2 = Enum.at(buckets, b2)
          if v1 > v2 do
            a = trunc((div((v1 - v2), 2)))
            {a} = if a > Enum.at(buckets, b1) do
              a = Enum.at(buckets, b1)
              {a}
            else
              {a}
            end
            buckets = List.replace_at(buckets, b1, Enum.at(buckets, b1) - a)
            buckets = List.replace_at(buckets, b2, Enum.at(buckets, b2) + a)
          else
            a = trunc((div((v2 - v1), 2)))
            {a} = if a > Enum.at(buckets, b2) do
              a = Enum.at(buckets, b2)
              {a}
            else
              {a}
            end
            buckets = List.replace_at(buckets, b2, Enum.at(buckets, b2) - a)
            buckets = List.replace_at(buckets, b1, Enum.at(buckets, b1) + a)
          end
          tc0 = tc0 + 1
          r = Main.randChaos(seedChaos, nBuckets)
          seedChaos = Enum.at(r, 0)
          b1 = Enum.at(r, 1)
          b2 = rem((b1 + 1), nBuckets)
          r = Main.randChaos(seedChaos, Enum.at(buckets, b1) + 1)
          seedChaos = Enum.at(r, 0)
          amt = Enum.at(r, 1)
          {amt} = if amt > Enum.at(buckets, b1) do
            amt = Enum.at(buckets, b1)
            {amt}
          else
            {amt}
          end
          buckets = List.replace_at(buckets, b1, Enum.at(buckets, b1) - amt)
          buckets = List.replace_at(buckets, b2, Enum.at(buckets, b2) + amt)
          tc1 = tc1 + 1
          sum = 0
          idx = 0
          while_fun_3 = fn while_fun_3, idx, sum ->
            if idx < nBuckets do
              sum = sum + Enum.at(buckets, idx)
              idx = idx + 1
              while_fun_3.(while_fun_3, idx, sum)
            else
              {idx, sum}
            end
          end
          {idx, sum} = try do
              while_fun_3.(while_fun_3, idx, sum)
            catch
              :break -> {idx, sum}
            end

          total = total + tc0 + tc1
          nTicks = nTicks + 1
          IO.puts(((((((((to_string(sum) <> " ") <> to_string(tc0)) <> " ") <> to_string(tc1)) <> " ") <> to_string(div(total, nTicks))) <> "  ") <> to_string(buckets)))
          tc0 = 0
          tc1 = 0
          t = t + 1
          while_fun_2.(while_fun_2, buckets, nTicks, seedChaos, seedOrder, t, tc0, tc1, total)
        else
          {buckets, nTicks, seedChaos, seedOrder, t, tc0, tc1, total}
        end
      end
      {buckets, nTicks, seedChaos, seedOrder, t, tc0, tc1, total} = try do
          while_fun_2.(while_fun_2, buckets, nTicks, seedChaos, seedOrder, t, tc0, tc1, total)
        catch
          :break -> {buckets, nTicks, seedChaos, seedOrder, t, tc0, tc1, total}
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
