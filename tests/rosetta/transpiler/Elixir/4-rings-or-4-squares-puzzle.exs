# Code generated by Mochi transpiler 2025-07-24 20:06 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  def validComb(a, b, c, d, e, f, g) do
    try do
      square1 = a + b
      square2 = b + c + d
      square3 = d + e + f
      square4 = f + g
      throw {:return, square1 == square2 && square2 == square3 && square3 == square4}
    catch
      {:return, val} -> val
    end
  end
  def isUnique(a, b, c, d, e, f, g) do
    try do
      nums = [a, b, c, d, e, f, g]
      i = 0
      while_fun = fn while_fun, i ->
        if i < length(nums) do
          j = i + 1
          while_fun_2 = fn while_fun_2, j ->
            if j < length(nums) do
              if Enum.at(nums, i) == Enum.at(nums, j) do
                throw {:return, false}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j)
            else
              j
            end
          end
          j = try do
              while_fun_2.(while_fun_2, j)
            catch
              :break -> j
            end

          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          :break -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def getCombs(low, high, unique) do
    try do
      valid = []
      count = 0
      try do
        for b <- (low..((high + 1) - 1)) do
          try do
            try do
              for c <- (low..((high + 1) - 1)) do
                try do
                  try do
                    for d <- (low..((high + 1) - 1)) do
                      try do
                        s = b + c + d
                        try do
                          for e <- (low..((high + 1) - 1)) do
                            try do
                              try do
                                for f <- (low..((high + 1) - 1)) do
                                  try do
                                    a = s - b
                                    g = s - f
                                    if a < low || a > high do
                                      throw :continue
                                    end
                                    if g < low || g > high do
                                      throw :continue
                                    end
                                    if d + e + f != s do
                                      throw :continue
                                    end
                                    if f + g != s do
                                      throw :continue
                                    end
                                    if !unique || isUnique(a, b, c, d, e, f, g) do
                                      valid = (valid ++ [[a, b, c, d, e, f, g]])
                                      count = count + 1
                                    end
                                  catch
                                    :continue -> nil
                                  end
                                end
                              catch
                                :break -> nil
                              end
                            catch
                              :continue -> nil
                            end
                          end
                        catch
                          :break -> nil
                        end
                      catch
                        :continue -> nil
                      end
                    end
                  catch
                    :break -> nil
                  end
                catch
                  :continue -> nil
                end
              end
            catch
              :break -> nil
            end
          catch
            :continue -> nil
          end
        end
      catch
        :break -> nil
      end
      throw {:return, %{"count" => count, "list" => valid}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    r1 = getCombs(1, 7, true)
    IO.inspect((to_string(r1["count"]) <> " unique solutions in 1 to 7"))
    IO.inspect(r1["list"])
    r2 = getCombs(3, 9, true)
    IO.inspect((to_string(r2["count"]) <> " unique solutions in 3 to 9"))
    IO.inspect(r2["list"])
    r3 = getCombs(0, 9, false)
    IO.inspect((to_string(r3["count"]) <> " non-unique solutions in 0 to 9"))
  end
end
Main.main()
