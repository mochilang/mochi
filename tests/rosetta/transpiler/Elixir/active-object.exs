# Code generated by Mochi transpiler 2025-07-25 16:42 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  def sinApprox(x) do
    try do
      term = x
      sum = x
      n = 1
      while_fun = fn while_fun, n, sum, term ->
        if n <= 12 do
          denom = ((2 * n) * (2 * n + 1))
          term = -term * x * x / denom
          sum = sum + term
          n = n + 1
          while_fun.(while_fun, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun.(while_fun, n, sum, term)
        catch
          :break -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    mem_start = _mem()
    t_start = _now()
    Process.put(:pi, 3.141592653589793)
    Process.put(:dt, 0.01)
    Process.put(:s, 0.0)
    Process.put(:t1, 0.0)
    Process.put(:k1, sinApprox(0.0))
    Process.put(:i, 1)
    while_fun_2 = fn while_fun_2 ->
      if Process.get(:i) <= 200 do
        t2 = (Process.get(:i)) * Process.get(:dt)
        k2 = sinApprox(t2 * Process.get(:pi))
        Process.put(:s, Process.get(:s) + (Process.get(:k1) + k2) * 0.5 * (t2 - Process.get(:t1)))
        Process.put(:t1, t2)
        Process.put(:k1, k2)
        Process.put(:i, Process.get(:i) + 1)
        while_fun_2.(while_fun_2)
      else
        nil
      end
    end
    try do
      while_fun_2.(while_fun_2)
    catch
      :break -> nil
    end

    Process.put(:i2, 1)
    while_fun_3 = fn while_fun_3 ->
      if Process.get(:i2) <= 50 do
        t2 = 2.0 + (Process.get(:i2)) * Process.get(:dt)
        k2 = 0.0
        Process.put(:s, Process.get(:s) + (Process.get(:k1) + k2) * 0.5 * (t2 - Process.get(:t1)))
        Process.put(:t1, t2)
        Process.put(:k1, k2)
        Process.put(:i2, Process.get(:i2) + 1)
        while_fun_3.(while_fun_3)
      else
        nil
      end
    end
    try do
      while_fun_3.(while_fun_3)
    catch
      :break -> nil
    end

    IO.puts(Process.get(:s))
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
