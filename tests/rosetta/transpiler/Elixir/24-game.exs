# Code generated by Mochi transpiler 2025-07-25 12:29 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  def randDigit() do
    try do
      throw {:return, (rem(_now(), 9)) + 1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      digits = []
      {digits} = Enum.reduce((0..(4 - 1)), {digits}, fn i, {digits} ->
        digits = (digits ++ [randDigit()])
        {digits}
      end)
      numstr = ""
      {numstr} = Enum.reduce((0..(4 - 1)), {numstr}, fn i, {numstr} ->
        numstr = (numstr <> to_string(Enum.at(digits, i)))
        {numstr}
      end)
      IO.puts((("Your numbers: " <> numstr) <> "\n"))
      IO.puts("Enter RPN: ")
      expr = case IO.gets("") do
  nil -> ""
  :eof -> ""
  line -> String.trim(line)
end
      if String.length(expr) != 7 do
        IO.puts("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
        throw {:return, nil}
      end
      stack = []
      i = 0
      valid = true
      while_fun = fn while_fun, digits, i, stack, valid ->
        if i < String.length(expr) do
          try do
            ch = String.slice(expr, i, i + 1 - (i))
            if ch >= "0" && ch <= "9" do
              if length(digits) == 0 do
                IO.puts("too many numbers.")
                throw {:return, nil}
              end
              j = 0
              while_fun_2 = fn while_fun_2, j ->
                if Enum.at(digits, j) != String.to_integer(ch) - String.to_integer("0") do
                  j = j + 1
                  if j == length(digits) do
                    IO.puts("wrong numbers.")
                    throw {:return, nil}
                  end
                  while_fun_2.(while_fun_2, j)
                else
                  j
                end
              end
              j = try do
                  while_fun_2.(while_fun_2, j)
                catch
                  :break -> j
                end

              digits = Enum.slice(digits, 0, j - 0) + Enum.slice(digits, j + 1, length(digits) - j + 1)
              stack = (stack ++ [Kernel.float(String.to_integer(ch) - String.to_integer("0"))])
            else
              if length(stack) < 2 do
                IO.puts("invalid expression syntax.")
                valid = false
                throw :break
              end
              b = Enum.at(stack, length(stack) - 1)
              a = Enum.at(stack, length(stack) - 2)
              if ch == "+" do
                stack = List.replace_at(stack, length(stack) - 2, a + b)
              else
                if ch == "-" do
                  stack = List.replace_at(stack, length(stack) - 2, a - b)
                else
                  if ch == "*" do
                    stack = List.replace_at(stack, length(stack) - 2, a * b)
                  else
                    if ch == "/" do
                      stack = List.replace_at(stack, length(stack) - 2, a / b)
                    else
                      IO.puts(Kernel.to_string((ch <> " invalid.")))
                      valid = false
                      throw :break
                    end
                  end
                end
              end
              stack = Enum.slice(stack, 0, length(stack) - 1 - 0)
            end
            i = i + 1
          catch
            :continue -> nil
          end
          while_fun.(while_fun, digits, i, stack, valid)
        else
          {digits, i, stack, valid}
        end
      end
      {digits, i, stack, valid} = try do
          while_fun.(while_fun, digits, i, stack, valid)
        catch
          :break -> {digits, i, stack, valid}
        end

      if valid do
        if abs(Enum.at(stack, 0) - 24.0) > 0.000001 do
          IO.puts((("incorrect. " <> to_string(Enum.at(stack, 0))) <> " != 24"))
        else
          IO.puts("correct.")
        end
      end
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
