# Code generated by Mochi transpiler 2025-07-25 16:42 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  Process.put(:err, "")
  def pow_big(base, exp) do
    try do
      result = 1
      b = base
      e = exp
      while_fun = fn while_fun, b, e, result ->
        if e > 0 do
          if rem(e, 2) == 1 do
            result = result * b
          end
          b = b * b
          e = (div(e, 2))
          while_fun.(while_fun, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun.(while_fun, b, e, result)
        catch
          :break -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def bit_len(x) do
    try do
      n = x
      c = 0
      while_fun_2 = fn while_fun_2, c, n ->
        if n > 0 do
          n = n / 2
          c = c + 1
          while_fun_2.(while_fun_2, c, n)
        else
          {c, n}
        end
      end
      {c, n} = try do
          while_fun_2.(while_fun_2, c, n)
        catch
          :break -> {c, n}
        end

      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def ackermann2(m, n) do
    try do
      if Process.get(:err) != "" do
        throw {:return, 0}
      end
      if m <= 3 do
        mi = Kernel.trunc(m)
        if mi == 0 do
          throw {:return, n + 1}
        end
        if mi == 1 do
          throw {:return, n + 2}
        end
        if mi == 2 do
          throw {:return, 2 * n + 3}
        end
        if mi == 3 do
          nb = bit_len(n)
          if nb > 64 do
            Process.put(:err, (("A(m,n) had n of " <> to_string(nb)) <> " bits; too large"))
            throw {:return, 0}
          end
          r = pow_big(2, Kernel.trunc(n))
          throw {:return, 8 * r - 3}
        end
      end
      if bit_len(n) == 0 do
        throw {:return, ackermann2(m - (1), 1)}
      end
      throw {:return, ackermann2(m - (1), ackermann2(m, n - (1)))}
    catch
      {:return, val} -> val
    end
  end
  def show(m, n) do
    try do
      Process.put(:err, "")
      res = ackermann2(m, n)
      if Process.get(:err) != "" do
        IO.puts(((((("A(" <> to_string(m)) <> ", ") <> to_string(n)) <> ") = Error: ") <> Process.get(:err)))
        throw {:return, nil}
      end
      if bit_len(res) <= 256 do
        IO.puts(((((("A(" <> to_string(m)) <> ", ") <> to_string(n)) <> ") = ") <> to_string(res)))
      else
        s = to_string(res)
        pre = String.slice(s, 0, 20 - (0))
        suf = String.slice(s, String.length(s) - 20, String.length(s) - (String.length(s) - 20))
        IO.puts(((((((((("A(" <> to_string(m)) <> ", ") <> to_string(n)) <> ") = ") <> to_string(String.length(s))) <> " digits starting/ending with: ") <> pre) <> "...") <> suf))
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      show(0, 0)
      show(1, 2)
      show(2, 4)
      show(3, 100)
      show(3, 1000000)
      show(4, 1)
      show(4, 2)
      show(4, 3)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
