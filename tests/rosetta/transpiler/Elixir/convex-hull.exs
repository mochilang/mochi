# Code generated by Mochi transpiler 2025-08-04 09:19 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def ccw(a, b, c) do
    try do
      lhs = (b.x - a.x) * (c.y - a.y)
      rhs = (b.y - a.y) * (c.x - a.x)
      throw {:return, lhs > rhs}
    catch
      {:return, val} -> val
    end
  end
  def sortPoints(ps) do
    try do
      arr = ps
      n = _len(arr)
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < n do
          j = 0
          while_fun_2 = fn while_fun_2, arr, j ->
            if j < n - 1 do
              p = Enum.at(arr, j)
              q = Enum.at(arr, j + 1)
              {arr} = if p.x > q.x || (p.x == q.x && p.y > q.y) do
                arr = List.replace_at(arr, j, q)
                arr = List.replace_at(arr, j + 1, p)
                {arr}
              else
                {arr}
              end
              j = j + 1
              while_fun_2.(while_fun_2, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_2.(while_fun_2, arr, j)
            catch
              {:break, {arr, j}} -> {arr, j}
            end

          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def convexHull(ps) do
    try do
      ps = Main.sortPoints(ps)
      h = []
      {h} = Enum.reduce(ps, {h}, fn pt, {h} ->
        while_fun_3 = fn while_fun_3, h ->
          if _len(h) >= 2 && Main.ccw(Enum.at(h, _len(h) - 2), Enum.at(h, _len(h) - 1), pt) == false do
            h = _slice(h, 0, (_len(h) - 1) - 0)
            while_fun_3.(while_fun_3, h)
          else
            h
          end
        end
        h = try do
            while_fun_3.(while_fun_3, h)
          catch
            {:break, h} -> h
          end

        h = (h ++ [pt])
        {h}
      end)
      i = _len(ps) - 2
      t = _len(h) + 1
      while_fun_4 = fn while_fun_4, h, i ->
        if i >= 0 do
          pt = Enum.at(ps, i)
          while_fun_5 = fn while_fun_5, h ->
            if _len(h) >= t && Main.ccw(Enum.at(h, _len(h) - 2), Enum.at(h, _len(h) - 1), pt) == false do
              h = _slice(h, 0, (_len(h) - 1) - 0)
              while_fun_5.(while_fun_5, h)
            else
              h
            end
          end
          h = try do
              while_fun_5.(while_fun_5, h)
            catch
              {:break, h} -> h
            end

          h = (h ++ [pt])
          i = i - 1
          while_fun_4.(while_fun_4, h, i)
        else
          {h, i}
        end
      end
      {h, i} = try do
          while_fun_4.(while_fun_4, h, i)
        catch
          {:break, {h, i}} -> {h, i}
        end

      throw {:return, _slice(h, 0, (_len(h) - 1) - 0)}
    catch
      {:return, val} -> val
    end
  end
  def pointStr(p) do
    try do
      throw {:return, (((("(" <> Kernel.to_string(p.x)) <> ",") <> Kernel.to_string(p.y)) <> ")")}
    catch
      {:return, val} -> val
    end
  end
  def hullStr(h) do
    try do
      s = "["
      i = 0
      while_fun_6 = fn while_fun_6, i, s ->
        if i < _len(h) do
          s = (s <> Main.pointStr(Enum.at(h, i)))
          {s} = if i < _len(h) - 1 do
            s = (s <> " ")
            {s}
          else
            {s}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_6.(while_fun_6, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      s = (s <> "]")
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:pts, [%{x: 16, y: 3}, %{x: 12, y: 17}, %{x: 0, y: 6}, %{x: -4, y: -6}, %{x: 16, y: 6}, %{x: 16, y: -7}, %{x: 16, y: -3}, %{x: 17, y: -4}, %{x: 5, y: 19}, %{x: 19, y: -8}, %{x: 3, y: 16}, %{x: 12, y: 13}, %{x: 3, y: -4}, %{x: 17, y: 5}, %{x: -3, y: 15}, %{x: -3, y: -9}, %{x: 0, y: 11}, %{x: -9, y: -3}, %{x: -4, y: -2}, %{x: 12, y: 10}])
    Process.put(:hull, Main.convexHull(Process.get(:pts)))
    IO.puts(("Convex Hull: " <> Main.hullStr(Process.get(:hull))))
  end
end
Main.main()
