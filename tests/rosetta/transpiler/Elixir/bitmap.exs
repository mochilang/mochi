# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def pixelFromRgb(c) do
    try do
      r = rem((trunc((div(c, 65536)))), 256)
      g = rem((trunc((div(c, 256)))), 256)
      b = rem(c, 256)
      throw {:return, %{R: r, G: g, B: b}}
    catch
      {:return, val} -> val
    end
  end
  def rgbFromPixel(p) do
    try do
      throw {:return, p[:R] * 65536 + p[:G] * 256 + p[:B]}
    catch
      {:return, val} -> val
    end
  end
  def newbitmap(x, y) do
    try do
      data = []
      row = 0
      while_fun = fn while_fun, data, row ->
        if row < y do
          r = []
          col = 0
          while_fun_2 = fn while_fun_2, col, r ->
            if col < x do
              r = (r ++ [%{R: 0, G: 0, B: 0}])
              col = col + 1
              while_fun_2.(while_fun_2, col, r)
            else
              {col, r}
            end
          end
          {col, r} = try do
              while_fun_2.(while_fun_2, col, r)
            catch
              :break -> {col, r}
            end

          data = (data ++ [r])
          row = row + 1
          while_fun.(while_fun, data, row)
        else
          {data, row}
        end
      end
      {data, row} = try do
          while_fun.(while_fun, data, row)
        catch
          :break -> {data, row}
        end

      throw {:return, %{cols: x, rows: y, px: data}}
    catch
      {:return, val} -> val
    end
  end
  def extent(b) do
    try do
      throw {:return, %{"cols" => b.cols, "rows" => b.rows}}
    catch
      {:return, val} -> val
    end
  end
  def fill(b, p) do
    try do
      y = 0
      while_fun_3 = fn while_fun_3, b, y ->
        if y < b.rows do
          x = 0
          while_fun_4 = fn while_fun_4, b, x ->
            if x < b.cols do
              px = b.px
              row = Enum.at(px, y)
              row = List.replace_at(row, x, p)
              px = List.replace_at(px, y, row)
              b = Map.put(b, :px, px)
              x = x + 1
              while_fun_4.(while_fun_4, b, x)
            else
              {b, x}
            end
          end
          {b, x} = try do
              while_fun_4.(while_fun_4, b, x)
            catch
              :break -> {b, x}
            end

          y = y + 1
          while_fun_3.(while_fun_3, b, y)
        else
          {b, y}
        end
      end
      {b, y} = try do
          while_fun_3.(while_fun_3, b, y)
        catch
          :break -> {b, y}
        end

    catch
      {:return, val} -> val
    end
  end
  def fillrgb(b, c) do
    try do
      fill(b, Main.pixelFromRgb(c))
    catch
      {:return, val} -> val
    end
  end
  def setpx(b, x, y, p) do
    try do
      if x < 0 || x >= b.cols || y < 0 || y >= b.rows do
        throw {:return, false}
      end
      px = b.px
      row = Enum.at(px, y)
      row = List.replace_at(row, x, p)
      px = List.replace_at(px, y, row)
      b = Map.put(b, :px, px)
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def setpxrgb(b, x, y, c) do
    try do
      throw {:return, setpx(b, x, y, Main.pixelFromRgb(c))}
    catch
      {:return, val} -> val
    end
  end
  def getpx(b, x, y) do
    try do
      if x < 0 || x >= b.cols || y < 0 || y >= b.rows do
        throw {:return, %{"ok" => false}}
      end
      row = Enum.at(b.px, y)
      throw {:return, %{"ok" => true, "pixel" => Enum.at(row, x)}}
    catch
      {:return, val} -> val
    end
  end
  def getpxrgb(b, x, y) do
    try do
      r = getpx(b, x, y)
      if !r.ok do
        throw {:return, %{"ok" => false}}
      end
      throw {:return, %{"ok" => true, "rgb" => Main.rgbFromPixel(r.pixel)}}
    catch
      {:return, val} -> val
    end
  end
  def ppmSize(b) do
    try do
      header = (((("P6\n# Creator: Rosetta Code http://rosettacode.org/\n" <> Kernel.to_string(b.cols)) <> " ") <> Kernel.to_string(b.rows)) <> "\n255\n")
      throw {:return, _len(header) + 3 * b.cols * b.rows}
    catch
      {:return, val} -> val
    end
  end
  def pixelStr(p) do
    try do
      throw {:return, (((((("{" <> Kernel.to_string(p[:R])) <> " ") <> Kernel.to_string(p[:G])) <> " ") <> Kernel.to_string(p[:B])) <> "}")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      bm = newbitmap(300, 240)
      fillrgb(bm, 16711680)
      setpxrgb(bm, 10, 20, 255)
      setpxrgb(bm, 20, 30, 0)
      setpxrgb(bm, 30, 40, 1056816)
      c1 = getpx(bm, 0, 0)
      c2 = getpx(bm, 10, 20)
      c3 = getpx(bm, 30, 40)
      IO.puts(((("Image size: " <> Kernel.to_string(bm.cols)) <> " Ã— ") <> Kernel.to_string(bm.rows)))
      IO.puts((Kernel.inspect(Main.ppmSize(bm)) <> " bytes when encoded as PPM."))
      if c1.ok do
        IO.puts(("Pixel at (0,0) is " <> Main.pixelStr(c1.pixel)))
      end
      if c2.ok do
        IO.puts(("Pixel at (10,20) is " <> Main.pixelStr(c2.pixel)))
      end
      if c3.ok do
        p = c3.pixel
        r16 = p[:R] * 257
        g16 = p[:G] * 257
        b16 = p[:B] * 257
        IO.puts(((((("Pixel at (30,40) has R=" <> Kernel.inspect(r16)) <> ", G=") <> Kernel.inspect(g16)) <> ", B=") <> Kernel.inspect(b16)))
      end
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
