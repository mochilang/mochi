# Code generated by Mochi transpiler 2025-07-27 00:51 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def indexOf(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < String.length(s) do
          if String.slice(s, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          :break -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def fmt3(x) do
    try do
      y = trunc(((x * 1000.0) + 0.5)) / 1000.0
      s = Kernel.to_string(y)
      dot = Main.indexOf(s, ".")
      {s} = if dot == 0 - 1 do
        s = (s <> ".000")
        {s}
      else
        decs = String.length(s) - dot - 1
        {decs, s} = if decs > 3 do
          s = String.slice(s, 0, dot + 4 - (0))
          {decs, s}
        else
          while_fun_2 = fn while_fun_2, decs, s ->
            if decs < 3 do
              s = (s <> "0")
              decs = decs + 1
              while_fun_2.(while_fun_2, decs, s)
            else
              {decs, s}
            end
          end
          {decs, s} = try do
              while_fun_2.(while_fun_2, decs, s)
            catch
              :break -> {decs, s}
            end

          {decs, s}
        end
        {s}
      end
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def pad(s, width) do
    try do
      out = s
      while_fun_3 = fn while_fun_3, out ->
        if String.length(out) < width do
          out = (" " <> out)
          while_fun_3.(while_fun_3, out)
        else
          out
        end
      end
      out = try do
          while_fun_3.(while_fun_3, out)
        catch
          :break -> out
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def smaSeries(xs, period) do
    try do
      res = []
      sum = 0.0
      i = 0
      while_fun_4 = fn while_fun_4, i, res, sum ->
        if i < length(xs) do
          sum = sum + Enum.at(xs, i)
          if i >= period do
            sum = sum - Enum.at(xs, i - period)
          end
          denom = i + 1
          if denom > period do
            denom = period
          end
          res = (res ++ [sum / (denom)])
          i = i + 1
          while_fun_4.(while_fun_4, i, res, sum)
        else
          {i, res, sum}
        end
      end
      {i, res, sum} = try do
          while_fun_4.(while_fun_4, i, res, sum)
        catch
          :break -> {i, res, sum}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      xs = [1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0]
      sma3 = Main.smaSeries(xs, 3)
      sma5 = Main.smaSeries(xs, 5)
      IO.puts("x       sma3   sma5")
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < length(xs) do
          line = ((((Main.pad(Main.fmt3(Enum.at(xs, i)), 5) <> "  ") <> Main.pad(Main.fmt3(Enum.at(sma3, i)), 5)) <> "  ") <> Main.pad(Main.fmt3(Enum.at(sma5, i)), 5))
          IO.puts(Kernel.inspect(line))
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          :break -> i
        end

    catch
      {:return, val} -> val
    end
  end
end
Main.main()
