# Code generated by Mochi transpiler 2025-07-26 19:45 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def poolPut(p, x) do
    try do
      throw {:return, (p ++ [x])}
    catch
      {:return, val} -> val
    end
  end
  def poolGet(p) do
    try do
      if length(p) == 0 do
        IO.puts("pool empty")
        throw {:return, %{"pool" => p, "val" => 0}}
      end
      idx = length(p) - 1
      v = Enum.at(p, idx)
      p = _slice(p, 0, idx - 0)
      throw {:return, %{"pool" => p, "val" => v}}
    catch
      {:return, val} -> val
    end
  end
  def clearPool(p) do
    try do
      throw {:return, []}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      pool = []
      i = 1
      j = 2
      IO.puts(to_string(i + j))
      pool = Main.poolPut(pool, i)
      pool = Main.poolPut(pool, j)
      i = 0
      j = 0
      res1 = Main.poolGet(pool)
      pool = res1["pool"]
      i = trunc(res1["val"])
      res2 = Main.poolGet(pool)
      pool = res2["pool"]
      j = trunc(res2["val"])
      i = 4
      j = 5
      IO.puts(to_string(i + j))
      pool = Main.poolPut(pool, i)
      pool = Main.poolPut(pool, j)
      i = 0
      j = 0
      pool = Main.clearPool(pool)
      res3 = Main.poolGet(pool)
      pool = res3["pool"]
      i = trunc(res3["val"])
      res4 = Main.poolGet(pool)
      pool = res4["pool"]
      j = trunc(res4["val"])
      i = 7
      j = 8
      IO.puts(to_string(i + j))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
