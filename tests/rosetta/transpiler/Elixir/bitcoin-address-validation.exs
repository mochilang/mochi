# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  def indexOf(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if _slice(s, i, (i + 1) - i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          :break -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def set58(addr) do
    try do
      tmpl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      a = []
      i = 0
      while_fun_2 = fn while_fun_2, a, i ->
        if i < 25 do
          a = (a ++ [0])
          i = i + 1
          while_fun_2.(while_fun_2, a, i)
        else
          {a, i}
        end
      end
      {a, i} = try do
          while_fun_2.(while_fun_2, a, i)
        catch
          :break -> {a, i}
        end

      idx = 0
      while_fun_3 = fn while_fun_3, a, idx ->
        if idx < _len(addr) do
          ch = _slice(addr, idx, (idx + 1) - idx)
          c = Main.indexOf(tmpl, ch)
          if c < 0 do
            throw {:return, []}
          end
          j = 24
          while_fun_4 = fn while_fun_4, a, c, j ->
            if j >= 0 do
              c = c + 58 * Enum.at(a, j)
              a = List.replace_at(a, j, rem(c, 256))
              c = trunc((div(c, 256)))
              j = j - 1
              while_fun_4.(while_fun_4, a, c, j)
            else
              {a, c, j}
            end
          end
          {a, c, j} = try do
              while_fun_4.(while_fun_4, a, c, j)
            catch
              :break -> {a, c, j}
            end

          if c > 0 do
            throw {:return, []}
          end
          idx = idx + 1
          while_fun_3.(while_fun_3, a, idx)
        else
          {a, idx}
        end
      end
      {a, idx} = try do
          while_fun_3.(while_fun_3, a, idx)
        catch
          :break -> {a, idx}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def doubleSHA256(bs) do
    try do
      first = _sha256(bs)
      throw {:return, _sha256(first)}
    catch
      {:return, val} -> val
    end
  end
  def computeChecksum(a) do
    try do
      hash = Main.doubleSHA256(_slice(a, 0, 21 - 0))
      throw {:return, _slice(hash, 0, 4 - 0)}
    catch
      {:return, val} -> val
    end
  end
  def validA58(addr) do
    try do
      a = Main.set58(addr)
      if _len(a) != 25 do
        throw {:return, false}
      end
      if Enum.at(a, 0) != 0 do
        throw {:return, false}
      end
      sum = Main.computeChecksum(a)
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < 4 do
          if Enum.at(a, 21 + i) != Enum.at(sum, i) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          :break -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(Main.validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")))
    IO.puts(Kernel.inspect(Main.validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")))
  end
end
Main.main()
