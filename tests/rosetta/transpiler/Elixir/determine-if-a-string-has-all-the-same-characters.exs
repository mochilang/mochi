# Code generated by Mochi transpiler 2025-08-04 11:46 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def ord(ch) do
    try do
      if ch == "5" do
        throw {:return, 53}
      end
      if ch == "T" do
        throw {:return, 84}
      end
      if ch == " " do
        throw {:return, 32}
      end
      if ch == "é" do
        throw {:return, 233}
      end
      if ch == "🐺" do
        throw {:return, 128058}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def hex(n) do
    try do
      digits = "0123456789abcdef"
      if n == 0 do
        throw {:return, "0x0"}
      end
      m = n
      out = ""
      while_fun = fn while_fun, m, out ->
        if m > 0 do
          d = rem(m, 16)
          out = (_slice(digits, d, d + 1 - (d)) <> out)
          m = div(m, 16)
          while_fun.(while_fun, m, out)
        else
          {m, out}
        end
      end
      {m, out} = try do
          while_fun.(while_fun, m, out)
        catch
          {:break, {m, out}} -> {m, out}
        end

      throw {:return, ("0x" <> out)}
    catch
      {:return, val} -> val
    end
  end
  def quote_(s) do
    try do
      throw {:return, (("'" <> s) <> "'")}
    catch
      {:return, val} -> val
    end
  end
  def analyze(s) do
    try do
      le = _len(s)
      IO.puts((((("Analyzing " <> quote_(s)) <> " which has a length of ") <> Kernel.to_string(le)) <> ":"))
      if le > 1 do
        i = 1
        while_fun_2 = fn while_fun_2, i ->
          if i < le do
            cur = _slice(s, i, i + 1 - (i))
            prev = _slice(s, i - 1, i - (i - 1))
            if cur != prev do
              IO.puts("  Not all characters in the string are the same.")
              IO.puts((((((("  " <> quote_(cur)) <> " (") <> hex(ord(cur))) <> ") is different at position ") <> Kernel.to_string(i + 1)) <> "."))
              IO.puts("")
              throw {:return, nil}
            end
            i = i + 1
            while_fun_2.(while_fun_2, i)
          else
            i
          end
        end
        i = try do
            while_fun_2.(while_fun_2, i)
          catch
            {:break, i} -> i
          end

      end
      IO.puts("  All characters in the string are the same.")
      IO.puts("")
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      strings = ["", "   ", "2", "333", ".55", "tttTTT", "4444 444k", "pépé", "🐶🐶🐺🐶", "🎄🎄🎄🎄"]
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(strings) do
          analyze(Enum.at(strings, i))
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, i} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
