# Code generated by Mochi transpiler 2025-08-04 21:17 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def nextPrime(primes, start) do
    try do
      n = start
      while_fun = fn while_fun, n ->
        if true do
          isP = true
          i = 0
          while_fun_2 = fn while_fun_2, i, isP ->
            if i < _len(primes) do
              p = Enum.at(primes, i)
              if p * p > n do
                throw {:break, {i, isP}}
              end
              {isP} = if rem(n, p) == 0 do
                isP = false
                throw {:break, {i, isP}}
                {isP}
              else
                {isP}
              end
              i = i + 1
              while_fun_2.(while_fun_2, i, isP)
            else
              {i, isP}
            end
          end
          {i, isP} = try do
              while_fun_2.(while_fun_2, i, isP)
            catch
              {:break, {i, isP}} -> {i, isP}
            end

          if isP do
            throw {:return, n}
          end
          n = n + 2
          while_fun.(while_fun, n)
        else
          n
        end
      end
      n = try do
          while_fun.(while_fun, n)
        catch
          {:break, {n}} -> n
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      primes = [2]
      cand = 3
      while_fun_3 = fn while_fun_3, cand, primes ->
        if _len(primes) < 10000 do
          cand = nextPrime(primes, cand)
          primes = (primes ++ [cand])
          cand = cand + 2
          while_fun_3.(while_fun_3, cand, primes)
        else
          {cand, primes}
        end
      end
      {cand, primes} = try do
          while_fun_3.(while_fun_3, cand, primes)
        catch
          {:break, {cand, primes}} -> {cand, primes}
        end

      line = "First twenty:"
      i = 0
      while_fun_4 = fn while_fun_4, i, line ->
        if i < 20 do
          line = ((line <> " ") <> Kernel.to_string(Enum.at(primes, i)))
          i = i + 1
          while_fun_4.(while_fun_4, i, line)
        else
          {i, line}
        end
      end
      {i, line} = try do
          while_fun_4.(while_fun_4, i, line)
        catch
          {:break, {i, line}} -> {i, line}
        end

      IO.puts(line)
      idx = 0
      while_fun_5 = fn while_fun_5, idx ->
        if Enum.at(primes, idx) <= 100 do
          idx = idx + 1
          while_fun_5.(while_fun_5, idx)
        else
          idx
        end
      end
      idx = try do
          while_fun_5.(while_fun_5, idx)
        catch
          {:break, {idx}} -> idx
        end

      line = ("Between 100 and 150: " <> Kernel.to_string(Enum.at(primes, idx)))
      idx = idx + 1
      while_fun_6 = fn while_fun_6, idx, line ->
        if Enum.at(primes, idx) < 150 do
          line = ((line <> " ") <> Kernel.to_string(Enum.at(primes, idx)))
          idx = idx + 1
          while_fun_6.(while_fun_6, idx, line)
        else
          {idx, line}
        end
      end
      {idx, line} = try do
          while_fun_6.(while_fun_6, idx, line)
        catch
          {:break, {idx, line}} -> {idx, line}
        end

      IO.puts(line)
      while_fun_7 = fn while_fun_7, idx ->
        if Enum.at(primes, idx) <= 7700 do
          idx = idx + 1
          while_fun_7.(while_fun_7, idx)
        else
          idx
        end
      end
      idx = try do
          while_fun_7.(while_fun_7, idx)
        catch
          {:break, {idx}} -> idx
        end

      count = 0
      while_fun_8 = fn while_fun_8, count, idx ->
        if Enum.at(primes, idx) < 8000 do
          count = count + 1
          idx = idx + 1
          while_fun_8.(while_fun_8, count, idx)
        else
          {count, idx}
        end
      end
      {count, idx} = try do
          while_fun_8.(while_fun_8, count, idx)
        catch
          {:break, {count, idx}} -> {count, idx}
        end

      IO.puts(("Number beween 7,700 and 8,000: " <> Kernel.inspect(count)))
      IO.puts(("10,000th prime: " <> Kernel.to_string(Enum.at(primes, 9999))))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
