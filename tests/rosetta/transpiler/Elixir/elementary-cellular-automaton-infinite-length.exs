# Code generated by Mochi transpiler 2025-08-04 15:54 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def pow2(n) do
    try do
      p = 1
      i = 0
      while_fun = fn while_fun, i, p ->
        if i < n do
          p = p * 2
          i = i + 1
          while_fun.(while_fun, i, p)
        else
          {i, p}
        end
      end
      {i, p} = try do
          while_fun.(while_fun, i, p)
        catch
          {:break, {i, p}} -> {i, p}
        end

      throw {:return, p}
    catch
      {:return, val} -> val
    end
  end
  def btoi(b) do
    try do
      throw {:return, ((if b, do: 1, else: 0))}
    catch
      {:return, val} -> val
    end
  end
  def addNoCells(cells) do
    try do
      l = "O"
      r = "O"
      {l} = if _slice(cells, 0, 1 - (0)) == "O" do
        l = "."
        {l}
      else
        {l}
      end
      {r} = if _slice(cells, _len(cells) - 1, _len(cells) - (_len(cells) - 1)) == "O" do
        r = "."
        {r}
      else
        {r}
      end
      cells = ((l <> cells) <> r)
      cells = ((l <> cells) <> r)
      throw {:return, cells}
    catch
      {:return, val} -> val
    end
  end
  def step(cells, ruleVal) do
    try do
      newCells = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, newCells ->
        if i < _len(cells) - 2 do
          bin = 0
          b = 2
          n = i
          while_fun_3 = fn while_fun_3, b, bin, n ->
            if n < i + 3 do
              bin = bin + btoi(_slice(cells, n, n + 1 - (n)) == "O") * pow2(b)
              b = b - 1
              n = n + 1
              while_fun_3.(while_fun_3, b, bin, n)
            else
              {b, bin, n}
            end
          end
          {b, bin, n} = try do
              while_fun_3.(while_fun_3, b, bin, n)
            catch
              {:break, {b, bin, n}} -> {b, bin, n}
            end

          a = "."
          {a} = if (rem((div(ruleVal, pow2(bin))), 2) == 1) do
            a = "O"
            {a}
          else
            {a}
          end
          newCells = (newCells <> a)
          i = i + 1
          while_fun_2.(while_fun_2, i, newCells)
        else
          {i, newCells}
        end
      end
      {i, newCells} = try do
          while_fun_2.(while_fun_2, i, newCells)
        catch
          {:break, {i, newCells}} -> {i, newCells}
        end

      throw {:return, newCells}
    catch
      {:return, val} -> val
    end
  end
  def repeat(ch, n) do
    try do
      s = ""
      i = 0
      while_fun_4 = fn while_fun_4, i, s ->
        if i < n do
          s = (s <> ch)
          i = i + 1
          while_fun_4.(while_fun_4, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_4.(while_fun_4, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def evolve(l, ruleVal) do
    try do
      IO.puts(((" Rule #" <> Kernel.to_string(ruleVal)) <> ":"))
      cells = "O"
      x = 0
      while_fun_5 = fn while_fun_5, cells, x ->
        if x < l do
          cells = addNoCells(cells)
          width = 40 + (div(_len(cells), 2))
          spaces = repeat(" ", width - _len(cells))
          IO.puts((spaces <> cells))
          cells = step(cells, ruleVal)
          x = x + 1
          while_fun_5.(while_fun_5, cells, x)
        else
          {cells, x}
        end
      end
      {cells, x} = try do
          while_fun_5.(while_fun_5, cells, x)
        catch
          {:break, {cells, x}} -> {cells, x}
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      Enum.each([90, 30], fn r ->
        evolve(25, r)
        IO.puts("")
      end)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
