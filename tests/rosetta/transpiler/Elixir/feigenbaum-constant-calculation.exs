# Code generated by Mochi transpiler 2025-08-04 21:47 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def floorf(x) do
    try do
      y = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      throw {:return, y}
    catch
      {:return, val} -> val
    end
  end
  def indexOf(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if _slice(s, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, 0 - 1}
    catch
      {:return, val} -> val
    end
  end
  def fmt8(x) do
    try do
      y = floorf(x * 100000000.0 + 0.5) / 100000000.0
      s = Kernel.to_string(y)
      dot = indexOf(s, ".")
      {s} = if dot == 0 - 1 do
        s = (s <> ".00000000")
        {s}
      else
        decs = _len(s) - dot - 1
        while_fun_2 = fn while_fun_2, decs, s ->
          if decs < 8 do
            s = (s <> "0")
            decs = decs + 1
            while_fun_2.(while_fun_2, decs, s)
          else
            {decs, s}
          end
        end
        {decs, s} = try do
            while_fun_2.(while_fun_2, decs, s)
          catch
            {:break, {decs, s}} -> {decs, s}
          end

        {s}
      end
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def pad2(x) do
    try do
      s = Kernel.to_string(x)
      {s} = if _len(s) < 2 do
        s = (" " <> s)
        {s}
      else
        {s}
      end
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      maxIt = 13
      maxItJ = 10
      a1 = 1.0
      a2 = 0.0
      d1 = 3.2
      IO.puts(" i       d")
      i = 2
      while_fun_3 = fn while_fun_3, a1, a2, d1, i ->
        if i <= maxIt do
          a = a1 + (a1 - a2) / d1
          j = 1
          while_fun_4 = fn while_fun_4, a, j ->
            if j <= maxItJ do
              x = 0.0
              y = 0.0
              k = 1
              limit = pow_int(2, i)
              while_fun_5 = fn while_fun_5, k, x, y ->
                if k <= limit do
                  y = 1.0 - 2.0 * y * x
                  x = a - x * x
                  k = k + 1
                  while_fun_5.(while_fun_5, k, x, y)
                else
                  {k, x, y}
                end
              end
              {k, x, y} = try do
                  while_fun_5.(while_fun_5, k, x, y)
                catch
                  {:break, {k, x, y}} -> {k, x, y}
                end

              a = a - x / y
              j = j + 1
              while_fun_4.(while_fun_4, a, j)
            else
              {a, j}
            end
          end
          {a, j} = try do
              while_fun_4.(while_fun_4, a, j)
            catch
              {:break, {a, j}} -> {a, j}
            end

          d = (a1 - a2) / (a - a1)
          IO.puts(Kernel.inspect(((pad2(i) <> "    ") <> fmt8(d))))
          d1 = d
          a2 = a1
          a1 = a
          i = i + 1
          while_fun_3.(while_fun_3, a1, a2, d1, i)
        else
          {a1, a2, d1, i}
        end
      end
      {a1, a2, d1, i} = try do
          while_fun_3.(while_fun_3, a1, a2, d1, i)
        catch
          {:break, {a1, a2, d1, i}} -> {a1, a2, d1, i}
        end

    catch
      {:return, val} -> val
    end
  end
  def pow_int(base, exp) do
    try do
      r = 1
      b = base
      e = exp
      while_fun_6 = fn while_fun_6, b, e, r ->
        if e > 0 do
          {r} = if rem(e, 2) == 1 do
            r = r * b
            {r}
          else
            {r}
          end
          b = b * b
          e = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(e, 2)))
          while_fun_6.(while_fun_6, b, e, r)
        else
          {b, e, r}
        end
      end
      {b, e, r} = try do
          while_fun_6.(while_fun_6, b, e, r)
        catch
          {:break, {b, e, r}} -> {b, e, r}
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
