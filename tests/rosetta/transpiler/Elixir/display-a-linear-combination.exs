# Code generated by Mochi transpiler 2025-08-04 15:00 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def padRight(s, w) do
    try do
      r = s
      while_fun = fn while_fun, r ->
        if _len(r) < w do
          r = (r <> " ")
          while_fun.(while_fun, r)
        else
          r
        end
      end
      r = try do
          while_fun.(while_fun, r)
        catch
          {:break, r} -> r
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def linearCombo(c) do
    try do
      out = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, out ->
        if i < _len(c) do
          n = Enum.at(c, i)
          {out} = if n != 0 do
            op = ""
            {op} = if n < 0 && _len(out) == 0 do
              op = "-"
              {op}
            else
              {op} = if n < 0 do
                op = " - "
                {op}
              else
                {op} = if n > 0 && _len(out) == 0 do
                  op = ""
                  {op}
                else
                  op = " + "
                  {op}
                end
                {op}
              end
              {op}
            end
            av = n
            {av} = if av < 0 do
              av = -av
              {av}
            else
              {av}
            end
            coeff = (Kernel.to_string(av) <> "*")
            {coeff} = if av == 1 do
              coeff = ""
              {coeff}
            else
              {coeff}
            end
            out = (((((out <> op) <> coeff) <> "e(") <> Kernel.to_string(i + 1)) <> ")")
            {out}
          else
            {out}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_2.(while_fun_2, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      if _len(out) == 0 do
        throw {:return, "0"}
      end
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      combos = [[1, 2, 3], [0, 1, 2, 3], [1, 0, 3, 4], [1, 2, 0], [0, 0, 0], [0], [1, 1, 1], [-1, -1, -1], [-1, -2, 0, -3], [-1]]
      idx = 0
      while_fun_3 = fn while_fun_3, idx ->
        if idx < _len(combos) do
          c = Enum.at(combos, idx)
          t = "["
          j = 0
          while_fun_4 = fn while_fun_4, j, t ->
            if j < _len(c) do
              t = (t <> Kernel.to_string(Enum.at(c, j)))
              {t} = if j < _len(c) - 1 do
                t = (t <> ", ")
                {t}
              else
                {t}
              end
              j = j + 1
              while_fun_4.(while_fun_4, j, t)
            else
              {j, t}
            end
          end
          {j, t} = try do
              while_fun_4.(while_fun_4, j, t)
            catch
              {:break, {j, t}} -> {j, t}
            end

          t = (t <> "]")
          lc = linearCombo(c)
          IO.puts(Kernel.inspect(((padRight(t, 15) <> "  ->  ") <> lc)))
          idx = idx + 1
          while_fun_3.(while_fun_3, idx)
        else
          idx
        end
      end
      idx = try do
          while_fun_3.(while_fun_3, idx)
        catch
          {:break, idx} -> idx
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
