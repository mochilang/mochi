# Code generated by Mochi transpiler 2025-08-04 09:33 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def randN(n) do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1664525 + 1013904223), 2147483647))
      throw {:return, rem(Process.get(:seed), n)}
    catch
      {:return, val} -> val
    end
  end
  def newField(w, h) do
    try do
      rows = []
      y = 0
      while_fun = fn while_fun, rows, y ->
        if y < h do
          row = []
          x = 0
          while_fun_2 = fn while_fun_2, row, x ->
            if x < w do
              row = (row ++ [false])
              x = x + 1
              while_fun_2.(while_fun_2, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_2.(while_fun_2, row, x)
            catch
              {:break, {row, x}} -> {row, x}
            end

          rows = (rows ++ [row])
          y = y + 1
          while_fun.(while_fun, rows, y)
        else
          {rows, y}
        end
      end
      {rows, y} = try do
          while_fun.(while_fun, rows, y)
        catch
          {:break, {rows, y}} -> {rows, y}
        end

      throw {:return, %{s: rows, w: w, h: h}}
    catch
      {:return, val} -> val
    end
  end
  def setCell(f, x, y, b) do
    try do
      rows = f.s
      row = Enum.at(rows, y)
      row = List.replace_at(row, x, b)
      rows = List.replace_at(rows, y, row)
      f = Map.put(f, :s, rows)
    catch
      {:return, val} -> val
    end
  end
  def state(f, x, y) do
    try do
      while_fun_3 = fn while_fun_3, y ->
        if y < 0 do
          y = y + f.h
          while_fun_3.(while_fun_3, y)
        else
          y
        end
      end
      y = try do
          while_fun_3.(while_fun_3, y)
        catch
          {:break, y} -> y
        end

      while_fun_4 = fn while_fun_4, x ->
        if x < 0 do
          x = x + f.w
          while_fun_4.(while_fun_4, x)
        else
          x
        end
      end
      x = try do
          while_fun_4.(while_fun_4, x)
        catch
          {:break, x} -> x
        end

      throw {:return, Enum.at(Enum.at(f.s, rem(y, f.h)), rem(x, f.w))}
    catch
      {:return, val} -> val
    end
  end
  def nextState(f, x, y) do
    try do
      count = 0
      dy = -1
      while_fun_5 = fn while_fun_5, count, dy ->
        if dy <= 1 do
          dx = -1
          while_fun_6 = fn while_fun_6, count, dx ->
            if dx <= 1 do
              {count} = if !(dx == 0 && dy == 0) && Main.state(f, x + dx, y + dy) do
                count = count + 1
                {count}
              else
                {count}
              end
              dx = dx + 1
              while_fun_6.(while_fun_6, count, dx)
            else
              {count, dx}
            end
          end
          {count, dx} = try do
              while_fun_6.(while_fun_6, count, dx)
            catch
              {:break, {count, dx}} -> {count, dx}
            end

          dy = dy + 1
          while_fun_5.(while_fun_5, count, dy)
        else
          {count, dy}
        end
      end
      {count, dy} = try do
          while_fun_5.(while_fun_5, count, dy)
        catch
          {:break, {count, dy}} -> {count, dy}
        end

      throw {:return, count == 3 || (count == 2 && Main.state(f, x, y))}
    catch
      {:return, val} -> val
    end
  end
  def newLife(w, h) do
    try do
      a = Main.newField(w, h)
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < (w * h / 2) do
          Main.setCell(a, Main.randN(w), Main.randN(h), true)
          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, i} -> i
        end

      throw {:return, %{a: a, b: Main.newField(w, h), w: w, h: h}}
    catch
      {:return, val} -> val
    end
  end
  def step(l) do
    try do
      y = 0
      while_fun_8 = fn while_fun_8, y ->
        if y < l.h do
          x = 0
          while_fun_9 = fn while_fun_9, x ->
            if x < l.w do
              Main.setCell(l.b, x, y, Main.nextState(l.a, x, y))
              x = x + 1
              while_fun_9.(while_fun_9, x)
            else
              x
            end
          end
          x = try do
              while_fun_9.(while_fun_9, x)
            catch
              {:break, x} -> x
            end

          y = y + 1
          while_fun_8.(while_fun_8, y)
        else
          y
        end
      end
      y = try do
          while_fun_8.(while_fun_8, y)
        catch
          {:break, y} -> y
        end

      tmp = l.a
      l = Map.put(l, :a, l.b)
      l = Map.put(l, :b, tmp)
    catch
      {:return, val} -> val
    end
  end
  def lifeString(l) do
    try do
      out = ""
      y = 0
      while_fun_10 = fn while_fun_10, out, y ->
        if y < l.h do
          x = 0
          while_fun_11 = fn while_fun_11, out, x ->
            if x < l.w do
              out = (if Main.state(l.a, x, y), do: (out <> "*"), else: (out <> " "))
              x = x + 1
              while_fun_11.(while_fun_11, out, x)
            else
              {out, x}
            end
          end
          {out, x} = try do
              while_fun_11.(while_fun_11, out, x)
            catch
              {:break, {out, x}} -> {out, x}
            end

          out = (out <> "\n")
          y = y + 1
          while_fun_10.(while_fun_10, out, y)
        else
          {out, y}
        end
      end
      {out, y} = try do
          while_fun_10.(while_fun_10, out, y)
        catch
          {:break, {out, y}} -> {out, y}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      l = Main.newLife(80, 15)
      i = 0
      while_fun_12 = fn while_fun_12, i ->
        if i < 300 do
          Main.step(l)
          IO.puts("\f")
          IO.puts(Kernel.inspect(Main.lifeString(l)))
          i = i + 1
          while_fun_12.(while_fun_12, i)
        else
          i
        end
      end
      i = try do
          while_fun_12.(while_fun_12, i)
        catch
          {:break, i} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:seed, 1)
  def bench_main() do
    Process.put(:seed, 1)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
