# Code generated by Mochi transpiler 2025-08-04 21:17 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def digitSumMod(n, base) do
    try do
      sum = 0
      j = n
      while_fun = fn while_fun, j, sum ->
        if j > 0 do
          sum = sum + rem(j, base)
          j = div(j, base)
          while_fun.(while_fun, j, sum)
        else
          {j, sum}
        end
      end
      {j, sum} = try do
          while_fun.(while_fun, j, sum)
        catch
          {:break, {j, sum}} -> {j, sum}
        end

      throw {:return, rem(sum, base)}
    catch
      {:return, val} -> val
    end
  end
  def fairshareList(n, base) do
    try do
      res = []
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < n do
          res = (res ++ [digitSumMod(i, base)])
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def sortInts(xs) do
    try do
      arr = xs
      i = 0
      while_fun_3 = fn while_fun_3, arr, i ->
        if i < _len(arr) do
          j = 0
          while_fun_4 = fn while_fun_4, arr, j ->
            if j < _len(arr) - 1 do
              {arr} = if Enum.at(arr, j) > Enum.at(arr, j + 1) do
                t = Enum.at(arr, j)
                arr = List.replace_at(arr, j, Enum.at(arr, j + 1))
                arr = List.replace_at(arr, j + 1, t)
                {arr}
              else
                {arr}
              end
              j = j + 1
              while_fun_4.(while_fun_4, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_4.(while_fun_4, arr, j)
            catch
              {:break, {arr, j}} -> {arr, j}
            end

          i = i + 1
          while_fun_3.(while_fun_3, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun_3.(while_fun_3, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def turns(n, base) do
    try do
      counts = []
      i = 0
      while_fun_5 = fn while_fun_5, counts, i ->
        if i < base do
          counts = (counts ++ [0])
          i = i + 1
          while_fun_5.(while_fun_5, counts, i)
        else
          {counts, i}
        end
      end
      {counts, i} = try do
          while_fun_5.(while_fun_5, counts, i)
        catch
          {:break, {counts, i}} -> {counts, i}
        end

      i = 0
      while_fun_6 = fn while_fun_6, counts, i ->
        if i < n do
          v = digitSumMod(i, base)
          counts = List.replace_at(counts, v, Enum.at(counts, v) + 1)
          i = i + 1
          while_fun_6.(while_fun_6, counts, i)
        else
          {counts, i}
        end
      end
      {counts, i} = try do
          while_fun_6.(while_fun_6, counts, i)
        catch
          {:break, {counts, i}} -> {counts, i}
        end

      freq = %{}
      fkeys = []
      i = 0
      while_fun_7 = fn while_fun_7, fkeys, freq, i ->
        if i < base do
          c = Enum.at(counts, i)
          {fkeys, freq} = if c > 0 do
            {fkeys, freq} = if Map.has_key?(freq, c) do
              freq = Map.put(freq, c, freq[c] + 1)
              {fkeys, freq}
            else
              freq = Map.put(freq, c, 1)
              fkeys = (fkeys ++ [c])
              {fkeys, freq}
            end
            {fkeys, freq}
          else
            {fkeys, freq}
          end
          i = i + 1
          while_fun_7.(while_fun_7, fkeys, freq, i)
        else
          {fkeys, freq, i}
        end
      end
      {fkeys, freq, i} = try do
          while_fun_7.(while_fun_7, fkeys, freq, i)
        catch
          {:break, {fkeys, freq, i}} -> {fkeys, freq, i}
        end

      total = 0
      i = 0
      while_fun_8 = fn while_fun_8, i, total ->
        if i < _len(fkeys) do
          total = total + freq[Enum.at(fkeys, i)]
          i = i + 1
          while_fun_8.(while_fun_8, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun_8.(while_fun_8, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      if total != base do
        throw {:return, (("only " <> Kernel.to_string(total)) <> " have a turn")}
      end
      fkeys = sortInts(fkeys)
      res = ""
      i = 0
      while_fun_9 = fn while_fun_9, i, res ->
        if i < _len(fkeys) do
          {res} = if i > 0 do
            res = (res <> " or ")
            {res}
          else
            {res}
          end
          res = (res <> Kernel.to_string(Enum.at(fkeys, i)))
          i = i + 1
          while_fun_9.(while_fun_9, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_9.(while_fun_9, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      bases1 = [2, 3, 5, 11]
      i = 0
      while_fun_10 = fn while_fun_10, i ->
        if i < _len(bases1) do
          b = Enum.at(bases1, i)
          IO.puts(Kernel.inspect(((String.pad_leading(Kernel.to_string(Kernel.to_string(b)), 2, " ") <> " : ") <> Kernel.inspect(fairshareList(25, b)))))
          i = i + 1
          while_fun_10.(while_fun_10, i)
        else
          i
        end
      end
      i = try do
          while_fun_10.(while_fun_10, i)
        catch
          {:break, {i}} -> i
        end

      IO.puts("")
      IO.puts("How many times does each get a turn in 50000 iterations?")
      bases2 = [191, 1377, 49999, 50000, 50001]
      i = 0
      while_fun_11 = fn while_fun_11, i ->
        if i < _len(bases2) do
          b = Enum.at(bases2, i)
          t = turns(50000, b)
          IO.puts(((("  With " <> Kernel.to_string(b)) <> " people: ") <> t))
          i = i + 1
          while_fun_11.(while_fun_11, i)
        else
          i
        end
      end
      i = try do
          while_fun_11.(while_fun_11, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
