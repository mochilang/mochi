# Code generated by Mochi transpiler 2025-07-27 01:41 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def trimLeftZeros(s) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < String.length(s) && String.slice(s, i, i + 1 - (i)) == "0" do
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          :break -> i
        end

      throw {:return, String.slice(s, i, String.length(s) - (i))}
    catch
      {:return, val} -> val
    end
  end
  def btString(s) do
    try do
      s = Main.trimLeftZeros(s)
      b = []
      i = String.length(s) - 1
      while_fun_2 = fn while_fun_2, b, i ->
        if i >= 0 do
          ch = String.slice(s, i, i + 1 - (i))
          {b} = if ch == "+" do
            b = (b ++ [1])
            {b}
          else
            {b} = if ch == "0" do
              b = (b ++ [0])
              {b}
            else
              {b} = if ch == "-" do
                b = (b ++ [0 - 1])
                {b}
              else
                throw {:return, %{"bt" => [], "ok" => false}}
                {b}
              end
              {b}
            end
            {b}
          end
          i = i - 1
          while_fun_2.(while_fun_2, b, i)
        else
          {b, i}
        end
      end
      {b, i} = try do
          while_fun_2.(while_fun_2, b, i)
        catch
          :break -> {b, i}
        end

      throw {:return, %{"bt" => b, "ok" => true}}
    catch
      {:return, val} -> val
    end
  end
  def btToString(b) do
    try do
      if length(b) == 0 do
        throw {:return, "0"}
      end
      r = ""
      i = length(b) - 1
      while_fun_3 = fn while_fun_3, i, r ->
        if i >= 0 do
          d = Enum.at(b, i)
          {r} = if d == 0 - 1 do
            r = (r <> "-")
            {r}
          else
            r = if d == 0, do: (r <> "0"), else: (r <> "+")
            {r}
          end
          i = i - 1
          while_fun_3.(while_fun_3, i, r)
        else
          {i, r}
        end
      end
      {i, r} = try do
          while_fun_3.(while_fun_3, i, r)
        catch
          :break -> {i, r}
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def btInt(i) do
    try do
      if i == 0 do
        throw {:return, []}
      end
      n = i
      b = []
      while_fun_4 = fn while_fun_4, b, n ->
        if n != 0 do
          m = rem(n, 3)
          n = trunc((div(n, 3)))
          {m, n} = if m == 2 do
            m = 0 - 1
            n = n + 1
            {m, n}
          else
            {m, n} = if m == 0 - 2 do
              m = 1
              n = n - 1
              {m, n}
            else
              {m, n}
            end
            {m, n}
          end
          b = (b ++ [m])
          while_fun_4.(while_fun_4, b, n)
        else
          {b, n}
        end
      end
      {b, n} = try do
          while_fun_4.(while_fun_4, b, n)
        catch
          :break -> {b, n}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def btToInt(b) do
    try do
      r = 0
      pt = 1
      i = 0
      while_fun_5 = fn while_fun_5, i, pt, r ->
        if i < length(b) do
          r = r + Enum.at(b, i) * pt
          pt = pt * 3
          i = i + 1
          while_fun_5.(while_fun_5, i, pt, r)
        else
          {i, pt, r}
        end
      end
      {i, pt, r} = try do
          while_fun_5.(while_fun_5, i, pt, r)
        catch
          :break -> {i, pt, r}
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def btNeg(b) do
    try do
      r = []
      i = 0
      while_fun_6 = fn while_fun_6, i, r ->
        if i < length(b) do
          r = (r ++ [-Enum.at(b, i)])
          i = i + 1
          while_fun_6.(while_fun_6, i, r)
        else
          {i, r}
        end
      end
      {i, r} = try do
          while_fun_6.(while_fun_6, i, r)
        catch
          :break -> {i, r}
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def btAdd(a, b) do
    try do
      throw {:return, Main.btInt(Main.btToInt(a) + Main.btToInt(b))}
    catch
      {:return, val} -> val
    end
  end
  def btMul(a, b) do
    try do
      throw {:return, Main.btInt(Main.btToInt(a) * Main.btToInt(b))}
    catch
      {:return, val} -> val
    end
  end
  def padLeft(s, w) do
    try do
      r = s
      while_fun_7 = fn while_fun_7, r ->
        if String.length(r) < w do
          r = (" " <> r)
          while_fun_7.(while_fun_7, r)
        else
          r
        end
      end
      r = try do
          while_fun_7.(while_fun_7, r)
        catch
          :break -> r
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def show(label, b) do
    try do
      l = Main.padLeft(label, 7)
      bs = Main.padLeft(Main.btToString(b), 12)
      is = Main.padLeft(Kernel.inspect(Main.btToInt(b)), 7)
      IO.puts(Kernel.inspect(((((l <> " ") <> bs) <> " ") <> is)))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      ares = Main.btString("+-0++0+")
      a = ares["bt"]
      b = Main.btInt(-436)
      cres = Main.btString("+-++-")
      c = cres["bt"]
      Main.show("a:", a)
      Main.show("b:", b)
      Main.show("c:", c)
      Main.show("a(b-c):", Main.btMul(a, Main.btAdd(b, Main.btNeg(c))))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
