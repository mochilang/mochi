# Code generated by Mochi transpiler 2025-07-28 11:44 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  def det(m) do
    try do
      n = _len(m)
      if n == 1 do
        throw {:return, Enum.at(Enum.at(m, 0), 0)}
      end
      total = 0.0
      sign = 1.0
      c = 0
      while_fun = fn while_fun, c, sign, total ->
        if c < n do
          sub = []
          r = 1
          while_fun_2 = fn while_fun_2, r, sub ->
            if r < n do
              row = []
              cc = 0
              while_fun_3 = fn while_fun_3, cc, row ->
                if cc < n do
                  {row} = if cc != c do
                    row = (row ++ [Enum.at(Enum.at(m, r), cc)])
                    {row}
                  else
                    {row}
                  end
                  cc = cc + 1
                  while_fun_3.(while_fun_3, cc, row)
                else
                  {cc, row}
                end
              end
              {cc, row} = try do
                  while_fun_3.(while_fun_3, cc, row)
                catch
                  {:break, {cc, row}} -> {cc, row}
                end

              sub = (sub ++ [row])
              r = r + 1
              while_fun_2.(while_fun_2, r, sub)
            else
              {r, sub}
            end
          end
          {r, sub} = try do
              while_fun_2.(while_fun_2, r, sub)
            catch
              {:break, {r, sub}} -> {r, sub}
            end

          total = total + sign * Enum.at(Enum.at(m, 0), c) * Main.det(sub)
          sign = sign * (-1.0)
          c = c + 1
          while_fun.(while_fun, c, sign, total)
        else
          {c, sign, total}
        end
      end
      {c, sign, total} = try do
          while_fun.(while_fun, c, sign, total)
        catch
          {:break, {c, sign, total}} -> {c, sign, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def replaceCol(m, col, v) do
    try do
      res = []
      r = 0
      while_fun_4 = fn while_fun_4, r, res ->
        if r < _len(m) do
          row = []
          c = 0
          while_fun_5 = fn while_fun_5, c, row ->
            if c < _len(Enum.at(m, r)) do
              row = (if c == col, do: (row ++ [Enum.at(v, r)]), else: (row ++ [Enum.at(Enum.at(m, r), c)]))
              c = c + 1
              while_fun_5.(while_fun_5, c, row)
            else
              {c, row}
            end
          end
          {c, row} = try do
              while_fun_5.(while_fun_5, c, row)
            catch
              {:break, {c, row}} -> {c, row}
            end

          res = (res ++ [row])
          r = r + 1
          while_fun_4.(while_fun_4, r, res)
        else
          {r, res}
        end
      end
      {r, res} = try do
          while_fun_4.(while_fun_4, r, res)
        catch
          {:break, {r, res}} -> {r, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:x, [])
  Process.put(:i, 0)
  Process.put(:s, "[")
  Process.put(:j, 0)
  def main() do
    mem_start = _mem()
    t_start = _now()
    Process.put(:m, [[2.0, -1.0, 5.0, 1.0], [3.0, 2.0, 2.0, -6.0], [1.0, 3.0, 3.0, -1.0], [5.0, -2.0, -3.0, 3.0]])
    Process.put(:v, [-3.0, -32.0, -47.0, 49.0])
    Process.put(:d, Main.det(Process.get(:m)))
    while_fun_6 = fn while_fun_6 ->
      if Process.get(:i) < _len(Process.get(:v)) do
        mc = Main.replaceCol(Process.get(:m), Process.get(:i), Process.get(:v))
        Process.put(:x, (Process.get(:x) ++ [Main.det(mc) / Process.get(:d)]))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_6.(while_fun_6)
      else
        nil
      end
    end
    try do
      while_fun_6.(while_fun_6)
    catch
      :break -> nil
    end

    while_fun_7 = fn while_fun_7 ->
      if Process.get(:j) < _len(Process.get(:x)) do
        Process.put(:s, (Process.get(:s) <> Kernel.to_string(Enum.at(Process.get(:x), Process.get(:j)))))
        if Process.get(:j) < _len(Process.get(:x)) - 1 do
          Process.put(:s, (Process.get(:s) <> " "))
        end
        Process.put(:j, Process.get(:j) + 1)
        while_fun_7.(while_fun_7)
      else
        nil
      end
    end
    try do
      while_fun_7.(while_fun_7)
    catch
      :break -> nil
    end

    Process.put(:s, (Process.get(:s) <> "]"))
    IO.puts(Process.get(:s))
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
