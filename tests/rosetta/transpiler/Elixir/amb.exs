# Code generated by Mochi transpiler 2025-07-26 05:21 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.at(base, start)
      true -> Enum.slice(base, start, len)
    end
  end
  def amb(wordsets, res, idx) do
    try do
      if idx == length(wordsets) do
        throw {:return, true}
      end
      prev = ""
      {prev} = if idx > 0 do
        prev = Enum.at(res, idx - 1)
        {prev}
      else
        {prev}
      end
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < length(Enum.at(wordsets, idx)) do
          w = Enum.at(Enum.at(wordsets, idx), i)
          if idx == 0 || String.slice(prev, String.length(prev) - 1, String.length(prev) - (String.length(prev) - 1)) == String.slice(w, 0, 1 - (0)) do
            res = List.replace_at(res, idx, w)
            if amb(wordsets, res, idx + 1) do
              throw {:return, true}
            end
          end
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          :break -> {i, res}
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      wordset = [["the", "that", "a"], ["frog", "elephant", "thing"], ["walked", "treaded", "grows"], ["slowly", "quickly"]]
      res = []
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < length(wordset) do
          res = (res ++ [""])
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          :break -> {i, res}
        end

      if amb(wordset, res, 0) do
        out = ("[" <> Enum.at(res, 0))
        j = 1
        while_fun_3 = fn while_fun_3, j, out ->
          if j < length(res) do
            out = ((out <> " ") <> Enum.at(res, j))
            j = j + 1
            while_fun_3.(while_fun_3, j, out)
          else
            {j, out}
          end
        end
        {j, out} = try do
            while_fun_3.(while_fun_3, j, out)
          catch
            :break -> {j, out}
          end

        out = (out <> "]")
        IO.puts(out)
      else
        IO.puts("No amb found")
      end
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
