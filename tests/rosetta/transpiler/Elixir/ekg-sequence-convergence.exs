# Code generated by Mochi transpiler 2025-08-04 15:54 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def contains(xs, n) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i) == n do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def gcd(a, b) do
    try do
      x = a
      y = b
      while_fun_2 = fn while_fun_2, x, y ->
        if y != 0 do
          t = rem(x, y)
          x = y
          y = t
          while_fun_2.(while_fun_2, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun_2.(while_fun_2, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      {x} = if x < 0 do
        x = -x
        {x}
      else
        {x}
      end
      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def sortInts(xs) do
    try do
      arr = xs
      n = _len(arr)
      i = 0
      while_fun_3 = fn while_fun_3, arr, i ->
        if i < n do
          j = 0
          while_fun_4 = fn while_fun_4, arr, j ->
            if j < n - 1 do
              {arr} = if Enum.at(arr, j) > Enum.at(arr, j + 1) do
                tmp = Enum.at(arr, j)
                arr = List.replace_at(arr, j, Enum.at(arr, j + 1))
                arr = List.replace_at(arr, j + 1, tmp)
                {arr}
              else
                {arr}
              end
              j = j + 1
              while_fun_4.(while_fun_4, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_4.(while_fun_4, arr, j)
            catch
              {:break, {arr, j}} -> {arr, j}
            end

          i = i + 1
          while_fun_3.(while_fun_3, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun_3.(while_fun_3, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def areSame(s, t) do
    try do
      if _len(s) != _len(t) do
        throw {:return, false}
      end
      a = sortInts(s)
      b = sortInts(t)
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(a) do
          if Enum.at(a, i) != Enum.at(b, i) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def printSlice(start, seq) do
    try do
      first = []
      i = 0
      while_fun_6 = fn while_fun_6, first, i ->
        if i < 30 do
          first = (first ++ [Enum.at(seq, i)])
          i = i + 1
          while_fun_6.(while_fun_6, first, i)
        else
          {first, i}
        end
      end
      {first, i} = try do
          while_fun_6.(while_fun_6, first, i)
        catch
          {:break, {first, i}} -> {first, i}
        end

      pad = ""
      {pad} = if start < 10 do
        pad = " "
        {pad}
      else
        {pad}
      end
      IO.puts((((("EKG(" <> pad) <> Kernel.to_string(start)) <> "): ") <> Kernel.inspect(first)))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      limit = 100
      starts = [2, 5, 7, 9, 10]
      ekg = []
      s = 0
      while_fun_7 = fn while_fun_7, ekg, s ->
        if s < _len(starts) do
          seq = [1, Enum.at(starts, s)]
          n = 2
          while_fun_8 = fn while_fun_8, n, seq ->
            if n < limit do
              i = 2
              done = false
              while_fun_9 = fn while_fun_9, done, i, seq ->
                if !done do
                  {done, seq} = if !contains(seq, i) && gcd(Enum.at(seq, n - 1), i) > 1 do
                    seq = (seq ++ [i])
                    done = true
                    {done, seq}
                  else
                    {done, seq}
                  end
                  i = i + 1
                  while_fun_9.(while_fun_9, done, i, seq)
                else
                  {done, i, seq}
                end
              end
              {done, i, seq} = try do
                  while_fun_9.(while_fun_9, done, i, seq)
                catch
                  {:break, {done, i, seq}} -> {done, i, seq}
                end

              n = n + 1
              while_fun_8.(while_fun_8, n, seq)
            else
              {n, seq}
            end
          end
          {n, seq} = try do
              while_fun_8.(while_fun_8, n, seq)
            catch
              {:break, {n, seq}} -> {n, seq}
            end

          ekg = (ekg ++ [seq])
          printSlice(Enum.at(starts, s), seq)
          s = s + 1
          while_fun_7.(while_fun_7, ekg, s)
        else
          {ekg, s}
        end
      end
      {ekg, s} = try do
          while_fun_7.(while_fun_7, ekg, s)
        catch
          {:break, {ekg, s}} -> {ekg, s}
        end

      i = 2
      found = false
      while_fun_10 = fn while_fun_10, found, i ->
        if i < limit do
          {found} = if Enum.at(Enum.at(ekg, 1), i) == Enum.at(Enum.at(ekg, 2), i) && areSame(_slice(Enum.at(ekg, 1), 0, i - 0), _slice(Enum.at(ekg, 2), 0, i - 0)) do
            IO.puts(("\nEKG(5) and EKG(7) converge at term " <> Kernel.to_string(i + 1)))
            found = true
            throw {:break, {found, i}}
            {found}
          else
            {found}
          end
          i = i + 1
          while_fun_10.(while_fun_10, found, i)
        else
          {found, i}
        end
      end
      {found, i} = try do
          while_fun_10.(while_fun_10, found, i)
        catch
          {:break, {found, i}} -> {found, i}
        end

      if !found do
        IO.puts((("\nEKG5(5) and EKG(7) do not converge within " <> Kernel.to_string(limit)) <> " terms"))
      end
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
