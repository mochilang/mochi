# Code generated by Mochi transpiler 2025-08-03 23:52 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    nPts = 100
    rMin = 10
    rMax = 15
    span = rMax + 1 + rMax
    poss = []
    min2 = rMin * rMin
    max2 = rMax * rMax
    y = -rMax
    while_fun = fn while_fun, poss, y ->
      if y <= rMax do
        x = -rMax
        while_fun_2 = fn while_fun_2, poss, x ->
          if x <= rMax do
            r2 = x * x + y * y
            {poss} = if r2 >= min2 && r2 <= max2 do
              poss = (poss ++ [[x, y]])
              {poss}
            else
              {poss}
            end
            x = x + 1
            while_fun_2.(while_fun_2, poss, x)
          else
            {poss, x}
          end
        end
        {poss, x} = try do
            while_fun_2.(while_fun_2, poss, x)
          catch
            {:break, {poss, x}} -> {poss, x}
          end

        y = y + 1
        while_fun.(while_fun, poss, y)
      else
        {poss, y}
      end
    end
    {poss, y} = try do
        while_fun.(while_fun, poss, y)
      catch
        {:break, {poss, y}} -> {poss, y}
      end

    IO.puts((Kernel.inspect(_len(poss)) <> " possible points"))
    rows = []
    r = 0
    while_fun_3 = fn while_fun_3, r, rows ->
      if r < span do
        row = []
        c = 0
        while_fun_4 = fn while_fun_4, c, row ->
          if c < span * 2 do
            row = (row ++ [" "])
            c = c + 1
            while_fun_4.(while_fun_4, c, row)
          else
            {c, row}
          end
        end
        {c, row} = try do
            while_fun_4.(while_fun_4, c, row)
          catch
            {:break, {c, row}} -> {c, row}
          end

        rows = (rows ++ [row])
        r = r + 1
        while_fun_3.(while_fun_3, r, rows)
      else
        {r, rows}
      end
    end
    {r, rows} = try do
        while_fun_3.(while_fun_3, r, rows)
      catch
        {:break, {r, rows}} -> {r, rows}
      end

    u = 0
    seen = %{}
    n = 0
    while_fun_5 = fn while_fun_5, n, rows, seen, u ->
      if n < nPts do
        i = rem(_now(), _len(poss))
        x = Enum.at(Enum.at(poss, i), 0)
        yy = Enum.at(Enum.at(poss, i), 1)
        row = yy + rMax
        col = (x + rMax) * 2
        rows = List.replace_at(rows, row, List.replace_at(Enum.at(rows, row), col, "*"))
        key = ((Kernel.to_string(row) <> ",") <> Kernel.to_string(col))
        {seen, u} = if !seen[key] do
          seen = Map.put(seen, key, true)
          u = u + 1
          {seen, u}
        else
          {seen, u}
        end
        n = n + 1
        while_fun_5.(while_fun_5, n, rows, seen, u)
      else
        {n, rows, seen, u}
      end
    end
    {n, rows, seen, u} = try do
        while_fun_5.(while_fun_5, n, rows, seen, u)
      catch
        {:break, {n, rows, seen, u}} -> {n, rows, seen, u}
      end

    i2 = 0
    while_fun_6 = fn while_fun_6, i2 ->
      if i2 < span do
        line = ""
        j = 0
        while_fun_7 = fn while_fun_7, j, line ->
          if j < span * 2 do
            line = (line <> Enum.at(Enum.at(rows, i2), j))
            j = j + 1
            while_fun_7.(while_fun_7, j, line)
          else
            {j, line}
          end
        end
        {j, line} = try do
            while_fun_7.(while_fun_7, j, line)
          catch
            {:break, {j, line}} -> {j, line}
          end

        IO.puts(line)
        i2 = i2 + 1
        while_fun_6.(while_fun_6, i2)
      else
        i2
      end
    end
    i2 = try do
        while_fun_6.(while_fun_6, i2)
      catch
        {:break, i2} -> i2
      end

    IO.puts((Kernel.to_string(u) <> " unique points"))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
