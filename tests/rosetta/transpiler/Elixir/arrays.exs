# Code generated by Mochi transpiler 2025-07-26 19:45 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def listStr(xs) do
    try do
      s = "["
      i = 0
      while_fun = fn while_fun, i ->
        if i < length(xs) do
          s = (s <> to_string(Enum.at(xs, i)))
          if i + 1 < length(xs) do
            s = (s <> " ")
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          :break -> i
        end

      s = (s <> "]")
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:a, [0, 0, 0, 0, 0])
  Process.put(:cap_s, 5)
  def main() do
    mem_start = _mem()
    t_start = _now()
    IO.puts(("len(a) = " <> to_string(length(Process.get(:a)))))
    IO.puts(("a = " <> Main.listStr(Process.get(:a))))
    Process.put(:a, List.replace_at(Process.get(:a), 0, 3))
    IO.puts(("a = " <> Main.listStr(Process.get(:a))))
    IO.puts(("a[0] = " <> to_string(Enum.at(Process.get(:a), 0))))
    Process.put(:s, _slice(Process.get(:a), 0, 4 - 0))
    IO.puts(("s = " <> Main.listStr(Process.get(:s))))
    IO.puts(((("len(s) = " <> to_string(length(Process.get(:s)))) <> "  cap(s) = ") <> to_string(Process.get(:cap_s))))
    Process.put(:s, _slice(Process.get(:a), 0, 5 - 0))
    IO.puts(("s = " <> Main.listStr(Process.get(:s))))
    Process.put(:a, List.replace_at(Process.get(:a), 0, 22))
    Process.put(:s, List.replace_at(Process.get(:s), 0, 22))
    IO.puts(("a = " <> Main.listStr(Process.get(:a))))
    IO.puts(("s = " <> Main.listStr(Process.get(:s))))
    Process.put(:s, (Process.get(:s) ++ [4]))
    Process.put(:s, (Process.get(:s) ++ [5]))
    Process.put(:s, (Process.get(:s) ++ [6]))
    Process.put(:cap_s, 10)
    IO.puts(("s = " <> Main.listStr(Process.get(:s))))
    IO.puts(((("len(s) = " <> to_string(length(Process.get(:s)))) <> "  cap(s) = ") <> to_string(Process.get(:cap_s))))
    Process.put(:a, List.replace_at(Process.get(:a), 4, -1))
    IO.puts(("a = " <> Main.listStr(Process.get(:a))))
    IO.puts(("s = " <> Main.listStr(Process.get(:s))))
    Process.put(:s, [])
    Enum.each((0..(8 - 1)), fn i ->
      Process.put(:s, (Process.get(:s) ++ [0]))
    end)
    Process.put(:cap_s, 8)
    IO.puts(("s = " <> Main.listStr(Process.get(:s))))
    IO.puts(((("len(s) = " <> to_string(length(Process.get(:s)))) <> "  cap(s) = ") <> to_string(Process.get(:cap_s))))
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
