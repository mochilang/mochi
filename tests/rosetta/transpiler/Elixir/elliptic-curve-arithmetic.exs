# Code generated by Mochi transpiler 2025-08-04 15:54 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def zero() do
    try do
      throw {:return, %{x: 0.0, y: 0.0, inf: true}}
    catch
      {:return, val} -> val
    end
  end
  def isZero(p) do
    try do
      throw {:return, p.inf}
    catch
      {:return, val} -> val
    end
  end
  def neg(p) do
    try do
      throw {:return, %{x: p.x, y: -p.y, inf: p.inf}}
    catch
      {:return, val} -> val
    end
  end
  def dbl(p) do
    try do
      if isZero(p) do
        throw {:return, p}
      end
      l = (3.0 * p.x * p.x) / (2.0 * p.y)
      x = l * l - 2.0 * p.x
      throw {:return, %{x: x, y: l * (p.x - x) - p.y, inf: false}}
    catch
      {:return, val} -> val
    end
  end
  def add(p, q) do
    try do
      if isZero(p) do
        throw {:return, q}
      end
      if isZero(q) do
        throw {:return, p}
      end
      if p.x == q.x do
        if p.y == q.y do
          throw {:return, dbl(p)}
        end
        throw {:return, zero()}
      end
      l = (q.y - p.y) / (q.x - p.x)
      x = l * l - p.x - q.x
      throw {:return, %{x: x, y: l * (p.x - x) - p.y, inf: false}}
    catch
      {:return, val} -> val
    end
  end
  def mul(p, n) do
    try do
      r = zero()
      q = p
      k = n
      while_fun = fn while_fun, k, q, r ->
        if k > 0 do
          {r} = if rem(k, 2) == 1 do
            r = add(r, q)
            {r}
          else
            {r}
          end
          q = dbl(q)
          k = div(k, 2)
          while_fun.(while_fun, k, q, r)
        else
          {k, q, r}
        end
      end
      {k, q, r} = try do
          while_fun.(while_fun, k, q, r)
        catch
          {:break, {k, q, r}} -> {k, q, r}
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def cbrtApprox(x) do
    try do
      guess = x
      i = 0
      while_fun_2 = fn while_fun_2, guess, i ->
        if i < 40 do
          guess = (2.0 * guess + x / (guess * guess)) / 3.0
          i = i + 1
          while_fun_2.(while_fun_2, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun_2.(while_fun_2, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def fromY(y) do
    try do
      throw {:return, %{x: cbrtApprox(y * y - Process.get(:bCoeff)), y: y, inf: false}}
    catch
      {:return, val} -> val
    end
  end
  def show(s, p) do
    try do
      if isZero(p) do
        IO.puts((s <> "Zero"))
      else
        IO.puts((((((s <> "(") <> Kernel.to_string(p.x)) <> ", ") <> Kernel.to_string(p.y)) <> ")"))
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      a = fromY(1.0)
      b = fromY(2.0)
      show("a = ", a)
      show("b = ", b)
      c = add(a, b)
      show("c = a + b = ", c)
      d = neg(c)
      show("d = -c = ", d)
      show("c + d = ", add(c, d))
      show("a + b + d = ", add(a, add(b, d)))
      show("a * 12345 = ", mul(a, 12345))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:bCoeff, 7.0)
  def bench_main() do
    Process.put(:bCoeff, 7.0)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
