# Code generated by Mochi transpiler 2025-07-25 01:17 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  def fields(s) do
    try do
      words = []
      cur = ""
      i = 0
      while_fun = fn while_fun, cur, i, words ->
        if i < String.length(s) do
          ch = String.slice(s, i, i + 1 - (i))
          if ch == " " || ch == "\n" || ch == "\t" do
            if String.length(cur) > 0 do
              words = (words ++ [cur])
              cur = ""
            end
          else
            cur = (cur <> ch)
          end
          i = i + 1
          while_fun.(while_fun, cur, i, words)
        else
          {cur, i, words}
        end
      end
      {cur, i, words} = try do
          while_fun.(while_fun, cur, i, words)
        catch
          :break -> {cur, i, words}
        end

      {words} = if String.length(cur) > 0 do
        words = (words ++ [cur])
        {words}
      else
        {words}
      end
      throw {:return, words}
    catch
      {:return, val} -> val
    end
  end
  def padRight(s, width) do
    try do
      out = s
      i = String.length(s)
      while_fun_2 = fn while_fun_2, i, out ->
        if i < width do
          out = (out <> " ")
          i = i + 1
          while_fun_2.(while_fun_2, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_2.(while_fun_2, i, out)
        catch
          :break -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def join(xs, sep) do
    try do
      res = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i < length(xs) do
          if i > 0 do
            res = (res <> sep)
          end
          res = (res <> Enum.at(xs, i))
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          :break -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def parseIntStr(str) do
    try do
      i = 0
      neg = false
      {i, neg} = if String.length(str) > 0 && String.slice(str, 0, 1 - 0) == "-" do
        neg = true
        i = 1
        {i, neg}
      else
        {i, neg}
      end
      n = 0
      digits = %{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
      while_fun_4 = fn while_fun_4, i, n ->
        if i < String.length(str) do
          n = n * 10 + digits[String.slice(str, i, i + 1 - i)]
          i = i + 1
          while_fun_4.(while_fun_4, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_4.(while_fun_4, i, n)
        catch
          :break -> {i, n}
        end

      {n} = if neg do
        n = -n
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def isDigits(s) do
    try do
      if String.length(s) == 0 do
        throw {:return, false}
      end
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < String.length(s) do
          ch = String.slice(s, i, i + 1 - (i))
          if ch < "0" || ch > "9" do
            throw {:return, false}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          :break -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def readTable(table) do
    try do
      toks = fields(table)
      cmds = []
      mins = []
      i = 0
      while_fun_6 = fn while_fun_6, cmds, i, mins ->
        if i < length(toks) do
          cmd = Enum.at(toks, i)
          minlen = length(cmd)
          i = i + 1
          {minlen} = if i < length(toks) && isDigits(Enum.at(toks, i)) do
            num = parseIntStr(Enum.at(toks, i))
            {minlen} = if num >= 1 && num < length(cmd) do
              minlen = num
              i = i + 1
              {minlen}
            else
              {minlen}
            end
            {minlen}
          else
            {minlen}
          end
          cmds = (cmds ++ [cmd])
          mins = (mins ++ [minlen])
          while_fun_6.(while_fun_6, cmds, i, mins)
        else
          {cmds, i, mins}
        end
      end
      {cmds, i, mins} = try do
          while_fun_6.(while_fun_6, cmds, i, mins)
        catch
          :break -> {cmds, i, mins}
        end

      throw {:return, %{"commands" => cmds, "mins" => mins}}
    catch
      {:return, val} -> val
    end
  end
  def validate(commands, mins, words) do
    try do
      results = []
      wi = 0
      while_fun_7 = fn while_fun_7, results, wi ->
        if wi < length(words) do
          try do
            w = Enum.at(words, wi)
            found = false
            wlen = String.length(w)
            ci = 0
            while_fun_8 = fn while_fun_8, ci, found, results ->
              if ci < length(commands) do
                try do
                  cmd = Enum.at(commands, ci)
                  if Enum.at(mins, ci) != 0 && wlen >= Enum.at(mins, ci) && wlen <= String.length(cmd) do
                    c = String.upcase(cmd)
                    ww = String.upcase(w)
                    if String.slice(c, 0, wlen - (0)) == ww do
                      results = (results ++ [c])
                      found = true
                      throw :break
                    end
                  end
                  ci = ci + 1
                catch
                  :continue -> nil
                end
                while_fun_8.(while_fun_8, ci, found, results)
              else
                {ci, found, results}
              end
            end
            {ci, found, results} = try do
                while_fun_8.(while_fun_8, ci, found, results)
              catch
                :break -> {ci, found, results}
              end

            if !found do
              results = (results ++ ["*error*"])
            end
            wi = wi + 1
          catch
            :continue -> nil
          end
          while_fun_7.(while_fun_7, results, wi)
        else
          {results, wi}
        end
      end
      {results, wi} = try do
          while_fun_7.(while_fun_7, results, wi)
        catch
          :break -> {results, wi}
        end

      throw {:return, results}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      table = (((((((("" <> "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") <> "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") <> "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") <> "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") <> "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") <> "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") <> "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") <> "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ")
      sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
      tbl = readTable(table)
      commands = tbl["commands"]
      mins = tbl["mins"]
      words = fields(sentence)
      results = validate(commands, mins, words)
      out1 = "user words:"
      k = 0
      while_fun_9 = fn while_fun_9, k, out1 ->
        if k < length(words) do
          out1 = (out1 <> " ")
          out1 = if k < length(words) - 1, do: (out1 <> padRight(Enum.at(words, k), length(Enum.at(results, k)))), else: (out1 <> Enum.at(words, k))
          k = k + 1
          while_fun_9.(while_fun_9, k, out1)
        else
          {k, out1}
        end
      end
      {k, out1} = try do
          while_fun_9.(while_fun_9, k, out1)
        catch
          :break -> {k, out1}
        end

      IO.puts(out1)
      IO.puts(("full words: " <> join(results, " ")))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
