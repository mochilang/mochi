# Code generated by Mochi transpiler 2025-07-25 12:29 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  def fields(s) do
    try do
      words = []
      cur = ""
      i = 0
      while_fun = fn while_fun, cur, i, words ->
        if i < String.length(s) do
          ch = String.slice(s, i, i + 1 - (i))
          if ch == " " || ch == "\n" || ch == "\t" do
            if String.length(cur) > 0 do
              words = (words ++ [cur])
              cur = ""
            end
          else
            cur = (cur <> ch)
          end
          i = i + 1
          while_fun.(while_fun, cur, i, words)
        else
          {cur, i, words}
        end
      end
      {cur, i, words} = try do
          while_fun.(while_fun, cur, i, words)
        catch
          :break -> {cur, i, words}
        end

      {words} = if String.length(cur) > 0 do
        words = (words ++ [cur])
        {words}
      else
        {words}
      end
      throw {:return, words}
    catch
      {:return, val} -> val
    end
  end
  def join(xs, sep) do
    try do
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < length(xs) do
          if i > 0 do
            res = (res <> sep)
          end
          res = (res <> Enum.at(xs, i))
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          :break -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def numberName(n) do
    try do
      small = ["no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
      tens = ["ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
      if n < 0 do
        throw {:return, ""}
      end
      if n < 20 do
        throw {:return, Enum.at(small, n)}
      end
      if n < 100 do
        t = Enum.at(tens, (div(n, 10)))
        s = rem(n, 10)
        {t} = if s > 0 do
          t = ((t <> " ") <> Enum.at(small, s))
          {t}
        else
          {t}
        end
        throw {:return, t}
      end
      throw {:return, ""}
    catch
      {:return, val} -> val
    end
  end
  def pluralizeFirst(s, n) do
    try do
      if n == 1 do
        throw {:return, s}
      end
      w = fields(s)
      {w} = if length(w) > 0 do
        w = List.replace_at(w, 0, (Enum.at(w, 0) <> "s"))
        {w}
      else
        {w}
      end
      throw {:return, join(w, " ")}
    catch
      {:return, val} -> val
    end
  end
  def randInt(seed, n) do
    try do
      next = rem((seed * 1664525 + 1013904223), 2147483647)
      throw {:return, rem(next, n)}
    catch
      {:return, val} -> val
    end
  end
  def slur(p, d) do
    try do
      if String.length(p) <= 2 do
        throw {:return, p}
      end
      a = []
      i = 1
      while_fun_3 = fn while_fun_3, a, i ->
        if i < String.length(p) - 1 do
          a = (a ++ [String.slice(p, i, i + 1 - (i))])
          i = i + 1
          while_fun_3.(while_fun_3, a, i)
        else
          {a, i}
        end
      end
      {a, i} = try do
          while_fun_3.(while_fun_3, a, i)
        catch
          :break -> {a, i}
        end

      idx = length(a) - 1
      seed = d
      while_fun_4 = fn while_fun_4, a, idx, seed ->
        if idx >= 1 do
          seed = rem((seed * 1664525 + 1013904223), 2147483647)
          if rem(seed, 100) >= d do
            j = rem(seed, (idx + 1))
            tmp = Enum.at(a, idx)
            a = List.replace_at(a, idx, Enum.at(a, j))
            a = List.replace_at(a, j, tmp)
          end
          idx = idx - 1
          while_fun_4.(while_fun_4, a, idx, seed)
        else
          {a, idx, seed}
        end
      end
      {a, idx, seed} = try do
          while_fun_4.(while_fun_4, a, idx, seed)
        catch
          :break -> {a, idx, seed}
        end

      s = String.slice(p, 0, 1 - (0))
      k = 0
      while_fun_5 = fn while_fun_5, k, s ->
        if k < length(a) do
          s = (s <> Enum.at(a, k))
          k = k + 1
          while_fun_5.(while_fun_5, k, s)
        else
          {k, s}
        end
      end
      {k, s} = try do
          while_fun_5.(while_fun_5, k, s)
        catch
          :break -> {k, s}
        end

      s = (s <> String.slice(p, String.length(p) - 1, String.length(p) - (String.length(p) - 1)))
      w = fields(s)
      throw {:return, join(w, " ")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      i = 99
      while_fun_6 = fn while_fun_6, i ->
        if i > 0 do
          IO.puts(Kernel.to_string(((((slur(numberName(i), i) <> " ") <> pluralizeFirst(slur("bottle of", i), i)) <> " ") <> slur("beer on the wall", i))))
          IO.puts(Kernel.to_string(((((slur(numberName(i), i) <> " ") <> pluralizeFirst(slur("bottle of", i), i)) <> " ") <> slur("beer", i))))
          IO.puts(Kernel.to_string(((((slur("take one", i) <> " ") <> slur("down", i)) <> " ") <> slur("pass it around", i))))
          IO.puts(Kernel.to_string(((((slur(numberName(i - 1), i) <> " ") <> pluralizeFirst(slur("bottle of", i), i - 1)) <> " ") <> slur("beer on the wall", i))))
          i = i - 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          :break -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
