# Code generated by Mochi transpiler 2025-07-25 16:42 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  def beastKind(b) do
    try do
      throw {:return, case b do
  %{kind: k, name: _} -> k
  %{kind: k, name: _} -> k
end}
    catch
      {:return, val} -> val
    end
  end
  def beastName(b) do
    try do
      throw {:return, case b do
  %{kind: _, name: n} -> n
  %{kind: _, name: n} -> n
end}
    catch
      {:return, val} -> val
    end
  end
  def beastCry(b) do
    try do
      throw {:return, case b do
  %{kind: _, name: _} -> "Woof"
  %{kind: _, name: _} -> "Meow"
end}
    catch
      {:return, val} -> val
    end
  end
  def bprint(b) do
    try do
      IO.puts(Kernel.to_string((((((beastName(b) <> ", who's a ") <> beastKind(b)) <> ", cries: \"") <> beastCry(b)) <> "\".")))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      d = %{kind: "labrador", name: "Max"}
      c = %{kind: "siamese", name: "Sammy"}
      bprint(d)
      bprint(c)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
