# Code generated by Mochi transpiler 2025-08-04 22:33 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def qsel(a, k) do
    try do
      arr = a
      while_fun = fn while_fun, arr, k ->
        if _len(arr) > 1 do
          px = rem(_now(), _len(arr))
          pv = Enum.at(arr, px)
          last = _len(arr) - 1
          tmp = Enum.at(arr, px)
          arr = List.replace_at(arr, px, Enum.at(arr, last))
          arr = List.replace_at(arr, last, tmp)
          px = 0
          i = 0
          while_fun_2 = fn while_fun_2, arr, i, px ->
            if i < last do
              v = Enum.at(arr, i)
              {arr, px} = if v < pv do
                t = Enum.at(arr, px)
                arr = List.replace_at(arr, px, Enum.at(arr, i))
                arr = List.replace_at(arr, i, t)
                px = px + 1
                {arr, px}
              else
                {arr, px}
              end
              i = i + 1
              while_fun_2.(while_fun_2, arr, i, px)
            else
              {arr, i, px}
            end
          end
          {arr, i, px} = try do
              while_fun_2.(while_fun_2, arr, i, px)
            catch
              {:break, {arr, i, px}} -> {arr, i, px}
            end

          arr = List.replace_at(arr, px, pv)
          if px == k do
            throw {:return, pv}
          end
          {arr, k} = if k < px do
            arr = _slice(arr, 0, px - 0)
            {arr, k}
          else
            arr = _slice(arr, (px + 1), _len(arr) - (px + 1))
            k = k - (px + 1)
            {arr, k}
          end
          while_fun.(while_fun, arr, k)
        else
          {arr, k}
        end
      end
      {arr, k} = try do
          while_fun.(while_fun, arr, k)
        catch
          {:break, {arr, k}} -> {arr, k}
        end

      throw {:return, Enum.at(arr, 0)}
    catch
      {:return, val} -> val
    end
  end
  def fivenum(a) do
    try do
      last = _len(a) - 1
      m = div(last, 2)
      n5 = []
      n5 = (n5 ++ [qsel(_slice(a, 0, m - 0), 0)])
      n5 = (n5 ++ [qsel(_slice(a, 0, m - 0), div(_len(a), 4))])
      n5 = (n5 ++ [qsel(a, m)])
      arr2 = _slice(a, m, _len(a) - m)
      q3 = last - m - div(_len(a), 4)
      n5 = (n5 ++ [qsel(arr2, q3)])
      arr2 = _slice(arr2, q3, _len(arr2) - q3)
      n5 = (n5 ++ [qsel(arr2, _len(arr2) - 1)])
      throw {:return, n5}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:x1, [36.0, 40.0, 7.0, 39.0, 41.0, 15.0])
  Process.put(:x2, [15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:x3, [0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578])
    IO.puts(Kernel.inspect(fivenum(Process.get(:x1))))
    IO.puts(Kernel.inspect(fivenum(Process.get(:x2))))
    IO.puts(Kernel.inspect(fivenum(Process.get(:x3))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
