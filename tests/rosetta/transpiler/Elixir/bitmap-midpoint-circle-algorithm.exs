# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def initGrid(size) do
    try do
      g = []
      y = 0
      while_fun = fn while_fun, y ->
        if y < size do
          row = []
          x = 0
          while_fun_2 = fn while_fun_2, row, x ->
            if x < size do
              row = (row ++ [" "])
              x = x + 1
              while_fun_2.(while_fun_2, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_2.(while_fun_2, row, x)
            catch
              :break -> {row, x}
            end

          g = (g ++ [row])
          y = y + 1
          while_fun.(while_fun, y)
        else
          y
        end
      end
      y = try do
          while_fun.(while_fun, y)
        catch
          :break -> y
        end

      throw {:return, g}
    catch
      {:return, val} -> val
    end
  end
  def set(g, x, y) do
    try do
      if x >= 0 && x < _len(Enum.at(g, 0)) && y >= 0 && y < _len(g) do
        g = List.replace_at(g, y, List.replace_at(Enum.at(g, y), x, "#"))
      end
    catch
      {:return, val} -> val
    end
  end
  def circle(r) do
    try do
      size = r * 2 + 1
      g = Main.initGrid(size)
      x = r
      y = 0
      err = 1 - r
      while_fun_3 = fn while_fun_3, err, x, y ->
        if y <= x do
          Main.set(g, r + x, r + y)
          Main.set(g, r + y, r + x)
          Main.set(g, r - x, r + y)
          Main.set(g, r - y, r + x)
          Main.set(g, r - x, r - y)
          Main.set(g, r - y, r - x)
          Main.set(g, r + x, r - y)
          Main.set(g, r + y, r - x)
          y = y + 1
          {err, x} = if err < 0 do
            err = err + 2 * y + 1
            {err, x}
          else
            x = x - 1
            err = err + 2 * (y - x) + 1
            {err, x}
          end
          while_fun_3.(while_fun_3, err, x, y)
        else
          {err, x, y}
        end
      end
      {err, x, y} = try do
          while_fun_3.(while_fun_3, err, x, y)
        catch
          :break -> {err, x, y}
        end

      throw {:return, g}
    catch
      {:return, val} -> val
    end
  end
  def trimRight(row) do
    try do
      end_ = _len(row)
      while_fun_4 = fn while_fun_4, end ->
        if end_ > 0 && Enum.at(row, end_ - 1) == " " do
          end_ = end_ - 1
          while_fun_4.(while_fun_4, end)
        else
          end
        end
      end
      end = try do
          while_fun_4.(while_fun_4, end)
        catch
          :break -> end
        end

      s = ""
      i = 0
      while_fun_5 = fn while_fun_5, i, s ->
        if i < end_ do
          s = (s <> Enum.at(row, i))
          i = i + 1
          while_fun_5.(while_fun_5, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_5.(while_fun_5, i, s)
        catch
          :break -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    mem_start = _mem()
    t_start = _now()
    Process.put(:g, Main.circle(10))
    Enum.each(Process.get(:g), fn row ->
      IO.puts(Kernel.inspect(Main.trimRight(row)))
    end)
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
