# Code generated by Mochi transpiler 2025-07-25 19:29 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.at(base, start)
      true -> Enum.slice(base, start, len)
    end
  end
  def shuffle(xs) do
    try do
      arr = xs
      i = 99
      while_fun_3 = fn while_fun_3, arr, i ->
        if i > 0 do
          j = rem(_now(), (i + 1))
          tmp = Enum.at(arr, i)
          arr = List.replace_at(arr, i, Enum.at(arr, j))
          arr = List.replace_at(arr, j, tmp)
          i = i - 1
          while_fun_3.(while_fun_3, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun_3.(while_fun_3, arr, i)
        catch
          :break -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def doTrials(trials, np, strategy) do
    try do
      pardoned = 0
      t = 0
      while_fun_4 = fn while_fun_4, pardoned, t ->
        if t < trials do
          try do
            drawers = []
            i = 0
            while_fun_5 = fn while_fun_5, drawers, i ->
              if i < 100 do
                drawers = (drawers ++ [i])
                i = i + 1
                while_fun_5.(while_fun_5, drawers, i)
              else
                {drawers, i}
              end
            end
            {drawers, i} = try do
                while_fun_5.(while_fun_5, drawers, i)
              catch
                :break -> {drawers, i}
              end

            drawers = shuffle(drawers)
            p = 0
            success = true
            while_fun_6 = fn while_fun_6, p, success ->
              if p < np do
                try do
                  found = false
                  {found} = if strategy == "optimal" do
                    prev = p
                    d = 0
                    while_fun_7 = fn while_fun_7, d, found, prev ->
                      if d < 50 do
                        try do
                          this = Enum.at(drawers, prev)
                          if this == p do
                            found = true
                            throw :break
                          end
                          prev = this
                          d = d + 1
                        catch
                          :continue -> nil
                        end
                        while_fun_7.(while_fun_7, d, found, prev)
                      else
                        {d, found, prev}
                      end
                    end
                    {d, found, prev} = try do
                        while_fun_7.(while_fun_7, d, found, prev)
                      catch
                        :break -> {d, found, prev}
                      end

                    {found}
                  else
                    opened = []
                    k = 0
                    while_fun_8 = fn while_fun_8, k, opened ->
                      if k < 100 do
                        opened = (opened ++ [false])
                        k = k + 1
                        while_fun_8.(while_fun_8, k, opened)
                      else
                        {k, opened}
                      end
                    end
                    {k, opened} = try do
                        while_fun_8.(while_fun_8, k, opened)
                      catch
                        :break -> {k, opened}
                      end

                    d = 0
                    while_fun_9 = fn while_fun_9, d, found, opened ->
                      if d < 50 do
                        try do
                          n = rem(_now(), 100)
                          while_fun_10 = fn while_fun_10, n ->
                            if Enum.at(opened, n) do
                              n = rem(_now(), 100)
                              while_fun_10.(while_fun_10, n)
                            else
                              n
                            end
                          end
                          n = try do
                              while_fun_10.(while_fun_10, n)
                            catch
                              :break -> n
                            end

                          opened = List.replace_at(opened, n, true)
                          if Enum.at(drawers, n) == p do
                            found = true
                            throw :break
                          end
                          d = d + 1
                        catch
                          :continue -> nil
                        end
                        while_fun_9.(while_fun_9, d, found, opened)
                      else
                        {d, found, opened}
                      end
                    end
                    {d, found, opened} = try do
                        while_fun_9.(while_fun_9, d, found, opened)
                      catch
                        :break -> {d, found, opened}
                      end

                    {found}
                  end
                  if !found do
                    success = false
                    throw :break
                  end
                  p = p + 1
                catch
                  :continue -> nil
                end
                while_fun_6.(while_fun_6, p, success)
              else
                {p, success}
              end
            end
            {p, success} = try do
                while_fun_6.(while_fun_6, p, success)
              catch
                :break -> {p, success}
              end

            if success do
              pardoned = pardoned + 1
            end
            t = t + 1
          catch
            :continue -> nil
          end
          while_fun_4.(while_fun_4, pardoned, t)
        else
          {pardoned, t}
        end
      end
      {pardoned, t} = try do
          while_fun_4.(while_fun_4, pardoned, t)
        catch
          :break -> {pardoned, t}
        end

      rf = (pardoned) / (trials) * 100.0
      IO.puts((((((("  strategy = " <> strategy) <> "  pardoned = ") <> to_string(pardoned)) <> " relative frequency = ") <> to_string(rf)) <> "%"))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      trials = 1000
      Enum.each([10, 100], fn np ->
        IO.puts((((("Results from " <> to_string(trials)) <> " trials with ") <> to_string(np)) <> " prisoners:\n"))
        Enum.each(["random", "optimal"], fn strat ->
          doTrials(trials, np, strat)
        end)
      end)
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
