# Code generated by Mochi transpiler 2025-07-31 00:20 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def factorial(n) do
    try do
      result = 1
      i = 2
      while_fun = fn while_fun, i, result ->
        if i <= n do
          result = result * i
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def isPrime(n) do
    try do
      if n < 2 do
        throw {:return, false}
      end
      if rem(n, 2) == 0 do
        throw {:return, n == 2}
      end
      d = 3
      while_fun_2 = fn while_fun_2, d ->
        if d * d <= n do
          if rem(n, d) == 0 do
            throw {:return, false}
          end
          d = d + 2
          while_fun_2.(while_fun_2, d)
        else
          d
        end
      end
      d = try do
          while_fun_2.(while_fun_2, d)
        catch
          {:break, d} -> d
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def padLeft(s, w) do
    try do
      out = s
      while_fun_3 = fn while_fun_3, out ->
        if _len(out) < w do
          out = (" " <> out)
          while_fun_3.(while_fun_3, out)
        else
          out
        end
      end
      out = try do
          while_fun_3.(while_fun_3, out)
        catch
          {:break, out} -> out
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      n = 0
      count = 0
      while_fun_4 = fn while_fun_4, count, n ->
        if count < 10 do
          n = n + 1
          f = Main.factorial(n)
          {count} = if Main.isPrime(f - 1) do
            count = count + 1
            IO.puts(Kernel.inspect(((((Main.padLeft(Kernel.inspect(count), 2) <> ": ") <> Main.padLeft(Kernel.to_string(n), 2)) <> "! - 1 = ") <> Kernel.to_string(f - 1))))
            {count}
          else
            {count}
          end
          {count} = if count < 10 && Main.isPrime(f + 1) do
            count = count + 1
            IO.puts(Kernel.inspect(((((Main.padLeft(Kernel.inspect(count), 2) <> ": ") <> Main.padLeft(Kernel.to_string(n), 2)) <> "! + 1 = ") <> Kernel.to_string(f + 1))))
            {count}
          else
            {count}
          end
          while_fun_4.(while_fun_4, count, n)
        else
          {count, n}
        end
      end
      {count, n} = try do
          while_fun_4.(while_fun_4, count, n)
        catch
          {:break, {count, n}} -> {count, n}
        end

    catch
      {:return, val} -> val
    end
  end
end
Main.main()
