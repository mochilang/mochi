# Code generated by Mochi transpiler 2025-08-04 21:17 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def printExpI(b, p) do
    try do
      if p < 0 do
        IO.puts((((Kernel.to_string(b) <> "^") <> Kernel.to_string(p)) <> ": negative power not allowed"))
        throw {:return, nil}
      end
      r = 1
      i = 1
      while_fun = fn while_fun, i, r ->
        if i <= p do
          r = r * b
          i = i + 1
          while_fun.(while_fun, i, r)
        else
          {i, r}
        end
      end
      {i, r} = try do
          while_fun.(while_fun, i, r)
        catch
          {:break, {i, r}} -> {i, r}
        end

      IO.puts(((((Kernel.to_string(b) <> "^") <> Kernel.to_string(p)) <> ": ") <> Kernel.to_string(r)))
    catch
      {:return, val} -> val
    end
  end
  def expF(b, p) do
    try do
      neg = false
      {neg, p} = if p < 0 do
        neg = true
        p = -p
        {neg, p}
      else
        {neg, p}
      end
      r = 1.0
      pow = b
      while_fun_2 = fn while_fun_2, p, pow, r ->
        if p > 0 do
          {r} = if rem(p, 2) == 1 do
            r = r * pow
            {r}
          else
            {r}
          end
          pow = pow * pow
          p = div(p, 2)
          while_fun_2.(while_fun_2, p, pow, r)
        else
          {p, pow, r}
        end
      end
      {p, pow, r} = try do
          while_fun_2.(while_fun_2, p, pow, r)
        catch
          {:break, {p, pow, r}} -> {p, pow, r}
        end

      {r} = if neg do
        r = 1.0 / r
        {r}
      else
        {r}
      end
      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def printExpF(b, p) do
    try do
      if b == 0.0 && p < 0 do
        IO.puts((((Kernel.to_string(b) <> "^") <> Kernel.to_string(p)) <> ": +Inf"))
        throw {:return, nil}
      end
      IO.puts(((((Kernel.to_string(b) <> "^") <> Kernel.to_string(p)) <> ": ") <> Kernel.inspect(expF(b, p))))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts("expI tests")
    printExpI(2, 10)
    printExpI(2, -10)
    printExpI(-2, 10)
    printExpI(-2, 11)
    printExpI(11, 0)
    IO.puts("overflow undetected")
    printExpI(10, 10)
    IO.puts("\nexpF tests:")
    printExpF(2.0, 10)
    printExpF(2.0, -10)
    printExpF(-2.0, 10)
    printExpF(-2.0, 11)
    printExpF(11.0, 0)
    IO.puts("disallowed in expI, allowed here")
    printExpF(0.0, -1)
    IO.puts("other interesting cases for 32 bit float type")
    printExpF(10.0, 39)
    printExpF(10.0, -39)
    printExpF(-10.0, 39)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
