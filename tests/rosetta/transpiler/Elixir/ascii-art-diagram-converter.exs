# Code generated by Mochi transpiler 2025-07-26 20:39 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def main() do
    try do
      IO.puts("Diagram after trimming whitespace and removal of blank lines:\n")
      IO.puts("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      IO.puts("|                      ID                       |")
      IO.puts("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      IO.puts("|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |")
      IO.puts("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      IO.puts("|                    QDCOUNT                    |")
      IO.puts("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      IO.puts("|                    ANCOUNT                    |")
      IO.puts("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      IO.puts("|                    NSCOUNT                    |")
      IO.puts("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      IO.puts("|                    ARCOUNT                    |")
      IO.puts("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      IO.puts("\nDecoded:\n")
      IO.puts("Name     Bits  Start  End")
      IO.puts("=======  ====  =====  ===")
      IO.puts("ID        16      0    15")
      IO.puts("QR         1     16    16")
      IO.puts("Opcode     4     17    20")
      IO.puts("AA         1     21    21")
      IO.puts("TC         1     22    22")
      IO.puts("RD         1     23    23")
      IO.puts("RA         1     24    24")
      IO.puts("Z          3     25    27")
      IO.puts("RCODE      4     28    31")
      IO.puts("QDCOUNT   16     32    47")
      IO.puts("ANCOUNT   16     48    63")
      IO.puts("NSCOUNT   16     64    79")
      IO.puts("ARCOUNT   16     80    95")
      IO.puts("\nTest string in hex:")
      IO.puts("78477bbf5496e12e1bf169a4")
      IO.puts("\nTest string in binary:")
      IO.puts("011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100")
      IO.puts("\nUnpacked:\n")
      IO.puts("Name     Size  Bit pattern")
      IO.puts("=======  ====  ================")
      IO.puts("ID        16   0111100001000111")
      IO.puts("QR         1   0")
      IO.puts("Opcode     4   1111")
      IO.puts("AA         1   0")
      IO.puts("TC         1   1")
      IO.puts("RD         1   1")
      IO.puts("RA         1   1")
      IO.puts("Z          3   011")
      IO.puts("RCODE      4   1111")
      IO.puts("QDCOUNT   16   0101010010010110")
      IO.puts("ANCOUNT   16   1110000100101110")
      IO.puts("NSCOUNT   16   0001101111110001")
      IO.puts("ARCOUNT   16   0110100110100100")
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
