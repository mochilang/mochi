# Code generated by Mochi transpiler 2025-07-31 00:20 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def gcd(a, b) do
    try do
      x = a
      y = b
      while_fun = fn while_fun, x, y ->
        if y != Process.get(:zero) do
          t = rem(x, y)
          x = y
          y = t
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def absBig(x) do
    try do
      throw {:return, ((if x < Process.get(:zero), do: Process.get(:zero) - x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def pollardRho(n, c) do
    try do
      g = fn x, y ->
  x2 = x * x
  x2 = x2 + c
  throw {:return, rem(x2, y)}
end
      x = 2
      y = 2
      z = 1
      d = 0
      count = 0
      while_fun_2 = fn while_fun_2, count, d, x, y, z ->
        if true do
          x = g.(x, n)
          y = g.(g.(y, n), n)
          d = Main.absBig(x - y)
          d = rem(d, n)
          z = z * d
          count = count + 1
          {count, d, z} = if count == 100 do
            d = Main.gcd(z, n)
            if d != Process.get(:one) do
              throw {:break, {count, d, x, y, z}}
            end
            z = Process.get(:one)
            count = 0
            {count, d, z}
          else
            {count, d, z}
          end
          while_fun_2.(while_fun_2, count, d, x, y, z)
        else
          {count, d, x, y, z}
        end
      end
      {count, d, x, y, z} = try do
          while_fun_2.(while_fun_2, count, d, x, y, z)
        catch
          {:break, {count, d, x, y, z}} -> {count, d, x, y, z}
        end

      if d == n do
        throw {:return, Process.get(:zero)}
      end
      throw {:return, d}
    catch
      {:return, val} -> val
    end
  end
  def smallestPrimeFactorWheel(n, max) do
    try do
      if rem(n, Process.get(:two)) == Process.get(:zero) do
        throw {:return, Process.get(:two)}
      end
      if rem(n, Process.get(:three)) == Process.get(:zero) do
        throw {:return, Process.get(:three)}
      end
      if rem(n, Process.get(:five)) == Process.get(:zero) do
        throw {:return, Process.get(:five)}
      end
      k = 7
      inc = [Process.get(:four), Process.get(:two), Process.get(:four), Process.get(:two), Process.get(:four), Process.get(:six), Process.get(:two), Process.get(:six)]
      i = 0
      while_fun_3 = fn while_fun_3, i, k ->
        if k * k <= n do
          if rem(n, k) == Process.get(:zero) do
            throw {:return, k}
          end
          k = k + Enum.at(inc, i)
          if k > max do
            throw {:break, {i, k}}
          end
          i = rem((i + 1), 8)
          while_fun_3.(while_fun_3, i, k)
        else
          {i, k}
        end
      end
      {i, k} = try do
          while_fun_3.(while_fun_3, i, k)
        catch
          {:break, {i, k}} -> {i, k}
        end

      throw {:return, Process.get(:zero)}
    catch
      {:return, val} -> val
    end
  end
  def smallestPrimeFactor(n) do
    try do
      s = Main.smallestPrimeFactorWheel(n, Process.get(:k100))
      if s != Process.get(:zero) do
        throw {:return, s}
      end
      c = 1
      while_fun_4 = fn while_fun_4, c ->
        if true do
          d = Main.pollardRho(n, c)
          {c} = if d == Process.get(:zero) do
            if c == Process.get(:ten) do
              throw {:return, n}
            end
            c = c + Process.get(:one)
            {c}
          else
            factor = Main.smallestPrimeFactorWheel(d, d)
            s2 = Main.smallestPrimeFactorWheel(n / d, factor)
            if s2 != Process.get(:zero) do
              if s2 < factor do
                throw {:return, s2}
              else
                throw {:return, factor}
              end
            end
            throw {:return, factor}
            {c}
          end
          while_fun_4.(while_fun_4, c)
        else
          c
        end
      end
      c = try do
          while_fun_4.(while_fun_4, c)
        catch
          {:break, c} -> c
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      k = 19
      IO.puts((("First " <> Kernel.to_string(k)) <> " terms of the Euclidâ€“Mullin sequence:"))
      IO.puts(2)
      prod = 2
      count = 1
      while_fun_5 = fn while_fun_5, count, prod ->
        if count < k do
          z = prod + Process.get(:one)
          t = Main.smallestPrimeFactor(z)
          IO.puts(Kernel.inspect(t))
          prod = prod * t
          count = count + 1
          while_fun_5.(while_fun_5, count, prod)
        else
          {count, prod}
        end
      end
      {count, prod} = try do
          while_fun_5.(while_fun_5, count, prod)
        catch
          {:break, {count, prod}} -> {count, prod}
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:zero, 0)
  Process.put(:one, 1)
  Process.put(:two, 2)
  Process.put(:three, 3)
  Process.put(:four, 4)
  Process.put(:five, 5)
  Process.put(:six, 6)
  Process.put(:ten, 10)
  Process.put(:k100, 100000)
end
Main.main()
