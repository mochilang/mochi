# Code generated by Mochi transpiler 2025-07-27 12:23 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  defp _len(x) do
    (if is_binary(x), do: String.length(x), else: length(x))
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def bsearch(arr, x) do
    try do
      low = 0
      high = _len(arr) - 1
      while_fun = fn while_fun, high, low ->
        if low <= high do
          mid = div((low + high), 2)
          {high, low} = if Enum.at(arr, mid) > x do
            high = mid - 1
            {high, low}
          else
            {low} = if Enum.at(arr, mid) < x do
              low = mid + 1
              {low}
            else
              throw {:return, mid}
              {low}
            end
            {high, low}
          end
          while_fun.(while_fun, high, low)
        else
          {high, low}
        end
      end
      {high, low} = try do
          while_fun.(while_fun, high, low)
        catch
          :break -> {high, low}
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def bsearchRec(arr, x, low, high) do
    try do
      if high < low do
        throw {:return, -1}
      end
      mid = div((low + high), 2)
      if Enum.at(arr, mid) > x do
        throw {:return, Main.bsearchRec(arr, x, low, mid - 1)}
      else
        if Enum.at(arr, mid) < x do
          throw {:return, Main.bsearchRec(arr, x, mid + 1, high)}
        end
      end
      throw {:return, mid}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      nums = [-31, 0, 1, 2, 2, 4, 65, 83, 99, 782]
      x = 2
      idx = Main.bsearch(nums, x)
      if idx >= 0 do
        IO.puts((((Kernel.to_string(x) <> " is at index ") <> Kernel.to_string(idx)) <> "."))
      else
        IO.puts((Kernel.to_string(x) <> " is not found."))
      end
      x = 5
      idx = Main.bsearchRec(nums, x, 0, _len(nums) - 1)
      if idx >= 0 do
        IO.puts((((Kernel.to_string(x) <> " is at index ") <> Kernel.to_string(idx)) <> "."))
      else
        IO.puts((Kernel.to_string(x) <> " is not found."))
      end
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
