# Code generated by Mochi transpiler 2025-08-04 21:47 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def bernoulli(n) do
    try do
      a = []
      m = 0
      while_fun = fn while_fun, a, m ->
        if m <= n do
          a = (a ++ [_bigrat_div(_bigrat(1), (_bigrat((m + 1))))])
          j = m
          while_fun_2 = fn while_fun_2, a, j ->
            if j >= 1 do
              a = List.replace_at(a, j - 1, _bigrat_mul((_bigrat(j)), (_bigrat_sub(Enum.at(a, j - 1), Enum.at(a, j)))))
              j = j - 1
              while_fun_2.(while_fun_2, a, j)
            else
              {a, j}
            end
          end
          {a, j} = try do
              while_fun_2.(while_fun_2, a, j)
            catch
              {:break, {a, j}} -> {a, j}
            end

          m = m + 1
          while_fun.(while_fun, a, m)
        else
          {a, m}
        end
      end
      {a, m} = try do
          while_fun.(while_fun, a, m)
        catch
          {:break, {a, m}} -> {a, m}
        end

      throw {:return, Enum.at(a, 0)}
    catch
      {:return, val} -> val
    end
  end
  def binom(n, k) do
    try do
      if k < 0 || k > n do
        throw {:return, 0}
      end
      kk = k
      {kk} = if kk > n - kk do
        kk = n - kk
        {kk}
      else
        {kk}
      end
      res = 1
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i < kk do
          res = res * ((n - i))
          i = i + 1
          res = div(res, (i))
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def coeff(p, j) do
    try do
      base = _bigrat_div(_bigrat(1), (_bigrat((p + 1))))
      c = base
      {c} = if rem(j, 2) == 1 do
        c = _bigrat_neg(c)
        {c}
      else
        {c}
      end
      c = _bigrat_mul(c, (_bigrat(binom(p + 1, j))))
      c = _bigrat_mul(c, bernoulli(j))
      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      p = 0
      while_fun_4 = fn while_fun_4, p ->
        if p < 10 do
          line = (Kernel.to_string(p) <> " :")
          j = 0
          while_fun_5 = fn while_fun_5, j, line ->
            if j <= p do
              c = coeff(p, j)
              {line} = if Kernel.inspect(c) != "0/1" do
                line = (((line <> " ") <> Kernel.inspect(c)) <> "Ã—n")
                exp = p + 1 - j
                {line} = if exp > 1 do
                  line = ((line <> "^") <> Kernel.to_string(exp))
                  {line}
                else
                  {line}
                end
                {line}
              else
                {line}
              end
              j = j + 1
              while_fun_5.(while_fun_5, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_5.(while_fun_5, j, line)
            catch
              {:break, {j, line}} -> {j, line}
            end

          IO.puts(line)
          p = p + 1
          while_fun_4.(while_fun_4, p)
        else
          p
        end
      end
      p = try do
          while_fun_4.(while_fun_4, p)
        catch
          {:break, {p}} -> p
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
