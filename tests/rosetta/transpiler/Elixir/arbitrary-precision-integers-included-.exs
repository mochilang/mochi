# Code generated by Mochi transpiler 2025-07-26 19:01 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.at(base, start)
      true -> Enum.slice(base, start, len)
    end
  end
  def pow_int(base, exp) do
    try do
      result = 1
      b = base
      e = exp
      while_fun = fn while_fun, b, e, result ->
        if e > 0 do
          if rem(e, 2) == 1 do
            result = result * b
          end
          b = b * b
          e = trunc((div(e, 2)))
          while_fun.(while_fun, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun.(while_fun, b, e, result)
        catch
          :break -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def pow_big(base, exp) do
    try do
      result = 1
      b = base
      e = exp
      while_fun_2 = fn while_fun_2, b, e, result ->
        if e > 0 do
          if rem(e, 2) == 1 do
            result = result * b
          end
          b = b * b
          e = trunc((div(e, 2)))
          while_fun_2.(while_fun_2, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun_2.(while_fun_2, b, e, result)
        catch
          :break -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:base, 5)
  def main() do
    mem_start = _mem()
    t_start = _now()
    Process.put(:e1, pow_int(3, 2))
    Process.put(:e2, pow_int(4, Process.get(:e1)))
    Process.put(:x, pow_big(Process.get(:base), Process.get(:e2)))
    Process.put(:s, to_string(Process.get(:x)))
    IO.puts("5^(4^(3^2)) has #{Kernel.to_string(String.length(Process.get(:s)))} digits: #{Kernel.to_string(String.slice(Process.get(:s), 0, 20 - (0)))} ... #{Kernel.to_string(String.slice(Process.get(:s), String.length(Process.get(:s)) - 20, String.length(Process.get(:s)) - (String.length(Process.get(:s)) - 20)))}")
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
