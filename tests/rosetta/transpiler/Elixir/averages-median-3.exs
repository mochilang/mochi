# Code generated by Mochi transpiler 2025-07-26 23:50 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def qsel(a, k) do
    try do
      arr = a
      while_fun = fn while_fun, arr, k ->
        if length(arr) > 1 do
          px = rem(_now(), length(arr))
          pv = Enum.at(arr, px)
          last = length(arr) - 1
          tmp = Enum.at(arr, px)
          arr = List.replace_at(arr, px, Enum.at(arr, last))
          arr = List.replace_at(arr, last, tmp)
          px = 0
          i = 0
          while_fun_2 = fn while_fun_2, arr, i, px ->
            if i < last do
              v = Enum.at(arr, i)
              if v < pv do
                tmp2 = Enum.at(arr, px)
                arr = List.replace_at(arr, px, Enum.at(arr, i))
                arr = List.replace_at(arr, i, tmp2)
                px = px + 1
              end
              i = i + 1
              while_fun_2.(while_fun_2, arr, i, px)
            else
              {arr, i, px}
            end
          end
          {arr, i, px} = try do
              while_fun_2.(while_fun_2, arr, i, px)
            catch
              :break -> {arr, i, px}
            end

          if px == k do
            throw {:return, pv}
          end
          if k < px do
            arr = _slice(arr, 0, px - 0)
          else
            tmp2 = Enum.at(arr, px)
            arr = List.replace_at(arr, px, pv)
            arr = List.replace_at(arr, last, tmp2)
            arr = _slice(arr, (px + 1), length(arr) - (px + 1))
            k = k - (px + 1)
          end
          while_fun.(while_fun, arr, k)
        else
          {arr, k}
        end
      end
      {arr, k} = try do
          while_fun.(while_fun, arr, k)
        catch
          :break -> {arr, k}
        end

      throw {:return, Enum.at(arr, 0)}
    catch
      {:return, val} -> val
    end
  end
  def median(list) do
    try do
      arr = list
      half = trunc((div(length(arr), 2)))
      med = Main.qsel(arr, half)
      if rem(length(arr), 2) == 0 do
        throw {:return, (med + Main.qsel(arr, half - 1)) / 2.0}
      end
      throw {:return, med}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    mem_start = _mem()
    t_start = _now()
    IO.puts(Kernel.inspect(Main.median([3.0, 1.0, 4.0, 1.0])))
    IO.puts(Kernel.inspect(Main.median([3.0, 1.0, 4.0, 1.0, 5.0])))
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
