# Code generated by Mochi transpiler 2025-08-03 22:49 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.monotonic_time(:microsecond)
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def mod(n, m) do
    try do
      throw {:return, rem(((rem(n, m)) + m), m)}
    catch
      {:return, val} -> val
    end
  end
  def isPrime(n) do
    try do
      if n < 2 do
        throw {:return, false}
      end
      if rem(n, 2) == 0 do
        throw {:return, n == 2}
      end
      if rem(n, 3) == 0 do
        throw {:return, n == 3}
      end
      d = 5
      while_fun = fn while_fun, d ->
        if d * d <= n do
          if rem(n, d) == 0 do
            throw {:return, false}
          end
          d = d + 2
          if rem(n, d) == 0 do
            throw {:return, false}
          end
          d = d + 4
          while_fun.(while_fun, d)
        else
          d
        end
      end
      d = try do
          while_fun.(while_fun, d)
        catch
          {:break, d} -> d
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def pad(n, width) do
    try do
      s = Kernel.to_string(n)
      while_fun_2 = fn while_fun_2, s ->
        if _len(s) < width do
          s = (" " <> s)
          while_fun_2.(while_fun_2, s)
        else
          s
        end
      end
      s = try do
          while_fun_2.(while_fun_2, s)
        catch
          {:break, s} -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def carmichael(p1) do
    try do
      try do
        for h3 <- (2..(p1 - 1)) do
          try do
            try do
              for d <- (1..((h3 + p1) - 1)) do
                try do
                  if rem(((h3 + p1) * (p1 - 1)), d) == 0 && Main.mod(-p1 * p1, h3) == rem(d, h3) do
                    p2 = 1 + (div((p1 - 1) * (h3 + p1), d))
                    if !Main.isPrime(p2) do
                      throw :continue
                    end
                    p3 = 1 + (div(p1 * p2, h3))
                    if !Main.isPrime(p3) do
                      throw :continue
                    end
                    if rem((p2 * p3), (p1 - 1)) != 1 do
                      throw :continue
                    end
                    c = p1 * p2 * p3
                    IO.puts(Kernel.inspect(((((((Main.pad(p1, 2) <> "   ") <> Main.pad(p2, 4)) <> "   ") <> Main.pad(p3, 5)) <> "     ") <> Kernel.to_string(c))))
                  end
                catch
                  :continue -> nil
                end
              end
            catch
              :break -> nil
            end
          catch
            :continue -> nil
          end
        end
      catch
        :break -> nil
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts("The following are Carmichael munbers for p1 <= 61:\n")
    IO.puts("p1     p2      p3     product")
    IO.puts("==     ==      ==     =======")
    Enum.each((2..(62 - 1)), fn p1 ->
      if Main.isPrime(p1) do
        Main.carmichael(p1)
      end
    end)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
