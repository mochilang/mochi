# Code generated by Mochi transpiler 2025-07-31 00:20 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def pad8(n) do
    try do
      s = Kernel.to_string(n)
      while_fun = fn while_fun, s ->
        if _len(s) < 8 do
          s = (" " <> s)
          while_fun.(while_fun, s)
        else
          s
        end
      end
      s = try do
          while_fun.(while_fun, s)
        catch
          {:break, s} -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:maxNumber, 100000000)
  Process.put(:dsum, [])
  Process.put(:dcount, [])
  Process.put(:i, 0)
  def main() do
    while_fun_2 = fn while_fun_2 ->
      if Process.get(:i) <= Process.get(:maxNumber) do
        Process.put(:dsum, (Process.get(:dsum) ++ [1]))
        Process.put(:dcount, (Process.get(:dcount) ++ [1]))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_2.(while_fun_2)
      else
        nil
      end
    end
    try do
      while_fun_2.(while_fun_2)
    catch
      :break -> nil
    end

    Process.put(:i, 2)
    while_fun_3 = fn while_fun_3 ->
      if Process.get(:i) <= Process.get(:maxNumber) do
        j = Process.get(:i) + Process.get(:i)
        while_fun_4 = fn while_fun_4, j ->
          if j <= Process.get(:maxNumber) do
            if Enum.at(Process.get(:dsum), j) == j do
              IO.puts(Kernel.inspect((((Main.pad8(j) <> " equals the sum of its first ") <> Kernel.to_string(Enum.at(Process.get(:dcount), j))) <> " divisors")))
            end
            Process.put(:dsum, List.replace_at(Process.get(:dsum), j, Enum.at(Process.get(:dsum), j) + Process.get(:i)))
            Process.put(:dcount, List.replace_at(Process.get(:dcount), j, Enum.at(Process.get(:dcount), j) + 1))
            j = j + Process.get(:i)
            while_fun_4.(while_fun_4, j)
          else
            j
          end
        end
        j = try do
            while_fun_4.(while_fun_4, j)
          catch
            {:break, j} -> j
          end

        Process.put(:i, Process.get(:i) + 1)
        while_fun_3.(while_fun_3)
      else
        nil
      end
    end
    try do
      while_fun_3.(while_fun_3)
    catch
      :break -> nil
    end

  end
end
Main.main()
