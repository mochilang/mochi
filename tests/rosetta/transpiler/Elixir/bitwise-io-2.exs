# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def pow2(n) do
    try do
      v = 1
      i = 0
      while_fun = fn while_fun, i, v ->
        if i < n do
          v = v * 2
          i = i + 1
          while_fun.(while_fun, i, v)
        else
          {i, v}
        end
      end
      {i, v} = try do
          while_fun.(while_fun, i, v)
        catch
          :break -> {i, v}
        end

      throw {:return, v}
    catch
      {:return, val} -> val
    end
  end
  def lshift(x, n) do
    try do
      throw {:return, x * Main.pow2(n)}
    catch
      {:return, val} -> val
    end
  end
  def rshift(x, n) do
    try do
      throw {:return, div(x, Main.pow2(n))}
    catch
      {:return, val} -> val
    end
  end
  def newwriter(order) do
    try do
      throw {:return, %{order: order, bits: 0, nbits: 0, data: []}}
    catch
      {:return, val} -> val
    end
  end
  def writeBitsLSB(w, c, width) do
    try do
      w = Map.put(w, :bits, w.bits + Main.lshift(c, w.nbits))
      w = Map.put(w, :nbits, w.nbits + width)
      while_fun_2 = fn while_fun_2, w ->
        if w.nbits >= 8 do
          b = rem(w.bits, 256)
          w = Map.put(w, :data, (w.data ++ [b]))
          w = Map.put(w, :bits, Main.rshift(w.bits, 8))
          w = Map.put(w, :nbits, w.nbits - 8)
          while_fun_2.(while_fun_2, w)
        else
          w
        end
      end
      w = try do
          while_fun_2.(while_fun_2, w)
        catch
          :break -> w
        end

      throw {:return, w}
    catch
      {:return, val} -> val
    end
  end
  def writeBitsMSB(w, c, width) do
    try do
      w = Map.put(w, :bits, w.bits + Main.lshift(c, 32 - width - w.nbits))
      w = Map.put(w, :nbits, w.nbits + width)
      while_fun_3 = fn while_fun_3, w ->
        if w.nbits >= 8 do
          b = rem(Main.rshift(w.bits, 24), 256)
          w = Map.put(w, :data, (w.data ++ [b]))
          w = Map.put(w, :bits, (rem(w.bits, Main.pow2(24))) * 256)
          w = Map.put(w, :nbits, w.nbits - 8)
          while_fun_3.(while_fun_3, w)
        else
          w
        end
      end
      w = try do
          while_fun_3.(while_fun_3, w)
        catch
          :break -> w
        end

      throw {:return, w}
    catch
      {:return, val} -> val
    end
  end
  def writebits(w, c, width) do
    try do
      throw {:return, ((if w.order == "LSB", do: Main.writeBitsLSB(w, c, width), else: Main.writeBitsMSB(w, c, width)))}
    catch
      {:return, val} -> val
    end
  end
  def closewriter(w) do
    try do
      {w} = if w.nbits > 0 do
        {w} = if w.order == "MSB" do
          w = Map.put(w, :bits, Main.rshift(w.bits, 24))
          {w}
        else
          {w}
        end
        w = Map.put(w, :data, (w.data ++ [rem(w.bits, 256)]))
        {w}
      else
        {w}
      end
      w = Map.put(w, :bits, 0)
      w = Map.put(w, :nbits, 0)
      throw {:return, w}
    catch
      {:return, val} -> val
    end
  end
  def newreader(data, order) do
    try do
      throw {:return, %{order: order, data: data, idx: 0, bits: 0, nbits: 0}}
    catch
      {:return, val} -> val
    end
  end
  def readBitsLSB(r, width) do
    try do
      while_fun_4 = fn while_fun_4, r ->
        if r.nbits < width do
          if r.idx >= _len(Map.get(r, :data, [])) do
            throw {:return, %{"val" => 0, "eof" => true}}
          end
          b = Enum.at(r.data, r.idx)
          r = Map.put(r, :idx, r.idx + 1)
          r = Map.put(r, :bits, r.bits + Main.lshift(b, r.nbits))
          r = Map.put(r, :nbits, r.nbits + 8)
          while_fun_4.(while_fun_4, r)
        else
          r
        end
      end
      r = try do
          while_fun_4.(while_fun_4, r)
        catch
          :break -> r
        end

      mask = Main.pow2(width) - 1
      out = rem(r.bits, (mask + 1))
      r = Map.put(r, :bits, Main.rshift(r.bits, width))
      r = Map.put(r, :nbits, r.nbits - width)
      throw {:return, %{"val" => out, "eof" => false}}
    catch
      {:return, val} -> val
    end
  end
  def readBitsMSB(r, width) do
    try do
      while_fun_5 = fn while_fun_5, r ->
        if r.nbits < width do
          if r.idx >= _len(Map.get(r, :data, [])) do
            throw {:return, %{"val" => 0, "eof" => true}}
          end
          b = Enum.at(r.data, r.idx)
          r = Map.put(r, :idx, r.idx + 1)
          r = Map.put(r, :bits, r.bits + Main.lshift(b, 24 - r.nbits))
          r = Map.put(r, :nbits, r.nbits + 8)
          while_fun_5.(while_fun_5, r)
        else
          r
        end
      end
      r = try do
          while_fun_5.(while_fun_5, r)
        catch
          :break -> r
        end

      out = Main.rshift(r.bits, 32 - width)
      r = Map.put(r, :bits, rem((r.bits * Main.pow2(width)), Main.pow2(32)))
      r = Map.put(r, :nbits, r.nbits - width)
      throw {:return, %{"val" => out, "eof" => false}}
    catch
      {:return, val} -> val
    end
  end
  def readbits(r, width) do
    try do
      throw {:return, ((if r.order == "LSB", do: Main.readBitsLSB(r, width), else: Main.readBitsMSB(r, width)))}
    catch
      {:return, val} -> val
    end
  end
  def toBinary(n, bits) do
    try do
      b = ""
      val = n
      i = 0
      while_fun_6 = fn while_fun_6, b, i, val ->
        if i < bits do
          b = (Kernel.to_string(rem(val, 2)) <> b)
          val = div(val, 2)
          i = i + 1
          while_fun_6.(while_fun_6, b, i, val)
        else
          {b, i, val}
        end
      end
      {b, i, val} = try do
          while_fun_6.(while_fun_6, b, i, val)
        catch
          :break -> {b, i, val}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def bytesToBits(bs) do
    try do
      out = "["
      i = 0
      while_fun_7 = fn while_fun_7, i, out ->
        if i < _len(bs) do
          out = (out <> Main.toBinary(Enum.at(bs, i), 8))
          {out} = if i + 1 < _len(bs) do
            out = (out <> " ")
            {out}
          else
            {out}
          end
          i = i + 1
          while_fun_7.(while_fun_7, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_7.(while_fun_7, i, out)
        catch
          :break -> {i, out}
        end

      out = (out <> "]")
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def bytesToHex(bs) do
    try do
      digits = "0123456789ABCDEF"
      out = ""
      i = 0
      while_fun_8 = fn while_fun_8, i, out ->
        if i < _len(bs) do
          b = Enum.at(bs, i)
          hi = div(b, 16)
          lo = rem(b, 16)
          out = ((out <> _slice(digits, hi, (hi + 1) - hi)) <> _slice(digits, lo, (lo + 1) - lo))
          {out} = if i + 1 < _len(bs) do
            out = (out <> " ")
            {out}
          else
            {out}
          end
          i = i + 1
          while_fun_8.(while_fun_8, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_8.(while_fun_8, i, out)
        catch
          :break -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def ord(ch) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      idx = indexOf.(upper, ch)
      if idx >= 0 do
        throw {:return, 65 + idx}
      end
      idx = indexOf.(lower, ch)
      if idx >= 0 do
        throw {:return, 97 + idx}
      end
      if ch >= "0" && ch <= "9" do
        throw {:return, 48 + parseIntStr.(ch)}
      end
      if ch == " " do
        throw {:return, 32}
      end
      if ch == "." do
        throw {:return, 46}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def chr(n) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      if n >= 65 && n < 91 do
        throw {:return, _slice(upper, n - 65, (n - 64) - (n - 65))}
      end
      if n >= 97 && n < 123 do
        throw {:return, _slice(lower, n - 97, (n - 96) - (n - 97))}
      end
      if n >= 48 && n < 58 do
        digits = "0123456789"
        throw {:return, _slice(digits, n - 48, (n - 47) - (n - 48))}
      end
      if n == 32 do
        throw {:return, " "}
      end
      if n == 46 do
        throw {:return, "."}
      end
      throw {:return, "?"}
    catch
      {:return, val} -> val
    end
  end
  def bytesOfStr(s) do
    try do
      bs = []
      i = 0
      while_fun_9 = fn while_fun_9, bs, i ->
        if i < _len(s) do
          bs = (bs ++ [Main.ord(_slice(s, i, (i + 1) - i))])
          i = i + 1
          while_fun_9.(while_fun_9, bs, i)
        else
          {bs, i}
        end
      end
      {bs, i} = try do
          while_fun_9.(while_fun_9, bs, i)
        catch
          :break -> {bs, i}
        end

      throw {:return, bs}
    catch
      {:return, val} -> val
    end
  end
  def bytesToDec(bs) do
    try do
      out = ""
      i = 0
      while_fun_10 = fn while_fun_10, i, out ->
        if i < _len(bs) do
          out = (out <> Kernel.to_string(Enum.at(bs, i)))
          {out} = if i + 1 < _len(bs) do
            out = (out <> " ")
            {out}
          else
            {out}
          end
          i = i + 1
          while_fun_10.(while_fun_10, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_10.(while_fun_10, i, out)
        catch
          :break -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def example() do
    try do
      message = "This is a test."
      msgBytes = Main.bytesOfStr(message)
      IO.puts(((("\"" <> message) <> "\" as bytes: ") <> Main.bytesToDec(msgBytes)))
      IO.puts(("    original bits: " <> Main.bytesToBits(msgBytes)))
      bw = newwriter("MSB")
      i = 0
      while_fun_11 = fn while_fun_11, bw, i ->
        if i < _len(msgBytes) do
          bw = writebits(bw, Enum.at(msgBytes, i), 7)
          i = i + 1
          while_fun_11.(while_fun_11, bw, i)
        else
          {bw, i}
        end
      end
      {bw, i} = try do
          while_fun_11.(while_fun_11, bw, i)
        catch
          :break -> {bw, i}
        end

      bw = closewriter(bw)
      IO.puts(("Written bitstream: " <> Main.bytesToBits(bw.data)))
      IO.puts(("Written bytes: " <> Main.bytesToHex(bw.data)))
      br = newreader(bw.data, "MSB")
      result = ""
      while_fun_12 = fn while_fun_12, result ->
        if true do
          r = readbits(br, 7)
          if r["eof"] do
            throw :break
          end
          v = trunc(r["val"])
          {result} = if v != 0 do
            result = (result <> Main.chr(v))
            {result}
          else
            {result}
          end
          while_fun_12.(while_fun_12, result)
        else
          result
        end
      end
      result = try do
          while_fun_12.(while_fun_12, result)
        catch
          :break -> result
        end

      IO.puts((("Read back as \"" <> result) <> "\""))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    mem_start = _mem()
    t_start = _now()
    example()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
