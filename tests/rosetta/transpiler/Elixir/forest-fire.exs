# Code generated by Mochi transpiler 2025-08-04 22:33 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def repeat(ch, n) do
    try do
      s = ""
      i = 0
      while_fun = fn while_fun, i, s ->
        if i < n do
          s = (s <> ch)
          i = i + 1
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def chance(prob) do
    try do
      threshold = Kernel.trunc(prob * 1000.0)
      throw {:return, rem(_now(), 1000) < threshold}
    catch
      {:return, val} -> val
    end
  end
  def newBoard() do
    try do
      b = []
      r = 0
      while_fun_2 = fn while_fun_2, b, r ->
        if r < Process.get(:rows) do
          row = []
          c = 0
          while_fun_3 = fn while_fun_3, c, row ->
            if c < Process.get(:cols) do
              row = (if rem(_now(), 2) == 0, do: (row ++ ["T"]), else: (row ++ [" "]))
              c = c + 1
              while_fun_3.(while_fun_3, c, row)
            else
              {c, row}
            end
          end
          {c, row} = try do
              while_fun_3.(while_fun_3, c, row)
            catch
              {:break, {c, row}} -> {c, row}
            end

          b = (b ++ [row])
          r = r + 1
          while_fun_2.(while_fun_2, b, r)
        else
          {b, r}
        end
      end
      {b, r} = try do
          while_fun_2.(while_fun_2, b, r)
        catch
          {:break, {b, r}} -> {b, r}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def step(src) do
    try do
      dst = []
      r = 0
      while_fun_4 = fn while_fun_4, dst, r ->
        if r < Process.get(:rows) do
          row = []
          c = 0
          while_fun_5 = fn while_fun_5, c, row ->
            if c < Process.get(:cols) do
              cell = Enum.at(Enum.at(src, r), c)
              next = cell
              {next} = if cell == "#" do
                next = " "
                {next}
              else
                {next} = if cell == "T" do
                  burning = false
                  dr = -1
                  while_fun_6 = fn while_fun_6, burning, dr ->
                    if dr <= 1 do
                      dc = -1
                      while_fun_7 = fn while_fun_7, burning, dc ->
                        if dc <= 1 do
                          {burning} = if dr != 0 || dc != 0 do
                            rr = r + dr
                            cc = c + dc
                            {burning} = if rr >= 0 && rr < Process.get(:rows) && cc >= 0 && cc < Process.get(:cols) do
                              {burning} = if Enum.at(Enum.at(src, rr), cc) == "#" do
                                burning = true
                                {burning}
                              else
                                {burning}
                              end
                              {burning}
                            else
                              {burning}
                            end
                            {burning}
                          else
                            {burning}
                          end
                          dc = dc + 1
                          while_fun_7.(while_fun_7, burning, dc)
                        else
                          {burning, dc}
                        end
                      end
                      {burning, dc} = try do
                          while_fun_7.(while_fun_7, burning, dc)
                        catch
                          {:break, {burning, dc}} -> {burning, dc}
                        end

                      dr = dr + 1
                      while_fun_6.(while_fun_6, burning, dr)
                    else
                      {burning, dr}
                    end
                  end
                  {burning, dr} = try do
                      while_fun_6.(while_fun_6, burning, dr)
                    catch
                      {:break, {burning, dr}} -> {burning, dr}
                    end

                  {next} = if burning || chance(Process.get(:f)) do
                    next = "#"
                    {next}
                  else
                    {next}
                  end
                  {next}
                else
                  {next} = if chance(Process.get(:p)) do
                    next = "T"
                    {next}
                  else
                    {next}
                  end
                  {next}
                end
                {next}
              end
              row = (row ++ [next])
              c = c + 1
              while_fun_5.(while_fun_5, c, row)
            else
              {c, row}
            end
          end
          {c, row} = try do
              while_fun_5.(while_fun_5, c, row)
            catch
              {:break, {c, row}} -> {c, row}
            end

          dst = (dst ++ [row])
          r = r + 1
          while_fun_4.(while_fun_4, dst, r)
        else
          {dst, r}
        end
      end
      {dst, r} = try do
          while_fun_4.(while_fun_4, dst, r)
        catch
          {:break, {dst, r}} -> {dst, r}
        end

      throw {:return, dst}
    catch
      {:return, val} -> val
    end
  end
  def printBoard(b) do
    try do
      IO.puts(Kernel.inspect((repeat("__", Process.get(:cols)) <> "\n\n")))
      r = 0
      while_fun_8 = fn while_fun_8, r ->
        if r < Process.get(:rows) do
          line = ""
          c = 0
          while_fun_9 = fn while_fun_9, c, line ->
            if c < Process.get(:cols) do
              cell = Enum.at(Enum.at(b, r), c)
              line = (if cell == " ", do: (line <> "  "), else: ((line <> " ") <> cell))
              c = c + 1
              while_fun_9.(while_fun_9, c, line)
            else
              {c, line}
            end
          end
          {c, line} = try do
              while_fun_9.(while_fun_9, c, line)
            catch
              {:break, {c, line}} -> {c, line}
            end

          IO.puts((line <> "\n"))
          r = r + 1
          while_fun_8.(while_fun_8, r)
        else
          r
        end
      end
      r = try do
          while_fun_8.(while_fun_8, r)
        catch
          {:break, {r}} -> r
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:rows, 20)
  Process.put(:cols, 30)
  Process.put(:p, 0.01)
  Process.put(:f, 0.001)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:board, newBoard())
    printBoard(Process.get(:board))
    Process.put(:board, step(Process.get(:board)))
    printBoard(Process.get(:board))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
