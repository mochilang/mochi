# Code generated by Mochi transpiler 2025-08-01 17:51 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def step(n, program) do
    try do
      i = 0
      while_fun = fn while_fun, i, n ->
        if i < _len(program) do
          num = Enum.at(Enum.at(program, i), 0)
          den = Enum.at(Enum.at(program, i), 1)
          {n} = if rem(n, den) == 0 do
            n = (div(n, den)) * num
            throw {:return, %{n: n, ok: true}}
            {n}
          else
            {n}
          end
          i = i + 1
          while_fun.(while_fun, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun.(while_fun, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      throw {:return, %{n: n, ok: false}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      program = [[17, 91], [78, 85], [19, 51], [23, 38], [29, 33], [77, 29], [95, 23], [77, 19], [1, 17], [11, 13], [13, 11], [15, 14], [15, 2], [55, 1]]
      n = 2
      primes = 0
      count = 0
      limit = 1000000
      two = 2
      line = ""
      while_fun_2 = fn while_fun_2, count, line, n, primes ->
        if primes < 20 && count < limit do
          res = Main.step(n, program)
          n = res.n
          if !res.ok do
            throw {:break, {count, line, n, primes}}
          end
          m = n
          pow = 0
          while_fun_3 = fn while_fun_3, m, pow ->
            if rem(m, two) == 0 do
              m = div(m, two)
              pow = pow + 1
              while_fun_3.(while_fun_3, m, pow)
            else
              {m, pow}
            end
          end
          {m, pow} = try do
              while_fun_3.(while_fun_3, m, pow)
            catch
              {:break, {m, pow}} -> {m, pow}
            end

          {line, primes} = if m == 1 && pow > 1 do
            line = ((line <> Kernel.to_string(pow)) <> " ")
            primes = primes + 1
            {line, primes}
          else
            {line, primes}
          end
          count = count + 1
          while_fun_2.(while_fun_2, count, line, n, primes)
        else
          {count, line, n, primes}
        end
      end
      {count, line, n, primes} = try do
          while_fun_2.(while_fun_2, count, line, n, primes)
        catch
          {:break, {count, line, n, primes}} -> {count, line, n, primes}
        end

      if _len(line) > 0 do
        IO.puts(Kernel.inspect(_slice(line, 0, _len(line) - 1 - (0))))
      else
        IO.puts("")
      end
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
