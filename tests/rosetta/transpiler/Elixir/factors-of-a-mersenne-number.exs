# Code generated by Mochi transpiler 2025-08-04 21:17 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def powf(base, exp) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def sqrtApprox(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      g = x
      i = 0
      while_fun_2 = fn while_fun_2, g, i ->
        if i < 20 do
          g = (g + x / g) / 2.0
          i = i + 1
          while_fun_2.(while_fun_2, g, i)
        else
          {g, i}
        end
      end
      {g, i} = try do
          while_fun_2.(while_fun_2, g, i)
        catch
          {:break, {g, i}} -> {g, i}
        end

      throw {:return, g}
    catch
      {:return, val} -> val
    end
  end
  def modPow(base, exp, mod) do
    try do
      result = rem(1, mod)
      b = rem(base, mod)
      e = exp
      while_fun_3 = fn while_fun_3, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = rem((result * b), mod)
            {result}
          else
            {result}
          end
          b = rem((b * b), mod)
          e = div(e, 2)
          while_fun_3.(while_fun_3, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun_3.(while_fun_3, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def mtest(m) do
    try do
      if m < 4 do
        IO.puts((((Kernel.to_string(m) <> " < 4.  M") <> Kernel.to_string(m)) <> " not tested."))
        throw {:return, nil}
      end
      flimit = sqrtApprox(powf(2.0, m) - 1.0)
      qlast = 0
      qlast = (if flimit < Process.get(:qlimit), do: (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(flimit), else: Process.get(:qlimit))
      composite = []
      i = 0
      while_fun_4 = fn while_fun_4, composite, i ->
        if i <= qlast do
          composite = (composite ++ [false])
          i = i + 1
          while_fun_4.(while_fun_4, composite, i)
        else
          {composite, i}
        end
      end
      {composite, i} = try do
          while_fun_4.(while_fun_4, composite, i)
        catch
          {:break, {composite, i}} -> {composite, i}
        end

      sq = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(sqrtApprox(qlast))
      q = 3
      while_fun_5 = fn while_fun_5, composite, q ->
        if true do
          {composite} = if q <= sq do
            j = q * q
            while_fun_6 = fn while_fun_6, composite, j ->
              if j <= qlast do
                composite = List.replace_at(composite, j, true)
                j = j + q
                while_fun_6.(while_fun_6, composite, j)
              else
                {composite, j}
              end
            end
            {composite, j} = try do
                while_fun_6.(while_fun_6, composite, j)
              catch
                {:break, {composite, j}} -> {composite, j}
              end

            {composite}
          else
            {composite}
          end
          q8 = rem(q, 8)
          if (q8 == 1 || q8 == 7) && modPow(2, m, q) == 1 do
            IO.puts(((("M" <> Kernel.to_string(m)) <> " has factor ") <> Kernel.to_string(q)))
            throw {:return, nil}
          end
          while_fun_7 = fn while_fun_7, q ->
            if true do
              q = q + 2
              if q > qlast do
                IO.puts((("No factors of M" <> Kernel.to_string(m)) <> " found."))
                throw {:return, nil}
              end
              if !Enum.at(composite, q) do
                throw {:break, {q}}
              end
              while_fun_7.(while_fun_7, q)
            else
              q
            end
          end
          q = try do
              while_fun_7.(while_fun_7, q)
            catch
              {:break, {q}} -> q
            end

          while_fun_5.(while_fun_5, composite, q)
        else
          {composite, q}
        end
      end
      {composite, q} = try do
          while_fun_5.(while_fun_5, composite, q)
        catch
          {:break, {composite, q}} -> {composite, q}
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      mtest(31)
      mtest(67)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:qlimit, 50000)
  def bench_main() do
    Process.put(:qlimit, 50000)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
