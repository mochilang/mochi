# Code generated by Mochi transpiler 2025-07-26 19:45 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def sinApprox(x) do
    try do
      term = x
      sum = x
      n = 1
      while_fun = fn while_fun, n, sum, term ->
        if n <= 10 do
          denom = ((2 * n) * (2 * n + 1))
          term = -term * x * x / denom
          sum = sum + term
          n = n + 1
          while_fun.(while_fun, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun.(while_fun, n, sum, term)
        catch
          :break -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def cosApprox(x) do
    try do
      term = 1.0
      sum = 1.0
      n = 1
      while_fun_2 = fn while_fun_2, n, sum, term ->
        if n <= 10 do
          denom = ((2 * n - 1) * (2 * n))
          term = -term * x * x / denom
          sum = sum + term
          n = n + 1
          while_fun_2.(while_fun_2, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun_2.(while_fun_2, n, sum, term)
        catch
          :break -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  Process.put(:turns, 2.0)
  Process.put(:width, 600.0)
  Process.put(:a, 1.0)
  Process.put(:b, 20.0)
  Process.put(:theta, 0.0)
  Process.put(:count, 0)
  def main() do
    mem_start = _mem()
    t_start = _now()
    Process.put(:degreesIncr, 0.1 * Process.get(:pi) / 180.0)
    Process.put(:stop, 360.0 * Process.get(:turns) * 10.0 * Process.get(:degreesIncr))
    Process.put(:centre, Process.get(:width) / 2.0)
    while_fun_3 = fn while_fun_3 ->
      if Process.get(:theta) < Process.get(:stop) do
        r = Process.get(:a) + Process.get(:b) * Process.get(:theta)
        x = r * Main.cosApprox(Process.get(:theta))
        y = r * Main.sinApprox(Process.get(:theta))
        if rem(Process.get(:count), 100) == 0 do
          IO.puts(((to_string(Process.get(:centre) + x) <> ",") <> to_string(Process.get(:centre) - y)))
        end
        Process.put(:theta, Process.get(:theta) + Process.get(:degreesIncr))
        Process.put(:count, Process.get(:count) + 1)
        while_fun_3.(while_fun_3)
      else
        nil
      end
    end
    try do
      while_fun_3.(while_fun_3)
    catch
      :break -> nil
    end

    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
