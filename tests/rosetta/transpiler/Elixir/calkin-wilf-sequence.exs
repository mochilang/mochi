# Code generated by Mochi transpiler 2025-07-28 00:36 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  def bigrat(a, b) do
    try do
      throw {:return, _bigrat_div((_bigrat(a)), (_bigrat(b)))}
    catch
      {:return, val} -> val
    end
  end
  def calkinWilf(n) do
    try do
      seq = []
      seq = (seq ++ [Main.bigrat(1, 1)])
      i = 1
      while_fun = fn while_fun, i, seq ->
        if i < n do
          prev = Enum.at(seq, i - 1)
          a = elem(prev, 0)
          b = elem(prev, 1)
          f = a / b
          t = Main.bigrat(f, 1)
          t = _bigrat_mul(t, (_bigrat(2)))
          t = _bigrat_sub(t, prev)
          t = _bigrat_add(t, (_bigrat(1)))
          t = _bigrat_div((_bigrat(1)), t)
          seq = (seq ++ [t])
          i = i + 1
          while_fun.(while_fun, i, seq)
        else
          {i, seq}
        end
      end
      {i, seq} = try do
          while_fun.(while_fun, i, seq)
        catch
          {:break, {i, seq}} -> {i, seq}
        end

      throw {:return, seq}
    catch
      {:return, val} -> val
    end
  end
  def toContinued(r) do
    try do
      a = elem(r, 0)
      b = elem(r, 1)
      res = []
      while_fun_2 = fn while_fun_2, a, b, res ->
        if true do
          res = (res ++ [trunc((a / b))])
          t = rem(a, b)
          a = b
          b = t
          if a == 1 do
            throw {:break, {a, b, res}}
          end
          while_fun_2.(while_fun_2, a, b, res)
        else
          {a, b, res}
        end
      end
      {a, b, res} = try do
          while_fun_2.(while_fun_2, a, b, res)
        catch
          {:break, {a, b, res}} -> {a, b, res}
        end

      {res} = if rem(_len(res), 2) == 0 do
        res = List.replace_at(res, _len(res) - 1, Enum.at(res, _len(res) - 1) - 1)
        res = (res ++ [1])
        {res}
      else
        {res}
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def termNumber(cf) do
    try do
      b = ""
      d = "1"
      {b, d} = Enum.reduce(cf, {b, d}, fn n, {b, d} ->
        b = (String.duplicate(d, n) <> b)
        d = (if d == "1", do: "0", else: "1")
        {b, d}
      end)
      throw {:return, String.to_integer(b, 2)}
    catch
      {:return, val} -> val
    end
  end
  def commatize(n) do
    try do
      s = Kernel.to_string(n)
      out = ""
      i = 0
      cnt = 0
      neg = false
      {neg, s} = if _slice(s, 0, 1 - 0) == "-" do
        neg = true
        s = _slice(s, 1, _len(s) - 1)
        {neg, s}
      else
        {neg, s}
      end
      i = _len(s) - 1
      while_fun_3 = fn while_fun_3, cnt, i, out ->
        if i >= 0 do
          out = (_slice(s, i, (i + 1) - i) <> out)
          cnt = cnt + 1
          {cnt, out} = if cnt == 3 && i != 0 do
            out = ("," <> out)
            cnt = 0
            {cnt, out}
          else
            {cnt, out}
          end
          i = i - 1
          while_fun_3.(while_fun_3, cnt, i, out)
        else
          {cnt, i, out}
        end
      end
      {cnt, i, out} = try do
          while_fun_3.(while_fun_3, cnt, i, out)
        catch
          {:break, {cnt, i, out}} -> {cnt, i, out}
        end

      {out} = if neg do
        out = ("-" <> out)
        {out}
      else
        {out}
      end
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      cw = Main.calkinWilf(20)
      IO.puts("The first 20 terms of the Calkin-Wilf sequnence are:")
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < 20 do
          r = Enum.at(cw, i)
          s = Kernel.inspect(elem(r, 0))
          {s} = if elem(r, 1) != 1 do
            s = ((s <> "/") <> Kernel.inspect(elem(r, 1)))
            {s}
          else
            {s}
          end
          IO.puts(Kernel.inspect(((String.pad_leading(Kernel.to_string((i + trunc(1))), 2, " ") <> ": ") <> s)))
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, i} -> i
        end

      r = Main.bigrat(83116, 51639)
      cf = Main.toContinued(r)
      tn = Main.termNumber(cf)
      IO.puts((((((("" <> Kernel.inspect(elem(r, 0))) <> "/") <> Kernel.inspect(elem(r, 1))) <> " is the ") <> Main.commatize(tn)) <> "th term of the sequence."))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
