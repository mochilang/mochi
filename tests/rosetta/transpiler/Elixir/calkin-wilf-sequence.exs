# Code generated by Mochi transpiler 2025-07-26 09:37 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.at(base, start)
      true -> Enum.slice(base, start, len)
    end
  end
  def bigrat(a, b) do
    try do
      throw {:return, (a) / (b)}
    catch
      {:return, val} -> val
    end
  end
  def calkinWilf(n) do
    try do
      seq = []
      seq = (seq ++ [bigrat(1, 1)])
      i = 1
      while_fun = fn while_fun, i, seq ->
        if i < n do
          prev = Enum.at(seq, i - 1)
          a = num.(prev)
          b = denom.(prev)
          f = a / b
          t = bigrat(f, 1)
          t = t * (2)
          t = t - prev
          t = t + (1)
          t = (1) / t
          seq = (seq ++ [t])
          i = i + 1
          while_fun.(while_fun, i, seq)
        else
          {i, seq}
        end
      end
      {i, seq} = try do
          while_fun.(while_fun, i, seq)
        catch
          :break -> {i, seq}
        end

      throw {:return, seq}
    catch
      {:return, val} -> val
    end
  end
  def toContinued(r) do
    try do
      a = num.(r)
      b = denom.(r)
      res = []
      while_fun_2 = fn while_fun_2, a, b, res ->
        if true do
          try do
            res = (res ++ [trunc((a / b))])
            t = rem(a, b)
            a = b
            b = t
            if a == 1 do
              throw :break
            end
          catch
            :continue -> nil
          end
          while_fun_2.(while_fun_2, a, b, res)
        else
          {a, b, res}
        end
      end
      {a, b, res} = try do
          while_fun_2.(while_fun_2, a, b, res)
        catch
          :break -> {a, b, res}
        end

      {res} = if rem(length(res), 2) == 0 do
        res = List.replace_at(res, length(res) - 1, Enum.at(res, length(res) - 1) - 1)
        res = (res ++ [1])
        {res}
      else
        {res}
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def termNumber(cf) do
    try do
      b = ""
      d = "1"
      Enum.each(cf, fn n ->
        b = (repeat.(d, n) <> b)
        d = if d == "1", do: "0", else: "1"
      end)
      throw {:return, parseIntStr.(b, 2)}
    catch
      {:return, val} -> val
    end
  end
  def commatize(n) do
    try do
      s = to_string(n)
      out = ""
      i = 0
      cnt = 0
      neg = false
      {neg, s} = if String.slice(s, 0, 1 - 0) == "-" do
        neg = true
        s = String.slice(s, 1, String.length(s) - 1)
        {neg, s}
      else
        {neg, s}
      end
      i = String.length(s) - 1
      while_fun_3 = fn while_fun_3, cnt, i, out ->
        if i >= 0 do
          out = (String.slice(s, i, i + 1 - i) <> out)
          cnt = cnt + 1
          if cnt == 3 && i != 0 do
            out = ("," <> out)
            cnt = 0
          end
          i = i - 1
          while_fun_3.(while_fun_3, cnt, i, out)
        else
          {cnt, i, out}
        end
      end
      {cnt, i, out} = try do
          while_fun_3.(while_fun_3, cnt, i, out)
        catch
          :break -> {cnt, i, out}
        end

      {out} = if neg do
        out = ("-" <> out)
        {out}
      else
        {out}
      end
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      cw = calkinWilf(20)
      IO.puts("The first 20 terms of the Calkin-Wilf sequnence are:")
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < 20 do
          r = Enum.at(cw, i)
          s = to_string(num.(r))
          {s} = if denom.(r) != 1 do
            s = ((s <> "/") <> to_string(denom.(r)))
            {s}
          else
            {s}
          end
          IO.puts(Kernel.to_string(((((i + trunc(1)), 2, " ") <> ": ") <> s)))
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          :break -> i
        end

      r = bigrat(83116, 51639)
      cf = toContinued(r)
      tn = termNumber(cf)
      IO.puts((((((("" <> to_string(num.(r))) <> "/") <> to_string(denom.(r))) <> " is the ") <> commatize(tn)) <> "th term of the sequence."))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
