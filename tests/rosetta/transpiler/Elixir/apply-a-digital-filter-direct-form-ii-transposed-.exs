# Code generated by Mochi transpiler 2025-07-26 19:01 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.at(base, start)
      true -> Enum.slice(base, start, len)
    end
  end
  def applyFilter(input, a, b) do
    try do
      out = []
      scale = 1.0 / Enum.at(a, 0)
      i = 0
      while_fun = fn while_fun, i, out ->
        if i < length(input) do
          tmp = 0.0
          j = 0
          while_fun_2 = fn while_fun_2, j, tmp ->
            if j <= i && j < length(b) do
              tmp = tmp + Enum.at(b, j) * Enum.at(input, i - j)
              j = j + 1
              while_fun_2.(while_fun_2, j, tmp)
            else
              {j, tmp}
            end
          end
          {j, tmp} = try do
              while_fun_2.(while_fun_2, j, tmp)
            catch
              :break -> {j, tmp}
            end

          j = 0
          while_fun_3 = fn while_fun_3, j, tmp ->
            if j < i && j + 1 < length(a) do
              tmp = tmp - Enum.at(a, j + 1) * Enum.at(out, i - j - 1)
              j = j + 1
              while_fun_3.(while_fun_3, j, tmp)
            else
              {j, tmp}
            end
          end
          {j, tmp} = try do
              while_fun_3.(while_fun_3, j, tmp)
            catch
              :break -> {j, tmp}
            end

          out = (out ++ [tmp * scale])
          i = i + 1
          while_fun.(while_fun, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun.(while_fun, i, out)
        catch
          :break -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:b, [0.16666667, 0.5, 0.5, 0.16666667])
  Process.put(:k, 0)
  def main() do
    mem_start = _mem()
    t_start = _now()
    Process.put(:a, [1.0, -0.00000000000000027756, 0.33333333, -0.0000000000000000185])
    Process.put(:sig, [-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589])
    Process.put(:res, applyFilter(Process.get(:sig), Process.get(:a), Process.get(:b)))
    while_fun_4 = fn while_fun_4 ->
      if Process.get(:k) < length(Process.get(:res)) do
        IO.puts(Enum.at(Process.get(:res), Process.get(:k)))
        Process.put(:k, Process.get(:k) + 1)
        while_fun_4.(while_fun_4)
      else
        nil
      end
    end
    try do
      while_fun_4.(while_fun_4)
    catch
      :break -> nil
    end

    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
