# Code generated by Mochi transpiler 2025-08-04 00:33 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def newTerm(a, b) do
    try do
      throw {:return, %{"a" => a, "b" => b}}
    catch
      {:return, val} -> val
    end
  end
  def cfSqrt2(nTerms) do
    try do
      f = []
      n = 0
      while_fun = fn while_fun, f, n ->
        if n < nTerms do
          f = (f ++ [Main.newTerm(2, 1)])
          n = n + 1
          while_fun.(while_fun, f, n)
        else
          {f, n}
        end
      end
      {f, n} = try do
          while_fun.(while_fun, f, n)
        catch
          {:break, {f, n}} -> {f, n}
        end

      {f} = if nTerms > 0 do
        f = List.replace_at(f, 0, Map.put(Enum.at(f, 0), "a", 1))
        {f}
      else
        {f}
      end
      throw {:return, f}
    catch
      {:return, val} -> val
    end
  end
  def cfNap(nTerms) do
    try do
      f = []
      n = 0
      while_fun_2 = fn while_fun_2, f, n ->
        if n < nTerms do
          f = (f ++ [Main.newTerm(n, n - 1)])
          n = n + 1
          while_fun_2.(while_fun_2, f, n)
        else
          {f, n}
        end
      end
      {f, n} = try do
          while_fun_2.(while_fun_2, f, n)
        catch
          {:break, {f, n}} -> {f, n}
        end

      {f} = if nTerms > 0 do
        f = List.replace_at(f, 0, Map.put(Enum.at(f, 0), "a", 2))
        {f}
      else
        {f}
      end
      {f} = if nTerms > 1 do
        f = List.replace_at(f, 1, Map.put(Enum.at(f, 1), "b", 1))
        {f}
      else
        {f}
      end
      throw {:return, f}
    catch
      {:return, val} -> val
    end
  end
  def cfPi(nTerms) do
    try do
      f = []
      n = 0
      while_fun_3 = fn while_fun_3, f, n ->
        if n < nTerms do
          g = 2 * n - 1
          f = (f ++ [Main.newTerm(6, g * g)])
          n = n + 1
          while_fun_3.(while_fun_3, f, n)
        else
          {f, n}
        end
      end
      {f, n} = try do
          while_fun_3.(while_fun_3, f, n)
        catch
          {:break, {f, n}} -> {f, n}
        end

      {f} = if nTerms > 0 do
        f = List.replace_at(f, 0, Map.put(Enum.at(f, 0), "a", 3))
        {f}
      else
        {f}
      end
      throw {:return, f}
    catch
      {:return, val} -> val
    end
  end
  def real(f) do
    try do
      r = 0.0
      i = _len(f) - 1
      while_fun_4 = fn while_fun_4, i, r ->
        if i > 0 do
          r = (Enum.at(f, i)["b"]) / ((Enum.at(f, i)["a"]) + r)
          i = i - 1
          while_fun_4.(while_fun_4, i, r)
        else
          {i, r}
        end
      end
      {i, r} = try do
          while_fun_4.(while_fun_4, i, r)
        catch
          {:break, {i, r}} -> {i, r}
        end

      {r} = if _len(f) > 0 do
        r = r + (Enum.at(f, 0)["a"])
        {r}
      else
        {r}
      end
      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(("sqrt2: " <> Kernel.inspect(Main.real(Main.cfSqrt2(20)))))
      IO.puts(("nap:   " <> Kernel.inspect(Main.real(Main.cfNap(20)))))
      IO.puts(("pi:    " <> Kernel.inspect(Main.real(Main.cfPi(20)))))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
