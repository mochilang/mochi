# Code generated by Mochi transpiler 2025-08-04 21:17 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def printFactors(n) do
    try do
      if n < 1 do
        IO.puts((("\nFactors of " <> Kernel.to_string(n)) <> " not computed"))
        throw {:return, nil}
      end
      IO.puts((("\nFactors of " <> Kernel.to_string(n)) <> ": "))
      fs = [1]
      apf = fn p, e ->
  orig = _len(fs)
  pp = p
  i = 0
  while_fun = fn while_fun, fs, i, pp ->
    if i < e do
      j = 0
      while_fun_2 = fn while_fun_2, fs, j ->
        if j < orig do
          fs = (fs ++ [Enum.at(fs, j) * pp])
          j = j + 1
          while_fun_2.(while_fun_2, fs, j)
        else
          {fs, j}
        end
      end
      {fs, j} = try do
          while_fun_2.(while_fun_2, fs, j)
        catch
          {:break, {fs, j}} -> {fs, j}
        end

      i = i + 1
      pp = pp * p
      while_fun.(while_fun, fs, i, pp)
    else
      {fs, i, pp}
    end
  end
  {fs, i, pp} = try do
      while_fun.(while_fun, fs, i, pp)
    catch
      {:break, {fs, i, pp}} -> {fs, i, pp}
    end

end
      e = 0
      m = n
      while_fun_3 = fn while_fun_3, e, m ->
        if rem(m, 2) == 0 do
          m = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(m, 2)))
          e = e + 1
          while_fun_3.(while_fun_3, e, m)
        else
          {e, m}
        end
      end
      {e, m} = try do
          while_fun_3.(while_fun_3, e, m)
        catch
          {:break, {e, m}} -> {e, m}
        end

      apf.(2, e)
      d = 3
      while_fun_4 = fn while_fun_4, d, e, m ->
        if m > 1 do
          {d} = if d * d > m do
            d = m
            {d}
          else
            {d}
          end
          e = 0
          while_fun_5 = fn while_fun_5, e, m ->
            if rem(m, d) == 0 do
              m = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(m, d)))
              e = e + 1
              while_fun_5.(while_fun_5, e, m)
            else
              {e, m}
            end
          end
          {e, m} = try do
              while_fun_5.(while_fun_5, e, m)
            catch
              {:break, {e, m}} -> {e, m}
            end

          if e > 0 do
            apf.(d, e)
          end
          d = d + 2
          while_fun_4.(while_fun_4, d, e, m)
        else
          {d, e, m}
        end
      end
      {d, e, m} = try do
          while_fun_4.(while_fun_4, d, e, m)
        catch
          {:break, {d, e, m}} -> {d, e, m}
        end

      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [fs])), ",", " "))
      IO.puts(("Number of factors = " <> Kernel.inspect(_len(fs))))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    printFactors(-1)
    printFactors(0)
    printFactors(1)
    printFactors(2)
    printFactors(3)
    printFactors(53)
    printFactors(45)
    printFactors(64)
    printFactors(600851475143)
    printFactors(999999999999999989)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
