# Code generated by Mochi transpiler 2025-07-26 17:59 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.at(base, start)
      true -> Enum.slice(base, start, len)
    end
  end
  def d2d(d) do
    try do
      throw {:return, :math.fmod(d, 360.0)}
    catch
      {:return, val} -> val
    end
  end
  def g2g(g) do
    try do
      throw {:return, :math.fmod(g, 400.0)}
    catch
      {:return, val} -> val
    end
  end
  def m2m(m) do
    try do
      throw {:return, :math.fmod(m, 6400.0)}
    catch
      {:return, val} -> val
    end
  end
  def r2r(r) do
    try do
      throw {:return, :math.fmod(r, (2.0 * 3.141592653589793))}
    catch
      {:return, val} -> val
    end
  end
  def d2g(d) do
    try do
      throw {:return, d2d(d) * 400.0 / 360.0}
    catch
      {:return, val} -> val
    end
  end
  def d2m(d) do
    try do
      throw {:return, d2d(d) * 6400.0 / 360.0}
    catch
      {:return, val} -> val
    end
  end
  def d2r(d) do
    try do
      throw {:return, d2d(d) * 3.141592653589793 / 180.0}
    catch
      {:return, val} -> val
    end
  end
  def g2d(g) do
    try do
      throw {:return, g2g(g) * 360.0 / 400.0}
    catch
      {:return, val} -> val
    end
  end
  def g2m(g) do
    try do
      throw {:return, g2g(g) * 6400.0 / 400.0}
    catch
      {:return, val} -> val
    end
  end
  def g2r(g) do
    try do
      throw {:return, g2g(g) * 3.141592653589793 / 200.0}
    catch
      {:return, val} -> val
    end
  end
  def m2d(m) do
    try do
      throw {:return, m2m(m) * 360.0 / 6400.0}
    catch
      {:return, val} -> val
    end
  end
  def m2g(m) do
    try do
      throw {:return, m2m(m) * 400.0 / 6400.0}
    catch
      {:return, val} -> val
    end
  end
  def m2r(m) do
    try do
      throw {:return, m2m(m) * 3.141592653589793 / 3200.0}
    catch
      {:return, val} -> val
    end
  end
  def r2d(r) do
    try do
      throw {:return, r2r(r) * 180.0 / 3.141592653589793}
    catch
      {:return, val} -> val
    end
  end
  def r2g(r) do
    try do
      throw {:return, r2r(r) * 200.0 / 3.141592653589793}
    catch
      {:return, val} -> val
    end
  end
  def r2m(r) do
    try do
      throw {:return, r2r(r) * 3200.0 / 3.141592653589793}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      angles = [-2.0, -1.0, 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1000000.0]
      IO.puts("degrees normalized_degs gradians mils radians")
      Enum.each(angles, fn a ->
        IO.puts(((((((((to_string(a) <> " ") <> to_string(d2d(a))) <> " ") <> to_string(d2g(a))) <> " ") <> to_string(d2m(a))) <> " ") <> to_string(d2r(a))))
      end)
      IO.puts("\ngradians normalized_grds degrees mils radians")
      Enum.each(angles, fn a ->
        IO.puts(((((((((to_string(a) <> " ") <> to_string(g2g(a))) <> " ") <> to_string(g2d(a))) <> " ") <> to_string(g2m(a))) <> " ") <> to_string(g2r(a))))
      end)
      IO.puts("\nmils normalized_mils degrees gradians radians")
      Enum.each(angles, fn a ->
        IO.puts(((((((((to_string(a) <> " ") <> to_string(m2m(a))) <> " ") <> to_string(m2d(a))) <> " ") <> to_string(m2g(a))) <> " ") <> to_string(m2r(a))))
      end)
      IO.puts("\nradians normalized_rads degrees gradians mils")
      Enum.each(angles, fn a ->
        IO.puts(((((((((to_string(a) <> " ") <> to_string(r2r(a))) <> " ") <> to_string(r2d(a))) <> " ") <> to_string(r2g(a))) <> " ") <> to_string(r2m(a))))
      end)
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
