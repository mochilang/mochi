# Code generated by Mochi transpiler 2025-08-03 22:12 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.monotonic_time(:microsecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def setChar(s, idx, ch) do
    try do
      throw {:return, ((_slice(s, 0, idx - (0)) <> ch) <> _slice(s, idx + 1, _len(s) - (idx + 1)))}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:width, 81)
  Process.put(:height, 5)
  Process.put(:lines, [])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _now()
    Enum.each((0..(Process.get(:height) - 1)), fn i ->
      row = ""
      j = 0
      while_fun = fn while_fun, j, row ->
        if j < Process.get(:width) do
          row = (row <> "*")
          j = j + 1
          while_fun.(while_fun, j, row)
        else
          {j, row}
        end
      end
      {j, row} = try do
          while_fun.(while_fun, j, row)
        catch
          {:break, {j, row}} -> {j, row}
        end

      Process.put(:lines, (Process.get(:lines) ++ [row]))
    end)
    Process.put(:stack, [%{"start" => 0, "len" => Process.get(:width), "index" => 1}])
    while_fun_2 = fn while_fun_2 ->
      if _len(Process.get(:stack)) > 0 do
        try do
          frame = Enum.at(Process.get(:stack), _len(Process.get(:stack)) - 1)
          Process.put(:stack, _slice(Process.get(:stack), 0, (_len(Process.get(:stack)) - 1) - 0))
          start = frame["start"]
          lenSeg = frame["len"]
          index = frame["index"]
          seg = trunc((div(lenSeg, 3)))
          if seg == 0 do
            throw :continue
          end
          i = index
          while_fun_3 = fn while_fun_3, i ->
            if i < Process.get(:height) do
              j = start + seg
              while_fun_4 = fn while_fun_4, j ->
                if j < start + 2 * seg do
                  Process.put(:lines, List.replace_at(Process.get(:lines), i, Main.setChar(Enum.at(Process.get(:lines), i), j, " ")))
                  j = j + 1
                  while_fun_4.(while_fun_4, j)
                else
                  j
                end
              end
              j = try do
                  while_fun_4.(while_fun_4, j)
                catch
                  {:break, j} -> j
                end

              i = i + 1
              while_fun_3.(while_fun_3, i)
            else
              i
            end
          end
          i = try do
              while_fun_3.(while_fun_3, i)
            catch
              {:break, i} -> i
            end

          Process.put(:stack, (Process.get(:stack) ++ [%{"start" => start, "len" => seg, "index" => index + 1}]))
          Process.put(:stack, (Process.get(:stack) ++ [%{"start" => start + seg * 2, "len" => seg, "index" => index + 1}]))
        catch
          :continue -> nil
        end
        while_fun_2.(while_fun_2)
      else
        nil
      end
    end
    try do
      while_fun_2.(while_fun_2)
    catch
      :break -> nil
    end

    Enum.each(Process.get(:lines), fn line ->
      IO.puts(line)
    end)
    mem_end = _mem()
    duration_us = max(_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
