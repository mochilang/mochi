# Code generated by Mochi transpiler 2025-08-04 21:17 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def sinApprox(x) do
    try do
      term = x
      sum = x
      n = 1
      while_fun = fn while_fun, n, sum, term ->
        if n <= 10 do
          denom = ((2 * n) * (2 * n + 1))
          term = -term * x * x / denom
          sum = sum + term
          n = n + 1
          while_fun.(while_fun, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun.(while_fun, n, sum, term)
        catch
          {:break, {n, sum, term}} -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def cosApprox(x) do
    try do
      term = 1.0
      sum = 1.0
      n = 1
      while_fun_2 = fn while_fun_2, n, sum, term ->
        if n <= 10 do
          denom = ((2 * n - 1) * (2 * n))
          term = -term * x * x / denom
          sum = sum + term
          n = n + 1
          while_fun_2.(while_fun_2, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun_2.(while_fun_2, n, sum, term)
        catch
          {:break, {n, sum, term}} -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def cis(x) do
    try do
      throw {:return, %{re: cosApprox(x), im: sinApprox(x)}}
    catch
      {:return, val} -> val
    end
  end
  def add(a, b) do
    try do
      throw {:return, %{re: a.re + b.re, im: a.im + b.im}}
    catch
      {:return, val} -> val
    end
  end
  def sub(a, b) do
    try do
      throw {:return, %{re: a.re - b.re, im: a.im - b.im}}
    catch
      {:return, val} -> val
    end
  end
  def mul(a, b) do
    try do
      throw {:return, %{re: a.re * b.re - a.im * b.im, im: a.re * b.im + a.im * b.re}}
    catch
      {:return, val} -> val
    end
  end
  def ditfft2Rec(x, y, offX, offY, n, s) do
    try do
      {y} = if n == 1 do
        y = List.replace_at(y, offY, %{re: Enum.at(x, offX), im: 0.0})
        throw {:return, nil}
        {y}
      else
        {y}
      end
      ditfft2Rec(x, y, offX, offY, div(n, 2), 2 * s)
      ditfft2Rec(x, y, offX + s, offY + div(n, 2), div(n, 2), 2 * s)
      k = 0
      while_fun_3 = fn while_fun_3, k, y ->
        if k < div(n, 2) do
          angle = -2.0 * Process.get(:pi) * (k) / (n)
          tf = mul(cis(angle), Enum.at(y, offY + k + div(n, 2)))
          a = add(Enum.at(y, offY + k), tf)
          b = sub(Enum.at(y, offY + k), tf)
          y = List.replace_at(y, offY + k, a)
          y = List.replace_at(y, offY + k + div(n, 2), b)
          k = k + 1
          while_fun_3.(while_fun_3, k, y)
        else
          {k, y}
        end
      end
      {k, y} = try do
          while_fun_3.(while_fun_3, k, y)
        catch
          {:break, {k, y}} -> {k, y}
        end

    catch
      {:return, val} -> val
    end
  end
  def ditfft2(x, y, n, s) do
    try do
      ditfft2Rec(x, y, 0, 0, n, s)
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      x = [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]
      y = []
      i = 0
      while_fun_4 = fn while_fun_4, i, y ->
        if i < _len(x) do
          y = (y ++ [%{re: 0.0, im: 0.0}])
          i = i + 1
          while_fun_4.(while_fun_4, i, y)
        else
          {i, y}
        end
      end
      {i, y} = try do
          while_fun_4.(while_fun_4, i, y)
        catch
          {:break, {i, y}} -> {i, y}
        end

      ditfft2(x, y, _len(x), 1)
      Enum.each(y, fn c ->
        line = pad(fmt(c.re), 8)
        line = (if c.im >= 0, do: ((line <> "+") <> fmt(c.im)), else: (line <> fmt(c.im)))
        IO.puts(line)
      end)
    catch
      {:return, val} -> val
    end
  end
  def pad(s, w) do
    try do
      t = s
      while_fun_5 = fn while_fun_5, t ->
        if _len(t) < w do
          t = (" " <> t)
          while_fun_5.(while_fun_5, t)
        else
          t
        end
      end
      t = try do
          while_fun_5.(while_fun_5, t)
        catch
          {:break, {t}} -> t
        end

      throw {:return, t}
    catch
      {:return, val} -> val
    end
  end
  def fmt(x) do
    try do
      y = floorf(x * 10000.0 + 0.5) / 10000.0
      s = Kernel.to_string(y)
      dot = indexOf(s, ".")
      {s} = if dot == 0 - 1 do
        s = (s <> ".0000")
        {s}
      else
        d = _len(s) - dot - 1
        while_fun_6 = fn while_fun_6, d, s ->
          if d < 4 do
            s = (s <> "0")
            d = d + 1
            while_fun_6.(while_fun_6, d, s)
          else
            {d, s}
          end
        end
        {d, s} = try do
            while_fun_6.(while_fun_6, d, s)
          catch
            {:break, {d, s}} -> {d, s}
          end

        {s}
      end
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def floorf(x) do
    try do
      y = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      throw {:return, y}
    catch
      {:return, val} -> val
    end
  end
  def indexOf(s, ch) do
    try do
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(s) do
          if _slice(s, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, 0 - 1}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  def bench_main() do
    Process.put(:pi, 3.141592653589793)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
