# Code generated by Mochi transpiler 2025-07-26 19:45 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def primeFactors(n) do
    try do
      factors = []
      x = n
      while_fun = fn while_fun, factors, x ->
        if rem(x, 2) == 0 do
          factors = (factors ++ [2])
          x = trunc((div(x, 2)))
          while_fun.(while_fun, factors, x)
        else
          {factors, x}
        end
      end
      {factors, x} = try do
          while_fun.(while_fun, factors, x)
        catch
          :break -> {factors, x}
        end

      p = 3
      while_fun_2 = fn while_fun_2, factors, p, x ->
        if p * p <= x do
          while_fun_3 = fn while_fun_3, factors, x ->
            if rem(x, p) == 0 do
              factors = (factors ++ [p])
              x = trunc((div(x, p)))
              while_fun_3.(while_fun_3, factors, x)
            else
              {factors, x}
            end
          end
          {factors, x} = try do
              while_fun_3.(while_fun_3, factors, x)
            catch
              :break -> {factors, x}
            end

          p = p + 2
          while_fun_2.(while_fun_2, factors, p, x)
        else
          {factors, p, x}
        end
      end
      {factors, p, x} = try do
          while_fun_2.(while_fun_2, factors, p, x)
        catch
          :break -> {factors, p, x}
        end

      {factors} = if x > 1 do
        factors = (factors ++ [x])
        {factors}
      else
        {factors}
      end
      throw {:return, factors}
    catch
      {:return, val} -> val
    end
  end
  def repeat(ch, n) do
    try do
      s = ""
      i = 0
      while_fun_4 = fn while_fun_4, i, s ->
        if i < n do
          s = (s <> ch)
          i = i + 1
          while_fun_4.(while_fun_4, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_4.(while_fun_4, i, s)
        catch
          :break -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def d(n) do
    try do
      if n < 0.0 do
        throw {:return, -d(-n)}
      end
      if n < 2.0 do
        throw {:return, 0.0}
      end
      factors = []
      {factors} = if n < 10000000000000000000.0 do
        factors = Main.primeFactors(trunc((n)))
        {factors}
      else
        g = trunc((n / 100.0))
        factors = Main.primeFactors(g)
        factors = (factors ++ [2])
        factors = (factors ++ [2])
        factors = (factors ++ [5])
        factors = (factors ++ [5])
        {factors}
      end
      c = length(factors)
      if c == 1 do
        throw {:return, 1.0}
      end
      if c == 2 do
        throw {:return, (Enum.at(factors, 0) + Enum.at(factors, 1))}
      end
      d = n / (Enum.at(factors, 0))
      throw {:return, Main.d(d) * (Enum.at(factors, 0)) + d}
    catch
      {:return, val} -> val
    end
  end
  def pad(n) do
    try do
      s = to_string(n)
      while_fun_5 = fn while_fun_5, s ->
        if String.length(s) < 4 do
          s = (" " <> s)
          while_fun_5.(while_fun_5, s)
        else
          s
        end
      end
      s = try do
          while_fun_5.(while_fun_5, s)
        catch
          :break -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      vals = []
      n = -99
      while_fun_6 = fn while_fun_6, n, vals ->
        if n < 101 do
          vals = (vals ++ [trunc((d(n)))])
          n = n + 1
          while_fun_6.(while_fun_6, n, vals)
        else
          {n, vals}
        end
      end
      {n, vals} = try do
          while_fun_6.(while_fun_6, n, vals)
        catch
          :break -> {n, vals}
        end

      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < length(vals) do
          line = ""
          j = 0
          while_fun_8 = fn while_fun_8, j, line ->
            if j < 10 do
              line = (line <> Main.pad(Enum.at(vals, i + j)))
              if j < 9 do
                line = (line <> " ")
              end
              j = j + 1
              while_fun_8.(while_fun_8, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_8.(while_fun_8, j, line)
            catch
              :break -> {j, line}
            end

          IO.puts(line)
          i = i + 10
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          :break -> i
        end

      pow = 1.0
      m = 1
      while_fun_9 = fn while_fun_9, m, pow ->
        if m < 21 do
          pow = pow * 10.0
          exp = to_string(m)
          {exp} = if String.length(exp) < 2 do
            exp = (exp <> " ")
            {exp}
          else
            {exp}
          end
          res = (to_string(m) <> Main.repeat("0", m - 1))
          IO.puts(((("D(10^" <> exp) <> ") / 7 = ") <> res))
          m = m + 1
          while_fun_9.(while_fun_9, m, pow)
        else
          {m, pow}
        end
      end
      {m, pow} = try do
          while_fun_9.(while_fun_9, m, pow)
        catch
          :break -> {m, pow}
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
