# Code generated by Mochi transpiler 2025-08-04 21:47 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def pow_int(base, exp) do
    try do
      result = 1
      b = base
      e = exp
      while_fun = fn while_fun, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = result * b
            {result}
          else
            {result}
          end
          b = b * b
          e = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(e, 2)))
          while_fun.(while_fun, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun.(while_fun, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def pow_big(base, exp) do
    try do
      result = 1
      b = base
      e = exp
      while_fun_2 = fn while_fun_2, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = result * b
            {result}
          else
            {result}
          end
          b = b * b
          e = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(e, 2)))
          while_fun_2.(while_fun_2, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun_2.(while_fun_2, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def parseBigInt(str) do
    try do
      i = 0
      neg = false
      {i, neg} = if _len(str) > 0 && _slice(str, 0, 1 - (0)) == "-" do
        neg = true
        i = 1
        {i, neg}
      else
        {i, neg}
      end
      n = 0
      while_fun_3 = fn while_fun_3, i, n ->
        if i < _len(str) do
          ch = _slice(str, i, i + 1 - (i))
          d = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(ch)
          n = n * (10) + (d)
          i = i + 1
          while_fun_3.(while_fun_3, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_3.(while_fun_3, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      {n} = if neg do
        n = -n
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def fermat(n) do
    try do
      p = pow_int(2, n)
      throw {:return, pow_big(2, p) + (1)}
    catch
      {:return, val} -> val
    end
  end
  def primeFactorsBig(n) do
    try do
      factors = []
      m = n
      d = 2
      while_fun_4 = fn while_fun_4, factors, m ->
        if rem(m, d) == 0 do
          factors = (factors ++ [d])
          m = div(m, d)
          while_fun_4.(while_fun_4, factors, m)
        else
          {factors, m}
        end
      end
      {factors, m} = try do
          while_fun_4.(while_fun_4, factors, m)
        catch
          {:break, {factors, m}} -> {factors, m}
        end

      d = 3
      while_fun_5 = fn while_fun_5, d, factors, m ->
        if d * d <= m do
          while_fun_6 = fn while_fun_6, factors, m ->
            if rem(m, d) == 0 do
              factors = (factors ++ [d])
              m = div(m, d)
              while_fun_6.(while_fun_6, factors, m)
            else
              {factors, m}
            end
          end
          {factors, m} = try do
              while_fun_6.(while_fun_6, factors, m)
            catch
              {:break, {factors, m}} -> {factors, m}
            end

          d = d + 2
          while_fun_5.(while_fun_5, d, factors, m)
        else
          {d, factors, m}
        end
      end
      {d, factors, m} = try do
          while_fun_5.(while_fun_5, d, factors, m)
        catch
          {:break, {d, factors, m}} -> {d, factors, m}
        end

      {factors} = if m > 1 do
        factors = (factors ++ [m])
        {factors}
      else
        {factors}
      end
      throw {:return, factors}
    catch
      {:return, val} -> val
    end
  end
  def show_list(xs) do
    try do
      line = ""
      i = 0
      while_fun_7 = fn while_fun_7, i, line ->
        if i < _len(xs) do
          line = (line <> Kernel.inspect(Enum.at(xs, i)))
          {line} = if i < _len(xs) - 1 do
            line = (line <> " ")
            {line}
          else
            {line}
          end
          i = i + 1
          while_fun_7.(while_fun_7, i, line)
        else
          {i, line}
        end
      end
      {i, line} = try do
          while_fun_7.(while_fun_7, i, line)
        catch
          {:break, {i, line}} -> {i, line}
        end

      throw {:return, line}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      nums = []
      {nums} = Enum.reduce((0..(8 - 1)), {nums}, fn i, {nums} ->
        nums = (nums ++ [fermat(i)])
        {nums}
      end)
      IO.puts("First 8 Fermat numbers:")
      Enum.each(nums, fn n ->
        IO.puts(Kernel.inspect(n))
      end)
      extra = %{6 => [274177, 67280421310721], 7 => [parseBigInt("59649589127497217"), parseBigInt("5704689200685129054721")]}
      IO.puts("\nFactors:")
      i = 0
      while_fun_8 = fn while_fun_8, i ->
        if i < _len(nums) do
          facs = []
          facs = (if i <= 5, do: primeFactorsBig(Enum.at(nums, i)), else: extra[i])
          IO.puts(((("F" <> Kernel.to_string(i)) <> " = ") <> show_list(facs)))
          i = i + 1
          while_fun_8.(while_fun_8, i)
        else
          i
        end
      end
      i = try do
          while_fun_8.(while_fun_8, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
