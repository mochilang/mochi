# Code generated by Mochi transpiler 2025-08-04 15:00 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def split(s, sep) do
    try do
      out = []
      cur = ""
      i = 0
      while_fun = fn while_fun, cur, i, out ->
        if i < _len(s) do
          {cur, i, out} = if i + _len(sep) <= _len(s) && _slice(s, i, i + _len(sep) - (i)) == sep do
            out = (out ++ [cur])
            cur = ""
            i = i + _len(sep)
            {cur, i, out}
          else
            cur = (cur <> _slice(s, i, i + 1 - (i)))
            i = i + 1
            {cur, i, out}
          end
          while_fun.(while_fun, cur, i, out)
        else
          {cur, i, out}
        end
      end
      {cur, i, out} = try do
          while_fun.(while_fun, cur, i, out)
        catch
          {:break, {cur, i, out}} -> {cur, i, out}
        end

      out = (out ++ [cur])
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def join(xs, sep) do
    try do
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(xs) do
          {res} = if i > 0 do
            res = (res <> sep)
            {res}
          else
            {res}
          end
          res = (res <> Enum.at(xs, i))
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def trimLeftSpaces(s) do
    try do
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(s) && _slice(s, i, (i + 1) - i) == " " do
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, i} -> i
        end

      throw {:return, _slice(s, i, _len(s) - i)}
    catch
      {:return, val} -> val
    end
  end
  def makeIndent(outline, tab) do
    try do
      lines = split(outline, "\n")
      nodes = []
      {nodes} = Enum.reduce(lines, {nodes}, fn line, {nodes} ->
        line2 = trimLeftSpaces(line)
        level = div((_len(line) - _len(line2)), tab)
        nodes = (nodes ++ [%{level: level, name: line2}])
        {nodes}
      end)
      throw {:return, nodes}
    catch
      {:return, val} -> val
    end
  end
  def toNest(nodes, start, level, n) do
    try do
      {n} = if level == 0 do
        n = Map.put(n, "name", Enum.at(nodes, 0)["name"])
        {n}
      else
        {n}
      end
      i = start + 1
      while_fun_4 = fn while_fun_4, i, n ->
        if i < _len(nodes) do
          node_ = Enum.at(nodes, i)
          lev = trunc(node_["level"])
          {n} = if lev == level + 1 do
            child = %{name: node_["name"], children: []}
            toNest(nodes, i, level + 1, child)
            cs = n["children"]
            cs = (cs ++ [child])
            n = Map.put(n, "children", cs)
            {n}
          else
            if lev <= level do
              throw {:return, nil}
            end
            {n}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_4.(while_fun_4, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

    catch
      {:return, val} -> val
    end
  end
  def countLeaves(n) do
    try do
      kids = n["children"]
      if _len(kids) == 0 do
        throw {:return, 1}
      end
      total = 0
      {total} = Enum.reduce(kids, {total}, fn k, {total} ->
        total = total + countLeaves(k)
        {total}
      end)
      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def nodesByDepth(root, depth) do
    try do
      levels = []
      current = [root]
      d = 0
      while_fun_5 = fn while_fun_5, current, d, levels ->
        if d < depth do
          levels = (levels ++ [current])
          next = []
          {next} = Enum.reduce(current, {next}, fn n, {next} ->
            kids = n["children"]
            {next} = Enum.reduce(kids, {next}, fn k, {next} ->
              next = (next ++ [k])
              {next}
            end)
            {next}
          end)
          current = next
          d = d + 1
          while_fun_5.(while_fun_5, current, d, levels)
        else
          {current, d, levels}
        end
      end
      {current, d, levels} = try do
          while_fun_5.(while_fun_5, current, d, levels)
        catch
          {:break, {current, d, levels}} -> {current, d, levels}
        end

      throw {:return, levels}
    catch
      {:return, val} -> val
    end
  end
  def toMarkup(n, cols, depth) do
    try do
      lines = []
      lines = (lines ++ ["{| class=\"wikitable\" style=\"text-align: center;\""])
      l1 = "|-"
      lines = (lines ++ [l1])
      span = countLeaves(n)
      lines = (lines ++ [((((("| style=\"background: " <> Enum.at(cols, 0)) <> " \" colSpan=") <> Kernel.to_string(span)) <> " | ") <> (n["name"]))])
      lines = (lines ++ [l1])
      lvls = nodesByDepth(n, depth)
      lvl = 1
      while_fun_6 = fn while_fun_6, lines, lvl, span ->
        if lvl < depth do
          nodes = Enum.at(lvls, lvl)
          {lines, span} = if _len(nodes) == 0 do
            lines = (lines ++ ["|  |"])
            {lines, span}
          else
            idx = 0
            while_fun_7 = fn while_fun_7, idx, lines, span ->
              if idx < _len(nodes) do
                node_ = Enum.at(nodes, idx)
                span = countLeaves(node_)
                col = lvl
                {col} = if lvl == 1 do
                  col = idx + 1
                  {col}
                else
                  {col}
                end
                {col} = if col >= _len(cols) do
                  col = _len(cols) - 1
                  {col}
                else
                  {col}
                end
                cell = ((((("| style=\"background: " <> Enum.at(cols, col)) <> " \" colspan=") <> Kernel.to_string(span)) <> " | ") <> (node_["name"]))
                lines = (lines ++ [cell])
                idx = idx + 1
                while_fun_7.(while_fun_7, idx, lines, span)
              else
                {idx, lines, span}
              end
            end
            {idx, lines, span} = try do
                while_fun_7.(while_fun_7, idx, lines, span)
              catch
                {:break, {idx, lines, span}} -> {idx, lines, span}
              end

            {lines, span}
          end
          {lines} = if lvl < depth - 1 do
            lines = (lines ++ [l1])
            {lines}
          else
            {lines}
          end
          lvl = lvl + 1
          while_fun_6.(while_fun_6, lines, lvl, span)
        else
          {lines, lvl, span}
        end
      end
      {lines, lvl, span} = try do
          while_fun_6.(while_fun_6, lines, lvl, span)
        catch
          {:break, {lines, lvl, span}} -> {lines, lvl, span}
        end

      lines = (lines ++ ["|}"])
      throw {:return, join(lines, "\n")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      outline = ((((((((((("Display an outline as a nested table.\n" <> "    Parse the outline to a tree,\n") <> "        measuring the indent of each line,\n") <> "        translating the indentation to a nested structure,\n") <> "        and padding the tree to even depth.\n") <> "    count the leaves descending from each node,\n") <> "        defining the width of a leaf as 1,\n") <> "        and the width of a parent node as a sum.\n") <> "            (The sum of the widths of its children)\n") <> "    and write out a table with 'colspan' values\n") <> "        either as a wiki table,\n") <> "        or as HTML.")
      yellow = "#ffffe6;"
      orange = "#ffebd2;"
      green = "#f0fff0;"
      blue = "#e6ffff;"
      pink = "#ffeeff;"
      cols = [yellow, orange, green, blue, pink]
      nodes = makeIndent(outline, 4)
      n = %{name: "", children: []}
      toNest(nodes, 0, 0, n)
      IO.puts(Kernel.inspect(toMarkup(n, cols, 4)))
      IO.puts("\n")
      outline2 = ((((((((((((("Display an outline as a nested table.\n" <> "    Parse the outline to a tree,\n") <> "        measuring the indent of each line,\n") <> "        translating the indentation to a nested structure,\n") <> "        and padding the tree to even depth.\n") <> "    count the leaves descending from each node,\n") <> "        defining the width of a leaf as 1,\n") <> "        and the width of a parent node as a sum.\n") <> "            (The sum of the widths of its children)\n") <> "            Propagating the sums upward as necessary.\n") <> "    and write out a table with 'colspan' values\n") <> "        either as a wiki table,\n") <> "        or as HTML.\n") <> "    Optionally add color to the nodes.")
      cols2 = [blue, yellow, orange, green, pink]
      nodes2 = makeIndent(outline2, 4)
      n2 = %{name: "", children: []}
      toNest(nodes2, 0, 0, n2)
      IO.puts(Kernel.inspect(toMarkup(n2, cols2, 4)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
