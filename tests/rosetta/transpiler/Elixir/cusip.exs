# Code generated by Mochi transpiler 2025-08-04 10:46 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def ord(ch) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      if ch >= "0" && ch <= "9" do
        throw {:return, String.to_integer(ch, 10) + 48}
      end
      idx = case :binary.match(upper, ch) do
  :nomatch -> -1
  t -> elem(t, 0)
end
      if idx >= 0 do
        throw {:return, 65 + idx}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def isCusip(s) do
    try do
      if _len(s) != 9 do
        throw {:return, false}
      end
      sum = 0
      i = 0
      while_fun = fn while_fun, i, sum ->
        if i < 8 do
          c = _slice(s, i, (i + 1) - i)
          v = 0
          {v} = if c >= "0" && c <= "9" do
            v = String.to_integer(c, 10)
            {v}
          else
            {v} = if c >= "A" && c <= "Z" do
              v = Main.ord(c) - 55
              {v}
            else
              {v} = if c == "*" do
                v = 36
                {v}
              else
                {v} = if c == "@" do
                  v = 37
                  {v}
                else
                  {v} = if c == "#" do
                    v = 38
                    {v}
                  else
                    throw {:return, false}
                    {v}
                  end
                  {v}
                end
                {v}
              end
              {v}
            end
            {v}
          end
          {v} = if rem(i, 2) == 1 do
            v = v * 2
            {v}
          else
            {v}
          end
          sum = sum + div(v, 10) + rem(v, 10)
          i = i + 1
          while_fun.(while_fun, i, sum)
        else
          {i, sum}
        end
      end
      {i, sum} = try do
          while_fun.(while_fun, i, sum)
        catch
          {:break, {i, sum}} -> {i, sum}
        end

      throw {:return, String.to_integer(_slice(s, 8, 9 - 8), 10) == rem((10 - (rem(sum, 10))), 10)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:candidates, ["037833100", "17275R102", "38259P508", "594918104", "68389X106", "68389X105"])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Enum.each(Process.get(:candidates), fn cand ->
      b = "incorrect"
      {b} = if Main.isCusip(cand) do
        b = "correct"
        {b}
      else
        {b}
      end
      IO.puts(((cand <> " -> ") <> b))
    end)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
