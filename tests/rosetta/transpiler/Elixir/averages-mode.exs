# Code generated by Mochi transpiler 2025-07-27 00:51 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def main() do
    arr1 = [2, 7, 1, 8, 2]
    counts1 = %{}
    keys1 = []
    i = 0
    while_fun = fn while_fun, counts1, i, keys1 ->
      if i < length(arr1) do
        v = Enum.at(arr1, i)
        if Map.has_key?(counts1, v) do
          counts1 = Map.put(counts1, v, counts1[v] + 1)
        else
          counts1 = Map.put(counts1, v, 1)
          keys1 = (keys1 ++ [v])
        end
        i = i + 1
        while_fun.(while_fun, counts1, i, keys1)
      else
        {counts1, i, keys1}
      end
    end
    {counts1, i, keys1} = try do
        while_fun.(while_fun, counts1, i, keys1)
      catch
        :break -> {counts1, i, keys1}
      end

    max1 = 0
    i = 0
    while_fun_2 = fn while_fun_2, i, max1 ->
      if i < length(keys1) do
        k = Enum.at(keys1, i)
        c = counts1[k]
        if c > max1 do
          max1 = c
        end
        i = i + 1
        while_fun_2.(while_fun_2, i, max1)
      else
        {i, max1}
      end
    end
    {i, max1} = try do
        while_fun_2.(while_fun_2, i, max1)
      catch
        :break -> {i, max1}
      end

    modes1 = []
    i = 0
    while_fun_3 = fn while_fun_3, i, modes1 ->
      if i < length(keys1) do
        k = Enum.at(keys1, i)
        if counts1[k] == max1 do
          modes1 = (modes1 ++ [k])
        end
        i = i + 1
        while_fun_3.(while_fun_3, i, modes1)
      else
        {i, modes1}
      end
    end
    {i, modes1} = try do
        while_fun_3.(while_fun_3, i, modes1)
      catch
        :break -> {i, modes1}
      end

    IO.puts(Kernel.inspect(modes1))
    arr2 = [2, 7, 1, 8, 2, 8]
    counts2 = %{}
    keys2 = []
    i = 0
    while_fun_4 = fn while_fun_4, counts2, i, keys2 ->
      if i < length(arr2) do
        v = Enum.at(arr2, i)
        if Map.has_key?(counts2, v) do
          counts2 = Map.put(counts2, v, counts2[v] + 1)
        else
          counts2 = Map.put(counts2, v, 1)
          keys2 = (keys2 ++ [v])
        end
        i = i + 1
        while_fun_4.(while_fun_4, counts2, i, keys2)
      else
        {counts2, i, keys2}
      end
    end
    {counts2, i, keys2} = try do
        while_fun_4.(while_fun_4, counts2, i, keys2)
      catch
        :break -> {counts2, i, keys2}
      end

    max2 = 0
    i = 0
    while_fun_5 = fn while_fun_5, i, max2 ->
      if i < length(keys2) do
        k = Enum.at(keys2, i)
        c = counts2[k]
        if c > max2 do
          max2 = c
        end
        i = i + 1
        while_fun_5.(while_fun_5, i, max2)
      else
        {i, max2}
      end
    end
    {i, max2} = try do
        while_fun_5.(while_fun_5, i, max2)
      catch
        :break -> {i, max2}
      end

    modes2 = []
    i = 0
    while_fun_6 = fn while_fun_6, i, modes2 ->
      if i < length(keys2) do
        k = Enum.at(keys2, i)
        if counts2[k] == max2 do
          modes2 = (modes2 ++ [k])
        end
        i = i + 1
        while_fun_6.(while_fun_6, i, modes2)
      else
        {i, modes2}
      end
    end
    {i, modes2} = try do
        while_fun_6.(while_fun_6, i, modes2)
      catch
        :break -> {i, modes2}
      end

    IO.puts(Kernel.inspect(modes2))
  end
end
Main.main()
