# Code generated by Mochi transpiler 2025-07-27 05:40 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def indexOf(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < String.length(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          :break -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def parseIntStr(str) do
    try do
      i = 0
      neg = false
      {i, neg} = if String.length(str) > 0 && String.at(str, 0) == "-" do
        neg = true
        i = 1
        {i, neg}
      else
        {i, neg}
      end
      n = 0
      digits = %{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
      while_fun_2 = fn while_fun_2, i, n ->
        if i < String.length(str) do
          n = n * 10 + digits[String.at(str, i)]
          i = i + 1
          while_fun_2.(while_fun_2, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_2.(while_fun_2, i, n)
        catch
          :break -> {i, n}
        end

      {n} = if neg do
        n = -n
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def ord(ch) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      idx = Main.indexOf(upper, ch)
      if idx >= 0 do
        throw {:return, 65 + idx}
      end
      idx = Main.indexOf(lower, ch)
      if idx >= 0 do
        throw {:return, 97 + idx}
      end
      if ch >= "0" && ch <= "9" do
        throw {:return, 48 + Main.parseIntStr(ch)}
      end
      if ch == "+" do
        throw {:return, 43}
      end
      if ch == "/" do
        throw {:return, 47}
      end
      if ch == " " do
        throw {:return, 32}
      end
      if ch == "=" do
        throw {:return, 61}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def chr(n) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      if n >= 65 && n < 91 do
        throw {:return, _slice(upper, n - 65, (n - 64) - (n - 65))}
      end
      if n >= 97 && n < 123 do
        throw {:return, _slice(lower, n - 97, (n - 96) - (n - 97))}
      end
      if n >= 48 && n < 58 do
        digits = "0123456789"
        throw {:return, String.slice(digits, n - 48, (n - 47) - (n - 48))}
      end
      if n == 43 do
        throw {:return, "+"}
      end
      if n == 47 do
        throw {:return, "/"}
      end
      if n == 32 do
        throw {:return, " "}
      end
      if n == 61 do
        throw {:return, "="}
      end
      throw {:return, "?"}
    catch
      {:return, val} -> val
    end
  end
  def toBinary(n, bits) do
    try do
      b = ""
      val = n
      i = 0
      while_fun_3 = fn while_fun_3, b, i, val ->
        if i < bits do
          b = (Kernel.to_string(rem(val, 2)) <> b)
          val = trunc((div(val, 2)))
          i = i + 1
          while_fun_3.(while_fun_3, b, i, val)
        else
          {b, i, val}
        end
      end
      {b, i, val} = try do
          while_fun_3.(while_fun_3, b, i, val)
        catch
          :break -> {b, i, val}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def binToInt(bits) do
    try do
      n = 0
      i = 0
      while_fun_4 = fn while_fun_4, i, n ->
        if i < String.length(bits) do
          n = n * 2 + Main.parseIntStr(String.slice(bits, i, (i + 1) - i))
          i = i + 1
          while_fun_4.(while_fun_4, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_4.(while_fun_4, i, n)
        catch
          :break -> {i, n}
        end

      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def base64Encode(text) do
    try do
      alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
      bin = ""
      {bin} = Enum.reduce(String.graphemes(text), {bin}, fn ch, {bin} ->
        bin = (bin <> Main.toBinary(Main.ord(ch), 8))
        {bin}
      end)
      while_fun_5 = fn while_fun_5, bin ->
        if rem(String.length(bin), 6) != 0 do
          bin = (bin <> "0")
          while_fun_5.(while_fun_5, bin)
        else
          bin
        end
      end
      bin = try do
          while_fun_5.(while_fun_5, bin)
        catch
          :break -> bin
        end

      out = ""
      i = 0
      while_fun_6 = fn while_fun_6, i, out ->
        if i < String.length(bin) do
          chunk = String.slice(bin, i, (i + 6) - i)
          val = Main.binToInt(chunk)
          out = (out <> String.slice(alphabet, val, (val + 1) - val))
          i = i + 6
          while_fun_6.(while_fun_6, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_6.(while_fun_6, i, out)
        catch
          :break -> {i, out}
        end

      pad = rem((3 - (rem(String.length(text), 3))), 3)
      {out} = if pad == 1 do
        out = (String.slice(out, 0, (String.length(out) - 1) - 0) <> "=")
        {out}
      else
        {out}
      end
      {out} = if pad == 2 do
        out = (String.slice(out, 0, (String.length(out) - 2) - 0) <> "==")
        {out}
      else
        {out}
      end
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def base64Decode(enc) do
    try do
      alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
      bin = ""
      i = 0
      while_fun_7 = fn while_fun_7, bin, i ->
        if i < String.length(enc) do
          ch = String.at(enc, i)
          if ch == "=" do
            throw :break
          end
          idx = Main.indexOf(alphabet, ch)
          bin = (bin <> Main.toBinary(idx, 6))
          i = i + 1
          while_fun_7.(while_fun_7, bin, i)
        else
          {bin, i}
        end
      end
      {bin, i} = try do
          while_fun_7.(while_fun_7, bin, i)
        catch
          :break -> {bin, i}
        end

      out = ""
      i = 0
      while_fun_8 = fn while_fun_8, i, out ->
        if i + 8 <= String.length(bin) do
          chunk = String.slice(bin, i, (i + 8) - i)
          val = Main.binToInt(chunk)
          out = (out <> Main.chr(val))
          i = i + 8
          while_fun_8.(while_fun_8, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_8.(while_fun_8, i, out)
        catch
          :break -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:msg, "Rosetta Code Base64 decode data task")
  def main() do
    IO.puts(("Original : " <> Process.get(:msg)))
    Process.put(:enc, Main.base64Encode(Process.get(:msg)))
    IO.puts(("\nEncoded  : " <> Process.get(:enc)))
    Process.put(:dec, Main.base64Decode(Process.get(:enc)))
    IO.puts(("\nDecoded  : " <> Process.get(:dec)))
  end
end
Main.main()
