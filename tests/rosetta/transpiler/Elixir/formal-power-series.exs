# Code generated by Mochi transpiler 2025-08-01 17:51 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def newFps(fn_) do
    try do
      throw {:return, %{coeffs: [], compute: fn_}}
    catch
      {:return, val} -> val
    end
  end
  def extract(f, n) do
    try do
      while_fun = fn while_fun, f ->
        if _len(Map.get(f, :coeffs, [])) <= n do
          idx = _len(Map.get(f, :coeffs, []))
          v = f.compute.(idx)
          f = Map.put(f, :coeffs, (f.coeffs ++ [v]))
          while_fun.(while_fun, f)
        else
          f
        end
      end
      f = try do
          while_fun.(while_fun, f)
        catch
          {:break, f} -> f
        end

      throw {:return, Enum.at(f.coeffs, n)}
    catch
      {:return, val} -> val
    end
  end
  def one() do
    try do
      throw {:return, Main.newFps(fn i ->
  if i == 0 do
    throw {:return, 1.0}
  end
  throw {:return, 0.0}
end)}
    catch
      {:return, val} -> val
    end
  end
  def add(a, b) do
    try do
      throw {:return, Main.newFps(fn n ->
  throw {:return, Main.extract(a, n) + Main.extract(b, n)}
end)}
    catch
      {:return, val} -> val
    end
  end
  def sub(a, b) do
    try do
      throw {:return, Main.newFps(fn n ->
  throw {:return, Main.extract(a, n) - Main.extract(b, n)}
end)}
    catch
      {:return, val} -> val
    end
  end
  def mul(a, b) do
    try do
      throw {:return, Main.newFps(fn n ->
  s = 0.0
  k = 0
  while_fun_2 = fn while_fun_2, k, s ->
    if k <= n do
      s = s + Main.extract(a, k) * Main.extract(b, n - k)
      k = k + 1
      while_fun_2.(while_fun_2, k, s)
    else
      {k, s}
    end
  end
  {k, s} = try do
      while_fun_2.(while_fun_2, k, s)
    catch
      {:break, {k, s}} -> {k, s}
    end

  throw {:return, s}
end)}
    catch
      {:return, val} -> val
    end
  end
  def div_(a, b) do
    try do
      q = Main.newFps(fn n ->
  throw {:return, 0.0}
end)
      q = Map.put(q, :compute, fn n ->
  b0 = Main.extract(b, 0)
  if b0 == 0.0 do
    throw {:return, (0.0 / 0.0)}
  end
  s = Main.extract(a, n)
  k = 1
  while_fun_3 = fn while_fun_3, k, s ->
    if k <= n do
      s = s - Main.extract(b, k) * Main.extract(q, n - k)
      k = k + 1
      while_fun_3.(while_fun_3, k, s)
    else
      {k, s}
    end
  end
  {k, s} = try do
      while_fun_3.(while_fun_3, k, s)
    catch
      {:break, {k, s}} -> {k, s}
    end

  throw {:return, s / b0}
end)
      throw {:return, q}
    catch
      {:return, val} -> val
    end
  end
  def differentiate(a) do
    try do
      throw {:return, Main.newFps(fn n ->
  throw {:return, ((n + 1)) * Main.extract(a, n + 1)}
end)}
    catch
      {:return, val} -> val
    end
  end
  def integrate(a) do
    try do
      throw {:return, Main.newFps(fn n ->
  if n == 0 do
    throw {:return, 0.0}
  end
  throw {:return, Main.extract(a, n - 1) / (n)}
end)}
    catch
      {:return, val} -> val
    end
  end
  def sinCos() do
    try do
      sin = Main.newFps(fn n ->
  throw {:return, 0.0}
end)
      cos = Main.sub(Main.one(), Main.integrate(sin))
      sin = Map.put(sin, :compute, fn n ->
  if n == 0 do
    throw {:return, 0.0}
  end
  throw {:return, Main.extract(cos, n - 1) / (n)}
end)
      throw {:return, %{sin: sin, cos: cos}}
    catch
      {:return, val} -> val
    end
  end
  def floorf(x) do
    try do
      y = trunc(x)
      throw {:return, y}
    catch
      {:return, val} -> val
    end
  end
  def fmtF5(x) do
    try do
      y = Main.floorf(x * 100000.0 + 0.5) / 100000.0
      s = Kernel.to_string(y)
      dot = case :binary.match(s, ".") do
  :nomatch -> -1
  t -> elem(t, 0)
end
      {s} = if dot == 0 - 1 do
        s = (s <> ".00000")
        {s}
      else
        decs = _len(s) - dot - 1
        {decs, s} = if decs > 5 do
          s = _slice(s, 0, dot + 6 - (0))
          {decs, s}
        else
          while_fun_4 = fn while_fun_4, decs, s ->
            if decs < 5 do
              s = (s <> "0")
              decs = decs + 1
              while_fun_4.(while_fun_4, decs, s)
            else
              {decs, s}
            end
          end
          {decs, s} = try do
              while_fun_4.(while_fun_4, decs, s)
            catch
              {:break, {decs, s}} -> {decs, s}
            end

          {decs, s}
        end
        {s}
      end
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def padFloat5(x, width) do
    try do
      s = Main.fmtF5(x)
      while_fun_5 = fn while_fun_5, s ->
        if _len(s) < width do
          s = (" " <> s)
          while_fun_5.(while_fun_5, s)
        else
          s
        end
      end
      s = try do
          while_fun_5.(while_fun_5, s)
        catch
          {:break, s} -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def partialSeries(f) do
    try do
      out = ""
      i = 0
      while_fun_6 = fn while_fun_6, i, out ->
        if i < 6 do
          out = (((out <> " ") <> Main.padFloat5(Main.extract(f, i), 8)) <> " ")
          i = i + 1
          while_fun_6.(while_fun_6, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_6.(while_fun_6, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      p = Main.sinCos()
      IO.puts(("sin:" <> Main.partialSeries(p.sin)))
      IO.puts(("cos:" <> Main.partialSeries(p.cos)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
