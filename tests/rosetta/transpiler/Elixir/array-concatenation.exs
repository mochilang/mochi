# Code generated by Mochi transpiler 2025-07-26 19:45 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def concatInts(a, b) do
    try do
      out = []
      {out} = Enum.reduce(a, {out}, fn v, {out} ->
        out = (out ++ [v])
        {out}
      end)
      {out} = Enum.reduce(b, {out}, fn v, {out} ->
        out = (out ++ [v])
        {out}
      end)
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def concatAny(a, b) do
    try do
      out = []
      {out} = Enum.reduce(a, {out}, fn v, {out} ->
        out = (out ++ [v])
        {out}
      end)
      {out} = Enum.reduce(b, {out}, fn v, {out} ->
        out = (out ++ [v])
        {out}
      end)
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:a, [1, 2, 3])
  Process.put(:b, [7, 12, 60])
  Process.put(:i, [1, 2, 3])
  Process.put(:j, ["Crosby", "Stills", "Nash", "Young"])
  Process.put(:l, [1, 2, 3])
  Process.put(:m, [7, 12, 60])
  def main() do
    mem_start = _mem()
    t_start = _now()
    IO.puts(to_string(Main.concatInts(Process.get(:a), Process.get(:b))))
    IO.puts(to_string(Main.concatAny(Process.get(:i), Process.get(:j))))
    IO.puts(to_string(Main.concatInts(Process.get(:l), Process.get(:m))))
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
