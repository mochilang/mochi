# Code generated by Mochi transpiler 2025-08-04 10:46 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def padLeft(n, width) do
    try do
      s = Kernel.to_string(n)
      while_fun = fn while_fun, s ->
        if _len(s) < width do
          s = (" " <> s)
          while_fun.(while_fun, s)
        else
          s
        end
      end
      s = try do
          while_fun.(while_fun, s)
        catch
          {:break, s} -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def modPow(base, exp, mod) do
    try do
      result = rem(1, mod)
      b = rem(base, mod)
      e = exp
      while_fun_2 = fn while_fun_2, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = rem((result * b), mod)
            {result}
          else
            {result}
          end
          b = rem((b * b), mod)
          e = div(e, 2)
          while_fun_2.(while_fun_2, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun_2.(while_fun_2, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      k = 2
      while_fun_3 = fn while_fun_3, k ->
        if k <= 10 do
          IO.puts((("The first 50 Curzon numbers using a base of " <> Kernel.to_string(k)) <> " :"))
          count = 0
          n = 1
          curzon50 = []
          while_fun_4 = fn while_fun_4, count, curzon50, n ->
            if true do
              d = k * n + 1
              {count, curzon50} = if rem((Main.modPow(k, n, d) + 1), d) == 0 do
                {curzon50} = if count < 50 do
                  curzon50 = (curzon50 ++ [n])
                  {curzon50}
                else
                  {curzon50}
                end
                count = count + 1
                if count == 50 do
                  idx = 0
                  while_fun_5 = fn while_fun_5, idx ->
                    if idx < _len(curzon50) do
                      line = ""
                      j = 0
                      while_fun_6 = fn while_fun_6, idx, j, line ->
                        if j < 10 do
                          line = ((line <> Main.padLeft(Enum.at(curzon50, idx), 4)) <> " ")
                          idx = idx + 1
                          j = j + 1
                          while_fun_6.(while_fun_6, idx, j, line)
                        else
                          {idx, j, line}
                        end
                      end
                      {idx, j, line} = try do
                          while_fun_6.(while_fun_6, idx, j, line)
                        catch
                          {:break, {idx, j, line}} -> {idx, j, line}
                        end

                      IO.puts(Kernel.inspect(_slice(line, 0, _len(line) - 1 - (0))))
                      while_fun_5.(while_fun_5, idx)
                    else
                      idx
                    end
                  end
                  idx = try do
                      while_fun_5.(while_fun_5, idx)
                    catch
                      {:break, idx} -> idx
                    end

                end
                if count == 1000 do
                  IO.puts(("\nOne thousandth: " <> Kernel.to_string(n)))
                  throw {:break, {count, curzon50, n}}
                end
                {count, curzon50}
              else
                {count, curzon50}
              end
              n = n + 1
              while_fun_4.(while_fun_4, count, curzon50, n)
            else
              {count, curzon50, n}
            end
          end
          {count, curzon50, n} = try do
              while_fun_4.(while_fun_4, count, curzon50, n)
            catch
              {:break, {count, curzon50, n}} -> {count, curzon50, n}
            end

          IO.puts("")
          k = k + 2
          while_fun_3.(while_fun_3, k)
        else
          k
        end
      end
      k = try do
          while_fun_3.(while_fun_3, k)
        catch
          {:break, k} -> k
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
