# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def newBitmap(w, h, max) do
    try do
      rows = []
      y = 0
      while_fun = fn while_fun, rows, y ->
        if y < h do
          row = []
          x = 0
          while_fun_2 = fn while_fun_2, row, x ->
            if x < w do
              row = (row ++ [%{R: 0, G: 0, B: 0}])
              x = x + 1
              while_fun_2.(while_fun_2, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_2.(while_fun_2, row, x)
            catch
              :break -> {row, x}
            end

          rows = (rows ++ [row])
          y = y + 1
          while_fun.(while_fun, rows, y)
        else
          {rows, y}
        end
      end
      {rows, y} = try do
          while_fun.(while_fun, rows, y)
        catch
          :break -> {rows, y}
        end

      throw {:return, %{w: w, h: h, max: max, data: rows}}
    catch
      {:return, val} -> val
    end
  end
  def setPx(b, x, y, p) do
    try do
      rows = b.data
      row = Enum.at(rows, y)
      row = List.replace_at(row, x, p)
      rows = List.replace_at(rows, y, row)
      b = Map.put(b, :data, rows)
    catch
      {:return, val} -> val
    end
  end
  def getPx(b, x, y) do
    try do
      throw {:return, Enum.at(Enum.at(b.data, y), x)}
    catch
      {:return, val} -> val
    end
  end
  def splitLines(s) do
    try do
      out = []
      cur = ""
      i = 0
      while_fun_3 = fn while_fun_3, cur, i ->
        if i < _len(s) do
          ch = substr.(s, i, i + 1)
          {cur} = if ch == "\n" do
            out = (out ++ [cur])
            cur = ""
            {cur}
          else
            cur = (cur <> ch)
            {cur}
          end
          i = i + 1
          while_fun_3.(while_fun_3, cur, i)
        else
          {cur, i}
        end
      end
      {cur, i} = try do
          while_fun_3.(while_fun_3, cur, i)
        catch
          :break -> {cur, i}
        end

      out = (out ++ [cur])
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def splitWS(s) do
    try do
      out = []
      cur = ""
      i = 0
      while_fun_4 = fn while_fun_4, cur, i ->
        if i < _len(s) do
          ch = substr.(s, i, i + 1)
          {cur} = if ch == " " || ch == "\t" || ch == "\r" || ch == "\n" do
            {cur} = if _len(cur) > 0 do
              out = (out ++ [cur])
              cur = ""
              {cur}
            else
              {cur}
            end
            {cur}
          else
            cur = (cur <> ch)
            {cur}
          end
          i = i + 1
          while_fun_4.(while_fun_4, cur, i)
        else
          {cur, i}
        end
      end
      {cur, i} = try do
          while_fun_4.(while_fun_4, cur, i)
        catch
          :break -> {cur, i}
        end

      if _len(cur) > 0 do
        out = (out ++ [cur])
      end
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def parseIntStr(str) do
    try do
      i = 0
      neg = false
      {i, neg} = if _len(str) > 0 && _slice(str, 0, 1 - 0) == "-" do
        neg = true
        i = 1
        {i, neg}
      else
        {i, neg}
      end
      n = 0
      digits = %{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
      while_fun_5 = fn while_fun_5, i, n ->
        if i < _len(str) do
          n = n * 10 + digits[_slice(str, i, (i + 1) - i)]
          i = i + 1
          while_fun_5.(while_fun_5, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_5.(while_fun_5, i, n)
        catch
          :break -> {i, n}
        end

      {n} = if neg do
        n = -n
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def tokenize(s) do
    try do
      lines = Main.splitLines(s)
      toks = []
      i = 0
      while_fun_6 = fn while_fun_6, i, toks ->
        if i < _len(lines) do
          try do
            line = Enum.at(lines, i)
            {i} = if _len(line) > 0 && substr.(line, 0, 1) == "#" do
              i = i + 1
              throw :continue
              {i}
            else
              {i}
            end
            parts = Main.splitWS(line)
            j = 0
            while_fun_7 = fn while_fun_7, j, toks ->
              if j < _len(parts) do
                toks = (toks ++ [Enum.at(parts, j)])
                j = j + 1
                while_fun_7.(while_fun_7, j, toks)
              else
                {j, toks}
              end
            end
            {j, toks} = try do
                while_fun_7.(while_fun_7, j, toks)
              catch
                :break -> {j, toks}
              end

            i = i + 1
          catch
            :continue -> nil
          end
          while_fun_6.(while_fun_6, i, toks)
        else
          {i, toks}
        end
      end
      {i, toks} = try do
          while_fun_6.(while_fun_6, i, toks)
        catch
          :break -> {i, toks}
        end

      throw {:return, toks}
    catch
      {:return, val} -> val
    end
  end
  def readP3(text) do
    try do
      toks = Main.tokenize(text)
      if _len(toks) < 4 do
        throw {:return, Main.newBitmap(0, 0, 0)}
      end
      if Enum.at(toks, 0) != "P3" do
        throw {:return, Main.newBitmap(0, 0, 0)}
      end
      w = Main.parseIntStr(Enum.at(toks, 1))
      h = Main.parseIntStr(Enum.at(toks, 2))
      maxv = Main.parseIntStr(Enum.at(toks, 3))
      idx = 4
      bm = Main.newBitmap(w, h, maxv)
      y = h - 1
      while_fun_8 = fn while_fun_8, idx, y ->
        if y >= 0 do
          x = 0
          while_fun_9 = fn while_fun_9, idx, x ->
            if x < w do
              r = Main.parseIntStr(Enum.at(toks, idx))
              g = Main.parseIntStr(Enum.at(toks, idx + 1))
              b = Main.parseIntStr(Enum.at(toks, idx + 2))
              Main.setPx(bm, x, y, %{R: r, G: g, B: b})
              idx = idx + 3
              x = x + 1
              while_fun_9.(while_fun_9, idx, x)
            else
              {idx, x}
            end
          end
          {idx, x} = try do
              while_fun_9.(while_fun_9, idx, x)
            catch
              :break -> {idx, x}
            end

          y = y - 1
          while_fun_8.(while_fun_8, idx, y)
        else
          {idx, y}
        end
      end
      {idx, y} = try do
          while_fun_8.(while_fun_8, idx, y)
        catch
          :break -> {idx, y}
        end

      throw {:return, bm}
    catch
      {:return, val} -> val
    end
  end
  def toGrey(b) do
    try do
      h = b.h
      w = b.w
      m = 0
      y = 0
      while_fun_10 = fn while_fun_10, m, y ->
        if y < h do
          x = 0
          while_fun_11 = fn while_fun_11, m, x ->
            if x < w do
              p = Main.getPx(b, x, y)
              l = div((p[:R] * 2126 + p[:G] * 7152 + p[:B] * 722), 10000)
              {l} = if l > b.max do
                l = b.max
                {l}
              else
                {l}
              end
              Main.setPx(b, x, y, %{R: l, G: l, B: l})
              {m} = if l > m do
                m = l
                {m}
              else
                {m}
              end
              x = x + 1
              while_fun_11.(while_fun_11, m, x)
            else
              {m, x}
            end
          end
          {m, x} = try do
              while_fun_11.(while_fun_11, m, x)
            catch
              :break -> {m, x}
            end

          y = y + 1
          while_fun_10.(while_fun_10, m, y)
        else
          {m, y}
        end
      end
      {m, y} = try do
          while_fun_10.(while_fun_10, m, y)
        catch
          :break -> {m, y}
        end

      b = Map.put(b, :max, m)
    catch
      {:return, val} -> val
    end
  end
  def pad(n, w) do
    try do
      s = Kernel.to_string(n)
      while_fun_12 = fn while_fun_12, s ->
        if _len(s) < w do
          s = (" " <> s)
          while_fun_12.(while_fun_12, s)
        else
          s
        end
      end
      s = try do
          while_fun_12.(while_fun_12, s)
        catch
          :break -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def writeP3(b) do
    try do
      h = b.h
      w = b.w
      max = b.max
      digits = _len(Kernel.inspect(max))
      out = (((((("P3\n# generated from Bitmap.writeppmp3\n" <> Kernel.to_string(w)) <> " ") <> Kernel.to_string(h)) <> "\n") <> Kernel.inspect(max)) <> "\n")
      y = h - 1
      while_fun_13 = fn while_fun_13, y ->
        if y >= 0 do
          line = ""
          x = 0
          while_fun_14 = fn while_fun_14, line, x ->
            if x < w do
              p = Main.getPx(b, x, y)
              line = ((((((line <> "   ") <> Main.pad(p[:R], digits)) <> " ") <> Main.pad(p[:G], digits)) <> " ") <> Main.pad(p[:B], digits))
              x = x + 1
              while_fun_14.(while_fun_14, line, x)
            else
              {line, x}
            end
          end
          {line, x} = try do
              while_fun_14.(while_fun_14, line, x)
            catch
              :break -> {line, x}
            end

          out = ((out <> line) <> "\n")
          y = y - 1
          while_fun_13.(while_fun_13, y)
        else
          y
        end
      end
      y = try do
          while_fun_13.(while_fun_13, y)
        catch
          :break -> y
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    mem_start = _mem()
    t_start = _now()
    Process.put(:ppmtxt, ((((((("P3\n" <> "# feep.ppm\n") <> "4 4\n") <> "15\n") <> " 0  0  0    0  0  0    0  0  0   15  0 15\n") <> " 0  0  0    0 15  7    0  0  0    0  0  0\n") <> " 0  0  0    0  0  0    0 15  7    0  0  0\n") <> "15  0 15    0  0  0    0  0  0    0  0  0\n"))
    IO.puts("Original Colour PPM file")
    IO.puts(Process.get(:ppmtxt))
    Process.put(:bm, Main.readP3(Process.get(:ppmtxt)))
    IO.puts("Grey PPM:")
    Main.toGrey(Process.get(:bm))
    Process.put(:out, Main.writeP3(Process.get(:bm)))
    IO.puts(Process.get(:out))
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
