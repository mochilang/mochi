# Code generated by Mochi transpiler 2025-07-31 00:20 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def indexOf(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if _slice(s, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, i} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def floorf(x) do
    try do
      y = trunc(x)
      throw {:return, y}
    catch
      {:return, val} -> val
    end
  end
  def powf(base, exp) do
    try do
      r = 1.0
      i = 0
      while_fun_2 = fn while_fun_2, i, r ->
        if i < exp do
          r = r * base
          i = i + 1
          while_fun_2.(while_fun_2, i, r)
        else
          {i, r}
        end
      end
      {i, r} = try do
          while_fun_2.(while_fun_2, i, r)
        catch
          {:break, {i, r}} -> {i, r}
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def fmtF(x, width, prec) do
    try do
      factor = Main.powf(10.0, prec)
      y = Main.floorf(x * factor + 0.5) / factor
      s = Kernel.to_string(y)
      dot = Main.indexOf(s, ".")
      {s} = if dot == 0 - 1 do
        s = (s <> ".")
        j = 0
        while_fun_3 = fn while_fun_3, j, s ->
          if j < prec do
            s = (s <> "0")
            j = j + 1
            while_fun_3.(while_fun_3, j, s)
          else
            {j, s}
          end
        end
        {j, s} = try do
            while_fun_3.(while_fun_3, j, s)
          catch
            {:break, {j, s}} -> {j, s}
          end

        {s}
      else
        decs = _len(s) - dot - 1
        while_fun_4 = fn while_fun_4, decs, s ->
          if decs < prec do
            s = (s <> "0")
            decs = decs + 1
            while_fun_4.(while_fun_4, decs, s)
          else
            {decs, s}
          end
        end
        {decs, s} = try do
            while_fun_4.(while_fun_4, decs, s)
          catch
            {:break, {decs, s}} -> {decs, s}
          end

        {s}
      end
      while_fun_5 = fn while_fun_5, s ->
        if _len(s) < width do
          s = (" " <> s)
          while_fun_5.(while_fun_5, s)
        else
          s
        end
      end
      s = try do
          while_fun_5.(while_fun_5, s)
        catch
          {:break, s} -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def expf(x) do
    try do
      if x < 0.0 do
        throw {:return, 1.0 / Main.expf(-x)}
      end
      term = 1.0
      sum = 1.0
      i = 1
      while_fun_6 = fn while_fun_6, i, sum, term ->
        if i < 20 do
          term = term * x / (i)
          sum = sum + term
          i = i + 1
          while_fun_6.(while_fun_6, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun_6.(while_fun_6, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def eulerStep(f, x, y, h) do
    try do
      throw {:return, y + h * f.(x, y)}
    catch
      {:return, val} -> val
    end
  end
  def newCoolingRate(k) do
    try do
      throw {:return, fn dt ->
  throw {:return, -k * dt}
end}
    catch
      {:return, val} -> val
    end
  end
  def newTempFunc(k, ambient, initial) do
    try do
      throw {:return, fn t ->
  throw {:return, ambient + (initial - ambient) * Main.expf(-k * t)}
end}
    catch
      {:return, val} -> val
    end
  end
  def newCoolingRateDy(k, ambient) do
    try do
      cr = Main.newCoolingRate(k)
      throw {:return, fn _x, obj ->
  throw {:return, cr.(obj - ambient)}
end}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      k = 0.07
      tempRoom = 20.0
      tempObject = 100.0
      fcr = Main.newCoolingRateDy(k, tempRoom)
      analytic = Main.newTempFunc(k, tempRoom, tempObject)
      Enum.each([2.0, 5.0, 10.0], fn step ->
        IO.puts(("Step size = " <> Main.fmtF(step, 0, 1)))
        IO.puts(" Time Euler's Analytic")
        temp = tempObject
        time = 0.0
        while_fun_7 = fn while_fun_7, temp, time ->
          if time <= 100.0 do
            line = ((((Main.fmtF(time, 5, 1) <> " ") <> Main.fmtF(temp, 7, 3)) <> " ") <> Main.fmtF(analytic.(time), 7, 3))
            IO.puts(line)
            temp = Main.eulerStep(fcr, time, temp, step)
            time = time + step
            while_fun_7.(while_fun_7, temp, time)
          else
            {temp, time}
          end
        end
        {temp, time} = try do
            while_fun_7.(while_fun_7, temp, time)
          catch
            {:break, {temp, time}} -> {temp, time}
          end

        IO.puts("")
      end)
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
