# Code generated by Mochi transpiler 2025-07-27 05:59 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  defp _len(x) do
    (if is_binary(x), do: String.length(x), else: length(x))
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def char(n) do
    try do
      letters = "abcdefghijklmnopqrstuvwxyz"
      idx = n - 97
      if idx < 0 || idx >= String.length(letters) do
        throw {:return, "?"}
      end
      throw {:return, String.slice(letters, idx, idx + 1 - (idx))}
    catch
      {:return, val} -> val
    end
  end
  def fromBytes(bs) do
    try do
      s = ""
      i = 0
      while_fun = fn while_fun, s ->
        if i < _len(bs) do
          s = (s <> Main.char(Enum.at(bs, i)))
          i = i + 1
          while_fun.(while_fun, s)
        else
          s
        end
      end
      s = try do
          while_fun.(while_fun, s)
        catch
          :break -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:b, [98, 105, 110, 97, 114, 121])
  Process.put(:d, [])
  Process.put(:i, 0)
  Process.put(:f, [])
  Process.put(:rem, [])
  def main() do
    IO.puts(Kernel.inspect(Process.get(:b)))
    Process.put(:c, Process.get(:b))
    IO.puts(Kernel.inspect(Process.get(:c)))
    IO.puts(Kernel.inspect(Process.get(:b) == Process.get(:c)))
    while_fun_2 = fn while_fun_2 ->
      if Process.get(:i) < _len(Process.get(:b)) do
        Process.put(:d, (Process.get(:d) ++ [Enum.at(Process.get(:b), Process.get(:i))]))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_2.(while_fun_2)
      else
        nil
      end
    end
    try do
      while_fun_2.(while_fun_2)
    catch
      :break -> nil
    end

    Process.put(:d, List.replace_at(Process.get(:d), 1, 97))
    Process.put(:d, List.replace_at(Process.get(:d), 4, 110))
    IO.puts(Kernel.inspect(Main.fromBytes(Process.get(:b))))
    IO.puts(Kernel.inspect(Main.fromBytes(Process.get(:d))))
    IO.puts(Kernel.inspect(_len(Process.get(:b)) == 0))
    Process.put(:z, (Process.get(:b) ++ [122]))
    IO.puts(Kernel.inspect(Main.fromBytes(Process.get(:z))))
    Process.put(:sub, _slice(Process.get(:b), 1, 3 - 1))
    IO.puts(Kernel.inspect(Main.fromBytes(Process.get(:sub))))
    Process.put(:i, 0)
    while_fun_3 = fn while_fun_3 ->
      if Process.get(:i) < _len(Process.get(:d)) do
        val = Enum.at(Process.get(:d), Process.get(:i))
        Process.put(:f, (if val == 110, do: (Process.get(:f) ++ [109]), else: (Process.get(:f) ++ [val])))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_3.(while_fun_3)
      else
        nil
      end
    end
    try do
      while_fun_3.(while_fun_3)
    catch
      :break -> nil
    end

    IO.puts(Kernel.inspect(((Main.fromBytes(Process.get(:d)) <> " -> ") <> Main.fromBytes(Process.get(:f)))))
    Process.put(:rem, (Process.get(:rem) ++ [Enum.at(Process.get(:b), 0)]))
    Process.put(:i, 3)
    while_fun_4 = fn while_fun_4 ->
      if Process.get(:i) < _len(Process.get(:b)) do
        Process.put(:rem, (Process.get(:rem) ++ [Enum.at(Process.get(:b), Process.get(:i))]))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_4.(while_fun_4)
      else
        nil
      end
    end
    try do
      while_fun_4.(while_fun_4)
    catch
      :break -> nil
    end

    IO.puts(Kernel.inspect(Main.fromBytes(Process.get(:rem))))
  end
end
Main.main()
