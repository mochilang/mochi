# Code generated by Mochi transpiler 2025-08-04 11:46 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def isLeap(y) do
    try do
      if rem(y, 400) == 0 do
        throw {:return, true}
      end
      if rem(y, 100) == 0 do
        throw {:return, false}
      end
      throw {:return, rem(y, 4) == 0}
    catch
      {:return, val} -> val
    end
  end
  def dayOfYear(y, m, d) do
    try do
      doy = Enum.at(Process.get(:daysBefore), m - 1) + d
      {doy} = if m > 2 && isLeap(y) do
        doy = doy + 1
        {doy}
      else
        {doy}
      end
      throw {:return, doy}
    catch
      {:return, val} -> val
    end
  end
  def ordinal(n) do
    try do
      suff = "th"
      mod100 = rem(n, 100)
      {suff} = if mod100 < 11 || mod100 > 13 do
        r = rem(n, 10)
        {suff} = if r == 1 do
          suff = "st"
          {suff}
        else
          {suff} = if r == 2 do
            suff = "nd"
            {suff}
          else
            {suff} = if r == 3 do
              suff = "rd"
              {suff}
            else
              {suff}
            end
            {suff}
          end
          {suff}
        end
        {suff}
      else
        {suff}
      end
      throw {:return, (Kernel.to_string(n) <> suff)}
    catch
      {:return, val} -> val
    end
  end
  def discordian(y, m, d) do
    try do
      if isLeap(y) && m == 2 && d == 29 do
        throw {:return, ("St. Tib's Day, YOLD " <> Kernel.to_string(y + 1166))}
      end
      doy = dayOfYear(y, m, d)
      {doy} = if isLeap(y) && doy > 60 do
        doy = doy - 1
        {doy}
      else
        {doy}
      end
      idx = doy - 1
      season = div(idx, 73)
      day = rem(idx, 73)
      res = ((((((Enum.at(Process.get(:dayNames), rem(idx, 5)) <> ", the ") <> ordinal(day + 1)) <> " day of ") <> Enum.at(Process.get(:seasons), season)) <> " in the YOLD ") <> Kernel.to_string(y + 1166))
      {res} = if day == 4 do
        res = (((res <> ". Celebrate ") <> Enum.at(Enum.at(Process.get(:holydays), season), 0)) <> "!")
        {res}
      else
        {res}
      end
      {res} = if day == 49 do
        res = (((res <> ". Celebrate ") <> Enum.at(Enum.at(Process.get(:holydays), season), 1)) <> "!")
        {res}
      else
        {res}
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      dates = [[2010, 7, 22], [2012, 2, 28], [2012, 2, 29], [2012, 3, 1], [2012, 12, 31], [2013, 1, 1], [2100, 12, 31], [2015, 10, 19], [2010, 1, 5], [2011, 5, 3], [2000, 3, 13]]
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(dates) do
          dt = Enum.at(dates, i)
          IO.puts(Kernel.inspect(discordian(Enum.at(dt, 0), Enum.at(dt, 1), Enum.at(dt, 2))))
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, i} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:dayNames, ["Sweetmorn", "Boomtime", "Pungenday", "Prickle-Prickle", "Setting Orange"])
  Process.put(:seasons, ["Chaos", "Discord", "Confusion", "Bureaucracy", "The Aftermath"])
  Process.put(:holydays, [["Mungday", "Chaoflux"], ["Mojoday", "Discoflux"], ["Syaday", "Confuflux"], ["Zaraday", "Bureflux"], ["Maladay", "Afflux"]])
  Process.put(:daysBefore, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334])
  def bench_main() do
    Process.put(:dayNames, ["Sweetmorn", "Boomtime", "Pungenday", "Prickle-Prickle", "Setting Orange"])
    Process.put(:seasons, ["Chaos", "Discord", "Confusion", "Bureaucracy", "The Aftermath"])
    Process.put(:holydays, [["Mungday", "Chaoflux"], ["Mojoday", "Discoflux"], ["Syaday", "Confuflux"], ["Zaraday", "Bureflux"], ["Maladay", "Afflux"]])
    Process.put(:daysBefore, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334])
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
