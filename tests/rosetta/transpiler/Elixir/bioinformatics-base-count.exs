# Code generated by Mochi transpiler 2025-07-27 10:56 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  defp _len(x) do
    (if is_binary(x), do: String.length(x), else: length(x))
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def padLeft(s, w) do
    try do
      res = ""
      n = w - String.length(s)
      while_fun = fn while_fun, n, res ->
        if n > 0 do
          res = (res <> " ")
          n = n - 1
          while_fun.(while_fun, n, res)
        else
          {n, res}
        end
      end
      {n, res} = try do
          while_fun.(while_fun, n, res)
        catch
          :break -> {n, res}
        end

      throw {:return, (res <> s)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:i, 0)
  Process.put(:a, 0)
  Process.put(:c, 0)
  Process.put(:g, 0)
  Process.put(:t, 0)
  Process.put(:idx, 0)
  def main() do
    mem_start = _mem()
    t_start = _now()
    Process.put(:dna, (((((((((("" <> "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG") <> "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG") <> "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT") <> "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT") <> "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG") <> "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA") <> "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT") <> "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG") <> "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC") <> "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT"))
    IO.puts("SEQUENCE:")
    Process.put(:le, String.length(Process.get(:dna)))
    while_fun_2 = fn while_fun_2 ->
      if Process.get(:i) < Process.get(:le) do
        k = Process.get(:i) + 50
        {k} = if k > Process.get(:le) do
          k = Process.get(:le)
          {k}
        else
          {k}
        end
        IO.puts(Kernel.inspect(((Main.padLeft(Kernel.to_string(Process.get(:i)), 5) <> ": ") <> String.slice(Process.get(:dna), Process.get(:i), k - Process.get(:i)))))
        Process.put(:i, Process.get(:i) + 50)
        while_fun_2.(while_fun_2)
      else
        nil
      end
    end
    try do
      while_fun_2.(while_fun_2)
    catch
      :break -> nil
    end

    while_fun_3 = fn while_fun_3 ->
      if Process.get(:idx) < Process.get(:le) do
        ch = String.slice(Process.get(:dna), Process.get(:idx), Process.get(:idx) + 1 - (Process.get(:idx)))
        if ch == "A" do
          Process.put(:a, Process.get(:a) + 1)
        else
          if ch == "C" do
            Process.put(:c, Process.get(:c) + 1)
          else
            if ch == "G" do
              Process.put(:g, Process.get(:g) + 1)
            else
              if ch == "T" do
                Process.put(:t, Process.get(:t) + 1)
              end
            end
          end
        end
        Process.put(:idx, Process.get(:idx) + 1)
        while_fun_3.(while_fun_3)
      else
        nil
      end
    end
    try do
      while_fun_3.(while_fun_3)
    catch
      :break -> nil
    end

    IO.puts("")
    IO.puts("BASE COUNT:")
    IO.puts(("    A: " <> Main.padLeft(Kernel.to_string(Process.get(:a)), 3)))
    IO.puts(("    C: " <> Main.padLeft(Kernel.to_string(Process.get(:c)), 3)))
    IO.puts(("    G: " <> Main.padLeft(Kernel.to_string(Process.get(:g)), 3)))
    IO.puts(("    T: " <> Main.padLeft(Kernel.to_string(Process.get(:t)), 3)))
    IO.puts("    ------")
    IO.puts(("    Î£: " <> Kernel.to_string(Process.get(:le))))
    IO.puts("    ======")
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
