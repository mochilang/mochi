# Code generated by Mochi transpiler 2025-08-04 17:03 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def log2(x) do
    try do
      k = 0.0
      v = x
      while_fun = fn while_fun, k, v ->
        if v >= 2.0 do
          v = v / 2.0
          k = k + 1.0
          while_fun.(while_fun, k, v)
        else
          {k, v}
        end
      end
      {k, v} = try do
          while_fun.(while_fun, k, v)
        catch
          {:break, {k, v}} -> {k, v}
        end

      while_fun_2 = fn while_fun_2, k, v ->
        if v < 1.0 do
          v = v * 2.0
          k = k - 1.0
          while_fun_2.(while_fun_2, k, v)
        else
          {k, v}
        end
      end
      {k, v} = try do
          while_fun_2.(while_fun_2, k, v)
        catch
          {:break, {k, v}} -> {k, v}
        end

      z = (v - 1.0) / (v + 1.0)
      zpow = z
      sum = z
      i = 3
      while_fun_3 = fn while_fun_3, i, sum, zpow ->
        if i <= 9 do
          zpow = zpow * z * z
          sum = sum + zpow / (i)
          i = i + 2
          while_fun_3.(while_fun_3, i, sum, zpow)
        else
          {i, sum, zpow}
        end
      end
      {i, sum, zpow} = try do
          while_fun_3.(while_fun_3, i, sum, zpow)
        catch
          {:break, {i, sum, zpow}} -> {i, sum, zpow}
        end

      ln2 = 0.6931471805599453
      throw {:return, k + 2.0 * sum / ln2}
    catch
      {:return, val} -> val
    end
  end
  def entropy(data) do
    try do
      if data == "" do
        throw {:return, 0.0}
      end
      counts = %{}
      i = 0
      while_fun_4 = fn while_fun_4, counts, i ->
        if i < _len(data) do
          ch = _slice(data, i, i + 1 - (i))
          counts = Map.put(counts, ch, ((if Map.has_key?(counts, ch), do: counts[ch] + 1, else: 1)))
          i = i + 1
          while_fun_4.(while_fun_4, counts, i)
        else
          {counts, i}
        end
      end
      {counts, i} = try do
          while_fun_4.(while_fun_4, counts, i)
        catch
          {:break, {counts, i}} -> {counts, i}
        end

      e = 0.0
      l = _len(data)
      {e} = Enum.reduce(Map.keys(counts), {e}, fn ch, {e} ->
        px = (counts[ch]) / l
        {e} = if px > 0.0 do
          e = e - px * log2(px)
          {e}
        else
          {e}
        end
        {e}
      end)
      throw {:return, e}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(("Source file entropy: " <> Kernel.inspect(entropy(Process.get(:source)))))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Process.put(:source, ((((((((((((((((((((((((((((((((((((((((((((((((((((("// Mochi translation of the Rosetta \"Entropy-Narcissist\" task\n" <> "// Simplified to compute the entropy of this source string\n\n") <> "fun log2(x: float): float {\n") <> "  var k = 0.0\n") <> "  var v = x\n") <> "  while v >= 2.0 {\n") <> "    v = v / 2.0\n") <> "    k = k + 1.0\n") <> "  }\n") <> "  while v < 1.0 {\n") <> "    v = v * 2.0\n") <> "    k = k - 1.0\n") <> "  }\n") <> "  let z = (v - 1.0) / (v + 1.0)\n") <> "  var zpow = z\n") <> "  var sum = z\n") <> "  var i = 3\n") <> "  while i <= 9 {\n") <> "    zpow = zpow * z * z\n") <> "    sum = sum + zpow / (i as float)\n") <> "    i = i + 2\n") <> "  }\n") <> "  let ln2 = 0.6931471805599453\n") <> "  return k + 2.0 * sum / ln2\n") <> "}\n\n") <> "fun entropy(data: string): float {\n") <> "  if data == \"\" { return 0.0 }\n") <> "  var counts: map<string,int> = {}\n") <> "  var i = 0\n") <> "  while i < len(data) {\n") <> "    let ch = substring(data, i, i+1)\n") <> "    if ch in counts {\n") <> "      counts[ch] = counts[ch] + 1\n") <> "    } else {\n") <> "      counts[ch] = 1\n") <> "    }\n") <> "    i = i + 1\n") <> "  }\n") <> "  var e = 0.0\n") <> "  let l = len(data) as float\n") <> "  for ch in counts {\n") <> "    let px = (counts[ch] as float) / l\n") <> "    if px > 0.0 {\n") <> "      e = e - px * log2(px)\n") <> "    }\n") <> "  }\n") <> "  return e\n") <> "}\n\n") <> "// Store the program source as a string constant\n") <> "let source = ... // truncated in actual source\n") <> "\nfun main() {\n") <> "  print(\"Source file entropy: \" + str(entropy(source)))\n") <> "}\n\n") <> "main()\n"))
Main.bench_main()
