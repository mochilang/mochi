# Code generated by Mochi transpiler 2025-07-28 10:09 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  def powInt(base, exp) do
    try do
      r = 1
      b = base
      e = exp
      while_fun = fn while_fun, b, e, r ->
        if e > 0 do
          {r} = if rem(e, 2) == 1 do
            r = r * b
            {r}
          else
            {r}
          end
          b = b * b
          e = div(e, trunc(2))
          while_fun.(while_fun, b, e, r)
        else
          {b, e, r}
        end
      end
      {b, e, r} = try do
          while_fun.(while_fun, b, e, r)
        catch
          {:break, {b, e, r}} -> {b, e, r}
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def minInt(x, y) do
    try do
      throw {:return, ((if x < y, do: x, else: y))}
    catch
      {:return, val} -> val
    end
  end
  def throwDie(nSides, nDice, s, counts) do
    try do
      {counts} = if nDice == 0 do
        counts = List.replace_at(counts, s, Enum.at(counts, s) + 1)
        throw {:return, nil}
        {counts}
      else
        {counts}
      end
      i = 1
      while_fun_2 = fn while_fun_2, i ->
        if i <= nSides do
          Main.throwDie(nSides, nDice - 1, s + i, counts)
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, i} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def beatingProbability(nSides1, nDice1, nSides2, nDice2) do
    try do
      len1 = (nSides1 + 1) * nDice1
      c1 = []
      i = 0
      while_fun_3 = fn while_fun_3, c1, i ->
        if i < len1 do
          c1 = (c1 ++ [0])
          i = i + 1
          while_fun_3.(while_fun_3, c1, i)
        else
          {c1, i}
        end
      end
      {c1, i} = try do
          while_fun_3.(while_fun_3, c1, i)
        catch
          {:break, {c1, i}} -> {c1, i}
        end

      Main.throwDie(nSides1, nDice1, 0, c1)
      len2 = (nSides2 + 1) * nDice2
      c2 = []
      j = 0
      while_fun_4 = fn while_fun_4, c2, j ->
        if j < len2 do
          c2 = (c2 ++ [0])
          j = j + 1
          while_fun_4.(while_fun_4, c2, j)
        else
          {c2, j}
        end
      end
      {c2, j} = try do
          while_fun_4.(while_fun_4, c2, j)
        catch
          {:break, {c2, j}} -> {c2, j}
        end

      Main.throwDie(nSides2, nDice2, 0, c2)
      p12 = (Main.powInt(nSides1, nDice1)) * (Main.powInt(nSides2, nDice2))
      tot = 0.0
      i = 0
      while_fun_5 = fn while_fun_5, i, j, tot ->
        if i < len1 do
          j = 0
          m = Main.minInt(i, len2)
          while_fun_6 = fn while_fun_6, j, tot ->
            if j < m do
              tot = tot + (Enum.at(c1, i) * Enum.at(c2, j)) / p12
              j = j + 1
              while_fun_6.(while_fun_6, j, tot)
            else
              {j, tot}
            end
          end
          {j, tot} = try do
              while_fun_6.(while_fun_6, j, tot)
            catch
              {:break, {j, tot}} -> {j, tot}
            end

          i = i + 1
          while_fun_5.(while_fun_5, i, j, tot)
        else
          {i, j, tot}
        end
      end
      {i, j, tot} = try do
          while_fun_5.(while_fun_5, i, j, tot)
        catch
          {:break, {i, j, tot}} -> {i, j, tot}
        end

      throw {:return, tot}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    mem_start = _mem()
    t_start = _now()
    IO.puts(Kernel.inspect(Main.beatingProbability(4, 9, 6, 6)))
    IO.puts(Kernel.inspect(Main.beatingProbability(10, 5, 7, 6)))
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
