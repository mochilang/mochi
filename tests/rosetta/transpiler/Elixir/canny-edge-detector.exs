# Code generated by Mochi transpiler 2025-08-03 22:12 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.monotonic_time(:microsecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def conv2d(img, k) do
    try do
      h = _len(img)
      w = _len(Enum.at(img, 0))
      n = _len(k)
      half = div(n, 2)
      out = []
      y = 0
      while_fun = fn while_fun, out, y ->
        if y < h do
          row = []
          x = 0
          while_fun_2 = fn while_fun_2, row, x ->
            if x < w do
              sum = 0.0
              j = 0
              while_fun_3 = fn while_fun_3, j, sum ->
                if j < n do
                  i = 0
                  while_fun_4 = fn while_fun_4, i, sum ->
                    if i < n do
                      yy = y + j - half
                      {yy} = if yy < 0 do
                        yy = 0
                        {yy}
                      else
                        {yy}
                      end
                      {yy} = if yy >= h do
                        yy = h - 1
                        {yy}
                      else
                        {yy}
                      end
                      xx = x + i - half
                      {xx} = if xx < 0 do
                        xx = 0
                        {xx}
                      else
                        {xx}
                      end
                      {xx} = if xx >= w do
                        xx = w - 1
                        {xx}
                      else
                        {xx}
                      end
                      sum = sum + Enum.at(Enum.at(img, yy), xx) * Enum.at(Enum.at(k, j), i)
                      i = i + 1
                      while_fun_4.(while_fun_4, i, sum)
                    else
                      {i, sum}
                    end
                  end
                  {i, sum} = try do
                      while_fun_4.(while_fun_4, i, sum)
                    catch
                      {:break, {i, sum}} -> {i, sum}
                    end

                  j = j + 1
                  while_fun_3.(while_fun_3, j, sum)
                else
                  {j, sum}
                end
              end
              {j, sum} = try do
                  while_fun_3.(while_fun_3, j, sum)
                catch
                  {:break, {j, sum}} -> {j, sum}
                end

              row = (row ++ [sum])
              x = x + 1
              while_fun_2.(while_fun_2, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_2.(while_fun_2, row, x)
            catch
              {:break, {row, x}} -> {row, x}
            end

          out = (out ++ [row])
          y = y + 1
          while_fun.(while_fun, out, y)
        else
          {out, y}
        end
      end
      {out, y} = try do
          while_fun.(while_fun, out, y)
        catch
          {:break, {out, y}} -> {out, y}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def gradient(img) do
    try do
      hx = [[-1.0, 0.0, 1.0], [-2.0, 0.0, 2.0], [-1.0, 0.0, 1.0]]
      hy = [[1.0, 2.0, 1.0], [0.0, 0.0, 0.0], [-1.0, -2.0, -1.0]]
      gx = Main.conv2d(img, hx)
      gy = Main.conv2d(img, hy)
      h = _len(img)
      w = _len(Enum.at(img, 0))
      out = []
      y = 0
      while_fun_5 = fn while_fun_5, out, y ->
        if y < h do
          row = []
          x = 0
          while_fun_6 = fn while_fun_6, row, x ->
            if x < w do
              g = Enum.at(Enum.at(gx, y), x) * Enum.at(Enum.at(gx, y), x) + Enum.at(Enum.at(gy, y), x) * Enum.at(Enum.at(gy, y), x)
              row = (row ++ [g])
              x = x + 1
              while_fun_6.(while_fun_6, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_6.(while_fun_6, row, x)
            catch
              {:break, {row, x}} -> {row, x}
            end

          out = (out ++ [row])
          y = y + 1
          while_fun_5.(while_fun_5, out, y)
        else
          {out, y}
        end
      end
      {out, y} = try do
          while_fun_5.(while_fun_5, out, y)
        catch
          {:break, {out, y}} -> {out, y}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def threshold(g, t) do
    try do
      h = _len(g)
      w = _len(Enum.at(g, 0))
      out = []
      y = 0
      while_fun_7 = fn while_fun_7, out, y ->
        if y < h do
          row = []
          x = 0
          while_fun_8 = fn while_fun_8, row, x ->
            if x < w do
              row = (if Enum.at(Enum.at(g, y), x) >= t, do: (row ++ [1]), else: (row ++ [0]))
              x = x + 1
              while_fun_8.(while_fun_8, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_8.(while_fun_8, row, x)
            catch
              {:break, {row, x}} -> {row, x}
            end

          out = (out ++ [row])
          y = y + 1
          while_fun_7.(while_fun_7, out, y)
        else
          {out, y}
        end
      end
      {out, y} = try do
          while_fun_7.(while_fun_7, out, y)
        catch
          {:break, {out, y}} -> {out, y}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def printMatrix(m) do
    try do
      y = 0
      while_fun_9 = fn while_fun_9, y ->
        if y < _len(m) do
          line = ""
          x = 0
          while_fun_10 = fn while_fun_10, line, x ->
            if x < _len(Enum.at(m, 0)) do
              line = (line <> Kernel.to_string(Enum.at(Enum.at(m, y), x)))
              {line} = if x < _len(Enum.at(m, 0)) - 1 do
                line = (line <> " ")
                {line}
              else
                {line}
              end
              x = x + 1
              while_fun_10.(while_fun_10, line, x)
            else
              {line, x}
            end
          end
          {line, x} = try do
              while_fun_10.(while_fun_10, line, x)
            catch
              {:break, {line, x}} -> {line, x}
            end

          IO.puts(line)
          y = y + 1
          while_fun_9.(while_fun_9, y)
        else
          y
        end
      end
      y = try do
          while_fun_9.(while_fun_9, y)
        catch
          {:break, y} -> y
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      img = [[0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]]
      g = Main.gradient(img)
      edges = Main.threshold(g, 1020.0 * 1020.0)
      Main.printMatrix(edges)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  def bench_main() do
    Process.put(:pi, 3.141592653589793)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _now()
    main()
    mem_end = _mem()
    duration_us = max(_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
