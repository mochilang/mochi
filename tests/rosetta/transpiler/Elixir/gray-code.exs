# Code generated by Mochi transpiler 2025-08-05 01:09 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def xor(a, b) do
    try do
      res = 0
      bit = 1
      x = a
      y = b
      while_fun = fn while_fun, bit, res, x, y ->
        if x > 0 || y > 0 do
          {res} = if (rem((rem(x, 2) + rem(y, 2)), 2) == 1) do
            res = res + bit
            {res}
          else
            {res}
          end
          x = div(x, 2)
          y = div(y, 2)
          bit = bit * 2
          while_fun.(while_fun, bit, res, x, y)
        else
          {bit, res, x, y}
        end
      end
      {bit, res, x, y} = try do
          while_fun.(while_fun, bit, res, x, y)
        catch
          {:break, {bit, res, x, y}} -> {bit, res, x, y}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def enc(b) do
    try do
      throw {:return, xor(b, div(b, 2))}
    catch
      {:return, val} -> val
    end
  end
  def dec(g) do
    try do
      b = 0
      x = g
      while_fun_2 = fn while_fun_2, b, x ->
        if x > 0 do
          b = xor(b, x)
          x = div(x, 2)
          while_fun_2.(while_fun_2, b, x)
        else
          {b, x}
        end
      end
      {b, x} = try do
          while_fun_2.(while_fun_2, b, x)
        catch
          {:break, {b, x}} -> {b, x}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def binary(n) do
    try do
      if n == 0 do
        throw {:return, "0"}
      end
      s = ""
      x = n
      while_fun_3 = fn while_fun_3, s, x ->
        if x > 0 do
          s = (if rem(x, 2) == 1, do: ("1" <> s), else: ("0" <> s))
          x = div(x, 2)
          while_fun_3.(while_fun_3, s, x)
        else
          {s, x}
        end
      end
      {s, x} = try do
          while_fun_3.(while_fun_3, s, x)
        catch
          {:break, {s, x}} -> {s, x}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def pad5(s) do
    try do
      p = s
      while_fun_4 = fn while_fun_4, p ->
        if _len(p) < 5 do
          p = ("0" <> p)
          while_fun_4.(while_fun_4, p)
        else
          p
        end
      end
      p = try do
          while_fun_4.(while_fun_4, p)
        catch
          {:break, {p}} -> p
        end

      throw {:return, p}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts("decimal  binary   gray    decoded")
      b = 0
      while_fun_5 = fn while_fun_5, b ->
        if b < 32 do
          g = enc(b)
          d = dec(g)
          IO.puts(((((((("  " <> pad5(binary(b))) <> "   ") <> pad5(binary(g))) <> "   ") <> pad5(binary(d))) <> "  ") <> Kernel.to_string(d)))
          b = b + 1
          while_fun_5.(while_fun_5, b)
        else
          b
        end
      end
      b = try do
          while_fun_5.(while_fun_5, b)
        catch
          {:break, {b}} -> b
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
