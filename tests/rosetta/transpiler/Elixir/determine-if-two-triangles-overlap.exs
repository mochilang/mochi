# Code generated by Mochi transpiler 2025-08-04 11:46 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def fmt1(f) do
    try do
      s = Kernel.to_string(f)
      idx = case :binary.match(s, ".") do
  :nomatch -> -1
  t -> elem(t, 0)
end
      {s} = if idx < 0 do
        s = (s <> ".0")
        {s}
      else
        need = idx + 2
        {s} = if _len(s) > need do
          s = _slice(s, 0, need - (0))
          {s}
        else
          while_fun = fn while_fun, s ->
            if _len(s) < need do
              s = (s <> "0")
              while_fun.(while_fun, s)
            else
              s
            end
          end
          s = try do
              while_fun.(while_fun, s)
            catch
              {:break, s} -> s
            end

          {s}
        end
        {s}
      end
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def pointStr(p) do
    try do
      throw {:return, (((("(" <> fmt1(p.x)) <> ", ") <> fmt1(p.y)) <> ")")}
    catch
      {:return, val} -> val
    end
  end
  def triangleStr(t) do
    try do
      throw {:return, ((((("Triangle " <> pointStr(t.p1)) <> ", ") <> pointStr(t.p2)) <> ", ") <> pointStr(t.p3))}
    catch
      {:return, val} -> val
    end
  end
  def orient(a, b, c) do
    try do
      throw {:return, (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)}
    catch
      {:return, val} -> val
    end
  end
  def pointInTri(p, t, onBoundary) do
    try do
      d1 = orient(p, t.p1, t.p2)
      d2 = orient(p, t.p2, t.p3)
      d3 = orient(p, t.p3, t.p1)
      hasNeg = d1 < 0.0 || d2 < 0.0 || d3 < 0.0
      hasPos = d1 > 0.0 || d2 > 0.0 || d3 > 0.0
      if onBoundary do
        throw {:return, !(hasNeg && hasPos)}
      end
      throw {:return, !(hasNeg && hasPos) && d1 != 0.0 && d2 != 0.0 && d3 != 0.0}
    catch
      {:return, val} -> val
    end
  end
  def edgeCheck(a0, a1, bs, onBoundary) do
    try do
      d0 = orient(a0, a1, Enum.at(bs, 0))
      d1 = orient(a0, a1, Enum.at(bs, 1))
      d2 = orient(a0, a1, Enum.at(bs, 2))
      if onBoundary do
        throw {:return, d0 <= 0.0 && d1 <= 0.0 && d2 <= 0.0}
      end
      throw {:return, d0 < 0.0 && d1 < 0.0 && d2 < 0.0}
    catch
      {:return, val} -> val
    end
  end
  def triTri2D(t1, t2, onBoundary) do
    try do
      a = [t1.p1, t1.p2, t1.p3]
      b = [t2.p1, t2.p2, t2.p3]
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < 3 do
          j = rem((i + 1), 3)
          if edgeCheck(Enum.at(a, i), Enum.at(a, j), b, onBoundary) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, i} -> i
        end

      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < 3 do
          j = rem((i + 1), 3)
          if edgeCheck(Enum.at(b, i), Enum.at(b, j), a, onBoundary) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, i} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def iff(cond, a, b) do
    try do
      if cond do
        throw {:return, a}
      else
        throw {:return, b}
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      t1 = %{p1: %{x: 0.0, y: 0.0}, p2: %{x: 5.0, y: 0.0}, p3: %{x: 0.0, y: 5.0}}
      t2 = %{p1: %{x: 0.0, y: 0.0}, p2: %{x: 5.0, y: 0.0}, p3: %{x: 0.0, y: 6.0}}
      IO.puts(Kernel.inspect((triangleStr(t1) <> " and")))
      IO.puts(Kernel.inspect(triangleStr(t2)))
      overlapping = triTri2D(t1, t2, true)
      IO.puts(Kernel.inspect(iff(overlapping, "overlap", "do not overlap")))
      IO.puts("")
      t1 = %{p1: %{x: 0.0, y: 0.0}, p2: %{x: 0.0, y: 5.0}, p3: %{x: 5.0, y: 0.0}}
      t2 = t1
      IO.puts(Kernel.inspect((triangleStr(t1) <> " and")))
      IO.puts(Kernel.inspect(triangleStr(t2)))
      overlapping = triTri2D(t1, t2, true)
      IO.puts(Kernel.inspect(iff(overlapping, "overlap (reversed)", "do not overlap")))
      IO.puts("")
      t1 = %{p1: %{x: 0.0, y: 0.0}, p2: %{x: 5.0, y: 0.0}, p3: %{x: 0.0, y: 5.0}}
      t2 = %{p1: %{x: -10.0, y: 0.0}, p2: %{x: -5.0, y: 0.0}, p3: %{x: -1.0, y: 6.0}}
      IO.puts(Kernel.inspect((triangleStr(t1) <> " and")))
      IO.puts(Kernel.inspect(triangleStr(t2)))
      overlapping = triTri2D(t1, t2, true)
      IO.puts(Kernel.inspect(iff(overlapping, "overlap", "do not overlap")))
      IO.puts("")
      t1 = Map.put(t1, :p3, %{x: 2.5, y: 5.0})
      t2 = %{p1: %{x: 0.0, y: 4.0}, p2: %{x: 2.5, y: -1.0}, p3: %{x: 5.0, y: 4.0}}
      IO.puts(Kernel.inspect((triangleStr(t1) <> " and")))
      IO.puts(Kernel.inspect(triangleStr(t2)))
      overlapping = triTri2D(t1, t2, true)
      IO.puts(Kernel.inspect(iff(overlapping, "overlap", "do not overlap")))
      IO.puts("")
      t1 = %{p1: %{x: 0.0, y: 0.0}, p2: %{x: 1.0, y: 1.0}, p3: %{x: 0.0, y: 2.0}}
      t2 = %{p1: %{x: 2.0, y: 1.0}, p2: %{x: 3.0, y: 0.0}, p3: %{x: 3.0, y: 2.0}}
      IO.puts(Kernel.inspect((triangleStr(t1) <> " and")))
      IO.puts(Kernel.inspect(triangleStr(t2)))
      overlapping = triTri2D(t1, t2, true)
      IO.puts(Kernel.inspect(iff(overlapping, "overlap", "do not overlap")))
      IO.puts("")
      t2 = %{p1: %{x: 2.0, y: 1.0}, p2: %{x: 3.0, y: -2.0}, p3: %{x: 3.0, y: 4.0}}
      IO.puts(Kernel.inspect((triangleStr(t1) <> " and")))
      IO.puts(Kernel.inspect(triangleStr(t2)))
      overlapping = triTri2D(t1, t2, true)
      IO.puts(Kernel.inspect(iff(overlapping, "overlap", "do not overlap")))
      IO.puts("")
      t1 = %{p1: %{x: 0.0, y: 0.0}, p2: %{x: 1.0, y: 0.0}, p3: %{x: 0.0, y: 1.0}}
      t2 = %{p1: %{x: 1.0, y: 0.0}, p2: %{x: 2.0, y: 0.0}, p3: %{x: 1.0, y: 1.1}}
      IO.puts(Kernel.inspect((triangleStr(t1) <> " and")))
      IO.puts(Kernel.inspect(triangleStr(t2)))
      IO.puts("which have only a single corner in contact, if boundary points collide")
      overlapping = triTri2D(t1, t2, true)
      IO.puts(Kernel.inspect(iff(overlapping, "overlap", "do not overlap")))
      IO.puts("")
      IO.puts(Kernel.inspect((triangleStr(t1) <> " and")))
      IO.puts(Kernel.inspect(triangleStr(t2)))
      IO.puts("which have only a single corner in contact, if boundary points do not collide")
      overlapping = triTri2D(t1, t2, false)
      IO.puts(Kernel.inspect(iff(overlapping, "overlap", "do not overlap")))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
