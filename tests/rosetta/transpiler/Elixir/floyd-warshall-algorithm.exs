# Code generated by Mochi transpiler 2025-08-04 22:33 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def main() do
    try do
      inf = 1000000000
      n = 4
      dist = []
      next = []
      i = 0
      while_fun = fn while_fun, dist, i, next ->
        if i < n do
          row = []
          nrow = []
          j = 0
          while_fun_2 = fn while_fun_2, j, nrow, row ->
            if j < n do
              row = (if i == j, do: (row ++ [0]), else: (row ++ [inf]))
              nrow = (nrow ++ [0 - 1])
              j = j + 1
              while_fun_2.(while_fun_2, j, nrow, row)
            else
              {j, nrow, row}
            end
          end
          {j, nrow, row} = try do
              while_fun_2.(while_fun_2, j, nrow, row)
            catch
              {:break, {j, nrow, row}} -> {j, nrow, row}
            end

          dist = (dist ++ [row])
          next = (next ++ [nrow])
          i = i + 1
          while_fun.(while_fun, dist, i, next)
        else
          {dist, i, next}
        end
      end
      {dist, i, next} = try do
          while_fun.(while_fun, dist, i, next)
        catch
          {:break, {dist, i, next}} -> {dist, i, next}
        end

      dist = List.replace_at(dist, 0, List.replace_at(Enum.at(dist, 0), 2, -2))
      next = List.replace_at(next, 0, List.replace_at(Enum.at(next, 0), 2, 2))
      dist = List.replace_at(dist, 2, List.replace_at(Enum.at(dist, 2), 3, 2))
      next = List.replace_at(next, 2, List.replace_at(Enum.at(next, 2), 3, 3))
      dist = List.replace_at(dist, 3, List.replace_at(Enum.at(dist, 3), 1, -1))
      next = List.replace_at(next, 3, List.replace_at(Enum.at(next, 3), 1, 1))
      dist = List.replace_at(dist, 1, List.replace_at(Enum.at(dist, 1), 0, 4))
      next = List.replace_at(next, 1, List.replace_at(Enum.at(next, 1), 0, 0))
      dist = List.replace_at(dist, 1, List.replace_at(Enum.at(dist, 1), 2, 3))
      next = List.replace_at(next, 1, List.replace_at(Enum.at(next, 1), 2, 2))
      k = 0
      while_fun_3 = fn while_fun_3, dist, k, next ->
        if k < n do
          i = 0
          while_fun_4 = fn while_fun_4, dist, i, next ->
            if i < n do
              j = 0
              while_fun_5 = fn while_fun_5, dist, j, next ->
                if j < n do
                  {dist, next} = if Enum.at(Enum.at(dist, i), k) < inf && Enum.at(Enum.at(dist, k), j) < inf do
                    alt = Enum.at(Enum.at(dist, i), k) + Enum.at(Enum.at(dist, k), j)
                    {dist, next} = if alt < Enum.at(Enum.at(dist, i), j) do
                      dist = List.replace_at(dist, i, List.replace_at(Enum.at(dist, i), j, alt))
                      next = List.replace_at(next, i, List.replace_at(Enum.at(next, i), j, Enum.at(Enum.at(next, i), k)))
                      {dist, next}
                    else
                      {dist, next}
                    end
                    {dist, next}
                  else
                    {dist, next}
                  end
                  j = j + 1
                  while_fun_5.(while_fun_5, dist, j, next)
                else
                  {dist, j, next}
                end
              end
              {dist, j, next} = try do
                  while_fun_5.(while_fun_5, dist, j, next)
                catch
                  {:break, {dist, j, next}} -> {dist, j, next}
                end

              i = i + 1
              while_fun_4.(while_fun_4, dist, i, next)
            else
              {dist, i, next}
            end
          end
          {dist, i, next} = try do
              while_fun_4.(while_fun_4, dist, i, next)
            catch
              {:break, {dist, i, next}} -> {dist, i, next}
            end

          k = k + 1
          while_fun_3.(while_fun_3, dist, k, next)
        else
          {dist, k, next}
        end
      end
      {dist, k, next} = try do
          while_fun_3.(while_fun_3, dist, k, next)
        catch
          {:break, {dist, k, next}} -> {dist, k, next}
        end

      path = fn u, v ->
  ui = u - 1
  vi = v - 1
  if Enum.at(Enum.at(next, ui), vi) == 0 - 1 do
    throw {:return, []}
  end
  p = [u]
  cur = ui
  while_fun_6 = fn while_fun_6, cur, p ->
    if cur != vi do
      cur = Enum.at(Enum.at(next, cur), vi)
      p = (p ++ [cur + 1])
      while_fun_6.(while_fun_6, cur, p)
    else
      {cur, p}
    end
  end
  {cur, p} = try do
      while_fun_6.(while_fun_6, cur, p)
    catch
      {:break, {cur, p}} -> {cur, p}
    end

  throw {:return, p}
end
      pathStr = fn p ->
  s = ""
  first = true
  idx = 0
  while_fun_7 = fn while_fun_7, first, idx, s ->
    if idx < _len(p) do
      x = Enum.at(p, idx)
      {s} = if !first do
        s = (s <> " -> ")
        {s}
      else
        {s}
      end
      s = (s <> Kernel.to_string(x))
      first = false
      idx = idx + 1
      while_fun_7.(while_fun_7, first, idx, s)
    else
      {first, idx, s}
    end
  end
  {first, idx, s} = try do
      while_fun_7.(while_fun_7, first, idx, s)
    catch
      {:break, {first, idx, s}} -> {first, idx, s}
    end

  throw {:return, s}
end
      IO.puts("pair\tdist\tpath")
      a = 0
      while_fun_8 = fn while_fun_8, a ->
        if a < n do
          b = 0
          while_fun_9 = fn while_fun_9, b ->
            if b < n do
              if a != b do
                IO.puts(((((((Kernel.to_string(a + 1) <> " -> ") <> Kernel.to_string(b + 1)) <> "\t") <> Kernel.to_string(Enum.at(Enum.at(dist, a), b))) <> "\t") <> pathStr.(path.(a + 1, b + 1))))
              end
              b = b + 1
              while_fun_9.(while_fun_9, b)
            else
              b
            end
          end
          b = try do
              while_fun_9.(while_fun_9, b)
            catch
              {:break, {b}} -> b
            end

          a = a + 1
          while_fun_8.(while_fun_8, a)
        else
          a
        end
      end
      a = try do
          while_fun_8.(while_fun_8, a)
        catch
          {:break, {a}} -> a
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
