# Code generated by Mochi transpiler 2025-07-27 05:40 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def bernoulli(n) do
    try do
      a = []
      m = 0
      while_fun = fn while_fun, a, m ->
        if m <= n do
          a = (a ++ [1 / ((m + 1))])
          j = m
          while_fun_2 = fn while_fun_2, a, j ->
            if j >= 1 do
              a = List.replace_at(a, j - 1, (j) * (Enum.at(a, j - 1) - Enum.at(a, j)))
              j = j - 1
              while_fun_2.(while_fun_2, a, j)
            else
              {a, j}
            end
          end
          {a, j} = try do
              while_fun_2.(while_fun_2, a, j)
            catch
              :break -> {a, j}
            end

          m = m + 1
          while_fun.(while_fun, a, m)
        else
          {a, m}
        end
      end
      {a, m} = try do
          while_fun.(while_fun, a, m)
        catch
          :break -> {a, m}
        end

      throw {:return, Enum.at(a, 0)}
    catch
      {:return, val} -> val
    end
  end
  def padStart(s, width, pad) do
    try do
      out = s
      while_fun_3 = fn while_fun_3, out ->
        if String.length(out) < width do
          out = (pad <> out)
          while_fun_3.(while_fun_3, out)
        else
          out
        end
      end
      out = try do
          while_fun_3.(while_fun_3, out)
        catch
          :break -> out
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Enum.each((0..(61 - 1)), fn i ->
      b = Main.bernoulli(i)
      if elem(b, 0) != 0 do
        numStr = Kernel.inspect(elem(b, 0))
        denStr = Kernel.inspect(elem(b, 1))
        IO.puts(((((("B(" <> Main.padStart(Kernel.to_string(i), 2, " ")) <> ") =") <> Main.padStart(numStr, 45, " ")) <> "/") <> denStr))
      end
    end)
  end
end
Main.main()
