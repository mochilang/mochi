# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def absi(x) do
    try do
      throw {:return, ((if x < 0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def bresenham(x0, y0, x1, y1) do
    try do
      dx = Main.absi(x1 - x0)
      dy = Main.absi(y1 - y0)
      sx = -1
      {sx} = if x0 < x1 do
        sx = 1
        {sx}
      else
        {sx}
      end
      sy = -1
      {sy} = if y0 < y1 do
        sy = 1
        {sy}
      else
        {sy}
      end
      err = dx - dy
      pts = []
      while_fun = fn while_fun, err, pts, x0, y0 ->
        if true do
          pts = (pts ++ [%{x: x0, y: y0}])
          if x0 == x1 && y0 == y1 do
            throw :break
          end
          e2 = 2 * err
          {err, x0} = if e2 > (-dy) do
            err = err - dy
            x0 = x0 + sx
            {err, x0}
          else
            {err, x0}
          end
          {err, y0} = if e2 < dx do
            err = err + dx
            y0 = y0 + sy
            {err, y0}
          else
            {err, y0}
          end
          while_fun.(while_fun, err, pts, x0, y0)
        else
          {err, pts, x0, y0}
        end
      end
      {err, pts, x0, y0} = try do
          while_fun.(while_fun, err, pts, x0, y0)
        catch
          :break -> {err, pts, x0, y0}
        end

      throw {:return, pts}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      pts = Main.bresenham(0, 0, 6, 4)
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(pts) do
          p = Enum.at(pts, i)
          IO.puts((((("(" <> Kernel.to_string(p.x)) <> ",") <> Kernel.to_string(p.y)) <> ")"))
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          :break -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
