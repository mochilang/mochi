# Code generated by Mochi transpiler 2025-08-04 22:33 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def pad(n) do
    try do
      s = Kernel.to_string(n)
      while_fun = fn while_fun, s ->
        if _len(s) < 4 do
          s = (" " <> s)
          while_fun.(while_fun, s)
        else
          s
        end
      end
      s = try do
          while_fun.(while_fun, s)
        catch
          {:break, {s}} -> s
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def hail(seq, cnt) do
    try do
      out = pad(seq)
      {cnt, seq} = if seq != 1 do
        cnt = cnt + 1
        seq = (if rem(seq, 2) != 0, do: 3 * seq + 1, else: div(seq, 2))
        {cnt, seq}
      else
        {cnt, seq}
      end
      throw {:return, %{seq: seq, cnt: cnt, out: out}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      seqs = []
      cnts = []
      {cnts, seqs} = Enum.reduce((0..(Process.get(:jobs) - 1)), {cnts, seqs}, fn i, {cnts, seqs} ->
        seqs = (seqs ++ [i + 1])
        cnts = (cnts ++ [0])
        {cnts, seqs}
      end)
      while_fun_2 = fn while_fun_2, cnts, seqs ->
        if true do
          line = ""
          i = 0
          while_fun_3 = fn while_fun_3, cnts, i, line, seqs ->
            if i < Process.get(:jobs) do
              res = hail(Enum.at(seqs, i), Enum.at(cnts, i))
              seqs = List.replace_at(seqs, i, res.seq)
              cnts = List.replace_at(cnts, i, res.cnt)
              line = (line <> res.out)
              i = i + 1
              while_fun_3.(while_fun_3, cnts, i, line, seqs)
            else
              {cnts, i, line, seqs}
            end
          end
          {cnts, i, line, seqs} = try do
              while_fun_3.(while_fun_3, cnts, i, line, seqs)
            catch
              {:break, {cnts, i, line, seqs}} -> {cnts, i, line, seqs}
            end

          IO.puts(line)
          done = true
          j = 0
          while_fun_4 = fn while_fun_4, done, j ->
            if j < Process.get(:jobs) do
              {done} = if Enum.at(seqs, j) != 1 do
                done = false
                {done}
              else
                {done}
              end
              j = j + 1
              while_fun_4.(while_fun_4, done, j)
            else
              {done, j}
            end
          end
          {done, j} = try do
              while_fun_4.(while_fun_4, done, j)
            catch
              {:break, {done, j}} -> {done, j}
            end

          if done do
            throw {:break, {cnts, seqs}}
          end
          while_fun_2.(while_fun_2, cnts, seqs)
        else
          {cnts, seqs}
        end
      end
      {cnts, seqs} = try do
          while_fun_2.(while_fun_2, cnts, seqs)
        catch
          {:break, {cnts, seqs}} -> {cnts, seqs}
        end

      IO.puts("")
      IO.puts("COUNTS:")
      counts = ""
      k = 0
      while_fun_5 = fn while_fun_5, counts, k ->
        if k < Process.get(:jobs) do
          counts = (counts <> pad(Enum.at(cnts, k)))
          k = k + 1
          while_fun_5.(while_fun_5, counts, k)
        else
          {counts, k}
        end
      end
      {counts, k} = try do
          while_fun_5.(while_fun_5, counts, k)
        catch
          {:break, {counts, k}} -> {counts, k}
        end

      IO.puts(counts)
      IO.puts("")
    catch
      {:return, val} -> val
    end
  end
  Process.put(:jobs, 12)
  def bench_main() do
    Process.put(:jobs, 12)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
