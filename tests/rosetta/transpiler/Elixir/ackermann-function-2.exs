# Code generated by Mochi transpiler 2025-07-25 17:35 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  def pow(base, exp) do
    try do
      result = 1
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          :break -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def ackermann2(m, n) do
    try do
      if m == 0 do
        throw {:return, n + 1}
      end
      if m == 1 do
        throw {:return, n + 2}
      end
      if m == 2 do
        throw {:return, 2 * n + 3}
      end
      if m == 3 do
        throw {:return, 8 * pow(2, n) - 3}
      end
      if n == 0 do
        throw {:return, ackermann2(m - 1, 1)}
      end
      throw {:return, ackermann2(m - 1, ackermann2(m, n - 1))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(("A(0, 0) = " <> to_string(ackermann2(0, 0))))
      IO.puts(("A(1, 2) = " <> to_string(ackermann2(1, 2))))
      IO.puts(("A(2, 4) = " <> to_string(ackermann2(2, 4))))
      IO.puts(("A(3, 4) = " <> to_string(ackermann2(3, 4))))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
