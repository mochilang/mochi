# Code generated by Mochi transpiler 2025-08-04 21:47 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def splitLines(s) do
    try do
      lines = []
      start = 0
      i = 0
      while_fun = fn while_fun, i, lines, start ->
        if i < _len(s) do
          {i, lines, start} = if _slice(s, i, i + 1 - (i)) == "\n" do
            lines = (lines ++ [_slice(s, start, i - (start))])
            i = i + 1
            start = i
            {i, lines, start}
          else
            i = i + 1
            {i, lines, start}
          end
          while_fun.(while_fun, i, lines, start)
        else
          {i, lines, start}
        end
      end
      {i, lines, start} = try do
          while_fun.(while_fun, i, lines, start)
        catch
          {:break, {i, lines, start}} -> {i, lines, start}
        end

      lines = (lines ++ [_slice(s, start, _len(s) - (start))])
      throw {:return, lines}
    catch
      {:return, val} -> val
    end
  end
  def parseFasta(text) do
    try do
      key = ""
      val = ""
      out = []
      {key, out, val} = Enum.reduce(splitLines(text), {key, out, val}, fn line, {key, out, val} ->
        try do
          if line == "" do
            throw :continue
          end
          {key, out, val} = if _slice(line, 0, 1 - (0)) == ">" do
            {out} = if key != "" do
              out = (out ++ [((key <> ": ") <> val)])
              {out}
            else
              {out}
            end
            hdr = _slice(line, 1, _len(line) - (1))
            idx = 0
            while_fun_2 = fn while_fun_2, idx ->
              if idx < _len(hdr) && _slice(hdr, idx, idx + 1 - (idx)) != " " do
                idx = idx + 1
                while_fun_2.(while_fun_2, idx)
              else
                idx
              end
            end
            idx = try do
                while_fun_2.(while_fun_2, idx)
              catch
                {:break, {idx}} -> idx
              end

            key = _slice(hdr, 0, idx - (0))
            val = ""
            {key, out, val}
          else
            if key == "" do
              IO.puts("missing header")
              throw {:return, []}
            end
            val = (val <> line)
            {key, out, val}
          end
        catch
          :continue -> {key, out, val}
        end
        {key, out, val}
      end)
      {out} = if key != "" do
        out = (out ++ [((key <> ": ") <> val)])
        {out}
      else
        {out}
      end
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      res = parseFasta(Process.get(:fasta))
      Enum.each(res, fn line ->
        IO.puts(line)
      end)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Process.put(:fasta, (((((">Rosetta_Example_1\n" <> "THERECANBENOSPACE\n") <> ">Rosetta_Example_2\n") <> "THERECANBESEVERAL\n") <> "LINESBUTTHEYALLMUST\n") <> "BECONCATENATED"))
Main.bench_main()
