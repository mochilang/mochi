# Code generated by Mochi transpiler 2025-08-04 15:16 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat({n, d}) do
    _bigrat(n, d)
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def br(n, d) do
    try do
      throw {:return, _bigrat_div((_bigrat(n)), _bigrat((_bigrat(d))))}
    catch
      {:return, val} -> val
    end
  end
  def format(ts) do
    try do
      s = "["
      i = 0
      while_fun = fn while_fun, i, s ->
        if i < _len(ts) do
          t = Enum.at(ts, i)
          s = (((((((s <> "{") <> Kernel.to_string(t["a"])) <> " ") <> Kernel.to_string(t["n"])) <> " ") <> Kernel.to_string(t["d"])) <> "}")
          {s} = if i < _len(ts) - 1 do
            s = (s <> " ")
            {s}
          else
            {s}
          end
          i = i + 1
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, (s <> "]")}
    catch
      {:return, val} -> val
    end
  end
  def tanEval(coef, f) do
    try do
      if coef == 1 do
        throw {:return, f}
      end
      if coef < 0 do
        throw {:return, _bigrat_neg(_bigrat((tanEval(-coef, f))))}
      end
      ca = div(coef, 2)
      cb = coef - ca
      a = tanEval(ca, f)
      b = tanEval(cb, f)
      throw {:return, _bigrat_div(_bigrat((_bigrat_add(a, b))), _bigrat((_bigrat_sub(_bigrat(1), _bigrat_mul(a, b)))))}
    catch
      {:return, val} -> val
    end
  end
  def tans(m) do
    try do
      if _len(m) == 1 do
        t = Enum.at(m, 0)
        throw {:return, tanEval(t["a"], br(t["n"], t["d"]))}
      end
      half = div(_len(m), 2)
      a = tans(_slice(m, 0, half - 0))
      b = tans(_slice(m, half, _len(m) - half))
      throw {:return, _bigrat_div(_bigrat((_bigrat_add(a, b))), _bigrat((_bigrat_sub(_bigrat(1), _bigrat_mul(a, b)))))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:testCases, [[%{"a" => 1, "n" => 1, "d" => 2}, %{"a" => 1, "n" => 1, "d" => 3}], [%{"a" => 2, "n" => 1, "d" => 3}, %{"a" => 1, "n" => 1, "d" => 7}], [%{"a" => 4, "n" => 1, "d" => 5}, %{"a" => -1, "n" => 1, "d" => 239}], [%{"a" => 5, "n" => 1, "d" => 7}, %{"a" => 2, "n" => 3, "d" => 79}], [%{"a" => 1, "n" => 1, "d" => 2}, %{"a" => 1, "n" => 1, "d" => 5}, %{"a" => 1, "n" => 1, "d" => 8}], [%{"a" => 4, "n" => 1, "d" => 5}, %{"a" => -1, "n" => 1, "d" => 70}, %{"a" => 1, "n" => 1, "d" => 99}], [%{"a" => 5, "n" => 1, "d" => 7}, %{"a" => 4, "n" => 1, "d" => 53}, %{"a" => 2, "n" => 1, "d" => 4443}], [%{"a" => 6, "n" => 1, "d" => 8}, %{"a" => 2, "n" => 1, "d" => 57}, %{"a" => 1, "n" => 1, "d" => 239}], [%{"a" => 8, "n" => 1, "d" => 10}, %{"a" => -1, "n" => 1, "d" => 239}, %{"a" => -4, "n" => 1, "d" => 515}], [%{"a" => 12, "n" => 1, "d" => 18}, %{"a" => 8, "n" => 1, "d" => 57}, %{"a" => -5, "n" => 1, "d" => 239}], [%{"a" => 16, "n" => 1, "d" => 21}, %{"a" => 3, "n" => 1, "d" => 239}, %{"a" => 4, "n" => 3, "d" => 1042}], [%{"a" => 22, "n" => 1, "d" => 28}, %{"a" => 2, "n" => 1, "d" => 443}, %{"a" => -5, "n" => 1, "d" => 1393}, %{"a" => -10, "n" => 1, "d" => 11018}], [%{"a" => 22, "n" => 1, "d" => 38}, %{"a" => 17, "n" => 7, "d" => 601}, %{"a" => 10, "n" => 7, "d" => 8149}], [%{"a" => 44, "n" => 1, "d" => 57}, %{"a" => 7, "n" => 1, "d" => 239}, %{"a" => -12, "n" => 1, "d" => 682}, %{"a" => 24, "n" => 1, "d" => 12943}], [%{"a" => 88, "n" => 1, "d" => 172}, %{"a" => 51, "n" => 1, "d" => 239}, %{"a" => 32, "n" => 1, "d" => 682}, %{"a" => 44, "n" => 1, "d" => 5357}, %{"a" => 68, "n" => 1, "d" => 12943}], [%{"a" => 88, "n" => 1, "d" => 172}, %{"a" => 51, "n" => 1, "d" => 239}, %{"a" => 32, "n" => 1, "d" => 682}, %{"a" => 44, "n" => 1, "d" => 5357}, %{"a" => 68, "n" => 1, "d" => 12944}]])
    Enum.each(Process.get(:testCases), fn ts ->
      IO.puts(((("tan " <> format(ts)) <> " = ") <> Kernel.inspect(tans(ts))))
    end)
  end
end
Main.main()
