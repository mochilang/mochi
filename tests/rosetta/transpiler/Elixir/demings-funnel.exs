# Code generated by Mochi transpiler 2025-08-04 11:46 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def sqrtApprox(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      g = x
      i = 0
      while_fun = fn while_fun, g, i ->
        if i < 20 do
          g = (g + x / g) / 2.0
          i = i + 1
          while_fun.(while_fun, g, i)
        else
          {g, i}
        end
      end
      {g, i} = try do
          while_fun.(while_fun, g, i)
        catch
          {:break, {g, i}} -> {g, i}
        end

      throw {:return, g}
    catch
      {:return, val} -> val
    end
  end
  def funnel(fa, r) do
    try do
      x = 0.0
      result = []
      i = 0
      while_fun_2 = fn while_fun_2, i, result, x ->
        if i < _len(fa) do
          f = Enum.at(fa, i)
          result = (result ++ [x + f])
          x = r.(x, f)
          i = i + 1
          while_fun_2.(while_fun_2, i, result, x)
        else
          {i, result, x}
        end
      end
      {i, result, x} = try do
          while_fun_2.(while_fun_2, i, result, x)
        catch
          {:break, {i, result, x}} -> {i, result, x}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def mean(fa) do
    try do
      sum = 0.0
      i = 0
      while_fun_3 = fn while_fun_3, i, sum ->
        if i < _len(fa) do
          sum = sum + Enum.at(fa, i)
          i = i + 1
          while_fun_3.(while_fun_3, i, sum)
        else
          {i, sum}
        end
      end
      {i, sum} = try do
          while_fun_3.(while_fun_3, i, sum)
        catch
          {:break, {i, sum}} -> {i, sum}
        end

      throw {:return, sum / (_len(fa))}
    catch
      {:return, val} -> val
    end
  end
  def stdDev(fa) do
    try do
      m = mean(fa)
      sum = 0.0
      i = 0
      while_fun_4 = fn while_fun_4, i, sum ->
        if i < _len(fa) do
          d = Enum.at(fa, i) - m
          sum = sum + d * d
          i = i + 1
          while_fun_4.(while_fun_4, i, sum)
        else
          {i, sum}
        end
      end
      {i, sum} = try do
          while_fun_4.(while_fun_4, i, sum)
        catch
          {:break, {i, sum}} -> {i, sum}
        end

      r = sqrtApprox(sum / (_len(fa)))
      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def experiment(label, r) do
    try do
      rxs = funnel(Process.get(:dxs), r)
      rys = funnel(Process.get(:dys), r)
      IO.puts((label <> "  :      x        y"))
      IO.puts(((("Mean    :  " <> Kernel.inspect(mean(rxs))) <> ", ") <> Kernel.inspect(mean(rys))))
      IO.puts(((("Std Dev :  " <> Kernel.inspect(stdDev(rxs))) <> ", ") <> Kernel.inspect(stdDev(rys))))
      IO.puts("")
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      experiment("Rule 1", fn x, y -> 0.0 end)
      experiment("Rule 2", fn x, dz -> -dz end)
      experiment("Rule 3", fn z, dz -> -(z + dz) end)
      experiment("Rule 4", fn z, dz -> z + dz end)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Process.put(:dxs, [-0.533, 0.27, 0.859, -0.043, -0.205, -0.127, -0.071, 0.275, 1.251, -0.231, -0.401, 0.269, 0.491, 0.951, 1.15, 0.001, -0.382, 0.161, 0.915, 2.08, -2.337, 0.034, -0.126, 0.014, 0.709, 0.129, -1.093, -0.483, -1.193, 0.02, -0.051, 0.047, -0.095, 0.695, 0.34, -0.182, 0.287, 0.213, -0.423, -0.021, -0.134, 1.798, 0.021, -1.099, -0.361, 1.636, -1.134, 1.315, 0.201, 0.034, 0.097, -0.17, 0.054, -0.553, -0.024, -0.181, -0.7, -0.361, -0.789, 0.279, -0.174, -0.009, -0.323, -0.658, 0.348, -0.528, 0.881, 0.021, -0.853, 0.157, 0.648, 1.774, -1.043, 0.051, 0.021, 0.247, -0.31, 0.171, 0.0, 0.106, 0.024, -0.386, 0.962, 0.765, -0.125, -0.289, 0.521, 0.017, 0.281, -0.749, -0.149, -2.436, -0.909, 0.394, -0.113, -0.598, 0.443, -0.521, -0.799, 0.087])
Process.put(:dys, [0.136, 0.717, 0.459, -0.225, 1.392, 0.385, 0.121, -0.395, 0.49, -0.682, -0.065, 0.242, -0.288, 0.658, 0.459, 0.0, 0.426, 0.205, -0.765, -2.188, -0.742, -0.01, 0.089, 0.208, 0.585, 0.633, -0.444, -0.351, -1.087, 0.199, 0.701, 0.096, -0.025, -0.868, 1.051, 0.157, 0.216, 0.162, 0.249, -0.007, 0.009, 0.508, -0.79, 0.723, 0.881, -0.508, 0.393, -0.226, 0.71, 0.038, -0.217, 0.831, 0.48, 0.407, 0.447, -0.295, 1.126, 0.38, 0.549, -0.445, -0.046, 0.428, -0.074, 0.217, -0.822, 0.491, 1.347, -0.141, 1.23, -0.044, 0.079, 0.219, 0.698, 0.275, 0.056, 0.031, 0.421, 0.064, 0.721, 0.104, -0.729, 0.65, -1.103, 0.154, -1.72, 0.051, -0.385, 0.477, 1.537, -0.901, 0.939, -0.411, 0.341, -0.411, 0.106, 0.224, -0.947, -1.424, -0.542, -1.032])
Main.bench_main()
