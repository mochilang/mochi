# Code generated by Mochi transpiler 2025-08-04 21:47 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def indexOf(s, sub) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i <= _len(s) - _len(sub) do
          if _slice(s, i, i + _len(sub) - (i)) == sub do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def strReplace(s, old, new) do
    try do
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(s) do
          {i, res} = if _len(old) > 0 && i + _len(old) <= _len(s) && _slice(s, i, i + _len(old) - (i)) == old do
            res = (res <> new)
            i = i + _len(old)
            {i, res}
          else
            res = (res <> _slice(s, i, i + 1 - (i)))
            i = i + 1
            {i, res}
          end
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def g2l(pieces) do
    try do
      lets = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, lets ->
        if i < _len(pieces) do
          ch = _slice(pieces, i, i + 1 - (i))
          lets = (lets <> Map.get(Process.get(:g2lMap), ch, ""))
          i = i + 1
          while_fun_3.(while_fun_3, i, lets)
        else
          {i, lets}
        end
      end
      {i, lets} = try do
          while_fun_3.(while_fun_3, i, lets)
        catch
          {:break, {i, lets}} -> {i, lets}
        end

      throw {:return, lets}
    catch
      {:return, val} -> val
    end
  end
  def spid(pieces) do
    try do
      pieces = g2l(pieces)
      if _len(pieces) != 8 do
        throw {:return, -1}
      end
      Enum.each(["K", "Q"], fn one ->
        count = 0
        i = 0
        while_fun_4 = fn while_fun_4, count, i ->
          if i < _len(pieces) do
            {count} = if _slice(pieces, i, i + 1 - (i)) == one do
              count = count + 1
              {count}
            else
              {count}
            end
            i = i + 1
            while_fun_4.(while_fun_4, count, i)
          else
            {count, i}
          end
        end
        {count, i} = try do
            while_fun_4.(while_fun_4, count, i)
          catch
            {:break, {count, i}} -> {count, i}
          end

        if count != 1 do
          throw {:return, -1}
        end
      end)
      Enum.each(["R", "N", "B"], fn two ->
        count = 0
        i = 0
        while_fun_5 = fn while_fun_5, count, i ->
          if i < _len(pieces) do
            {count} = if _slice(pieces, i, i + 1 - (i)) == two do
              count = count + 1
              {count}
            else
              {count}
            end
            i = i + 1
            while_fun_5.(while_fun_5, count, i)
          else
            {count, i}
          end
        end
        {count, i} = try do
            while_fun_5.(while_fun_5, count, i)
          catch
            {:break, {count, i}} -> {count, i}
          end

        if count != 2 do
          throw {:return, -1}
        end
      end)
      r1 = indexOf(pieces, "R")
      r2 = indexOf(_slice(pieces, r1 + 1, _len(pieces) - (r1 + 1)), "R") + r1 + 1
      k = indexOf(pieces, "K")
      if k < r1 || k > r2 do
        throw {:return, -1}
      end
      b1 = indexOf(pieces, "B")
      b2 = indexOf(_slice(pieces, b1 + 1, _len(pieces) - (b1 + 1)), "B") + b1 + 1
      if rem((b2 - b1), 2) == 0 do
        throw {:return, -1}
      end
      piecesN = strReplace(pieces, "Q", "")
      piecesN = strReplace(piecesN, "B", "")
      n1 = indexOf(piecesN, "N")
      n2 = indexOf(_slice(piecesN, n1 + 1, _len(piecesN) - (n1 + 1)), "N") + n1 + 1
      np = (Kernel.to_string(n1) <> Kernel.to_string(n2))
      n = Process.get(:ntable)[np]
      piecesQ = strReplace(pieces, "B", "")
      q = indexOf(piecesQ, "Q")
      d = indexOf("0246", Kernel.to_string(b1))
      l = indexOf("1357", Kernel.to_string(b2))
      {d, l} = if d == (0 - 1) do
        d = indexOf("0246", Kernel.to_string(b2))
        l = indexOf("1357", Kernel.to_string(b1))
        {d, l}
      else
        {d, l}
      end
      throw {:return, 96 * n + 16 * q + 4 * d + l}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      Enum.each(["♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"], fn pieces ->
        IO.puts(((((pieces <> " or ") <> g2l(pieces)) <> " has SP-ID of ") <> Kernel.inspect(spid(pieces))))
      end)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:glyphs, "♜♞♝♛♚♖♘♗♕♔")
  Process.put(:g2lMap, %{"♜" => "R", "♞" => "N", "♝" => "B", "♛" => "Q", "♚" => "K", "♖" => "R", "♘" => "N", "♗" => "B", "♕" => "Q", "♔" => "K"})
  Process.put(:names, %{"R" => "rook", "N" => "knight", "B" => "bishop", "Q" => "queen", "K" => "king"})
  Process.put(:ntable, %{"01" => 0, "02" => 1, "03" => 2, "04" => 3, "12" => 4, "13" => 5, "14" => 6, "23" => 7, "24" => 8, "34" => 9})
  def bench_main() do
    Process.put(:glyphs, "♜♞♝♛♚♖♘♗♕♔")
    Process.put(:g2lMap, %{"♜" => "R", "♞" => "N", "♝" => "B", "♛" => "Q", "♚" => "K", "♖" => "R", "♘" => "N", "♗" => "B", "♕" => "Q", "♔" => "K"})
    Process.put(:names, %{"R" => "rook", "N" => "knight", "B" => "bishop", "Q" => "queen", "K" => "king"})
    Process.put(:ntable, %{"01" => 0, "02" => 1, "03" => 2, "04" => 3, "12" => 4, "13" => 5, "14" => 6, "23" => 7, "24" => 8, "34" => 9})
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
