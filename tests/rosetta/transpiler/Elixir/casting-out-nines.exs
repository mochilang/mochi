# Code generated by Mochi transpiler 2025-08-03 23:06 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.monotonic_time(:microsecond)
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def parseIntBase(s, base) do
    try do
      digits = "0123456789abcdefghijklmnopqrstuvwxyz"
      n = 0
      i = 0
      while_fun = fn while_fun, i, n ->
        if i < _len(s) do
          j = 0
          v = 0
          while_fun_2 = fn while_fun_2, j, v ->
            if j < _len(digits) do
              {v} = if _slice(digits, j, j + 1 - (j)) == _slice(s, i, (i + 1) - i) do
                v = j
                throw {:break, {j, v}}
                {v}
              else
                {v}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j, v)
            else
              {j, v}
            end
          end
          {j, v} = try do
              while_fun_2.(while_fun_2, j, v)
            catch
              {:break, {j, v}} -> {j, v}
            end

          n = n * base + v
          i = i + 1
          while_fun.(while_fun, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun.(while_fun, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def intToBase(n, base) do
    try do
      digits = "0123456789abcdefghijklmnopqrstuvwxyz"
      if n == 0 do
        throw {:return, "0"}
      end
      out = ""
      v = n
      while_fun_3 = fn while_fun_3, out, v ->
        if v > 0 do
          d = rem(v, base)
          out = (_slice(digits, d, (d + 1) - d) <> out)
          v = div(v, base)
          while_fun_3.(while_fun_3, out, v)
        else
          {out, v}
        end
      end
      {out, v} = try do
          while_fun_3.(while_fun_3, out, v)
        catch
          {:break, {out, v}} -> {out, v}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def subset(base, begin, end_) do
    try do
      b = Main.parseIntBase(begin, base)
      e = Main.parseIntBase(end_, base)
      out = []
      k = b
      while_fun_4 = fn while_fun_4, k, out ->
        if k <= e do
          ks = Main.intToBase(k, base)
          mod = base - 1
          r1 = rem(Main.parseIntBase(ks, base), mod)
          r2 = rem((Main.parseIntBase(ks, base) * Main.parseIntBase(ks, base)), mod)
          {out} = if r1 == r2 do
            out = (out ++ [ks])
            {out}
          else
            {out}
          end
          k = k + 1
          while_fun_4.(while_fun_4, k, out)
        else
          {k, out}
        end
      end
      {k, out} = try do
          while_fun_4.(while_fun_4, k, out)
        catch
          {:break, {k, out}} -> {k, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:testCases, [%{"base" => 10, "begin" => "1", "end" => "100", "kaprekar" => ["1", "9", "45", "55", "99"]}, %{"base" => 17, "begin" => "10", "end" => "gg", "kaprekar" => ["3d", "d4", "gg"]}])
  Process.put(:idx, 0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    while_fun_5 = fn while_fun_5 ->
      if Process.get(:idx) < _len(Process.get(:testCases)) do
        tc = Enum.at(Process.get(:testCases), Process.get(:idx))
        IO.puts((((((("\nTest case base = " <> Kernel.inspect(tc["base"])) <> ", begin = ") <> tc["begin"]) <> ", end = ") <> tc["end"]) <> ":"))
        s = Main.subset(tc["base"], tc["begin"], tc["end"])
        IO.puts(("Subset:  " <> Kernel.to_string(s)))
        IO.puts(("Kaprekar:" <> Kernel.inspect(tc["kaprekar"])))
        sx = 0
        valid = true
        i = 0
        while_fun_6 = fn while_fun_6, i, sx, valid ->
          if i < _len(Map.get(tc, "kaprekar", [])) do
            k = Enum.at(tc["kaprekar"], i)
            found = false
            while_fun_7 = fn while_fun_7, found, sx ->
              if sx < _len(s) do
                {found, sx} = if Enum.at(s, sx) == k do
                  found = true
                  sx = sx + 1
                  throw {:break, {found, sx}}
                  {found, sx}
                else
                  {found, sx}
                end
                sx = sx + 1
                while_fun_7.(while_fun_7, found, sx)
              else
                {found, sx}
              end
            end
            {found, sx} = try do
                while_fun_7.(while_fun_7, found, sx)
              catch
                {:break, {found, sx}} -> {found, sx}
              end

            {valid} = if !found do
              IO.puts((("Fail:" <> k) <> " not in subset"))
              valid = false
              throw {:break, {i, sx, valid}}
              {valid}
            else
              {valid}
            end
            i = i + 1
            while_fun_6.(while_fun_6, i, sx, valid)
          else
            {i, sx, valid}
          end
        end
        {i, sx, valid} = try do
            while_fun_6.(while_fun_6, i, sx, valid)
          catch
            {:break, {i, sx, valid}} -> {i, sx, valid}
          end

        if valid do
          IO.puts("Valid subset.")
        end
        Process.put(:idx, Process.get(:idx) + 1)
        while_fun_5.(while_fun_5)
      else
        nil
      end
    end
    try do
      while_fun_5.(while_fun_5)
    catch
      :break -> nil
    end

    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
