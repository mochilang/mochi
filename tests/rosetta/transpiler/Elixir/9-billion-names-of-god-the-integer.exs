# Code generated by Mochi transpiler 2025-07-24 20:52 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      seed
    else
      System.os_time(:nanosecond)
    end
  end
  def bigTrim(a) do
    try do
      n = Enum.count(a)
      while_fun = fn while_fun, a, n ->
        if n > 1 && Enum.at(a, n - 1) == 0 do
          a = Enum.slice(a, 0, n - 1 - 0)
          n = n - 1
          while_fun.(while_fun, a, n)
        else
          {a, n}
        end
      end
      {a, n} = try do
          while_fun.(while_fun, a, n)
        catch
          :break -> {a, n}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def bigFromInt(x) do
    try do
      if x == 0 do
        throw {:return, [0]}
      end
      digits = []
      n = x
      while_fun_2 = fn while_fun_2, digits, n ->
        if n > 0 do
          digits = (digits ++ [rem(n, 10)])
          n = div(n, 10)
          while_fun_2.(while_fun_2, digits, n)
        else
          {digits, n}
        end
      end
      {digits, n} = try do
          while_fun_2.(while_fun_2, digits, n)
        catch
          :break -> {digits, n}
        end

      throw {:return, digits}
    catch
      {:return, val} -> val
    end
  end
  def bigAdd(a, b) do
    try do
      res = []
      carry = 0
      i = 0
      while_fun_3 = fn while_fun_3, carry, i, res ->
        if i < Enum.count(a) || i < Enum.count(b) || carry > 0 do
          av = 0
          {av} = if i < Enum.count(a) do
            av = Enum.at(a, i)
            {av}
          else
            {av}
          end
          bv = 0
          {bv} = if i < Enum.count(b) do
            bv = Enum.at(b, i)
            {bv}
          else
            {bv}
          end
          s = av + bv + carry
          res = (res ++ [rem(s, 10)])
          carry = div(s, 10)
          i = i + 1
          while_fun_3.(while_fun_3, carry, i, res)
        else
          {carry, i, res}
        end
      end
      {carry, i, res} = try do
          while_fun_3.(while_fun_3, carry, i, res)
        catch
          :break -> {carry, i, res}
        end

      throw {:return, bigTrim(res)}
    catch
      {:return, val} -> val
    end
  end
  def bigSub(a, b) do
    try do
      res = []
      borrow = 0
      i = 0
      while_fun_4 = fn while_fun_4, borrow, i, res ->
        if i < Enum.count(a) do
          av = Enum.at(a, i)
          bv = 0
          {bv} = if i < Enum.count(b) do
            bv = Enum.at(b, i)
            {bv}
          else
            {bv}
          end
          diff = av - bv - borrow
          {diff} = if diff < 0 do
            diff = diff + 10
            borrow = 1
            {diff}
          else
            borrow = 0
            {diff}
          end
          res = (res ++ [diff])
          i = i + 1
          while_fun_4.(while_fun_4, borrow, i, res)
        else
          {borrow, i, res}
        end
      end
      {borrow, i, res} = try do
          while_fun_4.(while_fun_4, borrow, i, res)
        catch
          :break -> {borrow, i, res}
        end

      throw {:return, bigTrim(res)}
    catch
      {:return, val} -> val
    end
  end
  def bigToString(a) do
    try do
      s = ""
      i = Enum.count(a) - 1
      while_fun_5 = fn while_fun_5, i, s ->
        if i >= 0 do
          s = (s <> to_string(Enum.at(a, i)))
          i = i - 1
          while_fun_5.(while_fun_5, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_5.(while_fun_5, i, s)
        catch
          :break -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def minInt(a, b) do
    try do
      if a < b do
        throw {:return, a}
      else
        throw {:return, b}
      end
    catch
      {:return, val} -> val
    end
  end
  def cumu(n) do
    try do
      cache = [[bigFromInt(1)]]
      y = 1
      while_fun_6 = fn while_fun_6, cache, y ->
        if y <= n do
          row = [bigFromInt(0)]
          x = 1
          while_fun_7 = fn while_fun_7, row, x ->
            if x <= y do
              val = Enum.at(Enum.at(cache, y - x), minInt(x, y - x))
              row = (row ++ [bigAdd(Enum.at(row, Enum.count(row) - 1), val)])
              x = x + 1
              while_fun_7.(while_fun_7, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_7.(while_fun_7, row, x)
            catch
              :break -> {row, x}
            end

          cache = (cache ++ [row])
          y = y + 1
          while_fun_6.(while_fun_6, cache, y)
        else
          {cache, y}
        end
      end
      {cache, y} = try do
          while_fun_6.(while_fun_6, cache, y)
        catch
          :break -> {cache, y}
        end

      throw {:return, Enum.at(cache, n)}
    catch
      {:return, val} -> val
    end
  end
  def row(n) do
    try do
      e = cumu(n)
      out = []
      i = 0
      while_fun_8 = fn while_fun_8, i, out ->
        if i < n do
          diff = bigSub(Enum.at(e, i + 1), Enum.at(e, i))
          out = (out ++ [bigToString(diff)])
          i = i + 1
          while_fun_8.(while_fun_8, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_8.(while_fun_8, i, out)
        catch
          :break -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts("rows:")
    x = 1
    while_fun_9 = fn while_fun_9, x ->
      if x < 11 do
        r = row(x)
        line = ""
        i = 0
        while_fun_10 = fn while_fun_10, i, line ->
          if i < Enum.count(r) do
            line = (((line <> " ") <> Enum.at(r, i)) <> " ")
            i = i + 1
            while_fun_10.(while_fun_10, i, line)
          else
            {i, line}
          end
        end
        {i, line} = try do
            while_fun_10.(while_fun_10, i, line)
          catch
            :break -> {i, line}
          end

        IO.puts(line)
        x = x + 1
        while_fun_9.(while_fun_9, x)
      else
        x
      end
    end
    x = try do
        while_fun_9.(while_fun_9, x)
      catch
        :break -> x
      end

    IO.puts("")
    IO.puts("sums:")
    Enum.each([23, 123, 1234], fn num ->
      r = cumu(num)
      IO.puts(Kernel.to_string(((to_string(num) <> " ") <> bigToString(Enum.at(r, Enum.count(r) - 1)))))
    end)
  end
end
Main.main()
