# Code generated by Mochi transpiler 2025-08-04 22:33 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  def capitalize(s) do
    try do
      throw {:return, ((if _len(s) == 0, do: s, else: (String.upcase(_slice(s, 0, 1 - (0))) <> _slice(s, 1, _len(s) - (1)))))}
    catch
      {:return, val} -> val
    end
  end
  def say(n) do
    try do
      t = ""
      {n, t} = if n < 0 do
        t = "negative "
        n = -n
        {n, t}
      else
        {n, t}
      end
      {t} = if n < 20 do
        throw {:return, (t <> Enum.at(Process.get(:small), n))}
        {t}
      else
        {t} = if n < 100 do
          t = Enum.at(Process.get(:tens), div(n, 10))
          s = rem(n, 10)
          {t} = if s > 0 do
            t = ((t <> "-") <> Enum.at(Process.get(:small), s))
            {t}
          else
            {t}
          end
          throw {:return, t}
          {t}
        else
          {t} = if n < 1000 do
            t = (Enum.at(Process.get(:small), div(n, 100)) <> " hundred")
            s = rem(n, 100)
            {t} = if s > 0 do
              t = ((t <> " ") <> say(s))
              {t}
            else
              {t}
            end
            throw {:return, t}
            {t}
          else
            {t}
          end
          {t}
        end
        {t}
      end
      sx = ""
      i = 0
      nn = n
      while_fun = fn while_fun, i, nn, sx ->
        if nn > 0 do
          p = rem(nn, 1000)
          nn = div(nn, 1000)
          {sx} = if p > 0 do
            ix = (say(p) <> Enum.at(Process.get(:illions), i))
            {ix} = if sx != "" do
              ix = ((ix <> " ") <> sx)
              {ix}
            else
              {ix}
            end
            sx = ix
            {sx}
          else
            {sx}
          end
          i = i + 1
          while_fun.(while_fun, i, nn, sx)
        else
          {i, nn, sx}
        end
      end
      {i, nn, sx} = try do
          while_fun.(while_fun, i, nn, sx)
        catch
          {:break, {i, nn, sx}} -> {i, nn, sx}
        end

      throw {:return, (t <> sx)}
    catch
      {:return, val} -> val
    end
  end
  def fourIsMagic(n) do
    try do
      s = say(n)
      s = capitalize(s)
      t = s
      while_fun_2 = fn while_fun_2, n, s, t ->
        if n != 4 do
          n = _len(s)
          s = say(n)
          t = ((((t <> " is ") <> s) <> ", ") <> s)
          while_fun_2.(while_fun_2, n, s, t)
        else
          {n, s, t}
        end
      end
      {n, s, t} = try do
          while_fun_2.(while_fun_2, n, s, t)
        catch
          {:break, {n, s, t}} -> {n, s, t}
        end

      t = (t <> " is magic.")
      throw {:return, t}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      nums = [0, 4, 6, 11, 13, 75, 100, 337, -164, 9223372036854775807]
      Enum.each(nums, fn n ->
        IO.puts(Kernel.inspect(fourIsMagic(n)))
      end)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:small, ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"])
  Process.put(:tens, ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"])
  Process.put(:illions, ["", " thousand", " million", " billion", " trillion", " quadrillion", " quintillion"])
  def bench_main() do
    Process.put(:small, ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"])
    Process.put(:tens, ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"])
    Process.put(:illions, ["", " thousand", " million", " billion", " trillion", " quadrillion", " quintillion"])
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
