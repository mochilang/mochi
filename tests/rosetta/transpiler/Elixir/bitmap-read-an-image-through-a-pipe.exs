# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def parseIntStr(str) do
    try do
      i = 0
      neg = false
      {i, neg} = if _len(str) > 0 && _slice(str, 0, 1 - 0) == "-" do
        neg = true
        i = 1
        {i, neg}
      else
        {i, neg}
      end
      n = 0
      digits = %{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
      while_fun = fn while_fun, i, n ->
        if i < _len(str) do
          n = n * 10 + digits[_slice(str, i, (i + 1) - i)]
          i = i + 1
          while_fun.(while_fun, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun.(while_fun, i, n)
        catch
          :break -> {i, n}
        end

      {n} = if neg do
        n = -n
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def splitWs(s) do
    try do
      parts = []
      cur = ""
      i = 0
      while_fun_2 = fn while_fun_2, cur, i, parts ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          {cur, parts} = if ch == " " || ch == "\n" || ch == "\t" || ch == "\r" do
            {cur, parts} = if _len(cur) > 0 do
              parts = (parts ++ [cur])
              cur = ""
              {cur, parts}
            else
              {cur, parts}
            end
            {cur, parts}
          else
            cur = (cur <> ch)
            {cur, parts}
          end
          i = i + 1
          while_fun_2.(while_fun_2, cur, i, parts)
        else
          {cur, i, parts}
        end
      end
      {cur, i, parts} = try do
          while_fun_2.(while_fun_2, cur, i, parts)
        catch
          :break -> {cur, i, parts}
        end

      {parts} = if _len(cur) > 0 do
        parts = (parts ++ [cur])
        {parts}
      else
        {parts}
      end
      throw {:return, parts}
    catch
      {:return, val} -> val
    end
  end
  def parsePpm(data) do
    try do
      toks = Main.splitWs(data)
      if _len(toks) < 4 do
        throw {:return, %{"err" => true}}
      end
      magic = Enum.at(toks, 0)
      w = Main.parseIntStr(Enum.at(toks, 1))
      h = Main.parseIntStr(Enum.at(toks, 2))
      maxv = Main.parseIntStr(Enum.at(toks, 3))
      px = []
      i = 4
      while_fun_3 = fn while_fun_3, i, px ->
        if i < _len(toks) do
          px = (px ++ [Main.parseIntStr(Enum.at(toks, i))])
          i = i + 1
          while_fun_3.(while_fun_3, i, px)
        else
          {i, px}
        end
      end
      {i, px} = try do
          while_fun_3.(while_fun_3, i, px)
        catch
          :break -> {i, px}
        end

      throw {:return, %{"magic" => magic, "w" => w, "h" => h, "max" => maxv, "px" => px}}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:ppmData, "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n")
  def main() do
    mem_start = _mem()
    t_start = _now()
    Process.put(:img, Main.parsePpm(Process.get(:ppmData)))
    IO.puts(((("width=" <> Kernel.inspect(Process.get(:img).w)) <> " height=") <> Kernel.inspect(Process.get(:img).h)))
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
