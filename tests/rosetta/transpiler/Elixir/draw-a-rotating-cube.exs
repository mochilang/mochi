# Code generated by Mochi transpiler 2025-08-04 15:54 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def _mod(x, m) do
    try do
      throw {:return, x - (trunc((x / m))) * m}
    catch
      {:return, val} -> val
    end
  end
  def _sin(x) do
    try do
      y = _mod(x + Process.get(:pi), Process.get(:two_pi)) - Process.get(:pi)
      y2 = y * y
      y3 = y2 * y
      y5 = y3 * y2
      y7 = y5 * y2
      throw {:return, y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0}
    catch
      {:return, val} -> val
    end
  end
  def _cos(x) do
    try do
      y = _mod(x + Process.get(:pi), Process.get(:two_pi)) - Process.get(:pi)
      y2 = y * y
      y4 = y2 * y2
      y6 = y4 * y2
      throw {:return, 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0}
    catch
      {:return, val} -> val
    end
  end
  def rotate(p, ax, ay) do
    try do
      sinx = _sin(ax)
      cosx = _cos(ax)
      siny = _sin(ay)
      cosy = _cos(ay)
      x1 = p.x
      y1 = p.y * cosx - p.z * sinx
      z1 = p.y * sinx + p.z * cosx
      x2 = x1 * cosy + z1 * siny
      z2 = -x1 * siny + z1 * cosy
      throw {:return, %{x: x2, y: y1, z: z2}}
    catch
      {:return, val} -> val
    end
  end
  def project(p) do
    try do
      factor = Process.get(:scale) / (p.z + Process.get(:distance))
      x = trunc((p.x * factor)) + div(Process.get(:width), 2)
      y = trunc((-p.y * factor)) + div(Process.get(:height), 2)
      throw {:return, %{x: x, y: y}}
    catch
      {:return, val} -> val
    end
  end
  def clearGrid() do
    try do
      g = []
      y = 0
      while_fun = fn while_fun, g, y ->
        if y < Process.get(:height) do
          row = []
          x = 0
          while_fun_2 = fn while_fun_2, row, x ->
            if x < Process.get(:width) do
              row = (row ++ [" "])
              x = x + 1
              while_fun_2.(while_fun_2, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_2.(while_fun_2, row, x)
            catch
              {:break, {row, x}} -> {row, x}
            end

          g = (g ++ [row])
          y = y + 1
          while_fun.(while_fun, g, y)
        else
          {g, y}
        end
      end
      {g, y} = try do
          while_fun.(while_fun, g, y)
        catch
          {:break, {g, y}} -> {g, y}
        end

      throw {:return, g}
    catch
      {:return, val} -> val
    end
  end
  def drawPoint(g, x, y, ch) do
    try do
      {g} = if x >= 0 && x < Process.get(:width) && y >= 0 && y < Process.get(:height) do
        row = Enum.at(g, y)
        row = List.replace_at(row, x, ch)
        g = List.replace_at(g, y, row)
        {g}
      else
        {g}
      end
    catch
      {:return, val} -> val
    end
  end
  def bresenham(x0, y0, x1, y1, g, ch) do
    try do
      dx = x1 - x0
      {dx} = if dx < 0 do
        dx = -dx
        {dx}
      else
        {dx}
      end
      dy = y1 - y0
      {dy} = if dy < 0 do
        dy = -dy
        {dy}
      else
        {dy}
      end
      sx = -1
      {sx} = if x0 < x1 do
        sx = 1
        {sx}
      else
        {sx}
      end
      sy = -1
      {sy} = if y0 < y1 do
        sy = 1
        {sy}
      else
        {sy}
      end
      err = dx - dy
      while_fun_3 = fn while_fun_3, err, x0, y0 ->
        if true do
          drawPoint(g, x0, y0, ch)
          if x0 == x1 && y0 == y1 do
            throw {:break, {err, x0, y0}}
          end
          e2 = 2 * err
          {err, x0} = if e2 > (-dy) do
            err = err - dy
            x0 = x0 + sx
            {err, x0}
          else
            {err, x0}
          end
          {err, y0} = if e2 < dx do
            err = err + dx
            y0 = y0 + sy
            {err, y0}
          else
            {err, y0}
          end
          while_fun_3.(while_fun_3, err, x0, y0)
        else
          {err, x0, y0}
        end
      end
      {err, x0, y0} = try do
          while_fun_3.(while_fun_3, err, x0, y0)
        catch
          {:break, {err, x0, y0}} -> {err, x0, y0}
        end

    catch
      {:return, val} -> val
    end
  end
  def render(g) do
    try do
      out = ""
      y = 0
      while_fun_4 = fn while_fun_4, out, y ->
        if y < Process.get(:height) do
          line = ""
          x = 0
          while_fun_5 = fn while_fun_5, line, x ->
            if x < Process.get(:width) do
              line = (line <> Enum.at(Enum.at(g, y), x))
              x = x + 1
              while_fun_5.(while_fun_5, line, x)
            else
              {line, x}
            end
          end
          {line, x} = try do
              while_fun_5.(while_fun_5, line, x)
            catch
              {:break, {line, x}} -> {line, x}
            end

          out = ((out <> line) <> "\n")
          y = y + 1
          while_fun_4.(while_fun_4, out, y)
        else
          {out, y}
        end
      end
      {out, y} = try do
          while_fun_4.(while_fun_4, out, y)
        catch
          {:break, {out, y}} -> {out, y}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      f = 0
      while_fun_6 = fn while_fun_6, f ->
        if f < 10 do
          grid = clearGrid()
          rot = []
          i = 0
          ay = (Process.get(:pi) / 4.0) + (f) * Process.get(:pi) / 10.0
          while_fun_7 = fn while_fun_7, i, rot ->
            if i < _len(Process.get(:nodes)) do
              p = rotate(Enum.at(Process.get(:nodes), i), Process.get(:pi) / 4.0, ay)
              pp = project(p)
              rot = (rot ++ [pp])
              i = i + 1
              while_fun_7.(while_fun_7, i, rot)
            else
              {i, rot}
            end
          end
          {i, rot} = try do
              while_fun_7.(while_fun_7, i, rot)
            catch
              {:break, {i, rot}} -> {i, rot}
            end

          e = 0
          while_fun_8 = fn while_fun_8, e ->
            if e < _len(Process.get(:edges)) do
              a = Enum.at(Enum.at(Process.get(:edges), e), 0)
              b = Enum.at(Enum.at(Process.get(:edges), e), 1)
              p1 = Enum.at(rot, a)
              p2 = Enum.at(rot, b)
              bresenham(p1.x, p1.y, p2.x, p2.y, grid, "#")
              e = e + 1
              while_fun_8.(while_fun_8, e)
            else
              e
            end
          end
          e = try do
              while_fun_8.(while_fun_8, e)
            catch
              {:break, {e}} -> e
            end

          IO.puts(Kernel.inspect(render(grid)))
          f = f + 1
          while_fun_6.(while_fun_6, f)
        else
          f
        end
      end
      f = try do
          while_fun_6.(while_fun_6, f)
        catch
          {:break, {f}} -> f
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  Process.put(:two_pi, 6.283185307179586)
  Process.put(:edges, [[0, 1], [1, 3], [3, 2], [2, 0], [4, 5], [5, 7], [7, 6], [6, 4], [0, 4], [1, 5], [2, 6], [3, 7]])
  Process.put(:width, 40)
  Process.put(:height, 20)
  Process.put(:distance, 3.0)
  Process.put(:scale, 8.0)
  def bench_main() do
    Process.put(:pi, 3.141592653589793)
    Process.put(:two_pi, 6.283185307179586)
    Process.put(:edges, [[0, 1], [1, 3], [3, 2], [2, 0], [4, 5], [5, 7], [7, 6], [6, 4], [0, 4], [1, 5], [2, 6], [3, 7]])
    Process.put(:width, 40)
    Process.put(:height, 20)
    Process.put(:distance, 3.0)
    Process.put(:scale, 8.0)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Process.put(:nodes, [%{x: -1.0, y: -1.0, z: -1.0}, %{x: -1.0, y: -1.0, z: 1.0}, %{x: -1.0, y: 1.0, z: -1.0}, %{x: -1.0, y: 1.0, z: 1.0}, %{x: 1.0, y: -1.0, z: -1.0}, %{x: 1.0, y: -1.0, z: 1.0}, %{x: 1.0, y: 1.0, z: -1.0}, %{x: 1.0, y: 1.0, z: 1.0}])
Main.bench_main()
