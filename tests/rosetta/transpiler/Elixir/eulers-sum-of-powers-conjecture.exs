# Code generated by Mochi transpiler 2025-07-31 00:20 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def eulerSum() do
    try do
      pow5 = []
      i = 0
      while_fun = fn while_fun, i, pow5 ->
        if i < 250 do
          pow5 = (pow5 ++ [i * i * i * i * i])
          i = i + 1
          while_fun.(while_fun, i, pow5)
        else
          {i, pow5}
        end
      end
      {i, pow5} = try do
          while_fun.(while_fun, i, pow5)
        catch
          {:break, {i, pow5}} -> {i, pow5}
        end

      sums = %{}
      x2 = 2
      while_fun_2 = fn while_fun_2, sums, x2 ->
        if x2 < 250 do
          x3 = 1
          while_fun_3 = fn while_fun_3, sums, x3 ->
            if x3 < x2 do
              s = Enum.at(pow5, x2) + Enum.at(pow5, x3)
              {sums} = if !(Map.has_key?(sums, s)) do
                sums = Map.put(sums, s, [x2, x3])
                {sums}
              else
                {sums}
              end
              x3 = x3 + 1
              while_fun_3.(while_fun_3, sums, x3)
            else
              {sums, x3}
            end
          end
          {sums, x3} = try do
              while_fun_3.(while_fun_3, sums, x3)
            catch
              {:break, {sums, x3}} -> {sums, x3}
            end

          x2 = x2 + 1
          while_fun_2.(while_fun_2, sums, x2)
        else
          {sums, x2}
        end
      end
      {sums, x2} = try do
          while_fun_2.(while_fun_2, sums, x2)
        catch
          {:break, {sums, x2}} -> {sums, x2}
        end

      x0 = 4
      while_fun_4 = fn while_fun_4, x0 ->
        if x0 < 250 do
          x1 = 3
          while_fun_5 = fn while_fun_5, x1 ->
            if x1 < x0 do
              y = x0 + 1
              while_fun_6 = fn while_fun_6, y ->
                if y < 250 do
                  rem = Enum.at(pow5, y) - Enum.at(pow5, x0) - Enum.at(pow5, x1)
                  if Map.has_key?(sums, rem) do
                    pair = sums[rem]
                    a = Enum.at(pair, 0)
                    b = Enum.at(pair, 1)
                    if x1 > a && a > b do
                      throw {:return, [x0, x1, a, b, y]}
                    end
                  end
                  y = y + 1
                  while_fun_6.(while_fun_6, y)
                else
                  y
                end
              end
              y = try do
                  while_fun_6.(while_fun_6, y)
                catch
                  {:break, y} -> y
                end

              x1 = x1 + 1
              while_fun_5.(while_fun_5, x1)
            else
              x1
            end
          end
          x1 = try do
              while_fun_5.(while_fun_5, x1)
            catch
              {:break, x1} -> x1
            end

          x0 = x0 + 1
          while_fun_4.(while_fun_4, x0)
        else
          x0
        end
      end
      x0 = try do
          while_fun_4.(while_fun_4, x0)
        catch
          {:break, x0} -> x0
        end

      throw {:return, [0, 0, 0, 0, 0]}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      r = Main.eulerSum()
      IO.puts(((((((((Kernel.to_string(Enum.at(r, 0)) <> " ") <> Kernel.to_string(Enum.at(r, 1))) <> " ") <> Kernel.to_string(Enum.at(r, 2))) <> " ") <> Kernel.to_string(Enum.at(r, 3))) <> " ") <> Kernel.to_string(Enum.at(r, 4))))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
