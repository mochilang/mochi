# Code generated by Mochi transpiler 2025-07-31 00:20 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  def randInt(s, n) do
    try do
      next = rem((s * 1664525 + 1013904223), 2147483647)
      throw {:return, [next, rem(next, n)]}
    catch
      {:return, val} -> val
    end
  end
  def randChar() do
    try do
      r = Main.randInt(Process.get(:seed), _len(Process.get(:chars)))
      Process.put(:seed, Enum.at(r, 0))
      idx = trunc(Enum.at(r, 1))
      throw {:return, _slice(Process.get(:chars), idx, idx + 1 - (idx))}
    catch
      {:return, val} -> val
    end
  end
  def randomString(n) do
    try do
      s = ""
      i = 0
      while_fun = fn while_fun, i, s ->
        if i < n do
          s = (s <> Main.randChar())
          i = i + 1
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def fitness(s) do
    try do
      h = 0
      i = 0
      while_fun_2 = fn while_fun_2, h, i ->
        if i < _len(Process.get(:target)) do
          {h} = if _slice(s, i, i + 1 - (i)) != _slice(Process.get(:target), i, i + 1 - (i)) do
            h = h + 1
            {h}
          else
            {h}
          end
          i = i + 1
          while_fun_2.(while_fun_2, h, i)
        else
          {h, i}
        end
      end
      {h, i} = try do
          while_fun_2.(while_fun_2, h, i)
        catch
          {:break, {h, i}} -> {h, i}
        end

      throw {:return, h}
    catch
      {:return, val} -> val
    end
  end
  def mutate(p) do
    try do
      m = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, m ->
        if i < _len(p) do
          r = Main.randInt(Process.get(:seed), 20)
          Process.put(:seed, Enum.at(r, 0))
          m = (if Enum.at(r, 1) == 0, do: (m <> Main.randChar()), else: (m <> _slice(p, i, i + 1 - (i))))
          i = i + 1
          while_fun_3.(while_fun_3, i, m)
        else
          {i, m}
        end
      end
      {i, m} = try do
          while_fun_3.(while_fun_3, i, m)
        catch
          {:break, {i, m}} -> {i, m}
        end

      throw {:return, m}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      parent = Main.randomString(_len(Process.get(:target)))
      IO.puts(parent)
      best = Main.fitness(parent)
      done = false
      while_fun_4 = fn while_fun_4, best, done, parent ->
        if !done do
          i = 0
          while_fun_5 = fn while_fun_5, best, done, i, parent ->
            if i < 20 do
              child = Main.mutate(parent)
              f = Main.fitness(child)
              {best, done, parent} = if f < best do
                best = f
                parent = child
                IO.puts(parent)
                {done} = if best == 0 do
                  done = true
                  throw {:break, {best, done, i, parent}}
                  {done}
                else
                  {done}
                end
                {best, done, parent}
              else
                {best, done, parent}
              end
              i = i + 1
              while_fun_5.(while_fun_5, best, done, i, parent)
            else
              {best, done, i, parent}
            end
          end
          {best, done, i, parent} = try do
              while_fun_5.(while_fun_5, best, done, i, parent)
            catch
              {:break, {best, done, i, parent}} -> {best, done, i, parent}
            end

          while_fun_4.(while_fun_4, best, done, parent)
        else
          {best, done, parent}
        end
      end
      {best, done, parent} = try do
          while_fun_4.(while_fun_4, best, done, parent)
        catch
          {:break, {best, done, parent}} -> {best, done, parent}
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:target, "METHINKS IT IS LIKE A WEASEL")
  Process.put(:chars, "ABCDEFGHIJKLMNOPQRSTUVWXYZ ")
  Process.put(:seed, 1)
end
Main.main()
