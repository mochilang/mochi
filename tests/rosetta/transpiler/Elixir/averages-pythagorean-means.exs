# Code generated by Mochi transpiler 2025-07-27 01:41 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def powf(base, exp) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          :break -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def nthRoot(x, n) do
    try do
      low = 0.0
      high = x
      i = 0
      while_fun_2 = fn while_fun_2, high, i, low ->
        if i < 60 do
          mid = (low + high) / 2.0
          {high, low} = if Main.powf(mid, n) > x do
            high = mid
            {high, low}
          else
            low = mid
            {high, low}
          end
          i = i + 1
          while_fun_2.(while_fun_2, high, i, low)
        else
          {high, i, low}
        end
      end
      {high, i, low} = try do
          while_fun_2.(while_fun_2, high, i, low)
        catch
          :break -> {high, i, low}
        end

      throw {:return, low}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      sum = 0.0
      sumRecip = 0.0
      prod = 1.0
      n = 1
      while_fun_3 = fn while_fun_3, n, prod, sum, sumRecip ->
        if n <= 10 do
          f = n
          sum = sum + f
          sumRecip = sumRecip + 1.0 / f
          prod = prod * f
          n = n + 1
          while_fun_3.(while_fun_3, n, prod, sum, sumRecip)
        else
          {n, prod, sum, sumRecip}
        end
      end
      {n, prod, sum, sumRecip} = try do
          while_fun_3.(while_fun_3, n, prod, sum, sumRecip)
        catch
          :break -> {n, prod, sum, sumRecip}
        end

      count = 10.0
      a = sum / count
      g = Main.nthRoot(prod, 10)
      h = count / sumRecip
      IO.puts(((((("A: " <> Kernel.inspect(a)) <> " G: ") <> Kernel.inspect(g)) <> " H: ") <> Kernel.inspect(h)))
      IO.puts(("A >= G >= H: " <> Kernel.inspect(a >= g && g >= h)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
