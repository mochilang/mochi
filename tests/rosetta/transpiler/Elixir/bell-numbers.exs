# Code generated by Mochi transpiler 2025-07-27 05:40 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) -> String.slice(base, start, len)
      len == 1 -> Enum.slice(base, start, len)
      true -> Enum.slice(base, start, len)
    end
  end
  def bellTriangle(n) do
    try do
      tri = []
      i = 0
      while_fun = fn while_fun, i, tri ->
        if i < n do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < i do
              row = (row ++ [0])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              :break -> {j, row}
            end

          tri = (tri ++ [row])
          i = i + 1
          while_fun.(while_fun, i, tri)
        else
          {i, tri}
        end
      end
      {i, tri} = try do
          while_fun.(while_fun, i, tri)
        catch
          :break -> {i, tri}
        end

      tri = List.replace_at(tri, 1, List.replace_at(Enum.at(tri, 1), 0, 1))
      i = 2
      while_fun_3 = fn while_fun_3, i, tri ->
        if i < n do
          tri = List.replace_at(tri, i, List.replace_at(Enum.at(tri, i), 0, Enum.at(Enum.at(tri, i - 1), i - 2)))
          j = 1
          while_fun_4 = fn while_fun_4, j, tri ->
            if j < i do
              tri = List.replace_at(tri, i, List.replace_at(Enum.at(tri, i), j, Enum.at(Enum.at(tri, i), j - 1) + Enum.at(Enum.at(tri, i - 1), j - 1)))
              j = j + 1
              while_fun_4.(while_fun_4, j, tri)
            else
              {j, tri}
            end
          end
          {j, tri} = try do
              while_fun_4.(while_fun_4, j, tri)
            catch
              :break -> {j, tri}
            end

          i = i + 1
          while_fun_3.(while_fun_3, i, tri)
        else
          {i, tri}
        end
      end
      {i, tri} = try do
          while_fun_3.(while_fun_3, i, tri)
        catch
          :break -> {i, tri}
        end

      throw {:return, tri}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      bt = Main.bellTriangle(51)
      IO.puts("First fifteen and fiftieth Bell numbers:")
      Enum.each((1..(16 - 1)), fn i ->
        IO.puts(((("" <> String.pad_leading(Kernel.to_string(i), 2, " ")) <> ": ") <> Kernel.inspect(Enum.at(Enum.at(bt, i), 0))))
      end)
      IO.puts(("50: " <> Kernel.inspect(Enum.at(Enum.at(bt, 50), 0))))
      IO.puts("")
      IO.puts("The first ten rows of Bell's triangle:")
      Enum.each((1..(11 - 1)), fn i ->
        IO.puts(Kernel.inspect(Enum.at(bt, i)))
      end)
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
