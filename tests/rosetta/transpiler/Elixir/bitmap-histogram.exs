# Code generated by Mochi transpiler 2025-07-27 16:31 +0700
defmodule Main do
  defp _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      abs(System.os_time(:nanosecond))
    end
  end
  defp _mem() do
    :erlang.memory(:total)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  def image() do
    try do
      throw {:return, [[0, 0, 10000], [65535, 65535, 65535], [65535, 65535, 65535]]}
    catch
      {:return, val} -> val
    end
  end
  def histogram(g, bins) do
    try do
      {bins} = if bins <= 0 do
        bins = _len(Enum.at(g, 0))
        {bins}
      else
        {bins}
      end
      h = []
      i = 0
      while_fun = fn while_fun, h, i ->
        if i < bins do
          h = (h ++ [0])
          i = i + 1
          while_fun.(while_fun, h, i)
        else
          {h, i}
        end
      end
      {h, i} = try do
          while_fun.(while_fun, h, i)
        catch
          :break -> {h, i}
        end

      y = 0
      while_fun_2 = fn while_fun_2, h, y ->
        if y < _len(g) do
          row = Enum.at(g, y)
          x = 0
          while_fun_3 = fn while_fun_3, h, x ->
            if x < _len(row) do
              p = Enum.at(row, x)
              idx = trunc((div((p * (bins - 1)), 65535)))
              h = List.replace_at(h, idx, Enum.at(h, idx) + 1)
              x = x + 1
              while_fun_3.(while_fun_3, h, x)
            else
              {h, x}
            end
          end
          {h, x} = try do
              while_fun_3.(while_fun_3, h, x)
            catch
              :break -> {h, x}
            end

          y = y + 1
          while_fun_2.(while_fun_2, h, y)
        else
          {h, y}
        end
      end
      {h, y} = try do
          while_fun_2.(while_fun_2, h, y)
        catch
          :break -> {h, y}
        end

      throw {:return, h}
    catch
      {:return, val} -> val
    end
  end
  def medianThreshold(h) do
    try do
      lb = 0
      ub = _len(h) - 1
      lSum = 0
      uSum = 0
      while_fun_4 = fn while_fun_4, lSum, lb, uSum, ub ->
        if lb <= ub do
          {lSum, lb, uSum, ub} = if lSum + Enum.at(h, lb) < uSum + Enum.at(h, ub) do
            lSum = lSum + Enum.at(h, lb)
            lb = lb + 1
            {lSum, lb, uSum, ub}
          else
            uSum = uSum + Enum.at(h, ub)
            ub = ub - 1
            {lSum, lb, uSum, ub}
          end
          while_fun_4.(while_fun_4, lSum, lb, uSum, ub)
        else
          {lSum, lb, uSum, ub}
        end
      end
      {lSum, lb, uSum, ub} = try do
          while_fun_4.(while_fun_4, lSum, lb, uSum, ub)
        catch
          :break -> {lSum, lb, uSum, ub}
        end

      throw {:return, trunc((div((ub * 65535), _len(h))))}
    catch
      {:return, val} -> val
    end
  end
  def threshold(g, t) do
    try do
      out = []
      y = 0
      while_fun_5 = fn while_fun_5, out, y ->
        if y < _len(g) do
          row = Enum.at(g, y)
          newRow = []
          x = 0
          while_fun_6 = fn while_fun_6, newRow, x ->
            if x < _len(row) do
              newRow = (if Enum.at(row, x) < t, do: (newRow ++ [0]), else: (newRow ++ [65535]))
              x = x + 1
              while_fun_6.(while_fun_6, newRow, x)
            else
              {newRow, x}
            end
          end
          {newRow, x} = try do
              while_fun_6.(while_fun_6, newRow, x)
            catch
              :break -> {newRow, x}
            end

          out = (out ++ [newRow])
          y = y + 1
          while_fun_5.(while_fun_5, out, y)
        else
          {out, y}
        end
      end
      {out, y} = try do
          while_fun_5.(while_fun_5, out, y)
        catch
          :break -> {out, y}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def printImage(g) do
    try do
      y = 0
      while_fun_7 = fn while_fun_7, y ->
        if y < _len(g) do
          row = Enum.at(g, y)
          line = ""
          x = 0
          while_fun_8 = fn while_fun_8, line, x ->
            if x < _len(row) do
              line = (if Enum.at(row, x) == 0, do: (line <> "0"), else: (line <> "1"))
              x = x + 1
              while_fun_8.(while_fun_8, line, x)
            else
              {line, x}
            end
          end
          {line, x} = try do
              while_fun_8.(while_fun_8, line, x)
            catch
              :break -> {line, x}
            end

          IO.puts(line)
          y = y + 1
          while_fun_7.(while_fun_7, y)
        else
          y
        end
      end
      y = try do
          while_fun_7.(while_fun_7, y)
        catch
          :break -> y
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      img = Main.image()
      h = Main.histogram(img, 0)
      IO.puts(("Histogram: " <> String.replace(IO.iodata_to_binary(:io_lib.format("~w", [h])), ",", " ")))
      t = Main.medianThreshold(h)
      IO.puts(("Threshold: " <> Kernel.to_string(t)))
      bw = Main.threshold(img, t)
      Main.printImage(bw)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    mem_start = _mem()
    t_start = _now()
    main()
    duration_us = div(_now() - t_start, 1000)
    mem_diff = abs(_mem() - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
