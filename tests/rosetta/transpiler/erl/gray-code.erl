#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, xor_fn/2, enc/1, dec/1, binary/1, pad5/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (26b9f6045a) on 2025-08-02 23:10 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

xor_fn(A, B) ->
    try
        Res = 0,
        Bit = 1,
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, Bit, Res, X, Y) ->
    case ((X > 0) orelse (Y > 0)) of
        true ->
            case ((((X rem 2) + (Y rem 2)) rem 2) == 1) of
        true -> Res_2 = (Res + Bit),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            X_2 = (X div 2),
            Y_2 = (Y div 2),
            Bit_2 = (Bit * 2),
            Fun_loop(A, B, Bit_2, Res_3, X_2, Y_2);
        _ -> {A, B, Bit, Res, X, Y}
    end
end,
{A, B, Bit_2, Res_3, X_2, Y_2} = Fun(A, B, Bit, Res, X, Y),
        Res_3
    catch {return, Ret} -> Ret end.

enc(B_2) ->
    try
        xor_fn(B_2, (B_2 div 2))
    catch {return, Ret} -> Ret end.

dec(G) ->
    try
        B_3 = 0,
        X_3 = G,
        Fun_2 = fun Fun_2_loop(B_3, G, X_3) ->
    case (X_3 > 0) of
        true ->
            B_4 = xor_fn(B_3, X_3),
            X_4 = (X_3 div 2),
            Fun_2_loop(B_4, G, X_4);
        _ -> {B_3, G, X_3}
    end
end,
{B_4, G, X_4} = Fun_2(B_3, G, X_3),
        B_4
    catch {return, Ret} -> Ret end.

binary(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        S = "",
        X_5 = N,
        Fun_3 = fun Fun_3_loop(N, S, X_5) ->
    case (X_5 > 0) of
        true ->
            case ((X_5 rem 2) == 1) of
        true -> S_2 = ("1" ++ S),
            S_4 = S_2;
        _ -> S_3 = ("0" ++ S),
            S_4 = S_3
    end,
            X_6 = (X_5 div 2),
            Fun_3_loop(N, S_4, X_6);
        _ -> {N, S, X_5}
    end
end,
{N, S_4, X_6} = Fun_3(N, S, X_5),
        S_4
    catch {return, Ret} -> Ret end.

pad5(S_5) ->
    try
        P = S_5,
        Fun_4 = fun Fun_4_loop(P, S_5) ->
    case (length(P) < 5) of
        true ->
            P_2 = ("0" ++ P),
            Fun_4_loop(P_2, S_5);
        _ -> {P, S_5}
    end
end,
{P_2, S_5} = Fun_4(P, S_5),
        P_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", ["decimal  binary   gray    decoded"]),
        B_5 = 0,
        Fun_5 = fun Fun_5_loop(B_5) ->
    case (B_5 < 32) of
        true ->
            G_2 = enc(B_5),
            D = dec(G_2),
            io:format("~ts~n", [((((((("  " ++ pad5(binary(B_5))) ++ "   ") ++ pad5(binary(G_2))) ++ "   ") ++ pad5(binary(D))) ++ "  ") ++ lists:flatten(io_lib:format("~p", [D])))]),
            B_6 = (B_5 + 1),
            Fun_5_loop(B_6);
        _ -> {B_5}
    end
end,
{B_6} = Fun_5(B_5),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
