#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sinapprox/1, cosapprox/1, cis/1, add/2, sub/2, mul/2, ditfft2rec/6, ditfft2/4, main/0, pad/2, fmt/1, floorf/1, indexof/2]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.

sinapprox(X) ->
    try
        Term = X,
        Sum = X,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X) ->
    case (N =< 10) of
        true ->
            Denom = float(((2 * N) * ((2 * N) + 1))),
            Term_2 = (((-Term * X) * X) / Denom),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X);
        _ -> {N, Sum, Term, X}
    end
end,
{N_2, Sum_2, Term_2, X} = Fun(N, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

cosapprox(X_2) ->
    try
        Term_3 = 1,
        Sum_3 = 1,
        N_3 = 1,
        Fun_2 = fun Fun_2_loop(N_3, Sum_3, Term_3, X_2) ->
    case (N_3 =< 10) of
        true ->
            Denom_2 = float((((2 * N_3) - 1) * (2 * N_3))),
            Term_4 = (((-Term_3 * X_2) * X_2) / Denom_2),
            Sum_4 = (Sum_3 + Term_4),
            N_4 = (N_3 + 1),
            Fun_2_loop(N_4, Sum_4, Term_4, X_2);
        _ -> {N_3, Sum_3, Term_3, X_2}
    end
end,
{N_4, Sum_4, Term_4, X_2} = Fun_2(N_3, Sum_3, Term_3, X_2),
        Sum_4
    catch {return, Ret} -> Ret end.

cis(X_3) ->
    try
        #{"re" => cosapprox(X_3), "im" => sinapprox(X_3)}
    catch {return, Ret} -> Ret end.

add(A, B) ->
    try
        #{"re" => (maps:get("re", A, nil) + maps:get("re", B, nil)), "im" => (maps:get("im", A, nil) + maps:get("im", B, nil))}
    catch {return, Ret} -> Ret end.

sub(A_2, B_2) ->
    try
        #{"re" => (maps:get("re", A_2, nil) - maps:get("re", B_2, nil)), "im" => (maps:get("im", A_2, nil) - maps:get("im", B_2, nil))}
    catch {return, Ret} -> Ret end.

mul(A_3, B_3) ->
    try
        #{"re" => ((maps:get("re", A_3, nil) * maps:get("re", B_3, nil)) - (maps:get("im", A_3, nil) * maps:get("im", B_3, nil))), "im" => ((maps:get("re", A_3, nil) * maps:get("im", B_3, nil)) + (maps:get("im", A_3, nil) * maps:get("re", B_3, nil)))}
    catch {return, Ret} -> Ret end.

ditfft2rec(X_4, Y, OffX, OffY, N_5, S) ->
    try
        case (N_5 == 1) of
        true -> Y_2 = lists:sublist(Y, OffY) ++ [#{"re" => (case erlang:is_map(X_4) of true -> maps:get(OffX, X_4, nil); _ -> lists:nth(OffX + 1, X_4) end), "im" => 0}] ++ lists:nthtail(OffY + 1, Y),
            throw({return, {nil, Y_2}}),
            Y_3 = Y_2;
        _ -> Y_3 = Y
    end,
        ditfft2rec(X_4, Y_3, OffX, OffY, (N_5 div 2), (2 * S)),
        ditfft2rec(X_4, Y_3, (OffX + S), (OffY + (N_5 div 2)), (N_5 div 2), (2 * S)),
        K = 0,
        Fun_3 = fun Fun_3_loop(K, N_5, OffX, OffY, S, X_4, Y_3) ->
    case (K < (N_5 div 2)) of
        true ->
            Angle = (((-2 * 3.141592653589793) * float(K)) / float(N_5)),
            Tf = mul(cis(Angle), (case erlang:is_map(Y_3) of true -> maps:get(((OffY + K) + (N_5 div 2)), Y_3, nil); _ -> lists:nth(((OffY + K) + (N_5 div 2)) + 1, Y_3) end)),
            A_4 = add((case erlang:is_map(Y_3) of true -> maps:get((OffY + K), Y_3, nil); _ -> lists:nth((OffY + K) + 1, Y_3) end), Tf),
            B_4 = sub((case erlang:is_map(Y_3) of true -> maps:get((OffY + K), Y_3, nil); _ -> lists:nth((OffY + K) + 1, Y_3) end), Tf),
            Y_4 = lists:sublist(Y_3, (OffY + K)) ++ [A_4] ++ lists:nthtail((OffY + K) + 1, Y_3),
            Y_5 = lists:sublist(Y_4, ((OffY + K) + (N_5 div 2))) ++ [B_4] ++ lists:nthtail(((OffY + K) + (N_5 div 2)) + 1, Y_4),
            K_2 = (K + 1),
            Fun_3_loop(K_2, N_5, OffX, OffY, S, X_4, Y_5);
        _ -> {K, N_5, OffX, OffY, S, X_4, Y_3}
    end
end,
{K_2, N_5, OffX, OffY, S, X_4, Y_5} = Fun_3(K, N_5, OffX, OffY, S, X_4, Y_3),
        {nil, Y_5}
    catch {return, Ret} -> Ret end.

ditfft2(X_5, Y_6, N_6, S_2) ->
    try
        ditfft2rec(X_5, Y_6, 0, 0, N_6, S_2),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        X_6 = [1, 1, 1, 1, 0, 0, 0, 0],
        Y_7 = [],
        I = 0,
        Fun_4 = fun Fun_4_loop(I, X_6, Y_7) ->
    case (I < length(X_6)) of
        true ->
            Y_8 = lists:append(Y_7, [#{"re" => 0, "im" => 0}]),
            I_2 = (I + 1),
            Fun_4_loop(I_2, X_6, Y_8);
        _ -> {I, X_6, Y_7}
    end
end,
{I_2, X_6, Y_8} = Fun_4(I, X_6, Y_7),
        ditfft2(X_6, Y_8, length(X_6), 1),
        Fun_5 = fun Fun_5_loop(List, I_2, X_6, Y_8) ->
    case List of
        [] -> {I_2, X_6, Y_8};
        [C|C_rest] ->
            Line = pad(fmt(maps:get("re", C, nil)), 8),
            case (maps:get("im", C, nil) >= 0) of
        true -> Line_2 = ((Line ++ "+") ++ fmt(maps:get("im", C, nil))),
            Line_4 = Line_2;
        _ -> Line_3 = (Line ++ fmt(maps:get("im", C, nil))),
            Line_4 = Line_3
    end,
            io:format("~ts~n", [Line_4]),
            Fun_5_loop(C_rest, I_2, X_6, Y_8)
    end
end,
{I_2, X_6, Y_8} = Fun_5(Y_8, I_2, X_6, Y_8),
        nil
    catch {return, Ret} -> Ret end.

pad(S_3, W) ->
    try
        T = S_3,
        Fun_6 = fun Fun_6_loop(S_3, T, W) ->
    case (length(T) < W) of
        true ->
            T_2 = (" " ++ T),
            Fun_6_loop(S_3, T_2, W);
        _ -> {S_3, T, W}
    end
end,
{S_3, T_2, W} = Fun_6(S_3, T, W),
        T_2
    catch {return, Ret} -> Ret end.

fmt(X_7) ->
    try
        Y_9 = (floorf(((X_7 * 10000) + 0.5)) / 10000),
        S_4 = lists:flatten(io_lib:format("~p", [Y_9])),
        Dot = mochi_index_of(S_4, "."),
        case (Dot == (0 - 1)) of
        true -> S_5 = (S_4 ++ ".0000"),
            D_3 = nil,
            Fun_8 = nil,
            S_7 = S_5;
        _ -> D = ((length(S_4) - Dot) - 1),
            Fun_7 = fun Fun_7_loop(D, Dot, S_4, X_7, Y_9) ->
    case (D < 4) of
        true ->
            S_6 = (S_4 ++ "0"),
            D_2 = (D + 1),
            Fun_7_loop(D_2, Dot, S_6, X_7, Y_9);
        _ -> {D, Dot, S_4, X_7, Y_9}
    end
end,
{D_2, Dot, S_6, X_7, Y_9} = Fun_7(D, Dot, S_4, X_7, Y_9),
            D_3 = D_2,
            Fun_8 = Fun_7,
            S_7 = S_6
    end,
        S_7
    catch {return, Ret} -> Ret end.

floorf(X_8) ->
    try
        Y_10 = mochi_to_int(X_8),
        float(Y_10)
    catch {return, Ret} -> Ret end.

indexof(S_8, Ch) ->
    try
        I_3 = 0,
        Fun_9 = fun Fun_9_loop(Ch, I_3, S_8) ->
    case (I_3 < length(S_8)) of
        true ->
            case (string:substr(S_8, I_3 + 1, ((I_3 + 1) - I_3)) == Ch) of
        true -> throw({return, I_3});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_9_loop(Ch, I_4, S_8);
        _ -> {Ch, I_3, S_8}
    end
end,
{Ch, I_4, S_8} = Fun_9(Ch, I_3, S_8),
        (0 - 1)
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
