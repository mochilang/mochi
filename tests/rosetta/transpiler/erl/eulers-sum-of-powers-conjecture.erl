#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, eulersum/0, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

eulersum() ->
    try
        Pow5 = [],
        I = 0,
        Fun = fun Fun_loop(I, Pow5) ->
    case (I < 250) of
        true ->
            Pow5_2 = lists:append(Pow5, [((((I * I) * I) * I) * I)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Pow5_2);
        _ -> {I, Pow5}
    end
end,
{I_2, Pow5_2} = Fun(I, Pow5),
        Sums = #{},
        X2 = 2,
        Fun_3 = fun Fun_3_loop(I_2, Pow5_2, Sums, X2) ->
    case (X2 < 250) of
        true ->
            X3 = 1,
            Fun_2 = fun Fun_2_loop(I_2, Pow5_2, Sums, X2, X3) ->
    case (X3 < X2) of
        true ->
            S = ((case erlang:is_map(Pow5_2) of true -> maps:get(X2, Pow5_2, nil); _ -> lists:nth(X2 + 1, Pow5_2) end) + (case erlang:is_map(Pow5_2) of true -> maps:get(X3, Pow5_2, nil); _ -> lists:nth(X3 + 1, Pow5_2) end)),
            case mochi_not(maps:is_key(S, Sums)) of
        true -> Sums_2 = maps:put(S, [X2, X3], Sums),
            Sums_3 = Sums_2;
        _ -> Sums_3 = Sums
    end,
            X3_2 = (X3 + 1),
            Fun_2_loop(I_2, Pow5_2, Sums_3, X2, X3_2);
        _ -> {I_2, Pow5_2, Sums, X2, X3}
    end
end,
{I_2, Pow5_2, Sums_3, X2, X3_2} = Fun_2(I_2, Pow5_2, Sums, X2, X3),
            X2_2 = (X2 + 1),
            Fun_3_loop(I_2, Pow5_2, Sums_3, X2_2);
        _ -> {I_2, Pow5_2, Sums, X2}
    end
end,
{I_2, Pow5_2, Sums_3, X2_2} = Fun_3(I_2, Pow5_2, Sums, X2),
        X0 = 4,
        Fun_6 = fun Fun_6_loop(I_2, Pow5_2, Sums_3, X0, X2_2) ->
    case (X0 < 250) of
        true ->
            X1 = 3,
            Fun_5 = fun Fun_5_loop(I_2, Pow5_2, Sums_3, X0, X1, X2_2) ->
    case (X1 < X0) of
        true ->
            Y = (X0 + 1),
            Fun_4 = fun Fun_4_loop(I_2, Pow5_2, Sums_3, X0, X1, X2_2, Y) ->
    case (Y < 250) of
        true ->
            Rem = (((case erlang:is_map(Pow5_2) of true -> maps:get(Y, Pow5_2, nil); _ -> lists:nth(Y + 1, Pow5_2) end) - (case erlang:is_map(Pow5_2) of true -> maps:get(X0, Pow5_2, nil); _ -> lists:nth(X0 + 1, Pow5_2) end)) - (case erlang:is_map(Pow5_2) of true -> maps:get(X1, Pow5_2, nil); _ -> lists:nth(X1 + 1, Pow5_2) end)),
            case mochi_member(Rem, Sums_3) of
        true -> Pair = (case erlang:is_map(Sums_3) of true -> maps:get(Rem, Sums_3, nil); _ -> lists:nth(Rem + 1, Sums_3) end),
            A = (case erlang:is_map(Pair) of true -> maps:get(0, Pair, nil); _ -> lists:nth(0 + 1, Pair) end),
            B = (case erlang:is_map(Pair) of true -> maps:get(1, Pair, nil); _ -> lists:nth(1 + 1, Pair) end),
            case ((X1 > A) andalso (A > B)) of
        true -> throw({return, [X0, X1, A, B, Y]});
        _ -> ok
    end,
            A_2 = A,
            B_2 = B,
            Pair_2 = Pair;
        _ -> A_2 = nil,
            B_2 = nil,
            Pair_2 = nil
    end,
            Y_2 = (Y + 1),
            Fun_4_loop(I_2, Pow5_2, Sums_3, X0, X1, X2_2, Y_2);
        _ -> {I_2, Pow5_2, Sums_3, X0, X1, X2_2, Y}
    end
end,
{I_2, Pow5_2, Sums_3, X0, X1, X2_2, Y_2} = Fun_4(I_2, Pow5_2, Sums_3, X0, X1, X2_2, Y),
            X1_2 = (X1 + 1),
            Fun_5_loop(I_2, Pow5_2, Sums_3, X0, X1_2, X2_2);
        _ -> {I_2, Pow5_2, Sums_3, X0, X1, X2_2}
    end
end,
{I_2, Pow5_2, Sums_3, X0, X1_2, X2_2} = Fun_5(I_2, Pow5_2, Sums_3, X0, X1, X2_2),
            X0_2 = (X0 + 1),
            Fun_6_loop(I_2, Pow5_2, Sums_3, X0_2, X2_2);
        _ -> {I_2, Pow5_2, Sums_3, X0, X2_2}
    end
end,
{I_2, Pow5_2, Sums_3, X0_2, X2_2} = Fun_6(I_2, Pow5_2, Sums_3, X0, X2_2),
        [0, 0, 0, 0, 0]
    catch {return, Ret} -> Ret end.

main() ->
    try
        R = eulersum(),
        io:format("~ts~n", [((((((((lists:flatten(io_lib:format("~p", [(case erlang:is_map(R) of true -> maps:get(0, R, nil); _ -> lists:nth(0 + 1, R) end)])) ++ " ") ++ lists:flatten(io_lib:format("~p", [(case erlang:is_map(R) of true -> maps:get(1, R, nil); _ -> lists:nth(1 + 1, R) end)]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [(case erlang:is_map(R) of true -> maps:get(2, R, nil); _ -> lists:nth(2 + 1, R) end)]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [(case erlang:is_map(R) of true -> maps:get(3, R, nil); _ -> lists:nth(3 + 1, R) end)]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [(case erlang:is_map(R) of true -> maps:get(4, R, nil); _ -> lists:nth(4 + 1, R) end)])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
