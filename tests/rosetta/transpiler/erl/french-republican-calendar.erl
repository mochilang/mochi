#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, greleap/1, repleap/1, gretoday/3, reptoday/3, daytogre/1, daytorep/1, formatrep/3, formatgre/3]).

% Generated by Mochi transpiler v0.10.55 (67b72aa5ea) on 2025-08-02 22:23 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

greleap(Year) ->
    try
        A = mochi_to_int((Year rem 4)),
        B = mochi_to_int((Year rem 100)),
        C = mochi_to_int((Year rem 400)),
        ((A == 0) andalso ((B /= 0) orelse (C == 0)))
    catch {return, Ret} -> Ret end.

repleap(Year_2) ->
    try
        A_2 = mochi_to_int(((Year_2 + 1) rem 4)),
        B_2 = mochi_to_int(((Year_2 + 1) rem 100)),
        C_2 = mochi_to_int(((Year_2 + 1) rem 400)),
        ((A_2 == 0) andalso ((B_2 /= 0) orelse (C_2 == 0)))
    catch {return, Ret} -> Ret end.

gretoday(D, M, Y) ->
    try
        Yy = Y,
        Mm = M,
        case (Mm < 3) of
        true -> Yy_2 = (Yy - 1),
            Mm_2 = (Mm + 12),
            Mm_3 = Mm_2,
            Yy_3 = Yy_2;
        _ -> Mm_3 = Mm,
            Yy_3 = Yy
    end,
        (((((((Yy_3 * 36525) div 100) - (Yy_3 div 100)) + (Yy_3 div 400)) + ((306 * (Mm_3 + 1)) div 10)) + D) - 654842)
    catch {return, Ret} -> Ret end.

reptoday(D_2, M_2, Y_2) ->
    try
        Dd = D_2,
        Mm_4 = M_2,
        case (Mm_4 == 13) of
        true -> Mm_5 = (Mm_4 - 1),
            Dd_2 = (Dd + 30),
            Dd_3 = Dd_2,
            Mm_6 = Mm_5;
        _ -> Dd_3 = Dd,
            Mm_6 = Mm_4
    end,
        case repleap(Y_2) of
        true -> Dd_4 = (Dd_3 - 1),
            Dd_5 = Dd_4;
        _ -> Dd_5 = Dd_3
    end,
        (((((((365 * Y_2) + ((Y_2 + 1) div 4)) - ((Y_2 + 1) div 100)) + ((Y_2 + 1) div 400)) + (30 * Mm_6)) + Dd_5) - 395)
    catch {return, Ret} -> Ret end.

daytogre(Day) ->
    try
        Y_3 = ((Day * 100) div 36525),
        D_3 = ((Day - ((Y_3 * 36525) div 100)) + 21),
        Y_4 = (Y_3 + 1792),
        D_4 = (((D_3 + (Y_4 div 100)) - (Y_4 div 400)) - 13),
        M_3 = 8,
        Fun = fun Fun_loop(D_4, Day, M_3, Y_4) ->
    case (D_4 > (case erlang:is_map(erlang:get('gregorian')) of true -> maps:get(M_3, erlang:get('gregorian'), nil); _ -> lists:nth(M_3 + 1, erlang:get('gregorian')) end)) of
        true ->
            D_5 = (D_4 - (case erlang:is_map(erlang:get('gregorian')) of true -> maps:get(M_3, erlang:get('gregorian'), nil); _ -> lists:nth(M_3 + 1, erlang:get('gregorian')) end)),
            M_4 = (M_3 + 1),
            case (M_4 == 12) of
        true -> M_5 = 0,
            Y_5 = (Y_4 + 1),
            case greleap(Y_5) of
        true -> Gregorian = erlang:get('gregorian'),
            Gregorian_2 = lists:sublist(Gregorian, 1) ++ [29] ++ lists:nthtail(1 + 1, Gregorian),
            erlang:put('gregorian', Gregorian_2),
            Gregorian_5 = Gregorian_2;
        _ -> Gregorian_3 = erlang:get('gregorian'),
            Gregorian_4 = lists:sublist(Gregorian_3, 1) ++ [28] ++ lists:nthtail(1 + 1, Gregorian_3),
            erlang:put('gregorian', Gregorian_4),
            Gregorian_5 = Gregorian_4
    end,
            Gregorian_6 = Gregorian_5,
            M_6 = M_5,
            Y_6 = Y_5;
        _ -> Gregorian_6 = nil,
            M_6 = M_4,
            Y_6 = Y_4
    end,
            Fun_loop(D_5, Day, M_6, Y_6);
        _ -> {D_4, Day, M_3, Y_4}
    end
end,
{D_5, Day, M_6, Y_6} = Fun(D_4, Day, M_3, Y_4),
        M_7 = (M_6 + 1),
        [D_5, M_7, Y_6]
    catch {return, Ret} -> Ret end.

daytorep(Day_2) ->
    try
        Y_7 = (((Day_2 - 1) * 100) div 36525),
        case repleap(Y_7) of
        true -> Y_8 = (Y_7 - 1),
            Y_9 = Y_8;
        _ -> Y_9 = Y_7
    end,
        D_6 = ((((Day_2 - (((Y_9 + 1) * 36525) div 100)) + 365) + ((Y_9 + 1) div 100)) - ((Y_9 + 1) div 400)),
        Y_10 = (Y_9 + 1),
        M_8 = 1,
        Sc = 5,
        case repleap(Y_10) of
        true -> Sc_2 = 6,
            Sc_3 = Sc_2;
        _ -> Sc_3 = Sc
    end,
        Fun_2 = fun Fun_2_loop(D_6, Day_2, M_8, Sc_3, Y_10) ->
    case (D_6 > 30) of
        true ->
            D_7 = (D_6 - 30),
            M_9 = (M_8 + 1),
            case (M_9 == 13) of
        true -> case (D_7 > Sc_3) of
        true -> D_8 = (D_7 - Sc_3),
            M_10 = 1,
            Y_11 = (Y_10 + 1),
            Sc_4 = 5,
            case repleap(Y_11) of
        true -> Sc_5 = 6,
            Sc_6 = Sc_5;
        _ -> Sc_6 = Sc_4
    end,
            D_9 = D_8,
            M_11 = M_10,
            Sc_7 = Sc_6,
            Y_12 = Y_11;
        _ -> D_9 = D_7,
            M_11 = M_9,
            Sc_7 = Sc_3,
            Y_12 = Y_10
    end,
            D_10 = D_9,
            M_12 = M_11,
            Sc_8 = Sc_7,
            Y_13 = Y_12;
        _ -> D_10 = D_7,
            M_12 = M_9,
            Sc_8 = Sc_3,
            Y_13 = Y_10
    end,
            Fun_2_loop(D_10, Day_2, M_12, Sc_8, Y_13);
        _ -> {D_6, Day_2, M_8, Sc_3, Y_10}
    end
end,
{D_10, Day_2, M_12, Sc_8, Y_13} = Fun_2(D_6, Day_2, M_8, Sc_3, Y_10),
        [D_10, M_12, Y_13]
    catch {return, Ret} -> Ret end.

formatrep(D_11, M_13, Y_14) ->
    try
        (case (M_13 == 13) of
    true -> (((case erlang:is_map(erlang:get('sansculotidesStr')) of true -> maps:get((D_11 - 1), erlang:get('sansculotidesStr'), nil); _ -> lists:nth((D_11 - 1) + 1, erlang:get('sansculotidesStr')) end) ++ " ") ++ lists:flatten(io_lib:format("~p", [Y_14])));
    _ -> ((((lists:flatten(io_lib:format("~p", [D_11])) ++ " ") ++ (case erlang:is_map(erlang:get('republicanStr')) of true -> maps:get((M_13 - 1), erlang:get('republicanStr'), nil); _ -> lists:nth((M_13 - 1) + 1, erlang:get('republicanStr')) end)) ++ " ") ++ lists:flatten(io_lib:format("~p", [Y_14])))
end)
    catch {return, Ret} -> Ret end.

formatgre(D_12, M_14, Y_15) ->
    try
        ((((lists:flatten(io_lib:format("~p", [D_12])) ++ " ") ++ (case erlang:is_map(erlang:get('gregorianStr')) of true -> maps:get((M_14 - 1), erlang:get('gregorianStr'), nil); _ -> lists:nth((M_14 - 1) + 1, erlang:get('gregorianStr')) end)) ++ " ") ++ lists:flatten(io_lib:format("~p", [Y_15])))
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('gregorianStr', ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]),
    erlang:put('gregorian', [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]),
    erlang:put('republicanStr', ["Vendemiaire", "Brumaire", "Frimaire", "Nivose", "Pluviose", "Ventose", "Germinal", "Floreal", "Prairial", "Messidor", "Thermidor", "Fructidor"]),
    erlang:put('sansculotidesStr', ["Fete de la vertu", "Fete du genie", "Fete du travail", "Fete de l'opinion", "Fete des recompenses", "Fete de la Revolution"]),
    erlang:put('rep', daytorep(gretoday(20, 5, 1795))),
    io:format("~ts~n", [formatrep((case erlang:is_map(erlang:get('rep')) of true -> maps:get(0, erlang:get('rep'), nil); _ -> lists:nth(0 + 1, erlang:get('rep')) end), (case erlang:is_map(erlang:get('rep')) of true -> maps:get(1, erlang:get('rep'), nil); _ -> lists:nth(1 + 1, erlang:get('rep')) end), (case erlang:is_map(erlang:get('rep')) of true -> maps:get(2, erlang:get('rep'), nil); _ -> lists:nth(2 + 1, erlang:get('rep')) end))]),
    erlang:put('gre', daytogre(reptoday(1, 9, 3))),
    io:format("~ts~n", [formatgre((case erlang:is_map(erlang:get('gre')) of true -> maps:get(0, erlang:get('gre'), nil); _ -> lists:nth(0 + 1, erlang:get('gre')) end), (case erlang:is_map(erlang:get('gre')) of true -> maps:get(1, erlang:get('gre'), nil); _ -> lists:nth(1 + 1, erlang:get('gre')) end), (case erlang:is_map(erlang:get('gre')) of true -> maps:get(2, erlang:get('gre'), nil); _ -> lists:nth(2 + 1, erlang:get('gre')) end))]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
