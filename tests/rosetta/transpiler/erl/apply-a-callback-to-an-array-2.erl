#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, each/2, map/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (87d3efb875) on 2025-08-03 08:53 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

each(Xs, F) ->
    try
        Fun = fun Fun_loop(List, F, Xs) ->
    case List of
        [] -> {F, Xs};
        [X|X_rest] ->
            F(X),
            Fun_loop(X_rest, F, Xs)
    end
end,
{F, Xs} = Fun(Xs, F, Xs),
        nil
    catch {return, Ret} -> Ret end.

map(Xs_2, F_2) ->
    try
        R = [],
        Fun_2 = fun Fun_2_loop(List, F_2, R, Xs_2) ->
    case List of
        [] -> {F_2, R, Xs_2};
        [X_2|X_2_rest] ->
            R_2 = lists:append(R, [F_2(X_2)]),
            Fun_2_loop(X_2_rest, F_2, R_2, Xs_2)
    end
end,
{F_2, R_2, Xs_2} = Fun_2(Xs_2, F_2, R, Xs_2),
        R_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        S = [1, 2, 3, 4, 5],
        each(S, fun(I) ->
    try
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [(I * I)]))])
    catch {return, Ret} -> Ret end
end),
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [map(S, fun(I_2) ->
    try
        (I_2 * I_2)
    catch {return, Ret} -> Ret end
end)]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
