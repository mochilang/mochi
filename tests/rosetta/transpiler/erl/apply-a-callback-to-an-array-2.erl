#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, each/2, Map/2, main/0]).

% Generated by Mochi transpiler v0.10.39 (6b9be63842) on 2025-07-24 22:46 +0700

each(Xs, F) ->
    try
        Fun = fun Fun_loop(List, F, Xs) ->
    case List of
        [] -> {F, Xs};
        [X|Fun_loop_rest] ->
            F(X),
            Fun_loop(Fun_loop_rest, F, Xs)
    end
end,
{F, Xs} = Fun(Xs, F, Xs),
        nil
    catch {return, Ret} -> Ret end.

Map(Xs_2, F_2) ->
    try
        R = [],
        Fun_2 = fun Fun_2_loop(List, F_2, R, Xs_2) ->
    case List of
        [] -> {F_2, R, Xs_2};
        [X_2|Fun_2_loop_rest] ->
            R_2 = lists:append(R, [F_2(X_2)]),
            Fun_2_loop(Fun_2_loop_rest, F_2, R_2, Xs_2)
    end
end,
{F_2, R_2, Xs_2} = Fun_2(Xs_2, F_2, R, Xs_2),
        R_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        S = [1, 2, 3, 4, 5],
        each(S, fun(I) ->
    try
        print(lists:flatten(io_lib:format("~p", [(I * I)])))
    catch {return, Ret} -> Ret end
end),
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [Map(S, fun(I_2) ->
    try
        (I_2 * I_2)
    catch {return, Ret} -> Ret end
end)]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    main().
