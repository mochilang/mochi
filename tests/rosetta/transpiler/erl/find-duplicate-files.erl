#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, findduplicates/2, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

findduplicates(Fs, Paths) ->
    try
        Seen = #{},
        Dups = [],
        Fun = fun Fun_loop(List, Dups, Fs, Paths, Seen) ->
    case List of
        [] -> {Dups, Fs, Paths, Seen};
        [Path|Path_rest] ->
            Content = maps:get(Path, Fs, nil),
            case maps:is_key(Content, Seen) of
        true -> Dups_2 = lists:append(Dups, [[maps:get(Content, Seen, nil), Path]]),
            Dups_3 = Dups_2,
            Seen_3 = Seen;
        _ -> Seen_2 = maps:put(Content, Path, Seen),
            Dups_3 = Dups,
            Seen_3 = Seen_2
    end,
            Fun_loop(Path_rest, Dups_3, Fs, Paths, Seen_3)
    end
end,
{Dups_3, Fs, Paths, Seen_3} = Fun(Paths, Dups, Fs, Paths, Seen),
        Dups_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        Fs_2 = #{"a.txt" => "hello", "b.txt" => "world", "c.txt" => "hello", "d.txt" => "foo", "e.txt" => "world"},
        Paths_2 = ["a.txt", "b.txt", "c.txt", "d.txt", "e.txt"],
        Dups_4 = findduplicates(Fs_2, Paths_2),
        Fun_2 = fun Fun_2_loop(List, Dups_4, Fs_2, Paths_2) ->
    case List of
        [] -> {Dups_4, Fs_2, Paths_2};
        [Pair|Pair_rest] ->
            io:format("~ts~n", [((lists:nth(0 + 1, Pair) ++ " <==> ") ++ lists:nth(1 + 1, Pair))]),
            Fun_2_loop(Pair_rest, Dups_4, Fs_2, Paths_2)
    end
end,
{Dups_4, Fs_2, Paths_2} = Fun_2(Dups_4, Dups_4, Fs_2, Paths_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
