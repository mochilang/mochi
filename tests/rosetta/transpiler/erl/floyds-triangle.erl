#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, floyd/1, pad/2]).

% Generated by Mochi transpiler v0.10.52 (9e40861bc0) on 2025-08-01 10:35 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

floyd(N) ->
    try
        io:format("~ts~n", [(("Floyd " ++ lists:flatten(io_lib:format("~p", [N]))) ++ ":")]),
        LowerLeftCorner = (((N * (N - 1)) div 2) + 1),
        LastInColumn = LowerLeftCorner,
        LastInRow = 1,
        I = 1,
        Row = 1,
        Line = "",
        Fun = fun Fun_loop(I, LastInColumn, LastInRow, Line, LowerLeftCorner, N, Row) ->
    case (Row =< N) of
        true ->
            W = length(lists:flatten(io_lib:format("~p", [LastInColumn]))),
            case (I < LastInRow) of
        true -> Line_2 = ((Line ++ pad(lists:flatten(io_lib:format("~p", [I])), W)) ++ " "),
            LastInColumn_2 = (LastInColumn + 1),
            LastInColumn_4 = LastInColumn_2,
            LastInRow_3 = LastInRow,
            Line_5 = Line_2,
            Row_3 = Row;
        _ -> Line_3 = (Line ++ pad(lists:flatten(io_lib:format("~p", [I])), W)),
            io:format("~ts~n", [Line_3]),
            Line_4 = "",
            Row_2 = (Row + 1),
            LastInRow_2 = (LastInRow + Row_2),
            LastInColumn_3 = LowerLeftCorner,
            LastInColumn_4 = LastInColumn_3,
            LastInRow_3 = LastInRow_2,
            Line_5 = Line_4,
            Row_3 = Row_2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, LastInColumn_4, LastInRow_3, Line_5, LowerLeftCorner, N, Row_3);
        _ -> {I, LastInColumn, LastInRow, Line, LowerLeftCorner, N, Row}
    end
end,
{I_2, LastInColumn_4, LastInRow_3, Line_5, LowerLeftCorner, N, Row_3} = Fun(I, LastInColumn, LastInRow, Line, LowerLeftCorner, N, Row),
        nil
    catch {return, Ret} -> Ret end.

pad(S, W_2) ->
    try
        T = S,
        Fun_2 = fun Fun_2_loop(S, T, W_2) ->
    case (length(T) < W_2) of
        true ->
            T_2 = (" " ++ T),
            Fun_2_loop(S, T_2, W_2);
        _ -> {S, T, W_2}
    end
end,
{S, T_2, W_2} = Fun_2(S, T, W_2),
        T_2
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    floyd(5),
    floyd(14),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
