#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, intsqrt/1, sumrecip/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (0480f61bb0) on 2025-07-25 16:59 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

intsqrt(X) ->
    try
        case (X < 2) of
        true -> throw({return, X});
        _ -> ok
    end,
        Left = 1,
        Right = (X div 2),
        Ans = 0,
        Fun = fun Fun_loop(Ans, Left, Right, X) ->
    case (Left =< Right) of
        true ->
            Mid = (Left + ((Right - Left) div 2)),
            Sq = (Mid * Mid),
            case (Sq == X) of
        true -> throw({return, Mid});
        _ -> ok
    end,
            case (Sq < X) of
        true -> Left_2 = (Mid + 1),
            Ans_2 = Mid,
            Ans_3 = Ans_2,
            Left_3 = Left_2,
            Right_3 = Right;
        _ -> Right_2 = (Mid - 1),
            Ans_3 = Ans,
            Left_3 = Left,
            Right_3 = Right_2
    end,
            Fun_loop(Ans_3, Left_3, Right_3, X);
        _ -> {Ans, Left, Right, X}
    end
end,
{Ans_3, Left_3, Right_3, X} = Fun(Ans, Left, Right, X),
        Ans_3
    catch {return, Ret} -> Ret end.

sumrecip(N) ->
    try
        S = 1,
        Limit = intsqrt(N),
        F = 2,
        Fun_2 = fun Fun_2_loop(F, Limit, N, S) ->
    case (F =< Limit) of
        true ->
            case ((N rem F) == 0) of
        true -> S_2 = (S + (N div F)),
            F2 = (N div F),
            case (F2 /= F) of
        true -> S_3 = (S_2 + F),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            F2_2 = F2,
            S_5 = S_4;
        _ -> F2_2 = nil,
            S_5 = S
    end,
            F_2 = (F + 1),
            Fun_2_loop(F_2, Limit, N, S_5);
        _ -> {F, Limit, N, S}
    end
end,
{F_2, Limit, N, S_5} = Fun_2(F, Limit, N, S),
        S_5
    catch {return, Ret} -> Ret end.

main() ->
    try
        Nums = [6, 28, 120, 496, 672, 8128, 30240, 32760, 523776],
        Fun_3 = fun Fun_3_loop(List, Nums) ->
    case List of
        [] -> {Nums};
        [N_2|N_2_rest] ->
            S_6 = sumrecip(N_2),
            case ((S_6 rem N_2) == 0) of
        true -> Val = (S_6 div N_2),
            Perfect = "",
            case (Val == 1) of
        true -> Perfect_2 = "perfect!",
            Perfect_3 = Perfect_2;
        _ -> Perfect_3 = Perfect
    end,
            io:format("~ts~n", [((((("Sum of recipr. factors of " ++ lists:flatten(io_lib:format("~p", [N_2]))) ++ " = ") ++ lists:flatten(io_lib:format("~p", [Val]))) ++ " exactly ") ++ Perfect_3)]),
            Perfect_4 = Perfect_3,
            Val_2 = Val;
        _ -> Perfect_4 = nil,
            Val_2 = nil
    end,
            Fun_3_loop(N_2_rest, Nums)
    end
end,
{Nums} = Fun_3(Nums, Nums),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
