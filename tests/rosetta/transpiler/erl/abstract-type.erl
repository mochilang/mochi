#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, beastkind/1, beastname/1, beastcry/1, bprint/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (2d48801c25) on 2025-07-25 19:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

beastkind(B) ->
    try
        (case B of
    #{"tag" := "dog", "kind" := K, "name" := _} -> K;
    #{"tag" := "cat", "kind" := K, "name" := _} -> K
end)
    catch {return, Ret} -> Ret end.

beastname(B_2) ->
    try
        (case B_2 of
    #{"tag" := "dog", "kind" := _, "name" := N} -> N;
    #{"tag" := "cat", "kind" := _, "name" := N} -> N
end)
    catch {return, Ret} -> Ret end.

beastcry(B_3) ->
    try
        (case B_3 of
    #{"tag" := "dog", "kind" := _, "name" := _} -> "Woof";
    #{"tag" := "cat", "kind" := _, "name" := _} -> "Meow"
end)
    catch {return, Ret} -> Ret end.

bprint(B_4) ->
    try
        io:format("~ts~n", [(((((beastname(B_4) ++ ", who's a ") ++ beastkind(B_4)) ++ ", cries: \"") ++ beastcry(B_4)) ++ "\".")]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        D = #{"tag" => "dog", "kind" => "labrador", "name" => "Max"},
        C = #{"tag" => "cat", "kind" => "siamese", "name" => "Sammy"},
        bprint(D),
        bprint(C),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
