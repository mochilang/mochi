#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parseintstr/1, anchorday/1, isleapyear/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (b3f99e79fa) on 2025-07-28 08:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_parse_int_str(S) ->
    try list_to_integer(S) catch _:_ -> 0 end.

parseintstr(Str) ->
    try
        I = 0,
        Neg = false,
        case ((length(Str) > 0) andalso (string:substr(Str, 0 + 1, (1 - 0)) == "-")) of
        true -> Neg_2 = true,
            I_2 = 1,
            I_3 = I_2,
            Neg_3 = Neg_2;
        _ -> I_3 = I,
            Neg_3 = Neg
    end,
        N = 0,
        Digits = #{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9},
        Fun = fun Fun_loop(Digits, I_3, N, Neg_3, Str) ->
    case (I_3 < length(Str)) of
        true ->
            N_2 = ((N * 10) + maps:get(string:substr(Str, I_3 + 1, ((I_3 + 1) - I_3)), Digits, nil)),
            I_4 = (I_3 + 1),
            Fun_loop(Digits, I_4, N_2, Neg_3, Str);
        _ -> {Digits, I_3, N, Neg_3, Str}
    end
end,
{Digits, I_4, N_2, Neg_3, Str} = Fun(Digits, I_3, N, Neg_3, Str),
        case Neg_3 of
        true -> N_3 = -N_2,
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
        N_4
    catch {return, Ret} -> Ret end.

anchorday(Y) ->
    try
        ((((2 + (5 * (Y rem 4))) + (4 * (Y rem 100))) + (6 * (Y rem 400))) rem 7)
    catch {return, Ret} -> Ret end.

isleapyear(Y_2) ->
    try
        (((Y_2 rem 4) == 0) andalso (((Y_2 rem 100) /= 0) orelse ((Y_2 rem 400) == 0)))
    catch {return, Ret} -> Ret end.

main() ->
    try
        Dates = ["1800-01-06", "1875-03-29", "1915-12-07", "1970-12-23", "2043-05-14", "2077-02-12", "2101-04-02"],
        io:format("~ts~n", ["Days of week given by Doomsday rule:"]),
        Fun_2 = fun Fun_2_loop(List, Dates) ->
    case List of
        [] -> {Dates};
        [Date|Date_rest] ->
            Y_3 = mochi_parse_int_str(lists:sublist(Date, 0 + 1, (4 - 0))),
            M = (mochi_parse_int_str(lists:sublist(Date, 5 + 1, (7 - 5))) - 1),
            D = mochi_parse_int_str(lists:sublist(Date, 8 + 1, (10 - 8))),
            A = anchorday(Y_3),
            F = lists:nth(M + 1, erlang:get('firstDaysCommon')),
            case (isleapyear(Y_3) /= nil) of
        true -> F_2 = lists:nth(M + 1, erlang:get('firstDaysLeap')),
            F_3 = F_2;
        _ -> F_3 = F
    end,
            W = (D - F_3),
            case (W < 0) of
        true -> W_2 = (7 + W),
            W_3 = W_2;
        _ -> W_3 = W
    end,
            Dow = ((A + W_3) rem 7),
            io:format("~ts~n", [((Date ++ " -> ") ++ lists:nth(Dow + 1, erlang:get('days')))]),
            Fun_2_loop(Date_rest, Dates)
    end
end,
{Dates} = Fun_2(Dates, Dates),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('days', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]),
    erlang:put('firstDaysCommon', [3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]),
    erlang:put('firstDaysLeap', [4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
