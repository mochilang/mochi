#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, echo/2, main/0]).

% Generated by Mochi transpiler v0.10.47 (eaacde736f) on 2025-07-28 11:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

echo(Idx, Msgs) ->
    try
        io:format("~ts~n", [(lists:flatten(io_lib:format("~p", [Idx])) ++ ": 127.0.0.1:12321 <-> 127.0.0.1")]),
        Fun = fun Fun_loop(List, Idx, Msgs) ->
    case List of
        [] -> {Idx, Msgs};
        [Msg|Msg_rest] ->
            io:format("~p~n", [Msg]),
            Fun_loop(Msg_rest, Idx, Msgs)
    end
end,
{Idx, Msgs} = Fun(Msgs, Idx, Msgs),
        io:format("~ts~n", [(lists:flatten(io_lib:format("~p", [Idx])) ++ ": closed")]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        echo(0, ["hello"]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
