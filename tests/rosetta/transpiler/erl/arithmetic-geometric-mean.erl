#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs/1, sqrtapprox/1, agm/2, main/0]).

% Generated by Mochi transpiler v0.10.41 (cac7e4e2bd) on 2025-07-26 17:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

abs(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

sqrtapprox(X_2) ->
    try
        Guess = X_2,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 20) of
        true ->
            Guess_2 = ((Guess + (X_2 / Guess)) / 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

agm(A, G) ->
    try
        Eps = 1.0e-14,
        Fun_2 = fun Fun_2_loop(A, Eps, G) ->
    case (erlang:abs((A - G)) > (erlang:abs(A) * Eps)) of
        true ->
            NewA = ((A + G) / 2),
            NewG = sqrtapprox((A * G)),
            A_2 = NewA,
            G_2 = NewG,
            Fun_2_loop(A_2, Eps, G_2);
        _ -> {A, Eps, G}
    end
end,
{A_2, Eps, G_2} = Fun_2(A, Eps, G),
        A_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [agm(1, (1 / sqrtapprox(2)))]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
