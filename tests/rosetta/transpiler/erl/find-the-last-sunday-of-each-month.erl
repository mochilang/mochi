#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, leapyear/1, monthdays/2, zeller/3, lastsunday/2, monthname/1, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

leapyear(Y) ->
    try
        ((((Y rem 4) == 0) andalso ((Y rem 100) /= 0)) orelse ((Y rem 400) == 0))
    catch {return, Ret} -> Ret end.

monthdays(Y_2, M) ->
    try
        Days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        case ((M == 2) andalso leapyear(Y_2)) of
        true -> throw({return, 29});
        _ -> ok
    end,
        lists:nth(M + 1, Days)
    catch {return, Ret} -> Ret end.

zeller(Y_3, M_2, D) ->
    try
        Mm = M_2,
        Yy = Y_3,
        case (Mm < 3) of
        true -> Mm_2 = (Mm + 12),
            Yy_2 = (Yy - 1),
            Mm_3 = Mm_2,
            Yy_3 = Yy_2;
        _ -> Mm_3 = Mm,
            Yy_3 = Yy
    end,
        K = (Yy_3 rem 100),
        J = (Yy_3 / 100),
        H = math:fmod((((((D + ((13 * (Mm_3 + 1)) / 5)) + K) + (K / 4)) + (J / 4)) + (5 * J)), 7),
        ((H + 6) rem 7)
    catch {return, Ret} -> Ret end.

lastsunday(Y_4, M_3) ->
    try
        Day = monthdays(Y_4, M_3),
        Fun = fun Fun_loop(Day, M_3, Y_4) ->
    case ((Day > 0) andalso (zeller(Y_4, M_3, Day) /= 0)) of
        true ->
            Day_2 = (Day - 1),
            Fun_loop(Day_2, M_3, Y_4);
        _ -> {Day, M_3, Y_4}
    end
end,
{Day_2, M_3, Y_4} = Fun(Day, M_3, Y_4),
        Day_2
    catch {return, Ret} -> Ret end.

monthname(M_4) ->
    try
        Names = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        lists:nth(M_4 + 1, Names)
    catch {return, Ret} -> Ret end.

main() ->
    try
        Year = mochi_to_int(((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)())),
        io:format("~ts~n", [("Last Sundays of each month of " ++ lists:flatten(io_lib:format("~p", [Year])))]),
        io:format("~ts~n", ["=================================="]),
        M_5 = 1,
        Fun_2 = fun Fun_2_loop(M_5, Year) ->
    case (M_5 =< 12) of
        true ->
            Day_3 = lastsunday(Year, M_5),
            io:format("~ts~n", [((monthname(M_5) ++ ": ") ++ lists:flatten(io_lib:format("~p", [Day_3])))]),
            M_6 = (M_5 + 1),
            Fun_2_loop(M_6, Year);
        _ -> {M_5, Year}
    end
end,
{M_6, Year} = Fun_2(M_5, Year),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
