#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parsebool/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (83683ecfe3) on 2025-07-25 22:53 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

parsebool(S) ->
    try
        L = string:to_lower(S),
        case (((((L == "1") orelse (L == "t")) orelse (L == true)) orelse (L == "yes")) orelse (L == "y")) of
        true -> throw({return, true});
        _ -> ok
    end,
        false
    catch {return, Ret} -> Ret end.

main() ->
    try
        N = true,
        io:format("~p~n", [N]),
        io:format("~ts~n", ["bool"]),
        N_2 = not N,
        io:format("~p~n", [N_2]),
        X = 5,
        Y = 8,
        io:format("~ts ~p~n", ["x == y:", (5 == 8)]),
        io:format("~ts ~p~n", ["x < y:", (5 < 8)]),
        io:format("~ts~n", ["\nConvert String into Boolean Data type\n"]),
        Str1 = "japan",
        io:format("~ts ~ts~n", ["Before :", "string"]),
        BolStr = parsebool("japan"),
        io:format("~ts ~ts~n", ["After :", "bool"]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
