#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parseIntStr/1, main/0]).

% Generated by Mochi transpiler v0.10.37 (28793aa8f9) on 2025-07-23 12:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

parseIntStr(Str) ->
    try
        I = 0,
        Neg = false,
        case ((length(Str) > 0) andalso (lists:sublist(Str, 0 + 1, (1 - 0)) == "-")) of
        true -> Neg2 = true,
            I2 = 1,
            I3 = I2,
            Neg3 = Neg2;
        _ -> I3 = I,
            Neg3 = Neg
    end,
        N = 0,
        Digits = #{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9},
        Fun = fun Fun_loop(Digits, I3, N, Neg3, Str) ->
    case (I3 < length(Str)) of
        true ->
            try
                N2 = ((N * 10) + lists:nth(lists:sublist(Str, I3 + 1, ((I3 + 1) - I3)) + 1, Digits)),
                I4 = (I3 + 1),
                Fun_loop(Digits, I4, N2, Neg3, Str)
            catch
                break -> {Digits, I3, N, Neg3, Str}
            end;
        _ -> {Digits, I3, N, Neg3, Str}
    end
end,
{Digits, I4, N2, Neg3, Str} = Fun(Digits, I3, N, Neg3, Str),
        case (Neg3 /= nil) of
        true -> N3 = -N2,
            N4 = N3;
        _ -> N4 = N2
    end,
        N4
    catch {return, V} -> V end.

main() ->
    try
        Total = 0,
        Computer = ((mochi_now() rem 2) == 0),
        io:format("~ts~n", ["Enter q to quit at any time\n"]),
        case (Computer /= nil) of
        true -> io:format("~ts~n", ["The computer will choose first"]);
        _ -> io:format("~ts~n", ["You will choose first"])
    end,
        io:format("~ts~n", ["\n\nRunning total is now 0\n\n"]),
        Round = 1,
        Done = false,
        Fun5 = fun Fun5_loop(Computer, Done, Round, Total) ->
    case not Done of
        true ->
            try
                io:format("~ts~n", [(("ROUND " ++ lists:flatten(io_lib:format("~p", [Round]))) ++ ":\n\n")]),
                I5 = 0,
                Fun4 = fun Fun4_loop(Computer, Done, I5, Round, Total) ->
    case ((I5 < 2) andalso not Done) of
        true ->
            try
                case (Computer /= nil) of
        true -> Choice = 0,
            case (Total < 18) of
        true -> Choice2 = ((mochi_now() rem 3) + 1),
            Choice4 = Choice2;
        _ -> Choice3 = (21 - Total),
            Choice4 = Choice3
    end,
            Total2 = (Total + Choice4),
            io:format("~ts~n", [("The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice4])))]),
            io:format("~ts~n", [("Running total is now " ++ lists:flatten(io_lib:format("~p", [Total2])))]),
            case (Total2 == 21) of
        true -> io:format("~ts~n", ["\nSo, commiserations, the computer has won!"]),
            Done2 = true,
            Done3 = Done2;
        _ -> Done3 = Done
    end,
            Choice5 = Choice4,
            Done8 = Done3,
            Fun3 = nil,
            Total4 = Total2;
        _ -> Fun2 = fun Fun2_loop(Computer, Done, I5, Round, Total) ->
    case true of
        true ->
            try
                io:format("~ts~n", ["Your choice 1 to 3 : "]),
                Line = string:trim(io:get_line("")),
                case ((Line == "q") orelse (Line == "Q")) of
        true -> io:format("~ts~n", ["OK, quitting the game"]),
            Done4 = true,
            throw(break),
            Done5 = Done4;
        _ -> Done5 = Done
    end,
                Num = parseIntStr(Line),
                case ((Num < 1) orelse (Num > 3)) of
        true -> case ((Total + Num) > 21) of
        true -> io:format("~ts~n", ["Too big, try again"]);
        _ -> io:format("~ts~n", ["Out of range, try again"])
    end,
            throw(continue);
        _ -> ok
    end,
                case ((Total + Num) > 21) of
        true -> io:format("~ts~n", ["Too big, try again"]),
            throw(continue);
        _ -> ok
    end,
                Total3 = (Total + Num),
                io:format("~ts~n", [("Running total is now " ++ lists:flatten(io_lib:format("~p", [Total3])))]),
                throw(break),
                Fun2_loop(Computer, Done5, I5, Round, Total3)
            catch
                break -> {Computer, Done, I5, Round, Total}
            end;
        _ -> {Computer, Done, I5, Round, Total}
    end
end,
{Computer, Done5, I5, Round, Total3} = Fun2(Computer, Done, I5, Round, Total),
            case (Total3 == 21) of
        true -> io:format("~ts~n", ["\nSo, congratulations, you've won!"]),
            Done6 = true,
            Done7 = Done6;
        _ -> Done7 = Done5
    end,
            Choice5 = nil,
            Done8 = Done7,
            Fun3 = Fun2,
            Total4 = Total3
    end,
                io:format("~ts~n", ["\n"]),
                Computer2 = not Computer,
                I6 = (I5 + 1),
                Fun4_loop(Computer2, Done8, I6, Round, Total4)
            catch
                break -> {Computer, Done, I5, Round, Total}
            end;
        _ -> {Computer, Done, I5, Round, Total}
    end
end,
{Computer2, Done8, I6, Round, Total4} = Fun4(Computer, Done, I5, Round, Total),
                Round2 = (Round + 1),
                Fun5_loop(Computer2, Done8, Round2, Total4)
            catch
                break -> {Computer, Done, Round, Total}
            end;
        _ -> {Computer, Done, Round, Total}
    end
end,
{Computer2, Done8, Round2, Total4} = Fun5(Computer, Done, Round, Total),
        nil
    catch {return, V} -> V end.

main(_) ->
    main().
