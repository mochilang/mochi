#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parseintstr/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (6bb4e4bd23) on 2025-07-25 19:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_parse_int_str(S) ->
    try list_to_integer(S) catch _:_ -> 0 end.

parseintstr(Str) ->
    try
        I = 0,
        Neg = false,
        case ((length(Str) > 0) andalso (string:substr(Str, 0 + 1, (1 - 0)) == "-")) of
        true -> Neg_2 = true,
            I_2 = 1,
            I_3 = I_2,
            Neg_3 = Neg_2;
        _ -> I_3 = I,
            Neg_3 = Neg
    end,
        N = 0,
        Digits = #{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9},
        Fun = fun Fun_loop(Digits, I_3, N, Neg_3, Str) ->
    case (I_3 < length(Str)) of
        true ->
            N_2 = ((N * 10) + maps:get(string:substr(Str, I_3 + 1, ((I_3 + 1) - I_3)), Digits, nil)),
            I_4 = (I_3 + 1),
            Fun_loop(Digits, I_4, N_2, Neg_3, Str);
        _ -> {Digits, I_3, N, Neg_3, Str}
    end
end,
{Digits, I_4, N_2, Neg_3, Str} = Fun(Digits, I_3, N, Neg_3, Str),
        case Neg_3 of
        true -> N_3 = -N_2,
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
        N_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Total = 0,
        Computer = ((mochi_now() rem 2) == 0),
        io:format("~ts~n", ["Enter q to quit at any time\n"]),
        case Computer of
        true -> io:format("~ts~n", ["The computer will choose first"]);
        _ -> io:format("~ts~n", ["You will choose first"])
    end,
        io:format("~ts~n", ["\n\nRunning total is now 0\n\n"]),
        Round = 1,
        Done = false,
        Fun_5 = fun Fun_5_loop(Computer, Done, Round, Total) ->
    case not Done of
        true ->
            try
                io:format("~ts~n", [(("ROUND " ++ lists:flatten(io_lib:format("~p", [Round]))) ++ ":\n\n")]),
                I_5 = 0,
                Fun_4 = fun Fun_4_loop(Computer, Done, I_5, Round, Total) ->
    case ((I_5 < 2) andalso not Done) of
        true ->
            try
                case Computer of
        true -> Choice = 0,
            case (Total < 18) of
        true -> Choice_2 = ((mochi_now() rem 3) + 1),
            Choice_4 = Choice_2;
        _ -> Choice_3 = (21 - Total),
            Choice_4 = Choice_3
    end,
            Total_2 = (Total + Choice_4),
            io:format("~ts~n", [("The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice_4])))]),
            io:format("~ts~n", [("Running total is now " ++ lists:flatten(io_lib:format("~p", [Total_2])))]),
            case (Total_2 == 21) of
        true -> io:format("~ts~n", ["\nSo, commiserations, the computer has won!"]),
            Done_2 = true,
            Done_3 = Done_2;
        _ -> Done_3 = Done
    end,
            Choice_5 = Choice_4,
            Done_8 = Done_3,
            Fun_3 = nil,
            Total_4 = Total_2;
        _ -> Fun_2 = fun Fun_2_loop(Computer, Done, I_5, Round, Total) ->
    case true of
        true ->
            try
                io:format("~ts~n", ["Your choice 1 to 3 : "]),
                Line = (case io:get_line("") of eof -> "q"; L -> string:trim(L) end),
                case ((Line == "q") orelse (Line == "Q")) of
        true -> io:format("~ts~n", ["OK, quitting the game"]),
            Done_4 = true,
            throw(break),
            Done_5 = Done_4;
        _ -> Done_5 = Done
    end,
                Num = mochi_parse_int_str(Line),
                case ((Num < 1) orelse (Num > 3)) of
        true -> case ((Total + Num) > 21) of
        true -> io:format("~ts~n", ["Too big, try again"]);
        _ -> io:format("~ts~n", ["Out of range, try again"])
    end,
            throw({continue, Computer, Done_5, I_5, Round, Total});
        _ -> ok
    end,
                case ((Total + Num) > 21) of
        true -> io:format("~ts~n", ["Too big, try again"]),
            throw({continue, Computer, Done_5, I_5, Round, Total});
        _ -> ok
    end,
                Total_3 = (Total + Num),
                io:format("~ts~n", [("Running total is now " ++ lists:flatten(io_lib:format("~p", [Total_3])))]),
                throw(break),
                Fun_2_loop(Computer, Done_5, I_5, Round, Total_3)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_2_loop(C0, C1, C2, C3, C4);
                break -> {Computer, Done, I_5, Round, Total}
            end;
        _ -> {Computer, Done, I_5, Round, Total}
    end
end,
{Computer, Done_5, I_5, Round, Total_3} = Fun_2(Computer, Done, I_5, Round, Total),
            case (Total_3 == 21) of
        true -> io:format("~ts~n", ["\nSo, congratulations, you've won!"]),
            Done_6 = true,
            Done_7 = Done_6;
        _ -> Done_7 = Done_5
    end,
            Choice_5 = nil,
            Done_8 = Done_7,
            Fun_3 = Fun_2,
            Total_4 = Total_3
    end,
                io:format("~ts~n", ["\n"]),
                Computer_2 = not Computer,
                I_6 = (I_5 + 1),
                Fun_4_loop(Computer_2, Done_8, I_6, Round, Total_4)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_4_loop(C0, C1, C2, C3, C4);
                break -> {Computer, Done, I_5, Round, Total}
            end;
        _ -> {Computer, Done, I_5, Round, Total}
    end
end,
{Computer_2, Done_8, I_6, Round, Total_4} = Fun_4(Computer, Done, I_5, Round, Total),
                Round_2 = (Round + 1),
                Fun_5_loop(Computer_2, Done_8, Round_2, Total_4)
            catch
                {continue, C0, C1, C2, C3} -> Fun_5_loop(C0, C1, C2, C3);
                break -> {Computer, Done, Round, Total}
            end;
        _ -> {Computer, Done, Round, Total}
    end
end,
{Computer_2, Done_8, Round_2, Total_4} = Fun_5(Computer, Done, Round, Total),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
