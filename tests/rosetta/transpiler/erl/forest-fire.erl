#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, repeat/2, chance/1, newboard/0, step/1, printboard/1]).

% Generated by Mochi transpiler v0.10.52 (4ba5a4e689) on 2025-08-01 10:35 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_repeat(S, N) when is_binary(S) ->
    binary:copy(S, mochi_to_int(N));
mochi_repeat(S, N) when is_list(S) ->
    string:copies(S, mochi_to_int(N));
mochi_repeat(_, _) -> [].

repeat(Ch, N) ->
    try
        S = "",
        I = 0,
        Fun = fun Fun_loop(Ch, I, N, S) ->
    case (I < N) of
        true ->
            S_2 = (S ++ Ch),
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, N, S_2);
        _ -> {Ch, I, N, S}
    end
end,
{Ch, I_2, N, S_2} = Fun(Ch, I, N, S),
        S_2
    catch {return, Ret} -> Ret end.

chance(Prob) ->
    try
        Threshold = mochi_to_int((Prob * 1000)),
        ((mochi_now() rem 1000) < Threshold)
    catch {return, Ret} -> Ret end.

newboard() ->
    try
        B = [],
        R = 0,
        Fun_3 = fun Fun_3_loop(B, R) ->
    case (R < 20) of
        true ->
            Row = [],
            C = 0,
            Fun_2 = fun Fun_2_loop(B, C, R, Row) ->
    case (C < 30) of
        true ->
            case ((mochi_now() rem 2) == 0) of
        true -> Row_2 = lists:append(Row, ["T"]),
            Row_4 = Row_2;
        _ -> Row_3 = lists:append(Row, [" "]),
            Row_4 = Row_3
    end,
            C_2 = (C + 1),
            Fun_2_loop(B, C_2, R, Row_4);
        _ -> {B, C, R, Row}
    end
end,
{B, C_2, R, Row_4} = Fun_2(B, C, R, Row),
            B_2 = lists:append(B, [Row_4]),
            R_2 = (R + 1),
            Fun_3_loop(B_2, R_2);
        _ -> {B, R}
    end
end,
{B_2, R_2} = Fun_3(B, R),
        B_2
    catch {return, Ret} -> Ret end.

step(Src) ->
    try
        Dst = [],
        R_3 = 0,
        Fun_9 = fun Fun_9_loop(Dst, R_3, Src) ->
    case (R_3 < 20) of
        true ->
            Row_5 = [],
            C_3 = 0,
            Fun_8 = fun Fun_8_loop(C_3, Dst, R_3, Row_5, Src) ->
    case (C_3 < 30) of
        true ->
            Cell = lists:nth(C_3 + 1, lists:nth(R_3 + 1, Src)),
            Next = Cell,
            case (Cell == "#") of
        true -> Next_2 = " ",
            Burning_7 = nil,
            Dr_4 = nil,
            Fun_7 = nil,
            Next_8 = Next_2;
        _ -> case (Cell == "T") of
        true -> Burning = false,
            Dr = -1,
            Fun_5 = fun Fun_5_loop(Burning, C_3, Cell, Dr, Dst, Next, R_3, Row_5, Src) ->
    case (Dr =< 1) of
        true ->
            Dc = -1,
            Fun_4 = fun Fun_4_loop(Burning, C_3, Cell, Dc, Dr, Dst, Next, R_3, Row_5, Src) ->
    case (Dc =< 1) of
        true ->
            case ((Dr /= 0) orelse (Dc /= 0)) of
        true -> Rr = (R_3 + Dr),
            Cc = (C_3 + Dc),
            case ((((Rr >= 0) andalso (Rr < 20)) andalso (Cc >= 0)) andalso (Cc < 30)) of
        true -> case (lists:nth(Cc + 1, lists:nth(Rr + 1, Src)) == "#") of
        true -> Burning_2 = true,
            Burning_3 = Burning_2;
        _ -> Burning_3 = Burning
    end,
            Burning_4 = Burning_3;
        _ -> Burning_4 = Burning
    end,
            Burning_5 = Burning_4,
            Cc_2 = Cc,
            Rr_2 = Rr;
        _ -> Burning_5 = Burning,
            Cc_2 = nil,
            Rr_2 = nil
    end,
            Dc_2 = (Dc + 1),
            Fun_4_loop(Burning_5, C_3, Cell, Dc_2, Dr, Dst, Next, R_3, Row_5, Src);
        _ -> {Burning, C_3, Cell, Dc, Dr, Dst, Next, R_3, Row_5, Src}
    end
end,
{Burning_5, C_3, Cell, Dc_2, Dr, Dst, Next, R_3, Row_5, Src} = Fun_4(Burning, C_3, Cell, Dc, Dr, Dst, Next, R_3, Row_5, Src),
            Dr_2 = (Dr + 1),
            Fun_5_loop(Burning_5, C_3, Cell, Dr_2, Dst, Next, R_3, Row_5, Src);
        _ -> {Burning, C_3, Cell, Dr, Dst, Next, R_3, Row_5, Src}
    end
end,
{Burning_5, C_3, Cell, Dr_2, Dst, Next, R_3, Row_5, Src} = Fun_5(Burning, C_3, Cell, Dr, Dst, Next, R_3, Row_5, Src),
            case (Burning_5 orelse chance(0.001)) of
        true -> Next_3 = "#",
            Next_4 = Next_3;
        _ -> Next_4 = Next
    end,
            Burning_6 = Burning_5,
            Dr_3 = Dr_2,
            Fun_6 = Fun_5,
            Next_7 = Next_4;
        _ -> case chance(0.01) of
        true -> Next_5 = "T",
            Next_6 = Next_5;
        _ -> Next_6 = Next
    end,
            Burning_6 = nil,
            Dr_3 = nil,
            Fun_6 = nil,
            Next_7 = Next_6
    end,
            Burning_7 = Burning_6,
            Dr_4 = Dr_3,
            Fun_7 = Fun_6,
            Next_8 = Next_7
    end,
            Row_6 = lists:append(Row_5, [Next_8]),
            C_4 = (C_3 + 1),
            Fun_8_loop(C_4, Dst, R_3, Row_6, Src);
        _ -> {C_3, Dst, R_3, Row_5, Src}
    end
end,
{C_4, Dst, R_3, Row_6, Src} = Fun_8(C_3, Dst, R_3, Row_5, Src),
            Dst_2 = lists:append(Dst, [Row_6]),
            R_4 = (R_3 + 1),
            Fun_9_loop(Dst_2, R_4, Src);
        _ -> {Dst, R_3, Src}
    end
end,
{Dst_2, R_4, Src} = Fun_9(Dst, R_3, Src),
        Dst_2
    catch {return, Ret} -> Ret end.

printboard(B_3) ->
    try
        io:format("~ts~n", [(mochi_repeat("__", 30) ++ "\n\n")]),
        R_5 = 0,
        Fun_11 = fun Fun_11_loop(B_3, R_5) ->
    case (R_5 < 20) of
        true ->
            Line = "",
            C_5 = 0,
            Fun_10 = fun Fun_10_loop(B_3, C_5, Line, R_5) ->
    case (C_5 < 30) of
        true ->
            Cell_2 = lists:nth(C_5 + 1, lists:nth(R_5 + 1, B_3)),
            case (Cell_2 == " ") of
        true -> Line_2 = (Line ++ "  "),
            Line_4 = Line_2;
        _ -> Line_3 = ((Line ++ " ") ++ Cell_2),
            Line_4 = Line_3
    end,
            C_6 = (C_5 + 1),
            Fun_10_loop(B_3, C_6, Line_4, R_5);
        _ -> {B_3, C_5, Line, R_5}
    end
end,
{B_3, C_6, Line_4, R_5} = Fun_10(B_3, C_5, Line, R_5),
            io:format("~ts~n", [(Line_4 ++ "\n")]),
            R_6 = (R_5 + 1),
            Fun_11_loop(B_3, R_6);
        _ -> {B_3, R_5}
    end
end,
{B_3, R_6} = Fun_11(B_3, R_5),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('rows', 20),
    erlang:put('cols', 30),
    erlang:put('p', 0.01),
    erlang:put('f', 0.001),
    erlang:put('board', newboard()),
    printboard(erlang:get('board')),
    erlang:put('board', step(erlang:get('board'))),
    printboard(erlang:get('board')),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
