#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isprime/1, bigtrim/1, bigfromint/1, bigmulsmall/2, bigtostring/1, pow2/1, ccfactors/2, ccnumbers/2]).

% Generated by Mochi transpiler v0.10.42 (bbaa8b9136) on 2025-07-28 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

isprime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N rem 2) == 0) of
        true -> throw({return, (N == 2)});
        _ -> ok
    end,
        case ((N rem 3) == 0) of
        true -> throw({return, (N == 3)});
        _ -> ok
    end,
        D = 5,
        Fun = fun Fun_loop(D, N) ->
    case ((D * D) =< N) of
        true ->
            case ((N rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            case ((N rem D_2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_3 = (D_2 + 4),
            Fun_loop(D_3, N);
        _ -> {D, N}
    end
end,
{D_3, N} = Fun(D, N),
        true
    catch {return, Ret} -> Ret end.

bigtrim(A) ->
    try
        N_2 = length(A),
        Fun_2 = fun Fun_2_loop(A, N_2) ->
    case ((N_2 > 1) andalso (lists:nth((N_2 - 1) + 1, A) == 0)) of
        true ->
            A_2 = lists:sublist(A, 0 + 1, ((N_2 - 1) - 0)),
            N_3 = (N_2 - 1),
            Fun_2_loop(A_2, N_3);
        _ -> {A, N_2}
    end
end,
{A_2, N_3} = Fun_2(A, N_2),
        A_2
    catch {return, Ret} -> Ret end.

bigfromint(X) ->
    try
        case (X == 0) of
        true -> throw({return, [0]});
        _ -> ok
    end,
        Digits = [],
        N_4 = X,
        Fun_3 = fun Fun_3_loop(Digits, N_4, X) ->
    case (N_4 > 0) of
        true ->
            Digits_2 = lists:append(Digits, [(N_4 rem 10)]),
            N_5 = (N_4 div 10),
            Fun_3_loop(Digits_2, N_5, X);
        _ -> {Digits, N_4, X}
    end
end,
{Digits_2, N_5, X} = Fun_3(Digits, N_4, X),
        Digits_2
    catch {return, Ret} -> Ret end.

bigmulsmall(A_3, M) ->
    try
        case (M == 0) of
        true -> throw({return, [0]});
        _ -> ok
    end,
        Res = [],
        Carry = 0,
        I = 0,
        Fun_4 = fun Fun_4_loop(A_3, Carry, I, M, Res) ->
    case (I < length(A_3)) of
        true ->
            Prod = ((lists:nth(I + 1, A_3) * M) + Carry),
            Res_2 = lists:append(Res, [(Prod rem 10)]),
            Carry_2 = (Prod div 10),
            I_2 = (I + 1),
            Fun_4_loop(A_3, Carry_2, I_2, M, Res_2);
        _ -> {A_3, Carry, I, M, Res}
    end
end,
{A_3, Carry_2, I_2, M, Res_2} = Fun_4(A_3, Carry, I, M, Res),
        Fun_5 = fun Fun_5_loop(A_3, Carry_2, I_2, M, Res_2) ->
    case (Carry_2 > 0) of
        true ->
            Res_3 = lists:append(Res_2, [(Carry_2 rem 10)]),
            Carry_3 = (Carry_2 div 10),
            Fun_5_loop(A_3, Carry_3, I_2, M, Res_3);
        _ -> {A_3, Carry_2, I_2, M, Res_2}
    end
end,
{A_3, Carry_3, I_2, M, Res_3} = Fun_5(A_3, Carry_2, I_2, M, Res_2),
        bigtrim(Res_3)
    catch {return, Ret} -> Ret end.

bigtostring(A_4) ->
    try
        S = "",
        I_3 = (length(A_4) - 1),
        Fun_6 = fun Fun_6_loop(A_4, I_3, S) ->
    case (I_3 >= 0) of
        true ->
            S_2 = (S ++ lists:flatten(io_lib:format("~p", [lists:nth(I_3 + 1, A_4)]))),
            I_4 = (I_3 - 1),
            Fun_6_loop(A_4, I_4, S_2);
        _ -> {A_4, I_3, S}
    end
end,
{A_4, I_4, S_2} = Fun_6(A_4, I_3, S),
        S_2
    catch {return, Ret} -> Ret end.

pow2(K) ->
    try
        R = 1,
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(I_5, K, R) ->
    case (I_5 < K) of
        true ->
            R_2 = (R * 2),
            I_6 = (I_5 + 1),
            Fun_7_loop(I_6, K, R_2);
        _ -> {I_5, K, R}
    end
end,
{I_6, K, R_2} = Fun_7(I_5, K, R),
        R_2
    catch {return, Ret} -> Ret end.

ccfactors(N_6, M_2) ->
    try
        P = ((6 * M_2) + 1),
        case mochi_not(isprime(P)) of
        true -> throw({return, []});
        _ -> ok
    end,
        Prod_2 = bigfromint(P),
        P_2 = ((12 * M_2) + 1),
        case mochi_not(isprime(P_2)) of
        true -> throw({return, []});
        _ -> ok
    end,
        Prod_3 = bigmulsmall(Prod_2, P_2),
        I_7 = 1,
        Fun_8 = fun Fun_8_loop(I_7, M_2, N_6, P_2, Prod_3) ->
    case (I_7 =< (N_6 - 2)) of
        true ->
            P_3 = (((pow2(I_7) * 9) * M_2) + 1),
            case mochi_not(isprime(P_3)) of
        true -> throw({return, []});
        _ -> ok
    end,
            Prod_4 = bigmulsmall(Prod_3, P_3),
            I_8 = (I_7 + 1),
            Fun_8_loop(I_8, M_2, N_6, P_3, Prod_4);
        _ -> {I_7, M_2, N_6, P_2, Prod_3}
    end
end,
{I_8, M_2, N_6, P_3, Prod_4} = Fun_8(I_7, M_2, N_6, P_2, Prod_3),
        Prod_4
    catch {return, Ret} -> Ret end.

ccnumbers(Start, End) ->
    try
        N_7 = Start,
        Fun_10 = fun Fun_10_loop(End, N_7, Start) ->
    case (N_7 =< End) of
        true ->
            try
                M_3 = 1,
                case (N_7 > 4) of
        true -> M_4 = pow2((N_7 - 4)),
            M_5 = M_4;
        _ -> M_5 = M_3
    end,
                Fun_9 = fun Fun_9_loop(End, M_5, N_7, Start) ->
    case true of
        true ->
            try
                Num = ccfactors(N_7, M_5),
                case (length(Num) > 0) of
        true -> io:format("~ts~n", [((("a(" ++ lists:flatten(io_lib:format("~p", [N_7]))) ++ ") = ") ++ bigtostring(Num))]),
            throw(break);
        _ -> ok
    end,
                case (N_7 =< 4) of
        true -> M_6 = (M_5 + 1),
            M_8 = M_6;
        _ -> M_7 = (M_5 + pow2((N_7 - 4))),
            M_8 = M_7
    end,
                Fun_9_loop(End, M_8, N_7, Start)
            catch
                {continue, C0, C1, C2, C3} -> Fun_9_loop(C0, C1, C2, C3);
                break -> {End, M_5, N_7, Start}
            end;
        _ -> {End, M_5, N_7, Start}
    end
end,
{End, M_8, N_7, Start} = Fun_9(End, M_5, N_7, Start),
                N_8 = (N_7 + 1),
                Fun_10_loop(End, N_8, Start)
            catch
                {continue, C0, C1, C2} -> Fun_10_loop(C0, C1, C2);
                break -> {End, N_7, Start}
            end;
        _ -> {End, N_7, Start}
    end
end,
{End, N_8, Start} = Fun_10(End, N_7, Start),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    ccnumbers(3, 9),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
