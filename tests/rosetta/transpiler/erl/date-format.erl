#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pad2/1, weekdayname/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

pad2(N) ->
    try
        (case (N < 10) of
    true -> ("0" ++ lists:flatten(io_lib:format("~p", [N])));
    _ -> lists:flatten(io_lib:format("~p", [N]))
end)
    catch {return, Ret} -> Ret end.

weekdayname(Z) ->
    try
        Names = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        lists:nth(((Z + 4) rem 7) + 1, Names)
    catch {return, Ret} -> Ret end.

main() ->
    try
        Ts = mochi_to_int((mochi_now() / 1000000000)),
        Days = mochi_to_int((Ts div 86400)),
        Z_2 = (Days + 719468),
        Era = mochi_to_int((Z_2 div 146097)),
        Doe = (Z_2 - (Era * 146097)),
        Yoe = ((((Doe - (Doe div 1460)) + (Doe div 36524)) - (Doe div 146096)) / mochi_to_int(365)),
        Y = (Yoe + (Era * 400)),
        Doy = (Doe - (((365 * Yoe) + (Yoe / 4)) - (Yoe / 100))),
        Mp = (((5 * Doy) + 2) / mochi_to_int(153)),
        D = mochi_to_int(((Doy - (((153 * Mp) + 2) / mochi_to_int(5))) + 1)),
        M = mochi_to_int((Mp + 3)),
        case (M > 12) of
        true -> Y_2 = (Y + 1),
            M_2 = (M - 12),
            M_3 = M_2,
            Y_3 = Y_2;
        _ -> M_3 = M,
            Y_3 = Y
    end,
        Iso = ((((lists:flatten(io_lib:format("~p", [Y_3])) ++ "-") ++ pad2(M_3)) ++ "-") ++ pad2(D)),
        io:format("~ts~n", [Iso]),
        Months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        Line = ((((((weekdayname(Days) ++ ", ") ++ lists:nth((M_3 - 1) + 1, Months)) ++ " ") ++ lists:flatten(io_lib:format("~p", [D]))) ++ ", ") ++ lists:flatten(io_lib:format("~p", [Y_3]))),
        io:format("~ts~n", [Line]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
