#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, det/1, replacecol/3]).

% Generated by Mochi transpiler v0.10.42 (04f58ff81a) on 2025-07-28 04:23 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

det(M) ->
    try
        N = length(M),
        case (N == 1) of
        true -> throw({return, lists:nth(0 + 1, lists:nth(0 + 1, M))});
        _ -> ok
    end,
        Total = 0,
        Sign = 1,
        C = 0,
        Fun_3 = fun Fun_3_loop(C, M, N, Sign, Total) ->
    case (C < N) of
        true ->
            Sub = [],
            R = 1,
            Fun_2 = fun Fun_2_loop(C, M, N, R, Sign, Sub, Total) ->
    case (R < N) of
        true ->
            Row = [],
            Cc = 0,
            Fun = fun Fun_loop(C, Cc, M, N, R, Row, Sign, Sub, Total) ->
    case (Cc < N) of
        true ->
            case (Cc /= C) of
        true -> Row_2 = lists:append(Row, [lists:nth(Cc + 1, lists:nth(R + 1, M))]),
            Row_3 = Row_2;
        _ -> Row_3 = Row
    end,
            Cc_2 = (Cc + 1),
            Fun_loop(C, Cc_2, M, N, R, Row_3, Sign, Sub, Total);
        _ -> {C, Cc, M, N, R, Row, Sign, Sub, Total}
    end
end,
{C, Cc_2, M, N, R, Row_3, Sign, Sub, Total} = Fun(C, Cc, M, N, R, Row, Sign, Sub, Total),
            Sub_2 = lists:append(Sub, [Row_3]),
            R_2 = (R + 1),
            Fun_2_loop(C, M, N, R_2, Sign, Sub_2, Total);
        _ -> {C, M, N, R, Sign, Sub, Total}
    end
end,
{C, M, N, R_2, Sign, Sub_2, Total} = Fun_2(C, M, N, R, Sign, Sub, Total),
            Total_2 = (Total + ((Sign * lists:nth(C + 1, lists:nth(0 + 1, M))) * det(Sub_2))),
            Sign_2 = (Sign * -1),
            C_2 = (C + 1),
            Fun_3_loop(C_2, M, N, Sign_2, Total_2);
        _ -> {C, M, N, Sign, Total}
    end
end,
{C_2, M, N, Sign_2, Total_2} = Fun_3(C, M, N, Sign, Total),
        Total_2
    catch {return, Ret} -> Ret end.

replacecol(M_2, Col, V) ->
    try
        Res = [],
        R_3 = 0,
        Fun_5 = fun Fun_5_loop(Col, M_2, R_3, Res, V) ->
    case (R_3 < length(M_2)) of
        true ->
            Row_4 = [],
            C_3 = 0,
            Fun_4 = fun Fun_4_loop(C_3, Col, M_2, R_3, Res, Row_4, V) ->
    case (C_3 < length(lists:nth(R_3 + 1, M_2))) of
        true ->
            case (C_3 == Col) of
        true -> Row_5 = lists:append(Row_4, [lists:nth(R_3 + 1, V)]),
            Row_7 = Row_5;
        _ -> Row_6 = lists:append(Row_4, [lists:nth(C_3 + 1, lists:nth(R_3 + 1, M_2))]),
            Row_7 = Row_6
    end,
            C_4 = (C_3 + 1),
            Fun_4_loop(C_4, Col, M_2, R_3, Res, Row_7, V);
        _ -> {C_3, Col, M_2, R_3, Res, Row_4, V}
    end
end,
{C_4, Col, M_2, R_3, Res, Row_7, V} = Fun_4(C_3, Col, M_2, R_3, Res, Row_4, V),
            Res_2 = lists:append(Res, [Row_7]),
            R_4 = (R_3 + 1),
            Fun_5_loop(Col, M_2, R_4, Res_2, V);
        _ -> {Col, M_2, R_3, Res, V}
    end
end,
{Col, M_2, R_4, Res_2, V} = Fun_5(Col, M_2, R_3, Res, V),
        Res_2
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('m', [[2, -1, 5, 1], [3, 2, 2, -6], [1, 3, 3, -1], [5, -2, -3, 3]]),
    erlang:put('v', [-3, -32, -47, 49]),
    erlang:put('d', det(erlang:get('m'))),
    erlang:put('x', []),
    erlang:put('i', 0),
    Fun_6 = fun Fun_6_loop() ->
    case (erlang:get('i') < length(erlang:get('v'))) of
        true ->
            Mc = replacecol(erlang:get('m'), erlang:get('i'), erlang:get('v')),
            erlang:put('x', lists:append(erlang:get('x'), [(det(Mc) / erlang:get('d'))])),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_6_loop();
        _ -> {}
    end
end,
{} = Fun_6(),
    erlang:put('s', "["),
    erlang:put('j', 0),
    Fun_7 = fun Fun_7_loop() ->
    case (erlang:get('j') < length(erlang:get('x'))) of
        true ->
            erlang:put('s', (erlang:get('s') ++ lists:flatten(io_lib:format("~p", [lists:nth(erlang:get('j') + 1, erlang:get('x'))])))),
            case (erlang:get('j') < (length(erlang:get('x')) - 1)) of
        true -> erlang:put('s', (erlang:get('s') ++ " "));
        _ -> ok
    end,
            erlang:put('j', (erlang:get('j') + 1)),
            Fun_7_loop();
        _ -> {}
    end
end,
{} = Fun_7(),
    erlang:put('s', (erlang:get('s') ++ "]")),
    io:format("~ts~n", [erlang:get('s')]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
