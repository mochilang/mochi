#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ackermann/2, main/0]).

% Generated by Mochi transpiler v0.10.40 (2d48801c25) on 2025-07-25 19:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

ackermann(M, N) ->
    try
        case (M == 0) of
        true -> throw({return, (N + 1)});
        _ -> ok
    end,
        case (N == 0) of
        true -> throw({return, ackermann((M - 1), 1)});
        _ -> ok
    end,
        ackermann((M - 1), ackermann(M, (N - 1)))
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [("A(0, 0) = " ++ lists:flatten(io_lib:format("~p", [ackermann(0, 0)])))]),
        io:format("~ts~n", [("A(1, 2) = " ++ lists:flatten(io_lib:format("~p", [ackermann(1, 2)])))]),
        io:format("~ts~n", [("A(2, 4) = " ++ lists:flatten(io_lib:format("~p", [ackermann(2, 4)])))]),
        io:format("~ts~n", [("A(3, 4) = " ++ lists:flatten(io_lib:format("~p", [ackermann(3, 4)])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
