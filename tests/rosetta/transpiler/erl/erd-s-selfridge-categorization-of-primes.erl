#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, generateprimes/1, primefactors/2, cat/2, padleft/2, main/0]).

% Generated by Mochi transpiler v0.10.54 (6b449c7962) on 2025-08-02 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.

generateprimes(N) ->
    try
        Primes = [2],
        Cand = 3,
        Fun_2 = fun Fun_2_loop(Cand, N, Primes) ->
    case (length(Primes) < N) of
        true ->
            try
                IsP = true,
                I = 0,
                Fun = fun Fun_loop(Cand, I, IsP, N, Primes) ->
    case (I < length(Primes)) of
        true ->
            try
                P = (case erlang:is_map(Primes) of true -> maps:get(I, Primes, nil); _ -> lists:nth(I + 1, Primes) end),
                case ((P * P) > Cand) of
        true -> throw(break);
        _ -> ok
    end,
                case ((Cand rem P) == 0) of
        true -> IsP_2 = false,
            throw(break),
            IsP_3 = IsP_2;
        _ -> IsP_3 = IsP
    end,
                I_2 = (I + 1),
                Fun_loop(Cand, I_2, IsP_3, N, Primes)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_loop(C0, C1, C2, C3, C4);
                break -> {Cand, I, IsP, N, Primes}
            end;
        _ -> {Cand, I, IsP, N, Primes}
    end
end,
{Cand, I_2, IsP_3, N, Primes} = Fun(Cand, I, IsP, N, Primes),
                case (IsP_3 /= nil) of
        true -> Primes_2 = lists:append(Primes, [Cand]),
            Primes_3 = Primes_2;
        _ -> Primes_3 = Primes
    end,
                Cand_2 = (Cand + 2),
                Fun_2_loop(Cand_2, N, Primes_3)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                break -> {Cand, N, Primes}
            end;
        _ -> {Cand, N, Primes}
    end
end,
{Cand_2, N, Primes_3} = Fun_2(Cand, N, Primes),
        Primes_3
    catch {return, Ret} -> Ret end.

primefactors(N_2, Primes_4) ->
    try
        Factors = [],
        Num = N_2,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Factors, I_3, N_2, Num, Primes_4) ->
    case ((I_3 < length(Primes_4)) andalso (((case erlang:is_map(Primes_4) of true -> maps:get(I_3, Primes_4, nil); _ -> lists:nth(I_3 + 1, Primes_4) end) * (case erlang:is_map(Primes_4) of true -> maps:get(I_3, Primes_4, nil); _ -> lists:nth(I_3 + 1, Primes_4) end)) =< Num)) of
        true ->
            P_2 = (case erlang:is_map(Primes_4) of true -> maps:get(I_3, Primes_4, nil); _ -> lists:nth(I_3 + 1, Primes_4) end),
            Fun_3 = fun Fun_3_loop(Factors, I_3, N_2, Num, P_2, Primes_4) ->
    case ((Num rem P_2) == 0) of
        true ->
            Factors_2 = lists:append(Factors, [P_2]),
            Num_2 = (Num div P_2),
            Fun_3_loop(Factors_2, I_3, N_2, Num_2, P_2, Primes_4);
        _ -> {Factors, I_3, N_2, Num, P_2, Primes_4}
    end
end,
{Factors_2, I_3, N_2, Num_2, P_2, Primes_4} = Fun_3(Factors, I_3, N_2, Num, P_2, Primes_4),
            I_4 = (I_3 + 1),
            Fun_4_loop(Factors_2, I_4, N_2, Num_2, Primes_4);
        _ -> {Factors, I_3, N_2, Num, Primes_4}
    end
end,
{Factors_2, I_4, N_2, Num_2, Primes_4} = Fun_4(Factors, I_3, N_2, Num, Primes_4),
        case (Num_2 > 1) of
        true -> Factors_3 = lists:append(Factors_2, [Num_2]),
            Factors_4 = Factors_3;
        _ -> Factors_4 = Factors_2
    end,
        Factors_4
    catch {return, Ret} -> Ret end.

cat(P_3, Primes_5) ->
    try
        case mochi_member(P_3, erlang:get('prevCats')) of
        true -> throw({return, maps:get(P_3, erlang:get('prevCats'), nil)});
        _ -> ok
    end,
        Pf = primefactors((P_3 + 1), Primes_5),
        All23 = true,
        Fun_5 = fun Fun_5_loop(List, All23, P_3, Pf, Primes_5) ->
    case List of
        [] -> {All23, P_3, Pf, Primes_5};
        [F|F_rest] ->
        try
            case ((F /= 2) andalso (F /= 3)) of
        true -> All23_2 = false,
            throw(break),
            All23_3 = All23_2;
        _ -> All23_3 = All23
    end,
            Fun_5_loop(F_rest, All23_3, P_3, Pf, Primes_5)
        catch
            {continue, C0, C1, C2, C3} -> Fun_5_loop(F_rest, C0, C1, C2, C3);
            {break, B0, B1, B2, B3} -> {B0, B1, B2, B3};
            break -> {All23, P_3, Pf, Primes_5}
        end
    end
end,
{All23_3, P_3, Pf, Primes_5} = Fun_5(Pf, All23, P_3, Pf, Primes_5),
        case All23_3 of
        true -> PrevCats = erlang:get('prevCats'),
            PrevCats_2 = maps:put(P_3, 1, PrevCats),
            erlang:put('prevCats', PrevCats_2),
            throw({return, 1}),
            PrevCats_3 = PrevCats_2;
        _ -> PrevCats_3 = nil
    end,
        case (P_3 > 2) of
        true -> Unique = [],
            Last = -1,
            Fun_6 = fun Fun_6_loop(List, All23_3, Last, P_3, Pf, PrevCats_3, Primes_5, Unique) ->
    case List of
        [] -> {All23_3, Last, P_3, Pf, PrevCats_3, Primes_5, Unique};
        [F_2|F_2_rest] ->
            case (F_2 /= Last) of
        true -> Unique_2 = lists:append(Unique, [F_2]),
            Last_2 = F_2,
            Last_3 = Last_2,
            Unique_3 = Unique_2;
        _ -> Last_3 = Last,
            Unique_3 = Unique
    end,
            Fun_6_loop(F_2_rest, All23_3, Last_3, P_3, Pf, PrevCats_3, Primes_5, Unique_3)
    end
end,
{All23_3, Last_3, P_3, Pf, PrevCats_3, Primes_5, Unique_3} = Fun_6(Pf, All23_3, Last, P_3, Pf, PrevCats_3, Primes_5, Unique),
            Pf_2 = Unique_3,
            Fun_7 = Fun_6,
            Last_4 = Last_3,
            Pf_3 = Pf_2,
            Unique_4 = Unique_3;
        _ -> Fun_7 = Fun_5,
            Last_4 = nil,
            Pf_3 = Pf,
            Unique_4 = nil
    end,
        C = 2,
        Fun_9 = fun Fun_9_loop(All23_3, C, Last_4, P_3, Pf_3, PrevCats_3, Primes_5, Unique_4) ->
    case (C =< 11) of
        true ->
            try
                Ok = true,
                Fun_8 = fun Fun_8_loop(List, All23_3, C, Last_4, Ok, P_3, Pf_3, PrevCats_3, Primes_5, Unique_4) ->
    case List of
        [] -> {All23_3, C, Last_4, Ok, P_3, Pf_3, PrevCats_3, Primes_5, Unique_4};
        [F_3|F_3_rest] ->
        try
            case (cat(F_3, Primes_5) >= C) of
        true -> Ok_2 = false,
            throw(break),
            Ok_3 = Ok_2;
        _ -> Ok_3 = Ok
    end,
            Fun_8_loop(F_3_rest, All23_3, C, Last_4, Ok_3, P_3, Pf_3, PrevCats_3, Primes_5, Unique_4)
        catch
            {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8} -> Fun_8_loop(F_3_rest, C0, C1, C2, C3, C4, C5, C6, C7, C8);
            {break, B0, B1, B2, B3, B4, B5, B6, B7, B8} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8};
            break -> {All23_3, C, Last_4, Ok, P_3, Pf_3, PrevCats_3, Primes_5, Unique_4}
        end
    end
end,
{All23_3, C, Last_4, Ok_3, P_3, Pf_3, PrevCats_3, Primes_5, Unique_4} = Fun_8(Pf_3, All23_3, C, Last_4, Ok, P_3, Pf_3, PrevCats_3, Primes_5, Unique_4),
                case Ok_3 of
        true -> PrevCats_4 = erlang:get('prevCats'),
            PrevCats_5 = maps:put(P_3, C, PrevCats_4),
            erlang:put('prevCats', PrevCats_5),
            throw({return, C}),
            PrevCats_6 = PrevCats_5;
        _ -> PrevCats_6 = PrevCats_3
    end,
                C_2 = (C + 1),
                Fun_9_loop(All23_3, C_2, Last_4, P_3, Pf_3, PrevCats_6, Primes_5, Unique_4)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_9_loop(C0, C1, C2, C3, C4, C5, C6, C7);
                break -> {All23_3, C, Last_4, P_3, Pf_3, PrevCats_3, Primes_5, Unique_4}
            end;
        _ -> {All23_3, C, Last_4, P_3, Pf_3, PrevCats_3, Primes_5, Unique_4}
    end
end,
{All23_3, C_2, Last_4, P_3, Pf_3, PrevCats_6, Primes_5, Unique_4} = Fun_9(All23_3, C, Last_4, P_3, Pf_3, PrevCats_3, Primes_5, Unique_4),
        PrevCats_7 = erlang:get('prevCats'),
        PrevCats_8 = maps:put(P_3, 12, PrevCats_7),
        erlang:put('prevCats', PrevCats_8),
        12
    catch {return, Ret} -> Ret end.

padleft(N_3, Width) ->
    try
        S = lists:flatten(io_lib:format("~p", [N_3])),
        Fun_10 = fun Fun_10_loop(N_3, S, Width) ->
    case (length(S) < Width) of
        true ->
            S_2 = (" " ++ S),
            Fun_10_loop(N_3, S_2, Width);
        _ -> {N_3, S, Width}
    end
end,
{N_3, S_2, Width} = Fun_10(N_3, S, Width),
        S_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Primes_6 = generateprimes(1000),
        Es = [],
        Fun_11 = fun Fun_11_loop(List, Es, Primes_6) ->
    case List of
        [] -> {Es, Primes_6};
        [_|__rest] ->
            Es_2 = lists:append(Es, [[]]),
            Fun_11_loop(__rest, Es_2, Primes_6)
    end
end,
{Es_2, Primes_6} = Fun_11(lists:seq(0, (12) - 1), Es, Primes_6),
        io:format("~ts~n", ["First 200 primes:\n"]),
        Idx = 0,
        Fun_12 = fun Fun_12_loop(Es_2, Idx, Primes_6) ->
    case (Idx < 200) of
        true ->
            P_4 = (case erlang:is_map(Primes_6) of true -> maps:get(Idx, Primes_6, nil); _ -> lists:nth(Idx + 1, Primes_6) end),
            C_3 = cat(P_4, Primes_6),
            Es_3 = lists:sublist(Es_2, (C_3 - 1)) ++ [lists:append((case erlang:is_map(Es_2) of true -> maps:get((C_3 - 1), Es_2, nil); _ -> lists:nth((C_3 - 1) + 1, Es_2) end), [P_4])] ++ lists:nthtail((C_3 - 1) + 1, Es_2),
            Idx_2 = (Idx + 1),
            Fun_12_loop(Es_3, Idx_2, Primes_6);
        _ -> {Es_2, Idx, Primes_6}
    end
end,
{Es_3, Idx_2, Primes_6} = Fun_12(Es_2, Idx, Primes_6),
        C_4 = 1,
        Fun_13 = fun Fun_13_loop(C_4, Es_3, Idx_2, Primes_6) ->
    case (C_4 =< 6) of
        true ->
            case (length((case erlang:is_map(Es_3) of true -> maps:get((C_4 - 1), Es_3, nil); _ -> lists:nth((C_4 - 1) + 1, Es_3) end)) > 0) of
        true -> io:format("~ts~n", [(("Category " ++ lists:flatten(io_lib:format("~p", [C_4]))) ++ ":")]),
            io:format("~ts~n", [lists:flatten(io_lib:format("~p", [(case erlang:is_map(Es_3) of true -> maps:get((C_4 - 1), Es_3, nil); _ -> lists:nth((C_4 - 1) + 1, Es_3) end)]))]),
            io:format("~ts~n", [""]);
        _ -> ok
    end,
            C_5 = (C_4 + 1),
            Fun_13_loop(C_5, Es_3, Idx_2, Primes_6);
        _ -> {C_4, Es_3, Idx_2, Primes_6}
    end
end,
{C_5, Es_3, Idx_2, Primes_6} = Fun_13(C_4, Es_3, Idx_2, Primes_6),
        io:format("~ts~n", ["First thousand primes:\n"]),
        Fun_14 = fun Fun_14_loop(C_5, Es_3, Idx_2, Primes_6) ->
    case (Idx_2 < 1000) of
        true ->
            P_5 = (case erlang:is_map(Primes_6) of true -> maps:get(Idx_2, Primes_6, nil); _ -> lists:nth(Idx_2 + 1, Primes_6) end),
            Cv = cat(P_5, Primes_6),
            Es_4 = lists:sublist(Es_3, (Cv - 1)) ++ [lists:append((case erlang:is_map(Es_3) of true -> maps:get((Cv - 1), Es_3, nil); _ -> lists:nth((Cv - 1) + 1, Es_3) end), [P_5])] ++ lists:nthtail((Cv - 1) + 1, Es_3),
            Idx_3 = (Idx_2 + 1),
            Fun_14_loop(C_5, Es_4, Idx_3, Primes_6);
        _ -> {C_5, Es_3, Idx_2, Primes_6}
    end
end,
{C_5, Es_4, Idx_3, Primes_6} = Fun_14(C_5, Es_3, Idx_2, Primes_6),
        C_6 = 1,
        Fun_15 = fun Fun_15_loop(C_6, Es_4, Idx_3, Primes_6) ->
    case (C_6 =< 12) of
        true ->
            E = (case erlang:is_map(Es_4) of true -> maps:get((C_6 - 1), Es_4, nil); _ -> lists:nth((C_6 - 1) + 1, Es_4) end),
            case (length(E) > 0) of
        true -> Line = ((((((("Category " ++ padleft(C_6, 2)) ++ ": First = ") ++ padleft((case erlang:is_map(E) of true -> maps:get(0, E, nil); _ -> lists:nth(0 + 1, E) end), 7)) ++ "  Last = ") ++ padleft((case erlang:is_map(E) of true -> maps:get((length(E) - 1), E, nil); _ -> lists:nth((length(E) - 1) + 1, E) end), 8)) ++ "  Count = ") ++ padleft(length(E), 6)),
            io:format("~ts~n", [Line]),
            Line_2 = Line;
        _ -> Line_2 = nil
    end,
            C_7 = (C_6 + 1),
            Fun_15_loop(C_7, Es_4, Idx_3, Primes_6);
        _ -> {C_6, Es_4, Idx_3, Primes_6}
    end
end,
{C_7, Es_4, Idx_3, Primes_6} = Fun_15(C_6, Es_4, Idx_3, Primes_6),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('prevCats', #{}),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
