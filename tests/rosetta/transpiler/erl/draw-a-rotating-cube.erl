#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mod/2, sin/1, cos/1, rotate/3, project/1, cleargrid/0, drawpoint/4, bresenham/6, render/1, main/0]).

% Generated by Mochi transpiler v0.10.47 (eaacde736f) on 2025-07-28 11:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

mod(X, M) ->
    try
        (X - (float(mochi_to_int((X / M))) * M))
    catch {return, Ret} -> Ret end.

sin(X_2) ->
    try
        Y = (mod((X_2 + 3.141592653589793), 6.283185307179586) - 3.141592653589793),
        Y2 = (Y * Y),
        Y3 = (Y2 * Y),
        Y5 = (Y3 * Y2),
        Y7 = (Y5 * Y2),
        (((Y - (Y3 / 6)) + (Y5 / 120)) - (Y7 / 5040))
    catch {return, Ret} -> Ret end.

cos(X_3) ->
    try
        Y_2 = (mod((X_3 + 3.141592653589793), 6.283185307179586) - 3.141592653589793),
        Y2_2 = (Y_2 * Y_2),
        Y4 = (Y2_2 * Y2_2),
        Y6 = (Y4 * Y2_2),
        (((1 - (Y2_2 / 2)) + (Y4 / 24)) - (Y6 / 720))
    catch {return, Ret} -> Ret end.

rotate(P, Ax, Ay) ->
    try
        Sinx = sin(Ax),
        Cosx = cos(Ax),
        Siny = sin(Ay),
        Cosy = cos(Ay),
        X1 = maps:get("x", P, nil),
        Y1 = ((maps:get("y", P, nil) * Cosx) - (maps:get("z", P, nil) * Sinx)),
        Z1 = ((maps:get("y", P, nil) * Sinx) + (maps:get("z", P, nil) * Cosx)),
        X2 = ((X1 * Cosy) + (Z1 * Siny)),
        Z2 = ((-X1 * Siny) + (Z1 * Cosy)),
        #{"x" => X2, "y" => Y1, "z" => Z2}
    catch {return, Ret} -> Ret end.

project(P_2) ->
    try
        Factor = (8 / (maps:get("z", P_2, nil) + 3)),
        X_4 = (mochi_to_int((maps:get("x", P_2, nil) * Factor)) + (40 div 2)),
        Y_3 = (mochi_to_int((-maps:get("y", P_2, nil) * Factor)) + (20 div 2)),
        #{"x" => X_4, "y" => Y_3}
    catch {return, Ret} -> Ret end.

cleargrid() ->
    try
        G = [],
        Y_4 = 0,
        Fun_2 = fun Fun_2_loop(G, Y_4) ->
    case (Y_4 < 20) of
        true ->
            Row = [],
            X_5 = 0,
            Fun = fun Fun_loop(G, Row, X_5, Y_4) ->
    case (X_5 < 40) of
        true ->
            Row_2 = lists:append(Row, [" "]),
            X_6 = (X_5 + 1),
            Fun_loop(G, Row_2, X_6, Y_4);
        _ -> {G, Row, X_5, Y_4}
    end
end,
{G, Row_2, X_6, Y_4} = Fun(G, Row, X_5, Y_4),
            G_2 = lists:append(G, [Row_2]),
            Y_5 = (Y_4 + 1),
            Fun_2_loop(G_2, Y_5);
        _ -> {G, Y_4}
    end
end,
{G_2, Y_5} = Fun_2(G, Y_4),
        G_2
    catch {return, Ret} -> Ret end.

drawpoint(G_3, X_7, Y_6, Ch) ->
    try
        case ((((X_7 >= 0) andalso (X_7 < 40)) andalso (Y_6 >= 0)) andalso (Y_6 < 20)) of
        true -> Row_3 = lists:nth(Y_6 + 1, G_3),
            Row_4 = lists:sublist(Row_3, X_7) ++ [Ch] ++ lists:nthtail(X_7 + 1, Row_3),
            G_4 = lists:sublist(G_3, Y_6) ++ [Row_4] ++ lists:nthtail(Y_6 + 1, G_3),
            G_5 = G_4,
            Row_5 = Row_4;
        _ -> G_5 = G_3,
            Row_5 = nil
    end,
        nil
    catch {return, Ret} -> Ret end.

bresenham(X0, Y0, X1_2, Y1_2, G_6, Ch_2) ->
    try
        Dx = (X1_2 - X0),
        case (Dx < 0) of
        true -> Dx_2 = -Dx,
            Dx_3 = Dx_2;
        _ -> Dx_3 = Dx
    end,
        Dy = (Y1_2 - Y0),
        case (Dy < 0) of
        true -> Dy_2 = -Dy,
            Dy_3 = Dy_2;
        _ -> Dy_3 = Dy
    end,
        Sx = -1,
        case (X0 < X1_2) of
        true -> Sx_2 = 1,
            Sx_3 = Sx_2;
        _ -> Sx_3 = Sx
    end,
        Sy = -1,
        case (Y0 < Y1_2) of
        true -> Sy_2 = 1,
            Sy_3 = Sy_2;
        _ -> Sy_3 = Sy
    end,
        Err = (Dx_3 - Dy_3),
        Fun_3 = fun Fun_3_loop(Ch_2, Dx_3, Dy_3, Err, G_6, Sx_3, Sy_3, X0, X1_2, Y0, Y1_2) ->
    case true of
        true ->
            try
                drawpoint(G_6, X0, Y0, Ch_2),
                case ((X0 == X1_2) andalso (Y0 == Y1_2)) of
        true -> throw(break);
        _ -> ok
    end,
                E2 = (2 * Err),
                case (E2 > -Dy_3) of
        true -> Err_2 = (Err - Dy_3),
            X0_2 = (X0 + Sx_3),
            Err_3 = Err_2,
            X0_3 = X0_2;
        _ -> Err_3 = Err,
            X0_3 = X0
    end,
                case (E2 < Dx_3) of
        true -> Err_4 = (Err_3 + Dx_3),
            Y0_2 = (Y0 + Sy_3),
            Err_5 = Err_4,
            Y0_3 = Y0_2;
        _ -> Err_5 = Err_3,
            Y0_3 = Y0
    end,
                Fun_3_loop(Ch_2, Dx_3, Dy_3, Err_5, G_6, Sx_3, Sy_3, X0_3, X1_2, Y0_3, Y1_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10);
                break -> {Ch_2, Dx_3, Dy_3, Err, G_6, Sx_3, Sy_3, X0, X1_2, Y0, Y1_2}
            end;
        _ -> {Ch_2, Dx_3, Dy_3, Err, G_6, Sx_3, Sy_3, X0, X1_2, Y0, Y1_2}
    end
end,
{Ch_2, Dx_3, Dy_3, Err_5, G_6, Sx_3, Sy_3, X0_3, X1_2, Y0_3, Y1_2} = Fun_3(Ch_2, Dx_3, Dy_3, Err, G_6, Sx_3, Sy_3, X0, X1_2, Y0, Y1_2),
        nil
    catch {return, Ret} -> Ret end.

render(G_7) ->
    try
        Out = "",
        Y_7 = 0,
        Fun_5 = fun Fun_5_loop(G_7, Out, Y_7) ->
    case (Y_7 < 20) of
        true ->
            Line = "",
            X_8 = 0,
            Fun_4 = fun Fun_4_loop(G_7, Line, Out, X_8, Y_7) ->
    case (X_8 < 40) of
        true ->
            Line_2 = (Line ++ lists:nth(X_8 + 1, lists:nth(Y_7 + 1, G_7))),
            X_9 = (X_8 + 1),
            Fun_4_loop(G_7, Line_2, Out, X_9, Y_7);
        _ -> {G_7, Line, Out, X_8, Y_7}
    end
end,
{G_7, Line_2, Out, X_9, Y_7} = Fun_4(G_7, Line, Out, X_8, Y_7),
            Out_2 = ((Out ++ Line_2) ++ "\n"),
            Y_8 = (Y_7 + 1),
            Fun_5_loop(G_7, Out_2, Y_8);
        _ -> {G_7, Out, Y_7}
    end
end,
{G_7, Out_2, Y_8} = Fun_5(G_7, Out, Y_7),
        Out_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        F = 0,
        Fun_8 = fun Fun_8_loop(F) ->
    case (F < 10) of
        true ->
            Grid = cleargrid(),
            Rot = [],
            I = 0,
            Ay_2 = ((3.141592653589793 / 4) + ((float(F) * 3.141592653589793) / 10)),
            Fun_6 = fun Fun_6_loop(Ay_2, F, Grid, I, Rot) ->
    case (I < length(erlang:get('nodes'))) of
        true ->
            P_3 = rotate(lists:nth(I + 1, erlang:get('nodes')), (3.141592653589793 / 4), Ay_2),
            Pp = project(P_3),
            Rot_2 = lists:append(Rot, [Pp]),
            I_2 = (I + 1),
            Fun_6_loop(Ay_2, F, Grid, I_2, Rot_2);
        _ -> {Ay_2, F, Grid, I, Rot}
    end
end,
{Ay_2, F, Grid, I_2, Rot_2} = Fun_6(Ay_2, F, Grid, I, Rot),
            E = 0,
            Fun_7 = fun Fun_7_loop(Ay_2, E, F, Grid, I_2, Rot_2) ->
    case (E < length(erlang:get('edges'))) of
        true ->
            A = lists:nth(0 + 1, lists:nth(E + 1, erlang:get('edges'))),
            B = lists:nth(1 + 1, lists:nth(E + 1, erlang:get('edges'))),
            P1 = lists:nth(A + 1, Rot_2),
            P2 = lists:nth(B + 1, Rot_2),
            bresenham(maps:get("x", P1, nil), maps:get("y", P1, nil), maps:get("x", P2, nil), maps:get("y", P2, nil), Grid, "#"),
            E_2 = (E + 1),
            Fun_7_loop(Ay_2, E_2, F, Grid, I_2, Rot_2);
        _ -> {Ay_2, E, F, Grid, I_2, Rot_2}
    end
end,
{Ay_2, E_2, F, Grid, I_2, Rot_2} = Fun_7(Ay_2, E, F, Grid, I_2, Rot_2),
            io:format("~ts~n", [render(Grid)]),
            F_2 = (F + 1),
            Fun_8_loop(F_2);
        _ -> {F}
    end
end,
{F_2} = Fun_8(F),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('TWO_PI', 6.283185307179586),
    erlang:put('nodes', [#{"x" => -1, "y" => -1, "z" => -1}, #{"x" => -1, "y" => -1, "z" => 1}, #{"x" => -1, "y" => 1, "z" => -1}, #{"x" => -1, "y" => 1, "z" => 1}, #{"x" => 1, "y" => -1, "z" => -1}, #{"x" => 1, "y" => -1, "z" => 1}, #{"x" => 1, "y" => 1, "z" => -1}, #{"x" => 1, "y" => 1, "z" => 1}]),
    erlang:put('edges', [[0, 1], [1, 3], [3, 2], [2, 0], [4, 5], [5, 7], [7, 6], [6, 4], [0, 4], [1, 5], [2, 6], [3, 7]]),
    erlang:put('width', 40),
    erlang:put('height', 20),
    erlang:put('distance', 3),
    erlang:put('scale', 8),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
