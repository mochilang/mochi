#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, repeat/2, reversestr/1]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_repeat(S, N) when is_binary(S) ->
    binary:copy(S, mochi_to_int(N));
mochi_repeat(S, N) when is_list(S) ->
    string:copies(S, mochi_to_int(N));
mochi_repeat(_, _) -> [].

repeat(S, N) ->
    try
        Out = "",
        I = 0,
        Fun = fun Fun_loop(I, N, Out, S) ->
    case (I < N) of
        true ->
            Out_2 = (Out ++ S),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Out_2, S);
        _ -> {I, N, Out, S}
    end
end,
{I_2, N, Out_2, S} = Fun(I, N, Out, S),
        Out_2
    catch {return, Ret} -> Ret end.

reversestr(S_2) ->
    try
        Out_3 = "",
        I_3 = (length(S_2) - 1),
        Fun_2 = fun Fun_2_loop(I_3, Out_3, S_2) ->
    case (I_3 >= 0) of
        true ->
            Out_4 = (Out_3 ++ string:substr(S_2, I_3 + 1, ((I_3 + 1) - I_3))),
            I_4 = (I_3 - 1),
            Fun_2_loop(I_4, Out_4, S_2);
        _ -> {I_3, Out_3, S_2}
    end
end,
{I_4, Out_4, S_2} = Fun_2(I_3, Out_3, S_2),
        Out_4
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('records', [mochi_repeat("abcdefgh", 10), mochi_repeat("ijklmnop", 10), mochi_repeat("qrstuvwx", 10)]),
    Fun_3 = fun Fun_3_loop(List) ->
    case List of
        [] -> {};
        [R|R_rest] ->
            io:format("~ts~n", [reversestr(R)]),
            Fun_3_loop(R_rest)
    end
end,
{} = Fun_3(erlang:get('records')),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
