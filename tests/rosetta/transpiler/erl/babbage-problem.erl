#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.40 (305ff8442f) on 2025-07-25 12:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('target', 269696),
    erlang:put('modulus', 1000000),
    erlang:put('n', 1),
    Fun = fun Fun_loop() ->
    case true of
        true ->
            try
                Square = (erlang:get('n') * erlang:get('n')),
                Ending = (Square rem 1000000),
                case (Ending == 269696) of
        true -> io:format("~ts~n", [((("The smallest number whose square ends with " ++ lists:flatten(io_lib:format("~p", [269696]))) ++ " is ") ++ lists:flatten(io_lib:format("~p", [erlang:get('n')])))]),
            throw(break);
        _ -> ok
    end,
                erlang:put('n', (erlang:get('n') + 1)),
                Fun_loop()
            catch
                {continue} -> Fun_loop();
                break -> {}
            end;
        _ -> {}
    end
end,
{} = Fun(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
