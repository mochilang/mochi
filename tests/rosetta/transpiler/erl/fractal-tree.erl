#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mod/2, sin/1, cos/1, cleargrid/0, drawpoint/3, bresenham/5, ftree/6, render/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (67b72aa5ea) on 2025-08-02 22:23 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

mod(X, M) ->
    try
        (X - mochi_safe_mul(float(mochi_to_int(mochi_safe_div(X, M))), M))
    catch {return, Ret} -> Ret end.

sin(X_2) ->
    try
        Y = (mod((X_2 + 3.141592653589793), mochi_safe_mul(2, 3.141592653589793)) - 3.141592653589793),
        Y2 = mochi_safe_mul(Y, Y),
        Y3 = mochi_safe_mul(Y2, Y),
        Y5 = (Y3 * Y2),
        Y7 = (Y5 * Y2),
        (((Y - mochi_safe_div(Y3, 6)) + mochi_safe_div(Y5, 120)) - mochi_safe_div(Y7, 5040))
    catch {return, Ret} -> Ret end.

cos(X_3) ->
    try
        Y_2 = (mod((X_3 + 3.141592653589793), mochi_safe_mul(2, 3.141592653589793)) - 3.141592653589793),
        Y2_2 = mochi_safe_mul(Y_2, Y_2),
        Y4 = (Y2_2 * Y2_2),
        Y6 = (Y4 * Y2_2),
        (((1 - mochi_safe_div(Y2_2, 2)) + mochi_safe_div(Y4, 24)) - mochi_safe_div(Y6, 720))
    catch {return, Ret} -> Ret end.

cleargrid() ->
    try
        G = [],
        Y_3 = 0,
        Fun_2 = fun Fun_2_loop(G, Y_3) ->
    case (Y_3 < 40) of
        true ->
            Row = [],
            X_4 = 0,
            Fun = fun Fun_loop(G, Row, X_4, Y_3) ->
    case (X_4 < 80) of
        true ->
            Row_2 = lists:append(Row, [" "]),
            X_5 = (X_4 + 1),
            Fun_loop(G, Row_2, X_5, Y_3);
        _ -> {G, Row, X_4, Y_3}
    end
end,
{G, Row_2, X_5, Y_3} = Fun(G, Row, X_4, Y_3),
            G_2 = lists:append(G, [Row_2]),
            Y_4 = (Y_3 + 1),
            Fun_2_loop(G_2, Y_4);
        _ -> {G, Y_3}
    end
end,
{G_2, Y_4} = Fun_2(G, Y_3),
        G_2
    catch {return, Ret} -> Ret end.

drawpoint(G_3, X_6, Y_5) ->
    try
        case ((((X_6 >= 0) andalso (X_6 < 80)) andalso (Y_5 >= 0)) andalso (Y_5 < 40)) of
        true -> Row_3 = (case erlang:is_map(G_3) of true -> maps:get(Y_5, G_3, nil); _ -> lists:nth(Y_5 + 1, G_3) end),
            Row_4 = lists:sublist(Row_3, X_6) ++ ["#"] ++ lists:nthtail(X_6 + 1, Row_3),
            G_4 = lists:sublist(G_3, Y_5) ++ [Row_4] ++ lists:nthtail(Y_5 + 1, G_3),
            G_5 = G_4,
            Row_5 = Row_4;
        _ -> G_5 = G_3,
            Row_5 = nil
    end,
        nil
    catch {return, Ret} -> Ret end.

bresenham(X0, Y0, X1, Y1, G_6) ->
    try
        Dx = (X1 - X0),
        case (Dx < 0) of
        true -> Dx_2 = -Dx,
            Dx_3 = Dx_2;
        _ -> Dx_3 = Dx
    end,
        Dy = (Y1 - Y0),
        case (Dy < 0) of
        true -> Dy_2 = -Dy,
            Dy_3 = Dy_2;
        _ -> Dy_3 = Dy
    end,
        Sx = -1,
        case (X0 < X1) of
        true -> Sx_2 = 1,
            Sx_3 = Sx_2;
        _ -> Sx_3 = Sx
    end,
        Sy = -1,
        case (Y0 < Y1) of
        true -> Sy_2 = 1,
            Sy_3 = Sy_2;
        _ -> Sy_3 = Sy
    end,
        Err = (Dx_3 - Dy_3),
        Fun_3 = fun Fun_3_loop(Dx_3, Dy_3, Err, G_6, Sx_3, Sy_3, X0, X1, Y0, Y1) ->
    case true of
        true ->
            try
                drawpoint(G_6, X0, Y0),
                case ((X0 == X1) andalso (Y0 == Y1)) of
        true -> throw(break);
        _ -> ok
    end,
                E2 = (2 * Err),
                case (E2 > -Dy_3) of
        true -> Err_2 = (Err - Dy_3),
            X0_2 = (X0 + Sx_3),
            Err_3 = Err_2,
            X0_3 = X0_2;
        _ -> Err_3 = Err,
            X0_3 = X0
    end,
                case (E2 < Dx_3) of
        true -> Err_4 = (Err_3 + Dx_3),
            Y0_2 = (Y0 + Sy_3),
            Err_5 = Err_4,
            Y0_3 = Y0_2;
        _ -> Err_5 = Err_3,
            Y0_3 = Y0
    end,
                Fun_3_loop(Dx_3, Dy_3, Err_5, G_6, Sx_3, Sy_3, X0_3, X1, Y0_3, Y1)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9);
                break -> {Dx_3, Dy_3, Err, G_6, Sx_3, Sy_3, X0, X1, Y0, Y1}
            end;
        _ -> {Dx_3, Dy_3, Err, G_6, Sx_3, Sy_3, X0, X1, Y0, Y1}
    end
end,
{Dx_3, Dy_3, Err_5, G_6, Sx_3, Sy_3, X0_3, X1, Y0_3, Y1} = Fun_3(Dx_3, Dy_3, Err, G_6, Sx_3, Sy_3, X0, X1, Y0, Y1),
        nil
    catch {return, Ret} -> Ret end.

ftree(G_7, X_7, Y_6, Dist, Dir, D) ->
    try
        Rad = mochi_safe_div(mochi_safe_mul(Dir, 3.141592653589793), 180),
        X2 = (X_7 + mochi_safe_mul(Dist, sin(Rad))),
        Y2_3 = (Y_6 - mochi_safe_mul(Dist, cos(Rad))),
        bresenham(mochi_to_int(X_7), mochi_to_int(Y_6), mochi_to_int(X2), mochi_to_int(Y2_3), G_7),
        case (D > 0) of
        true -> ftree(G_7, X2, Y2_3, mochi_safe_mul(Dist, 0.8), (Dir - 12), (D - 1)),
            ftree(G_7, X2, Y2_3, mochi_safe_mul(Dist, 0.8), (Dir + 12), (D - 1));
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

render(G_8) ->
    try
        Out = "",
        Y_7 = 0,
        Fun_5 = fun Fun_5_loop(G_8, Out, Y_7) ->
    case (Y_7 < 40) of
        true ->
            Line = "",
            X_8 = 0,
            Fun_4 = fun Fun_4_loop(G_8, Line, Out, X_8, Y_7) ->
    case (X_8 < 80) of
        true ->
            Line_2 = (Line ++ (case erlang:is_map((case erlang:is_map(G_8) of true -> maps:get(Y_7, G_8, nil); _ -> lists:nth(Y_7 + 1, G_8) end)) of true -> maps:get(X_8, (case erlang:is_map(G_8) of true -> maps:get(Y_7, G_8, nil); _ -> lists:nth(Y_7 + 1, G_8) end), nil); _ -> lists:nth(X_8 + 1, (case erlang:is_map(G_8) of true -> maps:get(Y_7, G_8, nil); _ -> lists:nth(Y_7 + 1, G_8) end)) end)),
            X_9 = (X_8 + 1),
            Fun_4_loop(G_8, Line_2, Out, X_9, Y_7);
        _ -> {G_8, Line, Out, X_8, Y_7}
    end
end,
{G_8, Line_2, Out, X_9, Y_7} = Fun_4(G_8, Line, Out, X_8, Y_7),
            Out_2 = (Out ++ Line_2),
            case (Y_7 < (40 - 1)) of
        true -> Out_3 = (Out_2 ++ "\n"),
            Out_4 = Out_3;
        _ -> Out_4 = Out_2
    end,
            Y_8 = (Y_7 + 1),
            Fun_5_loop(G_8, Out_4, Y_8);
        _ -> {G_8, Out, Y_7}
    end
end,
{G_8, Out_4, Y_8} = Fun_5(G_8, Out, Y_7),
        Out_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Grid = cleargrid(),
        ftree(Grid, float((80 div 2)), float((40 - 1)), 12, 0, 6),
        io:format("~ts~n", [render(Grid)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('width', 80),
    erlang:put('height', 40),
    erlang:put('depth', 6),
    erlang:put('angle', 12),
    erlang:put('length', 12),
    erlang:put('frac', 0.8),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
