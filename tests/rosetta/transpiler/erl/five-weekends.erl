#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, weekday/3, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

weekday(Y, M, D) ->
    try
        Yy = Y,
        Mm = M,
        case (Mm < 3) of
        true -> Mm_2 = (Mm + 12),
            Yy_2 = (Yy - 1),
            Mm_3 = Mm_2,
            Yy_3 = Yy_2;
        _ -> Mm_3 = Mm,
            Yy_3 = Yy
    end,
        K = (Yy_3 rem 100),
        J = mochi_to_int((Yy_3 / 100)),
        A = mochi_to_int(((13 * (Mm_3 + 1)) / 5)),
        B = mochi_to_int((K / 4)),
        C = mochi_to_int((J / 4)),
        ((((((D + A) + K) + B) + C) + (5 * J)) rem 7)
    catch {return, Ret} -> Ret end.

main() ->
    try
        Months31 = [1, 3, 5, 7, 8, 10, 12],
        Names = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        Count = 0,
        FirstY = 0,
        FirstM = 0,
        LastY = 0,
        LastM = 0,
        HaveNone = [],
        io:format("~ts~n", ["Months with five weekends:"]),
        Fun = fun Fun_loop(List, Count, FirstM, FirstY, HaveNone, LastM, LastY, Months31, Names) ->
    case List of
        [] -> {Count, FirstM, FirstY, HaveNone, LastM, LastY, Months31, Names};
        [Year|Year_rest] ->
            HasOne = false,
            Fun_2 = fun Fun_2_loop(List, Count, FirstM, FirstY, HasOne, HaveNone, LastM, LastY, Months31, Names, Year) ->
    case List of
        [] -> {Count, FirstM, FirstY, HasOne, HaveNone, LastM, LastY, Months31, Names, Year};
        [M_2|M_2_rest] ->
            case (weekday(Year, M_2, 1) == 6) of
        true -> io:format("~ts~n", [((("  " ++ lists:flatten(io_lib:format("~p", [Year]))) ++ " ") ++ lists:nth((M_2 - 1) + 1, Names))]),
            Count_2 = (Count + 1),
            HasOne_2 = true,
            LastY_2 = Year,
            LastM_2 = M_2,
            case (FirstY == 0) of
        true -> FirstY_2 = Year,
            FirstM_2 = M_2,
            FirstM_3 = FirstM_2,
            FirstY_3 = FirstY_2;
        _ -> FirstM_3 = FirstM,
            FirstY_3 = FirstY
    end,
            Count_3 = Count_2,
            FirstM_4 = FirstM_3,
            FirstY_4 = FirstY_3,
            HasOne_3 = HasOne_2,
            LastM_3 = LastM_2,
            LastY_3 = LastY_2;
        _ -> Count_3 = Count,
            FirstM_4 = FirstM,
            FirstY_4 = FirstY,
            HasOne_3 = HasOne,
            LastM_3 = LastM,
            LastY_3 = LastY
    end,
            Fun_2_loop(M_2_rest, Count_3, FirstM_4, FirstY_4, HasOne_3, HaveNone, LastM_3, LastY_3, Months31, Names, Year)
    end
end,
{Count_3, FirstM_4, FirstY_4, HasOne_3, HaveNone, LastM_3, LastY_3, Months31, Names, Year} = Fun_2(Months31, Count, FirstM, FirstY, HasOne, HaveNone, LastM, LastY, Months31, Names, Year),
            case mochi_not(HasOne_3) of
        true -> HaveNone_2 = lists:append(HaveNone, [Year]),
            HaveNone_3 = HaveNone_2;
        _ -> HaveNone_3 = HaveNone
    end,
            Fun_loop(Year_rest, Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names)
    end
end,
{Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names} = Fun(lists:seq(1900, (2101) - 1), Count, FirstM, FirstY, HaveNone, LastM, LastY, Months31, Names),
        io:format("~ts~n", [(lists:flatten(io_lib:format("~p", [Count_3])) ++ " total")]),
        io:format("~ts~n", [""]),
        io:format("~ts~n", ["First five dates of weekends:"]),
        Fun_3 = fun Fun_3_loop(List, Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names) ->
    case List of
        [] -> {Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names};
        [I|I_rest] ->
            Day = (1 + (7 * I)),
            io:format("~ts~n", [((((("  Friday, " ++ lists:nth((FirstM_4 - 1) + 1, Names)) ++ " ") ++ lists:flatten(io_lib:format("~p", [Day]))) ++ ", ") ++ lists:flatten(io_lib:format("~p", [FirstY_4])))]),
            Fun_3_loop(I_rest, Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names)
    end
end,
{Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names} = Fun_3(lists:seq(0, (5) - 1), Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names),
        io:format("~ts~n", ["Last five dates of weekends:"]),
        Fun_4 = fun Fun_4_loop(List, Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names) ->
    case List of
        [] -> {Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names};
        [I_2|I_2_rest] ->
            Day_2 = (1 + (7 * I_2)),
            io:format("~ts~n", [((((("  Friday, " ++ lists:nth((LastM_3 - 1) + 1, Names)) ++ " ") ++ lists:flatten(io_lib:format("~p", [Day_2]))) ++ ", ") ++ lists:flatten(io_lib:format("~p", [LastY_3])))]),
            Fun_4_loop(I_2_rest, Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names)
    end
end,
{Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names} = Fun_4(lists:seq(0, (5) - 1), Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names),
        io:format("~ts~n", [""]),
        io:format("~ts~n", ["Years with no months with five weekends:"]),
        Fun_5 = fun Fun_5_loop(List, Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names) ->
    case List of
        [] -> {Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names};
        [Y_2|Y_2_rest] ->
            io:format("~ts~n", [("  " ++ lists:flatten(io_lib:format("~p", [Y_2])))]),
            Fun_5_loop(Y_2_rest, Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names)
    end
end,
{Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names} = Fun_5(HaveNone_3, Count_3, FirstM_4, FirstY_4, HaveNone_3, LastM_3, LastY_3, Months31, Names),
        io:format("~ts~n", [(lists:flatten(io_lib:format("~p", [length(HaveNone_3)])) ++ " total")]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
