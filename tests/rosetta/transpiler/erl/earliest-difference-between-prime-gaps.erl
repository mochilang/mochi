#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, commatize/1, main/0]).

% Generated by Mochi transpiler v0.10.47 (eaacde736f) on 2025-07-28 11:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

commatize(N) ->
    try
        S = lists:flatten(io_lib:format("~p", [N])),
        I = (length(S) - 3),
        Fun = fun Fun_loop(I, N, S) ->
    case (I > 0) of
        true ->
            S_2 = ((string:substr(S, 0 + 1, (I - 0)) ++ ",") ++ string:substr(S, I + 1, (length(S) - I))),
            I_2 = (I - 3),
            Fun_loop(I_2, N, S_2);
        _ -> {I, N, S}
    end
end,
{I_2, N, S_2} = Fun(I, N, S),
        S_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Data = [#{"pm" => 10, "g1" => 4, "s1" => 7, "g2" => 6, "s2" => 23, "d" => 16}, #{"pm" => 100, "g1" => 14, "s1" => 113, "g2" => 16, "s2" => 1831, "d" => 1718}, #{"pm" => 1000, "g1" => 14, "s1" => 113, "g2" => 16, "s2" => 1831, "d" => 1718}, #{"pm" => 10000, "g1" => 36, "s1" => 9551, "g2" => 38, "s2" => 30593, "d" => 21042}, #{"pm" => 100000, "g1" => 70, "s1" => 173359, "g2" => 72, "s2" => 31397, "d" => 141962}, #{"pm" => 1000000, "g1" => 100, "s1" => 396733, "g2" => 102, "s2" => 1444309, "d" => 1047576}, #{"pm" => 10000000, "g1" => 148, "s1" => 2010733, "g2" => 150, "s2" => 13626257, "d" => 11615524}, #{"pm" => 100000000, "g1" => 198, "s1" => 46006769, "g2" => 200, "s2" => 378043979, "d" => 332037210}, #{"pm" => 1000000000, "g1" => 276, "s1" => 649580171, "g2" => 278, "s2" => 4260928601, "d" => 3611348430}, #{"pm" => 10000000000, "g1" => 332, "s1" => 5893180121, "g2" => 334, "s2" => 30827138509, "d" => 24933958388}, #{"pm" => 100000000000, "g1" => 386, "s1" => 35238645587, "g2" => 388, "s2" => 156798792223, "d" => 121560146636}],
        Fun_2 = fun Fun_2_loop(List, Data) ->
    case List of
        [] -> {Data};
        [Entry|Entry_rest] ->
            Pm = commatize(maps:get("pm", Entry, nil)),
            Line1 = (("Earliest difference > " ++ Pm) ++ " between adjacent prime gap starting primes:"),
            io:format("~ts~n", [Line1]),
            Line2 = (((((((((("Gap " ++ lists:flatten(io_lib:format("~p", [maps:get("g1", Entry, nil)]))) ++ " starts at ") ++ commatize(maps:get("s1", Entry, nil))) ++ ", gap ") ++ lists:flatten(io_lib:format("~p", [maps:get("g2", Entry, nil)]))) ++ " starts at ") ++ commatize(maps:get("s2", Entry, nil))) ++ ", difference is ") ++ commatize(maps:get("d", Entry, nil))) ++ "."),
            io:format("~ts~n", [Line2]),
            io:format("~ts~n", [""]),
            Fun_2_loop(Entry_rest, Data)
    end
end,
{Data} = Fun_2(Data, Data),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
