#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sinapprox/1, cosapprox/1, cis/1, add/2, cstr/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

sinapprox(X) ->
    try
        Term = X,
        Sum = X,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X) ->
    case (N =< 10) of
        true ->
            Denom = float(((2 * N) * ((2 * N) + 1))),
            Term_2 = (((-Term * X) * X) / Denom),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X);
        _ -> {N, Sum, Term, X}
    end
end,
{N_2, Sum_2, Term_2, X} = Fun(N, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

cosapprox(X_2) ->
    try
        Term_3 = 1,
        Sum_3 = 1,
        N_3 = 1,
        Fun_2 = fun Fun_2_loop(N_3, Sum_3, Term_3, X_2) ->
    case (N_3 =< 10) of
        true ->
            Denom_2 = float((((2 * N_3) - 1) * (2 * N_3))),
            Term_4 = (((-Term_3 * X_2) * X_2) / Denom_2),
            Sum_4 = (Sum_3 + Term_4),
            N_4 = (N_3 + 1),
            Fun_2_loop(N_4, Sum_4, Term_4, X_2);
        _ -> {N_3, Sum_3, Term_3, X_2}
    end
end,
{N_4, Sum_4, Term_4, X_2} = Fun_2(N_3, Sum_3, Term_3, X_2),
        Sum_4
    catch {return, Ret} -> Ret end.

cis(X_3) ->
    try
        #{"re" => cosapprox(X_3), "im" => sinapprox(X_3)}
    catch {return, Ret} -> Ret end.

add(A, B) ->
    try
        #{"re" => (maps:get("re", A, nil) + maps:get("re", B, nil)), "im" => (maps:get("im", A, nil) + maps:get("im", B, nil))}
    catch {return, Ret} -> Ret end.

cstr(A_2) ->
    try
        S = ("(" ++ lists:flatten(io_lib:format("~p", [maps:get("re", A_2, nil)]))),
        case (maps:get("im", A_2, nil) >= 0) of
        true -> S_2 = (((S ++ "+") ++ lists:flatten(io_lib:format("~p", [maps:get("im", A_2, nil)]))) ++ "i)"),
            S_4 = S_2;
        _ -> S_3 = ((S ++ lists:flatten(io_lib:format("~p", [maps:get("im", A_2, nil)]))) ++ "i)"),
            S_4 = S_3
    end,
        S_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Result = add(cis(3.141592653589793), #{"re" => 1, "im" => 0}),
        io:format("~ts~n", [cstr(Result)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
