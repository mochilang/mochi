#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, createline/2, evalx/2, intersection/2, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

createline(A, B) ->
    try
        Slope = ((maps:get("y", B, nil) - maps:get("y", A, nil)) / (maps:get("x", B, nil) - maps:get("x", A, nil))),
        Yint = (maps:get("y", A, nil) - (Slope * maps:get("x", A, nil))),
        #{"slope" => Slope, "yint" => Yint}
    catch {return, Ret} -> Ret end.

evalx(L, X) ->
    try
        ((maps:get("slope", L, nil) * X) + maps:get("yint", L, nil))
    catch {return, Ret} -> Ret end.

intersection(L1, L2) ->
    try
        case (maps:get("slope", L1, nil) == maps:get("slope", L2, nil)) of
        true -> throw({return, #{"x" => 0, "y" => 0}});
        _ -> ok
    end,
        X_2 = ((maps:get("yint", L2, nil) - maps:get("yint", L1, nil)) / (maps:get("slope", L1, nil) - maps:get("slope", L2, nil))),
        Y = evalx(L1, X_2),
        #{"x" => X_2, "y" => Y}
    catch {return, Ret} -> Ret end.

main() ->
    try
        L1_2 = createline(#{"x" => 4, "y" => 0}, #{"x" => 6, "y" => 10}),
        L2_2 = createline(#{"x" => 0, "y" => 3}, #{"x" => 10, "y" => 7}),
        P = intersection(L1_2, L2_2),
        io:format("~ts~n", [(((("{" ++ lists:flatten(io_lib:format("~p", [maps:get("x", P, nil)]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [maps:get("y", P, nil)]))) ++ "}")]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
