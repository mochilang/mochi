#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, halve/1, double/1, iseven/1, ethmulti/2]).

% Generated by Mochi transpiler v0.10.54 (6b449c7962) on 2025-08-02 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

halve(I) ->
    try
        (I div 2)
    catch {return, Ret} -> Ret end.

double(I_2) ->
    try
        (I_2 * 2)
    catch {return, Ret} -> Ret end.

iseven(I_3) ->
    try
        ((I_3 rem 2) == 0)
    catch {return, Ret} -> Ret end.

ethmulti(I_4, J) ->
    try
        R = 0,
        X = I_4,
        Y = J,
        Fun = fun Fun_loop(I_4, J, R, X, Y) ->
    case (X > 0) of
        true ->
            case mochi_not(iseven(X)) of
        true -> R_2 = (R + Y),
            R_3 = R_2;
        _ -> R_3 = R
    end,
            X_2 = halve(X),
            Y_2 = double(Y),
            Fun_loop(I_4, J, R_3, X_2, Y_2);
        _ -> {I_4, J, R, X, Y}
    end
end,
{I_4, J, R_3, X_2, Y_2} = Fun(I_4, J, R, X, Y),
        R_3
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    io:format("~ts~n", [("17 ethiopian 34 = " ++ lists:flatten(io_lib:format("~p", [ethmulti(17, 34)])))]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
