#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, merge/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (87d3efb875) on 2025-08-03 08:53 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

merge(Base, Update) ->
    try
        Result = #{},
        Fun = fun Fun_loop(List, Base, Result, Update) ->
    case List of
        [] -> {Base, Result, Update};
        [K|K_rest] ->
            Result_2 = maps:put(K, maps:get(K, Base, nil), Result),
            Fun_loop(K_rest, Base, Result_2, Update)
    end
end,
{Base, Result_2, Update} = Fun(maps:keys(Base), Base, Result, Update),
        Fun_2 = fun Fun_2_loop(List, Base, Result_2, Update) ->
    case List of
        [] -> {Base, Result_2, Update};
        [K_2|K_2_rest] ->
            Result_3 = maps:put(K_2, maps:get(K_2, Update, nil), Result_2),
            Fun_2_loop(K_2_rest, Base, Result_3, Update)
    end
end,
{Base, Result_3, Update} = Fun_2(maps:keys(Update), Base, Result_2, Update),
        Result_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        Base_2 = #{"name" => "Rocket Skates", "price" => 12.75, "color" => "yellow"},
        Update_2 = #{"price" => 15.25, "color" => "red", "year" => 1974},
        Result_4 = merge(Base_2, Update_2),
        io:format("~p~n", [Result_4]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
