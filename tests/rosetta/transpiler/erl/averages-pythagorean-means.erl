#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, powf/2, nthroot/2, main/0]).

% Generated by Mochi transpiler v0.10.40 (0480f61bb0) on 2025-07-25 16:59 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

powf(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

nthroot(X, N) ->
    try
        Low = 0,
        High = X,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(High, I_3, Low, N, X) ->
    case (I_3 < 60) of
        true ->
            Mid = ((Low + High) / 2),
            case (powf(Mid, N) > X) of
        true -> High_2 = Mid,
            High_3 = High_2,
            Low_3 = Low;
        _ -> Low_2 = Mid,
            High_3 = High,
            Low_3 = Low_2
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(High_3, I_4, Low_3, N, X);
        _ -> {High, I_3, Low, N, X}
    end
end,
{High_3, I_4, Low_3, N, X} = Fun_2(High, I_3, Low, N, X),
        Low_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        Sum = 0,
        SumRecip = 0,
        Prod = 1,
        N_2 = 1,
        Fun_3 = fun Fun_3_loop(N_2, Prod, Sum, SumRecip) ->
    case (N_2 =< 10) of
        true ->
            F = float(N_2),
            Sum_2 = (Sum + F),
            SumRecip_2 = (SumRecip + (1 / F)),
            Prod_2 = (Prod * F),
            N_3 = (N_2 + 1),
            Fun_3_loop(N_3, Prod_2, Sum_2, SumRecip_2);
        _ -> {N_2, Prod, Sum, SumRecip}
    end
end,
{N_3, Prod_2, Sum_2, SumRecip_2} = Fun_3(N_2, Prod, Sum, SumRecip),
        Count = 10,
        A = (Sum_2 / 10),
        G = nthroot(Prod_2, 10),
        H = (10 / SumRecip_2),
        io:format("~ts~n", [((((("A: " ++ lists:flatten(io_lib:format("~p", [A]))) ++ " G: ") ++ lists:flatten(io_lib:format("~p", [G]))) ++ " H: ") ++ lists:flatten(io_lib:format("~p", [H])))]),
        io:format("~ts~n", [("A >= G >= H: " ++ lists:flatten(io_lib:format("~p", [((A >= G) andalso (G >= H))])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
