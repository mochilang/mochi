#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isleap/1, dayofyear/3, ordinal/1, discordian/3, main/0]).

% Generated by Mochi transpiler v0.10.42 (34844ab2bf) on 2025-07-28 07:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

isleap(Y) ->
    try
        case ((Y rem 400) == 0) of
        true -> throw({return, true});
        _ -> ok
    end,
        case ((Y rem 100) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        ((Y rem 4) == 0)
    catch {return, Ret} -> Ret end.

dayofyear(Y_2, M, D) ->
    try
        Doy = (lists:nth((M - 1) + 1, erlang:get('daysBefore')) + D),
        case ((M > 2) andalso isleap(Y_2)) of
        true -> Doy_2 = (Doy + 1),
            Doy_3 = Doy_2;
        _ -> Doy_3 = Doy
    end,
        Doy_3
    catch {return, Ret} -> Ret end.

ordinal(N) ->
    try
        Suff = "th",
        Mod100 = (N rem 100),
        case ((Mod100 < 11) orelse (Mod100 > 13)) of
        true -> R = (N rem 10),
            case (R == 1) of
        true -> Suff_2 = "st",
            Suff_7 = Suff_2;
        _ -> case (R == 2) of
        true -> Suff_3 = "nd",
            Suff_6 = Suff_3;
        _ -> case (R == 3) of
        true -> Suff_4 = "rd",
            Suff_5 = Suff_4;
        _ -> Suff_5 = Suff
    end,
            Suff_6 = Suff_5
    end,
            Suff_7 = Suff_6
    end,
            R_2 = R,
            Suff_8 = Suff_7;
        _ -> R_2 = nil,
            Suff_8 = Suff
    end,
        (lists:flatten(io_lib:format("~p", [N])) ++ Suff_8)
    catch {return, Ret} -> Ret end.

discordian(Y_3, M_2, D_2) ->
    try
        case ((isleap(Y_3) andalso (M_2 == 2)) andalso (D_2 == 29)) of
        true -> throw({return, ("St. Tib's Day, YOLD " ++ lists:flatten(io_lib:format("~p", [(Y_3 + 1166)])))});
        _ -> ok
    end,
        Doy_4 = dayofyear(Y_3, M_2, D_2),
        case (isleap(Y_3) andalso (Doy_4 > 60)) of
        true -> Doy_5 = (Doy_4 - 1),
            Doy_6 = Doy_5;
        _ -> Doy_6 = Doy_4
    end,
        Idx = (Doy_6 - 1),
        Season = (Idx div 73),
        Day = (Idx rem 73),
        Res = ((((((lists:nth((Idx rem 5) + 1, erlang:get('dayNames')) ++ ", the ") ++ ordinal((Day + 1))) ++ " day of ") ++ lists:nth(Season + 1, erlang:get('seasons'))) ++ " in the YOLD ") ++ lists:flatten(io_lib:format("~p", [(Y_3 + 1166)]))),
        case (Day == 4) of
        true -> Res_2 = (((Res ++ ". Celebrate ") ++ lists:nth(0 + 1, lists:nth(Season + 1, erlang:get('holydays')))) ++ "!"),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
        case (Day == 49) of
        true -> Res_4 = (((Res_3 ++ ". Celebrate ") ++ lists:nth(1 + 1, lists:nth(Season + 1, erlang:get('holydays')))) ++ "!"),
            Res_5 = Res_4;
        _ -> Res_5 = Res_3
    end,
        Res_5
    catch {return, Ret} -> Ret end.

main() ->
    try
        Dates = [[2010, 7, 22], [2012, 2, 28], [2012, 2, 29], [2012, 3, 1], [2012, 12, 31], [2013, 1, 1], [2100, 12, 31], [2015, 10, 19], [2010, 1, 5], [2011, 5, 3], [2000, 3, 13]],
        I = 0,
        Fun = fun Fun_loop(Dates, I) ->
    case (I < length(Dates)) of
        true ->
            Dt = lists:nth(I + 1, Dates),
            io:format("~ts~n", [discordian(lists:nth(0 + 1, Dt), lists:nth(1 + 1, Dt), lists:nth(2 + 1, Dt))]),
            I_2 = (I + 1),
            Fun_loop(Dates, I_2);
        _ -> {Dates, I}
    end
end,
{Dates, I_2} = Fun(Dates, I),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('dayNames', ["Sweetmorn", "Boomtime", "Pungenday", "Prickle-Prickle", "Setting Orange"]),
    erlang:put('seasons', ["Chaos", "Discord", "Confusion", "Bureaucracy", "The Aftermath"]),
    erlang:put('holydays', [["Mungday", "Chaoflux"], ["Mojoday", "Discoflux"], ["Syaday", "Confuflux"], ["Zaraday", "Bureflux"], ["Maladay", "Afflux"]]),
    erlang:put('daysBefore', [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
