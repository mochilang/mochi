#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, xor_fn/2, rshift/2, ord/1, tohex/1, crc32table/0, crc32/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (938251b2dc) on 2025-07-28 04:23 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.

xor_fn(A, B) ->
    try
        Res = 0,
        Bit = 1,
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, Bit, Res, X, Y) ->
    case ((X > 0) orelse (Y > 0)) of
        true ->
            Abit = (X rem 2),
            Bbit = (Y rem 2),
            case (Abit /= Bbit) of
        true -> Res_2 = (Res + Bit),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            X_2 = (X div 2),
            Y_2 = (Y div 2),
            Bit_2 = (Bit * 2),
            Fun_loop(A, B, Bit_2, Res_3, X_2, Y_2);
        _ -> {A, B, Bit, Res, X, Y}
    end
end,
{A, B, Bit_2, Res_3, X_2, Y_2} = Fun(A, B, Bit, Res, X, Y),
        Res_3
    catch {return, Ret} -> Ret end.

rshift(X_3, N) ->
    try
        V = X_3,
        I = 0,
        Fun_2 = fun Fun_2_loop(I, N, V, X_3) ->
    case (I < N) of
        true ->
            V_2 = (V div 2),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N, V_2, X_3);
        _ -> {I, N, V, X_3}
    end
end,
{I_2, N, V_2, X_3} = Fun_2(I, N, V, X_3),
        V_2
    catch {return, Ret} -> Ret end.

ord(Ch) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Idx = mochi_index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch),
        case (Idx >= 0) of
        true -> throw({return, (65 + Idx)});
        _ -> ok
    end,
        Idx_2 = mochi_index_of("abcdefghijklmnopqrstuvwxyz", Ch),
        case (Idx_2 >= 0) of
        true -> throw({return, (97 + Idx_2)});
        _ -> ok
    end,
        case (Ch == " ") of
        true -> throw({return, 32});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

tohex(N_2) ->
    try
        Digits = "0123456789ABCDEF",
        case (N_2 == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        V_3 = N_2,
        Out = "",
        Fun_3 = fun Fun_3_loop(Digits, N_2, Out, V_3) ->
    case (V_3 > 0) of
        true ->
            D = (V_3 rem 16),
            Out_2 = (string:substr(Digits, D + 1, ((D + 1) - D)) ++ Out),
            V_4 = (V_3 div 16),
            Fun_3_loop(Digits, N_2, Out_2, V_4);
        _ -> {Digits, N_2, Out, V_3}
    end
end,
{Digits, N_2, Out_2, V_4} = Fun_3(Digits, N_2, Out, V_3),
        Out_2
    catch {return, Ret} -> Ret end.

crc32table() ->
    try
        Table = [],
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(I_3, Table) ->
    case (I_3 < 256) of
        true ->
            Word = I_3,
            J = 0,
            Fun_4 = fun Fun_4_loop(I_3, J, Table, Word) ->
    case (J < 8) of
        true ->
            case ((Word rem 2) == 1) of
        true -> Word_2 = xor_fn(rshift(Word, 1), 3988292384),
            Word_4 = Word_2;
        _ -> Word_3 = rshift(Word, 1),
            Word_4 = Word_3
    end,
            J_2 = (J + 1),
            Fun_4_loop(I_3, J_2, Table, Word_4);
        _ -> {I_3, J, Table, Word}
    end
end,
{I_3, J_2, Table, Word_4} = Fun_4(I_3, J, Table, Word),
            Table_2 = lists:append(Table, [Word_4]),
            I_4 = (I_3 + 1),
            Fun_5_loop(I_4, Table_2);
        _ -> {I_3, Table}
    end
end,
{I_4, Table_2} = Fun_5(I_3, Table),
        Table_2
    catch {return, Ret} -> Ret end.

crc32(S) ->
    try
        Crc = 4294967295,
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Crc, I_5, S) ->
    case (I_5 < length(S)) of
        true ->
            C = ord(string:substr(S, I_5 + 1, ((I_5 + 1) - I_5))),
            Idx_3 = xor_fn((Crc rem 256), C),
            Crc_2 = xor_fn(lists:nth(Idx_3 + 1, erlang:get('table')), rshift(Crc, 8)),
            I_6 = (I_5 + 1),
            Fun_6_loop(Crc_2, I_6, S);
        _ -> {Crc, I_5, S}
    end
end,
{Crc_2, I_6, S} = Fun_6(Crc, I_5, S),
        (4294967295 - Crc_2)
    catch {return, Ret} -> Ret end.

main() ->
    try
        S_2 = "The quick brown fox jumps over the lazy dog",
        Result = crc32("The quick brown fox jumps over the lazy dog"),
        Hex = tohex(Result),
        io:format("~ts~n", [Hex]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('table', crc32table()),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
