#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, fmt3/1, pad/2, smaseries/2, main/0]).

% Generated by Mochi transpiler v0.10.40 (5ec8b59a93) on 2025-07-25 12:29 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, Ret} -> Ret end.

fmt3(X) ->
    try
        Y = (float(mochi_to_int(((X * 1000) + 0.5))) / 1000),
        S_2 = lists:flatten(io_lib:format("~p", [Y])),
        Dot = indexof(S_2, "."),
        case (Dot == (0 - 1)) of
        true -> S_3 = (S_2 ++ ".000"),
            Decs_4 = nil,
            Fun_4 = nil,
            S_7 = S_3;
        _ -> Decs = ((length(S_2) - Dot) - 1),
            case (Decs > 3) of
        true -> S_4 = string:substr(S_2, 0 + 1, ((Dot + 4) - 0)),
            Decs_3 = Decs,
            Fun_3 = nil,
            S_6 = S_4;
        _ -> Fun_2 = fun Fun_2_loop(Decs, Dot, S_2, X, Y) ->
    case (Decs < 3) of
        true ->
            S_5 = (S_2 ++ "0"),
            Decs_2 = (Decs + 1),
            Fun_2_loop(Decs_2, Dot, S_5, X, Y);
        _ -> {Decs, Dot, S_2, X, Y}
    end
end,
{Decs_2, Dot, S_5, X, Y} = Fun_2(Decs, Dot, S_2, X, Y),
            Decs_3 = Decs_2,
            Fun_3 = Fun_2,
            S_6 = S_5
    end,
            Decs_4 = Decs_3,
            Fun_4 = Fun_3,
            S_7 = S_6
    end,
        S_7
    catch {return, Ret} -> Ret end.

pad(S_8, Width) ->
    try
        Out = S_8,
        Fun_5 = fun Fun_5_loop(Out, S_8, Width) ->
    case (length(Out) < Width) of
        true ->
            Out_2 = (" " ++ Out),
            Fun_5_loop(Out_2, S_8, Width);
        _ -> {Out, S_8, Width}
    end
end,
{Out_2, S_8, Width} = Fun_5(Out, S_8, Width),
        Out_2
    catch {return, Ret} -> Ret end.

smaseries(Xs, Period) ->
    try
        Res = [],
        Sum = 0,
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(I_3, Period, Res, Sum, Xs) ->
    case (I_3 < length(Xs)) of
        true ->
            Sum_2 = (Sum + lists:nth(I_3 + 1, Xs)),
            case (I_3 >= Period) of
        true -> Sum_3 = (Sum_2 - lists:nth((I_3 - Period) + 1, Xs)),
            Sum_4 = Sum_3;
        _ -> Sum_4 = Sum_2
    end,
            Denom = (I_3 + 1),
            case (Denom > Period) of
        true -> Denom_2 = Period,
            Denom_3 = Denom_2;
        _ -> Denom_3 = Denom
    end,
            Res_2 = lists:append(Res, [(Sum_4 / float(Denom_3))]),
            I_4 = (I_3 + 1),
            Fun_6_loop(I_4, Period, Res_2, Sum_4, Xs);
        _ -> {I_3, Period, Res, Sum, Xs}
    end
end,
{I_4, Period, Res_2, Sum_4, Xs} = Fun_6(I_3, Period, Res, Sum, Xs),
        Res_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Xs_2 = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1],
        Sma3 = smaseries(Xs_2, 3),
        Sma5 = smaseries(Xs_2, 5),
        io:format("~ts~n", ["x       sma3   sma5"]),
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(I_5, Sma3, Sma5, Xs_2) ->
    case (I_5 < length(Xs_2)) of
        true ->
            Line = ((((pad(fmt3(lists:nth(I_5 + 1, Xs_2)), 5) ++ "  ") ++ pad(fmt3(lists:nth(I_5 + 1, Sma3)), 5)) ++ "  ") ++ pad(fmt3(lists:nth(I_5 + 1, Sma5)), 5)),
            io:format("~ts~n", [Line]),
            I_6 = (I_5 + 1),
            Fun_7_loop(I_6, Sma3, Sma5, Xs_2);
        _ -> {I_5, Sma3, Sma5, Xs_2}
    end
end,
{I_6, Sma3, Sma5, Xs_2} = Fun_7(I_5, Sma3, Sma5, Xs_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
