#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gzipwriter/1, tarwriter/1, tarwriteheader/2, tarwrite/2, main/0]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

gzipwriter(W) ->
    try
        W
    catch {return, Ret} -> Ret end.

tarwriter(W_2) ->
    try
        W_2
    catch {return, Ret} -> Ret end.

tarwriteheader(W_3, Hdr) ->
    try
        nil
    catch {return, Ret} -> Ret end.

tarwrite(W_4, Data) ->
    try
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Filename = "TAPE.FILE",
        Data_2 = "",
        Outfile = "",
        GzipFlag = false,
        W_5 = nil,
        case ("" /= "") of
        true -> W_6 = nil,
            W_7 = W_6;
        _ -> W_7 = W_5
    end,
        case false of
        true -> W_8 = gzipwriter(W_7),
            W_9 = W_8;
        _ -> W_9 = W_7
    end,
        W_10 = tarwriter(W_9),
        Hdr_2 = #{"Name" => "TAPE.FILE", "Mode" => 432, "Size" => length(""), "ModTime" => mochi_now(), "Typeflag" => 0, "Uname" => "guest", "Gname" => "guest"},
        tarwriteheader(W_10, Hdr_2),
        tarwrite(W_10, ""),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
