#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sinapprox/1]).

% Generated by Mochi transpiler v0.10.40 (91581d0002) on 2025-07-25 20:17 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

sinapprox(X) ->
    try
        Term = X,
        Sum = X,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X) ->
    case (N =< 12) of
        true ->
            Denom = float(((2 * N) * ((2 * N) + 1))),
            Term_2 = (((-Term * X) * X) / Denom),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X);
        _ -> {N, Sum, Term, X}
    end
end,
{N_2, Sum_2, Term_2, X} = Fun(N, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('dt', 0.01),
    erlang:put('s', 0),
    erlang:put('t1', 0),
    erlang:put('k1', sinapprox(0)),
    erlang:put('i', 1),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('i') =< 200) of
        true ->
            T2 = (float(erlang:get('i')) * 0.01),
            K2 = sinapprox((T2 * 3.141592653589793)),
            erlang:put('s', (erlang:get('s') + (((erlang:get('k1') + K2) * 0.5) * (T2 - erlang:get('t1'))))),
            erlang:put('t1', T2),
            erlang:put('k1', K2),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    erlang:put('i2', 1),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('i2') =< 50) of
        true ->
            T2_2 = (2 + (float(erlang:get('i2')) * 0.01)),
            K2_2 = 0,
            erlang:put('s', (erlang:get('s') + (((erlang:get('k1') + 0) * 0.5) * (T2_2 - erlang:get('t1'))))),
            erlang:put('t1', T2_2),
            erlang:put('k1', 0),
            erlang:put('i2', (erlang:get('i2') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    io:format("~p~n", [erlang:get('s')]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
