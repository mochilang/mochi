#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.47 (eaacde736f) on 2025-07-28 11:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('width', 320),
    erlang:put('height', 240),
    erlang:put('img', []),
    erlang:put('y', 0),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('y') < 240) of
        true ->
            Row = [],
            X = 0,
            Fun = fun Fun_loop(Row, X) ->
    case (X < 320) of
        true ->
            Row_2 = lists:append(Row, ["green"]),
            X_2 = (X + 1),
            Fun_loop(Row_2, X_2);
        _ -> {Row, X}
    end
end,
{Row_2, X_2} = Fun(Row, X),
            erlang:put('img', lists:append(erlang:get('img'), [Row_2])),
            erlang:put('y', (erlang:get('y') + 1)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    Img = erlang:get('img'),
    Tmp = lists:nth(100 + 1, Img),
    Tmp_2 = lists:sublist(Tmp, 100) ++ ["red"] ++ lists:nthtail(100 + 1, Tmp),
    Img_2 = lists:sublist(Img, 100) ++ [Tmp_2] ++ lists:nthtail(100 + 1, Img),
    erlang:put('img', Img_2),
    io:format("~ts~n", [(("The color of the pixel at (  0,   0) is " ++ lists:nth(0 + 1, lists:nth(0 + 1, erlang:get('img')))) ++ ".")]),
    io:format("~ts~n", [(("The color of the pixel at (100, 100) is " ++ lists:nth(100 + 1, lists:nth(100 + 1, erlang:get('img')))) ++ ".")]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
