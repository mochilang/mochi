#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, nextprime/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

nextprime(Primes, Start) ->
    try
        N = Start,
        Fun_2 = fun Fun_2_loop(N, Primes, Start) ->
    case true of
        true ->
            try
                IsP = true,
                I = 0,
                Fun = fun Fun_loop(I, IsP, N, Primes, Start) ->
    case (I < length(Primes)) of
        true ->
            try
                P = (case erlang:is_map(Primes) of true -> maps:get(I, Primes, nil); _ -> lists:nth(I + 1, Primes) end),
                case ((P * P) > N) of
        true -> throw(break);
        _ -> ok
    end,
                case ((N rem P) == 0) of
        true -> IsP_2 = false,
            throw(break),
            IsP_3 = IsP_2;
        _ -> IsP_3 = IsP
    end,
                I_2 = (I + 1),
                Fun_loop(I_2, IsP_3, N, Primes, Start)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_loop(C0, C1, C2, C3, C4);
                break -> {I, IsP, N, Primes, Start}
            end;
        _ -> {I, IsP, N, Primes, Start}
    end
end,
{I_2, IsP_3, N, Primes, Start} = Fun(I, IsP, N, Primes, Start),
                case (IsP_3 /= nil) of
        true -> throw({return, N});
        _ -> ok
    end,
                N_2 = (N + 2),
                Fun_2_loop(N_2, Primes, Start)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                break -> {N, Primes, Start}
            end;
        _ -> {N, Primes, Start}
    end
end,
{N_2, Primes, Start} = Fun_2(N, Primes, Start),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Primes_2 = [2],
        Cand = 3,
        Fun_3 = fun Fun_3_loop(Cand, Primes_2) ->
    case (length(Primes_2) < 10000) of
        true ->
            Cand_2 = nextprime(Primes_2, Cand),
            Primes_3 = lists:append(Primes_2, [Cand_2]),
            Cand_3 = (Cand_2 + 2),
            Fun_3_loop(Cand_3, Primes_3);
        _ -> {Cand, Primes_2}
    end
end,
{Cand_3, Primes_3} = Fun_3(Cand, Primes_2),
        Line = "First twenty:",
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Cand_3, I_3, Line, Primes_3) ->
    case (I_3 < 20) of
        true ->
            Line_2 = ((Line ++ " ") ++ lists:flatten(io_lib:format("~p", [(case erlang:is_map(Primes_3) of true -> maps:get(I_3, Primes_3, nil); _ -> lists:nth(I_3 + 1, Primes_3) end)]))),
            I_4 = (I_3 + 1),
            Fun_4_loop(Cand_3, I_4, Line_2, Primes_3);
        _ -> {Cand_3, I_3, Line, Primes_3}
    end
end,
{Cand_3, I_4, Line_2, Primes_3} = Fun_4(Cand_3, I_3, Line, Primes_3),
        io:format("~ts~n", [Line_2]),
        Idx = 0,
        Fun_5 = fun Fun_5_loop(Cand_3, I_4, Idx, Line_2, Primes_3) ->
    case ((case erlang:is_map(Primes_3) of true -> maps:get(Idx, Primes_3, nil); _ -> lists:nth(Idx + 1, Primes_3) end) =< 100) of
        true ->
            Idx_2 = (Idx + 1),
            Fun_5_loop(Cand_3, I_4, Idx_2, Line_2, Primes_3);
        _ -> {Cand_3, I_4, Idx, Line_2, Primes_3}
    end
end,
{Cand_3, I_4, Idx_2, Line_2, Primes_3} = Fun_5(Cand_3, I_4, Idx, Line_2, Primes_3),
        Line_3 = ("Between 100 and 150: " ++ lists:flatten(io_lib:format("~p", [(case erlang:is_map(Primes_3) of true -> maps:get(Idx_2, Primes_3, nil); _ -> lists:nth(Idx_2 + 1, Primes_3) end)]))),
        Idx_3 = (Idx_2 + 1),
        Fun_6 = fun Fun_6_loop(Cand_3, I_4, Idx_3, Line_3, Primes_3) ->
    case ((case erlang:is_map(Primes_3) of true -> maps:get(Idx_3, Primes_3, nil); _ -> lists:nth(Idx_3 + 1, Primes_3) end) < 150) of
        true ->
            Line_4 = ((Line_3 ++ " ") ++ lists:flatten(io_lib:format("~p", [(case erlang:is_map(Primes_3) of true -> maps:get(Idx_3, Primes_3, nil); _ -> lists:nth(Idx_3 + 1, Primes_3) end)]))),
            Idx_4 = (Idx_3 + 1),
            Fun_6_loop(Cand_3, I_4, Idx_4, Line_4, Primes_3);
        _ -> {Cand_3, I_4, Idx_3, Line_3, Primes_3}
    end
end,
{Cand_3, I_4, Idx_4, Line_4, Primes_3} = Fun_6(Cand_3, I_4, Idx_3, Line_3, Primes_3),
        io:format("~ts~n", [Line_4]),
        Fun_7 = fun Fun_7_loop(Cand_3, I_4, Idx_4, Line_4, Primes_3) ->
    case ((case erlang:is_map(Primes_3) of true -> maps:get(Idx_4, Primes_3, nil); _ -> lists:nth(Idx_4 + 1, Primes_3) end) =< 7700) of
        true ->
            Idx_5 = (Idx_4 + 1),
            Fun_7_loop(Cand_3, I_4, Idx_5, Line_4, Primes_3);
        _ -> {Cand_3, I_4, Idx_4, Line_4, Primes_3}
    end
end,
{Cand_3, I_4, Idx_5, Line_4, Primes_3} = Fun_7(Cand_3, I_4, Idx_4, Line_4, Primes_3),
        Count = 0,
        Fun_8 = fun Fun_8_loop(Cand_3, Count, I_4, Idx_5, Line_4, Primes_3) ->
    case ((case erlang:is_map(Primes_3) of true -> maps:get(Idx_5, Primes_3, nil); _ -> lists:nth(Idx_5 + 1, Primes_3) end) < 8000) of
        true ->
            Count_2 = (Count + 1),
            Idx_6 = (Idx_5 + 1),
            Fun_8_loop(Cand_3, Count_2, I_4, Idx_6, Line_4, Primes_3);
        _ -> {Cand_3, Count, I_4, Idx_5, Line_4, Primes_3}
    end
end,
{Cand_3, Count_2, I_4, Idx_6, Line_4, Primes_3} = Fun_8(Cand_3, Count, I_4, Idx_5, Line_4, Primes_3),
        io:format("~ts~n", [("Number beween 7,700 and 8,000: " ++ lists:flatten(io_lib:format("~p", [Count_2])))]),
        io:format("~ts~n", [("10,000th prime: " ++ lists:flatten(io_lib:format("~p", [(case erlang:is_map(Primes_3) of true -> maps:get(9999, Primes_3, nil); _ -> lists:nth(9999 + 1, Primes_3) end)])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
