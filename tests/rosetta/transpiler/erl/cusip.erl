#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ord/1, iscusip/1]).

% Generated by Mochi transpiler v0.10.42 (68d913c5a0) on 2025-07-28 01:16 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.


mochi_parse_int_str(S) ->
    try list_to_integer(S) catch _:_ -> 0 end.

ord(Ch) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        case ((Ch >= "0") andalso (Ch =< "9")) of
        true -> throw({return, (mochi_parse_int_str(Ch) + 48)});
        _ -> ok
    end,
        Idx = mochi_index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch),
        case (Idx >= 0) of
        true -> throw({return, (65 + Idx)});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

iscusip(S) ->
    try
        case (length(S) /= 9) of
        true -> throw({return, false});
        _ -> ok
    end,
        Sum = 0,
        I = 0,
        Fun = fun Fun_loop(I, S, Sum) ->
    case (I < 8) of
        true ->
            C = string:substr(S, I + 1, ((I + 1) - I)),
            V = 0,
            case ((C >= "0") andalso (C =< "9")) of
        true -> V_2 = mochi_parse_int_str(C),
            V_11 = V_2;
        _ -> case ((C >= "A") andalso (C =< "Z")) of
        true -> V_3 = (ord(C) - 55),
            V_10 = V_3;
        _ -> case (C == "*") of
        true -> V_4 = 36,
            V_9 = V_4;
        _ -> case (C == "@") of
        true -> V_5 = 37,
            V_8 = V_5;
        _ -> case (C == "#") of
        true -> V_6 = 38,
            V_7 = V_6;
        _ -> throw({return, false}),
            V_7 = V
    end,
            V_8 = V_7
    end,
            V_9 = V_8
    end,
            V_10 = V_9
    end,
            V_11 = V_10
    end,
            case ((I rem 2) == 1) of
        true -> V_12 = (V_11 * 2),
            V_13 = V_12;
        _ -> V_13 = V_11
    end,
            Sum_2 = ((Sum + (V_13 div 10)) + (V_13 rem 10)),
            I_2 = (I + 1),
            Fun_loop(I_2, S, Sum_2);
        _ -> {I, S, Sum}
    end
end,
{I_2, S, Sum_2} = Fun(I, S, Sum),
        (mochi_parse_int_str(string:substr(S, 8 + 1, (9 - 8))) == ((10 - (Sum_2 rem 10)) rem 10))
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('candidates', ["037833100", "17275R102", "38259P508", "594918104", "68389X106", "68389X105"]),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [Cand|Cand_rest] ->
            B = "incorrect",
            case (iscusip(Cand) /= nil) of
        true -> B_2 = "correct",
            B_3 = B_2;
        _ -> B_3 = B
    end,
            io:format("~ts~n", [((Cand ++ " -> ") ++ B_3)]),
            Fun_2_loop(Cand_rest)
    end
end,
{} = Fun_2(erlang:get('candidates')),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
