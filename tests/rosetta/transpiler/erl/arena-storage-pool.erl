#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, poolPut/2, poolGet/1, clearPool/1, main/0]).

% Generated by Mochi transpiler v0.10.39 (6b9be63842) on 2025-07-24 22:46 +0700


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

poolPut(P, X) ->
    try
        lists:append(P, [X])
    catch {return, Ret} -> Ret end.

poolGet(P_2) ->
    try
        case (length(P_2) == 0) of
        true -> io:format("~ts~n", ["pool empty"]),
            throw({return, #{"pool" => P_2, "val" => 0}});
        _ -> ok
    end,
        Idx = (length(P_2) - 1),
        V = lists:nth(Idx + 1, P_2),
        P_3 = lists:sublist(P_2, 0 + 1, (Idx - 0)),
        #{"pool" => P_3, "val" => V}
    catch {return, Ret} -> Ret end.

clearPool(P_4) ->
    try
        []
    catch {return, Ret} -> Ret end.

main() ->
    try
        Pool = [],
        I = 1,
        J = 2,
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [(I + J)]))]),
        Pool_2 = poolPut(Pool, I),
        Pool_3 = poolPut(Pool_2, J),
        I_2 = 0,
        J_2 = 0,
        Res1 = poolGet(Pool_3),
        Pool_4 = maps:get("pool", Res1),
        I_3 = mochi_to_int(maps:get("val", Res1)),
        Res2 = poolGet(Pool_4),
        Pool_5 = maps:get("pool", Res2),
        J_3 = mochi_to_int(maps:get("val", Res2)),
        I_4 = 4,
        J_4 = 5,
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [(4 + 5)]))]),
        Pool_6 = poolPut(Pool_5, 4),
        Pool_7 = poolPut(Pool_6, 5),
        I_5 = 0,
        J_5 = 0,
        Pool_8 = clearPool(Pool_7),
        Res3 = poolGet(Pool_8),
        Pool_9 = maps:get("pool", Res3),
        I_6 = mochi_to_int(maps:get("val", Res3)),
        Res4 = poolGet(Pool_9),
        Pool_10 = maps:get("pool", Res4),
        J_6 = mochi_to_int(maps:get("val", Res4)),
        I_7 = 7,
        J_7 = 8,
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [(7 + 8)]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    main().
