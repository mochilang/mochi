#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, makeinf/0, makemax/0, isnan/1, validatenan/2, validatezero/2, validategt/3, validatene/3, validateeq/3, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

makeinf() ->
    try
        X = 1,
        I = 0,
        Fun = fun Fun_loop(I, X) ->
    case (I < 400) of
        true ->
            X_2 = mochi_safe_mul(X, 10),
            I_2 = (I + 1),
            Fun_loop(I_2, X_2);
        _ -> {I, X}
    end
end,
{I_2, X_2} = Fun(I, X),
        X_2
    catch {return, Ret} -> Ret end.

makemax() ->
    try
        X_3 = 1,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, X_3) ->
    case (I_3 < 308) of
        true ->
            X_4 = mochi_safe_mul(X_3, 10),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, X_4);
        _ -> {I_3, X_3}
    end
end,
{I_4, X_4} = Fun_2(I_3, X_3),
        X_4
    catch {return, Ret} -> Ret end.

isnan(X_5) ->
    try
        (X_5 /= X_5)
    catch {return, Ret} -> Ret end.

validatenan(N, Op) ->
    try
        case isnan(N) of
        true -> io:format("~ts~n", [(Op ++ " -> NaN")]);
        _ -> io:format("~ts ~ts ~ts ~p~n", ["!!! Expected NaN from", Op, " Found", N])
    end,
        nil
    catch {return, Ret} -> Ret end.

validatezero(N_2, Op_2) ->
    try
        case (N_2 == 0) of
        true -> io:format("~ts~n", [(Op_2 ++ " -> 0")]);
        _ -> io:format("~ts ~ts ~ts ~p~n", ["!!! Expected 0 from", Op_2, " Found", N_2])
    end,
        nil
    catch {return, Ret} -> Ret end.

validategt(A, B, Op_3) ->
    try
        case (A > B) of
        true -> io:format("~ts~n", [Op_3]);
        _ -> io:format("~ts ~ts ~ts~n", ["!!! Expected", Op_3, " Found not true."])
    end,
        nil
    catch {return, Ret} -> Ret end.

validatene(A_2, B_2, Op_4) ->
    try
        case (A_2 == B_2) of
        true -> io:format("~ts ~ts ~ts~n", ["!!! Expected", Op_4, " Found not true."]);
        _ -> io:format("~ts~n", [Op_4])
    end,
        nil
    catch {return, Ret} -> Ret end.

validateeq(A_3, B_3, Op_5) ->
    try
        case (A_3 == B_3) of
        true -> io:format("~ts~n", [Op_5]);
        _ -> io:format("~ts ~ts ~ts~n", ["!!! Expected", Op_5, " Found not true."])
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        NegZero = -0,
        PosInf = makeinf(),
        NegInf = -PosInf,
        Nan = mochi_safe_div(PosInf, PosInf),
        MaxVal = makemax(),
        io:format("~p ~p ~p ~p~n", [NegZero, PosInf, NegInf, Nan]),
        io:format("~p ~p ~p ~p~n", [NegZero, PosInf, NegInf, Nan]),
        io:format("~ts~n", [""]),
        validatenan((NegInf + PosInf), "-Inf + Inf"),
        validatenan(mochi_safe_mul(0, PosInf), "0 * Inf"),
        validatenan(mochi_safe_div(PosInf, PosInf), "Inf / Inf"),
        validatenan(mochi_safe_fmod(PosInf, 1), "Inf % 1"),
        validatenan((1 + Nan), "1 + NaN"),
        validatezero(mochi_safe_div(1, PosInf), "1 / Inf"),
        validategt(PosInf, MaxVal, "Inf > max value"),
        validategt(-MaxVal, NegInf, "-Inf < max neg value"),
        validatene(Nan, Nan, "NaN != NaN"),
        validateeq(NegZero, 0, "-0 == 0"),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
