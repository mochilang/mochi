#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, egcd/2, modinv/2, crt/2]).

% Generated by Mochi transpiler v0.10.41 (cccd67ba44) on 2025-07-26 23:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

egcd(A, B) ->
    try
        case (A == 0) of
        true -> throw({return, [B, 0, 1]});
        _ -> ok
    end,
        Res = egcd((B rem A), A),
        G = lists:nth(0 + 1, Res),
        X1 = lists:nth(1 + 1, Res),
        Y1 = lists:nth(2 + 1, Res),
        [G, (Y1 - ((B div A) * X1)), X1]
    catch {return, Ret} -> Ret end.

modinv(A_2, M) ->
    try
        R = egcd(A_2, M),
        case (lists:nth(0 + 1, R) /= 1) of
        true -> throw({return, 0});
        _ -> ok
    end,
        X = lists:nth(1 + 1, R),
        case (X < 0) of
        true -> throw({return, (X + M)});
        _ -> ok
    end,
        X
    catch {return, Ret} -> Ret end.

crt(A_3, N) ->
    try
        Prod = 1,
        I = 0,
        Fun = fun Fun_loop(A_3, I, N, Prod) ->
    case (I < length(N)) of
        true ->
            Prod_2 = (Prod * lists:nth(I + 1, N)),
            I_2 = (I + 1),
            Fun_loop(A_3, I_2, N, Prod_2);
        _ -> {A_3, I, N, Prod}
    end
end,
{A_3, I_2, N, Prod_2} = Fun(A_3, I, N, Prod),
        X_2 = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(A_3, I_3, N, Prod_2, X_2) ->
    case (I_3 < length(N)) of
        true ->
            Ni = lists:nth(I_3 + 1, N),
            Ai = lists:nth(I_3 + 1, A_3),
            P = (Prod_2 div Ni),
            Inv = modinv((P rem Ni), Ni),
            X_3 = (X_2 + ((Ai * Inv) * P)),
            I_4 = (I_3 + 1),
            Fun_2_loop(A_3, I_4, N, Prod_2, X_3);
        _ -> {A_3, I_3, N, Prod_2, X_2}
    end
end,
{A_3, I_4, N, Prod_2, X_3} = Fun_2(A_3, I_3, N, Prod_2, X_2),
        (X_3 rem Prod_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('n', [3, 5, 7]),
    erlang:put('a', [2, 3, 2]),
    erlang:put('res', crt(erlang:get('a'), erlang:get('n'))),
    io:format("~ts~n", [(lists:flatten(io_lib:format("~p", [erlang:get('res')])) ++ " <nil>")]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
