#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, randint/2, randchar/0, randomstring/1, fitness/1, mutate/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

randint(S, N) ->
    try
        Next = (((S * 1664525) + 1013904223) rem 2147483647),
        [Next, (Next rem N)]
    catch {return, Ret} -> Ret end.

randchar() ->
    try
        R = randint(erlang:get('seed'), length("ABCDEFGHIJKLMNOPQRSTUVWXYZ ")),
        erlang:put('seed', (case erlang:is_map(R) of true -> maps:get(0, R, nil); _ -> lists:nth(0 + 1, R) end)),
        Idx = mochi_to_int((case erlang:is_map(R) of true -> maps:get(1, R, nil); _ -> lists:nth(1 + 1, R) end)),
        string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ ", Idx + 1, ((Idx + 1) - Idx))
    catch {return, Ret} -> Ret end.

randomstring(N_2) ->
    try
        S_2 = "",
        I = 0,
        Fun = fun Fun_loop(I, N_2, S_2) ->
    case (I < N_2) of
        true ->
            S_3 = (S_2 ++ randchar()),
            I_2 = (I + 1),
            Fun_loop(I_2, N_2, S_3);
        _ -> {I, N_2, S_2}
    end
end,
{I_2, N_2, S_3} = Fun(I, N_2, S_2),
        S_3
    catch {return, Ret} -> Ret end.

fitness(S_4) ->
    try
        H = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(H, I_3, S_4) ->
    case (I_3 < length("METHINKS IT IS LIKE A WEASEL")) of
        true ->
            case (string:substr(S_4, I_3 + 1, ((I_3 + 1) - I_3)) /= string:substr("METHINKS IT IS LIKE A WEASEL", I_3 + 1, ((I_3 + 1) - I_3))) of
        true -> H_2 = (H + 1),
            H_3 = H_2;
        _ -> H_3 = H
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(H_3, I_4, S_4);
        _ -> {H, I_3, S_4}
    end
end,
{H_3, I_4, S_4} = Fun_2(H, I_3, S_4),
        H_3
    catch {return, Ret} -> Ret end.

mutate(P) ->
    try
        M = "",
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, M, P) ->
    case (I_5 < length(P)) of
        true ->
            R_2 = randint(erlang:get('seed'), 20),
            erlang:put('seed', (case erlang:is_map(R_2) of true -> maps:get(0, R_2, nil); _ -> lists:nth(0 + 1, R_2) end)),
            case ((case erlang:is_map(R_2) of true -> maps:get(1, R_2, nil); _ -> lists:nth(1 + 1, R_2) end) == 0) of
        true -> M_2 = (M ++ randchar()),
            M_4 = M_2;
        _ -> M_3 = (M ++ string:substr(P, I_5 + 1, ((I_5 + 1) - I_5))),
            M_4 = M_3
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, M_4, P);
        _ -> {I_5, M, P}
    end
end,
{I_6, M_4, P} = Fun_3(I_5, M, P),
        M_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Parent = randomstring(length("METHINKS IT IS LIKE A WEASEL")),
        io:format("~ts~n", [Parent]),
        Best = fitness(Parent),
        Done = false,
        Fun_5 = fun Fun_5_loop(Best, Done, Parent) ->
    case mochi_not(Done) of
        true ->
            try
                I_7 = 0,
                Fun_4 = fun Fun_4_loop(Best, Done, I_7, Parent) ->
    case (I_7 < 20) of
        true ->
            try
                Child = mutate(Parent),
                F = fitness(Child),
                case (F < Best) of
        true -> Best_2 = F,
            Parent_2 = Child,
            io:format("~ts~n", [Parent_2]),
            case (Best_2 == 0) of
        true -> Done_2 = true,
            throw(break),
            Done_3 = Done_2;
        _ -> Done_3 = Done
    end,
            Best_3 = Best_2,
            Done_4 = Done_3,
            Parent_3 = Parent_2;
        _ -> Best_3 = Best,
            Done_4 = Done,
            Parent_3 = Parent
    end,
                I_8 = (I_7 + 1),
                Fun_4_loop(Best_3, Done_4, I_8, Parent_3)
            catch
                {continue, C0, C1, C2, C3} -> Fun_4_loop(C0, C1, C2, C3);
                break -> {Best, Done, I_7, Parent}
            end;
        _ -> {Best, Done, I_7, Parent}
    end
end,
{Best_3, Done_4, I_8, Parent_3} = Fun_4(Best, Done, I_7, Parent),
                Fun_5_loop(Best_3, Done_4, Parent_3)
            catch
                {continue, C0, C1, C2} -> Fun_5_loop(C0, C1, C2);
                break -> {Best, Done, Parent}
            end;
        _ -> {Best, Done, Parent}
    end
end,
{Best_3, Done_4, Parent_3} = Fun_5(Best, Done, Parent),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('target', "METHINKS IT IS LIKE A WEASEL"),
    erlang:put('chars', "ABCDEFGHIJKLMNOPQRSTUVWXYZ "),
    erlang:put('seed', 1),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
