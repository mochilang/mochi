#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, log10floor/1, commatize/1, showdistribution/1, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

log10floor(N) ->
    try
        P = 0,
        V = N,
        Fun = fun Fun_loop(N, P, V) ->
    case (V >= 10) of
        true ->
            V_2 = mochi_to_int((V / 10)),
            P_2 = (P + 1),
            Fun_loop(N, P_2, V_2);
        _ -> {N, P, V}
    end
end,
{N, P_2, V_2} = Fun(N, P, V),
        P_2
    catch {return, Ret} -> Ret end.

commatize(N_2) ->
    try
        S = lists:flatten(io_lib:format("~p", [N_2])),
        Res = "",
        I = 0,
        Fun_2 = fun Fun_2_loop(I, N_2, Res, S) ->
    case (I < length(S)) of
        true ->
            case ((I > 0) andalso (((length(S) - I) rem 3) == 0)) of
        true -> Res_2 = (Res ++ ","),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Res_4 = (Res_3 ++ string:substr(S, I + 1, ((I + 1) - I))),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N_2, Res_4, S);
        _ -> {I, N_2, Res, S}
    end
end,
{I_2, N_2, Res_4, S} = Fun_2(I, N_2, Res, S),
        Res_4
    catch {return, Ret} -> Ret end.

showdistribution(Sizes) ->
    try
        Bins = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Bins, I_3, Sizes) ->
    case (I_3 < 12) of
        true ->
            Bins_2 = lists:append(Bins, [0]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Bins_2, I_4, Sizes);
        _ -> {Bins, I_3, Sizes}
    end
end,
{Bins_2, I_4, Sizes} = Fun_3(Bins, I_3, Sizes),
        Total = 0,
        Fun_4 = fun Fun_4_loop(List, Bins_2, I_4, Sizes, Total) ->
    case List of
        [] -> {Bins_2, I_4, Sizes, Total};
        [Sz|Sz_rest] ->
            Total_2 = (Total + Sz),
            Idx = 0,
            case (Sz > 0) of
        true -> Idx_2 = (log10floor(Sz) + 1),
            Idx_3 = Idx_2;
        _ -> Idx_3 = Idx
    end,
            Bins_3 = lists:sublist(Bins_2, Idx_3) ++ [(lists:nth(Idx_3 + 1, Bins_2) + 1)] ++ lists:nthtail(Idx_3 + 1, Bins_2),
            Fun_4_loop(Sz_rest, Bins_3, I_4, Sizes, Total_2)
    end
end,
{Bins_3, I_4, Sizes, Total_2} = Fun_4(Sizes, Bins_2, I_4, Sizes, Total),
        io:format("~ts~n", ["File size distribution:\n"]),
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Bins_3, I_5, Sizes, Total_2) ->
    case (I_5 < length(Bins_3)) of
        true ->
            Prefix = "  ",
            case (I_5 > 0) of
        true -> Prefix_2 = "+ ",
            Prefix_3 = Prefix_2;
        _ -> Prefix_3 = Prefix
    end,
            io:format("~ts~n", [((((Prefix_3 ++ "Files less than 10 ^ ") ++ lists:flatten(io_lib:format("~p", [I_5]))) ++ " bytes : ") ++ lists:flatten(io_lib:format("~p", [lists:nth(I_5 + 1, Bins_3)])))]),
            I_6 = (I_5 + 1),
            Fun_5_loop(Bins_3, I_6, Sizes, Total_2);
        _ -> {Bins_3, I_5, Sizes, Total_2}
    end
end,
{Bins_3, I_6, Sizes, Total_2} = Fun_5(Bins_3, I_5, Sizes, Total_2),
        io:format("~ts~n", ["                                  -----"]),
        io:format("~ts~n", [("= Total number of files         : " ++ lists:flatten(io_lib:format("~p", [length(Sizes)])))]),
        io:format("~ts~n", [(("  Total size of files           : " ++ commatize(Total_2)) ++ " bytes")]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Sizes_2 = [0, 1, 9, 10, 99, 100, 1234, 50000, 730000, 8200000],
        showdistribution(Sizes_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
