#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs/1, maxf/2, isClose/2, sqrtApprox/1, main/0]).

% Generated by Mochi transpiler v0.10.39 (6b9be63842) on 2025-07-24 22:46 +0700

abs(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

maxf(A, B) ->
    try
        (case (A > B) of
    true -> A;
    _ -> B
end)
    catch {return, Ret} -> Ret end.

isClose(A_2, B_2) ->
    try
        RelTol = 1.0e-09,
        T = erlang:abs((A_2 - B_2)),
        U = (1.0e-09 * maxf(erlang:abs(A_2), erlang:abs(B_2))),
        (T =< U)
    catch {return, Ret} -> Ret end.

sqrtApprox(X_2) ->
    try
        Guess = X_2,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 10) of
        true ->
            Guess_2 = ((Guess + (X_2 / Guess)) / 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Root2 = sqrtApprox(2),
        Pairs = [[1.0000000000000002e+14, 1.0000000000000002e+14], [100.01, 100.011], [(1.0000000000000002e+13 / 10000), 1.0000000000000001e+09], [0.001, 0.0010000001], [1.01e-22, 0], [(Root2 * Root2), 2], [(-Root2 * Root2), -2], [1.0e+17, 1.0e+17], [3.141592653589793, 3.141592653589793]],
        Fun_2 = fun Fun_2_loop(List, Pairs, Root2) ->
    case List of
        [] -> {Pairs, Root2};
        [Pair|Fun_2_loop_rest] ->
            A_3 = lists:nth(0 + 1, Pair),
            B_3 = lists:nth(1 + 1, Pair),
            S = (case isClose(A_3, B_3) of
    true -> "≈";
    _ -> "≉"
end),
            io:format("~ts~n", [((((lists:flatten(io_lib:format("~p", [A_3])) ++ " ") ++ S) ++ " ") ++ lists:flatten(io_lib:format("~p", [B_3])))]),
            Fun_2_loop(Fun_2_loop_rest, Pairs, Root2)
    end
end,
{Pairs, Root2} = Fun_2(Pairs, Pairs, Root2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    main().
