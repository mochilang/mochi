#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs/1, maxf/2, isclose/2, sqrtapprox/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (87d3efb875) on 2025-08-03 08:53 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

abs(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

maxf(A, B) ->
    try
        (case (A > B) of
    true -> A;
    _ -> B
end)
    catch {return, Ret} -> Ret end.

isclose(A_2, B_2) ->
    try
        RelTol = 1.0e-09,
        T = erlang:abs((A_2 - B_2)),
        U = mochi_safe_mul(1.0e-09, maxf(erlang:abs(A_2), erlang:abs(B_2))),
        (T =< U)
    catch {return, Ret} -> Ret end.

sqrtapprox(X_2) ->
    try
        Guess = X_2,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Root2 = sqrtapprox(2),
        Pairs = [[1.0000000000000002e+14, 1.0000000000000002e+14], [100.01, 100.011], [mochi_safe_div(1.0000000000000002e+13, 10000), 1.0000000000000001e+09], [0.001, 0.0010000001], [1.01e-22, 0], [mochi_safe_mul(Root2, Root2), 2], [mochi_safe_mul(-Root2, Root2), -2], [1.0e+17, 1.0e+17], [3.141592653589793, 3.141592653589793]],
        Fun_2 = fun Fun_2_loop(List, Pairs, Root2) ->
    case List of
        [] -> {Pairs, Root2};
        [Pair|Pair_rest] ->
            A_3 = (case erlang:is_map(Pair) of true -> maps:get(0, Pair, nil); _ -> lists:nth(0 + 1, Pair) end),
            B_3 = (case erlang:is_map(Pair) of true -> maps:get(1, Pair, nil); _ -> lists:nth(1 + 1, Pair) end),
            S = (case isclose(A_3, B_3) of
    true -> "≈";
    _ -> "≉"
end),
            io:format("~ts~n", [((((lists:flatten(io_lib:format("~p", [A_3])) ++ " ") ++ S) ++ " ") ++ lists:flatten(io_lib:format("~p", [B_3])))]),
            Fun_2_loop(Pair_rest, Pairs, Root2)
    end
end,
{Pairs, Root2} = Fun_2(Pairs, Pairs, Root2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
