#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, xor_fn/2, ha/2, fa/3, add4/8, b2i/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (0f7fd10226) on 2025-08-02 20:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

xor_fn(A, B) ->
    try
        ((A andalso mochi_not(B)) orelse (mochi_not(A) andalso B))
    catch {return, Ret} -> Ret end.

ha(A_2, B_2) ->
    try
        #{"s" => xor_fn(A_2, B_2), "c" => (A_2 andalso B_2)}
    catch {return, Ret} -> Ret end.

fa(A_3, B_3, C0) ->
    try
        R1 = ha(A_3, C0),
        R2 = ha(maps:get("s", R1, nil), B_3),
        #{"s" => maps:get("s", R2, nil), "c" => (maps:get("c", R1, nil) orelse maps:get("c", R2, nil))}
    catch {return, Ret} -> Ret end.

add4(A3, A2, A1, A0, B3, B2, B1, B0) ->
    try
        R0 = fa(A0, B0, false),
        R1_2 = fa(A1, B1, maps:get("c", R0, nil)),
        R2_2 = fa(A2, B2, maps:get("c", R1_2, nil)),
        R3 = fa(A3, B3, maps:get("c", R2_2, nil)),
        #{"v" => maps:get("c", R3, nil), "s3" => maps:get("s", R3, nil), "s2" => maps:get("s", R2_2, nil), "s1" => maps:get("s", R1_2, nil), "s0" => maps:get("s", R0, nil)}
    catch {return, Ret} -> Ret end.

b2i(B_4) ->
    try
        (case B_4 of
    true -> 1;
    _ -> 0
end)
    catch {return, Ret} -> Ret end.

main() ->
    try
        R = add4(true, false, true, false, true, false, false, true),
        io:format("~ts~n", [((((((((lists:flatten(io_lib:format("~p", [b2i(maps:get("v", R, nil))])) ++ " ") ++ lists:flatten(io_lib:format("~p", [b2i(maps:get("s3", R, nil))]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [b2i(maps:get("s2", R, nil))]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [b2i(maps:get("s1", R, nil))]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [b2i(maps:get("s0", R, nil))])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
