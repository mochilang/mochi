#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, poly/1, aks/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (30919ba4a0) on 2025-07-25 22:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

poly(P) ->
    try
        S = "",
        Coef = 1,
        I = P,
        case (Coef /= 1) of
        true -> S_2 = (S ++ lists:flatten(io_lib:format("~p", [Coef]))),
            S_3 = S_2;
        _ -> S_3 = S
    end,
        Fun = fun Fun_loop(Coef, I, P, S_3) ->
    case (I > 0) of
        true ->
            S_4 = (S_3 ++ "x"),
            case (I /= 1) of
        true -> S_5 = ((S_4 ++ "^") ++ lists:flatten(io_lib:format("~p", [I]))),
            S_6 = S_5;
        _ -> S_6 = S_4
    end,
            Coef_2 = mochi_to_int(((Coef * I) div ((P - I) + 1))),
            D = Coef_2,
            case (((P - (I - 1)) rem 2) == 1) of
        true -> D_2 = -D,
            D_3 = D_2;
        _ -> D_3 = D
    end,
            case (D_3 < 0) of
        true -> S_7 = ((S_6 ++ " - ") ++ lists:flatten(io_lib:format("~p", [-D_3]))),
            S_9 = S_7;
        _ -> S_8 = ((S_6 ++ " + ") ++ lists:flatten(io_lib:format("~p", [D_3]))),
            S_9 = S_8
    end,
            I_2 = (I - 1),
            Fun_loop(Coef_2, I_2, P, S_9);
        _ -> {Coef, I, P, S_3}
    end
end,
{Coef_2, I_2, P, S_9} = Fun(Coef, I, P, S_3),
        case (S_9 == "") of
        true -> S_10 = "1",
            S_11 = S_10;
        _ -> S_11 = S_9
    end,
        S_11
    catch {return, Ret} -> Ret end.

aks(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        C = N,
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(C, I_3, N) ->
    case (I_3 < N) of
        true ->
            case ((C rem N) /= 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            C_2 = mochi_to_int(((C * (N - I_3)) div (I_3 + 1))),
            I_4 = (I_3 + 1),
            Fun_2_loop(C_2, I_4, N);
        _ -> {C, I_3, N}
    end
end,
{C_2, I_4, N} = Fun_2(C, I_3, N),
        true
    catch {return, Ret} -> Ret end.

main() ->
    try
        P_2 = 0,
        Fun_3 = fun Fun_3_loop(P_2) ->
    case (P_2 =< 7) of
        true ->
            io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [P_2])) ++ ":  ") ++ poly(P_2))]),
            P_3 = (P_2 + 1),
            Fun_3_loop(P_3);
        _ -> {P_2}
    end
end,
{P_3} = Fun_3(P_2),
        First = true,
        P_4 = 2,
        Line = "",
        Fun_4 = fun Fun_4_loop(First, Line, P_4) ->
    case (P_4 < 50) of
        true ->
            case aks(P_4) of
        true -> case First of
        true -> Line_2 = (Line ++ lists:flatten(io_lib:format("~p", [P_4]))),
            First_2 = false,
            First_3 = First_2,
            Line_4 = Line_2;
        _ -> Line_3 = ((Line ++ " ") ++ lists:flatten(io_lib:format("~p", [P_4]))),
            First_3 = First,
            Line_4 = Line_3
    end,
            First_4 = First_3,
            Line_5 = Line_4;
        _ -> First_4 = First,
            Line_5 = Line
    end,
            P_5 = (P_4 + 1),
            Fun_4_loop(First_4, Line_5, P_5);
        _ -> {First, Line, P_4}
    end
end,
{First_4, Line_5, P_5} = Fun_4(First, Line, P_4),
        io:format("~ts~n", [Line_5]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
