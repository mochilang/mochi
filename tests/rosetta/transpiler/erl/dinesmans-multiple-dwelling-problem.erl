#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, absint/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (34844ab2bf) on 2025-07-28 07:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

absint(N) ->
    try
        (case (N < 0) of
    true -> -N;
    _ -> N
end)
    catch {return, Ret} -> Ret end.

main() ->
    try
        B = 1,
        Fun_9 = fun Fun_9_loop(B) ->
    case (B =< 5) of
        true ->
            case (B /= 5) of
        true -> C = 1,
            Fun_7 = fun Fun_7_loop(B, C) ->
    case (C =< 5) of
        true ->
            case ((C /= 1) andalso (C /= B)) of
        true -> F = 1,
            Fun_5 = fun Fun_5_loop(B, C, F) ->
    case (F =< 5) of
        true ->
            case (((((F /= 1) andalso (F /= 5)) andalso (F /= B)) andalso (F /= C)) andalso (absint((F - C)) > 1)) of
        true -> M = 1,
            Fun_3 = fun Fun_3_loop(B, C, F, M) ->
    case (M =< 5) of
        true ->
            case ((((M /= B) andalso (M /= C)) andalso (M /= F)) andalso (M > C)) of
        true -> S = 1,
            Fun = fun Fun_loop(B, C, F, M, S) ->
    case (S =< 5) of
        true ->
            case (((((S /= B) andalso (S /= C)) andalso (S /= F)) andalso (S /= M)) andalso (absint((S - F)) > 1)) of
        true -> io:format("~ts~n", [(((((((((("Baker in " ++ lists:flatten(io_lib:format("~p", [B]))) ++ ", Cooper in ") ++ lists:flatten(io_lib:format("~p", [C]))) ++ ", Fletcher in ") ++ lists:flatten(io_lib:format("~p", [F]))) ++ ", Miller in ") ++ lists:flatten(io_lib:format("~p", [M]))) ++ ", Smith in ") ++ lists:flatten(io_lib:format("~p", [S]))) ++ ".")]),
            throw({return, nil});
        _ -> ok
    end,
            S_2 = (S + 1),
            Fun_loop(B, C, F, M, S_2);
        _ -> {B, C, F, M, S}
    end
end,
{B, C, F, M, S_2} = Fun(B, C, F, M, S),
            Fun_2 = Fun,
            S_3 = S_2;
        _ -> Fun_2 = nil,
            S_3 = nil
    end,
            M_2 = (M + 1),
            Fun_3_loop(B, C, F, M_2);
        _ -> {B, C, F, M}
    end
end,
{B, C, F, M_2} = Fun_3(B, C, F, M),
            Fun_4 = Fun_3,
            M_3 = M_2;
        _ -> Fun_4 = nil,
            M_3 = nil
    end,
            F_2 = (F + 1),
            Fun_5_loop(B, C, F_2);
        _ -> {B, C, F}
    end
end,
{B, C, F_2} = Fun_5(B, C, F),
            F_3 = F_2,
            Fun_6 = Fun_5;
        _ -> F_3 = nil,
            Fun_6 = nil
    end,
            C_2 = (C + 1),
            Fun_7_loop(B, C_2);
        _ -> {B, C}
    end
end,
{B, C_2} = Fun_7(B, C),
            C_3 = C_2,
            Fun_8 = Fun_7;
        _ -> C_3 = nil,
            Fun_8 = nil
    end,
            B_2 = (B + 1),
            Fun_9_loop(B_2);
        _ -> {B}
    end
end,
{B_2} = Fun_9(B),
        io:format("~ts~n", ["No solution found."]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
