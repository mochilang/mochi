#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isprime/1, firstprimefactor/1, indexof/2, padleft/2, formatfloat/2, main/0]).

% Generated by Mochi transpiler v0.10.40 (4e9ba3b749) on 2025-07-26 05:29 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.

isprime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N rem 2) == 0) of
        true -> throw({return, (N == 2)});
        _ -> ok
    end,
        case ((N rem 3) == 0) of
        true -> throw({return, (N == 3)});
        _ -> ok
    end,
        D = 5,
        Fun = fun Fun_loop(D, N) ->
    case ((D * D) =< N) of
        true ->
            case ((N rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            case ((N rem D_2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_3 = (D_2 + 4),
            Fun_loop(D_3, N);
        _ -> {D, N}
    end
end,
{D_3, N} = Fun(D, N),
        true
    catch {return, Ret} -> Ret end.

firstprimefactor(N_2) ->
    try
        case (N_2 == 1) of
        true -> throw({return, 1});
        _ -> ok
    end,
        case ((N_2 rem 3) == 0) of
        true -> throw({return, 3});
        _ -> ok
    end,
        case ((N_2 rem 5) == 0) of
        true -> throw({return, 5});
        _ -> ok
    end,
        Inc = [4, 2, 4, 2, 4, 6, 2, 6],
        K = 7,
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Inc, K, N_2) ->
    case ((K * K) =< N_2) of
        true ->
            case ((N_2 rem K) == 0) of
        true -> throw({return, K});
        _ -> ok
    end,
            K_2 = (K + lists:nth(I + 1, Inc)),
            I_2 = ((I + 1) rem length(Inc)),
            Fun_2_loop(I_2, Inc, K_2, N_2);
        _ -> {I, Inc, K, N_2}
    end
end,
{I_2, Inc, K_2, N_2} = Fun_2(I, Inc, K, N_2),
        N_2
    catch {return, Ret} -> Ret end.

indexof(S, Ch) ->
    try
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Ch, I_3, S) ->
    case (I_3 < length(S)) of
        true ->
            case (string:substr(S, I_3 + 1, ((I_3 + 1) - I_3)) == Ch) of
        true -> throw({return, I_3});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Ch, I_4, S);
        _ -> {Ch, I_3, S}
    end
end,
{Ch, I_4, S} = Fun_3(Ch, I_3, S),
        -1
    catch {return, Ret} -> Ret end.

padleft(N_3, Width) ->
    try
        S_2 = lists:flatten(io_lib:format("~p", [N_3])),
        Fun_4 = fun Fun_4_loop(N_3, S_2, Width) ->
    case (length(S_2) < Width) of
        true ->
            S_3 = (" " ++ S_2),
            Fun_4_loop(N_3, S_3, Width);
        _ -> {N_3, S_2, Width}
    end
end,
{N_3, S_3, Width} = Fun_4(N_3, S_2, Width),
        S_3
    catch {return, Ret} -> Ret end.

formatfloat(F, Prec) ->
    try
        S_4 = lists:flatten(io_lib:format("~p", [F])),
        Idx = mochi_index_of(S_4, "."),
        case (Idx < 0) of
        true -> throw({return, S_4});
        _ -> ok
    end,
        Need = ((Idx + 1) + Prec),
        case (length(S_4) > Need) of
        true -> throw({return, string:substr(S_4, 0 + 1, (Need - 0))});
        _ -> ok
    end,
        S_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Blum = [],
        Counts = [0, 0, 0, 0],
        Digits = [1, 3, 7, 9],
        I_5 = 1,
        Bc = 0,
        Fun_10 = fun Fun_10_loop(Bc, Blum, Counts, Digits, I_5) ->
    case true of
        true ->
            try
                P = firstprimefactor(I_5),
                case ((P rem 4) == 3) of
        true -> Q = mochi_to_int((I_5 div P)),
            case (((Q /= P) andalso ((Q rem 4) == 3)) andalso isprime(Q)) of
        true -> case (Bc < 50) of
        true -> Blum_2 = lists:append(Blum, [I_5]),
            Blum_3 = Blum_2;
        _ -> Blum_3 = Blum
    end,
            D_4 = (I_5 rem 10),
            case (D_4 == 1) of
        true -> Counts_2 = lists:sublist(Counts, 0) ++ [(lists:nth(0 + 1, Counts) + 1)] ++ lists:nthtail(0 + 1, Counts),
            Counts_9 = Counts_2;
        _ -> case (D_4 == 3) of
        true -> Counts_3 = lists:sublist(Counts, 1) ++ [(lists:nth(1 + 1, Counts) + 1)] ++ lists:nthtail(1 + 1, Counts),
            Counts_8 = Counts_3;
        _ -> case (D_4 == 7) of
        true -> Counts_4 = lists:sublist(Counts, 2) ++ [(lists:nth(2 + 1, Counts) + 1)] ++ lists:nthtail(2 + 1, Counts),
            Counts_7 = Counts_4;
        _ -> case (D_4 == 9) of
        true -> Counts_5 = lists:sublist(Counts, 3) ++ [(lists:nth(3 + 1, Counts) + 1)] ++ lists:nthtail(3 + 1, Counts),
            Counts_6 = Counts_5;
        _ -> Counts_6 = Counts
    end,
            Counts_7 = Counts_6
    end,
            Counts_8 = Counts_7
    end,
            Counts_9 = Counts_8
    end,
            Bc_2 = (Bc + 1),
            case (Bc_2 == 50) of
        true -> io:format("~ts~n", ["First 50 Blum integers:"]),
            Idx_2 = 0,
            Fun_6 = fun Fun_6_loop(Bc_2, Blum_3, Counts_9, D_4, Digits, I_5, Idx_2, P, Q) ->
    case (Idx_2 < 50) of
        true ->
            Line = "",
            J = 0,
            Fun_5 = fun Fun_5_loop(Bc_2, Blum_3, Counts_9, D_4, Digits, I_5, Idx_2, J, Line, P, Q) ->
    case (J < 10) of
        true ->
            Line_2 = ((Line ++ padleft(lists:nth(Idx_2 + 1, Blum_3), 3)) ++ " "),
            Idx_3 = (Idx_2 + 1),
            J_2 = (J + 1),
            Fun_5_loop(Bc_2, Blum_3, Counts_9, D_4, Digits, I_5, Idx_3, J_2, Line_2, P, Q);
        _ -> {Bc_2, Blum_3, Counts_9, D_4, Digits, I_5, Idx_2, J, Line, P, Q}
    end
end,
{Bc_2, Blum_3, Counts_9, D_4, Digits, I_5, Idx_3, J_2, Line_2, P, Q} = Fun_5(Bc_2, Blum_3, Counts_9, D_4, Digits, I_5, Idx_2, J, Line, P, Q),
            io:format("~ts~n", [string:substr(Line_2, 0 + 1, ((length(Line_2) - 1) - 0))]),
            Fun_6_loop(Bc_2, Blum_3, Counts_9, D_4, Digits, I_5, Idx_3, P, Q);
        _ -> {Bc_2, Blum_3, Counts_9, D_4, Digits, I_5, Idx_2, P, Q}
    end
end,
{Bc_2, Blum_3, Counts_9, D_4, Digits, I_5, Idx_3, P, Q} = Fun_6(Bc_2, Blum_3, Counts_9, D_4, Digits, I_5, Idx_2, P, Q),
            throw(break),
            Fun_7 = Fun_6,
            Idx_4 = Idx_3;
        _ -> Fun_7 = nil,
            Idx_4 = nil
    end,
            Bc_3 = Bc_2,
            Blum_4 = Blum_3,
            Counts_10 = Counts_9,
            D_5 = D_4,
            Fun_8 = Fun_7,
            Idx_5 = Idx_4;
        _ -> Bc_3 = Bc,
            Blum_4 = Blum,
            Counts_10 = Counts,
            D_5 = nil,
            Fun_8 = nil,
            Idx_5 = nil
    end,
            Bc_4 = Bc_3,
            Blum_5 = Blum_4,
            Counts_11 = Counts_10,
            D_6 = D_5,
            Fun_9 = Fun_8,
            Idx_6 = Idx_5,
            Q_2 = Q;
        _ -> Bc_4 = Bc,
            Blum_5 = Blum,
            Counts_11 = Counts,
            D_6 = nil,
            Fun_9 = nil,
            Idx_6 = nil,
            Q_2 = nil
    end,
                case ((I_5 rem 5) == 3) of
        true -> I_6 = (I_5 + 4),
            I_8 = I_6;
        _ -> I_7 = (I_5 + 2),
            I_8 = I_7
    end,
                Fun_10_loop(Bc_4, Blum_5, Counts_11, Digits, I_8)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_10_loop(C0, C1, C2, C3, C4);
                break -> {Bc, Blum, Counts, Digits, I_5}
            end;
        _ -> {Bc, Blum, Counts, Digits, I_5}
    end
end,
{Bc_4, Blum_5, Counts_11, Digits, I_8} = Fun_10(Bc, Blum, Counts, Digits, I_5),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
