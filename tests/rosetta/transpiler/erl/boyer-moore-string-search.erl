#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexofstr/2, stringsearchsingle/2, stringsearch/2, display/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (83683ecfe3) on 2025-07-25 22:53 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

indexofstr(H, N) ->
    try
        Hlen = length(H),
        Nlen = length(N),
        case (Nlen == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        I = 0,
        Fun = fun Fun_loop(H, Hlen, I, N, Nlen) ->
    case (I =< (Hlen - Nlen)) of
        true ->
            case (string:substr(H, I + 1, ((I + Nlen) - I)) == N) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(H, Hlen, I_2, N, Nlen);
        _ -> {H, Hlen, I, N, Nlen}
    end
end,
{H, Hlen, I_2, N, Nlen} = Fun(H, Hlen, I, N, Nlen),
        -1
    catch {return, Ret} -> Ret end.

stringsearchsingle(H_2, N_2) ->
    try
        indexofstr(H_2, N_2)
    catch {return, Ret} -> Ret end.

stringsearch(H_3, N_3) ->
    try
        Result = [],
        Start = 0,
        Hlen_2 = length(H_3),
        Nlen_2 = length(N_3),
        Fun_2 = fun Fun_2_loop(H_3, Hlen_2, N_3, Nlen_2, Result, Start) ->
    case (Start < Hlen_2) of
        true ->
            try
                Idx = indexofstr(string:substr(H_3, Start + 1, (Hlen_2 - Start)), N_3),
                case (Idx >= 0) of
        true -> Result_2 = lists:append(Result, [(Start + Idx)]),
            Start_2 = ((Start + Idx) + Nlen_2),
            Result_3 = Result_2,
            Start_3 = Start_2;
        _ -> throw(break),
            Result_3 = Result,
            Start_3 = Start
    end,
                Fun_2_loop(H_3, Hlen_2, N_3, Nlen_2, Result_3, Start_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_2_loop(C0, C1, C2, C3, C4, C5);
                break -> {H_3, Hlen_2, N_3, Nlen_2, Result, Start}
            end;
        _ -> {H_3, Hlen_2, N_3, Nlen_2, Result, Start}
    end
end,
{H_3, Hlen_2, N_3, Nlen_2, Result_3, Start_3} = Fun_2(H_3, Hlen_2, N_3, Nlen_2, Result, Start),
        Result_3
    catch {return, Ret} -> Ret end.

display(Nums) ->
    try
        S = "[",
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Nums, S) ->
    case (I_3 < length(Nums)) of
        true ->
            case (I_3 > 0) of
        true -> S_2 = (S ++ ", "),
            S_3 = S_2;
        _ -> S_3 = S
    end,
            S_4 = (S_3 ++ lists:flatten(io_lib:format("~p", [lists:nth(I_3 + 1, Nums)]))),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Nums, S_4);
        _ -> {I_3, Nums, S}
    end
end,
{I_4, Nums, S_4} = Fun_3(I_3, Nums, S),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

main() ->
    try
        Texts = ["GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."],
        Patterns = ["TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Patterns, Texts) ->
    case (I_5 < length(Texts)) of
        true ->
            io:format("~ts~n", [((("text" ++ lists:flatten(io_lib:format("~p", [(I_5 + 1)]))) ++ " = ") ++ lists:nth(I_5 + 1, Texts))]),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Patterns, Texts);
        _ -> {I_5, Patterns, Texts}
    end
end,
{I_6, Patterns, Texts} = Fun_4(I_5, Patterns, Texts),
        io:format("~ts~n", [""]),
        J = 0,
        Fun_5 = fun Fun_5_loop(I_6, J, Patterns, Texts) ->
    case (J < length(Texts)) of
        true ->
            Idxs = stringsearch(lists:nth(J + 1, Texts), lists:nth(J + 1, Patterns)),
            io:format("~ts~n", [((((("Found \"" ++ lists:nth(J + 1, Patterns)) ++ "\" in 'text") ++ lists:flatten(io_lib:format("~p", [(J + 1)]))) ++ "' at indexes ") ++ display(Idxs))]),
            J_2 = (J + 1),
            Fun_5_loop(I_6, J_2, Patterns, Texts);
        _ -> {I_6, J, Patterns, Texts}
    end
end,
{I_6, J_2, Patterns, Texts} = Fun_5(I_6, J, Patterns, Texts),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
