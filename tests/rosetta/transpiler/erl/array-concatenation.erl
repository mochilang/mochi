#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, concatInts/2, concatAny/2]).

% Generated by Mochi transpiler v0.10.39 (6b9be63842) on 2025-07-24 22:46 +0700

concatInts(A, B) ->
    try
        Out = [],
        Fun = fun Fun_loop(List, A, B, Out) ->
    case List of
        [] -> {A, B, Out};
        [V|Fun_loop_rest] ->
            Out_2 = lists:append(Out, [V]),
            Fun_loop(Fun_loop_rest, A, B, Out_2)
    end
end,
{A, B, Out_2} = Fun(A, A, B, Out),
        Fun_2 = fun Fun_2_loop(List, A, B, Out_2) ->
    case List of
        [] -> {A, B, Out_2};
        [V_2|Fun_2_loop_rest] ->
            Out_3 = lists:append(Out_2, [V_2]),
            Fun_2_loop(Fun_2_loop_rest, A, B, Out_3)
    end
end,
{A, B, Out_3} = Fun_2(B, A, B, Out_2),
        Out_3
    catch {return, Ret} -> Ret end.

concatAny(A_2, B_2) ->
    try
        Out_4 = [],
        Fun_3 = fun Fun_3_loop(List, A_2, B_2, Out_4) ->
    case List of
        [] -> {A_2, B_2, Out_4};
        [V_3|Fun_3_loop_rest] ->
            Out_5 = lists:append(Out_4, [V_3]),
            Fun_3_loop(Fun_3_loop_rest, A_2, B_2, Out_5)
    end
end,
{A_2, B_2, Out_5} = Fun_3(A_2, A_2, B_2, Out_4),
        Fun_4 = fun Fun_4_loop(List, A_2, B_2, Out_5) ->
    case List of
        [] -> {A_2, B_2, Out_5};
        [V_4|Fun_4_loop_rest] ->
            Out_6 = lists:append(Out_5, [V_4]),
            Fun_4_loop(Fun_4_loop_rest, A_2, B_2, Out_6)
    end
end,
{A_2, B_2, Out_6} = Fun_4(B_2, A_2, B_2, Out_5),
        Out_6
    catch {return, Ret} -> Ret end.

main(_) ->
    erlang:put('a', [1, 2, 3]),
    erlang:put('b', [7, 12, 60]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [concatInts(erlang:get('a'), erlang:get('b'))]))]),
    erlang:put('i', [1, 2, 3]),
    erlang:put('j', ["Crosby", "Stills", "Nash", "Young"]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [concatAny(erlang:get('i'), erlang:get('j'))]))]),
    erlang:put('l', [1, 2, 3]),
    erlang:put('m', [7, 12, 60]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [concatInts(erlang:get('l'), erlang:get('m'))]))]).
