#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, concatints/2, concatany/2]).

% Generated by Mochi transpiler v0.10.55 (87d3efb875) on 2025-08-03 08:53 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

concatints(A, B) ->
    try
        Out = [],
        Fun = fun Fun_loop(List, A, B, Out) ->
    case List of
        [] -> {A, B, Out};
        [V|V_rest] ->
            Out_2 = lists:append(Out, [V]),
            Fun_loop(V_rest, A, B, Out_2)
    end
end,
{A, B, Out_2} = Fun(A, A, B, Out),
        Fun_2 = fun Fun_2_loop(List, A, B, Out_2) ->
    case List of
        [] -> {A, B, Out_2};
        [V_2|V_2_rest] ->
            Out_3 = lists:append(Out_2, [V_2]),
            Fun_2_loop(V_2_rest, A, B, Out_3)
    end
end,
{A, B, Out_3} = Fun_2(B, A, B, Out_2),
        Out_3
    catch {return, Ret} -> Ret end.

concatany(A_2, B_2) ->
    try
        Out_4 = [],
        Fun_3 = fun Fun_3_loop(List, A_2, B_2, Out_4) ->
    case List of
        [] -> {A_2, B_2, Out_4};
        [V_3|V_3_rest] ->
            Out_5 = lists:append(Out_4, [V_3]),
            Fun_3_loop(V_3_rest, A_2, B_2, Out_5)
    end
end,
{A_2, B_2, Out_5} = Fun_3(A_2, A_2, B_2, Out_4),
        Fun_4 = fun Fun_4_loop(List, A_2, B_2, Out_5) ->
    case List of
        [] -> {A_2, B_2, Out_5};
        [V_4|V_4_rest] ->
            Out_6 = lists:append(Out_5, [V_4]),
            Fun_4_loop(V_4_rest, A_2, B_2, Out_6)
    end
end,
{A_2, B_2, Out_6} = Fun_4(B_2, A_2, B_2, Out_5),
        Out_6
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('a', [1, 2, 3]),
    erlang:put('b', [7, 12, 60]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [concatints(erlang:get('a'), erlang:get('b'))]))]),
    erlang:put('i', [1, 2, 3]),
    erlang:put('j', ["Crosby", "Stills", "Nash", "Young"]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [concatany(erlang:get('i'), erlang:get('j'))]))]),
    erlang:put('l', [1, 2, 3]),
    erlang:put('m', [7, 12, 60]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [concatints(erlang:get('l'), erlang:get('m'))]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
