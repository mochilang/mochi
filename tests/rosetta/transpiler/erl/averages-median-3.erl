#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, qsel/2, median/1]).

% Generated by Mochi transpiler v0.10.40 (0480f61bb0) on 2025-07-25 16:59 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

qsel(A, K) ->
    try
        Arr = A,
        Fun_2 = fun Fun_2_loop(A, Arr, K) ->
    case (length(Arr) > 1) of
        true ->
            Px = (mochi_now() rem length(Arr)),
            Pv = lists:nth(Px + 1, Arr),
            Last = (length(Arr) - 1),
            Tmp = lists:nth(Px + 1, Arr),
            Arr_2 = lists:sublist(Arr, Px) ++ [lists:nth(Last + 1, Arr)] ++ lists:nthtail(Px + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, Last) ++ [Tmp] ++ lists:nthtail(Last + 1, Arr_2),
            Px_2 = 0,
            I = 0,
            Fun = fun Fun_loop(A, Arr_3, I, K, Last, Pv, Px_2, Tmp) ->
    case (I < Last) of
        true ->
            V = lists:nth(I + 1, Arr_3),
            case (V < Pv) of
        true -> Tmp2 = lists:nth(Px_2 + 1, Arr_3),
            Arr_4 = lists:sublist(Arr_3, Px_2) ++ [lists:nth(I + 1, Arr_3)] ++ lists:nthtail(Px_2 + 1, Arr_3),
            Arr_5 = lists:sublist(Arr_4, I) ++ [Tmp2] ++ lists:nthtail(I + 1, Arr_4),
            Px_3 = (Px_2 + 1),
            Arr_6 = Arr_5,
            Px_4 = Px_3,
            Tmp2_2 = Tmp2;
        _ -> Arr_6 = Arr_3,
            Px_4 = Px_2,
            Tmp2_2 = nil
    end,
            I_2 = (I + 1),
            Fun_loop(A, Arr_6, I_2, K, Last, Pv, Px_4, Tmp);
        _ -> {A, Arr_3, I, K, Last, Pv, Px_2, Tmp}
    end
end,
{A, Arr_6, I_2, K, Last, Pv, Px_4, Tmp} = Fun(A, Arr_3, I, K, Last, Pv, Px_2, Tmp),
            case (Px_4 == K) of
        true -> throw({return, Pv});
        _ -> ok
    end,
            case (K < Px_4) of
        true -> Arr_7 = lists:sublist(Arr_6, 0 + 1, (Px_4 - 0)),
            Arr_11 = Arr_7,
            K_3 = K,
            Tmp2_4 = nil;
        _ -> Tmp2_3 = lists:nth(Px_4 + 1, Arr_6),
            Arr_8 = lists:sublist(Arr_6, Px_4) ++ [Pv] ++ lists:nthtail(Px_4 + 1, Arr_6),
            Arr_9 = lists:sublist(Arr_8, Last) ++ [Tmp2_3] ++ lists:nthtail(Last + 1, Arr_8),
            Arr_10 = lists:sublist(Arr_9, (Px_4 + 1) + 1, length(Arr_9) - (Px_4 + 1)),
            K_2 = (K - (Px_4 + 1)),
            Arr_11 = Arr_10,
            K_3 = K_2,
            Tmp2_4 = Tmp2_3
    end,
            Fun_2_loop(A, Arr_11, K_3);
        _ -> {A, Arr, K}
    end
end,
{A, Arr_11, K_3} = Fun_2(A, Arr, K),
        lists:nth(0 + 1, Arr_11)
    catch {return, Ret} -> Ret end.

median(List) ->
    try
        Arr_12 = List,
        Half = mochi_to_int((length(Arr_12) div 2)),
        Med = qsel(Arr_12, Half),
        case ((length(Arr_12) rem 2) == 0) of
        true -> throw({return, ((Med + qsel(Arr_12, (Half - 1))) / 2)});
        _ -> ok
    end,
        Med
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [median([3, 1, 4, 1])]))]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [median([3, 1, 4, 1, 5])]))]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
