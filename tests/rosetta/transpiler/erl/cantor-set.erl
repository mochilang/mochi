#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, setchar/3]).

% Generated by Mochi transpiler v0.10.55 (b43d15e5bc) on 2025-08-03 11:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

setchar(S, Idx, Ch) ->
    try
        ((string:substr(S, 0 + 1, (Idx - 0)) ++ Ch) ++ string:substr(S, (Idx + 1) + 1, (length(S) - (Idx + 1))))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('width', 81),
    erlang:put('height', 5),
    erlang:put('lines', []),
    Fun = fun Fun_loop(List) ->
    case List of
        [] -> {};
        [I|I_rest] ->
            Row = "",
            J = 0,
            Fun_2 = fun Fun_2_loop(I, J, Row) ->
    case (J < 81) of
        true ->
            Row_2 = (Row ++ "*"),
            J_2 = (J + 1),
            Fun_2_loop(I, J_2, Row_2);
        _ -> {I, J, Row}
    end
end,
{I, J_2, Row_2} = Fun_2(I, J, Row),
            erlang:put('lines', lists:append(erlang:get('lines'), [Row_2])),
            Fun_loop(I_rest)
    end
end,
{} = Fun(lists:seq(0, (5) - 1)),
    erlang:put('stack', [#{"start" => 0, "len" => 81, "index" => 1}]),
    Fun_5 = fun Fun_5_loop() ->
    case (length(erlang:get('stack')) > 0) of
        true ->
            try
                Frame = (case erlang:is_map(erlang:get('stack')) of true -> maps:get((length(erlang:get('stack')) - 1), erlang:get('stack'), nil); _ -> lists:nth((length(erlang:get('stack')) - 1) + 1, erlang:get('stack')) end),
                erlang:put('stack', lists:sublist(erlang:get('stack'), 1, ((length(erlang:get('stack')) - 1) - 0))),
                Start = maps:get("start", Frame, nil),
                LenSeg = maps:get("len", Frame, nil),
                Index = maps:get("index", Frame, nil),
                Seg = mochi_to_int((LenSeg div 3)),
                case (Seg == 0) of
        true -> throw({continue});
        _ -> ok
    end,
                I_2 = Index,
                Fun_4 = fun Fun_4_loop(Frame, I_2, Index, LenSeg, Seg, Start) ->
    case (I_2 < 5) of
        true ->
            J_3 = (Start + Seg),
            Fun_3 = fun Fun_3_loop(Frame, I_2, Index, J_3, LenSeg, Seg, Start) ->
    case (J_3 < (Start + (2 * Seg))) of
        true ->
            Lines = erlang:get('lines'),
            Lines_2 = lists:sublist(Lines, I_2) ++ [setchar((case erlang:is_map(erlang:get('lines')) of true -> maps:get(I_2, erlang:get('lines'), nil); _ -> lists:nth(I_2 + 1, erlang:get('lines')) end), J_3, " ")] ++ lists:nthtail(I_2 + 1, Lines),
            erlang:put('lines', Lines_2),
            J_4 = (J_3 + 1),
            Fun_3_loop(Frame, I_2, Index, J_4, LenSeg, Seg, Start);
        _ -> {Frame, I_2, Index, J_3, LenSeg, Seg, Start}
    end
end,
{Frame, I_2, Index, J_4, LenSeg, Seg, Start} = Fun_3(Frame, I_2, Index, J_3, LenSeg, Seg, Start),
            I_3 = (I_2 + 1),
            Fun_4_loop(Frame, I_3, Index, LenSeg, Seg, Start);
        _ -> {Frame, I_2, Index, LenSeg, Seg, Start}
    end
end,
{Frame, I_3, Index, LenSeg, Seg, Start} = Fun_4(Frame, I_2, Index, LenSeg, Seg, Start),
                erlang:put('stack', lists:append(erlang:get('stack'), [#{"start" => Start, "len" => Seg, "index" => (Index + 1)}])),
                erlang:put('stack', lists:append(erlang:get('stack'), [#{"start" => (Start + (Seg * 2)), "len" => Seg, "index" => (Index + 1)}])),
                Fun_5_loop()
            catch
                {continue} -> Fun_5_loop();
                break -> {}
            end;
        _ -> {}
    end
end,
{} = Fun_5(),
    Fun_6 = fun Fun_6_loop(List) ->
    case List of
        [] -> {};
        [Line|Line_rest] ->
            io:format("~p~n", [Line]),
            Fun_6_loop(Line_rest)
    end
end,
{} = Fun_6(erlang:get('lines')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
