#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pfacSum/1, pad/2, main/0]).

% Generated by Mochi transpiler v0.10.39 (6b9be63842) on 2025-07-24 22:46 +0700

pfacSum(I) ->
    try
        Sum = 0,
        P = 1,
        Fun = fun Fun_loop(I, P, Sum) ->
    case (P =< (I div 2)) of
        true ->
            case ((I rem P) == 0) of
        true -> Sum_2 = (Sum + P),
            Sum_3 = Sum_2;
        _ -> Sum_3 = Sum
    end,
            P_2 = (P + 1),
            Fun_loop(I, P_2, Sum_3);
        _ -> {I, P, Sum}
    end
end,
{I, P_2, Sum_3} = Fun(I, P, Sum),
        Sum_3
    catch {return, Ret} -> Ret end.

pad(N, Width) ->
    try
        S = lists:flatten(io_lib:format("~p", [N])),
        Fun_2 = fun Fun_2_loop(N, S, Width) ->
    case (length(S) < Width) of
        true ->
            S_2 = (" " ++ S),
            Fun_2_loop(N, S_2, Width);
        _ -> {N, S, Width}
    end
end,
{N, S_2, Width} = Fun_2(N, S, Width),
        S_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Sums = [],
        I_2 = 0,
        Fun_3 = fun Fun_3_loop(I_2, Sums) ->
    case (I_2 < 20000) of
        true ->
            Sums_2 = lists:append(Sums, [0]),
            I_3 = (I_2 + 1),
            Fun_3_loop(I_3, Sums_2);
        _ -> {I_2, Sums}
    end
end,
{I_3, Sums_2} = Fun_3(I_2, Sums),
        I_4 = 1,
        Fun_4 = fun Fun_4_loop(I_4, Sums_2) ->
    case (I_4 < 20000) of
        true ->
            Sums_3 = lists:sublist(Sums_2, I_4) ++ [pfacSum(I_4)] ++ lists:nthtail(I_4 + 1, Sums_2),
            I_5 = (I_4 + 1),
            Fun_4_loop(I_5, Sums_3);
        _ -> {I_4, Sums_2}
    end
end,
{I_5, Sums_3} = Fun_4(I_4, Sums_2),
        io:format("~ts~n", ["The amicable pairs below 20,000 are:"]),
        N_2 = 2,
        Fun_5 = fun Fun_5_loop(I_5, N_2, Sums_3) ->
    case (N_2 < 19999) of
        true ->
            M = lists:nth(N_2 + 1, Sums_3),
            case (((M > N_2) andalso (M < 20000)) andalso (N_2 == lists:nth(M + 1, Sums_3))) of
        true -> io:format("~ts~n", [((("  " ++ pad(N_2, 5)) ++ " and ") ++ pad(M, 5))]);
        _ -> ok
    end,
            N_3 = (N_2 + 1),
            Fun_5_loop(I_5, N_3, Sums_3);
        _ -> {I_5, N_2, Sums_3}
    end
end,
{I_5, N_3, Sums_3} = Fun_5(I_5, N_2, Sums_3),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    main().
