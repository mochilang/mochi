#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, add/2, sub/2, mul/2, fold/2]).

% Generated by Mochi transpiler v0.10.41 (0d0cd10f02) on 2025-07-26 16:11 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

add(A, B) ->
    try
        (A + B)
    catch {return, Ret} -> Ret end.

sub(A_2, B_2) ->
    try
        (A_2 - B_2)
    catch {return, Ret} -> Ret end.

mul(A_3, B_3) ->
    try
        (A_3 * B_3)
    catch {return, Ret} -> Ret end.

fold(F, Xs) ->
    try
        R = lists:nth(0 + 1, Xs),
        I = 1,
        Fun = fun Fun_loop(F, I, R, Xs) ->
    case (I < length(Xs)) of
        true ->
            R_2 = F(R, lists:nth(I + 1, Xs)),
            I_2 = (I + 1),
            Fun_loop(F, I_2, R_2, Xs);
        _ -> {F, I, R, Xs}
    end
end,
{F, I_2, R_2, Xs} = Fun(F, I, R, Xs),
        R_2
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('n', [1, 2, 3, 4, 5]),
    io:format("~p~n", [fold(fun(A_4, B_4) ->
    try
        add(A_4, B_4)
    catch {return, Ret} -> Ret end
end, erlang:get('n'))]),
    io:format("~p~n", [fold(fun(A_5, B_5) ->
    try
        sub(A_5, B_5)
    catch {return, Ret} -> Ret end
end, erlang:get('n'))]),
    io:format("~p~n", [fold(fun(A_6, B_6) ->
    try
        mul(A_6, B_6)
    catch {return, Ret} -> Ret end
end, erlang:get('n'))]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
