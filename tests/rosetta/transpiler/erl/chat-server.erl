#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, removename/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (b43d15e5bc) on 2025-08-03 11:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

removename(Names, Name) ->
    try
        Out = [],
        Fun = fun Fun_loop(List, Name, Names, Out) ->
    case List of
        [] -> {Name, Names, Out};
        [N|N_rest] ->
            case (N /= Name) of
        true -> Out_2 = lists:append(Out, [N]),
            Out_3 = Out_2;
        _ -> Out_3 = Out
    end,
            Fun_loop(N_rest, Name, Names, Out_3)
    end
end,
{Name, Names, Out_3} = Fun(Names, Name, Names, Out),
        Out_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        Clients = [],
        Broadcast = fun Broadcast(Msg) ->
    try
        io:format("~p~n", [Msg]),
        nil
    catch {return, Ret} -> Ret end
end,
        Add = fun Add(Name_2) ->
    try
        Clients_2 = lists:append(Clients, [Name_2]),
        Broadcast((("+++ \"" ++ Name_2) ++ "\" connected +++\n")),
        nil
    catch {return, Ret} -> Ret end
end,
        Send = fun Send(Name_3, Msg_2) ->
    try
        Broadcast((((Name_3 ++ "> ") ++ Msg_2) ++ "\n")),
        nil
    catch {return, Ret} -> Ret end
end,
        Remove = fun Remove(Name_4) ->
    try
        Clients_3 = removename(Clients, Name_4),
        Broadcast((("--- \"" ++ Name_4) ++ "\" disconnected ---\n")),
        nil
    catch {return, Ret} -> Ret end
end,
        Add("Alice"),
        Add("Bob"),
        Send("Alice", "Hello Bob!"),
        Send("Bob", "Hi Alice!"),
        Remove("Bob"),
        Remove("Alice"),
        Broadcast("Server stopping!\n"),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
