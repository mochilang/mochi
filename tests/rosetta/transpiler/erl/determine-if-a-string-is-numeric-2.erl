#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isint/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (b72de29470) on 2025-07-28 04:46 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

isint(S) ->
    try
        case (length(S) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        Fun = fun Fun_loop(List, S) ->
    case List of
        [] -> {S};
        [Ch|Ch_rest] ->
            case ((Ch < "0") orelse (Ch > "9")) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_loop(Ch_rest, S)
    end
end,
{S} = Fun(S, S),
        true
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", ["Are these strings integers?"]),
        V = "1",
        B = false,
        case (isint("1") /= nil) of
        true -> B_2 = true,
            B_3 = B_2;
        _ -> B_3 = B
    end,
        io:format("~ts~n", [((("  " ++ "1") ++ " -> ") ++ lists:flatten(io_lib:format("~p", [B_3])))]),
        I = "one",
        io:format("~ts~n", [((("  " ++ "one") ++ " -> ") ++ lists:flatten(io_lib:format("~p", [isint("one")])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
