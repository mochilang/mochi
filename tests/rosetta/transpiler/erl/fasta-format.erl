#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, splitlines/1, parsefasta/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (272e70f1c5) on 2025-07-28 10:31 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

splitlines(S) ->
    try
        Lines = [],
        Start = 0,
        I = 0,
        Fun = fun Fun_loop(I, Lines, S, Start) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == "\n") of
        true -> Lines_2 = lists:append(Lines, [string:substr(S, Start + 1, (I - Start))]),
            I_2 = (I + 1),
            Start_2 = I_2,
            I_4 = I_2,
            Lines_3 = Lines_2,
            Start_3 = Start_2;
        _ -> I_3 = (I + 1),
            I_4 = I_3,
            Lines_3 = Lines,
            Start_3 = Start
    end,
            Fun_loop(I_4, Lines_3, S, Start_3);
        _ -> {I, Lines, S, Start}
    end
end,
{I_4, Lines_3, S, Start_3} = Fun(I, Lines, S, Start),
        Lines_4 = lists:append(Lines_3, [string:substr(S, Start_3 + 1, (length(S) - Start_3))]),
        Lines_4
    catch {return, Ret} -> Ret end.

parsefasta(Text) ->
    try
        Key = "",
        Val = "",
        Out = [],
        Fun_2 = fun Fun_2_loop(List, Key, Out, Text, Val) ->
    case List of
        [] -> {Key, Out, Text, Val};
        [Line|Line_rest] ->
        try
            case (Line == "") of
        true -> throw({continue, Key, Out, Text, Val});
        _ -> ok
    end,
            case (string:substr(Line, 0 + 1, (1 - 0)) == ">") of
        true -> case (Key /= "") of
        true -> Out_2 = lists:append(Out, [((Key ++ ": ") ++ Val)]),
            Out_3 = Out_2;
        _ -> Out_3 = Out
    end,
            Hdr = string:substr(Line, 1 + 1, (length(Line) - 1)),
            Idx = 0,
            Fun_3 = fun Fun_3_loop(Hdr, Idx, Key, Line, Out_3, Text, Val) ->
    case ((Idx < length(Hdr)) andalso (string:substr(Hdr, Idx + 1, ((Idx + 1) - Idx)) /= " ")) of
        true ->
            Idx_2 = (Idx + 1),
            Fun_3_loop(Hdr, Idx_2, Key, Line, Out_3, Text, Val);
        _ -> {Hdr, Idx, Key, Line, Out_3, Text, Val}
    end
end,
{Hdr, Idx_2, Key, Line, Out_3, Text, Val} = Fun_3(Hdr, Idx, Key, Line, Out_3, Text, Val),
            Key_2 = string:substr(Hdr, 0 + 1, (Idx_2 - 0)),
            Val_2 = "",
            Fun_4 = Fun_3,
            Hdr_2 = Hdr,
            Idx_3 = Idx_2,
            Key_3 = Key_2,
            Out_4 = Out_3,
            Val_4 = Val_2;
        _ -> case (Key == "") of
        true -> io:format("~ts~n", ["missing header"]),
            throw({return, []});
        _ -> ok
    end,
            Val_3 = (Val ++ Line),
            Fun_4 = nil,
            Hdr_2 = nil,
            Idx_3 = nil,
            Key_3 = Key,
            Out_4 = Out,
            Val_4 = Val_3
    end,
            Fun_2_loop(Line_rest, Key_3, Out_4, Text, Val_4)
        catch
            {continue, C0, C1, C2, C3} -> Fun_2_loop(Line_rest, C0, C1, C2, C3);
            {break, B0, B1, B2, B3} -> {B0, B1, B2, B3};
            break -> {Key, Out, Text, Val}
        end
    end
end,
{Key_3, Out_4, Text, Val_4} = Fun_2(splitlines(Text), Key, Out, Text, Val),
        case (Key_3 /= "") of
        true -> Out_5 = lists:append(Out_4, [((Key_3 ++ ": ") ++ Val_4)]),
            Out_6 = Out_5;
        _ -> Out_6 = Out_4
    end,
        Out_6
    catch {return, Ret} -> Ret end.

main() ->
    try
        Res = parsefasta(erlang:get('FASTA')),
        Fun_5 = fun Fun_5_loop(List, Res) ->
    case List of
        [] -> {Res};
        [Line_2|Line_2_rest] ->
            io:format("~p~n", [Line_2]),
            Fun_5_loop(Line_2_rest, Res)
    end
end,
{Res} = Fun_5(Res, Res),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('FASTA', (((((">Rosetta_Example_1\n" ++ "THERECANBENOSPACE\n") ++ ">Rosetta_Example_2\n") ++ "THERECANBESEVERAL\n") ++ "LINESBUTTHEYALLMUST\n") ++ "BECONCATENATED")),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
