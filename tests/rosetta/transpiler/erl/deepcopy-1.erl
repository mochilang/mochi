#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, copylist/1, copymap/1, deepcopy/1, cdsstr/1]).

% Generated by Mochi transpiler v0.10.41 (392ce814c4) on 2025-07-27 11:22 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

copylist(Src) ->
    try
        Out = [],
        Fun = fun Fun_loop(List, Out, Src) ->
    case List of
        [] -> {Out, Src};
        [V|V_rest] ->
            Out_2 = lists:append(Out, [V]),
            Fun_loop(V_rest, Out_2, Src)
    end
end,
{Out_2, Src} = Fun(Src, Out, Src),
        Out_2
    catch {return, Ret} -> Ret end.

copymap(Src_2) ->
    try
        Out_3 = #{},
        Fun_2 = fun Fun_2_loop(List, Out_3, Src_2) ->
    case List of
        [] -> {Out_3, Src_2};
        [K|K_rest] ->
            Out_4 = maps:put(K, maps:get(K, Src_2, nil), Out_3),
            Fun_2_loop(K_rest, Out_4, Src_2)
    end
end,
{Out_4, Src_2} = Fun_2(maps:keys(Src_2), Out_3, Src_2),
        Out_4
    catch {return, Ret} -> Ret end.

deepcopy(C) ->
    try
        #{"i" => maps:get("i", C, nil), "s" => maps:get("s", C, nil), "b" => copylist(maps:get("b", C, nil)), "m" => copymap(maps:get("m", C, nil))}
    catch {return, Ret} -> Ret end.

cdsstr(C_2) ->
    try
        Bs = "[",
        I = 0,
        Fun_3 = fun Fun_3_loop(Bs, C_2, I) ->
    case (I < length(maps:get("b", C_2, nil))) of
        true ->
            Bs_2 = (Bs ++ lists:flatten(io_lib:format("~p", [lists:nth(I + 1, maps:get("b", C_2, nil))]))),
            case (I < (length(maps:get("b", C_2, nil)) - 1)) of
        true -> Bs_3 = (Bs_2 ++ " "),
            Bs_4 = Bs_3;
        _ -> Bs_4 = Bs_2
    end,
            I_2 = (I + 1),
            Fun_3_loop(Bs_4, C_2, I_2);
        _ -> {Bs, C_2, I}
    end
end,
{Bs_4, C_2, I_2} = Fun_3(Bs, C_2, I),
        Bs_5 = (Bs_4 ++ "]"),
        Ms = "map[",
        First = true,
        Fun_4 = fun Fun_4_loop(List, Bs_5, C_2, First, I_2, Ms) ->
    case List of
        [] -> {Bs_5, C_2, First, I_2, Ms};
        [K_2|K_2_rest] ->
            case mochi_not(First) of
        true -> Ms_2 = (Ms ++ " "),
            Ms_3 = Ms_2;
        _ -> Ms_3 = Ms
    end,
            Ms_4 = (((Ms_3 ++ lists:flatten(io_lib:format("~p", [K_2]))) ++ ":") ++ lists:flatten(io_lib:format("~p", [maps:get(K_2, maps:get("m", C_2, nil), nil)]))),
            First_2 = false,
            Fun_4_loop(K_2_rest, Bs_5, C_2, First_2, I_2, Ms_4)
    end
end,
{Bs_5, C_2, First_2, I_2, Ms_4} = Fun_4(maps:keys(maps:get("m", C_2, nil)), Bs_5, C_2, First, I_2, Ms),
        Ms_5 = (Ms_4 ++ "]"),
        (((((((("{" ++ lists:flatten(io_lib:format("~p", [maps:get("i", C_2, nil)]))) ++ " ") ++ maps:get("s", C_2, nil)) ++ " ") ++ Bs_5) ++ " ") ++ Ms_5) ++ "}")
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('c1', #{"i" => 1, "s" => "one", "b" => [117, 110, 105, 116], "m" => #{1 => true}}),
    erlang:put('c2', deepcopy(erlang:get('c1'))),
    io:format("~p~n", [cdsstr(erlang:get('c1'))]),
    io:format("~p~n", [cdsstr(erlang:get('c2'))]),
    erlang:put('c1', #{"i" => 0, "s" => "nil", "b" => [122, 101, 114, 111], "m" => #{1 => false}}),
    io:format("~p~n", [cdsstr(erlang:get('c1'))]),
    io:format("~p~n", [cdsstr(erlang:get('c2'))]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
