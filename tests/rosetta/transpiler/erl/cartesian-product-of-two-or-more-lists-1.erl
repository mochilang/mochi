#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, cart2/2, llstr/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (bbaa8b9136) on 2025-07-28 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

cart2(A, B) ->
    try
        P = [],
        Fun = fun Fun_loop(List, A, B, P) ->
    case List of
        [] -> {A, B, P};
        [X|X_rest] ->
            Fun_2 = fun Fun_2_loop(List, A, B, P, X) ->
    case List of
        [] -> {A, B, P, X};
        [Y|Y_rest] ->
            P_2 = lists:append(P, [[X, Y]]),
            Fun_2_loop(Y_rest, A, B, P_2, X)
    end
end,
{A, B, P_2, X} = Fun_2(B, A, B, P, X),
            Fun_loop(X_rest, A, B, P_2)
    end
end,
{A, B, P_2} = Fun(A, A, B, P),
        P_2
    catch {return, Ret} -> Ret end.

llstr(Lst) ->
    try
        S = "[",
        I = 0,
        Fun_4 = fun Fun_4_loop(I, Lst, S) ->
    case (I < length(Lst)) of
        true ->
            Row = lists:nth(I + 1, Lst),
            S_2 = (S ++ "["),
            J = 0,
            Fun_3 = fun Fun_3_loop(I, J, Lst, Row, S_2) ->
    case (J < length(Row)) of
        true ->
            S_3 = (S_2 ++ lists:flatten(io_lib:format("~p", [lists:nth(J + 1, Row)]))),
            case (J < (length(Row) - 1)) of
        true -> S_4 = (S_3 ++ " "),
            S_5 = S_4;
        _ -> S_5 = S_3
    end,
            J_2 = (J + 1),
            Fun_3_loop(I, J_2, Lst, Row, S_5);
        _ -> {I, J, Lst, Row, S_2}
    end
end,
{I, J_2, Lst, Row, S_5} = Fun_3(I, J, Lst, Row, S_2),
            S_6 = (S_5 ++ "]"),
            case (I < (length(Lst) - 1)) of
        true -> S_7 = (S_6 ++ " "),
            S_8 = S_7;
        _ -> S_8 = S_6
    end,
            I_2 = (I + 1),
            Fun_4_loop(I_2, Lst, S_8);
        _ -> {I, Lst, S}
    end
end,
{I_2, Lst, S_8} = Fun_4(I, Lst, S),
        S_9 = (S_8 ++ "]"),
        S_9
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [llstr(cart2([1, 2], [3, 4]))]),
        io:format("~ts~n", [llstr(cart2([3, 4], [1, 2]))]),
        io:format("~ts~n", [llstr(cart2([1, 2], []))]),
        io:format("~ts~n", [llstr(cart2([], [1, 2]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
