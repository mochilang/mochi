#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, state/1, printstate/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (1cbd612b6e) on 2025-08-02 20:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

state(V) ->
    try
        #{"entry" => (V == 0), "inc" => (V < 10), "dec" => (V > 0)}
    catch {return, Ret} -> Ret end.

printstate(V_2) ->
    try
        S = state(V_2),
        io:format("~ts~n", [((((((("value=" ++ lists:flatten(io_lib:format("~p", [V_2]))) ++ " entry=") ++ lists:flatten(io_lib:format("~p", [maps:get("entry", S, nil)]))) ++ " inc=") ++ lists:flatten(io_lib:format("~p", [maps:get("inc", S, nil)]))) ++ " dec=") ++ lists:flatten(io_lib:format("~p", [maps:get("dec", S, nil)])))]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        V_3 = 0,
        printstate(V_3),
        Fun = fun Fun_loop(V_3) ->
    case true of
        true ->
            try
                S_2 = state(V_3),
                case mochi_not(maps:get("inc", S_2, nil)) of
        true -> throw(break);
        _ -> ok
    end,
                V_4 = (V_3 + 1),
                printstate(V_4),
                Fun_loop(V_4)
            catch
                {continue, C0} -> Fun_loop(C0);
                break -> {V_3}
            end;
        _ -> {V_3}
    end
end,
{V_4} = Fun(V_3),
        Fun_2 = fun Fun_2_loop(V_4) ->
    case true of
        true ->
            try
                S_3 = state(V_4),
                case mochi_not(maps:get("dec", S_3, nil)) of
        true -> throw(break);
        _ -> ok
    end,
                V_5 = (V_4 - 1),
                printstate(V_5),
                Fun_2_loop(V_5)
            catch
                {continue, C0} -> Fun_2_loop(C0);
                break -> {V_4}
            end;
        _ -> {V_4}
    end
end,
{V_5} = Fun_2(V_4),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
