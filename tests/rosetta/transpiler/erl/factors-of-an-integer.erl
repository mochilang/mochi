#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, printfactors/1]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

printfactors(N) ->
    try
        case (N < 1) of
        true -> io:format("~ts~n", [(("\nFactors of " ++ lists:flatten(io_lib:format("~p", [N]))) ++ " not computed")]),
            throw({return, nil});
        _ -> ok
    end,
        io:format("~ts~n", [(("\nFactors of " ++ lists:flatten(io_lib:format("~p", [N]))) ++ ": ")]),
        Fs = [1],
        Apf = fun Apf(P, E) ->
    try
        Orig = length(Fs),
        Pp = P,
        I = 0,
        Fun_2 = fun Fun_2_loop(Apf, E, Fs, I, N, Orig, P, Pp) ->
    case (I < E) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Apf, E, Fs, I, J, N, Orig, P, Pp) ->
    case (J < Orig) of
        true ->
            Fs_2 = lists:append(Fs, [((case erlang:is_map(Fs) of true -> maps:get(J, Fs, nil); _ -> lists:nth(J + 1, Fs) end) * Pp)]),
            J_2 = (J + 1),
            Fun_loop(Apf, E, Fs_2, I, J_2, N, Orig, P, Pp);
        _ -> {Apf, E, Fs, I, J, N, Orig, P, Pp}
    end
end,
{Apf, E, Fs_2, I, J_2, N, Orig, P, Pp} = Fun(Apf, E, Fs, I, J, N, Orig, P, Pp),
            I_2 = (I + 1),
            Pp_2 = (Pp * P),
            Fun_2_loop(Apf, E, Fs_2, I_2, N, Orig, P, Pp_2);
        _ -> {Apf, E, Fs, I, N, Orig, P, Pp}
    end
end,
{Apf, E, Fs_2, I_2, N, Orig, P, Pp_2} = Fun_2(Apf, E, Fs, I, N, Orig, P, Pp),
        nil
    catch {return, Ret} -> Ret end
end,
        E_2 = 0,
        M = N,
        Fun_3 = fun Fun_3_loop(Apf, E_2, Fs, M, N) ->
    case ((M rem 2) == 0) of
        true ->
            M_2 = mochi_to_int((M div 2)),
            E_3 = (E_2 + 1),
            Fun_3_loop(Apf, E_3, Fs, M_2, N);
        _ -> {Apf, E_2, Fs, M, N}
    end
end,
{Apf, E_3, Fs, M_2, N} = Fun_3(Apf, E_2, Fs, M, N),
        Apf(2, E_3),
        D = 3,
        Fun_5 = fun Fun_5_loop(Apf, D, E_3, Fs, M_2, N) ->
    case (M_2 > 1) of
        true ->
            case ((D * D) > M_2) of
        true -> D_2 = M_2,
            D_3 = D_2;
        _ -> D_3 = D
    end,
            E_4 = 0,
            Fun_4 = fun Fun_4_loop(Apf, D_3, E_4, Fs, M_2, N) ->
    case ((M_2 rem D_3) == 0) of
        true ->
            M_3 = mochi_to_int((M_2 div D_3)),
            E_5 = (E_4 + 1),
            Fun_4_loop(Apf, D_3, E_5, Fs, M_3, N);
        _ -> {Apf, D_3, E_4, Fs, M_2, N}
    end
end,
{Apf, D_3, E_5, Fs, M_3, N} = Fun_4(Apf, D_3, E_4, Fs, M_2, N),
            case (E_5 > 0) of
        true -> Apf(D_3, E_5);
        _ -> ok
    end,
            D_4 = (D_3 + 2),
            Fun_5_loop(Apf, D_4, E_5, Fs, M_3, N);
        _ -> {Apf, D, E_3, Fs, M_2, N}
    end
end,
{Apf, D_4, E_5, Fs, M_3, N} = Fun_5(Apf, D, E_3, Fs, M_2, N),
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [Fs]))]),
        io:format("~ts~n", [("Number of factors = " ++ lists:flatten(io_lib:format("~p", [length(Fs)])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    printfactors(-1),
    printfactors(0),
    printfactors(1),
    printfactors(2),
    printfactors(3),
    printfactors(53),
    printfactors(45),
    printfactors(64),
    printfactors(600851475143),
    printfactors(999999999999999989),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
