#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parseintstr/1, splitws/1, parseppm/1]).

% Generated by Mochi transpiler v0.10.40 (e0c44791e6) on 2025-07-25 18:01 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

parseintstr(Str) ->
    try
        I = 0,
        Neg = false,
        case ((length(Str) > 0) andalso (string:substr(Str, 0 + 1, (1 - 0)) == "-")) of
        true -> Neg_2 = true,
            I_2 = 1,
            I_3 = I_2,
            Neg_3 = Neg_2;
        _ -> I_3 = I,
            Neg_3 = Neg
    end,
        N = 0,
        Digits = #{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9},
        Fun = fun Fun_loop(Digits, I_3, N, Neg_3, Str) ->
    case (I_3 < length(Str)) of
        true ->
            N_2 = ((N * 10) + maps:get(string:substr(Str, I_3 + 1, ((I_3 + 1) - I_3)), Digits, nil)),
            I_4 = (I_3 + 1),
            Fun_loop(Digits, I_4, N_2, Neg_3, Str);
        _ -> {Digits, I_3, N, Neg_3, Str}
    end
end,
{Digits, I_4, N_2, Neg_3, Str} = Fun(Digits, I_3, N, Neg_3, Str),
        case Neg_3 of
        true -> N_3 = -N_2,
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
        N_4
    catch {return, Ret} -> Ret end.

splitws(S) ->
    try
        Parts = [],
        Cur = "",
        I_5 = 0,
        Fun_2 = fun Fun_2_loop(Cur, I_5, Parts, S) ->
    case (I_5 < length(S)) of
        true ->
            Ch = string:substr(S, I_5 + 1, ((I_5 + 1) - I_5)),
            case ((((Ch == " ") orelse (Ch == "\n")) orelse (Ch == "\t")) orelse (Ch == "\r")) of
        true -> case (length(Cur) > 0) of
        true -> Parts_2 = lists:append(Parts, [Cur]),
            Cur_2 = "",
            Cur_3 = Cur_2,
            Parts_3 = Parts_2;
        _ -> Cur_3 = Cur,
            Parts_3 = Parts
    end,
            Cur_5 = Cur_3,
            Parts_4 = Parts_3;
        _ -> Cur_4 = (Cur ++ Ch),
            Cur_5 = Cur_4,
            Parts_4 = Parts
    end,
            I_6 = (I_5 + 1),
            Fun_2_loop(Cur_5, I_6, Parts_4, S);
        _ -> {Cur, I_5, Parts, S}
    end
end,
{Cur_5, I_6, Parts_4, S} = Fun_2(Cur, I_5, Parts, S),
        case (length(Cur_5) > 0) of
        true -> Parts_5 = lists:append(Parts_4, [Cur_5]),
            Parts_6 = Parts_5;
        _ -> Parts_6 = Parts_4
    end,
        Parts_6
    catch {return, Ret} -> Ret end.

parseppm(Data) ->
    try
        Toks = splitws(Data),
        case (length(Toks) < 4) of
        true -> throw({return, #{"err" => true}});
        _ -> ok
    end,
        Magic = lists:nth(0 + 1, Toks),
        W = parseintstr(lists:nth(1 + 1, Toks)),
        H = parseintstr(lists:nth(2 + 1, Toks)),
        Maxv = parseintstr(lists:nth(3 + 1, Toks)),
        Px = [],
        I_7 = 4,
        Fun_3 = fun Fun_3_loop(Data, H, I_7, Magic, Maxv, Px, Toks, W) ->
    case (I_7 < length(Toks)) of
        true ->
            Px_2 = lists:append(Px, [parseintstr(lists:nth(I_7 + 1, Toks))]),
            I_8 = (I_7 + 1),
            Fun_3_loop(Data, H, I_8, Magic, Maxv, Px_2, Toks, W);
        _ -> {Data, H, I_7, Magic, Maxv, Px, Toks, W}
    end
end,
{Data, H, I_8, Magic, Maxv, Px_2, Toks, W} = Fun_3(Data, H, I_7, Magic, Maxv, Px, Toks, W),
        #{"magic" => Magic, "w" => W, "h" => H, "max" => Maxv, "px" => Px_2}
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('ppmData', "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n"),
    erlang:put('img', parseppm("P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n")),
    io:format("~ts~n", [((("width=" ++ lists:flatten(io_lib:format("~p", [maps:get("w", erlang:get('img'), nil)]))) ++ " height=") ++ lists:flatten(io_lib:format("~p", [maps:get("h", erlang:get('img'), nil)])))]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
