#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow/2, pown/1, powe/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (1440a447fd) on 2025-07-28 04:27 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

pow(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < mochi_to_int(Exp)) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

pown(B) ->
    try
        fun(E) ->
    try
        pow(B, E)
    catch {return, Ret} -> Ret end
end
    catch {return, Ret} -> Ret end.

powe(E_2) ->
    try
        fun(B_2) ->
    try
        pow(B_2, E_2)
    catch {return, Ret} -> Ret end
end
    catch {return, Ret} -> Ret end.

main() ->
    try
        Pow2 = pown(2),
        Cube = powe(3),
        io:format("~ts~n", [("2^8 = " ++ lists:flatten(io_lib:format("~p", [Pow2(8)])))]),
        io:format("~ts~n", [("4Â³ = " ++ lists:flatten(io_lib:format("~p", [Cube(4)])))]),
        A = #{"value" => 2},
        Fn1 = fun(B_3) ->
    try
        nil
    catch {return, Ret} -> Ret end
end,
        Fn2 = fun(F, B_4) ->
    try
        nil
    catch {return, Ret} -> Ret end
end,
        io:format("~ts~n", [("2 + 2 = " ++ lists:flatten(io_lib:format("~p", [nil])))]),
        io:format("~ts~n", [("2 + 3 = " ++ lists:flatten(io_lib:format("~p", [Fn1(3)])))]),
        io:format("~ts~n", [("2 + 4 = " ++ lists:flatten(io_lib:format("~p", [Fn2(A, 4)])))]),
        io:format("~ts~n", [("3 + 5 = " ++ lists:flatten(io_lib:format("~p", [Fn2(#{"value" => 3}, 5)])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
