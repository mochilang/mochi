#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, prng/1, gen/1, testbalanced/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (305ff8442f) on 2025-07-25 12:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

prng(Max) ->
    try
        erlang:put('seed', (((erlang:get('seed') * 1103515245) + 12345) rem 2147483648)),
        (erlang:get('seed') rem Max)
    catch {return, Ret} -> Ret end.

gen(N) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, N) ->
    case (I < N) of
        true ->
            Arr_2 = lists:append(Arr, ["["]),
            Arr_3 = lists:append(Arr_2, ["]"]),
            I_2 = (I + 1),
            Fun_loop(Arr_3, I_2, N);
        _ -> {Arr, I, N}
    end
end,
{Arr_3, I_2, N} = Fun(Arr, I, N),
        J = (length(Arr_3) - 1),
        Fun_2 = fun Fun_2_loop(Arr_3, I_2, J, N) ->
    case (J > 0) of
        true ->
            K = prng((J + 1)),
            Tmp = lists:nth(J + 1, Arr_3),
            Arr_4 = lists:sublist(Arr_3, J) ++ [lists:nth(K + 1, Arr_3)] ++ lists:nthtail(J + 1, Arr_3),
            Arr_5 = lists:sublist(Arr_4, K) ++ [Tmp] ++ lists:nthtail(K + 1, Arr_4),
            J_2 = (J - 1),
            Fun_2_loop(Arr_5, I_2, J_2, N);
        _ -> {Arr_3, I_2, J, N}
    end
end,
{Arr_5, I_2, J_2, N} = Fun_2(Arr_3, I_2, J, N),
        Out = "",
        Fun_3 = fun Fun_3_loop(List, Arr_5, I_2, J_2, N, Out) ->
    case List of
        [] -> {Arr_5, I_2, J_2, N, Out};
        [Ch|List_rest] ->
            Out_2 = (Out ++ Ch),
            Fun_3_loop(List_rest, Arr_5, I_2, J_2, N, Out_2)
    end
end,
{Arr_5, I_2, J_2, N, Out_2} = Fun_3(Arr_5, Arr_5, I_2, J_2, N, Out),
        Out_2
    catch {return, Ret} -> Ret end.

testbalanced(S) ->
    try
        Open = 0,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(I_3, Open, S) ->
    case (I_3 < length(S)) of
        true ->
            C = string:substr(S, I_3 + 1, ((I_3 + 1) - I_3)),
            case (C == "[") of
        true -> Open_2 = (Open + 1),
            Open_5 = Open_2;
        _ -> case (C == "]") of
        true -> case (Open == 0) of
        true -> io:format("~ts~n", [(S ++ ": not ok")]),
            throw({return, nil});
        _ -> ok
    end,
            Open_3 = (Open - 1),
            Open_4 = Open_3;
        _ -> io:format("~ts~n", [(S ++ ": not ok")]),
            throw({return, nil}),
            Open_4 = Open
    end,
            Open_5 = Open_4
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Open_5, S);
        _ -> {I_3, Open, S}
    end
end,
{I_4, Open_5, S} = Fun_4(I_3, Open, S),
        case (Open_5 == 0) of
        true -> io:format("~ts~n", [(S ++ ": ok")]);
        _ -> io:format("~ts~n", [(S ++ ": not ok")])
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5) ->
    case (I_5 < 10) of
        true ->
            testbalanced(gen(I_5)),
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6);
        _ -> {I_5}
    end
end,
{I_6} = Fun_5(I_5),
        testbalanced("()"),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('seed', 1),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
