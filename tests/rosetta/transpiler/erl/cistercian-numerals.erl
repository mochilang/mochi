#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, initn/0, horiz/3, verti/3, diagd/3, diagu/3, initdraw/0, printnumeral/0]).

% Generated by Mochi transpiler v0.10.41 (df7e5d4e15) on 2025-07-27 05:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

initn() ->
    try
        I = 0,
        Fun_2 = fun Fun_2_loop(I) ->
    case (I < 15) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, Row) ->
    case (J < 11) of
        true ->
            Row_2 = lists:append(Row, [" "]),
            J_2 = (J + 1),
            Fun_loop(I, J_2, Row_2);
        _ -> {I, J, Row}
    end
end,
{I, J_2, Row_2} = Fun(I, J, Row),
            Row_3 = lists:sublist(Row_2, 5) ++ ["x"] ++ lists:nthtail(5 + 1, Row_2),
            erlang:put('n', lists:append(erlang:get('n'), [Row_3])),
            I_2 = (I + 1),
            Fun_2_loop(I_2);
        _ -> {I}
    end
end,
{I_2} = Fun_2(I),
        nil
    catch {return, Ret} -> Ret end.

horiz(C1, C2, R) ->
    try
        C = C1,
        Fun_3 = fun Fun_3_loop(C, C1, C2, R) ->
    case (C =< C2) of
        true ->
            N = erlang:get('n'),
            Tmp = lists:nth(R + 1, N),
            Tmp_2 = lists:sublist(Tmp, C) ++ ["x"] ++ lists:nthtail(C + 1, Tmp),
            N_2 = lists:sublist(N, R) ++ [Tmp_2] ++ lists:nthtail(R + 1, N),
            erlang:put('n', N_2),
            C_2 = (C + 1),
            Fun_3_loop(C_2, C1, C2, R);
        _ -> {C, C1, C2, R}
    end
end,
{C_2, C1, C2, R} = Fun_3(C, C1, C2, R),
        nil
    catch {return, Ret} -> Ret end.

verti(R1, R2, C_3) ->
    try
        R_2 = R1,
        Fun_4 = fun Fun_4_loop(C_3, R_2, R1, R2) ->
    case (R_2 =< R2) of
        true ->
            N_3 = erlang:get('n'),
            Tmp_3 = lists:nth(R_2 + 1, N_3),
            Tmp_4 = lists:sublist(Tmp_3, C_3) ++ ["x"] ++ lists:nthtail(C_3 + 1, Tmp_3),
            N_4 = lists:sublist(N_3, R_2) ++ [Tmp_4] ++ lists:nthtail(R_2 + 1, N_3),
            erlang:put('n', N_4),
            R_3 = (R_2 + 1),
            Fun_4_loop(C_3, R_3, R1, R2);
        _ -> {C_3, R_2, R1, R2}
    end
end,
{C_3, R_3, R1, R2} = Fun_4(C_3, R_2, R1, R2),
        nil
    catch {return, Ret} -> Ret end.

diagd(C1_2, C2_2, R_4) ->
    try
        C_4 = C1_2,
        Fun_5 = fun Fun_5_loop(C_4, C1_2, C2_2, R_4) ->
    case (C_4 =< C2_2) of
        true ->
            N_5 = erlang:get('n'),
            Tmp_5 = lists:nth(((R_4 + C_4) - C1_2) + 1, N_5),
            Tmp_6 = lists:sublist(Tmp_5, C_4) ++ ["x"] ++ lists:nthtail(C_4 + 1, Tmp_5),
            N_6 = lists:sublist(N_5, ((R_4 + C_4) - C1_2)) ++ [Tmp_6] ++ lists:nthtail(((R_4 + C_4) - C1_2) + 1, N_5),
            erlang:put('n', N_6),
            C_5 = (C_4 + 1),
            Fun_5_loop(C_5, C1_2, C2_2, R_4);
        _ -> {C_4, C1_2, C2_2, R_4}
    end
end,
{C_5, C1_2, C2_2, R_4} = Fun_5(C_4, C1_2, C2_2, R_4),
        nil
    catch {return, Ret} -> Ret end.

diagu(C1_3, C2_3, R_5) ->
    try
        C_6 = C1_3,
        Fun_6 = fun Fun_6_loop(C_6, C1_3, C2_3, R_5) ->
    case (C_6 =< C2_3) of
        true ->
            N_7 = erlang:get('n'),
            Tmp_7 = lists:nth(((R_5 - C_6) + C1_3) + 1, N_7),
            Tmp_8 = lists:sublist(Tmp_7, C_6) ++ ["x"] ++ lists:nthtail(C_6 + 1, Tmp_7),
            N_8 = lists:sublist(N_7, ((R_5 - C_6) + C1_3)) ++ [Tmp_8] ++ lists:nthtail(((R_5 - C_6) + C1_3) + 1, N_7),
            erlang:put('n', N_8),
            C_7 = (C_6 + 1),
            Fun_6_loop(C_7, C1_3, C2_3, R_5);
        _ -> {C_6, C1_3, C2_3, R_5}
    end
end,
{C_7, C1_3, C2_3, R_5} = Fun_6(C_6, C1_3, C2_3, R_5),
        nil
    catch {return, Ret} -> Ret end.

initdraw() ->
    try
        Draw = erlang:get('draw'),
        Draw_2 = maps:put(1, fun() ->
    try
        horiz(6, 10, 0),
        nil
    catch {return, Ret} -> Ret end
end, Draw),
        erlang:put('draw', Draw_2),
        Draw_3 = erlang:get('draw'),
        Draw_4 = maps:put(2, fun() ->
    try
        horiz(6, 10, 4),
        nil
    catch {return, Ret} -> Ret end
end, Draw_3),
        erlang:put('draw', Draw_4),
        Draw_5 = erlang:get('draw'),
        Draw_6 = maps:put(3, fun() ->
    try
        diagd(6, 10, 0),
        nil
    catch {return, Ret} -> Ret end
end, Draw_5),
        erlang:put('draw', Draw_6),
        Draw_7 = erlang:get('draw'),
        Draw_8 = maps:put(4, fun() ->
    try
        diagu(6, 10, 4),
        nil
    catch {return, Ret} -> Ret end
end, Draw_7),
        erlang:put('draw', Draw_8),
        Draw_9 = erlang:get('draw'),
        Draw_10 = maps:put(5, fun() ->
    try
        maps:get(1, erlang:get('draw'), nil)(),
        maps:get(4, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_9),
        erlang:put('draw', Draw_10),
        Draw_11 = erlang:get('draw'),
        Draw_12 = maps:put(6, fun() ->
    try
        verti(0, 4, 10),
        nil
    catch {return, Ret} -> Ret end
end, Draw_11),
        erlang:put('draw', Draw_12),
        Draw_13 = erlang:get('draw'),
        Draw_14 = maps:put(7, fun() ->
    try
        maps:get(1, erlang:get('draw'), nil)(),
        maps:get(6, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_13),
        erlang:put('draw', Draw_14),
        Draw_15 = erlang:get('draw'),
        Draw_16 = maps:put(8, fun() ->
    try
        maps:get(2, erlang:get('draw'), nil)(),
        maps:get(6, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_15),
        erlang:put('draw', Draw_16),
        Draw_17 = erlang:get('draw'),
        Draw_18 = maps:put(9, fun() ->
    try
        maps:get(1, erlang:get('draw'), nil)(),
        maps:get(8, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_17),
        erlang:put('draw', Draw_18),
        Draw_19 = erlang:get('draw'),
        Draw_20 = maps:put(10, fun() ->
    try
        horiz(0, 4, 0),
        nil
    catch {return, Ret} -> Ret end
end, Draw_19),
        erlang:put('draw', Draw_20),
        Draw_21 = erlang:get('draw'),
        Draw_22 = maps:put(20, fun() ->
    try
        horiz(0, 4, 4),
        nil
    catch {return, Ret} -> Ret end
end, Draw_21),
        erlang:put('draw', Draw_22),
        Draw_23 = erlang:get('draw'),
        Draw_24 = maps:put(30, fun() ->
    try
        diagu(0, 4, 4),
        nil
    catch {return, Ret} -> Ret end
end, Draw_23),
        erlang:put('draw', Draw_24),
        Draw_25 = erlang:get('draw'),
        Draw_26 = maps:put(40, fun() ->
    try
        diagd(0, 4, 0),
        nil
    catch {return, Ret} -> Ret end
end, Draw_25),
        erlang:put('draw', Draw_26),
        Draw_27 = erlang:get('draw'),
        Draw_28 = maps:put(50, fun() ->
    try
        maps:get(10, erlang:get('draw'), nil)(),
        maps:get(40, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_27),
        erlang:put('draw', Draw_28),
        Draw_29 = erlang:get('draw'),
        Draw_30 = maps:put(60, fun() ->
    try
        verti(0, 4, 0),
        nil
    catch {return, Ret} -> Ret end
end, Draw_29),
        erlang:put('draw', Draw_30),
        Draw_31 = erlang:get('draw'),
        Draw_32 = maps:put(70, fun() ->
    try
        maps:get(10, erlang:get('draw'), nil)(),
        maps:get(60, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_31),
        erlang:put('draw', Draw_32),
        Draw_33 = erlang:get('draw'),
        Draw_34 = maps:put(80, fun() ->
    try
        maps:get(20, erlang:get('draw'), nil)(),
        maps:get(60, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_33),
        erlang:put('draw', Draw_34),
        Draw_35 = erlang:get('draw'),
        Draw_36 = maps:put(90, fun() ->
    try
        maps:get(10, erlang:get('draw'), nil)(),
        maps:get(80, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_35),
        erlang:put('draw', Draw_36),
        Draw_37 = erlang:get('draw'),
        Draw_38 = maps:put(100, fun() ->
    try
        horiz(6, 10, 14),
        nil
    catch {return, Ret} -> Ret end
end, Draw_37),
        erlang:put('draw', Draw_38),
        Draw_39 = erlang:get('draw'),
        Draw_40 = maps:put(200, fun() ->
    try
        horiz(6, 10, 10),
        nil
    catch {return, Ret} -> Ret end
end, Draw_39),
        erlang:put('draw', Draw_40),
        Draw_41 = erlang:get('draw'),
        Draw_42 = maps:put(300, fun() ->
    try
        diagu(6, 10, 14),
        nil
    catch {return, Ret} -> Ret end
end, Draw_41),
        erlang:put('draw', Draw_42),
        Draw_43 = erlang:get('draw'),
        Draw_44 = maps:put(400, fun() ->
    try
        diagd(6, 10, 10),
        nil
    catch {return, Ret} -> Ret end
end, Draw_43),
        erlang:put('draw', Draw_44),
        Draw_45 = erlang:get('draw'),
        Draw_46 = maps:put(500, fun() ->
    try
        maps:get(100, erlang:get('draw'), nil)(),
        maps:get(400, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_45),
        erlang:put('draw', Draw_46),
        Draw_47 = erlang:get('draw'),
        Draw_48 = maps:put(600, fun() ->
    try
        verti(10, 14, 10),
        nil
    catch {return, Ret} -> Ret end
end, Draw_47),
        erlang:put('draw', Draw_48),
        Draw_49 = erlang:get('draw'),
        Draw_50 = maps:put(700, fun() ->
    try
        maps:get(100, erlang:get('draw'), nil)(),
        maps:get(600, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_49),
        erlang:put('draw', Draw_50),
        Draw_51 = erlang:get('draw'),
        Draw_52 = maps:put(800, fun() ->
    try
        maps:get(200, erlang:get('draw'), nil)(),
        maps:get(600, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_51),
        erlang:put('draw', Draw_52),
        Draw_53 = erlang:get('draw'),
        Draw_54 = maps:put(900, fun() ->
    try
        maps:get(100, erlang:get('draw'), nil)(),
        maps:get(800, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_53),
        erlang:put('draw', Draw_54),
        Draw_55 = erlang:get('draw'),
        Draw_56 = maps:put(1000, fun() ->
    try
        horiz(0, 4, 14),
        nil
    catch {return, Ret} -> Ret end
end, Draw_55),
        erlang:put('draw', Draw_56),
        Draw_57 = erlang:get('draw'),
        Draw_58 = maps:put(2000, fun() ->
    try
        horiz(0, 4, 10),
        nil
    catch {return, Ret} -> Ret end
end, Draw_57),
        erlang:put('draw', Draw_58),
        Draw_59 = erlang:get('draw'),
        Draw_60 = maps:put(3000, fun() ->
    try
        diagd(0, 4, 10),
        nil
    catch {return, Ret} -> Ret end
end, Draw_59),
        erlang:put('draw', Draw_60),
        Draw_61 = erlang:get('draw'),
        Draw_62 = maps:put(4000, fun() ->
    try
        diagu(0, 4, 14),
        nil
    catch {return, Ret} -> Ret end
end, Draw_61),
        erlang:put('draw', Draw_62),
        Draw_63 = erlang:get('draw'),
        Draw_64 = maps:put(5000, fun() ->
    try
        maps:get(1000, erlang:get('draw'), nil)(),
        maps:get(4000, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_63),
        erlang:put('draw', Draw_64),
        Draw_65 = erlang:get('draw'),
        Draw_66 = maps:put(6000, fun() ->
    try
        verti(10, 14, 0),
        nil
    catch {return, Ret} -> Ret end
end, Draw_65),
        erlang:put('draw', Draw_66),
        Draw_67 = erlang:get('draw'),
        Draw_68 = maps:put(7000, fun() ->
    try
        maps:get(1000, erlang:get('draw'), nil)(),
        maps:get(6000, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_67),
        erlang:put('draw', Draw_68),
        Draw_69 = erlang:get('draw'),
        Draw_70 = maps:put(8000, fun() ->
    try
        maps:get(2000, erlang:get('draw'), nil)(),
        maps:get(6000, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_69),
        erlang:put('draw', Draw_70),
        Draw_71 = erlang:get('draw'),
        Draw_72 = maps:put(9000, fun() ->
    try
        maps:get(1000, erlang:get('draw'), nil)(),
        maps:get(8000, erlang:get('draw'), nil)(),
        nil
    catch {return, Ret} -> Ret end
end, Draw_71),
        erlang:put('draw', Draw_72),
        nil
    catch {return, Ret} -> Ret end.

printnumeral() ->
    try
        I_3 = 0,
        Fun_8 = fun Fun_8_loop(I_3) ->
    case (I_3 < 15) of
        true ->
            Line = "",
            J_3 = 0,
            Fun_7 = fun Fun_7_loop(I_3, J_3, Line) ->
    case (J_3 < 11) of
        true ->
            Line_2 = ((Line ++ lists:nth(J_3 + 1, lists:nth(I_3 + 1, erlang:get('n')))) ++ " "),
            J_4 = (J_3 + 1),
            Fun_7_loop(I_3, J_4, Line_2);
        _ -> {I_3, J_3, Line}
    end
end,
{I_3, J_4, Line_2} = Fun_7(I_3, J_3, Line),
            io:format("~ts~n", [Line_2]),
            I_4 = (I_3 + 1),
            Fun_8_loop(I_4);
        _ -> {I_3}
    end
end,
{I_4} = Fun_8(I_3),
        io:format("~ts~n", [""]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('n', []),
    erlang:put('draw', #{}),
    initdraw(),
    erlang:put('numbers', [0, 1, 20, 300, 4000, 5555, 6789, 9999]),
    Fun_9 = fun Fun_9_loop(List) ->
    case List of
        [] -> {};
        [Number|Number_rest] ->
            initn(),
            io:format("~ts~n", [(lists:flatten(io_lib:format("~p", [Number])) ++ ":")]),
            Num = Number,
            Thousands = (Num / 1000),
            Num_2 = (Num rem 1000),
            Hundreds = (Num_2 / 100),
            Num_3 = (Num_2 rem 100),
            Tens = (Num_3 / 10),
            Ones = (Num_3 rem 10),
            case (Thousands > 0) of
        true -> maps:get((Thousands * 1000), erlang:get('draw'), nil)();
        _ -> ok
    end,
            case (Hundreds > 0) of
        true -> maps:get((Hundreds * 100), erlang:get('draw'), nil)();
        _ -> ok
    end,
            case (Tens > 0) of
        true -> maps:get((Tens * 10), erlang:get('draw'), nil)();
        _ -> ok
    end,
            case (Ones > 0) of
        true -> maps:get(Ones, erlang:get('draw'), nil)();
        _ -> ok
    end,
            printnumeral(),
            Fun_9_loop(Number_rest)
    end
end,
{} = Fun_9(erlang:get('numbers')),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
