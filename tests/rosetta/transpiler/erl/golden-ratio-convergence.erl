#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrtapprox/1, abs/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (26b9f6045a) on 2025-08-02 23:10 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

sqrtapprox(X) ->
    try
        case (X =< 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        G = X,
        I = 0,
        Fun = fun Fun_loop(G, I, X) ->
    case (I < 20) of
        true ->
            G_2 = mochi_safe_div((G + mochi_safe_div(X, G)), 2),
            I_2 = (I + 1),
            Fun_loop(G_2, I_2, X);
        _ -> {G, I, X}
    end
end,
{G_2, I_2, X} = Fun(G, I, X),
        G_2
    catch {return, Ret} -> Ret end.

abs(X_2) ->
    try
        (case (X_2 < 0) of
    true -> -X_2;
    _ -> X_2
end)
    catch {return, Ret} -> Ret end.

main() ->
    try
        OldPhi = 1,
        Phi = 0,
        Iters = 0,
        Limit = 1.0e-05,
        Fun_2 = fun Fun_2_loop(Iters, Limit, OldPhi, Phi) ->
    case true of
        true ->
            try
                Phi_2 = (1 + mochi_safe_div(1, OldPhi)),
                Iters_2 = (Iters + 1),
                case (erlang:abs((Phi_2 - OldPhi)) =< Limit) of
        true -> throw(break);
        _ -> ok
    end,
                OldPhi_2 = Phi_2,
                Fun_2_loop(Iters_2, Limit, OldPhi_2, Phi_2)
            catch
                {continue, C0, C1, C2, C3} -> Fun_2_loop(C0, C1, C2, C3);
                break -> {Iters, Limit, OldPhi, Phi}
            end;
        _ -> {Iters, Limit, OldPhi, Phi}
    end
end,
{Iters_2, Limit, OldPhi_2, Phi_2} = Fun_2(Iters, Limit, OldPhi, Phi),
        Actual = mochi_safe_div((1 + sqrtapprox(5)), 2),
        io:format("~ts~n", [("Final value of phi : " ++ lists:flatten(io_lib:format("~p", [Phi_2])))]),
        io:format("~ts~n", [("Number of iterations : " ++ lists:flatten(io_lib:format("~p", [Iters_2])))]),
        io:format("~ts~n", [("Error (approx) : " ++ lists:flatten(io_lib:format("~p", [(Phi_2 - Actual)])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
