#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isprime/1, gen/3, pad/2, main/0]).

% Generated by Mochi transpiler v0.10.39 (62bdb137fd) on 2025-07-25 00:14 +0700

isprime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N rem 2) == 0) of
        true -> throw({return, (N == 2)});
        _ -> ok
    end,
        case ((N rem 3) == 0) of
        true -> throw({return, (N == 3)});
        _ -> ok
    end,
        D = 5,
        Fun = fun Fun_loop(D, N) ->
    case ((D * D) =< N) of
        true ->
            case ((N rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            case ((N rem D_2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_3 = (D_2 + 4),
            Fun_loop(D_3, N);
        _ -> {D, N}
    end
end,
{D_3, N} = Fun(D, N),
        true
    catch {return, Ret} -> Ret end.

gen(First, Cand, Digits) ->
    try
        case (Digits == 0) of
        true -> case (isprime(Cand) /= nil) of
        true -> erlang:put('asc', (erlang:get('asc') ++ [Cand]));
        _ -> ok
    end,
            throw({return, nil});
        _ -> ok
    end,
        I = First,
        Fun_2 = fun Fun_2_loop(Cand, Digits, First, I) ->
    case (I < 10) of
        true ->
            gen((I + 1), ((Cand * 10) + I), (Digits - 1)),
            I_2 = (I + 1),
            Fun_2_loop(Cand, Digits, First, I_2);
        _ -> {Cand, Digits, First, I}
    end
end,
{Cand, Digits, First, I_2} = Fun_2(Cand, Digits, First, I),
        nil
    catch {return, Ret} -> Ret end.

pad(N_2, Width) ->
    try
        S = lists:flatten(io_lib:format("~p", [N_2])),
        Fun_3 = fun Fun_3_loop(N_2, S, Width) ->
    case (length(S) < Width) of
        true ->
            S_2 = (" " ++ S),
            Fun_3_loop(N_2, S_2, Width);
        _ -> {N_2, S, Width}
    end
end,
{N_2, S_2, Width} = Fun_3(N_2, S, Width),
        S_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Digits_2 = 1,
        Fun_4 = fun Fun_4_loop(Digits_2) ->
    case (Digits_2 < 10) of
        true ->
            gen(1, 0, Digits_2),
            Digits_3 = (Digits_2 + 1),
            Fun_4_loop(Digits_3);
        _ -> {Digits_2}
    end
end,
{Digits_3} = Fun_4(Digits_2),
        io:format("~ts~n", [(("There are " ++ lists:flatten(io_lib:format("~p", [length(erlang:get('asc'))]))) ++ " ascending primes, namely:")]),
        I_3 = 0,
        Line = "",
        Fun_5 = fun Fun_5_loop(Digits_3, I_3, Line) ->
    case (I_3 < length(erlang:get('asc'))) of
        true ->
            Line_2 = ((Line ++ pad(lists:nth(I_3 + 1, erlang:get('asc')), 8)) ++ " "),
            case (((I_3 + 1) rem 10) == 0) of
        true -> io:format("~ts~n", [string:substr(Line_2, 0 + 1, ((length(Line_2) - 1) - 0))]),
            Line_3 = "",
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            I_4 = (I_3 + 1),
            Fun_5_loop(Digits_3, I_4, Line_4);
        _ -> {Digits_3, I_3, Line}
    end
end,
{Digits_3, I_4, Line_4} = Fun_5(Digits_3, I_3, Line),
        case (length(Line_4) > 0) of
        true -> io:format("~ts~n", [string:substr(Line_4, 0 + 1, ((length(Line_4) - 1) - 0))]);
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    erlang:put('asc', []),
    main().
