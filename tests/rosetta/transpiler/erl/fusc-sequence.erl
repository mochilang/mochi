#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, fuscval/1, firstfusc/1, commatize/1, padleft/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (0f7fd10226) on 2025-08-02 20:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

fuscval(N) ->
    try
        A = 1,
        B = 0,
        X = N,
        Fun = fun Fun_loop(A, B, N, X) ->
    case (X > 0) of
        true ->
            case ((X rem 2) == 0) of
        true -> X_2 = (X div 2),
            A_2 = (A + B),
            A_3 = A_2,
            B_3 = B,
            X_4 = X_2;
        _ -> X_3 = ((X - 1) div 2),
            B_2 = (A + B),
            A_3 = A,
            B_3 = B_2,
            X_4 = X_3
    end,
            Fun_loop(A_3, B_3, N, X_4);
        _ -> {A, B, N, X}
    end
end,
{A_3, B_3, N, X_4} = Fun(A, B, N, X),
        case (N == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        B_3
    catch {return, Ret} -> Ret end.

firstfusc(N_2) ->
    try
        Arr = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, I, N_2) ->
    case (I < N_2) of
        true ->
            Arr_2 = lists:append(Arr, [fuscval(I)]),
            I_2 = (I + 1),
            Fun_2_loop(Arr_2, I_2, N_2);
        _ -> {Arr, I, N_2}
    end
end,
{Arr_2, I_2, N_2} = Fun_2(Arr, I, N_2),
        Arr_2
    catch {return, Ret} -> Ret end.

commatize(N_3) ->
    try
        S = lists:flatten(io_lib:format("~p", [N_3])),
        Neg = false,
        case (N_3 < 0) of
        true -> Neg_2 = true,
            S_2 = string:substr(S, 1 + 1, (length(S) - 1)),
            Neg_3 = Neg_2,
            S_3 = S_2;
        _ -> Neg_3 = Neg,
            S_3 = S
    end,
        I_3 = (length(S_3) - 3),
        Fun_3 = fun Fun_3_loop(I_3, N_3, Neg_3, S_3) ->
    case (I_3 >= 1) of
        true ->
            S_4 = ((string:substr(S_3, 0 + 1, (I_3 - 0)) ++ ",") ++ string:substr(S_3, I_3 + 1, (length(S_3) - I_3))),
            I_4 = (I_3 - 3),
            Fun_3_loop(I_4, N_3, Neg_3, S_4);
        _ -> {I_3, N_3, Neg_3, S_3}
    end
end,
{I_4, N_3, Neg_3, S_4} = Fun_3(I_3, N_3, Neg_3, S_3),
        case Neg_3 of
        true -> throw({return, ("-" ++ S_4)});
        _ -> ok
    end,
        S_4
    catch {return, Ret} -> Ret end.

padleft(S_5, W) ->
    try
        Out = S_5,
        Fun_4 = fun Fun_4_loop(Out, S_5, W) ->
    case (length(Out) < W) of
        true ->
            Out_2 = (" " ++ Out),
            Fun_4_loop(Out_2, S_5, W);
        _ -> {Out, S_5, W}
    end
end,
{Out_2, S_5, W} = Fun_4(Out, S_5, W),
        Out_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", ["The first 61 fusc numbers are:"]),
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [firstfusc(61)]))]),
        io:format("~ts~n", ["\nThe fusc numbers whose length > any previous fusc number length are:"]),
        Idxs = [0, 37, 1173, 35499, 699051, 19573419],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, Idxs) ->
    case (I_5 < length(Idxs)) of
        true ->
            Idx = (case erlang:is_map(Idxs) of true -> maps:get(I_5, Idxs, nil); _ -> lists:nth(I_5 + 1, Idxs) end),
            Val = fuscval(Idx),
            NumStr = padleft(commatize(Val), 7),
            IdxStr = padleft(commatize(Idx), 10),
            io:format("~ts~n", [(((NumStr ++ " (index ") ++ IdxStr) ++ ")")]),
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Idxs);
        _ -> {I_5, Idxs}
    end
end,
{I_6, Idxs} = Fun_5(I_5, Idxs),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
