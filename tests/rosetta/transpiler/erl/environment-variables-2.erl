#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, hasprefix/2]).

% Generated by Mochi transpiler v0.10.54 (6b449c7962) on 2025-08-02 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

hasprefix(S, P) ->
    try
        (case (length(P) > length(S)) of
    true -> false;
    _ -> (string:substr(S, 0 + 1, (length(P) - 0)) == P)
end)
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('name', "SHELL"),
    erlang:put('prefix', ("SHELL" ++ "=")),
    Fun = fun Fun_loop(List) ->
    case List of
        [] -> {};
        [V|V_rest] ->
            case hasprefix(V, erlang:get('prefix')) of
        true -> io:format("~ts~n", [(("SHELL" ++ " has value ") ++ string:substr(V, length(erlang:get('prefix')) + 1, (length(V) - length(erlang:get('prefix')))))]),
            throw({return, nil});
        _ -> ok
    end,
            Fun_loop(V_rest)
    end
end,
{} = Fun(os:getenv()),
    io:format("~ts~n", [("SHELL" ++ " not found")]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
