#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, ord/1, chr/1, shiftrune/2, encipher/2, decipher/2, main/0]).

% Generated by Mochi transpiler v0.10.41 (ed0a654f66) on 2025-07-26 20:37 +0700


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, Ret} -> Ret end.

ord(Ch_2) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Idx = mochi_index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_2),
        case (Idx >= 0) of
        true -> throw({return, (65 + Idx)});
        _ -> ok
    end,
        Idx_2 = mochi_index_of("abcdefghijklmnopqrstuvwxyz", Ch_2),
        case (Idx_2 >= 0) of
        true -> throw({return, (97 + Idx_2)});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

chr(N) ->
    try
        Upper_2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower_2 = "abcdefghijklmnopqrstuvwxyz",
        case ((N >= 65) andalso (N < 91)) of
        true -> throw({return, string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", (N - 65) + 1, ((N - 64) - (N - 65)))});
        _ -> ok
    end,
        case ((N >= 97) andalso (N < 123)) of
        true -> throw({return, string:substr("abcdefghijklmnopqrstuvwxyz", (N - 97) + 1, ((N - 96) - (N - 97)))});
        _ -> ok
    end,
        "?"
    catch {return, Ret} -> Ret end.

shiftrune(R, K) ->
    try
        case ((R >= "a") andalso (R =< "z")) of
        true -> throw({return, chr(((((ord(R) - 97) + K) rem 26) + 97))});
        _ -> ok
    end,
        case ((R >= "A") andalso (R =< "Z")) of
        true -> throw({return, chr(((((ord(R) - 65) + K) rem 26) + 65))});
        _ -> ok
    end,
        R
    catch {return, Ret} -> Ret end.

encipher(S_2, K_2) ->
    try
        Out = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, K_2, Out, S_2) ->
    case (I_3 < length(S_2)) of
        true ->
            Out_2 = (Out ++ shiftrune(string:substr(S_2, I_3 + 1, ((I_3 + 1) - I_3)), K_2)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, K_2, Out_2, S_2);
        _ -> {I_3, K_2, Out, S_2}
    end
end,
{I_4, K_2, Out_2, S_2} = Fun_2(I_3, K_2, Out, S_2),
        Out_2
    catch {return, Ret} -> Ret end.

decipher(S_3, K_3) ->
    try
        encipher(S_3, ((26 - (K_3 rem 26)) rem 26))
    catch {return, Ret} -> Ret end.

main() ->
    try
        Pt = "The five boxing wizards jump quickly",
        io:format("~ts~n", [("Plaintext: " ++ "The five boxing wizards jump quickly")]),
        Fun_3 = fun Fun_3_loop(List, Pt) ->
    case List of
        [] -> {Pt};
        [Key|Key_rest] ->
        try
            case ((Key < 1) orelse (Key > 25)) of
        true -> io:format("~ts~n", [(("Key " ++ lists:flatten(io_lib:format("~p", [Key]))) ++ " invalid")]),
            throw({continue, Pt});
        _ -> ok
    end,
            Ct = encipher("The five boxing wizards jump quickly", Key),
            io:format("~ts~n", [("Key " ++ lists:flatten(io_lib:format("~p", [Key])))]),
            io:format("~ts~n", [("  Enciphered: " ++ Ct)]),
            io:format("~ts~n", [("  Deciphered: " ++ decipher(Ct, Key))]),
            Fun_3_loop(Key_rest, Pt)
        catch
            {continue, C0} -> Fun_3_loop(Key_rest, C0);
            {break, B0} -> {B0};
            break -> {Pt}
        end
    end
end,
{Pt} = Fun_3([0, 1, 7, 25, 26], Pt),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    main().
