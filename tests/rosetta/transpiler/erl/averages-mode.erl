#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.55 (87d3efb875) on 2025-08-03 08:53 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('arr1', [2, 7, 1, 8, 2]),
    erlang:put('counts1', #{}),
    erlang:put('keys1', []),
    erlang:put('i', 0),
    Fun = fun Fun_loop() ->
    case (erlang:get('i') < length(erlang:get('arr1'))) of
        true ->
            V = (case erlang:is_map(erlang:get('arr1')) of true -> maps:get(erlang:get('i'), erlang:get('arr1'), nil); _ -> lists:nth(erlang:get('i') + 1, erlang:get('arr1')) end),
            case maps:is_key(V, erlang:get('counts1')) of
        true -> Counts1 = erlang:get('counts1'),
            Counts1_2 = maps:put(V, (maps:get(V, erlang:get('counts1'), nil) + 1), Counts1),
            erlang:put('counts1', Counts1_2),
            Counts1_5 = Counts1_2;
        _ -> Counts1_3 = erlang:get('counts1'),
            Counts1_4 = maps:put(V, 1, Counts1_3),
            erlang:put('counts1', Counts1_4),
            erlang:put('keys1', lists:append(erlang:get('keys1'), [V])),
            Counts1_5 = Counts1_4
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_loop();
        _ -> {}
    end
end,
{} = Fun(),
    erlang:put('max1', 0),
    erlang:put('i', 0),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('i') < length(erlang:get('keys1'))) of
        true ->
            K = (case erlang:is_map(erlang:get('keys1')) of true -> maps:get(erlang:get('i'), erlang:get('keys1'), nil); _ -> lists:nth(erlang:get('i') + 1, erlang:get('keys1')) end),
            C = maps:get(K, erlang:get('counts1'), nil),
            case (C > erlang:get('max1')) of
        true -> erlang:put('max1', C);
        _ -> ok
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    erlang:put('modes1', []),
    erlang:put('i', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('i') < length(erlang:get('keys1'))) of
        true ->
            K_2 = (case erlang:is_map(erlang:get('keys1')) of true -> maps:get(erlang:get('i'), erlang:get('keys1'), nil); _ -> lists:nth(erlang:get('i') + 1, erlang:get('keys1')) end),
            case (maps:get(K_2, erlang:get('counts1'), nil) == erlang:get('max1')) of
        true -> erlang:put('modes1', lists:append(erlang:get('modes1'), [K_2]));
        _ -> ok
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [erlang:get('modes1')]))]),
    erlang:put('arr2', [2, 7, 1, 8, 2, 8]),
    erlang:put('counts2', #{}),
    erlang:put('keys2', []),
    erlang:put('i', 0),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('i') < length(erlang:get('arr2'))) of
        true ->
            V_2 = (case erlang:is_map(erlang:get('arr2')) of true -> maps:get(erlang:get('i'), erlang:get('arr2'), nil); _ -> lists:nth(erlang:get('i') + 1, erlang:get('arr2')) end),
            case maps:is_key(V_2, erlang:get('counts2')) of
        true -> Counts2 = erlang:get('counts2'),
            Counts2_2 = maps:put(V_2, (maps:get(V_2, erlang:get('counts2'), nil) + 1), Counts2),
            erlang:put('counts2', Counts2_2),
            Counts2_5 = Counts2_2;
        _ -> Counts2_3 = erlang:get('counts2'),
            Counts2_4 = maps:put(V_2, 1, Counts2_3),
            erlang:put('counts2', Counts2_4),
            erlang:put('keys2', lists:append(erlang:get('keys2'), [V_2])),
            Counts2_5 = Counts2_4
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    erlang:put('max2', 0),
    erlang:put('i', 0),
    Fun_5 = fun Fun_5_loop() ->
    case (erlang:get('i') < length(erlang:get('keys2'))) of
        true ->
            K_3 = (case erlang:is_map(erlang:get('keys2')) of true -> maps:get(erlang:get('i'), erlang:get('keys2'), nil); _ -> lists:nth(erlang:get('i') + 1, erlang:get('keys2')) end),
            C_2 = maps:get(K_3, erlang:get('counts2'), nil),
            case (C_2 > erlang:get('max2')) of
        true -> erlang:put('max2', C_2);
        _ -> ok
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_5_loop();
        _ -> {}
    end
end,
{} = Fun_5(),
    erlang:put('modes2', []),
    erlang:put('i', 0),
    Fun_6 = fun Fun_6_loop() ->
    case (erlang:get('i') < length(erlang:get('keys2'))) of
        true ->
            K_4 = (case erlang:is_map(erlang:get('keys2')) of true -> maps:get(erlang:get('i'), erlang:get('keys2'), nil); _ -> lists:nth(erlang:get('i') + 1, erlang:get('keys2')) end),
            case (maps:get(K_4, erlang:get('counts2'), nil) == erlang:get('max2')) of
        true -> erlang:put('modes2', lists:append(erlang:get('modes2'), [K_4]));
        _ -> ok
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_6_loop();
        _ -> {}
    end
end,
{} = Fun_6(),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [erlang:get('modes2')]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
