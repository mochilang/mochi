#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, connect/1, login/3, changedir/2, list/1, retrieve/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (0f7fd10226) on 2025-08-02 20:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

connect(Hostport) ->
    try
        io:format("~ts~n", [("Connected to " ++ Hostport)]),
        #{"dir" => "/"}
    catch {return, Ret} -> Ret end.

login(Conn, User, Pass) ->
    try
        io:format("~ts~n", [("Logged in as " ++ User)]),
        nil
    catch {return, Ret} -> Ret end.

changedir(Conn_2, Dir) ->
    try
        Conn_3 = maps:put("dir", Dir, Conn_2),
        Conn_3
    catch {return, Ret} -> Ret end.

list(Conn_4) ->
    try
        Names = maps:get(maps:get("dir", Conn_4, nil), erlang:get('serverNames'), nil),
        DataDir = maps:get(maps:get("dir", Conn_4, nil), erlang:get('serverData'), nil),
        Out = [],
        Fun = fun Fun_loop(List, Conn_4, DataDir, Names, Out) ->
    case List of
        [] -> {Conn_4, DataDir, Names, Out};
        [Name|Name_rest] ->
            Content = maps:get(Name, DataDir, nil),
            Out_2 = lists:append(Out, [#{"name" => Name, "size" => length(Content), "kind" => "file"}]),
            Fun_loop(Name_rest, Conn_4, DataDir, Names, Out_2)
    end
end,
{Conn_4, DataDir, Names, Out_2} = Fun(Names, Conn_4, DataDir, Names, Out),
        Out_2
    catch {return, Ret} -> Ret end.

retrieve(Conn_5, Name_2) ->
    try
        maps:get(Name_2, maps:get(maps:get("dir", Conn_5, nil), erlang:get('serverData'), nil), nil)
    catch {return, Ret} -> Ret end.

main() ->
    try
        Conn_6 = connect("localhost:21"),
        login(Conn_6, "anonymous", "anonymous"),
        changedir(Conn_6, "pub"),
        io:format("~p~n", [maps:get("dir", Conn_6, nil)]),
        Files = list(Conn_6),
        Fun_2 = fun Fun_2_loop(List, Conn_6, Files) ->
    case List of
        [] -> {Conn_6, Files};
        [F|F_rest] ->
            io:format("~ts~n", [((maps:get("name", F, nil) ++ " ") ++ lists:flatten(io_lib:format("~p", [maps:get("size", F, nil)])))]),
            Fun_2_loop(F_rest, Conn_6, Files)
    end
end,
{Conn_6, Files} = Fun_2(Files, Conn_6, Files),
        Data = retrieve(Conn_6, "somefile.bin"),
        io:format("~ts~n", [(("Wrote " ++ lists:flatten(io_lib:format("~p", [length(Data)]))) ++ " bytes to somefile.bin")]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('serverData', #{"pub" => #{"somefile.bin" => "This is a file from the FTP server.", "readme.txt" => "Hello from ftp."}}),
    erlang:put('serverNames', #{"pub" => ["somefile.bin", "readme.txt"]}),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
