#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pad/1, hail/2, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

pad(N) ->
    try
        S = lists:flatten(io_lib:format("~p", [N])),
        Fun = fun Fun_loop(N, S) ->
    case (length(S) < 4) of
        true ->
            S_2 = (" " ++ S),
            Fun_loop(N, S_2);
        _ -> {N, S}
    end
end,
{N, S_2} = Fun(N, S),
        S_2
    catch {return, Ret} -> Ret end.

hail(Seq, Cnt) ->
    try
        Out = pad(Seq),
        case (Seq /= 1) of
        true -> Cnt_2 = (Cnt + 1),
            case ((Seq rem 2) /= 0) of
        true -> Seq_2 = ((3 * Seq) + 1),
            Seq_4 = Seq_2;
        _ -> Seq_3 = (Seq div 2),
            Seq_4 = Seq_3
    end,
            Cnt_3 = Cnt_2,
            Seq_5 = Seq_4;
        _ -> Cnt_3 = Cnt,
            Seq_5 = Seq
    end,
        #{"seq" => Seq_5, "cnt" => Cnt_3, "out" => Out}
    catch {return, Ret} -> Ret end.

main() ->
    try
        Seqs = [],
        Cnts = [],
        Fun_2 = fun Fun_2_loop(List, Cnts, Seqs) ->
    case List of
        [] -> {Cnts, Seqs};
        [I|I_rest] ->
            Seqs_2 = lists:append(Seqs, [(I + 1)]),
            Cnts_2 = lists:append(Cnts, [0]),
            Fun_2_loop(I_rest, Cnts_2, Seqs_2)
    end
end,
{Cnts_2, Seqs_2} = Fun_2(lists:seq(0, (12) - 1), Cnts, Seqs),
        Fun_5 = fun Fun_5_loop(Cnts_2, Seqs_2) ->
    case true of
        true ->
            try
                Line = "",
                I_2 = 0,
                Fun_3 = fun Fun_3_loop(Cnts_2, I_2, Line, Seqs_2) ->
    case (I_2 < 12) of
        true ->
            Res = hail(lists:nth(I_2 + 1, Seqs_2), lists:nth(I_2 + 1, Cnts_2)),
            Seqs_3 = lists:sublist(Seqs_2, I_2) ++ [maps:get("seq", Res, nil)] ++ lists:nthtail(I_2 + 1, Seqs_2),
            Cnts_3 = lists:sublist(Cnts_2, I_2) ++ [maps:get("cnt", Res, nil)] ++ lists:nthtail(I_2 + 1, Cnts_2),
            Line_2 = (Line ++ maps:get("out", Res, nil)),
            I_3 = (I_2 + 1),
            Fun_3_loop(Cnts_3, I_3, Line_2, Seqs_3);
        _ -> {Cnts_2, I_2, Line, Seqs_2}
    end
end,
{Cnts_3, I_3, Line_2, Seqs_3} = Fun_3(Cnts_2, I_2, Line, Seqs_2),
                io:format("~ts~n", [Line_2]),
                Done = true,
                J = 0,
                Fun_4 = fun Fun_4_loop(Cnts_3, Done, I_3, J, Line_2, Seqs_3) ->
    case (J < 12) of
        true ->
            case (lists:nth(J + 1, Seqs_3) /= 1) of
        true -> Done_2 = false,
            Done_3 = Done_2;
        _ -> Done_3 = Done
    end,
            J_2 = (J + 1),
            Fun_4_loop(Cnts_3, Done_3, I_3, J_2, Line_2, Seqs_3);
        _ -> {Cnts_3, Done, I_3, J, Line_2, Seqs_3}
    end
end,
{Cnts_3, Done_3, I_3, J_2, Line_2, Seqs_3} = Fun_4(Cnts_3, Done, I_3, J, Line_2, Seqs_3),
                case (Done_3 /= nil) of
        true -> throw(break);
        _ -> ok
    end,
                Fun_5_loop(Cnts_3, Seqs_3)
            catch
                {continue, C0, C1} -> Fun_5_loop(C0, C1);
                break -> {Cnts_2, Seqs_2}
            end;
        _ -> {Cnts_2, Seqs_2}
    end
end,
{Cnts_3, Seqs_3} = Fun_5(Cnts_2, Seqs_2),
        io:format("~ts~n", [""]),
        io:format("~ts~n", ["COUNTS:"]),
        Counts = "",
        K = 0,
        Fun_6 = fun Fun_6_loop(Cnts_3, Counts, K, Seqs_3) ->
    case (K < 12) of
        true ->
            Counts_2 = (Counts ++ pad(lists:nth(K + 1, Cnts_3))),
            K_2 = (K + 1),
            Fun_6_loop(Cnts_3, Counts_2, K_2, Seqs_3);
        _ -> {Cnts_3, Counts, K, Seqs_3}
    end
end,
{Cnts_3, Counts_2, K_2, Seqs_3} = Fun_6(Cnts_3, Counts, K, Seqs_3),
        io:format("~ts~n", [Counts_2]),
        io:format("~ts~n", [""]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('jobs', 12),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
