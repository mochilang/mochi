#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow2/1, rulebit/2, evolve/2]).

% Generated by Mochi transpiler v0.10.52 (d8824d4320) on 2025-08-02 10:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

pow2(K) ->
    try
        V = 1,
        I = 0,
        Fun = fun Fun_loop(I, K, V) ->
    case (I < K) of
        true ->
            V_2 = (V * 2),
            I_2 = (I + 1),
            Fun_loop(I_2, K, V_2);
        _ -> {I, K, V}
    end
end,
{I_2, K, V_2} = Fun(I, K, V),
        V_2
    catch {return, Ret} -> Ret end.

rulebit(RuleNum, Idx) ->
    try
        R = RuleNum,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Idx, R, RuleNum) ->
    case (I_3 < Idx) of
        true ->
            R_2 = (R div 2),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Idx, R_2, RuleNum);
        _ -> {I_3, Idx, R, RuleNum}
    end
end,
{I_4, Idx, R_2, RuleNum} = Fun_2(I_3, Idx, R, RuleNum),
        (R_2 rem 2)
    catch {return, Ret} -> Ret end.

evolve(State, RuleNum_2) ->
    try
        Out = [],
        P = 0,
        Fun_5 = fun Fun_5_loop(Out, P, RuleNum_2, State) ->
    case (P < 10) of
        true ->
            B = 0,
            Q = 7,
            Fun_4 = fun Fun_4_loop(B, Out, P, Q, RuleNum_2, State) ->
    case (Q >= 0) of
        true ->
            St = State,
            B_2 = (B + (lists:nth(0 + 1, St) * pow2(Q))),
            Next = [],
            I_5 = 0,
            Fun_3 = fun Fun_3_loop(B_2, I_5, Next, Out, P, Q, RuleNum_2, St, State) ->
    case (I_5 < 64) of
        true ->
            Lidx = (I_5 - 1),
            case (Lidx < 0) of
        true -> Lidx_2 = (64 - 1),
            Lidx_3 = Lidx_2;
        _ -> Lidx_3 = Lidx
    end,
            Left = lists:nth(Lidx_3 + 1, St),
            Center = lists:nth(I_5 + 1, St),
            Ridx = (I_5 + 1),
            case (Ridx >= 64) of
        true -> Ridx_2 = 0,
            Ridx_3 = Ridx_2;
        _ -> Ridx_3 = Ridx
    end,
            Right = lists:nth(Ridx_3 + 1, St),
            Index = (((Left * 4) + (Center * 2)) + Right),
            Next_2 = lists:append(Next, [rulebit(RuleNum_2, Index)]),
            I_6 = (I_5 + 1),
            Fun_3_loop(B_2, I_6, Next_2, Out, P, Q, RuleNum_2, St, State);
        _ -> {B_2, I_5, Next, Out, P, Q, RuleNum_2, St, State}
    end
end,
{B_2, I_6, Next_2, Out, P, Q, RuleNum_2, St, State} = Fun_3(B_2, I_5, Next, Out, P, Q, RuleNum_2, St, State),
            State_2 = Next_2,
            Q_2 = (Q - 1),
            Fun_4_loop(B_2, Out, P, Q_2, RuleNum_2, State_2);
        _ -> {B, Out, P, Q, RuleNum_2, State}
    end
end,
{B_2, Out, P, Q_2, RuleNum_2, State_2} = Fun_4(B, Out, P, Q, RuleNum_2, State),
            Out_2 = lists:append(Out, [B_2]),
            P_2 = (P + 1),
            Fun_5_loop(Out_2, P_2, RuleNum_2, State_2);
        _ -> {Out, P, RuleNum_2, State}
    end
end,
{Out_2, P_2, RuleNum_2, State_2} = Fun_5(Out, P, RuleNum_2, State),
        {Out_2, State_2}
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('n', 64),
    erlang:put('init', []),
    erlang:put('i', 0),
    Fun_6 = fun Fun_6_loop() ->
    case (erlang:get('i') < 64) of
        true ->
            erlang:put('init', lists:append(erlang:get('init'), [0])),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_6_loop();
        _ -> {}
    end
end,
{} = Fun_6(),
    Init = erlang:get('init'),
    Init_2 = lists:sublist(Init, 0) ++ [1] ++ lists:nthtail(0 + 1, Init),
    erlang:put('init', Init_2),
    erlang:put('bytes', evolve(erlang:get('init'), 30)),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [erlang:get('bytes')]))]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
