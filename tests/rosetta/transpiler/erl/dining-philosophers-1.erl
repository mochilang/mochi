#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (34844ab2bf) on 2025-07-28 07:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main() ->
    try
        Philosophers = ["Aristotle", "Kant", "Spinoza", "Marx", "Russell"],
        Hunger = 3,
        io:format("~ts~n", ["table empty"]),
        Fun = fun Fun_loop(List, Hunger, Philosophers) ->
    case List of
        [] -> {Hunger, Philosophers};
        [P|P_rest] ->
            io:format("~ts~n", [(P ++ " seated")]),
            Fun_loop(P_rest, Hunger, Philosophers)
    end
end,
{Hunger, Philosophers} = Fun(Philosophers, Hunger, Philosophers),
        Idx = 0,
        Fun_3 = fun Fun_3_loop(Hunger, Idx, Philosophers) ->
    case (Idx < length(Philosophers)) of
        true ->
            Name = lists:nth(Idx + 1, Philosophers),
            H = 0,
            Fun_2 = fun Fun_2_loop(H, Hunger, Idx, Name, Philosophers) ->
    case (H < Hunger) of
        true ->
            io:format("~ts~n", [(Name ++ " hungry")]),
            io:format("~ts~n", [(Name ++ " eating")]),
            io:format("~ts~n", [(Name ++ " thinking")]),
            H_2 = (H + 1),
            Fun_2_loop(H_2, Hunger, Idx, Name, Philosophers);
        _ -> {H, Hunger, Idx, Name, Philosophers}
    end
end,
{H_2, Hunger, Idx, Name, Philosophers} = Fun_2(H, Hunger, Idx, Name, Philosophers),
            io:format("~ts~n", [(Name ++ " satisfied")]),
            io:format("~ts~n", [(Name ++ " left the table")]),
            Idx_2 = (Idx + 1),
            Fun_3_loop(Hunger, Idx_2, Philosophers);
        _ -> {Hunger, Idx, Philosophers}
    end
end,
{Hunger, Idx_2, Philosophers} = Fun_3(Hunger, Idx, Philosophers),
        io:format("~ts~n", ["table empty"]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
