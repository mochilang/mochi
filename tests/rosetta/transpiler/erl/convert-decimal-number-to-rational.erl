#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gcd/2, parserational/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (4e0e7fcd7f) on 2025-07-26 23:05 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

gcd(A, B) ->
    try
        X = A,
        case (X < 0) of
        true -> X_2 = -X,
            X_3 = X_2;
        _ -> X_3 = X
    end,
        Y = B,
        case (Y < 0) of
        true -> Y_2 = -Y,
            Y_3 = Y_2;
        _ -> Y_3 = Y
    end,
        Fun = fun Fun_loop(A, B, X_3, Y_3) ->
    case (Y_3 /= 0) of
        true ->
            T = (X_3 rem Y_3),
            X_4 = Y_3,
            Y_4 = T,
            Fun_loop(A, B, X_4, Y_4);
        _ -> {A, B, X_3, Y_3}
    end
end,
{A, B, X_4, Y_4} = Fun(A, B, X_3, Y_3),
        X_4
    catch {return, Ret} -> Ret end.

parserational(S) ->
    try
        IntPart = 0,
        FracPart = 0,
        Denom = 1,
        AfterDot = false,
        I = 0,
        Fun_2 = fun Fun_2_loop(AfterDot, Denom, FracPart, I, IntPart, S) ->
    case (I < length(S)) of
        true ->
            Ch = string:substr(S, I + 1, ((I + 1) - I)),
            case (Ch == ".") of
        true -> AfterDot_2 = true,
            AfterDot_3 = AfterDot_2,
            D_2 = nil,
            Denom_4 = Denom,
            FracPart_4 = FracPart,
            IntPart_4 = IntPart;
        _ -> D = (mochi_to_int(Ch) - mochi_to_int("0")),
            case mochi_not(AfterDot) of
        true -> IntPart_2 = ((IntPart * 10) + D),
            Denom_3 = Denom,
            FracPart_3 = FracPart,
            IntPart_3 = IntPart_2;
        _ -> FracPart_2 = ((FracPart * 10) + D),
            Denom_2 = (Denom * 10),
            Denom_3 = Denom_2,
            FracPart_3 = FracPart_2,
            IntPart_3 = IntPart
    end,
            AfterDot_3 = AfterDot,
            D_2 = D,
            Denom_4 = Denom_3,
            FracPart_4 = FracPart_3,
            IntPart_4 = IntPart_3
    end,
            I_2 = (I + 1),
            Fun_2_loop(AfterDot_3, Denom_4, FracPart_4, I_2, IntPart_4, S);
        _ -> {AfterDot, Denom, FracPart, I, IntPart, S}
    end
end,
{AfterDot_3, Denom_4, FracPart_4, I_2, IntPart_4, S} = Fun_2(AfterDot, Denom, FracPart, I, IntPart, S),
        Num = ((IntPart_4 * Denom_4) + FracPart_4),
        G = gcd(Num, Denom_4),
        #{"num" => mochi_to_int((Num / G)), "den" => mochi_to_int((Denom_4 / G))}
    catch {return, Ret} -> Ret end.

main() ->
    try
        Inputs = ["0.9054054", "0.518518", "0.75"],
        Fun_3 = fun Fun_3_loop(List, Inputs) ->
    case List of
        [] -> {Inputs};
        [S_2|S_2_rest] ->
            R = parserational(S_2),
            io:format("~ts~n", [((((S_2 ++ " = ") ++ lists:flatten(io_lib:format("~p", [maps:get("num", R, nil)]))) ++ "/") ++ lists:flatten(io_lib:format("~p", [maps:get("den", R, nil)])))]),
            Fun_3_loop(S_2_rest, Inputs)
    end
end,
{Inputs} = Fun_3(Inputs, Inputs),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
