#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, node/3, main/0]).

% Generated by Mochi transpiler v0.10.47 (eaacde736f) on 2025-07-28 11:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

node(Value, Next, Prev) ->
    try
        #{"value" => Value, "next" => Next, "prev" => Prev}
    catch {return, Ret} -> Ret end.

main() ->
    try
        A = node("A", nil, nil),
        B = node("B", nil, A),
        A_2 = maps:put("next", B, A),
        C = node("C", nil, B),
        B_2 = maps:put("next", C, B),
        P = A_2,
        Line = "",
        Fun = fun Fun_loop(A_2, B_2, C, Line, P) ->
    case (P /= nil) of
        true ->
            Line_2 = (Line ++ maps:get("value", P, nil)),
            P_2 = maps:get("next", P, nil),
            case (P_2 /= nil) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            Fun_loop(A_2, B_2, C, Line_4, P_2);
        _ -> {A_2, B_2, C, Line, P}
    end
end,
{A_2, B_2, C, Line_4, P_2} = Fun(A_2, B_2, C, Line, P),
        io:format("~ts~n", [Line_4]),
        P_3 = C,
        Line_5 = "",
        Fun_2 = fun Fun_2_loop(A_2, B_2, C, Line_5, P_3) ->
    case (P_3 /= nil) of
        true ->
            Line_6 = (Line_5 ++ maps:get("value", P_3, nil)),
            P_4 = maps:get("prev", P_3, nil),
            case (P_4 /= nil) of
        true -> Line_7 = (Line_6 ++ " "),
            Line_8 = Line_7;
        _ -> Line_8 = Line_6
    end,
            Fun_2_loop(A_2, B_2, C, Line_8, P_4);
        _ -> {A_2, B_2, C, Line_5, P_3}
    end
end,
{A_2, B_2, C, Line_8, P_4} = Fun_2(A_2, B_2, C, Line_5, P_3),
        io:format("~ts~n", [Line_8]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
