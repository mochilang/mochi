#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ln/1, expf/1, powf/2, lanczos7/1]).

% Generated by Mochi transpiler v0.10.55 (26b9f6045a) on 2025-08-02 23:10 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

ln(X) ->
    try
        K = 0,
        V = X,
        Fun = fun Fun_loop(K, V, X) ->
    case (V >= 2) of
        true ->
            V_2 = mochi_safe_div(V, 2),
            K_2 = (K + 1),
            Fun_loop(K_2, V_2, X);
        _ -> {K, V, X}
    end
end,
{K_2, V_2, X} = Fun(K, V, X),
        Fun_2 = fun Fun_2_loop(K_2, V_2, X) ->
    case (V_2 < 1) of
        true ->
            V_3 = mochi_safe_mul(V_2, 2),
            K_3 = (K_2 - 1),
            Fun_2_loop(K_3, V_3, X);
        _ -> {K_2, V_2, X}
    end
end,
{K_3, V_3, X} = Fun_2(K_2, V_2, X),
        Z = mochi_safe_div((V_3 - 1), (V_3 + 1)),
        Zpow = Z,
        Sum = Z,
        I = 3,
        Fun_3 = fun Fun_3_loop(I, K_3, Sum, V_3, X, Z, Zpow) ->
    case (I =< 9) of
        true ->
            Zpow_2 = ((Zpow * Z) * Z),
            Sum_2 = (Sum + mochi_safe_div(Zpow_2, float(I))),
            I_2 = (I + 2),
            Fun_3_loop(I_2, K_3, Sum_2, V_3, X, Z, Zpow_2);
        _ -> {I, K_3, Sum, V_3, X, Z, Zpow}
    end
end,
{I_2, K_3, Sum_2, V_3, X, Z, Zpow_2} = Fun_3(I, K_3, Sum, V_3, X, Z, Zpow),
        Ln2 = 0.6931471805599453,
        (mochi_safe_mul(K_3, 0.6931471805599453) + mochi_safe_mul(2, Sum_2))
    catch {return, Ret} -> Ret end.

expf(X_2) ->
    try
        Term = 1,
        Sum_3 = 1,
        I_3 = 1,
        Fun_4 = fun Fun_4_loop(I_3, Sum_3, Term, X_2) ->
    case (I_3 < 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X_2), float(I_3)),
            Sum_4 = (Sum_3 + Term_2),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Sum_4, Term_2, X_2);
        _ -> {I_3, Sum_3, Term, X_2}
    end
end,
{I_4, Sum_4, Term_2, X_2} = Fun_4(I_3, Sum_3, Term, X_2),
        Sum_4
    catch {return, Ret} -> Ret end.

powf(Base, Exp) ->
    try
        expf(mochi_safe_mul(Exp, ln(Base)))
    catch {return, Ret} -> Ret end.

lanczos7(Z_2) ->
    try
        T = (Z_2 + 6.5),
        X_3 = ((((((((0.9999999999998099 + mochi_safe_div(676.5203681218851, Z_2)) - mochi_safe_div(1259.1392167224028, (Z_2 + 1))) + mochi_safe_div(771.3234287776531, (Z_2 + 2))) - mochi_safe_div(176.6150291621406, (Z_2 + 3))) + mochi_safe_div(12.507343278686905, (Z_2 + 4))) - mochi_safe_div(0.13857109526572012, (Z_2 + 5))) + mochi_safe_div(9.984369578019572e-06, (Z_2 + 6))) + mochi_safe_div(1.5056327351493116e-07, (Z_2 + 7))),
        mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(2.5066282746310002, powf(T, (Z_2 - 0.5))), powf(2.718281828459045, -T)), X_3)
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('xs', [-0.5, 0.1, 0.5, 1, 1.5, 2, 3, 10, 140, 170]),
    Fun_5 = fun Fun_5_loop(List) ->
    case List of
        [] -> {};
        [X_4|X_4_rest] ->
            io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [X_4])) ++ " ") ++ lists:flatten(io_lib:format("~p", [lanczos7(X_4)])))]),
            Fun_5_loop(X_4_rest)
    end
end,
{} = Fun_5(erlang:get('xs')),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
