#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, join/2, sentencetype/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (ba50ce8564) on 2025-07-28 04:48 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, Ret} -> Ret end.

join(Xs, Sep) ->
    try
        Res = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Res, Sep, Xs) ->
    case (I_3 < length(Xs)) of
        true ->
            case (I_3 > 0) of
        true -> Res_2 = (Res ++ Sep),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Res_4 = (Res_3 ++ lists:nth(I_3 + 1, Xs)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Res_4, Sep, Xs);
        _ -> {I_3, Res, Sep, Xs}
    end
end,
{I_4, Res_4, Sep, Xs} = Fun_2(I_3, Res, Sep, Xs),
        Res_4
    catch {return, Ret} -> Ret end.

sentencetype(S_2) ->
    try
        case (length(S_2) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Types = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, S_2, Types) ->
    case (I_5 < length(S_2)) of
        true ->
            Ch_2 = string:substr(S_2, I_5 + 1, ((I_5 + 1) - I_5)),
            case (Ch_2 == "?") of
        true -> Types_2 = lists:append(Types, ["Q"]),
            Types_7 = Types_2;
        _ -> case (Ch_2 == "!") of
        true -> Types_3 = lists:append(Types, ["E"]),
            Types_6 = Types_3;
        _ -> case (Ch_2 == ".") of
        true -> Types_4 = lists:append(Types, ["S"]),
            Types_5 = Types_4;
        _ -> Types_5 = Types
    end,
            Types_6 = Types_5
    end,
            Types_7 = Types_6
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, S_2, Types_7);
        _ -> {I_5, S_2, Types}
    end
end,
{I_6, S_2, Types_7} = Fun_3(I_5, S_2, Types),
        Last = string:substr(S_2, (length(S_2) - 1) + 1, (length(S_2) - (length(S_2) - 1))),
        case (mochi_index_of("?!.", Last) == -1) of
        true -> Types_8 = lists:append(Types_7, ["N"]),
            Types_9 = Types_8;
        _ -> Types_9 = Types_7
    end,
        join(Types_9, "|")
    catch {return, Ret} -> Ret end.

main() ->
    try
        S_3 = "hi there, how are you today? I'd like to present to you the washing machine 9001. You have been nominated to win one of these! Just make sure you don't break it",
        Result = sentencetype(S_3),
        io:format("~ts~n", [Result]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
