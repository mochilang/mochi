#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, dot/2, main/0]).

% Generated by Mochi transpiler v0.10.42 (b3f99e79fa) on 2025-07-28 08:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

dot(X, Y) ->
    try
        case (length(X) /= length(Y)) of
        true -> throw({return, #{"value" => 0, "ok" => false}});
        _ -> ok
    end,
        Sum = 0,
        I = 0,
        Fun = fun Fun_loop(I, Sum, X, Y) ->
    case (I < length(X)) of
        true ->
            Sum_2 = (Sum + (lists:nth(I + 1, X) * lists:nth(I + 1, Y))),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, X, Y);
        _ -> {I, Sum, X, Y}
    end
end,
{I_2, Sum_2, X, Y} = Fun(I, Sum, X, Y),
        #{"value" => Sum_2, "ok" => true}
    catch {return, Ret} -> Ret end.

main() ->
    try
        R = dot([1, 3, -5], [4, -2, -1]),
        case mochi_not(maps:get("ok", R, nil)) of
        true -> io:format("~ts~n", ["incompatible lengths"]);
        _ -> io:format("~ts~n", [lists:flatten(io_lib:format("~p", [maps:get("value", R, nil)]))])
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
