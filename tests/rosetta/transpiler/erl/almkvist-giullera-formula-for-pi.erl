#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bigtrim/1, bigfromint/1, bigcmp/2, bigadd/2, bigsub/2, bigmulsmall/2, bigmulbig/2, bigmulpow10/2, bigdivsmall/2, bigtostring/1, repeat/2, sortints/1, primesupto/1, factorialexp/2, factorsmall/2, computeip/2, formatterm/2, bigabsdiff/2, main/0]).

% Generated by Mochi transpiler v0.10.40 (029b538ca5) on 2025-07-25 15:20 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

bigtrim(A) ->
    try
        N = length(A),
        Fun = fun Fun_loop(A, N) ->
    case ((N > 1) andalso (lists:nth((N - 1) + 1, A) == 0)) of
        true ->
            A_2 = lists:sublist(A, 0 + 1, ((N - 1) - 0)),
            N_2 = (N - 1),
            Fun_loop(A_2, N_2);
        _ -> {A, N}
    end
end,
{A_2, N_2} = Fun(A, N),
        A_2
    catch {return, Ret} -> Ret end.

bigfromint(X) ->
    try
        case (X == 0) of
        true -> throw({return, [0]});
        _ -> ok
    end,
        Digits = [],
        N_3 = X,
        Fun_2 = fun Fun_2_loop(Digits, N_3, X) ->
    case (N_3 > 0) of
        true ->
            Digits_2 = lists:append(Digits, [(N_3 rem 10)]),
            N_4 = (N_3 div 10),
            Fun_2_loop(Digits_2, N_4, X);
        _ -> {Digits, N_3, X}
    end
end,
{Digits_2, N_4, X} = Fun_2(Digits, N_3, X),
        Digits_2
    catch {return, Ret} -> Ret end.

bigcmp(A_3, B) ->
    try
        case (length(A_3) > length(B)) of
        true -> throw({return, 1});
        _ -> ok
    end,
        case (length(A_3) < length(B)) of
        true -> throw({return, -1});
        _ -> ok
    end,
        I = (length(A_3) - 1),
        Fun_3 = fun Fun_3_loop(A_3, B, I) ->
    case (I >= 0) of
        true ->
            case (lists:nth(I + 1, A_3) > lists:nth(I + 1, B)) of
        true -> throw({return, 1});
        _ -> ok
    end,
            case (lists:nth(I + 1, A_3) < lists:nth(I + 1, B)) of
        true -> throw({return, -1});
        _ -> ok
    end,
            I_2 = (I - 1),
            Fun_3_loop(A_3, B, I_2);
        _ -> {A_3, B, I}
    end
end,
{A_3, B, I_2} = Fun_3(A_3, B, I),
        0
    catch {return, Ret} -> Ret end.

bigadd(A_4, B_2) ->
    try
        Res = [],
        Carry = 0,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(A_4, B_2, Carry, I_3, Res) ->
    case (((I_3 < length(A_4)) orelse (I_3 < length(B_2))) orelse (Carry > 0)) of
        true ->
            Av = 0,
            case (I_3 < length(A_4)) of
        true -> Av_2 = lists:nth(I_3 + 1, A_4),
            Av_3 = Av_2;
        _ -> Av_3 = Av
    end,
            Bv = 0,
            case (I_3 < length(B_2)) of
        true -> Bv_2 = lists:nth(I_3 + 1, B_2),
            Bv_3 = Bv_2;
        _ -> Bv_3 = Bv
    end,
            S = ((Av_3 + Bv_3) + Carry),
            Res_2 = lists:append(Res, [(S rem 10)]),
            Carry_2 = (S div 10),
            I_4 = (I_3 + 1),
            Fun_4_loop(A_4, B_2, Carry_2, I_4, Res_2);
        _ -> {A_4, B_2, Carry, I_3, Res}
    end
end,
{A_4, B_2, Carry_2, I_4, Res_2} = Fun_4(A_4, B_2, Carry, I_3, Res),
        bigtrim(Res_2)
    catch {return, Ret} -> Ret end.

bigsub(A_5, B_3) ->
    try
        Res_3 = [],
        Borrow = 0,
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(A_5, B_3, Borrow, I_5, Res_3) ->
    case (I_5 < length(A_5)) of
        true ->
            Av_4 = lists:nth(I_5 + 1, A_5),
            Bv_4 = 0,
            case (I_5 < length(B_3)) of
        true -> Bv_5 = lists:nth(I_5 + 1, B_3),
            Bv_6 = Bv_5;
        _ -> Bv_6 = Bv_4
    end,
            Diff = ((Av_4 - Bv_6) - Borrow),
            case (Diff < 0) of
        true -> Diff_2 = (Diff + 10),
            Borrow_2 = 1,
            Borrow_4 = Borrow_2,
            Diff_3 = Diff_2;
        _ -> Borrow_3 = 0,
            Borrow_4 = Borrow_3,
            Diff_3 = Diff
    end,
            Res_4 = lists:append(Res_3, [Diff_3]),
            I_6 = (I_5 + 1),
            Fun_5_loop(A_5, B_3, Borrow_4, I_6, Res_4);
        _ -> {A_5, B_3, Borrow, I_5, Res_3}
    end
end,
{A_5, B_3, Borrow_4, I_6, Res_4} = Fun_5(A_5, B_3, Borrow, I_5, Res_3),
        bigtrim(Res_4)
    catch {return, Ret} -> Ret end.

bigmulsmall(A_6, M) ->
    try
        case (M == 0) of
        true -> throw({return, [0]});
        _ -> ok
    end,
        Res_5 = [],
        Carry_3 = 0,
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(A_6, Carry_3, I_7, M, Res_5) ->
    case (I_7 < length(A_6)) of
        true ->
            Prod = ((lists:nth(I_7 + 1, A_6) * M) + Carry_3),
            Res_6 = lists:append(Res_5, [(Prod rem 10)]),
            Carry_4 = (Prod div 10),
            I_8 = (I_7 + 1),
            Fun_6_loop(A_6, Carry_4, I_8, M, Res_6);
        _ -> {A_6, Carry_3, I_7, M, Res_5}
    end
end,
{A_6, Carry_4, I_8, M, Res_6} = Fun_6(A_6, Carry_3, I_7, M, Res_5),
        Fun_7 = fun Fun_7_loop(A_6, Carry_4, I_8, M, Res_6) ->
    case (Carry_4 > 0) of
        true ->
            Res_7 = lists:append(Res_6, [(Carry_4 rem 10)]),
            Carry_5 = (Carry_4 div 10),
            Fun_7_loop(A_6, Carry_5, I_8, M, Res_7);
        _ -> {A_6, Carry_4, I_8, M, Res_6}
    end
end,
{A_6, Carry_5, I_8, M, Res_7} = Fun_7(A_6, Carry_4, I_8, M, Res_6),
        bigtrim(Res_7)
    catch {return, Ret} -> Ret end.

bigmulbig(A_7, B_4) ->
    try
        Res_8 = [],
        I_9 = 0,
        Fun_8 = fun Fun_8_loop(A_7, B_4, I_9, Res_8) ->
    case (I_9 < (length(A_7) + length(B_4))) of
        true ->
            Res_9 = lists:append(Res_8, [0]),
            I_10 = (I_9 + 1),
            Fun_8_loop(A_7, B_4, I_10, Res_9);
        _ -> {A_7, B_4, I_9, Res_8}
    end
end,
{A_7, B_4, I_10, Res_9} = Fun_8(A_7, B_4, I_9, Res_8),
        I_11 = 0,
        Fun_11 = fun Fun_11_loop(A_7, B_4, I_11, Res_9) ->
    case (I_11 < length(A_7)) of
        true ->
            Carry_6 = 0,
            J = 0,
            Fun_9 = fun Fun_9_loop(A_7, B_4, Carry_6, I_11, J, Res_9) ->
    case (J < length(B_4)) of
        true ->
            Idx = (I_11 + J),
            Prod_2 = ((lists:nth(Idx + 1, Res_9) + (lists:nth(I_11 + 1, A_7) * lists:nth(J + 1, B_4))) + Carry_6),
            Res_10 = lists:sublist(Res_9, Idx) ++ [(Prod_2 rem 10)] ++ lists:nthtail(Idx + 1, Res_9),
            Carry_7 = (Prod_2 div 10),
            J_2 = (J + 1),
            Fun_9_loop(A_7, B_4, Carry_7, I_11, J_2, Res_10);
        _ -> {A_7, B_4, Carry_6, I_11, J, Res_9}
    end
end,
{A_7, B_4, Carry_7, I_11, J_2, Res_10} = Fun_9(A_7, B_4, Carry_6, I_11, J, Res_9),
            Idx_2 = (I_11 + length(B_4)),
            Fun_10 = fun Fun_10_loop(A_7, B_4, Carry_7, I_11, Idx_2, J_2, Res_10) ->
    case (Carry_7 > 0) of
        true ->
            Prod_3 = (lists:nth(Idx_2 + 1, Res_10) + Carry_7),
            Res_11 = lists:sublist(Res_10, Idx_2) ++ [(Prod_3 rem 10)] ++ lists:nthtail(Idx_2 + 1, Res_10),
            Carry_8 = (Prod_3 div 10),
            Idx_3 = (Idx_2 + 1),
            Fun_10_loop(A_7, B_4, Carry_8, I_11, Idx_3, J_2, Res_11);
        _ -> {A_7, B_4, Carry_7, I_11, Idx_2, J_2, Res_10}
    end
end,
{A_7, B_4, Carry_8, I_11, Idx_3, J_2, Res_11} = Fun_10(A_7, B_4, Carry_7, I_11, Idx_2, J_2, Res_10),
            I_12 = (I_11 + 1),
            Fun_11_loop(A_7, B_4, I_12, Res_11);
        _ -> {A_7, B_4, I_11, Res_9}
    end
end,
{A_7, B_4, I_12, Res_11} = Fun_11(A_7, B_4, I_11, Res_9),
        bigtrim(Res_11)
    catch {return, Ret} -> Ret end.

bigmulpow10(A_8, K) ->
    try
        I_13 = 0,
        Fun_12 = fun Fun_12_loop(A_8, I_13, K) ->
    case (I_13 < K) of
        true ->
            A_9 = ([0] ++ A_8),
            I_14 = (I_13 + 1),
            Fun_12_loop(A_9, I_14, K);
        _ -> {A_8, I_13, K}
    end
end,
{A_9, I_14, K} = Fun_12(A_8, I_13, K),
        A_9
    catch {return, Ret} -> Ret end.

bigdivsmall(A_10, M_2) ->
    try
        Res_12 = [],
        Rem = 0,
        I_15 = (length(A_10) - 1),
        Fun_13 = fun Fun_13_loop(A_10, I_15, M_2, Rem, Res_12) ->
    case (I_15 >= 0) of
        true ->
            Cur = ((Rem * 10) + lists:nth(I_15 + 1, A_10)),
            Q = (Cur div M_2),
            Rem_2 = (Cur rem M_2),
            Res_13 = ([Q] ++ Res_12),
            I_16 = (I_15 - 1),
            Fun_13_loop(A_10, I_16, M_2, Rem_2, Res_13);
        _ -> {A_10, I_15, M_2, Rem, Res_12}
    end
end,
{A_10, I_16, M_2, Rem_2, Res_13} = Fun_13(A_10, I_15, M_2, Rem, Res_12),
        bigtrim(Res_13)
    catch {return, Ret} -> Ret end.

bigtostring(A_11) ->
    try
        S_2 = "",
        I_17 = (length(A_11) - 1),
        Fun_14 = fun Fun_14_loop(A_11, I_17, S_2) ->
    case (I_17 >= 0) of
        true ->
            S_3 = (S_2 ++ lists:flatten(io_lib:format("~p", [lists:nth(I_17 + 1, A_11)]))),
            I_18 = (I_17 - 1),
            Fun_14_loop(A_11, I_18, S_3);
        _ -> {A_11, I_17, S_2}
    end
end,
{A_11, I_18, S_3} = Fun_14(A_11, I_17, S_2),
        S_3
    catch {return, Ret} -> Ret end.

repeat(Ch, N_5) ->
    try
        S_4 = "",
        I_19 = 0,
        Fun_15 = fun Fun_15_loop(Ch, I_19, N_5, S_4) ->
    case (I_19 < N_5) of
        true ->
            S_5 = (S_4 ++ Ch),
            I_20 = (I_19 + 1),
            Fun_15_loop(Ch, I_20, N_5, S_5);
        _ -> {Ch, I_19, N_5, S_4}
    end
end,
{Ch, I_20, N_5, S_5} = Fun_15(Ch, I_19, N_5, S_4),
        S_5
    catch {return, Ret} -> Ret end.

sortints(Xs) ->
    try
        Res_14 = [],
        Tmp = Xs,
        Fun_18 = fun Fun_18_loop(Res_14, Tmp, Xs) ->
    case (length(Tmp) > 0) of
        true ->
            Min = lists:nth(0 + 1, Tmp),
            Idx_4 = 0,
            I_21 = 1,
            Fun_16 = fun Fun_16_loop(I_21, Idx_4, Min, Res_14, Tmp, Xs) ->
    case (I_21 < length(Tmp)) of
        true ->
            case (lists:nth(I_21 + 1, Tmp) < Min) of
        true -> Min_2 = lists:nth(I_21 + 1, Tmp),
            Idx_5 = I_21,
            Idx_6 = Idx_5,
            Min_3 = Min_2;
        _ -> Idx_6 = Idx_4,
            Min_3 = Min
    end,
            I_22 = (I_21 + 1),
            Fun_16_loop(I_22, Idx_6, Min_3, Res_14, Tmp, Xs);
        _ -> {I_21, Idx_4, Min, Res_14, Tmp, Xs}
    end
end,
{I_22, Idx_6, Min_3, Res_14, Tmp, Xs} = Fun_16(I_21, Idx_4, Min, Res_14, Tmp, Xs),
            Res_15 = (Res_14 ++ [Min_3]),
            Out = [],
            J_3 = 0,
            Fun_17 = fun Fun_17_loop(I_22, Idx_6, J_3, Min_3, Out, Res_15, Tmp, Xs) ->
    case (J_3 < length(Tmp)) of
        true ->
            case (J_3 /= Idx_6) of
        true -> Out_2 = (Out ++ [lists:nth(J_3 + 1, Tmp)]),
            Out_3 = Out_2;
        _ -> Out_3 = Out
    end,
            J_4 = (J_3 + 1),
            Fun_17_loop(I_22, Idx_6, J_4, Min_3, Out_3, Res_15, Tmp, Xs);
        _ -> {I_22, Idx_6, J_3, Min_3, Out, Res_15, Tmp, Xs}
    end
end,
{I_22, Idx_6, J_4, Min_3, Out_3, Res_15, Tmp, Xs} = Fun_17(I_22, Idx_6, J_3, Min_3, Out, Res_15, Tmp, Xs),
            Tmp_2 = Out_3,
            Fun_18_loop(Res_15, Tmp_2, Xs);
        _ -> {Res_14, Tmp, Xs}
    end
end,
{Res_15, Tmp_2, Xs} = Fun_18(Res_14, Tmp, Xs),
        Res_15
    catch {return, Ret} -> Ret end.

primesupto(N_6) ->
    try
        Sieve = [],
        I_23 = 0,
        Fun_19 = fun Fun_19_loop(I_23, N_6, Sieve) ->
    case (I_23 =< N_6) of
        true ->
            Sieve_2 = lists:append(Sieve, [true]),
            I_24 = (I_23 + 1),
            Fun_19_loop(I_24, N_6, Sieve_2);
        _ -> {I_23, N_6, Sieve}
    end
end,
{I_24, N_6, Sieve_2} = Fun_19(I_23, N_6, Sieve),
        P = 2,
        Fun_22 = fun Fun_22_loop(I_24, N_6, P, Sieve_2) ->
    case ((P * P) =< N_6) of
        true ->
            case lists:nth(P + 1, Sieve_2) of
        true -> M_3 = (P * P),
            Fun_20 = fun Fun_20_loop(I_24, M_3, N_6, P, Sieve_2) ->
    case (M_3 =< N_6) of
        true ->
            Sieve_3 = lists:sublist(Sieve_2, M_3) ++ [false] ++ lists:nthtail(M_3 + 1, Sieve_2),
            M_4 = (M_3 + P),
            Fun_20_loop(I_24, M_4, N_6, P, Sieve_3);
        _ -> {I_24, M_3, N_6, P, Sieve_2}
    end
end,
{I_24, M_4, N_6, P, Sieve_3} = Fun_20(I_24, M_3, N_6, P, Sieve_2),
            Fun_21 = Fun_20,
            M_5 = M_4,
            Sieve_4 = Sieve_3;
        _ -> Fun_21 = Fun_19,
            M_5 = nil,
            Sieve_4 = Sieve_2
    end,
            P_2 = (P + 1),
            Fun_22_loop(I_24, N_6, P_2, Sieve_4);
        _ -> {I_24, N_6, P, Sieve_2}
    end
end,
{I_24, N_6, P_2, Sieve_4} = Fun_22(I_24, N_6, P, Sieve_2),
        Res_16 = [],
        X_2 = 2,
        Fun_23 = fun Fun_23_loop(I_24, N_6, P_2, Res_16, Sieve_4, X_2) ->
    case (X_2 =< N_6) of
        true ->
            case lists:nth(X_2 + 1, Sieve_4) of
        true -> Res_17 = lists:append(Res_16, [X_2]),
            Res_18 = Res_17;
        _ -> Res_18 = Res_16
    end,
            X_3 = (X_2 + 1),
            Fun_23_loop(I_24, N_6, P_2, Res_18, Sieve_4, X_3);
        _ -> {I_24, N_6, P_2, Res_16, Sieve_4, X_2}
    end
end,
{I_24, N_6, P_2, Res_18, Sieve_4, X_3} = Fun_23(I_24, N_6, P_2, Res_16, Sieve_4, X_2),
        Res_18
    catch {return, Ret} -> Ret end.

factorialexp(N_7, Primes) ->
    try
        M_6 = #{},
        Fun_24 = fun Fun_24_loop(List, M_6, N_7, Primes) ->
    case List of
        [] -> {M_6, N_7, Primes};
        [P_3|P_3_rest] ->
        try
            case (P_3 > N_7) of
        true -> throw(break);
        _ -> ok
    end,
            T = N_7,
            E = 0,
            Fun_25 = fun Fun_25_loop(E, M_6, N_7, P_3, Primes, T) ->
    case (T > 0) of
        true ->
            T_2 = (T div P_3),
            E_2 = (E + T_2),
            Fun_25_loop(E_2, M_6, N_7, P_3, Primes, T_2);
        _ -> {E, M_6, N_7, P_3, Primes, T}
    end
end,
{E_2, M_6, N_7, P_3, Primes, T_2} = Fun_25(E, M_6, N_7, P_3, Primes, T),
            M_7 = maps:put(lists:flatten(io_lib:format("~p", [P_3])), E_2, M_6),
            Fun_24_loop(P_3_rest, M_7, N_7, Primes)
        catch
            {continue, C0, C1, C2} -> Fun_24_loop(P_3_rest, C0, C1, C2);
            {break, B0, B1, B2} -> {B0, B1, B2};
            break -> {M_6, N_7, Primes}
        end
    end
end,
{M_7, N_7, Primes} = Fun_24(Primes, M_6, N_7, Primes),
        M_7
    catch {return, Ret} -> Ret end.

factorsmall(X_4, Primes_2) ->
    try
        F = #{},
        N_8 = X_4,
        Fun_26 = fun Fun_26_loop(List, F, N_8, Primes_2, X_4) ->
    case List of
        [] -> {F, N_8, Primes_2, X_4};
        [P_4|P_4_rest] ->
        try
            case ((P_4 * P_4) > N_8) of
        true -> throw(break);
        _ -> ok
    end,
            C = 0,
            Fun_27 = fun Fun_27_loop(C, F, N_8, P_4, Primes_2, X_4) ->
    case ((N_8 rem P_4) == 0) of
        true ->
            C_2 = (C + 1),
            N_9 = (N_8 div P_4),
            Fun_27_loop(C_2, F, N_9, P_4, Primes_2, X_4);
        _ -> {C, F, N_8, P_4, Primes_2, X_4}
    end
end,
{C_2, F, N_9, P_4, Primes_2, X_4} = Fun_27(C, F, N_8, P_4, Primes_2, X_4),
            case (C_2 > 0) of
        true -> F_2 = maps:put(lists:flatten(io_lib:format("~p", [P_4])), C_2, F),
            F_3 = F_2;
        _ -> F_3 = F
    end,
            Fun_26_loop(P_4_rest, F_3, N_9, Primes_2, X_4)
        catch
            {continue, C0, C1, C2, C3} -> Fun_26_loop(P_4_rest, C0, C1, C2, C3);
            {break, B0, B1, B2, B3} -> {B0, B1, B2, B3};
            break -> {F, N_8, Primes_2, X_4}
        end
    end
end,
{F_3, N_9, Primes_2, X_4} = Fun_26(Primes_2, F, N_8, Primes_2, X_4),
        case (N_9 > 1) of
        true -> F_4 = maps:put(lists:flatten(io_lib:format("~p", [N_9])), (maps:get(lists:flatten(io_lib:format("~p", [N_9])), F_3, 0) + 1), F_3),
            F_5 = F_4;
        _ -> F_5 = F_3
    end,
        F_5
    catch {return, Ret} -> Ret end.

computeip(N_10, Primes_3) ->
    try
        Exps = factorialexp((6 * N_10), Primes_3),
        Fn = factorialexp(N_10, Primes_3),
        Fun_28 = fun Fun_28_loop(List, Exps, Fn, N_10, Primes_3) ->
    case List of
        [] -> {Exps, Fn, N_10, Primes_3};
        [K_2|K_2_rest] ->
            Exps_2 = lists:sublist(Exps, K_2) ++ [(maps:get(K_2, Exps, 0) - (6 * lists:nth(K_2 + 1, Fn)))] ++ lists:nthtail(K_2 + 1, Exps),
            Fun_28_loop(K_2_rest, Exps_2, Fn, N_10, Primes_3)
    end
end,
{Exps_2, Fn, N_10, Primes_3} = Fun_28(Fn, Exps, Fn, N_10, Primes_3),
        Exps_3 = lists:sublist(Exps_2, "2") ++ [(maps:get("2", Exps_2, 0) + 5)] ++ lists:nthtail("2" + 1, Exps_2),
        T2 = ((((532 * N_10) * N_10) + (126 * N_10)) + 9),
        Ft2 = factorsmall(T2, Primes_3),
        Fun_29 = fun Fun_29_loop(List, Exps_3, Fn, Ft2, N_10, Primes_3, T2) ->
    case List of
        [] -> {Exps_3, Fn, Ft2, N_10, Primes_3, T2};
        [K_3|K_3_rest] ->
            Exps_4 = lists:sublist(Exps_3, K_3) ++ [(maps:get(K_3, Exps_3, 0) + lists:nth(K_3 + 1, Ft2))] ++ lists:nthtail(K_3 + 1, Exps_3),
            Fun_29_loop(K_3_rest, Exps_4, Fn, Ft2, N_10, Primes_3, T2)
    end
end,
{Exps_4, Fn, Ft2, N_10, Primes_3, T2} = Fun_29(Ft2, Exps_3, Fn, Ft2, N_10, Primes_3, T2),
        Exps_5 = lists:sublist(Exps_4, "3") ++ [(maps:get("3", Exps_4, 0) - 1)] ++ lists:nthtail("3" + 1, Exps_4),
        Keys = [],
        Fun_30 = fun Fun_30_loop(List, Exps_5, Fn, Ft2, Keys, N_10, Primes_3, T2) ->
    case List of
        [] -> {Exps_5, Fn, Ft2, Keys, N_10, Primes_3, T2};
        [K_4|K_4_rest] ->
            Keys_2 = lists:append(Keys, [mochi_to_int(K_4)]),
            Fun_30_loop(K_4_rest, Exps_5, Fn, Ft2, Keys_2, N_10, Primes_3, T2)
    end
end,
{Exps_5, Fn, Ft2, Keys_2, N_10, Primes_3, T2} = Fun_30(Exps_5, Exps_5, Fn, Ft2, Keys, N_10, Primes_3, T2),
        Keys_3 = sortints(Keys_2),
        Res_19 = bigfromint(1),
        Fun_31 = fun Fun_31_loop(List, Exps_5, Fn, Ft2, Keys_3, N_10, Primes_3, Res_19, T2) ->
    case List of
        [] -> {Exps_5, Fn, Ft2, Keys_3, N_10, Primes_3, Res_19, T2};
        [P_5|P_5_rest] ->
            E_3 = lists:nth(lists:flatten(io_lib:format("~p", [P_5])) + 1, Exps_5),
            I_25 = 0,
            Fun_32 = fun Fun_32_loop(E_3, Exps_5, Fn, Ft2, I_25, Keys_3, N_10, P_5, Primes_3, Res_19, T2) ->
    case (I_25 < E_3) of
        true ->
            Res_20 = bigmulsmall(Res_19, P_5),
            I_26 = (I_25 + 1),
            Fun_32_loop(E_3, Exps_5, Fn, Ft2, I_26, Keys_3, N_10, P_5, Primes_3, Res_20, T2);
        _ -> {E_3, Exps_5, Fn, Ft2, I_25, Keys_3, N_10, P_5, Primes_3, Res_19, T2}
    end
end,
{E_3, Exps_5, Fn, Ft2, I_26, Keys_3, N_10, P_5, Primes_3, Res_20, T2} = Fun_32(E_3, Exps_5, Fn, Ft2, I_25, Keys_3, N_10, P_5, Primes_3, Res_19, T2),
            Fun_31_loop(P_5_rest, Exps_5, Fn, Ft2, Keys_3, N_10, Primes_3, Res_20, T2)
    end
end,
{Exps_5, Fn, Ft2, Keys_3, N_10, Primes_3, Res_20, T2} = Fun_31(Keys_3, Exps_5, Fn, Ft2, Keys_3, N_10, Primes_3, Res_19, T2),
        Res_20
    catch {return, Ret} -> Ret end.

formatterm(Ip, Pw) ->
    try
        S_6 = bigtostring(Ip),
        case (Pw >= length(S_6)) of
        true -> Frac = (repeat("0", (Pw - length(S_6))) ++ S_6),
            case (length(Frac) < 33) of
        true -> Frac_2 = (Frac ++ repeat("0", (33 - length(Frac)))),
            Frac_3 = Frac_2;
        _ -> Frac_3 = Frac
    end,
            throw({return, ("0." ++ string:substr(Frac_3, 0 + 1, (33 - 0)))}),
            Frac_4 = Frac_3;
        _ -> Frac_4 = nil
    end,
        Intpart = string:substr(S_6, 0 + 1, ((length(S_6) - Pw) - 0)),
        Frac_5 = string:substr(S_6, (length(S_6) - Pw) + 1, (length(S_6) - (length(S_6) - Pw))),
        case (length(Frac_5) < 33) of
        true -> Frac_6 = (Frac_5 ++ repeat("0", (33 - length(Frac_5)))),
            Frac_7 = Frac_6;
        _ -> Frac_7 = Frac_5
    end,
        ((Intpart ++ ".") ++ string:substr(Frac_7, 0 + 1, (33 - 0)))
    catch {return, Ret} -> Ret end.

bigabsdiff(A_12, B_5) ->
    try
        (case (bigcmp(A_12, B_5) >= 0) of
    true -> bigsub(A_12, B_5);
    _ -> bigsub(B_5, A_12)
end)
    catch {return, Ret} -> Ret end.

main() ->
    try
        Primes_4 = primesupto(2000),
        io:format("~ts~n", ["N                               Integer Portion  Pow  Nth Term (33 dp)"]),
        Line = repeat("-", 89),
        io:format("~p~n", [Line]),
        Sum = bigfromint(0),
        Prev = bigfromint(0),
        DenomPow = 0,
        N_11 = 0,
        Fun_37 = fun Fun_37_loop(DenomPow, Line, N_11, Prev, Primes_4, Sum) ->
    case true of
        true ->
            try
                Ip_2 = computeip(N_11, Primes_4),
                Pw_2 = ((6 * N_11) + 3),
                case (Pw_2 > DenomPow) of
        true -> Sum_2 = bigmulpow10(Sum, (Pw_2 - DenomPow)),
            Prev_2 = bigmulpow10(Prev, (Pw_2 - DenomPow)),
            DenomPow_2 = Pw_2,
            DenomPow_3 = DenomPow_2,
            Prev_3 = Prev_2,
            Sum_3 = Sum_2;
        _ -> DenomPow_3 = DenomPow,
            Prev_3 = Prev,
            Sum_3 = Sum
    end,
                case (N_11 < 10) of
        true -> TermStr = formatterm(Ip_2, Pw_2),
            IpStr = bigtostring(Ip_2),
            Fun_33 = fun Fun_33_loop(DenomPow_3, Ip_2, IpStr, Line, N_11, Prev_3, Primes_4, Pw_2, Sum_3, TermStr) ->
    case (length(IpStr) < 44) of
        true ->
            IpStr_2 = (" " ++ IpStr),
            Fun_33_loop(DenomPow_3, Ip_2, IpStr_2, Line, N_11, Prev_3, Primes_4, Pw_2, Sum_3, TermStr);
        _ -> {DenomPow_3, Ip_2, IpStr, Line, N_11, Prev_3, Primes_4, Pw_2, Sum_3, TermStr}
    end
end,
{DenomPow_3, Ip_2, IpStr_2, Line, N_11, Prev_3, Primes_4, Pw_2, Sum_3, TermStr} = Fun_33(DenomPow_3, Ip_2, IpStr, Line, N_11, Prev_3, Primes_4, Pw_2, Sum_3, TermStr),
            PwStr = lists:flatten(io_lib:format("~p", [-Pw_2])),
            Fun_34 = fun Fun_34_loop(DenomPow_3, Ip_2, IpStr_2, Line, N_11, Prev_3, Primes_4, Pw_2, PwStr, Sum_3, TermStr) ->
    case (length(PwStr) < 3) of
        true ->
            PwStr_2 = (" " ++ PwStr),
            Fun_34_loop(DenomPow_3, Ip_2, IpStr_2, Line, N_11, Prev_3, Primes_4, Pw_2, PwStr_2, Sum_3, TermStr);
        _ -> {DenomPow_3, Ip_2, IpStr_2, Line, N_11, Prev_3, Primes_4, Pw_2, PwStr, Sum_3, TermStr}
    end
end,
{DenomPow_3, Ip_2, IpStr_2, Line, N_11, Prev_3, Primes_4, Pw_2, PwStr_2, Sum_3, TermStr} = Fun_34(DenomPow_3, Ip_2, IpStr_2, Line, N_11, Prev_3, Primes_4, Pw_2, PwStr, Sum_3, TermStr),
            PadTerm = TermStr,
            Fun_35 = fun Fun_35_loop(DenomPow_3, Ip_2, IpStr_2, Line, N_11, PadTerm, Prev_3, Primes_4, Pw_2, PwStr_2, Sum_3, TermStr) ->
    case (length(PadTerm) < 35) of
        true ->
            PadTerm_2 = (PadTerm ++ " "),
            Fun_35_loop(DenomPow_3, Ip_2, IpStr_2, Line, N_11, PadTerm_2, Prev_3, Primes_4, Pw_2, PwStr_2, Sum_3, TermStr);
        _ -> {DenomPow_3, Ip_2, IpStr_2, Line, N_11, PadTerm, Prev_3, Primes_4, Pw_2, PwStr_2, Sum_3, TermStr}
    end
end,
{DenomPow_3, Ip_2, IpStr_2, Line, N_11, PadTerm_2, Prev_3, Primes_4, Pw_2, PwStr_2, Sum_3, TermStr} = Fun_35(DenomPow_3, Ip_2, IpStr_2, Line, N_11, PadTerm, Prev_3, Primes_4, Pw_2, PwStr_2, Sum_3, TermStr),
            io:format("~ts~n", [((((((lists:flatten(io_lib:format("~p", [N_11])) ++ "  ") ++ IpStr_2) ++ "  ") ++ PwStr_2) ++ "  ") ++ PadTerm_2)]),
            Fun_36 = Fun_35,
            IpStr_3 = IpStr_2,
            PadTerm_3 = PadTerm_2,
            PwStr_3 = PwStr_2,
            TermStr_2 = TermStr;
        _ -> Fun_36 = nil,
            IpStr_3 = nil,
            PadTerm_3 = nil,
            PwStr_3 = nil,
            TermStr_2 = nil
    end,
                Sum_4 = bigadd(Sum_3, Ip_2),
                Diff_4 = bigabsdiff(Sum_4, Prev_3),
                case ((DenomPow_3 >= 70) andalso (bigcmp(Diff_4, bigmulpow10(bigfromint(1), (DenomPow_3 - 70))) < 0)) of
        true -> throw(break);
        _ -> ok
    end,
                Prev_4 = Sum_4,
                N_12 = (N_11 + 1),
                Fun_37_loop(DenomPow_3, Line, N_12, Prev_4, Primes_4, Sum_4)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_37_loop(C0, C1, C2, C3, C4, C5);
                break -> {DenomPow, Line, N_11, Prev, Primes_4, Sum}
            end;
        _ -> {DenomPow, Line, N_11, Prev, Primes_4, Sum}
    end
end,
{DenomPow_3, Line, N_12, Prev_4, Primes_4, Sum_4} = Fun_37(DenomPow, Line, N_11, Prev, Primes_4, Sum),
        Precision = 70,
        Target = bigmulpow10(bigfromint(1), (DenomPow_3 + (2 * 70))),
        Low = bigfromint(0),
        High = bigmulpow10(bigfromint(1), (70 + 1)),
        Fun_38 = fun Fun_38_loop(DenomPow_3, High, Line, Low, N_12, Precision, Prev_4, Primes_4, Sum_4, Target) ->
    case (bigcmp(Low, bigsub(High, bigfromint(1))) < 0) of
        true ->
            Mid = bigdivsmall(bigadd(Low, High), 2),
            Prod_4 = bigmulbig(bigmulbig(Mid, Mid), Sum_4),
            case (bigcmp(Prod_4, Target) =< 0) of
        true -> Low_2 = Mid,
            High_3 = High,
            Low_3 = Low_2;
        _ -> High_2 = bigsub(Mid, bigfromint(1)),
            High_3 = High_2,
            Low_3 = Low
    end,
            Fun_38_loop(DenomPow_3, High_3, Line, Low_3, N_12, Precision, Prev_4, Primes_4, Sum_4, Target);
        _ -> {DenomPow_3, High, Line, Low, N_12, Precision, Prev_4, Primes_4, Sum_4, Target}
    end
end,
{DenomPow_3, High_3, Line, Low_3, N_12, Precision, Prev_4, Primes_4, Sum_4, Target} = Fun_38(DenomPow_3, High, Line, Low, N_12, Precision, Prev_4, Primes_4, Sum_4, Target),
        PiInt = Low_3,
        PiStr = bigtostring(PiInt),
        case (length(PiStr) =< Precision) of
        true -> PiStr_2 = (repeat("0", ((Precision - length(PiStr)) + 1)) ++ PiStr),
            PiStr_3 = PiStr_2;
        _ -> PiStr_3 = PiStr
    end,
        Out_4 = ((string:substr(PiStr_3, 0 + 1, ((length(PiStr_3) - Precision) - 0)) ++ ".") ++ string:substr(PiStr_3, (length(PiStr_3) - Precision) + 1, (length(PiStr_3) - (length(PiStr_3) - Precision)))),
        io:format("~ts~n", [""]),
        io:format("~ts~n", ["Pi to 70 decimal places is:"]),
        io:format("~ts~n", [Out_4]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
