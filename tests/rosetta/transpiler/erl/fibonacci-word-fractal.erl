#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, fibonacciword/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

fibonacciword(N) ->
    try
        A = "1",
        B = "0",
        I = 1,
        Fun = fun Fun_loop(A, B, I, N) ->
    case (I < N) of
        true ->
            Tmp = B,
            B_2 = (B ++ A),
            A_2 = Tmp,
            I_2 = (I + 1),
            Fun_loop(A_2, B_2, I_2, N);
        _ -> {A, B, I, N}
    end
end,
{A_2, B_2, I_2, N} = Fun(A, B, I, N),
        A_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Wf = fibonacciword(23),
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [length(Wf)]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
