#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sinapprox/1, cosapprox/1]).

% Generated by Mochi transpiler v0.10.55 (87d3efb875) on 2025-08-03 08:53 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

sinapprox(X) ->
    try
        Term = X,
        Sum = X,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X) ->
    case (N =< 10) of
        true ->
            Denom = float(((2 * N) * ((2 * N) + 1))),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X), X), Denom),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X);
        _ -> {N, Sum, Term, X}
    end
end,
{N_2, Sum_2, Term_2, X} = Fun(N, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

cosapprox(X_2) ->
    try
        Term_3 = 1,
        Sum_3 = 1,
        N_3 = 1,
        Fun_2 = fun Fun_2_loop(N_3, Sum_3, Term_3, X_2) ->
    case (N_3 =< 10) of
        true ->
            Denom_2 = float((((2 * N_3) - 1) * (2 * N_3))),
            Term_4 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term_3, X_2), X_2), Denom_2),
            Sum_4 = (Sum_3 + Term_4),
            N_4 = (N_3 + 1),
            Fun_2_loop(N_4, Sum_4, Term_4, X_2);
        _ -> {N_3, Sum_3, Term_3, X_2}
    end
end,
{N_4, Sum_4, Term_4, X_2} = Fun_2(N_3, Sum_3, Term_3, X_2),
        Sum_4
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('degreesIncr', mochi_safe_div(mochi_safe_mul(0.1, 3.141592653589793), 180)),
    erlang:put('turns', 2),
    erlang:put('stop', mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(360, 2), 10), erlang:get('degreesIncr'))),
    erlang:put('width', 600),
    erlang:put('centre', mochi_safe_div(600, 2)),
    erlang:put('a', 1),
    erlang:put('b', 20),
    erlang:put('theta', 0),
    erlang:put('count', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('theta') < erlang:get('stop')) of
        true ->
            R = (1 + mochi_safe_mul(20, erlang:get('theta'))),
            X_3 = mochi_safe_mul(R, cosapprox(erlang:get('theta'))),
            Y = mochi_safe_mul(R, sinapprox(erlang:get('theta'))),
            case ((erlang:get('count') rem 100) == 0) of
        true -> io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [(erlang:get('centre') + X_3)])) ++ ",") ++ lists:flatten(io_lib:format("~p", [(erlang:get('centre') - Y)])))]);
        _ -> ok
    end,
            erlang:put('theta', (erlang:get('theta') + erlang:get('degreesIncr'))),
            erlang:put('count', (erlang:get('count') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
