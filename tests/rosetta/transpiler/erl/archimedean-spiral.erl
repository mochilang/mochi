#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sinApprox/1, cosApprox/1]).

% Generated by Mochi transpiler v0.10.39 (6b9be63842) on 2025-07-24 22:46 +0700

sinApprox(X) ->
    try
        Term = X,
        Sum = X,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X) ->
    case (N =< 10) of
        true ->
            Denom = float(((2 * N) * ((2 * N) + 1))),
            Term_2 = (((-Term * X) * X) / Denom),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X);
        _ -> {N, Sum, Term, X}
    end
end,
{N_2, Sum_2, Term_2, X} = Fun(N, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

cosApprox(X_2) ->
    try
        Term_3 = 1,
        Sum_3 = 1,
        N_3 = 1,
        Fun_2 = fun Fun_2_loop(N_3, Sum_3, Term_3, X_2) ->
    case (N_3 =< 10) of
        true ->
            Denom_2 = float((((2 * N_3) - 1) * (2 * N_3))),
            Term_4 = (((-Term_3 * X_2) * X_2) / Denom_2),
            Sum_4 = (Sum_3 + Term_4),
            N_4 = (N_3 + 1),
            Fun_2_loop(N_4, Sum_4, Term_4, X_2);
        _ -> {N_3, Sum_3, Term_3, X_2}
    end
end,
{N_4, Sum_4, Term_4, X_2} = Fun_2(N_3, Sum_3, Term_3, X_2),
        Sum_4
    catch {return, Ret} -> Ret end.

main(_) ->
    erlang:put('PI', 3.141592653589793),
    erlang:put('degreesIncr', ((0.1 * 3.141592653589793) / 180)),
    erlang:put('turns', 2),
    erlang:put('stop', (((360 * 2) * 10) * erlang:get('degreesIncr'))),
    erlang:put('width', 600),
    erlang:put('centre', (600 / 2)),
    erlang:put('a', 1),
    erlang:put('b', 20),
    erlang:put('theta', 0),
    erlang:put('count', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('theta') < erlang:get('stop')) of
        true ->
            R = (1 + (20 * erlang:get('theta'))),
            X_3 = (R * cosApprox(erlang:get('theta'))),
            Y = (R * sinApprox(erlang:get('theta'))),
            case ((erlang:get('count') rem 100) == 0) of
        true -> io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [(erlang:get('centre') + X_3)])) ++ ",") ++ lists:flatten(io_lib:format("~p", [(erlang:get('centre') - Y)])))]);
        _ -> ok
    end,
            erlang:put('theta', (erlang:get('theta') + erlang:get('degreesIncr'))),
            erlang:put('count', (erlang:get('count') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3().
