#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, set58/1, doublesha256/1, computechecksum/1, valida58/1]).

% Generated by Mochi transpiler v0.10.40 (d9d856d7f9) on 2025-07-25 09:47 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_sha256(Bs) ->
    Bin = list_to_binary(Bs),
    binary_to_list(crypto:hash(sha256, Bin)).


mochi_pad_start(S, Len, Ch) ->
    Fill0 = case Ch of
        "" -> " ";
        _ -> Ch
    end,
    Fill = string:substr(Fill0, 1, 1),
    SL = length(S),
    case SL >= Len of
        true -> S;
        _ -> string:copies(Fill, Len - SL) ++ S
    end.

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, Ret} -> Ret end.

set58(Addr) ->
    try
        Tmpl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
        A = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(A, Addr, I_3, Tmpl) ->
    case (I_3 < 25) of
        true ->
            A_2 = lists:append(A, [0]),
            I_4 = (I_3 + 1),
            Fun_2_loop(A_2, Addr, I_4, Tmpl);
        _ -> {A, Addr, I_3, Tmpl}
    end
end,
{A_2, Addr, I_4, Tmpl} = Fun_2(A, Addr, I_3, Tmpl),
        Idx = 0,
        Fun_4 = fun Fun_4_loop(A_2, Addr, I_4, Idx, Tmpl) ->
    case (Idx < length(Addr)) of
        true ->
            Ch_2 = string:substr(Addr, Idx + 1, ((Idx + 1) - Idx)),
            C = indexof(Tmpl, Ch_2),
            case (C < 0) of
        true -> throw({return, []});
        _ -> ok
    end,
            J = 24,
            Fun_3 = fun Fun_3_loop(A_2, Addr, C, Ch_2, I_4, Idx, J, Tmpl) ->
    case (J >= 0) of
        true ->
            C_2 = (C + (58 * lists:nth(J + 1, A_2))),
            A_3 = lists:sublist(A_2, J) ++ [(C_2 rem 256)] ++ lists:nthtail(J + 1, A_2),
            C_3 = mochi_to_int((C_2 div 256)),
            J_2 = (J - 1),
            Fun_3_loop(A_3, Addr, C_3, Ch_2, I_4, Idx, J_2, Tmpl);
        _ -> {A_2, Addr, C, Ch_2, I_4, Idx, J, Tmpl}
    end
end,
{A_3, Addr, C_3, Ch_2, I_4, Idx, J_2, Tmpl} = Fun_3(A_2, Addr, C, Ch_2, I_4, Idx, J, Tmpl),
            case (C_3 > 0) of
        true -> throw({return, []});
        _ -> ok
    end,
            Idx_2 = (Idx + 1),
            Fun_4_loop(A_3, Addr, I_4, Idx_2, Tmpl);
        _ -> {A_2, Addr, I_4, Idx, Tmpl}
    end
end,
{A_3, Addr, I_4, Idx_2, Tmpl} = Fun_4(A_2, Addr, I_4, Idx, Tmpl),
        A_3
    catch {return, Ret} -> Ret end.

doublesha256(Bs) ->
    try
        First = mochi_sha256(Bs),
        mochi_sha256(First)
    catch {return, Ret} -> Ret end.

computechecksum(A_4) ->
    try
        Hash = doublesha256(lists:sublist(A_4, 0 + 1, (21 - 0))),
        lists:sublist(Hash, 0 + 1, (4 - 0))
    catch {return, Ret} -> Ret end.

valida58(Addr_2) ->
    try
        A_5 = set58(Addr_2),
        case (length(A_5) /= 25) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (lists:nth(0 + 1, A_5) /= 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        Sum = computechecksum(A_5),
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(A_5, Addr_2, I_5, Sum) ->
    case (I_5 < 4) of
        true ->
            case (lists:nth((21 + I_5) + 1, A_5) /= lists:nth(I_5 + 1, Sum)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_5_loop(A_5, Addr_2, I_6, Sum);
        _ -> {A_5, Addr_2, I_5, Sum}
    end
end,
{A_5, Addr_2, I_6, Sum} = Fun_5(A_5, Addr_2, I_5, Sum),
        true
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [valida58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")]))]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [valida58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")]))]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
