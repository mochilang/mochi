#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, initgrid/1, set/3, circle/1, trimright/1]).

% Generated by Mochi transpiler v0.10.40 (e0c44791e6) on 2025-07-25 18:01 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

initgrid(Size) ->
    try
        G = [],
        Y = 0,
        Fun_2 = fun Fun_2_loop(G, Size, Y) ->
    case (Y < Size) of
        true ->
            Row = [],
            X = 0,
            Fun = fun Fun_loop(G, Row, Size, X, Y) ->
    case (X < Size) of
        true ->
            Row_2 = lists:append(Row, [" "]),
            X_2 = (X + 1),
            Fun_loop(G, Row_2, Size, X_2, Y);
        _ -> {G, Row, Size, X, Y}
    end
end,
{G, Row_2, Size, X_2, Y} = Fun(G, Row, Size, X, Y),
            G_2 = lists:append(G, [Row_2]),
            Y_2 = (Y + 1),
            Fun_2_loop(G_2, Size, Y_2);
        _ -> {G, Size, Y}
    end
end,
{G_2, Size, Y_2} = Fun_2(G, Size, Y),
        G_2
    catch {return, Ret} -> Ret end.

set(G_3, X_3, Y_3) ->
    try
        case ((((X_3 >= 0) andalso (X_3 < length(lists:nth(0 + 1, G_3)))) andalso (Y_3 >= 0)) andalso (Y_3 < length(G_3))) of
        true -> Tmp = lists:nth(Y_3 + 1, G_3),
            Tmp_2 = lists:sublist(Tmp, X_3) ++ ["#"] ++ lists:nthtail(X_3 + 1, Tmp),
            G_4 = lists:sublist(G_3, Y_3) ++ [Tmp_2] ++ lists:nthtail(Y_3 + 1, G_3),
            G_5 = G_4,
            Tmp_3 = Tmp_2;
        _ -> G_5 = G_3,
            Tmp_3 = nil
    end,
        nil
    catch {return, Ret} -> Ret end.

circle(R) ->
    try
        Size_2 = ((R * 2) + 1),
        G_6 = initgrid(Size_2),
        X_4 = R,
        Y_4 = 0,
        Err = (1 - R),
        Fun_3 = fun Fun_3_loop(Err, G_6, R, Size_2, X_4, Y_4) ->
    case (Y_4 =< X_4) of
        true ->
            set(G_6, (R + X_4), (R + Y_4)),
            set(G_6, (R + Y_4), (R + X_4)),
            set(G_6, (R - X_4), (R + Y_4)),
            set(G_6, (R - Y_4), (R + X_4)),
            set(G_6, (R - X_4), (R - Y_4)),
            set(G_6, (R - Y_4), (R - X_4)),
            set(G_6, (R + X_4), (R - Y_4)),
            set(G_6, (R + Y_4), (R - X_4)),
            Y_5 = (Y_4 + 1),
            case (Err < 0) of
        true -> Err_2 = ((Err + (2 * Y_5)) + 1),
            Err_4 = Err_2,
            X_6 = X_4;
        _ -> X_5 = (X_4 - 1),
            Err_3 = ((Err + (2 * (Y_5 - X_5))) + 1),
            Err_4 = Err_3,
            X_6 = X_5
    end,
            Fun_3_loop(Err_4, G_6, R, Size_2, X_6, Y_5);
        _ -> {Err, G_6, R, Size_2, X_4, Y_4}
    end
end,
{Err_4, G_6, R, Size_2, X_6, Y_5} = Fun_3(Err, G_6, R, Size_2, X_4, Y_4),
        G_6
    catch {return, Ret} -> Ret end.

trimright(Row_3) ->
    try
        End = length(Row_3),
        Fun_4 = fun Fun_4_loop(End, Row_3) ->
    case ((End > 0) andalso (lists:nth((End - 1) + 1, Row_3) == " ")) of
        true ->
            End_2 = (End - 1),
            Fun_4_loop(End_2, Row_3);
        _ -> {End, Row_3}
    end
end,
{End_2, Row_3} = Fun_4(End, Row_3),
        S = "",
        I = 0,
        Fun_5 = fun Fun_5_loop(End_2, I, Row_3, S) ->
    case (I < End_2) of
        true ->
            S_2 = (S ++ lists:nth(I + 1, Row_3)),
            I_2 = (I + 1),
            Fun_5_loop(End_2, I_2, Row_3, S_2);
        _ -> {End_2, I, Row_3, S}
    end
end,
{End_2, I_2, Row_3, S_2} = Fun_5(End_2, I, Row_3, S),
        S_2
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('g', circle(10)),
    Fun_6 = fun Fun_6_loop(List) ->
    case List of
        [] -> {};
        [Row_4|Row_4_rest] ->
            io:format("~p~n", [trimright(Row_4)]),
            Fun_6_loop(Row_4_rest)
    end
end,
{} = Fun_6(erlang:get('g')),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
