#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, baz/0, bar/0, foo/0, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

baz() ->
    try
        erlang:put('bazCall', (erlang:get('bazCall') + 1)),
        io:format("~ts~n", ["baz: start"]),
        case (erlang:get('bazCall') == 1) of
        true -> io:format("~ts~n", ["baz: raising U0"]),
            throw({return, "U0"});
        _ -> ok
    end,
        case (erlang:get('bazCall') == 2) of
        true -> io:format("~ts~n", ["baz: raising U1"]),
            throw({return, "U1"});
        _ -> ok
    end,
        io:format("~ts~n", ["baz: end"]),
        ""
    catch {return, Ret} -> Ret end.

bar() ->
    try
        io:format("~ts~n", ["bar: start"]),
        Err = baz(),
        case (length(Err) > 0) of
        true -> throw({return, Err});
        _ -> ok
    end,
        io:format("~ts~n", ["bar: end"]),
        ""
    catch {return, Ret} -> Ret end.

foo() ->
    try
        io:format("~ts~n", ["foo: start"]),
        Err_2 = bar(),
        case (Err_2 == "U0") of
        true -> io:format("~ts~n", ["foo: caught U0"]);
        _ -> case (length(Err_2) > 0) of
        true -> throw({return, Err_2});
        _ -> ok
    end
    end,
        Err_3 = bar(),
        case (Err_3 == "U0") of
        true -> io:format("~ts~n", ["foo: caught U0"]);
        _ -> case (length(Err_3) > 0) of
        true -> throw({return, Err_3});
        _ -> ok
    end
    end,
        io:format("~ts~n", ["foo: end"]),
        ""
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", ["main: start"]),
        Err_4 = foo(),
        case (length(Err_4) > 0) of
        true -> io:format("~ts~n", [("main: unhandled " ++ Err_4)]);
        _ -> io:format("~ts~n", ["main: success"])
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('bazCall', 0),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
