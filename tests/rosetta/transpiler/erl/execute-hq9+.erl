#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bottles/1, sing99/0, run/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

bottles(N) ->
    try
        case (N == 0) of
        true -> throw({return, "No more bottles"});
        _ -> ok
    end,
        case (N == 1) of
        true -> throw({return, "1 bottle"});
        _ -> ok
    end,
        (lists:flatten(io_lib:format("~p", [N])) ++ " bottles")
    catch {return, Ret} -> Ret end.

sing99() ->
    try
        I = 99,
        Fun = fun Fun_loop(I) ->
    case (I > 0) of
        true ->
            io:format("~ts~n", [(bottles(I) ++ " of beer on the wall")]),
            io:format("~ts~n", [(bottles(I) ++ " of beer")]),
            io:format("~ts~n", ["Take one down, pass it around"]),
            io:format("~ts~n", [(bottles((I - 1)) ++ " of beer on the wall")]),
            I_2 = (I - 1),
            Fun_loop(I_2);
        _ -> {I}
    end
end,
{I_2} = Fun(I),
        nil
    catch {return, Ret} -> Ret end.

run(Code) ->
    try
        Acc = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Acc, Code, I_3) ->
    case (I_3 < length(Code)) of
        true ->
            Ch = string:substr(Code, I_3 + 1, ((I_3 + 1) - I_3)),
            case (Ch == "H") of
        true -> io:format("~ts~n", ["Hello, World!"]),
            Acc_6 = Acc;
        _ -> case (Ch == "Q") of
        true -> io:format("~ts~n", [Code]),
            Acc_5 = Acc;
        _ -> case (Ch == "9") of
        true -> sing99(),
            Acc_4 = Acc;
        _ -> case (Ch == "+") of
        true -> Acc_2 = (Acc + 1),
            Acc_3 = Acc_2;
        _ -> Acc_3 = Acc
    end,
            Acc_4 = Acc_3
    end,
            Acc_5 = Acc_4
    end,
            Acc_6 = Acc_5
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Acc_6, Code, I_4);
        _ -> {Acc, Code, I_3}
    end
end,
{Acc_6, Code, I_4} = Fun_2(Acc, Code, I_3),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Code_2 = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
        run(Code_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
