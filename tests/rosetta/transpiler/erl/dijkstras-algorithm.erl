#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, addedge/3, removeat/2, dijkstra/1, path/2, main/0]).

% Generated by Mochi transpiler v0.10.42 (cb76045201) on 2025-07-27 10:24 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

addedge(U, V, W) ->
    try
        case mochi_not(maps:is_key(U, erlang:get('graph'))) of
        true -> Graph = erlang:get('graph'),
            Graph_2 = maps:put(U, #{}, Graph),
            erlang:put('graph', Graph_2),
            Graph_3 = Graph_2;
        _ -> Graph_3 = nil
    end,
        Graph_4 = erlang:get('graph'),
        Tmp = maps:get(U, Graph_4, nil),
        Tmp_2 = maps:put(V, W, Tmp),
        Graph_5 = maps:put(U, Tmp_2, Graph_4),
        erlang:put('graph', Graph_5),
        case mochi_not(maps:is_key(V, erlang:get('graph'))) of
        true -> Graph_6 = erlang:get('graph'),
            Graph_7 = maps:put(V, #{}, Graph_6),
            erlang:put('graph', Graph_7),
            Graph_8 = Graph_7;
        _ -> Graph_8 = Graph_5
    end,
        nil
    catch {return, Ret} -> Ret end.

removeat(Xs, Idx) ->
    try
        Out = [],
        I = 0,
        Fun = fun Fun_loop(List, I, Idx, Out, Xs) ->
    case List of
        [] -> {I, Idx, Out, Xs};
        [X|X_rest] ->
            case (I /= Idx) of
        true -> Out_2 = lists:append(Out, [X]),
            Out_3 = Out_2;
        _ -> Out_3 = Out
    end,
            I_2 = (I + 1),
            Fun_loop(X_rest, I_2, Idx, Out_3, Xs)
    end
end,
{I_2, Idx, Out_3, Xs} = Fun(Xs, I, Idx, Out, Xs),
        Out_3
    catch {return, Ret} -> Ret end.

dijkstra(Source) ->
    try
        Dist = #{},
        Prev = #{},
        Fun_2 = fun Fun_2_loop(List, Dist, Prev, Source) ->
    case List of
        [] -> {Dist, Prev, Source};
        [V_2|V_2_rest] ->
            Dist_2 = maps:put(V_2, 1000000000, Dist),
            Prev_2 = maps:put(V_2, "", Prev),
            Fun_2_loop(V_2_rest, Dist_2, Prev_2, Source)
    end
end,
{Dist_2, Prev_2, Source} = Fun_2(maps:keys(erlang:get('graph')), Dist, Prev, Source),
        Dist_3 = maps:put(Source, 0, Dist_2),
        Q = [],
        Fun_3 = fun Fun_3_loop(List, Dist_3, Prev_2, Q, Source) ->
    case List of
        [] -> {Dist_3, Prev_2, Q, Source};
        [V_3|V_3_rest] ->
            Q_2 = lists:append(Q, [V_3]),
            Fun_3_loop(V_3_rest, Dist_3, Prev_2, Q_2, Source)
    end
end,
{Dist_3, Prev_2, Q_2, Source} = Fun_3(maps:keys(erlang:get('graph')), Dist_3, Prev_2, Q, Source),
        Fun_6 = fun Fun_6_loop(Dist_3, Prev_2, Q_2, Source) ->
    case (length(Q_2) > 0) of
        true ->
            BestIdx = 0,
            U_2 = lists:nth(0 + 1, Q_2),
            I_3 = 1,
            Fun_4 = fun Fun_4_loop(BestIdx, Dist_3, I_3, Prev_2, Q_2, Source, U_2) ->
    case (I_3 < length(Q_2)) of
        true ->
            V_4 = lists:nth(I_3 + 1, Q_2),
            case (maps:get(V_4, Dist_3, nil) < maps:get(U_2, Dist_3, nil)) of
        true -> U_3 = V_4,
            BestIdx_2 = I_3,
            BestIdx_3 = BestIdx_2,
            U_4 = U_3;
        _ -> BestIdx_3 = BestIdx,
            U_4 = U_2
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(BestIdx_3, Dist_3, I_4, Prev_2, Q_2, Source, U_4);
        _ -> {BestIdx, Dist_3, I_3, Prev_2, Q_2, Source, U_2}
    end
end,
{BestIdx_3, Dist_3, I_4, Prev_2, Q_2, Source, U_4} = Fun_4(BestIdx, Dist_3, I_3, Prev_2, Q_2, Source, U_2),
            Q_3 = removeat(Q_2, BestIdx_3),
            Fun_5 = fun Fun_5_loop(List, BestIdx_3, Dist_3, I_4, Prev_2, Q_3, Source, U_4) ->
    case List of
        [] -> {BestIdx_3, Dist_3, I_4, Prev_2, Q_3, Source, U_4};
        [V_5|V_5_rest] ->
            Alt = (maps:get(U_4, Dist_3, nil) + lists:nth(V_5 + 1, maps:get(U_4, erlang:get('graph'), nil))),
            case (Alt < maps:get(V_5, Dist_3, nil)) of
        true -> Dist_4 = maps:put(V_5, Alt, Dist_3),
            Prev_3 = maps:put(V_5, U_4, Prev_2),
            Dist_5 = Dist_4,
            Prev_4 = Prev_3;
        _ -> Dist_5 = Dist_3,
            Prev_4 = Prev_2
    end,
            Fun_5_loop(V_5_rest, BestIdx_3, Dist_5, I_4, Prev_4, Q_3, Source, U_4)
    end
end,
{BestIdx_3, Dist_5, I_4, Prev_4, Q_3, Source, U_4} = Fun_5(maps:get(U_4, erlang:get('graph'), nil), BestIdx_3, Dist_3, I_4, Prev_2, Q_3, Source, U_4),
            Fun_6_loop(Dist_5, Prev_4, Q_3, Source);
        _ -> {Dist_3, Prev_2, Q_2, Source}
    end
end,
{Dist_5, Prev_4, Q_3, Source} = Fun_6(Dist_3, Prev_2, Q_2, Source),
        #{"dist" => Dist_5, "prev" => Prev_4}
    catch {return, Ret} -> Ret end.

path(Prev_5, V_6) ->
    try
        S = V_6,
        Cur = V_6,
        Fun_7 = fun Fun_7_loop(Cur, Prev_5, S, V_6) ->
    case (maps:get(Cur, Prev_5, nil) /= "") of
        true ->
            Cur_2 = maps:get(Cur, Prev_5, nil),
            S_2 = (Cur_2 ++ S),
            Fun_7_loop(Cur_2, Prev_5, S_2, V_6);
        _ -> {Cur, Prev_5, S, V_6}
    end
end,
{Cur_2, Prev_5, S_2, V_6} = Fun_7(Cur, Prev_5, S, V_6),
        S_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        addedge("a", "b", 7),
        addedge("a", "c", 9),
        addedge("a", "f", 14),
        addedge("b", "c", 10),
        addedge("b", "d", 15),
        addedge("c", "d", 11),
        addedge("c", "f", 2),
        addedge("d", "e", 6),
        addedge("e", "f", 9),
        Res = dijkstra("a"),
        Dist_6 = maps:get("dist", Res, nil),
        Prev_6 = maps:get("prev", Res, nil),
        io:format("~ts~n", [((("Distance to e: " ++ lists:flatten(io_lib:format("~p", [maps:get("e", Dist_6, nil)]))) ++ ", Path: ") ++ path(Prev_6, "e"))]),
        io:format("~ts~n", [((("Distance to f: " ++ lists:flatten(io_lib:format("~p", [maps:get("f", Dist_6, nil)]))) ++ ", Path: ") ++ path(Prev_6, "f"))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('INF', 1000000000),
    erlang:put('graph', #{}),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
