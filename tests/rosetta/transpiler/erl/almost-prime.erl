#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, kprime/2, gen/2, main/0]).

% Generated by Mochi transpiler v0.10.40 (029b538ca5) on 2025-07-25 15:20 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

kprime(N, K) ->
    try
        Nf = 0,
        I = 2,
        Fun_2 = fun Fun_2_loop(I, K, N, Nf) ->
    case (I =< N) of
        true ->
            Fun = fun Fun_loop(I, K, N, Nf) ->
    case ((N rem I) == 0) of
        true ->
            case (Nf == K) of
        true -> throw({return, false});
        _ -> ok
    end,
            Nf_2 = (Nf + 1),
            N_2 = (N div I),
            Fun_loop(I, K, N_2, Nf_2);
        _ -> {I, K, N, Nf}
    end
end,
{I, K, N_2, Nf_2} = Fun(I, K, N, Nf),
            I_2 = (I + 1),
            Fun_2_loop(I_2, K, N_2, Nf_2);
        _ -> {I, K, N, Nf}
    end
end,
{I_2, K, N_2, Nf_2} = Fun_2(I, K, N, Nf),
        (Nf_2 == K)
    catch {return, Ret} -> Ret end.

gen(K_2, Count) ->
    try
        R = [],
        N_3 = 2,
        Fun_3 = fun Fun_3_loop(Count, K_2, N_3, R) ->
    case (length(R) < Count) of
        true ->
            case (kprime(N_3, K_2) /= nil) of
        true -> R_2 = lists:append(R, [N_3]),
            R_3 = R_2;
        _ -> R_3 = R
    end,
            N_4 = (N_3 + 1),
            Fun_3_loop(Count, K_2, N_4, R_3);
        _ -> {Count, K_2, N_3, R}
    end
end,
{Count, K_2, N_4, R_3} = Fun_3(Count, K_2, N_3, R),
        R_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        K_3 = 1,
        Fun_4 = fun Fun_4_loop(K_3) ->
    case (K_3 =< 5) of
        true ->
            io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [K_3])) ++ " ") ++ lists:flatten(io_lib:format("~p", [gen(K_3, 10)])))]),
            K_4 = (K_3 + 1),
            Fun_4_loop(K_4);
        _ -> {K_3}
    end
end,
{K_4} = Fun_4(K_3),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
