#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, idx/1, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

idx(Ch) ->
    try
        case (Ch == "A") of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (Ch == "B") of
        true -> throw({return, 1});
        _ -> ok
    end,
        case (Ch == "C") of
        true -> throw({return, 2});
        _ -> ok
    end,
        3
    catch {return, Ret} -> Ret end.

main() ->
    try
        Res = "",
        I = 0,
        Fun_3 = fun Fun_3_loop(I, Res) ->
    case (I < length(lists:nth(0 + 1, erlang:get('given')))) of
        true ->
            Counts = [0, 0, 0, 0],
            Fun = fun Fun_loop(List, Counts, I, Res) ->
    case List of
        [] -> {Counts, I, Res};
        [P|P_rest] ->
            Ch_2 = string:substr(P, I + 1, ((I + 1) - I)),
            J = idx(Ch_2),
            Counts_2 = lists:sublist(Counts, J) ++ [(lists:nth(J + 1, Counts) + 1)] ++ lists:nthtail(J + 1, Counts),
            Fun_loop(P_rest, Counts_2, I, Res)
    end
end,
{Counts_2, I, Res} = Fun(erlang:get('given'), Counts, I, Res),
            J_2 = 0,
            Fun_2 = fun Fun_2_loop(Counts_2, I, J_2, Res) ->
    case (J_2 < 4) of
        true ->
            case ((lists:nth(J_2 + 1, Counts_2) rem 2) == 1) of
        true -> case (J_2 == 0) of
        true -> Res_2 = (Res ++ "A"),
            Res_8 = Res_2;
        _ -> case (J_2 == 1) of
        true -> Res_3 = (Res ++ "B"),
            Res_7 = Res_3;
        _ -> case (J_2 == 2) of
        true -> Res_4 = (Res ++ "C"),
            Res_6 = Res_4;
        _ -> Res_5 = (Res ++ "D"),
            Res_6 = Res_5
    end,
            Res_7 = Res_6
    end,
            Res_8 = Res_7
    end,
            Res_9 = Res_8;
        _ -> Res_9 = Res
    end,
            J_3 = (J_2 + 1),
            Fun_2_loop(Counts_2, I, J_3, Res_9);
        _ -> {Counts_2, I, J_2, Res}
    end
end,
{Counts_2, I, J_3, Res_9} = Fun_2(Counts_2, I, J_2, Res),
            I_2 = (I + 1),
            Fun_3_loop(I_2, Res_9);
        _ -> {I, Res}
    end
end,
{I_2, Res_9} = Fun_3(I, Res),
        io:format("~ts~n", [Res_9]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('given', ["ABCD", "CABD", "ACDB", "DACB", "BCDA", "ACBD", "ADCB", "CDAB", "DABC", "BCAD", "CADB", "CDBA", "CBAD", "ABDC", "ADBC", "BDCA", "DCBA", "BACD", "BADC", "BDAC", "CBDA", "DBCA", "DCAB"]),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
