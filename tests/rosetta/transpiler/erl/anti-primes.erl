#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, countDivisors/1, main/0]).

% Generated by Mochi transpiler v0.10.39 (6b9be63842) on 2025-07-24 22:46 +0700

countDivisors(N) ->
    try
        case (N < 2) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Count = 2,
        I = 2,
        Fun = fun Fun_loop(Count, I, N) ->
    case (I =< (N div 2)) of
        true ->
            case ((N rem I) == 0) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            I_2 = (I + 1),
            Fun_loop(Count_3, I_2, N);
        _ -> {Count, I, N}
    end
end,
{Count_3, I_2, N} = Fun(Count, I, N),
        Count_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", ["The first 20 anti-primes are:"]),
        MaxDiv = 0,
        Count_4 = 0,
        N_2 = 1,
        Line = "",
        Fun_2 = fun Fun_2_loop(Count_4, Line, MaxDiv, N_2) ->
    case (Count_4 < 20) of
        true ->
            D = countDivisors(N_2),
            case (D > MaxDiv) of
        true -> Line_2 = ((Line ++ lists:flatten(io_lib:format("~p", [N_2]))) ++ " "),
            MaxDiv_2 = D,
            Count_5 = (Count_4 + 1),
            Count_6 = Count_5,
            Line_3 = Line_2,
            MaxDiv_3 = MaxDiv_2;
        _ -> Count_6 = Count_4,
            Line_3 = Line,
            MaxDiv_3 = MaxDiv
    end,
            N_3 = (N_2 + 1),
            Fun_2_loop(Count_6, Line_3, MaxDiv_3, N_3);
        _ -> {Count_4, Line, MaxDiv, N_2}
    end
end,
{Count_6, Line_3, MaxDiv_3, N_3} = Fun_2(Count_4, Line, MaxDiv, N_2),
        Line_4 = string:substr(Line_3, 0 + 1, ((length(Line_3) - 1) - 0)),
        io:format("~ts~n", [Line_4]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    main().
