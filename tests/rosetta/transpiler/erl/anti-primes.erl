#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, countdivisors/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (029b538ca5) on 2025-07-25 15:20 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

countdivisors(N) ->
    try
        case (N < 2) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Count = 2,
        I = 2,
        Fun = fun Fun_loop(Count, I, N) ->
    case (I =< (N div 2)) of
        true ->
            case ((N rem I) == 0) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            I_2 = (I + 1),
            Fun_loop(Count_3, I_2, N);
        _ -> {Count, I, N}
    end
end,
{Count_3, I_2, N} = Fun(Count, I, N),
        Count_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", ["The first 20 anti-primes are:"]),
        MaxDiv = 0,
        Count_4 = 0,
        N_2 = 1,
        Line = "",
        Fun_2 = fun Fun_2_loop(Count_4, Line, MaxDiv, N_2) ->
    case (Count_4 < 20) of
        true ->
            D = countdivisors(N_2),
            case (D > MaxDiv) of
        true -> Line_2 = ((Line ++ lists:flatten(io_lib:format("~p", [N_2]))) ++ " "),
            MaxDiv_2 = D,
            Count_5 = (Count_4 + 1),
            Count_6 = Count_5,
            Line_3 = Line_2,
            MaxDiv_3 = MaxDiv_2;
        _ -> Count_6 = Count_4,
            Line_3 = Line,
            MaxDiv_3 = MaxDiv
    end,
            N_3 = (N_2 + 1),
            Fun_2_loop(Count_6, Line_3, MaxDiv_3, N_3);
        _ -> {Count_4, Line, MaxDiv, N_2}
    end
end,
{Count_6, Line_3, MaxDiv_3, N_3} = Fun_2(Count_4, Line, MaxDiv, N_2),
        Line_4 = string:substr(Line_3, 0 + 1, ((length(Line_3) - 1) - 0)),
        io:format("~ts~n", [Line_4]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
