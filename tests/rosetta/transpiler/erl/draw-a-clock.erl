#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow2/1, bin/2]).

% Generated by Mochi transpiler v0.10.47 (eaacde736f) on 2025-07-28 11:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

pow2(Exp) ->
    try
        R = 1,
        I = 0,
        Fun = fun Fun_loop(Exp, I, R) ->
    case (I < Exp) of
        true ->
            R_2 = (R * 2),
            I_2 = (I + 1),
            Fun_loop(Exp, I_2, R_2);
        _ -> {Exp, I, R}
    end
end,
{Exp, I_2, R_2} = Fun(Exp, I, R),
        R_2
    catch {return, Ret} -> Ret end.

bin(N, Digits) ->
    try
        S = "",
        I_3 = (Digits - 1),
        Fun_2 = fun Fun_2_loop(Digits, I_3, N, S) ->
    case (I_3 >= 0) of
        true ->
            P = pow2(I_3),
            case (N >= P) of
        true -> S_2 = (S ++ "x"),
            N_2 = (N - P),
            N_3 = N_2,
            S_4 = S_2;
        _ -> S_3 = (S ++ " "),
            N_3 = N,
            S_4 = S_3
    end,
            case (I_3 > 0) of
        true -> S_5 = (S_4 ++ "|"),
            S_6 = S_5;
        _ -> S_6 = S_4
    end,
            I_4 = (I_3 - 1),
            Fun_2_loop(Digits, I_4, N_3, S_6);
        _ -> {Digits, I_3, N, S}
    end
end,
{Digits, I_4, N_3, S_6} = Fun_2(Digits, I_3, N, S),
        S_6
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('t', (mochi_now() div 1000000000)),
    erlang:put('sec', (erlang:get('t') rem 60)),
    erlang:put('mins', (erlang:get('t') div 60)),
    erlang:put('min', (erlang:get('mins') rem 60)),
    erlang:put('hour', ((erlang:get('mins') div 60) rem 24)),
    io:format("~ts~n", [bin(erlang:get('hour'), 8)]),
    io:format("~ts~n", [""]),
    io:format("~ts~n", [bin(erlang:get('min'), 8)]),
    io:format("~ts~n", [""]),
    erlang:put('xs', ""),
    erlang:put('i', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('i') < erlang:get('sec')) of
        true ->
            erlang:put('xs', (erlang:get('xs') ++ "x")),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    erlang:put('out', ""),
    erlang:put('j', 0),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('j') < length(erlang:get('xs'))) of
        true ->
            erlang:put('out', (erlang:get('out') ++ string:substr(erlang:get('xs'), erlang:get('j') + 1, ((erlang:get('j') + 1) - erlang:get('j'))))),
            case ((((erlang:get('j') + 1) rem 5) == 0) andalso ((erlang:get('j') + 1) < length(erlang:get('xs')))) of
        true -> erlang:put('out', (erlang:get('out') ++ "|"));
        _ -> ok
    end,
            erlang:put('j', (erlang:get('j') + 1)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    io:format("~ts~n", [erlang:get('out')]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
