#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, belltriangle/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (305ff8442f) on 2025-07-25 12:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_pad_start(S, Len, Ch) ->
    Fill0 = case Ch of
        "" -> " ";
        _ -> Ch
    end,
    Fill = string:substr(Fill0, 1, 1),
    SL = length(S),
    case SL >= Len of
        true -> S;
        _ -> string:copies(Fill, Len - SL) ++ S
    end.

belltriangle(N) ->
    try
        Tri = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, N, Tri) ->
    case (I < N) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, N, Row, Tri) ->
    case (J < I) of
        true ->
            Row_2 = lists:append(Row, [0]),
            J_2 = (J + 1),
            Fun_loop(I, J_2, N, Row_2, Tri);
        _ -> {I, J, N, Row, Tri}
    end
end,
{I, J_2, N, Row_2, Tri} = Fun(I, J, N, Row, Tri),
            Tri_2 = lists:append(Tri, [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N, Tri_2);
        _ -> {I, N, Tri}
    end
end,
{I_2, N, Tri_2} = Fun_2(I, N, Tri),
        Tmp = lists:nth(1 + 1, Tri_2),
        Tmp_2 = lists:sublist(Tmp, 0) ++ [1] ++ lists:nthtail(0 + 1, Tmp),
        Tri_3 = lists:sublist(Tri_2, 1) ++ [Tmp_2] ++ lists:nthtail(1 + 1, Tri_2),
        I_3 = 2,
        Fun_4 = fun Fun_4_loop(I_3, N, Tmp_2, Tri_3) ->
    case (I_3 < N) of
        true ->
            Tmp_3 = lists:nth(I_3 + 1, Tri_3),
            Tmp_4 = lists:sublist(Tmp_3, 0) ++ [lists:nth((I_3 - 2) + 1, lists:nth((I_3 - 1) + 1, Tri_3))] ++ lists:nthtail(0 + 1, Tmp_3),
            Tri_4 = lists:sublist(Tri_3, I_3) ++ [Tmp_4] ++ lists:nthtail(I_3 + 1, Tri_3),
            J_3 = 1,
            Fun_3 = fun Fun_3_loop(I_3, J_3, N, Tmp_4, Tri_4) ->
    case (J_3 < I_3) of
        true ->
            Tmp_5 = lists:nth(I_3 + 1, Tri_4),
            Tmp_6 = lists:sublist(Tmp_5, J_3) ++ [(lists:nth((J_3 - 1) + 1, lists:nth(I_3 + 1, Tri_4)) + lists:nth((J_3 - 1) + 1, lists:nth((I_3 - 1) + 1, Tri_4)))] ++ lists:nthtail(J_3 + 1, Tmp_5),
            Tri_5 = lists:sublist(Tri_4, I_3) ++ [Tmp_6] ++ lists:nthtail(I_3 + 1, Tri_4),
            J_4 = (J_3 + 1),
            Fun_3_loop(I_3, J_4, N, Tmp_6, Tri_5);
        _ -> {I_3, J_3, N, Tmp_4, Tri_4}
    end
end,
{I_3, J_4, N, Tmp_6, Tri_5} = Fun_3(I_3, J_3, N, Tmp_4, Tri_4),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, N, Tmp_6, Tri_5);
        _ -> {I_3, N, Tmp_2, Tri_3}
    end
end,
{I_4, N, Tmp_6, Tri_5} = Fun_4(I_3, N, Tmp_2, Tri_3),
        Tri_5
    catch {return, Ret} -> Ret end.

main() ->
    try
        Bt = belltriangle(51),
        io:format("~ts~n", ["First fifteen and fiftieth Bell numbers:"]),
        Fun_5 = fun Fun_5_loop(List, Bt) ->
    case List of
        [] -> {Bt};
        [I_5|List_rest] ->
            io:format("~ts~n", [((("" ++ mochi_pad_start(lists:flatten(io_lib:format("~p", [I_5])), 2, " ")) ++ ": ") ++ lists:flatten(io_lib:format("~p", [lists:nth(0 + 1, lists:nth(I_5 + 1, Bt))])))]),
            Fun_5_loop(List_rest, Bt)
    end
end,
{Bt} = Fun_5(lists:seq(1, (16) - 1), Bt),
        io:format("~ts~n", [("50: " ++ lists:flatten(io_lib:format("~p", [lists:nth(0 + 1, lists:nth(50 + 1, Bt))])))]),
        io:format("~ts~n", [""]),
        io:format("~ts~n", ["The first ten rows of Bell's triangle:"]),
        Fun_6 = fun Fun_6_loop(List, Bt) ->
    case List of
        [] -> {Bt};
        [I_6|List_rest] ->
            io:format("~p~n", [lists:nth(I_6 + 1, Bt)]),
            Fun_6_loop(List_rest, Bt)
    end
end,
{Bt} = Fun_6(lists:seq(1, (11) - 1), Bt),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
