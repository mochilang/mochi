#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, push/2, step/3, positions/1, pad/2, main/0]).

% Generated by Mochi transpiler v0.10.40 (305ff8442f) on 2025-07-25 12:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

push(H, It) ->
    try
        H_2 = lists:append(H, [It]),
        I = (length(H_2) - 1),
        Fun = fun Fun_loop(H_2, I, It) ->
    case ((I > 0) andalso (maps:get("s", lists:nth((I - 1) + 1, H_2), nil) > maps:get("s", lists:nth(I + 1, H_2), nil))) of
        true ->
            Tmp = lists:nth((I - 1) + 1, H_2),
            H_3 = lists:sublist(H_2, (I - 1)) ++ [lists:nth(I + 1, H_2)] ++ lists:nthtail((I - 1) + 1, H_2),
            H_4 = lists:sublist(H_3, I) ++ [Tmp] ++ lists:nthtail(I + 1, H_3),
            I_2 = (I - 1),
            Fun_loop(H_4, I_2, It);
        _ -> {H_2, I, It}
    end
end,
{H_4, I_2, It} = Fun(H_2, I, It),
        H_4
    catch {return, Ret} -> Ret end.

step(H_5, Nv, Dir) ->
    try
        Fun_2 = fun Fun_2_loop(Dir, H_5, Nv) ->
    case ((length(H_5) == 0) orelse ((Nv * Nv) =< maps:get("s", lists:nth(0 + 1, H_5), nil))) of
        true ->
            H_6 = push(H_5, #{"s" => (Nv * Nv), "a" => Nv, "b" => 0}),
            Nv_2 = (Nv + 1),
            Fun_2_loop(Dir, H_6, Nv_2);
        _ -> {Dir, H_5, Nv}
    end
end,
{Dir, H_6, Nv_2} = Fun_2(Dir, H_5, Nv),
        S = maps:get("s", lists:nth(0 + 1, H_6), nil),
        V = [],
        Fun_3 = fun Fun_3_loop(Dir, H_6, Nv_2, S, V) ->
    case ((length(H_6) > 0) andalso (maps:get("s", lists:nth(0 + 1, H_6), nil) == S)) of
        true ->
            It_2 = lists:nth(0 + 1, H_6),
            H_7 = lists:sublist(H_6, 1 + 1, length(H_6) - 1),
            V_2 = lists:append(V, [[maps:get("a", It_2, nil), maps:get("b", It_2, nil)]]),
            case (maps:get("a", It_2, nil) > maps:get("b", It_2, nil)) of
        true -> H_8 = push(H_7, #{"s" => ((maps:get("a", It_2, nil) * maps:get("a", It_2, nil)) + ((maps:get("b", It_2, nil) + 1) * (maps:get("b", It_2, nil) + 1))), "a" => maps:get("a", It_2, nil), "b" => (maps:get("b", It_2, nil) + 1)}),
            H_9 = H_8;
        _ -> H_9 = H_7
    end,
            Fun_3_loop(Dir, H_9, Nv_2, S, V_2);
        _ -> {Dir, H_6, Nv_2, S, V}
    end
end,
{Dir, H_9, Nv_2, S, V_2} = Fun_3(Dir, H_6, Nv_2, S, V),
        List = [],
        Fun_4 = fun Fun_4_loop(List_, Dir, H_9, List, Nv_2, S, V_2) ->
    case List_ of
        [] -> {Dir, H_9, List, Nv_2, S, V_2};
        [P|List__rest] ->
            List_2 = lists:append(List, [P]),
            Fun_4_loop(List__rest, Dir, H_9, List_2, Nv_2, S, V_2)
    end
end,
{Dir, H_9, List_2, Nv_2, S, V_2} = Fun_4(V_2, Dir, H_9, List, Nv_2, S, V_2),
        Temp = List_2,
        Fun_5 = fun Fun_5_loop(List, Dir, H_9, List_2, Nv_2, S, Temp, V_2) ->
    case List of
        [] -> {Dir, H_9, List_2, Nv_2, S, Temp, V_2};
        [P_2|List_rest] ->
            case (lists:nth(0 + 1, P_2) /= lists:nth(1 + 1, P_2)) of
        true -> List_3 = lists:append(List_2, [[lists:nth(1 + 1, P_2), lists:nth(0 + 1, P_2)]]),
            List_4 = List_3;
        _ -> List_4 = List_2
    end,
            Fun_5_loop(List_rest, Dir, H_9, List_4, Nv_2, S, Temp, V_2)
    end
end,
{Dir, H_9, List_4, Nv_2, S, Temp, V_2} = Fun_5(Temp, Dir, H_9, List_2, Nv_2, S, Temp, V_2),
        Temp_2 = List_4,
        Fun_6 = fun Fun_6_loop(List, Dir, H_9, List_4, Nv_2, S, Temp_2, V_2) ->
    case List of
        [] -> {Dir, H_9, List_4, Nv_2, S, Temp_2, V_2};
        [P_3|List_rest] ->
            case (lists:nth(1 + 1, P_3) /= 0) of
        true -> List_5 = lists:append(List_4, [[lists:nth(0 + 1, P_3), -lists:nth(1 + 1, P_3)]]),
            List_6 = List_5;
        _ -> List_6 = List_4
    end,
            Fun_6_loop(List_rest, Dir, H_9, List_6, Nv_2, S, Temp_2, V_2)
    end
end,
{Dir, H_9, List_6, Nv_2, S, Temp_2, V_2} = Fun_6(Temp_2, Dir, H_9, List_4, Nv_2, S, Temp_2, V_2),
        Temp_3 = List_6,
        Fun_7 = fun Fun_7_loop(List, Dir, H_9, List_6, Nv_2, S, Temp_3, V_2) ->
    case List of
        [] -> {Dir, H_9, List_6, Nv_2, S, Temp_3, V_2};
        [P_4|List_rest] ->
            case (lists:nth(0 + 1, P_4) /= 0) of
        true -> List_7 = lists:append(List_6, [[-lists:nth(0 + 1, P_4), lists:nth(1 + 1, P_4)]]),
            List_8 = List_7;
        _ -> List_8 = List_6
    end,
            Fun_7_loop(List_rest, Dir, H_9, List_8, Nv_2, S, Temp_3, V_2)
    end
end,
{Dir, H_9, List_8, Nv_2, S, Temp_3, V_2} = Fun_7(Temp_3, Dir, H_9, List_6, Nv_2, S, Temp_3, V_2),
        BestDot = -999999999,
        Best = Dir,
        Fun_8 = fun Fun_8_loop(List, Best, BestDot, Dir, H_9, List_8, Nv_2, S, Temp_3, V_2) ->
    case List of
        [] -> {Best, BestDot, Dir, H_9, List_8, Nv_2, S, Temp_3, V_2};
        [P_5|List_rest] ->
            Cross = ((lists:nth(0 + 1, P_5) * lists:nth(1 + 1, Dir)) - (lists:nth(1 + 1, P_5) * lists:nth(0 + 1, Dir))),
            case (Cross >= 0) of
        true -> Dot = ((lists:nth(0 + 1, P_5) * lists:nth(0 + 1, Dir)) + (lists:nth(1 + 1, P_5) * lists:nth(1 + 1, Dir))),
            case (Dot > BestDot) of
        true -> BestDot_2 = Dot,
            Best_2 = P_5,
            Best_3 = Best_2,
            BestDot_3 = BestDot_2;
        _ -> Best_3 = Best,
            BestDot_3 = BestDot
    end,
            Best_4 = Best_3,
            BestDot_4 = BestDot_3,
            Dot_2 = Dot;
        _ -> Best_4 = Best,
            BestDot_4 = BestDot,
            Dot_2 = nil
    end,
            Fun_8_loop(List_rest, Best_4, BestDot_4, Dir, H_9, List_8, Nv_2, S, Temp_3, V_2)
    end
end,
{Best_4, BestDot_4, Dir, H_9, List_8, Nv_2, S, Temp_3, V_2} = Fun_8(List_8, Best, BestDot, Dir, H_9, List_8, Nv_2, S, Temp_3, V_2),
        #{"d" => Best_4, "heap" => H_9, "n" => Nv_2}
    catch {return, Ret} -> Ret end.

positions(N) ->
    try
        Pos = [],
        X = 0,
        Y = 0,
        Dir_2 = [0, 1],
        Heap = [],
        Nv_3 = 1,
        I_3 = 0,
        Fun_9 = fun Fun_9_loop(Dir_2, Heap, I_3, N, Nv_3, Pos, X, Y) ->
    case (I_3 < N) of
        true ->
            Pos_2 = lists:append(Pos, [[X, Y]]),
            St = step(Heap, Nv_3, Dir_2),
            Dir_3 = maps:get("d", St, nil),
            Heap_2 = maps:get("heap", St, nil),
            Nv_4 = mochi_to_int(maps:get("n", St, nil)),
            X_2 = (X + lists:nth(0 + 1, Dir_3)),
            Y_2 = (Y + lists:nth(1 + 1, Dir_3)),
            I_4 = (I_3 + 1),
            Fun_9_loop(Dir_3, Heap_2, I_4, N, Nv_4, Pos_2, X_2, Y_2);
        _ -> {Dir_2, Heap, I_3, N, Nv_3, Pos, X, Y}
    end
end,
{Dir_3, Heap_2, I_4, N, Nv_4, Pos_2, X_2, Y_2} = Fun_9(Dir_2, Heap, I_3, N, Nv_3, Pos, X, Y),
        Pos_2
    catch {return, Ret} -> Ret end.

pad(S_2, W) ->
    try
        R = S_2,
        Fun_10 = fun Fun_10_loop(R, S_2, W) ->
    case (length(R) < W) of
        true ->
            R_2 = (R ++ " "),
            Fun_10_loop(R_2, S_2, W);
        _ -> {R, S_2, W}
    end
end,
{R_2, S_2, W} = Fun_10(R, S_2, W),
        R_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Pts = positions(40),
        io:format("~ts~n", ["The first 40 Babylonian spiral points are:"]),
        Line = "",
        I_5 = 0,
        Fun_11 = fun Fun_11_loop(I_5, Line, Pts) ->
    case (I_5 < length(Pts)) of
        true ->
            P_6 = lists:nth(I_5 + 1, Pts),
            S_3 = pad((((("(" ++ lists:flatten(io_lib:format("~p", [lists:nth(0 + 1, P_6)]))) ++ ", ") ++ lists:flatten(io_lib:format("~p", [lists:nth(1 + 1, P_6)]))) ++ ")"), 10),
            Line_2 = (Line ++ S_3),
            case (((I_5 + 1) rem 10) == 0) of
        true -> io:format("~ts~n", [Line_2]),
            Line_3 = "",
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            I_6 = (I_5 + 1),
            Fun_11_loop(I_6, Line_4, Pts);
        _ -> {I_5, Line, Pts}
    end
end,
{I_6, Line_4, Pts} = Fun_11(I_5, Line, Pts),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
