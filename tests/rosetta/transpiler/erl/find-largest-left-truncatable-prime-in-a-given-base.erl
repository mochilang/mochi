#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isprime/1, search/5, largest/1, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

isprime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        I = 2,
        Fun = fun Fun_loop(I, N) ->
    case ((I * I) =< N) of
        true ->
            case ((N rem I) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, N);
        _ -> {I, N}
    end
end,
{I_2, N} = Fun(I, N),
        true
    catch {return, Ret} -> Ret end.

search(Base, Prefix, Depth, Limit, Best) ->
    try
        B = Best,
        D = 1,
        Fun_2 = fun Fun_2_loop(B, Base, Best, D, Depth, Limit, Prefix) ->
    case (D < Base) of
        true ->
            Val = ((Prefix * Base) + D),
            case (isprime(Val) /= nil) of
        true -> case (Val > B) of
        true -> B_2 = Val,
            B_3 = B_2;
        _ -> B_3 = B
    end,
            case ((Depth + 1) < Limit) of
        true -> B_4 = search(Base, Val, (Depth + 1), Limit, B_3),
            B_5 = B_4;
        _ -> B_5 = B_3
    end,
            B_6 = B_5;
        _ -> B_6 = B
    end,
            D_2 = (D + 1),
            Fun_2_loop(B_6, Base, Best, D_2, Depth, Limit, Prefix);
        _ -> {B, Base, Best, D, Depth, Limit, Prefix}
    end
end,
{B_6, Base, Best, D_2, Depth, Limit, Prefix} = Fun_2(B, Base, Best, D, Depth, Limit, Prefix),
        B_6
    catch {return, Ret} -> Ret end.

largest(Base_2) ->
    try
        search(Base_2, 0, 0, 6, 0)
    catch {return, Ret} -> Ret end.

main() ->
    try
        B_7 = 3,
        Fun_3 = fun Fun_3_loop(B_7) ->
    case (B_7 =< 17) of
        true ->
            io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [B_7])) ++ ": ") ++ lists:flatten(io_lib:format("~p", [largest(B_7)])))]),
            B_8 = (B_7 + 1),
            Fun_3_loop(B_8);
        _ -> {B_7}
    end
end,
{B_8} = Fun_3(B_7),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
