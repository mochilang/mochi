#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, countoccurrences/2, main/0]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

countoccurrences(S, Sub) ->
    try
        case (length(Sub) == 0) of
        true -> throw({return, (length(S) + 1)});
        _ -> ok
    end,
        Cnt = 0,
        I = 0,
        Step = length(Sub),
        Fun = fun Fun_loop(Cnt, I, S, Step, Sub) ->
    case ((I + Step) =< length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + Step) - I)) == Sub) of
        true -> Cnt_2 = (Cnt + 1),
            I_2 = (I + Step),
            Cnt_3 = Cnt_2,
            I_4 = I_2;
        _ -> I_3 = (I + 1),
            Cnt_3 = Cnt,
            I_4 = I_3
    end,
            Fun_loop(Cnt_3, I_4, S, Step, Sub);
        _ -> {Cnt, I, S, Step, Sub}
    end
end,
{Cnt_3, I_4, S, Step, Sub} = Fun(Cnt, I, S, Step, Sub),
        Cnt_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [countoccurrences("the three truths", "th")]))]),
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [countoccurrences("ababababab", "abab")]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
