#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, randperm/1, even/1, reducetoeven/1, liststr/1, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

randperm(N) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, N) ->
    case (I < N) of
        true ->
            Arr_2 = lists:append(Arr, [I]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, N);
        _ -> {Arr, I, N}
    end
end,
{Arr_2, I_2, N} = Fun(Arr, I, N),
        Idx = (N - 1),
        Fun_2 = fun Fun_2_loop(Arr_2, I_2, Idx, N) ->
    case (Idx > 0) of
        true ->
            J = (mochi_now() rem (Idx + 1)),
            Tmp = lists:nth(Idx + 1, Arr_2),
            Arr_3 = lists:sublist(Arr_2, Idx) ++ [lists:nth(J + 1, Arr_2)] ++ lists:nthtail(Idx + 1, Arr_2),
            Arr_4 = lists:sublist(Arr_3, J) ++ [Tmp] ++ lists:nthtail(J + 1, Arr_3),
            Idx_2 = (Idx - 1),
            Fun_2_loop(Arr_4, I_2, Idx_2, N);
        _ -> {Arr_2, I_2, Idx, N}
    end
end,
{Arr_4, I_2, Idx_2, N} = Fun_2(Arr_2, I_2, Idx, N),
        Arr_4
    catch {return, Ret} -> Ret end.

even(Xs) ->
    try
        R = [],
        Fun_3 = fun Fun_3_loop(List, R, Xs) ->
    case List of
        [] -> {R, Xs};
        [X|X_rest] ->
            case ((X rem 2) == 0) of
        true -> R_2 = lists:append(R, [X]),
            R_3 = R_2;
        _ -> R_3 = R
    end,
            Fun_3_loop(X_rest, R_3, Xs)
    end
end,
{R_3, Xs} = Fun_3(Xs, R, Xs),
        R_3
    catch {return, Ret} -> Ret end.

reducetoeven(Xs_2) ->
    try
        Arr_5 = Xs_2,
        Last = 0,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Arr_5, I_3, Last, Xs_2) ->
    case (I_3 < length(Arr_5)) of
        true ->
            E = lists:nth(I_3 + 1, Arr_5),
            case ((E rem 2) == 0) of
        true -> Arr_6 = lists:sublist(Arr_5, Last) ++ [E] ++ lists:nthtail(Last + 1, Arr_5),
            Last_2 = (Last + 1),
            Arr_7 = Arr_6,
            Last_3 = Last_2;
        _ -> Arr_7 = Arr_5,
            Last_3 = Last
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(Arr_7, I_4, Last_3, Xs_2);
        _ -> {Arr_5, I_3, Last, Xs_2}
    end
end,
{Arr_7, I_4, Last_3, Xs_2} = Fun_4(Arr_5, I_3, Last, Xs_2),
        lists:sublist(Arr_7, 1, (Last_3 - 0))
    catch {return, Ret} -> Ret end.

liststr(Xs_3) ->
    try
        S = "[",
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, S, Xs_3) ->
    case (I_5 < length(Xs_3)) of
        true ->
            S_2 = (S ++ lists:flatten(io_lib:format("~p", [lists:nth(I_5 + 1, Xs_3)]))),
            case ((I_5 + 1) < length(Xs_3)) of
        true -> S_3 = (S_2 ++ " "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, S_4, Xs_3);
        _ -> {I_5, S, Xs_3}
    end
end,
{I_6, S_4, Xs_3} = Fun_5(I_5, S, Xs_3),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

main() ->
    try
        A = randperm(20),
        Cap_a = 20,
        io:format("~ts~n", [liststr(A)]),
        io:format("~ts~n", [liststr(even(A))]),
        io:format("~ts~n", [liststr(A)]),
        A_2 = reducetoeven(A),
        io:format("~ts~n", [liststr(A_2)]),
        io:format("~ts~n", [((("a len: " ++ lists:flatten(io_lib:format("~p", [length(A_2)]))) ++ " cap: ") ++ lists:flatten(io_lib:format("~p", [Cap_a])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
