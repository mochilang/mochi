#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, primefactors/1, isgiuga/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (26b9f6045a) on 2025-08-02 23:10 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

primefactors(N) ->
    try
        Factors = [],
        Last = 0,
        X = N,
        Fun = fun Fun_loop(Factors, Last, N, X) ->
    case ((X rem 2) == 0) of
        true ->
            case (Last == 2) of
        true -> throw({return, []});
        _ -> ok
    end,
            Factors_2 = lists:append(Factors, [2]),
            Last_2 = 2,
            X_2 = (X div 2),
            Fun_loop(Factors_2, Last_2, N, X_2);
        _ -> {Factors, Last, N, X}
    end
end,
{Factors_2, Last_2, N, X_2} = Fun(Factors, Last, N, X),
        P = 3,
        Fun_3 = fun Fun_3_loop(Factors_2, Last_2, N, P, X_2) ->
    case ((P * P) =< X_2) of
        true ->
            Fun_2 = fun Fun_2_loop(Factors_2, Last_2, N, P, X_2) ->
    case ((X_2 rem P) == 0) of
        true ->
            case (Last_2 == P) of
        true -> throw({return, []});
        _ -> ok
    end,
            Factors_3 = lists:append(Factors_2, [P]),
            Last_3 = P,
            X_3 = (X_2 div P),
            Fun_2_loop(Factors_3, Last_3, N, P, X_3);
        _ -> {Factors_2, Last_2, N, P, X_2}
    end
end,
{Factors_3, Last_3, N, P, X_3} = Fun_2(Factors_2, Last_2, N, P, X_2),
            P_2 = (P + 2),
            Fun_3_loop(Factors_3, Last_3, N, P_2, X_3);
        _ -> {Factors_2, Last_2, N, P, X_2}
    end
end,
{Factors_3, Last_3, N, P_2, X_3} = Fun_3(Factors_2, Last_2, N, P, X_2),
        case (X_3 > 1) of
        true -> case (Last_3 == X_3) of
        true -> throw({return, []});
        _ -> ok
    end,
            Factors_4 = lists:append(Factors_3, [X_3]),
            Factors_5 = Factors_4;
        _ -> Factors_5 = Factors_3
    end,
        Factors_5
    catch {return, Ret} -> Ret end.

isgiuga(N_2) ->
    try
        Facs = primefactors(N_2),
        case (length(Facs) =< 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        Fun_4 = fun Fun_4_loop(List, Facs, N_2) ->
    case List of
        [] -> {Facs, N_2};
        [F|F_rest] ->
            case ((((N_2 div F) - 1) rem F) /= 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_4_loop(F_rest, Facs, N_2)
    end
end,
{Facs, N_2} = Fun_4(Facs, Facs, N_2),
        true
    catch {return, Ret} -> Ret end.

main() ->
    try
        Known = [30, 858, 1722, 66198],
        Nums = [],
        Fun_5 = fun Fun_5_loop(List, Known, Nums) ->
    case List of
        [] -> {Known, Nums};
        [N_3|N_3_rest] ->
            case isgiuga(N_3) of
        true -> Nums_2 = lists:append(Nums, [N_3]),
            Nums_3 = Nums_2;
        _ -> Nums_3 = Nums
    end,
            Fun_5_loop(N_3_rest, Known, Nums_3)
    end
end,
{Known, Nums_3} = Fun_5(Known, Known, Nums),
        io:format("~ts~n", ["The first 4 Giuga numbers are:"]),
        io:format("~p~n", [Nums_3]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
