#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, randint/2]).

% Generated by Mochi transpiler v0.10.55 (b43d15e5bc) on 2025-08-03 11:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

randint(S, N) ->
    try
        Next = (((S * 1664525) + 1013904223) rem 2147483647),
        [Next, (Next rem N)]
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('width', 60),
    erlang:put('height', mochi_to_int(mochi_safe_mul(float(60), 0.86602540378))),
    erlang:put('iterations', 5000),
    erlang:put('grid', []),
    erlang:put('y', 0),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('y') < erlang:get('height')) of
        true ->
            Line = [],
            X = 0,
            Fun = fun Fun_loop(Line, X) ->
    case (X < 60) of
        true ->
            Line_2 = lists:append(Line, [" "]),
            X_2 = (X + 1),
            Fun_loop(Line_2, X_2);
        _ -> {Line, X}
    end
end,
{Line_2, X_2} = Fun(Line, X),
            erlang:put('grid', lists:append(erlang:get('grid'), [Line_2])),
            erlang:put('y', (erlang:get('y') + 1)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    erlang:put('seed', 1),
    erlang:put('vertices', [[0, (erlang:get('height') - 1)], [(60 - 1), (erlang:get('height') - 1)], [mochi_to_int((60 div 2)), 0]]),
    erlang:put('px', mochi_to_int((60 div 2))),
    erlang:put('py', mochi_to_int((erlang:get('height') div 2))),
    erlang:put('i', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('i') < 5000) of
        true ->
            R = randint(erlang:get('seed'), 3),
            erlang:put('seed', (case erlang:is_map(R) of true -> maps:get(0, R, nil); _ -> lists:nth(0 + 1, R) end)),
            Idx = mochi_to_int((case erlang:is_map(R) of true -> maps:get(1, R, nil); _ -> lists:nth(1 + 1, R) end)),
            V = (case erlang:is_map(erlang:get('vertices')) of true -> maps:get(Idx, erlang:get('vertices'), nil); _ -> lists:nth(Idx + 1, erlang:get('vertices')) end),
            erlang:put('px', mochi_to_int(((erlang:get('px') + (case erlang:is_map(V) of true -> maps:get(0, V, nil); _ -> lists:nth(0 + 1, V) end)) div 2))),
            erlang:put('py', mochi_to_int(((erlang:get('py') + (case erlang:is_map(V) of true -> maps:get(1, V, nil); _ -> lists:nth(1 + 1, V) end)) div 2))),
            case ((((erlang:get('px') >= 0) andalso (erlang:get('px') < 60)) andalso (erlang:get('py') >= 0)) andalso (erlang:get('py') < erlang:get('height'))) of
        true -> Grid = erlang:get('grid'),
            Tmp = (case erlang:is_map(Grid) of true -> maps:get(erlang:get('py'), Grid, nil); _ -> lists:nth(erlang:get('py') + 1, Grid) end),
            Tmp_2 = lists:sublist(Tmp, erlang:get('px')) ++ ["*"] ++ lists:nthtail(erlang:get('px') + 1, Tmp),
            Grid_2 = lists:sublist(Grid, erlang:get('py')) ++ [Tmp_2] ++ lists:nthtail(erlang:get('py') + 1, Grid),
            erlang:put('grid', Grid_2),
            Grid_3 = Grid_2,
            Tmp_3 = Tmp_2;
        _ -> Grid_3 = nil,
            Tmp_3 = nil
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    erlang:put('y', 0),
    Fun_5 = fun Fun_5_loop() ->
    case (erlang:get('y') < erlang:get('height')) of
        true ->
            Line_3 = "",
            X_3 = 0,
            Fun_4 = fun Fun_4_loop(Line_3, X_3) ->
    case (X_3 < 60) of
        true ->
            Line_4 = (Line_3 ++ (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get(erlang:get('y'), erlang:get('grid'), nil); _ -> lists:nth(erlang:get('y') + 1, erlang:get('grid')) end)) of true -> maps:get(X_3, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(erlang:get('y'), erlang:get('grid'), nil); _ -> lists:nth(erlang:get('y') + 1, erlang:get('grid')) end), nil); _ -> lists:nth(X_3 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(erlang:get('y'), erlang:get('grid'), nil); _ -> lists:nth(erlang:get('y') + 1, erlang:get('grid')) end)) end)),
            X_4 = (X_3 + 1),
            Fun_4_loop(Line_4, X_4);
        _ -> {Line_3, X_3}
    end
end,
{Line_4, X_4} = Fun_4(Line_3, X_3),
            io:format("~ts~n", [Line_4]),
            erlang:put('y', (erlang:get('y') + 1)),
            Fun_5_loop();
        _ -> {}
    end
end,
{} = Fun_5(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
