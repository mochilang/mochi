#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, p/2, padint/1]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

p(X, E) ->
    try
        R = 1,
        I = 0,
        Fun = fun Fun_loop(E, I, R, X) ->
    case (I < mochi_to_int(E)) of
        true ->
            R_2 = (R * X),
            I_2 = (I + 1),
            Fun_loop(E, I_2, R_2, X);
        _ -> {E, I, R, X}
    end
end,
{E, I_2, R_2, X} = Fun(E, I, R, X),
        R_2
    catch {return, Ret} -> Ret end.

padint(F) ->
    try
        S = lists:flatten(io_lib:format("~p", [mochi_to_int(F)])),
        case (F >= 0) of
        true -> throw({return, (" " ++ S)});
        _ -> ok
    end,
        S
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('ops', ["-x.p(e)", "-(x).p(e)", "(-x).p(e)", "-(x.p(e))"]),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [X_2|X_2_rest] ->
            Fun_3 = fun Fun_3_loop(List, X_2) ->
    case List of
        [] -> {X_2};
        [E_2|E_2_rest] ->
            A = -p(X_2, E_2),
            B = -p(X_2, E_2),
            C = p(-X_2, E_2),
            D = -p(X_2, E_2),
            io:format("~ts~n", [(((((((((((((((((((("x = " ++ (case (X_2 < 0) of
    true -> "";
    _ -> " "
end)) ++ lists:flatten(io_lib:format("~p", [mochi_to_int(X_2)]))) ++ " e = ") ++ lists:flatten(io_lib:format("~p", [mochi_to_int(E_2)]))) ++ " | ") ++ (case erlang:is_map(erlang:get('ops')) of true -> maps:get(0, erlang:get('ops'), nil); _ -> lists:nth(0 + 1, erlang:get('ops')) end)) ++ " = ") ++ padint(A)) ++ " | ") ++ (case erlang:is_map(erlang:get('ops')) of true -> maps:get(1, erlang:get('ops'), nil); _ -> lists:nth(1 + 1, erlang:get('ops')) end)) ++ " = ") ++ padint(B)) ++ " | ") ++ (case erlang:is_map(erlang:get('ops')) of true -> maps:get(2, erlang:get('ops'), nil); _ -> lists:nth(2 + 1, erlang:get('ops')) end)) ++ " = ") ++ padint(C)) ++ " | ") ++ (case erlang:is_map(erlang:get('ops')) of true -> maps:get(3, erlang:get('ops'), nil); _ -> lists:nth(3 + 1, erlang:get('ops')) end)) ++ " = ") ++ padint(D))]),
            Fun_3_loop(E_2_rest, X_2)
    end
end,
{X_2} = Fun_3([2, 3], X_2),
            Fun_2_loop(X_2_rest)
    end
end,
{} = Fun_2([-5, 5]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
