#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, shuffle/1]).

% Generated by Mochi transpiler v0.10.41 (df7e5d4e15) on 2025-07-27 05:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

shuffle(Xs) ->
    try
        Arr = Xs,
        I = (length(Arr) - 1),
        Fun = fun Fun_loop(Arr, I, Xs) ->
    case (I > 0) of
        true ->
            J = (mochi_now() rem (I + 1)),
            Tmp = lists:nth(I + 1, Arr),
            Arr_2 = lists:sublist(Arr, I) ++ [lists:nth(J + 1, Arr)] ++ lists:nthtail(I + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, J) ++ [Tmp] ++ lists:nthtail(J + 1, Arr_2),
            I_2 = (I - 1),
            Fun_loop(Arr_3, I_2, Xs);
        _ -> {Arr, I, Xs}
    end
end,
{Arr_3, I_2, Xs} = Fun(Arr, I, Xs),
        Arr_3
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [W|W_rest] ->
            io:format("~p~n", [W]),
            Fun_2_loop(W_rest)
    end
end,
{} = Fun_2(shuffle(["Enjoy", "Rosetta", "Code"])),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
