#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mean/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (87d3efb875) on 2025-08-03 08:53 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

mean(V) ->
    try
        case (length(V) == 0) of
        true -> throw({return, #{"ok" => false}});
        _ -> ok
    end,
        Sum = 0,
        I = 0,
        Fun = fun Fun_loop(I, Sum, V) ->
    case (I < length(V)) of
        true ->
            Sum_2 = (Sum + (case erlang:is_map(V) of true -> maps:get(I, V, nil); _ -> lists:nth(I + 1, V) end)),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, V);
        _ -> {I, Sum, V}
    end
end,
{I_2, Sum_2, V} = Fun(I, Sum, V),
        #{"ok" => true, "mean" => mochi_safe_div(Sum_2, float(length(V)))}
    catch {return, Ret} -> Ret end.

main() ->
    try
        Sets = [[], [3, 1, 4, 1, 5, 9], [1.0e+20, 3, 1, 4, 1, 5, 9, -1.0e+20], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0.11], [10, 20, 30, 40, 50, -100, 4.7, -1100]],
        Fun_2 = fun Fun_2_loop(List, Sets) ->
    case List of
        [] -> {Sets};
        [V_2|V_2_rest] ->
            io:format("~ts~n", [("Vector: " ++ lists:flatten(io_lib:format("~p", [V_2])))]),
            R = mean(V_2),
            case maps:get("ok", R, nil) of
        true -> io:format("~ts~n", [((("Mean of " ++ lists:flatten(io_lib:format("~p", [length(V_2)]))) ++ " numbers is ") ++ lists:flatten(io_lib:format("~p", [maps:get("mean", R, nil)])))]);
        _ -> io:format("~ts~n", ["Mean undefined"])
    end,
            io:format("~ts~n", [""]),
            Fun_2_loop(V_2_rest, Sets)
    end
end,
{Sets} = Fun_2(Sets, Sets),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
