#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, add/2, mul/2, neg/1, inv/1, conj/1, cstr/1]).

% Generated by Mochi transpiler v0.10.40 (029b538ca5) on 2025-07-25 15:20 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

add(A, B) ->
    try
        #{"re" => (maps:get("re", A, nil) + maps:get("re", B, nil)), "im" => (maps:get("im", A, nil) + maps:get("im", B, nil))}
    catch {return, Ret} -> Ret end.

mul(A_2, B_2) ->
    try
        #{"re" => ((maps:get("re", A_2, nil) * maps:get("re", B_2, nil)) - (maps:get("im", A_2, nil) * maps:get("im", B_2, nil))), "im" => ((maps:get("re", A_2, nil) * maps:get("im", B_2, nil)) + (maps:get("im", A_2, nil) * maps:get("re", B_2, nil)))}
    catch {return, Ret} -> Ret end.

neg(A_3) ->
    try
        #{"re" => -maps:get("re", A_3, nil), "im" => -maps:get("im", A_3, nil)}
    catch {return, Ret} -> Ret end.

inv(A_4) ->
    try
        Denom = ((maps:get("re", A_4, nil) * maps:get("re", A_4, nil)) + (maps:get("im", A_4, nil) * maps:get("im", A_4, nil))),
        #{"re" => (maps:get("re", A_4, nil) / Denom), "im" => (-maps:get("im", A_4, nil) / Denom)}
    catch {return, Ret} -> Ret end.

conj(A_5) ->
    try
        #{"re" => maps:get("re", A_5, nil), "im" => -maps:get("im", A_5, nil)}
    catch {return, Ret} -> Ret end.

cstr(A_6) ->
    try
        S = ("(" ++ lists:flatten(io_lib:format("~p", [maps:get("re", A_6, nil)]))),
        case (maps:get("im", A_6, nil) >= 0) of
        true -> S_2 = (((S ++ "+") ++ lists:flatten(io_lib:format("~p", [maps:get("im", A_6, nil)]))) ++ "i)"),
            S_4 = S_2;
        _ -> S_3 = ((S ++ lists:flatten(io_lib:format("~p", [maps:get("im", A_6, nil)]))) ++ "i)"),
            S_4 = S_3
    end,
        S_4
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('a', #{"re" => 1, "im" => 1}),
    erlang:put('b', #{"re" => 3.14159, "im" => 1.25}),
    io:format("~ts~n", [("a:       " ++ cstr(erlang:get('a')))]),
    io:format("~ts~n", [("b:       " ++ cstr(erlang:get('b')))]),
    io:format("~ts~n", [("a + b:   " ++ cstr(add(erlang:get('a'), erlang:get('b'))))]),
    io:format("~ts~n", [("a * b:   " ++ cstr(mul(erlang:get('a'), erlang:get('b'))))]),
    io:format("~ts~n", [("-a:      " ++ cstr(neg(erlang:get('a'))))]),
    io:format("~ts~n", [("1 / a:   " ++ cstr(inv(erlang:get('a'))))]),
    io:format("~ts~n", [("aÌ…:       " ++ cstr(conj(erlang:get('a'))))]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
