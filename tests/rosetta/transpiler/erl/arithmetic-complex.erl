#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, add/2, mul/2, neg/1, inv/1, conj/1, cstr/1]).

% Generated by Mochi transpiler v0.10.39 (6b9be63842) on 2025-07-24 22:46 +0700

add(A, B) ->
    try
        #{"re" => (maps:get("re", A) + maps:get("re", B)), "im" => (maps:get("im", A) + maps:get("im", B))}
    catch {return, Ret} -> Ret end.

mul(A_2, B_2) ->
    try
        #{"re" => ((maps:get("re", A_2) * maps:get("re", B_2)) - (maps:get("im", A_2) * maps:get("im", B_2))), "im" => ((maps:get("re", A_2) * maps:get("im", B_2)) + (maps:get("im", A_2) * maps:get("re", B_2)))}
    catch {return, Ret} -> Ret end.

neg(A_3) ->
    try
        #{"re" => -maps:get("re", A_3), "im" => -maps:get("im", A_3)}
    catch {return, Ret} -> Ret end.

inv(A_4) ->
    try
        Denom = ((maps:get("re", A_4) * maps:get("re", A_4)) + (maps:get("im", A_4) * maps:get("im", A_4))),
        #{"re" => (maps:get("re", A_4) / Denom), "im" => (-maps:get("im", A_4) / Denom)}
    catch {return, Ret} -> Ret end.

conj(A_5) ->
    try
        #{"re" => maps:get("re", A_5), "im" => -maps:get("im", A_5)}
    catch {return, Ret} -> Ret end.

cstr(A_6) ->
    try
        S = ("(" ++ lists:flatten(io_lib:format("~p", [maps:get("re", A_6)]))),
        case (maps:get("im", A_6) >= 0) of
        true -> S_2 = (((S ++ "+") ++ lists:flatten(io_lib:format("~p", [maps:get("im", A_6)]))) ++ "i)"),
            S_4 = S_2;
        _ -> S_3 = ((S ++ lists:flatten(io_lib:format("~p", [maps:get("im", A_6)]))) ++ "i)"),
            S_4 = S_3
    end,
        S_4
    catch {return, Ret} -> Ret end.

main(_) ->
    erlang:put('a', #{"re" => 1, "im" => 1}),
    erlang:put('b', #{"re" => 3.14159, "im" => 1.25}),
    io:format("~ts~n", [("a:       " ++ cstr(erlang:get('a')))]),
    io:format("~ts~n", [("b:       " ++ cstr(erlang:get('b')))]),
    io:format("~ts~n", [("a + b:   " ++ cstr(add(erlang:get('a'), erlang:get('b'))))]),
    io:format("~ts~n", [("a * b:   " ++ cstr(mul(erlang:get('a'), erlang:get('b'))))]),
    io:format("~ts~n", [("-a:      " ++ cstr(neg(erlang:get('a'))))]),
    io:format("~ts~n", [("1 / a:   " ++ cstr(inv(erlang:get('a'))))]),
    io:format("~ts~n", [("aÌ…:       " ++ cstr(conj(erlang:get('a'))))]).
