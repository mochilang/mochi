#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, newfps/1, extract/2, one/0, add/2, sub/2, mul/2, div_fn/2, differentiate/1, integrate/1, sincos/0, floorf/1, fmtf5/1, padfloat5/2, partialseries/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (0f7fd10226) on 2025-08-02 20:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

newfps(Fn) ->
    try
        #{"coeffs" => [], "compute" => Fn}
    catch {return, Ret} -> Ret end.

extract(F, N) ->
    try
        Fun = fun Fun_loop(F, N) ->
    case (length(maps:get("coeffs", F, nil)) =< N) of
        true ->
            Idx = length(maps:get("coeffs", F, nil)),
            V = nil,
            F_2 = maps:put("coeffs", lists:append(maps:get("coeffs", F, nil), [nil]), F),
            Fun_loop(F_2, N);
        _ -> {F, N}
    end
end,
{F_2, N} = Fun(F, N),
        {(case erlang:is_map(maps:get("coeffs", F_2, nil)) of true -> maps:get(N, maps:get("coeffs", F_2, nil), nil); _ -> lists:nth(N + 1, maps:get("coeffs", F_2, nil)) end), F_2}
    catch {return, Ret} -> Ret end.

one() ->
    try
        newfps(fun(I) ->
    try
        case (I == 0) of
        true -> throw({return, 1});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end
end)
    catch {return, Ret} -> Ret end.

add(A, B) ->
    try
        newfps(fun(N_2) ->
    try
        (extract(A, N_2) + extract(B, N_2))
    catch {return, Ret} -> Ret end
end)
    catch {return, Ret} -> Ret end.

sub(A_2, B_2) ->
    try
        newfps(fun(N_3) ->
    try
        (extract(A_2, N_3) - extract(B_2, N_3))
    catch {return, Ret} -> Ret end
end)
    catch {return, Ret} -> Ret end.

mul(A_3, B_3) ->
    try
        newfps(fun(N_4) ->
    try
        S = 0,
        K = 0,
        Fun_2 = fun Fun_2_loop(A_3, B_3, K, N_4, S) ->
    case (K =< N_4) of
        true ->
            S_2 = (S + mochi_safe_mul(extract(A_3, K), extract(B_3, (N_4 - K)))),
            K_2 = (K + 1),
            Fun_2_loop(A_3, B_3, K_2, N_4, S_2);
        _ -> {A_3, B_3, K, N_4, S}
    end
end,
{A_3, B_3, K_2, N_4, S_2} = Fun_2(A_3, B_3, K, N_4, S),
        S_2
    catch {return, Ret} -> Ret end
end)
    catch {return, Ret} -> Ret end.

div_fn(A_4, B_4) ->
    try
        Q = newfps(fun(N_5) ->
    try
        0
    catch {return, Ret} -> Ret end
end),
        Q_2 = maps:put("compute", fun(N_6) ->
    try
        B0 = extract(B_4, 0),
        case (B0 == 0) of
        true -> throw({return, mochi_safe_div(0, 0)});
        _ -> ok
    end,
        {S_3, A_5} = extract(A_4, N_6),
        K_3 = 1,
        Fun_3 = fun Fun_3_loop(A_5, B_4, B0, K_3, N_6, Q, S_3) ->
    case (K_3 =< N_6) of
        true ->
            S_4 = (S_3 - mochi_safe_mul(extract(B_4, K_3), extract(Q, (N_6 - K_3)))),
            K_4 = (K_3 + 1),
            Fun_3_loop(A_5, B_4, B0, K_4, N_6, Q, S_4);
        _ -> {A_5, B_4, B0, K_3, N_6, Q, S_3}
    end
end,
{A_5, B_4, B0, K_4, N_6, Q, S_4} = Fun_3(A_5, B_4, B0, K_3, N_6, Q, S_3),
        mochi_safe_div(S_4, B0)
    catch {return, Ret} -> Ret end
end, Q),
        Q_2
    catch {return, Ret} -> Ret end.

differentiate(A_6) ->
    try
        newfps(fun(N_7) ->
    try
        mochi_safe_mul(float((N_7 + 1)), extract(A_6, (N_7 + 1)))
    catch {return, Ret} -> Ret end
end)
    catch {return, Ret} -> Ret end.

integrate(A_7) ->
    try
        newfps(fun(N_8) ->
    try
        case (N_8 == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        mochi_safe_div(extract(A_7, (N_8 - 1)), float(N_8))
    catch {return, Ret} -> Ret end
end)
    catch {return, Ret} -> Ret end.

sincos() ->
    try
        Sin = newfps(fun(N_9) ->
    try
        0
    catch {return, Ret} -> Ret end
end),
        Cos = sub(one(), integrate(Sin)),
        Sin_2 = maps:put("compute", fun(N_10) ->
    try
        case (N_10 == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        mochi_safe_div(extract(Cos, (N_10 - 1)), float(N_10))
    catch {return, Ret} -> Ret end
end, Sin),
        #{"sin" => Sin_2, "cos" => Cos}
    catch {return, Ret} -> Ret end.

floorf(X) ->
    try
        Y = mochi_to_int(X),
        float(Y)
    catch {return, Ret} -> Ret end.

fmtf5(X_2) ->
    try
        Y_2 = mochi_safe_div(floorf((mochi_safe_mul(X_2, 100000) + 0.5)), 100000),
        S_5 = lists:flatten(io_lib:format("~p", [Y_2])),
        Dot = mochi_index_of(S_5, "."),
        case (Dot == (0 - 1)) of
        true -> S_6 = (S_5 ++ ".00000"),
            Decs_4 = nil,
            Fun_6 = nil,
            S_10 = S_6;
        _ -> Decs = ((length(S_5) - Dot) - 1),
            case (Decs > 5) of
        true -> S_7 = string:substr(S_5, 0 + 1, ((Dot + 6) - 0)),
            Decs_3 = Decs,
            Fun_5 = nil,
            S_9 = S_7;
        _ -> Fun_4 = fun Fun_4_loop(Decs, Dot, S_5, X_2, Y_2) ->
    case (Decs < 5) of
        true ->
            S_8 = (S_5 ++ "0"),
            Decs_2 = (Decs + 1),
            Fun_4_loop(Decs_2, Dot, S_8, X_2, Y_2);
        _ -> {Decs, Dot, S_5, X_2, Y_2}
    end
end,
{Decs_2, Dot, S_8, X_2, Y_2} = Fun_4(Decs, Dot, S_5, X_2, Y_2),
            Decs_3 = Decs_2,
            Fun_5 = Fun_4,
            S_9 = S_8
    end,
            Decs_4 = Decs_3,
            Fun_6 = Fun_5,
            S_10 = S_9
    end,
        S_10
    catch {return, Ret} -> Ret end.

padfloat5(X_3, Width) ->
    try
        S_11 = fmtf5(X_3),
        Fun_7 = fun Fun_7_loop(S_11, Width, X_3) ->
    case (length(S_11) < Width) of
        true ->
            S_12 = (" " ++ S_11),
            Fun_7_loop(S_12, Width, X_3);
        _ -> {S_11, Width, X_3}
    end
end,
{S_12, Width, X_3} = Fun_7(S_11, Width, X_3),
        S_12
    catch {return, Ret} -> Ret end.

partialseries(F_3) ->
    try
        Out = "",
        I_2 = 0,
        Fun_8 = fun Fun_8_loop(F_3, I_2, Out) ->
    case (I_2 < 6) of
        true ->
            Out_2 = (((Out ++ " ") ++ padfloat5(extract(F_3, I_2), 8)) ++ " "),
            I_3 = (I_2 + 1),
            Fun_8_loop(F_3, I_3, Out_2);
        _ -> {F_3, I_2, Out}
    end
end,
{F_3, I_3, Out_2} = Fun_8(F_3, I_2, Out),
        Out_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        P = sincos(),
        io:format("~ts~n", [("sin:" ++ partialseries(maps:get("sin", P, nil)))]),
        io:format("~ts~n", [("cos:" ++ partialseries(maps:get("cos", P, nil)))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
