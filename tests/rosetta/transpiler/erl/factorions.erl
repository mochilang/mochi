#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('facts', [1]),
    erlang:put('n', 1),
    Fun = fun Fun_loop() ->
    case (erlang:get('n') < 12) of
        true ->
            erlang:put('facts', lists:append(erlang:get('facts'), [((case erlang:is_map(erlang:get('facts')) of true -> maps:get((erlang:get('n') - 1), erlang:get('facts'), nil); _ -> lists:nth((erlang:get('n') - 1) + 1, erlang:get('facts')) end) * erlang:get('n'))])),
            erlang:put('n', (erlang:get('n') + 1)),
            Fun_loop();
        _ -> {}
    end
end,
{} = Fun(),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [B|B_rest] ->
            io:format("~ts~n", [(("The factorions for base " ++ lists:flatten(io_lib:format("~p", [B]))) ++ " are:")]),
            Line = "",
            I = 1,
            Fun_4 = fun Fun_4_loop(B, I, Line) ->
    case (I < 1500000) of
        true ->
            M = I,
            Sum = 0,
            Fun_3 = fun Fun_3_loop(B, I, Line, M, Sum) ->
    case (M > 0) of
        true ->
            D = (M rem B),
            Sum_2 = (Sum + (case erlang:is_map(erlang:get('facts')) of true -> maps:get(D, erlang:get('facts'), nil); _ -> lists:nth(D + 1, erlang:get('facts')) end)),
            M_2 = (M div B),
            Fun_3_loop(B, I, Line, M_2, Sum_2);
        _ -> {B, I, Line, M, Sum}
    end
end,
{B, I, Line, M_2, Sum_2} = Fun_3(B, I, Line, M, Sum),
            case (Sum_2 == I) of
        true -> Line_2 = ((Line ++ lists:flatten(io_lib:format("~p", [I]))) ++ " "),
            Line_3 = Line_2;
        _ -> Line_3 = Line
    end,
            I_2 = (I + 1),
            Fun_4_loop(B, I_2, Line_3);
        _ -> {B, I, Line}
    end
end,
{B, I_2, Line_3} = Fun_4(B, I, Line),
            io:format("~ts~n", [Line_3]),
            io:format("~ts~n", [""]),
            Fun_2_loop(B_rest)
    end
end,
{} = Fun_2(lists:seq(9, (13) - 1)),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
