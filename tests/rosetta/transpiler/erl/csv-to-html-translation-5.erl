#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, split/2, htmlescape/1]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

split(S, Sep) ->
    try
        Out = [],
        Start = 0,
        I = 0,
        N = length(Sep),
        Fun = fun Fun_loop(I, N, Out, S, Sep, Start) ->
    case (I =< (length(S) - N)) of
        true ->
            case (string:substr(S, I + 1, ((I + N) - I)) == Sep) of
        true -> Out_2 = lists:append(Out, [string:substr(S, Start + 1, (I - Start))]),
            I_2 = (I + N),
            Start_2 = I_2,
            I_4 = I_2,
            Out_3 = Out_2,
            Start_3 = Start_2;
        _ -> I_3 = (I + 1),
            I_4 = I_3,
            Out_3 = Out,
            Start_3 = Start
    end,
            Fun_loop(I_4, N, Out_3, S, Sep, Start_3);
        _ -> {I, N, Out, S, Sep, Start}
    end
end,
{I_4, N, Out_3, S, Sep, Start_3} = Fun(I, N, Out, S, Sep, Start),
        Out_4 = lists:append(Out_3, [string:substr(S, Start_3 + 1, (length(S) - Start_3))]),
        Out_4
    catch {return, Ret} -> Ret end.

htmlescape(S_2) ->
    try
        Out_5 = "",
        I_5 = 0,
        Fun_2 = fun Fun_2_loop(I_5, Out_5, S_2) ->
    case (I_5 < length(S_2)) of
        true ->
            Ch = string:substr(S_2, I_5 + 1, ((I_5 + 1) - I_5)),
            case (Ch == "&") of
        true -> Out_6 = (Out_5 ++ "&amp;"),
            Out_12 = Out_6;
        _ -> case (Ch == "<") of
        true -> Out_7 = (Out_5 ++ "&lt;"),
            Out_11 = Out_7;
        _ -> case (Ch == ">") of
        true -> Out_8 = (Out_5 ++ "&gt;"),
            Out_10 = Out_8;
        _ -> Out_9 = (Out_5 ++ Ch),
            Out_10 = Out_9
    end,
            Out_11 = Out_10
    end,
            Out_12 = Out_11
    end,
            I_6 = (I_5 + 1),
            Fun_2_loop(I_6, Out_12, S_2);
        _ -> {I_5, Out_5, S_2}
    end
end,
{I_6, Out_12, S_2} = Fun_2(I_5, Out_5, S_2),
        Out_12
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('c', ((((("Character,Speech\n" ++ "The multitude,The messiah! Show us the messiah!\n") ++ "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n") ++ "The multitude,Who are you?\n") ++ "Brians mother,I'm his mother; that's who!\n") ++ "The multitude,Behold his mother! Behold his mother!")),
    erlang:put('rows', []),
    Fun_3 = fun Fun_3_loop(List) ->
    case List of
        [] -> {};
        [Line|Line_rest] ->
            erlang:put('rows', lists:append(erlang:get('rows'), [string:tokens(Line, ",")])),
            Fun_3_loop(Line_rest)
    end
end,
{} = Fun_3(string:tokens(erlang:get('c'), "\n")),
    io:format("~ts~n", ["<table>"]),
    Fun_4 = fun Fun_4_loop(List) ->
    case List of
        [] -> {};
        [Row|Row_rest] ->
            Cells = "",
            Fun_5 = fun Fun_5_loop(List, Cells, Row) ->
    case List of
        [] -> {Cells, Row};
        [Cell|Cell_rest] ->
            Cells_2 = (((Cells ++ "<td>") ++ htmlescape(Cell)) ++ "</td>"),
            Fun_5_loop(Cell_rest, Cells_2, Row)
    end
end,
{Cells_2, Row} = Fun_5(Row, Cells, Row),
            io:format("~ts~n", [(("    <tr>" ++ Cells_2) ++ "</tr>")]),
            Fun_4_loop(Row_rest)
    end
end,
{} = Fun_4(erlang:get('rows')),
    io:format("~ts~n", ["</table>"]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
