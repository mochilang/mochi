#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, char/1, frombytes/1]).

% Generated by Mochi transpiler v0.10.40 (7bf46dbf08) on 2025-07-25 14:27 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_pad_start(S, Len, Ch) ->
    Fill0 = case Ch of
        "" -> " ";
        _ -> Ch
    end,
    Fill = string:substr(Fill0, 1, 1),
    SL = length(S),
    case SL >= Len of
        true -> S;
        _ -> string:copies(Fill, Len - SL) ++ S
    end.

char(N) ->
    try
        Letters = "abcdefghijklmnopqrstuvwxyz",
        Idx = (N - 97),
        case ((Idx < 0) orelse (Idx >= length("abcdefghijklmnopqrstuvwxyz"))) of
        true -> throw({return, "?"});
        _ -> ok
    end,
        string:substr("abcdefghijklmnopqrstuvwxyz", Idx + 1, ((Idx + 1) - Idx))
    catch {return, Ret} -> Ret end.

frombytes(Bs) ->
    try
        S = "",
        I = 0,
        Fun = fun Fun_loop(Bs, I, S) ->
    case (I < length(Bs)) of
        true ->
            S_2 = (S ++ char(lists:nth(I + 1, Bs))),
            I_2 = (I + 1),
            Fun_loop(Bs, I_2, S_2);
        _ -> {Bs, I, S}
    end
end,
{Bs, I_2, S_2} = Fun(Bs, I, S),
        S_2
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('b', [98, 105, 110, 97, 114, 121]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [erlang:get('b')]))]),
    erlang:put('c', erlang:get('b')),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [erlang:get('c')]))]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [(erlang:get('b') == erlang:get('c'))]))]),
    erlang:put('d', []),
    erlang:put('i', 0),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('i') < length(erlang:get('b'))) of
        true ->
            erlang:put('d', lists:append(erlang:get('d'), [lists:nth(erlang:get('i') + 1, erlang:get('b'))])),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    D = erlang:get('d'),
    D_2 = lists:sublist(D, 1) ++ [97] ++ lists:nthtail(1 + 1, D),
    erlang:put('d', D_2),
    D_3 = erlang:get('d'),
    D_4 = lists:sublist(D_3, 4) ++ [110] ++ lists:nthtail(4 + 1, D_3),
    erlang:put('d', D_4),
    io:format("~p~n", [frombytes(erlang:get('b'))]),
    io:format("~p~n", [frombytes(erlang:get('d'))]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [(length(erlang:get('b')) == 0)]))]),
    erlang:put('z', lists:append(erlang:get('b'), [122])),
    io:format("~p~n", [frombytes(erlang:get('z'))]),
    erlang:put('sub', lists:sublist(erlang:get('b'), 1 + 1, (3 - 1))),
    io:format("~p~n", [frombytes(erlang:get('sub'))]),
    erlang:put('f', []),
    erlang:put('i', 0),
    Fun_3 = fun Fun_3_loop(D_4) ->
    case (erlang:get('i') < length(erlang:get('d'))) of
        true ->
            Val = lists:nth(erlang:get('i') + 1, erlang:get('d')),
            case (Val == 110) of
        true -> erlang:put('f', lists:append(erlang:get('f'), [109]));
        _ -> erlang:put('f', lists:append(erlang:get('f'), [Val]))
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop(D_4);
        _ -> {D_4}
    end
end,
{D_4} = Fun_3(D_4),
    io:format("~ts~n", [((frombytes(erlang:get('d')) ++ " -> ") ++ frombytes(erlang:get('f')))]),
    erlang:put('rem', []),
    erlang:put('rem', lists:append(erlang:get('rem'), [lists:nth(0 + 1, erlang:get('b'))])),
    erlang:put('i', 3),
    Fun_4 = fun Fun_4_loop(D_4) ->
    case (erlang:get('i') < length(erlang:get('b'))) of
        true ->
            erlang:put('rem', lists:append(erlang:get('rem'), [lists:nth(erlang:get('i') + 1, erlang:get('b'))])),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_4_loop(D_4);
        _ -> {D_4}
    end
end,
{D_4} = Fun_4(D_4),
    io:format("~p~n", [frombytes(erlang:get('rem'))]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
