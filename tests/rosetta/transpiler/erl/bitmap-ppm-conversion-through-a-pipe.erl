#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pixelfromrgb/1, rgbfrompixel/1, newbitmap/2, fillrgb/2, setpxrgb/4, nextrand/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (e0c44791e6) on 2025-07-25 18:01 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

pixelfromrgb(C) ->
    try
        R = (mochi_to_int((C div 65536)) rem 256),
        G = (mochi_to_int((C div 256)) rem 256),
        B = (C rem 256),
        #{"R" => R, "G" => G, "B" => B}
    catch {return, Ret} -> Ret end.

rgbfrompixel(P) ->
    try
        (((maps:get("R", P, nil) * 65536) + (maps:get("G", P, nil) * 256)) + maps:get("B", P, nil))
    catch {return, Ret} -> Ret end.

newbitmap(X, Y) ->
    try
        Data = [],
        Row = 0,
        Fun_2 = fun Fun_2_loop(Data, Row, X, Y) ->
    case (Row < Y) of
        true ->
            R_2 = [],
            Col = 0,
            Fun = fun Fun_loop(Col, Data, R_2, Row, X, Y) ->
    case (Col < X) of
        true ->
            R_3 = lists:append(R_2, [#{"R" => 0, "G" => 0, "B" => 0}]),
            Col_2 = (Col + 1),
            Fun_loop(Col_2, Data, R_3, Row, X, Y);
        _ -> {Col, Data, R_2, Row, X, Y}
    end
end,
{Col_2, Data, R_3, Row, X, Y} = Fun(Col, Data, R_2, Row, X, Y),
            Data_2 = lists:append(Data, [R_3]),
            Row_2 = (Row + 1),
            Fun_2_loop(Data_2, Row_2, X, Y);
        _ -> {Data, Row, X, Y}
    end
end,
{Data_2, Row_2, X, Y} = Fun_2(Data, Row, X, Y),
        #{"cols" => X, "rows" => Y, "px" => Data_2}
    catch {return, Ret} -> Ret end.

fillrgb(B_2, C_2) ->
    try
        Y_2 = 0,
        P_2 = pixelfromrgb(C_2),
        Fun_4 = fun Fun_4_loop(B_2, C_2, P_2, Y_2) ->
    case (Y_2 < maps:get("rows", B_2, nil)) of
        true ->
            X_2 = 0,
            Fun_3 = fun Fun_3_loop(B_2, C_2, P_2, X_2, Y_2) ->
    case (X_2 < maps:get("cols", B_2, nil)) of
        true ->
            Px = maps:get("px", B_2, nil),
            Row_3 = lists:nth(Y_2 + 1, Px),
            Row_4 = lists:sublist(Row_3, X_2) ++ [P_2] ++ lists:nthtail(X_2 + 1, Row_3),
            Px_2 = lists:sublist(Px, Y_2) ++ [Row_4] ++ lists:nthtail(Y_2 + 1, Px),
            B_3 = maps:put("px", Px_2, B_2),
            X_3 = (X_2 + 1),
            Fun_3_loop(B_3, C_2, P_2, X_3, Y_2);
        _ -> {B_2, C_2, P_2, X_2, Y_2}
    end
end,
{B_3, C_2, P_2, X_3, Y_2} = Fun_3(B_2, C_2, P_2, X_2, Y_2),
            Y_3 = (Y_2 + 1),
            Fun_4_loop(B_3, C_2, P_2, Y_3);
        _ -> {B_2, C_2, P_2, Y_2}
    end
end,
{B_3, C_2, P_2, Y_3} = Fun_4(B_2, C_2, P_2, Y_2),
        B_3
    catch {return, Ret} -> Ret end.

setpxrgb(B_4, X_4, Y_4, C_3) ->
    try
        case ((((X_4 < 0) orelse (X_4 >= maps:get("cols", B_4, nil))) orelse (Y_4 < 0)) orelse (Y_4 >= maps:get("rows", B_4, nil))) of
        true -> throw({return, false});
        _ -> ok
    end,
        Px_3 = maps:get("px", B_4, nil),
        Row_5 = lists:nth(Y_4 + 1, Px_3),
        Row_6 = lists:sublist(Row_5, X_4) ++ [pixelfromrgb(C_3)] ++ lists:nthtail(X_4 + 1, Row_5),
        Px_4 = lists:sublist(Px_3, Y_4) ++ [Row_6] ++ lists:nthtail(Y_4 + 1, Px_3),
        B_5 = maps:put("px", Px_4, B_4),
        true
    catch {return, Ret} -> Ret end.

nextrand(Seed) ->
    try
        (((Seed * 1664525) + 1013904223) rem 2147483648)
    catch {return, Ret} -> Ret end.

main() ->
    try
        Bm = newbitmap(400, 300),
        Bm_2 = fillrgb(Bm, 12615744),
        Seed_2 = mochi_now(),
        I = 0,
        Fun_5 = fun Fun_5_loop(Bm_2, I, Seed_2) ->
    case (I < 2000) of
        true ->
            Seed_3 = nextrand(Seed_2),
            X_5 = (Seed_3 rem 400),
            Seed_4 = nextrand(Seed_3),
            Y_5 = (Seed_4 rem 300),
            setpxrgb(Bm_2, X_5, Y_5, 8405024),
            I_2 = (I + 1),
            Fun_5_loop(Bm_2, I_2, Seed_4);
        _ -> {Bm_2, I, Seed_2}
    end
end,
{Bm_2, I_2, Seed_4} = Fun_5(Bm_2, I, Seed_2),
        X_6 = 0,
        Fun_8 = fun Fun_8_loop(Bm_2, I_2, Seed_4, X_6) ->
    case (X_6 < 400) of
        true ->
            Y_6 = 240,
            Fun_6 = fun Fun_6_loop(Bm_2, I_2, Seed_4, X_6, Y_6) ->
    case (Y_6 < 245) of
        true ->
            setpxrgb(Bm_2, X_6, Y_6, 8405024),
            Y_7 = (Y_6 + 1),
            Fun_6_loop(Bm_2, I_2, Seed_4, X_6, Y_7);
        _ -> {Bm_2, I_2, Seed_4, X_6, Y_6}
    end
end,
{Bm_2, I_2, Seed_4, X_6, Y_7} = Fun_6(Bm_2, I_2, Seed_4, X_6, Y_6),
            Y_8 = 260,
            Fun_7 = fun Fun_7_loop(Bm_2, I_2, Seed_4, X_6, Y_8) ->
    case (Y_8 < 265) of
        true ->
            setpxrgb(Bm_2, X_6, Y_8, 8405024),
            Y_9 = (Y_8 + 1),
            Fun_7_loop(Bm_2, I_2, Seed_4, X_6, Y_9);
        _ -> {Bm_2, I_2, Seed_4, X_6, Y_8}
    end
end,
{Bm_2, I_2, Seed_4, X_6, Y_9} = Fun_7(Bm_2, I_2, Seed_4, X_6, Y_8),
            X_7 = (X_6 + 1),
            Fun_8_loop(Bm_2, I_2, Seed_4, X_7);
        _ -> {Bm_2, I_2, Seed_4, X_6}
    end
end,
{Bm_2, I_2, Seed_4, X_7} = Fun_8(Bm_2, I_2, Seed_4, X_6),
        Y_10 = 0,
        Fun_11 = fun Fun_11_loop(Bm_2, I_2, Seed_4, X_7, Y_10) ->
    case (Y_10 < 300) of
        true ->
            X_8 = 80,
            Fun_9 = fun Fun_9_loop(Bm_2, I_2, Seed_4, X_8, Y_10) ->
    case (X_8 < 85) of
        true ->
            setpxrgb(Bm_2, X_8, Y_10, 8405024),
            X_9 = (X_8 + 1),
            Fun_9_loop(Bm_2, I_2, Seed_4, X_9, Y_10);
        _ -> {Bm_2, I_2, Seed_4, X_8, Y_10}
    end
end,
{Bm_2, I_2, Seed_4, X_9, Y_10} = Fun_9(Bm_2, I_2, Seed_4, X_8, Y_10),
            X_10 = 95,
            Fun_10 = fun Fun_10_loop(Bm_2, I_2, Seed_4, X_10, Y_10) ->
    case (X_10 < 100) of
        true ->
            setpxrgb(Bm_2, X_10, Y_10, 8405024),
            X_11 = (X_10 + 1),
            Fun_10_loop(Bm_2, I_2, Seed_4, X_11, Y_10);
        _ -> {Bm_2, I_2, Seed_4, X_10, Y_10}
    end
end,
{Bm_2, I_2, Seed_4, X_11, Y_10} = Fun_10(Bm_2, I_2, Seed_4, X_10, Y_10),
            Y_11 = (Y_10 + 1),
            Fun_11_loop(Bm_2, I_2, Seed_4, X_11, Y_11);
        _ -> {Bm_2, I_2, Seed_4, X_7, Y_10}
    end
end,
{Bm_2, I_2, Seed_4, X_11, Y_11} = Fun_11(Bm_2, I_2, Seed_4, X_7, Y_10),
        Bm_2
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
