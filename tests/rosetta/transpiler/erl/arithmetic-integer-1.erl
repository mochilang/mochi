#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (0480f61bb0) on 2025-07-25 16:59 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

main() ->
    try
        A = 12,
        B = 8,
        io:format("~ts~n", [((((lists:flatten(io_lib:format("~p", [12])) ++ " + ") ++ lists:flatten(io_lib:format("~p", [8]))) ++ " = ") ++ lists:flatten(io_lib:format("~p", [(12 + 8)])))]),
        io:format("~ts~n", [((((lists:flatten(io_lib:format("~p", [12])) ++ " - ") ++ lists:flatten(io_lib:format("~p", [8]))) ++ " = ") ++ lists:flatten(io_lib:format("~p", [(12 - 8)])))]),
        io:format("~ts~n", [((((lists:flatten(io_lib:format("~p", [12])) ++ " * ") ++ lists:flatten(io_lib:format("~p", [8]))) ++ " = ") ++ lists:flatten(io_lib:format("~p", [(12 * 8)])))]),
        io:format("~ts~n", [((((lists:flatten(io_lib:format("~p", [12])) ++ " / ") ++ lists:flatten(io_lib:format("~p", [8]))) ++ " = ") ++ lists:flatten(io_lib:format("~p", [mochi_to_int((12 div 8))])))]),
        io:format("~ts~n", [((((lists:flatten(io_lib:format("~p", [12])) ++ " % ") ++ lists:flatten(io_lib:format("~p", [8]))) ++ " = ") ++ lists:flatten(io_lib:format("~p", [(12 rem 8)])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
