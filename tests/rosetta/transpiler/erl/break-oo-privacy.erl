#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, examineandmodify/1, anotherexample/0]).

% Generated by Mochi transpiler v0.10.40 (83683ecfe3) on 2025-07-25 22:53 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

examineandmodify(F) ->
    try
        io:format("~ts~n", [((((((((" v: {" ++ lists:flatten(io_lib:format("~p", [maps:get("Exported", F, nil)]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [maps:get("unexported", F, nil)]))) ++ "} = {") ++ lists:flatten(io_lib:format("~p", [maps:get("Exported", F, nil)]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [maps:get("unexported", F, nil)]))) ++ "}")]),
        io:format("~ts~n", ["    Idx Name       Type CanSet"]),
        io:format("~ts~n", ["     0: Exported   int  true"]),
        io:format("~ts~n", ["     1: unexported int  false"]),
        F_2 = maps:put("Exported", 16, F),
        F_3 = maps:put("unexported", 44, F_2),
        io:format("~ts~n", ["  modified unexported field via unsafe"]),
        F_3
    catch {return, Ret} -> Ret end.

anotherexample() ->
    try
        io:format("~ts~n", ["bufio.ReadByte returned error: unsafely injected error value into bufio inner workings"]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('obj', #{"Exported" => 12, "unexported" => 42}),
    io:format("~ts~n", [(((("obj: {" ++ lists:flatten(io_lib:format("~p", [maps:get("Exported", erlang:get('obj'), nil)]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [maps:get("unexported", erlang:get('obj'), nil)]))) ++ "}")]),
    erlang:put('obj', examineandmodify(erlang:get('obj'))),
    io:format("~ts~n", [(((("obj: {" ++ lists:flatten(io_lib:format("~p", [maps:get("Exported", erlang:get('obj'), nil)]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [maps:get("unexported", erlang:get('obj'), nil)]))) ++ "}")]),
    anotherexample(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
