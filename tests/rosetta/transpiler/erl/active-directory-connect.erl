#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, connect/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (2d48801c25) on 2025-07-25 19:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

connect(Client) ->
    try
        ((maps:get("Host", Client, nil) /= "") andalso (maps:get("Port", Client, nil) > 0))
    catch {return, Ret} -> Ret end.

main() ->
    try
        Client_2 = #{"Base" => "dc=example,dc=com", "Host" => "ldap.example.com", "Port" => 389, "UseSSL" => false, "BindDN" => "uid=readonlyuser,ou=People,dc=example,dc=com", "BindPassword" => "readonlypassword", "UserFilter" => "(uid=%s)", "GroupFilter" => "(memberUid=%s)", "Attributes" => ["givenName", "sn", "mail", "uid"]},
        case connect(Client_2) of
        true -> io:format("~ts~n", [("Connected to " ++ maps:get("Host", Client_2, nil))]);
        _ -> io:format("~ts~n", ["Failed to connect"])
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
