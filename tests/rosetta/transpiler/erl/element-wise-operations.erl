#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow10/1, powf/2, formatfloat/2, padleft/2, rowstring/1, printmatrix/2, elementwisemm/3, elementwisems/3, add/2, sub/2, mul/2, div_fn/2, exp/2, main/0]).

% Generated by Mochi transpiler v0.10.52 (d4a3dfd38e) on 2025-08-01 18:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

pow10(N) ->
    try
        R = 1,
        I = 0,
        Fun = fun Fun_loop(I, N, R) ->
    case (I < N) of
        true ->
            R_2 = (R * 10),
            I_2 = (I + 1),
            Fun_loop(I_2, N, R_2);
        _ -> {I, N, R}
    end
end,
{I_2, N, R_2} = Fun(I, N, R),
        R_2
    catch {return, Ret} -> Ret end.

powf(Base, Exp) ->
    try
        case (Exp == 0.5) of
        true -> Guess = Base,
            I_3 = 0,
            Fun_2 = fun Fun_2_loop(Base, Exp, Guess, I_3) ->
    case (I_3 < 20) of
        true ->
            Guess_2 = ((Guess + (Base / Guess)) / 2),
            I_4 = (I_3 + 1),
            Fun_2_loop(Base, Exp, Guess_2, I_4);
        _ -> {Base, Exp, Guess, I_3}
    end
end,
{Base, Exp, Guess_2, I_4} = Fun_2(Base, Exp, Guess, I_3),
            throw({return, Guess_2}),
            Fun_3 = Fun_2,
            Guess_3 = Guess_2,
            I_5 = I_4;
        _ -> Fun_3 = nil,
            Guess_3 = nil,
            I_5 = nil
    end,
        Result = 1,
        N_2 = mochi_to_int(Exp),
        I_6 = 0,
        Fun_4 = fun Fun_4_loop(Base, Exp, Guess_3, I_6, N_2, Result) ->
    case (I_6 < N_2) of
        true ->
            Result_2 = (Result * Base),
            I_7 = (I_6 + 1),
            Fun_4_loop(Base, Exp, Guess_3, I_7, N_2, Result_2);
        _ -> {Base, Exp, Guess_3, I_6, N_2, Result}
    end
end,
{Base, Exp, Guess_3, I_7, N_2, Result_2} = Fun_4(Base, Exp, Guess_3, I_6, N_2, Result),
        Result_2
    catch {return, Ret} -> Ret end.

formatfloat(F, Prec) ->
    try
        Scale = pow10(Prec),
        Scaled = ((F * Scale) + 0.5),
        N_3 = mochi_to_int(Scaled),
        Digits = lists:flatten(io_lib:format("~p", [N_3])),
        Fun_5 = fun Fun_5_loop(Digits, F, N_3, Prec, Scale, Scaled) ->
    case (length(Digits) =< Prec) of
        true ->
            Digits_2 = ("0" ++ Digits),
            Fun_5_loop(Digits_2, F, N_3, Prec, Scale, Scaled);
        _ -> {Digits, F, N_3, Prec, Scale, Scaled}
    end
end,
{Digits_2, F, N_3, Prec, Scale, Scaled} = Fun_5(Digits, F, N_3, Prec, Scale, Scaled),
        IntPart = string:substr(Digits_2, 0 + 1, ((length(Digits_2) - Prec) - 0)),
        FracPart = string:substr(Digits_2, (length(Digits_2) - Prec) + 1, (length(Digits_2) - (length(Digits_2) - Prec))),
        ((IntPart ++ ".") ++ FracPart)
    catch {return, Ret} -> Ret end.

padleft(S, W) ->
    try
        Res = "",
        N_4 = (W - length(S)),
        Fun_6 = fun Fun_6_loop(N_4, Res, S, W) ->
    case (N_4 > 0) of
        true ->
            Res_2 = (Res ++ " "),
            N_5 = (N_4 - 1),
            Fun_6_loop(N_5, Res_2, S, W);
        _ -> {N_4, Res, S, W}
    end
end,
{N_5, Res_2, S, W} = Fun_6(N_4, Res, S, W),
        (Res_2 ++ S)
    catch {return, Ret} -> Ret end.

rowstring(Row) ->
    try
        S_2 = "[",
        I_8 = 0,
        Fun_7 = fun Fun_7_loop(I_8, Row, S_2) ->
    case (I_8 < length(Row)) of
        true ->
            S_3 = (S_2 ++ padleft(formatfloat(lists:nth(I_8 + 1, Row), 3), 6)),
            case (I_8 < (length(Row) - 1)) of
        true -> S_4 = (S_3 ++ " "),
            S_5 = S_4;
        _ -> S_5 = S_3
    end,
            I_9 = (I_8 + 1),
            Fun_7_loop(I_9, Row, S_5);
        _ -> {I_8, Row, S_2}
    end
end,
{I_9, Row, S_5} = Fun_7(I_8, Row, S_2),
        (S_5 ++ "] ")
    catch {return, Ret} -> Ret end.

printmatrix(Heading, M) ->
    try
        io:format("~ts~n", [Heading]),
        I_10 = 0,
        Fun_8 = fun Fun_8_loop(Heading, I_10, M) ->
    case (I_10 < length(M)) of
        true ->
            io:format("~ts~n", [rowstring(lists:nth(I_10 + 1, M))]),
            I_11 = (I_10 + 1),
            Fun_8_loop(Heading, I_11, M);
        _ -> {Heading, I_10, M}
    end
end,
{Heading, I_11, M} = Fun_8(Heading, I_10, M),
        nil
    catch {return, Ret} -> Ret end.

elementwisemm(M1, M2, F_2) ->
    try
        Z = [],
        R_3 = 0,
        Fun_10 = fun Fun_10_loop(F_2, M1, M2, R_3, Z) ->
    case (R_3 < length(M1)) of
        true ->
            Row_2 = [],
            C = 0,
            Fun_9 = fun Fun_9_loop(C, F_2, M1, M2, R_3, Row_2, Z) ->
    case (C < length(lists:nth(R_3 + 1, M1))) of
        true ->
            Row_3 = lists:append(Row_2, [F_2(lists:nth(C + 1, lists:nth(R_3 + 1, M1)), lists:nth(C + 1, lists:nth(R_3 + 1, M2)))]),
            C_2 = (C + 1),
            Fun_9_loop(C_2, F_2, M1, M2, R_3, Row_3, Z);
        _ -> {C, F_2, M1, M2, R_3, Row_2, Z}
    end
end,
{C_2, F_2, M1, M2, R_3, Row_3, Z} = Fun_9(C, F_2, M1, M2, R_3, Row_2, Z),
            Z_2 = lists:append(Z, [Row_3]),
            R_4 = (R_3 + 1),
            Fun_10_loop(F_2, M1, M2, R_4, Z_2);
        _ -> {F_2, M1, M2, R_3, Z}
    end
end,
{F_2, M1, M2, R_4, Z_2} = Fun_10(F_2, M1, M2, R_3, Z),
        Z_2
    catch {return, Ret} -> Ret end.

elementwisems(M_2, S_6, F_3) ->
    try
        Z_3 = [],
        R_5 = 0,
        Fun_12 = fun Fun_12_loop(F_3, M_2, R_5, S_6, Z_3) ->
    case (R_5 < length(M_2)) of
        true ->
            Row_4 = [],
            C_3 = 0,
            Fun_11 = fun Fun_11_loop(C_3, F_3, M_2, R_5, Row_4, S_6, Z_3) ->
    case (C_3 < length(lists:nth(R_5 + 1, M_2))) of
        true ->
            Row_5 = lists:append(Row_4, [F_3(lists:nth(C_3 + 1, lists:nth(R_5 + 1, M_2)), S_6)]),
            C_4 = (C_3 + 1),
            Fun_11_loop(C_4, F_3, M_2, R_5, Row_5, S_6, Z_3);
        _ -> {C_3, F_3, M_2, R_5, Row_4, S_6, Z_3}
    end
end,
{C_4, F_3, M_2, R_5, Row_5, S_6, Z_3} = Fun_11(C_3, F_3, M_2, R_5, Row_4, S_6, Z_3),
            Z_4 = lists:append(Z_3, [Row_5]),
            R_6 = (R_5 + 1),
            Fun_12_loop(F_3, M_2, R_6, S_6, Z_4);
        _ -> {F_3, M_2, R_5, S_6, Z_3}
    end
end,
{F_3, M_2, R_6, S_6, Z_4} = Fun_12(F_3, M_2, R_5, S_6, Z_3),
        Z_4
    catch {return, Ret} -> Ret end.

add(A, B) ->
    try
        (A + B)
    catch {return, Ret} -> Ret end.

sub(A_2, B_2) ->
    try
        (A_2 - B_2)
    catch {return, Ret} -> Ret end.

mul(A_3, B_3) ->
    try
        (A_3 * B_3)
    catch {return, Ret} -> Ret end.

div_fn(A_4, B_4) ->
    try
        (A_4 / B_4)
    catch {return, Ret} -> Ret end.

exp(A_5, B_5) ->
    try
        powf(A_5, B_5)
    catch {return, Ret} -> Ret end.

main() ->
    try
        M1_2 = [[3, 1, 4], [1, 5, 9]],
        M2_2 = [[2, 7, 1], [8, 2, 8]],
        printmatrix("m1:", M1_2),
        printmatrix("m2:", M2_2),
        io:format("~ts~n", [""]),
        printmatrix("m1 + m2:", elementwisemm(M1_2, M2_2, fun add/2)),
        printmatrix("m1 - m2:", elementwisemm(M1_2, M2_2, fun sub/2)),
        printmatrix("m1 * m2:", elementwisemm(M1_2, M2_2, fun mul/2)),
        printmatrix("m1 / m2:", elementwisemm(M1_2, M2_2, fun div_fn/2)),
        printmatrix("m1 ^ m2:", elementwisemm(M1_2, M2_2, fun exp/2)),
        io:format("~ts~n", [""]),
        S_7 = 0.5,
        io:format("~ts~n", [("s: " ++ lists:flatten(io_lib:format("~p", [0.5])))]),
        printmatrix("m1 + s:", elementwisems(M1_2, 0.5, fun add/2)),
        printmatrix("m1 - s:", elementwisems(M1_2, 0.5, fun sub/2)),
        printmatrix("m1 * s:", elementwisems(M1_2, 0.5, fun mul/2)),
        printmatrix("m1 / s:", elementwisems(M1_2, 0.5, fun div_fn/2)),
        printmatrix("m1 ^ s:", elementwisems(M1_2, 0.5, fun exp/2)),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
