#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bsearch/2, bsearchrec/4, main/0]).

% Generated by Mochi transpiler v0.10.40 (7bf46dbf08) on 2025-07-25 14:27 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_pad_start(S, Len, Ch) ->
    Fill0 = case Ch of
        "" -> " ";
        _ -> Ch
    end,
    Fill = string:substr(Fill0, 1, 1),
    SL = length(S),
    case SL >= Len of
        true -> S;
        _ -> string:copies(Fill, Len - SL) ++ S
    end.

bsearch(Arr, X) ->
    try
        Low = 0,
        High = (length(Arr) - 1),
        Fun = fun Fun_loop(Arr, High, Low, X) ->
    case (Low =< High) of
        true ->
            Mid = ((Low + High) div 2),
            case (lists:nth(Mid + 1, Arr) > X) of
        true -> High_2 = (Mid - 1),
            High_3 = High_2,
            Low_4 = Low;
        _ -> case (lists:nth(Mid + 1, Arr) < X) of
        true -> Low_2 = (Mid + 1),
            Low_3 = Low_2;
        _ -> throw({return, Mid}),
            Low_3 = Low
    end,
            High_3 = High,
            Low_4 = Low_3
    end,
            Fun_loop(Arr, High_3, Low_4, X);
        _ -> {Arr, High, Low, X}
    end
end,
{Arr, High_3, Low_4, X} = Fun(Arr, High, Low, X),
        -1
    catch {return, Ret} -> Ret end.

bsearchrec(Arr_2, X_2, Low_5, High_4) ->
    try
        case (High_4 < Low_5) of
        true -> throw({return, -1});
        _ -> ok
    end,
        Mid_2 = ((Low_5 + High_4) div 2),
        case (lists:nth(Mid_2 + 1, Arr_2) > X_2) of
        true -> throw({return, bsearchrec(Arr_2, X_2, Low_5, (Mid_2 - 1))});
        _ -> case (lists:nth(Mid_2 + 1, Arr_2) < X_2) of
        true -> throw({return, bsearchrec(Arr_2, X_2, (Mid_2 + 1), High_4)});
        _ -> ok
    end
    end,
        Mid_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Nums = [-31, 0, 1, 2, 2, 4, 65, 83, 99, 782],
        X_3 = 2,
        Idx = bsearch(Nums, X_3),
        case (Idx >= 0) of
        true -> io:format("~ts~n", [(((lists:flatten(io_lib:format("~p", [X_3])) ++ " is at index ") ++ lists:flatten(io_lib:format("~p", [Idx]))) ++ ".")]);
        _ -> io:format("~ts~n", [(lists:flatten(io_lib:format("~p", [X_3])) ++ " is not found.")])
    end,
        X_4 = 5,
        Idx_2 = bsearchrec(Nums, 5, 0, (length(Nums) - 1)),
        case (Idx_2 >= 0) of
        true -> io:format("~ts~n", [(((lists:flatten(io_lib:format("~p", [5])) ++ " is at index ") ++ lists:flatten(io_lib:format("~p", [Idx_2]))) ++ ".")]);
        _ -> io:format("~ts~n", [(lists:flatten(io_lib:format("~p", [5])) ++ " is not found.")])
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
