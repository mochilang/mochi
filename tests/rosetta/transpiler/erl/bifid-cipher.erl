#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, square_to_maps/1, remove_space/2, encrypt/3, decrypt/3, main/0]).

% Generated by Mochi transpiler v0.10.40 (7bf46dbf08) on 2025-07-25 14:27 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_pad_start(S, Len, Ch) ->
    Fill0 = case Ch of
        "" -> " ";
        _ -> Ch
    end,
    Fill = string:substr(Fill0, 1, 1),
    SL = length(S),
    case SL >= Len of
        true -> S;
        _ -> string:copies(Fill, Len - SL) ++ S
    end.

square_to_maps(Square) ->
    try
        Emap = #{},
        Dmap = #{},
        X = 0,
        Fun_2 = fun Fun_2_loop(Dmap, Emap, Square, X) ->
    case (X < length(Square)) of
        true ->
            Row = lists:nth(X + 1, Square),
            Y = 0,
            Fun = fun Fun_loop(Dmap, Emap, Row, Square, X, Y) ->
    case (Y < length(Row)) of
        true ->
            Ch = lists:nth(Y + 1, Row),
            Emap_2 = maps:put(Ch, [X, Y], Emap),
            Dmap_2 = maps:put(((lists:flatten(io_lib:format("~p", [X])) ++ ",") ++ lists:flatten(io_lib:format("~p", [Y]))), Ch, Dmap),
            Y_2 = (Y + 1),
            Fun_loop(Dmap_2, Emap_2, Row, Square, X, Y_2);
        _ -> {Dmap, Emap, Row, Square, X, Y}
    end
end,
{Dmap_2, Emap_2, Row, Square, X, Y_2} = Fun(Dmap, Emap, Row, Square, X, Y),
            X_2 = (X + 1),
            Fun_2_loop(Dmap_2, Emap_2, Square, X_2);
        _ -> {Dmap, Emap, Square, X}
    end
end,
{Dmap_2, Emap_2, Square, X_2} = Fun_2(Dmap, Emap, Square, X),
        #{"e" => Emap_2, "d" => Dmap_2}
    catch {return, Ret} -> Ret end.

remove_space(Text, Emap_3) ->
    try
        S = string:to_upper(Text),
        Out = "",
        I = 0,
        Fun_3 = fun Fun_3_loop(Emap_3, I, Out, S, Text) ->
    case (I < length(S)) of
        true ->
            Ch_2 = lists:sublist(S, I + 1, ((I + 1) - I)),
            case ((Ch_2 /= " ") andalso maps:is_key(Ch_2, Emap_3)) of
        true -> Out_2 = (Out ++ Ch_2),
            Out_3 = Out_2;
        _ -> Out_3 = Out
    end,
            I_2 = (I + 1),
            Fun_3_loop(Emap_3, I_2, Out_3, S, Text);
        _ -> {Emap_3, I, Out, S, Text}
    end
end,
{Emap_3, I_2, Out_3, S, Text} = Fun_3(Emap_3, I, Out, S, Text),
        Out_3
    catch {return, Ret} -> Ret end.

encrypt(Text_2, Emap_4, Dmap_3) ->
    try
        Text_3 = remove_space(Text_2, Emap_4),
        Row0 = [],
        Row1 = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Dmap_3, Emap_4, I_3, Row0, Row1, Text_3) ->
    case (I_3 < length(Text_3)) of
        true ->
            Ch_3 = string:substr(Text_3, I_3 + 1, ((I_3 + 1) - I_3)),
            Xy = maps:get(Ch_3, Emap_4, nil),
            Row0_2 = lists:append(Row0, [lists:nth(0 + 1, Xy)]),
            Row1_2 = lists:append(Row1, [lists:nth(1 + 1, Xy)]),
            I_4 = (I_3 + 1),
            Fun_4_loop(Dmap_3, Emap_4, I_4, Row0_2, Row1_2, Text_3);
        _ -> {Dmap_3, Emap_4, I_3, Row0, Row1, Text_3}
    end
end,
{Dmap_3, Emap_4, I_4, Row0_2, Row1_2, Text_3} = Fun_4(Dmap_3, Emap_4, I_3, Row0, Row1, Text_3),
        Fun_5 = fun Fun_5_loop(List, Dmap_3, Emap_4, I_4, Row0_2, Row1_2, Text_3) ->
    case List of
        [] -> {Dmap_3, Emap_4, I_4, Row0_2, Row1_2, Text_3};
        [V|List_rest] ->
            Row0_3 = lists:append(Row0_2, [V]),
            Fun_5_loop(List_rest, Dmap_3, Emap_4, I_4, Row0_3, Row1_2, Text_3)
    end
end,
{Dmap_3, Emap_4, I_4, Row0_3, Row1_2, Text_3} = Fun_5(Row1_2, Dmap_3, Emap_4, I_4, Row0_2, Row1_2, Text_3),
        Res = "",
        J = 0,
        Fun_6 = fun Fun_6_loop(Dmap_3, Emap_4, I_4, J, Res, Row0_3, Row1_2, Text_3) ->
    case (J < length(Row0_3)) of
        true ->
            Key = ((lists:flatten(io_lib:format("~p", [lists:nth(J + 1, Row0_3)])) ++ ",") ++ lists:flatten(io_lib:format("~p", [lists:nth((J + 1) + 1, Row0_3)]))),
            Res_2 = (Res ++ maps:get(Key, Dmap_3, nil)),
            J_2 = (J + 2),
            Fun_6_loop(Dmap_3, Emap_4, I_4, J_2, Res_2, Row0_3, Row1_2, Text_3);
        _ -> {Dmap_3, Emap_4, I_4, J, Res, Row0_3, Row1_2, Text_3}
    end
end,
{Dmap_3, Emap_4, I_4, J_2, Res_2, Row0_3, Row1_2, Text_3} = Fun_6(Dmap_3, Emap_4, I_4, J, Res, Row0_3, Row1_2, Text_3),
        Res_2
    catch {return, Ret} -> Ret end.

decrypt(Text_4, Emap_5, Dmap_4) ->
    try
        Text_5 = remove_space(Text_4, Emap_5),
        Coords = [],
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(Coords, Dmap_4, Emap_5, I_5, Text_5) ->
    case (I_5 < length(Text_5)) of
        true ->
            Ch_4 = string:substr(Text_5, I_5 + 1, ((I_5 + 1) - I_5)),
            Xy_2 = maps:get(Ch_4, Emap_5, nil),
            Coords_2 = lists:append(Coords, [lists:nth(0 + 1, Xy_2)]),
            Coords_3 = lists:append(Coords_2, [lists:nth(1 + 1, Xy_2)]),
            I_6 = (I_5 + 1),
            Fun_7_loop(Coords_3, Dmap_4, Emap_5, I_6, Text_5);
        _ -> {Coords, Dmap_4, Emap_5, I_5, Text_5}
    end
end,
{Coords_3, Dmap_4, Emap_5, I_6, Text_5} = Fun_7(Coords, Dmap_4, Emap_5, I_5, Text_5),
        Half = (length(Coords_3) div 2),
        K1 = [],
        K2 = [],
        Idx = 0,
        Fun_8 = fun Fun_8_loop(Coords_3, Dmap_4, Emap_5, Half, I_6, Idx, K1, K2, Text_5) ->
    case (Idx < Half) of
        true ->
            K1_2 = lists:append(K1, [lists:nth(Idx + 1, Coords_3)]),
            Idx_2 = (Idx + 1),
            Fun_8_loop(Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_2, K1_2, K2, Text_5);
        _ -> {Coords_3, Dmap_4, Emap_5, Half, I_6, Idx, K1, K2, Text_5}
    end
end,
{Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_2, K1_2, K2, Text_5} = Fun_8(Coords_3, Dmap_4, Emap_5, Half, I_6, Idx, K1, K2, Text_5),
        Fun_9 = fun Fun_9_loop(Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_2, K1_2, K2, Text_5) ->
    case (Idx_2 < length(Coords_3)) of
        true ->
            K2_2 = lists:append(K2, [lists:nth(Idx_2 + 1, Coords_3)]),
            Idx_3 = (Idx_2 + 1),
            Fun_9_loop(Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_3, K1_2, K2_2, Text_5);
        _ -> {Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_2, K1_2, K2, Text_5}
    end
end,
{Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_3, K1_2, K2_2, Text_5} = Fun_9(Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_2, K1_2, K2, Text_5),
        Res_3 = "",
        J_3 = 0,
        Fun_10 = fun Fun_10_loop(Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_3, J_3, K1_2, K2_2, Res_3, Text_5) ->
    case (J_3 < Half) of
        true ->
            Key_2 = ((lists:flatten(io_lib:format("~p", [lists:nth(J_3 + 1, K1_2)])) ++ ",") ++ lists:flatten(io_lib:format("~p", [lists:nth(J_3 + 1, K2_2)]))),
            Res_4 = (Res_3 ++ maps:get(Key_2, Dmap_4, nil)),
            J_4 = (J_3 + 1),
            Fun_10_loop(Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_3, J_4, K1_2, K2_2, Res_4, Text_5);
        _ -> {Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_3, J_3, K1_2, K2_2, Res_3, Text_5}
    end
end,
{Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_3, J_4, K1_2, K2_2, Res_4, Text_5} = Fun_10(Coords_3, Dmap_4, Emap_5, Half, I_6, Idx_3, J_3, K1_2, K2_2, Res_3, Text_5),
        Res_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        SquareRosetta = [["A", "B", "C", "D", "E"], ["F", "G", "H", "I", "K"], ["L", "M", "N", "O", "P"], ["Q", "R", "S", "T", "U"], ["V", "W", "X", "Y", "Z"], ["J", "1", "2", "3", "4"]],
        SquareWikipedia = [["B", "G", "W", "K", "Z"], ["Q", "P", "N", "D", "S"], ["I", "O", "A", "X", "E"], ["F", "C", "L", "U", "M"], ["T", "H", "Y", "V", "R"], ["J", "1", "2", "3", "4"]],
        TextRosetta = "0ATTACKATDAWN",
        TextWikipedia = "FLEEATONCE",
        TextTest = "The invasion will start on the first of January",
        Maps = square_to_maps(SquareRosetta),
        Emap_6 = maps:get("e", Maps, nil),
        Dmap_5 = maps:get("d", Maps, nil),
        io:format("~ts~n", ["from Rosettacode"]),
        io:format("~ts~n", [("original:\t " ++ "0ATTACKATDAWN")]),
        S_2 = encrypt("0ATTACKATDAWN", Emap_6, Dmap_5),
        io:format("~ts~n", [("codiert:\t " ++ S_2)]),
        S_3 = decrypt(S_2, Emap_6, Dmap_5),
        io:format("~ts~n", [("and back:\t " ++ S_3)]),
        Maps_2 = square_to_maps(SquareWikipedia),
        Emap_7 = maps:get("e", Maps_2, nil),
        Dmap_6 = maps:get("d", Maps_2, nil),
        io:format("~ts~n", ["from Wikipedia"]),
        io:format("~ts~n", [("original:\t " ++ "FLEEATONCE")]),
        S_4 = encrypt("FLEEATONCE", Emap_7, Dmap_6),
        io:format("~ts~n", [("codiert:\t " ++ S_4)]),
        S_5 = decrypt(S_4, Emap_7, Dmap_6),
        io:format("~ts~n", [("and back:\t " ++ S_5)]),
        Maps_3 = square_to_maps(SquareWikipedia),
        Emap_8 = maps:get("e", Maps_3, nil),
        Dmap_7 = maps:get("d", Maps_3, nil),
        io:format("~ts~n", ["from Rosettacode long part"]),
        io:format("~ts~n", [("original:\t " ++ "The invasion will start on the first of January")]),
        S_6 = encrypt("The invasion will start on the first of January", Emap_8, Dmap_7),
        io:format("~ts~n", [("codiert:\t " ++ S_6)]),
        S_7 = decrypt(S_6, Emap_8, Dmap_7),
        io:format("~ts~n", [("and back:\t " ++ S_7)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
