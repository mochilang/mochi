#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, fracstr/1, gen/4, totient/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

fracstr(F) ->
    try
        ((lists:flatten(io_lib:format("~p", [maps:get("num", F, nil)])) ++ "/") ++ lists:flatten(io_lib:format("~p", [maps:get("den", F, nil)])))
    catch {return, Ret} -> Ret end.

gen(L, R, N, Acc) ->
    try
        M = #{"num" => (maps:get("num", L, nil) + maps:get("num", R, nil)), "den" => (maps:get("den", L, nil) + maps:get("den", R, nil))},
        case (maps:get("den", M, nil) =< N) of
        true -> Acc_2 = gen(L, M, N, Acc),
            Acc_3 = lists:append(Acc_2, [M]),
            Acc_4 = gen(M, R, N, Acc_3),
            Acc_5 = Acc_4;
        _ -> Acc_5 = Acc
    end,
        Acc_5
    catch {return, Ret} -> Ret end.

totient(N_2) ->
    try
        Tot = N_2,
        Nn = N_2,
        P = 2,
        Fun_3 = fun Fun_3_loop(N_2, Nn, P, Tot) ->
    case ((P * P) =< Nn) of
        true ->
            case ((Nn rem P) == 0) of
        true -> Fun = fun Fun_loop(N_2, Nn, P, Tot) ->
    case ((Nn rem P) == 0) of
        true ->
            Nn_2 = (Nn div P),
            Fun_loop(N_2, Nn_2, P, Tot);
        _ -> {N_2, Nn, P, Tot}
    end
end,
{N_2, Nn_2, P, Tot} = Fun(N_2, Nn, P, Tot),
            Tot_2 = (Tot - (Tot div P)),
            Fun_2 = Fun,
            Nn_3 = Nn_2,
            Tot_3 = Tot_2;
        _ -> Fun_2 = nil,
            Nn_3 = Nn,
            Tot_3 = Tot
    end,
            case (P == 2) of
        true -> P_2 = 1,
            P_3 = P_2;
        _ -> P_3 = P
    end,
            P_4 = (P_3 + 2),
            Fun_3_loop(N_2, Nn_3, P_4, Tot_3);
        _ -> {N_2, Nn, P, Tot}
    end
end,
{N_2, Nn_3, P_4, Tot_3} = Fun_3(N_2, Nn, P, Tot),
        case (Nn_3 > 1) of
        true -> Tot_4 = (Tot_3 - (Tot_3 div Nn_3)),
            Tot_5 = Tot_4;
        _ -> Tot_5 = Tot_3
    end,
        Tot_5
    catch {return, Ret} -> Ret end.

main() ->
    try
        N_3 = 1,
        Fun_5 = fun Fun_5_loop(N_3) ->
    case (N_3 =< 11) of
        true ->
            L_2 = #{"num" => 0, "den" => 1},
            R_2 = #{"num" => 1, "den" => 1},
            Seq = gen(L_2, R_2, N_3, []),
            Line = ((("F(" ++ lists:flatten(io_lib:format("~p", [N_3]))) ++ "): ") ++ fracstr(L_2)),
            Fun_4 = fun Fun_4_loop(List, L_2, Line, N_3, R_2, Seq) ->
    case List of
        [] -> {L_2, Line, N_3, R_2, Seq};
        [F_2|F_2_rest] ->
            Line_2 = ((Line ++ " ") ++ fracstr(F_2)),
            Fun_4_loop(F_2_rest, L_2, Line_2, N_3, R_2, Seq)
    end
end,
{L_2, Line_2, N_3, R_2, Seq} = Fun_4(Seq, L_2, Line, N_3, R_2, Seq),
            Line_3 = ((Line_2 ++ " ") ++ fracstr(R_2)),
            io:format("~ts~n", [Line_3]),
            N_4 = (N_3 + 1),
            Fun_5_loop(N_4);
        _ -> {N_3}
    end
end,
{N_4} = Fun_5(N_3),
        Sum = 1,
        I = 1,
        Next = 100,
        Fun_6 = fun Fun_6_loop(I, N_4, Next, Sum) ->
    case (I =< 1000) of
        true ->
            Sum_2 = (Sum + totient(I)),
            case (I == Next) of
        true -> io:format("~ts~n", [((("|F(" ++ lists:flatten(io_lib:format("~p", [I]))) ++ ")|: ") ++ lists:flatten(io_lib:format("~p", [Sum_2])))]),
            Next_2 = (Next + 100),
            Next_3 = Next_2;
        _ -> Next_3 = Next
    end,
            I_2 = (I + 1),
            Fun_6_loop(I_2, N_4, Next_3, Sum_2);
        _ -> {I, N_4, Next, Sum}
    end
end,
{I_2, N_4, Next_3, Sum_2} = Fun_6(I, N_4, Next, Sum),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
