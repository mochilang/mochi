#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, floorf/1, frac/1, sinapprox/1, sqrtapprox/1]).

% Generated by Mochi transpiler v0.10.55 (1cbd612b6e) on 2025-08-02 20:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

floorf(X) ->
    try
        I = mochi_to_int(X),
        case (float(I) > X) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, Ret} -> Ret end.

frac(X_2) ->
    try
        (X_2 - floorf(X_2))
    catch {return, Ret} -> Ret end.

sinapprox(X_3) ->
    try
        Term = X_3,
        Sum = X_3,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X_3) ->
    case (N =< 10) of
        true ->
            Denom = float(((2 * N) * ((2 * N) + 1))),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X_3), X_3), Denom),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X_3);
        _ -> {N, Sum, Term, X_3}
    end
end,
{N_2, Sum_2, Term_2, X_3} = Fun(N, Sum, Term, X_3),
        Sum_2
    catch {return, Ret} -> Ret end.

sqrtapprox(X_4) ->
    try
        case (X_4 =< 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Guess = X_4,
        I_4 = 0,
        Fun_2 = fun Fun_2_loop(Guess, I_4, X_4) ->
    case (I_4 < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_4, Guess)), 2),
            I_5 = (I_4 + 1),
            Fun_2_loop(Guess_2, I_5, X_4);
        _ -> {Guess, I_4, X_4}
    end
end,
{Guess_2, I_5, X_4} = Fun_2(Guess, I_4, X_4),
        Guess_2
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('nframes', 10),
    erlang:put('w', 32),
    erlang:put('h', 32),
    erlang:put('total', 0),
    erlang:put('f', 1),
    Fun_5 = fun Fun_5_loop() ->
    case (erlang:get('f') =< 10) of
        true ->
            Y = 0,
            Fun_4 = fun Fun_4_loop(Y) ->
    case (Y < 32) of
        true ->
            X_5 = 0,
            Fun_3 = fun Fun_3_loop(X_5, Y) ->
    case (X_5 < 32) of
        true ->
            Fx = float(X_5),
            Fy = float(Y),
            Value = sinapprox(mochi_safe_div(Fx, 16)),
            Value_2 = (Value + sinapprox(mochi_safe_div(Fy, 8))),
            Value_3 = (Value_2 + sinapprox(mochi_safe_div((Fx + Fy), 16))),
            Value_4 = (Value_3 + sinapprox(mochi_safe_div(sqrtapprox((mochi_safe_mul(Fx, Fx) + mochi_safe_mul(Fy, Fy))), 8))),
            Value_5 = (Value_4 + 4),
            Value_6 = mochi_safe_div(Value_5, 8),
            Rem = frac((Value_6 + mochi_safe_div(float(erlang:get('f')), float(10)))),
            Ci = (mochi_to_int(mochi_safe_mul(float(10), Rem)) + 1),
            erlang:put('total', (erlang:get('total') + Ci)),
            X_6 = (X_5 + 1),
            Fun_3_loop(X_6, Y);
        _ -> {X_5, Y}
    end
end,
{X_6, Y} = Fun_3(X_5, Y),
            Y_2 = (Y + 1),
            Fun_4_loop(Y_2);
        _ -> {Y}
    end
end,
{Y_2} = Fun_4(Y),
            erlang:put('f', (erlang:get('f') + 1)),
            Fun_5_loop();
        _ -> {}
    end
end,
{} = Fun_5(),
    io:format("~p~n", [erlang:get('total')]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
