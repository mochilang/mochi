#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parsebigint/1, pad/2, showint/1, showbig/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

parsebigint(Str) ->
    try
        I = 0,
        Neg = false,
        case ((length(Str) > 0) andalso (string:substr(Str, 0 + 1, (1 - 0)) == "-")) of
        true -> Neg_2 = true,
            I_2 = 1,
            I_3 = I_2,
            Neg_3 = Neg_2;
        _ -> I_3 = I,
            Neg_3 = Neg
    end,
        N = 0,
        Fun = fun Fun_loop(I_3, N, Neg_3, Str) ->
    case (I_3 < length(Str)) of
        true ->
            Ch = string:substr(Str, I_3 + 1, ((I_3 + 1) - I_3)),
            D = mochi_to_int(Ch),
            N_2 = ((N * 10) + D),
            I_4 = (I_3 + 1),
            Fun_loop(I_4, N_2, Neg_3, Str);
        _ -> {I_3, N, Neg_3, Str}
    end
end,
{I_4, N_2, Neg_3, Str} = Fun(I_3, N, Neg_3, Str),
        case Neg_3 of
        true -> N_3 = -N_2,
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
        N_4
    catch {return, Ret} -> Ret end.

pad(N_5, Width) ->
    try
        S = lists:flatten(io_lib:format("~p", [N_5])),
        Fun_2 = fun Fun_2_loop(N_5, S, Width) ->
    case (length(S) < Width) of
        true ->
            S_2 = (" " ++ S),
            Fun_2_loop(N_5, S_2, Width);
        _ -> {N_5, S, Width}
    end
end,
{N_5, S_2, Width} = Fun_2(N_5, S, Width),
        S_2
    catch {return, Ret} -> Ret end.

showint(N_6) ->
    try
        Line = (("Testing integer " ++ pad(N_6, 3)) ++ ":  "),
        case ((N_6 rem 2) == 0) of
        true -> Line_2 = (Line ++ "even "),
            Line_4 = Line_2;
        _ -> Line_3 = (Line ++ " odd "),
            Line_4 = Line_3
    end,
        case ((N_6 rem 2) == 0) of
        true -> Line_5 = (Line_4 ++ "even"),
            Line_7 = Line_5;
        _ -> Line_6 = (Line_4 ++ " odd"),
            Line_7 = Line_6
    end,
        io:format("~ts~n", [Line_7]),
        nil
    catch {return, Ret} -> Ret end.

showbig(S_3) ->
    try
        B = parsebigint(S_3),
        Line_8 = (("Testing big integer " ++ lists:flatten(io_lib:format("~p", [B]))) ++ ":  "),
        case ((B rem 2) == 0) of
        true -> Line_9 = (Line_8 ++ "even"),
            Line_11 = Line_9;
        _ -> Line_10 = (Line_8 ++ "odd"),
            Line_11 = Line_10
    end,
        io:format("~ts~n", [Line_11]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        showint(-2),
        showint(-1),
        showint(0),
        showint(1),
        showint(2),
        showbig("-222222222222222222222222222222222222"),
        showbig("-1"),
        showbig("0"),
        showbig("1"),
        showbig("222222222222222222222222222222222222"),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
