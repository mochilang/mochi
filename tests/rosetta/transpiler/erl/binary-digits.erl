#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, tobin/1]).

% Generated by Mochi transpiler v0.10.40 (7bf46dbf08) on 2025-07-25 14:27 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_pad_start(S, Len, Ch) ->
    Fill0 = case Ch of
        "" -> " ";
        _ -> Ch
    end,
    Fill = string:substr(Fill0, 1, 1),
    SL = length(S),
    case SL >= Len of
        true -> S;
        _ -> string:copies(Fill, Len - SL) ++ S
    end.

tobin(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Bits = "",
        X = N,
        Fun = fun Fun_loop(Bits, N, X) ->
    case (X > 0) of
        true ->
            Bits_2 = (lists:flatten(io_lib:format("~p", [(X rem 2)])) ++ Bits),
            X_2 = mochi_to_int((X div 2)),
            Fun_loop(Bits_2, N, X_2);
        _ -> {Bits, N, X}
    end
end,
{Bits_2, N, X_2} = Fun(Bits, N, X),
        Bits_2
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [I|List_rest] ->
            io:format("~p~n", [tobin(I)]),
            Fun_2_loop(List_rest)
    end
end,
{} = Fun_2(lists:seq(0, (16) - 1)),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
