#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, lower/1]).

% Generated by Mochi transpiler v0.10.41 (cccd67ba44) on 2025-07-26 23:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

lower(Ch) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower = "abcdefghijklmnopqrstuvwxyz",
        I = 0,
        Fun = fun Fun_loop(Ch, I, Lower, Upper) ->
    case (I < length(Upper)) of
        true ->
            case (Ch == string:substr(Upper, I + 1, ((I + 1) - I))) of
        true -> throw({return, string:substr(Lower, I + 1, ((I + 1) - I))});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, Lower, Upper);
        _ -> {Ch, I, Lower, Upper}
    end
end,
{Ch, I_2, Lower, Upper} = Fun(Ch, I, Lower, Upper),
        Ch
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('partList', ["A", "B", "C", "D"]),
    erlang:put('nAssemblies', 3),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [Cycle|Cycle_rest] ->
            io:format("~ts~n", [("begin assembly cycle " ++ lists:flatten(io_lib:format("~p", [Cycle])))]),
            A = "",
            Fun_3 = fun Fun_3_loop(List, A, Cycle) ->
    case List of
        [] -> {A, Cycle};
        [P|P_rest] ->
            io:format("~ts~n", [(P ++ " worker begins part")]),
            io:format("~ts~n", [((P ++ " worker completed ") ++ string:to_lower(P))]),
            A_2 = (A ++ string:to_lower(P)),
            Fun_3_loop(P_rest, A_2, Cycle)
    end
end,
{A_2, Cycle} = Fun_3(erlang:get('partList'), A, Cycle),
            io:format("~ts~n", [(((A_2 ++ " assembled.  cycle ") ++ lists:flatten(io_lib:format("~p", [Cycle]))) ++ " complete")]),
            Fun_2_loop(Cycle_rest)
    end
end,
{} = Fun_2(lists:seq(1, ((erlang:get('nAssemblies') + 1)) - 1)),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
