#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, countchange/1]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

countchange(Amount) ->
    try
        Ways = [],
        I = 0,
        Fun = fun Fun_loop(Amount, I, Ways) ->
    case (I =< Amount) of
        true ->
            Ways_2 = lists:append(Ways, [0]),
            I_2 = (I + 1),
            Fun_loop(Amount, I_2, Ways_2);
        _ -> {Amount, I, Ways}
    end
end,
{Amount, I_2, Ways_2} = Fun(Amount, I, Ways),
        Ways_3 = lists:sublist(Ways_2, 0) ++ [1] ++ lists:nthtail(0 + 1, Ways_2),
        Fun_2 = fun Fun_2_loop(List, Amount, I_2, Ways_3) ->
    case List of
        [] -> {Amount, I_2, Ways_3};
        [Coin|Coin_rest] ->
            J = Coin,
            Fun_3 = fun Fun_3_loop(Amount, Coin, I_2, J, Ways_3) ->
    case (J =< Amount) of
        true ->
            Ways_4 = lists:sublist(Ways_3, J) ++ [(lists:nth(J + 1, Ways_3) + lists:nth((J - Coin) + 1, Ways_3))] ++ lists:nthtail(J + 1, Ways_3),
            J_2 = (J + 1),
            Fun_3_loop(Amount, Coin, I_2, J_2, Ways_4);
        _ -> {Amount, Coin, I_2, J, Ways_3}
    end
end,
{Amount, Coin, I_2, J_2, Ways_4} = Fun_3(Amount, Coin, I_2, J, Ways_3),
            Fun_2_loop(Coin_rest, Amount, I_2, Ways_4)
    end
end,
{Amount, I_2, Ways_4} = Fun_2([100, 50, 25, 10, 5, 1], Amount, I_2, Ways_3),
        lists:nth(Amount + 1, Ways_4)
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('amount', 1000),
    io:format("~ts~n", [((("amount, ways to make change: " ++ lists:flatten(io_lib:format("~p", [1000]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [countchange(1000)])))]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
