#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sortfloat/1, median/1]).

% Generated by Mochi transpiler v0.10.55 (87d3efb875) on 2025-08-03 08:53 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

sortfloat(Xs) ->
    try
        Arr = Xs,
        N = length(Arr),
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, I, N, Xs) ->
    case (I < N) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Arr, I, J, N, Xs) ->
    case (J < (N - 1)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> lists:nth(J + 1, Arr) end) > (case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> lists:nth((J + 1) + 1, Arr) end)) of
        true -> Tmp = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> lists:nth(J + 1, Arr) end),
            Arr_2 = lists:sublist(Arr, J) ++ [(case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> lists:nth((J + 1) + 1, Arr) end)] ++ lists:nthtail(J + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (J + 1)) ++ [Tmp] ++ lists:nthtail((J + 1) + 1, Arr_2),
            Arr_4 = Arr_3,
            Tmp_2 = Tmp;
        _ -> Arr_4 = Arr,
            Tmp_2 = nil
    end,
            J_2 = (J + 1),
            Fun_loop(Arr_4, I, J_2, N, Xs);
        _ -> {Arr, I, J, N, Xs}
    end
end,
{Arr_4, I, J_2, N, Xs} = Fun(Arr, I, J, N, Xs),
            I_2 = (I + 1),
            Fun_2_loop(Arr_4, I_2, N, Xs);
        _ -> {Arr, I, N, Xs}
    end
end,
{Arr_4, I_2, N, Xs} = Fun_2(Arr, I, N, Xs),
        Arr_4
    catch {return, Ret} -> Ret end.

median(A) ->
    try
        Arr_5 = sortfloat(A),
        Half = mochi_to_int((length(Arr_5) div 2)),
        M = (case erlang:is_map(Arr_5) of true -> maps:get(Half, Arr_5, nil); _ -> lists:nth(Half + 1, Arr_5) end),
        case ((length(Arr_5) rem 2) == 0) of
        true -> M_2 = mochi_safe_div((M + (case erlang:is_map(Arr_5) of true -> maps:get((Half - 1), Arr_5, nil); _ -> lists:nth((Half - 1) + 1, Arr_5) end)), 2),
            M_3 = M_2;
        _ -> M_3 = M
    end,
        M_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [median([3, 1, 4, 1])]))]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [median([3, 1, 4, 1, 5])]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
