#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, nextrand/0, randbit/0]).

% Generated by Mochi transpiler v0.10.55 (1cbd612b6e) on 2025-08-02 20:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

nextrand() ->
    try
        erlang:put('seed', (((erlang:get('seed') * 1664525) + 1013904223) rem 2147483647)),
        erlang:get('seed')
    catch {return, Ret} -> Ret end.

randbit() ->
    try
        R = nextrand(),
        case ((R rem 2) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        255
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('width', 320),
    erlang:put('height', 240),
    erlang:put('seed', (mochi_now() rem 2147483647)),
    io:format("~ts~n", ["P2"]),
    io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [320])) ++ " ") ++ lists:flatten(io_lib:format("~p", [240])))]),
    io:format("~ts~n", ["255"]),
    erlang:put('y', 0),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('y') < 240) of
        true ->
            Line = "",
            X = 0,
            Fun = fun Fun_loop(Line, X) ->
    case (X < 320) of
        true ->
            Val = randbit(),
            Line_2 = (Line ++ lists:flatten(io_lib:format("~p", [Val]))),
            case (X < (320 - 1)) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            X_2 = (X + 1),
            Fun_loop(Line_4, X_2);
        _ -> {Line, X}
    end
end,
{Line_4, X_2} = Fun(Line, X),
            io:format("~ts~n", [Line_4]),
            erlang:put('y', (erlang:get('y') + 1)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
