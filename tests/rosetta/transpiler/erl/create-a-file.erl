#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, createfile/2, createdir/2, main/0]).

% Generated by Mochi transpiler v0.10.42 (13399fad8d) on 2025-07-28 04:24 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

createfile(Fs, Fn) ->
    try
        case maps:is_key(Fn, Fs) of
        true -> io:format("~ts~n", [(("open " ++ Fn) ++ ": file exists")]),
            Fs_3 = Fs;
        _ -> Fs_2 = maps:put(Fn, false, Fs),
            io:format("~ts~n", [(("file " ++ Fn) ++ " created!")]),
            Fs_3 = Fs_2
    end,
        nil
    catch {return, Ret} -> Ret end.

createdir(Fs_4, Dn) ->
    try
        case maps:is_key(Dn, Fs_4) of
        true -> io:format("~ts~n", [(("mkdir " ++ Dn) ++ ": file exists")]),
            Fs_6 = Fs_4;
        _ -> Fs_5 = maps:put(Dn, true, Fs_4),
            io:format("~ts~n", [(("directory " ++ Dn) ++ " created!")]),
            Fs_6 = Fs_5
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Fs_7 = #{},
        Fs_8 = maps:put("docs", true, Fs_7),
        createfile(Fs_8, "input.txt"),
        createfile(Fs_8, "/input.txt"),
        createdir(Fs_8, "docs"),
        createdir(Fs_8, "/docs"),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
