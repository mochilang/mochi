#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, newtinyint/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

newtinyint(I) ->
    try
        case (I < 1) of
        true -> I_2 = 1,
            I_5 = I_2;
        _ -> case (I > 10) of
        true -> I_3 = 10,
            I_4 = I_3;
        _ -> I_4 = I
    end,
            I_5 = I_4
    end,
        #{"value" => I_5}
    catch {return, Ret} -> Ret end.

main() ->
    try
        T1 = newtinyint(6),
        T2 = newtinyint(3),
        io:format("~ts~n", [("t1      = " ++ lists:flatten(io_lib:format("~p", [maps:get("value", T1, nil)])))]),
        io:format("~ts~n", [("t2      = " ++ lists:flatten(io_lib:format("~p", [maps:get("value", T2, nil)])))]),
        io:format("~ts~n", [("t1 + t2 = " ++ lists:flatten(io_lib:format("~p", [maps:get("value", maps:get("Add", T1, nil)(T2), nil)])))]),
        io:format("~ts~n", [("t1 - t2 = " ++ lists:flatten(io_lib:format("~p", [maps:get("value", maps:get("Sub", T1, nil)(T2), nil)])))]),
        io:format("~ts~n", [("t1 * t2 = " ++ lists:flatten(io_lib:format("~p", [maps:get("value", maps:get("Mul", T1, nil)(T2), nil)])))]),
        io:format("~ts~n", [("t1 / t2 = " ++ lists:flatten(io_lib:format("~p", [maps:get("value", maps:get("Div", T1, nil)(T2), nil)])))]),
        io:format("~ts~n", [("t1 % t2 = " ++ lists:flatten(io_lib:format("~p", [maps:get("value", maps:get("Rem", T1, nil)(T2), nil)])))]),
        io:format("~ts~n", [("t1 + 1  = " ++ lists:flatten(io_lib:format("~p", [maps:get("value", maps:get("Inc", T1, nil)(), nil)])))]),
        io:format("~ts~n", [("t1 - 1  = " ++ lists:flatten(io_lib:format("~p", [maps:get("value", maps:get("Dec", T1, nil)(), nil)])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
