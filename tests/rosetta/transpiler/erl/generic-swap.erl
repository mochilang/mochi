#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, swap/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (26b9f6045a) on 2025-08-02 23:10 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

swap(A, B) ->
    try
        [B, A]
    catch {return, Ret} -> Ret end.

main() ->
    try
        A_2 = 3,
        B_2 = "four",
        io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [A_2])) ++ " ") ++ lists:flatten(io_lib:format("~p", [B_2])))]),
        Res = swap(A_2, B_2),
        A_3 = (case erlang:is_map(Res) of true -> maps:get(0, Res, nil); _ -> lists:nth(0 + 1, Res) end),
        B_3 = (case erlang:is_map(Res) of true -> maps:get(1, Res, nil); _ -> lists:nth(1 + 1, Res) end),
        io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [A_3])) ++ " ") ++ lists:flatten(io_lib:format("~p", [B_3])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
