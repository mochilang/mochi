#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow_int/2, pow_big/2]).

% Generated by Mochi transpiler v0.10.41 (cac7e4e2bd) on 2025-07-26 17:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

pow_int(Base, Exp) ->
    try
        Result = 1,
        B = Base,
        E = Exp,
        Fun = fun Fun_loop(B, Base, E, Exp, Result) ->
    case (E > 0) of
        true ->
            case ((E rem 2) == 1) of
        true -> Result_2 = (Result * B),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            B_2 = (B * B),
            E_2 = mochi_to_int((E div 2)),
            Fun_loop(B_2, Base, E_2, Exp, Result_3);
        _ -> {B, Base, E, Exp, Result}
    end
end,
{B_2, Base, E_2, Exp, Result_3} = Fun(B, Base, E, Exp, Result),
        Result_3
    catch {return, Ret} -> Ret end.

pow_big(Base_2, Exp_2) ->
    try
        Result_4 = 1,
        B_3 = Base_2,
        E_3 = Exp_2,
        Fun_2 = fun Fun_2_loop(B_3, Base_2, E_3, Exp_2, Result_4) ->
    case (E_3 > 0) of
        true ->
            case ((E_3 rem 2) == 1) of
        true -> Result_5 = (Result_4 * B_3),
            Result_6 = Result_5;
        _ -> Result_6 = Result_4
    end,
            B_4 = (B_3 * B_3),
            E_4 = mochi_to_int((E_3 div 2)),
            Fun_2_loop(B_4, Base_2, E_4, Exp_2, Result_6);
        _ -> {B_3, Base_2, E_3, Exp_2, Result_4}
    end
end,
{B_4, Base_2, E_4, Exp_2, Result_6} = Fun_2(B_3, Base_2, E_3, Exp_2, Result_4),
        Result_6
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('e1', pow_int(3, 2)),
    erlang:put('e2', pow_int(4, erlang:get('e1'))),
    erlang:put('base', 5),
    erlang:put('x', pow_big(erlang:get('base'), erlang:get('e2'))),
    erlang:put('s', lists:flatten(io_lib:format("~p", [erlang:get('x')]))),
    io:format("~ts ~p ~ts ~ts ~ts ~ts~n", ["5^(4^(3^2)) has", length(erlang:get('s')), "digits:", string:substr(erlang:get('s'), 0 + 1, (20 - 0)), "...", string:substr(erlang:get('s'), (length(erlang:get('s')) - 20) + 1, (length(erlang:get('s')) - (length(erlang:get('s')) - 20)))]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
