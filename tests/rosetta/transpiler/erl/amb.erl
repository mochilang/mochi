#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, amb/3, main/0]).

% Generated by Mochi transpiler v0.10.40 (029b538ca5) on 2025-07-25 15:20 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

amb(Wordsets, Res, Idx) ->
    try
        case (Idx == length(Wordsets)) of
        true -> throw({return, true});
        _ -> ok
    end,
        Prev = "",
        case (Idx > 0) of
        true -> Prev_2 = lists:nth((Idx - 1) + 1, Res),
            Prev_3 = Prev_2;
        _ -> Prev_3 = Prev
    end,
        I = 0,
        Fun = fun Fun_loop(I, Idx, Prev_3, Res, Wordsets) ->
    case (I < length(lists:nth(Idx + 1, Wordsets))) of
        true ->
            W = lists:nth(I + 1, lists:nth(Idx + 1, Wordsets)),
            case ((Idx == 0) orelse (string:substr(Prev_3, (length(Prev_3) - 1) + 1, (length(Prev_3) - (length(Prev_3) - 1))) == string:substr(W, 0 + 1, (1 - 0)))) of
        true -> Res_2 = lists:sublist(Res, Idx) ++ [W] ++ lists:nthtail(Idx + 1, Res),
            case amb(Wordsets, Res_2, (Idx + 1)) of
        true -> throw({return, true});
        _ -> ok
    end,
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Idx, Prev_3, Res_3, Wordsets);
        _ -> {I, Idx, Prev_3, Res, Wordsets}
    end
end,
{I_2, Idx, Prev_3, Res_3, Wordsets} = Fun(I, Idx, Prev_3, Res, Wordsets),
        false
    catch {return, Ret} -> Ret end.

main() ->
    try
        Wordset = [["the", "that", "a"], ["frog", "elephant", "thing"], ["walked", "treaded", "grows"], ["slowly", "quickly"]],
        Res_4 = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Res_4, Wordset) ->
    case (I_3 < length(Wordset)) of
        true ->
            Res_5 = lists:append(Res_4, [""]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Res_5, Wordset);
        _ -> {I_3, Res_4, Wordset}
    end
end,
{I_4, Res_5, Wordset} = Fun_2(I_3, Res_4, Wordset),
        case amb(Wordset, Res_5, 0) of
        true -> Out = ("[" ++ lists:nth(0 + 1, Res_5)),
            J = 1,
            Fun_3 = fun Fun_3_loop(I_4, J, Out, Res_5, Wordset) ->
    case (J < length(Res_5)) of
        true ->
            Out_2 = ((Out ++ " ") ++ lists:nth(J + 1, Res_5)),
            J_2 = (J + 1),
            Fun_3_loop(I_4, J_2, Out_2, Res_5, Wordset);
        _ -> {I_4, J, Out, Res_5, Wordset}
    end
end,
{I_4, J_2, Out_2, Res_5, Wordset} = Fun_3(I_4, J, Out, Res_5, Wordset),
            Out_3 = (Out_2 ++ "]"),
            io:format("~ts~n", [Out_3]),
            Fun_4 = Fun_3,
            J_3 = J_2,
            Out_4 = Out_3;
        _ -> io:format("~ts~n", ["No amb found"]),
            Fun_4 = Fun_2,
            J_3 = nil,
            Out_4 = nil
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
