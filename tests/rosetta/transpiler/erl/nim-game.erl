#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parseintstr/1, showtokens/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (26b9f6045a) on 2025-08-02 23:10 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_parse_int_str(S) ->
    try list_to_integer(S) catch _:_ -> 0 end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

parseintstr(Str) ->
    try
        I = 0,
        Neg = false,
        case ((length(Str) > 0) andalso (string:substr(Str, 0 + 1, (1 - 0)) == "-")) of
        true -> Neg_2 = true,
            I_2 = 1,
            I_3 = I_2,
            Neg_3 = Neg_2;
        _ -> I_3 = I,
            Neg_3 = Neg
    end,
        N = 0,
        Digits = #{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9},
        Fun = fun Fun_loop(Digits, I_3, N, Neg_3, Str) ->
    case (I_3 < length(Str)) of
        true ->
            N_2 = ((N * 10) + maps:get(string:substr(Str, I_3 + 1, ((I_3 + 1) - I_3)), Digits, nil)),
            I_4 = (I_3 + 1),
            Fun_loop(Digits, I_4, N_2, Neg_3, Str);
        _ -> {Digits, I_3, N, Neg_3, Str}
    end
end,
{Digits, I_4, N_2, Neg_3, Str} = Fun(Digits, I_3, N, Neg_3, Str),
        case Neg_3 of
        true -> N_3 = -N_2,
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
        N_4
    catch {return, Ret} -> Ret end.

showtokens(Tokens) ->
    try
        io:format("~ts~n", [("Tokens remaining " ++ lists:flatten(io_lib:format("~p", [Tokens])))]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Tokens_2 = 12,
        Done = false,
        Fun_2 = fun Fun_2_loop(Done, Tokens_2) ->
    case mochi_not(Done) of
        true ->
            showtokens(Tokens_2),
            io:format("~ts~n", [""]),
            io:format("~ts~n", ["How many tokens 1, 2 or 3?"]),
            Line = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
            T = 0,
            case (length(Line) > 0) of
        true -> T_2 = mochi_parse_int_str(Line),
            T_3 = T_2;
        _ -> T_3 = T
    end,
            case ((T_3 < 1) orelse (T_3 > 3)) of
        true -> io:format("~ts~n", ["\nMust be a number between 1 and 3, try again.\n"]),
            Ct_2 = nil,
            S_4 = nil,
            Tokens_4 = Tokens_2;
        _ -> Ct = (4 - T_3),
            S = "s",
            case (Ct == 1) of
        true -> S_2 = "",
            S_3 = S_2;
        _ -> S_3 = S
    end,
            io:format("~ts~n", [(((("  Computer takes " ++ lists:flatten(io_lib:format("~p", [Ct]))) ++ " token") ++ S_3) ++ "\n\n")]),
            Tokens_3 = (Tokens_2 - 4),
            Ct_2 = Ct,
            S_4 = S_3,
            Tokens_4 = Tokens_3
    end,
            case (Tokens_4 == 0) of
        true -> showtokens(0),
            io:format("~ts~n", ["  Computer wins!"]),
            Done_2 = true,
            Done_3 = Done_2;
        _ -> Done_3 = Done
    end,
            Fun_2_loop(Done_3, Tokens_4);
        _ -> {Done, Tokens_2}
    end
end,
{Done_3, Tokens_4} = Fun_2(Done, Tokens_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
