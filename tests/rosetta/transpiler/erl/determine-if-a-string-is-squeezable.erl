#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, padleft/2, squeeze/2]).

% Generated by Mochi transpiler v0.10.42 (da803033ce) on 2025-07-28 04:47 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

padleft(N, Width) ->
    try
        S = lists:flatten(io_lib:format("~p", [N])),
        Fun = fun Fun_loop(N, S, Width) ->
    case (length(S) < Width) of
        true ->
            S_2 = (" " ++ S),
            Fun_loop(N, S_2, Width);
        _ -> {N, S, Width}
    end
end,
{N, S_2, Width} = Fun(N, S, Width),
        S_2
    catch {return, Ret} -> Ret end.

squeeze(S_3, Ch) ->
    try
        Out = "",
        Prev = false,
        I = 0,
        Fun_2 = fun Fun_2_loop(Ch, I, Out, Prev, S_3) ->
    case (I < length(S_3)) of
        true ->
            C = string:substr(S_3, I + 1, ((I + 1) - I)),
            case (C == Ch) of
        true -> case mochi_not(Prev) of
        true -> Out_2 = (Out ++ C),
            Prev_2 = true,
            Out_3 = Out_2,
            Prev_3 = Prev_2;
        _ -> Out_3 = Out,
            Prev_3 = Prev
    end,
            Out_5 = Out_3,
            Prev_5 = Prev_3;
        _ -> Out_4 = (Out ++ C),
            Prev_4 = false,
            Out_5 = Out_4,
            Prev_5 = Prev_4
    end,
            I_2 = (I + 1),
            Fun_2_loop(Ch, I_2, Out_5, Prev_5, S_3);
        _ -> {Ch, I, Out, Prev, S_3}
    end
end,
{Ch, I_2, Out_5, Prev_5, S_3} = Fun_2(Ch, I, Out, Prev, S_3),
        Out_5
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('strings', ["", "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln ", "..1111111111111111111111111111111111111111111111111111111111111117777888", "I never give 'em hell, I just tell the truth, and they think it's hell. ", "                                                   ---  Harry S Truman  ", "The better the 4-wheel drive, the further you'll be from help when ya get stuck!", "headmistressship", "aardvark", "😍😀🙌💃😍😍😍🙌"]),
    erlang:put('chars', [[" "], ["-"], ["7"], ["."], [" ", "-", "r"], ["e"], ["s"], ["a"], ["😍"]]),
    erlang:put('i', 0),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('i') < length(erlang:get('strings'))) of
        true ->
            J = 0,
            S_4 = lists:nth(erlang:get('i') + 1, erlang:get('strings')),
            Fun_3 = fun Fun_3_loop(J, S_4) ->
    case (J < length(lists:nth(erlang:get('i') + 1, erlang:get('chars')))) of
        true ->
            C_2 = lists:nth(J + 1, lists:nth(erlang:get('i') + 1, erlang:get('chars'))),
            Ss = squeeze(S_4, C_2),
            io:format("~ts~n", [(("specified character = '" ++ C_2) ++ "'")]),
            io:format("~ts~n", [(((("original : length = " ++ padleft(length(S_4), 2)) ++ ", string = «««") ++ S_4) ++ "»»»")]),
            io:format("~ts~n", [(((("squeezed : length = " ++ padleft(length(Ss), 2)) ++ ", string = «««") ++ Ss) ++ "»»»")]),
            io:format("~ts~n", [""]),
            J_2 = (J + 1),
            Fun_3_loop(J_2, S_4);
        _ -> {J, S_4}
    end
end,
{J_2, S_4} = Fun_3(J, S_4),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
