#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isprime/1, listtostring/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (53c4f82111) on 2025-07-28 04:39 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

isprime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N rem 2) == 0) of
        true -> throw({return, (N == 2)});
        _ -> ok
    end,
        case ((N rem 3) == 0) of
        true -> throw({return, (N == 3)});
        _ -> ok
    end,
        D = 5,
        Fun = fun Fun_loop(D, N) ->
    case ((D * D) =< N) of
        true ->
            case ((N rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            case ((N rem D_2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_3 = (D_2 + 4),
            Fun_loop(D_3, N);
        _ -> {D, N}
    end
end,
{D_3, N} = Fun(D, N),
        true
    catch {return, Ret} -> Ret end.

listtostring(Xs) ->
    try
        S = "[",
        I = 0,
        Fun_2 = fun Fun_2_loop(I, S, Xs) ->
    case (I < length(Xs)) of
        true ->
            S_2 = (S ++ lists:flatten(io_lib:format("~p", [lists:nth(I + 1, Xs)]))),
            case (I < (length(Xs) - 1)) of
        true -> S_3 = (S_2 ++ " "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, S_4, Xs);
        _ -> {I, S, Xs}
    end
end,
{I_2, S_4, Xs} = Fun_2(I, S, Xs),
        (S_4 ++ "]")
    catch {return, Ret} -> Ret end.

main() ->
    try
        Count = 0,
        Limit = 25,
        N_2 = 17,
        Repunit = 1111111111111111,
        Eleven = 11,
        Hundred = 100,
        Deceptive = [],
        Fun_3 = fun Fun_3_loop(Count, Deceptive, Eleven, Hundred, Limit, N_2, Repunit) ->
    case (Count < Limit) of
        true ->
            case ((mochi_not(isprime(N_2)) andalso ((N_2 rem 3) /= 0)) andalso ((N_2 rem 5) /= 0)) of
        true -> Bn = N_2,
            case ((Repunit rem Bn) == 0) of
        true -> Deceptive_2 = lists:append(Deceptive, [N_2]),
            Count_2 = (Count + 1),
            Count_3 = Count_2,
            Deceptive_3 = Deceptive_2;
        _ -> Count_3 = Count,
            Deceptive_3 = Deceptive
    end,
            Bn_2 = Bn,
            Count_4 = Count_3,
            Deceptive_4 = Deceptive_3;
        _ -> Bn_2 = nil,
            Count_4 = Count,
            Deceptive_4 = Deceptive
    end,
            N_3 = (N_2 + 2),
            Repunit_2 = ((Repunit * Hundred) + Eleven),
            Fun_3_loop(Count_4, Deceptive_4, Eleven, Hundred, Limit, N_3, Repunit_2);
        _ -> {Count, Deceptive, Eleven, Hundred, Limit, N_2, Repunit}
    end
end,
{Count_4, Deceptive_4, Eleven, Hundred, Limit, N_3, Repunit_2} = Fun_3(Count, Deceptive, Eleven, Hundred, Limit, N_2, Repunit),
        io:format("~ts~n", [(("The first " ++ lists:flatten(io_lib:format("~p", [Limit]))) ++ " deceptive numbers are:")]),
        io:format("~ts~n", [listtostring(Deceptive_4)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
