#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bigtrim/1, bigfromint/1, bigadd/2, bigsub/2, bigtostring/1, minint/2, cumu/1, row/1]).

% Generated by Mochi transpiler v0.10.40 (c9f97e1bd3) on 2025-07-25 19:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

bigtrim(A) ->
    try
        N = length(A),
        Fun = fun Fun_loop(A, N) ->
    case ((N > 1) andalso (lists:nth((N - 1) + 1, A) == 0)) of
        true ->
            A_2 = lists:sublist(A, 0 + 1, ((N - 1) - 0)),
            N_2 = (N - 1),
            Fun_loop(A_2, N_2);
        _ -> {A, N}
    end
end,
{A_2, N_2} = Fun(A, N),
        A_2
    catch {return, Ret} -> Ret end.

bigfromint(X) ->
    try
        case (X == 0) of
        true -> throw({return, [0]});
        _ -> ok
    end,
        Digits = [],
        N_3 = X,
        Fun_2 = fun Fun_2_loop(Digits, N_3, X) ->
    case (N_3 > 0) of
        true ->
            Digits_2 = lists:append(Digits, [(N_3 rem 10)]),
            N_4 = (N_3 div 10),
            Fun_2_loop(Digits_2, N_4, X);
        _ -> {Digits, N_3, X}
    end
end,
{Digits_2, N_4, X} = Fun_2(Digits, N_3, X),
        Digits_2
    catch {return, Ret} -> Ret end.

bigadd(A_3, B) ->
    try
        Res = [],
        Carry = 0,
        I = 0,
        Fun_3 = fun Fun_3_loop(A_3, B, Carry, I, Res) ->
    case (((I < length(A_3)) orelse (I < length(B))) orelse (Carry > 0)) of
        true ->
            Av = 0,
            case (I < length(A_3)) of
        true -> Av_2 = lists:nth(I + 1, A_3),
            Av_3 = Av_2;
        _ -> Av_3 = Av
    end,
            Bv = 0,
            case (I < length(B)) of
        true -> Bv_2 = lists:nth(I + 1, B),
            Bv_3 = Bv_2;
        _ -> Bv_3 = Bv
    end,
            S = ((Av_3 + Bv_3) + Carry),
            Res_2 = lists:append(Res, [(S rem 10)]),
            Carry_2 = (S div 10),
            I_2 = (I + 1),
            Fun_3_loop(A_3, B, Carry_2, I_2, Res_2);
        _ -> {A_3, B, Carry, I, Res}
    end
end,
{A_3, B, Carry_2, I_2, Res_2} = Fun_3(A_3, B, Carry, I, Res),
        bigtrim(Res_2)
    catch {return, Ret} -> Ret end.

bigsub(A_4, B_2) ->
    try
        Res_3 = [],
        Borrow = 0,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(A_4, B_2, Borrow, I_3, Res_3) ->
    case (I_3 < length(A_4)) of
        true ->
            Av_4 = lists:nth(I_3 + 1, A_4),
            Bv_4 = 0,
            case (I_3 < length(B_2)) of
        true -> Bv_5 = lists:nth(I_3 + 1, B_2),
            Bv_6 = Bv_5;
        _ -> Bv_6 = Bv_4
    end,
            Diff = ((Av_4 - Bv_6) - Borrow),
            case (Diff < 0) of
        true -> Diff_2 = (Diff + 10),
            Borrow_2 = 1,
            Borrow_4 = Borrow_2,
            Diff_3 = Diff_2;
        _ -> Borrow_3 = 0,
            Borrow_4 = Borrow_3,
            Diff_3 = Diff
    end,
            Res_4 = lists:append(Res_3, [Diff_3]),
            I_4 = (I_3 + 1),
            Fun_4_loop(A_4, B_2, Borrow_4, I_4, Res_4);
        _ -> {A_4, B_2, Borrow, I_3, Res_3}
    end
end,
{A_4, B_2, Borrow_4, I_4, Res_4} = Fun_4(A_4, B_2, Borrow, I_3, Res_3),
        bigtrim(Res_4)
    catch {return, Ret} -> Ret end.

bigtostring(A_5) ->
    try
        S_2 = "",
        I_5 = (length(A_5) - 1),
        Fun_5 = fun Fun_5_loop(A_5, I_5, S_2) ->
    case (I_5 >= 0) of
        true ->
            S_3 = (S_2 ++ lists:flatten(io_lib:format("~p", [lists:nth(I_5 + 1, A_5)]))),
            I_6 = (I_5 - 1),
            Fun_5_loop(A_5, I_6, S_3);
        _ -> {A_5, I_5, S_2}
    end
end,
{A_5, I_6, S_3} = Fun_5(A_5, I_5, S_2),
        S_3
    catch {return, Ret} -> Ret end.

minint(A_6, B_3) ->
    try
        case (A_6 < B_3) of
        true -> throw({return, A_6});
        _ -> throw({return, B_3})
    end,
        nil
    catch {return, Ret} -> Ret end.

cumu(N_5) ->
    try
        Cache = [[bigfromint(1)]],
        Y = 1,
        Fun_7 = fun Fun_7_loop(Cache, N_5, Y) ->
    case (Y =< N_5) of
        true ->
            Row = [bigfromint(0)],
            X_2 = 1,
            Fun_6 = fun Fun_6_loop(Cache, N_5, Row, X_2, Y) ->
    case (X_2 =< Y) of
        true ->
            Val = lists:nth(minint(X_2, (Y - X_2)) + 1, lists:nth((Y - X_2) + 1, Cache)),
            Row_2 = lists:append(Row, [bigadd(lists:nth((length(Row) - 1) + 1, Row), Val)]),
            X_3 = (X_2 + 1),
            Fun_6_loop(Cache, N_5, Row_2, X_3, Y);
        _ -> {Cache, N_5, Row, X_2, Y}
    end
end,
{Cache, N_5, Row_2, X_3, Y} = Fun_6(Cache, N_5, Row, X_2, Y),
            Cache_2 = lists:append(Cache, [Row_2]),
            Y_2 = (Y + 1),
            Fun_7_loop(Cache_2, N_5, Y_2);
        _ -> {Cache, N_5, Y}
    end
end,
{Cache_2, N_5, Y_2} = Fun_7(Cache, N_5, Y),
        lists:nth(N_5 + 1, Cache_2)
    catch {return, Ret} -> Ret end.

row(N_6) ->
    try
        E = cumu(N_6),
        Out = [],
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(E, I_7, N_6, Out) ->
    case (I_7 < N_6) of
        true ->
            Diff_4 = bigsub(lists:nth((I_7 + 1) + 1, E), lists:nth(I_7 + 1, E)),
            Out_2 = lists:append(Out, [bigtostring(Diff_4)]),
            I_8 = (I_7 + 1),
            Fun_8_loop(E, I_8, N_6, Out_2);
        _ -> {E, I_7, N_6, Out}
    end
end,
{E, I_8, N_6, Out_2} = Fun_8(E, I_7, N_6, Out),
        Out_2
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    io:format("~ts~n", ["rows:"]),
    erlang:put('x', 1),
    Fun_10 = fun Fun_10_loop() ->
    case (erlang:get('x') < 11) of
        true ->
            R = row(erlang:get('x')),
            Line = "",
            I_9 = 0,
            Fun_9 = fun Fun_9_loop(I_9, Line, R) ->
    case (I_9 < length(R)) of
        true ->
            Line_2 = (((Line ++ " ") ++ lists:nth(I_9 + 1, R)) ++ " "),
            I_10 = (I_9 + 1),
            Fun_9_loop(I_10, Line_2, R);
        _ -> {I_9, Line, R}
    end
end,
{I_10, Line_2, R} = Fun_9(I_9, Line, R),
            io:format("~ts~n", [Line_2]),
            erlang:put('x', (erlang:get('x') + 1)),
            Fun_10_loop();
        _ -> {}
    end
end,
{} = Fun_10(),
    io:format("~ts~n", [""]),
    io:format("~ts~n", ["sums:"]),
    Fun_11 = fun Fun_11_loop(List) ->
    case List of
        [] -> {};
        [Num|Num_rest] ->
            R_2 = cumu(Num),
            io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [Num])) ++ " ") ++ bigtostring(lists:nth((length(R_2) - 1) + 1, R_2)))]),
            Fun_11_loop(Num_rest)
    end
end,
{} = Fun_11([23, 123, 1234]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
