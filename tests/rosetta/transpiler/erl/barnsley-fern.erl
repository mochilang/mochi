#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, randint/2]).

% Generated by Mochi transpiler v0.10.40 (305ff8442f) on 2025-07-25 12:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

randint(S, N) ->
    try
        Next = (((S * 1664525) + 1013904223) rem 2147483647),
        [Next, (Next rem N)]
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('xMin', -2.182),
    erlang:put('xMax', 2.6558),
    erlang:put('yMin', 0),
    erlang:put('yMax', 9.9983),
    erlang:put('width', 60),
    erlang:put('nIter', 10000),
    erlang:put('dx', (2.6558 - erlang:get('xMin'))),
    erlang:put('dy', (9.9983 - 0)),
    erlang:put('height', mochi_to_int(((60 * erlang:get('dy')) / erlang:get('dx')))),
    erlang:put('grid', []),
    erlang:put('row', 0),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('row') < erlang:get('height')) of
        true ->
            Line = [],
            Col = 0,
            Fun = fun Fun_loop(Col, Line) ->
    case (Col < 60) of
        true ->
            Line_2 = lists:append(Line, [" "]),
            Col_2 = (Col + 1),
            Fun_loop(Col_2, Line_2);
        _ -> {Col, Line}
    end
end,
{Col_2, Line_2} = Fun(Col, Line),
            erlang:put('grid', lists:append(erlang:get('grid'), [Line_2])),
            erlang:put('row', (erlang:get('row') + 1)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    erlang:put('seed', 1),
    erlang:put('x', 0),
    erlang:put('y', 0),
    erlang:put('ix', mochi_to_int(((float(60) * (erlang:get('x') - erlang:get('xMin'))) / erlang:get('dx')))),
    erlang:put('iy', mochi_to_int(((float(erlang:get('height')) * (9.9983 - erlang:get('y'))) / erlang:get('dy')))),
    case ((((erlang:get('ix') >= 0) andalso (erlang:get('ix') < 60)) andalso (erlang:get('iy') >= 0)) andalso (erlang:get('iy') < erlang:get('height'))) of
        true -> Grid = erlang:get('grid'),
            Tmp = lists:nth(erlang:get('iy') + 1, Grid),
            Tmp_2 = lists:sublist(Tmp, erlang:get('ix')) ++ ["*"] ++ lists:nthtail(erlang:get('ix') + 1, Tmp),
            Grid_2 = lists:sublist(Grid, erlang:get('iy')) ++ [Tmp_2] ++ lists:nthtail(erlang:get('iy') + 1, Grid),
            erlang:put('grid', Grid_2),
            Grid_3 = Grid_2,
            Tmp_3 = Tmp_2;
        _ -> Grid_3 = nil,
            Tmp_3 = nil
    end,
    erlang:put('i', 0),
    Fun_3 = fun Fun_3_loop(Grid_3, Tmp_3) ->
    case (erlang:get('i') < 10000) of
        true ->
            Res = randint(erlang:get('seed'), 100),
            erlang:put('seed', lists:nth(0 + 1, Res)),
            R = lists:nth(1 + 1, Res),
            case (R < 85) of
        true -> Nx = ((0.85 * erlang:get('x')) + (0.04 * erlang:get('y'))),
            Ny = (((-0.04 * erlang:get('x')) + (0.85 * erlang:get('y'))) + 1.6),
            erlang:put('x', Nx),
            erlang:put('y', Ny),
            Nx_6 = Nx,
            Ny_6 = Ny;
        _ -> case (R < 92) of
        true -> Nx_2 = ((0.2 * erlang:get('x')) - (0.26 * erlang:get('y'))),
            Ny_2 = (((0.23 * erlang:get('x')) + (0.22 * erlang:get('y'))) + 1.6),
            erlang:put('x', Nx_2),
            erlang:put('y', Ny_2),
            Nx_5 = Nx_2,
            Ny_5 = Ny_2;
        _ -> case (R < 99) of
        true -> Nx_3 = ((-0.15 * erlang:get('x')) + (0.28 * erlang:get('y'))),
            Ny_3 = (((0.26 * erlang:get('x')) + (0.24 * erlang:get('y'))) + 0.44),
            erlang:put('x', Nx_3),
            erlang:put('y', Ny_3),
            Nx_4 = Nx_3,
            Ny_4 = Ny_3;
        _ -> erlang:put('x', 0),
            erlang:put('y', (0.16 * erlang:get('y'))),
            Nx_4 = nil,
            Ny_4 = nil
    end,
            Nx_5 = Nx_4,
            Ny_5 = Ny_4
    end,
            Nx_6 = Nx_5,
            Ny_6 = Ny_5
    end,
            erlang:put('ix', mochi_to_int(((float(60) * (erlang:get('x') - erlang:get('xMin'))) / erlang:get('dx')))),
            erlang:put('iy', mochi_to_int(((float(erlang:get('height')) * (9.9983 - erlang:get('y'))) / erlang:get('dy')))),
            case ((((erlang:get('ix') >= 0) andalso (erlang:get('ix') < 60)) andalso (erlang:get('iy') >= 0)) andalso (erlang:get('iy') < erlang:get('height'))) of
        true -> Grid_4 = erlang:get('grid'),
            Tmp_4 = lists:nth(erlang:get('iy') + 1, Grid_4),
            Tmp_5 = lists:sublist(Tmp_4, erlang:get('ix')) ++ ["*"] ++ lists:nthtail(erlang:get('ix') + 1, Tmp_4),
            Grid_5 = lists:sublist(Grid_4, erlang:get('iy')) ++ [Tmp_5] ++ lists:nthtail(erlang:get('iy') + 1, Grid_4),
            erlang:put('grid', Grid_5),
            Grid_6 = Grid_5,
            Tmp_6 = Tmp_5;
        _ -> Grid_6 = Grid_3,
            Tmp_6 = Tmp_3
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop(Grid_6, Tmp_6);
        _ -> {Grid_3, Tmp_3}
    end
end,
{Grid_6, Tmp_6} = Fun_3(Grid_3, Tmp_3),
    erlang:put('row', 0),
    Fun_5 = fun Fun_5_loop(Grid_6, Tmp_6) ->
    case (erlang:get('row') < erlang:get('height')) of
        true ->
            Line_3 = "",
            Col_3 = 0,
            Fun_4 = fun Fun_4_loop(Col_3, Grid_6, Line_3, Tmp_6) ->
    case (Col_3 < 60) of
        true ->
            Line_4 = (Line_3 ++ lists:nth(Col_3 + 1, lists:nth(erlang:get('row') + 1, erlang:get('grid')))),
            Col_4 = (Col_3 + 1),
            Fun_4_loop(Col_4, Grid_6, Line_4, Tmp_6);
        _ -> {Col_3, Grid_6, Line_3, Tmp_6}
    end
end,
{Col_4, Grid_6, Line_4, Tmp_6} = Fun_4(Col_3, Grid_6, Line_3, Tmp_6),
            io:format("~ts~n", [Line_4]),
            erlang:put('row', (erlang:get('row') + 1)),
            Fun_5_loop(Grid_6, Tmp_6);
        _ -> {Grid_6, Tmp_6}
    end
end,
{Grid_6, Tmp_6} = Fun_5(Grid_6, Tmp_6),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
