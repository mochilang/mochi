#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, padleft/2]).

% Generated by Mochi transpiler v0.10.40 (7bf46dbf08) on 2025-07-25 14:27 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_pad_start(S, Len, Ch) ->
    Fill0 = case Ch of
        "" -> " ";
        _ -> Ch
    end,
    Fill = string:substr(Fill0, 1, 1),
    SL = length(S),
    case SL >= Len of
        true -> S;
        _ -> string:copies(Fill, Len - SL) ++ S
    end.

padleft(S, W) ->
    try
        Res = "",
        N = (W - length(S)),
        Fun = fun Fun_loop(N, Res, S, W) ->
    case (N > 0) of
        true ->
            Res_2 = (Res ++ " "),
            N_2 = (N - 1),
            Fun_loop(N_2, Res_2, S, W);
        _ -> {N, Res, S, W}
    end
end,
{N_2, Res_2, S, W} = Fun(N, Res, S, W),
        (Res_2 ++ S)
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('dna', (((((((((("" ++ "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG") ++ "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG") ++ "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT") ++ "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT") ++ "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG") ++ "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA") ++ "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT") ++ "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG") ++ "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC") ++ "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT")),
    io:format("~ts~n", ["SEQUENCE:"]),
    erlang:put('le', length(erlang:get('dna'))),
    erlang:put('i', 0),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('i') < erlang:get('le')) of
        true ->
            K = (erlang:get('i') + 50),
            case (K > erlang:get('le')) of
        true -> K_2 = erlang:get('le'),
            K_3 = K_2;
        _ -> K_3 = K
    end,
            io:format("~ts~n", [((padleft(lists:flatten(io_lib:format("~p", [erlang:get('i')])), 5) ++ ": ") ++ lists:sublist(erlang:get('dna'), erlang:get('i') + 1, (K_3 - erlang:get('i'))))]),
            erlang:put('i', (erlang:get('i') + 50)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    erlang:put('a', 0),
    erlang:put('c', 0),
    erlang:put('g', 0),
    erlang:put('t', 0),
    erlang:put('idx', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('idx') < erlang:get('le')) of
        true ->
            Ch = string:substr(erlang:get('dna'), erlang:get('idx') + 1, ((erlang:get('idx') + 1) - erlang:get('idx'))),
            case (Ch == "A") of
        true -> erlang:put('a', (erlang:get('a') + 1));
        _ -> case (Ch == "C") of
        true -> erlang:put('c', (erlang:get('c') + 1));
        _ -> case (Ch == "G") of
        true -> erlang:put('g', (erlang:get('g') + 1));
        _ -> case (Ch == "T") of
        true -> erlang:put('t', (erlang:get('t') + 1));
        _ -> ok
    end
    end
    end
    end,
            erlang:put('idx', (erlang:get('idx') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    io:format("~ts~n", [""]),
    io:format("~ts~n", ["BASE COUNT:"]),
    io:format("~ts~n", [("    A: " ++ padleft(lists:flatten(io_lib:format("~p", [erlang:get('a')])), 3))]),
    io:format("~ts~n", [("    C: " ++ padleft(lists:flatten(io_lib:format("~p", [erlang:get('c')])), 3))]),
    io:format("~ts~n", [("    G: " ++ padleft(lists:flatten(io_lib:format("~p", [erlang:get('g')])), 3))]),
    io:format("~ts~n", [("    T: " ++ padleft(lists:flatten(io_lib:format("~p", [erlang:get('t')])), 3))]),
    io:format("~ts~n", ["    ------"]),
    io:format("~ts~n", [("    Î£: " ++ lists:flatten(io_lib:format("~p", [erlang:get('le')])))]),
    io:format("~ts~n", ["    ======"]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
