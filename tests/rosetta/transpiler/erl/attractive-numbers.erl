#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isprime/1, countprimefactors/1, pad4/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (0480f61bb0) on 2025-07-25 16:59 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

isprime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N rem 2) == 0) of
        true -> throw({return, (N == 2)});
        _ -> ok
    end,
        case ((N rem 3) == 0) of
        true -> throw({return, (N == 3)});
        _ -> ok
    end,
        D = 5,
        Fun = fun Fun_loop(D, N) ->
    case ((D * D) =< N) of
        true ->
            case ((N rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            case ((N rem D_2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_3 = (D_2 + 4),
            Fun_loop(D_3, N);
        _ -> {D, N}
    end
end,
{D_3, N} = Fun(D, N),
        true
    catch {return, Ret} -> Ret end.

countprimefactors(N_2) ->
    try
        case (N_2 == 1) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (isprime(N_2) /= nil) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Count = 0,
        F = 2,
        Fun_2 = fun Fun_2_loop(Count, F, N_2) ->
    case true of
        true ->
            case ((N_2 rem F) == 0) of
        true -> Count_2 = (Count + 1),
            N_3 = (N_2 div F),
            case (N_3 == 1) of
        true -> throw({return, Count_2});
        _ -> ok
    end,
            case (isprime(N_3) /= nil) of
        true -> F_2 = N_3,
            F_3 = F_2;
        _ -> F_3 = F
    end,
            Count_3 = Count_2,
            F_7 = F_3,
            N_4 = N_3;
        _ -> case (F >= 3) of
        true -> F_4 = (F + 2),
            F_6 = F_4;
        _ -> F_5 = 3,
            F_6 = F_5
    end,
            Count_3 = Count,
            F_7 = F_6,
            N_4 = N_2
    end,
            Fun_2_loop(Count_3, F_7, N_4);
        _ -> {Count, F, N_2}
    end
end,
{Count_3, F_7, N_4} = Fun_2(Count, F, N_2),
        Count_3
    catch {return, Ret} -> Ret end.

pad4(N_5) ->
    try
        S = lists:flatten(io_lib:format("~p", [N_5])),
        Fun_3 = fun Fun_3_loop(N_5, S) ->
    case (length(S) < 4) of
        true ->
            S_2 = (" " ++ S),
            Fun_3_loop(N_5, S_2);
        _ -> {N_5, S}
    end
end,
{N_5, S_2} = Fun_3(N_5, S),
        S_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Max = 120,
        io:format("~ts~n", [(("The attractive numbers up to and including " ++ lists:flatten(io_lib:format("~p", [120]))) ++ " are:")]),
        Count_4 = 0,
        Line = "",
        LineCount = 0,
        I = 1,
        Fun_4 = fun Fun_4_loop(Count_4, I, Line, LineCount, Max) ->
    case (I =< Max) of
        true ->
            C = countprimefactors(I),
            case (isprime(C) /= nil) of
        true -> Line_2 = (Line ++ pad4(I)),
            Count_5 = (Count_4 + 1),
            LineCount_2 = (LineCount + 1),
            case (LineCount_2 == 20) of
        true -> io:format("~ts~n", [Line_2]),
            Line_3 = "",
            LineCount_3 = 0,
            Line_4 = Line_3,
            LineCount_4 = LineCount_3;
        _ -> Line_4 = Line_2,
            LineCount_4 = LineCount_2
    end,
            Count_6 = Count_5,
            Line_5 = Line_4,
            LineCount_5 = LineCount_4;
        _ -> Count_6 = Count_4,
            Line_5 = Line,
            LineCount_5 = LineCount
    end,
            I_2 = (I + 1),
            Fun_4_loop(Count_6, I_2, Line_5, LineCount_5, Max);
        _ -> {Count_4, I, Line, LineCount, Max}
    end
end,
{Count_6, I_2, Line_5, LineCount_5, Max} = Fun_4(Count_4, I, Line, LineCount, Max),
        case (LineCount_5 > 0) of
        true -> io:format("~ts~n", [Line_5]);
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
