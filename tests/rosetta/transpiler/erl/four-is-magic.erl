#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, capitalize/1, say/1, fourismagic/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (67b72aa5ea) on 2025-08-02 22:23 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

capitalize(S) ->
    try
        (case (length(S) == 0) of
    true -> S;
    _ -> (string:to_upper(string:substr(S, 0 + 1, (1 - 0))) ++ string:substr(S, 1 + 1, (length(S) - 1)))
end)
    catch {return, Ret} -> Ret end.

say(N) ->
    try
        T = "",
        case (N < 0) of
        true -> T_2 = "negative ",
            N_2 = -N,
            N_3 = N_2,
            T_3 = T_2;
        _ -> N_3 = N,
            T_3 = T
    end,
        case (N_3 < 20) of
        true -> throw({return, (T_3 ++ (case erlang:is_map(erlang:get('small')) of true -> maps:get(N_3, erlang:get('small'), nil); _ -> lists:nth(N_3 + 1, erlang:get('small')) end))}),
            S_6 = nil,
            T_12 = T_3;
        _ -> case (N_3 < 100) of
        true -> T_4 = (case erlang:is_map(erlang:get('tens')) of true -> maps:get((N_3 div 10), erlang:get('tens'), nil); _ -> lists:nth((N_3 div 10) + 1, erlang:get('tens')) end),
            S_2 = (N_3 rem 10),
            case (S_2 > 0) of
        true -> T_5 = ((T_4 ++ "-") ++ (case erlang:is_map(erlang:get('small')) of true -> maps:get(S_2, erlang:get('small'), nil); _ -> lists:nth(S_2 + 1, erlang:get('small')) end)),
            T_6 = T_5;
        _ -> T_6 = T_4
    end,
            throw({return, T_6}),
            S_5 = S_2,
            T_11 = T_6;
        _ -> case (N_3 < 1000) of
        true -> T_7 = ((case erlang:is_map(erlang:get('small')) of true -> maps:get((N_3 div 100), erlang:get('small'), nil); _ -> lists:nth((N_3 div 100) + 1, erlang:get('small')) end) ++ " hundred"),
            S_3 = (N_3 rem 100),
            case (S_3 > 0) of
        true -> T_8 = ((T_7 ++ " ") ++ say(S_3)),
            T_9 = T_8;
        _ -> T_9 = T_7
    end,
            throw({return, T_9}),
            S_4 = S_3,
            T_10 = T_9;
        _ -> S_4 = nil,
            T_10 = T_3
    end,
            S_5 = S_4,
            T_11 = T_10
    end,
            S_6 = S_5,
            T_12 = T_11
    end,
        Sx = "",
        I = 0,
        Nn = N_3,
        Fun = fun Fun_loop(I, N_3, Nn, S_6, Sx, T_12) ->
    case (Nn > 0) of
        true ->
            P = (Nn rem 1000),
            Nn_2 = (Nn div 1000),
            case (P > 0) of
        true -> Ix = (say(P) ++ (case erlang:is_map(erlang:get('illions')) of true -> maps:get(I, erlang:get('illions'), nil); _ -> lists:nth(I + 1, erlang:get('illions')) end)),
            case (Sx /= "") of
        true -> Ix_2 = ((Ix ++ " ") ++ Sx),
            Ix_3 = Ix_2;
        _ -> Ix_3 = Ix
    end,
            Sx_2 = Ix_3,
            Ix_4 = Ix_3,
            Sx_3 = Sx_2;
        _ -> Ix_4 = nil,
            Sx_3 = Sx
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, N_3, Nn_2, S_6, Sx_3, T_12);
        _ -> {I, N_3, Nn, S_6, Sx, T_12}
    end
end,
{I_2, N_3, Nn_2, S_6, Sx_3, T_12} = Fun(I, N_3, Nn, S_6, Sx, T_12),
        (T_12 ++ Sx_3)
    catch {return, Ret} -> Ret end.

fourismagic(N_4) ->
    try
        S_7 = say(N_4),
        S_8 = capitalize(S_7),
        T_13 = S_8,
        Fun_2 = fun Fun_2_loop(N_4, S_8, T_13) ->
    case (N_4 /= 4) of
        true ->
            N_5 = length(S_8),
            S_9 = say(N_5),
            T_14 = ((((T_13 ++ " is ") ++ S_9) ++ ", ") ++ S_9),
            Fun_2_loop(N_5, S_9, T_14);
        _ -> {N_4, S_8, T_13}
    end
end,
{N_5, S_9, T_14} = Fun_2(N_4, S_8, T_13),
        T_15 = (T_14 ++ " is magic."),
        T_15
    catch {return, Ret} -> Ret end.

main() ->
    try
        Nums = [0, 4, 6, 11, 13, 75, 100, 337, -164, 9223372036854775807],
        Fun_3 = fun Fun_3_loop(List, Nums) ->
    case List of
        [] -> {Nums};
        [N_6|N_6_rest] ->
            io:format("~ts~n", [fourismagic(N_6)]),
            Fun_3_loop(N_6_rest, Nums)
    end
end,
{Nums} = Fun_3(Nums, Nums),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('small', ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]),
    erlang:put('tens', ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]),
    erlang:put('illions', ["", " thousand", " million", " billion", " trillion", " quadrillion", " quintillion"]),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
