#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs/1, sqrtapprox/1, agmpi/0, main/0]).

% Generated by Mochi transpiler v0.10.55 (87d3efb875) on 2025-08-03 08:53 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

abs(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

sqrtapprox(X_2) ->
    try
        Guess = X_2,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

agmpi() ->
    try
        A = 1,
        G = mochi_safe_div(1, sqrtapprox(2)),
        Sum = 0,
        Pow = 2,
        Fun_2 = fun Fun_2_loop(A, G, Pow, Sum) ->
    case (erlang:abs((A - G)) > 1.0e-15) of
        true ->
            T = mochi_safe_div((A + G), 2),
            U = sqrtapprox(mochi_safe_mul(A, G)),
            A_2 = T,
            G_2 = U,
            Pow_2 = mochi_safe_mul(Pow, 2),
            Diff = (mochi_safe_mul(A_2, A_2) - mochi_safe_mul(G_2, G_2)),
            Sum_2 = (Sum + mochi_safe_mul(Diff, Pow_2)),
            Fun_2_loop(A_2, G_2, Pow_2, Sum_2);
        _ -> {A, G, Pow, Sum}
    end
end,
{A_2, G_2, Pow_2, Sum_2} = Fun_2(A, G, Pow, Sum),
        Pi = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(4, A_2), A_2), (1 - Sum_2)),
        Pi
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [agmpi()]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
