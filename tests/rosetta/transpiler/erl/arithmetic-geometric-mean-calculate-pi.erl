#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs/1, sqrtApprox/1, agmPi/0, main/0]).

% Generated by Mochi transpiler v0.10.39 (6b9be63842) on 2025-07-24 22:46 +0700

abs(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

sqrtApprox(X_2) ->
    try
        Guess = X_2,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 20) of
        true ->
            Guess_2 = ((Guess + (X_2 / Guess)) / 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

agmPi() ->
    try
        A = 1,
        G = (1 / sqrtApprox(2)),
        Sum = 0,
        Pow = 2,
        Fun_2 = fun Fun_2_loop(A, G, Pow, Sum) ->
    case (erlang:abs((A - G)) > 1.0e-15) of
        true ->
            T = ((A + G) / 2),
            U = sqrtApprox((A * G)),
            A_2 = T,
            G_2 = U,
            Pow_2 = (Pow * 2),
            Diff = ((A_2 * A_2) - (G_2 * G_2)),
            Sum_2 = (Sum + (Diff * Pow_2)),
            Fun_2_loop(A_2, G_2, Pow_2, Sum_2);
        _ -> {A, G, Pow, Sum}
    end
end,
{A_2, G_2, Pow_2, Sum_2} = Fun_2(A, G, Pow, Sum),
        Pi = (((4 * A_2) * A_2) / (1 - Sum_2)),
        Pi
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [lists:flatten(io_lib:format("~p", [agmPi()]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    main().
