#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

main() ->
    try
        Row = 3,
        Col = 4,
        A = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(A, Col, I, Row) ->
    case (I < Row) of
        true ->
            RowArr = [],
            J = 0,
            Fun = fun Fun_loop(A, Col, I, J, Row, RowArr) ->
    case (J < Col) of
        true ->
            RowArr_2 = lists:append(RowArr, [0]),
            J_2 = (J + 1),
            Fun_loop(A, Col, I, J_2, Row, RowArr_2);
        _ -> {A, Col, I, J, Row, RowArr}
    end
end,
{A, Col, I, J_2, Row, RowArr_2} = Fun(A, Col, I, J, Row, RowArr),
            A_2 = lists:append(A, [RowArr_2]),
            I_2 = (I + 1),
            Fun_2_loop(A_2, Col, I_2, Row);
        _ -> {A, Col, I, Row}
    end
end,
{A_2, Col, I_2, Row} = Fun_2(A, Col, I, Row),
        io:format("~ts~n", [("a[0][0] = " ++ lists:flatten(io_lib:format("~p", [lists:nth(0 + 1, lists:nth(0 + 1, A_2))])))]),
        Tmp = lists:nth(mochi_to_int((Row - 1)) + 1, A_2),
        Tmp_2 = lists:sublist(Tmp, mochi_to_int((Col - 1))) ++ [7] ++ lists:nthtail(mochi_to_int((Col - 1)) + 1, Tmp),
        A_3 = lists:sublist(A_2, mochi_to_int((Row - 1))) ++ [Tmp_2] ++ lists:nthtail(mochi_to_int((Row - 1)) + 1, A_2),
        io:format("~ts~n", [((((("a[" ++ lists:flatten(io_lib:format("~p", [(Row - 1)]))) ++ "][") ++ lists:flatten(io_lib:format("~p", [(Col - 1)]))) ++ "] = ") ++ lists:flatten(io_lib:format("~p", [lists:nth(mochi_to_int((Col - 1)) + 1, lists:nth(mochi_to_int((Row - 1)) + 1, A_3))])))]),
        A_4 = nil,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
