#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isprime/1, commatize/1, padleft/2, padright/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (1cbd612b6e) on 2025-08-02 20:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

isprime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N rem 2) == 0) of
        true -> throw({return, (N == 2)});
        _ -> ok
    end,
        case ((N rem 3) == 0) of
        true -> throw({return, (N == 3)});
        _ -> ok
    end,
        D = 5,
        Fun = fun Fun_loop(D, N) ->
    case ((D * D) =< N) of
        true ->
            case ((N rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            case ((N rem D_2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_3 = (D_2 + 4),
            Fun_loop(D_3, N);
        _ -> {D, N}
    end
end,
{D_3, N} = Fun(D, N),
        true
    catch {return, Ret} -> Ret end.

commatize(N_2) ->
    try
        S = lists:flatten(io_lib:format("~p", [N_2])),
        I = (length(S) - 3),
        Fun_2 = fun Fun_2_loop(I, N_2, S) ->
    case (I >= 1) of
        true ->
            S_2 = ((string:substr(S, 0 + 1, (I - 0)) ++ ",") ++ string:substr(S, I + 1, (length(S) - I))),
            I_2 = (I - 3),
            Fun_2_loop(I_2, N_2, S_2);
        _ -> {I, N_2, S}
    end
end,
{I_2, N_2, S_2} = Fun_2(I, N_2, S),
        S_2
    catch {return, Ret} -> Ret end.

padleft(S_3, W) ->
    try
        Out = S_3,
        Fun_3 = fun Fun_3_loop(Out, S_3, W) ->
    case (length(Out) < W) of
        true ->
            Out_2 = (" " ++ Out),
            Fun_3_loop(Out_2, S_3, W);
        _ -> {Out, S_3, W}
    end
end,
{Out_2, S_3, W} = Fun_3(Out, S_3, W),
        Out_2
    catch {return, Ret} -> Ret end.

padright(S_4, W_2) ->
    try
        Out_3 = S_4,
        Fun_4 = fun Fun_4_loop(Out_3, S_4, W_2) ->
    case (length(Out_3) < W_2) of
        true ->
            Out_4 = (Out_3 ++ " "),
            Fun_4_loop(Out_4, S_4, W_2);
        _ -> {Out_3, S_4, W_2}
    end
end,
{Out_4, S_4, W_2} = Fun_4(Out_3, S_4, W_2),
        Out_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        I_3 = 42,
        N_3 = 0,
        Fun_5 = fun Fun_5_loop(I_3, N_3) ->
    case (N_3 < 42) of
        true ->
            case isprime(I_3) of
        true -> N_4 = (N_3 + 1),
            NStr = padright(lists:flatten(io_lib:format("~p", [N_4])), 2),
            PStr = padleft(commatize(I_3), 19),
            io:format("~ts~n", [((("n = " ++ NStr) ++ "  ") ++ PStr)]),
            I_4 = ((I_3 + I_3) - 1),
            I_5 = I_4,
            N_5 = N_4,
            NStr_2 = NStr,
            PStr_2 = PStr;
        _ -> I_5 = I_3,
            N_5 = N_3,
            NStr_2 = nil,
            PStr_2 = nil
    end,
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, N_5);
        _ -> {I_3, N_3}
    end
end,
{I_6, N_5} = Fun_5(I_3, N_3),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('limit', 42),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
