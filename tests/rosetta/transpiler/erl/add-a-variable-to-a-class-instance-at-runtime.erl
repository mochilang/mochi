#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (a7ef2ff7cf) on 2025-07-25 21:10 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main() ->
    try
        Ss = #{"runtimeFields" => #{}},
        io:format("~ts~n", ["Create two fields at runtime: \n"]),
        I = 1,
        Fun = fun Fun_loop(I, Ss) ->
    case (I =< 2) of
        true ->
            io:format("~ts~n", [(("  Field #" ++ lists:flatten(io_lib:format("~p", [I]))) ++ ":\n")]),
            io:format("~ts~n", ["       Enter name  : "]),
            Name = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
            io:format("~ts~n", ["       Enter value : "]),
            Value = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
            Fields = maps:get("runtimeFields", Ss, nil),
            Fields_2 = maps:put(Name, Value, Fields),
            Ss_2 = maps:put("runtimeFields", Fields_2, Ss),
            io:format("~ts~n", ["\n"]),
            I_2 = (I + 1),
            Fun_loop(I_2, Ss_2);
        _ -> {I, Ss}
    end
end,
{I_2, Ss_2} = Fun(I, Ss),
        Fun_2 = fun Fun_2_loop(I_2, Ss_2) ->
    case true of
        true ->
            io:format("~ts~n", ["Which field do you want to inspect ? "]),
            Name_2 = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
            case maps:is_key(Name_2, maps:get("runtimeFields", Ss_2, nil)) of
        true -> Value_2 = maps:get(Name_2, maps:get("runtimeFields", Ss_2, nil), nil),
            io:format("~ts~n", [(("Its value is '" ++ Value_2) ++ "'")]),
            throw({return, nil}),
            Value_3 = Value_2;
        _ -> io:format("~ts~n", ["There is no field of that name, try again\n"]),
            Value_3 = nil
    end,
            Fun_2_loop(I_2, Ss_2);
        _ -> {I_2, Ss_2}
    end
end,
{I_2, Ss_2} = Fun_2(I_2, Ss_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
