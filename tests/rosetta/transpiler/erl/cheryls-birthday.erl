#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, monthunique/2, dayunique/2, monthwithuniqueday/2, bstr/1]).

% Generated by Mochi transpiler v0.10.42 (bbaa8b9136) on 2025-07-28 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

monthunique(B, List) ->
    try
        C = 0,
        Fun = fun Fun_loop(List_, B, C, List) ->
    case List_ of
        [] -> {B, C, List};
        [X|X_rest] ->
            case (maps:get("month", X, nil) == maps:get("month", B, nil)) of
        true -> C_2 = (C + 1),
            C_3 = C_2;
        _ -> C_3 = C
    end,
            Fun_loop(X_rest, B, C_3, List)
    end
end,
{B, C_3, List} = Fun(List, B, C, List),
        (C_3 == 1)
    catch {return, Ret} -> Ret end.

dayunique(B_2, List_2) ->
    try
        C_4 = 0,
        Fun_2 = fun Fun_2_loop(List, B_2, C_4, List_2) ->
    case List of
        [] -> {B_2, C_4, List_2};
        [X_2|X_2_rest] ->
            case (maps:get("day", X_2, nil) == maps:get("day", B_2, nil)) of
        true -> C_5 = (C_4 + 1),
            C_6 = C_5;
        _ -> C_6 = C_4
    end,
            Fun_2_loop(X_2_rest, B_2, C_6, List_2)
    end
end,
{B_2, C_6, List_2} = Fun_2(List_2, B_2, C_4, List_2),
        (C_6 == 1)
    catch {return, Ret} -> Ret end.

monthwithuniqueday(B_3, List_3) ->
    try
        Fun_3 = fun Fun_3_loop(List, B_3, List_3) ->
    case List of
        [] -> {B_3, List_3};
        [X_3|X_3_rest] ->
            case ((maps:get("month", X_3, nil) == maps:get("month", B_3, nil)) andalso dayunique(X_3, List_3)) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_3_loop(X_3_rest, B_3, List_3)
    end
end,
{B_3, List_3} = Fun_3(List_3, B_3, List_3),
        false
    catch {return, Ret} -> Ret end.

bstr(B_4) ->
    try
        Months = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        ((lists:nth(maps:get("month", B_4, nil) + 1, Months) ++ " ") ++ lists:flatten(io_lib:format("~p", [maps:get("day", B_4, nil)])))
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('choices', [#{"month" => 5, "day" => 15}, #{"month" => 5, "day" => 16}, #{"month" => 5, "day" => 19}, #{"month" => 6, "day" => 17}, #{"month" => 6, "day" => 18}, #{"month" => 7, "day" => 14}, #{"month" => 7, "day" => 16}, #{"month" => 8, "day" => 14}, #{"month" => 8, "day" => 15}, #{"month" => 8, "day" => 17}]),
    erlang:put('filtered', []),
    Fun_4 = fun Fun_4_loop(List) ->
    case List of
        [] -> {};
        [Bd|Bd_rest] ->
            case mochi_not(monthunique(Bd, erlang:get('choices'))) of
        true -> erlang:put('filtered', lists:append(erlang:get('filtered'), [Bd]));
        _ -> ok
    end,
            Fun_4_loop(Bd_rest)
    end
end,
{} = Fun_4(erlang:get('choices')),
    erlang:put('filtered2', []),
    Fun_5 = fun Fun_5_loop(List) ->
    case List of
        [] -> {};
        [Bd_2|Bd_2_rest] ->
            case mochi_not(monthwithuniqueday(Bd_2, erlang:get('filtered'))) of
        true -> erlang:put('filtered2', lists:append(erlang:get('filtered2'), [Bd_2]));
        _ -> ok
    end,
            Fun_5_loop(Bd_2_rest)
    end
end,
{} = Fun_5(erlang:get('filtered')),
    erlang:put('filtered3', []),
    Fun_6 = fun Fun_6_loop(List) ->
    case List of
        [] -> {};
        [Bd_3|Bd_3_rest] ->
            case (dayunique(Bd_3, erlang:get('filtered2')) /= nil) of
        true -> erlang:put('filtered3', lists:append(erlang:get('filtered3'), [Bd_3]));
        _ -> ok
    end,
            Fun_6_loop(Bd_3_rest)
    end
end,
{} = Fun_6(erlang:get('filtered2')),
    erlang:put('filtered4', []),
    Fun_7 = fun Fun_7_loop(List) ->
    case List of
        [] -> {};
        [Bd_4|Bd_4_rest] ->
            case (monthunique(Bd_4, erlang:get('filtered3')) /= nil) of
        true -> erlang:put('filtered4', lists:append(erlang:get('filtered4'), [Bd_4]));
        _ -> ok
    end,
            Fun_7_loop(Bd_4_rest)
    end
end,
{} = Fun_7(erlang:get('filtered3')),
    case (length(erlang:get('filtered4')) == 1) of
        true -> io:format("~ts~n", [("Cheryl's birthday is " ++ bstr(lists:nth(0 + 1, erlang:get('filtered4'))))]);
        _ -> io:format("~ts~n", ["Something went wrong!"])
    end,
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
