#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, factorial/1, isprime/1, padleft/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

factorial(N) ->
    try
        Result = 1,
        I = 2,
        Fun = fun Fun_loop(I, N, Result) ->
    case (I =< N) of
        true ->
            Result_2 = (Result * I),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Result_2);
        _ -> {I, N, Result}
    end
end,
{I_2, N, Result_2} = Fun(I, N, Result),
        Result_2
    catch {return, Ret} -> Ret end.

isprime(N_2) ->
    try
        case (N_2 < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N_2 rem 2) == 0) of
        true -> throw({return, (N_2 == 2)});
        _ -> ok
    end,
        D = 3,
        Fun_2 = fun Fun_2_loop(D, N_2) ->
    case ((D * D) =< N_2) of
        true ->
            case ((N_2 rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            Fun_2_loop(D_2, N_2);
        _ -> {D, N_2}
    end
end,
{D_2, N_2} = Fun_2(D, N_2),
        true
    catch {return, Ret} -> Ret end.

padleft(S, W) ->
    try
        Out = S,
        Fun_3 = fun Fun_3_loop(Out, S, W) ->
    case (length(Out) < W) of
        true ->
            Out_2 = (" " ++ Out),
            Fun_3_loop(Out_2, S, W);
        _ -> {Out, S, W}
    end
end,
{Out_2, S, W} = Fun_3(Out, S, W),
        Out_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        N_3 = 0,
        Count = 0,
        Fun_4 = fun Fun_4_loop(Count, N_3) ->
    case (Count < 10) of
        true ->
            N_4 = (N_3 + 1),
            F = factorial(N_4),
            case isprime((F - 1)) of
        true -> Count_2 = (Count + 1),
            io:format("~ts~n", [((((padleft(lists:flatten(io_lib:format("~p", [Count_2])), 2) ++ ": ") ++ padleft(lists:flatten(io_lib:format("~p", [N_4])), 2)) ++ "! - 1 = ") ++ lists:flatten(io_lib:format("~p", [(F - 1)])))]),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            case ((Count_3 < 10) andalso isprime((F + 1))) of
        true -> Count_4 = (Count_3 + 1),
            io:format("~ts~n", [((((padleft(lists:flatten(io_lib:format("~p", [Count_4])), 2) ++ ": ") ++ padleft(lists:flatten(io_lib:format("~p", [N_4])), 2)) ++ "! + 1 = ") ++ lists:flatten(io_lib:format("~p", [(F + 1)])))]),
            Count_5 = Count_4;
        _ -> Count_5 = Count_3
    end,
            Fun_4_loop(Count_5, N_4);
        _ -> {Count, N_3}
    end
end,
{Count_5, N_4} = Fun_4(Count, N_3),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
