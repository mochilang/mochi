#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, endswith/2, lastindexof/2, fileextinlist/1, pad/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

endswith(S, Suf) ->
    try
        (case (length(S) < length(Suf)) of
    true -> false;
    _ -> (string:substr(S, (length(S) - length(Suf)) + 1, (length(S) - (length(S) - length(Suf)))) == Suf)
end)
    catch {return, Ret} -> Ret end.

lastindexof(S_2, Sub) ->
    try
        Idx = (0 - 1),
        I = 0,
        Fun = fun Fun_loop(I, Idx, S_2, Sub) ->
    case (I =< (length(S_2) - length(Sub))) of
        true ->
            case (string:substr(S_2, I + 1, ((I + length(Sub)) - I)) == Sub) of
        true -> Idx_2 = I,
            Idx_3 = Idx_2;
        _ -> Idx_3 = Idx
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Idx_3, S_2, Sub);
        _ -> {I, Idx, S_2, Sub}
    end
end,
{I_2, Idx_3, S_2, Sub} = Fun(I, Idx, S_2, Sub),
        Idx_3
    catch {return, Ret} -> Ret end.

fileextinlist(Filename) ->
    try
        Fl = string:to_lower(Filename),
        Fun_2 = fun Fun_2_loop(List, Filename, Fl) ->
    case List of
        [] -> {Filename, Fl};
        [Ext|Ext_rest] ->
            Ext2 = ("." ++ string:to_lower(Ext)),
            case endswith(Fl, Ext2) of
        true -> throw({return, [true, Ext]});
        _ -> ok
    end,
            Fun_2_loop(Ext_rest, Filename, Fl)
    end
end,
{Filename, Fl} = Fun_2(erlang:get('extensions'), Filename, Fl),
        Idx_4 = lastindexof(Filename, "."),
        case (Idx_4 /= (0 - 1)) of
        true -> T = string:substr(Filename, (Idx_4 + 1) + 1, (length(Filename) - (Idx_4 + 1))),
            case (T /= "") of
        true -> throw({return, [false, T]});
        _ -> ok
    end,
            throw({return, [false, "<empty>"]}),
            T_2 = T;
        _ -> T_2 = nil
    end,
        [false, "<none>"]
    catch {return, Ret} -> Ret end.

pad(S_3, W) ->
    try
        T_3 = S_3,
        Fun_3 = fun Fun_3_loop(S_3, T_3, W) ->
    case (length(T_3) < W) of
        true ->
            T_4 = (T_3 ++ " "),
            Fun_3_loop(S_3, T_4, W);
        _ -> {S_3, T_3, W}
    end
end,
{S_3, T_4, W} = Fun_3(S_3, T_3, W),
        T_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", ["The listed extensions are:"]),
        io:format("~p~n", [erlang:get('extensions')]),
        Tests = ["MyData.a##", "MyData.tar.Gz", "MyData.gzip", "MyData.7z.backup", "MyData...", "MyData", "MyData_v1.0.tar.bz2", "MyData_v1.0.bz2"],
        Fun_4 = fun Fun_4_loop(List, Tests) ->
    case List of
        [] -> {Tests};
        [T_5|T_5_rest] ->
            Res = fileextinlist(T_5),
            Ok = (case erlang:is_map(Res) of true -> maps:get(0, Res, nil); _ -> lists:nth(0 + 1, Res) end),
            Ext_2 = (case erlang:is_map(Res) of true -> maps:get(1, Res, nil); _ -> lists:nth(1 + 1, Res) end),
            io:format("~ts~n", [(((((pad(T_5, 20) ++ " => ") ++ lists:flatten(io_lib:format("~p", [Ok]))) ++ "  (extension = ") ++ Ext_2) ++ ")")]),
            Fun_4_loop(T_5_rest, Tests)
    end
end,
{Tests} = Fun_4(Tests, Tests),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('extensions', ["zip", "rar", "7z", "gz", "archive", "A##", "tar.bz2"]),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
