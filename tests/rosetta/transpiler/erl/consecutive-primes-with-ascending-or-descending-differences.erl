#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, primesupto/1, longestseq/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (df7e5d4e15) on 2025-07-27 05:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

primesupto(N) ->
    try
        Sieve = [],
        I = 0,
        Fun = fun Fun_loop(I, N, Sieve) ->
    case (I =< N) of
        true ->
            Sieve_2 = lists:append(Sieve, [true]),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Sieve_2);
        _ -> {I, N, Sieve}
    end
end,
{I_2, N, Sieve_2} = Fun(I, N, Sieve),
        P = 2,
        Fun_4 = fun Fun_4_loop(I_2, N, P, Sieve_2) ->
    case ((P * P) =< N) of
        true ->
            case lists:nth(P + 1, Sieve_2) of
        true -> M = (P * P),
            Fun_2 = fun Fun_2_loop(I_2, M, N, P, Sieve_2) ->
    case (M =< N) of
        true ->
            Sieve_3 = lists:sublist(Sieve_2, M) ++ [false] ++ lists:nthtail(M + 1, Sieve_2),
            M_2 = (M + P),
            Fun_2_loop(I_2, M_2, N, P, Sieve_3);
        _ -> {I_2, M, N, P, Sieve_2}
    end
end,
{I_2, M_2, N, P, Sieve_3} = Fun_2(I_2, M, N, P, Sieve_2),
            Fun_3 = Fun_2,
            M_3 = M_2,
            Sieve_4 = Sieve_3;
        _ -> Fun_3 = Fun,
            M_3 = nil,
            Sieve_4 = Sieve_2
    end,
            P_2 = (P + 1),
            Fun_4_loop(I_2, N, P_2, Sieve_4);
        _ -> {I_2, N, P, Sieve_2}
    end
end,
{I_2, N, P_2, Sieve_4} = Fun_4(I_2, N, P, Sieve_2),
        Res = [],
        X = 2,
        Fun_5 = fun Fun_5_loop(I_2, N, P_2, Res, Sieve_4, X) ->
    case (X =< N) of
        true ->
            case lists:nth(X + 1, Sieve_4) of
        true -> Res_2 = lists:append(Res, [X]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            X_2 = (X + 1),
            Fun_5_loop(I_2, N, P_2, Res_3, Sieve_4, X_2);
        _ -> {I_2, N, P_2, Res, Sieve_4, X}
    end
end,
{I_2, N, P_2, Res_3, Sieve_4, X_2} = Fun_5(I_2, N, P_2, Res, Sieve_4, X),
        Res_3
    catch {return, Ret} -> Ret end.

longestseq(Dir) ->
    try
        Pd = 0,
        LongSeqs = [[2]],
        CurrSeq = [2],
        I_3 = 1,
        Fun_6 = fun Fun_6_loop(CurrSeq, Dir, I_3, LongSeqs, Pd) ->
    case (I_3 < length(erlang:get('primes'))) of
        true ->
            D = (lists:nth(I_3 + 1, erlang:get('primes')) - lists:nth((I_3 - 1) + 1, erlang:get('primes'))),
            case (((Dir == "ascending") andalso (D =< Pd)) orelse ((Dir == "descending") andalso (D >= Pd))) of
        true -> case (length(CurrSeq) > length(lists:nth(0 + 1, LongSeqs))) of
        true -> LongSeqs_2 = [CurrSeq],
            LongSeqs_5 = LongSeqs_2;
        _ -> case (length(CurrSeq) == length(lists:nth(0 + 1, LongSeqs))) of
        true -> LongSeqs_3 = lists:append(LongSeqs, [CurrSeq]),
            LongSeqs_4 = LongSeqs_3;
        _ -> LongSeqs_4 = LongSeqs
    end,
            LongSeqs_5 = LongSeqs_4
    end,
            CurrSeq_2 = [lists:nth((I_3 - 1) + 1, erlang:get('primes')), lists:nth(I_3 + 1, erlang:get('primes'))],
            CurrSeq_4 = CurrSeq_2,
            LongSeqs_6 = LongSeqs_5;
        _ -> CurrSeq_3 = lists:append(CurrSeq, [lists:nth(I_3 + 1, erlang:get('primes'))]),
            CurrSeq_4 = CurrSeq_3,
            LongSeqs_6 = LongSeqs
    end,
            Pd_2 = D,
            I_4 = (I_3 + 1),
            Fun_6_loop(CurrSeq_4, Dir, I_4, LongSeqs_6, Pd_2);
        _ -> {CurrSeq, Dir, I_3, LongSeqs, Pd}
    end
end,
{CurrSeq_4, Dir, I_4, LongSeqs_6, Pd_2} = Fun_6(CurrSeq, Dir, I_3, LongSeqs, Pd),
        case (length(CurrSeq_4) > length(lists:nth(0 + 1, LongSeqs_6))) of
        true -> LongSeqs_7 = [CurrSeq_4],
            LongSeqs_10 = LongSeqs_7;
        _ -> case (length(CurrSeq_4) == length(lists:nth(0 + 1, LongSeqs_6))) of
        true -> LongSeqs_8 = lists:append(LongSeqs_6, [CurrSeq_4]),
            LongSeqs_9 = LongSeqs_8;
        _ -> LongSeqs_9 = LongSeqs_6
    end,
            LongSeqs_10 = LongSeqs_9
    end,
        io:format("~ts~n", [(((("Longest run(s) of primes with " ++ Dir) ++ " differences is ") ++ lists:flatten(io_lib:format("~p", [length(lists:nth(0 + 1, LongSeqs_10))]))) ++ " :")]),
        Fun_7 = fun Fun_7_loop(List, CurrSeq_4, Dir, I_4, LongSeqs_10, Pd_2) ->
    case List of
        [] -> {CurrSeq_4, Dir, I_4, LongSeqs_10, Pd_2};
        [Ls|Ls_rest] ->
            Diffs = [],
            J = 1,
            Fun_8 = fun Fun_8_loop(CurrSeq_4, Diffs, Dir, I_4, J, LongSeqs_10, Ls, Pd_2) ->
    case (J < length(Ls)) of
        true ->
            Diffs_2 = lists:append(Diffs, [(lists:nth(J + 1, Ls) - lists:nth((J - 1) + 1, Ls))]),
            J_2 = (J + 1),
            Fun_8_loop(CurrSeq_4, Diffs_2, Dir, I_4, J_2, LongSeqs_10, Ls, Pd_2);
        _ -> {CurrSeq_4, Diffs, Dir, I_4, J, LongSeqs_10, Ls, Pd_2}
    end
end,
{CurrSeq_4, Diffs_2, Dir, I_4, J_2, LongSeqs_10, Ls, Pd_2} = Fun_8(CurrSeq_4, Diffs, Dir, I_4, J, LongSeqs_10, Ls, Pd_2),
            K = 0,
            Fun_9 = fun Fun_9_loop(CurrSeq_4, Diffs_2, Dir, I_4, J_2, K, LongSeqs_10, Ls, Pd_2) ->
    case (K < (length(Ls) - 1)) of
        true ->
            io:format("~ts ~p~n", [(((lists:flatten(io_lib:format("~p", [lists:nth(K + 1, Ls)])) ++ " (") ++ lists:flatten(io_lib:format("~p", [lists:nth(K + 1, Diffs_2)]))) ++ ") "), false]),
            K_2 = (K + 1),
            Fun_9_loop(CurrSeq_4, Diffs_2, Dir, I_4, J_2, K_2, LongSeqs_10, Ls, Pd_2);
        _ -> {CurrSeq_4, Diffs_2, Dir, I_4, J_2, K, LongSeqs_10, Ls, Pd_2}
    end
end,
{CurrSeq_4, Diffs_2, Dir, I_4, J_2, K_2, LongSeqs_10, Ls, Pd_2} = Fun_9(CurrSeq_4, Diffs_2, Dir, I_4, J_2, K, LongSeqs_10, Ls, Pd_2),
            io:format("~ts~n", [lists:flatten(io_lib:format("~p", [lists:nth((length(Ls) - 1) + 1, Ls)]))]),
            Fun_7_loop(Ls_rest, CurrSeq_4, Dir, I_4, LongSeqs_10, Pd_2)
    end
end,
{CurrSeq_4, Dir, I_4, LongSeqs_10, Pd_2} = Fun_7(LongSeqs_10, CurrSeq_4, Dir, I_4, LongSeqs_10, Pd_2),
        io:format("~ts~n", [""]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", ["For primes < 1 million:\n"]),
        Fun_10 = fun Fun_10_loop(List) ->
    case List of
        [] -> {};
        [Dir_2|Dir_2_rest] ->
            longestseq(Dir_2),
            Fun_10_loop(Dir_2_rest)
    end
end,
{} = Fun_10(["ascending", "descending"]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('LIMIT', 999999),
    erlang:put('primes', primesupto(999999)),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
