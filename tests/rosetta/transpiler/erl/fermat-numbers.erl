#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow_int/2, pow_big/2, parsebigint/1, fermat/1, primefactorsbig/1, show_list/1, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

pow_int(Base, Exp) ->
    try
        Result = 1,
        B = Base,
        E = Exp,
        Fun = fun Fun_loop(B, Base, E, Exp, Result) ->
    case (E > 0) of
        true ->
            case ((E rem 2) == 1) of
        true -> Result_2 = (Result * B),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            B_2 = (B * B),
            E_2 = mochi_to_int((E / 2)),
            Fun_loop(B_2, Base, E_2, Exp, Result_3);
        _ -> {B, Base, E, Exp, Result}
    end
end,
{B_2, Base, E_2, Exp, Result_3} = Fun(B, Base, E, Exp, Result),
        Result_3
    catch {return, Ret} -> Ret end.

pow_big(Base_2, Exp_2) ->
    try
        Result_4 = 1,
        B_3 = Base_2,
        E_3 = Exp_2,
        Fun_2 = fun Fun_2_loop(B_3, Base_2, E_3, Exp_2, Result_4) ->
    case (E_3 > 0) of
        true ->
            case ((E_3 rem 2) == 1) of
        true -> Result_5 = (Result_4 * B_3),
            Result_6 = Result_5;
        _ -> Result_6 = Result_4
    end,
            B_4 = (B_3 * B_3),
            E_4 = mochi_to_int((E_3 / 2)),
            Fun_2_loop(B_4, Base_2, E_4, Exp_2, Result_6);
        _ -> {B_3, Base_2, E_3, Exp_2, Result_4}
    end
end,
{B_4, Base_2, E_4, Exp_2, Result_6} = Fun_2(B_3, Base_2, E_3, Exp_2, Result_4),
        Result_6
    catch {return, Ret} -> Ret end.

parsebigint(Str) ->
    try
        I = 0,
        Neg = false,
        case ((length(Str) > 0) andalso (string:substr(Str, 0 + 1, (1 - 0)) == "-")) of
        true -> Neg_2 = true,
            I_2 = 1,
            I_3 = I_2,
            Neg_3 = Neg_2;
        _ -> I_3 = I,
            Neg_3 = Neg
    end,
        N = 0,
        Fun_3 = fun Fun_3_loop(I_3, N, Neg_3, Str) ->
    case (I_3 < length(Str)) of
        true ->
            Ch = string:substr(Str, I_3 + 1, ((I_3 + 1) - I_3)),
            D = mochi_to_int(Ch),
            N_2 = ((N * 10) + D),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, N_2, Neg_3, Str);
        _ -> {I_3, N, Neg_3, Str}
    end
end,
{I_4, N_2, Neg_3, Str} = Fun_3(I_3, N, Neg_3, Str),
        case Neg_3 of
        true -> N_3 = -N_2,
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
        N_4
    catch {return, Ret} -> Ret end.

fermat(N_5) ->
    try
        P = pow_int(2, N_5),
        ((1 bsl P) + 1)
    catch {return, Ret} -> Ret end.

primefactorsbig(N_6) ->
    try
        Factors = [],
        M = N_6,
        D_2 = 2,
        Fun_4 = fun Fun_4_loop(D_2, Factors, M, N_6) ->
    case ((M rem D_2) == 0) of
        true ->
            Factors_2 = lists:append(Factors, [D_2]),
            M_2 = (M / D_2),
            Fun_4_loop(D_2, Factors_2, M_2, N_6);
        _ -> {D_2, Factors, M, N_6}
    end
end,
{D_2, Factors_2, M_2, N_6} = Fun_4(D_2, Factors, M, N_6),
        D_3 = 3,
        Fun_6 = fun Fun_6_loop(D_3, Factors_2, M_2, N_6) ->
    case ((D_3 * D_3) =< M_2) of
        true ->
            Fun_5 = fun Fun_5_loop(D_3, Factors_2, M_2, N_6) ->
    case ((M_2 rem D_3) == 0) of
        true ->
            Factors_3 = lists:append(Factors_2, [D_3]),
            M_3 = (M_2 / D_3),
            Fun_5_loop(D_3, Factors_3, M_3, N_6);
        _ -> {D_3, Factors_2, M_2, N_6}
    end
end,
{D_3, Factors_3, M_3, N_6} = Fun_5(D_3, Factors_2, M_2, N_6),
            D_4 = (D_3 + 2),
            Fun_6_loop(D_4, Factors_3, M_3, N_6);
        _ -> {D_3, Factors_2, M_2, N_6}
    end
end,
{D_4, Factors_3, M_3, N_6} = Fun_6(D_3, Factors_2, M_2, N_6),
        case (M_3 > 1) of
        true -> Factors_4 = lists:append(Factors_3, [M_3]),
            Factors_5 = Factors_4;
        _ -> Factors_5 = Factors_3
    end,
        Factors_5
    catch {return, Ret} -> Ret end.

show_list(Xs) ->
    try
        Line = "",
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(I_5, Line, Xs) ->
    case (I_5 < length(Xs)) of
        true ->
            Line_2 = (Line ++ lists:flatten(io_lib:format("~p", [lists:nth(I_5 + 1, Xs)]))),
            case (I_5 < (length(Xs) - 1)) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            I_6 = (I_5 + 1),
            Fun_7_loop(I_6, Line_4, Xs);
        _ -> {I_5, Line, Xs}
    end
end,
{I_6, Line_4, Xs} = Fun_7(I_5, Line, Xs),
        Line_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Nums = [],
        Fun_8 = fun Fun_8_loop(List, Nums) ->
    case List of
        [] -> {Nums};
        [I_7|I_7_rest] ->
            Nums_2 = lists:append(Nums, [fermat(I_7)]),
            Fun_8_loop(I_7_rest, Nums_2)
    end
end,
{Nums_2} = Fun_8(lists:seq(0, (8) - 1), Nums),
        io:format("~ts~n", ["First 8 Fermat numbers:"]),
        Fun_9 = fun Fun_9_loop(List, Nums_2) ->
    case List of
        [] -> {Nums_2};
        [N_7|N_7_rest] ->
            io:format("~ts~n", [lists:flatten(io_lib:format("~p", [N_7]))]),
            Fun_9_loop(N_7_rest, Nums_2)
    end
end,
{Nums_2} = Fun_9(Nums_2, Nums_2),
        Extra = #{6 => [274177, 67280421310721], 7 => [parsebigint("59649589127497217"), parsebigint("5704689200685129054721")]},
        io:format("~ts~n", ["\nFactors:"]),
        I_8 = 0,
        Fun_10 = fun Fun_10_loop(Extra, I_8, Nums_2) ->
    case (I_8 < length(Nums_2)) of
        true ->
            Facs = [],
            case (I_8 =< 5) of
        true -> Facs_2 = primefactorsbig(lists:nth(I_8 + 1, Nums_2)),
            Facs_4 = Facs_2;
        _ -> Facs_3 = maps:get(I_8, Extra, nil),
            Facs_4 = Facs_3
    end,
            io:format("~ts~n", [((("F" ++ lists:flatten(io_lib:format("~p", [I_8]))) ++ " = ") ++ show_list(Facs_4))]),
            I_9 = (I_8 + 1),
            Fun_10_loop(Extra, I_9, Nums_2);
        _ -> {Extra, I_8, Nums_2}
    end
end,
{Extra, I_9, Nums_2} = Fun_10(Extra, I_8, Nums_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
