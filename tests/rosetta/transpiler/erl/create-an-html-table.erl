#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main() ->
    try
        Rows = [],
        Fun = fun Fun_loop(List, Rows) ->
    case List of
        [] -> {Rows};
        [I|I_rest] ->
            Rows_2 = lists:append(Rows, [[(I * 3), ((I * 3) + 1), ((I * 3) + 2)]]),
            Fun_loop(I_rest, Rows_2)
    end
end,
{Rows_2} = Fun(lists:seq(0, (4) - 1), Rows),
        io:format("~ts~n", ["<table>"]),
        io:format("~ts~n", ["    <tr><th></th><th>X</th><th>Y</th><th>Z</th></tr>"]),
        Idx = 0,
        Fun_2 = fun Fun_2_loop(List, Idx, Rows_2) ->
    case List of
        [] -> {Idx, Rows_2};
        [Row|Row_rest] ->
            io:format("~ts~n", [(((((((("    <tr><td>" ++ lists:flatten(io_lib:format("~p", [Idx]))) ++ "</td><td>") ++ lists:flatten(io_lib:format("~p", [lists:nth(0 + 1, Row)]))) ++ "</td><td>") ++ lists:flatten(io_lib:format("~p", [lists:nth(1 + 1, Row)]))) ++ "</td><td>") ++ lists:flatten(io_lib:format("~p", [lists:nth(2 + 1, Row)]))) ++ "</td></tr>")]),
            Idx_2 = (Idx + 1),
            Fun_2_loop(Row_rest, Idx_2, Rows_2)
    end
end,
{Idx_2, Rows_2} = Fun_2(Rows_2, Idx, Rows_2),
        io:format("~ts~n", ["</table>"]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
