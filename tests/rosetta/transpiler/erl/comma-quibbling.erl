#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, quibble/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (df7e5d4e15) on 2025-07-27 05:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

quibble(Items) ->
    try
        N = length(Items),
        case (N == 0) of
        true -> throw({return, "{}"}),
            Fun_4 = nil,
            Prefix_7 = nil;
        _ -> case (N == 1) of
        true -> throw({return, (("{" ++ lists:nth(0 + 1, Items)) ++ "}")}),
            Fun_3 = nil,
            Prefix_6 = nil;
        _ -> case (N == 2) of
        true -> throw({return, (((("{" ++ lists:nth(0 + 1, Items)) ++ " and ") ++ lists:nth(1 + 1, Items)) ++ "}")}),
            Fun_2 = nil,
            Prefix_5 = nil;
        _ -> Prefix = "",
            Fun = fun Fun_loop(List, Items, N, Prefix) ->
    case List of
        [] -> {Items, N, Prefix};
        [I|I_rest] ->
        try
            case (I == (N - 1)) of
        true -> throw(break);
        _ -> ok
    end,
            case (I > 0) of
        true -> Prefix_2 = (Prefix ++ ", "),
            Prefix_3 = Prefix_2;
        _ -> Prefix_3 = Prefix
    end,
            Prefix_4 = (Prefix_3 ++ lists:nth(I + 1, Items)),
            Fun_loop(I_rest, Items, N, Prefix_4)
        catch
            {continue, C0, C1, C2} -> Fun_loop(I_rest, C0, C1, C2);
            {break, B0, B1, B2} -> {B0, B1, B2};
            break -> {Items, N, Prefix}
        end
    end
end,
{Items, N, Prefix_4} = Fun(lists:seq(0, ((N - 1)) - 1), Items, N, Prefix),
            throw({return, (((("{" ++ Prefix_4) ++ " and ") ++ lists:nth((N - 1) + 1, Items)) ++ "}")}),
            Fun_2 = Fun,
            Prefix_5 = Prefix_4
    end,
            Fun_3 = Fun_2,
            Prefix_6 = Prefix_5
    end,
            Fun_4 = Fun_3,
            Prefix_7 = Prefix_6
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~p~n", [quibble([])]),
        io:format("~p~n", [quibble(["ABC"])]),
        io:format("~p~n", [quibble(["ABC", "DEF"])]),
        io:format("~p~n", [quibble(["ABC", "DEF", "G", "H"])]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
