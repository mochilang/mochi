#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrtapprox/1, cholesky/1, printmat/1, demo/1]).

% Generated by Mochi transpiler v0.10.41 (cccd67ba44) on 2025-07-26 23:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

sqrtapprox(X) ->
    try
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = ((Guess + (X / Guess)) / 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

cholesky(A) ->
    try
        N = length(A),
        L = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(A, I_3, L, N) ->
    case (I_3 < N) of
        true ->
            Row = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(A, I_3, J, L, N, Row) ->
    case (J < N) of
        true ->
            Row_2 = lists:append(Row, [0]),
            J_2 = (J + 1),
            Fun_2_loop(A, I_3, J_2, L, N, Row_2);
        _ -> {A, I_3, J, L, N, Row}
    end
end,
{A, I_3, J_2, L, N, Row_2} = Fun_2(A, I_3, J, L, N, Row),
            L_2 = lists:append(L, [Row_2]),
            I_4 = (I_3 + 1),
            Fun_3_loop(A, I_4, L_2, N);
        _ -> {A, I_3, L, N}
    end
end,
{A, I_4, L_2, N} = Fun_3(A, I_3, L, N),
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(A, I_5, L_2, N) ->
    case (I_5 < N) of
        true ->
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(A, I_5, J_3, L_2, N) ->
    case (J_3 =< I_5) of
        true ->
            Sum = lists:nth(J_3 + 1, lists:nth(I_5 + 1, A)),
            K = 0,
            Fun_4 = fun Fun_4_loop(A, I_5, J_3, K, L_2, N, Sum) ->
    case (K < J_3) of
        true ->
            Sum_2 = (Sum - (lists:nth(K + 1, lists:nth(I_5 + 1, L_2)) * lists:nth(K + 1, lists:nth(J_3 + 1, L_2)))),
            K_2 = (K + 1),
            Fun_4_loop(A, I_5, J_3, K_2, L_2, N, Sum_2);
        _ -> {A, I_5, J_3, K, L_2, N, Sum}
    end
end,
{A, I_5, J_3, K_2, L_2, N, Sum_2} = Fun_4(A, I_5, J_3, K, L_2, N, Sum),
            case (I_5 == J_3) of
        true -> Tmp = lists:nth(I_5 + 1, L_2),
            Tmp_2 = lists:sublist(Tmp, J_3) ++ [sqrtapprox(Sum_2)] ++ lists:nthtail(J_3 + 1, Tmp),
            L_3 = lists:sublist(L_2, I_5) ++ [Tmp_2] ++ lists:nthtail(I_5 + 1, L_2),
            L_5 = L_3,
            Tmp_5 = Tmp_2;
        _ -> Tmp_3 = lists:nth(I_5 + 1, L_2),
            Tmp_4 = lists:sublist(Tmp_3, J_3) ++ [(Sum_2 / lists:nth(J_3 + 1, lists:nth(J_3 + 1, L_2)))] ++ lists:nthtail(J_3 + 1, Tmp_3),
            L_4 = lists:sublist(L_2, I_5) ++ [Tmp_4] ++ lists:nthtail(I_5 + 1, L_2),
            L_5 = L_4,
            Tmp_5 = Tmp_4
    end,
            J_4 = (J_3 + 1),
            Fun_5_loop(A, I_5, J_4, L_5, N);
        _ -> {A, I_5, J_3, L_2, N}
    end
end,
{A, I_5, J_4, L_5, N} = Fun_5(A, I_5, J_3, L_2, N),
            I_6 = (I_5 + 1),
            Fun_6_loop(A, I_6, L_5, N);
        _ -> {A, I_5, L_2, N}
    end
end,
{A, I_6, L_5, N} = Fun_6(A, I_5, L_2, N),
        L_5
    catch {return, Ret} -> Ret end.

printmat(M) ->
    try
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(I_7, M) ->
    case (I_7 < length(M)) of
        true ->
            Line = "",
            J_5 = 0,
            Fun_7 = fun Fun_7_loop(I_7, J_5, Line, M) ->
    case (J_5 < length(lists:nth(I_7 + 1, M))) of
        true ->
            Line_2 = (Line ++ lists:flatten(io_lib:format("~p", [lists:nth(J_5 + 1, lists:nth(I_7 + 1, M))]))),
            case (J_5 < (length(lists:nth(I_7 + 1, M)) - 1)) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            J_6 = (J_5 + 1),
            Fun_7_loop(I_7, J_6, Line_4, M);
        _ -> {I_7, J_5, Line, M}
    end
end,
{I_7, J_6, Line_4, M} = Fun_7(I_7, J_5, Line, M),
            io:format("~ts~n", [Line_4]),
            I_8 = (I_7 + 1),
            Fun_8_loop(I_8, M);
        _ -> {I_7, M}
    end
end,
{I_8, M} = Fun_8(I_7, M),
        nil
    catch {return, Ret} -> Ret end.

demo(A_2) ->
    try
        io:format("~ts~n", ["A:"]),
        printmat(A_2),
        L_6 = cholesky(A_2),
        io:format("~ts~n", ["L:"]),
        printmat(L_6),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    demo([[25, 15, -5], [15, 18, 0], [-5, 0, 11]]),
    demo([[18, 22, 54, 42], [22, 70, 86, 62], [54, 86, 174, 134], [42, 62, 134, 106]]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
