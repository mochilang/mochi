#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ccw/3, sortpoints/1, convexhull/1, pointstr/1, hullstr/1]).

% Generated by Mochi transpiler v0.10.41 (4e0e7fcd7f) on 2025-07-26 23:05 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

ccw(A, B, C) ->
    try
        Lhs = ((maps:get("x", B, nil) - maps:get("x", A, nil)) * (maps:get("y", C, nil) - maps:get("y", A, nil))),
        Rhs = ((maps:get("y", B, nil) - maps:get("y", A, nil)) * (maps:get("x", C, nil) - maps:get("x", A, nil))),
        (Lhs > Rhs)
    catch {return, Ret} -> Ret end.

sortpoints(Ps) ->
    try
        Arr = Ps,
        N = length(Arr),
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, I, N, Ps) ->
    case (I < N) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Arr, I, J, N, Ps) ->
    case (J < (N - 1)) of
        true ->
            P = lists:nth(J + 1, Arr),
            Q = lists:nth((J + 1) + 1, Arr),
            case ((maps:get("x", P, nil) > maps:get("x", Q, nil)) orelse ((maps:get("x", P, nil) == maps:get("x", Q, nil)) andalso (maps:get("y", P, nil) > maps:get("y", Q, nil)))) of
        true -> Arr_2 = lists:sublist(Arr, J) ++ [Q] ++ lists:nthtail(J + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (J + 1)) ++ [P] ++ lists:nthtail((J + 1) + 1, Arr_2),
            Arr_4 = Arr_3;
        _ -> Arr_4 = Arr
    end,
            J_2 = (J + 1),
            Fun_loop(Arr_4, I, J_2, N, Ps);
        _ -> {Arr, I, J, N, Ps}
    end
end,
{Arr_4, I, J_2, N, Ps} = Fun(Arr, I, J, N, Ps),
            I_2 = (I + 1),
            Fun_2_loop(Arr_4, I_2, N, Ps);
        _ -> {Arr, I, N, Ps}
    end
end,
{Arr_4, I_2, N, Ps} = Fun_2(Arr, I, N, Ps),
        Arr_4
    catch {return, Ret} -> Ret end.

convexhull(Ps_2) ->
    try
        Ps_3 = sortpoints(Ps_2),
        H = [],
        Fun_3 = fun Fun_3_loop(List, H, Ps_3) ->
    case List of
        [] -> {H, Ps_3};
        [Pt|Pt_rest] ->
            Fun_4 = fun Fun_4_loop(H, Ps_3, Pt) ->
    case ((length(H) >= 2) andalso (ccw(lists:nth((length(H) - 2) + 1, H), lists:nth((length(H) - 1) + 1, H), Pt) == false)) of
        true ->
            H_2 = lists:sublist(H, 1, ((length(H) - 1) - 0)),
            Fun_4_loop(H_2, Ps_3, Pt);
        _ -> {H, Ps_3, Pt}
    end
end,
{H_2, Ps_3, Pt} = Fun_4(H, Ps_3, Pt),
            H_3 = lists:append(H_2, [Pt]),
            Fun_3_loop(Pt_rest, H_3, Ps_3)
    end
end,
{H_3, Ps_3} = Fun_3(Ps_3, H, Ps_3),
        I_3 = (length(Ps_3) - 2),
        T = (length(H_3) + 1),
        Fun_6 = fun Fun_6_loop(H_3, I_3, Ps_3, T) ->
    case (I_3 >= 0) of
        true ->
            Pt_2 = lists:nth(I_3 + 1, Ps_3),
            Fun_5 = fun Fun_5_loop(H_3, I_3, Ps_3, Pt_2, T) ->
    case ((length(H_3) >= T) andalso (ccw(lists:nth((length(H_3) - 2) + 1, H_3), lists:nth((length(H_3) - 1) + 1, H_3), Pt_2) == false)) of
        true ->
            H_4 = lists:sublist(H_3, 1, ((length(H_3) - 1) - 0)),
            Fun_5_loop(H_4, I_3, Ps_3, Pt_2, T);
        _ -> {H_3, I_3, Ps_3, Pt_2, T}
    end
end,
{H_4, I_3, Ps_3, Pt_2, T} = Fun_5(H_3, I_3, Ps_3, Pt_2, T),
            H_5 = lists:append(H_4, [Pt_2]),
            I_4 = (I_3 - 1),
            Fun_6_loop(H_5, I_4, Ps_3, T);
        _ -> {H_3, I_3, Ps_3, T}
    end
end,
{H_5, I_4, Ps_3, T} = Fun_6(H_3, I_3, Ps_3, T),
        lists:sublist(H_5, 1, ((length(H_5) - 1) - 0))
    catch {return, Ret} -> Ret end.

pointstr(P_2) ->
    try
        (((("(" ++ lists:flatten(io_lib:format("~p", [maps:get("x", P_2, nil)]))) ++ ",") ++ lists:flatten(io_lib:format("~p", [maps:get("y", P_2, nil)]))) ++ ")")
    catch {return, Ret} -> Ret end.

hullstr(H_6) ->
    try
        S = "[",
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(H_6, I_5, S) ->
    case (I_5 < length(H_6)) of
        true ->
            S_2 = (S ++ pointstr(lists:nth(I_5 + 1, H_6))),
            case (I_5 < (length(H_6) - 1)) of
        true -> S_3 = (S_2 ++ " "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_6 = (I_5 + 1),
            Fun_7_loop(H_6, I_6, S_4);
        _ -> {H_6, I_5, S}
    end
end,
{H_6, I_6, S_4} = Fun_7(H_6, I_5, S),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('pts', [#{"x" => 16, "y" => 3}, #{"x" => 12, "y" => 17}, #{"x" => 0, "y" => 6}, #{"x" => -4, "y" => -6}, #{"x" => 16, "y" => 6}, #{"x" => 16, "y" => -7}, #{"x" => 16, "y" => -3}, #{"x" => 17, "y" => -4}, #{"x" => 5, "y" => 19}, #{"x" => 19, "y" => -8}, #{"x" => 3, "y" => 16}, #{"x" => 12, "y" => 13}, #{"x" => 3, "y" => -4}, #{"x" => 17, "y" => 5}, #{"x" => -3, "y" => 15}, #{"x" => -3, "y" => -9}, #{"x" => 0, "y" => 11}, #{"x" => -9, "y" => -3}, #{"x" => -4, "y" => -2}, #{"x" => 12, "y" => 10}]),
    erlang:put('hull', convexhull(erlang:get('pts'))),
    io:format("~ts~n", [("Convex Hull: " ++ hullstr(erlang:get('hull')))]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
