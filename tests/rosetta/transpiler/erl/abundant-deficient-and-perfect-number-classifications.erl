#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pfacSum/1, main/0]).

% Generated by Mochi transpiler v0.10.38 (0a4e3506ef) on 2025-07-23 20:13 +0700

pfacSum(I) ->
    try
        Sum = 0,
        P = 1,
        Fun = fun Fun_loop(I, P, Sum) ->
    case (P =< (I div 2)) of
        true ->
            try
                case ((I rem P) == 0) of
        true -> Sum2 = (Sum + P),
            Sum3 = Sum2;
        _ -> Sum3 = Sum
    end,
                P2 = (P + 1),
                Fun_loop(I, P2, Sum3)
            catch
                break -> {I, P, Sum}
            end;
        _ -> {I, P, Sum}
    end
end,
{I, P2, Sum3} = Fun(I, P, Sum),
        Sum3
    catch {return, V} -> V end.

main() ->
    try
        D = 0,
        A = 0,
        Pnum = 0,
        I2 = 1,
        Fun2 = fun Fun2_loop(A, D, I2, Pnum) ->
    case (I2 =< 20000) of
        true ->
            try
                J = pfacSum(I2),
                case (J < I2) of
        true -> D2 = (D + 1),
            D3 = D2;
        _ -> D3 = D
    end,
                case (J == I2) of
        true -> Pnum2 = (Pnum + 1),
            Pnum3 = Pnum2;
        _ -> Pnum3 = Pnum
    end,
                case (J > I2) of
        true -> A2 = (A + 1),
            A3 = A2;
        _ -> A3 = A
    end,
                I3 = (I2 + 1),
                Fun2_loop(A3, D3, I3, Pnum3)
            catch
                break -> {A, D, I2, Pnum}
            end;
        _ -> {A, D, I2, Pnum}
    end
end,
{A3, D3, I3, Pnum3} = Fun2(A, D, I2, Pnum),
        io:format("~ts~n", [(("There are " ++ lists:flatten(io_lib:format("~p", [D3]))) ++ " deficient numbers between 1 and 20000")]),
        io:format("~ts~n", [(("There are " ++ lists:flatten(io_lib:format("~p", [A3]))) ++ " abundant numbers  between 1 and 20000")]),
        io:format("~ts~n", [(("There are " ++ lists:flatten(io_lib:format("~p", [Pnum3]))) ++ " perfect numbers between 1 and 20000")]),
        nil
    catch {return, V} -> V end.

main(_) ->
    main().
