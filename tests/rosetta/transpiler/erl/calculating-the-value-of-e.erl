#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, absf/1, pow10/1, formatfloat/2]).

% Generated by Mochi transpiler v0.10.55 (b43d15e5bc) on 2025-08-03 11:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

absf(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

pow10(N) ->
    try
        R = 1,
        I = 0,
        Fun = fun Fun_loop(I, N, R) ->
    case (I < N) of
        true ->
            R_2 = mochi_safe_mul(R, 10),
            I_2 = (I + 1),
            Fun_loop(I_2, N, R_2);
        _ -> {I, N, R}
    end
end,
{I_2, N, R_2} = Fun(I, N, R),
        R_2
    catch {return, Ret} -> Ret end.

formatfloat(F, Prec) ->
    try
        Scale = pow10(Prec),
        Scaled = (mochi_safe_mul(F, Scale) + 0.5),
        N_2 = mochi_to_int(Scaled),
        Digits = lists:flatten(io_lib:format("~p", [N_2])),
        Fun_2 = fun Fun_2_loop(Digits, F, N_2, Prec, Scale, Scaled) ->
    case (length(Digits) =< Prec) of
        true ->
            Digits_2 = ("0" ++ Digits),
            Fun_2_loop(Digits_2, F, N_2, Prec, Scale, Scaled);
        _ -> {Digits, F, N_2, Prec, Scale, Scaled}
    end
end,
{Digits_2, F, N_2, Prec, Scale, Scaled} = Fun_2(Digits, F, N_2, Prec, Scale, Scaled),
        IntPart = string:substr(Digits_2, 0 + 1, ((length(Digits_2) - Prec) - 0)),
        FracPart = string:substr(Digits_2, (length(Digits_2) - Prec) + 1, (length(Digits_2) - (length(Digits_2) - Prec))),
        ((IntPart ++ ".") ++ FracPart)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('epsilon', 1.0e-15),
    erlang:put('factval', 1),
    erlang:put('e', 2),
    erlang:put('n', 2),
    erlang:put('term', 1),
    Fun_3 = fun Fun_3_loop() ->
    case true of
        true ->
            try
                erlang:put('factval', (erlang:get('factval') * erlang:get('n'))),
                erlang:put('n', (erlang:get('n') + 1)),
                erlang:put('term', mochi_safe_div(1, float(erlang:get('factval')))),
                erlang:put('e', (erlang:get('e') + erlang:get('term'))),
                case (absf(erlang:get('term')) < 1.0e-15) of
        true -> throw(break);
        _ -> ok
    end,
                Fun_3_loop()
            catch
                {continue} -> Fun_3_loop();
                break -> {}
            end;
        _ -> {}
    end
end,
{} = Fun_3(),
    io:format("~ts~n", [("e = " ++ formatfloat(erlang:get('e'), 15))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
