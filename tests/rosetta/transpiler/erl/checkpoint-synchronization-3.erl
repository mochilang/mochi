#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, lower/1]).

% Generated by Mochi transpiler v0.10.41 (cccd67ba44) on 2025-07-26 23:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

lower(Ch) ->
    try
        Up = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Low = "abcdefghijklmnopqrstuvwxyz",
        I = 0,
        Fun = fun Fun_loop(Ch, I, Low, Up) ->
    case (I < length(Up)) of
        true ->
            case (Ch == string:substr(Up, I + 1, ((I + 1) - I))) of
        true -> throw({return, string:substr(Low, I + 1, ((I + 1) - I))});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, Low, Up);
        _ -> {Ch, I, Low, Up}
    end
end,
{Ch, I_2, Low, Up} = Fun(Ch, I, Low, Up),
        Ch
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('partList', ["A", "B", "C", "D"]),
    erlang:put('nAssemblies', 3),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [P|P_rest] ->
            io:format("~ts~n", [(P ++ " worker running")]),
            Fun_2_loop(P_rest)
    end
end,
{} = Fun_2(erlang:get('partList')),
    Fun_3 = fun Fun_3_loop(List) ->
    case List of
        [] -> {};
        [Cycle|Cycle_rest] ->
            io:format("~ts~n", [("begin assembly cycle " ++ lists:flatten(io_lib:format("~p", [Cycle])))]),
            A = "",
            Fun_4 = fun Fun_4_loop(List, A, Cycle) ->
    case List of
        [] -> {A, Cycle};
        [P_2|P_2_rest] ->
            io:format("~ts~n", [(P_2 ++ " worker begins part")]),
            io:format("~ts~n", [((P_2 ++ " worker completed ") ++ string:to_lower(P_2))]),
            A_2 = (A ++ string:to_lower(P_2)),
            Fun_4_loop(P_2_rest, A_2, Cycle)
    end
end,
{A_2, Cycle} = Fun_4(erlang:get('partList'), A, Cycle),
            io:format("~ts~n", [(((A_2 ++ " assembled.  cycle ") ++ lists:flatten(io_lib:format("~p", [Cycle]))) ++ " complete")]),
            Fun_3_loop(Cycle_rest)
    end
end,
{} = Fun_3(lists:seq(1, ((erlang:get('nAssemblies') + 1)) - 1)),
    Fun_5 = fun Fun_5_loop(List) ->
    case List of
        [] -> {};
        [P_3|P_3_rest] ->
            io:format("~ts~n", [(P_3 ++ " worker stopped")]),
            Fun_5_loop(P_3_rest)
    end
end,
{} = Fun_5(erlang:get('partList')),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
