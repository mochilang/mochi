#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow10/1, formatfloat/2, padleft/2, averagesquarediff/2, diversitytheorem/2, main/0]).

% Generated by Mochi transpiler v0.10.42 (b3f99e79fa) on 2025-07-28 08:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

pow10(N) ->
    try
        R = 1,
        I = 0,
        Fun = fun Fun_loop(I, N, R) ->
    case (I < N) of
        true ->
            R_2 = (R * 10),
            I_2 = (I + 1),
            Fun_loop(I_2, N, R_2);
        _ -> {I, N, R}
    end
end,
{I_2, N, R_2} = Fun(I, N, R),
        R_2
    catch {return, Ret} -> Ret end.

formatfloat(F, Prec) ->
    try
        Scale = pow10(Prec),
        Scaled = ((F * Scale) + 0.5),
        N_2 = mochi_to_int(Scaled),
        Digits = lists:flatten(io_lib:format("~p", [N_2])),
        Fun_2 = fun Fun_2_loop(Digits, F, N_2, Prec, Scale, Scaled) ->
    case (length(Digits) =< Prec) of
        true ->
            Digits_2 = ("0" ++ Digits),
            Fun_2_loop(Digits_2, F, N_2, Prec, Scale, Scaled);
        _ -> {Digits, F, N_2, Prec, Scale, Scaled}
    end
end,
{Digits_2, F, N_2, Prec, Scale, Scaled} = Fun_2(Digits, F, N_2, Prec, Scale, Scaled),
        IntPart = string:substr(Digits_2, 0 + 1, ((length(Digits_2) - Prec) - 0)),
        FracPart = string:substr(Digits_2, (length(Digits_2) - Prec) + 1, (length(Digits_2) - (length(Digits_2) - Prec))),
        ((IntPart ++ ".") ++ FracPart)
    catch {return, Ret} -> Ret end.

padleft(S, W) ->
    try
        Res = "",
        N_3 = (W - length(S)),
        Fun_3 = fun Fun_3_loop(N_3, Res, S, W) ->
    case (N_3 > 0) of
        true ->
            Res_2 = (Res ++ " "),
            N_4 = (N_3 - 1),
            Fun_3_loop(N_4, Res_2, S, W);
        _ -> {N_3, Res, S, W}
    end
end,
{N_4, Res_2, S, W} = Fun_3(N_3, Res, S, W),
        (Res_2 ++ S)
    catch {return, Ret} -> Ret end.

averagesquarediff(F_2, Preds) ->
    try
        Av = 0,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Av, F_2, I_3, Preds) ->
    case (I_3 < length(Preds)) of
        true ->
            Av_2 = (Av + ((lists:nth(I_3 + 1, Preds) - F_2) * (lists:nth(I_3 + 1, Preds) - F_2))),
            I_4 = (I_3 + 1),
            Fun_4_loop(Av_2, F_2, I_4, Preds);
        _ -> {Av, F_2, I_3, Preds}
    end
end,
{Av_2, F_2, I_4, Preds} = Fun_4(Av, F_2, I_3, Preds),
        Av_3 = (Av_2 / float(length(Preds))),
        Av_3
    catch {return, Ret} -> Ret end.

diversitytheorem(Truth, Preds_2) ->
    try
        Av_4 = 0,
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Av_4, I_5, Preds_2, Truth) ->
    case (I_5 < length(Preds_2)) of
        true ->
            Av_5 = (Av_4 + lists:nth(I_5 + 1, Preds_2)),
            I_6 = (I_5 + 1),
            Fun_5_loop(Av_5, I_6, Preds_2, Truth);
        _ -> {Av_4, I_5, Preds_2, Truth}
    end
end,
{Av_5, I_6, Preds_2, Truth} = Fun_5(Av_4, I_5, Preds_2, Truth),
        Av_6 = (Av_5 / float(length(Preds_2))),
        AvErr = averagesquarediff(Truth, Preds_2),
        CrowdErr = ((Truth - Av_6) * (Truth - Av_6)),
        Div = averagesquarediff(Av_6, Preds_2),
        [AvErr, CrowdErr, Div]
    catch {return, Ret} -> Ret end.

main() ->
    try
        PredsArray = [[48, 47, 51], [48, 47, 51, 42]],
        Truth_2 = 49,
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, PredsArray, Truth_2) ->
    case (I_7 < length(PredsArray)) of
        true ->
            Preds_3 = lists:nth(I_7 + 1, PredsArray),
            Res_3 = diversitytheorem(Truth_2, Preds_3),
            io:format("~ts~n", [("Average-error : " ++ padleft(formatfloat(lists:nth(0 + 1, Res_3), 3), 6))]),
            io:format("~ts~n", [("Crowd-error   : " ++ padleft(formatfloat(lists:nth(1 + 1, Res_3), 3), 6))]),
            io:format("~ts~n", [("Diversity     : " ++ padleft(formatfloat(lists:nth(2 + 1, Res_3), 3), 6))]),
            io:format("~ts~n", [""]),
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, PredsArray, Truth_2);
        _ -> {I_7, PredsArray, Truth_2}
    end
end,
{I_8, PredsArray, Truth_2} = Fun_6(I_7, PredsArray, Truth_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
