#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bubblesort/1]).

% Generated by Mochi transpiler v0.10.55 (1cbd612b6e) on 2025-08-02 20:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

bubblesort(A) ->
    try
        Arr = A,
        ItemCount = (length(Arr) - 1),
        Fun_2 = fun Fun_2_loop(A, Arr, ItemCount) ->
    case true of
        true ->
            try
                HasChanged = false,
                Index = 0,
                Fun = fun Fun_loop(A, Arr, HasChanged, Index, ItemCount) ->
    case (Index < ItemCount) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(Index, Arr, nil); _ -> lists:nth(Index + 1, Arr) end) > (case erlang:is_map(Arr) of true -> maps:get((Index + 1), Arr, nil); _ -> lists:nth((Index + 1) + 1, Arr) end)) of
        true -> Tmp = (case erlang:is_map(Arr) of true -> maps:get(Index, Arr, nil); _ -> lists:nth(Index + 1, Arr) end),
            Arr_2 = lists:sublist(Arr, Index) ++ [(case erlang:is_map(Arr) of true -> maps:get((Index + 1), Arr, nil); _ -> lists:nth((Index + 1) + 1, Arr) end)] ++ lists:nthtail(Index + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (Index + 1)) ++ [Tmp] ++ lists:nthtail((Index + 1) + 1, Arr_2),
            HasChanged_2 = true,
            Arr_4 = Arr_3,
            HasChanged_3 = HasChanged_2,
            Tmp_2 = Tmp;
        _ -> Arr_4 = Arr,
            HasChanged_3 = HasChanged,
            Tmp_2 = nil
    end,
            Index_2 = (Index + 1),
            Fun_loop(A, Arr_4, HasChanged_3, Index_2, ItemCount);
        _ -> {A, Arr, HasChanged, Index, ItemCount}
    end
end,
{A, Arr_4, HasChanged_3, Index_2, ItemCount} = Fun(A, Arr, HasChanged, Index, ItemCount),
                case mochi_not(HasChanged_3) of
        true -> throw(break);
        _ -> ok
    end,
                ItemCount_2 = (ItemCount - 1),
                Fun_2_loop(A, Arr_4, ItemCount_2)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                break -> {A, Arr, ItemCount}
            end;
        _ -> {A, Arr, ItemCount}
    end
end,
{A, Arr_4, ItemCount_2} = Fun_2(A, Arr, ItemCount),
        Arr_4
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('list', [31, 41, 59, 26, 53, 58, 97, 93, 23, 84]),
    io:format("~ts~n", [("unsorted: " ++ lists:flatten(io_lib:format("~p", [erlang:get('list')])))]),
    erlang:put('list', bubblesort(erlang:get('list'))),
    io:format("~ts~n", [("sorted!  " ++ lists:flatten(io_lib:format("~p", [erlang:get('list')])))]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
