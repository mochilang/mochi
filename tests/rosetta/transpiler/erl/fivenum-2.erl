#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, qsel/2, fivenum/1]).

% Generated by Mochi transpiler v0.10.55 (0f7fd10226) on 2025-08-02 20:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

qsel(A, K) ->
    try
        Arr = A,
        Fun_2 = fun Fun_2_loop(A, Arr, K) ->
    case (length(Arr) > 1) of
        true ->
            Px = (mochi_now() rem length(Arr)),
            Pv = (case erlang:is_map(Arr) of true -> maps:get(Px, Arr, nil); _ -> lists:nth(Px + 1, Arr) end),
            Last = (length(Arr) - 1),
            Tmp = (case erlang:is_map(Arr) of true -> maps:get(Px, Arr, nil); _ -> lists:nth(Px + 1, Arr) end),
            Arr_2 = lists:sublist(Arr, Px) ++ [(case erlang:is_map(Arr) of true -> maps:get(Last, Arr, nil); _ -> lists:nth(Last + 1, Arr) end)] ++ lists:nthtail(Px + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, Last) ++ [Tmp] ++ lists:nthtail(Last + 1, Arr_2),
            Px_2 = 0,
            I = 0,
            Fun = fun Fun_loop(A, Arr_3, I, K, Last, Pv, Px_2, Tmp) ->
    case (I < Last) of
        true ->
            V = (case erlang:is_map(Arr_3) of true -> maps:get(I, Arr_3, nil); _ -> lists:nth(I + 1, Arr_3) end),
            case (V < Pv) of
        true -> T = (case erlang:is_map(Arr_3) of true -> maps:get(Px_2, Arr_3, nil); _ -> lists:nth(Px_2 + 1, Arr_3) end),
            Arr_4 = lists:sublist(Arr_3, Px_2) ++ [(case erlang:is_map(Arr_3) of true -> maps:get(I, Arr_3, nil); _ -> lists:nth(I + 1, Arr_3) end)] ++ lists:nthtail(Px_2 + 1, Arr_3),
            Arr_5 = lists:sublist(Arr_4, I) ++ [T] ++ lists:nthtail(I + 1, Arr_4),
            Px_3 = (Px_2 + 1),
            Arr_6 = Arr_5,
            Px_4 = Px_3,
            T_2 = T;
        _ -> Arr_6 = Arr_3,
            Px_4 = Px_2,
            T_2 = nil
    end,
            I_2 = (I + 1),
            Fun_loop(A, Arr_6, I_2, K, Last, Pv, Px_4, Tmp);
        _ -> {A, Arr_3, I, K, Last, Pv, Px_2, Tmp}
    end
end,
{A, Arr_6, I_2, K, Last, Pv, Px_4, Tmp} = Fun(A, Arr_3, I, K, Last, Pv, Px_2, Tmp),
            Arr_7 = lists:sublist(Arr_6, Px_4) ++ [Pv] ++ lists:nthtail(Px_4 + 1, Arr_6),
            case (Px_4 == K) of
        true -> throw({return, Pv});
        _ -> ok
    end,
            case (K < Px_4) of
        true -> Arr_8 = lists:sublist(Arr_7, 0 + 1, (Px_4 - 0)),
            Arr_10 = Arr_8,
            K_3 = K;
        _ -> Arr_9 = lists:sublist(Arr_7, (Px_4 + 1) + 1, length(Arr_7) - (Px_4 + 1)),
            K_2 = (K - (Px_4 + 1)),
            Arr_10 = Arr_9,
            K_3 = K_2
    end,
            Fun_2_loop(A, Arr_10, K_3);
        _ -> {A, Arr, K}
    end
end,
{A, Arr_10, K_3} = Fun_2(A, Arr, K),
        (case erlang:is_map(Arr_10) of true -> maps:get(0, Arr_10, nil); _ -> lists:nth(0 + 1, Arr_10) end)
    catch {return, Ret} -> Ret end.

fivenum(A_2) ->
    try
        Last_2 = (length(A_2) - 1),
        M = (Last_2 div 2),
        N5 = [],
        N5_2 = lists:append(N5, [qsel(lists:sublist(A_2, 0 + 1, (M - 0)), 0)]),
        N5_3 = lists:append(N5_2, [qsel(lists:sublist(A_2, 0 + 1, (M - 0)), (length(A_2) div 4))]),
        N5_4 = lists:append(N5_3, [qsel(A_2, M)]),
        Arr2 = lists:sublist(A_2, M + 1, length(A_2) - M),
        Q3 = ((Last_2 - M) - (length(A_2) div 4)),
        N5_5 = lists:append(N5_4, [qsel(Arr2, Q3)]),
        Arr2_2 = lists:sublist(Arr2, Q3 + 1, length(Arr2) - Q3),
        N5_6 = lists:append(N5_5, [qsel(Arr2_2, (length(Arr2_2) - 1))]),
        N5_6
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('x1', [36, 40, 7, 39, 41, 15]),
    erlang:put('x2', [15, 6, 42, 41, 7, 36, 49, 40, 39, 47, 43]),
    erlang:put('x3', [0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [fivenum(erlang:get('x1'))]))]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [fivenum(erlang:get('x2'))]))]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [fivenum(erlang:get('x3'))]))]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
