#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, zero/0, iszero/1, neg/1, dbl/1, add/2, mul/2, cbrtapprox/1, fromy/1, show/2, main/0]).

% Generated by Mochi transpiler v0.10.54 (305a5d9113) on 2025-08-02 11:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

zero() ->
    try
        #{"x" => 0, "y" => 0, "inf" => true}
    catch {return, Ret} -> Ret end.

iszero(P) ->
    try
        maps:get("inf", P, nil)
    catch {return, Ret} -> Ret end.

neg(P_2) ->
    try
        #{"x" => maps:get("x", P_2, nil), "y" => -maps:get("y", P_2, nil), "inf" => maps:get("inf", P_2, nil)}
    catch {return, Ret} -> Ret end.

dbl(P_3) ->
    try
        case (iszero(P_3) /= nil) of
        true -> throw({return, P_3});
        _ -> ok
    end,
        L = (((3 * maps:get("x", P_3, nil)) * maps:get("x", P_3, nil)) / (2 * maps:get("y", P_3, nil))),
        X = ((L * L) - (2 * maps:get("x", P_3, nil))),
        #{"x" => X, "y" => ((L * (maps:get("x", P_3, nil) - X)) - maps:get("y", P_3, nil)), "inf" => false}
    catch {return, Ret} -> Ret end.

add(P_4, Q) ->
    try
        case (iszero(P_4) /= nil) of
        true -> throw({return, Q});
        _ -> ok
    end,
        case (iszero(Q) /= nil) of
        true -> throw({return, P_4});
        _ -> ok
    end,
        case (maps:get("x", P_4, nil) == maps:get("x", Q, nil)) of
        true -> case (maps:get("y", P_4, nil) == maps:get("y", Q, nil)) of
        true -> throw({return, dbl(P_4)});
        _ -> ok
    end,
            throw({return, zero()});
        _ -> ok
    end,
        L_2 = ((maps:get("y", Q, nil) - maps:get("y", P_4, nil)) / (maps:get("x", Q, nil) - maps:get("x", P_4, nil))),
        X_2 = (((L_2 * L_2) - maps:get("x", P_4, nil)) - maps:get("x", Q, nil)),
        #{"x" => X_2, "y" => ((L_2 * (maps:get("x", P_4, nil) - X_2)) - maps:get("y", P_4, nil)), "inf" => false}
    catch {return, Ret} -> Ret end.

mul(P_5, N) ->
    try
        R = zero(),
        Q_2 = P_5,
        K = N,
        Fun = fun Fun_loop(K, N, P_5, Q_2, R) ->
    case (K > 0) of
        true ->
            case ((K rem 2) == 1) of
        true -> R_2 = add(R, Q_2),
            R_3 = R_2;
        _ -> R_3 = R
    end,
            Q_3 = dbl(Q_2),
            K_2 = (K div 2),
            Fun_loop(K_2, N, P_5, Q_3, R_3);
        _ -> {K, N, P_5, Q_2, R}
    end
end,
{K_2, N, P_5, Q_3, R_3} = Fun(K, N, P_5, Q_2, R),
        R_3
    catch {return, Ret} -> Ret end.

cbrtapprox(X_3) ->
    try
        Guess = X_3,
        I = 0,
        Fun_2 = fun Fun_2_loop(Guess, I, X_3) ->
    case (I < 40) of
        true ->
            Guess_2 = (((2 * Guess) + (X_3 / (Guess * Guess))) / 3),
            I_2 = (I + 1),
            Fun_2_loop(Guess_2, I_2, X_3);
        _ -> {Guess, I, X_3}
    end
end,
{Guess_2, I_2, X_3} = Fun_2(Guess, I, X_3),
        Guess_2
    catch {return, Ret} -> Ret end.

fromy(Y) ->
    try
        #{"x" => cbrtapprox(((Y * Y) - 7)), "y" => Y, "inf" => false}
    catch {return, Ret} -> Ret end.

show(S, P_6) ->
    try
        case (iszero(P_6) /= nil) of
        true -> io:format("~ts~n", [(S ++ "Zero")]);
        _ -> io:format("~ts~n", [(((((S ++ "(") ++ lists:flatten(io_lib:format("~p", [maps:get("x", P_6, nil)]))) ++ ", ") ++ lists:flatten(io_lib:format("~p", [maps:get("y", P_6, nil)]))) ++ ")")])
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        A = fromy(1),
        B = fromy(2),
        show("a = ", A),
        show("b = ", B),
        C = add(A, B),
        show("c = a + b = ", C),
        D = neg(C),
        show("d = -c = ", D),
        show("c + d = ", add(C, D)),
        show("a + b + d = ", add(A, add(B, D))),
        show("a * 12345 = ", mul(A, 12345)),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('bCoeff', 7),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
