#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('c', ((((("Character,Speech\n" ++ "The multitude,The messiah! Show us the messiah!\n") ++ "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n") ++ "The multitude,Who are you?\n") ++ "Brians mother,I'm his mother; that's who!\n") ++ "The multitude,Behold his mother! Behold his mother!")),
    erlang:put('rows', []),
    Fun = fun Fun_loop(List) ->
    case List of
        [] -> {};
        [Line|Line_rest] ->
            erlang:put('rows', lists:append(erlang:get('rows'), [string:tokens(Line, ",")])),
            Fun_loop(Line_rest)
    end
end,
{} = Fun(string:tokens(erlang:get('c'), "\n")),
    erlang:put('headings', true),
    io:format("~ts~n", ["<table>"]),
    case true of
        true -> case (length(erlang:get('rows')) > 0) of
        true -> Th = "",
            Fun_2 = fun Fun_2_loop(List, Th) ->
    case List of
        [] -> {Th};
        [H|H_rest] ->
            Th_2 = (((Th ++ "<th>") ++ H) ++ "</th>"),
            Fun_2_loop(H_rest, Th_2)
    end
end,
{Th_2} = Fun_2(lists:nth(0 + 1, erlang:get('rows')), Th),
            io:format("~ts~n", ["   <thead>"]),
            io:format("~ts~n", [(("      <tr>" ++ Th_2) ++ "</tr>")]),
            io:format("~ts~n", ["   </thead>"]),
            io:format("~ts~n", ["   <tbody>"]),
            I = 1,
            Fun_4 = fun Fun_4_loop(I, Th_2) ->
    case (I < length(erlang:get('rows'))) of
        true ->
            Cells = "",
            Fun_3 = fun Fun_3_loop(List, Cells, I, Th_2) ->
    case List of
        [] -> {Cells, I, Th_2};
        [Cell|Cell_rest] ->
            Cells_2 = (((Cells ++ "<td>") ++ Cell) ++ "</td>"),
            Fun_3_loop(Cell_rest, Cells_2, I, Th_2)
    end
end,
{Cells_2, I, Th_2} = Fun_3(lists:nth(I + 1, erlang:get('rows')), Cells, I, Th_2),
            io:format("~ts~n", [(("      <tr>" ++ Cells_2) ++ "</tr>")]),
            I_2 = (I + 1),
            Fun_4_loop(I_2, Th_2);
        _ -> {I, Th_2}
    end
end,
{I_2, Th_2} = Fun_4(I, Th_2),
            io:format("~ts~n", ["   </tbody>"]),
            Fun_5 = Fun_4,
            I_3 = I_2,
            Th_3 = Th_2;
        _ -> Fun_5 = Fun,
            I_3 = nil,
            Th_3 = nil
    end,
            Fun_8 = Fun_5,
            I_4 = I_3,
            Th_4 = Th_3;
        _ -> Fun_6 = fun Fun_6_loop(List) ->
    case List of
        [] -> {};
        [Row|Row_rest] ->
            Cells_3 = "",
            Fun_7 = fun Fun_7_loop(List, Cells_3, Row) ->
    case List of
        [] -> {Cells_3, Row};
        [Cell_2|Cell_2_rest] ->
            Cells_4 = (((Cells_3 ++ "<td>") ++ Cell_2) ++ "</td>"),
            Fun_7_loop(Cell_2_rest, Cells_4, Row)
    end
end,
{Cells_4, Row} = Fun_7(Row, Cells_3, Row),
            io:format("~ts~n", [(("    <tr>" ++ Cells_4) ++ "</tr>")]),
            Fun_6_loop(Row_rest)
    end
end,
{} = Fun_6(erlang:get('rows')),
            Fun_8 = Fun_6,
            I_4 = nil,
            Th_4 = nil
    end,
    io:format("~ts~n", ["</table>"]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
