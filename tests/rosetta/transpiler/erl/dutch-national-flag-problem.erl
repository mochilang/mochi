#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, liststr/1, ordered/1, outoforder/1, sort3/1, main/0]).

% Generated by Mochi transpiler v0.10.47 (eaacde736f) on 2025-07-28 11:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

liststr(Xs) ->
    try
        S = "[",
        I = 0,
        Fun = fun Fun_loop(I, S, Xs) ->
    case (I < length(Xs)) of
        true ->
            S_2 = (S ++ lists:flatten(io_lib:format("~p", [lists:nth(I + 1, Xs)]))),
            case (I < (length(Xs) - 1)) of
        true -> S_3 = (S_2 ++ " "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, S_4, Xs);
        _ -> {I, S, Xs}
    end
end,
{I_2, S_4, Xs} = Fun(I, S, Xs),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

ordered(Xs_2) ->
    try
        case (length(Xs_2) == 0) of
        true -> throw({return, true});
        _ -> ok
    end,
        Prev = lists:nth(0 + 1, Xs_2),
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, Prev, Xs_2) ->
    case (I_3 < length(Xs_2)) of
        true ->
            case (lists:nth(I_3 + 1, Xs_2) < Prev) of
        true -> throw({return, false});
        _ -> ok
    end,
            Prev_2 = lists:nth(I_3 + 1, Xs_2),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Prev_2, Xs_2);
        _ -> {I_3, Prev, Xs_2}
    end
end,
{I_4, Prev_2, Xs_2} = Fun_2(I_3, Prev, Xs_2),
        true
    catch {return, Ret} -> Ret end.

outoforder(N) ->
    try
        case (N < 2) of
        true -> throw({return, []});
        _ -> ok
    end,
        R = [],
        Fun_4 = fun Fun_4_loop(N, R) ->
    case true of
        true ->
            try
                R_2 = [],
                I_5 = 0,
                Fun_3 = fun Fun_3_loop(I_5, N, R_2) ->
    case (I_5 < N) of
        true ->
            R_3 = lists:append(R_2, [(mochi_now() rem 3)]),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, N, R_3);
        _ -> {I_5, N, R_2}
    end
end,
{I_6, N, R_3} = Fun_3(I_5, N, R_2),
                case mochi_not(ordered(R_3)) of
        true -> throw(break);
        _ -> ok
    end,
                Fun_4_loop(N, R_3)
            catch
                {continue, C0, C1} -> Fun_4_loop(C0, C1);
                break -> {N, R}
            end;
        _ -> {N, R}
    end
end,
{N, R_3} = Fun_4(N, R),
        R_3
    catch {return, Ret} -> Ret end.

sort3(A) ->
    try
        Lo = 0,
        Mid = 0,
        Hi = (length(A) - 1),
        Fun_5 = fun Fun_5_loop(A, Hi, Lo, Mid) ->
    case (Mid =< Hi) of
        true ->
            V = lists:nth(Mid + 1, A),
            case (V == 0) of
        true -> Tmp = lists:nth(Lo + 1, A),
            A_2 = lists:sublist(A, Lo) ++ [lists:nth(Mid + 1, A)] ++ lists:nthtail(Lo + 1, A),
            A_3 = lists:sublist(A_2, Mid) ++ [Tmp] ++ lists:nthtail(Mid + 1, A_2),
            Lo_2 = (Lo + 1),
            Mid_2 = (Mid + 1),
            A_7 = A_3,
            Hi_4 = Hi,
            Lo_3 = Lo_2,
            Mid_5 = Mid_2,
            Tmp_4 = Tmp;
        _ -> case (V == 1) of
        true -> Mid_3 = (Mid + 1),
            A_6 = A,
            Hi_3 = Hi,
            Mid_4 = Mid_3,
            Tmp_3 = nil;
        _ -> Tmp_2 = lists:nth(Mid + 1, A),
            A_4 = lists:sublist(A, Mid) ++ [lists:nth(Hi + 1, A)] ++ lists:nthtail(Mid + 1, A),
            A_5 = lists:sublist(A_4, Hi) ++ [Tmp_2] ++ lists:nthtail(Hi + 1, A_4),
            Hi_2 = (Hi - 1),
            A_6 = A_5,
            Hi_3 = Hi_2,
            Mid_4 = Mid,
            Tmp_3 = Tmp_2
    end,
            A_7 = A_6,
            Hi_4 = Hi_3,
            Lo_3 = Lo,
            Mid_5 = Mid_4,
            Tmp_4 = Tmp_3
    end,
            Fun_5_loop(A_7, Hi_4, Lo_3, Mid_5);
        _ -> {A, Hi, Lo, Mid}
    end
end,
{A_7, Hi_4, Lo_3, Mid_5} = Fun_5(A, Hi, Lo, Mid),
        A_7
    catch {return, Ret} -> Ret end.

main() ->
    try
        F = outoforder(12),
        io:format("~ts~n", [liststr(F)]),
        F_2 = sort3(F),
        io:format("~ts~n", [liststr(F_2)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
