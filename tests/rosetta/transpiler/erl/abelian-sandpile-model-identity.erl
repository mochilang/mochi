#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, neighborslist/0, plus/2, isstable/1, topple/1, pilestring/1]).

% Generated by Mochi transpiler v0.10.40 (c9f97e1bd3) on 2025-07-25 19:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

neighborslist() ->
    try
        [[1, 3], [0, 2, 4], [1, 5], [0, 4, 6], [1, 3, 5, 7], [2, 4, 8], [3, 7], [4, 6, 8], [5, 7]]
    catch {return, Ret} -> Ret end.

plus(A, B) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(A, B, I, Res) ->
    case (I < length(A)) of
        true ->
            Res_2 = lists:append(Res, [(lists:nth(I + 1, A) + lists:nth(I + 1, B))]),
            I_2 = (I + 1),
            Fun_loop(A, B, I_2, Res_2);
        _ -> {A, B, I, Res}
    end
end,
{A, B, I_2, Res_2} = Fun(A, B, I, Res),
        Res_2
    catch {return, Ret} -> Ret end.

isstable(P) ->
    try
        Fun_2 = fun Fun_2_loop(List, P) ->
    case List of
        [] -> {P};
        [V|V_rest] ->
            case (V > 3) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_2_loop(V_rest, P)
    end
end,
{P} = Fun_2(P, P),
        true
    catch {return, Ret} -> Ret end.

topple(P_2) ->
    try
        Neighbors = neighborslist(),
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(I_3, Neighbors, P_2) ->
    case (I_3 < length(P_2)) of
        true ->
            case (lists:nth(I_3 + 1, P_2) > 3) of
        true -> P_3 = lists:sublist(P_2, I_3) ++ [(lists:nth(I_3 + 1, P_2) - 4)] ++ lists:nthtail(I_3 + 1, P_2),
            Nbs = lists:nth(I_3 + 1, Neighbors),
            Fun_3 = fun Fun_3_loop(List, I_3, Nbs, Neighbors, P_3) ->
    case List of
        [] -> {I_3, Nbs, Neighbors, P_3};
        [J|J_rest] ->
            P_4 = lists:sublist(P_3, J) ++ [(lists:nth(J + 1, P_3) + 1)] ++ lists:nthtail(J + 1, P_3),
            Fun_3_loop(J_rest, I_3, Nbs, Neighbors, P_4)
    end
end,
{I_3, Nbs, Neighbors, P_4} = Fun_3(Nbs, I_3, Nbs, Neighbors, P_3),
            throw({return, P_4}),
            Fun_4 = Fun_3,
            Nbs_2 = Nbs,
            P_5 = P_4;
        _ -> Fun_4 = nil,
            Nbs_2 = nil,
            P_5 = P_2
    end,
            I_4 = (I_3 + 1),
            Fun_5_loop(I_4, Neighbors, P_5);
        _ -> {I_3, Neighbors, P_2}
    end
end,
{I_4, Neighbors, P_5} = Fun_5(I_3, Neighbors, P_2),
        P_5
    catch {return, Ret} -> Ret end.

pilestring(P_6) ->
    try
        S = "",
        R = 0,
        Fun_7 = fun Fun_7_loop(P_6, R, S) ->
    case (R < 3) of
        true ->
            C = 0,
            Fun_6 = fun Fun_6_loop(C, P_6, R, S) ->
    case (C < 3) of
        true ->
            S_2 = ((S ++ lists:flatten(io_lib:format("~p", [lists:nth(((3 * R) + C) + 1, P_6)]))) ++ " "),
            C_2 = (C + 1),
            Fun_6_loop(C_2, P_6, R, S_2);
        _ -> {C, P_6, R, S}
    end
end,
{C_2, P_6, R, S_2} = Fun_6(C, P_6, R, S),
            S_3 = (S_2 ++ "\n"),
            R_2 = (R + 1),
            Fun_7_loop(P_6, R_2, S_3);
        _ -> {P_6, R, S}
    end
end,
{P_6, R_2, S_3} = Fun_7(P_6, R, S),
        S_3
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    io:format("~ts~n", ["Avalanche of topplings:\n"]),
    erlang:put('s4', [4, 3, 3, 3, 1, 2, 0, 2, 3]),
    io:format("~p~n", [pilestring(erlang:get('s4'))]),
    Fun_8 = fun Fun_8_loop() ->
    case not isstable(erlang:get('s4')) of
        true ->
            S4 = topple(erlang:get('s4')),
            erlang:put('s4', S4),
            io:format("~p~n", [pilestring(erlang:get('s4'))]),
            Fun_8_loop();
        _ -> {}
    end
end,
{} = Fun_8(),
    io:format("~ts~n", ["Commutative additions:\n"]),
    erlang:put('s1', [1, 2, 0, 2, 1, 1, 0, 1, 3]),
    erlang:put('s2', [2, 1, 3, 1, 0, 1, 0, 1, 0]),
    erlang:put('s3_a', plus(erlang:get('s1'), erlang:get('s2'))),
    Fun_9 = fun Fun_9_loop() ->
    case not isstable(erlang:get('s3_a')) of
        true ->
            S3_a = topple(erlang:get('s3_a')),
            erlang:put('s3_a', S3_a),
            Fun_9_loop();
        _ -> {}
    end
end,
{} = Fun_9(),
    erlang:put('s3_b', plus(erlang:get('s2'), erlang:get('s1'))),
    Fun_10 = fun Fun_10_loop() ->
    case not isstable(erlang:get('s3_b')) of
        true ->
            S3_b = topple(erlang:get('s3_b')),
            erlang:put('s3_b', S3_b),
            Fun_10_loop();
        _ -> {}
    end
end,
{} = Fun_10(),
    io:format("~ts~n", [((((pilestring(erlang:get('s1')) ++ "\nplus\n\n") ++ pilestring(erlang:get('s2'))) ++ "\nequals\n\n") ++ pilestring(erlang:get('s3_a')))]),
    io:format("~ts~n", [((((("and\n\n" ++ pilestring(erlang:get('s2'))) ++ "\nplus\n\n") ++ pilestring(erlang:get('s1'))) ++ "\nalso equals\n\n") ++ pilestring(erlang:get('s3_b')))]),
    io:format("~ts~n", ["Addition of identity sandpile:\n"]),
    erlang:put('s3', [3, 3, 3, 3, 3, 3, 3, 3, 3]),
    erlang:put('s3_id', [2, 1, 2, 1, 0, 1, 2, 1, 2]),
    erlang:put('s4b', plus(erlang:get('s3'), erlang:get('s3_id'))),
    Fun_11 = fun Fun_11_loop() ->
    case not isstable(erlang:get('s4b')) of
        true ->
            S4b = topple(erlang:get('s4b')),
            erlang:put('s4b', S4b),
            Fun_11_loop();
        _ -> {}
    end
end,
{} = Fun_11(),
    io:format("~ts~n", [((((pilestring(erlang:get('s3')) ++ "\nplus\n\n") ++ pilestring(erlang:get('s3_id'))) ++ "\nequals\n\n") ++ pilestring(erlang:get('s4b')))]),
    io:format("~ts~n", ["Addition of identities:\n"]),
    erlang:put('s5', plus(erlang:get('s3_id'), erlang:get('s3_id'))),
    Fun_12 = fun Fun_12_loop() ->
    case not isstable(erlang:get('s5')) of
        true ->
            S5 = topple(erlang:get('s5')),
            erlang:put('s5', S5),
            Fun_12_loop();
        _ -> {}
    end
end,
{} = Fun_12(),
    io:format("~ts~n", [((((pilestring(erlang:get('s3_id')) ++ "\nplus\n\n") ++ pilestring(erlang:get('s3_id'))) ++ "\nequals\n\n") ++ pilestring(erlang:get('s5')))]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
