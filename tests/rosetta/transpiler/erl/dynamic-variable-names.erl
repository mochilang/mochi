#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parseintstr/1, main/0]).

% Generated by Mochi transpiler v0.10.47 (eaacde736f) on 2025-07-28 11:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_parse_int_str(S) ->
    try list_to_integer(S) catch _:_ -> 0 end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

parseintstr(Str) ->
    try
        I = 0,
        Neg = false,
        case ((length(Str) > 0) andalso (string:substr(Str, 0 + 1, (1 - 0)) == "-")) of
        true -> Neg_2 = true,
            I_2 = 1,
            I_3 = I_2,
            Neg_3 = Neg_2;
        _ -> I_3 = I,
            Neg_3 = Neg
    end,
        N = 0,
        Digits = #{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9},
        Fun = fun Fun_loop(Digits, I_3, N, Neg_3, Str) ->
    case (I_3 < length(Str)) of
        true ->
            N_2 = ((N * 10) + maps:get(string:substr(Str, I_3 + 1, ((I_3 + 1) - I_3)), Digits, nil)),
            I_4 = (I_3 + 1),
            Fun_loop(Digits, I_4, N_2, Neg_3, Str);
        _ -> {Digits, I_3, N, Neg_3, Str}
    end
end,
{Digits, I_4, N_2, Neg_3, Str} = Fun(Digits, I_3, N, Neg_3, Str),
        case Neg_3 of
        true -> N_3 = -N_2,
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
        N_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        N_5 = 0,
        Fun_2 = fun Fun_2_loop(N_5) ->
    case ((N_5 < 1) orelse (N_5 > 5)) of
        true ->
            io:format("~ts~n", ["How many integer variables do you want to create (max 5) : "]),
            Line = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
            case (length(Line) > 0) of
        true -> N_6 = mochi_parse_int_str(Line),
            N_7 = N_6;
        _ -> N_7 = N_5
    end,
            Fun_2_loop(N_7);
        _ -> {N_5}
    end
end,
{N_7} = Fun_2(N_5),
        Vars = #{},
        io:format("~ts~n", ["OK, enter the variable names and their values, below\n"]),
        I_5 = 1,
        Fun_5 = fun Fun_5_loop(I_5, N_7, Vars) ->
    case (I_5 =< N_7) of
        true ->
            try
                io:format("~ts~n", [(("\n  Variable " ++ lists:flatten(io_lib:format("~p", [I_5]))) ++ "\n")]),
                io:format("~ts~n", ["    Name  : "]),
                Name = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
                case maps:is_key(Name, Vars) of
        true -> io:format("~ts~n", ["  Sorry, you've already created a variable of that name, try again"]),
            throw({continue, I_5, N_7, Vars});
        _ -> ok
    end,
                Value = 0,
                Fun_4 = fun Fun_4_loop(I_5, N_7, Name, Value, Vars) ->
    case true of
        true ->
            try
                io:format("~ts~n", ["    Value : "]),
                Valstr = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
                case (length(Valstr) == 0) of
        true -> io:format("~ts~n", ["  Not a valid integer, try again"]),
            throw({continue, I_5, N_7, Name, Value, Vars});
        _ -> ok
    end,
                Ok = true,
                J = 0,
                Neg_4 = false,
                case (string:substr(Valstr, 0 + 1, (1 - 0)) == "-") of
        true -> Neg_5 = true,
            J_2 = 1,
            J_3 = J_2,
            Neg_6 = Neg_5;
        _ -> J_3 = J,
            Neg_6 = Neg_4
    end,
                Fun_3 = fun Fun_3_loop(I_5, J_3, N_7, Name, Neg_6, Ok, Valstr, Value, Vars) ->
    case (J_3 < length(Valstr)) of
        true ->
            try
                Ch = string:substr(Valstr, J_3 + 1, ((J_3 + 1) - J_3)),
                case ((Ch < "0") orelse (Ch > "9")) of
        true -> Ok_2 = false,
            throw(break),
            Ok_3 = Ok_2;
        _ -> Ok_3 = Ok
    end,
                J_4 = (J_3 + 1),
                Fun_3_loop(I_5, J_4, N_7, Name, Neg_6, Ok_3, Valstr, Value, Vars)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8);
                break -> {I_5, J_3, N_7, Name, Neg_6, Ok, Valstr, Value, Vars}
            end;
        _ -> {I_5, J_3, N_7, Name, Neg_6, Ok, Valstr, Value, Vars}
    end
end,
{I_5, J_4, N_7, Name, Neg_6, Ok_3, Valstr, Value, Vars} = Fun_3(I_5, J_3, N_7, Name, Neg_6, Ok, Valstr, Value, Vars),
                case mochi_not(Ok_3) of
        true -> io:format("~ts~n", ["  Not a valid integer, try again"]),
            throw({continue, I_5, N_7, Name, Value, Vars});
        _ -> ok
    end,
                Value_2 = mochi_parse_int_str(Valstr),
                throw(break),
                Fun_4_loop(I_5, N_7, Name, Value_2, Vars)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_4_loop(C0, C1, C2, C3, C4);
                break -> {I_5, N_7, Name, Value, Vars}
            end;
        _ -> {I_5, N_7, Name, Value, Vars}
    end
end,
{I_5, N_7, Name, Value_2, Vars} = Fun_4(I_5, N_7, Name, Value, Vars),
                Vars_2 = maps:put(Name, Value_2, Vars),
                I_6 = (I_5 + 1),
                Fun_5_loop(I_6, N_7, Vars_2)
            catch
                {continue, C0, C1, C2} -> Fun_5_loop(C0, C1, C2);
                break -> {I_5, N_7, Vars}
            end;
        _ -> {I_5, N_7, Vars}
    end
end,
{I_6, N_7, Vars_2} = Fun_5(I_5, N_7, Vars),
        io:format("~ts~n", ["\nEnter q to quit"]),
        Fun_6 = fun Fun_6_loop(I_6, N_7, Vars_2) ->
    case true of
        true ->
            io:format("~ts~n", ["\nWhich variable do you want to inspect : "]),
            Name_2 = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
            case (string:to_lower(Name_2) == "q") of
        true -> throw({return, nil});
        _ -> ok
    end,
            case mochi_member(Name_2, Vars_2) of
        true -> io:format("~ts~n", [("It's value is " ++ lists:flatten(io_lib:format("~p", [maps:get(Name_2, Vars_2, nil)])))]);
        _ -> io:format("~ts~n", ["Sorry there's no variable of that name, try again"])
    end,
            Fun_6_loop(I_6, N_7, Vars_2);
        _ -> {I_6, N_7, Vars_2}
    end
end,
{I_6, N_7, Vars_2} = Fun_6(I_6, N_7, Vars_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
