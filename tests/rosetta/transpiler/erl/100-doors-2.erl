#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.39 (7a698e42dc) on 2025-07-25 08:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    erlang:put('door', 1),
    erlang:put('incrementer', 0),
    Fun = fun Fun_loop(List) ->
    case List of
        [] -> {};
        [Current|Fun_loop_rest] ->
            Line = (("Door " ++ lists:flatten(io_lib:format("~p", [Current]))) ++ " "),
            case (Current == erlang:get('door')) of
        true -> Line_2 = (Line ++ "Open"),
            erlang:put('incrementer', (erlang:get('incrementer') + 1)),
            erlang:put('door', ((erlang:get('door') + (2 * erlang:get('incrementer'))) + 1)),
            Line_4 = Line_2;
        _ -> Line_3 = (Line ++ "Closed"),
            Line_4 = Line_3
    end,
            io:format("~ts~n", [Line_4]),
            Fun_loop(Fun_loop_rest)
    end
end,
{} = Fun(lists:seq(1, (101) - 1)),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
