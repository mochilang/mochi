#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, else1/2, else2/2, else0/2, if2/3]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

else1(I, F) ->
    try
        case (maps:get("cond1", I, nil) andalso (maps:get("cond2", I, nil) == false)) of
        true -> F();
        _ -> ok
    end,
        I
    catch {return, Ret} -> Ret end.

else2(I_2, F_2) ->
    try
        case (maps:get("cond2", I_2, nil) andalso (maps:get("cond1", I_2, nil) == false)) of
        true -> F_2();
        _ -> ok
    end,
        I_2
    catch {return, Ret} -> Ret end.

else0(I_3, F_3) ->
    try
        case ((maps:get("cond1", I_3, nil) == false) andalso (maps:get("cond2", I_3, nil) == false)) of
        true -> F_3();
        _ -> ok
    end,
        I_3
    catch {return, Ret} -> Ret end.

if2(Cond1, Cond2, F_4) ->
    try
        case (Cond1 andalso Cond2) of
        true -> F_4();
        _ -> ok
    end,
        #{"cond1" => Cond1, "cond2" => Cond2}
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('a', 0),
    erlang:put('b', 1),
    erlang:put('t', if2((erlang:get('a') == 1), (erlang:get('b') == 3), fun() ->
    try
        io:format("~ts~n", ["a = 1 and b = 3"]),
        nil
    catch {return, Ret} -> Ret end
end)),
    erlang:put('t', else1(erlang:get('t'), fun() ->
    try
        io:format("~ts~n", ["a = 1 and b <> 3"]),
        nil
    catch {return, Ret} -> Ret end
end)),
    erlang:put('t', else2(erlang:get('t'), fun() ->
    try
        io:format("~ts~n", ["a <> 1 and b = 3"]),
        nil
    catch {return, Ret} -> Ret end
end)),
    else0(erlang:get('t'), fun() ->
    try
        io:format("~ts~n", ["a <> 1 and b <> 3"]),
        nil
    catch {return, Ret} -> Ret end
end),
    erlang:put('a', 1),
    erlang:put('b', 0),
    erlang:put('t', if2((erlang:get('a') == 1), (erlang:get('b') == 3), fun() ->
    try
        io:format("~ts~n", ["a = 1 and b = 3"]),
        nil
    catch {return, Ret} -> Ret end
end)),
    erlang:put('t', else0(erlang:get('t'), fun() ->
    try
        io:format("~ts~n", ["a <> 1 and b <> 3"]),
        nil
    catch {return, Ret} -> Ret end
end)),
    else1(erlang:get('t'), fun() ->
    try
        io:format("~ts~n", ["a = 1 and b <> 3"]),
        nil
    catch {return, Ret} -> Ret end
end),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
