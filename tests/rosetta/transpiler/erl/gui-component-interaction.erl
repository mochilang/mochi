#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parseint/1, rand10000/0]).

% Generated by Mochi transpiler v0.10.55 (26b9f6045a) on 2025-08-02 23:10 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

parseint(Str) ->
    try
        I = 0,
        Neg = false,
        case ((length(Str) > 0) andalso (string:substr(Str, 0 + 1, (1 - 0)) == "-")) of
        true -> Neg_2 = true,
            I_2 = 1,
            I_3 = I_2,
            Neg_3 = Neg_2;
        _ -> I_3 = I,
            Neg_3 = Neg
    end,
        N = 0,
        Digits = #{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9},
        Fun = fun Fun_loop(Digits, I_3, N, Neg_3, Str) ->
    case (I_3 < length(Str)) of
        true ->
            N_2 = ((N * 10) + maps:get(string:substr(Str, I_3 + 1, ((I_3 + 1) - I_3)), Digits, nil)),
            I_4 = (I_3 + 1),
            Fun_loop(Digits, I_4, N_2, Neg_3, Str);
        _ -> {Digits, I_3, N, Neg_3, Str}
    end
end,
{Digits, I_4, N_2, Neg_3, Str} = Fun(Digits, I_3, N, Neg_3, Str),
        case Neg_3 of
        true -> N_3 = -N_2,
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
        N_4
    catch {return, Ret} -> Ret end.

rand10000() ->
    try
        (mochi_now() rem 10000)
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('value', 0),
    io:format("~ts ~p~n", ["Value:", erlang:get('value')]),
    erlang:put('done', false),
    Fun_2 = fun Fun_2_loop() ->
    case mochi_not(erlang:get('done')) of
        true ->
            io:format("~ts~n", ["i=increment, r=random, s num=set, q=quit:"]),
            Line = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
            case (Line == "i") of
        true -> erlang:put('value', (erlang:get('value') + 1)),
            io:format("~ts ~p~n", ["Value:", erlang:get('value')]),
            Ans_3 = nil;
        _ -> case (Line == "r") of
        true -> io:format("~ts~n", ["Set random value? (y/n)"]),
            Ans = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
            case (Ans == "y") of
        true -> erlang:put('value', rand10000()),
            io:format("~ts ~p~n", ["Value:", erlang:get('value')]);
        _ -> ok
    end,
            Ans_2 = Ans;
        _ -> case ((length(Line) > 2) andalso (string:substr(Line, 0 + 1, (2 - 0)) == "s ")) of
        true -> erlang:put('value', parseint(string:substr(Line, 2 + 1, (length(Line) - 2)))),
            io:format("~ts ~p~n", ["Value:", erlang:get('value')]);
        _ -> case (Line == "q") of
        true -> erlang:put('done', true);
        _ -> io:format("~ts~n", ["Unknown command"])
    end
    end,
            Ans_2 = nil
    end,
            Ans_3 = Ans_2
    end,
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
