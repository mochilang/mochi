#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sel/2, median/1]).

% Generated by Mochi transpiler v0.10.40 (5ec8b59a93) on 2025-07-25 12:29 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

sel(List, K) ->
    try
        I = 0,
        Fun_2 = fun Fun_2_loop(I, K, List) ->
    case (I =< K) of
        true ->
            MinIndex = I,
            J = (I + 1),
            Fun = fun Fun_loop(I, J, K, List, MinIndex) ->
    case (J < length(List)) of
        true ->
            case (lists:nth(J + 1, List) < lists:nth(MinIndex + 1, List)) of
        true -> MinIndex_2 = J,
            MinIndex_3 = MinIndex_2;
        _ -> MinIndex_3 = MinIndex
    end,
            J_2 = (J + 1),
            Fun_loop(I, J_2, K, List, MinIndex_3);
        _ -> {I, J, K, List, MinIndex}
    end
end,
{I, J_2, K, List, MinIndex_3} = Fun(I, J, K, List, MinIndex),
            Tmp = lists:nth(I + 1, List),
            List_2 = lists:sublist(List, I) ++ [lists:nth(MinIndex_3 + 1, List)] ++ lists:nthtail(I + 1, List),
            List_3 = lists:sublist(List_2, MinIndex_3) ++ [Tmp] ++ lists:nthtail(MinIndex_3 + 1, List_2),
            I_2 = (I + 1),
            Fun_2_loop(I_2, K, List_3);
        _ -> {I, K, List}
    end
end,
{I_2, K, List_3} = Fun_2(I, K, List),
        lists:nth(K + 1, List_3)
    catch {return, Ret} -> Ret end.

median(A) ->
    try
        Arr = A,
        Half = mochi_to_int((length(Arr) div 2)),
        Med = sel(Arr, Half),
        case ((length(Arr) rem 2) == 0) of
        true -> throw({return, ((Med + lists:nth((Half - 1) + 1, Arr)) / 2)});
        _ -> ok
    end,
        Med
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [median([3, 1, 4, 1])]))]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [median([3, 1, 4, 1, 5])]))]),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
