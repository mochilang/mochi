#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, liststr/1, pointerdemo/0, slicedemo/0]).

% Generated by Mochi transpiler v0.10.42 (9e3104bc20) on 2025-07-28 04:25 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

liststr(Xs) ->
    try
        S = "[",
        I = 0,
        Fun = fun Fun_loop(I, S, Xs) ->
    case (I < length(Xs)) of
        true ->
            S_2 = (S ++ lists:flatten(io_lib:format("~p", [lists:nth(I + 1, Xs)]))),
            case (I < (length(Xs) - 1)) of
        true -> S_3 = (S_2 ++ " "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, S_4, Xs);
        _ -> {I, S, Xs}
    end
end,
{I_2, S_4, Xs} = Fun(I, S, Xs),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

pointerdemo() ->
    try
        io:format("~ts~n", ["Pointer:"]),
        I_3 = 0,
        io:format("~ts~n", ["Before:"]),
        io:format("~ts~n", [((("\t<address>: " ++ lists:flatten(io_lib:format("~p", [I_3]))) ++ ", ") ++ lists:flatten(io_lib:format("~p", [I_3])))]),
        I_4 = 3,
        io:format("~ts~n", ["After:"]),
        io:format("~ts~n", [((("\t<address>: " ++ lists:flatten(io_lib:format("~p", [3]))) ++ ", ") ++ lists:flatten(io_lib:format("~p", [3])))]),
        nil
    catch {return, Ret} -> Ret end.

slicedemo() ->
    try
        io:format("~ts~n", ["Slice:"]),
        A = [],
        Fun_2 = fun Fun_2_loop(List, A) ->
    case List of
        [] -> {A};
        [_|__rest] ->
            A_2 = lists:append(A, [0]),
            Fun_2_loop(__rest, A_2)
    end
end,
{A_2} = Fun_2(lists:seq(0, (10) - 1), A),
        S_6 = A_2,
        io:format("~ts~n", ["Before:"]),
        io:format("~ts~n", [("\ts: " ++ liststr(S_6))]),
        io:format("~ts~n", [("\ta: " ++ liststr(A_2))]),
        Data = [65, 32, 115, 116, 114, 105, 110, 103, 46],
        Idx = 0,
        Fun_3 = fun Fun_3_loop(A_2, Data, Idx, S_6) ->
    case (Idx < length(Data)) of
        true ->
            S_7 = lists:sublist(S_6, Idx) ++ [lists:nth(Idx + 1, Data)] ++ lists:nthtail(Idx + 1, S_6),
            Idx_2 = (Idx + 1),
            Fun_3_loop(A_2, Data, Idx_2, S_7);
        _ -> {A_2, Data, Idx, S_6}
    end
end,
{A_2, Data, Idx_2, S_7} = Fun_3(A_2, Data, Idx, S_6),
        io:format("~ts~n", ["After:"]),
        io:format("~ts~n", [("\ts: " ++ liststr(S_7))]),
        io:format("~ts~n", [("\ta: " ++ liststr(A_2))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    pointerdemo(),
    io:format("~ts~n", [""]),
    slicedemo(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
