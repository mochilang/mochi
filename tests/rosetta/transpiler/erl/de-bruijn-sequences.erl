#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, dbrec/6, debruijn/2, alldigits/1, parseintstr/1, validate/1, padleft/2, joinstr/2, reverse/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_parse_int_str(S) ->
    try list_to_integer(S) catch _:_ -> 0 end.

dbrec(K, N, T, P, A, Seq) ->
    try
        case (T > N) of
        true -> case ((N rem P) == 0) of
        true -> J = 1,
            Fun = fun Fun_loop(A, J, K, N, P, Seq, T) ->
    case (J =< P) of
        true ->
            Seq_2 = lists:append(Seq, [lists:nth(J + 1, A)]),
            J_2 = (J + 1),
            Fun_loop(A, J_2, K, N, P, Seq_2, T);
        _ -> {A, J, K, N, P, Seq, T}
    end
end,
{A, J_2, K, N, P, Seq_2, T} = Fun(A, J, K, N, P, Seq, T),
            Fun_2 = Fun,
            J_3 = J_2,
            Seq_3 = Seq_2;
        _ -> Fun_2 = nil,
            J_3 = nil,
            Seq_3 = Seq
    end,
            A_4 = A,
            Fun_4 = Fun_2,
            J_6 = J_3,
            Seq_6 = Seq_3;
        _ -> A_2 = lists:sublist(A, T) ++ [lists:nth((T - P) + 1, A)] ++ lists:nthtail(T + 1, A),
            Seq_4 = dbrec(K, N, (T + 1), P, A_2, Seq),
            J_4 = (lists:nth((T - P) + 1, A_2) + 1),
            Fun_3 = fun Fun_3_loop(A_2, J_4, K, N, P, Seq_4, T) ->
    case (J_4 < K) of
        true ->
            A_3 = lists:sublist(A_2, T) ++ [J_4] ++ lists:nthtail(T + 1, A_2),
            Seq_5 = dbrec(K, N, (T + 1), T, A_3, Seq_4),
            J_5 = (J_4 + 1),
            Fun_3_loop(A_3, J_5, K, N, P, Seq_5, T);
        _ -> {A_2, J_4, K, N, P, Seq_4, T}
    end
end,
{A_3, J_5, K, N, P, Seq_5, T} = Fun_3(A_2, J_4, K, N, P, Seq_4, T),
            A_4 = A_3,
            Fun_4 = Fun_3,
            J_6 = J_5,
            Seq_6 = Seq_5
    end,
        Seq_6
    catch {return, Ret} -> Ret end.

debruijn(K_2, N_2) ->
    try
        Digits = "0123456789",
        Alphabet = "0123456789",
        case (K_2 < 10) of
        true -> Alphabet_2 = string:substr("0123456789", 0 + 1, (K_2 - 0)),
            Alphabet_3 = Alphabet_2;
        _ -> Alphabet_3 = Alphabet
    end,
        A_5 = [],
        I = 0,
        Fun_5 = fun Fun_5_loop(A_5, Alphabet_3, Digits, I, K_2, N_2) ->
    case (I < (K_2 * N_2)) of
        true ->
            A_6 = lists:append(A_5, [0]),
            I_2 = (I + 1),
            Fun_5_loop(A_6, Alphabet_3, Digits, I_2, K_2, N_2);
        _ -> {A_5, Alphabet_3, Digits, I, K_2, N_2}
    end
end,
{A_6, Alphabet_3, Digits, I_2, K_2, N_2} = Fun_5(A_5, Alphabet_3, Digits, I, K_2, N_2),
        Seq_7 = [],
        Seq_8 = dbrec(K_2, N_2, 1, 1, A_6, Seq_7),
        B = "",
        Idx = 0,
        Fun_6 = fun Fun_6_loop(A_6, Alphabet_3, B, Digits, I_2, Idx, K_2, N_2, Seq_8) ->
    case (Idx < length(Seq_8)) of
        true ->
            B_2 = (B ++ string:substr(Alphabet_3, lists:nth(Idx + 1, Seq_8) + 1, 1)),
            Idx_2 = (Idx + 1),
            Fun_6_loop(A_6, Alphabet_3, B_2, Digits, I_2, Idx_2, K_2, N_2, Seq_8);
        _ -> {A_6, Alphabet_3, B, Digits, I_2, Idx, K_2, N_2, Seq_8}
    end
end,
{A_6, Alphabet_3, B_2, Digits, I_2, Idx_2, K_2, N_2, Seq_8} = Fun_6(A_6, Alphabet_3, B, Digits, I_2, Idx, K_2, N_2, Seq_8),
        B_3 = (B_2 ++ string:substr(B_2, 0 + 1, ((N_2 - 1) - 0))),
        B_3
    catch {return, Ret} -> Ret end.

alldigits(S) ->
    try
        I_3 = 0,
        Fun_7 = fun Fun_7_loop(I_3, S) ->
    case (I_3 < length(S)) of
        true ->
            Ch = string:substr(S, I_3 + 1, ((I_3 + 1) - I_3)),
            case ((Ch < "0") orelse (Ch > "9")) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_7_loop(I_4, S);
        _ -> {I_3, S}
    end
end,
{I_4, S} = Fun_7(I_3, S),
        true
    catch {return, Ret} -> Ret end.

parseintstr(Str) ->
    try
        N_3 = 0,
        I_5 = 0,
        Fun_8 = fun Fun_8_loop(I_5, N_3, Str) ->
    case (I_5 < length(Str)) of
        true ->
            N_4 = ((N_3 * 10) + mochi_to_int(string:substr(Str, I_5 + 1, ((I_5 + 1) - I_5)))),
            I_6 = (I_5 + 1),
            Fun_8_loop(I_6, N_4, Str);
        _ -> {I_5, N_3, Str}
    end
end,
{I_6, N_4, Str} = Fun_8(I_5, N_3, Str),
        N_4
    catch {return, Ret} -> Ret end.

validate(Db) ->
    try
        Le = length(Db),
        Found = [],
        I_7 = 0,
        Fun_9 = fun Fun_9_loop(Db, Found, I_7, Le) ->
    case (I_7 < 10000) of
        true ->
            Found_2 = lists:append(Found, [0]),
            I_8 = (I_7 + 1),
            Fun_9_loop(Db, Found_2, I_8, Le);
        _ -> {Db, Found, I_7, Le}
    end
end,
{Db, Found_2, I_8, Le} = Fun_9(Db, Found, I_7, Le),
        J_7 = 0,
        Fun_10 = fun Fun_10_loop(Db, Found_2, I_8, J_7, Le) ->
    case (J_7 < (Le - 3)) of
        true ->
            S_2 = string:substr(Db, J_7 + 1, ((J_7 + 4) - J_7)),
            case (alldigits(S_2) /= nil) of
        true -> N_5 = mochi_parse_int_str(S_2),
            Found_3 = lists:sublist(Found_2, N_5) ++ [(lists:nth(N_5 + 1, Found_2) + 1)] ++ lists:nthtail(N_5 + 1, Found_2),
            Found_4 = Found_3,
            N_6 = N_5;
        _ -> Found_4 = Found_2,
            N_6 = nil
    end,
            J_8 = (J_7 + 1),
            Fun_10_loop(Db, Found_4, I_8, J_8, Le);
        _ -> {Db, Found_2, I_8, J_7, Le}
    end
end,
{Db, Found_4, I_8, J_8, Le} = Fun_10(Db, Found_2, I_8, J_7, Le),
        Errs = [],
        K_3 = 0,
        Fun_11 = fun Fun_11_loop(Db, Errs, Found_4, I_8, J_8, K_3, Le) ->
    case (K_3 < 10000) of
        true ->
            case (lists:nth(K_3 + 1, Found_4) == 0) of
        true -> Errs_2 = lists:append(Errs, [(("    PIN number " ++ padleft(K_3, 4)) ++ " missing")]),
            Errs_5 = Errs_2;
        _ -> case (lists:nth(K_3 + 1, Found_4) > 1) of
        true -> Errs_3 = lists:append(Errs, [(((("    PIN number " ++ padleft(K_3, 4)) ++ " occurs ") ++ lists:flatten(io_lib:format("~p", [lists:nth(K_3 + 1, Found_4)]))) ++ " times")]),
            Errs_4 = Errs_3;
        _ -> Errs_4 = Errs
    end,
            Errs_5 = Errs_4
    end,
            K_4 = (K_3 + 1),
            Fun_11_loop(Db, Errs_5, Found_4, I_8, J_8, K_4, Le);
        _ -> {Db, Errs, Found_4, I_8, J_8, K_3, Le}
    end
end,
{Db, Errs_5, Found_4, I_8, J_8, K_4, Le} = Fun_11(Db, Errs, Found_4, I_8, J_8, K_3, Le),
        Lerr = length(Errs_5),
        case (Lerr == 0) of
        true -> io:format("~ts~n", ["  No errors found"]),
            Msg_2 = nil,
            Pl_4 = nil;
        _ -> Pl = "s",
            case (Lerr == 1) of
        true -> Pl_2 = "",
            Pl_3 = Pl_2;
        _ -> Pl_3 = Pl
    end,
            io:format("~ts~n", [(((("  " ++ lists:flatten(io_lib:format("~p", [Lerr]))) ++ " error") ++ Pl_3) ++ " found:")]),
            Msg = joinstr(Errs_5, "\n"),
            io:format("~p~n", [Msg]),
            Msg_2 = Msg,
            Pl_4 = Pl_3
    end,
        nil
    catch {return, Ret} -> Ret end.

padleft(N_7, Width) ->
    try
        S_3 = lists:flatten(io_lib:format("~p", [N_7])),
        Fun_12 = fun Fun_12_loop(N_7, S_3, Width) ->
    case (length(S_3) < Width) of
        true ->
            S_4 = ("0" ++ S_3),
            Fun_12_loop(N_7, S_4, Width);
        _ -> {N_7, S_3, Width}
    end
end,
{N_7, S_4, Width} = Fun_12(N_7, S_3, Width),
        S_4
    catch {return, Ret} -> Ret end.

joinstr(Xs, Sep) ->
    try
        Res = "",
        I_9 = 0,
        Fun_13 = fun Fun_13_loop(I_9, Res, Sep, Xs) ->
    case (I_9 < length(Xs)) of
        true ->
            case (I_9 > 0) of
        true -> Res_2 = (Res ++ Sep),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Res_4 = (Res_3 ++ lists:nth(I_9 + 1, Xs)),
            I_10 = (I_9 + 1),
            Fun_13_loop(I_10, Res_4, Sep, Xs);
        _ -> {I_9, Res, Sep, Xs}
    end
end,
{I_10, Res_4, Sep, Xs} = Fun_13(I_9, Res, Sep, Xs),
        Res_4
    catch {return, Ret} -> Ret end.

reverse(S_5) ->
    try
        Out = "",
        I_11 = (length(S_5) - 1),
        Fun_14 = fun Fun_14_loop(I_11, Out, S_5) ->
    case (I_11 >= 0) of
        true ->
            Out_2 = (Out ++ string:substr(S_5, I_11 + 1, ((I_11 + 1) - I_11))),
            I_12 = (I_11 - 1),
            Fun_14_loop(I_12, Out_2, S_5);
        _ -> {I_11, Out, S_5}
    end
end,
{I_12, Out_2, S_5} = Fun_14(I_11, Out, S_5),
        Out_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Db_2 = debruijn(10, 4),
        Le_2 = length(Db_2),
        io:format("~ts~n", [("The length of the de Bruijn sequence is " ++ lists:flatten(io_lib:format("~p", [Le_2])))]),
        io:format("~ts~n", ["\nThe first 130 digits of the de Bruijn sequence are:"]),
        io:format("~p~n", [lists:sublist(Db_2, 0 + 1, (130 - 0))]),
        io:format("~ts~n", ["\nThe last 130 digits of the de Bruijn sequence are:"]),
        io:format("~p~n", [lists:sublist(Db_2, (Le_2 - 130) + 1, length(Db_2) - (Le_2 - 130))]),
        io:format("~ts~n", ["\nValidating the de Bruijn sequence:"]),
        validate(Db_2),
        io:format("~ts~n", ["\nValidating the reversed de Bruijn sequence:"]),
        Dbr = reverse(Db_2),
        validate(Dbr),
        Db_3 = ((lists:sublist(Db_2, 0 + 1, (4443 - 0)) ++ ".") ++ lists:sublist(Db_2, 4444 + 1, (length(Db_2) - 4444))),
        io:format("~ts~n", ["\nValidating the overlaid de Bruijn sequence:"]),
        validate(Db_3),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
