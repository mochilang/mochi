#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isprime/1, gen/3, pad/2]).

% Generated by Mochi transpiler v0.10.42 (c15256d970) on 2025-07-28 04:44 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

isprime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N rem 2) == 0) of
        true -> throw({return, (N == 2)});
        _ -> ok
    end,
        D = 3,
        Fun = fun Fun_loop(D, N) ->
    case ((D * D) =< N) of
        true ->
            case ((N rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            Fun_loop(D_2, N);
        _ -> {D, N}
    end
end,
{D_2, N} = Fun(D, N),
        true
    catch {return, Ret} -> Ret end.

gen(Idx, Cur, Used) ->
    try
        case (Idx == length(erlang:get('digits'))) of
        true -> case (Used andalso isprime(Cur)) of
        true -> throw({return, [Cur]});
        _ -> ok
    end,
            throw({return, []});
        _ -> ok
    end,
        With = gen((Idx + 1), ((Cur * 10) + lists:nth(Idx + 1, erlang:get('digits'))), true),
        Without = gen((Idx + 1), Cur, Used),
        (With ++ Without)
    catch {return, Ret} -> Ret end.

pad(N_2, Width) ->
    try
        S = lists:flatten(io_lib:format("~p", [N_2])),
        Fun_2 = fun Fun_2_loop(N_2, S, Width) ->
    case (length(S) < Width) of
        true ->
            S_2 = (" " ++ S),
            Fun_2_loop(N_2, S_2, Width);
        _ -> {N_2, S, Width}
    end
end,
{N_2, S_2, Width} = Fun_2(N_2, S, Width),
        S_2
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('digits', [9, 8, 7, 6, 5, 4, 3, 2, 1]),
    erlang:put('primes', gen(0, 0, false)),
    io:format("~ts~n", [(("There are " ++ lists:flatten(io_lib:format("~p", [length(erlang:get('primes'))]))) ++ " descending primes, namely:")]),
    erlang:put('i', 0),
    erlang:put('line', ""),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('i') < length(erlang:get('primes'))) of
        true ->
            erlang:put('line', ((erlang:get('line') ++ pad(lists:nth(erlang:get('i') + 1, erlang:get('primes')), 8)) ++ " ")),
            case (((erlang:get('i') + 1) rem 10) == 0) of
        true -> io:format("~ts~n", [string:substr(erlang:get('line'), 0 + 1, ((length(erlang:get('line')) - 1) - 0))]),
            erlang:put('line', "");
        _ -> ok
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    case (length(erlang:get('line')) > 0) of
        true -> io:format("~ts~n", [string:substr(erlang:get('line'), 0 + 1, ((length(erlang:get('line')) - 1) - 0))]);
        _ -> ok
    end,
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
