#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, multiplier/2, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

multiplier(N1, N2) ->
    try
        N1n2 = (N1 * N2),
        fun(M) ->
    try
        (N1n2 * M)
    catch {return, Ret} -> Ret end
end
    catch {return, Ret} -> Ret end.

main() ->
    try
        X = 2,
        Xi = 0.5,
        Y = 4,
        Yi = 0.25,
        Z = (2 + 4),
        Zi = (1 / (2 + 4)),
        Numbers = [2, 4, Z],
        Inverses = [0.5, 0.25, Zi],
        Mfs = [],
        I = 0,
        Fun = fun Fun_loop(I, Inverses, Mfs, Numbers, X, Xi, Y, Yi, Z, Zi) ->
    case (I < length(Numbers)) of
        true ->
            Mfs_2 = lists:append(Mfs, [multiplier(lists:nth(I + 1, Numbers), lists:nth(I + 1, Inverses))]),
            I_2 = (I + 1),
            Fun_loop(I_2, Inverses, Mfs_2, Numbers, X, Xi, Y, Yi, Z, Zi);
        _ -> {I, Inverses, Mfs, Numbers, X, Xi, Y, Yi, Z, Zi}
    end
end,
{I_2, Inverses, Mfs_2, Numbers, X, Xi, Y, Yi, Z, Zi} = Fun(I, Inverses, Mfs, Numbers, X, Xi, Y, Yi, Z, Zi),
        Fun_2 = fun Fun_2_loop(List, I_2, Inverses, Mfs_2, Numbers, X, Xi, Y, Yi, Z, Zi) ->
    case List of
        [] -> {I_2, Inverses, Mfs_2, Numbers, X, Xi, Y, Yi, Z, Zi};
        [Mf|Mf_rest] ->
            io:format("~ts~n", [lists:flatten(io_lib:format("~p", [Mf(1)]))]),
            Fun_2_loop(Mf_rest, I_2, Inverses, Mfs_2, Numbers, X, Xi, Y, Yi, Z, Zi)
    end
end,
{I_2, Inverses, Mfs_2, Numbers, X, Xi, Y, Yi, Z, Zi} = Fun_2(Mfs_2, I_2, Inverses, Mfs_2, Numbers, X, Xi, Y, Yi, Z, Zi),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
