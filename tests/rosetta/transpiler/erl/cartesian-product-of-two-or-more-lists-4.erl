#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, liststr/1, llstr/1, copy/1, cartn/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (bbaa8b9136) on 2025-07-28 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

liststr(Xs) ->
    try
        S = "[",
        I = 0,
        Fun = fun Fun_loop(I, S, Xs) ->
    case (I < length(Xs)) of
        true ->
            S_2 = (S ++ lists:flatten(io_lib:format("~p", [lists:nth(I + 1, Xs)]))),
            case (I < (length(Xs) - 1)) of
        true -> S_3 = (S_2 ++ " "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, S_4, Xs);
        _ -> {I, S, Xs}
    end
end,
{I_2, S_4, Xs} = Fun(I, S, Xs),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

llstr(Lst) ->
    try
        S_6 = "[",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Lst, S_6) ->
    case (I_3 < length(Lst)) of
        true ->
            S_7 = (S_6 ++ liststr(lists:nth(I_3 + 1, Lst))),
            case (I_3 < (length(Lst) - 1)) of
        true -> S_8 = (S_7 ++ " "),
            S_9 = S_8;
        _ -> S_9 = S_7
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Lst, S_9);
        _ -> {I_3, Lst, S_6}
    end
end,
{I_4, Lst, S_9} = Fun_2(I_3, Lst, S_6),
        S_10 = (S_9 ++ "]"),
        S_10
    catch {return, Ret} -> Ret end.

copy(Xs_2) ->
    try
        Out = [],
        Fun_3 = fun Fun_3_loop(List, Out, Xs_2) ->
    case List of
        [] -> {Out, Xs_2};
        [V|V_rest] ->
            Out_2 = lists:append(Out, [V]),
            Fun_3_loop(V_rest, Out_2, Xs_2)
    end
end,
{Out_2, Xs_2} = Fun_3(Xs_2, Out, Xs_2),
        Out_2
    catch {return, Ret} -> Ret end.

cartn(Lists) ->
    try
        case (Lists == nil) of
        true -> throw({return, []});
        _ -> ok
    end,
        A = Lists,
        case (length(A) == 0) of
        true -> throw({return, [[]]});
        _ -> ok
    end,
        Out_3 = [],
        Last = (length(A) - 1),
        Left = cartn(lists:sublist(A, 1, (Last - 0))),
        Fun_4 = fun Fun_4_loop(List, A, Last, Left, Lists, Out_3) ->
    case List of
        [] -> {A, Last, Left, Lists, Out_3};
        [P|P_rest] ->
            Fun_5 = fun Fun_5_loop(List, A, Last, Left, Lists, Out_3, P) ->
    case List of
        [] -> {A, Last, Left, Lists, Out_3, P};
        [X|X_rest] ->
            Row = copy(P),
            Row_2 = lists:append(Row, [X]),
            Out_4 = lists:append(Out_3, [Row_2]),
            Fun_5_loop(X_rest, A, Last, Left, Lists, Out_4, P)
    end
end,
{A, Last, Left, Lists, Out_4, P} = Fun_5(lists:nth(Last + 1, A), A, Last, Left, Lists, Out_3, P),
            Fun_4_loop(P_rest, A, Last, Left, Lists, Out_4)
    end
end,
{A, Last, Left, Lists, Out_4} = Fun_4(Left, A, Last, Left, Lists, Out_3),
        Out_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [llstr(cartn([[1, 2], [3, 4]]))]),
        io:format("~ts~n", [llstr(cartn([[3, 4], [1, 2]]))]),
        io:format("~ts~n", [llstr(cartn([[1, 2], []]))]),
        io:format("~ts~n", [llstr(cartn([[], [1, 2]]))]),
        io:format("~ts~n", [""]),
        io:format("~ts~n", ["["]),
        Fun_6 = fun Fun_6_loop(List) ->
    case List of
        [] -> {};
        [P_2|P_2_rest] ->
            io:format("~ts~n", [(" " ++ liststr(P_2))]),
            Fun_6_loop(P_2_rest)
    end
end,
{} = Fun_6(cartn([[1776, 1789], [7, 12], [4, 14, 23], [0, 1]])),
        io:format("~ts~n", ["]"]),
        io:format("~ts~n", [llstr(cartn([[1, 2, 3], [30], [500, 100]]))]),
        io:format("~ts~n", [llstr(cartn([[1, 2, 3], [], [500, 100]]))]),
        io:format("~ts~n", [""]),
        io:format("~ts~n", [llstr(cartn(nil))]),
        io:format("~ts~n", [llstr(cartn([]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
