#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isnumeric/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (1767384f04) on 2025-07-28 04:46 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

isnumeric(S) ->
    try
        case (S == "NaN") of
        true -> throw({return, true});
        _ -> ok
    end,
        I = 0,
        case (length(S) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((string:substr(S, 0 + 1, 1) == "+") orelse (string:substr(S, 0 + 1, 1) == "-")) of
        true -> case (length(S) == 1) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = 1,
            I_3 = I_2;
        _ -> I_3 = I
    end,
        Digits = false,
        Dot = false,
        Fun_5 = fun Fun_5_loop(Digits, Dot, I_3, S) ->
    case (I_3 < length(S)) of
        true ->
            Ch = string:substr(S, I_3 + 1, 1),
            case ((Ch >= "0") andalso (Ch =< "9")) of
        true -> Digits_2 = true,
            I_4 = (I_3 + 1),
            Digits_3 = Digits_2,
            Dot_4 = Dot,
            Ed_5 = nil,
            Fun_4 = nil,
            I_12 = I_4;
        _ -> case ((Ch == ".") andalso (Dot == false)) of
        true -> Dot_2 = true,
            I_5 = (I_3 + 1),
            Dot_3 = Dot_2,
            Ed_4 = nil,
            Fun_3 = nil,
            I_11 = I_5;
        _ -> case (((Ch == "e") orelse (Ch == "E")) andalso Digits) of
        true -> I_6 = (I_3 + 1),
            case ((I_6 < length(S)) andalso ((string:substr(S, I_6 + 1, 1) == "+") orelse (string:substr(S, I_6 + 1, 1) == "-"))) of
        true -> I_7 = (I_6 + 1),
            I_8 = I_7;
        _ -> I_8 = I_6
    end,
            Ed = false,
            Fun = fun Fun_loop(Ch, Digits, Dot, Ed, I_8, S) ->
    case (((I_8 < length(S)) andalso (string:substr(S, I_8 + 1, 1) >= "0")) andalso (string:substr(S, I_8 + 1, 1) =< "9")) of
        true ->
            Ed_2 = true,
            I_9 = (I_8 + 1),
            Fun_loop(Ch, Digits, Dot, Ed_2, I_9, S);
        _ -> {Ch, Digits, Dot, Ed, I_8, S}
    end
end,
{Ch, Digits, Dot, Ed_2, I_9, S} = Fun(Ch, Digits, Dot, Ed, I_8, S),
            throw({return, (Ed_2 andalso (I_9 == length(S)))}),
            Ed_3 = Ed_2,
            Fun_2 = Fun,
            I_10 = I_9;
        _ -> throw({return, false}),
            Ed_3 = nil,
            Fun_2 = nil,
            I_10 = I_3
    end,
            Dot_3 = Dot,
            Ed_4 = Ed_3,
            Fun_3 = Fun_2,
            I_11 = I_10
    end,
            Digits_3 = Digits,
            Dot_4 = Dot_3,
            Ed_5 = Ed_4,
            Fun_4 = Fun_3,
            I_12 = I_11
    end,
            Fun_5_loop(Digits_3, Dot_4, I_12, S);
        _ -> {Digits, Dot, I_3, S}
    end
end,
{Digits_3, Dot_4, I_12, S} = Fun_5(Digits, Dot, I_3, S),
        Digits_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", ["Are these strings numeric?"]),
        Strs = ["1", "3.14", "-100", "1e2", "NaN", "rose"],
        Fun_6 = fun Fun_6_loop(List, Strs) ->
    case List of
        [] -> {Strs};
        [S_2|S_2_rest] ->
            io:format("~ts~n", [((("  " ++ S_2) ++ " -> ") ++ lists:flatten(io_lib:format("~p", [isnumeric(S_2)])))]),
            Fun_6_loop(S_2_rest, Strs)
    end
end,
{Strs} = Fun_6(Strs, Strs),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
