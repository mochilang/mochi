#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, repeat/2, cubline/4, cuboid/3]).

% Generated by Mochi transpiler v0.10.47 (eaacde736f) on 2025-07-28 11:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_repeat(S, N) when is_binary(S) ->
    binary:copy(S, mochi_to_int(N));
mochi_repeat(S, N) when is_list(S) ->
    string:copies(S, mochi_to_int(N));
mochi_repeat(_, _) -> [].

repeat(Ch, N) ->
    try
        S = "",
        I = 0,
        Fun = fun Fun_loop(Ch, I, N, S) ->
    case (I < N) of
        true ->
            S_2 = (S ++ Ch),
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, N, S_2);
        _ -> {Ch, I, N, S}
    end
end,
{Ch, I_2, N, S_2} = Fun(Ch, I, N, S),
        S_2
    catch {return, Ret} -> Ret end.

cubline(N_2, Dx, Dy, Cde) ->
    try
        Line = (mochi_repeat(" ", (N_2 + 1)) ++ string:substr(Cde, 0 + 1, (1 - 0))),
        D = ((9 * Dx) - 1),
        Fun_2 = fun Fun_2_loop(Cde, D, Dx, Dy, Line, N_2) ->
    case (D > 0) of
        true ->
            Line_2 = (Line ++ string:substr(Cde, 1 + 1, (2 - 1))),
            D_2 = (D - 1),
            Fun_2_loop(Cde, D_2, Dx, Dy, Line_2, N_2);
        _ -> {Cde, D, Dx, Dy, Line, N_2}
    end
end,
{Cde, D_2, Dx, Dy, Line_2, N_2} = Fun_2(Cde, D, Dx, Dy, Line, N_2),
        Line_3 = (Line_2 ++ string:substr(Cde, 0 + 1, (1 - 0))),
        Line_4 = ((Line_3 ++ mochi_repeat(" ", Dy)) ++ string:substr(Cde, 2 + 1, length(Cde) - 2)),
        io:format("~ts~n", [Line_4]),
        nil
    catch {return, Ret} -> Ret end.

cuboid(Dx_2, Dy_2, Dz) ->
    try
        io:format("~ts~n", [(((((("cuboid " ++ lists:flatten(io_lib:format("~p", [Dx_2]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [Dy_2]))) ++ " ") ++ lists:flatten(io_lib:format("~p", [Dz]))) ++ ":")]),
        cubline((Dy_2 + 1), Dx_2, 0, "+-"),
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(Dx_2, Dy_2, Dz, I_3) ->
    case (I_3 =< Dy_2) of
        true ->
            cubline(((Dy_2 - I_3) + 1), Dx_2, (I_3 - 1), "/ |"),
            I_4 = (I_3 + 1),
            Fun_3_loop(Dx_2, Dy_2, Dz, I_4);
        _ -> {Dx_2, Dy_2, Dz, I_3}
    end
end,
{Dx_2, Dy_2, Dz, I_4} = Fun_3(Dx_2, Dy_2, Dz, I_3),
        cubline(0, Dx_2, Dy_2, "+-|"),
        J = (((4 * Dz) - Dy_2) - 2),
        Fun_4 = fun Fun_4_loop(Dx_2, Dy_2, Dz, I_4, J) ->
    case (J > 0) of
        true ->
            cubline(0, Dx_2, Dy_2, "| |"),
            J_2 = (J - 1),
            Fun_4_loop(Dx_2, Dy_2, Dz, I_4, J_2);
        _ -> {Dx_2, Dy_2, Dz, I_4, J}
    end
end,
{Dx_2, Dy_2, Dz, I_4, J_2} = Fun_4(Dx_2, Dy_2, Dz, I_4, J),
        cubline(0, Dx_2, Dy_2, "| +"),
        I_5 = 1,
        Fun_5 = fun Fun_5_loop(Dx_2, Dy_2, Dz, I_5, J_2) ->
    case (I_5 =< Dy_2) of
        true ->
            cubline(0, Dx_2, (Dy_2 - I_5), "| /"),
            I_6 = (I_5 + 1),
            Fun_5_loop(Dx_2, Dy_2, Dz, I_6, J_2);
        _ -> {Dx_2, Dy_2, Dz, I_5, J_2}
    end
end,
{Dx_2, Dy_2, Dz, I_6, J_2} = Fun_5(Dx_2, Dy_2, Dz, I_5, J_2),
        cubline(0, Dx_2, 0, "+-\n"),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    cuboid(2, 3, 4),
    io:format("~ts~n", [""]),
    cuboid(1, 1, 1),
    io:format("~ts~n", [""]),
    cuboid(6, 2, 1),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
