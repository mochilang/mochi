#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.42 (6c7447aec0) on 2025-07-27 21:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('daysInMonth', [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]),
    erlang:put('start', [3, 6, 6, 2, 4, 0, 2, 5, 1, 3, 6, 1]),
    erlang:put('months', [" January ", " February", "  March  ", "  April  ", "   May   ", "   June  ", "   July  ", "  August ", "September", " October ", " November", " December"]),
    erlang:put('days', ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]),
    io:format("~ts~n", ["                                [SNOOPY]\n"]),
    io:format("~ts~n", ["                                  1969\n"]),
    erlang:put('qtr', 0),
    Fun_7 = fun Fun_7_loop() ->
    case (erlang:get('qtr') < 4) of
        true ->
            Mi = 0,
            Fun = fun Fun_loop(Mi) ->
    case (Mi < 3) of
        true ->
            io:format("~ts ~p~n", [(("      " ++ lists:nth(((erlang:get('qtr') * 3) + Mi) + 1, erlang:get('months'))) ++ "           "), false]),
            Mi_2 = (Mi + 1),
            Fun_loop(Mi_2);
        _ -> {Mi}
    end
end,
{Mi_2} = Fun(Mi),
            io:format("~ts~n", [""]),
            Mi_3 = 0,
            Fun_3 = fun Fun_3_loop(Mi_3) ->
    case (Mi_3 < 3) of
        true ->
            D = 0,
            Fun_2 = fun Fun_2_loop(D, Mi_3) ->
    case (D < 7) of
        true ->
            io:format("~ts ~p~n", [(" " ++ lists:nth(D + 1, erlang:get('days'))), false]),
            D_2 = (D + 1),
            Fun_2_loop(D_2, Mi_3);
        _ -> {D, Mi_3}
    end
end,
{D_2, Mi_3} = Fun_2(D, Mi_3),
            io:format("~ts ~p~n", ["     ", false]),
            Mi_4 = (Mi_3 + 1),
            Fun_3_loop(Mi_4);
        _ -> {Mi_3}
    end
end,
{Mi_4} = Fun_3(Mi_3),
            io:format("~ts~n", [""]),
            Week = 0,
            Fun_6 = fun Fun_6_loop(Mi_4, Week) ->
    case (Week < 6) of
        true ->
            Mi_5 = 0,
            Fun_5 = fun Fun_5_loop(Mi_5, Week) ->
    case (Mi_5 < 3) of
        true ->
            Day = 0,
            Fun_4 = fun Fun_4_loop(Day, Mi_5, Week) ->
    case (Day < 7) of
        true ->
            M = ((erlang:get('qtr') * 3) + Mi_5),
            Val = ((((Week * 7) + Day) - lists:nth(M + 1, erlang:get('start'))) + 1),
            case ((Val >= 1) andalso (Val =< lists:nth(M + 1, erlang:get('daysInMonth')))) of
        true -> S = lists:flatten(io_lib:format("~p", [Val])),
            case (length(S) == 1) of
        true -> S_2 = (" " ++ S),
            S_3 = S_2;
        _ -> S_3 = S
    end,
            io:format("~ts ~p~n", [(" " ++ S_3), false]),
            S_4 = S_3;
        _ -> io:format("~ts ~p~n", ["   ", false]),
            S_4 = nil
    end,
            Day_2 = (Day + 1),
            Fun_4_loop(Day_2, Mi_5, Week);
        _ -> {Day, Mi_5, Week}
    end
end,
{Day_2, Mi_5, Week} = Fun_4(Day, Mi_5, Week),
            io:format("~ts ~p~n", ["     ", false]),
            Mi_6 = (Mi_5 + 1),
            Fun_5_loop(Mi_6, Week);
        _ -> {Mi_5, Week}
    end
end,
{Mi_6, Week} = Fun_5(Mi_5, Week),
            io:format("~ts~n", [""]),
            Week_2 = (Week + 1),
            Fun_6_loop(Mi_6, Week_2);
        _ -> {Mi_4, Week}
    end
end,
{Mi_6, Week_2} = Fun_6(Mi_4, Week),
            io:format("~ts~n", [""]),
            erlang:put('qtr', (erlang:get('qtr') + 1)),
            Fun_7_loop();
        _ -> {}
    end
end,
{} = Fun_7(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
