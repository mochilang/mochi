#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrtapprox/1, newrsdv/0, add/2, sd/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

sqrtapprox(X) ->
    try
        case (X =< 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        G = X,
        I = 0,
        Fun = fun Fun_loop(G, I, X) ->
    case (I < 20) of
        true ->
            G_2 = ((G + (X / G)) / 2),
            I_2 = (I + 1),
            Fun_loop(G_2, I_2, X);
        _ -> {G, I, X}
    end
end,
{G_2, I_2, X} = Fun(G, I, X),
        G_2
    catch {return, Ret} -> Ret end.

newrsdv() ->
    try
        #{"n" => 0, "a" => 0, "q" => 0}
    catch {return, Ret} -> Ret end.

add(R, X_2) ->
    try
        N1 = (maps:get("n", R, nil) + 1),
        A1 = (maps:get("a", R, nil) + ((X_2 - maps:get("a", R, nil)) / N1)),
        Q1 = (maps:get("q", R, nil) + ((X_2 - maps:get("a", R, nil)) * (X_2 - A1))),
        #{"n" => N1, "a" => A1, "q" => Q1}
    catch {return, Ret} -> Ret end.

sd(R_2) ->
    try
        sqrtapprox((maps:get("q", R_2, nil) / maps:get("n", R_2, nil)))
    catch {return, Ret} -> Ret end.

main() ->
    try
        R_3 = newrsdv(),
        Fun_2 = fun Fun_2_loop(List, R_3) ->
    case List of
        [] -> {R_3};
        [X_3|X_3_rest] ->
            R_4 = add(R_3, X_3),
            io:format("~ts~n", [lists:flatten(io_lib:format("~p", [sd(R_4)]))]),
            Fun_2_loop(X_3_rest, R_4)
    end
end,
{R_4} = Fun_2([2, 4, 4, 4, 5, 5, 7, 9], R_3),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
