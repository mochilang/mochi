#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.40 (6bb4e4bd23) on 2025-07-25 19:02 +0700

main(_) ->
    erlang:put('doors', []),
    Fun = fun Fun_loop(List) ->
    case List of
        [] -> {};
        [I|I_rest] ->
            erlang:put('doors', lists:append(erlang:get('doors'), [false])),
            Fun_loop(I_rest)
    end
end,
{} = Fun(lists:seq(0, (100) - 1)),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [Pass|Pass_rest] ->
            Idx = (Pass - 1),
            Fun_3 = fun Fun_3_loop(Idx, Pass) ->
    case (Idx < 100) of
        true ->
            Doors = erlang:get('doors'),
            Doors_2 = lists:sublist(Doors, Idx) ++ [not lists:nth(Idx + 1, erlang:get('doors'))] ++ lists:nthtail(Idx + 1, Doors),
            erlang:put('doors', Doors_2),
            Idx_2 = (Idx + Pass),
            Fun_3_loop(Idx_2, Pass);
        _ -> {Idx, Pass}
    end
end,
{Idx_2, Pass} = Fun_3(Idx, Pass),
            Fun_2_loop(Pass_rest)
    end
end,
{} = Fun_2(lists:seq(1, (101) - 1)),
    Fun_4 = fun Fun_4_loop(List) ->
    case List of
        [] -> {};
        [Row|Row_rest] ->
            Line = "",
            Fun_5 = fun Fun_5_loop(List, Line, Row) ->
    case List of
        [] -> {Line, Row};
        [Col|Col_rest] ->
            Idx_3 = ((Row * 10) + Col),
            case lists:nth(Idx_3 + 1, erlang:get('doors')) of
        true -> Line_2 = (Line ++ "1"),
            Line_4 = Line_2;
        _ -> Line_3 = (Line ++ "0"),
            Line_4 = Line_3
    end,
            case (Col < 9) of
        true -> Line_5 = (Line_4 ++ " "),
            Line_6 = Line_5;
        _ -> Line_6 = Line_4
    end,
            Fun_5_loop(Col_rest, Line_6, Row)
    end
end,
{Line_6, Row} = Fun_5(lists:seq(0, (10) - 1), Line, Row),
            io:format("~ts~n", [Line_6]),
            Fun_4_loop(Row_rest)
    end
end,
{} = Fun_4(lists:seq(0, (10) - 1)).
