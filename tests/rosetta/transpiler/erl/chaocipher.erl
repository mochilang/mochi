#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, rotate/2, scrambleleft/1, scrambleright/1, chao/2, main/0]).

% Generated by Mochi transpiler v0.10.42 (bbaa8b9136) on 2025-07-28 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, Ret} -> Ret end.

rotate(S_2, N) ->
    try
        (string:substr(S_2, N + 1, length(S_2) - N) ++ string:substr(S_2, 1, (N - 0)))
    catch {return, Ret} -> Ret end.

scrambleleft(S_3) ->
    try
        (((string:substr(S_3, 0 + 1, (1 - 0)) ++ string:substr(S_3, 2 + 1, (14 - 2))) ++ string:substr(S_3, 1 + 1, (2 - 1))) ++ string:substr(S_3, 14 + 1, length(S_3) - 14))
    catch {return, Ret} -> Ret end.

scrambleright(S_4) ->
    try
        ((((string:substr(S_4, 1 + 1, (3 - 1)) ++ string:substr(S_4, 4 + 1, (15 - 4))) ++ string:substr(S_4, 3 + 1, (4 - 3))) ++ string:substr(S_4, 15 + 1, length(S_4) - 15)) ++ string:substr(S_4, 0 + 1, (1 - 0)))
    catch {return, Ret} -> Ret end.

chao(Text, Encode) ->
    try
        Left = "HXUCZVAMDSLKPEFJRIGTWOBNYQ",
        Right = "PTLNBQDEOYSFAVZKGJRIHWXUMC",
        Out = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Encode, I_3, Left, Out, Right, Text) ->
    case (I_3 < length(Text)) of
        true ->
            Ch_2 = string:substr(Text, I_3 + 1, ((I_3 + 1) - I_3)),
            Idx = 0,
            case Encode of
        true -> Idx_2 = mochi_index_of(Right, Ch_2),
            Out_2 = (Out ++ string:substr(Left, Idx_2 + 1, ((Idx_2 + 1) - Idx_2))),
            Idx_4 = Idx_2,
            Out_4 = Out_2;
        _ -> Idx_3 = mochi_index_of(Left, Ch_2),
            Out_3 = (Out ++ string:substr(Right, Idx_3 + 1, ((Idx_3 + 1) - Idx_3))),
            Idx_4 = Idx_3,
            Out_4 = Out_3
    end,
            Left_2 = rotate(Left, Idx_4),
            Right_2 = rotate(Right, Idx_4),
            Left_3 = scrambleleft(Left_2),
            Right_3 = scrambleright(Right_2),
            I_4 = (I_3 + 1),
            Fun_2_loop(Encode, I_4, Left_3, Out_4, Right_3, Text);
        _ -> {Encode, I_3, Left, Out, Right, Text}
    end
end,
{Encode, I_4, Left_3, Out_4, Right_3, Text} = Fun_2(Encode, I_3, Left, Out, Right, Text),
        Out_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Plain = "WELLDONEISBETTERTHANWELLSAID",
        Cipher = chao("WELLDONEISBETTERTHANWELLSAID", true),
        io:format("~ts~n", ["WELLDONEISBETTERTHANWELLSAID"]),
        io:format("~ts~n", [Cipher]),
        io:format("~ts~n", [chao(Cipher, false)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
