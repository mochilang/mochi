#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mod/2, isprime/1, pad/2, carmichael/1]).

% Generated by Mochi transpiler v0.10.55 (b43d15e5bc) on 2025-08-03 11:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

mod(N, M) ->
    try
        (((N rem M) + M) rem M)
    catch {return, Ret} -> Ret end.

isprime(N_2) ->
    try
        case (N_2 < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N_2 rem 2) == 0) of
        true -> throw({return, (N_2 == 2)});
        _ -> ok
    end,
        case ((N_2 rem 3) == 0) of
        true -> throw({return, (N_2 == 3)});
        _ -> ok
    end,
        D = 5,
        Fun = fun Fun_loop(D, N_2) ->
    case ((D * D) =< N_2) of
        true ->
            case ((N_2 rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            case ((N_2 rem D_2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_3 = (D_2 + 4),
            Fun_loop(D_3, N_2);
        _ -> {D, N_2}
    end
end,
{D_3, N_2} = Fun(D, N_2),
        true
    catch {return, Ret} -> Ret end.

pad(N_3, Width) ->
    try
        S = lists:flatten(io_lib:format("~p", [N_3])),
        Fun_2 = fun Fun_2_loop(N_3, S, Width) ->
    case (length(S) < Width) of
        true ->
            S_2 = (" " ++ S),
            Fun_2_loop(N_3, S_2, Width);
        _ -> {N_3, S, Width}
    end
end,
{N_3, S_2, Width} = Fun_2(N_3, S, Width),
        S_2
    catch {return, Ret} -> Ret end.

carmichael(P1) ->
    try
        Fun_3 = fun Fun_3_loop(List, P1) ->
    case List of
        [] -> {P1};
        [H3|H3_rest] ->
        try
            Fun_4 = fun Fun_4_loop(List, H3, P1) ->
    case List of
        [] -> {H3, P1};
        [D_4|D_4_rest] ->
        try
            case (((((H3 + P1) * (P1 - 1)) rem D_4) == 0) andalso (mod((-P1 * P1), H3) == (D_4 rem H3))) of
        true -> P2 = (1 + (((P1 - 1) * (H3 + P1)) div D_4)),
            case mochi_not(isprime(P2)) of
        true -> throw({continue, H3, P1});
        _ -> ok
    end,
            P3 = (1 + ((P1 * P2) div H3)),
            case mochi_not(isprime(P3)) of
        true -> throw({continue, H3, P1});
        _ -> ok
    end,
            case (((P2 * P3) rem (P1 - 1)) /= 1) of
        true -> throw({continue, H3, P1});
        _ -> ok
    end,
            C = ((P1 * P2) * P3),
            io:format("~ts~n", [((((((pad(P1, 2) ++ "   ") ++ pad(P2, 4)) ++ "   ") ++ pad(P3, 5)) ++ "     ") ++ lists:flatten(io_lib:format("~p", [C])))]),
            C_2 = C,
            P2_2 = P2,
            P3_2 = P3;
        _ -> C_2 = nil,
            P2_2 = nil,
            P3_2 = nil
    end,
            Fun_4_loop(D_4_rest, H3, P1)
        catch
            {continue, C0, C1} -> Fun_4_loop(D_4_rest, C0, C1);
            {break, B0, B1} -> {B0, B1};
            break -> {H3, P1}
        end
    end
end,
{H3, P1} = Fun_4(lists:seq(1, ((H3 + P1)) - 1), H3, P1),
            Fun_3_loop(H3_rest, P1)
        catch
            {continue, C0} -> Fun_3_loop(H3_rest, C0);
            {break, B0} -> {B0};
            break -> {P1}
        end
    end
end,
{P1} = Fun_3(lists:seq(2, (P1) - 1), P1),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", ["The following are Carmichael munbers for p1 <= 61:\n"]),
    io:format("~ts~n", ["p1     p2      p3     product"]),
    io:format("~ts~n", ["==     ==      ==     ======="]),
    Fun_5 = fun Fun_5_loop(List) ->
    case List of
        [] -> {};
        [P1_2|P1_2_rest] ->
            case isprime(P1_2) of
        true -> carmichael(P1_2);
        _ -> ok
    end,
            Fun_5_loop(P1_2_rest)
    end
end,
{} = Fun_5(lists:seq(2, (62) - 1)),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
