#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrtapprox/1, makesym/2, unpacksym/1, printmat/1, printsym/1, printlower/1, choleskylower/1, demo/1]).

% Generated by Mochi transpiler v0.10.41 (cccd67ba44) on 2025-07-26 23:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

sqrtapprox(X) ->
    try
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = ((Guess + (X / Guess)) / 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

makesym(Order, Elements) ->
    try
        #{"order" => Order, "ele" => Elements}
    catch {return, Ret} -> Ret end.

unpacksym(M) ->
    try
        N = maps:get("order", M, nil),
        Ele = maps:get("ele", M, nil),
        Mat = [],
        Idx = 0,
        R = 0,
        Fun_4 = fun Fun_4_loop(Ele, Idx, M, Mat, N, R) ->
    case (R < N) of
        true ->
            Row = [],
            C = 0,
            Fun_2 = fun Fun_2_loop(C, Ele, Idx, M, Mat, N, R, Row) ->
    case (C =< R) of
        true ->
            Row_2 = lists:append(Row, [lists:nth(Idx + 1, Ele)]),
            Idx_2 = (Idx + 1),
            C_2 = (C + 1),
            Fun_2_loop(C_2, Ele, Idx_2, M, Mat, N, R, Row_2);
        _ -> {C, Ele, Idx, M, Mat, N, R, Row}
    end
end,
{C_2, Ele, Idx_2, M, Mat, N, R, Row_2} = Fun_2(C, Ele, Idx, M, Mat, N, R, Row),
            Fun_3 = fun Fun_3_loop(C_2, Ele, Idx_2, M, Mat, N, R, Row_2) ->
    case (C_2 < N) of
        true ->
            Row_3 = lists:append(Row_2, [0]),
            C_3 = (C_2 + 1),
            Fun_3_loop(C_3, Ele, Idx_2, M, Mat, N, R, Row_3);
        _ -> {C_2, Ele, Idx_2, M, Mat, N, R, Row_2}
    end
end,
{C_3, Ele, Idx_2, M, Mat, N, R, Row_3} = Fun_3(C_2, Ele, Idx_2, M, Mat, N, R, Row_2),
            Mat_2 = lists:append(Mat, [Row_3]),
            R_2 = (R + 1),
            Fun_4_loop(Ele, Idx_2, M, Mat_2, N, R_2);
        _ -> {Ele, Idx, M, Mat, N, R}
    end
end,
{Ele, Idx_2, M, Mat_2, N, R_2} = Fun_4(Ele, Idx, M, Mat, N, R),
        R_3 = 0,
        Fun_6 = fun Fun_6_loop(Ele, Idx_2, M, Mat_2, N, R_3) ->
    case (R_3 < N) of
        true ->
            C_4 = (R_3 + 1),
            Fun_5 = fun Fun_5_loop(C_4, Ele, Idx_2, M, Mat_2, N, R_3) ->
    case (C_4 < N) of
        true ->
            Tmp = lists:nth(R_3 + 1, Mat_2),
            Tmp_2 = lists:sublist(Tmp, C_4) ++ [lists:nth(R_3 + 1, lists:nth(C_4 + 1, Mat_2))] ++ lists:nthtail(C_4 + 1, Tmp),
            Mat_3 = lists:sublist(Mat_2, R_3) ++ [Tmp_2] ++ lists:nthtail(R_3 + 1, Mat_2),
            C_5 = (C_4 + 1),
            Fun_5_loop(C_5, Ele, Idx_2, M, Mat_3, N, R_3);
        _ -> {C_4, Ele, Idx_2, M, Mat_2, N, R_3}
    end
end,
{C_5, Ele, Idx_2, M, Mat_3, N, R_3} = Fun_5(C_4, Ele, Idx_2, M, Mat_2, N, R_3),
            R_4 = (R_3 + 1),
            Fun_6_loop(Ele, Idx_2, M, Mat_3, N, R_4);
        _ -> {Ele, Idx_2, M, Mat_2, N, R_3}
    end
end,
{Ele, Idx_2, M, Mat_3, N, R_4} = Fun_6(Ele, Idx_2, M, Mat_2, N, R_3),
        Mat_3
    catch {return, Ret} -> Ret end.

printmat(M_2) ->
    try
        I_3 = 0,
        Fun_8 = fun Fun_8_loop(I_3, M_2) ->
    case (I_3 < length(M_2)) of
        true ->
            Line = "",
            J = 0,
            Fun_7 = fun Fun_7_loop(I_3, J, Line, M_2) ->
    case (J < length(lists:nth(I_3 + 1, M_2))) of
        true ->
            Line_2 = (Line ++ lists:flatten(io_lib:format("~p", [lists:nth(J + 1, lists:nth(I_3 + 1, M_2))]))),
            case (J < (length(lists:nth(I_3 + 1, M_2)) - 1)) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            J_2 = (J + 1),
            Fun_7_loop(I_3, J_2, Line_4, M_2);
        _ -> {I_3, J, Line, M_2}
    end
end,
{I_3, J_2, Line_4, M_2} = Fun_7(I_3, J, Line, M_2),
            io:format("~ts~n", [Line_4]),
            I_4 = (I_3 + 1),
            Fun_8_loop(I_4, M_2);
        _ -> {I_3, M_2}
    end
end,
{I_4, M_2} = Fun_8(I_3, M_2),
        nil
    catch {return, Ret} -> Ret end.

printsym(M_3) ->
    try
        printmat(unpacksym(M_3)),
        nil
    catch {return, Ret} -> Ret end.

printlower(M_4) ->
    try
        N_2 = maps:get("order", M_4, nil),
        Ele_2 = maps:get("ele", M_4, nil),
        Mat_4 = [],
        Idx_3 = 0,
        R_5 = 0,
        Fun_11 = fun Fun_11_loop(Ele_2, Idx_3, M_4, Mat_4, N_2, R_5) ->
    case (R_5 < N_2) of
        true ->
            Row_4 = [],
            C_6 = 0,
            Fun_9 = fun Fun_9_loop(C_6, Ele_2, Idx_3, M_4, Mat_4, N_2, R_5, Row_4) ->
    case (C_6 =< R_5) of
        true ->
            Row_5 = lists:append(Row_4, [lists:nth(Idx_3 + 1, Ele_2)]),
            Idx_4 = (Idx_3 + 1),
            C_7 = (C_6 + 1),
            Fun_9_loop(C_7, Ele_2, Idx_4, M_4, Mat_4, N_2, R_5, Row_5);
        _ -> {C_6, Ele_2, Idx_3, M_4, Mat_4, N_2, R_5, Row_4}
    end
end,
{C_7, Ele_2, Idx_4, M_4, Mat_4, N_2, R_5, Row_5} = Fun_9(C_6, Ele_2, Idx_3, M_4, Mat_4, N_2, R_5, Row_4),
            Fun_10 = fun Fun_10_loop(C_7, Ele_2, Idx_4, M_4, Mat_4, N_2, R_5, Row_5) ->
    case (C_7 < N_2) of
        true ->
            Row_6 = lists:append(Row_5, [0]),
            C_8 = (C_7 + 1),
            Fun_10_loop(C_8, Ele_2, Idx_4, M_4, Mat_4, N_2, R_5, Row_6);
        _ -> {C_7, Ele_2, Idx_4, M_4, Mat_4, N_2, R_5, Row_5}
    end
end,
{C_8, Ele_2, Idx_4, M_4, Mat_4, N_2, R_5, Row_6} = Fun_10(C_7, Ele_2, Idx_4, M_4, Mat_4, N_2, R_5, Row_5),
            Mat_5 = lists:append(Mat_4, [Row_6]),
            R_6 = (R_5 + 1),
            Fun_11_loop(Ele_2, Idx_4, M_4, Mat_5, N_2, R_6);
        _ -> {Ele_2, Idx_3, M_4, Mat_4, N_2, R_5}
    end
end,
{Ele_2, Idx_4, M_4, Mat_5, N_2, R_6} = Fun_11(Ele_2, Idx_3, M_4, Mat_4, N_2, R_5),
        printmat(Mat_5),
        nil
    catch {return, Ret} -> Ret end.

choleskylower(A) ->
    try
        N_3 = maps:get("order", A, nil),
        Ae = maps:get("ele", A, nil),
        Le = [],
        Idx_5 = 0,
        Fun_12 = fun Fun_12_loop(A, Ae, Idx_5, Le, N_3) ->
    case (Idx_5 < length(Ae)) of
        true ->
            Le_2 = lists:append(Le, [0]),
            Idx_6 = (Idx_5 + 1),
            Fun_12_loop(A, Ae, Idx_6, Le_2, N_3);
        _ -> {A, Ae, Idx_5, Le, N_3}
    end
end,
{A, Ae, Idx_6, Le_2, N_3} = Fun_12(A, Ae, Idx_5, Le, N_3),
        Row_7 = 1,
        Col = 1,
        Dr = 0,
        Dc = 0,
        I_5 = 0,
        Fun_15 = fun Fun_15_loop(A, Ae, Col, Dc, Dr, I_5, Idx_6, Le_2, N_3, Row_7) ->
    case (I_5 < length(Ae)) of
        true ->
            E = lists:nth(I_5 + 1, Ae),
            case (I_5 < Dr) of
        true -> D = ((E - lists:nth(I_5 + 1, Le_2)) / lists:nth(Dc + 1, Le_2)),
            Le_3 = lists:sublist(Le_2, I_5) ++ [D] ++ lists:nthtail(I_5 + 1, Le_2),
            Ci = Col,
            Cx = Dc,
            J_3 = (I_5 + 1),
            Fun_13 = fun Fun_13_loop(A, Ae, Ci, Col, Cx, D, Dc, Dr, E, I_5, Idx_6, J_3, Le_3, N_3, Row_7) ->
    case (J_3 =< Dr) of
        true ->
            Cx_2 = (Cx + Ci),
            Ci_2 = (Ci + 1),
            Le_4 = lists:sublist(Le_3, J_3) ++ [(lists:nth(J_3 + 1, Le_3) + (D * lists:nth(Cx_2 + 1, Le_3)))] ++ lists:nthtail(J_3 + 1, Le_3),
            J_4 = (J_3 + 1),
            Fun_13_loop(A, Ae, Ci_2, Col, Cx_2, D, Dc, Dr, E, I_5, Idx_6, J_4, Le_4, N_3, Row_7);
        _ -> {A, Ae, Ci, Col, Cx, D, Dc, Dr, E, I_5, Idx_6, J_3, Le_3, N_3, Row_7}
    end
end,
{A, Ae, Ci_2, Col, Cx_2, D, Dc, Dr, E, I_5, Idx_6, J_4, Le_4, N_3, Row_7} = Fun_13(A, Ae, Ci, Col, Cx, D, Dc, Dr, E, I_5, Idx_6, J_3, Le_3, N_3, Row_7),
            Col_2 = (Col + 1),
            Dc_2 = (Dc + Col_2),
            Ci_3 = Ci_2,
            Col_4 = Col_2,
            Cx_3 = Cx_2,
            D_2 = D,
            Dc_4 = Dc_2,
            Dr_3 = Dr,
            Fun_14 = Fun_13,
            J_5 = J_4,
            Le_6 = Le_4,
            Row_9 = Row_7;
        _ -> Le_5 = lists:sublist(Le_2, I_5) ++ [sqrtapprox((E - lists:nth(I_5 + 1, Le_2)))] ++ lists:nthtail(I_5 + 1, Le_2),
            Row_8 = (Row_7 + 1),
            Dr_2 = (Dr + Row_8),
            Col_3 = 1,
            Dc_3 = 0,
            Ci_3 = nil,
            Col_4 = Col_3,
            Cx_3 = nil,
            D_2 = nil,
            Dc_4 = Dc_3,
            Dr_3 = Dr_2,
            Fun_14 = Fun_12,
            J_5 = nil,
            Le_6 = Le_5,
            Row_9 = Row_8
    end,
            I_6 = (I_5 + 1),
            Fun_15_loop(A, Ae, Col_4, Dc_4, Dr_3, I_6, Idx_6, Le_6, N_3, Row_9);
        _ -> {A, Ae, Col, Dc, Dr, I_5, Idx_6, Le_2, N_3, Row_7}
    end
end,
{A, Ae, Col_4, Dc_4, Dr_3, I_6, Idx_6, Le_6, N_3, Row_9} = Fun_15(A, Ae, Col, Dc, Dr, I_5, Idx_6, Le_2, N_3, Row_7),
        #{"order" => N_3, "ele" => Le_6}
    catch {return, Ret} -> Ret end.

demo(A_2) ->
    try
        io:format("~ts~n", ["A:"]),
        printsym(A_2),
        io:format("~ts~n", ["L:"]),
        L = choleskylower(A_2),
        printlower(L),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    demo(makesym(3, [25, 15, 18, -5, 0, 11])),
    demo(makesym(4, [18, 22, 70, 54, 86, 174, 42, 62, 134, 106])),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
