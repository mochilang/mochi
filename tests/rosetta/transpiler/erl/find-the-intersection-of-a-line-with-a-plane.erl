#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, add/2, sub/2, mul/2, dot/2, intersectpoint/4, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

add(A, B) ->
    try
        #{"x" => (maps:get("x", A, nil) + maps:get("x", B, nil)), "y" => (maps:get("y", A, nil) + maps:get("y", B, nil)), "z" => (maps:get("z", A, nil) + maps:get("z", B, nil))}
    catch {return, Ret} -> Ret end.

sub(A_2, B_2) ->
    try
        #{"x" => (maps:get("x", A_2, nil) - maps:get("x", B_2, nil)), "y" => (maps:get("y", A_2, nil) - maps:get("y", B_2, nil)), "z" => (maps:get("z", A_2, nil) - maps:get("z", B_2, nil))}
    catch {return, Ret} -> Ret end.

mul(V, S) ->
    try
        #{"x" => (maps:get("x", V, nil) * S), "y" => (maps:get("y", V, nil) * S), "z" => (maps:get("z", V, nil) * S)}
    catch {return, Ret} -> Ret end.

dot(A_3, B_3) ->
    try
        (((maps:get("x", A_3, nil) * maps:get("x", B_3, nil)) + (maps:get("y", A_3, nil) * maps:get("y", B_3, nil))) + (maps:get("z", A_3, nil) * maps:get("z", B_3, nil)))
    catch {return, Ret} -> Ret end.

intersectpoint(Rv, Rp, Pn, Pp) ->
    try
        Diff = sub(Rp, Pp),
        Prod1 = dot(Diff, Pn),
        Prod2 = dot(Rv, Pn),
        Prod3 = (Prod1 / Prod2),
        sub(Rp, mul(Rv, Prod3))
    catch {return, Ret} -> Ret end.

main() ->
    try
        Rv_2 = #{"x" => 0, "y" => -1, "z" => -1},
        Rp_2 = #{"x" => 0, "y" => 0, "z" => 10},
        Pn_2 = #{"x" => 0, "y" => 0, "z" => 1},
        Pp_2 = #{"x" => 0, "y" => 0, "z" => 5},
        Ip = intersectpoint(Rv_2, Rp_2, Pn_2, Pp_2),
        io:format("~ts~n", [(((((("The ray intersects the plane at (" ++ lists:flatten(io_lib:format("~p", [maps:get("x", Ip, nil)]))) ++ ", ") ++ lists:flatten(io_lib:format("~p", [maps:get("y", Ip, nil)]))) ++ ", ") ++ lists:flatten(io_lib:format("~p", [maps:get("z", Ip, nil)]))) ++ ")")]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
