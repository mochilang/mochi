#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.55 (b43d15e5bc) on 2025-08-03 11:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('n', 15),
    erlang:put('t', []),
    Fun = fun Fun_loop(List) ->
    case List of
        [] -> {};
        [_|__rest] ->
            erlang:put('t', lists:append(erlang:get('t'), [0])),
            Fun_loop(__rest)
    end
end,
{} = Fun(lists:seq(0, ((15 + 2)) - 1)),
    T = erlang:get('t'),
    T_2 = lists:sublist(T, 1) ++ [1] ++ lists:nthtail(1 + 1, T),
    erlang:put('t', T_2),
    Fun_2 = fun Fun_2_loop(List, T_2) ->
    case List of
        [] -> {T_2};
        [I|I_rest] ->
            J = I,
            Fun_3 = fun Fun_3_loop(I, J, T_2) ->
    case (J > 1) of
        true ->
            T_3 = erlang:get('t'),
            T_4 = lists:sublist(T_3, J) ++ [((case erlang:is_map(erlang:get('t')) of true -> maps:get(J, erlang:get('t'), nil); _ -> lists:nth(J + 1, erlang:get('t')) end) + (case erlang:is_map(erlang:get('t')) of true -> maps:get((J - 1), erlang:get('t'), nil); _ -> lists:nth((J - 1) + 1, erlang:get('t')) end))] ++ lists:nthtail(J + 1, T_3),
            erlang:put('t', T_4),
            J_2 = (J - 1),
            Fun_3_loop(I, J_2, T_4);
        _ -> {I, J, T_2}
    end
end,
{I, J_2, T_4} = Fun_3(I, J, T_2),
            T_5 = erlang:get('t'),
            T_6 = lists:sublist(T_5, mochi_to_int((I + 1))) ++ [(case erlang:is_map(erlang:get('t')) of true -> maps:get(I, erlang:get('t'), nil); _ -> lists:nth(I + 1, erlang:get('t')) end)] ++ lists:nthtail(mochi_to_int((I + 1)) + 1, T_5),
            erlang:put('t', T_6),
            J_3 = (I + 1),
            Fun_4 = fun Fun_4_loop(I, J_3, T_6) ->
    case (J_3 > 1) of
        true ->
            T_7 = erlang:get('t'),
            T_8 = lists:sublist(T_7, J_3) ++ [((case erlang:is_map(erlang:get('t')) of true -> maps:get(J_3, erlang:get('t'), nil); _ -> lists:nth(J_3 + 1, erlang:get('t')) end) + (case erlang:is_map(erlang:get('t')) of true -> maps:get((J_3 - 1), erlang:get('t'), nil); _ -> lists:nth((J_3 - 1) + 1, erlang:get('t')) end))] ++ lists:nthtail(J_3 + 1, T_7),
            erlang:put('t', T_8),
            J_4 = (J_3 - 1),
            Fun_4_loop(I, J_4, T_8);
        _ -> {I, J_3, T_6}
    end
end,
{I, J_4, T_8} = Fun_4(I, J_3, T_6),
            Cat = ((case erlang:is_map(erlang:get('t')) of true -> maps:get((I + 1), erlang:get('t'), nil); _ -> lists:nth((I + 1) + 1, erlang:get('t')) end) - (case erlang:is_map(erlang:get('t')) of true -> maps:get(I, erlang:get('t'), nil); _ -> lists:nth(I + 1, erlang:get('t')) end)),
            case (I < 10) of
        true -> io:format("~ts~n", [(((" " ++ lists:flatten(io_lib:format("~p", [I]))) ++ " : ") ++ lists:flatten(io_lib:format("~p", [Cat])))]);
        _ -> io:format("~ts~n", [((lists:flatten(io_lib:format("~p", [I])) ++ " : ") ++ lists:flatten(io_lib:format("~p", [Cat])))])
    end,
            Fun_2_loop(I_rest, T_8)
    end
end,
{T_8} = Fun_2(lists:seq(1, ((15 + 1)) - 1), T_2),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
