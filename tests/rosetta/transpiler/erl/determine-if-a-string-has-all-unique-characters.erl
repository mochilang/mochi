#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof3/3, ord/1, tohex/1, analyze/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (cb76045201) on 2025-07-27 10:24 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

indexof3(S, Ch, Start) ->
    try
        I = Start,
        Fun = fun Fun_loop(Ch, I, S, Start) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S, Start);
        _ -> {Ch, I, S, Start}
    end
end,
{Ch, I_2, S, Start} = Fun(Ch, I, S, Start),
        -1
    catch {return, Ret} -> Ret end.

ord(Ch_2) ->
    try
        Digits = "0123456789",
        Idx = indexof3("0123456789", Ch_2, 0),
        case (Idx >= 0) of
        true -> throw({return, (48 + Idx)});
        _ -> ok
    end,
        case (Ch_2 == "X") of
        true -> throw({return, 88});
        _ -> ok
    end,
        case (Ch_2 == "é") of
        true -> throw({return, 233});
        _ -> ok
    end,
        case (Ch_2 == "😍") of
        true -> throw({return, 128525});
        _ -> ok
    end,
        case (Ch_2 == "🐡") of
        true -> throw({return, 128033});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

tohex(N) ->
    try
        Digits_2 = "0123456789ABCDEF",
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        V = N,
        Out = "",
        Fun_2 = fun Fun_2_loop(Digits_2, N, Out, V) ->
    case (V > 0) of
        true ->
            D = (V rem 16),
            Out_2 = (string:substr(Digits_2, D + 1, ((D + 1) - D)) ++ Out),
            V_2 = (V div 16),
            Fun_2_loop(Digits_2, N, Out_2, V_2);
        _ -> {Digits_2, N, Out, V}
    end
end,
{Digits_2, N, Out_2, V_2} = Fun_2(Digits_2, N, Out, V),
        Out_2
    catch {return, Ret} -> Ret end.

analyze(S_2) ->
    try
        Le = length(S_2),
        io:format("~ts~n", [(((("Analyzing \"" ++ S_2) ++ "\" which has a length of ") ++ lists:flatten(io_lib:format("~p", [Le]))) ++ ":")]),
        case (Le > 1) of
        true -> I_3 = 0,
            Fun_4 = fun Fun_4_loop(I_3, Le, S_2) ->
    case (I_3 < (Le - 1)) of
        true ->
            J = (I_3 + 1),
            Fun_3 = fun Fun_3_loop(I_3, J, Le, S_2) ->
    case (J < Le) of
        true ->
            case (string:substr(S_2, J + 1, ((J + 1) - J)) == string:substr(S_2, I_3 + 1, ((I_3 + 1) - I_3))) of
        true -> Ch_3 = string:substr(S_2, I_3 + 1, ((I_3 + 1) - I_3)),
            io:format("~ts~n", ["  Not all characters in the string are unique."]),
            io:format("~ts~n", [(((((((("  '" ++ Ch_3) ++ "' (0x") ++ string:to_lower(tohex(ord(Ch_3)))) ++ ") is duplicated at positions ") ++ lists:flatten(io_lib:format("~p", [(I_3 + 1)]))) ++ " and ") ++ lists:flatten(io_lib:format("~p", [(J + 1)]))) ++ ".\n")]),
            throw({return, nil}),
            Ch_4 = Ch_3;
        _ -> Ch_4 = nil
    end,
            J_2 = (J + 1),
            Fun_3_loop(I_3, J_2, Le, S_2);
        _ -> {I_3, J, Le, S_2}
    end
end,
{I_3, J_2, Le, S_2} = Fun_3(I_3, J, Le, S_2),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Le, S_2);
        _ -> {I_3, Le, S_2}
    end
end,
{I_4, Le, S_2} = Fun_4(I_3, Le, S_2),
            Fun_5 = Fun_4,
            I_5 = I_4;
        _ -> Fun_5 = nil,
            I_5 = nil
    end,
        io:format("~ts~n", ["  All characters in the string are unique.\n"]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Strings = ["", ".", "abcABC", "XYZ ZYX", "1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ", "01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X", "hétérogénéité", "🎆🎃🎇🎈", "😍😀🙌💃😍🙌", "🐠🐟🐡🦈🐬🐳🐋🐡"],
        I_6 = 0,
        Fun_6 = fun Fun_6_loop(I_6, Strings) ->
    case (I_6 < length(Strings)) of
        true ->
            analyze(lists:nth(I_6 + 1, Strings)),
            I_7 = (I_6 + 1),
            Fun_6_loop(I_7, Strings);
        _ -> {I_6, Strings}
    end
end,
{I_7, Strings} = Fun_6(I_6, Strings),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
