#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sinapprox/1, cosapprox/1, sqrtapprox/1]).

% Generated by Mochi transpiler v0.10.55 (1df91402aa) on 2025-08-02 23:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

sinapprox(X) ->
    try
        Term = X,
        Sum = X,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X) ->
    case (N =< 10) of
        true ->
            Denom = float(((2 * N) * ((2 * N) + 1))),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X), X), Denom),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X);
        _ -> {N, Sum, Term, X}
    end
end,
{N_2, Sum_2, Term_2, X} = Fun(N, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

cosapprox(X_2) ->
    try
        Term_3 = 1,
        Sum_3 = 1,
        N_3 = 1,
        Fun_2 = fun Fun_2_loop(N_3, Sum_3, Term_3, X_2) ->
    case (N_3 =< 10) of
        true ->
            Denom_2 = float((((2 * N_3) - 1) * (2 * N_3))),
            Term_4 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term_3, X_2), X_2), Denom_2),
            Sum_4 = (Sum_3 + Term_4),
            N_4 = (N_3 + 1),
            Fun_2_loop(N_4, Sum_4, Term_4, X_2);
        _ -> {N_3, Sum_3, Term_3, X_2}
    end
end,
{N_4, Sum_4, Term_4, X_2} = Fun_2(N_3, Sum_3, Term_3, X_2),
        Sum_4
    catch {return, Ret} -> Ret end.

sqrtapprox(X_3) ->
    try
        Guess = X_3,
        I = 0,
        Fun_3 = fun Fun_3_loop(Guess, I, X_3) ->
    case (I < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_3, Guess)), 2),
            I_2 = (I + 1),
            Fun_3_loop(Guess_2, I_2, X_3);
        _ -> {Guess, I, X_3}
    end
end,
{Guess_2, I_2, X_3} = Fun_3(Guess, I, X_3),
        Guess_2
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('L', 10),
    erlang:put('G', 9.81),
    erlang:put('dt', 0.2),
    erlang:put('phi0', mochi_safe_div(3.141592653589793, 4)),
    erlang:put('omega', sqrtapprox(mochi_safe_div(9.81, 10))),
    erlang:put('t', 0),
    Fun_4 = fun Fun_4_loop(List) ->
    case List of
        [] -> {};
        [Step|Step_rest] ->
            Phi = mochi_safe_mul(erlang:get('phi0'), cosapprox(mochi_safe_mul(erlang:get('omega'), erlang:get('t')))),
            Pos = mochi_to_int((mochi_safe_mul(10, sinapprox(Phi)) + 0.5)),
            io:format("~ts~n", [lists:flatten(io_lib:format("~p", [Pos]))]),
            erlang:put('t', (erlang:get('t') + 0.2)),
            Fun_4_loop(Step_rest)
    end
end,
{} = Fun_4(lists:seq(0, (10) - 1)),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
