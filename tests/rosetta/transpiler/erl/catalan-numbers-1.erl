#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, binom/2, catalan/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (0d0cd10f02) on 2025-07-26 16:11 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

binom(N, K) ->
    try
        case ((K < 0) orelse (K > N)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Kk = K,
        case (Kk > (N - Kk)) of
        true -> Kk_2 = (N - Kk),
            Kk_3 = Kk_2;
        _ -> Kk_3 = Kk
    end,
        Res = 1,
        I = 0,
        Fun = fun Fun_loop(I, K, Kk_3, N, Res) ->
    case (I < Kk_3) of
        true ->
            Res_2 = (Res * (N - I)),
            I_2 = (I + 1),
            Res_3 = mochi_to_int((Res_2 div I_2)),
            Fun_loop(I_2, K, Kk_3, N, Res_3);
        _ -> {I, K, Kk_3, N, Res}
    end
end,
{I_2, K, Kk_3, N, Res_3} = Fun(I, K, Kk_3, N, Res),
        Res_3
    catch {return, Ret} -> Ret end.

catalan(N_2) ->
    try
        mochi_to_int((binom((2 * N_2), N_2) div (N_2 + 1)))
    catch {return, Ret} -> Ret end.

main() ->
    try
        Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [I_3|I_3_rest] ->
            io:format("~ts~n", [lists:flatten(io_lib:format("~p", [catalan(I_3)]))]),
            Fun_2_loop(I_3_rest)
    end
end,
{} = Fun_2(lists:seq(0, (15) - 1)),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
