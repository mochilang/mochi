#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isprime/1, iscircular/1, showlist/1]).

% Generated by Mochi transpiler v0.10.41 (df7e5d4e15) on 2025-07-27 05:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

isprime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N rem 2) == 0) of
        true -> throw({return, (N == 2)});
        _ -> ok
    end,
        case ((N rem 3) == 0) of
        true -> throw({return, (N == 3)});
        _ -> ok
    end,
        D = 5,
        Fun = fun Fun_loop(D, N) ->
    case ((D * D) =< N) of
        true ->
            case ((N rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            case ((N rem D_2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_3 = (D_2 + 4),
            Fun_loop(D_3, N);
        _ -> {D, N}
    end
end,
{D_3, N} = Fun(D, N),
        true
    catch {return, Ret} -> Ret end.

iscircular(N_2) ->
    try
        Nn = N_2,
        Pow = 1,
        Fun_2 = fun Fun_2_loop(N_2, Nn, Pow) ->
    case (Nn > 0) of
        true ->
            Pow_2 = (Pow * 10),
            Nn_2 = (Nn / 10),
            Fun_2_loop(N_2, Nn_2, Pow_2);
        _ -> {N_2, Nn, Pow}
    end
end,
{N_2, Nn_2, Pow_2} = Fun_2(N_2, Nn, Pow),
        Nn_3 = N_2,
        Fun_3 = fun Fun_3_loop(N_2, Nn_3, Pow_2) ->
    case true of
        true ->
            try
                Nn_4 = (Nn_3 * 10),
                F = (Nn_4 / Pow_2),
                Nn_5 = (Nn_4 + (F * (1 - Pow_2))),
                case (Nn_5 == N_2) of
        true -> throw(break);
        _ -> ok
    end,
                case not isprime(Nn_5) of
        true -> throw({return, false});
        _ -> ok
    end,
                Fun_3_loop(N_2, Nn_5, Pow_2)
            catch
                {continue, C0, C1, C2} -> Fun_3_loop(C0, C1, C2);
                break -> {N_2, Nn_3, Pow_2}
            end;
        _ -> {N_2, Nn_3, Pow_2}
    end
end,
{N_2, Nn_5, Pow_2} = Fun_3(N_2, Nn_3, Pow_2),
        true
    catch {return, Ret} -> Ret end.

showlist(Xs) ->
    try
        Out = "[",
        I = 0,
        Fun_7 = fun Fun_7_loop(I, Out, Xs) ->
    case (I < length(Xs)) of
        true ->
            Out_2 = (Out ++ lists:flatten(io_lib:format("~p", [lists:nth(I + 1, Xs)]))),
            case (I < (length(Xs) - 1)) of
        true -> Out_3 = (Out_2 ++ ", "),
            Out_4 = Out_3;
        _ -> Out_4 = Out_2
    end,
            I_2 = (I + 1),
            Fun_7_loop(I_2, Out_4, Xs);
        _ -> {I, Out, Xs}
    end
end,
{I_2, Out_4, Xs} = Fun_7(I, Out, Xs),
        (Out_4 ++ "]")
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('circs', []),
    io:format("~ts~n", ["The first 19 circular primes are:"]),
    erlang:put('digits', [1, 3, 7, 9]),
    erlang:put('q', [1, 2, 3, 5, 7, 9]),
    erlang:put('fq', [1, 2, 3, 5, 7, 9]),
    erlang:put('count', 0),
    Fun_6 = fun Fun_6_loop() ->
    case true of
        true ->
            try
                F_2 = lists:nth(0 + 1, erlang:get('q')),
                Fd = lists:nth(0 + 1, erlang:get('fq')),
                case (isprime(F_2) andalso iscircular(F_2)) of
        true -> erlang:put('circs', lists:append(erlang:get('circs'), [F_2])),
            erlang:put('count', (erlang:get('count') + 1)),
            case (erlang:get('count') == 19) of
        true -> throw(break);
        _ -> ok
    end;
        _ -> ok
    end,
                erlang:put('q', lists:sublist(erlang:get('q'), 1 + 1, length(erlang:get('q')) - 1)),
                erlang:put('fq', lists:sublist(erlang:get('fq'), 1 + 1, length(erlang:get('fq')) - 1)),
                case ((F_2 /= 2) andalso (F_2 /= 5)) of
        true -> Fun_4 = fun Fun_4_loop(List, F_2, Fd) ->
    case List of
        [] -> {F_2, Fd};
        [D_4|D_4_rest] ->
            erlang:put('q', lists:append(erlang:get('q'), [((F_2 * 10) + D_4)])),
            erlang:put('fq', lists:append(erlang:get('fq'), [Fd])),
            Fun_4_loop(D_4_rest, F_2, Fd)
    end
end,
{F_2, Fd} = Fun_4(erlang:get('digits'), F_2, Fd),
            Fun_5 = Fun_4;
        _ -> Fun_5 = nil
    end,
                Fun_6_loop()
            catch
                {continue} -> Fun_6_loop();
                break -> {}
            end;
        _ -> {}
    end
end,
{} = Fun_6(),
    io:format("~p~n", [showlist(erlang:get('circs'))]),
    io:format("~ts~n", ["\nThe next 4 circular primes, in repunit format, are:"]),
    io:format("~ts~n", ["[R(19) R(23) R(317) R(1031)]"]),
    io:format("~ts~n", ["\nThe following repunits are probably circular primes:"]),
    Fun_8 = fun Fun_8_loop(List) ->
    case List of
        [] -> {};
        [I_3|I_3_rest] ->
            io:format("~ts~n", [(("R(" ++ lists:flatten(io_lib:format("~p", [I_3]))) ++ ") : true")]),
            Fun_8_loop(I_3_rest)
    end
end,
{} = Fun_8([5003, 9887, 15073, 25031, 35317, 49081]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
