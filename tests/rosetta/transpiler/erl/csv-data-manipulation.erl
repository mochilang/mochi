#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, join/2, parseintstr/1]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_parse_int_str(S) ->
    try list_to_integer(S) catch _:_ -> 0 end.

join(Xs, Sep) ->
    try
        Res = "",
        I = 0,
        Fun = fun Fun_loop(I, Res, Sep, Xs) ->
    case (I < length(Xs)) of
        true ->
            case (I > 0) of
        true -> Res_2 = (Res ++ Sep),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Res_4 = (Res_3 ++ lists:nth(I + 1, Xs)),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_4, Sep, Xs);
        _ -> {I, Res, Sep, Xs}
    end
end,
{I_2, Res_4, Sep, Xs} = Fun(I, Res, Sep, Xs),
        Res_4
    catch {return, Ret} -> Ret end.

parseintstr(Str) ->
    try
        I_3 = 0,
        Neg = false,
        case ((length(Str) > 0) andalso (string:substr(Str, 0 + 1, (1 - 0)) == "-")) of
        true -> Neg_2 = true,
            I_4 = 1,
            I_5 = I_4,
            Neg_3 = Neg_2;
        _ -> I_5 = I_3,
            Neg_3 = Neg
    end,
        N = 0,
        Digits = #{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9},
        Fun_2 = fun Fun_2_loop(Digits, I_5, N, Neg_3, Str) ->
    case (I_5 < length(Str)) of
        true ->
            N_2 = ((N * 10) + maps:get(string:substr(Str, I_5 + 1, ((I_5 + 1) - I_5)), Digits, nil)),
            I_6 = (I_5 + 1),
            Fun_2_loop(Digits, I_6, N_2, Neg_3, Str);
        _ -> {Digits, I_5, N, Neg_3, Str}
    end
end,
{Digits, I_6, N_2, Neg_3, Str} = Fun_2(Digits, I_5, N, Neg_3, Str),
        case Neg_3 of
        true -> N_3 = -N_2,
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
        N_4
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('rows', [["A", "B", "C"], ["1", "2", "3"], ["4", "5", "6"], ["7", "8", "9"]]),
    Rows = erlang:get('rows'),
    Rows_2 = lists:sublist(Rows, 0) ++ [lists:append(lists:nth(0 + 1, erlang:get('rows')), ["SUM"])] ++ lists:nthtail(0 + 1, Rows),
    erlang:put('rows', Rows_2),
    erlang:put('i', 1),
    Fun_4 = fun Fun_4_loop(Rows_2) ->
    case (erlang:get('i') < length(erlang:get('rows'))) of
        true ->
            Sum = 0,
            Fun_3 = fun Fun_3_loop(List, Rows_2, Sum) ->
    case List of
        [] -> {Rows_2, Sum};
        [S|S_rest] ->
            Sum_2 = (Sum + mochi_parse_int_str(S)),
            Fun_3_loop(S_rest, Rows_2, Sum_2)
    end
end,
{Rows_2, Sum_2} = Fun_3(lists:nth(erlang:get('i') + 1, erlang:get('rows')), Rows_2, Sum),
            Rows_3 = erlang:get('rows'),
            Rows_4 = lists:sublist(Rows_3, erlang:get('i')) ++ [lists:append(lists:nth(erlang:get('i') + 1, erlang:get('rows')), [lists:flatten(io_lib:format("~p", [Sum_2]))])] ++ lists:nthtail(erlang:get('i') + 1, Rows_3),
            erlang:put('rows', Rows_4),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_4_loop(Rows_4);
        _ -> {Rows_2}
    end
end,
{Rows_4} = Fun_4(Rows_2),
    Fun_5 = fun Fun_5_loop(List, Rows_4) ->
    case List of
        [] -> {Rows_4};
        [R|R_rest] ->
            io:format("~p~n", [join(R, ",")]),
            Fun_5_loop(R_rest, Rows_4)
    end
end,
{Rows_4} = Fun_5(erlang:get('rows'), Rows_4),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
