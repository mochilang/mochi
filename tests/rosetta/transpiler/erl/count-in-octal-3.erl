#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, tooct/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

tooct(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Digits = "01234567",
        Out = "",
        V = N,
        Fun = fun Fun_loop(Digits, N, Out, V) ->
    case (V > 0) of
        true ->
            D = (V rem 8),
            Out_2 = (string:substr(Digits, D + 1, ((D + 1) - D)) ++ Out),
            V_2 = (V div 8),
            Fun_loop(Digits, N, Out_2, V_2);
        _ -> {Digits, N, Out, V}
    end
end,
{Digits, N, Out_2, V_2} = Fun(Digits, N, Out, V),
        Out_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        I = 0,
        Fun_2 = fun Fun_2_loop(I) ->
    case true of
        true ->
            try
                io:format("~p~n", [tooct(mochi_to_int(I))]),
                case (I == 3) of
        true -> I_2 = (9.007199254740992e+15 - 4),
            io:format("~ts~n", ["..."]),
            I_3 = I_2;
        _ -> I_3 = I
    end,
                Next = (I_3 + 1),
                case (Next == I_3) of
        true -> throw(break);
        _ -> ok
    end,
                I_4 = Next,
                Fun_2_loop(I_4)
            catch
                {continue, C0} -> Fun_2_loop(C0);
                break -> {I}
            end;
        _ -> {I}
    end
end,
{I_4} = Fun_2(I),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
