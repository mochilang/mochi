#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, powf/2, sqrtapprox/1, modpow/3, mtest/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

powf(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

sqrtapprox(X) ->
    try
        case (X =< 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        G = X,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(G, I_3, X) ->
    case (I_3 < 20) of
        true ->
            G_2 = ((G + (X / G)) / 2),
            I_4 = (I_3 + 1),
            Fun_2_loop(G_2, I_4, X);
        _ -> {G, I_3, X}
    end
end,
{G_2, I_4, X} = Fun_2(G, I_3, X),
        G_2
    catch {return, Ret} -> Ret end.

modpow(Base_2, Exp_2, Mod) ->
    try
        Result_3 = (1 rem Mod),
        B = (Base_2 rem Mod),
        E = Exp_2,
        Fun_3 = fun Fun_3_loop(B, Base_2, E, Exp_2, Mod, Result_3) ->
    case (E > 0) of
        true ->
            case ((E rem 2) == 1) of
        true -> Result_4 = ((Result_3 * B) rem Mod),
            Result_5 = Result_4;
        _ -> Result_5 = Result_3
    end,
            B_2 = ((B * B) rem Mod),
            E_2 = (E div 2),
            Fun_3_loop(B_2, Base_2, E_2, Exp_2, Mod, Result_5);
        _ -> {B, Base_2, E, Exp_2, Mod, Result_3}
    end
end,
{B_2, Base_2, E_2, Exp_2, Mod, Result_5} = Fun_3(B, Base_2, E, Exp_2, Mod, Result_3),
        Result_5
    catch {return, Ret} -> Ret end.

mtest(M) ->
    try
        case (M < 4) of
        true -> io:format("~ts~n", [(((lists:flatten(io_lib:format("~p", [M])) ++ " < 4.  M") ++ lists:flatten(io_lib:format("~p", [M]))) ++ " not tested.")]),
            throw({return, nil});
        _ -> ok
    end,
        Flimit = sqrtapprox((powf(2, M) - 1)),
        Qlast = 0,
        case (Flimit < 50000) of
        true -> Qlast_2 = mochi_to_int(Flimit),
            Qlast_4 = Qlast_2;
        _ -> Qlast_3 = 50000,
            Qlast_4 = Qlast_3
    end,
        Composite = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Composite, Flimit, I_5, M, Qlast_4) ->
    case (I_5 =< Qlast_4) of
        true ->
            Composite_2 = lists:append(Composite, [false]),
            I_6 = (I_5 + 1),
            Fun_4_loop(Composite_2, Flimit, I_6, M, Qlast_4);
        _ -> {Composite, Flimit, I_5, M, Qlast_4}
    end
end,
{Composite_2, Flimit, I_6, M, Qlast_4} = Fun_4(Composite, Flimit, I_5, M, Qlast_4),
        Sq = mochi_to_int(sqrtapprox(float(Qlast_4))),
        Q = 3,
        Fun_8 = fun Fun_8_loop(Composite_2, Flimit, I_6, M, Q, Qlast_4, Sq) ->
    case true of
        true ->
            try
                case (Q =< Sq) of
        true -> J = (Q * Q),
            Fun_5 = fun Fun_5_loop(Composite_2, Flimit, I_6, J, M, Q, Qlast_4, Sq) ->
    case (J =< Qlast_4) of
        true ->
            Composite_3 = lists:sublist(Composite_2, J) ++ [true] ++ lists:nthtail(J + 1, Composite_2),
            J_2 = (J + Q),
            Fun_5_loop(Composite_3, Flimit, I_6, J_2, M, Q, Qlast_4, Sq);
        _ -> {Composite_2, Flimit, I_6, J, M, Q, Qlast_4, Sq}
    end
end,
{Composite_3, Flimit, I_6, J_2, M, Q, Qlast_4, Sq} = Fun_5(Composite_2, Flimit, I_6, J, M, Q, Qlast_4, Sq),
            Composite_4 = Composite_3,
            Fun_6 = Fun_5,
            J_3 = J_2;
        _ -> Composite_4 = Composite_2,
            Fun_6 = Fun_4,
            J_3 = nil
    end,
                Q8 = (Q rem 8),
                case (((Q8 == 1) orelse (Q8 == 7)) andalso (modpow(2, M, Q) == 1)) of
        true -> io:format("~ts~n", [((("M" ++ lists:flatten(io_lib:format("~p", [M]))) ++ " has factor ") ++ lists:flatten(io_lib:format("~p", [Q])))]),
            throw({return, nil});
        _ -> ok
    end,
                Fun_7 = fun Fun_7_loop(Composite_4, Flimit, I_6, J_3, M, Q, Q8, Qlast_4, Sq) ->
    case true of
        true ->
            try
                Q_2 = (Q + 2),
                case (Q_2 > Qlast_4) of
        true -> io:format("~ts~n", [(("No factors of M" ++ lists:flatten(io_lib:format("~p", [M]))) ++ " found.")]),
            throw({return, nil});
        _ -> ok
    end,
                case mochi_not((case erlang:is_map(Composite_4) of true -> maps:get(Q_2, Composite_4, nil); _ -> lists:nth(Q_2 + 1, Composite_4) end)) of
        true -> throw(break);
        _ -> ok
    end,
                Fun_7_loop(Composite_4, Flimit, I_6, J_3, M, Q_2, Q8, Qlast_4, Sq)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8} -> Fun_7_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8);
                break -> {Composite_4, Flimit, I_6, J_3, M, Q, Q8, Qlast_4, Sq}
            end;
        _ -> {Composite_4, Flimit, I_6, J_3, M, Q, Q8, Qlast_4, Sq}
    end
end,
{Composite_4, Flimit, I_6, J_3, M, Q_2, Q8, Qlast_4, Sq} = Fun_7(Composite_4, Flimit, I_6, J_3, M, Q, Q8, Qlast_4, Sq),
                Fun_8_loop(Composite_4, Flimit, I_6, M, Q_2, Qlast_4, Sq)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_8_loop(C0, C1, C2, C3, C4, C5, C6);
                break -> {Composite_2, Flimit, I_6, M, Q, Qlast_4, Sq}
            end;
        _ -> {Composite_2, Flimit, I_6, M, Q, Qlast_4, Sq}
    end
end,
{Composite_4, Flimit, I_6, M, Q_2, Qlast_4, Sq} = Fun_8(Composite_2, Flimit, I_6, M, Q, Qlast_4, Sq),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        mtest(31),
        mtest(67),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('qlimit', 50000),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
