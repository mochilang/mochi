#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow_big/2, cullen/1, woodall/1, show_list/1, main/0]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

pow_big(Base, Exp) ->
    try
        Result = 1,
        B = Base,
        E = Exp,
        Fun = fun Fun_loop(B, Base, E, Exp, Result) ->
    case (E > 0) of
        true ->
            case ((E rem 2) == 1) of
        true -> Result_2 = (Result * B),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            B_2 = (B * B),
            E_2 = mochi_to_int((E div 2)),
            Fun_loop(B_2, Base, E_2, Exp, Result_3);
        _ -> {B, Base, E, Exp, Result}
    end
end,
{B_2, Base, E_2, Exp, Result_3} = Fun(B, Base, E, Exp, Result),
        Result_3
    catch {return, Ret} -> Ret end.

cullen(N) ->
    try
        Two_n = (1 bsl N),
        ((Two_n * N) + 1)
    catch {return, Ret} -> Ret end.

woodall(N_2) ->
    try
        (cullen(N_2) - 2)
    catch {return, Ret} -> Ret end.

show_list(Xs) ->
    try
        Line = "",
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Line, Xs) ->
    case (I < length(Xs)) of
        true ->
            Line_2 = (Line ++ lists:flatten(io_lib:format("~p", [lists:nth(I + 1, Xs)]))),
            case (I < (length(Xs) - 1)) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, Line_4, Xs);
        _ -> {I, Line, Xs}
    end
end,
{I_2, Line_4, Xs} = Fun_2(I, Line, Xs),
        Line_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Cnums = [],
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(Cnums, I_3) ->
    case (I_3 =< 20) of
        true ->
            Cnums_2 = lists:append(Cnums, [cullen(I_3)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Cnums_2, I_4);
        _ -> {Cnums, I_3}
    end
end,
{Cnums_2, I_4} = Fun_3(Cnums, I_3),
        io:format("~ts~n", ["First 20 Cullen numbers (n * 2^n + 1):"]),
        io:format("~p~n", [show_list(Cnums_2)]),
        Wnums = [],
        I_5 = 1,
        Fun_4 = fun Fun_4_loop(Cnums_2, I_5, Wnums) ->
    case (I_5 =< 20) of
        true ->
            Wnums_2 = lists:append(Wnums, [woodall(I_5)]),
            I_6 = (I_5 + 1),
            Fun_4_loop(Cnums_2, I_6, Wnums_2);
        _ -> {Cnums_2, I_5, Wnums}
    end
end,
{Cnums_2, I_6, Wnums_2} = Fun_4(Cnums_2, I_5, Wnums),
        io:format("~ts~n", ["\nFirst 20 Woodall numbers (n * 2^n - 1):"]),
        io:format("~p~n", [show_list(Wnums_2)]),
        Cprimes = [1, 141, 4713, 5795, 6611],
        io:format("~ts~n", ["\nFirst 5 Cullen primes (in terms of n):"]),
        io:format("~p~n", [show_list(Cprimes)]),
        Wprimes = [2, 3, 6, 30, 75, 81, 115, 123, 249, 362, 384, 462],
        io:format("~ts~n", ["\nFirst 12 Woodall primes (in terms of n):"]),
        io:format("~p~n", [show_list(Wprimes)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
