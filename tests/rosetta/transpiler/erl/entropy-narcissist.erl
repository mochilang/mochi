#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, log2/1, entropy/1, main/0]).

% Generated by Mochi transpiler v0.10.54 (6b449c7962) on 2025-08-02 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

log2(X) ->
    try
        K = 0,
        V = X,
        Fun = fun Fun_loop(K, V, X) ->
    case (V >= 2) of
        true ->
            V_2 = (V / 2),
            K_2 = (K + 1),
            Fun_loop(K_2, V_2, X);
        _ -> {K, V, X}
    end
end,
{K_2, V_2, X} = Fun(K, V, X),
        Fun_2 = fun Fun_2_loop(K_2, V_2, X) ->
    case (V_2 < 1) of
        true ->
            V_3 = (V_2 * 2),
            K_3 = (K_2 - 1),
            Fun_2_loop(K_3, V_3, X);
        _ -> {K_2, V_2, X}
    end
end,
{K_3, V_3, X} = Fun_2(K_2, V_2, X),
        Z = ((V_3 - 1) / (V_3 + 1)),
        Zpow = Z,
        Sum = Z,
        I = 3,
        Fun_3 = fun Fun_3_loop(I, K_3, Sum, V_3, X, Z, Zpow) ->
    case (I =< 9) of
        true ->
            Zpow_2 = ((Zpow * Z) * Z),
            Sum_2 = (Sum + (Zpow_2 / float(I))),
            I_2 = (I + 2),
            Fun_3_loop(I_2, K_3, Sum_2, V_3, X, Z, Zpow_2);
        _ -> {I, K_3, Sum, V_3, X, Z, Zpow}
    end
end,
{I_2, K_3, Sum_2, V_3, X, Z, Zpow_2} = Fun_3(I, K_3, Sum, V_3, X, Z, Zpow),
        Ln2 = 0.6931471805599453,
        (K_3 + ((2 * Sum_2) / 0.6931471805599453))
    catch {return, Ret} -> Ret end.

entropy(Data) ->
    try
        case (Data == "") of
        true -> throw({return, 0});
        _ -> ok
    end,
        Counts = #{},
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Counts, Data, I_3) ->
    case (I_3 < length(Data)) of
        true ->
            Ch = string:substr(Data, I_3 + 1, ((I_3 + 1) - I_3)),
            case maps:is_key(Ch, Counts) of
        true -> Counts_2 = maps:put(Ch, (maps:get(Ch, Counts, nil) + 1), Counts),
            Counts_4 = Counts_2;
        _ -> Counts_3 = maps:put(Ch, 1, Counts),
            Counts_4 = Counts_3
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(Counts_4, Data, I_4);
        _ -> {Counts, Data, I_3}
    end
end,
{Counts_4, Data, I_4} = Fun_4(Counts, Data, I_3),
        E = 0,
        L = float(length(Data)),
        Fun_5 = fun Fun_5_loop(List, Counts_4, Data, E, I_4, L) ->
    case List of
        [] -> {Counts_4, Data, E, I_4, L};
        [Ch_2|Ch_2_rest] ->
            Px = (float((case erlang:is_map(Counts_4) of true -> maps:get(Ch_2, Counts_4, nil); _ -> lists:nth(Ch_2 + 1, Counts_4) end)) / L),
            case (Px > 0) of
        true -> E_2 = (E - (Px * log2(Px))),
            E_3 = E_2;
        _ -> E_3 = E
    end,
            Fun_5_loop(Ch_2_rest, Counts_4, Data, E_3, I_4, L)
    end
end,
{Counts_4, Data, E_3, I_4, L} = Fun_5(maps:keys(Counts_4), Counts_4, Data, E, I_4, L),
        E_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [("Source file entropy: " ++ lists:flatten(io_lib:format("~p", [entropy(erlang:get('source'))])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('source', ((((((((((((((((((((((((((((((((((((((((((((((((((((("// Mochi translation of the Rosetta \"Entropy-Narcissist\" task\n" ++ "// Simplified to compute the entropy of this source string\n\n") ++ "fun log2(x: float): float {\n") ++ "  var k = 0.0\n") ++ "  var v = x\n") ++ "  while v >= 2.0 {\n") ++ "    v = v / 2.0\n") ++ "    k = k + 1.0\n") ++ "  }\n") ++ "  while v < 1.0 {\n") ++ "    v = v * 2.0\n") ++ "    k = k - 1.0\n") ++ "  }\n") ++ "  let z = (v - 1.0) / (v + 1.0)\n") ++ "  var zpow = z\n") ++ "  var sum = z\n") ++ "  var i = 3\n") ++ "  while i <= 9 {\n") ++ "    zpow = zpow * z * z\n") ++ "    sum = sum + zpow / (i as float)\n") ++ "    i = i + 2\n") ++ "  }\n") ++ "  let ln2 = 0.6931471805599453\n") ++ "  return k + 2.0 * sum / ln2\n") ++ "}\n\n") ++ "fun entropy(data: string): float {\n") ++ "  if data == \"\" { return 0.0 }\n") ++ "  var counts: map<string,int> = {}\n") ++ "  var i = 0\n") ++ "  while i < len(data) {\n") ++ "    let ch = substring(data, i, i+1)\n") ++ "    if ch in counts {\n") ++ "      counts[ch] = counts[ch] + 1\n") ++ "    } else {\n") ++ "      counts[ch] = 1\n") ++ "    }\n") ++ "    i = i + 1\n") ++ "  }\n") ++ "  var e = 0.0\n") ++ "  let l = len(data) as float\n") ++ "  for ch in counts {\n") ++ "    let px = (counts[ch] as float) / l\n") ++ "    if px > 0.0 {\n") ++ "      e = e - px * log2(px)\n") ++ "    }\n") ++ "  }\n") ++ "  return e\n") ++ "}\n\n") ++ "// Store the program source as a string constant\n") ++ "let source = ... // truncated in actual source\n") ++ "\nfun main() {\n") ++ "  print(\"Source file entropy: \" + str(entropy(source)))\n") ++ "}\n\n") ++ "main()\n")),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
