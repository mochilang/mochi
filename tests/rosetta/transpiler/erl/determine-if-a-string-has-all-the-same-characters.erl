#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ord/1, hex/1, quote/1, analyze/1, main/0]).

% Generated by Mochi transpiler v0.10.42 (cb76045201) on 2025-07-27 10:24 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

ord(Ch) ->
    try
        case (Ch == "5") of
        true -> throw({return, 53});
        _ -> ok
    end,
        case (Ch == "T") of
        true -> throw({return, 84});
        _ -> ok
    end,
        case (Ch == " ") of
        true -> throw({return, 32});
        _ -> ok
    end,
        case (Ch == "é") of
        true -> throw({return, 233});
        _ -> ok
    end,
        case (Ch == "🐺") of
        true -> throw({return, 128058});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

hex(N) ->
    try
        Digits = "0123456789abcdef",
        case (N == 0) of
        true -> throw({return, "0x0"});
        _ -> ok
    end,
        M = N,
        Out = "",
        Fun = fun Fun_loop(Digits, M, N, Out) ->
    case (M > 0) of
        true ->
            D = (M rem 16),
            Out_2 = (string:substr(Digits, D + 1, ((D + 1) - D)) ++ Out),
            M_2 = (M div 16),
            Fun_loop(Digits, M_2, N, Out_2);
        _ -> {Digits, M, N, Out}
    end
end,
{Digits, M_2, N, Out_2} = Fun(Digits, M, N, Out),
        ("0x" ++ Out_2)
    catch {return, Ret} -> Ret end.

quote(S) ->
    try
        (("'" ++ S) ++ "'")
    catch {return, Ret} -> Ret end.

analyze(S_2) ->
    try
        Le = length(S_2),
        io:format("~ts~n", [(((("Analyzing " ++ quote(S_2)) ++ " which has a length of ") ++ lists:flatten(io_lib:format("~p", [Le]))) ++ ":")]),
        case (Le > 1) of
        true -> I = 1,
            Fun_2 = fun Fun_2_loop(I, Le, S_2) ->
    case (I < Le) of
        true ->
            Cur = string:substr(S_2, I + 1, ((I + 1) - I)),
            Prev = string:substr(S_2, (I - 1) + 1, (I - (I - 1))),
            case (Cur /= Prev) of
        true -> io:format("~ts~n", ["  Not all characters in the string are the same."]),
            io:format("~ts~n", [(((((("  " ++ quote(Cur)) ++ " (") ++ hex(ord(Cur))) ++ ") is different at position ") ++ lists:flatten(io_lib:format("~p", [(I + 1)]))) ++ ".")]),
            io:format("~ts~n", [""]),
            throw({return, nil});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, Le, S_2);
        _ -> {I, Le, S_2}
    end
end,
{I_2, Le, S_2} = Fun_2(I, Le, S_2),
            Fun_3 = Fun_2,
            I_3 = I_2;
        _ -> Fun_3 = nil,
            I_3 = nil
    end,
        io:format("~ts~n", ["  All characters in the string are the same."]),
        io:format("~ts~n", [""]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Strings = ["", "   ", "2", "333", ".55", "tttTTT", "4444 444k", "pépé", "🐶🐶🐺🐶", "🎄🎄🎄🎄"],
        I_4 = 0,
        Fun_4 = fun Fun_4_loop(I_4, Strings) ->
    case (I_4 < length(Strings)) of
        true ->
            analyze(lists:nth(I_4 + 1, Strings)),
            I_5 = (I_4 + 1),
            Fun_4_loop(I_5, Strings);
        _ -> {I_4, Strings}
    end
end,
{I_5, Strings} = Fun_4(I_4, Strings),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
