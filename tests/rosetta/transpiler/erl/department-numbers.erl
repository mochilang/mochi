#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.42 (deb3995c37) on 2025-07-28 04:43 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    io:format("~ts~n", ["Police  Sanitation  Fire"]),
    io:format("~ts~n", ["------  ----------  ----"]),
    erlang:put('count', 0),
    erlang:put('i', 2),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('i') < 7) of
        true ->
            J = 1,
            Fun_3 = fun Fun_3_loop(J) ->
    case (J < 8) of
        true ->
            case (J /= erlang:get('i')) of
        true -> K = 1,
            Fun = fun Fun_loop(J, K) ->
    case (K < 8) of
        true ->
            case ((K /= erlang:get('i')) andalso (K /= J)) of
        true -> case (((erlang:get('i') + J) + K) == 12) of
        true -> io:format("~ts~n", [((((("  " ++ lists:flatten(io_lib:format("~p", [erlang:get('i')]))) ++ "         ") ++ lists:flatten(io_lib:format("~p", [J]))) ++ "         ") ++ lists:flatten(io_lib:format("~p", [K])))]),
            erlang:put('count', (erlang:get('count') + 1));
        _ -> ok
    end;
        _ -> ok
    end,
            K_2 = (K + 1),
            Fun_loop(J, K_2);
        _ -> {J, K}
    end
end,
{J, K_2} = Fun(J, K),
            Fun_2 = Fun,
            K_3 = K_2;
        _ -> Fun_2 = nil,
            K_3 = nil
    end,
            J_2 = (J + 1),
            Fun_3_loop(J_2);
        _ -> {J}
    end
end,
{J_2} = Fun_3(J),
            erlang:put('i', (erlang:get('i') + 2)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    io:format("~ts~n", [""]),
    io:format("~ts~n", [(lists:flatten(io_lib:format("~p", [erlang:get('count')])) ++ " valid combinations")]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
