#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, hailstone/1, liststring/1, libmain/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

hailstone(N) ->
    try
        Seq = [],
        X = N,
        Seq_2 = lists:append(Seq, [X]),
        Fun = fun Fun_loop(N, Seq_2, X) ->
    case (X > 1) of
        true ->
            case ((X rem 2) == 0) of
        true -> X_2 = (X div 2),
            X_4 = X_2;
        _ -> X_3 = ((3 * X) + 1),
            X_4 = X_3
    end,
            Seq_3 = lists:append(Seq_2, [X_4]),
            Fun_loop(N, Seq_3, X_4);
        _ -> {N, Seq_2, X}
    end
end,
{N, Seq_3, X_4} = Fun(N, Seq_2, X),
        Seq_3
    catch {return, Ret} -> Ret end.

liststring(Xs) ->
    try
        S = "[",
        I = 0,
        Fun_2 = fun Fun_2_loop(I, S, Xs) ->
    case (I < length(Xs)) of
        true ->
            S_2 = (S ++ lists:flatten(io_lib:format("~p", [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> lists:nth(I + 1, Xs) end)]))),
            case (I < (length(Xs) - 1)) of
        true -> S_3 = (S_2 ++ " "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, S_4, Xs);
        _ -> {I, S, Xs}
    end
end,
{I_2, S_4, Xs} = Fun_2(I, S, Xs),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

libmain() ->
    try
        Seq_4 = hailstone(27),
        io:format("~ts~n", [""]),
        io:format("~ts~n", ["Hailstone sequence for the number 27:"]),
        io:format("~ts~n", [(("  has " ++ lists:flatten(io_lib:format("~p", [length(Seq_4)]))) ++ " elements")]),
        io:format("~ts~n", [("  starts with " ++ liststring(lists:sublist(Seq_4, 0 + 1, (4 - 0))))]),
        io:format("~ts~n", [("  ends with " ++ liststring(lists:sublist(Seq_4, (length(Seq_4) - 4) + 1, (length(Seq_4) - (length(Seq_4) - 4)))))]),
        Longest = 0,
        Length = 0,
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(I_3, Length, Longest, Seq_4) ->
    case (I_3 < 100000) of
        true ->
            L = length(hailstone(I_3)),
            case (L > Length) of
        true -> Longest_2 = I_3,
            Length_2 = L,
            Length_3 = Length_2,
            Longest_3 = Longest_2;
        _ -> Length_3 = Length,
            Longest_3 = Longest
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Length_3, Longest_3, Seq_4);
        _ -> {I_3, Length, Longest, Seq_4}
    end
end,
{I_4, Length_3, Longest_3, Seq_4} = Fun_3(I_3, Length, Longest, Seq_4),
        io:format("~ts~n", [""]),
        io:format("~ts~n", [(((lists:flatten(io_lib:format("~p", [Longest_3])) ++ " has the longest Hailstone sequence, its length being ") ++ lists:flatten(io_lib:format("~p", [Length_3]))) ++ ".")]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    libmain(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
