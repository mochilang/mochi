#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, floorf/1, powf/2, fmtf/3, expf/1, eulerstep/4, newcoolingrate/1, newtempfunc/3, newcoolingratedy/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, Ret} -> Ret end.

floorf(X) ->
    try
        Y = mochi_to_int(X),
        float(Y)
    catch {return, Ret} -> Ret end.

powf(Base, Exp) ->
    try
        R = 1,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Base, Exp, I_3, R) ->
    case (I_3 < Exp) of
        true ->
            R_2 = mochi_safe_mul(R, Base),
            I_4 = (I_3 + 1),
            Fun_2_loop(Base, Exp, I_4, R_2);
        _ -> {Base, Exp, I_3, R}
    end
end,
{Base, Exp, I_4, R_2} = Fun_2(Base, Exp, I_3, R),
        R_2
    catch {return, Ret} -> Ret end.

fmtf(X_2, Width, Prec) ->
    try
        Factor = powf(10, Prec),
        Y_2 = mochi_safe_div(floorf((mochi_safe_mul(X_2, Factor) + 0.5)), Factor),
        S_2 = lists:flatten(io_lib:format("~p", [Y_2])),
        Dot = mochi_index_of(S_2, "."),
        case (Dot == (0 - 1)) of
        true -> S_3 = (S_2 ++ "."),
            J = 0,
            Fun_3 = fun Fun_3_loop(Dot, Factor, J, Prec, S_3, Width, X_2, Y_2) ->
    case (J < Prec) of
        true ->
            S_4 = (S_3 ++ "0"),
            J_2 = (J + 1),
            Fun_3_loop(Dot, Factor, J_2, Prec, S_4, Width, X_2, Y_2);
        _ -> {Dot, Factor, J, Prec, S_3, Width, X_2, Y_2}
    end
end,
{Dot, Factor, J_2, Prec, S_4, Width, X_2, Y_2} = Fun_3(Dot, Factor, J, Prec, S_3, Width, X_2, Y_2),
            Decs_3 = nil,
            Fun_5 = Fun_3,
            J_3 = J_2,
            S_6 = S_4;
        _ -> Decs = ((length(S_2) - Dot) - 1),
            Fun_4 = fun Fun_4_loop(Decs, Dot, Factor, Prec, S_2, Width, X_2, Y_2) ->
    case (Decs < Prec) of
        true ->
            S_5 = (S_2 ++ "0"),
            Decs_2 = (Decs + 1),
            Fun_4_loop(Decs_2, Dot, Factor, Prec, S_5, Width, X_2, Y_2);
        _ -> {Decs, Dot, Factor, Prec, S_2, Width, X_2, Y_2}
    end
end,
{Decs_2, Dot, Factor, Prec, S_5, Width, X_2, Y_2} = Fun_4(Decs, Dot, Factor, Prec, S_2, Width, X_2, Y_2),
            Decs_3 = Decs_2,
            Fun_5 = Fun_4,
            J_3 = nil,
            S_6 = S_5
    end,
        Fun_6 = fun Fun_6_loop(Decs_3, Dot, Factor, J_3, Prec, S_6, Width, X_2, Y_2) ->
    case (length(S_6) < Width) of
        true ->
            S_7 = (" " ++ S_6),
            Fun_6_loop(Decs_3, Dot, Factor, J_3, Prec, S_7, Width, X_2, Y_2);
        _ -> {Decs_3, Dot, Factor, J_3, Prec, S_6, Width, X_2, Y_2}
    end
end,
{Decs_3, Dot, Factor, J_3, Prec, S_7, Width, X_2, Y_2} = Fun_6(Decs_3, Dot, Factor, J_3, Prec, S_6, Width, X_2, Y_2),
        S_7
    catch {return, Ret} -> Ret end.

expf(X_3) ->
    try
        case (X_3 < 0) of
        true -> throw({return, mochi_safe_div(1, expf(-X_3))});
        _ -> ok
    end,
        Term = 1,
        Sum = 1,
        I_5 = 1,
        Fun_7 = fun Fun_7_loop(I_5, Sum, Term, X_3) ->
    case (I_5 < 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X_3), float(I_5)),
            Sum_2 = (Sum + Term_2),
            I_6 = (I_5 + 1),
            Fun_7_loop(I_6, Sum_2, Term_2, X_3);
        _ -> {I_5, Sum, Term, X_3}
    end
end,
{I_6, Sum_2, Term_2, X_3} = Fun_7(I_5, Sum, Term, X_3),
        Sum_2
    catch {return, Ret} -> Ret end.

eulerstep(F, X_4, Y_3, H) ->
    try
        (Y_3 + mochi_safe_mul(H, F(X_4, Y_3)))
    catch {return, Ret} -> Ret end.

newcoolingrate(K) ->
    try
        fun(Dt) ->
    try
        mochi_safe_mul(-K, Dt)
    catch {return, Ret} -> Ret end
end
    catch {return, Ret} -> Ret end.

newtempfunc(K_2, Ambient, Initial) ->
    try
        fun(T) ->
    try
        (Ambient + mochi_safe_mul((Initial - Ambient), expf(mochi_safe_mul(-K_2, T))))
    catch {return, Ret} -> Ret end
end
    catch {return, Ret} -> Ret end.

newcoolingratedy(K_3, Ambient_2) ->
    try
        Cr = newcoolingrate(K_3),
        fun(_x, Obj) ->
    try
        Cr((Obj - Ambient_2))
    catch {return, Ret} -> Ret end
end
    catch {return, Ret} -> Ret end.

main() ->
    try
        K_4 = 0.07,
        TempRoom = 20,
        TempObject = 100,
        Fcr = newcoolingratedy(0.07, 20),
        Analytic = newtempfunc(0.07, 20, 100),
        Fun_8 = fun Fun_8_loop(List, Analytic, Fcr, K_4, TempObject, TempRoom) ->
    case List of
        [] -> {Analytic, Fcr, K_4, TempObject, TempRoom};
        [Step|Step_rest] ->
            io:format("~ts~n", [("Step size = " ++ fmtf(Step, 0, 1))]),
            io:format("~ts~n", [" Time Euler's Analytic"]),
            Temp = 100,
            Time = 0,
            Fun_9 = fun Fun_9_loop(Analytic, Fcr, K_4, Step, Temp, TempObject, TempRoom, Time) ->
    case (Time =< 100) of
        true ->
            Line = ((((fmtf(Time, 5, 1) ++ " ") ++ fmtf(Temp, 7, 3)) ++ " ") ++ fmtf(Analytic(Time), 7, 3)),
            io:format("~ts~n", [Line]),
            Temp_2 = eulerstep(Fcr, Time, Temp, Step),
            Time_2 = (Time + Step),
            Fun_9_loop(Analytic, Fcr, K_4, Step, Temp_2, TempObject, TempRoom, Time_2);
        _ -> {Analytic, Fcr, K_4, Step, Temp, TempObject, TempRoom, Time}
    end
end,
{Analytic, Fcr, K_4, Step, Temp_2, TempObject, TempRoom, Time_2} = Fun_9(Analytic, Fcr, K_4, Step, Temp, TempObject, TempRoom, Time),
            io:format("~ts~n", [""]),
            Fun_8_loop(Step_rest, Analytic, Fcr, K_4, TempObject, TempRoom)
    end
end,
{Analytic, Fcr, K_4, TempObject, TempRoom} = Fun_8([2, 5, 10], Analytic, Fcr, K_4, TempObject, TempRoom),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
