#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sortrunes/1, sortstrings/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (27a3ad6a18) on 2025-08-03 00:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

sortrunes(S) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, S) ->
    case (I < length(S)) of
        true ->
            Arr_2 = lists:append(Arr, [string:substr(S, I + 1, ((I + 1) - I))]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, S);
        _ -> {Arr, I, S}
    end
end,
{Arr_2, I_2, S} = Fun(Arr, I, S),
        N = length(Arr_2),
        M = 0,
        Fun_3 = fun Fun_3_loop(Arr_2, I_2, M, N, S) ->
    case (M < N) of
        true ->
            J = 0,
            Fun_2 = fun Fun_2_loop(Arr_2, I_2, J, M, N, S) ->
    case (J < (N - 1)) of
        true ->
            case ((case erlang:is_map(Arr_2) of true -> maps:get(J, Arr_2, nil); _ -> lists:nth(J + 1, Arr_2) end) > (case erlang:is_map(Arr_2) of true -> maps:get((J + 1), Arr_2, nil); _ -> lists:nth((J + 1) + 1, Arr_2) end)) of
        true -> Tmp = (case erlang:is_map(Arr_2) of true -> maps:get(J, Arr_2, nil); _ -> lists:nth(J + 1, Arr_2) end),
            Arr_3 = lists:sublist(Arr_2, J) ++ [(case erlang:is_map(Arr_2) of true -> maps:get((J + 1), Arr_2, nil); _ -> lists:nth((J + 1) + 1, Arr_2) end)] ++ lists:nthtail(J + 1, Arr_2),
            Arr_4 = lists:sublist(Arr_3, (J + 1)) ++ [Tmp] ++ lists:nthtail((J + 1) + 1, Arr_3),
            Arr_5 = Arr_4,
            Tmp_2 = Tmp;
        _ -> Arr_5 = Arr_2,
            Tmp_2 = nil
    end,
            J_2 = (J + 1),
            Fun_2_loop(Arr_5, I_2, J_2, M, N, S);
        _ -> {Arr_2, I_2, J, M, N, S}
    end
end,
{Arr_5, I_2, J_2, M, N, S} = Fun_2(Arr_2, I_2, J, M, N, S),
            M_2 = (M + 1),
            Fun_3_loop(Arr_5, I_2, M_2, N, S);
        _ -> {Arr_2, I_2, M, N, S}
    end
end,
{Arr_5, I_2, M_2, N, S} = Fun_3(Arr_2, I_2, M, N, S),
        Out = "",
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Arr_5, I_3, M_2, N, Out, S) ->
    case (I_3 < N) of
        true ->
            Out_2 = (Out ++ (case erlang:is_map(Arr_5) of true -> maps:get(I_3, Arr_5, nil); _ -> lists:nth(I_3 + 1, Arr_5) end)),
            I_4 = (I_3 + 1),
            Fun_4_loop(Arr_5, I_4, M_2, N, Out_2, S);
        _ -> {Arr_5, I_3, M_2, N, Out, S}
    end
end,
{Arr_5, I_4, M_2, N, Out_2, S} = Fun_4(Arr_5, I_3, M_2, N, Out, S),
        Out_2
    catch {return, Ret} -> Ret end.

sortstrings(Xs) ->
    try
        Res = [],
        Tmp_3 = Xs,
        Fun_7 = fun Fun_7_loop(Res, Tmp_3, Xs) ->
    case (length(Tmp_3) > 0) of
        true ->
            Min = (case erlang:is_map(Tmp_3) of true -> maps:get(0, Tmp_3, nil); _ -> lists:nth(0 + 1, Tmp_3) end),
            Idx = 0,
            I_5 = 1,
            Fun_5 = fun Fun_5_loop(I_5, Idx, Min, Res, Tmp_3, Xs) ->
    case (I_5 < length(Tmp_3)) of
        true ->
            case ((case erlang:is_map(Tmp_3) of true -> maps:get(I_5, Tmp_3, nil); _ -> lists:nth(I_5 + 1, Tmp_3) end) < Min) of
        true -> Min_2 = (case erlang:is_map(Tmp_3) of true -> maps:get(I_5, Tmp_3, nil); _ -> lists:nth(I_5 + 1, Tmp_3) end),
            Idx_2 = I_5,
            Idx_3 = Idx_2,
            Min_3 = Min_2;
        _ -> Idx_3 = Idx,
            Min_3 = Min
    end,
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Idx_3, Min_3, Res, Tmp_3, Xs);
        _ -> {I_5, Idx, Min, Res, Tmp_3, Xs}
    end
end,
{I_6, Idx_3, Min_3, Res, Tmp_3, Xs} = Fun_5(I_5, Idx, Min, Res, Tmp_3, Xs),
            Res_2 = lists:append(Res, [Min_3]),
            Out_3 = [],
            J_3 = 0,
            Fun_6 = fun Fun_6_loop(I_6, Idx_3, J_3, Min_3, Out_3, Res_2, Tmp_3, Xs) ->
    case (J_3 < length(Tmp_3)) of
        true ->
            case (J_3 /= Idx_3) of
        true -> Out_4 = lists:append(Out_3, [(case erlang:is_map(Tmp_3) of true -> maps:get(J_3, Tmp_3, nil); _ -> lists:nth(J_3 + 1, Tmp_3) end)]),
            Out_5 = Out_4;
        _ -> Out_5 = Out_3
    end,
            J_4 = (J_3 + 1),
            Fun_6_loop(I_6, Idx_3, J_4, Min_3, Out_5, Res_2, Tmp_3, Xs);
        _ -> {I_6, Idx_3, J_3, Min_3, Out_3, Res_2, Tmp_3, Xs}
    end
end,
{I_6, Idx_3, J_4, Min_3, Out_5, Res_2, Tmp_3, Xs} = Fun_6(I_6, Idx_3, J_3, Min_3, Out_3, Res_2, Tmp_3, Xs),
            Tmp_4 = Out_5,
            Fun_7_loop(Res_2, Tmp_4, Xs);
        _ -> {Res, Tmp_3, Xs}
    end
end,
{Res_2, Tmp_4, Xs} = Fun_7(Res, Tmp_3, Xs),
        Res_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Words = ["abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"],
        Groups = #{},
        MaxLen = 0,
        Fun_8 = fun Fun_8_loop(List, Groups, MaxLen, Words) ->
    case List of
        [] -> {Groups, MaxLen, Words};
        [W|W_rest] ->
            K = sortrunes(W),
            case mochi_not(maps:is_key(K, Groups)) of
        true -> Groups_2 = maps:put(K, [W], Groups),
            Groups_4 = Groups_2;
        _ -> Groups_3 = maps:put(K, lists:append(maps:get(K, Groups, nil), [W]), Groups),
            Groups_4 = Groups_3
    end,
            case (length(maps:get(K, Groups_4, nil)) > MaxLen) of
        true -> MaxLen_2 = length(maps:get(K, Groups_4, nil)),
            MaxLen_3 = MaxLen_2;
        _ -> MaxLen_3 = MaxLen
    end,
            Fun_8_loop(W_rest, Groups_4, MaxLen_3, Words)
    end
end,
{Groups_4, MaxLen_3, Words} = Fun_8(Words, Groups, MaxLen, Words),
        Printed = #{},
        Fun_9 = fun Fun_9_loop(List, Groups_4, MaxLen_3, Printed, Words) ->
    case List of
        [] -> {Groups_4, MaxLen_3, Printed, Words};
        [W_2|W_2_rest] ->
            K_2 = sortrunes(W_2),
            case (length(maps:get(K_2, Groups_4, nil)) == MaxLen_3) of
        true -> case mochi_not(maps:is_key(K_2, Printed)) of
        true -> G = sortstrings(maps:get(K_2, Groups_4, nil)),
            Line = ("[" ++ (case erlang:is_map(G) of true -> maps:get(0, G, nil); _ -> lists:nth(0 + 1, G) end)),
            I_7 = 1,
            Fun_10 = fun Fun_10_loop(G, Groups_4, I_7, K_2, Line, MaxLen_3, Printed, W_2, Words) ->
    case (I_7 < length(G)) of
        true ->
            Line_2 = ((Line ++ " ") ++ (case erlang:is_map(G) of true -> maps:get(I_7, G, nil); _ -> lists:nth(I_7 + 1, G) end)),
            I_8 = (I_7 + 1),
            Fun_10_loop(G, Groups_4, I_8, K_2, Line_2, MaxLen_3, Printed, W_2, Words);
        _ -> {G, Groups_4, I_7, K_2, Line, MaxLen_3, Printed, W_2, Words}
    end
end,
{G, Groups_4, I_8, K_2, Line_2, MaxLen_3, Printed, W_2, Words} = Fun_10(G, Groups_4, I_7, K_2, Line, MaxLen_3, Printed, W_2, Words),
            Line_3 = (Line_2 ++ "]"),
            io:format("~ts~n", [Line_3]),
            Printed_2 = maps:put(K_2, true, Printed),
            Fun_11 = Fun_10,
            G_2 = G,
            I_9 = I_8,
            Line_4 = Line_3,
            Printed_3 = Printed_2;
        _ -> Fun_11 = Fun_8,
            G_2 = nil,
            I_9 = nil,
            Line_4 = nil,
            Printed_3 = Printed
    end,
            Fun_12 = Fun_11,
            G_3 = G_2,
            I_10 = I_9,
            Line_5 = Line_4,
            Printed_4 = Printed_3;
        _ -> Fun_12 = Fun_8,
            G_3 = nil,
            I_10 = nil,
            Line_5 = nil,
            Printed_4 = Printed
    end,
            Fun_9_loop(W_2_rest, Groups_4, MaxLen_3, Printed_4, Words)
    end
end,
{Groups_4, MaxLen_3, Printed_4, Words} = Fun_9(Words, Groups_4, MaxLen_3, Printed, Words),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
