#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.55 (1cbd612b6e) on 2025-08-02 20:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('max', 20),
    erlang:put('words', #{3 => "Fizz", 5 => "Buzz", 7 => "Baxx"}),
    erlang:put('keys', [3, 5, 7]),
    Fun = fun Fun_loop(List) ->
    case List of
        [] -> {};
        [I|I_rest] ->
            Text = "",
            Fun_2 = fun Fun_2_loop(List, I, Text) ->
    case List of
        [] -> {I, Text};
        [N|N_rest] ->
            case ((I rem N) == 0) of
        true -> Text_2 = (Text ++ maps:get(N, erlang:get('words'), nil)),
            Text_3 = Text_2;
        _ -> Text_3 = Text
    end,
            Fun_2_loop(N_rest, I, Text_3)
    end
end,
{I, Text_3} = Fun_2(erlang:get('keys'), I, Text),
            case (Text_3 == "") of
        true -> Text_4 = lists:flatten(io_lib:format("~p", [I])),
            Text_5 = Text_4;
        _ -> Text_5 = Text_3
    end,
            io:format("~ts~n", [Text_5]),
            Fun_loop(I_rest)
    end
end,
{} = Fun(lists:seq(1, ((20 + 1)) - 1)),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
