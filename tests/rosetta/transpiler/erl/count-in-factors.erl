#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, show/1]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

show(N) ->
    try
        case (N == 1) of
        true -> io:format("~ts~n", ["1: 1"]),
            throw({return, nil});
        _ -> ok
    end,
        Out = (lists:flatten(io_lib:format("~p", [N])) ++ ": "),
        X = "",
        M = N,
        F = 2,
        Fun = fun Fun_loop(F, M, N, Out, X) ->
    case (M /= 1) of
        true ->
            case ((M rem F) == 0) of
        true -> Out_2 = ((Out ++ X) ++ lists:flatten(io_lib:format("~p", [F]))),
            X_2 = "Ã—",
            M_2 = mochi_to_int((M / F)),
            F_3 = F,
            M_3 = M_2,
            Out_3 = Out_2,
            X_3 = X_2;
        _ -> F_2 = (F + 1),
            F_3 = F_2,
            M_3 = M,
            Out_3 = Out,
            X_3 = X
    end,
            Fun_loop(F_3, M_3, N, Out_3, X_3);
        _ -> {F, M, N, Out, X}
    end
end,
{F_3, M_3, N, Out_3, X_3} = Fun(F, M, N, Out, X),
        io:format("~ts~n", [Out_3]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    show(1),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [I|I_rest] ->
            show(I),
            Fun_2_loop(I_rest)
    end
end,
{} = Fun_2(lists:seq(2, (10) - 1)),
    io:format("~ts~n", ["..."]),
    Fun_3 = fun Fun_3_loop(List) ->
    case List of
        [] -> {};
        [I_2|I_2_rest] ->
            show(I_2),
            Fun_3_loop(I_2_rest)
    end
end,
{} = Fun_3(lists:seq(2144, (2155) - 1)),
    io:format("~ts~n", ["..."]),
    Fun_4 = fun Fun_4_loop(List) ->
    case List of
        [] -> {};
        [I_3|I_3_rest] ->
            show(I_3),
            Fun_4_loop(I_3_rest)
    end
end,
{} = Fun_4(lists:seq(9987, (10000) - 1)),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
