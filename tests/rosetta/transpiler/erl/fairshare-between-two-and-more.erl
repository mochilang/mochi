#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, digitsummod/2, fairsharelist/2, sortints/1, turns/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (6aa59f472e) on 2025-08-02 17:26 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_pad_start(S, Len, Ch) ->
    Fill0 = case Ch of
        "" -> " ";
        _ -> Ch
    end,
    Fill = string:substr(Fill0, 1, 1),
    SL = length(S),
    case SL >= Len of
        true -> S;
        _ -> string:copies(Fill, Len - SL) ++ S
    end.

digitsummod(N, Base) ->
    try
        Sum = 0,
        J = N,
        Fun = fun Fun_loop(Base, J, N, Sum) ->
    case (J > 0) of
        true ->
            Sum_2 = (Sum + (J rem Base)),
            J_2 = (J div Base),
            Fun_loop(Base, J_2, N, Sum_2);
        _ -> {Base, J, N, Sum}
    end
end,
{Base, J_2, N, Sum_2} = Fun(Base, J, N, Sum),
        (Sum_2 rem Base)
    catch {return, Ret} -> Ret end.

fairsharelist(N_2, Base_2) ->
    try
        Res = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Base_2, I, N_2, Res) ->
    case (I < N_2) of
        true ->
            Res_2 = lists:append(Res, [digitsummod(I, Base_2)]),
            I_2 = (I + 1),
            Fun_2_loop(Base_2, I_2, N_2, Res_2);
        _ -> {Base_2, I, N_2, Res}
    end
end,
{Base_2, I_2, N_2, Res_2} = Fun_2(Base_2, I, N_2, Res),
        Res_2
    catch {return, Ret} -> Ret end.

sortints(Xs) ->
    try
        Arr = Xs,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Arr, I_3, Xs) ->
    case (I_3 < length(Arr)) of
        true ->
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(Arr, I_3, J_3, Xs) ->
    case (J_3 < (length(Arr) - 1)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(J_3, Arr, nil); _ -> lists:nth(J_3 + 1, Arr) end) > (case erlang:is_map(Arr) of true -> maps:get((J_3 + 1), Arr, nil); _ -> lists:nth((J_3 + 1) + 1, Arr) end)) of
        true -> T = (case erlang:is_map(Arr) of true -> maps:get(J_3, Arr, nil); _ -> lists:nth(J_3 + 1, Arr) end),
            Arr_2 = lists:sublist(Arr, J_3) ++ [(case erlang:is_map(Arr) of true -> maps:get((J_3 + 1), Arr, nil); _ -> lists:nth((J_3 + 1) + 1, Arr) end)] ++ lists:nthtail(J_3 + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (J_3 + 1)) ++ [T] ++ lists:nthtail((J_3 + 1) + 1, Arr_2),
            Arr_4 = Arr_3,
            T_2 = T;
        _ -> Arr_4 = Arr,
            T_2 = nil
    end,
            J_4 = (J_3 + 1),
            Fun_3_loop(Arr_4, I_3, J_4, Xs);
        _ -> {Arr, I_3, J_3, Xs}
    end
end,
{Arr_4, I_3, J_4, Xs} = Fun_3(Arr, I_3, J_3, Xs),
            I_4 = (I_3 + 1),
            Fun_4_loop(Arr_4, I_4, Xs);
        _ -> {Arr, I_3, Xs}
    end
end,
{Arr_4, I_4, Xs} = Fun_4(Arr, I_3, Xs),
        Arr_4
    catch {return, Ret} -> Ret end.

turns(N_3, Base_3) ->
    try
        Counts = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Base_3, Counts, I_5, N_3) ->
    case (I_5 < Base_3) of
        true ->
            Counts_2 = lists:append(Counts, [0]),
            I_6 = (I_5 + 1),
            Fun_5_loop(Base_3, Counts_2, I_6, N_3);
        _ -> {Base_3, Counts, I_5, N_3}
    end
end,
{Base_3, Counts_2, I_6, N_3} = Fun_5(Base_3, Counts, I_5, N_3),
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(Base_3, Counts_2, I_7, N_3) ->
    case (I_7 < N_3) of
        true ->
            V = digitsummod(I_7, Base_3),
            Counts_3 = lists:sublist(Counts_2, V) ++ [((case erlang:is_map(Counts_2) of true -> maps:get(V, Counts_2, nil); _ -> lists:nth(V + 1, Counts_2) end) + 1)] ++ lists:nthtail(V + 1, Counts_2),
            I_8 = (I_7 + 1),
            Fun_6_loop(Base_3, Counts_3, I_8, N_3);
        _ -> {Base_3, Counts_2, I_7, N_3}
    end
end,
{Base_3, Counts_3, I_8, N_3} = Fun_6(Base_3, Counts_2, I_7, N_3),
        Freq = #{},
        Fkeys = [],
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(Base_3, Counts_3, Fkeys, Freq, I_9, N_3) ->
    case (I_9 < Base_3) of
        true ->
            C = (case erlang:is_map(Counts_3) of true -> maps:get(I_9, Counts_3, nil); _ -> lists:nth(I_9 + 1, Counts_3) end),
            case (C > 0) of
        true -> case maps:is_key(C, Freq) of
        true -> Freq_2 = maps:put(C, (maps:get(C, Freq, nil) + 1), Freq),
            Fkeys_3 = Fkeys,
            Freq_4 = Freq_2;
        _ -> Freq_3 = maps:put(C, 1, Freq),
            Fkeys_2 = lists:append(Fkeys, [C]),
            Fkeys_3 = Fkeys_2,
            Freq_4 = Freq_3
    end,
            Fkeys_4 = Fkeys_3,
            Freq_5 = Freq_4;
        _ -> Fkeys_4 = Fkeys,
            Freq_5 = Freq
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(Base_3, Counts_3, Fkeys_4, Freq_5, I_10, N_3);
        _ -> {Base_3, Counts_3, Fkeys, Freq, I_9, N_3}
    end
end,
{Base_3, Counts_3, Fkeys_4, Freq_5, I_10, N_3} = Fun_7(Base_3, Counts_3, Fkeys, Freq, I_9, N_3),
        Total = 0,
        I_11 = 0,
        Fun_8 = fun Fun_8_loop(Base_3, Counts_3, Fkeys_4, Freq_5, I_11, N_3, Total) ->
    case (I_11 < length(Fkeys_4)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Freq_5) of true -> maps:get((case erlang:is_map(Fkeys_4) of true -> maps:get(I_11, Fkeys_4, nil); _ -> lists:nth(I_11 + 1, Fkeys_4) end), Freq_5, nil); _ -> lists:nth((case erlang:is_map(Fkeys_4) of true -> maps:get(I_11, Fkeys_4, nil); _ -> lists:nth(I_11 + 1, Fkeys_4) end) + 1, Freq_5) end)),
            I_12 = (I_11 + 1),
            Fun_8_loop(Base_3, Counts_3, Fkeys_4, Freq_5, I_12, N_3, Total_2);
        _ -> {Base_3, Counts_3, Fkeys_4, Freq_5, I_11, N_3, Total}
    end
end,
{Base_3, Counts_3, Fkeys_4, Freq_5, I_12, N_3, Total_2} = Fun_8(Base_3, Counts_3, Fkeys_4, Freq_5, I_11, N_3, Total),
        case (Total_2 /= Base_3) of
        true -> throw({return, (("only " ++ lists:flatten(io_lib:format("~p", [Total_2]))) ++ " have a turn")});
        _ -> ok
    end,
        Fkeys_5 = sortints(Fkeys_4),
        Res_3 = "",
        I_13 = 0,
        Fun_9 = fun Fun_9_loop(Base_3, Counts_3, Fkeys_5, Freq_5, I_13, N_3, Res_3, Total_2) ->
    case (I_13 < length(Fkeys_5)) of
        true ->
            case (I_13 > 0) of
        true -> Res_4 = (Res_3 ++ " or "),
            Res_5 = Res_4;
        _ -> Res_5 = Res_3
    end,
            Res_6 = (Res_5 ++ lists:flatten(io_lib:format("~p", [(case erlang:is_map(Fkeys_5) of true -> maps:get(I_13, Fkeys_5, nil); _ -> lists:nth(I_13 + 1, Fkeys_5) end)]))),
            I_14 = (I_13 + 1),
            Fun_9_loop(Base_3, Counts_3, Fkeys_5, Freq_5, I_14, N_3, Res_6, Total_2);
        _ -> {Base_3, Counts_3, Fkeys_5, Freq_5, I_13, N_3, Res_3, Total_2}
    end
end,
{Base_3, Counts_3, Fkeys_5, Freq_5, I_14, N_3, Res_6, Total_2} = Fun_9(Base_3, Counts_3, Fkeys_5, Freq_5, I_13, N_3, Res_3, Total_2),
        Res_6
    catch {return, Ret} -> Ret end.

main() ->
    try
        Bases1 = [2, 3, 5, 11],
        I_15 = 0,
        Fun_10 = fun Fun_10_loop(Bases1, I_15) ->
    case (I_15 < length(Bases1)) of
        true ->
            B = (case erlang:is_map(Bases1) of true -> maps:get(I_15, Bases1, nil); _ -> lists:nth(I_15 + 1, Bases1) end),
            io:format("~ts~n", [((mochi_pad_start(lists:flatten(io_lib:format("~p", [B])), 2, " ") ++ " : ") ++ lists:flatten(io_lib:format("~p", [fairsharelist(25, B)])))]),
            I_16 = (I_15 + 1),
            Fun_10_loop(Bases1, I_16);
        _ -> {Bases1, I_15}
    end
end,
{Bases1, I_16} = Fun_10(Bases1, I_15),
        io:format("~ts~n", [""]),
        io:format("~ts~n", ["How many times does each get a turn in 50000 iterations?"]),
        Bases2 = [191, 1377, 49999, 50000, 50001],
        I_17 = 0,
        Fun_11 = fun Fun_11_loop(Bases1, Bases2, I_17) ->
    case (I_17 < length(Bases2)) of
        true ->
            B_2 = (case erlang:is_map(Bases2) of true -> maps:get(I_17, Bases2, nil); _ -> lists:nth(I_17 + 1, Bases2) end),
            T_3 = turns(50000, B_2),
            io:format("~ts~n", [((("  With " ++ lists:flatten(io_lib:format("~p", [B_2]))) ++ " people: ") ++ T_3)]),
            I_18 = (I_17 + 1),
            Fun_11_loop(Bases1, Bases2, I_18);
        _ -> {Bases1, Bases2, I_17}
    end
end,
{Bases1, Bases2, I_18} = Fun_11(Bases1, Bases2, I_17),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
