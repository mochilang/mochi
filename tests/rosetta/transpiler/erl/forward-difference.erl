#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, fd/2]).

% Generated by Mochi transpiler v0.10.55 (0f7fd10226) on 2025-08-02 20:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

fd(A, Ord) ->
    try
        I = 0,
        Fun_2 = fun Fun_2_loop(A, I, Ord) ->
    case (I < Ord) of
        true ->
            J = 0,
            Fun = fun Fun_loop(A, I, J, Ord) ->
    case (J < ((length(A) - I) - 1)) of
        true ->
            A_2 = lists:sublist(A, J) ++ [((case erlang:is_map(A) of true -> maps:get((J + 1), A, nil); _ -> lists:nth((J + 1) + 1, A) end) - (case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> lists:nth(J + 1, A) end))] ++ lists:nthtail(J + 1, A),
            J_2 = (J + 1),
            Fun_loop(A_2, I, J_2, Ord);
        _ -> {A, I, J, Ord}
    end
end,
{A_2, I, J_2, Ord} = Fun(A, I, J, Ord),
            I_2 = (I + 1),
            Fun_2_loop(A_2, I_2, Ord);
        _ -> {A, I, Ord}
    end
end,
{A_2, I_2, Ord} = Fun_2(A, I, Ord),
        {lists:sublist(A_2, 0 + 1, ((length(A_2) - Ord) - 0)), A_2}
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('a', [90, 47, 58, 29, 22, 32, 55, 5, 55, 73]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [erlang:get('a')]))]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [fd(erlang:get('a'), 9)]))]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
