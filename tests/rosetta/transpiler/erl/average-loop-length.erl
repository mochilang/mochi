#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, absf/1, floorf/1, indexof/2, fmtf/1, padint/2, padfloat/2, avglen/1, ana/1, main/0]).

% Generated by Mochi transpiler v0.10.40 (0480f61bb0) on 2025-07-25 16:59 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.

absf(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

floorf(X_2) ->
    try
        Y = mochi_to_int(X_2),
        float(Y)
    catch {return, Ret} -> Ret end.

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, Ret} -> Ret end.

fmtf(X_3) ->
    try
        Y_2 = (floorf(((X_3 * 10000) + 0.5)) / 10000),
        S_2 = lists:flatten(io_lib:format("~p", [Y_2])),
        Dot = mochi_index_of(S_2, "."),
        case (Dot == (0 - 1)) of
        true -> S_3 = (S_2 ++ ".0000"),
            Decs_4 = nil,
            Fun_4 = nil,
            S_7 = S_3;
        _ -> Decs = ((length(S_2) - Dot) - 1),
            case (Decs > 4) of
        true -> S_4 = string:substr(S_2, 0 + 1, ((Dot + 5) - 0)),
            Decs_3 = Decs,
            Fun_3 = nil,
            S_6 = S_4;
        _ -> Fun_2 = fun Fun_2_loop(Decs, Dot, S_2, X_3, Y_2) ->
    case (Decs < 4) of
        true ->
            S_5 = (S_2 ++ "0"),
            Decs_2 = (Decs + 1),
            Fun_2_loop(Decs_2, Dot, S_5, X_3, Y_2);
        _ -> {Decs, Dot, S_2, X_3, Y_2}
    end
end,
{Decs_2, Dot, S_5, X_3, Y_2} = Fun_2(Decs, Dot, S_2, X_3, Y_2),
            Decs_3 = Decs_2,
            Fun_3 = Fun_2,
            S_6 = S_5
    end,
            Decs_4 = Decs_3,
            Fun_4 = Fun_3,
            S_7 = S_6
    end,
        S_7
    catch {return, Ret} -> Ret end.

padint(N, Width) ->
    try
        S_8 = lists:flatten(io_lib:format("~p", [N])),
        Fun_5 = fun Fun_5_loop(N, S_8, Width) ->
    case (length(S_8) < Width) of
        true ->
            S_9 = (" " ++ S_8),
            Fun_5_loop(N, S_9, Width);
        _ -> {N, S_8, Width}
    end
end,
{N, S_9, Width} = Fun_5(N, S_8, Width),
        S_9
    catch {return, Ret} -> Ret end.

padfloat(X_4, Width_2) ->
    try
        S_10 = fmtf(X_4),
        Fun_6 = fun Fun_6_loop(S_10, Width_2, X_4) ->
    case (length(S_10) < Width_2) of
        true ->
            S_11 = (" " ++ S_10),
            Fun_6_loop(S_11, Width_2, X_4);
        _ -> {S_10, Width_2, X_4}
    end
end,
{S_11, Width_2, X_4} = Fun_6(S_10, Width_2, X_4),
        S_11
    catch {return, Ret} -> Ret end.

avglen(N_2) ->
    try
        Tests = 10000,
        Sum = 0,
        Seed = 1,
        T = 0,
        Fun_9 = fun Fun_9_loop(N_2, Seed, Sum, T, Tests) ->
    case (T < Tests) of
        true ->
            Visited = [],
            I_3 = 0,
            Fun_7 = fun Fun_7_loop(I_3, N_2, Seed, Sum, T, Tests, Visited) ->
    case (I_3 < N_2) of
        true ->
            Visited_2 = lists:append(Visited, [false]),
            I_4 = (I_3 + 1),
            Fun_7_loop(I_4, N_2, Seed, Sum, T, Tests, Visited_2);
        _ -> {I_3, N_2, Seed, Sum, T, Tests, Visited}
    end
end,
{I_4, N_2, Seed, Sum, T, Tests, Visited_2} = Fun_7(I_3, N_2, Seed, Sum, T, Tests, Visited),
            X_5 = 0,
            Fun_8 = fun Fun_8_loop(I_4, N_2, Seed, Sum, T, Tests, Visited_2, X_5) ->
    case not lists:nth(X_5 + 1, Visited_2) of
        true ->
            Visited_3 = lists:sublist(Visited_2, X_5) ++ [true] ++ lists:nthtail(X_5 + 1, Visited_2),
            Sum_2 = (Sum + 1),
            Seed_2 = (((Seed * 1664525) + 1013904223) rem 2147483647),
            X_6 = (Seed_2 rem N_2),
            Fun_8_loop(I_4, N_2, Seed_2, Sum_2, T, Tests, Visited_3, X_6);
        _ -> {I_4, N_2, Seed, Sum, T, Tests, Visited_2, X_5}
    end
end,
{I_4, N_2, Seed_2, Sum_2, T, Tests, Visited_3, X_6} = Fun_8(I_4, N_2, Seed, Sum, T, Tests, Visited_2, X_5),
            T_2 = (T + 1),
            Fun_9_loop(N_2, Seed_2, Sum_2, T_2, Tests);
        _ -> {N_2, Seed, Sum, T, Tests}
    end
end,
{N_2, Seed_2, Sum_2, T_2, Tests} = Fun_9(N_2, Seed, Sum, T, Tests),
        (float(Sum_2) / Tests)
    catch {return, Ret} -> Ret end.

ana(N_3) ->
    try
        Nn = float(N_3),
        Term = 1,
        Sum_3 = 1,
        I_5 = (Nn - 1),
        Fun_10 = fun Fun_10_loop(I_5, N_3, Nn, Sum_3, Term) ->
    case (I_5 >= 1) of
        true ->
            Term_2 = (Term * (I_5 / Nn)),
            Sum_4 = (Sum_3 + Term_2),
            I_6 = (I_5 - 1),
            Fun_10_loop(I_6, N_3, Nn, Sum_4, Term_2);
        _ -> {I_5, N_3, Nn, Sum_3, Term}
    end
end,
{I_6, N_3, Nn, Sum_4, Term_2} = Fun_10(I_5, N_3, Nn, Sum_3, Term),
        Sum_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Nmax = 20,
        io:format("~ts~n", [" N    average    analytical    (error)"]),
        io:format("~ts~n", ["===  =========  ============  ========="]),
        N_4 = 1,
        Fun_11 = fun Fun_11_loop(N_4, Nmax) ->
    case (N_4 =< Nmax) of
        true ->
            A = avglen(N_4),
            B = ana(N_4),
            Err = ((absf((A - B)) / B) * 100),
            Line = (((((((padint(N_4, 3) ++ "  ") ++ padfloat(A, 9)) ++ "  ") ++ padfloat(B, 12)) ++ "  (") ++ padfloat(Err, 6)) ++ "%)"),
            io:format("~ts~n", [Line]),
            N_5 = (N_4 + 1),
            Fun_11_loop(N_5, Nmax);
        _ -> {N_4, Nmax}
    end
end,
{N_5, Nmax} = Fun_11(N_4, Nmax),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
