#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, showstate/2, maximize/1, unmaximize/1, iconify/1, deiconify/1, hide/1, showwindow/1, move/1, main/0]).

% Generated by Mochi transpiler v0.10.55 (1cbd612b6e) on 2025-08-02 20:59 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

showstate(W, Label) ->
    try
        io:format("~ts~n", [((((((((((((((Label ++ ": pos=(") ++ lists:flatten(io_lib:format("~p", [maps:get("x", W, nil)]))) ++ ",") ++ lists:flatten(io_lib:format("~p", [maps:get("y", W, nil)]))) ++ ") size=(") ++ lists:flatten(io_lib:format("~p", [maps:get("w", W, nil)]))) ++ "x") ++ lists:flatten(io_lib:format("~p", [maps:get("h", W, nil)]))) ++ ") max=") ++ lists:flatten(io_lib:format("~p", [maps:get("maximized", W, nil)]))) ++ " icon=") ++ lists:flatten(io_lib:format("~p", [maps:get("iconified", W, nil)]))) ++ " visible=") ++ lists:flatten(io_lib:format("~p", [maps:get("visible", W, nil)])))]),
        nil
    catch {return, Ret} -> Ret end.

maximize(W_2) ->
    try
        W_3 = maps:put("maximized", true, W_2),
        W_4 = maps:put("w", 800, W_3),
        W_5 = maps:put("h", 600, W_4),
        W_5
    catch {return, Ret} -> Ret end.

unmaximize(W_6) ->
    try
        W_7 = maps:put("maximized", false, W_6),
        W_8 = maps:put("w", 640, W_7),
        W_9 = maps:put("h", 480, W_8),
        W_9
    catch {return, Ret} -> Ret end.

iconify(W_10) ->
    try
        W_11 = maps:put("iconified", true, W_10),
        W_12 = maps:put("visible", false, W_11),
        W_12
    catch {return, Ret} -> Ret end.

deiconify(W_13) ->
    try
        W_14 = maps:put("iconified", false, W_13),
        W_15 = maps:put("visible", true, W_14),
        W_15
    catch {return, Ret} -> Ret end.

hide(W_16) ->
    try
        W_17 = maps:put("visible", false, W_16),
        W_17
    catch {return, Ret} -> Ret end.

showwindow(W_18) ->
    try
        W_19 = maps:put("visible", true, W_18),
        W_19
    catch {return, Ret} -> Ret end.

move(W_20) ->
    try
        case maps:get("shifted", W_20, nil) of
        true -> W_21 = maps:put("x", (maps:get("x", W_20, nil) - 10), W_20),
            W_22 = maps:put("y", (maps:get("y", W_21, nil) - 10), W_21),
            W_25 = W_22;
        _ -> W_23 = maps:put("x", (maps:get("x", W_20, nil) + 10), W_20),
            W_24 = maps:put("y", (maps:get("y", W_23, nil) + 10), W_23),
            W_25 = W_24
    end,
        W_26 = maps:put("shifted", mochi_not(maps:get("shifted", W_25, nil)), W_25),
        W_26
    catch {return, Ret} -> Ret end.

main() ->
    try
        Win = #{"x" => 100, "y" => 100, "w" => 640, "h" => 480, "maximized" => false, "iconified" => false, "visible" => true, "shifted" => false},
        showstate(Win, "Start"),
        Win_2 = maximize(Win),
        showstate(Win_2, "Maximize"),
        Win_3 = unmaximize(Win_2),
        showstate(Win_3, "Unmaximize"),
        Win_4 = iconify(Win_3),
        showstate(Win_4, "Iconify"),
        Win_5 = deiconify(Win_4),
        showstate(Win_5, "Deiconify"),
        Win_6 = hide(Win_5),
        showstate(Win_6, "Hide"),
        Win_7 = showwindow(Win_6),
        showstate(Win_7, "Show"),
        Win_8 = move(Win_7),
        showstate(Win_8, "Move"),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
