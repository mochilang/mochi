#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, f/0, g/2, h/2, main/0]).

% Generated by Mochi transpiler v0.10.41 (228dd6653b) on 2025-07-26 21:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

f() ->
    try
        [0, 0]
    catch {return, Ret} -> Ret end.

g(A, B) ->
    try
        0
    catch {return, Ret} -> Ret end.

h(S, Nums) ->
    try
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Ab = f(),
        A_2 = lists:nth(0 + 1, Ab),
        B_2 = lists:nth(1 + 1, Ab),
        Cb = lists:nth(1 + 1, f()),
        D = g(A_2, Cb),
        E = g(D, B_2),
        I = g(D, 2),
        List = [],
        List_2 = lists:append(List, [A_2]),
        List_3 = lists:append(List_2, [D]),
        List_4 = lists:append(List_3, [E]),
        List_5 = lists:append(List_4, [I]),
        I_2 = length(List_5),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    Start = mochi_now(),
    StartMem = erlang:memory(total),
    main(),
    End = mochi_now(),
    EndMem = erlang:memory(total),
    DurationUs = (End - Start) div 1000,
    MemBytes = erlang:abs(EndMem - StartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
