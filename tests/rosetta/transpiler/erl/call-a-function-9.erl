#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, f/0, g/2, h/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (b43d15e5bc) on 2025-08-03 11:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

f() ->
    try
        [0, 0]
    catch {return, Ret} -> Ret end.

g(A, B) ->
    try
        0
    catch {return, Ret} -> Ret end.

h(S, Nums) ->
    try
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Ab = f(),
        A_2 = (case erlang:is_map(Ab) of true -> maps:get(0, Ab, nil); _ -> lists:nth(0 + 1, Ab) end),
        B_2 = (case erlang:is_map(Ab) of true -> maps:get(1, Ab, nil); _ -> lists:nth(1 + 1, Ab) end),
        Cb = (case erlang:is_map(f()) of true -> maps:get(1, f(), nil); _ -> lists:nth(1 + 1, f()) end),
        D = g(A_2, Cb),
        E = g(D, B_2),
        I = g(D, 2),
        List = [],
        List_2 = lists:append(List, [A_2]),
        List_3 = lists:append(List_2, [D]),
        List_4 = lists:append(List_3, [E]),
        List_5 = lists:append(List_4, [I]),
        I_2 = length(List_5),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
