#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, show/1, gen/2, main/0]).

% Generated by Mochi transpiler v0.10.50 (e649287d54) on 2025-07-30 14:16 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

show(Xs) ->
    try
        S = "",
        I = 0,
        Fun = fun Fun_loop(I, S, Xs) ->
    case (I < length(Xs)) of
        true ->
            S_2 = (S ++ lists:flatten(io_lib:format("~p", [lists:nth(I + 1, Xs)]))),
            case (I < (length(Xs) - 1)) of
        true -> S_3 = (S_2 ++ " "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, S_4, Xs);
        _ -> {I, S, Xs}
    end
end,
{I_2, S_4, Xs} = Fun(I, S, Xs),
        S_4
    catch {return, Ret} -> Ret end.

gen(Init, N) ->
    try
        B = Init,
        Res = [],
        Sum = 0,
        Fun_2 = fun Fun_2_loop(List, B, Init, N, Res, Sum) ->
    case List of
        [] -> {B, Init, N, Res, Sum};
        [X|X_rest] ->
            Res_2 = lists:append(Res, [X]),
            Sum_2 = (Sum + X),
            Fun_2_loop(X_rest, B, Init, N, Res_2, Sum_2)
    end
end,
{B, Init, N, Res_2, Sum_2} = Fun_2(B, B, Init, N, Res, Sum),
        Fun_3 = fun Fun_3_loop(B, Init, N, Res_2, Sum_2) ->
    case (length(Res_2) < N) of
        true ->
            Next = Sum_2,
            Res_3 = lists:append(Res_2, [Next]),
            Sum_3 = ((Sum_2 + Next) - lists:nth(0 + 1, B)),
            B_2 = lists:append(slice(B, 1, length(B)), [Next]),
            Fun_3_loop(B_2, Init, N, Res_3, Sum_3);
        _ -> {B, Init, N, Res_2, Sum_2}
    end
end,
{B_2, Init, N, Res_3, Sum_3} = Fun_3(B, Init, N, Res_2, Sum_2),
        Res_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        N_2 = 10,
        io:format("~ts~n", [(" Fibonacci: " ++ show(gen([1, 1], 10)))]),
        io:format("~ts~n", [("Tribonacci: " ++ show(gen([1, 1, 2], 10)))]),
        io:format("~ts~n", [("Tetranacci: " ++ show(gen([1, 1, 2, 4], 10)))]),
        io:format("~ts~n", [("     Lucas: " ++ show(gen([2, 1], 10)))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
