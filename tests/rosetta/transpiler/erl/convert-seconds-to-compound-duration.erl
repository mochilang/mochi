#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, timestr/1]).

% Generated by Mochi transpiler v0.10.41 (4e0e7fcd7f) on 2025-07-26 23:05 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

timestr(Sec) ->
    try
        Wks = (Sec / 604800),
        Sec_2 = (Sec rem 604800),
        Ds = (Sec_2 / 86400),
        Sec_3 = (Sec_2 rem 86400),
        Hrs = (Sec_3 / 3600),
        Sec_4 = (Sec_3 rem 3600),
        Mins = (Sec_4 / 60),
        Sec_5 = (Sec_4 rem 60),
        Res = "",
        Comma = false,
        case (Wks /= 0) of
        true -> Res_2 = ((Res ++ lists:flatten(io_lib:format("~p", [Wks]))) ++ " wk"),
            Comma_2 = true,
            Comma_3 = Comma_2,
            Res_3 = Res_2;
        _ -> Comma_3 = Comma,
            Res_3 = Res
    end,
        case (Ds /= 0) of
        true -> case Comma_3 of
        true -> Res_4 = (Res_3 ++ ", "),
            Res_5 = Res_4;
        _ -> Res_5 = Res_3
    end,
            Res_6 = ((Res_5 ++ lists:flatten(io_lib:format("~p", [Ds]))) ++ " d"),
            Comma_4 = true,
            Comma_5 = Comma_4,
            Res_7 = Res_6;
        _ -> Comma_5 = Comma_3,
            Res_7 = Res_3
    end,
        case (Hrs /= 0) of
        true -> case Comma_5 of
        true -> Res_8 = (Res_7 ++ ", "),
            Res_9 = Res_8;
        _ -> Res_9 = Res_7
    end,
            Res_10 = ((Res_9 ++ lists:flatten(io_lib:format("~p", [Hrs]))) ++ " hr"),
            Comma_6 = true,
            Comma_7 = Comma_6,
            Res_11 = Res_10;
        _ -> Comma_7 = Comma_5,
            Res_11 = Res_7
    end,
        case (Mins /= 0) of
        true -> case Comma_7 of
        true -> Res_12 = (Res_11 ++ ", "),
            Res_13 = Res_12;
        _ -> Res_13 = Res_11
    end,
            Res_14 = ((Res_13 ++ lists:flatten(io_lib:format("~p", [Mins]))) ++ " min"),
            Comma_8 = true,
            Comma_9 = Comma_8,
            Res_15 = Res_14;
        _ -> Comma_9 = Comma_7,
            Res_15 = Res_11
    end,
        case (Sec_5 /= 0) of
        true -> case Comma_9 of
        true -> Res_16 = (Res_15 ++ ", "),
            Res_17 = Res_16;
        _ -> Res_17 = Res_15
    end,
            Res_18 = ((Res_17 ++ lists:flatten(io_lib:format("~p", [Sec_5]))) ++ " sec"),
            Res_19 = Res_18;
        _ -> Res_19 = Res_15
    end,
        Res_19
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    io:format("~p~n", [timestr(7259)]),
    io:format("~p~n", [timestr(86400)]),
    io:format("~p~n", [timestr(6000000)]),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
