#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, padleft/2, modpow/3, main/0]).

% Generated by Mochi transpiler v0.10.42 (0b9dd5768f) on 2025-07-28 04:27 UTC


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

padleft(N, Width) ->
    try
        S = lists:flatten(io_lib:format("~p", [N])),
        Fun = fun Fun_loop(N, S, Width) ->
    case (length(S) < Width) of
        true ->
            S_2 = (" " ++ S),
            Fun_loop(N, S_2, Width);
        _ -> {N, S, Width}
    end
end,
{N, S_2, Width} = Fun(N, S, Width),
        S_2
    catch {return, Ret} -> Ret end.

modpow(Base, Exp, Mod) ->
    try
        Result = (1 rem Mod),
        B = (Base rem Mod),
        E = Exp,
        Fun_2 = fun Fun_2_loop(B, Base, E, Exp, Mod, Result) ->
    case (E > 0) of
        true ->
            case ((E rem 2) == 1) of
        true -> Result_2 = ((Result * B) rem Mod),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            B_2 = ((B * B) rem Mod),
            E_2 = (E div 2),
            Fun_2_loop(B_2, Base, E_2, Exp, Mod, Result_3);
        _ -> {B, Base, E, Exp, Mod, Result}
    end
end,
{B_2, Base, E_2, Exp, Mod, Result_3} = Fun_2(B, Base, E, Exp, Mod, Result),
        Result_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        K = 2,
        Fun_8 = fun Fun_8_loop(K) ->
    case (K =< 10) of
        true ->
            try
                io:format("~ts~n", [(("The first 50 Curzon numbers using a base of " ++ lists:flatten(io_lib:format("~p", [K]))) ++ " :")]),
                Count = 0,
                N_2 = 1,
                Curzon50 = [],
                Fun_7 = fun Fun_7_loop(Count, Curzon50, K, N_2) ->
    case true of
        true ->
            try
                D = ((K * N_2) + 1),
                case (((modpow(K, N_2, D) + 1) rem D) == 0) of
        true -> case (Count < 50) of
        true -> Curzon50_2 = lists:append(Curzon50, [N_2]),
            Curzon50_3 = Curzon50_2;
        _ -> Curzon50_3 = Curzon50
    end,
            Count_2 = (Count + 1),
            case (Count_2 == 50) of
        true -> Idx = 0,
            Fun_4 = fun Fun_4_loop(Count_2, Curzon50_3, D, Idx, K, N_2) ->
    case (Idx < length(Curzon50_3)) of
        true ->
            Line = "",
            J = 0,
            Fun_3 = fun Fun_3_loop(Count_2, Curzon50_3, D, Idx, J, K, Line, N_2) ->
    case (J < 10) of
        true ->
            Line_2 = ((Line ++ padleft(lists:nth(Idx + 1, Curzon50_3), 4)) ++ " "),
            Idx_2 = (Idx + 1),
            J_2 = (J + 1),
            Fun_3_loop(Count_2, Curzon50_3, D, Idx_2, J_2, K, Line_2, N_2);
        _ -> {Count_2, Curzon50_3, D, Idx, J, K, Line, N_2}
    end
end,
{Count_2, Curzon50_3, D, Idx_2, J_2, K, Line_2, N_2} = Fun_3(Count_2, Curzon50_3, D, Idx, J, K, Line, N_2),
            io:format("~ts~n", [string:substr(Line_2, 0 + 1, ((length(Line_2) - 1) - 0))]),
            Fun_4_loop(Count_2, Curzon50_3, D, Idx_2, K, N_2);
        _ -> {Count_2, Curzon50_3, D, Idx, K, N_2}
    end
end,
{Count_2, Curzon50_3, D, Idx_2, K, N_2} = Fun_4(Count_2, Curzon50_3, D, Idx, K, N_2),
            Fun_5 = Fun_4,
            Idx_3 = Idx_2;
        _ -> Fun_5 = nil,
            Idx_3 = nil
    end,
            case (Count_2 == 1000) of
        true -> io:format("~ts~n", [("\nOne thousandth: " ++ lists:flatten(io_lib:format("~p", [N_2])))]),
            throw(break);
        _ -> ok
    end,
            Count_3 = Count_2,
            Curzon50_4 = Curzon50_3,
            Fun_6 = Fun_5,
            Idx_4 = Idx_3;
        _ -> Count_3 = Count,
            Curzon50_4 = Curzon50,
            Fun_6 = nil,
            Idx_4 = nil
    end,
                N_3 = (N_2 + 1),
                Fun_7_loop(Count_3, Curzon50_4, K, N_3)
            catch
                {continue, C0, C1, C2, C3} -> Fun_7_loop(C0, C1, C2, C3);
                break -> {Count, Curzon50, K, N_2}
            end;
        _ -> {Count, Curzon50, K, N_2}
    end
end,
{Count_3, Curzon50_4, K, N_3} = Fun_7(Count, Curzon50, K, N_2),
                io:format("~ts~n", [""]),
                K_2 = (K + 2),
                Fun_8_loop(K_2)
            catch
                {continue, C0} -> Fun_8_loop(C0);
                break -> {K}
            end;
        _ -> {K}
    end
end,
{K_2} = Fun_8(K),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
