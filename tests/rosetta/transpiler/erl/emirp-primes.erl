#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isprime/1, revint/1, main/0]).

% Generated by Mochi transpiler v0.10.54 (305a5d9113) on 2025-08-02 11:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.

isprime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((N rem 2) == 0) of
        true -> throw({return, (N == 2)});
        _ -> ok
    end,
        D = 3,
        Fun = fun Fun_loop(D, N) ->
    case ((D * D) =< N) of
        true ->
            case ((N rem D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 2),
            Fun_loop(D_2, N);
        _ -> {D, N}
    end
end,
{D_2, N} = Fun(D, N),
        true
    catch {return, Ret} -> Ret end.

revint(N_2) ->
    try
        R = 0,
        T = N_2,
        Fun_2 = fun Fun_2_loop(N_2, R, T) ->
    case (T > 0) of
        true ->
            R_2 = ((R * 10) + (T rem 10)),
            T_2 = mochi_to_int((T div 10)),
            Fun_2_loop(N_2, R_2, T_2);
        _ -> {N_2, R, T}
    end
end,
{N_2, R_2, T_2} = Fun_2(N_2, R, T),
        R_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Emirps = [],
        N_3 = 2,
        Fun_3 = fun Fun_3_loop(Emirps, N_3) ->
    case (length(Emirps) < 10000) of
        true ->
            case (isprime(N_3) /= nil) of
        true -> R_3 = revint(N_3),
            case ((R_3 /= N_3) andalso isprime(R_3)) of
        true -> Emirps_2 = lists:append(Emirps, [N_3]),
            Emirps_3 = Emirps_2;
        _ -> Emirps_3 = Emirps
    end,
            Emirps_4 = Emirps_3,
            R_4 = R_3;
        _ -> Emirps_4 = Emirps,
            R_4 = nil
    end,
            N_4 = (N_3 + 1),
            Fun_3_loop(Emirps_4, N_4);
        _ -> {Emirps, N_3}
    end
end,
{Emirps_4, N_4} = Fun_3(Emirps, N_3),
        Line = "   [",
        I = 0,
        Fun_4 = fun Fun_4_loop(Emirps_4, I, Line, N_4) ->
    case (I < 20) of
        true ->
            Line_2 = (Line ++ lists:flatten(io_lib:format("~p", [lists:nth(I + 1, Emirps_4)]))),
            case (I < 19) of
        true -> Line_3 = (Line_2 ++ ", "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            I_2 = (I + 1),
            Fun_4_loop(Emirps_4, I_2, Line_4, N_4);
        _ -> {Emirps_4, I, Line, N_4}
    end
end,
{Emirps_4, I_2, Line_4, N_4} = Fun_4(Emirps_4, I, Line, N_4),
        Line_5 = (Line_4 ++ "]"),
        io:format("~ts~n", ["First 20:"]),
        io:format("~ts~n", [Line_5]),
        Line_6 = "  [",
        Fun_5 = fun Fun_5_loop(List, Emirps_4, I_2, Line_6, N_4) ->
    case List of
        [] -> {Emirps_4, I_2, Line_6, N_4};
        [E|E_rest] ->
        try
            case (E >= 8000) of
        true -> throw(break);
        _ -> ok
    end,
            case (E >= 7700) of
        true -> Line_7 = (("  [" ++ lists:flatten(io_lib:format("~p", [E]))) ++ ", "),
            Line_8 = Line_7;
        _ -> Line_8 = Line_6
    end,
            Fun_5_loop(E_rest, Emirps_4, I_2, Line_8, N_4)
        catch
            {continue, C0, C1, C2, C3} -> Fun_5_loop(E_rest, C0, C1, C2, C3);
            {break, B0, B1, B2, B3} -> {B0, B1, B2, B3};
            break -> {Emirps_4, I_2, Line_6, N_4}
        end
    end
end,
{Emirps_4, I_2, Line_8, N_4} = Fun_5(Emirps_4, Emirps_4, I_2, Line_6, N_4),
        Line_9 = (Line_8 ++ "]"),
        io:format("~ts~n", ["Between 7700 and 8000:"]),
        io:format("~ts~n", [Line_9]),
        io:format("~ts~n", ["10000th:"]),
        io:format("~ts~n", [(("   [" ++ lists:flatten(io_lib:format("~p", [lists:nth(9999 + 1, Emirps_4)]))) ++ "]")]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
