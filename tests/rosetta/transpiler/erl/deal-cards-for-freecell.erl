#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rnd/0, deal/1, show/1]).

% Generated by Mochi transpiler v0.10.41 (4a1f4378c8) on 2025-07-27 06:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

rnd() ->
    try
        erlang:put('seed', (((erlang:get('seed') * 214013) + 2531011) rem 2147483648)),
        (erlang:get('seed') div 65536)
    catch {return, Ret} -> Ret end.

deal(Game) ->
    try
        erlang:put('seed', Game),
        Deck = [],
        I = 0,
        Fun = fun Fun_loop(Deck, Game, I) ->
    case (I < 52) of
        true ->
            Deck_2 = lists:append(Deck, [(51 - I)]),
            I_2 = (I + 1),
            Fun_loop(Deck_2, Game, I_2);
        _ -> {Deck, Game, I}
    end
end,
{Deck_2, Game, I_2} = Fun(Deck, Game, I),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Deck_2, Game, I_3) ->
    case (I_3 < 51) of
        true ->
            J = (51 - (rnd() rem (52 - I_3))),
            Tmp = lists:nth(I_3 + 1, Deck_2),
            Deck_3 = lists:sublist(Deck_2, I_3) ++ [lists:nth(J + 1, Deck_2)] ++ lists:nthtail(I_3 + 1, Deck_2),
            Deck_4 = lists:sublist(Deck_3, J) ++ [Tmp] ++ lists:nthtail(J + 1, Deck_3),
            I_4 = (I_3 + 1),
            Fun_2_loop(Deck_4, Game, I_4);
        _ -> {Deck_2, Game, I_3}
    end
end,
{Deck_4, Game, I_4} = Fun_2(Deck_2, Game, I_3),
        Deck_4
    catch {return, Ret} -> Ret end.

show(Cards) ->
    try
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Cards, I_5) ->
    case (I_5 < length(Cards)) of
        true ->
            C = lists:nth(I_5 + 1, Cards),
            case ((((I_5 + 1) rem 8) == 0) orelse ((I_5 + 1) == length(Cards))) of
        true -> io:format("~ts~n", [""]);
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Cards, I_6);
        _ -> {Cards, I_5}
    end
end,
{Cards, I_6} = Fun_3(Cards, I_5),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    erlang:put('seed', 1),
    erlang:put('suits', "CDHS"),
    erlang:put('nums', "A23456789TJQK"),
    io:format("~ts~n", [""]),
    io:format("~ts~n", ["Game #1"]),
    show(deal(1)),
    io:format("~ts~n", [""]),
    io:format("~ts~n", ["Game #617"]),
    show(deal(617)),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
