#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow/2, ackermann2/2, main/0]).

% Generated by Mochi transpiler v0.10.39 (8d675063ee) on 2025-07-24 16:38 +0700

pow(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            try
                Result_2 = (Result * Base),
                I_2 = (I + 1),
                Fun_loop(Base, Exp, I_2, Result_2)
            catch
                {continue, C0, C1, C2, C3} -> Fun_loop(C0, C1, C2, C3);
                break -> {Base, Exp, I, Result}
            end;
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

ackermann2(M, N) ->
    try
        case (M == 0) of
        true -> throw({return, (N + 1)});
        _ -> ok
    end,
        case (M == 1) of
        true -> throw({return, (N + 2)});
        _ -> ok
    end,
        case (M == 2) of
        true -> throw({return, ((2 * N) + 3)});
        _ -> ok
    end,
        case (M == 3) of
        true -> throw({return, ((8 * pow(2, N)) - 3)});
        _ -> ok
    end,
        case (N == 0) of
        true -> throw({return, ackermann2((M - 1), 1)});
        _ -> ok
    end,
        ackermann2((M - 1), ackermann2(M, (N - 1)))
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [("A(0, 0) = " ++ lists:flatten(io_lib:format("~p", [ackermann2(0, 0)])))]),
        io:format("~ts~n", [("A(1, 2) = " ++ lists:flatten(io_lib:format("~p", [ackermann2(1, 2)])))]),
        io:format("~ts~n", [("A(2, 4) = " ++ lists:flatten(io_lib:format("~p", [ackermann2(2, 4)])))]),
        io:format("~ts~n", [("A(3, 4) = " ++ lists:flatten(io_lib:format("~p", [ackermann2(3, 4)])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    main().
