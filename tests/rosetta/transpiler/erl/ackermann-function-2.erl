#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow/2, ackermann2/2, main/0]).

% Generated by Mochi transpiler v0.10.55 (1df91402aa) on 2025-08-02 23:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.

pow(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

ackermann2(M, N) ->
    try
        case (M == 0) of
        true -> throw({return, (N + 1)});
        _ -> ok
    end,
        case (M == 1) of
        true -> throw({return, (N + 2)});
        _ -> ok
    end,
        case (M == 2) of
        true -> throw({return, ((2 * N) + 3)});
        _ -> ok
    end,
        case (M == 3) of
        true -> throw({return, (mochi_safe_mul(8, pow(2, N)) - 3)});
        _ -> ok
    end,
        case (N == 0) of
        true -> throw({return, ackermann2((M - 1), 1)});
        _ -> ok
    end,
        ackermann2((M - 1), ackermann2(M, (N - 1)))
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [("A(0, 0) = " ++ lists:flatten(io_lib:format("~p", [ackermann2(0, 0)])))]),
        io:format("~ts~n", [("A(1, 2) = " ++ lists:flatten(io_lib:format("~p", [ackermann2(1, 2)])))]),
        io:format("~ts~n", [("A(2, 4) = " ++ lists:flatten(io_lib:format("~p", [ackermann2(2, 4)])))]),
        io:format("~ts~n", [("A(3, 4) = " ++ lists:flatten(io_lib:format("~p", [ackermann2(3, 4)])))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    BenchStart = mochi_now(),
    BenchStartMem = erlang:memory(total),
    main(),
    BenchEnd = mochi_now(),
    BenchEndMem = erlang:memory(total),
    DurationUs = (BenchEnd - BenchStart) div 1000,
    MemBytes = erlang:abs(BenchEndMem - BenchStartMem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [DurationUs, MemBytes]).
