// Generated by Mochi transpiler
Map<String, dynamic> node(String cl, dynamic le, int aa, dynamic ri) {
  return {"cl": cl, "le": le, "aa": aa, "ri": ri};
}

String treeString(dynamic t) {
  if (t == null) {
    return "E";
  }
  final m = t as Map<String, dynamic>;
  return "T(" + m["cl"] + ", " + treeString(m["le"]) + ", " + (m["aa"]).toString() + ", " + treeString(m["ri"]) + ")";
}

dynamic balance(dynamic t) {
  if (t == null) {
    return t;
  }
  final m = t as Map<String, dynamic>;
  if (m["cl"] != "B") {
    return t;
  }
  final le = m["le"];
  final ri = m["ri"];
  if (le != null) {
    final leMap = le as Map<String, dynamic>;
    if (leMap["cl"] == "R") {
    final lele = leMap["le"];
    if (lele != null) {
    final leleMap = lele as Map<String, dynamic>;
    if (leleMap["cl"] == "R") {
    return node("R", node("B", leleMap["le"], leleMap["aa"], leleMap["ri"]), leMap["aa"], node("B", leMap["ri"], m["aa"], ri));
  };
  };
    final leri = leMap["ri"];
    if (leri != null) {
    final leriMap = leri as Map<String, dynamic>;
    if (leriMap["cl"] == "R") {
    return node("R", node("B", leMap["le"], leMap["aa"], leriMap["le"]), leriMap["aa"], node("B", leriMap["ri"], m["aa"], ri));
  };
  };
  };
  }
  if (ri != null) {
    final riMap = ri as Map<String, dynamic>;
    if (riMap["cl"] == "R") {
    final rile = riMap["le"];
    if (rile != null) {
    final rileMap = rile as Map<String, dynamic>;
    if (rileMap["cl"] == "R") {
    return node("R", node("B", m["le"], m["aa"], rileMap["le"]), rileMap["aa"], node("B", rileMap["ri"], riMap["aa"], riMap["ri"]));
  };
  };
    final riri = riMap["ri"];
    if (riri != null) {
    final ririMap = riri as Map<String, dynamic>;
    if (ririMap["cl"] == "R") {
    return node("R", node("B", m["le"], m["aa"], riMap["le"]), riMap["aa"], node("B", ririMap["le"], ririMap["aa"], ririMap["ri"]));
  };
  };
  };
  }
  return t;
}

dynamic ins(dynamic tr, int x) {
  if (tr == null) {
    return node("R", null, x, null);
  }
  if (x.toString().compareTo(tr["aa"].toString()) < 0) {
    return balance(node(tr["cl"], ins(tr["le"], x), tr["aa"], tr["ri"]));
  }
  if (x.toString().compareTo(tr["aa"].toString()) > 0) {
    return balance(node(tr["cl"], tr["le"], tr["aa"], ins(tr["ri"], x)));
  }
  return tr;
}

dynamic insert(dynamic tr, int x) {
  final t = ins(tr, x);
  if (t == null) {
    return null;
  }
  final m = t as Map<String, dynamic>;
  return node("B", m["le"], m["aa"], m["ri"]);
}

var tr = null;
int i = 1;
void main() {
  while (i <= 16) {
    tr = insert(tr, i);
    i = i + 1;
  }
  print(treeString(tr));
}
