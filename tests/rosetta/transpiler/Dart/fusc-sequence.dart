// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int fuscVal(int n) {
  int a = 1;
  int b = 0;
  int x = n;
  while (x > 0) {
    if (x % 2 == 0) {
    x = x ~/ 2;
    a = a + b;
  } else {
    x = (x - 1) ~/ 2;
    b = a + b;
  }
  }
  if (n == 0) {
    return 0;
  }
  return b;
}

List<int> firstFusc(int n) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < n) {
    arr = [...arr, fuscVal(i)];
    i = i + 1;
  }
  return arr;
}

String commatize(int n) {
  String s = (n).toString();
  bool neg = false;
  if (n < 0) {
    neg = true;
    s = _substr(s, 1, s.length);
  }
  int i = s.length - 3;
  while (i >= 1) {
    s = _substr(s, 0, i) + "," + _substr(s, i, s.length);
    i = i - 3;
  }
  if (neg) {
    return "-" + s;
  }
  return s;
}

String padLeft(String s, int w) {
  String out = s;
  while (out.length < w) {
    out = " " + out;
  }
  return out;
}

void _main() {
  print("The first 61 fusc numbers are:");
  print((firstFusc(61)).toString());
  print("\nThe fusc numbers whose length > any previous fusc number length are:");
  List<int> idxs = [0, 37, 1173, 35499, 699051, 19573419];
  int i = 0;
  while (i < idxs.length) {
    int idx = idxs[i];
    int val = fuscVal(idx);
    String numStr = padLeft(commatize(val), 7);
    String idxStr = padLeft(commatize(idx), 10);
    print(numStr + " (index " + idxStr + ")");
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
