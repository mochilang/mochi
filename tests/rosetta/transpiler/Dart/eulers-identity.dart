// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Complex {
  num re;
  num im;
  Complex({required this.re, required this.im});
}

num PI = 3.141592653589793;
num sinApprox(num x) {
  num term = x;
  num sum = x;
  int n = 1;
  while (n <= 10) {
    num denom = (2 * n * (2 * n + 1)).toDouble();
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

num cosApprox(num x) {
  num term = 1.0;
  num sum = 1.0;
  int n = 1;
  while (n <= 10) {
    num denom = ((2 * n - 1) * 2 * n).toDouble();
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

Complex cis(num x) {
  return Complex(re: cosApprox(x), im: sinApprox(x));
}

Complex add(Complex a, Complex b) {
  return Complex(re: a.re + b.re, im: a.im + b.im);
}

String cstr(Complex a) {
  String s = "(" + (a.re).toString();
  if (a.im >= 0) {
    s = s + "+" + (a.im).toString() + "i)";
  } else {
    s = s + (a.im).toString() + "i)";
  }
  return s;
}

void _main() {
  Complex result = add(cis(PI), Complex(re: 1.0, im: 0.0));
  print(cstr(result));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
