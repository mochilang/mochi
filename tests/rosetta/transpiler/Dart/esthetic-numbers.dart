// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String digits = "0123456789abcdef";
String toBase(int n, int b) {
  if (n == 0) {
    return "0";
  }
  int v = n;
  String out = "";
  while (v > 0) {
    int d = v % b;
    out = _substr(digits, d, d + 1) + out;
    v = v ~/ b;
  }
  return out;
}

int uabs(int a, int b) {
  if (a > b) {
    return a - b;
  }
  return b - a;
}

bool isEsthetic(int n, int b) {
  if (n == 0) {
    return false;
  }
  int i = n % b;
  n = n ~/ b;
  while (n > 0) {
    int j = n % b;
    if (uabs(i, j) != 1) {
    return false;
  }
    n = n ~/ b;
    i = j;
  }
  return true;
}

List<int> esths = <int>[];
void dfs(int n, int m, int i) {
  if (i >= n && i <= m) {
    esths = [...esths, i];
  }
  if (i == 0 || i > m) {
    return;
  }
  int d = i % 10;
  int i1 = i * 10 + d - 1;
  int i2 = i1 + 2;
  if (d == 0) {
    dfs(n, m, i2);
  } else {
    if (d == 9) {
    dfs(n, m, i1);
  } else {
    dfs(n, m, i1);
    dfs(n, m, i2);
  };
  }
}

String commatize(int n) {
  String s = (n).toString();
  int i = s.length - 3;
  while (i >= 1) {
    s = _substr(s, 0, i) + "," + _substr(s, i, s.length);
    i = i - 3;
  }
  return s;
}

void listEsths(int n, int n2, int m, int m2, int perLine, bool showAll) {
  esths = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  int i = 0;
  while (i < 10) {
    dfs(n2, m2, i);
    i = i + 1;
  }
  int le = esths.length;
  print("Base 10: " + commatize(le) + " esthetic numbers between " + commatize(n) + " and " + commatize(m) + ":");
  if (showAll) {
    int c = 0;
    String line = "";
    for (int v in esths) {
    if (line.length > 0) {
    line = line + " ";
  }
    line = line + (v).toString();
    c = c + 1;
    if (c % perLine == 0) {
    print(line);
    line = "";
  }
  };
    if (line.length > 0) {
    print(line);
  };
  } else {
    String line = "";
    int idx = 0;
    while (idx < perLine) {
    if (line.length > 0) {
    line = line + " ";
  }
    line = line + (esths[idx]).toString();
    idx = idx + 1;
  };
    print(line);
    print("............");
    line = "";
    idx = le - perLine;
    while (idx < le) {
    if (line.length > 0) {
    line = line + " ";
  }
    line = line + (esths[idx]).toString();
    idx = idx + 1;
  };
    print(line);
  }
  print("");
}

void _main() {
  int b = 2;
  while (b <= 16) {
    int start = 4 * b;
    int stop = 6 * b;
    print("Base " + (b).toString() + ": " + (start).toString() + "th to " + (stop).toString() + "th esthetic numbers:");
    int n = 1;
    int c = 0;
    String line = "";
    while (c < stop) {
    if (isEsthetic(n, b)) {
    c = c + 1;
    if (c >= start) {
    if (line.length > 0) {
    line = line + " ";
  };
    line = line + toBase(n, b);
  };
  }
    n = n + 1;
  }
    print(line);
    print("");
    b = b + 1;
  }
  listEsths(1000, 1010, 9999, 9898, 16, true);
  listEsths(100000000, 101010101, 130000000, 123456789, 9, true);
  listEsths(100000000000, 101010101010, 130000000000, 123456789898, 7, false);
  listEsths(100000000000000, 101010101010101, 130000000000000, 123456789898989, 5, false);
  listEsths(100000000000000000, 101010101010101010, 130000000000000000, 123456789898989898, 4, false);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
