// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Rational {
  int num;
  int denom;
  Rational({required this.num, required this.denom});
}

class Node {
  Rational val;
  String txt;
  Node({required this.val, required this.txt});
}

int OP_ADD = 1;
int OP_SUB = 2;
int OP_MUL = 3;
int OP_DIV = 4;
Node makeNode(int n) {
  return Node(val: Rational(num: n, denom: 1), txt: (n).toString());
}

Node combine(int op, Node l, Node r) {
  Rational res;
  if (op == OP_ADD) {
    res = Rational(num: l.val.num * r.val.denom + l.val.denom * r.val.num, denom: l.val.denom * r.val.denom);
  } else {
    if (op == OP_SUB) {
    res = Rational(num: l.val.num * r.val.denom - l.val.denom * r.val.num, denom: l.val.denom * r.val.denom);
  } else {
    if (op == OP_MUL) {
    res = Rational(num: l.val.num * r.val.num, denom: l.val.denom * r.val.denom);
  } else {
    res = Rational(num: l.val.num * r.val.denom, denom: l.val.denom * r.val.num);
  };
  };
  }
  dynamic opstr = "";
  if (op == OP_ADD) {
    opstr = " + ";
  } else {
    if (op == OP_SUB) {
    opstr = " - ";
  } else {
    if (op == OP_MUL) {
    opstr = " * ";
  } else {
    opstr = " / ";
  };
  };
  }
  return Node(val: res, txt: "(" + l.txt + opstr + r.txt + ")");
}

Rational exprEval(Node x) {
  return x.val;
}

String exprString(Node x) {
  return x.txt;
}

int n_cards = 4;
int goal = 24;
int digit_range = 9;
bool solve(List<Node> xs) {
  if (xs.length == 1) {
    Rational f = exprEval(xs[0]);
    if (f.denom != 0 && f.num == f.denom * goal) {
    print(exprString(xs[0]));
    return true;
  };
    return false;
  }
  dynamic i = 0;
  while (i < xs.length) {
    dynamic j = i + 1;
    while (j < xs.length) {
    List<Node> rest = <Node>[];
    dynamic k = 0;
    while (k < xs.length) {
    if (k != i && k != j) {
    rest = [...rest, xs[(k).toInt()]];
  }
    k = k + 1;
  }
    Node a = xs[(i).toInt()];
    Node b = xs[(j).toInt()];
    Node node;
    for (int op in [OP_ADD, OP_SUB, OP_MUL, OP_DIV]) {
    node = combine(op, a, b);
    if (solve([...rest, node])) {
    return true;
  }
  }
    node = combine(OP_SUB, b, a);
    if (solve([...rest, node])) {
    return true;
  }
    node = combine(OP_DIV, b, a);
    if (solve([...rest, node])) {
    return true;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return false;
}

void _main() {
  dynamic iter = 0;
  while (iter < 10) {
    List<Node> cards = <Node>[];
    dynamic i = 0;
    while (i < n_cards) {
    int n = _now() % (digit_range - 1) + 1;
    cards = [...cards, makeNode(n)];
    print(" " + (n).toString());
    i = i + 1;
  }
    print(":  ");
    if (!solve(cards)) {
    print("No solution");
  }
    iter = iter + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
