// Generated by Mochi transpiler
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

final int OP_NUM = 0;
final int OP_ADD = 1;
final int OP_SUB = 2;
final int OP_MUL = 3;
final int OP_DIV = 4;
Map<String, dynamic> newNum(n) {
  return {"op": OP_NUM, "value": {"num": n, "denom": 1}};
}

Map<String, dynamic> exprEval(x) {
  if (x["op"] == OP_NUM) {
    return x["value"];
  }
  final Map<String, dynamic> l = exprEval(x["left"]);
  final Map<String, dynamic> r = exprEval(x["right"]);
  if (x["op"] == OP_ADD) {
    return {"num": l["num"]! * r["denom"]! + l["denom"]! * r["num"]!, "denom": l["denom"]! * r["denom"]!};
  }
  if (x["op"] == OP_SUB) {
    return {"num": l["num"]! * r["denom"]! - l["denom"]! * r["num"]!, "denom": l["denom"]! * r["denom"]!};
  }
  if (x["op"] == OP_MUL) {
    return {"num": l["num"]! * r["num"]!, "denom": l["denom"]! * r["denom"]!};
  }
  return {"num": l["num"]! * r["denom"]!, "denom": l["denom"]! * r["num"]!};
}

String exprString(x) {
  if (x["op"] == OP_NUM) {
    return (x["value"]!["num"]).toString();
  }
  final String ls = exprString(x["left"]);
  final String rs = exprString(x["right"]);
  String opstr = "";
  if (x["op"] == OP_ADD) {
    opstr = " + ";
  } else {
    if (x["op"] == OP_SUB) {
    opstr = " - ";
  } else {
    if (x["op"] == OP_MUL) {
    opstr = " * ";
  } else {
    opstr = " / ";
  };
  };
  }
  return "(" + ls + opstr + rs + ")";
}

final int n_cards = 4;
final int goal = 24;
final int digit_range = 9;
bool solve(xs) {
  if (xs.length == 1) {
    final Map<String, dynamic> f = exprEval(xs[0]);
    if (f["denom"]! != 0 && f["num"]! == f["denom"]! * goal) {
    print(exprString(xs[0]));
    return true;
  };
    return false;
  }
  int i = 0;
  while (i < xs.length) {
    int j = i + 1;
    while (j < xs.length) {
    List<Map<String, dynamic>> rest = [];
    int k = 0;
    while (k < xs.length) {
    if (k != i && k != j) {
    rest = [...rest, xs[k]];
  }
    k = k + 1;
  }
    final a = xs[i];
    final b = xs[j];
    for (var op in [OP_ADD, OP_SUB, OP_MUL, OP_DIV]) {
    Map<String, dynamic> node = {"op": op, "left": a, "right": b};
    if (solve([...rest, node])) {
    return true;
  }
  }
    Map<String, dynamic> node = {"op": OP_SUB, "left": b, "right": a};
    if (solve([...rest, node])) {
    return true;
  }
    node = {"op": OP_DIV, "left": b, "right": a};
    if (solve([...rest, node])) {
    return true;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return false;
}

void main() {
  int iter = 0;
  while (iter < 10) {
    List<Map<String, dynamic>> cards = [];
    int i = 0;
    while (i < n_cards) {
    final int n = _now() % (digit_range - 1) + 1;
    cards = [...cards, newNum(n)];
    print(" " + (n).toString());
    i = i + 1;
  }
    print(":  ");
    if (!solve(cards)) {
    print("No solution");
  }
    iter = iter + 1;
  }
}

void _start() {
  _initNow();
  main();
  main();
}
