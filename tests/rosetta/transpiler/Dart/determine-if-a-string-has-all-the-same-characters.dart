// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int ord(String ch) {
  if (ch == "5") {
    return 53;
  }
  if (ch == "T") {
    return 84;
  }
  if (ch == " ") {
    return 32;
  }
  if (ch == "é") {
    return 233;
  }
  if (ch == "🐺") {
    return 128058;
  }
  return 0;
}

String hex(int n) {
  String digits = "0123456789abcdef";
  if (n == 0) {
    return "0x0";
  }
  int m = n;
  String out = "";
  while (m > 0) {
    int d = m % 16;
    out = _substr(digits, d, d + 1) + out;
    m = m ~/ 16;
  }
  return "0x" + out;
}

String quote(String s) {
  return "'" + s + "'";
}

void analyze(String s) {
  int le = s.length;
  print("Analyzing " + quote(s) + " which has a length of " + (le).toString() + ":");
  if (le > 1) {
    int i = 1;
    while (i < le) {
    String cur = _substr(s, i, i + 1);
    String prev = _substr(s, i - 1, i);
    if (cur != prev) {
    print("  Not all characters in the string are the same.");
    print("  " + quote(cur) + " (" + hex(ord(cur)) + ") is different at position " + (i + 1).toString() + ".");
    print("");
    return;
  }
    i = i + 1;
  };
  }
  print("  All characters in the string are the same.");
  print("");
}

void _main() {
  List<String> strings = ["", "   ", "2", "333", ".55", "tttTTT", "4444 444k", "pépé", "🐶🐶🐺🐶", "🎄🎄🎄🎄"];
  int i = 0;
  while (i < strings.length) {
    analyze(strings[i]);
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
