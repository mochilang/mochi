// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<String> small = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"];
List<String> tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"];
List<String> smallOrd = ["zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth"];
List<String> tensOrd = ["", "", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth"];
String say(int n) {
  if (n < 20) {
    return small[n];
  }
  if (n < 100) {
    String res = tens[n ~/ 10];
    int m = n % 10;
    if (m != 0) {
    res = res + "-" + small[m];
  };
    return res;
  }
  if (n < 1000) {
    String res = say(n ~/ 100) + " hundred";
    int m = n % 100;
    if (m != 0) {
    res = res + " " + say(m);
  };
    return res;
  }
  if (n < 1000000) {
    String res = say(n ~/ 1000) + " thousand";
    int m = n % 1000;
    if (m != 0) {
    res = res + " " + say(m);
  };
    return res;
  }
  String res = say(n ~/ 1000000) + " million";
  int m = n % 1000000;
  if (m != 0) {
    res = res + " " + say(m);
  }
  return res;
}

String sayOrdinal(int n) {
  if (n < 20) {
    return smallOrd[n];
  }
  if (n < 100) {
    if (n % 10 == 0) {
    return tensOrd[n ~/ 10];
  };
    return say(n - n % 10) + "-" + smallOrd[n % 10];
  }
  if (n < 1000) {
    if (n % 100 == 0) {
    return say(n ~/ 100) + " hundredth";
  };
    return say(n ~/ 100) + " hundred " + sayOrdinal(n % 100);
  }
  if (n < 1000000) {
    if (n % 1000 == 0) {
    return say(n ~/ 1000) + " thousandth";
  };
    return say(n ~/ 1000) + " thousand " + sayOrdinal(n % 1000);
  }
  if (n % 1000000 == 0) {
    return say(n ~/ 1000000) + " millionth";
  }
  return say(n ~/ 1000000) + " million " + sayOrdinal(n % 1000000);
}

List<String> split(String s, String sep) {
  List<String> parts = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    if (sep.length > 0 && i + sep.length <= s.length && _substr(s, i, i + sep.length) == sep) {
    parts = [...parts, cur];
    cur = "";
    i = i + sep.length;
  } else {
    cur = cur + _substr(s, i, i + 1);
    i = i + 1;
  }
  }
  parts = [...parts, cur];
  return parts;
}

int countLetters(String s) {
  int cnt = 0;
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch.compareTo("A") >= 0 && ch.compareTo("Z") <= 0 || ch.compareTo("a") >= 0 && ch.compareTo("z") <= 0) {
    cnt = cnt + 1;
  }
    i = i + 1;
  }
  return cnt;
}

List<String> words = ["Four", "is", "the", "number", "of", "letters", "in", "the", "first", "word", "of", "this", "sentence,"];
int idx = 0;
List<dynamic> wordLen(int w) {
  while (words.length < w) {
    idx = idx + 1;
    int n = countLetters(words[idx]);
    var parts = say(n).split(" ");
    int j = 0;
    while (j < parts.length) {
    words = [...words, parts[j]];
    j = j + 1;
  }
    words = [...words, "in"];
    words = [...words, "the"];
    parts = (sayOrdinal(idx + 1) + ",").split(" ");
    j = 0;
    while (j < parts.length) {
    words = [...words, parts[j]];
    j = j + 1;
  }
  }
  String word = words[w - 1];
  return [word, countLetters(word)];
}

int totalLength() {
  int tot = 0;
  int i = 0;
  while (i < words.length) {
    tot = tot + words[i].length;
    if (i < words.length - 1) {
    tot = tot + 1;
  }
    i = i + 1;
  }
  return tot;
}

String pad(int n, int width) {
  String s = (n).toString();
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

void _main() {
  print("The lengths of the first 201 words are:");
  String line = "";
  int i = 1;
  while (i <= 201) {
    if (i % 25 == 1) {
    if (i != 1) {
    print(line);
  };
    line = pad(i, 3) + ":";
  }
    List<dynamic> r = wordLen(i);
    var n = r[1];
    line = line + " " + pad(n, 2);
    i = i + 1;
  }
  print(line);
  print("Length of sentence so far: " + (totalLength()).toString());
  for (int n in [1000, 10000, 100000, 1000000, 10000000]) {
    List<dynamic> r = wordLen(n);
    var w = r[0];
    var l = r[1];
    print("Word " + pad(n, 8) + " is \"" + w + "\", with " + (l).toString() + " letters.  Length of sentence so far: " + (totalLength()).toString());
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
