// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

num absf(num x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

num floorf(num x) {
  final int y = (x).toInt();
  return (y).toDouble();
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String fmtF(num x) {
  num y = floorf(x * 10000.0 + 0.5) / 10000.0;
  String s = (y).toString();
  int dot = s.indexOf(".");
  if (dot == 0 - 1) {
    s = s + ".0000";
  } else {
    int decs = s.length - dot - 1;
    if (decs > 4) {
    s = s.substring(0, dot + 5);
  } else {
    while (decs < 4) {
    s = s + "0";
    decs = decs + 1;
  };
  };
  }
  return s;
}

String padInt(int n, int width) {
  String s = (n).toString();
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

String padFloat(num x, int width) {
  String s = fmtF(x);
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

num avgLen(int n) {
  final int tests = 10000;
  int sum = 0;
  int seed = 1;
  int t = 0;
  while (t < tests) {
    List<bool> visited = [];
    int i = 0;
    while (i < n) {
    visited = [...visited, false];
    i = i + 1;
  }
    int x = 0;
    while (!visited[x]) {
    visited[x] = true;
    sum = sum + 1;
    seed = (seed * 1664525 + 1013904223) % 2147483647;
    x = seed % n;
  }
    t = t + 1;
  }
  return ((sum).toDouble()) / tests;
}

num ana(int n) {
  num nn = (n).toDouble();
  num term = 1.0;
  num sum = 1.0;
  num i = nn - 1.0;
  while (i >= 1.0) {
    term = term * i / nn;
    sum = sum + term;
    i = i - 1.0;
  }
  return sum;
}

void main() {
  final int nmax = 20;
  print(" N    average    analytical    (error)");
  print("===  =========  ============  =========");
  int n = 1;
  while (n <= nmax) {
    final num a = avgLen(n);
    final num b = ana(n);
    final num err = absf(a - b) / b * 100.0;
    String line = padInt(n, 3) + "  " + padFloat(a, 9) + "  " + padFloat(b, 12) + "  (" + padFloat(err, 6) + "%)";
    print(line);
    n = n + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}
