// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}


dynamic _fetch(String url) {
  if (url.startsWith('file://')) {
    final path = url.substring(7);
    final text = File(path).readAsStringSync();
    try {
      return jsonDecode(text);
    } catch (_) {
      return text;
    }
  }
  final result = Process.runSync('curl', ['-s', url]);
  if (result.exitCode != 0) {
    throw Exception('curl failed');
  }
  var text = '';
  if (result.stdout is String) {
    text = result.stdout as String;
  }
  try {
    return jsonDecode(text);
  } catch (_) {
    return text;
  }
}

class Todo {
  int userId;
  int id;
  String title;
  bool completed;
  Todo({required this.userId, required this.id, required this.title, required this.completed});
  factory Todo.fromJson(Map<String, dynamic> m) => Todo(userId: m['userId'], id: m['id'], title: m['title'], completed: m['completed']);
}

void _main() {
  Todo todo = Todo.fromJson(_fetch("https://jsonplaceholder.typicode.com/todos/1"));
  print(todo.title);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
