// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int qlimit = 50000;
num powf(num base, int exp) {
  num result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

num sqrtApprox(num x) {
  if (x <= 0.0) {
    return 0.0;
  }
  num g = x;
  int i = 0;
  while (i < 20) {
    g = (g + x / g) / 2.0;
    i = i + 1;
  }
  return g;
}

int modPow(int base, int exp, int mod) {
  int result = 1 % mod;
  int b = base % mod;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % mod;
  }
    b = b * b % mod;
    e = e ~/ 2;
  }
  return result;
}

void mtest(int m) {
  if (m < 4) {
    print((m).toString() + " < 4.  M" + (m).toString() + " not tested.");
    return;
  }
  num flimit = sqrtApprox(powf(2.0, m) - 1.0);
  int qlast = 0;
  if (flimit < qlimit) {
    qlast = (flimit).toInt();
  } else {
    qlast = qlimit;
  }
  List<bool> composite = <bool>[];
  int i = 0;
  while (i <= qlast) {
    composite = [...composite, false];
    i = i + 1;
  }
  int sq = (sqrtApprox((qlast).toDouble())).toInt();
  int q = 3;
  while (true) {
    if (q <= sq) {
    int j = q * q;
    while (j <= qlast) {
    composite[j] = true;
    j = j + q;
  };
  }
    int q8 = q % 8;
    if ((q8 == 1 || q8 == 7) && modPow(2, m, q) == 1) {
    print("M" + (m).toString() + " has factor " + (q).toString());
    return;
  }
    while (true) {
    q = q + 2;
    if (q > qlast) {
    print("No factors of M" + (m).toString() + " found.");
    return;
  }
    if (!composite[q]) {
    break;
  }
  }
  }
}

void _main() {
  mtest(31);
  mtest(67);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
