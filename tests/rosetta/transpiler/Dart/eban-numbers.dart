// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> vals = [0, 2, 4, 6, 30, 32, 34, 36, 40, 42, 44, 46, 50, 52, 54, 56, 60, 62, 64, 66];
List<int> billions = [0, 2, 4, 6];
List<int> ebanNumbers(int start, int stop) {
  List<int> nums = <int>[];
  for (int b in billions) {
    for (int m in vals) {
    for (int t in vals) {
    for (int r in vals) {
    int n = b * 1000000000 + m * 1000000 + t * 1000 + r;
    if (n >= start && n <= stop) {
    nums = [...nums, n];
  }
  }
  }
  }
  }
  return nums;
}

int countEban(int start, int stop) {
  int count = 0;
  for (int b in billions) {
    for (int m in vals) {
    for (int t in vals) {
    for (int r in vals) {
    int n = b * 1000000000 + m * 1000000 + t * 1000 + r;
    if (n >= start && n <= stop) {
    count = count + 1;
  }
  }
  }
  }
  }
  return count;
}

void _main() {
  List<List<dynamic>> ranges = [[2, 1000, true], [1000, 4000, true], [2, 10000, false], [2, 100000, false], [2, 1000000, false], [2, 10000000, false], [2, 100000000, false], [2, 1000000000, false]];
  for (List<dynamic> rg in ranges) {
    int start = rg[0] as int;
    int stop = rg[1] as int;
    bool show = rg[2] as bool;
    if (start == 2) {
    print("eban numbers up to and including " + (stop).toString() + ":");
  } else {
    print("eban numbers between " + (start).toString() + " and " + (stop).toString() + " (inclusive):");
  }
    if (show) {
    List<int> nums = ebanNumbers(start, stop);
    String line = "";
    int i = 0;
    while (i < nums.length) {
    line = line + (nums[i]).toString() + " ";
    i = i + 1;
  };
    if (line.length > 0) {
    print(_substr(line, 0, line.length - 1));
  };
  }
    int c = countEban(start, stop);
    print("count = " + (c).toString() + "\n");
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
