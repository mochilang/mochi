// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String trimSpace(String s) {
  int start = 0;
  while (start < s.length && _substr(s, start, start + 1) == " ") {
    start = start + 1;
  }
  int end = s.length;
  while (end > start && _substr(s, end - 1, end) == " ") {
    end = end - 1;
  }
  return _substr(s, start, end);
}

bool isUpper(String ch) {
  return ch.compareTo("A") >= 0 && ch.compareTo("Z") <= 0;
}

String padLeft(String s, int w) {
  String res = "";
  int n = w - s.length;
  while (n > 0) {
    res = res + " ";
    n = n - 1;
  }
  return res + s;
}

String snakeToCamel(String s) {
  s = trimSpace(s);
  String out = "";
  bool up = false;
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == "_" || ch == "-" || ch == " " || ch == ".") {
    up = true;
    i = i + 1;
    continue;
  }
    if (i == 0) {
    out = out + ch.toLowerCase();
    up = false;
    i = i + 1;
    continue;
  }
    if (up) {
    out = out + ch.toUpperCase();
    up = false;
  } else {
    out = out + ch;
  }
    i = i + 1;
  }
  return out;
}

String camelToSnake(String s) {
  s = trimSpace(s);
  String out = "";
  bool prevUnd = false;
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == " " || ch == "-" || ch == ".") {
    if (!prevUnd && out.length > 0) {
    out = out + "_";
    prevUnd = true;
  };
    i = i + 1;
    continue;
  }
    if (ch == "_") {
    if (!prevUnd && out.length > 0) {
    out = out + "_";
    prevUnd = true;
  };
    i = i + 1;
    continue;
  }
    if (isUpper(ch)) {
    if (i > 0 && !prevUnd) {
    out = out + "_";
  };
    out = out + ch.toLowerCase();
    prevUnd = false;
  } else {
    out = out + ch.toLowerCase();
    prevUnd = false;
  }
    i = i + 1;
  }
  int start = 0;
  while (start < out.length && _substr(out, start, start + 1) == "_") {
    start = start + 1;
  }
  int end = out.length;
  while (end > start && _substr(out, end - 1, end) == "_") {
    end = end - 1;
  }
  out = _substr(out, start, end);
  String res = "";
  int j = 0;
  bool lastUnd = false;
  while (j < out.length) {
    String c = _substr(out, j, j + 1);
    if (c == "_") {
    if (!lastUnd) {
    res = res + c;
  };
    lastUnd = true;
  } else {
    res = res + c;
    lastUnd = false;
  }
    j = j + 1;
  }
  return res;
}

void _main() {
  List<String> samples = ["snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "];
  print("=== To snake_case ===");
  for (var s in samples) {
    print(padLeft(s, 34) + " => " + camelToSnake(s));
  }
  print("");
  print("=== To camelCase ===");
  for (var s in samples) {
    print(padLeft(s, 34) + " => " + snakeToCamel(s));
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
