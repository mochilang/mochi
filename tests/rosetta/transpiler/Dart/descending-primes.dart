// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  int d = 3;
  while (d * d <= n) {
    if (n % d == 0) {
    return false;
  }
    d = d + 2;
  }
  return true;
}

List<int> digits = [9, 8, 7, 6, 5, 4, 3, 2, 1];
List<int> gen(int idx, int cur, bool used) {
  if (idx == digits.length) {
    if (used && isPrime(cur)) {
    return [cur];
  };
    return List<int>.from([]);
  }
  List<int> _with = gen(idx + 1, cur * 10 + digits[idx], true);
  List<int> without = gen(idx + 1, cur, used);
  return List<int>.from([..._with, ...without]);
}

List<int> primes = gen(0, 0, false);
String pad(int n, int width) {
  String s = (n).toString();
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

int i = 0;
String line = "";
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("There are " + (primes.length).toString() + " descending primes, namely:");
  while (i < primes.length) {
    line = line + pad(primes[i], 8) + " ";
    if ((i + 1) % 10 == 0) {
    print(_substr(line, 0, line.length - 1));
    line = "";
  }
    i = i + 1;
  }
  if (line.length > 0) {
    print(_substr(line, 0, line.length - 1));
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
