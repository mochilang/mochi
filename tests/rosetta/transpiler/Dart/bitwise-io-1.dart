// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

class Writer {
  String order;
  int bits;
  int nbits;
  List<int> data;
  Writer({required this.order, required this.bits, required this.nbits, required this.data});
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  int pow2(int n) {
  int v = 1;
  int i = 0;
  while (i < n) {
    v = v * 2;
    i = i + 1;
  }
  return v;
}
  int lshift(int x, int n) {
  return x * pow2(n);
}
  int rshift(int x, int n) {
  return x ~/ pow2(n);
}
  Writer NewWriter(String order) {
  return Writer(order: order, bits: 0, nbits: 0, data: []);
}
  Writer writeBitsLSB(Writer w, int c, int width) {
  w.bits = w.bits + lshift(c, w.nbits);
  w.nbits = w.nbits + width;
  while (w.nbits >= 8) {
    final int b = w.bits % 256;
    w.data = [...w.data, b];
    w.bits = rshift(w.bits, 8);
    w.nbits = w.nbits - 8;
  }
  return w;
}
  Writer writeBitsMSB(Writer w, int c, int width) {
  w.bits = w.bits + lshift(c, 32 - width - w.nbits);
  w.nbits = w.nbits + width;
  while (w.nbits >= 8) {
    final int b = rshift(w.bits, 24) % 256;
    w.data = [...w.data, b];
    w.bits = w.bits % pow2(24) * 256;
    w.nbits = w.nbits - 8;
  }
  return w;
}
  Writer WriteBits(Writer w, int c, int width) {
  if (w.order == "LSB") {
    return writeBitsLSB(w, c, width);
  }
  return writeBitsMSB(w, c, width);
}
  Writer CloseWriter(Writer w) {
  if (w.nbits > 0) {
    if (w.order == "MSB") {
    w.bits = rshift(w.bits, 24);
  };
    w.data = [...w.data, w.bits % 256];
  }
  w.bits = 0;
  w.nbits = 0;
  return w;
}
  String toBinary(int n, int bits) {
  String b = "";
  int val = n;
  int i = 0;
  while (i < bits) {
    b = (val % 2).toString() + b;
    val = val ~/ 2;
    i = i + 1;
  }
  return b;
}
  String bytesToBits(List<int> bs) {
  String out = "[";
  int i = 0;
  while (i < bs.length) {
    out = out + toBinary(bs[i], 8);
    if (i + 1 < bs.length) {
    out = out + " ";
  }
    i = i + 1;
  }
  out = out + "]";
  return out;
}
  void ExampleWriter_WriteBits() {
  Writer bw = NewWriter("MSB");
  bw = WriteBits(bw, 15, 4);
  bw = WriteBits(bw, 0, 1);
  bw = WriteBits(bw, 19, 5);
  bw = CloseWriter(bw);
  print(bytesToBits(bw.data));
}
  ExampleWriter_WriteBits();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
