// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int log10floor(int n) {
  int p = 0;
  int v = n;
  while (v >= 10) {
    v = v ~/ 10 as int;
    p = p + 1;
  }
  return p;
}

String commatize(int n) {
  String s = (n).toString();
  String res = "";
  int i = 0;
  while (i < s.length) {
    if (i > 0 && (s.length - i) % 3 == 0) {
    res = res + ",";
  }
    res = res + _substr(s, i, i + 1);
    i = i + 1;
  }
  return res;
}

void showDistribution(List<int> sizes) {
  List<int> bins = <int>[];
  int i = 0;
  while (i < 12) {
    bins = [...bins, 0];
    i = i + 1;
  }
  int total = 0;
  for (int sz in sizes) {
    total = total + sz;
    int idx = 0;
    if (sz > 0) {
    idx = log10floor(sz) + 1;
  }
    bins[idx] = bins[idx] + 1;
  }
  print("File size distribution:\n");
  i = 0;
  while (i < bins.length) {
    String prefix = "  ";
    if (i > 0) {
    prefix = "+ ";
  }
    print(prefix + "Files less than 10 ^ " + (i).toString() + " bytes : " + (bins[i]).toString());
    i = i + 1;
  }
  print("                                  -----");
  print("= Total number of files         : " + (sizes.length).toString());
  print("  Total size of files           : " + commatize(total) + " bytes");
}

void _main() {
  List<int> sizes = [0, 1, 9, 10, 99, 100, 1234, 50000, 730000, 8200000];
  showDistribution(sizes);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
