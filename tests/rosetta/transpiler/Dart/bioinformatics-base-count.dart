// Generated by Mochi transpiler
String padLeft(String s, int w) {
  String res = "";
  int n = w - s.length;
  while (n > 0) {
    res = res + " ";
    n = n - 1;
  }
  return res + s;
}

final String dna = "" + "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG" + "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG" + "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT" + "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT" + "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG" + "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA" + "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT" + "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG" + "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC" + "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT";
final int le = dna.length;
int i = 0;
int a = 0;
int c = 0;
int g = 0;
int t = 0;
int idx = 0;
void main() {
  print("SEQUENCE:");
  while (i < le) {
    int k = i + 50;
    if (k > le) {
    k = le;
  }
    print(padLeft((i).toString(), 5) + ": " + dna.substring(i, k));
    i = i + 50;
  }
  while (idx < le) {
    final String ch = dna.substring(idx, idx + 1);
    if (ch == "A") {
    a = a + 1;
  } else {
    if (ch == "C") {
    c = c + 1;
  } else {
    if (ch == "G") {
    g = g + 1;
  } else {
    if (ch == "T") {
    t = t + 1;
  };
  };
  };
  }
    idx = idx + 1;
  }
  print("");
  print("BASE COUNT:");
  print("    A: " + padLeft((a).toString(), 3));
  print("    C: " + padLeft((c).toString(), 3));
  print("    G: " + padLeft((g).toString(), 3));
  print("    T: " + padLeft((t).toString(), 3));
  print("    ------");
  print("    Î£: " + (le).toString());
  print("    ======");
}
