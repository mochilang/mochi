// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int pow2(int exp) {
  int r = 1;
  int i = 0;
  while (i < exp) {
    r = r * 2;
    i = i + 1;
  }
  return r;
}

String bin(int n, int digits) {
  String s = "";
  int i = digits - 1;
  while (i >= 0) {
    int p = pow2(i);
    if (n >= p) {
    s = s + "x";
    n = n - p;
  } else {
    s = s + " ";
  }
    if (i > 0) {
    s = s + "|";
  }
    i = i - 1;
  }
  return s;
}

BigInt t = BigInt.from(_now() ~/ 1000000000);
BigInt sec = t % BigInt.from(60);
BigInt mins = t ~/ BigInt.from(60);
BigInt min = mins % BigInt.from(60);
BigInt hour = mins ~/ BigInt.from(60) % BigInt.from(24);
String xs = "";
int i = 0;
String out = "";
int j = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(bin(hour, 8));
  print("");
  print(bin(min, 8));
  print("");
  while (BigInt.from(i) < sec) {
    xs = xs + "x";
    i = i + 1;
  }
  while (j < xs.length) {
    out = out + _substr(xs, j, j + 1);
    if ((j + 1) % 5 == 0 && j + 1 < xs.length) {
    out = out + "|";
  }
    j = j + 1;
  }
  print(out);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
