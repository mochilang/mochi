// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String listStr(List<int> xs) {
  String s = "[";
  int i = 0;
  while (i < xs.length) {
    s = s + (xs[i]).toString();
    if (i < xs.length - 1) {
    s = s + " ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

bool ordered(List<int> xs) {
  if (xs.length == 0) {
    return true;
  }
  int prev = xs[0];
  int i = 1;
  while (i < xs.length) {
    if (xs[i] < prev) {
    return false;
  }
    prev = xs[i];
    i = i + 1;
  }
  return true;
}

List<int> outOfOrder(int n) {
  if (n < 2) {
    return List<int>.from([]);
  }
  List<int> r = <int>[];
  while (true) {
    r = <int>[];
    int i = 0;
    while (i < n) {
    r = [...r, _now() % 3];
    i = i + 1;
  }
    if (!ordered(r)) {
    break;
  }
  }
  return r;
}

List<int> sort3(List<int> a) {
  int lo = 0;
  int mid = 0;
  int hi = a.length - 1;
  while (mid <= hi) {
    int v = a[mid];
    if (v == 0) {
    int tmp = a[lo];
    a[lo] = a[mid];
    a[mid] = tmp;
    lo = lo + 1;
    mid = mid + 1;
  } else {
    if (v == 1) {
    mid = mid + 1;
  } else {
    int tmp = a[mid];
    a[mid] = a[hi];
    a[hi] = tmp;
    hi = hi - 1;
  };
  }
  }
  return a;
}

void _main() {
  List<int> f = outOfOrder(12);
  print(listStr(f));
  f = sort3(f);
  print(listStr(f));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
