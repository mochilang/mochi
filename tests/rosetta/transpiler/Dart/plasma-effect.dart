// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

num PI = 3.141592653589793;
num floorf(num x) {
  dynamic i = (x).toInt();
  if ((i as num) > x) {
    i = i - 1;
  }
  return i as num;
}

num frac(num x) {
  return x - floorf(x);
}

num sinApprox(num x) {
  dynamic term = x;
  dynamic sum = x;
  dynamic n = 1;
  while (n <= 10) {
    num denom = 2 * n * (2 * n + 1) as num;
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

num sqrtApprox(num x) {
  if (x <= 0) {
    return 0.0;
  }
  dynamic guess = x;
  dynamic i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

int nframes = 10;
int w = 32;
int h = 32;
int total = 0;
int f = 1;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (f <= nframes) {
    dynamic y = 0;
    while (y < h) {
    dynamic x = 0;
    while (x < w) {
    dynamic fx = x as num;
    dynamic fy = y as num;
    dynamic value = sinApprox(fx / 16.0);
    value = value + sinApprox(fy / 8.0);
    value = value + sinApprox((fx + fy) / 16.0);
    value = value + sinApprox(sqrtApprox(fx * fx + fy * fy) / 8.0);
    value = value + 4.0;
    value = value / 8.0;
    dynamic rem = frac(value + ((f).toDouble()) / ((nframes).toDouble()));
    dynamic ci = ((((nframes).toDouble()) * rem).toInt()) + 1;
    total = (total + ci).toInt();
    x = x + 1;
  }
    y = y + 1;
  }
    f = f + 1;
  }
  print(total);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
