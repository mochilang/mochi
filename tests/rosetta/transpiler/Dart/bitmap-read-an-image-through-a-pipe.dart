// Generated by Mochi transpiler
int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && str.substring(0, 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  final Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = n * 10 + digits[str.substring(i, i + 1)]!;
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

List<String> splitWs(String s) {
  List<String> parts = [];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    final String ch = s.substring(i, i + 1);
    if (ch == " " || ch == "\n" || ch == "	" || ch == "\r") {
    if (cur.length > 0) {
    parts = [...parts, cur];
    cur = "";
  };
  } else {
    cur = cur + ch;
  }
    i = i + 1;
  }
  if (cur.length > 0) {
    parts = [...parts, cur];
  }
  return parts;
}

Map<String, dynamic> parsePpm(String data) {
  final List<String> toks = splitWs(data);
  if (toks.length < 4) {
    return {"err": true};
  }
  final String magic = toks[0];
  final int w = parseIntStr(toks[1]);
  final int h = parseIntStr(toks[2]);
  final int maxv = parseIntStr(toks[3]);
  List<int> px = [];
  int i = 4;
  while (i < toks.length) {
    px = [...px, parseIntStr(toks[i])];
    i = i + 1;
  }
  return {"magic": magic, "w": w, "h": h, "max": maxv, "px": px};
}

final String ppmData = "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n";
final Map<String, dynamic> img = parsePpm(ppmData);
void main() {
  print("width=" + (img["w"]).toString() + " height=" + (img["h"]).toString());
}
