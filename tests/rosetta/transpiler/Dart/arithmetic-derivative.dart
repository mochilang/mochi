// Generated by Mochi transpiler
List<int> primeFactors(int n) {
  List<int> factors = [];
  int x = n;
  while (x % 2 == 0) {
    factors = [...factors, 2];
    x = x ~/ 2 as int;
  }
  int p = 3;
  while (p * p <= x) {
    while (x % p == 0) {
    factors = [...factors, p];
    x = x ~/ p as int;
  }
    p = p + 2;
  }
  if (x > 1) {
    factors = [...factors, x];
  }
  return factors;
}

String repeat(String ch, int n) {
  String s = "";
  int i = 0;
  while (i < n) {
    s = s + ch;
    i = i + 1;
  }
  return s;
}

num D(num n) {
  if (n < 0.0) {
    return -D(-n);
  }
  if (n < 2.0) {
    return 0.0;
  }
  List<int> factors = [];
  if (n < 10000000000000000000.0) {
    factors = primeFactors((n).toInt());
  } else {
    final int g = (n / 100.0).toInt();
    factors = primeFactors(g);
    factors = [...factors, 2];
    factors = [...factors, 2];
    factors = [...factors, 5];
    factors = [...factors, 5];
  }
  final int c = factors.length;
  if (c == 1) {
    return 1.0;
  }
  if (c == 2) {
    return (factors[0] + factors[1]).toDouble();
  }
  final num d = n / ((factors[0]!).toDouble());
  return D(d) * ((factors[0]!).toDouble()) + d;
}

String pad(int n) {
  String s = (n).toString();
  while (s.length < 4) {
    s = " " + s;
  }
  return s;
}

void main() {
  List<int> vals = [];
  int n = -99;
  while (n < 101) {
    vals = [...vals, (D((n).toDouble())).toInt()];
    n = n + 1;
  }
  int i = 0;
  while (i < vals.length) {
    String line = "";
    int j = 0;
    while (j < 10) {
    line = line + pad(vals[i + j]);
    if (j < 9) {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 10;
  }
  num pow = 1.0;
  int m = 1;
  while (m < 21) {
    pow = pow * 10.0;
    String exp = (m).toString();
    if (exp.length < 2) {
    exp = exp + " ";
  }
    String res = (m).toString() + repeat("0", m - 1);
    print("D(10^" + exp + ") / 7 = " + res);
    m = m + 1;
  }
}

void _start() {
  main();
}
