// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<String> gregorianStr = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
List<int> gregorian = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
List<String> republicanStr = ["Vendemiaire", "Brumaire", "Frimaire", "Nivose", "Pluviose", "Ventose", "Germinal", "Floreal", "Prairial", "Messidor", "Thermidor", "Fructidor"];
List<String> sansculotidesStr = ["Fete de la vertu", "Fete du genie", "Fete du travail", "Fete de l'opinion", "Fete des recompenses", "Fete de la Revolution"];
bool greLeap(int year) {
  int a = year % 4 as int;
  int b = year % 100 as int;
  int c = year % 400 as int;
  return a == 0 && (b != 0 || c == 0);
}

bool repLeap(int year) {
  int a = (year + 1) % 4 as int;
  int b = (year + 1) % 100 as int;
  int c = (year + 1) % 400 as int;
  return a == 0 && (b != 0 || c == 0);
}

int greToDay(int d, int m, int y) {
  int yy = y;
  int mm = m;
  if (mm < 3) {
    yy = yy - 1;
    mm = mm + 12;
  }
  return yy * 36525 ~/ 100 - yy ~/ 100 + yy ~/ 400 + 306 * (mm + 1) ~/ 10 + d - 654842;
}

int repToDay(int d, int m, int y) {
  int dd = d;
  int mm = m;
  if (mm == 13) {
    mm = mm - 1;
    dd = dd + 30;
  }
  if (repLeap(y)) {
    dd = dd - 1;
  }
  return 365 * y + (y + 1) ~/ 4 - (y + 1) ~/ 100 + (y + 1) ~/ 400 + 30 * mm + dd - 395;
}

List<int> dayToGre(int day) {
  int y = day * 100 ~/ 36525;
  int d = day - y * 36525 ~/ 100 + 21;
  y = y + 1792;
  d = d + y ~/ 100 - y ~/ 400 - 13;
  int m = 8;
  while (d > gregorian[m]) {
    d = d - gregorian[m];
    m = m + 1;
    if (m == 12) {
    m = 0;
    y = y + 1;
    if (greLeap(y)) {
    gregorian[1] = 29;
  } else {
    gregorian[1] = 28;
  };
  }
  }
  m = m + 1;
  return [d, m, y];
}

List<int> dayToRep(int day) {
  int y = (day - 1) * 100 ~/ 36525;
  if (repLeap(y)) {
    y = y - 1;
  }
  int d = day - (y + 1) * 36525 ~/ 100 + 365 + (y + 1) ~/ 100 - (y + 1) ~/ 400;
  y = y + 1;
  int m = 1;
  int sc = 5;
  if (repLeap(y)) {
    sc = 6;
  }
  while (d > 30) {
    d = d - 30;
    m = m + 1;
    if (m == 13) {
    if (d > sc) {
    d = d - sc;
    m = 1;
    y = y + 1;
    sc = 5;
    if (repLeap(y)) {
    sc = 6;
  };
  };
  }
  }
  return [d, m, y];
}

String formatRep(int d, int m, int y) {
  if (m == 13) {
    return sansculotidesStr[d - 1] + " " + (y).toString();
  }
  return (d).toString() + " " + republicanStr[m - 1] + " " + (y).toString();
}

String formatGre(int d, int m, int y) {
  return (d).toString() + " " + gregorianStr[m - 1] + " " + (y).toString();
}

List<int> rep = dayToRep(greToDay(20, 5, 1795));
List<int> gre = dayToGre(repToDay(1, 9, 3));
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(formatRep(rep[0], rep[1], rep[2]));
  print(formatGre(gre[0], gre[1], gre[2]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
