// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Point {
  int x;
  int y;
  Point({required this.x, required this.y});
}

bool ccw(Point a, Point b, Point c) {
  int lhs = (b.x - a.x) * (c.y - a.y);
  int rhs = (b.y - a.y) * (c.x - a.x);
  return lhs > rhs;
}

List<Point> sortPoints(List<Point> ps) {
  List<Point> arr = ps;
  int n = arr.length;
  int i = 0;
  while (i < n) {
    int j = 0;
    while (j < n - 1) {
    Point p = arr[j];
    Point q = arr[j + 1];
    if (p.x > q.x || p.x == q.x && p.y > q.y) {
    arr[j] = q;
    arr[j + 1] = p;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

List<Point> convexHull(List<Point> ps) {
  ps = sortPoints(ps);
  List<Point> h = <Point>[];
  for (Point pt in ps) {
    while (h.length >= 2 && ccw(h[h.length - 2], h[h.length - 1], pt) == false) {
    h = h.sublist(0, h.length - 1);
  }
    h = [...h, pt];
  }
  int i = ps.length - 2;
  int t = h.length + 1;
  while (i >= 0) {
    Point pt = ps[i];
    while (h.length >= t && ccw(h[h.length - 2], h[h.length - 1], pt) == false) {
    h = h.sublist(0, h.length - 1);
  }
    h = [...h, pt];
    i = i - 1;
  }
  return h.sublist(0, h.length - 1);
}

String pointStr(Point p) {
  return "(" + (p.x).toString() + "," + (p.y).toString() + ")";
}

String hullStr(List<Point> h) {
  String s = "[";
  int i = 0;
  while (i < h.length) {
    s = s + pointStr(h[i]);
    if (i < h.length - 1) {
    s = s + " ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

List<Point> pts = [Point(x: 16, y: 3), Point(x: 12, y: 17), Point(x: 0, y: 6), Point(x: -4, y: -6), Point(x: 16, y: 6), Point(x: 16, y: -7), Point(x: 16, y: -3), Point(x: 17, y: -4), Point(x: 5, y: 19), Point(x: 19, y: -8), Point(x: 3, y: 16), Point(x: 12, y: 13), Point(x: 3, y: -4), Point(x: 17, y: 5), Point(x: -3, y: 15), Point(x: -3, y: -9), Point(x: 0, y: 11), Point(x: -9, y: -3), Point(x: -4, y: -2), Point(x: 12, y: 10)];
List<Point> hull = convexHull(pts);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Convex Hull: " + hullStr(hull));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
