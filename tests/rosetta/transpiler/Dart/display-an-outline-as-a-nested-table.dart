// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<String> split(String s, String sep) {
  List<String> out = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    if (i + sep.length <= s.length && _substr(s, i, i + sep.length) == sep) {
    out = [...out, cur];
    cur = "";
    i = i + sep.length;
  } else {
    cur = cur + _substr(s, i, i + 1);
    i = i + 1;
  }
  }
  out = [...out, cur];
  return out;
}

String join(List<String> xs, String sep) {
  String res = "";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    res = res + sep;
  }
    res = res + xs[i];
    i = i + 1;
  }
  return res;
}

String trimLeftSpaces(String s) {
  int i = 0;
  while (i < s.length && _substr(s, i, i + 1) == " ") {
    i = i + 1;
  }
  return _substr(s, i, s.length);
}

List<Map<String, dynamic>> makeIndent(String outline, int tab) {
  List<String> lines = split(outline, "\n");
  List<Map<String, dynamic>> nodes = <Map<String, dynamic>>[];
  for (String line in lines) {
    String line2 = trimLeftSpaces(line);
    int level = (line.length - line2.length) ~/ tab;
    nodes = [...nodes, {"level": level, "name": line2}];
  }
  return nodes;
}

void toNest(List<Map<String, dynamic>> nodes, int start, int level, Map<String, dynamic> n) {
  if (level == 0) {
    n["name"] = nodes[0]["name"]!;
  }
  int i = start + 1;
  while (i < nodes.length) {
    Map<String, dynamic> node = nodes[i];
    int lev = node["level"]! as int;
    if (lev == level + 1) {
    Map<String, dynamic> child = {"name": node["name"]!, "children": []};
    toNest(nodes, i, level + 1, child);
    List<dynamic> cs = List<dynamic>.from(n["children"]!);
    cs = [...cs, child];
    n["children"] = cs;
  } else {
    if (lev <= level) {
    return;
  };
  }
    i = i + 1;
  }
}

int countLeaves(Map<String, dynamic> n) {
  List<dynamic> kids = List<dynamic>.from(n["children"]!);
  if (kids.length == 0) {
    return 1;
  }
  int total = 0;
  for (var k in kids) {
    total = total + countLeaves(k as Map<String, dynamic>);
  }
  return total;
}

List<List<Map<String, dynamic>>> nodesByDepth(Map<String, dynamic> root, int depth) {
  List<List<Map<String, dynamic>>> levels = <List<Map<String, dynamic>>>[];
  List<Map<String, dynamic>> current = [root];
  int d = 0;
  while (d < depth) {
    levels = [...levels, current];
    List<Map<String, dynamic>> next = <Map<String, dynamic>>[];
    for (Map<String, dynamic> n in current) {
    List<dynamic> kids = List<dynamic>.from(n["children"]!);
    for (var k in kids) {
    next = [...next, k as Map<String, dynamic>];
  }
  }
    current = next;
    d = d + 1;
  }
  return levels;
}

String toMarkup(Map<String, dynamic> n, List<String> cols, int depth) {
  List<String> lines = <String>[];
  lines = [...lines, "{| class=\"wikitable\" style=\"text-align: center;\""];
  String l1 = "|-";
  lines = [...lines, l1];
  int span = countLeaves(n);
  lines = [...lines, "| style=\"background: " + cols[0] + " \" colSpan=" + (span).toString() + " | " + (n["name"]! as String)];
  lines = [...lines, l1];
  List<List<Map<String, dynamic>>> lvls = nodesByDepth(n, depth);
  int lvl = 1;
  while (lvl < depth) {
    List<Map<String, dynamic>> nodes = lvls[lvl];
    if (nodes.length == 0) {
    lines = [...lines, "|  |"];
  } else {
    int idx = 0;
    while (idx < nodes.length) {
    Map<String, dynamic> node = nodes[idx];
    span = countLeaves(node);
    int col = lvl;
    if (lvl == 1) {
    col = idx + 1;
  }
    if (col >= cols.length) {
    col = cols.length - 1;
  }
    String cell = "| style=\"background: " + cols[col] + " \" colspan=" + (span).toString() + " | " + (node["name"]! as String);
    lines = [...lines, cell];
    idx = idx + 1;
  };
  }
    if (lvl < depth - 1) {
    lines = [...lines, l1];
  }
    lvl = lvl + 1;
  }
  lines = [...lines, "|}"];
  return join(lines, "\n");
}

void _main() {
  String outline = "Display an outline as a nested table.\n" + "    Parse the outline to a tree,\n" + "        measuring the indent of each line,\n" + "        translating the indentation to a nested structure,\n" + "        and padding the tree to even depth.\n" + "    count the leaves descending from each node,\n" + "        defining the width of a leaf as 1,\n" + "        and the width of a parent node as a sum.\n" + "            (The sum of the widths of its children)\n" + "    and write out a table with 'colspan' values\n" + "        either as a wiki table,\n" + "        or as HTML.";
  String yellow = "#ffffe6;";
  String orange = "#ffebd2;";
  String green = "#f0fff0;";
  String blue = "#e6ffff;";
  String pink = "#ffeeff;";
  List<String> cols = [yellow, orange, green, blue, pink];
  List<Map<String, dynamic>> nodes = makeIndent(outline, 4);
  Map<String, dynamic> n = {"name": "", "children": []};
  toNest(nodes, 0, 0, n);
  print(toMarkup(n, cols, 4));
  print("\n");
  String outline2 = "Display an outline as a nested table.\n" + "    Parse the outline to a tree,\n" + "        measuring the indent of each line,\n" + "        translating the indentation to a nested structure,\n" + "        and padding the tree to even depth.\n" + "    count the leaves descending from each node,\n" + "        defining the width of a leaf as 1,\n" + "        and the width of a parent node as a sum.\n" + "            (The sum of the widths of its children)\n" + "            Propagating the sums upward as necessary.\n" + "    and write out a table with 'colspan' values\n" + "        either as a wiki table,\n" + "        or as HTML.\n" + "    Optionally add color to the nodes.";
  List<String> cols2 = [blue, yellow, orange, green, pink];
  List<Map<String, dynamic>> nodes2 = makeIndent(outline2, 4);
  Map<String, dynamic> n2 = {"name": "", "children": []};
  toNest(nodes2, 0, 0, n2);
  print(toMarkup(n2, cols2, 4));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
