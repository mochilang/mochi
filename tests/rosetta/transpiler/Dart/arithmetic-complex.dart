// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

class Complex {
  num re;
  num im;
  Complex({required this.re, required this.im});
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  Complex add(Complex a, Complex b) {
  return Complex(re: a.re + b.re, im: a.im + b.im);
}
  Complex mul(Complex a, Complex b) {
  return Complex(re: a.re * b.re - a.im * b.im, im: a.re * b.im + a.im * b.re);
}
  Complex neg(Complex a) {
  return Complex(re: -a.re, im: -a.im);
}
  Complex inv(Complex a) {
  final num denom = a.re * a.re + a.im * a.im;
  return Complex(re: a.re / denom, im: -a.im / denom);
}
  Complex conj(Complex a) {
  return Complex(re: a.re, im: -a.im);
}
  String cstr(Complex a) {
  String s = "(" + (a.re).toString();
  if (a.im >= 0) {
    s = s + "+" + (a.im).toString() + "i)";
  } else {
    s = s + (a.im).toString() + "i)";
  }
  return s;
}
  final Complex a = Complex(re: 1.0, im: 1.0);
  final Complex b = Complex(re: 3.14159, im: 1.25);
  print("a:       " + cstr(a));
  print("b:       " + cstr(b));
  print("a + b:   " + cstr(add(a, b)));
  print("a * b:   " + cstr(mul(a, b)));
  print("-a:      " + cstr(neg(a)));
  print("1 / a:   " + cstr(inv(a)));
  print("aÌ…:       " + cstr(conj(a)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
