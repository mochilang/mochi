// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && _substr(str, 0, 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = n * 10 + digits[_substr(str, i, i + 1)]!;
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

List<String> fields(String s) {
  List<String> words = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == " " || ch == "	" || ch == "\n") {
    if (cur.length > 0) {
    words = [...words, cur];
    cur = "";
  };
  } else {
    cur = cur + ch;
  }
    i = i + 1;
  }
  if (cur.length > 0) {
    words = [...words, cur];
  }
  return words;
}

String unescape(String s) {
  String out = "";
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == "\\" && i + 1 < s.length) {
    String c = _substr(s, i + 1, i + 2);
    if (c == "n") {
    out = out + "\n";
    i = i + 2;
    continue;
  } else {
    if (c == "\\") {
    out = out + "\\";
    i = i + 2;
    continue;
  };
  };
  }
    out = out + _substr(s, i, i + 1);
    i = i + 1;
  }
  return out;
}

Map<String, dynamic> parseProgram(String src) {
  List<String> lines = split(src, "\n");
  List<String> header = fields(lines[0]);
  int dataSize = int.parse(header[1]);
  int nStrings = int.parse(header[3]);
  List<String> stringPool = <String>[];
  int i = 1;
  while (i <= nStrings) {
    String s = lines[i];
    if (s.length > 0) {
    stringPool = [...stringPool, unescape(_substr(s, 1, s.length - 1))];
  }
    i = i + 1;
  }
  List<Map<String, dynamic>> code = <Map<String, dynamic>>[];
  Map<int, int> addrMap = <int, int>{};
  while (i < lines.length) {
    String line = trim(lines[i]);
    if (line.length == 0) {
    break;
  }
    List<String> parts = fields(line);
    int addr = int.parse(parts[0]);
    String op = parts[1];
    int arg = 0;
    if (op == "push") {
    arg = int.parse(parts[2]);
  } else {
    if (op == "fetch" || op == "store") {
    arg = int.parse(_substr(parts[2], 1, parts[2].length - 1));
  } else {
    if (op == "jmp" || op == "jz") {
    arg = int.parse(parts[3]);
  };
  };
  }
    code = [...code, {"addr": addr, "op": op, "arg": arg}];
    addrMap[addr] = code.length - 1;
    i = i + 1;
  }
  return {"dataSize": dataSize, "strings": stringPool, "code": code, "addrMap": addrMap};
}

void runVM(Map<String, dynamic> prog) {
  List<int> data = <int>[];
  int i = 0;
  while (i.toString().compareTo(prog["dataSize"]!.toString()) < 0) {
    data = [...data, 0];
    i = i + 1;
  }
  List<int> stack = <int>[];
  int pc = 0;
  var code = prog["code"]!;
  var addrMap = prog["addrMap"]!;
  var pool = prog["strings"]!;
  String line = "";
  while (pc < code.length) {
    var inst = code[pc];
    var op = inst["op"];
    var arg = inst["arg"];
    if (op == "push") {
    stack = [...stack, arg];
    pc = pc + 1;
    continue;
  }
    if (op == "store") {
    data[arg] = stack[stack.length - 1];
    stack = stack.sublist(0, stack.length - 1);
    pc = pc + 1;
    continue;
  }
    if (op == "fetch") {
    stack = [...stack, data[arg]];
    pc = pc + 1;
    continue;
  }
    if (op == "add") {
    stack[stack.length - 2] = stack[stack.length - 2] + stack[stack.length - 1];
    stack = stack.sublist(0, stack.length - 1);
    pc = pc + 1;
    continue;
  }
    if (op == "lt") {
    int v = 0;
    if (stack[stack.length - 2] < stack[stack.length - 1]) {
    v = 1;
  };
    stack[stack.length - 2] = v;
    stack = stack.sublist(0, stack.length - 1);
    pc = pc + 1;
    continue;
  }
    if (op == "jz") {
    int v = stack[stack.length - 1];
    stack = stack.sublist(0, stack.length - 1);
    if (v == 0) {
    pc = addrMap[arg];
  } else {
    pc = pc + 1;
  };
    continue;
  }
    if (op == "jmp") {
    pc = addrMap[arg];
    continue;
  }
    if (op == "prts") {
    var s = pool[stack[stack.length - 1]];
    stack = stack.sublist(0, stack.length - 1);
    if (s != "\n") {
    line = line + s;
  };
    pc = pc + 1;
    continue;
  }
    if (op == "prti") {
    line = line + (stack[stack.length - 1]).toString();
    print(line);
    line = "";
    stack = stack.sublist(0, stack.length - 1);
    pc = pc + 1;
    continue;
  }
    if (op == "halt") {
    break;
  }
    pc = pc + 1;
  }
}

String trim(String s) {
  int start = 0;
  while (start < s.length && (_substr(s, start, start + 1) == " " || _substr(s, start, start + 1) == "	")) {
    start = start + 1;
  }
  int end = s.length;
  while (end > start && (_substr(s, end - 1, end) == " " || _substr(s, end - 1, end) == "	")) {
    end = end - 1;
  }
  return _substr(s, start, end);
}

List<String> split(String s, String sep) {
  List<String> parts = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    if (sep.length > 0 && i + sep.length <= s.length && _substr(s, i, i + sep.length) == sep) {
    parts = [...parts, cur];
    cur = "";
    i = i + sep.length;
  } else {
    cur = cur + _substr(s, i, i + 1);
    i = i + 1;
  }
  }
  parts = [...parts, cur];
  return parts;
}

void _main() {
  String programText = "Datasize: 1 Strings: 2\n" + "\"count is: \"\n" + "\"\\n\"\n" + "    0 push  1\n" + "    5 store [0]\n" + "   10 fetch [0]\n" + "   15 push  10\n" + "   20 lt\n" + "   21 jz     (43) 65\n" + "   26 push  0\n" + "   31 prts\n" + "   32 fetch [0]\n" + "   37 prti\n" + "   38 push  1\n" + "   43 prts\n" + "   44 fetch [0]\n" + "   49 push  1\n" + "   54 add\n" + "   55 store [0]\n" + "   60 jmp    (-51) 10\n" + "   65 halt\n";
  Map<String, dynamic> prog = parseProgram(programText);
  runVM(prog);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
