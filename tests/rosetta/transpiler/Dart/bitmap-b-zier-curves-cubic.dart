// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Pixel {
  int r;
  int g;
  int b;
  Pixel({required this.r, required this.g, required this.b});
}

int b3Seg = 30;
Pixel pixelFromRgb(int rgb) {
  int r = rgb ~/ 65536 % 256 as int;
  int g = rgb ~/ 256 % 256 as int;
  int b = rgb % 256 as int;
  return Pixel(r: r, g: g, b: b);
}

Map<String, dynamic> newBitmap(int cols, int rows) {
  List<List<Pixel>> d = <List<Pixel>>[];
  int y = 0;
  while (y < rows) {
    List<Pixel> row = <Pixel>[];
    int x = 0;
    while (x < cols) {
    row = [...row, Pixel(r: 0, g: 0, b: 0)];
    x = x + 1;
  }
    d = ([...d, row] as List).map((e) => List<Pixel>.from(e)).toList();
    y = y + 1;
  }
  return {"cols": cols, "rows": rows, "data": d};
}

void setPx(Map<String, dynamic> b, int x, int y, Pixel p) {
  int cols = b["cols"] as int;
  int rows = b["rows"] as int;
  if (x >= 0 && x < cols && y >= 0 && y < rows) {
    b["data"]![y]![x] = p;
  }
}

void fill(Map<String, dynamic> b, Pixel p) {
  int cols = b["cols"] as int;
  int rows = b["rows"] as int;
  int y = 0;
  while (y < rows) {
    int x = 0;
    while (x < cols) {
    b["data"]![y]![x] = p;
    x = x + 1;
  }
    y = y + 1;
  }
}

void fillRgb(Map<String, dynamic> b, int rgb) {
  fill(b, pixelFromRgb(rgb));
}

void line(Map<String, dynamic> b, int x0, int y0, int x1, int y1, Pixel p) {
  int dx = x1 - x0;
  if (dx < 0) {
    dx = -dx;
  }
  int dy = y1 - y0;
  if (dy < 0) {
    dy = -dy;
  }
  int sx = -1;
  if (x0 < x1) {
    sx = 1;
  }
  int sy = -1;
  if (y0 < y1) {
    sy = 1;
  }
  int err = dx - dy;
  while (true) {
    setPx(b, x0, y0, p);
    if (x0 == x1 && y0 == y1) {
    break;
  }
    int e2 = 2 * err;
    if (e2 > 0 - dy) {
    err = err - dy;
    x0 = x0 + sx;
  }
    if (e2 < dx) {
    err = err + dx;
    y0 = y0 + sy;
  }
  }
}

void bezier3(Map<String, dynamic> b, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, Pixel p) {
  List<int> px = <int>[];
  List<int> py = <int>[];
  int i = 0;
  while (i <= b3Seg) {
    px = [...px, 0];
    py = [...py, 0];
    i = i + 1;
  }
  num fx1 = (x1).toDouble();
  num fy1 = (y1).toDouble();
  num fx2 = (x2).toDouble();
  num fy2 = (y2).toDouble();
  num fx3 = (x3).toDouble();
  num fy3 = (y3).toDouble();
  num fx4 = (x4).toDouble();
  num fy4 = (y4).toDouble();
  i = 0;
  while (i <= b3Seg) {
    num d = ((i).toDouble()) / ((b3Seg).toDouble());
    num a = 1.0 - d;
    num bcoef = a * a;
    num ccoef = d * d;
    num a2 = a * bcoef;
    num b2 = 3.0 * bcoef * d;
    num c2 = 3.0 * a * ccoef;
    num d2 = ccoef * d;
    px[i] = (a2 * fx1 + b2 * fx2 + c2 * fx3 + d2 * fx4).toInt();
    py[i] = (a2 * fy1 + b2 * fy2 + c2 * fy3 + d2 * fy4).toInt();
    i = i + 1;
  }
  int x0 = px[0];
  int y0 = py[0];
  i = 1;
  while (i <= b3Seg) {
    int x = px[i];
    int y = py[i];
    line(b, x0, y0, x, y, p);
    x0 = x;
    y0 = y;
    i = i + 1;
  }
}

Map<String, dynamic> b = newBitmap(400, 300);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  fillRgb(b, 16773055);
  bezier3(b, 20, 200, 700, 50, -300, 50, 380, 150, pixelFromRgb(4165615));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
