// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class SumCarry {
  bool s;
  bool c;
  SumCarry({required this.s, required this.c});
}

class Add4Result {
  bool v;
  bool s3;
  bool s2;
  bool s1;
  bool s0;
  Add4Result({required this.v, required this.s3, required this.s2, required this.s1, required this.s0});
}

bool xor(bool a, bool b) {
  return a && !b || !a && b;
}

SumCarry ha(bool a, bool b) {
  return SumCarry(s: xor(a, b), c: a && b);
}

SumCarry fa(bool a, bool b, bool c0) {
  SumCarry r1 = ha(a, c0);
  SumCarry r2 = ha(r1.s, b);
  return SumCarry(s: r2.s, c: r1.c || r2.c);
}

Add4Result add4(bool a3, bool a2, bool a1, bool a0, bool b3, bool b2, bool b1, bool b0) {
  SumCarry r0 = fa(a0, b0, false);
  SumCarry r1 = fa(a1, b1, r0.c);
  SumCarry r2 = fa(a2, b2, r1.c);
  SumCarry r3 = fa(a3, b3, r2.c);
  return Add4Result(v: r3.c, s3: r3.s, s2: r2.s, s1: r1.s, s0: r0.s);
}

int b2i(bool b) {
  if (b) {
    return 1;
  }
  return 0;
}

void _main() {
  Add4Result r = add4(true, false, true, false, true, false, false, true);
  print((b2i(r.v)).toString() + " " + (b2i(r.s3)).toString() + " " + (b2i(r.s2)).toString() + " " + (b2i(r.s1)).toString() + " " + (b2i(r.s0)).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
