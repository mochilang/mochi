// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String timeStr(int sec) {
  int wks = sec ~/ 604800;
  sec = sec % 604800;
  int ds = sec ~/ 86400;
  sec = sec % 86400;
  int hrs = sec ~/ 3600;
  sec = sec % 3600;
  int mins = sec ~/ 60;
  sec = sec % 60;
  String res = "";
  bool comma = false;
  if (wks != 0) {
    res = res + (wks).toString() + " wk";
    comma = true;
  }
  if (ds != 0) {
    if (comma) {
    res = res + ", ";
  };
    res = res + (ds).toString() + " d";
    comma = true;
  }
  if (hrs != 0) {
    if (comma) {
    res = res + ", ";
  };
    res = res + (hrs).toString() + " hr";
    comma = true;
  }
  if (mins != 0) {
    if (comma) {
    res = res + ", ";
  };
    res = res + (mins).toString() + " min";
    comma = true;
  }
  if (sec != 0) {
    if (comma) {
    res = res + ", ";
  };
    res = res + (sec).toString() + " sec";
  }
  return res;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(timeStr(7259));
  print(timeStr(86400));
  print(timeStr(6000000));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
