// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<String> split(String s, String sep) {
  List<String> parts = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    if (sep.length > 0 && i + sep.length <= s.length && _substr(s, i, i + sep.length) == sep) {
    parts = [...parts, cur];
    cur = "";
    i = i + sep.length;
  } else {
    cur = cur + _substr(s, i, i + 1);
    i = i + 1;
  }
  }
  parts = [...parts, cur];
  return parts;
}

int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && _substr(str, 0, 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = (n * 10 + digits[_substr(str, i, i + 1)]!).toInt();
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

String joinInts(List<int> nums, String sep) {
  String s = "";
  int i = 0;
  while (i < nums.length) {
    if (i > 0) {
    s = s + sep;
  }
    s = s + (nums[i]).toString();
    i = i + 1;
  }
  return s;
}

List<int> undot(String s) {
  dynamic parts = s.split(".");
  List<int> nums = <int>[];
  for (var p in parts) {
    nums = [...nums, int.parse(p)];
  }
  return nums;
}

int factorial(int n) {
  int f = 1;
  int i = 2;
  while (i <= n) {
    f = f * i;
    i = i + 1;
  }
  return f;
}

List<dynamic> genFactBaseNums(int size, bool countOnly) {
  List<List<int>> results = <List<int>>[];
  int count = 0;
  int n = 0;
  while (true) {
    int radix = 2;
    List<int> res = <int>[];
    if (!countOnly) {
    int z = 0;
    while (z < size) {
    res = [...res, 0];
    z = z + 1;
  };
  }
    int k = n;
    while (k > 0) {
    int div = k ~/ radix;
    int rem = k % radix;
    if (!countOnly && radix <= size + 1) {
    res[size - radix + 1] = rem;
  }
    k = div;
    radix = radix + 1;
  }
    if (radix > size + 2) {
    break;
  }
    count = count + 1;
    if (!countOnly) {
    results = ([...results, res] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
  }
    n = n + 1;
  }
  return [results, count];
}

List<List<int>> mapToPerms(List<List<int>> factNums) {
  List<List<int>> perms = <List<int>>[];
  int psize = factNums[0].length + 1;
  List<int> start = <int>[];
  int i = 0;
  while (i < psize) {
    start = [...start, i];
    i = i + 1;
  }
  for (List<int> fn in factNums) {
    List<int> perm = <int>[];
    int j = 0;
    while (j < start.length) {
    perm = [...perm, start[j]];
    j = j + 1;
  }
    int m = 0;
    while (m < fn.length) {
    int g = fn[m];
    if (g != 0) {
    int first = m;
    int last = m + g;
    int t = 1;
    while (t <= g) {
    int temp = perm[first];
    int x = first + 1;
    while (x <= last) {
    perm[x - 1] = perm[x];
    x = x + 1;
  }
    perm[last] = temp;
    t = t + 1;
  };
  }
    m = m + 1;
  }
    perms = ([...perms, perm] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
  }
  return perms;
}

int seed = 1;
int randInt(int n) {
  seed = (seed * 1664525 + 1013904223) % 2147483647;
  return seed % n;
}

void _main() {
  List<dynamic> g = genFactBaseNums(3, false);
  dynamic factNums = g[0];
  List<List<int>> perms = mapToPerms(factNums);
  int i = 0;
  while (i < factNums.length) {
    print(joinInts(factNums[i], ".") + " -> " + joinInts(perms[i], ""));
    i = i + 1;
  }
  int count2 = factorial(11);
  print("\nPermutations generated = " + (count2).toString());
  print("compared to 11! which  = " + (factorial(11)).toString());
  print("");
  List<String> fbn51s = ["39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0", "51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1"];
  factNums = [undot(fbn51s[0]), undot(fbn51s[1])];
  perms = mapToPerms(factNums);
  String shoe = "A♠K♠Q♠J♠T♠9♠8♠7♠6♠5♠4♠3♠2♠A♥K♥Q♥J♥T♥9♥8♥7♥6♥5♥4♥3♥2♥A♦K♦Q♦J♦T♦9♦8♦7♦6♦5♦4♦3♦2♦A♣K♣Q♣J♣T♣9♣8♣7♣6♣5♣4♣3♣2♣";
  List<String> cards = <String>[];
  i = 0;
  while (i < 52) {
    String card = _substr(shoe, 2 * i, 2 * i + 2);
    if (_substr(card, 0, 1) == "T") {
    card = "10" + _substr(card, 1, 2);
  }
    cards = [...cards, card];
    i = i + 1;
  }
  i = 0;
  while (i < fbn51s.length) {
    print(fbn51s[i]);
    List<int> perm = perms[i];
    int j = 0;
    String line = "";
    while (j < perm.length) {
    line = line + cards[perm[j]];
    j = j + 1;
  }
    print(line + "\n");
    i = i + 1;
  }
  List<int> fbn51 = <int>[];
  i = 0;
  while (i < 51) {
    fbn51 = [...fbn51, randInt(52 - i)];
    i = i + 1;
  }
  print(joinInts(fbn51, "."));
  perms = mapToPerms([fbn51]);
  String line = "";
  i = 0;
  while (i < perms[0].length) {
    line = line + cards[perms[0][i]];
    i = i + 1;
  }
  print(line);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
