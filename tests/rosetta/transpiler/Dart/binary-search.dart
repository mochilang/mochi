// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int bsearch(List<int> arr, int x) {
  int low = 0;
  int high = arr.length - 1;
  while (low <= high) {
    final int mid = (low + high) ~/ 2;
    if (arr[mid] > x) {
    high = mid - 1;
  } else {
    if (arr[mid] < x) {
    low = mid + 1;
  } else {
    return mid;
  };
  }
  }
  return -1;
}

int bsearchRec(List<int> arr, int x, int low, int high) {
  if (high < low) {
    return -1;
  }
  final int mid = (low + high) ~/ 2;
  if (arr[mid] > x) {
    return bsearchRec(arr, x, low, mid - 1);
  } else {
    if (arr[mid] < x) {
    return bsearchRec(arr, x, mid + 1, high);
  };
  }
  return mid;
}

void main() {
  final List<int> nums = [-31, 0, 1, 2, 2, 4, 65, 83, 99, 782];
  int x = 2;
  int idx = bsearch(nums, x);
  if (idx >= 0) {
    print((x).toString() + " is at index " + (idx).toString() + ".");
  } else {
    print((x).toString() + " is not found.");
  }
  x = 5;
  idx = bsearchRec(nums, x, 0, nums.length - 1);
  if (idx >= 0) {
    print((x).toString() + " is at index " + (idx).toString() + ".");
  } else {
    print((x).toString() + " is not found.");
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}
