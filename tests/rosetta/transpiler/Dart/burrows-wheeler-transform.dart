// Generated by Mochi transpiler
final String stx = "";
final String etx = "";
bool contains(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<String> sortStrings(List<String> xs) {
  List<String> arr = xs;
  int n = arr.length;
  int i = 0;
  while (i < n) {
    int j = 0;
    while (j < n - 1) {
    if (arr[j].compareTo(arr[j + 1]) > 0) {
    final String tmp = arr[j];
    arr[j] = arr[j + 1];
    arr[j + 1] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

Map<String, dynamic> bwt(String s) {
  if (contains(s, stx) || contains(s, etx)) {
    return {"err": true, "res": ""};
  }
  s = stx + s + etx;
  final int le = s.length;
  List<String> table = [];
  int i = 0;
  while (i < le) {
    final String rot = s.substring(i, le) + s.substring(0, i);
    table = [...table, rot];
    i = i + 1;
  }
  table = sortStrings(table);
  String last = "";
  i = 0;
  while (i < le) {
    last = last + table[i].substring(le - 1, le);
    i = i + 1;
  }
  return {"err": false, "res": last};
}

String ibwt(String r) {
  final int le = r.length;
  List<String> table = [];
  int i = 0;
  while (i < le) {
    table = [...table, ""];
    i = i + 1;
  }
  int n = 0;
  while (n < le) {
    i = 0;
    while (i < le) {
    table[i] = r.substring(i, i + 1) + table[i];
    i = i + 1;
  }
    table = sortStrings(table);
    n = n + 1;
  }
  i = 0;
  while (i < le) {
    if (table[i].substring(le - 1, le) == etx) {
    return table[i].substring(1, le - 1);
  }
    i = i + 1;
  }
  return "";
}

String makePrintable(String s) {
  String out = "";
  int i = 0;
  while (i < s.length) {
    final String ch = s.substring(i, i + 1);
    if (ch == stx) {
    out = out + "^";
  } else {
    if (ch == etx) {
    out = out + "|";
  } else {
    out = out + ch;
  };
  }
    i = i + 1;
  }
  return out;
}

void main() {
  final List<String> examples = ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "ABC"];
  for (var t in examples) {
    print(makePrintable(t));
    final Map<String, dynamic> res = bwt(t);
    if (res["err"]!) {
    print(" --> ERROR: String can't contain STX or ETX");
    print(" -->");
  } else {
    final String enc = res["res"]!! as String;
    print(" --> " + makePrintable(enc));
    final String r = ibwt(enc);
    print(" --> " + r);
  }
    print("");
  }
}

void _start() {
  main();
}
