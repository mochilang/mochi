// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String stx = "";
String etx = "";
bool contains(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<String> sortStrings(List<String> xs) {
  List<String> arr = xs;
  int n = arr.length;
  int i = 0;
  while (i < n) {
    int j = 0;
    while (j < n - 1) {
    if (arr[j].compareTo(arr[j + 1]) > 0) {
    String tmp = arr[j];
    arr[j] = arr[j + 1];
    arr[j + 1] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

Map<String, dynamic> bwt(String s) {
  if (contains(s, stx) || contains(s, etx)) {
    return {"err": true, "res": ""};
  }
  s = stx + s + etx;
  int le = s.length;
  List<String> table = <String>[];
  int i = 0;
  while (i < le) {
    String rot = _substr(s, i, le) + _substr(s, 0, i);
    table = [...table, rot];
    i = i + 1;
  }
  table = sortStrings(table);
  String last = "";
  i = 0;
  while (i < le) {
    last = last + _substr(table[i], le - 1, le);
    i = i + 1;
  }
  return {"err": false, "res": last};
}

String ibwt(String r) {
  int le = r.length;
  List<String> table = <String>[];
  int i = 0;
  while (i < le) {
    table = [...table, ""];
    i = i + 1;
  }
  int n = 0;
  while (n < le) {
    i = 0;
    while (i < le) {
    table[i] = _substr(r, i, i + 1) + table[i];
    i = i + 1;
  }
    table = sortStrings(table);
    n = n + 1;
  }
  i = 0;
  while (i < le) {
    if (_substr(table[i], le - 1, le) == etx) {
    return _substr(table[i], 1, le - 1);
  }
    i = i + 1;
  }
  return "";
}

String makePrintable(String s) {
  String out = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == stx) {
    out = out + "^";
  } else {
    if (ch == etx) {
    out = out + "|";
  } else {
    out = out + ch;
  };
  }
    i = i + 1;
  }
  return out;
}

void _main() {
  List<String> examples = ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "ABC"];
  for (String t in examples) {
    print(makePrintable(t));
    Map<String, dynamic> res = bwt(t);
    if (res["err"]!) {
    print(" --> ERROR: String can't contain STX or ETX");
    print(" -->");
  } else {
    String enc = res["res"]! as String;
    print(" --> " + makePrintable(enc));
    String r = ibwt(enc);
    print(" --> " + r);
  }
    print("");
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
