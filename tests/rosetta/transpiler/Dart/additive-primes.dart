// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  int d = 5;
  while (d * d <= n) {
    if (n % d == 0) {
    return false;
  }
    d = d + 2;
    if (n % d == 0) {
    return false;
  }
    d = d + 4;
  }
  return true;
}
  int sumDigits(int n) {
  int s = 0;
  int x = n;
  while (x > 0) {
    s = s + x % 10;
    x = x ~/ 10 as int;
  }
  return s;
}
  String pad(int n) {
  if (n < 10) {
    return "  " + (n).toString();
  }
  if (n < 100) {
    return " " + (n).toString();
  }
  return (n).toString();
}
  void main() {
  print("Additive primes less than 500:");
  int count = 0;
  String line = "";
  int lineCount = 0;
  int i = 2;
  while (i < 500) {
    if (isPrime(i) && isPrime(sumDigits(i))) {
    count = count + 1;
    line = line + pad(i) + "  ";
    lineCount = lineCount + 1;
    if (lineCount == 10) {
    print(line.substring(0, line.length - 2));
    line = "";
    lineCount = 0;
  };
  }
    if (i > 2) {
    i = i + 2;
  } else {
    i = i + 1;
  }
  }
  if (lineCount > 0) {
    print(line.substring(0, line.length - 2));
  }
  print((count).toString() + " additive primes found.");
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
