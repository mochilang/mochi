// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

Map<int, Map<String, dynamic>> nodes = <int, Map<String, dynamic>>{};
int head = 0 - 1;
int tail = 0 - 1;
String listString() {
  if (head == 0 - 1) {
    return "<nil>";
  }
  String r = "[" + nodes[head]!["value"]!;
  int id = nodes[head]!["next"]! as int;
  while (id != 0 - 1) {
    r = r + " " + nodes[id]!["value"]!;
    id = nodes[id]!["next"]! as int;
  }
  r = r + "]";
  return r;
}

String out = "From tail:";
int id = tail;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(listString());
  nodes[0] = {"value": "A", "next": 0 - 1, "prev": 0 - 1};
  head = 0;
  tail = 0;
  nodes[1] = {"value": "B", "next": 0 - 1, "prev": 0};
  nodes[0]!["next"] = 1;
  tail = 1;
  print(listString());
  nodes[2] = {"value": "C", "next": 1, "prev": 0};
  nodes[1]!["prev"] = 2;
  nodes[0]!["next"] = 2;
  print(listString());
  while (id != 0 - 1) {
    out = out + " " + nodes[id]!["value"]!;
    id = nodes[id]!["prev"]! as int;
  }
  print(out);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
