// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

num log2(num x) {
  num k = 0.0;
  num v = x;
  while (v >= 2.0) {
    v = v / 2.0;
    k = k + 1.0;
  }
  while (v < 1.0) {
    v = v * 2.0;
    k = k - 1.0;
  }
  num z = (v - 1.0) / (v + 1.0);
  num zpow = z;
  num sum = z;
  int i = 3;
  while (i <= 9) {
    zpow = zpow * z * z;
    sum = sum + zpow / ((i).toDouble());
    i = i + 2;
  }
  num ln2 = 0.6931471805599453;
  return k + 2.0 * sum / ln2;
}

num entropy(String data) {
  if (data == "") {
    return 0.0;
  }
  Map<String, int> counts = <String, int>{};
  int i = 0;
  while (i < data.length) {
    String ch = _substr(data, i, i + 1);
    if (counts.containsKey(ch)) {
    counts[ch] = (counts[ch] ?? 0) + 1;
  } else {
    counts[ch] = 1;
  }
    i = i + 1;
  }
  num e = 0.0;
  num l = (data.length).toDouble();
  for (String ch in counts.keys) {
    num px = ((counts[ch] ?? 0) as num) / l;
    if (px > 0.0) {
    e = e - px * log2(px);
  }
  }
  return e;
}

String source = "// Mochi translation of the Rosetta \"Entropy-Narcissist\" task\n" + "// Simplified to compute the entropy of this source string\n\n" + "fun log2(x: float): float {\n" + "  var k = 0.0\n" + "  var v = x\n" + "  while v >= 2.0 {\n" + "    v = v / 2.0\n" + "    k = k + 1.0\n" + "  }\n" + "  while v < 1.0 {\n" + "    v = v * 2.0\n" + "    k = k - 1.0\n" + "  }\n" + "  let z = (v - 1.0) / (v + 1.0)\n" + "  var zpow = z\n" + "  var sum = z\n" + "  var i = 3\n" + "  while i <= 9 {\n" + "    zpow = zpow * z * z\n" + "    sum = sum + zpow / (i as float)\n" + "    i = i + 2\n" + "  }\n" + "  let ln2 = 0.6931471805599453\n" + "  return k + 2.0 * sum / ln2\n" + "}\n\n" + "fun entropy(data: string): float {\n" + "  if data == \"\" { return 0.0 }\n" + "  var counts: map<string,int> = {}\n" + "  var i = 0\n" + "  while i < len(data) {\n" + "    let ch = substring(data, i, i+1)\n" + "    if ch in counts {\n" + "      counts[ch] = counts[ch] + 1\n" + "    } else {\n" + "      counts[ch] = 1\n" + "    }\n" + "    i = i + 1\n" + "  }\n" + "  var e = 0.0\n" + "  let l = len(data) as float\n" + "  for ch in counts {\n" + "    let px = (counts[ch] as float) / l\n" + "    if px > 0.0 {\n" + "      e = e - px * log2(px)\n" + "    }\n" + "  }\n" + "  return e\n" + "}\n\n" + "// Store the program source as a string constant\n" + "let source = ... // truncated in actual source\n" + "\nfun main() {\n" + "  print(\"Source file entropy: \" + str(entropy(source)))\n" + "}\n\n" + "main()\n";
void _main() {
  print("Source file entropy: " + (entropy(source)).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
