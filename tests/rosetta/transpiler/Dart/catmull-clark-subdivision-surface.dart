// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Point {
  num x;
  num y;
  num z;
  Point({required this.x, required this.y, required this.z});
}

class Edge {
  int pn1;
  int pn2;
  int fn1;
  int fn2;
  Point cp;
  Edge({required this.pn1, required this.pn2, required this.fn1, required this.fn2, required this.cp});
}

class PointEx {
  Point p;
  int n;
  PointEx({required this.p, required this.n});
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String fmt4(num x) {
  num y = x * 10000.0;
  if (y >= 0) {
    y = y + 0.5;
  } else {
    y = y - 0.5;
  }
  y = (((y).toInt()).toDouble()) / 10000.0;
  String s = (y).toString();
  int dot = s.indexOf(".");
  if (dot == 0 - 1) {
    s = s + ".0000";
  } else {
    int decs = s.length - dot - 1;
    if (decs > 4) {
    s = _substr(s, 0, dot + 5);
  } else {
    while (decs < 4) {
    s = s + "0";
    decs = decs + 1;
  };
  };
  }
  if (x >= 0.0) {
    s = " " + s;
  }
  return s;
}

String fmt2(int n) {
  String s = (n).toString();
  if (s.length < 2) {
    return " " + s;
  }
  return s;
}

Point sumPoint(Point p1, Point p2) {
  return Point(x: p1.x + p2.x, y: p1.y + p2.y, z: p1.z + p2.z);
}

Point mulPoint(Point p, num m) {
  return Point(x: p.x * m, y: p.y * m, z: p.z * m);
}

Point divPoint(Point p, num d) {
  return mulPoint(p, 1.0 / d);
}

Point centerPoint(Point p1, Point p2) {
  return divPoint(sumPoint(p1, p2), 2.0);
}

List<Point> getFacePoints(List<Point> points, List<List<int>> faces) {
  List<Point> facePoints = <Point>[];
  int i = 0;
  while (i < faces.length) {
    List<int> face = faces[i];
    Point fp = Point(x: 0.0, y: 0.0, z: 0.0);
    for (var idx in face) {
    fp = sumPoint(fp, points[idx]);
  }
    fp = divPoint(fp, (face.length).toDouble());
    facePoints = [...facePoints, fp];
    i = i + 1;
  }
  return facePoints;
}

List<List<int>> sortEdges(List<List<int>> edges) {
  List<List<int>> res = <List<int>>[];
  List<List<int>> tmp = edges;
  while (tmp.length > 0) {
    var min = tmp[0];
    int idx = 0;
    int j = 1;
    while (j < tmp.length) {
    List<int> e = tmp[j];
    if (e[0].toString().compareTo(min[0].toString()) < 0 || e[0] == min[0] && (e[1].toString().compareTo(min[1].toString()) < 0 || e[1] == min[1] && e[2].toString().compareTo(min[2].toString()) < 0)) {
    min = e;
    idx = j;
  }
    j = j + 1;
  }
    res = [...res, min];
    List<List<int>> out = <List<int>>[];
    int k = 0;
    while (k < tmp.length) {
    if (k != idx) {
    out = [...out, tmp[k]];
  }
    k = k + 1;
  }
    tmp = out;
  }
  return res;
}

List<Edge> getEdgesFaces(List<Point> points, List<List<int>> faces) {
  List<List<int>> edges = <List<int>>[];
  int fnum = 0;
  while (fnum < faces.length) {
    List<int> face = faces[fnum];
    int numP = face.length;
    int pi = 0;
    while (pi < numP) {
    int pn1 = face[pi];
    int pn2 = 0;
    if (pi < numP - 1) {
    pn2 = face[pi + 1];
  } else {
    pn2 = face[0];
  }
    if (pn1 > pn2) {
    int tmpn = pn1;
    pn1 = pn2;
    pn2 = tmpn;
  }
    edges = [...edges, [pn1, pn2, fnum]];
    pi = pi + 1;
  }
    fnum = fnum + 1;
  }
  edges = sortEdges(edges);
  List<List<int>> merged = <List<int>>[];
  int idx = 0;
  while (idx < edges.length) {
    List<int> e1 = edges[idx];
    if (idx < edges.length - 1) {
    List<int> e2 = edges[idx + 1];
    if (e1[0] == e2[0] && e1[1] == e2[1]) {
    merged = [...merged, [e1[0], e1[1], e1[2], e2[2]]];
    idx = idx + 2;
    continue;
  };
  }
    merged = [...merged, [e1[0], e1[1], e1[2], -1]];
    idx = idx + 1;
  }
  List<Edge> edgesCenters = <Edge>[];
  for (var me in merged) {
    Point p1 = points[me[0]];
    Point p2 = points[me[1]];
    Point cp = centerPoint(p1, p2);
    edgesCenters = [...edgesCenters, Edge(pn1: me[0], pn2: me[1], fn1: me[2], fn2: me[3], cp: cp)];
  }
  return edgesCenters;
}

List<Point> getEdgePoints(List<Point> points, List<Edge> edgesFaces, List<Point> facePoints) {
  List<Point> edgePoints = <Point>[];
  int i = 0;
  while (i < edgesFaces.length) {
    Edge edge = edgesFaces[i];
    Point cp = edge.cp;
    Point fp1 = facePoints[edge.fn1];
    Point fp2 = fp1;
    if (edge.fn2 != 0 - 1) {
    fp2 = facePoints[edge.fn2];
  }
    Point cfp = centerPoint(fp1, fp2);
    edgePoints = [...edgePoints, centerPoint(cp, cfp)];
    i = i + 1;
  }
  return edgePoints;
}

List<Point> getAvgFacePoints(List<Point> points, List<List<int>> faces, List<Point> facePoints) {
  int numP = points.length;
  List<PointEx> temp = <PointEx>[];
  int i = 0;
  while (i < numP) {
    temp = [...temp, PointEx(p: Point(x: 0.0, y: 0.0, z: 0.0), n: 0)];
    i = i + 1;
  }
  int fnum = 0;
  while (fnum < faces.length) {
    Point fp = facePoints[fnum];
    for (var pn in faces[fnum]) {
    PointEx tp = temp[pn];
    temp[pn] = PointEx(p: sumPoint(tp.p, fp), n: tp.n + 1);
  }
    fnum = fnum + 1;
  }
  List<Point> avg = <Point>[];
  int j = 0;
  while (j < numP) {
    PointEx tp = temp[j];
    avg = [...avg, divPoint(tp.p, (tp.n).toDouble())];
    j = j + 1;
  }
  return avg;
}

List<Point> getAvgMidEdges(List<Point> points, List<Edge> edgesFaces) {
  int numP = points.length;
  List<PointEx> temp = <PointEx>[];
  int i = 0;
  while (i < numP) {
    temp = [...temp, PointEx(p: Point(x: 0.0, y: 0.0, z: 0.0), n: 0)];
    i = i + 1;
  }
  for (var edge in edgesFaces) {
    Point cp = edge.cp;
    List<int> arr = [edge.pn1, edge.pn2];
    for (var pn in arr) {
    PointEx tp = temp[pn];
    temp[pn] = PointEx(p: sumPoint(tp.p, cp), n: tp.n + 1);
  }
  }
  List<Point> avg = <Point>[];
  int j = 0;
  while (j < numP) {
    PointEx tp = temp[j];
    avg = [...avg, divPoint(tp.p, (tp.n).toDouble())];
    j = j + 1;
  }
  return avg;
}

List<int> getPointsFaces(List<Point> points, List<List<int>> faces) {
  List<int> pf = <int>[];
  int i = 0;
  while (i < points.length) {
    pf = [...pf, 0];
    i = i + 1;
  }
  int fnum = 0;
  while (fnum < faces.length) {
    for (var pn in faces[fnum]) {
    pf[pn] = pf[pn] + 1;
  }
    fnum = fnum + 1;
  }
  return pf;
}

List<Point> getNewPoints(List<Point> points, List<int> pf, List<Point> afp, List<Point> ame) {
  List<Point> newPts = <Point>[];
  int i = 0;
  while (i < points.length) {
    num n = (pf[i]).toDouble();
    num m1 = (n - 3.0) / n;
    num m2 = 1.0 / n;
    num m3 = 2.0 / n;
    Point old = points[i];
    Point p1 = mulPoint(old, m1);
    Point p2 = mulPoint(afp[i], m2);
    Point p3 = mulPoint(ame[i], m3);
    newPts = [...newPts, sumPoint(sumPoint(p1, p2), p3)];
    i = i + 1;
  }
  return newPts;
}

String key(int a, int b) {
  if (a < b) {
    return (a).toString() + "," + (b).toString();
  }
  return (b).toString() + "," + (a).toString();
}

List<dynamic> cmcSubdiv(List<Point> points, List<List<int>> faces) {
  List<Point> facePoints = getFacePoints(points, faces);
  List<Edge> edgesFaces = getEdgesFaces(points, faces);
  List<Point> edgePoints = getEdgePoints(points, edgesFaces, facePoints);
  List<Point> avgFacePoints = getAvgFacePoints(points, faces, facePoints);
  List<Point> avgMidEdges = getAvgMidEdges(points, edgesFaces);
  List<int> pointsFaces = getPointsFaces(points, faces);
  List<Point> newPoints = getNewPoints(points, pointsFaces, avgFacePoints, avgMidEdges);
  List<int> facePointNums = <int>[];
  int nextPoint = newPoints.length;
  for (var fp in facePoints) {
    newPoints = [...newPoints, fp];
    facePointNums = [...facePointNums, nextPoint];
    nextPoint = nextPoint + 1;
  }
  Map<String, int> edgePointNums = <String, int>{};
  int idx = 0;
  while (idx < edgesFaces.length) {
    Edge e = edgesFaces[idx];
    newPoints = [...newPoints, edgePoints[idx]];
    edgePointNums[key(e.pn1, e.pn2)] = nextPoint;
    nextPoint = nextPoint + 1;
    idx = idx + 1;
  }
  List<List<int>> newFaces = <List<int>>[];
  int fnum = 0;
  while (fnum < faces.length) {
    List<int> oldFace = faces[fnum];
    if (oldFace.length == 4) {
    int a = oldFace[0];
    int b = oldFace[1];
    int c = oldFace[2];
    int d = oldFace[3];
    int fpnum = facePointNums[fnum];
    int ab = edgePointNums[key(a, b)]!;
    int da = edgePointNums[key(d, a)]!;
    int bc = edgePointNums[key(b, c)]!;
    int cd = edgePointNums[key(c, d)]!;
    newFaces = [...newFaces, [a, ab, fpnum, da]];
    newFaces = [...newFaces, [b, bc, fpnum, ab]];
    newFaces = [...newFaces, [c, cd, fpnum, bc]];
    newFaces = [...newFaces, [d, da, fpnum, cd]];
  }
    fnum = fnum + 1;
  }
  return [newPoints, newFaces];
}

String formatPoint(Point p) {
  return "[" + fmt4(p.x) + " " + fmt4(p.y) + " " + fmt4(p.z) + "]";
}

String formatFace(List<int> f) {
  if (f.length == 0) {
    return "[]";
  }
  String s = "[" + fmt2(f[0]);
  int i = 1;
  while (i < f.length) {
    s = s + " " + fmt2(f[i]);
    i = i + 1;
  }
  s = s + "]";
  return s;
}

void _main() {
  List<Point> inputPoints = [Point(x: -1.0, y: 1.0, z: 1.0), Point(x: -1.0, y: -1.0, z: 1.0), Point(x: 1.0, y: -1.0, z: 1.0), Point(x: 1.0, y: 1.0, z: 1.0), Point(x: 1.0, y: -1.0, z: -1.0), Point(x: 1.0, y: 1.0, z: -1.0), Point(x: -1.0, y: -1.0, z: -1.0), Point(x: -1.0, y: 1.0, z: -1.0)];
  List<List<int>> inputFaces = [[0, 1, 2, 3], [3, 2, 4, 5], [5, 4, 6, 7], [7, 0, 3, 5], [7, 6, 1, 0], [6, 1, 2, 4]];
  List<Point> outputPoints = inputPoints;
  List<List<int>> outputFaces = inputFaces;
  int i = 0;
  while (i < 1) {
    List<dynamic> res = cmcSubdiv(outputPoints, outputFaces);
    outputPoints = res[0];
    outputFaces = res[1];
    i = i + 1;
  }
  for (var p in outputPoints) {
    print(formatPoint(p));
  }
  print("");
  for (var f in outputFaces) {
    print(formatFace(f));
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
