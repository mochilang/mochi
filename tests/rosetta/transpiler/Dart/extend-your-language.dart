// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class If2 {
  bool cond1;
  bool cond2;
  If2({required this.cond1, required this.cond2});
}

If2 else1(If2 i, dynamic f) {
  if (i.cond1 && i.cond2 == false) {
    f();
  }
  return i;
}

If2 else2(If2 i, dynamic f) {
  if (i.cond2 && i.cond1 == false) {
    f();
  }
  return i;
}

If2 else0(If2 i, dynamic f) {
  if (i.cond1 == false && i.cond2 == false) {
    f();
  }
  return i;
}

If2 if2(bool cond1, bool cond2, dynamic f) {
  if (cond1 && cond2) {
    f();
  }
  return If2(cond1: cond1, cond2: cond2);
}

int a = 0;
int b = 1;
If2 t = if2(a == 1, b == 3, (() {
  print("a = 1 and b = 3");
}));
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  t = else1(t, (() {
  print("a = 1 and b <> 3");
}));
  t = else2(t, (() {
  print("a <> 1 and b = 3");
}));
  else0(t, (() {
  print("a <> 1 and b <> 3");
}));
  a = 1;
  b = 0;
  t = if2(a == 1, b == 3, (() {
  print("a = 1 and b = 3");
}));
  t = else0(t, (() {
  print("a <> 1 and b <> 3");
}));
  else1(t, (() {
  print("a = 1 and b <> 3");
}));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
