// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

List<String> fields(String s) {
  List<String> words = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == " " || ch == "	" || ch == "\n") {
    if (cur.length > 0) {
    words = [...words, cur];
    cur = "";
  };
  } else {
    cur = cur + ch;
  }
    i = i + 1;
  }
  if (cur.length > 0) {
    words = [...words, cur];
  }
  return words;
}

List<String> makePatterns() {
  List<String> digits = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
  List<String> pats = <String>[];
  int i = 0;
  while (i < digits.length) {
    int j = 0;
    while (j < digits.length) {
    if (j != i) {
    int k = 0;
    while (k < digits.length) {
    if (k != i && k != j) {
    int l = 0;
    while (l < digits.length) {
    if (l != i && l != j && l != k) {
    pats = [...pats, digits[i] + digits[j] + digits[k] + digits[l]];
  }
    l = l + 1;
  };
  }
    k = k + 1;
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return pats;
}

void _main() {
  print("Cows and bulls/player\n" + "You think of four digit number of unique digits in the range 1 to 9.\n" + "I guess.  You score my guess:\n" + "    A correct digit but not in the correct place is a cow.\n" + "    A correct digit in the correct place is a bull.\n" + "You give my score as two numbers separated with a space.");
  List<String> patterns = makePatterns();
  while (true) {
    if (patterns.length == 0) {
    print("Oops, check scoring.");
    return;
  }
    String guess = patterns[0];
    patterns = patterns.sublist(1, patterns.length);
    int cows = 0;
    int bulls = 0;
    while (true) {
    print("My guess: " + guess + ".  Score? (c b) ");
    String line = stdin.readLineSync() ?? '';
    List<String> toks = fields(line);
    if (toks.length == 2) {
    int c = int.parse(toks[0]);
    int b = int.parse(toks[1]);
    if (c >= 0 && c <= 4 && b >= 0 && b <= 4 && c + b <= 4) {
    cows = c;
    bulls = b;
    break;
  };
  }
    print("Score guess as two numbers: cows bulls");
  }
    if (bulls == 4) {
    print("I did it. :)");
    return;
  }
    List<String> next = <String>[];
    int idx = 0;
    while (idx < patterns.length) {
    String pat = patterns[idx];
    int c = 0;
    int b = 0;
    int i = 0;
    while (i < 4) {
    String cg = _substr(guess, i, i + 1);
    String cp = _substr(pat, i, i + 1);
    if (cg == cp) {
    b = b + 1;
  } else {
    if (pat.indexOf(cg) >= 0) {
    c = c + 1;
  };
  }
    i = i + 1;
  }
    if (c == cows && b == bulls) {
    next = [...next, pat];
  }
    idx = idx + 1;
  }
    patterns = next;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
