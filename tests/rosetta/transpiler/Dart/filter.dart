// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> randPerm(int n) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < n) {
    arr = [...arr, i];
    i = i + 1;
  }
  int idx = n - 1;
  while (idx > 0) {
    int j = _now() % (idx + 1);
    int tmp = arr[idx];
    arr[idx] = arr[j];
    arr[j] = tmp;
    idx = idx - 1;
  }
  return arr;
}

List<int> even(List<int> xs) {
  List<int> r = <int>[];
  for (int x in xs) {
    if (x % 2 == 0) {
    r = [...r, x];
  }
  }
  return r;
}

List<int> reduceToEven(List<int> xs) {
  List<int> arr = xs;
  int last = 0;
  int i = 0;
  while (i < arr.length) {
    int e = arr[i];
    if (e % 2 == 0) {
    arr[last] = e;
    last = last + 1;
  }
    i = i + 1;
  }
  return arr.sublist(0, last);
}

String listStr(List<int> xs) {
  String s = "[";
  int i = 0;
  while (i < xs.length) {
    s = s + (xs[i]).toString();
    if (i + 1 < xs.length) {
    s = s + " ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

void _main() {
  List<int> a = randPerm(20);
  int cap_a = 20;
  print(listStr(a));
  print(listStr(even(a)));
  print(listStr(a));
  a = reduceToEven(a);
  print(listStr(a));
  print("a len: " + (a.length).toString() + " cap: " + (cap_a).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
