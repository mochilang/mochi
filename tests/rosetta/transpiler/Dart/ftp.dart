// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class FileInfo {
  String name;
  int size;
  String kind;
  FileInfo({required this.name, required this.size, required this.kind});
}

class FTPConn {
  String dir;
  FTPConn({required this.dir});
}

Map<String, Map<String, String>> serverData = {"pub": {"somefile.bin": "This is a file from the FTP server.", "readme.txt": "Hello from ftp."}};
Map<String, List<String>> serverNames = {"pub": ["somefile.bin", "readme.txt"]};
FTPConn connect(String hostport) {
  print("Connected to " + hostport);
  return FTPConn(dir: "/");
}

void login(FTPConn conn, String user, String pass) {
  print("Logged in as " + user);
}

void changeDir(FTPConn conn, String dir) {
  conn.dir = dir;
}

List<FileInfo> list(FTPConn conn) {
  List<String> names = serverNames[conn.dir]!!;
  Map<String, String> dataDir = serverData[conn.dir]!!;
  List<FileInfo> out = <FileInfo>[];
  for (String name in names) {
    String content = dataDir[name]!!;
    out = [...out, FileInfo(name: name, size: content.length, kind: "file")];
  }
  return out;
}

String retrieve(FTPConn conn, String name) {
  return serverData[conn.dir]![name]!;
}

void _main() {
  FTPConn conn = connect("localhost:21");
  login(conn, "anonymous", "anonymous");
  changeDir(conn, "pub");
  print(conn.dir);
  List<FileInfo> files = list(conn);
  for (FileInfo f in files) {
    print(f.name + " " + (f.size).toString());
  }
  String data = retrieve(conn, "somefile.bin");
  print("Wrote " + (data.length).toString() + " bytes to somefile.bin");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
