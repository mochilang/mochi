// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

void _main() {
  print("Diagram after trimming whitespace and removal of blank lines:\n");
  print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print("|                      ID                       |");
  print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print("|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |");
  print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print("|                    QDCOUNT                    |");
  print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print("|                    ANCOUNT                    |");
  print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print("|                    NSCOUNT                    |");
  print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print("|                    ARCOUNT                    |");
  print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print("\nDecoded:\n");
  print("Name     Bits  Start  End");
  print("=======  ====  =====  ===");
  print("ID        16      0    15");
  print("QR         1     16    16");
  print("Opcode     4     17    20");
  print("AA         1     21    21");
  print("TC         1     22    22");
  print("RD         1     23    23");
  print("RA         1     24    24");
  print("Z          3     25    27");
  print("RCODE      4     28    31");
  print("QDCOUNT   16     32    47");
  print("ANCOUNT   16     48    63");
  print("NSCOUNT   16     64    79");
  print("ARCOUNT   16     80    95");
  print("\nTest string in hex:");
  print("78477bbf5496e12e1bf169a4");
  print("\nTest string in binary:");
  print("011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100");
  print("\nUnpacked:\n");
  print("Name     Size  Bit pattern");
  print("=======  ====  ================");
  print("ID        16   0111100001000111");
  print("QR         1   0");
  print("Opcode     4   1111");
  print("AA         1   0");
  print("TC         1   1");
  print("RD         1   1");
  print("RA         1   1");
  print("Z          3   011");
  print("RCODE      4   1111");
  print("QDCOUNT   16   0101010010010110");
  print("ANCOUNT   16   1110000100101110");
  print("NSCOUNT   16   0001101111110001");
  print("ARCOUNT   16   0110100110100100");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
