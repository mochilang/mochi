// Generated by Mochi transpiler
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic shuffle(xs) {
  var arr = xs;
  int i = 99;
  while (i > 0) {
    final int j = _now() % (i + 1);
    final tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
    i = i - 1;
  }
  return arr;
}

void doTrials(trials, np, strategy) {
  int pardoned = 0;
  int t = 0;
  while (t < trials) {
    List<int> drawers = [];
    int i = 0;
    while (i < 100) {
    drawers = [...drawers, i];
    i = i + 1;
  }
    drawers = shuffle(drawers);
    int p = 0;
    bool success = true;
    while (p < np) {
    bool found = false;
    if (strategy == "optimal") {
    int prev = p;
    int d = 0;
    while (d < 50) {
    final int _this = drawers[prev];
    if (_this == p) {
    found = true;
    break;
  }
    prev = _this;
    d = d + 1;
  };
  } else {
    List<bool> opened = [];
    int k = 0;
    while (k < 100) {
    opened = [...opened, false];
    k = k + 1;
  };
    int d = 0;
    while (d < 50) {
    int n = _now() % 100;
    while (opened[n]) {
    n = _now() % 100;
  }
    opened[n] = true;
    if (drawers[n] == p) {
    found = true;
    break;
  }
    d = d + 1;
  };
  }
    if (!found) {
    success = false;
    break;
  }
    p = p + 1;
  }
    if (success) {
    pardoned = pardoned + 1;
  }
    t = t + 1;
  }
  final num rf = pardoned ~/ trials * 100;
  print("  strategy = " + strategy + "  pardoned = " + (pardoned).toString() + " relative frequency = " + (rf).toString() + "%");
}

void main() {
  final int trials = 1000;
  for (var np in [10, 100]) {
    print("Results from " + (trials).toString() + " trials with " + (np).toString() + " prisoners:\n");
    for (var strat in ["random", "optimal"]) {
    doTrials(trials, np, strat);
  }
  }
}

void _start() {
  _initNow();
  main();
  main();
}
