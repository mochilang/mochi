// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> shuffle(List<int> xs) {
  dynamic arr = xs;
  dynamic i = 99;
  while (i > 0) {
    num j = _now() % (i + 1);
    dynamic tmp = arr[(i).toInt()];
    arr[(i).toInt()] = arr[(j).toInt()];
    arr[(j).toInt()] = tmp;
    i = i - 1;
  }
  return (arr as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

void doTrials(int trials, int np, String strategy) {
  dynamic pardoned = 0;
  dynamic t = 0;
  while (t < trials) {
    List<int> drawers = <int>[];
    dynamic i = 0;
    while (i < 100) {
    drawers = [...drawers, i];
    i = i + 1;
  }
    drawers = shuffle(drawers);
    dynamic p = 0;
    dynamic success = true;
    while (p < np) {
    dynamic found = false;
    if (strategy == "optimal") {
    dynamic prev = p;
    dynamic d = 0;
    while (d < 50) {
    int _this = drawers[(prev).toInt()];
    if (_this == p) {
    found = true;
    break;
  }
    prev = _this;
    d = d + 1;
  };
  } else {
    List<bool> opened = <bool>[];
    dynamic k = 0;
    while (k < 100) {
    opened = [...opened, false];
    k = k + 1;
  };
    dynamic d = 0;
    while (d < 50) {
    dynamic n = _now() % 100;
    while (opened[(n).toInt()]) {
    n = _now() % 100;
  }
    opened[(n).toInt()] = true;
    if (drawers[(n).toInt()] == p) {
    found = true;
    break;
  }
    d = d + 1;
  };
  }
    if (!found) {
    success = false;
    break;
  }
    p = p + 1;
  }
    if (success) {
    pardoned = pardoned + 1;
  }
    t = t + 1;
  }
  num rf = (pardoned as num) / ((trials).toDouble()) * 100.0;
  print("  strategy = " + strategy + "  pardoned = " + (pardoned).toString() + " relative frequency = " + (rf).toString() + "%");
}

void _main() {
  int trials = 1000;
  for (int np in [10, 100]) {
    print("Results from " + (trials).toString() + " trials with " + (np).toString() + " prisoners:\n");
    for (String strat in ["random", "optimal"]) {
    doTrials(trials, np, strat);
  }
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
