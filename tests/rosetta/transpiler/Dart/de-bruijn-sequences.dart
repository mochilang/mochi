// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> dbRec(int k, int n, int t, int p, List<int> a, List<int> seq) {
  if (t > n) {
    if (n % p == 0) {
    int j = 1;
    while (j <= p) {
    seq = [...seq, a[j]];
    j = j + 1;
  };
  };
  } else {
    a[t] = a[t - p];
    seq = dbRec(k, n, t + 1, p, a, seq);
    int j = a[t - p] + 1;
    while (j < k) {
    a[t] = j;
    seq = dbRec(k, n, t + 1, t, a, seq);
    j = j + 1;
  };
  }
  return seq;
}

String deBruijn(int k, int n) {
  String digits = "0123456789";
  String alphabet = digits;
  if (k < 10) {
    alphabet = _substr(digits, 0, k);
  }
  List<int> a = <int>[];
  int i = 0;
  while (i < k * n) {
    a = [...a, 0];
    i = i + 1;
  }
  List<int> seq = <int>[];
  seq = dbRec(k, n, 1, 1, a, seq);
  String b = "";
  int idx = 0;
  while (idx < seq.length) {
    b = b + alphabet.substring(seq[idx], seq[idx] + 1);
    idx = idx + 1;
  }
  b = b + _substr(b, 0, n - 1);
  return b;
}

bool allDigits(String s) {
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch.compareTo("0") < 0 || ch.compareTo("9") > 0) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int parseIntStr(String str) {
  int n = 0;
  int i = 0;
  while (i < str.length) {
    n = n * 10 + ((_substr(str, i, i + 1)).codeUnitAt(0));
    i = i + 1;
  }
  return n;
}

void validate(String db) {
  int le = db.length;
  List<int> found = <int>[];
  int i = 0;
  while (i < 10000) {
    found = [...found, 0];
    i = i + 1;
  }
  int j = 0;
  while (j < le - 3) {
    String s = _substr(db, j, j + 4);
    if (allDigits(s)) {
    int n = int.parse(s);
    found[n] = found[n] + 1;
  }
    j = j + 1;
  }
  List<String> errs = <String>[];
  int k = 0;
  while (k < 10000) {
    if (found[k] == 0) {
    errs = [...errs, "    PIN number " + padLeft(k, 4) + " missing"];
  } else {
    if (found[k] > 1) {
    errs = [...errs, "    PIN number " + padLeft(k, 4) + " occurs " + (found[k]).toString() + " times"];
  };
  }
    k = k + 1;
  }
  int lerr = errs.length;
  if (lerr == 0) {
    print("  No errors found");
  } else {
    String pl = "s";
    if (lerr == 1) {
    pl = "";
  };
    print("  " + (lerr).toString() + " error" + pl + " found:");
    String msg = joinStr(errs, "\n");
    print(msg);
  }
}

String padLeft(int n, int width) {
  String s = (n).toString();
  while (s.length < width) {
    s = "0" + s;
  }
  return s;
}

String joinStr(List<String> xs, String sep) {
  String res = "";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    res = res + sep;
  }
    res = res + xs[i];
    i = i + 1;
  }
  return res;
}

String reverse(String s) {
  String out = "";
  int i = s.length - 1;
  while (i >= 0) {
    out = out + _substr(s, i, i + 1);
    i = i - 1;
  }
  return out;
}

void _main() {
  String db = deBruijn(10, 4);
  int le = db.length;
  print("The length of the de Bruijn sequence is " + (le).toString());
  print("\nThe first 130 digits of the de Bruijn sequence are:");
  print(_substr(db, 0, 130));
  print("\nThe last 130 digits of the de Bruijn sequence are:");
  print(_substr(db, le - 130, db.length));
  print("\nValidating the de Bruijn sequence:");
  validate(db);
  print("\nValidating the reversed de Bruijn sequence:");
  String dbr = reverse(db);
  validate(dbr);
  db = _substr(db, 0, 4443) + "." + _substr(db, 4444, db.length);
  print("\nValidating the overlaid de Bruijn sequence:");
  validate(db);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
