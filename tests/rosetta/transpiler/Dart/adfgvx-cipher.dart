// Generated by Mochi transpiler
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String adfgvx = "ADFGVX";
String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
String shuffleStr(String s) {
  List<String> arr = <String>[];
  int i = 0;
  while (i < s.length) {
    arr = [...arr, _substr(s, i, i + 1)];
    i = i + 1;
  }
  int j = arr.length - 1;
  while (j > 0) {
    int k = _now() % (j + 1);
    String tmp = arr[j];
    arr[j] = arr[k];
    arr[k] = tmp;
    j = j - 1;
  }
  String out = "";
  i = 0;
  while (i < arr.length) {
    out = out + arr[i];
    i = i + 1;
  }
  return out;
}

List<String> createPolybius() {
  String shuffled = shuffleStr(alphabet);
  List<String> labels = <String>[];
  int li = 0;
  while (li < adfgvx.length) {
    labels = [...labels, _substr(adfgvx, li, li + 1)];
    li = li + 1;
  }
  print("6 x 6 Polybius square:\n");
  print("  | A D F G V X");
  print("---------------");
  List<String> p = <String>[];
  int i = 0;
  while (i < 6) {
    String row = _substr(shuffled, i * 6, (i + 1) * 6);
    p = [...p, row];
    String line = labels[i] + " | ";
    int j = 0;
    while (j < 6) {
    line = line + _substr(row, j, j + 1) + " ";
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
  return p;
}

String createKey(int n) {
  if (n < 7 || n > 12) {
    print("Key should be within 7 and 12 letters long.");
  }
  String pool = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  String key = "";
  int i = 0;
  while (i < n) {
    int idx = _now() % pool.length;
    key = key + pool.substring(idx, idx + 1);
    pool = _substr(pool, 0, idx) + _substr(pool, idx + 1, pool.length);
    i = i + 1;
  }
  print("\nThe key is " + key);
  return key;
}

List<int> orderKey(String key) {
  List<dynamic> pairs = <dynamic>[];
  int i = 0;
  while (i < key.length) {
    pairs = [...pairs, [_substr(key, i, i + 1), i]];
    i = i + 1;
  }
  int n = pairs.length;
  int m = 0;
  while (m < n) {
    int j = 0;
    while (j < n - 1) {
    if (pairs[j][0].compareTo(pairs[j + 1][0]) > 0) {
    dynamic tmp = pairs[j];
    pairs[j] = pairs[j + 1];
    pairs[j + 1] = tmp;
  }
    j = j + 1;
  }
    m = m + 1;
  }
  List<dynamic> res = <dynamic>[];
  i = 0;
  while (i < n) {
    res = [...res, pairs[i][1] as int];
    i = i + 1;
  }
  return (res as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

String encrypt(List<String> polybius, String key, String plainText) {
  List<String> labels = <String>[];
  int li = 0;
  while (li < adfgvx.length) {
    labels = [...labels, _substr(adfgvx, li, li + 1)];
    li = li + 1;
  }
  String temp = "";
  int i = 0;
  while (i < plainText.length) {
    int r = 0;
    while (r < 6) {
    int c = 0;
    while (c < 6) {
    if (_substr(polybius[r], c, c + 1) == _substr(plainText, i, i + 1)) {
    temp = temp + (labels.sublist(r, r + 1)).join() + (labels.sublist(c, c + 1)).join();
  }
    c = c + 1;
  }
    r = r + 1;
  }
    i = i + 1;
  }
  int colLen = temp.length ~/ key.length;
  if (temp.length % key.length > 0) {
    colLen = colLen + 1;
  }
  List<List<String>> table = <List<String>>[];
  int rIdx = 0;
  while (rIdx < colLen) {
    List<String> row = <String>[];
    int j = 0;
    while (j < key.length) {
    row = [...row, ""];
    j = j + 1;
  }
    table = ([...table, row] as List).map((e) => List<String>.from(e)).toList();
    rIdx = rIdx + 1;
  }
  int idx = 0;
  while (idx < temp.length) {
    int row = idx ~/ key.length;
    int col = idx % key.length;
    table[row]![col] = _substr(temp, idx, idx + 1);
    idx = idx + 1;
  }
  List<int> order = orderKey(key);
  List<String> cols = <String>[];
  int ci = 0;
  while (ci < key.length) {
    String colStr = "";
    int ri = 0;
    while (ri < colLen) {
    colStr = colStr + table[ri][order[ci]];
    ri = ri + 1;
  }
    cols = [...cols, colStr];
    ci = ci + 1;
  }
  String result = "";
  ci = 0;
  while (ci < cols.length) {
    result = result + cols[ci];
    if (ci < cols.length - 1) {
    result = result + " ";
  }
    ci = ci + 1;
  }
  return result;
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String decrypt(List<String> polybius, String key, String cipherText) {
  List<String> colStrs = <String>[];
  int start = 0;
  int i = 0;
  while (i <= cipherText.length) {
    if (i == cipherText.length || cipherText.substring(i, i + 1) == " ") {
    colStrs = [...colStrs, _substr(cipherText, start, i)];
    start = i + 1;
  }
    i = i + 1;
  }
  int maxColLen = 0;
  i = 0;
  while (i < colStrs.length) {
    if (colStrs[i].length > maxColLen) {
    maxColLen = colStrs[i].length;
  }
    i = i + 1;
  }
  List<List<String>> cols = <List<String>>[];
  i = 0;
  while (i < colStrs.length) {
    String s = colStrs[i];
    List<String> ls = <String>[];
    int j = 0;
    while (j < s.length) {
    ls = [...ls, _substr(s, j, j + 1)];
    j = j + 1;
  }
    if (s.length < maxColLen) {
    List<String> pad = <String>[];
    int k = 0;
    while (k < maxColLen) {
    if (k < ls.length) {
    pad = [...pad, ls[k]];
  } else {
    pad = [...pad, ""];
  }
    k = k + 1;
  };
    cols = ([...cols, pad] as List).map((e) => List<String>.from(e)).toList();
  } else {
    cols = ([...cols, ls] as List).map((e) => List<String>.from(e)).toList();
  }
    i = i + 1;
  }
  List<List<String>> table = <List<String>>[];
  int r = 0;
  while (r < maxColLen) {
    List<String> row = <String>[];
    int c = 0;
    while (c < key.length) {
    row = [...row, ""];
    c = c + 1;
  }
    table = ([...table, row] as List).map((e) => List<String>.from(e)).toList();
    r = r + 1;
  }
  List<int> order = orderKey(key);
  r = 0;
  while (r < maxColLen) {
    int c = 0;
    while (c < key.length) {
    table[r]![order[c]] = cols[c][r];
    c = c + 1;
  }
    r = r + 1;
  }
  String temp = "";
  r = 0;
  while (r < table.length) {
    int j = 0;
    while (j < table[r].length) {
    temp = temp + table[r][j];
    j = j + 1;
  }
    r = r + 1;
  }
  String plainText = "";
  int idx = 0;
  while (idx < temp.length) {
    int rIdx = adfgvx.indexOf(_substr(temp, idx, idx + 1));
    int cIdx = adfgvx.indexOf(_substr(temp, idx + 1, idx + 2));
    plainText = plainText + polybius[rIdx].substring(cIdx, cIdx + 1);
    idx = idx + 2;
  }
  return plainText;
}

void _main() {
  String plainText = "ATTACKAT1200AM";
  List<String> polybius = createPolybius();
  String key = createKey(9);
  print("\nPlaintext : " + plainText);
  String cipherText = encrypt(polybius, key, plainText);
  print("\nEncrypted : " + cipherText);
  String plainText2 = decrypt(polybius, key, cipherText);
  print("\nDecrypted : " + plainText2);
}

void _start() {
  _initNow();
  _main();
}

void main() => _start();
