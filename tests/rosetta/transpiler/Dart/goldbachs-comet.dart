// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<bool> sieve(int limit) {
  List<bool> primes = <bool>[];
  dynamic i = 0;
  while (i < limit) {
    primes = [...primes, true];
    i = i + 1;
  }
  primes[0] = false;
  primes[1] = false;
  dynamic p = 2;
  while (p * p < limit) {
    if (primes[(p).toInt()]) {
    dynamic k = p * p;
    while (k < limit) {
    primes[(k).toInt()] = false;
    k = k + p;
  };
  }
    p = p + 1;
  }
  return primes;
}

int goldbachCount(List<bool> primes, int n) {
  dynamic c = 0;
  dynamic i = 1;
  while (i <= n ~/ 2) {
    if (primes[(i).toInt()] && primes[(n - i).toInt()]) {
    c = c + 1;
  }
    i = i + 1;
  }
  return c;
}

String pad(int n) {
  if (n < 10) {
    return "  " + (n).toString();
  }
  if (n < 100) {
    return " " + (n).toString();
  }
  return (n).toString();
}

void _main() {
  dynamic primes = sieve(1000);
  print("The first 100 Goldbach numbers:");
  dynamic line = "";
  dynamic n = 2;
  dynamic count = 0;
  while (count < 100) {
    dynamic v = goldbachCount(primes, (2 * n).toInt());
    line = line + pad(v) + " ";
    count = count + 1;
    n = n + 1;
    if (count % 10 == 0) {
    print(_substr(line, 0, line.length - 1));
    line = "";
  }
  }
  dynamic val = goldbachCount(primes, 1000);
  print("\nThe 1,000th Goldbach number = " + (val).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
