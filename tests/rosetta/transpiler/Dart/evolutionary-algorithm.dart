// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String target = "METHINKS IT IS LIKE A WEASEL";
String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ";
int seed = 1;
List<int> randInt(int s, int n) {
  int next = (s * 1664525 + 1013904223) % 2147483647;
  return [next, next % n];
}

String randChar() {
  List<int> r = randInt(seed, chars.length);
  seed = r[0];
  int idx = r[1] as int;
  return _substr(chars, idx, idx + 1);
}

String randomString(int n) {
  String s = "";
  int i = 0;
  while (i < n) {
    s = s + randChar();
    i = i + 1;
  }
  return s;
}

int fitness(String s) {
  int h = 0;
  int i = 0;
  while (i < target.length) {
    if (_substr(s, i, i + 1) != _substr(target, i, i + 1)) {
    h = h + 1;
  }
    i = i + 1;
  }
  return h;
}

String mutate(String p) {
  String m = "";
  int i = 0;
  while (i < p.length) {
    List<int> r = randInt(seed, 20);
    seed = r[0];
    if (r[1] == 0) {
    m = m + randChar();
  } else {
    m = m + _substr(p, i, i + 1);
  }
    i = i + 1;
  }
  return m;
}

void _main() {
  String parent = randomString(target.length);
  print(parent);
  int best = fitness(parent);
  bool done = false;
  while (!done) {
    int i = 0;
    while (i < 20) {
    String child = mutate(parent);
    int f = fitness(child);
    if (f < best) {
    best = f;
    parent = child;
    print(parent);
    if (best == 0) {
    done = true;
    break;
  };
  }
    i = i + 1;
  }
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
