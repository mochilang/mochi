// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> randInt(int seed, int n) {
  int next = (seed * 1664525 + 1013904223) % 2147483647;
  return [next, next % n];
}

List<dynamic> newBoard(int n, int seed) {
  List<List<int>> board = <List<int>>[];
  int s = seed;
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    List<int> r = randInt(s, 2);
    s = r[0];
    row = [...row, r[1]];
    j = j + 1;
  }
    board = ([...board, row] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    i = i + 1;
  }
  return [board, s];
}

List<List<int>> copyBoard(List<List<int>> b) {
  List<List<int>> nb = <List<int>>[];
  int i = 0;
  while (i < b.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < b[i].length) {
    row = [...row, b[i][j]];
    j = j + 1;
  }
    nb = ([...nb, row] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    i = i + 1;
  }
  return nb;
}

List<List<int>> flipRow(List<List<int>> b, int r) {
  int j = 0;
  while (j < b[r].length) {
    b[r]![j] = 1 - b[r][j];
    j = j + 1;
  }
  return b;
}

List<List<int>> flipCol(List<List<int>> b, int c) {
  int i = 0;
  while (i < b.length) {
    b[i]![c] = 1 - b[i][c];
    i = i + 1;
  }
  return b;
}

bool boardsEqual(List<List<int>> a, List<List<int>> b) {
  int i = 0;
  while (i < a.length) {
    int j = 0;
    while (j < a[i].length) {
    if (a[i][j] != b[i][j]) {
    return false;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return true;
}

List<dynamic> shuffleBoard(List<List<int>> b, int seed) {
  int s = seed;
  int n = b.length;
  int k = 0;
  while (k < 2 * n) {
    List<int> r = randInt(s, n);
    s = r[0];
    int idx = r[1] as int;
    if (k % 2 == 0) {
    b = flipRow(b, idx);
  } else {
    b = flipCol(b, idx);
  }
    k = k + 1;
  }
  return [b, s];
}

Map<String, List<int>> solve(List<List<int>> board, List<List<int>> target) {
  int n = board.length;
  List<int> row = <int>[];
  List<int> col = <int>[];
  int i = 0;
  while (i < n) {
    int diff = board[i][0] != target[i][0] ? 1 : 0;
    row = [...row, diff];
    i = i + 1;
  }
  int j = 0;
  while (j < n) {
    int diff = board[0][j] != target[0][j] ? 1 : 0;
    int val = (diff + row[0]) % 2;
    col = [...col, val];
    j = j + 1;
  }
  return {"row": row, "col": col};
}

List<dynamic> applySolution(List<List<int>> b, Map<String, List<int>> sol) {
  List<List<int>> board = b;
  int moves = 0;
  int i = 0;
  while (i < sol["row"]!.length) {
    if (sol["row"]![i] == 1) {
    board = flipRow(board, i);
    moves = moves + 1;
  }
    i = i + 1;
  }
  int j = 0;
  while (j < sol["col"]!.length) {
    if (sol["col"]![j] == 1) {
    board = flipCol(board, j);
    moves = moves + 1;
  }
    j = j + 1;
  }
  return [board, moves];
}

void printBoard(List<List<int>> b) {
  int i = 0;
  while (i < b.length) {
    String line = "";
    int j = 0;
    while (j < b[i].length) {
    line = line + (b[i][j]).toString();
    if (j < b[i].length - 1) {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

void _main() {
  int n = 3;
  int seed = 1;
  List<dynamic> res = newBoard(n, seed);
  List<List<int>> target = (res[0] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
  seed = res[1] as int;
  List<List<int>> board = copyBoard(target);
  while (true) {
    List<dynamic> sres = shuffleBoard(copyBoard(board), seed);
    board = (sres[0] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    seed = sres[1] as int;
    if (!boardsEqual(board, target)) {
    break;
  }
  }
  print("Target:");
  printBoard(target);
  print("Board:");
  printBoard(board);
  Map<String, List<int>> sol = solve(board, target);
  List<dynamic> ares = applySolution(board, sol);
  board = (ares[0] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
  int moves = ares[1] as int;
  print("Solved:");
  printBoard(board);
  print("Moves: " + (moves).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
