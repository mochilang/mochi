// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int gcd(int a, int b) {
  int x = a;
  if (x < 0) {
    x = -x;
  }
  int y = b;
  if (y < 0) {
    y = -y;
  }
  while (y != 0) {
    int t = x % y;
    x = y;
    y = t;
  }
  return x;
}

Map<String, int> parseRational(String s) {
  int intPart = 0;
  int fracPart = 0;
  int denom = 1;
  bool afterDot = false;
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == ".") {
    afterDot = true;
  } else {
    int d = int.parse(ch) - int.parse("0");
    if (!afterDot) {
    intPart = intPart * 10 + d;
  } else {
    fracPart = fracPart * 10 + d;
    denom = denom * 10;
  };
  }
    i = i + 1;
  }
  int _num = intPart * denom + fracPart;
  int g = gcd(_num, denom);
  return {"num": _num ~/ g as int, "den": denom ~/ g as int};
}

void _main() {
  List<String> inputs = ["0.9054054", "0.518518", "0.75"];
  for (String s in inputs) {
    Map<String, int> r = parseRational(s);
    print(s + " = " + ((r["num"] ?? 0)).toString() + "/" + ((r["den"] ?? 0)).toString());
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
