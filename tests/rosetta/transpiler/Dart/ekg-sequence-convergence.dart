// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

bool contains(List<int> xs, int n) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == n) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

int gcd(int a, int b) {
  int x = a;
  int y = b;
  while (y != 0) {
    int t = x % y;
    x = y;
    y = t;
  }
  if (x < 0) {
    x = -x;
  }
  return x;
}

List<int> sortInts(List<int> xs) {
  List<int> arr = xs;
  int n = arr.length;
  int i = 0;
  while (i < n) {
    int j = 0;
    while (j < n - 1) {
    if (arr[j] > arr[j + 1]) {
    int tmp = arr[j];
    arr[j] = arr[j + 1];
    arr[j + 1] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

bool areSame(List<int> s, List<int> t) {
  if (s.length != t.length) {
    return false;
  }
  List<int> a = sortInts(s);
  List<int> b = sortInts(t);
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void printSlice(int start, List<int> seq) {
  List<int> first = <int>[];
  int i = 0;
  while (i < 30) {
    first = [...first, seq[i]];
    i = i + 1;
  }
  String pad = "";
  if (start < 10) {
    pad = " ";
  }
  print("EKG(" + pad + (start).toString() + "): " + (first).toString());
}

void _main() {
  int limit = 100;
  List<int> starts = [2, 5, 7, 9, 10];
  List<List<int>> ekg = <List<int>>[];
  int s = 0;
  while (s < starts.length) {
    List<int> seq = [1, starts[s]];
    int n = 2;
    while (n < limit) {
    int i = 2;
    bool done = false;
    while (!done) {
    if (!contains(seq, i) && gcd(seq[n - 1], i) > 1) {
    seq = [...seq, i];
    done = true;
  }
    i = i + 1;
  }
    n = n + 1;
  }
    ekg = [...ekg, seq];
    printSlice(starts[s], seq);
    s = s + 1;
  }
  int i = 2;
  bool found = false;
  while (i < limit) {
    if (ekg[1][i] == ekg[2][i] && areSame(ekg[1].sublist(0, i), ekg[2].sublist(0, i))) {
    print("\nEKG(5) and EKG(7) converge at term " + (i + 1).toString());
    found = true;
    break;
  }
    i = i + 1;
  }
  if (!found) {
    print("\nEKG5(5) and EKG(7) do not converge within " + (limit).toString() + " terms");
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
