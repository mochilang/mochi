// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class BigRat {
  BigInt num;
  BigInt den;
  BigRat(this.num, [BigInt? d]) : den = d ?? BigInt.one {
    if (den.isNegative) { num = -num; den = -den; }
    var g = num.gcd(den);
    num = num ~/ g;
    den = den ~/ g;
  }
  BigRat add(BigRat o) => BigRat(num * o.den + o.num * den, den * o.den);
  BigRat sub(BigRat o) => BigRat(num * o.den - o.num * den, den * o.den);
  BigRat mul(BigRat o) => BigRat(num * o.num, den * o.den);
  BigRat div(BigRat o) => BigRat(num * o.den, den * o.num);
}

BigRat _bigrat(dynamic n, [dynamic d]) {
  if (n is BigRat && d == null) return BigRat(n.num, n.den);
  BigInt numer;
  BigInt denom = d == null ? BigInt.one : (d is BigInt ? d : BigInt.from((d as num).toInt()));
  if (n is BigRat) { numer = n.num; denom = n.den; }
  else if (n is BigInt) { numer = n; }
  else if (n is int) { numer = BigInt.from(n); }
  else if (n is num) { numer = BigInt.from(n.toInt()); }
  else { numer = BigInt.zero; }
  return BigRat(numer, denom);
}
BigInt _num(BigRat r) => r.num;
BigInt _denom(BigRat r) => r.den;
BigRat _add(BigRat a, BigRat b) => a.add(b);
BigRat _sub(BigRat a, BigRat b) => a.sub(b);
BigRat _mul(BigRat a, BigRat b) => a.mul(b);
BigRat _div(BigRat a, BigRat b) => a.div(b);
BigRat _neg(BigRat a) => BigRat(-a.num, a.den);

BigRat bernoulli(int n) {
  List<BigRat> a = <BigRat>[];
  int m = 0;
  while (m <= n) {
    a = List<BigRat>.from([...a, _div(_bigrat(1), _bigrat(m + 1))]);
    int j = m;
    while (j >= 1) {
    a[j - 1] = _mul(_bigrat(j), _sub(a[j - 1], a[j]));
    j = j - 1;
  }
    m = m + 1;
  }
  return a[0];
}

BigInt binom(int n, int k) {
  if (k < 0 || k > n) {
    return BigInt.from(0);
  }
  int kk = k;
  if (kk > n - kk) {
    kk = n - kk;
  }
  BigInt res = BigInt.from(1);
  int i = 0;
  while (i < kk) {
    res = res * (BigInt.from(n - i));
    i = i + 1;
    res = res ~/ (BigInt.from(i));
  }
  return res;
}

BigRat coeff(int p, int j) {
  BigRat base = _div(_bigrat(1), _bigrat(p + 1));
  BigRat c = base;
  if (j % 2 == 1) {
    c = _neg(c);
  }
  c = _mul(c, _bigrat(binom(p + 1, j)));
  c = _mul(c, bernoulli(j));
  return c;
}

void _main() {
  int p = 0;
  while (p < 10) {
    String line = (p).toString() + " :";
    int j = 0;
    while (j <= p) {
    BigRat c = coeff(p, j);
    if ((c).toString() != "0/1") {
    line = line + " " + (c).toString() + "Ã—n";
    int exp = p + 1 - j;
    if (exp > 1) {
    line = line + "^" + (exp).toString();
  };
  }
    j = j + 1;
  }
    print(line);
    p = p + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
