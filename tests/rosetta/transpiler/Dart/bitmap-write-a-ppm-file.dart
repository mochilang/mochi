// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Colour {
  int R;
  int G;
  int B;
  Colour({required this.R, required this.G, required this.B});
}

class Bitmap {
  int width;
  int height;
  List<List<Colour>> pixels;
  Bitmap({required this.width, required this.height, required this.pixels});
}

Bitmap newBitmap(int w, int h, Colour c) {
  List<List<Colour>> rows = <List<Colour>>[];
  int y = 0;
  while (y < h) {
    List<Colour> row = <Colour>[];
    int x = 0;
    while (x < w) {
    row = [...row, c];
    x = x + 1;
  }
    rows = ([...rows, row] as List).map((e) => List<Colour>.from(e)).toList();
    y = y + 1;
  }
  return Bitmap(width: w, height: h, pixels: rows);
}

void setPixel(Bitmap b, int x, int y, Colour c) {
  List<List<Colour>> rows = b.pixels;
  List<Colour> row = rows[y];
  row[x] = c;
  rows[y] = row;
  b.pixels = rows;
}

void fillRect(Bitmap b, int x, int y, int w, int h, Colour c) {
  int yy = y;
  while (yy < y + h) {
    int xx = x;
    while (xx < x + w) {
    setPixel(b, xx, yy, c);
    xx = xx + 1;
  }
    yy = yy + 1;
  }
}

String pad(int n, int width) {
  String s = (n).toString();
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

String writePPMP3(Bitmap b) {
  int maxv = 0;
  int y = 0;
  while (y < b.height) {
    int x = 0;
    while (x < b.width) {
    Colour p = b.pixels[y][x];
    if (p.R > maxv) {
    maxv = p.R;
  }
    if (p.G > maxv) {
    maxv = p.G;
  }
    if (p.B > maxv) {
    maxv = p.B;
  }
    x = x + 1;
  }
    y = y + 1;
  }
  String out = "P3\n# generated from Bitmap.writeppmp3\n" + (b.width).toString() + " " + (b.height).toString() + "\n" + (maxv).toString() + "\n";
  int numsize = (maxv).toString().length;
  y = b.height - 1;
  while (y >= 0) {
    String line = "";
    int x = 0;
    while (x < b.width) {
    Colour p = b.pixels[y][x];
    line = line + "   " + pad(p.R, numsize) + " " + pad(p.G, numsize) + " " + pad(p.B, numsize);
    x = x + 1;
  }
    out = out + line;
    if (y > 0) {
    out = out + "\n";
  } else {
    out = out + "\n";
  }
    y = y - 1;
  }
  return out;
}

void _main() {
  Colour black = Colour(R: 0, G: 0, B: 0);
  Colour white = Colour(R: 255, G: 255, B: 255);
  Bitmap bm = newBitmap(4, 4, black);
  fillRect(bm, 1, 0, 1, 2, white);
  setPixel(bm, 3, 3, Colour(R: 127, G: 0, B: 63));
  String ppm = writePPMP3(bm);
  print(ppm);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
