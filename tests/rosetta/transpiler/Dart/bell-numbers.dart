// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<List<BigInt>> bellTriangle(int n) {
  List<List<BigInt>> tri = <List<BigInt>>[];
  int i = 0;
  while (i < n) {
    List<BigInt> row = <BigInt>[];
    int j = 0;
    while (j < i) {
    row = [...row, BigInt.from(0)];
    j = j + 1;
  }
    tri = ([...tri, row] as List).map((e) => List<BigInt>.from(e)).toList();
    i = i + 1;
  }
  tri[1]![0] = BigInt.from(1);
  i = 2;
  while (i < n) {
    tri[i]![0] = tri[i - 1][i - 2];
    int j = 1;
    while (j < i) {
    tri[i]![j] = tri[i][j - 1] + tri[i - 1][j - 1];
    j = j + 1;
  }
    i = i + 1;
  }
  return tri;
}

void _main() {
  List<List<BigInt>> bt = bellTriangle(51);
  print("First fifteen and fiftieth Bell numbers:");
  for (int i = 1; i < 16; i++) {
    print("" + (i).toString().padLeft(2, " ") + ": " + (bt[i][0]).toString());
  }
  print("50: " + (bt[50][0]).toString());
  print("");
  print("The first ten rows of Bell's triangle:");
  for (int i = 1; i < 11; i++) {
    print(bt[i]);
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
