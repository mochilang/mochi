// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> primeFactors(int n) {
  List<int> factors = <int>[];
  int last = 0;
  int x = n;
  while (x % 2 == 0) {
    if (last == 2) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
    factors = [...factors, 2];
    last = 2;
    x = x ~/ 2;
  }
  int p = 3;
  while (p * p <= x) {
    while (x % p == 0) {
    if (last == p) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
    factors = [...factors, p];
    last = p;
    x = x ~/ p;
  }
    p = p + 2;
  }
  if (x > 1) {
    if (last == x) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  };
    factors = [...factors, x];
  }
  return factors;
}

bool isGiuga(int n) {
  List<int> facs = primeFactors(n);
  if (facs.length <= 2) {
    return false;
  }
  for (int f in facs) {
    if ((n ~/ f - 1) % f != 0) {
    return false;
  }
  }
  return true;
}

void _main() {
  List<int> known = [30, 858, 1722, 66198];
  List<int> nums = <int>[];
  for (int n in known) {
    if (isGiuga(n)) {
    nums = [...nums, n];
  }
  }
  print("The first 4 Giuga numbers are:");
  print(nums);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
