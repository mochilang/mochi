// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Airport {
  String name;
  String country;
  String icao;
  num lat;
  num lon;
  Airport({required this.name, required this.country, required this.icao, required this.lat, required this.lon});
}

num PI = 3.141592653589793;
num sinApprox(num x) {
  num term = x;
  num sum = x;
  int n = 1;
  while (n <= 8) {
    num denom = (2 * n * (2 * n + 1)).toDouble();
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

num cosApprox(num x) {
  num term = 1.0;
  num sum = 1.0;
  int n = 1;
  while (n <= 8) {
    num denom = ((2 * n - 1) * 2 * n).toDouble();
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

num atanApprox(num x) {
  if (x > 1.0) {
    return PI / 2.0 - x / (x * x + 0.28);
  }
  if (x < -1.0) {
    return -PI / 2.0 - x / (x * x + 0.28);
  }
  return x / (1.0 + 0.28 * x * x);
}

num atan2Approx(num y, num x) {
  if (x > 0.0) {
    num r = atanApprox(y / x);
    return r;
  }
  if (x < 0.0) {
    if (y >= 0.0) {
    return atanApprox(y / x) + PI;
  };
    return atanApprox(y / x) - PI;
  }
  if (y > 0.0) {
    return PI / 2.0;
  }
  if (y < 0.0) {
    return -PI / 2.0;
  }
  return 0.0;
}

num sqrtApprox(num x) {
  num guess = x;
  int i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

num rad(num x) {
  return x * PI / 180.0;
}

num deg(num x) {
  return x * 180.0 / PI;
}

num distance(num lat1, num lon1, num lat2, num lon2) {
  num phi1 = rad(lat1);
  num phi2 = rad(lat2);
  num dphi = rad(lat2 - lat1);
  num dlambda = rad(lon2 - lon1);
  num sdphi = sinApprox(dphi / 2);
  num sdlambda = sinApprox(dlambda / 2);
  num a = sdphi * sdphi + cosApprox(phi1) * cosApprox(phi2) * sdlambda * sdlambda;
  num c = 2 * atan2Approx(sqrtApprox(a), sqrtApprox(1 - a));
  return 6371.0 / 1.852 * c;
}

num bearing(num lat1, num lon1, num lat2, num lon2) {
  num phi1 = rad(lat1);
  num phi2 = rad(lat2);
  num dl = rad(lon2 - lon1);
  num y = sinApprox(dl) * cosApprox(phi2);
  num x = cosApprox(phi1) * sinApprox(phi2) - sinApprox(phi1) * cosApprox(phi2) * cosApprox(dl);
  num br = deg(atan2Approx(y, x));
  if (br < 0) {
    br = br + 360;
  }
  return br;
}

List<Airport> airports = [Airport(name: "Koksijde Air Base", country: "Belgium", icao: "EBFN", lat: 51.090301513671875, lon: 2.652780055999756), Airport(name: "Ostend-Bruges International Airport", country: "Belgium", icao: "EBOS", lat: 51.198898315399994, lon: 2.8622200489), Airport(name: "Kent International Airport", country: "United Kingdom", icao: "EGMH", lat: 51.342201, lon: 1.34611), Airport(name: "Calais-Dunkerque Airport", country: "France", icao: "LFAC", lat: 50.962100982666016, lon: 1.954759955406189), Airport(name: "Westkapelle heliport", country: "Belgium", icao: "EBKW", lat: 51.32222366333, lon: 3.2930560112), Airport(name: "Lympne Airport", country: "United Kingdom", icao: "EGMK", lat: 51.08, lon: 1.013), Airport(name: "Ursel Air Base", country: "Belgium", icao: "EBUL", lat: 51.14419937133789, lon: 3.475559949874878), Airport(name: "Southend Airport", country: "United Kingdom", icao: "EGMC", lat: 51.5713996887207, lon: 0.6955559849739075), Airport(name: "Merville-Calonne Airport", country: "France", icao: "LFQT", lat: 50.61840057373047, lon: 2.642240047454834), Airport(name: "Wevelgem Airport", country: "Belgium", icao: "EBKT", lat: 50.817199707, lon: 3.20472002029), Airport(name: "Midden-Zeeland Airport", country: "Netherlands", icao: "EHMZ", lat: 51.5121994019, lon: 3.73111009598), Airport(name: "Lydd Airport", country: "United Kingdom", icao: "EGMD", lat: 50.95610046386719, lon: 0.9391670227050781), Airport(name: "RAF Wattisham", country: "United Kingdom", icao: "EGUW", lat: 52.1273002625, lon: 0.956264019012), Airport(name: "Beccles Airport", country: "United Kingdom", icao: "EGSM", lat: 52.435298919699996, lon: 1.6183300018300002), Airport(name: "Lille/Marcq-en-Baroeul Airport", country: "France", icao: "LFQO", lat: 50.687198638916016, lon: 3.0755600929260254), Airport(name: "Lashenden (Headcorn) Airfield", country: "United Kingdom", icao: "EGKH", lat: 51.156898, lon: 0.641667), Airport(name: "Le Touquet-CÃ´te d'Opale Airport", country: "France", icao: "LFAT", lat: 50.517398834228516, lon: 1.6205899715423584), Airport(name: "Rochester Airport", country: "United Kingdom", icao: "EGTO", lat: 51.351898193359375, lon: 0.5033329725265503), Airport(name: "Lille-Lesquin Airport", country: "France", icao: "LFQQ", lat: 50.563332, lon: 3.086886), Airport(name: "Thurrock Airfield", country: "United Kingdom", icao: "EGMT", lat: 51.537505, lon: 0.367634)];
num floor(num x) {
  int i = (x).toInt();
  if (((i).toDouble()) > x) {
    i = i - 1;
  }
  return (i).toDouble();
}

num pow10(int n) {
  num p = 1.0;
  int i = 0;
  while (i < n) {
    p = p * 10.0;
    i = i + 1;
  }
  return p;
}

num round(num x, int n) {
  num m = pow10(n);
  return floor(x * m + 0.5) / m;
}

List<List<dynamic>> sortByDistance(List<List<dynamic>> xs) {
  List<List<dynamic>> arr = xs;
  int i = 1;
  while (i < arr.length) {
    int j = i;
    while (j > 0 && arr[j - 1][0].toString().compareTo(arr[j][0].toString()) > 0) {
    List<dynamic> tmp = arr[j - 1];
    arr[j - 1] = arr[j];
    arr[j] = tmp;
    j = j - 1;
  }
    i = i + 1;
  }
  return arr;
}

void _main() {
  num planeLat = 51.514669;
  num planeLon = 2.198581;
  List<List<dynamic>> results = <List<dynamic>>[];
  for (Airport ap in airports) {
    num d = distance(planeLat, planeLon, ap.lat, ap.lon);
    num b = bearing(planeLat, planeLon, ap.lat, ap.lon);
    results = [...results, [d, b, ap]];
  }
  results = sortByDistance(results);
  print("Distance Bearing ICAO Country               Airport");
  print("--------------------------------------------------------------");
  int i = 0;
  while (i < results.length) {
    List<dynamic> r = results[i];
    var ap = r[2];
    var dist = r[0];
    var bear = r[1];
    String line = (round(dist, 1)).toString() + "	" + (round(bear, 0)).toString() + "	" + ap.icao + "	" + ap.country + " " + ap.name;
    print(line);
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
