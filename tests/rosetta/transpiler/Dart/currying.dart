// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Foo {
  int value;
  Foo({required this.value});
}

int Foo_Method(Foo self, int b) {
  return self.value + b;
}

num pow(num base, num exp) {
  num result = 1.0;
  int i = 0;
  while (i < ((exp).toInt())) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

dynamic PowN(num b) {
  return ((e) => pow(b, e));
}

dynamic PowE(num e) {
  return ((b) => pow(b, e));
}

void _main() {
  var pow2 = PowN(2.0);
  var cube = PowE(3.0);
  print("2^8 = " + (pow2(8.0)).toString());
  print("4Â³ = " + (cube(4.0)).toString());
  Foo a = Foo(value: 2);
  var fn1 = ((b) => Foo_Method(a, b));
  var fn2 = ((f, b) => f.Method(b));
  print("2 + 2 = " + (Foo_Method(a, 2)).toString());
  print("2 + 3 = " + (fn1(3)).toString());
  print("2 + 4 = " + (fn2(a, 4)).toString());
  print("3 + 5 = " + (fn2(Foo(value: 3), 5)).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
