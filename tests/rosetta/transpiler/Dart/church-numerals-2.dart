// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

dynamic id(dynamic x) {
  return x;
}

dynamic compose(dynamic f, dynamic g) {
  return ((x) => f(g(x)));
}

dynamic zero() {
  return ((f) => id);
}

dynamic one() {
  return id;
}

dynamic succ(dynamic n) {
  return ((f) => compose(f, n(f)));
}

dynamic plus(dynamic m, dynamic n) {
  return ((f) => compose(m(f), n(f)));
}

dynamic mult(dynamic m, dynamic n) {
  return compose(m, n);
}

dynamic exp(dynamic m, dynamic n) {
  return n(m);
}

int toInt(dynamic x) {
  int counter = 0;
  dynamic fCounter(dynamic f) {
  counter = counter + 1;
  return f;
}
  x(fCounter)(id);
  return counter;
}

String toStr(dynamic x) {
  String s = "";
  dynamic fCounter(dynamic f) {
  s = s + "|";
  return f;
}
  x(fCounter)(id);
  return s;
}

void _main() {
  print("zero = " + (toInt(zero())).toString());
  var onev = one();
  print("one = " + (toInt(onev)).toString());
  var two = succ(succ(zero()));
  print("two = " + (toInt(two)).toString());
  var three = plus(onev, two);
  print("three = " + (toInt(three)).toString());
  var four = mult(two, two);
  print("four = " + (toInt(four)).toString());
  var eight = exp(two, three);
  print("eight = " + (toInt(eight)).toString());
  print("toStr(four) = " + toStr(four));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
