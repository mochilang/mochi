// Generated by Mochi transpiler
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

class S1 {
  final List<dynamic> board;
  final bool full;
  const S1({required this.board, required this.full});
}

class S2 {
  final List<dynamic> row;
  final int gain;
  const S2({required this.row, required this.gain});
}

class S3 {
  final List<dynamic> board;
  final int score;
  final bool moved;
  const S3({required this.board, required this.score, required this.moved});
}

final int SIZE = 4;
List<dynamic> newBoard() {
  List<dynamic> b = [];
  int y = 0;
  while (y < SIZE) {
    List<dynamic> row = [];
    int x = 0;
    while (x < SIZE) {
    row = [...row, 0];
    x = x + 1;
  }
    b = [...b, row];
    y = y + 1;
  }
  return b;
}

S1 spawnTile(b) {
  List<dynamic> empty = [];
  int y = 0;
  while (y < SIZE) {
    int x = 0;
    while (x < SIZE) {
    if (b[y]![x] == 0) {
    empty = [...empty, [x, y]];
  }
    x = x + 1;
  }
    y = y + 1;
  }
  if (empty.length == 0) {
    return S1(board: b, full: true);
  }
  int idx = _now() % empty.length;
  final cell = empty[idx];
  int val = 4;
  if (_now() % 10 < 9) {
    val = 2;
  }
  b[cell[1]]![cell[0]] = val;
  return S1(board: b, full: empty.length == 1);
}

String pad(n) {
  String s = (n).toString();
  int pad = 4 - s.length;
  int i = 0;
  String out = "";
  while (i < pad) {
    out = out + " ";
    i = i + 1;
  }
  return out + s;
}

void draw(b, score) {
  print("Score: " + (score).toString());
  int y = 0;
  while (y < SIZE) {
    print("+----+----+----+----+");
    String line = "|";
    int x = 0;
    while (x < SIZE) {
    var v = b[y]![x];
    if (v == 0) {
    line = line + "    |";
  } else {
    line = line + pad(v) + "|";
  }
    x = x + 1;
  }
    print(line);
    y = y + 1;
  }
  print("+----+----+----+----+");
  print("W=Up S=Down A=Left D=Right Q=Quit");
}

String reverseRow(r) {
  List<dynamic> out = [];
  int i = r.length - 1;
  while (i >= 0) {
    out = [...out, r[i]];
    i = i - 1;
  }
  return out;
}

S2 slideLeft(row) {
  List<dynamic> xs = [];
  int i = 0;
  while (i < row.length) {
    if (row[i] != 0) {
    xs = [...xs, row[i]];
  }
    i = i + 1;
  }
  List<dynamic> res = [];
  int gain = 0;
  i = 0;
  while (i < xs.length) {
    if (i + 1 < xs.length && xs[i] == xs[i + 1]) {
    final num v = xs[i] * 2;
    gain = gain + v;
    res = [...res, v];
    i = i + 2;
  } else {
    res = [...res, xs[i]];
    i = i + 1;
  }
  }
  while (res.length < SIZE) {
    res = [...res, 0];
  }
  return S2(row: res, gain: gain);
}

S3 moveLeft(b, score) {
  bool moved = false;
  int y = 0;
  while (y < SIZE) {
    final S2 r = slideLeft(b[y]);
    final _new = r.row;
    score = score + r.gain;
    int x = 0;
    while (x < SIZE) {
    if (b[y]![x] != _new[x]) {
    moved = true;
  }
    b[y]![x] = _new[x];
    x = x + 1;
  }
    y = y + 1;
  }
  return S3(board: b, score: score, moved: moved);
}

S3 moveRight(b, score) {
  bool moved = false;
  int y = 0;
  while (y < SIZE) {
    List<dynamic> rev = reverseRow(b[y]);
    final S2 r = slideLeft(rev);
    rev = r.row;
    score = score + r.gain;
    rev = reverseRow(rev);
    int x = 0;
    while (x < SIZE) {
    if (b[y]![x] != rev[x]) {
    moved = true;
  }
    b[y]![x] = rev[x];
    x = x + 1;
  }
    y = y + 1;
  }
  return S3(board: b, score: score, moved: moved);
}

List<dynamic> getCol(b, x) {
  List<dynamic> col = [];
  int y = 0;
  while (y < SIZE) {
    col = [...col, b[y]![x]];
    y = y + 1;
  }
  return col;
}

void setCol(b, x, col) {
  int y = 0;
  while (y < SIZE) {
    b[y]![x] = col[y];
    y = y + 1;
  }
}

S3 moveUp(b, score) {
  bool moved = false;
  int x = 0;
  while (x < SIZE) {
    List<dynamic> col = getCol(b, x);
    final S2 r = slideLeft(col);
    final _new = r.row;
    score = score + r.gain;
    int y = 0;
    while (y < SIZE) {
    if (b[y]![x] != _new[y]) {
    moved = true;
  }
    b[y]![x] = _new[y];
    y = y + 1;
  }
    x = x + 1;
  }
  return S3(board: b, score: score, moved: moved);
}

S3 moveDown(b, score) {
  bool moved = false;
  int x = 0;
  while (x < SIZE) {
    List<dynamic> col = reverseRow(getCol(b, x));
    final S2 r = slideLeft(col);
    col = r.row;
    score = score + r.gain;
    col = reverseRow(col);
    int y = 0;
    while (y < SIZE) {
    if (b[y]![x] != col[y]) {
    moved = true;
  }
    b[y]![x] = col[y];
    y = y + 1;
  }
    x = x + 1;
  }
  return S3(board: b, score: score, moved: moved);
}

bool hasMoves(b) {
  int y = 0;
  while (y < SIZE) {
    int x = 0;
    while (x < SIZE) {
    if (b[y]![x] == 0) {
    return true;
  }
    if (x + 1 < SIZE && b[y]![x] == b[y]![x + 1]) {
    return true;
  }
    if (y + 1 < SIZE && b[y]![x] == b[y + 1]![x]) {
    return true;
  }
    x = x + 1;
  }
    y = y + 1;
  }
  return false;
}

bool has2048(b) {
  int y = 0;
  while (y < SIZE) {
    int x = 0;
    while (x < SIZE) {
    if (b[y]![x] >= 2048) {
    return true;
  }
    x = x + 1;
  }
    y = y + 1;
  }
  return false;
}

List<dynamic> board = newBoard();
S1 r = spawnTile(board);
var full = r.full;
int score = 0;
void main() {
  _initNow();
  board = r.board;
  r = spawnTile(board);
  board = r.board;
  full = r.full;
  draw(board, score);
  while (true) {
    print("Move: ");
    final String cmd = stdin.readLineSync() ?? '';
    bool moved = false;
    if (cmd == "a" || cmd == "A") {
    final S3 m = moveLeft(board, score);
    board = m.board;
    score = m.score;
    moved = m.moved;
  }
    if (cmd == "d" || cmd == "D") {
    final S3 m = moveRight(board, score);
    board = m.board;
    score = m.score;
    moved = m.moved;
  }
    if (cmd == "w" || cmd == "W") {
    final S3 m = moveUp(board, score);
    board = m.board;
    score = m.score;
    moved = m.moved;
  }
    if (cmd == "s" || cmd == "S") {
    final S3 m = moveDown(board, score);
    board = m.board;
    score = m.score;
    moved = m.moved;
  }
    if (cmd == "q" || cmd == "Q") {
    break;
  }
    if (moved) {
    final S1 r2 = spawnTile(board);
    board = r2.board;
    full = r2.full;
    if (full && !hasMoves(board)) {
    draw(board, score);
    print("Game Over");
    break;
  };
  }
    draw(board, score);
    if (has2048(board)) {
    print("You win!");
    break;
  }
    if (!hasMoves(board)) {
    print("Game Over");
    break;
  }
  }
}
