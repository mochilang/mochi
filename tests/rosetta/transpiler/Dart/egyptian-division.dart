// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class DivResult {
  int q;
  int r;
  DivResult({required this.q, required this.r});
}

DivResult egyptianDivide(int dividend, int divisor) {
  if (dividend < 0 || divisor <= 0) {
    throw Exception("Invalid argument(s)");
  }
  if (dividend < divisor) {
    return DivResult(q: 0, r: dividend);
  }
  List<int> powers = [1];
  List<int> doublings = [divisor];
  int doubling = divisor * 2;
  while (doubling <= dividend) {
    powers = [...powers, powers[powers.length - 1] * 2];
    doublings = [...doublings, doubling];
    doubling = doubling * 2;
  }
  int ans = 0;
  int accum = 0;
  int i = doublings.length - 1;
  while (i >= 0) {
    if (accum + doublings[i] <= dividend) {
    accum = accum + doublings[i];
    ans = ans + powers[i];
    if (accum == dividend) {
    break;
  };
  }
    i = i - 1;
  }
  return DivResult(q: ans, r: dividend - accum);
}

void _main() {
  int dividend = 580;
  int divisor = 34;
  DivResult res = egyptianDivide(dividend, divisor);
  print((dividend).toString() + " divided by " + (divisor).toString() + " is " + (res.q).toString() + " with remainder " + (res.r).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
