// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

bool leapYear(int y) {
  return y % 4 == 0 && y % 100 != 0 || y % 400 == 0;
}

int monthDays(int y, int m) {
  List<int> days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  if (m == 2 && leapYear(y)) {
    return 29;
  }
  return days[m];
}

int zeller(int y, int m, int d) {
  int mm = m;
  int yy = y;
  if (mm < 3) {
    mm = mm + 12;
    yy = yy - 1;
  }
  int K = yy % 100;
  int J = yy ~/ 100;
  int h = (d + 13 * (mm + 1) ~/ 5 + K + K ~/ 4 + J ~/ 4 + 5 * J) % 7;
  return (h + 6) % 7;
}

int lastSunday(int y, int m) {
  int day = monthDays(y, m);
  while (day > 0 && zeller(y, m, day) != 0) {
    day = day - 1;
  }
  return day;
}

String monthName(int m) {
  List<String> names = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  return names[m];
}

void _main() {
  int year = int.parse(stdin.readLineSync() ?? '');
  print("Last Sundays of each month of " + (year).toString());
  print("==================================");
  int m = 1;
  while (m <= 12) {
    int day = lastSunday(year, m);
    print(monthName(m) + ": " + (day).toString());
    m = m + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
