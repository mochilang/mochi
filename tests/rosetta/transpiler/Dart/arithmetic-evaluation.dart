// Generated by Mochi transpiler
class Parser {
  String expr;
  int pos;
  Parser({required this.expr, required this.pos});
}

class Res {
  int v;
  Parser p;
  Res({required this.v, required this.p});
}

Parser skipWS(Parser p) {
  int i = p.pos;
  while (i < p.expr.length && p.expr.substring(i, i + 1) == " ") {
    i = i + 1;
  }
  p.pos = i;
  return p;
}

int parseIntStr(String str) {
  int i = 0;
  int n = 0;
  while (i < str.length) {
    n = n * 10 + ((str.substring(i, i + 1)).codeUnitAt(0)) - 48;
    i = i + 1;
  }
  return n;
}

Res parseNumber(Parser p) {
  p = skipWS(p);
  int start = p.pos;
  while (p.pos < p.expr.length) {
    final String ch = p.expr.substring(p.pos, p.pos + 1);
    if (ch.compareTo("0") >= 0 && ch.compareTo("9") <= 0) {
    p.pos = p.pos + 1;
  } else {
    break;
  }
  }
  final String token = p.expr.substring(start, p.pos);
  return Res(v: parseIntStr(token), p: p);
}

Res parseFactor(Parser p) {
  p = skipWS(p);
  if (p.pos < p.expr.length && p.expr.substring(p.pos, p.pos + 1) == "(") {
    p.pos = p.pos + 1;
    Res r = parseExpr(p);
    int v = r.v;
    p = r.p;
    p = skipWS(p);
    if (p.pos < p.expr.length && p.expr.substring(p.pos, p.pos + 1) == ")") {
    p.pos = p.pos + 1;
  };
    return Res(v: v, p: p);
  }
  if (p.pos < p.expr.length && p.expr.substring(p.pos, p.pos + 1) == "-") {
    p.pos = p.pos + 1;
    Res r = parseFactor(p);
    int v = r.v;
    p = r.p;
    return Res(v: -v, p: p);
  }
  return parseNumber(p);
}

int powInt(int base, int exp) {
  int r = 1;
  int b = base;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    r = r * b;
  }
    b = b * b;
    e = e ~/ (2 as int);
  }
  return r;
}

Res parsePower(Parser p) {
  Res r = parseFactor(p);
  int v = r.v;
  p = r.p;
  while (true) {
    p = skipWS(p);
    if (p.pos < p.expr.length && p.expr.substring(p.pos, p.pos + 1) == "^") {
    p.pos = p.pos + 1;
    Res r2 = parseFactor(p);
    int rhs = r2.v;
    p = r2.p;
    v = powInt(v, rhs);
  } else {
    break;
  }
  }
  return Res(v: v, p: p);
}

Res parseTerm(Parser p) {
  Res r = parsePower(p);
  int v = r.v;
  p = r.p;
  while (true) {
    p = skipWS(p);
    if (p.pos < p.expr.length) {
    final String op = p.expr.substring(p.pos, p.pos + 1);
    if (op == "*") {
    p.pos = p.pos + 1;
    Res r2 = parsePower(p);
    int rhs = r2.v;
    p = r2.p;
    v = v * rhs;
    continue;
  };
    if (op == "/") {
    p.pos = p.pos + 1;
    Res r2 = parsePower(p);
    int rhs = r2.v;
    p = r2.p;
    v = v ~/ (rhs as int);
    continue;
  };
  }
    break;
  }
  return Res(v: v, p: p);
}

Res parseExpr(Parser p) {
  Res r = parseTerm(p);
  int v = r.v;
  p = r.p;
  while (true) {
    p = skipWS(p);
    if (p.pos < p.expr.length) {
    final String op = p.expr.substring(p.pos, p.pos + 1);
    if (op == "+") {
    p.pos = p.pos + 1;
    Res r2 = parseTerm(p);
    int rhs = r2.v;
    p = r2.p;
    v = v + rhs;
    continue;
  };
    if (op == "-") {
    p.pos = p.pos + 1;
    Res r2 = parseTerm(p);
    int rhs = r2.v;
    p = r2.p;
    v = v - rhs;
    continue;
  };
  }
    break;
  }
  return Res(v: v, p: p);
}

int evalExpr(String expr) {
  Parser p = Parser(expr: expr, pos: 0);
  final Res r = parseExpr(p);
  return r.v;
}

void main() {
  final String expr = "2*(3-1)+2*5";
  print(expr + " = " + (evalExpr(expr)).toString());
}

void _start() {
  main();
}
