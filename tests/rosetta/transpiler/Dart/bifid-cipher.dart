// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

Map<String, dynamic> square_to_maps(List<List<String>> square) {
  Map<String, List<int>> emap = {};
  Map<String, String> dmap = {};
  int x = 0;
  while (x < square.length) {
    final List<String> row = square[x];
    int y = 0;
    while (y < row.length) {
    final String ch = row[y];
    emap[ch] = [x, y];
    dmap[(x).toString() + "," + (y).toString()] = ch;
    y = y + 1;
  }
    x = x + 1;
  }
  return {"e": emap, "d": dmap};
}

String remove_space(String text, Map<String, List<int>> emap) {
  final String s = text.toUpperCase();
  String out = "";
  int i = 0;
  while (i < s.length) {
    final String ch = _substr(s, i, i + 1);
    if (ch != " " && emap.containsKey(ch)) {
    out = out + ch;
  }
    i = i + 1;
  }
  return out;
}

String encrypt(String text, Map<String, List<int>> emap, Map<String, String> dmap) {
  text = remove_space(text, emap);
  List<int> row0 = <int>[];
  List<int> row1 = <int>[];
  int i = 0;
  while (i < text.length) {
    final String ch = _substr(text, i, i + 1);
    final List<int> xy = emap[ch]!;
    row0 = [...row0, xy[0]];
    row1 = [...row1, xy[1]];
    i = i + 1;
  }
  for (var v in row1) {
    row0 = [...row0, v];
  }
  String res = "";
  int j = 0;
  while (j < row0.length) {
    final String key = (row0[j]).toString() + "," + (row0[j + 1]).toString();
    res = res + dmap[key]!;
    j = j + 2;
  }
  return res;
}

String decrypt(String text, Map<String, List<int>> emap, Map<String, String> dmap) {
  text = remove_space(text, emap);
  List<int> coords = <int>[];
  int i = 0;
  while (i < text.length) {
    final String ch = _substr(text, i, i + 1);
    final List<int> xy = emap[ch]!;
    coords = [...coords, xy[0]];
    coords = [...coords, xy[1]];
    i = i + 1;
  }
  int half = coords.length ~/ 2;
  List<int> k1 = <int>[];
  List<int> k2 = <int>[];
  int idx = 0;
  while (idx < half) {
    k1 = [...k1, coords[idx]];
    idx = idx + 1;
  }
  while (idx < coords.length) {
    k2 = [...k2, coords[idx]];
    idx = idx + 1;
  }
  String res = "";
  int j = 0;
  while (j < half) {
    final String key = (k1[j]).toString() + "," + (k2[j]).toString();
    res = res + dmap[key]!;
    j = j + 1;
  }
  return res;
}

void main() {
  final List<List<String>> squareRosetta = [["A", "B", "C", "D", "E"], ["F", "G", "H", "I", "K"], ["L", "M", "N", "O", "P"], ["Q", "R", "S", "T", "U"], ["V", "W", "X", "Y", "Z"], ["J", "1", "2", "3", "4"]];
  final List<List<String>> squareWikipedia = [["B", "G", "W", "K", "Z"], ["Q", "P", "N", "D", "S"], ["I", "O", "A", "X", "E"], ["F", "C", "L", "U", "M"], ["T", "H", "Y", "V", "R"], ["J", "1", "2", "3", "4"]];
  final String textRosetta = "0ATTACKATDAWN";
  final String textWikipedia = "FLEEATONCE";
  final String textTest = "The invasion will start on the first of January";
  Map<String, dynamic> maps = square_to_maps(squareRosetta);
  var emap = maps["e"]!;
  var dmap = maps["d"]!;
  print("from Rosettacode");
  print("original:	 " + textRosetta);
  String s = encrypt(textRosetta, emap, dmap);
  print("codiert:	 " + s);
  s = decrypt(s, emap, dmap);
  print("and back:	 " + s);
  maps = square_to_maps(squareWikipedia);
  emap = maps["e"]!;
  dmap = maps["d"]!;
  print("from Wikipedia");
  print("original:	 " + textWikipedia);
  s = encrypt(textWikipedia, emap, dmap);
  print("codiert:	 " + s);
  s = decrypt(s, emap, dmap);
  print("and back:	 " + s);
  maps = square_to_maps(squareWikipedia);
  emap = maps["e"]!;
  dmap = maps["d"]!;
  print("from Rosettacode long part");
  print("original:	 " + textTest);
  s = encrypt(textTest, emap, dmap);
  print("codiert:	 " + s);
  s = decrypt(s, emap, dmap);
  print("and back:	 " + s);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}
