// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Frac {
  int num;
  int den;
  Frac({required this.num, required this.den});
}

String fracStr(Frac f) {
  return (f.num).toString() + "/" + (f.den).toString();
}

List<Frac> gen(Frac l, Frac r, int n, List<Frac> acc) {
  Frac m = Frac(num: l.num + r.num, den: l.den + r.den);
  if (m.den <= n) {
    acc = gen(l, m, n, acc);
    acc = [...acc, m];
    acc = gen(m, r, n, acc);
  }
  return acc;
}

int totient(int n) {
  int tot = n;
  int nn = n;
  int p = 2;
  while (p * p <= nn) {
    if (nn % p == 0) {
    while (nn % p == 0) {
    nn = nn ~/ p;
  };
    tot = tot - tot ~/ p;
  }
    if (p == 2) {
    p = 1;
  }
    p = p + 2;
  }
  if (nn > 1) {
    tot = tot - tot ~/ nn;
  }
  return tot;
}

void _main() {
  int n = 1;
  while (n <= 11) {
    Frac l = Frac(num: 0, den: 1);
    Frac r = Frac(num: 1, den: 1);
    List<Frac> seq = gen(l, r, n, <Frac>[]);
    String line = "F(" + (n).toString() + "): " + fracStr(l);
    for (var f in seq) {
    line = line + " " + fracStr(f);
  }
    line = line + " " + fracStr(r);
    print(line);
    n = n + 1;
  }
  int sum = 1;
  int i = 1;
  int next = 100;
  while (i <= 1000) {
    sum = sum + totient(i);
    if (i == next) {
    print("|F(" + (i).toString() + ")|: " + (sum).toString());
    next = next + 100;
  }
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
