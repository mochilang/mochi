// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  BigInt pow_big(BigInt base, int exp) {
  BigInt result = BigInt.from(1);
  BigInt b = base;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b;
  }
    b = b * b;
    e = e ~/ 2 as int;
  }
  return result;
}
  int bit_len(BigInt x) {
  BigInt n = x;
  int c = 0;
  while (n > BigInt.from(0)) {
    n = n ~/ BigInt.from(2);
    c = c + 1;
  }
  return c;
}
  String err = "";
  BigInt ackermann2(BigInt m, BigInt n) {
  if (err != "") {
    return BigInt.from(0);
  }
  if (m <= BigInt.from(3)) {
    final int mi = (m).toInt();
    if (mi == 0) {
    return n + BigInt.from(1);
  };
    if (mi == 1) {
    return n + BigInt.from(2);
  };
    if (mi == 2) {
    return BigInt.from(2) * n + BigInt.from(3);
  };
    if (mi == 3) {
    final int nb = bit_len(n);
    if (nb > 64) {
    err = "A(m,n) had n of " + (nb).toString() + " bits; too large";
    return BigInt.from(0);
  };
    final BigInt r = pow_big(BigInt.from(2), (n).toInt());
    return BigInt.from(8) * r - BigInt.from(3);
  };
  }
  if (bit_len(n) == 0) {
    return ackermann2(m - (BigInt.from(1)), BigInt.from(1));
  }
  return ackermann2(m - (BigInt.from(1)), ackermann2(m, n - (BigInt.from(1))));
}
  void show(int m, int n) {
  err = "";
  final BigInt res = ackermann2(BigInt.from(m), BigInt.from(n));
  if (err != "") {
    print("A(" + (m).toString() + ", " + (n).toString() + ") = Error: " + err);
    return;
  }
  if (bit_len(res) <= 256) {
    print("A(" + (m).toString() + ", " + (n).toString() + ") = " + (res).toString());
  } else {
    final String s = (res).toString();
    final String pre = s.substring(0, 20);
    final String suf = s.substring(s.length - 20, s.length);
    print("A(" + (m).toString() + ", " + (n).toString() + ") = " + (s.length).toString() + " digits starting/ending with: " + pre + "..." + suf);
  }
}
  void main() {
  show(0, 0);
  show(1, 2);
  show(2, 4);
  show(3, 100);
  show(3, 1000000);
  show(4, 1);
  show(4, 2);
  show(4, 3);
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
