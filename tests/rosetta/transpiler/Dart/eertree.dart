// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int EVEN_ROOT = 0;
int ODD_ROOT = 1;
Map<String, dynamic> newNode(int len) {
  return {"length": len, "edges": {}, "suffix": 0};
}

List<Map<String, dynamic>> eertree(String s) {
  List<Map<String, dynamic>> tree = <Map<String, dynamic>>[];
  tree = [...tree, {"length": 0, "suffix": ODD_ROOT, "edges": {}}];
  tree = [...tree, {"length": -1, "suffix": ODD_ROOT, "edges": {}}];
  int suffix = ODD_ROOT;
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    int n = suffix;
    int k = 0;
    while (true) {
    k = tree[n]["length"]! as int;
    int b = i - k - 1;
    if (b >= 0 && _substr(s, b, b + 1) == c) {
    break;
  }
    n = tree[n]["suffix"]! as int;
  }
    Map<String, int> edges = tree[n]["edges"]! as Map<String, int>;
    if (edges.containsKey(c)) {
    suffix = edges[c]!;
    i = i + 1;
    continue;
  }
    suffix = tree.length;
    tree = [...tree, newNode(k + 2)];
    edges[c] = suffix;
    tree[n]!["edges"] = edges;
    if ((tree[suffix]["length"]! as int) == 1) {
    tree[suffix]!["suffix"] = 0;
    i = i + 1;
    continue;
  }
    while (true) {
    n = tree[n]["suffix"]! as int;
    int b = i - (tree[n]["length"]! as int) - 1;
    if (b >= 0 && _substr(s, b, b + 1) == c) {
    break;
  }
  }
    Map<String, int> en = tree[n]["edges"]! as Map<String, int>;
    tree[suffix]!["suffix"] = en[c]!;
    i = i + 1;
  }
  return tree;
}

List<String> child(List<Map<String, dynamic>> tree, int idx, String p, List<String> acc) {
  Map<String, int> edges = tree[idx]["edges"]! as Map<String, int>;
  for (String ch in edges.keys) {
    int nxt = edges[ch]!;
    String pal = ch + p + ch;
    acc = [...acc, pal];
    acc = child(tree, nxt, pal, acc);
  }
  return acc;
}

List<String> subPalindromes(List<Map<String, dynamic>> tree) {
  List<String> res = <String>[];
  res = child(tree, EVEN_ROOT, "", res);
  Map<String, int> oEdges = tree[ODD_ROOT]["edges"]! as Map<String, int>;
  for (String ch in oEdges.keys) {
    res = [...res, ch];
    res = child(tree, oEdges[ch]!, ch, res);
  }
  return res;
}

void _main() {
  List<Map<String, dynamic>> tree = eertree("eertree");
  List<String> subs = subPalindromes(tree);
  print((subs).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
