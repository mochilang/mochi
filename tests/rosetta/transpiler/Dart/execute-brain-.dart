// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String chr(int n) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  if (n >= 65 && n < 91) {
    return _substr(upper, n - 65, n - 64);
  }
  if (n >= 97 && n < 123) {
    return _substr(lower, n - 97, n - 96);
  }
  if (n == 32) {
    return " ";
  }
  if (n == 33) {
    return "!";
  }
  if (n == 44) {
    return ",";
  }
  if (n == 13) {
    return "";
  }
  if (n == 10) {
    return "\n";
  }
  return "?";
}

String bf(int dLen, String code) {
  List<int> ds = <int>[];
  for (int i = 0; i < dLen; i++) {
    ds = [...ds, 0];
  }
  int dp = 0;
  int ip = 0;
  String out = "";
  while (ip < code.length) {
    String ch = _substr(code, ip, ip + 1);
    if (ch == ">") {
    dp = dp + 1;
  } else {
    if (ch == "<") {
    dp = dp - 1;
  } else {
    if (ch == "+") {
    ds[dp] = ds[dp] + 1;
  } else {
    if (ch == "-") {
    ds[dp] = ds[dp] - 1;
  } else {
    if (ch == ".") {
    out = out + chr(ds[dp]);
  } else {
    if (ch == ",") {
  } else {
    if (ch == "[") {
    if (ds[dp] == 0) {
    int nc = 1;
    while (nc > 0) {
    ip = ip + 1;
    String cc = _substr(code, ip, ip + 1);
    if (cc == "[") {
    nc = nc + 1;
  } else {
    if (cc == "]") {
    nc = nc - 1;
  };
  }
  };
  };
  } else {
    if (ch == "]") {
    if (ds[dp] != 0) {
    int nc = 1;
    while (nc > 0) {
    ip = ip - 1;
    String cc = _substr(code, ip, ip + 1);
    if (cc == "]") {
    nc = nc + 1;
  } else {
    if (cc == "[") {
    nc = nc - 1;
  };
  }
  };
  };
  };
  };
  };
  };
  };
  };
  };
  }
    ip = ip + 1;
  }
  return out;
}

void _main() {
  String prog = "++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++\n" + "++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>\n" + ">+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.\n" + "<+++++++.--------.<<<<<+.<+++.---.";
  String out = bf(10, prog);
  print(out);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
