// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String _repeat(String s, int n) => List.filled(n, s).join();

int pow2(int n) {
  int p = 1;
  int i = 0;
  while (i < n) {
    p = p * 2;
    i = i + 1;
  }
  return p;
}

int btoi(bool b) {
  if (b) {
    return 1;
  }
  return 0;
}

String addNoCells(String cells) {
  String l = "O";
  String r = "O";
  if (_substr(cells, 0, 1) == "O") {
    l = ".";
  }
  if (_substr(cells, cells.length - 1, cells.length) == "O") {
    r = ".";
  }
  cells = l + cells + r;
  cells = l + cells + r;
  return cells;
}

String step(String cells, int ruleVal) {
  String newCells = "";
  int i = 0;
  while (i < cells.length - 2) {
    int bin = 0;
    int b = 2;
    int n = i;
    while (n < i + 3) {
    bin = bin + btoi(_substr(cells, n, n + 1) == "O") * pow2(b);
    b = b - 1;
    n = n + 1;
  }
    String a = ".";
    if (ruleVal ~/ pow2(bin) % 2 == 1) {
    a = "O";
  }
    newCells = newCells + a;
    i = i + 1;
  }
  return newCells;
}

String repeat(String ch, int n) {
  String s = "";
  int i = 0;
  while (i < n) {
    s = s + ch;
    i = i + 1;
  }
  return s;
}

void evolve(int l, int ruleVal) {
  print(" Rule #" + (ruleVal).toString() + ":");
  String cells = "O";
  int x = 0;
  while (x < l) {
    cells = addNoCells(cells);
    int width = 40 + cells.length ~/ 2;
    var spaces = _repeat(" ", width - cells.length);
    print(spaces + cells);
    cells = step(cells, ruleVal);
    x = x + 1;
  }
}

void _main() {
  for (int r in [90, 30]) {
    evolve(25, r);
    print("");
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
