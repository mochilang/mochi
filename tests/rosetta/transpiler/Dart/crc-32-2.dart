// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int xor(int a, int b) {
  int res = 0;
  int bit = 1;
  int x = a;
  int y = b;
  while (x > 0 || y > 0) {
    int abit = x % 2;
    int bbit = y % 2;
    if (abit != bbit) {
    res = res + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
  }
  return res;
}

int rshift(int x, int n) {
  int v = x;
  int i = 0;
  while (i < n) {
    v = v ~/ 2;
    i = i + 1;
  }
  return v;
}

int ord(String ch) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  int idx = upper.indexOf(ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = lower.indexOf(ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  if (ch == " ") {
    return 32;
  }
  return 0;
}

String toHex(int n) {
  String digits = "0123456789ABCDEF";
  if (n == 0) {
    return "0";
  }
  int v = n;
  String out = "";
  while (v > 0) {
    int d = v % 16;
    out = _substr(digits, d, d + 1) + out;
    v = v ~/ 16;
  }
  return out;
}

List<int> crc32Table() {
  List<int> table = <int>[];
  int i = 0;
  while (i < 256) {
    int word = i;
    int j = 0;
    while (j < 8) {
    if (word % 2 == 1) {
    word = xor(rshift(word, 1), 3988292384);
  } else {
    word = rshift(word, 1);
  }
    j = j + 1;
  }
    table = [...table, word];
    i = i + 1;
  }
  return table;
}

List<int> table = crc32Table();
int crc32(String s) {
  int crc = 4294967295;
  int i = 0;
  while (i < s.length) {
    int c = ord(_substr(s, i, i + 1));
    int idx = xor(crc % 256, c);
    crc = xor(table[idx], rshift(crc, 8));
    i = i + 1;
  }
  return 4294967295 - crc;
}

void _main() {
  String s = "The quick brown fox jumps over the lazy dog";
  int result = crc32(s);
  String hex = toHex(result).toLowerCase();
  print(hex);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
