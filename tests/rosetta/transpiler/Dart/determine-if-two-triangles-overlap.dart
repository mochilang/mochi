// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Point {
  num x;
  num y;
  Point({required this.x, required this.y});
}

class Triangle {
  Point p1;
  Point p2;
  Point p3;
  Triangle({required this.p1, required this.p2, required this.p3});
}

String fmt1(num f) {
  String s = (f).toString();
  int idx = s.indexOf(".");
  if (idx < 0) {
    s = s + ".0";
  } else {
    int need = idx + 2;
    if (s.length > need) {
    s = _substr(s, 0, need);
  } else {
    while (s.length < need) {
    s = s + "0";
  };
  };
  }
  return s;
}

String pointStr(Point p) {
  return "(" + fmt1(p.x) + ", " + fmt1(p.y) + ")";
}

String triangleStr(Triangle t) {
  return "Triangle " + pointStr(t.p1) + ", " + pointStr(t.p2) + ", " + pointStr(t.p3);
}

num orient(Point a, Point b, Point c) {
  return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
}

bool pointInTri(Point p, Triangle t, bool onBoundary) {
  num d1 = orient(p, t.p1, t.p2);
  num d2 = orient(p, t.p2, t.p3);
  num d3 = orient(p, t.p3, t.p1);
  bool hasNeg = d1 < 0.0 || d2 < 0.0 || d3 < 0.0;
  bool hasPos = d1 > 0.0 || d2 > 0.0 || d3 > 0.0;
  if (onBoundary) {
    return !(hasNeg && hasPos);
  }
  return !(hasNeg && hasPos) && d1 != 0.0 && d2 != 0.0 && d3 != 0.0;
}

bool edgeCheck(Point a0, Point a1, List<Point> bs, bool onBoundary) {
  num d0 = orient(a0, a1, bs[0]);
  num d1 = orient(a0, a1, bs[1]);
  num d2 = orient(a0, a1, bs[2]);
  if (onBoundary) {
    return d0 <= 0.0 && d1 <= 0.0 && d2 <= 0.0;
  }
  return d0 < 0.0 && d1 < 0.0 && d2 < 0.0;
}

bool triTri2D(Triangle t1, Triangle t2, bool onBoundary) {
  List<Point> a = [t1.p1, t1.p2, t1.p3];
  List<Point> b = [t2.p1, t2.p2, t2.p3];
  int i = 0;
  while (i < 3) {
    int j = (i + 1) % 3;
    if (edgeCheck(a[i], a[j], b, onBoundary)) {
    return false;
  }
    i = i + 1;
  }
  i = 0;
  while (i < 3) {
    int j = (i + 1) % 3;
    if (edgeCheck(b[i], b[j], a, onBoundary)) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

String iff(bool cond, String a, String b) {
  if (cond) {
    return a;
  } else {
    return b;
  }
}

void _main() {
  Triangle t1 = Triangle(p1: Point(x: 0.0, y: 0.0), p2: Point(x: 5.0, y: 0.0), p3: Point(x: 0.0, y: 5.0));
  Triangle t2 = Triangle(p1: Point(x: 0.0, y: 0.0), p2: Point(x: 5.0, y: 0.0), p3: Point(x: 0.0, y: 6.0));
  print(triangleStr(t1) + " and");
  print(triangleStr(t2));
  bool overlapping = triTri2D(t1, t2, true);
  print(iff(overlapping, "overlap", "do not overlap"));
  print("");
  t1 = Triangle(p1: Point(x: 0.0, y: 0.0), p2: Point(x: 0.0, y: 5.0), p3: Point(x: 5.0, y: 0.0));
  t2 = t1;
  print(triangleStr(t1) + " and");
  print(triangleStr(t2));
  overlapping = triTri2D(t1, t2, true);
  print(iff(overlapping, "overlap (reversed)", "do not overlap"));
  print("");
  t1 = Triangle(p1: Point(x: 0.0, y: 0.0), p2: Point(x: 5.0, y: 0.0), p3: Point(x: 0.0, y: 5.0));
  t2 = Triangle(p1: Point(x: -10.0, y: 0.0), p2: Point(x: -5.0, y: 0.0), p3: Point(x: -1.0, y: 6.0));
  print(triangleStr(t1) + " and");
  print(triangleStr(t2));
  overlapping = triTri2D(t1, t2, true);
  print(iff(overlapping, "overlap", "do not overlap"));
  print("");
  t1.p3 = Point(x: 2.5, y: 5.0);
  t2 = Triangle(p1: Point(x: 0.0, y: 4.0), p2: Point(x: 2.5, y: -1.0), p3: Point(x: 5.0, y: 4.0));
  print(triangleStr(t1) + " and");
  print(triangleStr(t2));
  overlapping = triTri2D(t1, t2, true);
  print(iff(overlapping, "overlap", "do not overlap"));
  print("");
  t1 = Triangle(p1: Point(x: 0.0, y: 0.0), p2: Point(x: 1.0, y: 1.0), p3: Point(x: 0.0, y: 2.0));
  t2 = Triangle(p1: Point(x: 2.0, y: 1.0), p2: Point(x: 3.0, y: 0.0), p3: Point(x: 3.0, y: 2.0));
  print(triangleStr(t1) + " and");
  print(triangleStr(t2));
  overlapping = triTri2D(t1, t2, true);
  print(iff(overlapping, "overlap", "do not overlap"));
  print("");
  t2 = Triangle(p1: Point(x: 2.0, y: 1.0), p2: Point(x: 3.0, y: -2.0), p3: Point(x: 3.0, y: 4.0));
  print(triangleStr(t1) + " and");
  print(triangleStr(t2));
  overlapping = triTri2D(t1, t2, true);
  print(iff(overlapping, "overlap", "do not overlap"));
  print("");
  t1 = Triangle(p1: Point(x: 0.0, y: 0.0), p2: Point(x: 1.0, y: 0.0), p3: Point(x: 0.0, y: 1.0));
  t2 = Triangle(p1: Point(x: 1.0, y: 0.0), p2: Point(x: 2.0, y: 0.0), p3: Point(x: 1.0, y: 1.1));
  print(triangleStr(t1) + " and");
  print(triangleStr(t2));
  print("which have only a single corner in contact, if boundary points collide");
  overlapping = triTri2D(t1, t2, true);
  print(iff(overlapping, "overlap", "do not overlap"));
  print("");
  print(triangleStr(t1) + " and");
  print(triangleStr(t2));
  print("which have only a single corner in contact, if boundary points do not collide");
  overlapping = triTri2D(t1, t2, false);
  print(iff(overlapping, "overlap", "do not overlap"));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
