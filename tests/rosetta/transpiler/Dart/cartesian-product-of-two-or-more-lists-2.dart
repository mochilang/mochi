// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String listStr(List<int> xs) {
  String s = "[";
  int i = 0;
  while (i < xs.length) {
    s = s + (xs[i]).toString();
    if (i < xs.length - 1) {
    s = s + " ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

String llStr(List<List<int>> lst) {
  String s = "[";
  int i = 0;
  while (i < lst.length) {
    s = s + listStr(lst[i]);
    if (i < lst.length - 1) {
    s = s + " ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

List<List<int>> cartN(dynamic lists) {
  if (lists == null) {
    return ([] as List).map((e) => List<int>.from(e)).toList();
  }
  List<List<int>> a = (lists as List).map((e) => List<int>.from(e)).toList();
  if (a.length == 0) {
    return ([[]] as List).map((e) => List<int>.from(e)).toList();
  }
  int c = 1;
  for (List<int> xs in a) {
    c = c * xs.length;
  }
  if (c == 0) {
    return ([] as List).map((e) => List<int>.from(e)).toList();
  }
  List<List<int>> res = <List<int>>[];
  List<int> idx = <int>[];
  for (List<int> __ in a) {
    idx = [...idx, 0];
  }
  int n = a.length;
  int count = 0;
  while (count < c) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    row = [...row, a[j][idx[j]]];
    j = j + 1;
  }
    res = [...res, row];
    int k = n - 1;
    while (k >= 0) {
    idx[k] = idx[k] + 1;
    if (idx[k] < a[k].length) {
    break;
  }
    idx[k] = 0;
    k = k - 1;
  }
    count = count + 1;
  }
  return res;
}

void _main() {
  print(llStr(cartN([[1, 2], [3, 4]])));
  print(llStr(cartN([[3, 4], [1, 2]])));
  print(llStr(cartN([[1, 2], []])));
  print(llStr(cartN([[], [1, 2]])));
  print("");
  print("[");
  for (List<int> p in cartN([[1776, 1789], [7, 12], [4, 14, 23], [0, 1]])) {
    print(" " + listStr(p));
  }
  print("]");
  print(llStr(cartN([[1, 2, 3], [30], [500, 100]])));
  print(llStr(cartN([[1, 2, 3], [], [500, 100]])));
  print("");
  print(llStr(cartN(null)));
  print(llStr(cartN([])));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
