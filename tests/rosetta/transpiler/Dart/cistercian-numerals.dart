// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<List<String>> n = <List<String>>[];
void initN() {
  int i = 0;
  while (i < 15) {
    List<String> row = <String>[];
    int j = 0;
    while (j < 11) {
    row = [...row, " "];
    j = j + 1;
  }
    row[5] = "x";
    n = [...n, row];
    i = i + 1;
  }
}

void horiz(int c1, int c2, int r) {
  int c = c1;
  while (c <= c2) {
    n[r]![c] = "x";
    c = c + 1;
  }
}

void verti(int r1, int r2, int c) {
  int r = r1;
  while (r <= r2) {
    n[r]![c] = "x";
    r = r + 1;
  }
}

void diagd(int c1, int c2, int r) {
  int c = c1;
  while (c <= c2) {
    n[r + c - c1]![c] = "x";
    c = c + 1;
  }
}

void diagu(int c1, int c2, int r) {
  int c = c1;
  while (c <= c2) {
    n[r - c + c1]![c] = "x";
    c = c + 1;
  }
}

Map<int, dynamic> draw = <int, dynamic>{};
void initDraw() {
  draw[1] = (() {
  horiz(6, 10, 0);
});
  draw[2] = (() {
  horiz(6, 10, 4);
});
  draw[3] = (() {
  diagd(6, 10, 0);
});
  draw[4] = (() {
  diagu(6, 10, 4);
});
  draw[5] = (() {
  draw[1]!();
  draw[4]!();
});
  draw[6] = (() {
  verti(0, 4, 10);
});
  draw[7] = (() {
  draw[1]!();
  draw[6]!();
});
  draw[8] = (() {
  draw[2]!();
  draw[6]!();
});
  draw[9] = (() {
  draw[1]!();
  draw[8]!();
});
  draw[10] = (() {
  horiz(0, 4, 0);
});
  draw[20] = (() {
  horiz(0, 4, 4);
});
  draw[30] = (() {
  diagu(0, 4, 4);
});
  draw[40] = (() {
  diagd(0, 4, 0);
});
  draw[50] = (() {
  draw[10]!();
  draw[40]!();
});
  draw[60] = (() {
  verti(0, 4, 0);
});
  draw[70] = (() {
  draw[10]!();
  draw[60]!();
});
  draw[80] = (() {
  draw[20]!();
  draw[60]!();
});
  draw[90] = (() {
  draw[10]!();
  draw[80]!();
});
  draw[100] = (() {
  horiz(6, 10, 14);
});
  draw[200] = (() {
  horiz(6, 10, 10);
});
  draw[300] = (() {
  diagu(6, 10, 14);
});
  draw[400] = (() {
  diagd(6, 10, 10);
});
  draw[500] = (() {
  draw[100]!();
  draw[400]!();
});
  draw[600] = (() {
  verti(10, 14, 10);
});
  draw[700] = (() {
  draw[100]!();
  draw[600]!();
});
  draw[800] = (() {
  draw[200]!();
  draw[600]!();
});
  draw[900] = (() {
  draw[100]!();
  draw[800]!();
});
  draw[1000] = (() {
  horiz(0, 4, 14);
});
  draw[2000] = (() {
  horiz(0, 4, 10);
});
  draw[3000] = (() {
  diagd(0, 4, 10);
});
  draw[4000] = (() {
  diagu(0, 4, 14);
});
  draw[5000] = (() {
  draw[1000]!();
  draw[4000]!();
});
  draw[6000] = (() {
  verti(10, 14, 0);
});
  draw[7000] = (() {
  draw[1000]!();
  draw[6000]!();
});
  draw[8000] = (() {
  draw[2000]!();
  draw[6000]!();
});
  draw[9000] = (() {
  draw[1000]!();
  draw[8000]!();
});
}

void printNumeral() {
  int i = 0;
  while (i < 15) {
    String line = "";
    int j = 0;
    while (j < 11) {
    line = line + n[i][j] + " ";
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
  print("");
}

List<int> numbers = [0, 1, 20, 300, 4000, 5555, 6789, 9999];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  initDraw();
  for (int number in numbers) {
    initN();
    print((number).toString() + ":");
    int _num = number;
    num thousands = _num ~/ 1000;
    _num = _num % 1000;
    num hundreds = _num ~/ 100;
    _num = _num % 100;
    num tens = _num ~/ 10;
    num ones = _num % 10;
    if (thousands > 0) {
    draw[thousands * 1000]!();
  }
    if (hundreds > 0) {
    draw[hundreds * 100]!();
  }
    if (tens > 0) {
    draw[tens * 10]!();
  }
    if (ones > 0) {
    draw[ones]!();
  }
    printNumeral();
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
