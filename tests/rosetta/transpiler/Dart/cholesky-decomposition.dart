// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

num sqrtApprox(num x) {
  num guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

List<List<num>> cholesky(List<List<num>> a) {
  int n = a.length;
  List<List<num>> l = <List<num>>[];
  int i = 0;
  while (i < n) {
    List<num> row = <num>[];
    int j = 0;
    while (j < n) {
    row = [...row, 0.0];
    j = j + 1;
  }
    l = [...l, row];
    i = i + 1;
  }
  i = 0;
  while (i < n) {
    int j = 0;
    while (j <= i) {
    num sum = a[i][j];
    int k = 0;
    while (k < j) {
    sum = sum - l[i][k] * l[j][k];
    k = k + 1;
  }
    if (i == j) {
    l[i]![j] = sqrtApprox(sum);
  } else {
    l[i]![j] = sum / l[j][j];
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return l;
}

void printMat(List<List<num>> m) {
  int i = 0;
  while (i < m.length) {
    String line = "";
    int j = 0;
    while (j < m[i].length) {
    line = line + (m[i][j]).toString();
    if (j < m[i].length - 1) {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

void demo(List<List<num>> a) {
  print("A:");
  printMat(a);
  List<List<num>> l = cholesky(a);
  print("L:");
  printMat(l);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  demo([[25.0, 15.0, -5.0], [15.0, 18.0, 0.0], [-5.0, 0.0, 11.0]]);
  demo([[18.0, 22.0, 54.0, 42.0], [22.0, 70.0, 86.0, 62.0], [54.0, 86.0, 174.0, 134.0], [42.0, 62.0, 134.0, 106.0]]);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
