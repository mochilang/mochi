// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

Map<String, int> newTerm(int a, int b) {
  return {"a": a, "b": b};
}

List<Map<String, int>> cfSqrt2(int nTerms) {
  List<Map<String, int>> f = <Map<String, int>>[];
  int n = 0;
  while (n < nTerms) {
    f = [...f, newTerm(2, 1)];
    n = n + 1;
  }
  if (nTerms > 0) {
    f[0]!["a"] = 1;
  }
  return f;
}

List<Map<String, int>> cfNap(int nTerms) {
  List<Map<String, int>> f = <Map<String, int>>[];
  int n = 0;
  while (n < nTerms) {
    f = [...f, newTerm(n, n - 1)];
    n = n + 1;
  }
  if (nTerms > 0) {
    f[0]!["a"] = 2;
  }
  if (nTerms > 1) {
    f[1]!["b"] = 1;
  }
  return f;
}

List<Map<String, int>> cfPi(int nTerms) {
  List<Map<String, int>> f = <Map<String, int>>[];
  int n = 0;
  while (n < nTerms) {
    int g = 2 * n - 1;
    f = [...f, newTerm(6, g * g)];
    n = n + 1;
  }
  if (nTerms > 0) {
    f[0]!["a"] = 3;
  }
  return f;
}

num real(List<Map<String, int>> f) {
  num r = 0.0;
  int i = f.length - 1;
  while (i > 0) {
    r = ((f[i]["b"] ?? 0) as num) / (((f[i]["a"] ?? 0) as num) + r);
    i = i - 1;
  }
  if (f.length > 0) {
    r = r + ((f[0]["a"] ?? 0) as num);
  }
  return r;
}

void _main() {
  print("sqrt2: " + (real(cfSqrt2(20))).toString());
  print("nap:   " + (real(cfNap(20))).toString());
  print("pi:    " + (real(cfPi(20))).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
