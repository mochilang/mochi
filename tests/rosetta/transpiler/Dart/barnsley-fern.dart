// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

final num xMin = -2.182;
final num xMax = 2.6558;
final num yMin = 0.0;
final num yMax = 9.9983;
final int width = 60;
final int nIter = 10000;
final num dx = xMax - xMin;
final num dy = yMax - yMin;
final int height = (width * dy / dx).toInt();
List<List<String>> grid = <List<String>>[];
int row = 0;
int seed = 1;
List<int> randInt(int s, int n) {
  final int next = (s * 1664525 + 1013904223) % 2147483647;
  return [next, next % n];
}

num x = 0.0;
num y = 0.0;
int ix = (((width).toDouble()) * (x - xMin) / dx).toInt();
int iy = (((height).toDouble()) * (yMax - y) / dy).toInt();
int i = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (row < height) {
    List<String> line = <String>[];
    int col = 0;
    while (col < width) {
    line = [...line, " "];
    col = col + 1;
  }
    grid = [...grid, line];
    row = row + 1;
  }
  if (ix >= 0 && ix < width && iy >= 0 && iy < height) {
    grid[iy]![ix] = "*";
  }
  while (i < nIter) {
    List<int> res = randInt(seed, 100);
    seed = res[0];
    final int r = res[1];
    if (r < 85) {
    final num nx = 0.85 * x + 0.04 * y;
    final num ny = -0.04 * x + 0.85 * y + 1.6;
    x = nx;
    y = ny;
  } else {
    if (r < 92) {
    final num nx = 0.2 * x - 0.26 * y;
    final num ny = 0.23 * x + 0.22 * y + 1.6;
    x = nx;
    y = ny;
  } else {
    if (r < 99) {
    final num nx = -0.15 * x + 0.28 * y;
    final num ny = 0.26 * x + 0.24 * y + 0.44;
    x = nx;
    y = ny;
  } else {
    x = 0.0;
    y = 0.16 * y;
  };
  };
  }
    ix = (((width).toDouble()) * (x - xMin) / dx).toInt();
    iy = (((height).toDouble()) * (yMax - y) / dy).toInt();
    if (ix >= 0 && ix < width && iy >= 0 && iy < height) {
    grid[iy]![ix] = "*";
  }
    i = i + 1;
  }
  row = 0;
  while (row < height) {
    String line = "";
    int col = 0;
    while (col < width) {
    line = line + grid[row][col];
    col = col + 1;
  }
    print(line);
    row = row + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
