// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String commatize(int n) {
  String s = (n).toString();
  int i = s.length - 3;
  while (i >= 1) {
    s = _substr(s, 0, i) + "," + _substr(s, i, s.length);
    i = i - 3;
  }
  return s;
}

List<bool> primeSieve(int n) {
  List<bool> sieve = <bool>[];
  int i = 0;
  while (i <= n) {
    sieve = [...sieve, false];
    i = i + 1;
  }
  sieve[0] = true;
  sieve[1] = true;
  int p = 2;
  while (p * p <= n) {
    if (!sieve[p]) {
    int m = p * p;
    while (m <= n) {
    sieve[m] = true;
    m = m + p;
  };
  }
    p = p + 1;
  }
  return sieve;
}

int search(List<int> xs, int target) {
  int low = 0;
  int high = xs.length;
  while (low < high) {
    int mid = (low + high) ~/ 2;
    if (xs[mid] < target) {
    low = mid + 1;
  } else {
    high = mid;
  }
  }
  return low;
}

void _main() {
  int limit = 45000;
  List<bool> compMap = primeSieve(limit);
  List<int> compSums = <int>[];
  List<int> primeSums = <int>[];
  int csum = 0;
  int psum = 0;
  int i = 2;
  while (i <= limit) {
    if (compMap[i]) {
    csum = csum + i;
    compSums = [...compSums, csum];
  } else {
    psum = psum + i;
    primeSums = [...primeSums, psum];
  }
    i = i + 1;
  }
  print("Sum        | Prime Index | Composite Index");
  print("------------------------------------------");
  int idx = 0;
  while (idx < primeSums.length) {
    int s = primeSums[idx];
    int j = search(compSums, s);
    if (j < compSums.length && compSums[j] == s) {
    String sumStr = commatize(s).toString().padLeft(10, " ");
    String piStr = commatize(idx + 1).toString().padLeft(11, " ");
    String ciStr = commatize(j + 1).toString().padLeft(15, " ");
    print(sumStr + " | " + piStr + " | " + ciStr);
  }
    idx = idx + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
