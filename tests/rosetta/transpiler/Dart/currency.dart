// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int parseIntDigits(String s) {
  int n = 0;
  int i = 0;
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (!digits.containsKey(ch)) {
    return 0;
  }
    n = n * 10 + (digits[ch] ?? 0);
    i = i + 1;
  }
  return n;
}

int parseDC(String s) {
  bool neg = false;
  if (s.length > 0 && _substr(s, 0, 1) == "-") {
    neg = true;
    s = _substr(s, 1, s.length);
  }
  int dollars = 0;
  int cents = 0;
  int i = 0;
  bool seenDot = false;
  int centDigits = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == ".") {
    seenDot = true;
    i = i + 1;
    continue;
  }
    int d = parseIntDigits(ch);
    if (seenDot) {
    if (centDigits < 2) {
    cents = cents * 10 + d;
    centDigits = centDigits + 1;
  };
  } else {
    dollars = dollars * 10 + d;
  }
    i = i + 1;
  }
  if (centDigits == 1) {
    cents = cents * 10;
  }
  int val = dollars * 100 + cents;
  if (neg) {
    val = -val;
  }
  return val;
}

int parseRate(String s) {
  bool neg = false;
  if (s.length > 0 && _substr(s, 0, 1) == "-") {
    neg = true;
    s = _substr(s, 1, s.length);
  }
  int whole = 0;
  int frac = 0;
  int digits = 0;
  bool seenDot = false;
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == ".") {
    seenDot = true;
    i = i + 1;
    continue;
  }
    int d = parseIntDigits(ch);
    if (seenDot) {
    if (digits < 4) {
    frac = frac * 10 + d;
    digits = digits + 1;
  };
  } else {
    whole = whole * 10 + d;
  }
    i = i + 1;
  }
  while (digits < 4) {
    frac = frac * 10;
    digits = digits + 1;
  }
  int val = whole * 10000 + frac;
  if (neg) {
    val = -val;
  }
  return val;
}

String dcString(int dc) {
  int d = dc ~/ 100;
  int n = dc;
  if (n < 0) {
    n = -n;
  }
  int c = n % 100;
  String cstr = (c).toString();
  if (cstr.length == 1) {
    cstr = "0" + cstr;
  }
  return (d).toString() + "." + cstr;
}

int extend(int dc, int n) {
  return dc * n;
}

int tax(int total, int rate) {
  return (total * rate + 5000) ~/ 10000 as int;
}

String padLeft(String s, int n) {
  String out = s;
  while (out.length < n) {
    out = " " + out;
  }
  return out;
}

void _main() {
  int hp = parseDC("5.50");
  int mp = parseDC("2.86");
  int rate = parseRate("0.0765");
  int totalBeforeTax = extend(hp, 4000000000000000) + extend(mp, 2);
  int t = tax(totalBeforeTax, rate);
  int total = totalBeforeTax + t;
  print("Total before tax: " + padLeft(dcString(totalBeforeTax), 22));
  print("             Tax: " + padLeft(dcString(t), 22));
  print("           Total: " + padLeft(dcString(total), 22));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
