// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

void _main() {
  int INF = 1000000000;
  int n = 4;
  List<List<int>> dist = <List<int>>[];
  List<List<int>> next = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    List<int> nrow = <int>[];
    int j = 0;
    while (j < n) {
    if (i == j) {
    row = [...row, 0];
  } else {
    row = [...row, INF];
  }
    nrow = [...nrow, 0 - 1];
    j = j + 1;
  }
    dist = ([...dist, row] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    next = ([...next, nrow] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    i = i + 1;
  }
  dist[0]![2] = -2;
  next[0]![2] = 2;
  dist[2]![3] = 2;
  next[2]![3] = 3;
  dist[3]![1] = -1;
  next[3]![1] = 1;
  dist[1]![0] = 4;
  next[1]![0] = 0;
  dist[1]![2] = 3;
  next[1]![2] = 2;
  int k = 0;
  while (k < n) {
    int i = 0;
    while (i < n) {
    int j = 0;
    while (j < n) {
    if (dist[i][k] < INF && dist[k][j] < INF) {
    int alt = dist[i][k] + dist[k][j];
    if (alt < dist[i][j]) {
    dist[i]![j] = alt;
    next[i]![j] = next[i][k];
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
    k = k + 1;
  }
  List<int> path(int u, int v) {
  int ui = u - 1;
  int vi = v - 1;
  if (next[ui][vi] == 0 - 1) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<int> p = [u];
  int cur = ui;
  while (cur != vi) {
    cur = next[cur][vi];
    p = [...p, cur + 1];
  }
  return p;
}
  String pathStr(List<int> p) {
  String s = "";
  bool first = true;
  int idx = 0;
  while (idx < p.length) {
    int x = p[idx];
    if (!first) {
    s = s + " -> ";
  }
    s = s + (x).toString();
    first = false;
    idx = idx + 1;
  }
  return s;
}
  print("pair	dist	path");
  int a = 0;
  while (a < n) {
    int b = 0;
    while (b < n) {
    if (a != b) {
    print((a + 1).toString() + " -> " + (b + 1).toString() + "	" + (dist[a][b]).toString() + "	" + pathStr(path(a + 1, b + 1)));
  }
    b = b + 1;
  }
    a = a + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
