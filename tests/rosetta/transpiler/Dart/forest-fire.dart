// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String _repeat(String s, int n) => List.filled(n, s).join();

int rows = 20;
int cols = 30;
num p = 0.01;
num f = 0.001;
String repeat(String ch, int n) {
  String s = "";
  int i = 0;
  while (i < n) {
    s = s + ch;
    i = i + 1;
  }
  return s;
}

bool chance(num prob) {
  int threshold = (prob * 1000.0).toInt();
  return _now() % 1000 < threshold;
}

List<List<String>> newBoard() {
  List<List<String>> b = <List<String>>[];
  int r = 0;
  while (r < rows) {
    List<String> row = <String>[];
    int c = 0;
    while (c < cols) {
    if (_now() % 2 == 0) {
    row = [...row, "T"];
  } else {
    row = [...row, " "];
  }
    c = c + 1;
  }
    b = ([...b, row] as List).map((e) => List<String>.from(e)).toList();
    r = r + 1;
  }
  return b;
}

List<List<String>> step(List<List<String>> src) {
  List<List<String>> dst = <List<String>>[];
  int r = 0;
  while (r < rows) {
    List<String> row = <String>[];
    int c = 0;
    while (c < cols) {
    String cell = src[r][c];
    String next = cell;
    if (cell == "#") {
    next = " ";
  } else {
    if (cell == "T") {
    bool burning = false;
    int dr = -1;
    while (dr <= 1) {
    int dc = -1;
    while (dc <= 1) {
    if (dr != 0 || dc != 0) {
    int rr = r + dr;
    int cc = c + dc;
    if (rr >= 0 && rr < rows && cc >= 0 && cc < cols) {
    if (src[rr][cc] == "#") {
    burning = true;
  };
  };
  }
    dc = dc + 1;
  }
    dr = dr + 1;
  };
    if (burning || chance(f)) {
    next = "#";
  };
  } else {
    if (chance(p)) {
    next = "T";
  };
  };
  }
    row = [...row, next];
    c = c + 1;
  }
    dst = ([...dst, row] as List).map((e) => List<String>.from(e)).toList();
    r = r + 1;
  }
  return dst;
}

void printBoard(List<List<String>> b) {
  print(_repeat("__", cols) + "\n\n");
  int r = 0;
  while (r < rows) {
    String line = "";
    int c = 0;
    while (c < cols) {
    String cell = b[r][c];
    if (cell == " ") {
    line = line + "  ";
  } else {
    line = line + " " + cell;
  }
    c = c + 1;
  }
    print(line + "\n");
    r = r + 1;
  }
}

List<List<String>> board = newBoard();
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  printBoard(board);
  board = step(board);
  printBoard(board);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
