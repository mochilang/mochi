// Generated by Mochi transpiler
List<List<int>> image() {
  return [[0, 0, 10000], [65535, 65535, 65535], [65535, 65535, 65535]];
}

List<int> histogram(List<List<int>> g, int bins) {
  if (bins <= 0) {
    bins = g[0].length;
  }
  List<int> h = [];
  int i = 0;
  while (i < bins) {
    h = [...h, 0];
    i = i + 1;
  }
  int y = 0;
  while (y < g.length) {
    List<int> row = g[y];
    int x = 0;
    while (x < row.length) {
    int p = row[x];
    int idx = p * (bins - 1) ~/ 65535 as int;
    h[idx] = h[idx] + 1;
    x = x + 1;
  }
    y = y + 1;
  }
  return h;
}

int medianThreshold(List<int> h) {
  int lb = 0;
  int ub = h.length - 1;
  int lSum = 0;
  int uSum = 0;
  while (lb <= ub) {
    if (lSum + h[lb] < uSum + h[ub]) {
    lSum = lSum + h[lb];
    lb = lb + 1;
  } else {
    uSum = uSum + h[ub];
    ub = ub - 1;
  }
  }
  return ub * 65535 ~/ h.length as int;
}

List<List<int>> threshold(List<List<int>> g, int t) {
  List<List<int>> out = [];
  int y = 0;
  while (y < g.length) {
    List<int> row = g[y];
    List<int> newRow = [];
    int x = 0;
    while (x < row.length) {
    if (row[x] < t) {
    newRow = [...newRow, 0];
  } else {
    newRow = [...newRow, 65535];
  }
    x = x + 1;
  }
    out = [...out, newRow];
    y = y + 1;
  }
  return out;
}

void printImage(List<List<int>> g) {
  int y = 0;
  while (y < g.length) {
    List<int> row = g[y];
    String line = "";
    int x = 0;
    while (x < row.length) {
    if (row[x] == 0) {
    line = line + "0";
  } else {
    line = line + "1";
  }
    x = x + 1;
  }
    print(line);
    y = y + 1;
  }
}

void main() {
  final List<List<int>> img = image();
  final List<int> h = histogram(img, 0);
  print("Histogram: " + (h).toString());
  final int t = medianThreshold(h);
  print("Threshold: " + (t).toString());
  final List<List<int>> bw = threshold(img, t);
  printImage(bw);
}

void _start() {
  main();
}
