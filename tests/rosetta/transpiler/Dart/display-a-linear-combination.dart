// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String padRight(String s, int w) {
  String r = s;
  while (r.length < w) {
    r = r + " ";
  }
  return r;
}

String linearCombo(List<int> c) {
  String out = "";
  int i = 0;
  while (i < c.length) {
    int n = c[i];
    if (n != 0) {
    String op = "";
    if (n < 0 && out.length == 0) {
    op = "-";
  } else {
    if (n < 0) {
    op = " - ";
  } else {
    if (n > 0 && out.length == 0) {
    op = "";
  } else {
    op = " + ";
  };
  };
  };
    int av = n;
    if (av < 0) {
    av = -av;
  };
    String coeff = (av).toString() + "*";
    if (av == 1) {
    coeff = "";
  };
    out = out + op + coeff + "e(" + (i + 1).toString() + ")";
  }
    i = i + 1;
  }
  if (out.length == 0) {
    return "0";
  }
  return out;
}

void _main() {
  List<List<int>> combos = [[1, 2, 3], [0, 1, 2, 3], [1, 0, 3, 4], [1, 2, 0], [0, 0, 0], [0], [1, 1, 1], [-1, -1, -1], [-1, -2, 0, -3], [-1]];
  int idx = 0;
  while (idx < combos.length) {
    List<int> c = combos[idx];
    String t = "[";
    int j = 0;
    while (j < c.length) {
    t = t + (c[j]).toString();
    if (j < c.length - 1) {
    t = t + ", ";
  }
    j = j + 1;
  }
    t = t + "]";
    String lc = linearCombo(c);
    print(padRight(t, 15) + "  ->  " + lc);
    idx = idx + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
