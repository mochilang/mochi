// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class V3 {
  num x;
  num y;
  num z;
  V3({required this.x, required this.y, required this.z});
}

num sqrtApprox(num x) {
  if (x <= 0.0) {
    return 0.0;
  }
  num guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

num powf(num base, int exp) {
  num result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

V3 normalize(V3 v) {
  num len = sqrtApprox(v.x * v.x + v.y * v.y + v.z * v.z);
  return V3(x: v.x / len, y: v.y / len, z: v.z / len);
}

num dot(V3 a, V3 b) {
  num d = a.x * b.x + a.y * b.y + a.z * b.z;
  if (d < 0.0) {
    return -d;
  }
  return 0.0;
}

void drawSphere(int r, int k, num ambient, V3 light, String shades) {
  int i = -r;
  while (i <= r) {
    num x = ((i).toDouble()) + 0.5;
    String line = "";
    int j = -(2 * r);
    while (j <= 2 * r) {
    num y = ((j).toDouble()) / 2.0 + 0.5;
    if (x * x + y * y <= ((r).toDouble()) * ((r).toDouble())) {
    num zsq = ((r).toDouble()) * ((r).toDouble()) - x * x - y * y;
    V3 vec = normalize(V3(x: x, y: y, z: sqrtApprox(zsq)));
    num b = powf(dot(light, vec), k) + ambient;
    int intensity = ((1.0 - b) * (((shades.length).toDouble()) - 1.0)).toInt();
    if (intensity < 0) {
    intensity = 0;
  };
    if (intensity >= shades.length) {
    intensity = shades.length - 1;
  };
    line = line + _substr(shades, intensity, intensity + 1);
  } else {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

void _main() {
  String shades = ".:!*oe&#%@";
  V3 light = normalize(V3(x: 30.0, y: 30.0, z: -50.0));
  drawSphere(20, 4, 0.1, light, shades);
  drawSphere(10, 2, 0.4, light, shades);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
