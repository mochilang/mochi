// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> bigTrim(List<int> a) {
  dynamic n = a.length;
  while (n > 1 && a[(n - 1).toInt()] == 0) {
    a = a.sublist(0, n - 1);
    n = n - 1;
  }
  return a;
}

List<int> bigFromInt(int x) {
  if (x == 0) {
    return [0];
  }
  List<int> digits = <int>[];
  dynamic n = x;
  while (n > 0) {
    digits = ([...digits, n % 10] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
    n = n ~/ 10;
  }
  return digits;
}

List<int> bigAdd(List<int> a, List<int> b) {
  List<int> res = <int>[];
  dynamic carry = 0;
  dynamic i = 0;
  while (i < a.length || i < b.length || carry > 0) {
    dynamic av = 0;
    if (i < a.length) {
    av = a[(i).toInt()];
  }
    dynamic bv = 0;
    if (i < b.length) {
    bv = b[(i).toInt()];
  }
    dynamic s = av + bv + carry;
    res = ([...res, s % 10] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
    carry = s ~/ 10;
    i = i + 1;
  }
  return bigTrim(res);
}

List<int> bigSub(List<int> a, List<int> b) {
  List<int> res = <int>[];
  dynamic borrow = 0;
  dynamic i = 0;
  while (i < a.length) {
    dynamic av = a[(i).toInt()];
    dynamic bv = 0;
    if (i < b.length) {
    bv = b[(i).toInt()];
  }
    dynamic diff = av - bv - borrow;
    if (diff < 0) {
    diff = diff + 10;
    borrow = 1;
  } else {
    borrow = 0;
  }
    res = [...res, diff];
    i = i + 1;
  }
  return bigTrim(res);
}

String bigToString(List<int> a) {
  dynamic s = "";
  dynamic i = a.length - 1;
  while (i >= 0) {
    s = s + (a[(i).toInt()]).toString();
    i = i - 1;
  }
  return s;
}

int minInt(int a, int b) {
  if (a < b) {
    return a;
  } else {
    return b;
  }
}

List<List<int>> cumu(int n) {
  List<List<List<int>>> cache = [[bigFromInt(1)]];
  dynamic y = 1;
  while (y <= n) {
    List<List<int>> row = [bigFromInt(0)];
    dynamic x = 1;
    while (x <= y) {
    List<int> val = cache[(y - x).toInt()][minInt(x, (y - x).toInt())];
    row = ([...row, bigAdd(row[row.length - 1], val)] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    x = x + 1;
  }
    cache = ([...cache, row] as List).map((e) => (e as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList()).toList();
    y = y + 1;
  }
  return cache[n];
}

List<String> row(int n) {
  List<List<int>> e = cumu(n);
  List<String> out = <String>[];
  dynamic i = 0;
  while (i < n) {
    List<int> diff = bigSub(e[(i + 1).toInt()], e[(i).toInt()]);
    out = [...out, bigToString(diff)];
    i = i + 1;
  }
  return out;
}

int x = 1;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("rows:");
  while (x < 11) {
    dynamic r = row(x);
    dynamic line = "";
    dynamic i = 0;
    while (i < r.length) {
    line = line + " " + r[(i).toInt()] + " ";
    i = i + 1;
  }
    print(line);
    x = x + 1;
  }
  print("");
  print("sums:");
  for (int _num in [23, 123, 1234]) {
    dynamic r = cumu(_num);
    print((_num).toString() + " " + bigToString(r[r.length - 1]));
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
