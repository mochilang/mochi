// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && _substr(str, 0, 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = (n * 10 + (digits[_substr(str, i, i + 1)] ?? 0)).toInt();
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

void _main() {
  int n = 0;
  while (n < 1 || n > 5) {
    print("How many integer variables do you want to create (max 5) : ");
    String line = stdin.readLineSync() ?? '';
    if (line.length > 0) {
    n = int.parse(line);
  }
  }
  Map<String, int> vars = <String, int>{};
  print("OK, enter the variable names and their values, below\n");
  int i = 1;
  while (i <= n) {
    print("\n  Variable " + (i).toString() + "\n");
    print("    Name  : ");
    String name = stdin.readLineSync() ?? '';
    if (vars.containsKey(name)) {
    print("  Sorry, you've already created a variable of that name, try again");
    continue;
  }
    int value = 0;
    while (true) {
    print("    Value : ");
    String valstr = stdin.readLineSync() ?? '';
    if (valstr.length == 0) {
    print("  Not a valid integer, try again");
    continue;
  }
    bool ok = true;
    int j = 0;
    bool neg = false;
    if (_substr(valstr, 0, 1) == "-") {
    neg = true;
    j = 1;
  }
    while (j < valstr.length) {
    String ch = _substr(valstr, j, j + 1);
    if (ch.compareTo("0") < 0 || ch.compareTo("9") > 0) {
    ok = false;
    break;
  }
    j = j + 1;
  }
    if (!ok) {
    print("  Not a valid integer, try again");
    continue;
  }
    value = int.parse(valstr);
    break;
  }
    vars[name] = value;
    i = i + 1;
  }
  print("\nEnter q to quit");
  while (true) {
    print("\nWhich variable do you want to inspect : ");
    String name = stdin.readLineSync() ?? '';
    if (name.toLowerCase() == "q") {
    return;
  }
    if (vars.containsKey(name)) {
    print("It's value is " + ((vars[name] ?? 0)).toString());
  } else {
    print("Sorry there's no variable of that name, try again");
  }
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
