// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> primeFactors(int n) {
  List<int> factors = <int>[];
  int x = n;
  while (x % 2 == 0) {
    factors = [...factors, 2];
    x = x ~/ 2 as int;
  }
  int p = 3;
  while (p * p <= x) {
    while (x % p == 0) {
    factors = [...factors, p];
    x = x ~/ p as int;
  }
    p = p + 2;
  }
  if (x > 1) {
    factors = [...factors, x];
  }
  return factors;
}

String commatize(int n) {
  String s = (n).toString();
  String out = "";
  int i = s.length - 1;
  int c = 0;
  while (i >= 0) {
    out = _substr(s, i, i + 1) + out;
    c = c + 1;
    if (c % 3 == 0 && i > 0) {
    out = "," + out;
  }
    i = i - 1;
  }
  return out;
}

int indexOf(String s, String sub) {
  int i = 0;
  while (i + sub.length <= s.length) {
    if (_substr(s, i, i + sub.length) == sub) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String pad10(String s) {
  String str = s;
  while (str.length < 10) {
    str = " " + str;
  }
  return str;
}

String trimRightStr(String s) {
  int end = s.length;
  while (end > 0 && _substr(s, end - 1, end) == " ") {
    end = end - 1;
  }
  return _substr(s, 0, end);
}

void _main() {
  List<int> res = <int>[];
  int count = 0;
  int k = 11 * 11;
  while (count < 20) {
    if (k % 3 == 0 || k % 5 == 0 || k % 7 == 0) {
    k = k + 2;
    continue;
  }
    List<int> factors = primeFactors(k);
    if (factors.length > 1) {
    String s = (k).toString();
    bool includesAll = true;
    int prev = -1;
    for (int f in factors) {
    if (f == prev) {
    continue;
  }
    String fs = (f).toString();
    if (s.indexOf(fs) == -1) {
    includesAll = false;
    break;
  }
    prev = f;
  };
    if (includesAll) {
    res = [...res, k];
    count = count + 1;
  };
  }
    k = k + 2;
  }
  String line = "";
  for (int e in res.sublist(0, 10)) {
    line = line + pad10(commatize(e)) + " ";
  }
  print(trimRightStr(line));
  line = "";
  for (int e in res.sublist(10, 20)) {
    line = line + pad10(commatize(e)) + " ";
  }
  print(trimRightStr(line));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
