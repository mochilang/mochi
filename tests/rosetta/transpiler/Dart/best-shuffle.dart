// Generated by Mochi transpiler
int nextRand(int seed) {
  return (seed * 1664525 + 1013904223) % 2147483647;
}

List<dynamic> shuffleChars(String s, int seed) {
  List<String> chars = [];
  int i = 0;
  while (i < s.length) {
    chars = [...chars, s.substring(i, i + 1)];
    i = i + 1;
  }
  int sd = seed;
  int idx = chars.length - 1;
  while (idx > 0) {
    sd = nextRand(sd);
    int j = sd % (idx + 1);
    final String tmp = chars[idx];
    chars[idx] = chars[j];
    chars[j] = tmp;
    idx = idx - 1;
  }
  String res = "";
  i = 0;
  while (i < chars.length) {
    res = res + chars[i];
    i = i + 1;
  }
  return List<dynamic>.from([res, sd]);
}

List<dynamic> bestShuffle(String s, int seed) {
  final List<dynamic> r = shuffleChars(s, seed);
  var t = r[0];
  var sd = r[1];
  List<String> arr = [];
  int i = 0;
  while (i < t.length) {
    arr = [...arr, t.substring(i, i + 1)];
    i = i + 1;
  }
  i = 0;
  while (i < arr.length) {
    int j = 0;
    while (j < arr.length) {
    if (i != j && arr[i] != s.substring(j, j + 1) && arr[j] != s.substring(i, i + 1)) {
    final String tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
    break;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  int count = 0;
  i = 0;
  while (i < arr.length) {
    if (arr[i] == s.substring(i, i + 1)) {
    count = count + 1;
  }
    i = i + 1;
  }
  String out = "";
  i = 0;
  while (i < arr.length) {
    out = out + arr[i];
    i = i + 1;
  }
  return List<dynamic>.from([out, sd, count]);
}

void main() {
  final List<String> ts = ["abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"];
  int seed = 1;
  int i = 0;
  while (i < ts.length) {
    final List<dynamic> r = bestShuffle(ts[i], seed);
    final shuf = r[0];
    seed = r[1];
    final cnt = r[2];
    print(ts[i] + " -> " + shuf + " (" + (cnt).toString() + ")");
    i = i + 1;
  }
}

void _start() {
  main();
}
