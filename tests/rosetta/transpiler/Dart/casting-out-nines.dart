// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int parseIntBase(String s, int base) {
  String digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  int n = 0;
  int i = 0;
  while (i < s.length) {
    int j = 0;
    int v = 0;
    while (j < digits.length) {
    if (_substr(digits, j, j + 1) == _substr(s, i, i + 1)) {
    v = j;
    break;
  }
    j = j + 1;
  }
    n = n * base + v;
    i = i + 1;
  }
  return n;
}

String intToBase(int n, int base) {
  String digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  if (n == 0) {
    return "0";
  }
  String out = "";
  int v = n;
  while (v > 0) {
    int d = v % base;
    out = _substr(digits, d, d + 1) + out;
    v = v ~/ base;
  }
  return out;
}

List<String> subset(int base, String begin, String end) {
  int b = parseIntBase(begin, base);
  int e = parseIntBase(end, base);
  List<String> out = <String>[];
  int k = b;
  while (k <= e) {
    String ks = intToBase(k, base);
    int mod = base - 1;
    int r1 = parseIntBase(ks, base) % mod;
    int r2 = parseIntBase(ks, base) * parseIntBase(ks, base) % mod;
    if (r1 == r2) {
    out = [...out, ks];
  }
    k = k + 1;
  }
  return out;
}

List<Map<String, dynamic>> testCases = [{"base": 10, "begin": "1", "end": "100", "kaprekar": ["1", "9", "45", "55", "99"]}, {"base": 17, "begin": "10", "end": "gg", "kaprekar": ["3d", "d4", "gg"]}];
int idx = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (idx < testCases.length) {
    Map<String, dynamic> tc = testCases[idx];
    print("\nTest case base = " + (tc["base"]!).toString() + ", begin = " + tc["begin"]! + ", end = " + tc["end"]! + ":");
    List<String> s = subset(tc["base"]!, tc["begin"]!, tc["end"]!);
    print("Subset:  " + (s).toString());
    print("Kaprekar:" + (tc["kaprekar"]!).toString());
    int sx = 0;
    bool valid = true;
    int i = 0;
    while (i < tc["kaprekar"]!.length) {
    var k = tc["kaprekar"]![i];
    bool found = false;
    while (sx < s.length) {
    if (s[sx] == k) {
    found = true;
    sx = sx + 1;
    break;
  }
    sx = sx + 1;
  }
    if (!found) {
    print("Fail:" + k + " not in subset");
    valid = false;
    break;
  }
    i = i + 1;
  }
    if (valid) {
    print("Valid subset.");
  }
    idx = idx + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
