// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

num sqrtApprox(num x) {
  if (x <= 0.0) {
    return 0.0;
  }
  dynamic g = x;
  dynamic i = 0;
  while (i < 20) {
    g = (g + x / g) / 2.0;
    i = i + 1;
  }
  return g;
}

num abs(num x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

void _main() {
  dynamic oldPhi = 1.0;
  dynamic phi = 0.0;
  dynamic iters = 0;
  dynamic limit = 0.00001;
  while (true) {
    phi = 1.0 + 1.0 / oldPhi;
    iters = iters + 1;
    if ((phi - oldPhi).abs() <= limit) {
    break;
  }
    oldPhi = phi;
  }
  dynamic actual = (1.0 + sqrtApprox(5.0)) / 2.0;
  print("Final value of phi : " + (phi).toString());
  print("Number of iterations : " + (iters).toString());
  print("Error (approx) : " + (phi - actual).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
