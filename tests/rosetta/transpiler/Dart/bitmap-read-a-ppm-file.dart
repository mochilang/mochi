// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Pixel {
  int R;
  int G;
  int B;
  Pixel({required this.R, required this.G, required this.B});
}

class Bitmap {
  int w;
  int h;
  int max;
  List<List<Pixel>> data;
  Bitmap({required this.w, required this.h, required this.max, required this.data});
}

Bitmap newBitmap(int w, int h, int max) {
  List<List<Pixel>> rows = <List<Pixel>>[];
  int y = 0;
  while (y < h) {
    List<Pixel> row = <Pixel>[];
    int x = 0;
    while (x < w) {
    row = [...row, Pixel(R: 0, G: 0, B: 0)];
    x = x + 1;
  }
    rows = [...rows, row];
    y = y + 1;
  }
  return Bitmap(w: w, h: h, max: max, data: rows);
}

void setPx(Bitmap b, int x, int y, Pixel p) {
  List<List<Pixel>> rows = b.data;
  List<Pixel> row = rows[y];
  row[x] = p;
  rows[y] = row;
  b.data = rows;
}

Pixel getPx(Bitmap b, int x, int y) {
  return b.data[y][x];
}

List<String> splitLines(String s) {
  List<String> out = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    final String ch = _substr(s, i, i + 1);
    if (ch == "\n") {
    out = [...out, cur];
    cur = "";
  } else {
    cur = cur + ch;
  }
    i = i + 1;
  }
  out = [...out, cur];
  return out;
}

List<String> splitWS(String s) {
  List<String> out = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    final String ch = _substr(s, i, i + 1);
    if (ch == " " || ch == "	" || ch == "\r" || ch == "\n") {
    if (cur.length > 0) {
    out = [...out, cur];
    cur = "";
  };
  } else {
    cur = cur + ch;
  }
    i = i + 1;
  }
  if (cur.length > 0) {
    out = [...out, cur];
  }
  return out;
}

int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && _substr(str, 0, 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  final Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = n * 10 + digits[_substr(str, i, i + 1)]!;
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

List<String> tokenize(String s) {
  final List<String> lines = splitLines(s);
  List<String> toks = <String>[];
  int i = 0;
  while (i < lines.length) {
    final String line = lines[i];
    if (line.length > 0 && _substr(line, 0, 1) == "#") {
    i = i + 1;
    continue;
  }
    final List<String> parts = splitWS(line);
    int j = 0;
    while (j < parts.length) {
    toks = [...toks, parts[j]];
    j = j + 1;
  }
    i = i + 1;
  }
  return toks;
}

Bitmap readP3(String text) {
  final List<String> toks = tokenize(text);
  if (toks.length < 4) {
    return newBitmap(0, 0, 0);
  }
  if (toks[0] != "P3") {
    return newBitmap(0, 0, 0);
  }
  final int w = int.parse(toks[1]);
  final int h = int.parse(toks[2]);
  final int maxv = int.parse(toks[3]);
  int idx = 4;
  Bitmap bm = newBitmap(w, h, maxv);
  int y = h - 1;
  while (y >= 0) {
    int x = 0;
    while (x < w) {
    final int r = int.parse(toks[idx]);
    final int g = int.parse(toks[idx + 1]);
    final int b = int.parse(toks[idx + 2]);
    setPx(bm, x, y, Pixel(R: r, G: g, B: b));
    idx = idx + 3;
    x = x + 1;
  }
    y = y - 1;
  }
  return bm;
}

void toGrey(Bitmap b) {
  final int h = b.h;
  final int w = b.w;
  int m = 0;
  int y = 0;
  while (y < h) {
    int x = 0;
    while (x < w) {
    final Pixel p = getPx(b, x, y);
    int l = (p.R * 2126 + p.G * 7152 + p.B * 722) ~/ 10000;
    if (l > b.max) {
    l = b.max;
  }
    setPx(b, x, y, Pixel(R: l, G: l, B: l));
    if (l > m) {
    m = l;
  }
    x = x + 1;
  }
    y = y + 1;
  }
  b.max = m;
}

String pad(int n, int w) {
  String s = (n).toString();
  while (s.length < w) {
    s = " " + s;
  }
  return s;
}

String writeP3(Bitmap b) {
  final int h = b.h;
  final int w = b.w;
  int max = b.max;
  final int digits = (max).toString().length;
  String out = "P3\n# generated from Bitmap.writeppmp3\n" + (w).toString() + " " + (h).toString() + "\n" + (max).toString() + "\n";
  int y = h - 1;
  while (y >= 0) {
    String line = "";
    int x = 0;
    while (x < w) {
    final Pixel p = getPx(b, x, y);
    line = line + "   " + pad(p.R, digits) + " " + pad(p.G, digits) + " " + pad(p.B, digits);
    x = x + 1;
  }
    out = out + line + "\n";
    y = y - 1;
  }
  return out;
}

String ppmtxt = "P3\n" + "# feep.ppm\n" + "4 4\n" + "15\n" + " 0  0  0    0  0  0    0  0  0   15  0 15\n" + " 0  0  0    0 15  7    0  0  0    0  0  0\n" + " 0  0  0    0  0  0    0 15  7    0  0  0\n" + "15  0 15    0  0  0    0  0  0    0  0  0\n";
Bitmap bm = readP3(ppmtxt);
final String out = writeP3(bm);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Original Colour PPM file");
  print(ppmtxt);
  print("Grey PPM:");
  toGrey(bm);
  print(out);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
