// Generated by Mochi transpiler
List<int> randInt(int s, int n) {
  final int next = (s * 1664525 + 1013904223) % 2147483647;
  return [next, next % n];
}

String padLeft(String s, int w) {
  String res = "";
  int n = w - s.length;
  while (n > 0) {
    res = res + " ";
    n = n - 1;
  }
  return res + s;
}

List<dynamic> makeSeq(int s, int le) {
  final String bases = "ACGT";
  String out = "";
  int i = 0;
  while (i < le) {
    List<int> r = randInt(s, 4);
    s = r[0];
    final int idx = r[1]! as int;
    out = out + bases.substring(idx, idx + 1);
    i = i + 1;
  }
  return List<dynamic>.from([s, out]);
}

List<dynamic> mutate(int s, String dna, List<int> w) {
  final String bases = "ACGT";
  final int le = dna.length;
  List<int> r = randInt(s, le);
  s = r[0];
  final int p = r[1]! as int;
  r = randInt(s, 300);
  s = r[0];
  final int x = r[1]! as int;
  List<String> arr = [];
  int i = 0;
  while (i < le) {
    arr = [...arr, dna.substring(i, i + 1)];
    i = i + 1;
  }
  if (x < w[0]) {
    r = randInt(s, 4);
    s = r[0];
    final int idx = r[1]! as int;
    final String b = bases.substring(idx, idx + 1);
    print("  Change @" + padLeft((p).toString(), 3) + " '" + arr[p] + "' to '" + b + "'");
    arr[p] = b;
  } else {
    if (x < w[0] + w[1]) {
    print("  Delete @" + padLeft((p).toString(), 3) + " '" + arr[p] + "'");
    int j = p;
    while (j < arr.length - 1) {
    arr[j] = arr[j + 1];
    j = j + 1;
  };
    arr = arr.sublist(0, arr.length - 1);
  } else {
    r = randInt(s, 4);
    s = r[0];
    final int idx2 = r[1]! as int;
    final String b = bases.substring(idx2, idx2 + 1);
    arr = [...arr, ""];
    int j = arr.length - 1;
    while (j > p) {
    arr[j] = arr[j - 1];
    j = j - 1;
  };
    print("  Insert @" + padLeft((p).toString(), 3) + " '" + b + "'");
    arr[p] = b;
  };
  }
  String out = "";
  i = 0;
  while (i < arr.length) {
    out = out + arr[i];
    i = i + 1;
  }
  return List<dynamic>.from([s, out]);
}

void prettyPrint(String dna, int rowLen) {
  print("SEQUENCE:");
  final int le = dna.length;
  int i = 0;
  while (i < le) {
    int k = i + rowLen;
    if (k > le) {
    k = le;
  }
    print(padLeft((i).toString(), 5) + ": " + dna.substring(i, k));
    i = i + rowLen;
  }
  int a = 0;
  int c = 0;
  int g = 0;
  int t = 0;
  int idx = 0;
  while (idx < le) {
    final String ch = dna.substring(idx, idx + 1);
    if (ch == "A") {
    a = a + 1;
  } else {
    if (ch == "C") {
    c = c + 1;
  } else {
    if (ch == "G") {
    g = g + 1;
  } else {
    if (ch == "T") {
    t = t + 1;
  };
  };
  };
  }
    idx = idx + 1;
  }
  print("");
  print("BASE COUNT:");
  print("    A: " + padLeft((a).toString(), 3));
  print("    C: " + padLeft((c).toString(), 3));
  print("    G: " + padLeft((g).toString(), 3));
  print("    T: " + padLeft((t).toString(), 3));
  print("    ------");
  print("    Î£: " + (le).toString());
  print("    ======");
}

String wstring(List<int> w) {
  return "  Change: " + (w[0]).toString() + "\n  Delete: " + (w[1]).toString() + "\n  Insert: " + (w[2]).toString() + "\n";
}

void main() {
  int seed = 1;
  List<dynamic> res = makeSeq(seed, 250);
  seed = res[0];
  String dna = res[1]! as String;
  prettyPrint(dna, 50);
  final int muts = 10;
  final List<int> w = [100, 100, 100];
  print("\nWEIGHTS (ex 300):");
  print(wstring(w));
  print("MUTATIONS (" + (muts).toString() + "):");
  int i = 0;
  while (i < muts) {
    res = mutate(seed, dna, w);
    seed = res[0];
    dna = res[1]! as String;
    i = i + 1;
  }
  print("");
  prettyPrint(dna, 50);
}

void _start() {
  main();
}
