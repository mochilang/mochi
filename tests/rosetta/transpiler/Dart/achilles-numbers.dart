// Generated by Mochi transpiler
int pow10(int exp) {
  int n = 1;
  int i = 0;
  while (i < exp) {
    n = n * 10;
    i = i + 1;
  }
  return n;
}

int totient(int n) {
  int tot = n;
  int nn = n;
  int i = 2;
  while (i * i <= nn) {
    if (nn % i == 0) {
    while (nn % i == 0) {
    nn = nn ~/ i;
  };
    tot = tot - tot ~/ i;
  }
    if (i == 2) {
    i = 1;
  }
    i = i + 2;
  }
  if (nn > 1) {
    tot = tot - tot ~/ nn;
  }
  return tot;
}

Map<int, bool> pps = {};
void getPerfectPowers(int maxExp) {
  final int upper = pow10(maxExp);
  int i = 2;
  while (i * i < upper) {
    int p = i * i;
    while (true) {
    p = p * i;
    if (p >= upper) {
    break;
  }
    pps[p] = true;
  }
    i = i + 1;
  }
}

Map<int, bool> getAchilles(int minExp, int maxExp) {
  final int lower = pow10(minExp);
  final int upper = pow10(maxExp);
  Map<int, bool> achilles = {};
  int b = 1;
  while (b * b * b < upper) {
    final int b3 = b * b * b;
    int a = 1;
    while (true) {
    final int p = b3 * a * a;
    if (p >= upper) {
    break;
  }
    if (p >= lower) {
    if (!pps.containsKey(p)) {
    achilles[p] = true;
  };
  }
    a = a + 1;
  }
    b = b + 1;
  }
  return achilles;
}

List<int> sortInts(List<int> xs) {
  List<int> res = [];
  List<int> tmp = xs;
  while (tmp.length > 0) {
    int min = tmp[0];
    int idx = 0;
    int i = 1;
    while (i < tmp.length) {
    if (tmp[i] < min) {
    min = tmp[i];
    idx = i;
  }
    i = i + 1;
  }
    res = res + [min];
    List<int> out = [];
    int j = 0;
    while (j < tmp.length) {
    if (j != idx) {
    out = out + [tmp[j]];
  }
    j = j + 1;
  }
    tmp = out;
  }
  return res;
}

String pad(int n, int width) {
  String s = (n).toString();
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

void main() {
  final int maxDigits = 15;
  getPerfectPowers(maxDigits);
  final Map<int, bool> achSet = getAchilles(1, 5);
  List<int> ach = [];
  for (var k in achSet["keys"]()) {
    ach = ach + [k];
  }
  ach = sortInts(ach);
  print("First 50 Achilles numbers:");
  int i = 0;
  while (i < 50) {
    String line = "";
    int j = 0;
    while (j < 10) {
    line = line + pad(ach[i], 4);
    if (j < 9) {
    line = line + " ";
  }
    i = i + 1;
    j = j + 1;
  }
    print(line);
  }
  print("\nFirst 30 strong Achilles numbers:");
  List<int> strong = [];
  int count = 0;
  int idx = 0;
  while (count < 30) {
    final int tot = totient(ach[idx]);
    if (achSet.containsKey(tot)) {
    strong = strong + [ach[idx]];
    count = count + 1;
  }
    idx = idx + 1;
  }
  i = 0;
  while (i < 30) {
    String line = "";
    int j = 0;
    while (j < 10) {
    line = line + pad(strong[i], 5);
    if (j < 9) {
    line = line + " ";
  }
    i = i + 1;
    j = j + 1;
  }
    print(line);
  }
  print("\nNumber of Achilles numbers with:");
  final List<int> counts = [1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383];
  int d = 2;
  while (d <= maxDigits) {
    final int c = counts[d - 2];
    print(pad(d, 2) + " digits: " + (c).toString());
    d = d + 1;
  }
}

void _start() {
  main();
  main();
}
