// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

num log2(num x) {
  num k = 0.0;
  num v = x;
  while (v >= 2.0) {
    v = v / 2.0;
    k = k + 1.0;
  }
  while (v < 1.0) {
    v = v * 2.0;
    k = k - 1.0;
  }
  num z = (v - 1.0) / (v + 1.0);
  num zpow = z;
  num sum = z;
  int i = 3;
  while (i <= 9) {
    zpow = zpow * z * z;
    sum = sum + zpow / ((i).toDouble());
    i = i + 2;
  }
  num ln2 = 0.6931471805599453;
  return k + 2.0 * sum / ln2;
}

void _main() {
  String s = "1223334444";
  Map<String, int> counts = <String, int>{};
  num l = 0.0;
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (counts.containsKey(ch)) {
    counts[ch] = ((counts[ch] ?? 0) + 1).toInt();
  } else {
    counts[ch] = 1;
  }
    l = l + 1.0;
    i = i + 1;
  }
  num hm = 0.0;
  for (String ch in counts!.keys) {
    num c = (counts[ch]!).toDouble();
    hm = hm + c * log2(c);
  }
  print((log2(l) - hm / l).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
