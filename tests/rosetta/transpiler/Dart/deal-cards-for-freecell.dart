// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int seed = 1;
int rnd() {
  seed = (seed * 214013 + 2531011) % 2147483648;
  return seed ~/ 65536;
}

List<int> deal(int game) {
  seed = game;
  List<int> deck = <int>[];
  int i = 0;
  while (i < 52) {
    deck = [...deck, 51 - i];
    i = i + 1;
  }
  i = 0;
  while (i < 51) {
    int j = 51 - rnd() % (52 - i);
    int tmp = deck[i];
    deck[i] = deck[j];
    deck[j] = tmp;
    i = i + 1;
  }
  return deck;
}

String suits = "CDHS";
String nums = "A23456789TJQK";
void show(List<int> cards) {
  int i = 0;
  while (i < cards.length) {
    int c = cards[i];
    stdout.write(" " + _substr(nums, c ~/ 4, c ~/ 4 + 1) + _substr(suits, c % 4, c % 4 + 1));
    if ((i + 1) % 8 == 0 || i + 1 == cards.length) {
    print("");
  }
    i = i + 1;
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("");
  print("Game #1");
  show(deal(1));
  print("");
  print("Game #617");
  show(deal(617));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
