// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int seed = 1;
int prng(int max) {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed % max;
}

String gen(int n) {
  List<String> arr = <String>[];
  int i = 0;
  while (i < n) {
    arr = [...arr, "["];
    arr = [...arr, "]"];
    i = i + 1;
  }
  int j = arr.length - 1;
  while (j > 0) {
    int k = prng(j + 1);
    String tmp = arr[j];
    arr[j] = arr[k];
    arr[k] = tmp;
    j = j - 1;
  }
  String out = "";
  for (String ch in arr) {
    out = out + ch;
  }
  return out;
}

void testBalanced(String s) {
  int open = 0;
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c == "[") {
    open = open + 1;
  } else {
    if (c == "]") {
    if (open == 0) {
    print(s + ": not ok");
    return;
  };
    open = open - 1;
  } else {
    print(s + ": not ok");
    return;
  };
  }
    i = i + 1;
  }
  if (open == 0) {
    print(s + ": ok");
  } else {
    print(s + ": not ok");
  }
}

void _main() {
  int i = 0;
  while (i < 10) {
    testBalanced(gen(i));
    i = i + 1;
  }
  testBalanced("()");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
