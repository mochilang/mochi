// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

num floorf(num x) {
  int y = (x).toInt();
  return (y).toDouble();
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String fmtF3(num x) {
  num y = floorf(x * 1000.0 + 0.5) / 1000.0;
  String s = (y).toString();
  int dot = s.indexOf(".");
  if (dot == 0 - 1) {
    s = s + ".000";
  } else {
    int decs = s.length - dot - 1;
    if (decs > 3) {
    s = _substr(s, 0, dot + 4);
  } else {
    while (decs < 3) {
    s = s + "0";
    decs = decs + 1;
  };
  };
  }
  return s;
}

String padFloat3(num x, int width) {
  String s = fmtF3(x);
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

List<num> fib1000() {
  num a = 0.0;
  num b = 1.0;
  List<num> res = <num>[];
  int i = 0;
  while (i < 1000) {
    res = [...res, b];
    num t = b;
    b = b + a;
    a = t;
    i = i + 1;
  }
  return res;
}

int leadingDigit(num x) {
  if (x < 0.0) {
    x = -x;
  }
  while (x >= 10.0) {
    x = x / 10.0;
  }
  while (x > 0.0 && x < 1.0) {
    x = x * 10.0;
  }
  return (x).toInt();
}

void show(List<num> nums, String title) {
  List<int> counts = [0, 0, 0, 0, 0, 0, 0, 0, 0];
  for (num n in nums) {
    int d = leadingDigit(n);
    if (d >= 1 && d <= 9) {
    counts[d - 1] = counts[d - 1] + 1;
  }
  }
  List<num> preds = [0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046];
  int total = nums.length;
  print(title);
  print("Digit  Observed  Predicted");
  int i = 0;
  while (i < 9) {
    num obs = ((counts[i]).toDouble()) / ((total).toDouble());
    String line = "  " + (i + 1).toString() + "  " + padFloat3(obs, 9) + "  " + padFloat3(preds[i], 8);
    print(line);
    i = i + 1;
  }
}

void _main() {
  show(fib1000(), "First 1000 Fibonacci numbers");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
