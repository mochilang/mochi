// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String _repeat(String s, int n) => List.filled(n, s).join();

String repeat(String s, int n) {
  String out = "";
  int i = 0;
  while (i < n) {
    out = out + s;
    i = i + 1;
  }
  return out;
}

String trimRightSpace(String s) {
  int i = s.length - 1;
  while (i >= 0 && _substr(s, i, i + 1) == " ") {
    i = i - 1;
  }
  return _substr(s, 0, i + 1);
}

List<String> block2text(List<String> block) {
  List<String> out = <String>[];
  for (String b in block) {
    out = [...out, trimRightSpace(b)];
  }
  return out;
}

List<String> text2block(List<String> lines) {
  List<String> out = <String>[];
  int count = 0;
  for (String line in lines) {
    String s = line;
    int le = s.length;
    if (le > 64) {
    s = _substr(s, 0, 64);
  } else {
    if (le < 64) {
    s = s + _repeat(" ", 64 - le);
  };
  }
    out = [...out, s];
    count = count + 1;
  }
  if (count % 16 != 0) {
    int pad = 16 - count % 16;
    int i = 0;
    while (i < pad) {
    out = [...out, _repeat(" ", 64)];
    i = i + 1;
  };
  }
  return out;
}

List<String> lines = ["alpha", "beta", "gamma"];
List<String> blocks = text2block(lines);
List<String> outLines = block2text(blocks);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  for (String l in outLines) {
    if (l != "") {
    print(l);
  }
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
