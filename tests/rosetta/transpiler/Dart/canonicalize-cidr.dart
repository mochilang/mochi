// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String _repeat(String s, int n) => List.filled(n, s).join();

List<String> split(String s, String sep) {
  List<String> parts = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    if (sep.length > 0 && i + sep.length <= s.length && _substr(s, i, i + sep.length) == sep) {
    parts = [...parts, cur];
    cur = "";
    i = i + sep.length;
  } else {
    cur = cur + _substr(s, i, i + 1);
    i = i + 1;
  }
  }
  parts = [...parts, cur];
  return parts;
}

String join(List<String> xs, String sep) {
  String res = "";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    res = res + sep;
  }
    res = res + xs[i];
    i = i + 1;
  }
  return res;
}

String repeat(String ch, int n) {
  String out = "";
  int i = 0;
  while (i < n) {
    out = out + ch;
    i = i + 1;
  }
  return out;
}

int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && _substr(str, 0, 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = n * 10 + digits[_substr(str, i, i + 1)]!;
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

String toBinary(int n, int bits) {
  String b = "";
  int val = n;
  int i = 0;
  while (i < bits) {
    b = (val % 2).toString() + b;
    val = val ~/ 2 as int;
    i = i + 1;
  }
  return b;
}

int binToInt(String bits) {
  int n = 0;
  int i = 0;
  while (i < bits.length) {
    n = n * 2 + int.parse(_substr(bits, i, i + 1));
    i = i + 1;
  }
  return n;
}

String padRight(String s, int width) {
  String out = s;
  while (out.length < width) {
    out = out + " ";
  }
  return out;
}

String canonicalize(String cidr) {
  List<String> parts = split(cidr, "/");
  String dotted = parts[0];
  var size = int.parse(parts[1]);
  List<String> binParts = <String>[];
  for (var p in split(dotted, ".")) {
    binParts = [...binParts, toBinary(int.parse(p), 8)];
  }
  String binary = join(binParts, "");
  binary = _substr(binary, 0, size) + _repeat("0", 32 - size);
  List<String> canonParts = <String>[];
  int i = 0;
  while (i < binary.length) {
    canonParts = [...canonParts, (binToInt(_substr(binary, i, i + 8))).toString()];
    i = i + 8;
  }
  return join(canonParts, ".") + "/" + parts[1];
}

List<String> tests = ["87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  for (var t in tests) {
    print(padRight(t, 18) + " -> " + canonicalize(t));
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
