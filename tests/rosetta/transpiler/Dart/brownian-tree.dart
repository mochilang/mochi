// Generated by Mochi transpiler
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

final int w = 400;
final int h = 300;
final int n = 15000;
final int frost = 255;
List<List<int>> grid = [];
int y = 0;
bool inBounds(int x, int y) {
  return x >= 0 && x < w && y >= 0 && y < h;
}

bool hasNeighbor(int x, int y) {
  int dy = -1;
  while (dy <= 1) {
    int dx = -1;
    while (dx <= 1) {
    if (!(dx == 0 && dy == 0)) {
    final int nx = x + dx;
    final int ny = y + dy;
    if (inBounds(nx, ny) && grid[ny]![nx] == frost) {
    return true;
  };
  }
    dx = dx + 1;
  }
    dy = dy + 1;
  }
  return false;
}

int a = 0;
void main() {
  _initNow();
  while (y < h) {
    List<int> row = [];
    int x = 0;
    while (x < w) {
    row = [...row, 0];
    x = x + 1;
  }
    grid = [...grid, row];
    y = y + 1;
  }
  grid[h ~/ 3]![w ~/ 3] = frost;
  while (a < n) {
    int px = _now() % w;
    int py = _now() % h;
    if (grid[py]![px] == frost) {
    bool lost = false;
    while (true) {
    px = px + _now() % 3 - 1;
    py = py + _now() % 3 - 1;
    if (!inBounds(px, py)) {
    lost = true;
    break;
  }
    if (grid[py]![px] != frost) {
    break;
  }
  };
    if (lost) {
    continue;
  };
  } else {
    bool lost = false;
    while (!hasNeighbor(px, py)) {
    px = px + _now() % 3 - 1;
    py = py + _now() % 3 - 1;
    if (!inBounds(px, py)) {
    lost = true;
    break;
  }
  };
    if (lost) {
    continue;
  };
  }
    grid[py]![px] = frost;
    a = a + 1;
  }
}
