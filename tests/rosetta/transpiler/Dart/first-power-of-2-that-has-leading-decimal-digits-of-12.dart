// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String commatize(int n) {
  String s = (n).toString();
  int i = s.length % 3;
  if (i == 0) {
    i = 3;
  }
  String out = _substr(s, 0, i);
  while (i < s.length) {
    out = out + "," + _substr(s, i, i + 3);
    i = i + 3;
  }
  return out;
}

int p(int L, int n) {
  String Ls = (L).toString();
  int digits = 1;
  int d = 1;
  while (d <= 18 - Ls.length) {
    digits = digits * 10;
    d = d + 1;
  }
  int ten18 = 1000000000000000000;
  int count = 0;
  int i = 0;
  int probe = 1;
  while (true) {
    probe = probe * 2;
    i = i + 1;
    if (probe >= ten18) {
    while (true) {
    if (probe >= ten18) {
    probe = probe ~/ 10;
  }
    if (probe ~/ digits == L) {
    count = count + 1;
    if (count >= n) {
    count = count - 1;
    break;
  };
  }
    probe = probe * 2;
    i = i + 1;
  };
  }
    String ps = (probe).toString();
    int le = Ls.length;
    if (le > ps.length) {
    le = ps.length;
  }
    if (_substr(ps, 0, le) == Ls) {
    count = count + 1;
    if (count >= n) {
    break;
  };
  }
  }
  return i;
}

List<List<int>> params = [[12, 1], [12, 2], [123, 45]];
int idx = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (idx < params.length) {
    int L = params[idx][0];
    int m = params[idx][1];
    print("p(" + (L).toString() + ", " + (m).toString() + ") = " + commatize(p(L, m)));
    idx = idx + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
