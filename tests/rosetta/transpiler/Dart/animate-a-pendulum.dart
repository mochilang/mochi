// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  final num PI = 3.141592653589793;
  num sinApprox(num x) {
  num term = x;
  num sum = x;
  int n = 1;
  while (n <= 10) {
    final num denom = (2 * n * (2 * n + 1)).toDouble();
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}
  num cosApprox(num x) {
  num term = 1.0;
  num sum = 1.0;
  int n = 1;
  while (n <= 10) {
    final num denom = ((2 * n - 1) * 2 * n).toDouble();
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}
  num sqrtApprox(num x) {
  num guess = x;
  int i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}
  final num L = 10.0;
  final num G = 9.81;
  final num dt = 0.2;
  final num phi0 = PI / 4.0;
  final num omega = sqrtApprox(G / L);
  num t = 0.0;
  for (int step = 0; step < 10; step++) {
    final num phi = phi0 * cosApprox(omega * t);
    final int pos = (10.0 * sinApprox(phi) + 0.5).toInt();
    print((pos).toString());
    t = t + dt;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
