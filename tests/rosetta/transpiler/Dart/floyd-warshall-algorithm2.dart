// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class FWResult {
  List<List<int>> dist;
  List<List<int>> next;
  FWResult({required this.dist, required this.next});
}

int INF = 1000000;
FWResult floydWarshall(List<List<int>> graph) {
  int n = graph.length;
  List<List<int>> dist = <List<int>>[];
  List<List<int>> next = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> drow = <int>[];
    List<int> nrow = <int>[];
    int j = 0;
    while (j < n) {
    drow = [...drow, graph[i][j]];
    if (graph[i][j] < INF && i != j) {
    nrow = [...nrow, j];
  } else {
    nrow = [...nrow, -1];
  }
    j = j + 1;
  }
    dist = ([...dist, drow] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    next = ([...next, nrow] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    i = i + 1;
  }
  int k = 0;
  while (k < n) {
    int i = 0;
    while (i < n) {
    int j = 0;
    while (j < n) {
    if (dist[i][k] < INF && dist[k][j] < INF) {
    int alt = dist[i][k] + dist[k][j];
    if (alt < dist[i][j]) {
    dist[i]![j] = alt;
    next[i]![j] = next[i][k];
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
    k = k + 1;
  }
  return FWResult(dist: dist, next: next);
}

List<int> path(int u, int v, List<List<int>> next) {
  if (next[u][v] < 0) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<int> p = [u];
  int x = u;
  while (x != v) {
    x = next[x][v];
    p = [...p, x];
  }
  return p;
}

String pathStr(List<int> p) {
  String s = "";
  int i = 0;
  while (i < p.length) {
    s = s + (p[i] + 1).toString();
    if (i < p.length - 1) {
    s = s + " -> ";
  }
    i = i + 1;
  }
  return s;
}

int n = 4;
List<List<int>> g = <List<int>>[];
FWResult res = floydWarshall(g);
int i = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  for (int i = 0; i < n; i++) {
    List<int> row = <int>[];
    for (int j = 0; j < n; j++) {
    if (i == j) {
    row = [...row, 0];
  } else {
    row = [...row, INF];
  }
  }
    g = ([...g, row] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
  }
  g[0]![2] = -2;
  g[2]![3] = 2;
  g[3]![1] = -1;
  g[1]![0] = 4;
  g[1]![2] = 3;
  print("pair	dist	path");
  while (i < n) {
    int j = 0;
    while (j < n) {
    if (i != j) {
    List<int> p = path(i, j, res.next);
    print((i + 1).toString() + " -> " + (j + 1).toString() + "	" + (res.dist[i][j]).toString() + "	" + pathStr(p));
  }
    j = j + 1;
  }
    i = i + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
