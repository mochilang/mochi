// Generated by Mochi transpiler
String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  var upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  var lower = "abcdefghijklmnopqrstuvwxyz";
  int idx = upper.indexOf(ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = lower.indexOf(ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  return 0;
}

String chr(int n) {
  var upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  var lower = "abcdefghijklmnopqrstuvwxyz";
  if (n >= 65 && n < 91) {
    return _substr(upper, n - 65, n - 64);
  }
  if (n >= 97 && n < 123) {
    return _substr(lower, n - 97, n - 96);
  }
  return "?";
}

String shiftRune(String r, int k) {
  if (r.compareTo("a") >= 0 && r.compareTo("z") <= 0) {
    return chr((ord(r) - 97 + k) % 26 + 97);
  }
  if (r.compareTo("A") >= 0 && r.compareTo("Z") <= 0) {
    return chr((ord(r) - 65 + k) % 26 + 65);
  }
  return r;
}

String encipher(String s, int k) {
  String out = "";
  int i = 0;
  while (i < s.length) {
    out = out + shiftRune(_substr(s, i, i + 1), k);
    i = i + 1;
  }
  return out;
}

String decipher(String s, int k) {
  return encipher(s, (26 - k % 26) % 26);
}

void main() {
  String pt = "The five boxing wizards jump quickly";
  print("Plaintext: " + pt);
  for (var key in [0, 1, 7, 25, 26]) {
    if (key.toString().compareTo(1.toString()) < 0 || key.toString().compareTo(25.toString()) > 0) {
    print("Key " + (key).toString() + " invalid");
    continue;
  }
    String ct = encipher(pt, key);
    print("Key " + (key).toString());
    print("  Enciphered: " + ct);
    print("  Deciphered: " + decipher(ct, key));
  }
}

void _start() {
  main();
}
