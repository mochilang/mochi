// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String toBase(int n, int b) {
  if (n == 0) {
    return "0";
  }
  String s = "";
  int x = n;
  while (x > 0) {
    s = (x % b).toString() + s;
    x = x ~/ b as int;
  }
  return s;
}

int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && str.substring(0, 0 + 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  while (i < str.length) {
    n = n * 10 + ((_substr(str, i, i + 1)).codeUnitAt(0)) - (("0").codeUnitAt(0));
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

int parseIntBase(String s, int b) {
  int n = 0;
  int i = 0;
  while (i < s.length) {
    n = n * b + int.parse(_substr(s, i, i + 1));
    i = i + 1;
  }
  return n;
}

String reverseStr(String s) {
  String out = "";
  int i = s.length - 1;
  while (i >= 0) {
    out = out + _substr(s, i, i + 1);
    i = i - 1;
  }
  return out;
}

bool isPalindrome(String s) {
  return s == reverseStr(s);
}

bool isPalindromeBin(int n) {
  String b = toBase(n, 2);
  return isPalindrome(b);
}

int myMin(int a, int b) {
  if (a < b) {
    return a;
  }
  return b;
}

int myMax(int a, int b) {
  if (a > b) {
    return a;
  }
  return b;
}

int reverse3(int n) {
  int x = 0;
  int y = n;
  while (y != 0) {
    x = x * 3 + y % 3;
    y = y ~/ 3 as int;
  }
  return x;
}

void show(int n) {
  print("Decimal : " + (n).toString());
  print("Binary  : " + toBase(n, 2));
  print("Ternary : " + toBase(n, 3));
  print("");
}

void _main() {
  print("The first 6 numbers which are palindromic in both binary and ternary are :\n");
  show(0);
  int count = 1;
  int lo = 0;
  int hi = 1;
  int pow2 = 1;
  int pow3 = 1;
  while (true) {
    int i = lo;
    while (i < hi) {
    int n = (i * 3 + 1) * pow3 + reverse3(i);
    if (isPalindromeBin(n)) {
    show(n);
    count = count + 1;
    if (count >= 6) {
    return;
  };
  }
    i = i + 1;
  }
    if (i == pow3) {
    pow3 = pow3 * 3;
  } else {
    pow2 = pow2 * 4;
  }
    while (true) {
    while (pow2 <= pow3) {
    pow2 = pow2 * 4;
  }
    int lo2 = (pow2 ~/ pow3 - 1) ~/ 3 as int;
    int hi2 = ((pow2 * 2 ~/ pow3 - 1) ~/ 3 as int) + 1;
    int lo3 = pow3 ~/ 3 as int;
    int hi3 = pow3;
    if (lo2 >= hi3) {
    pow3 = pow3 * 3;
  } else {
    if (lo3 >= hi2) {
    pow2 = pow2 * 4;
  } else {
    lo = myMax(lo2, lo3);
    hi = myMin(hi2, hi3);
    break;
  };
  }
  }
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
