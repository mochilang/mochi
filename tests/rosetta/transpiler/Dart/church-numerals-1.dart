// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

dynamic zero(dynamic f) {
  return ((x) => x);
}

dynamic succ(dynamic c) {
  return ((f) => ((x) => f(c(f)(x))));
}

dynamic add(dynamic c, dynamic d) {
  return ((f) => ((x) => c(f)(d(f)(x))));
}

dynamic mul(dynamic c, dynamic d) {
  return ((f) => ((x) => c(d(f))(x)));
}

dynamic pow(dynamic c, dynamic d) {
  int di = toInt(d);
  var prod = c;
  int i = 1;
  while (i < di) {
    prod = mul(prod, c);
    i = i + 1;
  }
  return prod;
}

dynamic incr(dynamic i) {
  return (i as int) + 1;
}

int toInt(dynamic c) {
  return c(incr)(0) as int;
}

dynamic intToChurch(int i) {
  if (i == 0) {
    return zero;
  }
  return succ(intToChurch(i - 1));
}

var z = zero;
var three = succ(succ(succ(z)));
var four = succ(three);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("three        -> " + (toInt(three)).toString());
  print("four         -> " + (toInt(four)).toString());
  print("three + four -> " + (toInt(add(three, four))).toString());
  print("three * four -> " + (toInt(mul(three, four))).toString());
  print("three ^ four -> " + (toInt(pow(three, four))).toString());
  print("four ^ three -> " + (toInt(pow(four, three))).toString());
  print("5 -> five    -> " + (toInt(intToChurch(5))).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
