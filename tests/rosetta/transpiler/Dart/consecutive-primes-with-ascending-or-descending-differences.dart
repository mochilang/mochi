// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> primesUpTo(int n) {
  List<bool> sieve = <bool>[];
  int i = 0;
  while (i <= n) {
    sieve = [...sieve, true];
    i = i + 1;
  }
  int p = 2;
  while (p * p <= n) {
    if (sieve[p]) {
    int m = p * p;
    while (m <= n) {
    sieve[m] = false;
    m = m + p;
  };
  }
    p = p + 1;
  }
  List<int> res = <int>[];
  int x = 2;
  while (x <= n) {
    if (sieve[x]) {
    res = [...res, x];
  }
    x = x + 1;
  }
  return res;
}

int LIMIT = 999999;
List<int> primes = primesUpTo(LIMIT);
void longestSeq(String dir) {
  int pd = 0;
  List<List<int>> longSeqs = [[2]];
  List<int> currSeq = [2];
  int i = 1;
  while (i < primes.length) {
    int d = primes[i] - primes[i - 1];
    if (dir == "ascending" && d <= pd || dir == "descending" && d >= pd) {
    if (currSeq.length > longSeqs[0].length) {
    longSeqs = [currSeq];
  } else {
    if (currSeq.length == longSeqs[0].length) {
    longSeqs = [...longSeqs, currSeq];
  };
  };
    currSeq = [primes[i - 1], primes[i]];
  } else {
    currSeq = [...currSeq, primes[i]];
  }
    pd = d;
    i = i + 1;
  }
  if (currSeq.length > longSeqs[0].length) {
    longSeqs = [currSeq];
  } else {
    if (currSeq.length == longSeqs[0].length) {
    longSeqs = [...longSeqs, currSeq];
  };
  }
  print("Longest run(s) of primes with " + dir + " differences is " + (longSeqs[0].length).toString() + " :");
  for (List<int> ls in longSeqs) {
    List<int> diffs = <int>[];
    int j = 1;
    while (j < ls.length) {
    diffs = [...diffs, ls[j] - ls[j - 1]];
    j = j + 1;
  }
    int k = 0;
    while (k < ls.length - 1) {
    print([(ls[k]).toString() + " (" + (diffs[k]).toString() + ") ", false].join(" "));
    k = k + 1;
  }
    print((ls[ls.length - 1]).toString());
  }
  print("");
}

void _main() {
  print("For primes < 1 million:\n");
  for (String dir in ["ascending", "descending"]) {
    longestSeq(dir);
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
