// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> getDivisors(int n) {
  List<int> divs = [1, n];
  dynamic i = 2;
  while (i * i <= n) {
    if (n % i == 0) {
    int j = (n ~/ i).toInt();
    divs = [...divs, i];
    if (i != j) {
    divs = [...divs, j];
  };
  }
    i = i + 1;
  }
  return divs;
}

int sum(List<int> xs) {
  dynamic s = 0;
  for (int x in xs) {
    s = s + x;
  }
  return s;
}

bool isPartSum(List<int> divs, int target) {
  List<bool> possible = <bool>[];
  dynamic i = 0;
  while (i <= target) {
    possible = [...possible, false];
    i = i + 1;
  }
  possible[0] = true;
  for (int v in divs) {
    dynamic s = target;
    while (s >= v) {
    if (possible[(s - v).toInt()]) {
    possible[(s).toInt()] = true;
  }
    s = s - 1;
  }
  }
  return possible[target];
}

bool isZumkeller(int n) {
  List<int> divs = getDivisors(n);
  num s = divs.fold(0, (a, b) => a + b);
  if (s % 2 == 1) {
    return false;
  }
  if (n % 2 == 1) {
    num abundance = s - 2 * n;
    return abundance > 0 && abundance % 2 == 0;
  }
  return isPartSum(divs, (s / 2).toInt());
}

String pad(int n, int width) {
  dynamic s = (n).toString();
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

void _main() {
  print("The first 220 Zumkeller numbers are:");
  dynamic count = 0;
  dynamic line = "";
  dynamic i = 2;
  while (count < 220) {
    if (isZumkeller(i)) {
    line = line + pad(i, 3) + " ";
    count = count + 1;
    if (count % 20 == 0) {
    print(_substr(line, 0, line.length - 1));
    line = "";
  };
  }
    i = i + 1;
  }
  print("\nThe first 40 odd Zumkeller numbers are:");
  count = 0;
  line = "";
  i = 3;
  while (count < 40) {
    if (isZumkeller(i)) {
    line = line + pad(i, 5) + " ";
    count = count + 1;
    if (count % 10 == 0) {
    print(_substr(line, 0, line.length - 1));
    line = "";
  };
  }
    i = i + 2;
  }
  print("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:");
  count = 0;
  line = "";
  i = 3;
  while (count < 40) {
    if (i % 10 != 5 && isZumkeller(i)) {
    line = line + pad(i, 7) + " ";
    count = count + 1;
    if (count % 8 == 0) {
    print(_substr(line, 0, line.length - 1));
    line = "";
  };
  }
    i = i + 2;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
