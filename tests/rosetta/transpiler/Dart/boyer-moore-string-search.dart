// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  int indexOfStr(String h, String n) {
  final int hlen = h.length;
  final int nlen = n.length;
  if (nlen == 0) {
    return 0;
  }
  int i = 0;
  while (i <= hlen - nlen) {
    if (h.substring(i, i + nlen) == n) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}
  int stringSearchSingle(String h, String n) {
  return indexOfStr(h, n);
}
  List<int> stringSearch(String h, String n) {
  List<int> result = [];
  int start = 0;
  final int hlen = h.length;
  final int nlen = n.length;
  while (start < hlen) {
    final int idx = indexOfStr(h.substring(start, hlen), n);
    if (idx >= 0) {
    result = [...result, start + idx];
    start = start + idx + nlen;
  } else {
    break;
  }
  }
  return result;
}
  String display(List<int> nums) {
  String s = "[";
  int i = 0;
  while (i < nums.length) {
    if (i > 0) {
    s = s + ", ";
  }
    s = s + (nums[i]).toString();
    i = i + 1;
  }
  s = s + "]";
  return s;
}
  void main() {
  final List<String> texts = ["GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."];
  final List<String> patterns = ["TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"];
  int i = 0;
  while (i < texts.length) {
    print("text" + (i + 1).toString() + " = " + texts[i]);
    i = i + 1;
  }
  print("");
  int j = 0;
  while (j < texts.length) {
    final List<int> idxs = stringSearch(texts[j], patterns[j]);
    print("Found \"" + patterns[j] + "\" in 'text" + (j + 1).toString() + "' at indexes " + display(idxs));
    j = j + 1;
  }
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
