// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int width = 60;
int height = (((width).toDouble()) * 0.86602540378).toInt();
int iterations = 5000;
List<List<String>> grid = <List<String>>[];
int y = 0;
List<int> randInt(int s, int n) {
  int next = (s * 1664525 + 1013904223) % 2147483647;
  return [next, next % n];
}

int seed = 1;
List<List<int>> vertices = [[0, height - 1], [width - 1, height - 1], [width ~/ 2 as int, 0]];
int px = width ~/ 2 as int;
int py = height ~/ 2 as int;
int i = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (y < height) {
    List<String> line = <String>[];
    int x = 0;
    while (x < width) {
    line = [...line, " "];
    x = x + 1;
  }
    grid = [...grid, line];
    y = y + 1;
  }
  while (i < iterations) {
    List<int> r = randInt(seed, 3);
    seed = r[0];
    int idx = r[1] as int;
    List<int> v = vertices[idx];
    px = (px + v[0]) ~/ 2 as int;
    py = (py + v[1]) ~/ 2 as int;
    if (px >= 0 && px < width && py >= 0 && py < height) {
    grid[py]![px] = "*";
  }
    i = i + 1;
  }
  y = 0;
  while (y < height) {
    String line = "";
    int x = 0;
    while (x < width) {
    line = line + grid[y][x];
    x = x + 1;
  }
    print(line);
    y = y + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
