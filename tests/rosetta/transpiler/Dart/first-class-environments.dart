// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class HailResult {
  int seq;
  int cnt;
  String out;
  HailResult({required this.seq, required this.cnt, required this.out});
}

int jobs = 12;
String pad(int n) {
  String s = (n).toString();
  while (s.length < 4) {
    s = " " + s;
  }
  return s;
}

HailResult hail(int seq, int cnt) {
  String out = pad(seq);
  if (seq != 1) {
    cnt = cnt + 1;
    if (seq % 2 != 0) {
    seq = 3 * seq + 1;
  } else {
    seq = seq ~/ 2;
  };
  }
  return HailResult(seq: seq, cnt: cnt, out: out);
}

void _main() {
  List<int> seqs = <int>[];
  List<int> cnts = <int>[];
  for (int i = 0; i < jobs; i++) {
    seqs = [...seqs, i + 1];
    cnts = [...cnts, 0];
  }
  while (true) {
    String line = "";
    int i = 0;
    while (i < jobs) {
    HailResult res = hail(seqs[i], cnts[i]);
    seqs[i] = res.seq;
    cnts[i] = res.cnt;
    line = line + res.out;
    i = i + 1;
  }
    print(line);
    bool done = true;
    int j = 0;
    while (j < jobs) {
    if (seqs[j] != 1) {
    done = false;
  }
    j = j + 1;
  }
    if (done) {
    break;
  }
  }
  print("");
  print("COUNTS:");
  String counts = "";
  int k = 0;
  while (k < jobs) {
    counts = counts + pad(cnts[k]);
    k = k + 1;
  }
  print(counts);
  print("");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
