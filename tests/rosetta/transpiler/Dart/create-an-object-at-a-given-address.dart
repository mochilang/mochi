// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String listStr(List<int> xs) {
  String s = "[";
  int i = 0;
  while (i < xs.length) {
    s = s + (xs[i]).toString();
    if (i < xs.length - 1) {
    s = s + " ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

void pointerDemo() {
  print("Pointer:");
  int i = 0;
  print("Before:");
  print("	<address>: " + (i).toString() + ", " + (i).toString());
  i = 3;
  print("After:");
  print("	<address>: " + (i).toString() + ", " + (i).toString());
}

void sliceDemo() {
  print("Slice:");
  List<dynamic> a = <dynamic>[];
  for (int __ = 0; __ < 10; __++) {
    a = [...a, 0];
  }
  List<dynamic> s = a;
  print("Before:");
  print("	s: " + listStr(List<int>.from(s)));
  print("	a: " + listStr(List<int>.from(a)));
  List<int> data = [65, 32, 115, 116, 114, 105, 110, 103, 46];
  int idx = 0;
  while (idx < data.length) {
    s[idx] = data[idx];
    idx = idx + 1;
  }
  print("After:");
  print("	s: " + listStr(List<int>.from(s)));
  print("	a: " + listStr(List<int>.from(a)));
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  pointerDemo();
  print("");
  sliceDemo();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
