// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Field {
  List<List<bool>> s;
  int w;
  int h;
  Field({required this.s, required this.w, required this.h});
}

class Life {
  Field a;
  Field b;
  int w;
  int h;
  Life({required this.a, required this.b, required this.w, required this.h});
}

int seed = 1;
int randN(int n) {
  seed = (seed * 1664525 + 1013904223) % 2147483647;
  return seed % n;
}

Field newField(int w, int h) {
  List<List<bool>> rows = <List<bool>>[];
  int y = 0;
  while (y < h) {
    List<bool> row = <bool>[];
    int x = 0;
    while (x < w) {
    row = [...row, false];
    x = x + 1;
  }
    rows = [...rows, row];
    y = y + 1;
  }
  return Field(s: rows, w: w, h: h);
}

void setCell(Field f, int x, int y, bool b) {
  List<List<bool>> rows = f.s;
  List<bool> row = rows[y];
  row[x] = b;
  rows[y] = row;
  f.s = rows;
}

bool state(Field f, int x, int y) {
  while (y < 0) {
    y = y + f.h;
  }
  while (x < 0) {
    x = x + f.w;
  }
  return f.s[y % f.h][x % f.w];
}

bool nextState(Field f, int x, int y) {
  int count = 0;
  int dy = -1;
  while (dy <= 1) {
    int dx = -1;
    while (dx <= 1) {
    if (!(dx == 0 && dy == 0) && state(f, x + dx, y + dy)) {
    count = count + 1;
  }
    dx = dx + 1;
  }
    dy = dy + 1;
  }
  return count == 3 || count == 2 && state(f, x, y);
}

Life newLife(int w, int h) {
  Field a = newField(w, h);
  int i = 0;
  while (i < w * h ~/ 2) {
    setCell(a, randN(w), randN(h), true);
    i = i + 1;
  }
  return Life(a: a, b: newField(w, h), w: w, h: h);
}

void step(Life l) {
  int y = 0;
  while (y < l.h) {
    int x = 0;
    while (x < l.w) {
    setCell(l.b, x, y, nextState(l.a, x, y));
    x = x + 1;
  }
    y = y + 1;
  }
  Field tmp = l.a;
  l.a = l.b;
  l.b = tmp;
}

String lifeString(Life l) {
  String out = "";
  int y = 0;
  while (y < l.h) {
    int x = 0;
    while (x < l.w) {
    if (state(l.a, x, y)) {
    out = out + "*";
  } else {
    out = out + " ";
  }
    x = x + 1;
  }
    out = out + "\n";
    y = y + 1;
  }
  return out;
}

void _main() {
  Life l = newLife(80, 15);
  int i = 0;
  while (i < 300) {
    step(l);
");
    print(lifeString(l));
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
