// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String fmt3(num x) {
  num y = (((x * 1000.0 + 0.5).toInt()).toDouble()) / 1000.0;
  String s = (y).toString();
  int dot = s.indexOf(".");
  if (dot == 0 - 1) {
    s = s + ".000";
  } else {
    int decs = s.length - dot - 1;
    if (decs > 3) {
    s = _substr(s, 0, dot + 4);
  } else {
    while (decs < 3) {
    s = s + "0";
    decs = decs + 1;
  };
  };
  }
  return s;
}

String pad(String s, int width) {
  String out = s;
  while (out.length < width) {
    out = " " + out;
  }
  return out;
}

List<num> smaSeries(List<num> xs, int period) {
  List<num> res = <num>[];
  num sum = 0.0;
  int i = 0;
  while (i < xs.length) {
    sum = sum + xs[i];
    if (i >= period) {
    sum = sum - xs[i - period];
  }
    int denom = i + 1;
    if (denom > period) {
    denom = period;
  }
    res = [...res, sum / ((denom).toDouble())];
    i = i + 1;
  }
  return res;
}

void _main() {
  List<num> xs = [1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0];
  List<num> sma3 = smaSeries(xs, 3);
  List<num> sma5 = smaSeries(xs, 5);
  print("x       sma3   sma5");
  int i = 0;
  while (i < xs.length) {
    String line = pad(fmt3(xs[i]), 5) + "  " + pad(fmt3(sma3[i]), 5) + "  " + pad(fmt3(sma5[i]), 5);
    print(line);
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
