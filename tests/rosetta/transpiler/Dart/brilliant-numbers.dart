// Generated by Mochi transpiler
import 'dart:math';

List<int> primesUpTo(int n) {
  List<bool> sieve = [];
  int i = 0;
  while (i <= n) {
    sieve = [...sieve, true];
    i = i + 1;
  }
  int p = 2;
  while (p * p <= n) {
    if (sieve[p]) {
    int m = p * p;
    while (m <= n) {
    sieve[m] = false;
    m = m + p;
  };
  }
    p = p + 1;
  }
  List<int> res = [];
  int x = 2;
  while (x <= n) {
    if (sieve[x]) {
    res = [...res, x];
  }
    x = x + 1;
  }
  return res;
}

List<int> sortInts(List<int> xs) {
  List<int> res = [];
  List<int> tmp = xs;
  while (tmp.length > 0) {
    int min = tmp[0];
    int idx = 0;
    int i = 1;
    while (i < tmp.length) {
    if (tmp[i] < min) {
    min = tmp[i];
    idx = i;
  }
    i = i + 1;
  }
    res = [...res, min];
    List<int> out = [];
    int j = 0;
    while (j < tmp.length) {
    if (j != idx) {
    out = [...out, tmp[j]];
  }
    j = j + 1;
  }
    tmp = out;
  }
  return res;
}

String commatize(int n) {
  String s = (n).toString();
  int i = s.length - 3;
  while (i >= 1) {
    s = s.substring(0, i) + "," + s.substring(i, s.length);
    i = i - 3;
  }
  return s;
}

List<int> primes = primesUpTo(3200000);
Map<String, dynamic> getBrilliant(int digits, int limit, bool countOnly) {
  List<int> brilliant = [];
  int count = 0;
  int pow = 1;
  int next = 999999999999999;
  int k = 1;
  while (k <= digits) {
    List<int> s = [];
    for (var p in primes) {
    if (p >= pow * 10) {
    break;
  }
    if (p > pow) {
    s = [...s, p];
  }
  }
    int i = 0;
    while (i < s.length) {
    int j = i;
    while (j < s.length) {
    int prod = s[i] * s[j];
    if (prod < limit) {
    if (countOnly) {
    count = count + 1;
  } else {
    brilliant = [...brilliant, prod];
  };
  } else {
    if (prod < next) {
    next = prod;
  };
    break;
  }
    j = j + 1;
  }
    i = i + 1;
  }
    pow = pow * 10;
    k = k + 1;
  }
  if (countOnly) {
    return {"bc": count, "next": next};
  }
  return {"bc": brilliant, "next": next};
}

void main() {
  print("First 100 brilliant numbers:");
  final Map<String, dynamic> r = getBrilliant(2, 10000, false);
  List<int> br = sortInts(r["bc"]!);
  br = br.sublist(0, 100);
  int i = 0;
  while (i < br.length) {
    print([(br[i]).toString().padLeft(4, " ") + " ", false].join(" "));
    if ((i + 1) % 10 == 0) {
    print(["", true].join(" "));
  }
    i = i + 1;
  }
  print(["", true].join(" "));
  int k = 1;
  while (k <= 13) {
    final limit = pow(10, k).toInt();
    final Map<String, dynamic> r2 = getBrilliant(k, limit, true);
    final total = r2["bc"]!;
    final next = r2["next"]!;
    final String climit = commatize(limit);
    final String ctotal = commatize(total + 1);
    final String cnext = commatize(next);
    print("First >= " + climit.padLeft(18, " ") + " is " + ctotal.padLeft(14, " ") + " in the series: " + cnext.padLeft(18, " "));
    k = k + 1;
  }
}

void _start() {
  main();
}
