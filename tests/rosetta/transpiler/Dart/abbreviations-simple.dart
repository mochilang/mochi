// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  List<String> fields(String s) {
  List<String> words = [];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    final String ch = s.substring(i, i + 1);
    if (ch == " " || ch == "\n" || ch == "	") {
    if (cur.length > 0) {
    words = [...words, cur];
    cur = "";
  };
  } else {
    cur = cur + ch;
  }
    i = i + 1;
  }
  if (cur.length > 0) {
    words = [...words, cur];
  }
  return words;
}
  String padRight(String s, int width) {
  String out = s;
  int i = s.length;
  while (i < width) {
    out = out + " ";
    i = i + 1;
  }
  return out;
}
  String join(List<String> xs, String sep) {
  String res = "";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    res = res + sep;
  }
    res = res + xs[i];
    i = i + 1;
  }
  return res;
}
  int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && str.substring(0, 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  final Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = n * 10 + digits[str.substring(i, i + 1)]!;
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}
  bool isDigits(String s) {
  if (s.length == 0) {
    return false;
  }
  int i = 0;
  while (i < s.length) {
    final String ch = s.substring(i, i + 1);
    if (ch.compareTo("0") < 0 || ch.compareTo("9") > 0) {
    return false;
  }
    i = i + 1;
  }
  return true;
}
  Map<String, dynamic> readTable(String table) {
  final List<String> toks = fields(table);
  List<String> cmds = [];
  List<int> mins = [];
  int i = 0;
  while (i < toks.length) {
    final String cmd = toks[i];
    int minlen = cmd.length;
    i = i + 1;
    if (i < toks.length && isDigits(toks[i])) {
    final num = int.parse(toks[i]);
    if (num.toString().compareTo(1.toString()) >= 0 && num.toString().compareTo(cmd.length.toString()) < 0) {
    minlen = num;
    i = i + 1;
  };
  }
    cmds = [...cmds, cmd];
    mins = [...mins, minlen];
  }
  return {"commands": cmds, "mins": mins};
}
  List<String> validate(List<String> commands, List<int> mins, List<String> words) {
  List<String> results = [];
  int wi = 0;
  while (wi < words.length) {
    final String w = words[wi];
    bool found = false;
    final int wlen = w.length;
    int ci = 0;
    while (ci < commands.length) {
    final String cmd = commands[ci];
    if (mins[ci] != 0 && wlen >= mins[ci] && wlen <= cmd.length) {
    final String c = cmd.toUpperCase();
    final String ww = w.toUpperCase();
    if (c.substring(0, wlen) == ww) {
    results = [...results, c];
    found = true;
    break;
  };
  }
    ci = ci + 1;
  }
    if (!found) {
    results = [...results, "*error*"];
  }
    wi = wi + 1;
  }
  return results;
}
  void main() {
  final String table = "" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 " + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate " + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 " + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load " + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 " + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 " + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left " + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ";
  final String sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin";
  final Map<String, dynamic> tbl = readTable(table);
  final List<String> commands = tbl["commands"]!! as List<String>;
  final List<int> mins = tbl["mins"]!! as List<int>;
  final List<String> words = fields(sentence);
  final List<String> results = validate(commands, mins, words);
  String out1 = "user words:";
  int k = 0;
  while (k < words.length) {
    out1 = out1 + " ";
    if (k < words.length - 1) {
    out1 = out1 + padRight(words[k], results[k].length);
  } else {
    out1 = out1 + words[k];
  }
    k = k + 1;
  }
  print(out1);
  print("full words: " + join(results, " "));
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
