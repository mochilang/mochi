// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class cds {
  int i;
  String s;
  List<int> b;
  Map<int, bool> m;
  cds({required this.i, required this.s, required this.b, required this.m});
}

List<int> copyList(List<int> src) {
  List<int> out = <int>[];
  for (int v in src) {
    out = [...out, v];
  }
  return out;
}

Map<int, bool> copyMap(Map<int, bool> src) {
  Map<int, bool> out = <int, bool>{};
  for (int k in src.keys) {
    out[k] = (src[k] ?? false);
  }
  return out;
}

cds deepcopy(cds c) {
  return cds(i: c.i, s: c.s, b: copyList(c.b), m: copyMap(c.m));
}

String cdsStr(cds c) {
  String bs = "[";
  int i = 0;
  while (i < c.b.length) {
    bs = bs + (c.b[i]).toString();
    if (i < c.b.length - 1) {
    bs = bs + " ";
  }
    i = i + 1;
  }
  bs = bs + "]";
  String ms = "map[";
  bool first = true;
  for (int k in c.m.keys) {
    if (!first) {
    ms = ms + " ";
  }
    ms = ms + (k).toString() + ":" + ((c.m[k] ?? false)).toString();
    first = false;
  }
  ms = ms + "]";
  return "{" + (c.i).toString() + " " + c.s + " " + bs + " " + ms + "}";
}

cds c1 = cds(i: 1, s: "one", b: [117, 110, 105, 116], m: {1: true});
cds c2 = deepcopy(c1);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(cdsStr(c1));
  print(cdsStr(c2));
  c1 = cds(i: 0, s: "nil", b: [122, 101, 114, 111], m: {1: false});
  print(cdsStr(c1));
  print(cdsStr(c2));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
