// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

Map<String, dynamic> newList() {
  return {"nodes": {}, "head": 0, "tail": 0, "nextID": 1};
}

Map<String, dynamic> newNode(Map<String, dynamic> l, dynamic v) {
  int id = l["nextID"]! as int;
  l["nextID"] = id + 1;
  Map<int, Map<String, dynamic>> nodes = l["nodes"]! as Map<int, Map<String, dynamic>>;
  Map<String, dynamic> n = {"id": id, "value": v, "next": 0, "prev": 0};
  nodes[id] = n;
  l["nodes"] = nodes;
  return n;
}

Map<String, dynamic> pushFront(Map<String, dynamic> l, dynamic v) {
  Map<String, dynamic> n = newNode(l, v);
  n["next"] = l["head"]!;
  if ((l["head"]! as int) != 0) {
    Map<int, Map<String, dynamic>> nodes = l["nodes"]! as Map<int, Map<String, dynamic>>;
    Map<String, dynamic> h = nodes[l["head"]! as int]!;
    h["prev"] = n["id"]!;
    nodes[h["id"]! as int] = h;
    l["nodes"] = nodes;
  } else {
    l["tail"] = n["id"]!;
  }
  l["head"] = n["id"]!;
  Map<int, Map<String, dynamic>> nodes2 = l["nodes"]! as Map<int, Map<String, dynamic>>;
  nodes2[n["id"]! as int] = n;
  l["nodes"] = nodes2;
  return n;
}

Map<String, dynamic> pushBack(Map<String, dynamic> l, dynamic v) {
  Map<String, dynamic> n = newNode(l, v);
  n["prev"] = l["tail"]!;
  if ((l["tail"]! as int) != 0) {
    Map<int, Map<String, dynamic>> nodes = l["nodes"]! as Map<int, Map<String, dynamic>>;
    Map<String, dynamic> t = nodes[l["tail"]! as int]!;
    t["next"] = n["id"]!;
    nodes[t["id"]! as int] = t;
    l["nodes"] = nodes;
  } else {
    l["head"] = n["id"]!;
  }
  l["tail"] = n["id"]!;
  Map<int, Map<String, dynamic>> nodes2 = l["nodes"]! as Map<int, Map<String, dynamic>>;
  nodes2[n["id"]! as int] = n;
  l["nodes"] = nodes2;
  return n;
}

Map<String, dynamic> insertBefore(Map<String, dynamic> l, int refID, dynamic v) {
  if (refID == 0) {
    return pushFront(l, v);
  }
  Map<int, Map<String, dynamic>> nodes = l["nodes"]! as Map<int, Map<String, dynamic>>;
  Map<String, dynamic> ref = nodes[refID]!;
  Map<String, dynamic> n = newNode(l, v);
  n["prev"] = ref["prev"]!;
  n["next"] = ref["id"]!;
  if ((ref["prev"]! as int) != 0) {
    Map<String, dynamic> p = nodes[ref["prev"]! as int]!;
    p["next"] = n["id"]!;
    nodes[p["id"]! as int] = p;
  } else {
    l["head"] = n["id"]!;
  }
  ref["prev"] = n["id"]!;
  nodes[refID] = ref;
  nodes[n["id"]! as int] = n;
  l["nodes"] = nodes;
  return n;
}

Map<String, dynamic> insertAfter(Map<String, dynamic> l, int refID, dynamic v) {
  if (refID == 0) {
    return pushBack(l, v);
  }
  Map<int, Map<String, dynamic>> nodes = l["nodes"]! as Map<int, Map<String, dynamic>>;
  Map<String, dynamic> ref = nodes[refID]!;
  Map<String, dynamic> n = newNode(l, v);
  n["next"] = ref["next"]!;
  n["prev"] = ref["id"]!;
  if ((ref["next"]! as int) != 0) {
    Map<String, dynamic> nx = nodes[ref["next"]! as int]!;
    nx["prev"] = n["id"]!;
    nodes[nx["id"]! as int] = nx;
  } else {
    l["tail"] = n["id"]!;
  }
  ref["next"] = n["id"]!;
  nodes[refID] = ref;
  nodes[n["id"]! as int] = n;
  l["nodes"] = nodes;
  return n;
}

void _main() {
  Map<String, dynamic> l = newList();
  Map<String, dynamic> e4 = pushBack(l, 4);
  Map<String, dynamic> e1 = pushFront(l, 1);
  insertBefore(l, e4["id"]! as int, 3);
  insertAfter(l, e1["id"]! as int, "two");
  int id = l["head"]! as int;
  Map<int, Map<String, dynamic>> nodes = l["nodes"]! as Map<int, Map<String, dynamic>>;
  while (id != 0) {
    Map<String, dynamic> node = nodes[id]!;
    print((node["value"]!).toString());
    id = node["next"]! as int;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
