// Generated by Mochi transpiler
class BigRat {
  BigInt num;
  BigInt den;
  BigRat(this.num, [BigInt? d]) : den = d ?? BigInt.one {
    if (den.isNegative) { num = -num; den = -den; }
    var g = num.gcd(den);
    num = num ~/ g;
    den = den ~/ g;
  }
  BigRat add(BigRat o) => BigRat(num * o.den + o.num * den, den * o.den);
  BigRat sub(BigRat o) => BigRat(num * o.den - o.num * den, den * o.den);
  BigRat mul(BigRat o) => BigRat(num * o.num, den * o.den);
  BigRat div(BigRat o) => BigRat(num * o.den, den * o.num);
}

BigRat _bigrat(dynamic n, [dynamic d]) {
  if (n is BigRat && d == null) return BigRat(n.num, n.den);
  BigInt numer;
  BigInt denom = d == null ? BigInt.one : (d is BigInt ? d : BigInt.from((d as num).toInt()));
  if (n is BigRat) { numer = n.num; denom = n.den; }
  else if (n is BigInt) { numer = n; }
  else if (n is int) { numer = BigInt.from(n); }
  else if (n is num) { numer = BigInt.from(n.toInt()); }
  else { numer = BigInt.zero; }
  return BigRat(numer, denom);
}
BigInt _num(BigRat r) => r.num;
BigInt _denom(BigRat r) => r.den;
BigRat _add(BigRat a, BigRat b) => a.add(b);
BigRat _sub(BigRat a, BigRat b) => a.sub(b);
BigRat _mul(BigRat a, BigRat b) => a.mul(b);
BigRat _div(BigRat a, BigRat b) => a.div(b);

BigRat bernoulli(int n) {
  List<BigRat> a = [];
  int m = 0;
  while (m <= n) {
    a = [...a, _div(_bigrat(1), _bigrat(m + 1))];
    int j = m;
    while (j >= 1) {
    a[j - 1] = _mul(_bigrat(j), _sub(a[j - 1], a[j]));
    j = j - 1;
  }
    m = m + 1;
  }
  return a[0];
}

String padStart(String s, int width, String pad) {
  String out = s;
  while (out.length < width) {
    out = pad + out;
  }
  return out;
}

void main() {
  for (int i = 0; i < 61; i++) {
    final BigRat b = bernoulli(i);
    if (b != 0) {
    final String numStr = (b).toString();
    final String denStr = (1).toString();
    print("B(" + (i).toString().padLeft(2, " ") + ") =" + numStr.padLeft(45, " ") + "/" + denStr);
  }
  }
}
