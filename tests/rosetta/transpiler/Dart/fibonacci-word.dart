// Generated by Mochi transpiler
import 'dart:math' as math;
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

num entropy(String s) {
  Map<String, int> counts = <String, int>{};
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (counts.containsKey(ch)) {
    counts[ch] = (counts[ch]! + 1).toInt();
  } else {
    counts[ch] = 1;
  }
    i = i + 1;
  }
  num hm = 0.0;
  for (var k in counts.keys) {
    num c = counts[k] as num;
    hm = hm + c * (math.log(c) ~/ math.log(2.0));
  }
  num l = (s.length).toDouble();
  return math.log(l) ~/ math.log(2.0) - hm / l;
}

String fibonacciWord(int n) {
  String a = "1";
  String b = "0";
  int i = 1;
  while (i < n) {
    String tmp = b;
    b = b + a;
    a = tmp;
    i = i + 1;
  }
  return a;
}

void _main() {
  print(pad("N", 3) + pad("Length", 9) + "  Entropy      Word");
  int n = 1;
  while (n < 10) {
    String s = fibonacciWord(n);
    print(pad((n).toString(), 3) + pad((s.length).toString(), 9) + "  " + fmt(entropy(s)) + "  " + s);
    n = n + 1;
  }
  while (n <= 37) {
    String s = fibonacciWord(n);
    print(pad((n).toString(), 3) + pad((s.length).toString(), 9) + "  " + fmt(entropy(s)));
    n = n + 1;
  }
}

String pad(String s, int w) {
  String t = s;
  while (t.length < w) {
    t = " " + t;
  }
  return t;
}

String fmt(num x) {
  num y = floorf(x * 100000000.0 + 0.5) / 100000000.0;
  String s = (y).toString();
  int dot = s.indexOf(".");
  if (dot == 0 - 1) {
    s = s + ".00000000";
  } else {
    int d = s.length - dot - 1;
    while (d < 8) {
    s = s + "0";
    d = d + 1;
  };
  }
  return s;
}

num floorf(num x) {
  int y = (x).toInt();
  return (y).toDouble();
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return 0 - 1;
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
