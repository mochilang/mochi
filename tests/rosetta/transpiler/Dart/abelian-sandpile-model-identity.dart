// Generated by Mochi transpiler
List<List<int>> neighborsList() {
  return [[1, 3], [0, 2, 4], [1, 5], [0, 4, 6], [1, 3, 5, 7], [2, 4, 8], [3, 7], [4, 6, 8], [5, 7]];
}

List<int> plus(List<int> a, List<int> b) {
  List<int> res = [];
  int i = 0;
  while (i < a.length) {
    res = [...res, a[i] + b[i]];
    i = i + 1;
  }
  return res;
}

bool isStable(List<int> p) {
  for (var v in p) {
    if (v > 3) {
    return false;
  }
  }
  return true;
}

int topple(List<int> p) {
  final List<List<int>> neighbors = neighborsList();
  int i = 0;
  while (i < p.length) {
    if (p[i] > 3) {
    p[i] = p[i] - 4;
    final List<int> nbs = neighbors[i];
    for (var j in nbs) {
    p[j] = p[j] + 1;
  };
    return 0;
  }
    i = i + 1;
  }
  return 0;
}

String pileString(List<int> p) {
  String s = "";
  int r = 0;
  while (r < 3) {
    int c = 0;
    while (c < 3) {
    s = s + (p[3 * r + c]).toString() + " ";
    c = c + 1;
  }
    s = s + "\n";
    r = r + 1;
  }
  return s;
}

List<int> s4 = [4, 3, 3, 3, 1, 2, 0, 2, 3];
List<int> s1 = [1, 2, 0, 2, 1, 1, 0, 1, 3];
List<int> s2 = [2, 1, 3, 1, 0, 1, 0, 1, 0];
List<int> s3_a = plus(s1, s2);
List<int> s3_b = plus(s2, s1);
List<int> s3 = [3, 3, 3, 3, 3, 3, 3, 3, 3];
List<int> s3_id = [2, 1, 2, 1, 0, 1, 2, 1, 2];
List<int> s4b = plus(s3, s3_id);
List<int> s5 = plus(s3_id, s3_id);
void main() {
  print("Avalanche of topplings:\n");
  print(pileString(s4));
  while (!isStable(s4)) {
    topple(s4);
    print(pileString(s4));
  }
  print("Commutative additions:\n");
  while (!isStable(s3_a)) {
    topple(s3_a);
  }
  while (!isStable(s3_b)) {
    topple(s3_b);
  }
  print(pileString(s1) + "\nplus\n\n" + pileString(s2) + "\nequals\n\n" + pileString(s3_a));
  print("and\n\n" + pileString(s2) + "\nplus\n\n" + pileString(s1) + "\nalso equals\n\n" + pileString(s3_b));
  print("Addition of identity sandpile:\n");
  while (!isStable(s4b)) {
    topple(s4b);
  }
  print(pileString(s3) + "\nplus\n\n" + pileString(s3_id) + "\nequals\n\n" + pileString(s4b));
  print("Addition of identities:\n");
  while (!isStable(s5)) {
    topple(s5);
  }
  print(pileString(s3_id) + "\nplus\n\n" + pileString(s3_id) + "\nequals\n\n" + pileString(s5));
}
