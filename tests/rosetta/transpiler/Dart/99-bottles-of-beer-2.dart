// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<String> fields(String s) {
  List<String> words = <String>[];
  dynamic cur = "";
  dynamic i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == " " || ch == "\n" || ch == "	") {
    if (cur.length > 0) {
    words = [...words, cur];
    cur = "";
  };
  } else {
    cur = cur + ch;
  }
    i = i + 1;
  }
  if (cur.length > 0) {
    words = [...words, cur];
  }
  return words;
}

String join(List<String> xs, String sep) {
  dynamic res = "";
  dynamic i = 0;
  while (i < xs.length) {
    if (i > 0) {
    res = res + sep;
  }
    res = res + xs[(i).toInt()];
    i = i + 1;
  }
  return res;
}

String numberName(int n) {
  List<String> small = ["no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"];
  List<String> tens = ["ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"];
  if (n < 0) {
    return "";
  }
  if (n < 20) {
    return small[n];
  }
  if (n < 100) {
    dynamic t = tens[n ~/ 10 as int];
    dynamic s = n % 10;
    if (s > 0) {
    t = t + " " + small[(s).toInt()];
  };
    return t;
  }
  return "";
}

String pluralizeFirst(String s, int n) {
  if (n == 1) {
    return s;
  }
  List<String> w = fields(s);
  if (w.length > 0) {
    w[0] = w[0] + "s";
  }
  return join(w, " ");
}

int randInt(int seed, int n) {
  int next = (seed * 1664525 + 1013904223) % 2147483647;
  return next % n;
}

String slur(String p, int d) {
  if (p.length <= 2) {
    return p;
  }
  List<String> a = <String>[];
  dynamic i = 1;
  while (i < p.length - 1) {
    a = [...a, _substr(p, i, i + 1)];
    i = i + 1;
  }
  dynamic idx = a.length - 1;
  dynamic seed = d;
  while (idx >= 1) {
    seed = (seed * 1664525 + 1013904223) % 2147483647;
    if (seed % 100 >= d) {
    num j = seed % (idx + 1);
    String tmp = a[(idx).toInt()];
    a[(idx).toInt()] = a[(j).toInt()];
    a[(j).toInt()] = tmp;
  }
    idx = idx - 1;
  }
  dynamic s = _substr(p, 0, 1);
  dynamic k = 0;
  while (k < a.length) {
    s = s + a[(k).toInt()];
    k = k + 1;
  }
  s = s + _substr(p, p.length - 1, p.length);
  List<String> w = fields(s);
  return join(w, " ");
}

void _main() {
  dynamic i = 99;
  while (i > 0) {
    print(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer on the wall", i));
    print(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer", i));
    print(slur("take one", i) + " " + slur("down", i) + " " + slur("pass it around", i));
    print(slur(numberName((i - 1).toInt()), i) + " " + pluralizeFirst(slur("bottle of", i), (i - 1).toInt()) + " " + slur("beer on the wall", i));
    i = i - 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
