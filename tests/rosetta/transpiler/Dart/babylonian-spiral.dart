// Generated by Mochi transpiler
List<Map<String, int>> push(List<Map<String, int>> h, Map<String, int> it) {
  h = [...h, it];
  int i = h.length - 1;
  while (i > 0 && h[i - 1]!["s"]! > h[i]!["s"]!) {
    final Map<String, int> tmp = h[i - 1];
    h[i - 1] = h[i];
    h[i] = tmp;
    i = i - 1;
  }
  return h;
}

Map<String, dynamic> step(List<Map<String, int>> h, int nv, List<int> dir) {
  while (h.length == 0 || nv * nv <= h[0]!["s"]!) {
    h = push(h, {"s": nv * nv, "a": nv, "b": 0});
    nv = nv + 1;
  }
  final int s = h[0]!["s"]!;
  List<List<int>> v = [];
  while (h.length > 0 && h[0]!["s"]! == s) {
    final Map<String, int> it = h[0];
    h = h.sublist(1, h.length);
    v = [...v, [it["a"]!, it["b"]!]];
    if (it["a"]! > it["b"]!) {
    h = push(h, {"s": it["a"]! * it["a"]! + (it["b"]! + 1) * (it["b"]! + 1), "a": it["a"]!, "b": it["b"]! + 1});
  }
  }
  List<List<int>> list = [];
  for (var p in v) {
    list = [...list, p];
  }
  List<List<int>> temp = list;
  for (var p in temp) {
    if (p[0] != p[1]) {
    list = [...list, [p[1], p[0]]];
  }
  }
  temp = list;
  for (var p in temp) {
    if (p[1] != 0) {
    list = [...list, [p[0], -p[1]]];
  }
  }
  temp = list;
  for (var p in temp) {
    if (p[0] != 0) {
    list = [...list, [-p[0], p[1]]];
  }
  }
  int bestDot = -999999999;
  List<int> best = dir;
  for (var p in list) {
    final int cross = p[0] * dir[1] - p[1] * dir[0];
    if (cross >= 0) {
    final int dot = p[0] * dir[0] + p[1] * dir[1];
    if (dot > bestDot) {
    bestDot = dot;
    best = p;
  };
  }
  }
  return {"d": best, "heap": h, "n": nv};
}

List<List<int>> positions(int n) {
  List<List<int>> pos = [];
  int x = 0;
  int y = 0;
  List<int> dir = [0, 1];
  List<Map<String, int>> heap = [];
  int nv = 1;
  int i = 0;
  while (i < n) {
    pos = [...pos, [x, y]];
    final Map<String, dynamic> st = step(heap, nv, dir);
    dir = st["d"]!! as List<int>;
    heap = st["heap"]!! as List<Map<String, int>>;
    nv = st["n"]!! as int;
    x = x + dir[0];
    y = y + dir[1];
    i = i + 1;
  }
  return pos;
}

String pad(String s, int w) {
  String r = s;
  while (r.length < w) {
    r = r + " ";
  }
  return r;
}

void main() {
  final List<List<int>> pts = positions(40);
  print("The first 40 Babylonian spiral points are:");
  String line = "";
  int i = 0;
  while (i < pts.length) {
    final List<int> p = pts[i];
    final String s = pad("(" + (p[0]).toString() + ", " + (p[1]).toString() + ")", 10);
    line = line + s;
    if ((i + 1) % 10 == 0) {
    print(line);
    line = "";
  }
    i = i + 1;
  }
}

void _start() {
  main();
}
