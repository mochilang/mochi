// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

num PI = 3.141592653589793;
num _mod(num x, num m) {
  return x - (((x / m).toInt()).toDouble()) * m;
}

num _sin(num x) {
  num y = _mod(x + PI, 2.0 * PI) - PI;
  num y2 = y * y;
  num y3 = y2 * y;
  num y5 = y3 * y2;
  num y7 = y5 * y2;
  return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0;
}

num _cos(num x) {
  num y = _mod(x + PI, 2.0 * PI) - PI;
  num y2 = y * y;
  num y4 = y2 * y2;
  num y6 = y4 * y2;
  return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0;
}

int width = 80;
int height = 40;
int depth = 6;
num angle = 12.0;
num length = 12.0;
num frac = 0.8;
List<List<String>> clearGrid() {
  List<List<String>> g = <List<String>>[];
  int y = 0;
  while (y < height) {
    List<String> row = <String>[];
    int x = 0;
    while (x < width) {
    row = [...row, " "];
    x = x + 1;
  }
    g = ([...g, row] as List).map((e) => List<String>.from(e)).toList();
    y = y + 1;
  }
  return g;
}

void drawPoint(List<List<String>> g, int x, int y) {
  if (x >= 0 && x < width && y >= 0 && y < height) {
    List<String> row = g[y];
    row[x] = "#";
    g[y] = row;
  }
}

void bresenham(int x0, int y0, int x1, int y1, List<List<String>> g) {
  int dx = x1 - x0;
  if (dx < 0) {
    dx = -dx;
  }
  int dy = y1 - y0;
  if (dy < 0) {
    dy = -dy;
  }
  int sx = -1;
  if (x0 < x1) {
    sx = 1;
  }
  int sy = -1;
  if (y0 < y1) {
    sy = 1;
  }
  int err = dx - dy;
  while (true) {
    drawPoint(g, x0, y0);
    if (x0 == x1 && y0 == y1) {
    break;
  }
    int e2 = 2 * err;
    if (e2 > -dy) {
    err = err - dy;
    x0 = x0 + sx;
  }
    if (e2 < dx) {
    err = err + dx;
    y0 = y0 + sy;
  }
  }
}

void ftree(List<List<String>> g, num x, num y, num dist, num dir, int d) {
  num rad = dir * PI / 180.0;
  num x2 = x + dist * _sin(rad);
  num y2 = y - dist * _cos(rad);
  bresenham((x).toInt(), (y).toInt(), (x2).toInt(), (y2).toInt(), g);
  if (d > 0) {
    ftree(g, x2, y2, dist * frac, dir - angle, d - 1);
    ftree(g, x2, y2, dist * frac, dir + angle, d - 1);
  }
}

String render(List<List<String>> g) {
  String out = "";
  int y = 0;
  while (y < height) {
    String line = "";
    int x = 0;
    while (x < width) {
    line = line + g[y][x];
    x = x + 1;
  }
    out = out + line;
    if (y < height - 1) {
    out = out + "\n";
  }
    y = y + 1;
  }
  return out;
}

void _main() {
  List<List<String>> grid = clearGrid();
  ftree(grid, (width ~/ 2).toDouble(), (height - 1).toDouble(), length, 0.0, depth);
  print(render(grid));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
