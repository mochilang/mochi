// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

num PI = 3.141592653589793;
List<List<num>> conv2d(List<List<num>> img, List<List<num>> k) {
  int h = img.length;
  int w = img[0].length;
  int n = k.length;
  int half = n ~/ 2;
  List<List<num>> out = <List<num>>[];
  int y = 0;
  while (y < h) {
    List<num> row = <num>[];
    int x = 0;
    while (x < w) {
    num sum = 0.0;
    int j = 0;
    while (j < n) {
    int i = 0;
    while (i < n) {
    int yy = y + j - half;
    if (yy < 0) {
    yy = 0;
  }
    if (yy >= h) {
    yy = h - 1;
  }
    int xx = x + i - half;
    if (xx < 0) {
    xx = 0;
  }
    if (xx >= w) {
    xx = w - 1;
  }
    sum = sum + img[yy][xx] * k[j][i];
    i = i + 1;
  }
    j = j + 1;
  }
    row = [...row, sum];
    x = x + 1;
  }
    out = [...out, row];
    y = y + 1;
  }
  return out;
}

List<List<num>> gradient(List<List<num>> img) {
  List<List<num>> hx = [[-1.0, 0.0, 1.0], [-2.0, 0.0, 2.0], [-1.0, 0.0, 1.0]];
  List<List<num>> hy = [[1.0, 2.0, 1.0], [0.0, 0.0, 0.0], [-1.0, -2.0, -1.0]];
  List<List<num>> gx = conv2d(img, hx);
  List<List<num>> gy = conv2d(img, hy);
  int h = img.length;
  int w = img[0].length;
  List<List<num>> out = <List<num>>[];
  int y = 0;
  while (y < h) {
    List<num> row = <num>[];
    int x = 0;
    while (x < w) {
    num g = gx[y][x] * gx[y][x] + gy[y][x] * gy[y][x];
    row = [...row, g];
    x = x + 1;
  }
    out = [...out, row];
    y = y + 1;
  }
  return out;
}

List<List<int>> threshold(List<List<num>> g, num t) {
  int h = g.length;
  int w = g[0].length;
  List<List<int>> out = <List<int>>[];
  int y = 0;
  while (y < h) {
    List<int> row = <int>[];
    int x = 0;
    while (x < w) {
    if (g[y][x] >= t) {
    row = [...row, 1];
  } else {
    row = [...row, 0];
  }
    x = x + 1;
  }
    out = [...out, row];
    y = y + 1;
  }
  return out;
}

void printMatrix(List<List<int>> m) {
  int y = 0;
  while (y < m.length) {
    String line = "";
    int x = 0;
    while (x < m[0].length) {
    line = line + (m[y][x]).toString();
    if (x < m[0].length - 1) {
    line = line + " ";
  }
    x = x + 1;
  }
    print(line);
    y = y + 1;
  }
}

void _main() {
  List<List<num>> img = [[0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]];
  List<List<num>> g = gradient(img);
  List<List<int>> edges = threshold(g, 1020.0 * 1020.0);
  printMatrix(edges);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
