// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int parseInt(String str) {
  dynamic i = 0;
  dynamic neg = false;
  if (str.length > 0 && _substr(str, 0, 1) == "-") {
    neg = true;
    i = 1;
  }
  dynamic n = 0;
  dynamic digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = n * 10 + digits[_substr(str, i, i + 1)];
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

int rand10000() {
  return _now() % 10000;
}

int value = 0;
bool done = false;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(["Value:", value].join(" "));
  while (!done) {
    print("i=increment, r=random, s num=set, q=quit:");
    dynamic line = stdin.readLineSync() ?? '';
    if (line == "i") {
    value = value + 1;
    print(["Value:", value].join(" "));
  } else {
    if (line == "r") {
    print("Set random value? (y/n)");
    dynamic ans = stdin.readLineSync() ?? '';
    if (ans == "y") {
    value = rand10000();
    print(["Value:", value].join(" "));
  };
  } else {
    if (line.length > 2 && _substr(line, 0, 2) == "s ") {
    value = parseInt(_substr(line, 2, line.length));
    print(["Value:", value].join(" "));
  } else {
    if (line == "q") {
    done = true;
  } else {
    print("Unknown command");
  };
  };
  };
  }
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
