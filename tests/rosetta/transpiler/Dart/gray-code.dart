// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int xor(int a, int b) {
  dynamic res = 0;
  dynamic bit = 1;
  dynamic x = a;
  dynamic y = b;
  while (x > 0 || y > 0) {
    if ((x % 2 + y % 2) % 2 == 1) {
    res = res + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
  }
  return res;
}

int enc(int b) {
  return xor(b, b ~/ 2);
}

int dec(int g) {
  dynamic b = 0;
  dynamic x = g;
  while (x > 0) {
    b = xor(b, x);
    x = x ~/ 2;
  }
  return b;
}

String binary(int n) {
  if (n == 0) {
    return "0";
  }
  dynamic s = "";
  dynamic x = n;
  while (x > 0) {
    if (x % 2 == 1) {
    s = "1" + s;
  } else {
    s = "0" + s;
  }
    x = x ~/ 2;
  }
  return s;
}

String pad5(String s) {
  dynamic p = s;
  while (p.length < 5) {
    p = "0" + p;
  }
  return p;
}

void _main() {
  print("decimal  binary   gray    decoded");
  dynamic b = 0;
  while (b < 32) {
    dynamic g = enc(b);
    dynamic d = dec(g);
    print("  " + pad5(binary(b)) + "   " + pad5(binary(g)) + "   " + pad5(binary(d)) + "  " + (d).toString());
    b = b + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
