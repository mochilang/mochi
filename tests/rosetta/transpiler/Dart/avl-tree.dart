// Generated by Mochi transpiler
Map<String, dynamic> Node(int data) {
  return {"Data": data, "Balance": 0, "Link": [null, null]};
}

dynamic getLink(Map<String, dynamic> n, int dir) {
  return n["Link"]!! as List<dynamic>[dir];
}

void setLink(Map<String, dynamic> n, int dir, dynamic v) {
  List<dynamic> links = n["Link"]!! as List<dynamic>;
  links[dir] = v;
  n["Link"] = links;
}

int opp(int dir) {
  return 1 - dir;
}

Map<String, dynamic> single(Map<String, dynamic> root, int dir) {
  var tmp = getLink(root, opp(dir));
  setLink(root, opp(dir), getLink(tmp, dir));
  setLink(tmp, dir, root);
  return tmp;
}

Map<String, dynamic> double(Map<String, dynamic> root, int dir) {
  var tmp = getLink(getLink(root, opp(dir)), dir);
  setLink(getLink(root, opp(dir)), dir, getLink(tmp, opp(dir)));
  setLink(tmp, opp(dir), getLink(root, opp(dir)));
  setLink(root, opp(dir), tmp);
  tmp = getLink(root, opp(dir));
  setLink(root, opp(dir), getLink(tmp, dir));
  setLink(tmp, dir, root);
  return tmp;
}

void adjustBalance(Map<String, dynamic> root, int dir, int bal) {
  Map<String, dynamic> n = getLink(root, dir) as Map<String, dynamic>;
  Map<String, dynamic> nn = getLink(n, opp(dir)) as Map<String, dynamic>;
  if (nn["Balance"]! == 0) {
    root["Balance"] = 0;
    n["Balance"] = 0;
  } else {
    if (nn["Balance"]! == bal) {
    root["Balance"] = -bal;
    n["Balance"] = 0;
  } else {
    root["Balance"] = 0;
    n["Balance"] = bal;
  };
  }
  nn["Balance"] = 0;
}

Map<String, dynamic> insertBalance(Map<String, dynamic> root, int dir) {
  Map<String, dynamic> n = getLink(root, dir) as Map<String, dynamic>;
  int bal = 2 * dir - 1;
  if (n["Balance"]! == bal) {
    root["Balance"] = 0;
    n["Balance"] = 0;
    return single(root, opp(dir));
  }
  adjustBalance(root, dir, bal);
  return double(root, opp(dir));
}

Map<String, dynamic> insertR(dynamic root, int data) {
  if (root == null) {
    return {"node": Node(data), "done": false};
  }
  Map<String, dynamic> node = root as Map<String, dynamic>;
  int dir = 0;
  if ((node["Data"]!! as int) < data) {
    dir = 1;
  }
  Map<String, dynamic> r = insertR(getLink(node, dir), data);
  setLink(node, dir, r["node"]!);
  if (r["done"]!) {
    return {"node": node, "done": true};
  }
  node["Balance"] = (node["Balance"]!! as int) + 2 * dir - 1;
  if (node["Balance"]! == 0) {
    return {"node": node, "done": true};
  }
  if (node["Balance"]! == 1 || node["Balance"]! == -1) {
    return {"node": node, "done": false};
  }
  return {"node": insertBalance(node, dir), "done": true};
}

dynamic Insert(dynamic tree, int data) {
  final Map<String, dynamic> r = insertR(tree, data);
  return r["node"]!;
}

Map<String, dynamic> removeBalance(Map<String, dynamic> root, int dir) {
  Map<String, dynamic> n = getLink(root, opp(dir)) as Map<String, dynamic>;
  int bal = 2 * dir - 1;
  if (n["Balance"]! == -bal) {
    root["Balance"] = 0;
    n["Balance"] = 0;
    return {"node": single(root, dir), "done": false};
  }
  if (n["Balance"]! == bal) {
    adjustBalance(root, opp(dir), -bal);
    return {"node": double(root, dir), "done": false};
  }
  root["Balance"] = -bal;
  n["Balance"] = bal;
  return {"node": single(root, dir), "done": true};
}

Map<String, dynamic> removeR(dynamic root, int data) {
  if (root == null) {
    return {"node": null, "done": false};
  }
  Map<String, dynamic> node = root as Map<String, dynamic>;
  if ((node["Data"]!! as int) == data) {
    if (getLink(node, 0) == null) {
    return {"node": getLink(node, 1), "done": false};
  };
    if (getLink(node, 1) == null) {
    return {"node": getLink(node, 0), "done": false};
  };
    var heir = getLink(node, 0);
    while (getLink(heir, 1) != null) {
    heir = getLink(heir, 1);
  };
    node["Data"] = heir["Data"];
    data = heir["Data"]! as int;
  }
  int dir = 0;
  if ((node["Data"]!! as int) < data) {
    dir = 1;
  }
  Map<String, dynamic> r = removeR(getLink(node, dir), data);
  setLink(node, dir, r["node"]!);
  if (r["done"]!) {
    return {"node": node, "done": true};
  }
  node["Balance"] = (node["Balance"]!! as int) + 1 - 2 * dir;
  if (node["Balance"]! == 1 || node["Balance"]! == -1) {
    return {"node": node, "done": true};
  }
  if (node["Balance"]! == 0) {
    return {"node": node, "done": false};
  }
  return removeBalance(node, dir);
}

dynamic Remove(dynamic tree, int data) {
  final Map<String, dynamic> r = removeR(tree, data);
  return r["node"]!;
}

String indentStr(int n) {
  String s = "";
  int i = 0;
  while (i < n) {
    s = s + " ";
    i = i + 1;
  }
  return s;
}

void dumpNode(dynamic node, int indent, bool comma) {
  final String sp = indentStr(indent);
  if (node == null) {
    String line = sp + "null";
    if (comma) {
    line = line + ",";
  };
    print(line);
  } else {
    print(sp + "{");
    print(indentStr(indent + 3) + "\"Data\": " + (node["Data"]).toString() + ",");
    print(indentStr(indent + 3) + "\"Balance\": " + (node["Balance"]).toString() + ",");
    print(indentStr(indent + 3) + "\"Link\": [");
    dumpNode(getLink(node, 0), indent + 6, true);
    dumpNode(getLink(node, 1), indent + 6, false);
    print(indentStr(indent + 3) + "]");
    String end = sp + "}";
    if (comma) {
    end = end + ",";
  };
    print(end);
  }
}

void dump(dynamic node, int indent) {
  dumpNode(node, indent, false);
}

void main() {
  var tree = null;
  print("Empty tree:");
  dump(tree, 0);
  print("");
  print("Insert test:");
  tree = Insert(tree, 3);
  tree = Insert(tree, 1);
  tree = Insert(tree, 4);
  tree = Insert(tree, 1);
  tree = Insert(tree, 5);
  dump(tree, 0);
  print("");
  print("Remove test:");
  tree = Remove(tree, 3);
  tree = Remove(tree, 1);
  Map<String, dynamic> t = tree as Map<String, dynamic>;
  t["Balance"] = 0;
  tree = t;
  dump(tree, 0);
}

void _start() {
  main();
}
