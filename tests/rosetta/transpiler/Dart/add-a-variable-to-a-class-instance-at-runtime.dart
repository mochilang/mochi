// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class SomeStruct {
  Map<String, String> runtimeFields;
  SomeStruct({required this.runtimeFields});
}

void _main() {
  SomeStruct ss = SomeStruct(runtimeFields: {});
  print("Create two fields at runtime: \n");
  int i = 1;
  while (i <= 2) {
    print("  Field #" + (i).toString() + ":\n");
    print("       Enter name  : ");
    String name = stdin.readLineSync() ?? '';
    print("       Enter value : ");
    String value = stdin.readLineSync() ?? '';
    Map<String, String> fields = ss.runtimeFields;
    fields[name] = value;
    ss.runtimeFields = fields;
    print("\n");
    i = i + 1;
  }
  while (true) {
    print("Which field do you want to inspect ? ");
    String name = stdin.readLineSync() ?? '';
    if (ss.runtimeFields.containsKey(name)) {
    String value = ss.runtimeFields[name]!!;
    print("Its value is '" + value + "'");
    return;
  } else {
    print("There is no field of that name, try again\n");
  }
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
