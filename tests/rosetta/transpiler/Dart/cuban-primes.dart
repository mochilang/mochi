// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int modPow(int base, int exp, int m) {
  int result = 1 % m;
  int b = base % m;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % m;
  }
    b = b * b % m;
    e = e ~/ 2 as int;
  }
  return result;
}

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  for (int p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) {
    if (n % p == 0) {
    return n == p;
  }
  }
  int d = n - 1;
  int s = 0;
  while (d % 2 == 0) {
    d = d ~/ 2;
    s = s + 1;
  }
  for (int a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]) {
    if (a % n == 0) {
    return true;
  }
    int x = modPow(a, d, n);
    if (x == 1 || x == n - 1) {
    continue;
  }
    int r = 1;
    bool passed = false;
    while (r < s) {
    x = x * x % n;
    if (x == n - 1) {
    passed = true;
    break;
  }
    r = r + 1;
  }
    if (!passed) {
    return false;
  }
  }
  return true;
}

String commatize(int n) {
  String s = (n).toString();
  int i = s.length - 3;
  while (i > 0) {
    s = _substr(s, 0, i) + "," + _substr(s, i, s.length);
    i = i - 3;
  }
  return s;
}

String pad(String s, int width) {
  String out = s;
  while (out.length < width) {
    out = " " + out;
  }
  return out;
}

String join(List<String> xs, String sep) {
  String res = "";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    res = res + sep;
  }
    res = res + xs[i];
    i = i + 1;
  }
  return res;
}

String formatRow(List<String> row) {
  List<String> padded = <String>[];
  int i = 0;
  while (i < row.length) {
    padded = [...padded, pad(row[i], 9)];
    i = i + 1;
  }
  return "[" + join(padded, " ") + "]";
}

void _main() {
  List<String> cubans = <String>[];
  int cube1 = 1;
  int count = 0;
  int cube100k = 0;
  int i = 1;
  while (true) {
    int j = i + 1;
    int cube2 = j * j * j;
    int diff = cube2 - cube1;
    if (isPrime(diff)) {
    if (count < 200) {
    cubans = [...cubans, commatize(diff)];
  };
    count = count + 1;
    if (count == 100000) {
    cube100k = diff;
    break;
  };
  }
    cube1 = cube2;
    i = i + 1;
  }
  print("The first 200 cuban primes are:-");
  int row = 0;
  while (row < 20) {
    List<String> slice = <String>[];
    int k = 0;
    while (k < 10) {
    slice = [...slice, cubans[row * 10 + k]];
    k = k + 1;
  }
    print(formatRow(slice));
    row = row + 1;
  }
  print("\nThe 100,000th cuban prime is " + commatize(cube100k));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
