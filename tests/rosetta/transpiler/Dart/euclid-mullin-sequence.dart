// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

BigInt zero = BigInt.from(0);
BigInt one = BigInt.from(1);
BigInt two = BigInt.from(2);
BigInt three = BigInt.from(3);
BigInt four = BigInt.from(4);
BigInt five = BigInt.from(5);
BigInt six = BigInt.from(6);
BigInt ten = BigInt.from(10);
BigInt k100 = BigInt.from(100000);
BigInt gcd(BigInt a, BigInt b) {
  BigInt x = a;
  BigInt y = b;
  while (y != zero) {
    BigInt t = x % y;
    x = y;
    y = t;
  }
  return x;
}

BigInt absBig(BigInt x) {
  if (x < zero) {
    return zero - x;
  }
  return x;
}

BigInt pollardRho(BigInt n, BigInt c) {
  BigInt g(BigInt x, BigInt y) {
  BigInt x2 = x * x;
  x2 = x2 + c;
  return x2 % y;
}
  BigInt x = BigInt.from(2);
  BigInt y = BigInt.from(2);
  BigInt z = BigInt.from(1);
  BigInt d = BigInt.from(0);
  int count = 0;
  while (true) {
    x = g(x, n);
    y = g(g(y, n), n);
    d = absBig(x - y);
    d = d % n;
    z = z * d;
    count = count + 1;
    if (count == 100) {
    d = gcd(z, n);
    if (d != one) {
    break;
  };
    z = one;
    count = 0;
  }
  }
  if (d == n) {
    return zero;
  }
  return d;
}

BigInt smallestPrimeFactorWheel(BigInt n, BigInt max) {
  if (n % two == zero) {
    return two;
  }
  if (n % three == zero) {
    return three;
  }
  if (n % five == zero) {
    return five;
  }
  BigInt k = BigInt.from(7);
  List<BigInt> inc = [four, two, four, two, four, six, two, six];
  int i = 0;
  while (k * k <= n) {
    if (n % k == zero) {
    return k;
  }
    k = k + inc[i];
    if (k > max) {
    break;
  }
    i = (i + 1) % 8;
  }
  return zero;
}

BigInt smallestPrimeFactor(BigInt n) {
  BigInt s = smallestPrimeFactorWheel(n, k100);
  if (s != zero) {
    return s;
  }
  BigInt c = BigInt.from(1);
  while (true) {
    BigInt d = pollardRho(n, c);
    if (d == zero) {
    if (c == ten) {
    return n;
  };
    c = c + one;
  } else {
    BigInt factor = smallestPrimeFactorWheel(d, d);
    BigInt s2 = smallestPrimeFactorWheel(n ~/ d, factor);
    if (s2 != zero) {
    if (s2 < factor) {
    return s2;
  } else {
    return factor;
  };
  };
    return factor;
  }
  }
}

void _main() {
  int k = 19;
  print("First " + (k).toString() + " terms of the Euclidâ€“Mullin sequence:");
  print(2);
  BigInt prod = BigInt.from(2);
  int count = 1;
  while (count < k) {
    BigInt z = prod + one;
    BigInt t = smallestPrimeFactor(z);
    print(t);
    prod = prod * t;
    count = count + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
