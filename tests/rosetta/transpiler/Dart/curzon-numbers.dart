// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

String padLeft(int n, int width) {
  String s = (n).toString();
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

int modPow(int base, int exp, int mod) {
  int result = 1 % mod;
  int b = base % mod;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % mod;
  }
    b = b * b % mod;
    e = e ~/ 2;
  }
  return result;
}

void _main() {
  int k = 2;
  while (k <= 10) {
    print("The first 50 Curzon numbers using a base of " + (k).toString() + " :");
    int count = 0;
    int n = 1;
    List<int> curzon50 = <int>[];
    while (true) {
    int d = k * n + 1;
    if ((modPow(k, n, d) + 1) % d == 0) {
    if (count < 50) {
    curzon50 = [...curzon50, n];
  };
    count = count + 1;
    if (count == 50) {
    int idx = 0;
    while (idx < curzon50.length) {
    String line = "";
    int j = 0;
    while (j < 10) {
    line = line + padLeft(curzon50[idx], 4) + " ";
    idx = idx + 1;
    j = j + 1;
  }
    print(_substr(line, 0, line.length - 1));
  };
  };
    if (count == 1000) {
    print("\nOne thousandth: " + (n).toString());
    break;
  };
  }
    n = n + 1;
  }
    print("");
    k = k + 2;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
