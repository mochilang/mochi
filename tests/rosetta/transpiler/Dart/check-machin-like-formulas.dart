// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class BigRat {
  BigInt num;
  BigInt den;
  BigRat(this.num, [BigInt? d]) : den = d ?? BigInt.one {
    if (den.isNegative) { num = -num; den = -den; }
    var g = num.gcd(den);
    num = num ~/ g;
    den = den ~/ g;
  }
  BigRat add(BigRat o) => BigRat(num * o.den + o.num * den, den * o.den);
  BigRat sub(BigRat o) => BigRat(num * o.den - o.num * den, den * o.den);
  BigRat mul(BigRat o) => BigRat(num * o.num, den * o.den);
  BigRat div(BigRat o) => BigRat(num * o.den, den * o.num);
}

BigRat _bigrat(dynamic n, [dynamic d]) {
  if (n is BigRat && d == null) return BigRat(n.num, n.den);
  BigInt numer;
  BigInt denom = d == null ? BigInt.one : (d is BigInt ? d : BigInt.from((d as num).toInt()));
  if (n is BigRat) { numer = n.num; denom = n.den; }
  else if (n is BigInt) { numer = n; }
  else if (n is int) { numer = BigInt.from(n); }
  else if (n is num) { numer = BigInt.from(n.toInt()); }
  else { numer = BigInt.zero; }
  return BigRat(numer, denom);
}
BigInt _num(BigRat r) => r.num;
BigInt _denom(BigRat r) => r.den;
BigRat _add(BigRat a, BigRat b) => a.add(b);
BigRat _sub(BigRat a, BigRat b) => a.sub(b);
BigRat _mul(BigRat a, BigRat b) => a.mul(b);
BigRat _div(BigRat a, BigRat b) => a.div(b);
BigRat _neg(BigRat a) => BigRat(-a.num, a.den);

BigRat br(int n, int d) {
  return _div(_bigrat(n), _bigrat(_bigrat(d)));
}

List<List<Map<String, int>>> testCases = [[{"a": 1, "n": 1, "d": 2}, {"a": 1, "n": 1, "d": 3}], [{"a": 2, "n": 1, "d": 3}, {"a": 1, "n": 1, "d": 7}], [{"a": 4, "n": 1, "d": 5}, {"a": -1, "n": 1, "d": 239}], [{"a": 5, "n": 1, "d": 7}, {"a": 2, "n": 3, "d": 79}], [{"a": 1, "n": 1, "d": 2}, {"a": 1, "n": 1, "d": 5}, {"a": 1, "n": 1, "d": 8}], [{"a": 4, "n": 1, "d": 5}, {"a": -1, "n": 1, "d": 70}, {"a": 1, "n": 1, "d": 99}], [{"a": 5, "n": 1, "d": 7}, {"a": 4, "n": 1, "d": 53}, {"a": 2, "n": 1, "d": 4443}], [{"a": 6, "n": 1, "d": 8}, {"a": 2, "n": 1, "d": 57}, {"a": 1, "n": 1, "d": 239}], [{"a": 8, "n": 1, "d": 10}, {"a": -1, "n": 1, "d": 239}, {"a": -4, "n": 1, "d": 515}], [{"a": 12, "n": 1, "d": 18}, {"a": 8, "n": 1, "d": 57}, {"a": -5, "n": 1, "d": 239}], [{"a": 16, "n": 1, "d": 21}, {"a": 3, "n": 1, "d": 239}, {"a": 4, "n": 3, "d": 1042}], [{"a": 22, "n": 1, "d": 28}, {"a": 2, "n": 1, "d": 443}, {"a": -5, "n": 1, "d": 1393}, {"a": -10, "n": 1, "d": 11018}], [{"a": 22, "n": 1, "d": 38}, {"a": 17, "n": 7, "d": 601}, {"a": 10, "n": 7, "d": 8149}], [{"a": 44, "n": 1, "d": 57}, {"a": 7, "n": 1, "d": 239}, {"a": -12, "n": 1, "d": 682}, {"a": 24, "n": 1, "d": 12943}], [{"a": 88, "n": 1, "d": 172}, {"a": 51, "n": 1, "d": 239}, {"a": 32, "n": 1, "d": 682}, {"a": 44, "n": 1, "d": 5357}, {"a": 68, "n": 1, "d": 12943}], [{"a": 88, "n": 1, "d": 172}, {"a": 51, "n": 1, "d": 239}, {"a": 32, "n": 1, "d": 682}, {"a": 44, "n": 1, "d": 5357}, {"a": 68, "n": 1, "d": 12944}]];
String format(List<Map<String, int>> ts) {
  String s = "[";
  int i = 0;
  while (i < ts.length) {
    Map<String, int> t = ts[i];
    s = s + "{" + (t["a"]!).toString() + " " + (t["n"]!).toString() + " " + (t["d"]!).toString() + "}";
    if (i < ts.length - 1) {
    s = s + " ";
  }
    i = i + 1;
  }
  return s + "]";
}

BigRat tanEval(int coef, BigRat f) {
  if (coef == 1) {
    return f;
  }
  if (coef < 0) {
    return _neg(_bigrat(tanEval(-coef, f)));
  }
  int ca = coef ~/ 2;
  int cb = coef - ca;
  BigRat a = tanEval(ca, f);
  BigRat b = tanEval(cb, f);
  return _div(_bigrat(_add(a, b)), _bigrat(_sub(_bigrat(1), _mul(a, b))));
}

BigRat tans(List<Map<String, int>> m) {
  if (m.length == 1) {
    Map<String, int> t = m[0];
    return tanEval(t["a"]!, br(t["n"]!, t["d"]!));
  }
  int half = m.length ~/ 2;
  BigRat a = tans(m.sublist(0, half));
  BigRat b = tans(m.sublist(half, m.length));
  return _div(_bigrat(_add(a, b)), _bigrat(_sub(_bigrat(1), _mul(a, b))));
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  for (List<Map<String, int>> ts in testCases) {
    print("tan " + format(ts) + " = " + (tans(ts)).toString());
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
