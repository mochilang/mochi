// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Point {
  num x;
  num y;
  Point({required this.x, required this.y});
}

class Line {
  num slope;
  num yint;
  Line({required this.slope, required this.yint});
}

Line createLine(Point a, Point b) {
  num slope = (b.y - a.y) / (b.x - a.x);
  num yint = a.y - slope * a.x;
  return Line(slope: slope, yint: yint);
}

num evalX(Line l, num x) {
  return l.slope * x + l.yint;
}

Point intersection(Line l1, Line l2) {
  if (l1.slope == l2.slope) {
    return Point(x: 0.0, y: 0.0);
  }
  num x = (l2.yint - l1.yint) / (l1.slope - l2.slope);
  num y = evalX(l1, x);
  return Point(x: x, y: y);
}

void _main() {
  Line l1 = createLine(Point(x: 4.0, y: 0.0), Point(x: 6.0, y: 10.0));
  Line l2 = createLine(Point(x: 0.0, y: 3.0), Point(x: 10.0, y: 7.0));
  Point p = intersection(l1, l2);
  print("{" + (p.x).toString() + " " + (p.y).toString() + "}");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
