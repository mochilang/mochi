// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Vector {
  num x;
  num y;
  num z;
  Vector({required this.x, required this.y, required this.z});
}

Vector add(Vector a, Vector b) {
  return Vector(x: a.x + b.x, y: a.y + b.y, z: a.z + b.z);
}

Vector sub(Vector a, Vector b) {
  return Vector(x: a.x - b.x, y: a.y - b.y, z: a.z - b.z);
}

Vector mul(Vector v, num s) {
  return Vector(x: v.x * s, y: v.y * s, z: v.z * s);
}

num dot(Vector a, Vector b) {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}

Vector intersectPoint(Vector rv, Vector rp, Vector pn, Vector pp) {
  Vector diff = sub(rp, pp);
  num prod1 = dot(diff, pn);
  num prod2 = dot(rv, pn);
  num prod3 = prod1 / prod2;
  return sub(rp, mul(rv, prod3));
}

void _main() {
  Vector rv = Vector(x: 0.0, y: -1.0, z: -1.0);
  Vector rp = Vector(x: 0.0, y: 0.0, z: 10.0);
  Vector pn = Vector(x: 0.0, y: 0.0, z: 1.0);
  Vector pp = Vector(x: 0.0, y: 0.0, z: 5.0);
  Vector ip = intersectPoint(rv, rp, pn, pp);
  print("The ray intersects the plane at (" + (ip.x).toString() + ", " + (ip.y).toString() + ", " + (ip.z).toString() + ")");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
