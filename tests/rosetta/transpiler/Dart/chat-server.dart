// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<String> removeName(List<String> names, String name) {
  List<String> out = <String>[];
  for (var n in names) {
    if (n != name) {
    out = [...out, n];
  }
  }
  return out;
}

void _main() {
  List<String> clients = <String>[];
  void broadcast(String msg) {
  print(msg);
}
  void add(String name) {
  clients = [...clients, name];
  broadcast("+++ \"" + name + "\" connected +++\n");
}
  void send(String name, String msg) {
  broadcast(name + "> " + msg + "\n");
}
  void remove(String name) {
  clients = removeName(clients, name);
  broadcast("--- \"" + name + "\" disconnected ---\n");
}
  add("Alice");
  add("Bob");
  send("Alice", "Hello Bob!");
  send("Bob", "Hi Alice!");
  remove("Bob");
  remove("Alice");
  broadcast("Server stopping!\n");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
