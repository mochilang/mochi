// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String FASTA = ">Rosetta_Example_1\n" + "THERECANBENOSPACE\n" + ">Rosetta_Example_2\n" + "THERECANBESEVERAL\n" + "LINESBUTTHEYALLMUST\n" + "BECONCATENATED";
List<String> splitLines(String s) {
  List<String> lines = <String>[];
  int start = 0;
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == "\n") {
    lines = [...lines, _substr(s, start, i)];
    i = i + 1;
    start = i;
  } else {
    i = i + 1;
  }
  }
  lines = [...lines, _substr(s, start, s.length)];
  return lines;
}

List<String> parseFasta(String text) {
  String key = "";
  String val = "";
  List<String> out = <String>[];
  for (String line in splitLines(text)) {
    if (line == "") {
    continue;
  }
    if (_substr(line, 0, 1) == ">") {
    if (key != "") {
    out = [...out, key + ": " + val];
  };
    String hdr = _substr(line, 1, line.length);
    int idx = 0;
    while (idx < hdr.length && _substr(hdr, idx, idx + 1) != " ") {
    idx = idx + 1;
  };
    key = _substr(hdr, 0, idx);
    val = "";
  } else {
    if (key == "") {
    print("missing header");
    return List<String>.from([]);
  };
    val = val + line;
  }
  }
  if (key != "") {
    out = [...out, key + ": " + val];
  }
  return out;
}

void _main() {
  List<String> res = parseFasta(FASTA);
  for (String line in res) {
    print(line);
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
