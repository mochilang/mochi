// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String show(List<int> xs) {
  String s = "";
  int i = 0;
  while (i < xs.length) {
    s = s + (xs[i]).toString();
    if (i < xs.length - 1) {
    s = s + " ";
  }
    i = i + 1;
  }
  return s;
}

List<int> gen(List<int> init, int n) {
  List<int> b = init;
  List<int> res = <int>[];
  int sum = 0;
  for (var x in b) {
    res = [...res, x];
    sum = (sum + x).toInt();
  }
  while (res.length < n) {
    int next = sum;
    res = [...res, next];
    sum = sum + next - b[0];
    b = ([...b.sublist(1, b.length), next] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  return res;
}

void _main() {
  int n = 10;
  print(" Fibonacci: " + show(gen([1, 1], n)));
  print("Tribonacci: " + show(gen([1, 1, 2], n)));
  print("Tetranacci: " + show(gen([1, 1, 2, 4], n)));
  print("     Lucas: " + show(gen([2, 1], n)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
