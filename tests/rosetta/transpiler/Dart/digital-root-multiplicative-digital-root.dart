// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class MDRResult {
  int mp;
  int mdr;
  MDRResult({required this.mp, required this.mdr});
}

String pad(String s, int width) {
  String out = s;
  while (out.length < width) {
    out = " " + out;
  }
  return out;
}

BigInt mult(BigInt n, int base) {
  BigInt m = BigInt.from(1);
  BigInt x = n;
  BigInt b = BigInt.from(base);
  while (x > (BigInt.from(0))) {
    m = m * x % b;
    x = x ~/ b;
  }
  return m;
}

MDRResult multDigitalRoot(BigInt n, int base) {
  BigInt m = n;
  int mp = 0;
  BigInt b = BigInt.from(base);
  while (m >= b) {
    m = mult(m, base);
    mp = mp + 1;
  }
  return MDRResult(mp: mp, mdr: (m).toInt());
}

void _main() {
  int base = 10;
  int size = 5;
  print(pad("Number", 20) + " " + pad("MDR", 3) + " " + pad("MP", 3));
  List<BigInt> nums = [BigInt.from(123321), BigInt.from(7739), BigInt.from(893), BigInt.from(899998), BigInt.from(3778888999), BigInt.from(277777788888899)];
  int i = 0;
  while (i < nums.length) {
    BigInt n = nums[i];
    MDRResult r = multDigitalRoot(n, base);
    print(pad((n).toString(), 20) + " " + pad((r.mdr).toString(), 3) + " " + pad((r.mp).toString(), 3));
    i = i + 1;
  }
  print("");
  List<List<int>> list = <List<int>>[];
  int idx = 0;
  while (idx < base) {
    list = [...list, []];
    idx = idx + 1;
  }
  int cnt = size * base;
  BigInt n = BigInt.from(0);
  BigInt b = BigInt.from(base);
  while (cnt > 0) {
    MDRResult r = multDigitalRoot(n, base);
    int mdr = r.mdr;
    if (list[mdr].length < size) {
    list[mdr] = [...list[mdr], (n).toInt()];
    cnt = cnt - 1;
  }
    n = n + (BigInt.from(1));
  }
  print("MDR: First");
  int j = 0;
  while (j < base) {
    print(pad((j).toString(), 3) + ": " + (list[j]).toString());
    j = j + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
