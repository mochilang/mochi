// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  List<int> poolPut(List<int> p, int x) {
  return [...p, x];
}
  Map<String, dynamic> poolGet(List<int> p) {
  if (p.length == 0) {
    print("pool empty");
    return {"pool": p, "val": 0};
  }
  final int idx = p.length - 1;
  final int v = p[idx];
  p = p.sublist(0, idx);
  return {"pool": p, "val": v};
}
  List<int> clearPool(List<int> p) {
  return List<int>.from([]);
}
  void main() {
  List<int> pool = [];
  int i = 1;
  int j = 2;
  print((i + j).toString());
  pool = poolPut(pool, i);
  pool = poolPut(pool, j);
  i = 0;
  j = 0;
  final Map<String, dynamic> res1 = poolGet(pool);
  pool = res1["pool"]!! as List<int>;
  i = res1["val"]!! as int;
  final Map<String, dynamic> res2 = poolGet(pool);
  pool = res2["pool"]!! as List<int>;
  j = res2["val"]!! as int;
  i = 4;
  j = 5;
  print((i + j).toString());
  pool = poolPut(pool, i);
  pool = poolPut(pool, j);
  i = 0;
  j = 0;
  pool = clearPool(pool);
  final Map<String, dynamic> res3 = poolGet(pool);
  pool = res3["pool"]!! as List<int>;
  i = res3["val"]!! as int;
  final Map<String, dynamic> res4 = poolGet(pool);
  pool = res4["pool"]!! as List<int>;
  j = res4["val"]!! as int;
  i = 7;
  j = 8;
  print((i + j).toString());
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
