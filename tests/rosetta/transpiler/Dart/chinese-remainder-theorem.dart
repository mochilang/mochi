// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> egcd(int a, int b) {
  if (a == 0) {
    return [b, 0, 1];
  }
  List<int> res = egcd(b % a, a);
  int g = res[0];
  int x1 = res[1];
  int y1 = res[2];
  return [g, y1 - b ~/ a * x1, x1];
}

int modInv(int a, int m) {
  List<int> r = egcd(a, m);
  if (r[0] != 1) {
    return 0;
  }
  int x = r[1];
  if (x < 0) {
    return x + m;
  }
  return x;
}

int crt(List<int> a, List<int> n) {
  int prod = 1;
  int i = 0;
  while (i < n.length) {
    prod = prod * n[i];
    i = i + 1;
  }
  int x = 0;
  i = 0;
  while (i < n.length) {
    int ni = n[i];
    int ai = a[i];
    int p = prod ~/ ni;
    int inv = modInv(p % ni, ni);
    x = x + ai * inv * p;
    i = i + 1;
  }
  return x % prod;
}

List<int> n = [3, 5, 7];
List<int> a = [2, 3, 2];
int res = crt(a, n);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((res).toString() + " <nil>");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
