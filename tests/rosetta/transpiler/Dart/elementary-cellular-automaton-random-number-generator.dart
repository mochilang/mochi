// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int n = 64;
int pow2(int k) {
  int v = 1;
  int i = 0;
  while (i < k) {
    v = v * 2;
    i = i + 1;
  }
  return v;
}

int ruleBit(int ruleNum, int idx) {
  int r = ruleNum;
  int i = 0;
  while (i < idx) {
    r = r ~/ 2;
    i = i + 1;
  }
  return r % 2;
}

List<int> evolve(List<int> state, int ruleNum) {
  List<int> out = <int>[];
  int p = 0;
  while (p < 10) {
    int b = 0;
    int q = 7;
    while (q >= 0) {
    List<int> st = state;
    b = b + st[0] * pow2(q);
    List<int> next = <int>[];
    int i = 0;
    while (i < n) {
    int lidx = i - 1;
    if (lidx < 0) {
    lidx = n - 1;
  }
    int left = st[lidx];
    int center = st[i];
    int ridx = i + 1;
    if (ridx >= n) {
    ridx = 0;
  }
    int right = st[ridx];
    int index = left * 4 + center * 2 + right;
    next = [...next, ruleBit(ruleNum, index)];
    i = i + 1;
  }
    state = next;
    q = q - 1;
  }
    out = [...out, b];
    p = p + 1;
  }
  return out;
}

List<int> init = <int>[];
int i = 0;
List<int> bytes = evolve(init, 30);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (i < n) {
    init = [...init, 0];
    i = i + 1;
  }
  init[0] = 1;
  print((bytes).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
