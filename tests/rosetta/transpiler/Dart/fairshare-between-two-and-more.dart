// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int digitSumMod(int n, int base) {
  int sum = 0;
  int j = n;
  while (j > 0) {
    sum = sum + j % base;
    j = j ~/ base;
  }
  return sum % base;
}

List<int> fairshareList(int n, int base) {
  List<int> res = <int>[];
  int i = 0;
  while (i < n) {
    res = [...res, digitSumMod(i, base)];
    i = i + 1;
  }
  return res;
}

List<int> sortInts(List<int> xs) {
  List<int> arr = xs;
  int i = 0;
  while (i < arr.length) {
    int j = 0;
    while (j < arr.length - 1) {
    if (arr[j] > arr[j + 1]) {
    int t = arr[j];
    arr[j] = arr[j + 1];
    arr[j + 1] = t;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

String turns(int n, int base) {
  List<int> counts = <int>[];
  int i = 0;
  while (i < base) {
    counts = [...counts, 0];
    i = i + 1;
  }
  i = 0;
  while (i < n) {
    int v = digitSumMod(i, base);
    counts[v] = counts[v] + 1;
    i = i + 1;
  }
  Map<int, int> freq = <int, int>{};
  List<int> fkeys = <int>[];
  i = 0;
  while (i < base) {
    int c = counts[i];
    if (c > 0) {
    if (freq.containsKey(c)) {
    freq[c] = (freq[c]! + 1).toInt();
  } else {
    freq[c] = 1;
    fkeys = [...fkeys, c];
  };
  }
    i = i + 1;
  }
  int total = 0;
  i = 0;
  while (i < fkeys.length) {
    total = (total + freq[fkeys[i]]!).toInt();
    i = i + 1;
  }
  if (total != base) {
    return "only " + (total).toString() + " have a turn";
  }
  fkeys = sortInts(fkeys);
  String res = "";
  i = 0;
  while (i < fkeys.length) {
    if (i > 0) {
    res = res + " or ";
  }
    res = res + (fkeys[i]).toString();
    i = i + 1;
  }
  return res;
}

void _main() {
  List<int> bases1 = [2, 3, 5, 11];
  int i = 0;
  while (i < bases1.length) {
    int b = bases1[i];
    print((b).toString().toString().padLeft(2, " ") + " : " + (fairshareList(25, b)).toString());
    i = i + 1;
  }
  print("");
  print("How many times does each get a turn in 50000 iterations?");
  List<int> bases2 = [191, 1377, 49999, 50000, 50001];
  i = 0;
  while (i < bases2.length) {
    int b = bases2[i];
    String t = turns(50000, b);
    print("  With " + (b).toString() + " people: " + t);
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
