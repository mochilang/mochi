// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> sieve(int limit) {
  List<dynamic> spf = <dynamic>[];
  int i = 0;
  while (i <= limit) {
    spf = [...spf, 0];
    i = i + 1;
  }
  i = 2;
  while (i <= limit) {
    if (spf[i] == 0) {
    spf[i] = i;
    if (i * i <= limit) {
    int j = i * i;
    while (j <= limit) {
    if (spf[j] == 0) {
    spf[j] = i;
  }
    j = j + i;
  };
  };
  }
    i = i + 1;
  }
  return List<int>.from(spf);
}

List<int> primesFrom(List<int> spf, int limit) {
  List<dynamic> primes = <dynamic>[];
  int i = 3;
  while (i <= limit) {
    if (spf[i] == i) {
    primes = [...primes, i];
  }
    i = i + 1;
  }
  return List<int>.from(primes);
}

String pad3(int n) {
  String s = (n).toString();
  while (s.length < 3) {
    s = " " + s;
  }
  return s;
}

String commatize(int n) {
  String s = (n).toString();
  String out = "";
  int i = s.length - 1;
  int c = 0;
  while (i >= 0) {
    out = _substr(s, i, i + 1) + out;
    c = c + 1;
    if (c % 3 == 0 && i > 0) {
    out = "," + out;
  }
    i = i - 1;
  }
  return out;
}

int primeCount(List<int> primes, int last, List<int> spf) {
  int lo = 0;
  int hi = primes.length;
  while (lo < hi) {
    int mid = (lo + hi) ~/ 2 as int;
    if (primes[mid] < last) {
    lo = mid + 1;
  } else {
    hi = mid;
  }
  }
  int count = lo + 1;
  if (spf[last] != last) {
    count = count - 1;
  }
  return count;
}

List<int> arithmeticNumbers(int limit, List<int> spf) {
  List<int> arr = [1];
  int n = 3;
  while (arr.length < limit) {
    if (spf[n] == n) {
    arr = [...arr, n];
  } else {
    int x = n;
    int sigma = 1;
    int tau = 1;
    while (x > 1) {
    int p = spf[x];
    if (p == 0) {
    p = x;
  }
    int cnt = 0;
    int power = p;
    int sum = 1;
    while (x % p == 0) {
    x = x ~/ p;
    cnt = cnt + 1;
    sum = sum + power;
    power = power * p;
  }
    sigma = sigma * sum;
    tau = tau * (cnt + 1);
  };
    if (sigma % tau == 0) {
    arr = [...arr, n];
  };
  }
    n = n + 1;
  }
  return arr;
}

void main() {
  int limit = 1228663;
  List<int> spf = sieve(limit);
  List<int> primes = primesFrom(spf, limit);
  List<int> arr = arithmeticNumbers(1000000, spf);
  print("The first 100 arithmetic numbers are:");
  int i = 0;
  while (i < 100) {
    String line = "";
    int j = 0;
    while (j < 10) {
    line = line + pad3(arr[i + j]);
    if (j < 9) {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 10;
  }
  for (var x in [1000, 10000, 100000, 1000000]) {
    int last = arr[x - 1];
    String lastc = commatize(last);
    print("\nThe " + commatize(x) + "th arithmetic number is: " + lastc);
    int pc = primeCount(primes, last, spf);
    int comp = x - pc - 1;
    print("The count of such numbers <= " + lastc + " which are composite is " + commatize(comp) + ".");
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}
