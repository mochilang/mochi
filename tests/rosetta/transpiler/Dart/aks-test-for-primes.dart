// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  String poly(int p) {
  String s = "";
  int coef = 1;
  int i = p;
  if (coef != 1) {
    s = s + (coef).toString();
  }
  while (i > 0) {
    s = s + "x";
    if (i != 1) {
    s = s + "^" + (i).toString();
  }
    coef = coef * i ~/ (p - i + 1) as int;
    int d = coef;
    if ((p - i - 1) % 2 == 1) {
    d = -d;
  }
    if (d < 0) {
    s = s + " - " + (-d).toString();
  } else {
    s = s + " + " + (d).toString();
  }
    i = i - 1;
  }
  if (s == "") {
    s = "1";
  }
  return s;
}
  bool aks(int n) {
  if (n < 2) {
    return false;
  }
  int c = n;
  int i = 1;
  while (i < n) {
    if (c % n != 0) {
    return false;
  }
    c = c * (n - i) ~/ (i + 1) as int;
    i = i + 1;
  }
  return true;
}
  void main() {
  int p = 0;
  while (p <= 7) {
    print((p).toString() + ":  " + poly(p));
    p = p + 1;
  }
  bool first = true;
  p = 2;
  String line = "";
  while (p < 50) {
    if (aks(p)) {
    if (first) {
    line = line + (p).toString();
    first = false;
  } else {
    line = line + " " + (p).toString();
  };
  }
    p = p + 1;
  }
  print(line);
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
