// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  String sortRunes(String s) {
  List<String> arr = [];
  int i = 0;
  while (i < s.length) {
    arr = [...arr, s.substring(i, i + 1)];
    i = i + 1;
  }
  int n = arr.length;
  int m = 0;
  while (m < n) {
    int j = 0;
    while (j < n - 1) {
    if (arr[j].compareTo(arr[j + 1]) > 0) {
    final String tmp = arr[j];
    arr[j] = arr[j + 1];
    arr[j + 1] = tmp;
  }
    j = j + 1;
  }
    m = m + 1;
  }
  String out = "";
  i = 0;
  while (i < n) {
    out = out + arr[i];
    i = i + 1;
  }
  return out;
}
  bool deranged(String a, String b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (a.substring(i, i + 1) == b.substring(i, i + 1)) {
    return false;
  }
    i = i + 1;
  }
  return true;
}
  void main() {
  final List<String> words = ["constitutionalism", "misconstitutional"];
  Map<String, List<String>> m = {};
  int bestLen = 0;
  String w1 = "";
  String w2 = "";
  for (var w in words) {
    if (w.length <= bestLen) {
    continue;
  }
    final String k = sortRunes(w);
    if (!m.containsKey(k)) {
    m[k] = [w];
    continue;
  }
    for (var c in m[k]!) {
    if (deranged(w, c)) {
    bestLen = w.length;
    w1 = c;
    w2 = w;
    break;
  }
  }
    m[k] = [...m[k]!, w];
  }
  print(w1 + " " + w2 + " : Length " + (bestLen).toString());
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
