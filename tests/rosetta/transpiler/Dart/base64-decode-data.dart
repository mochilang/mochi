// Generated by Mochi transpiler
int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && str.substring(0, 0 + 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  final Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = n * 10 + digits[str.substring(i, i + 1)]!;
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

int ord(String ch) {
  final String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  final String lower = "abcdefghijklmnopqrstuvwxyz";
  int idx = indexOf(upper, ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = indexOf(lower, ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  if (ch.compareTo("0") >= 0 && ch.compareTo("9") <= 0) {
    return 48 + parseIntStr(ch);
  }
  if (ch == "+") {
    return 43;
  }
  if (ch == "/") {
    return 47;
  }
  if (ch == " ") {
    return 32;
  }
  if (ch == "=") {
    return 61;
  }
  return 0;
}

String chr(int n) {
  final String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  final String lower = "abcdefghijklmnopqrstuvwxyz";
  if (n >= 65 && n < 91) {
    return upper.substring(n - 65, n - 64);
  }
  if (n >= 97 && n < 123) {
    return lower.substring(n - 97, n - 96);
  }
  if (n >= 48 && n < 58) {
    final String digits = "0123456789";
    return digits.substring(n - 48, n - 47);
  }
  if (n == 43) {
    return "+";
  }
  if (n == 47) {
    return "/";
  }
  if (n == 32) {
    return " ";
  }
  if (n == 61) {
    return "=";
  }
  return "?";
}

String toBinary(int n, int bits) {
  String b = "";
  int val = n;
  int i = 0;
  while (i < bits) {
    b = (val % 2).toString() + b;
    val = val ~/ 2 as int;
    i = i + 1;
  }
  return b;
}

int binToInt(String bits) {
  int n = 0;
  int i = 0;
  while (i < bits.length) {
    n = n * 2 + parseIntStr(bits.substring(i, i + 1));
    i = i + 1;
  }
  return n;
}

String base64Encode(String text) {
  final String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  String bin = "";
  for (var ch in text) {
    bin = bin + toBinary(ord(ch), 8);
  }
  while (bin.length % 6 != 0) {
    bin = bin + "0";
  }
  String out = "";
  int i = 0;
  while (i < bin.length) {
    final String chunk = bin.substring(i, i + 6);
    final int val = binToInt(chunk);
    out = out + alphabet.substring(val, val + 1);
    i = i + 6;
  }
  final int pad = (3 - text.length % 3) % 3;
  if (pad == 1) {
    out = out.substring(0, out.length - 1) + "=";
  }
  if (pad == 2) {
    out = out.substring(0, out.length - 2) + "==";
  }
  return out;
}

String base64Decode(String enc) {
  final String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  String bin = "";
  int i = 0;
  while (i < enc.length) {
    final String ch = enc.substring(i, i + 1);
    if (ch == "=") {
    break;
  }
    final int idx = indexOf(alphabet, ch);
    bin = bin + toBinary(idx, 6);
    i = i + 1;
  }
  String out = "";
  i = 0;
  while (i + 8 <= bin.length) {
    final String chunk = bin.substring(i, i + 8);
    final int val = binToInt(chunk);
    out = out + chr(val);
    i = i + 8;
  }
  return out;
}

final String msg = "Rosetta Code Base64 decode data task";
final String enc = base64Encode(msg);
final String dec = base64Decode(enc);
void main() {
  print("Original : " + msg);
  print("\nEncoded  : " + enc);
  print("\nDecoded  : " + dec);
}
