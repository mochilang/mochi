// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && str.substring(0, 0 + 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = (n * 10 + digits[str.substring(i, i + 1)]!).toInt();
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

int ord(String ch) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  int idx = upper.indexOf(ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = lower.indexOf(ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  if (ch.compareTo("0") >= 0 && ch.compareTo("9") <= 0) {
    return 48 + int.parse(ch);
  }
  if (ch == "+") {
    return 43;
  }
  if (ch == "/") {
    return 47;
  }
  if (ch == " ") {
    return 32;
  }
  if (ch == "=") {
    return 61;
  }
  return 0;
}

String chr(int n) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  if (n >= 65 && n < 91) {
    return _substr(upper, n - 65, n - 64);
  }
  if (n >= 97 && n < 123) {
    return _substr(lower, n - 97, n - 96);
  }
  if (n >= 48 && n < 58) {
    String digits = "0123456789";
    return _substr(digits, n - 48, n - 47);
  }
  if (n == 43) {
    return "+";
  }
  if (n == 47) {
    return "/";
  }
  if (n == 32) {
    return " ";
  }
  if (n == 61) {
    return "=";
  }
  return "?";
}

String toBinary(int n, int bits) {
  String b = "";
  int val = n;
  int i = 0;
  while (i < bits) {
    b = (val % 2).toString() + b;
    val = val ~/ 2 as int;
    i = i + 1;
  }
  return b;
}

int binToInt(String bits) {
  int n = 0;
  int i = 0;
  while (i < bits.length) {
    n = n * 2 + int.parse(_substr(bits, i, i + 1));
    i = i + 1;
  }
  return n;
}

String base64Encode(String text) {
  String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  String bin = "";
  for (String ch in text.split('')) {
    bin = bin + toBinary(ord(ch), 8);
  }
  while (bin.length % 6 != 0) {
    bin = bin + "0";
  }
  String out = "";
  int i = 0;
  while (i < bin.length) {
    String chunk = _substr(bin, i, i + 6);
    int val = binToInt(chunk);
    out = out + _substr(alphabet, val, val + 1);
    i = i + 6;
  }
  int pad = (3 - text.length % 3) % 3;
  if (pad == 1) {
    out = _substr(out, 0, out.length - 1) + "=";
  }
  if (pad == 2) {
    out = _substr(out, 0, out.length - 2) + "==";
  }
  return out;
}

String base64Decode(String enc) {
  String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  String bin = "";
  int i = 0;
  while (i < enc.length) {
    String ch = enc.substring(i, i + 1);
    if (ch == "=") {
    break;
  }
    int idx = alphabet.indexOf(ch);
    bin = bin + toBinary(idx, 6);
    i = i + 1;
  }
  String out = "";
  i = 0;
  while (i + 8 <= bin.length) {
    String chunk = _substr(bin, i, i + 8);
    int val = binToInt(chunk);
    out = out + chr(val);
    i = i + 8;
  }
  return out;
}

String msg = "Rosetta Code Base64 decode data task";
String enc = base64Encode(msg);
String dec = base64Decode(enc);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Original : " + msg);
  print("\nEncoded  : " + enc);
  print("\nDecoded  : " + dec);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
