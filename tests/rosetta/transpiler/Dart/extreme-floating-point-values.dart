// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

num makeInf() {
  num x = 1.0;
  int i = 0;
  while (i < 400) {
    x = x * 10.0;
    i = i + 1;
  }
  return x;
}

num makeMax() {
  num x = 1.0;
  int i = 0;
  while (i < 308) {
    x = x * 10.0;
    i = i + 1;
  }
  return x;
}

bool isNaN(num x) {
  return x != x;
}

void validateNaN(num n, String op) {
  if (isNaN(n)) {
    print(op + " -> NaN");
  } else {
    print(["!!! Expected NaN from", op, " Found", n].join(" "));
  }
}

void validateZero(num n, String op) {
  if (n == 0) {
    print(op + " -> 0");
  } else {
    print(["!!! Expected 0 from", op, " Found", n].join(" "));
  }
}

void validateGT(num a, num b, String op) {
  if (a > b) {
    print(op);
  } else {
    print(["!!! Expected", op, " Found not true."].join(" "));
  }
}

void validateNE(num a, num b, String op) {
  if (a == b) {
    print(["!!! Expected", op, " Found not true."].join(" "));
  } else {
    print(op);
  }
}

void validateEQ(num a, num b, String op) {
  if (a == b) {
    print(op);
  } else {
    print(["!!! Expected", op, " Found not true."].join(" "));
  }
}

void _main() {
  num negZero = -0.0;
  num posInf = makeInf();
  num negInf = -posInf;
  num nan = posInf / posInf;
  num maxVal = makeMax();
  print([negZero, posInf, negInf, nan].join(" "));
  print([negZero, posInf, negInf, nan].join(" "));
  print("");
  validateNaN(negInf + posInf, "-Inf + Inf");
  validateNaN(0.0 * posInf, "0 * Inf");
  validateNaN(posInf / posInf, "Inf / Inf");
  validateNaN(posInf % 1.0, "Inf % 1");
  validateNaN(1.0 + nan, "1 + NaN");
  validateZero(1.0 / posInf, "1 / Inf");
  validateGT(posInf, maxVal, "Inf > max value");
  validateGT(-maxVal, negInf, "-Inf < max neg value");
  validateNE(nan, nan, "NaN != NaN");
  validateEQ(negZero, 0.0, "-0 == 0");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
