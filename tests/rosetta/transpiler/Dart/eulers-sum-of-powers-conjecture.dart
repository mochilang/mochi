// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> eulerSum() {
  List<int> pow5 = <int>[];
  int i = 0;
  while (i < 250) {
    pow5 = [...pow5, i * i * i * i * i];
    i = i + 1;
  }
  Map<int, List<int>> sums = <int, List<int>>{};
  int x2 = 2;
  while (x2 < 250) {
    int x3 = 1;
    while (x3 < x2) {
    int s = pow5[x2] + pow5[x3];
    if (!sums.containsKey(s)) {
    sums[s] = [x2, x3];
  }
    x3 = x3 + 1;
  }
    x2 = x2 + 1;
  }
  int x0 = 4;
  while (x0 < 250) {
    int x1 = 3;
    while (x1 < x0) {
    int y = x0 + 1;
    while (y < 250) {
    int rem = pow5[y] - pow5[x0] - pow5[x1];
    if (sums.containsKey(rem)) {
    List<int> pair = sums[rem]!!;
    int a = pair[0];
    int b = pair[1];
    if (x1 > a && a > b) {
    return [x0, x1, a, b, y];
  };
  }
    y = y + 1;
  }
    x1 = x1 + 1;
  }
    x0 = x0 + 1;
  }
  return [0, 0, 0, 0, 0];
}

void _main() {
  List<int> r = eulerSum();
  print((r[0]).toString() + " " + (r[1]).toString() + " " + (r[2]).toString() + " " + (r[3]).toString() + " " + (r[4]).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
