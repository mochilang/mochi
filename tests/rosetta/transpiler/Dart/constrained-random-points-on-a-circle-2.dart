// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int nPts = 100;
int rMin = 10;
int rMax = 15;
BigInt span = BigInt.from(rMax + 1 + rMax);
List<List<int>> poss = <List<int>>[];
BigInt min2 = BigInt.from(rMin * rMin);
BigInt max2 = BigInt.from(rMax * rMax);
int y = -rMax;
List<List<String>> rows = <List<String>>[];
int r = 0;
int u = 0;
Map<String, bool> seen = <String, bool>{};
int n = 0;
int i2 = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (y <= rMax) {
    int x = -rMax;
    while (x <= rMax) {
    int r2 = x * x + y * y;
    if (BigInt.from(r2) >= min2 && BigInt.from(r2) <= max2) {
    poss = [...poss, [x, y]];
  }
    x = x + 1;
  }
    y = y + 1;
  }
  print((poss.length).toString() + " possible points");
  while (BigInt.from(r) < span) {
    List<String> row = <String>[];
    int c = 0;
    while (BigInt.from(c) < span * BigInt.from(2)) {
    row = [...row, " "];
    c = c + 1;
  }
    rows = [...rows, row];
    r = r + 1;
  }
  while (n < nPts) {
    int i = _now() % poss.length;
    int x = poss[i][0];
    int yy = poss[i][1];
    int row = yy + rMax;
    int col = (x + rMax) * 2;
    rows[row]![col] = "*";
    String key = (row).toString() + "," + (col).toString();
    if (!(seen[key] ?? false)) {
    seen[key] = true;
    u = u + 1;
  }
    n = n + 1;
  }
  while (BigInt.from(i2) < span) {
    String line = "";
    int j = 0;
    while (BigInt.from(j) < span * BigInt.from(2)) {
    line = line + rows[i2][j];
    j = j + 1;
  }
    print(line);
    i2 = i2 + 1;
  }
  print((u).toString() + " unique points");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
