// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

Map<String, int> months = {"January": 1, "February": 2, "March": 3, "April": 4, "May": 5, "June": 6, "July": 7, "August": 8, "September": 9, "October": 10, "November": 11, "December": 12};
bool isLeap(int y) {
  if (y % 400 == 0) {
    return true;
  }
  if (y % 100 == 0) {
    return false;
  }
  return y % 4 == 0;
}

int daysInMonth(int y, int m) {
  int feb = isLeap(y) ? 29 : 28;
  List<int> lengths = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  return lengths[m - 1];
}

int daysBeforeYear(int y) {
  int days = 0;
  int yy = 1970;
  while (yy < y) {
    days = days + 365;
    if (isLeap(yy)) {
    days = days + 1;
  }
    yy = yy + 1;
  }
  return days;
}

int daysBeforeMonth(int y, int m) {
  int days = 0;
  int mm = 1;
  while (mm < m) {
    days = days + daysInMonth(y, mm);
    mm = mm + 1;
  }
  return days;
}

int epochSeconds(int y, int m, int d, int h, int mi) {
  int days = daysBeforeYear(y) + daysBeforeMonth(y, m) + d - 1;
  return days * 86400 + h * 3600 + mi * 60;
}

List<int> fromEpoch(int sec) {
  int days = sec ~/ 86400;
  int rem = sec % 86400;
  int y = 1970;
  while (true) {
    int dy = isLeap(y) ? 366 : 365;
    if (days >= dy) {
    days = days - dy;
    y = y + 1;
  } else {
    break;
  }
  }
  int m = 1;
  while (true) {
    int dim = daysInMonth(y, m);
    if (days >= dim) {
    days = days - dim;
    m = m + 1;
  } else {
    break;
  }
  }
  int d = days + 1;
  int h = rem ~/ 3600;
  int mi = rem % 3600 ~/ 60;
  return [y, m, d, h, mi];
}

String pad2(int n) {
  if (n < 10) {
    return "0" + (n).toString();
  }
  return (n).toString();
}

int absInt(int n) {
  if (n < 0) {
    return -n;
  }
  return n;
}

String formatDate(List<int> parts, int offset, String abbr) {
  int y = parts[0];
  int m = parts[1];
  int d = parts[2];
  int h = parts[3];
  int mi = parts[4];
  String sign = "+";
  if (offset < 0) {
    sign = "-";
  }
  int off = absInt(offset) ~/ 60;
  String offh = pad2(off ~/ 60);
  String offm = pad2(off % 60);
  return (y).toString() + "-" + pad2(m) + "-" + pad2(d) + " " + pad2(h) + ":" + pad2(mi) + ":00 " + sign + offh + offm + " " + abbr;
}

int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && _substr(str, 0, 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = n * 10 + (digits[_substr(str, i, i + 1)] ?? 0);
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

List<int> parseTime(String s) {
  int c = s.indexOf(":");
  int h = int.parse(_substr(s, 0, c));
  int mi = int.parse(_substr(s, c + 1, c + 3));
  String ampm = _substr(s, s.length - 2, s.length);
  int hh = h;
  if (ampm == "pm" && h != 12) {
    hh = h + 12;
  }
  if (ampm == "am" && h == 12) {
    hh = 0;
  }
  return [hh, mi];
}

void _main() {
  String input = "March 7 2009 7:30pm EST";
  print("Input:              " + input);
  List<dynamic> parts = <dynamic>[];
  String cur = "";
  int i = 0;
  while (i < input.length) {
    String ch = _substr(input, i, i + 1);
    if (ch == " ") {
    if (cur.length > 0) {
    parts = [...parts, cur];
    cur = "";
  };
  } else {
    cur = cur + ch;
  }
    i = i + 1;
  }
  if (cur.length > 0) {
    parts = [...parts, cur];
  }
  int month = months[parts[0]]!;
  int day = int.parse(parts[1]);
  int year = int.parse(parts[2]);
  List<int> tm = parseTime(parts[3]);
  int hour = tm[0];
  int minute = tm[1];
  var tz = parts[4];
  Map<String, int> zoneOffsets = {"EST": -18000, "EDT": -14400, "MST": -25200};
  int local = epochSeconds(year, month, day, hour, minute);
  num utc = local - (zoneOffsets[tz] ?? 0);
  num utc12 = utc + 43200;
  int startDST = epochSeconds(2009, 3, 8, 7, 0);
  int offEast = -18000;
  if (utc12 >= startDST) {
    offEast = -14400;
  }
  List<int> eastParts = fromEpoch((utc12 + offEast).toInt());
  String eastAbbr = "EST";
  if (offEast == -14400) {
    eastAbbr = "EDT";
  }
  print("+12 hrs:            " + formatDate(eastParts, offEast, eastAbbr));
  int offAZ = -25200;
  List<int> azParts = fromEpoch((utc12 + offAZ).toInt());
  print("+12 hrs in Arizona: " + formatDate(azParts, offAZ, "MST"));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
