// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> arr1 = [2, 7, 1, 8, 2];
Map<int, int> counts1 = <int, int>{};
List<int> keys1 = <int>[];
int i = 0;
int max1 = 0;
List<int> modes1 = <int>[];
List<int> arr2 = [2, 7, 1, 8, 2, 8];
Map<int, int> counts2 = <int, int>{};
List<int> keys2 = <int>[];
int max2 = 0;
List<int> modes2 = <int>[];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (i < arr1.length) {
    dynamic v = arr1[i];
    if (counts1.containsKey(v)) {
    counts1[(v).toInt()] = (counts1[(v).toInt()]! + 1).toInt();
  } else {
    counts1[(v).toInt()] = 1;
    keys1 = [...keys1, v];
  }
    i = i + 1;
  }
  i = 0;
  while (i < keys1.length) {
    dynamic k = keys1[i];
    dynamic c = counts1[(k).toInt()];
    if (c.compareTo(max1) > 0) {
    max1 = c;
  }
    i = i + 1;
  }
  i = 0;
  while (i < keys1.length) {
    dynamic k = keys1[i];
    if (counts1[(k).toInt()]! == max1) {
    modes1 = [...modes1, k];
  }
    i = i + 1;
  }
  print((modes1).toString());
  i = 0;
  while (i < arr2.length) {
    dynamic v = arr2[i];
    if (counts2.containsKey(v)) {
    counts2[(v).toInt()] = (counts2[(v).toInt()]! + 1).toInt();
  } else {
    counts2[(v).toInt()] = 1;
    keys2 = [...keys2, v];
  }
    i = i + 1;
  }
  i = 0;
  while (i < keys2.length) {
    dynamic k = keys2[i];
    dynamic c = counts2[(k).toInt()];
    if (c.compareTo(max2) > 0) {
    max2 = c;
  }
    i = i + 1;
  }
  i = 0;
  while (i < keys2.length) {
    dynamic k = keys2[i];
    if (counts2[(k).toInt()]! == max2) {
    modes2 = [...modes2, k];
  }
    i = i + 1;
  }
  print((modes2).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
