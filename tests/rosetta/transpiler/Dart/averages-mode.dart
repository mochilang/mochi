// Generated by Mochi transpiler
List<int> arr1 = [2, 7, 1, 8, 2];
Map<int, int> counts1 = {};
List<int> keys1 = [];
int i = 0;
int max1 = 0;
List<int> modes1 = [];
List<int> arr2 = [2, 7, 1, 8, 2, 8];
Map<int, int> counts2 = {};
List<int> keys2 = [];
int max2 = 0;
List<int> modes2 = [];
void main() {
  while (i < arr1.length) {
    final int v = arr1[i];
    if (counts1.containsKey(v)) {
    counts1[v] = counts1[v]! + 1;
  } else {
    counts1[v] = 1;
    keys1 = [...keys1, v];
  }
    i = i + 1;
  }
  i = 0;
  while (i < keys1.length) {
    final int k = keys1[i];
    final int c = counts1[k]!;
    if (c > max1) {
    max1 = c;
  }
    i = i + 1;
  }
  i = 0;
  while (i < keys1.length) {
    final int k = keys1[i];
    if (counts1[k]! == max1) {
    modes1 = [...modes1, k];
  }
    i = i + 1;
  }
  print((modes1).toString());
  i = 0;
  while (i < arr2.length) {
    final int v = arr2[i];
    if (counts2.containsKey(v)) {
    counts2[v] = counts2[v]! + 1;
  } else {
    counts2[v] = 1;
    keys2 = [...keys2, v];
  }
    i = i + 1;
  }
  i = 0;
  while (i < keys2.length) {
    final int k = keys2[i];
    final int c = counts2[k]!;
    if (c > max2) {
    max2 = c;
  }
    i = i + 1;
  }
  i = 0;
  while (i < keys2.length) {
    final int k = keys2[i];
    if (counts2[k]! == max2) {
    modes2 = [...modes2, k];
  }
    i = i + 1;
  }
  print((modes2).toString());
}
