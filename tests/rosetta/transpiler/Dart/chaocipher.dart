// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String rotate(String s, int n) {
  return _substr(s, n, s.length) + _substr(s, 0, n);
}

String scrambleLeft(String s) {
  return _substr(s, 0, 1) + _substr(s, 2, 14) + _substr(s, 1, 2) + _substr(s, 14, s.length);
}

String scrambleRight(String s) {
  return _substr(s, 1, 3) + _substr(s, 4, 15) + _substr(s, 3, 4) + _substr(s, 15, s.length) + _substr(s, 0, 1);
}

String chao(String text, bool encode) {
  String left = "HXUCZVAMDSLKPEFJRIGTWOBNYQ";
  String right = "PTLNBQDEOYSFAVZKGJRIHWXUMC";
  String out = "";
  int i = 0;
  while (i < text.length) {
    String ch = _substr(text, i, i + 1);
    int idx = 0;
    if (encode) {
    idx = right.indexOf(ch);
    out = out + _substr(left, idx, idx + 1);
  } else {
    idx = left.indexOf(ch);
    out = out + _substr(right, idx, idx + 1);
  }
    left = rotate(left, idx);
    right = rotate(right, idx);
    left = scrambleLeft(left);
    right = scrambleRight(right);
    i = i + 1;
  }
  return out;
}

void _main() {
  String plain = "WELLDONEISBETTERTHANWELLSAID";
  String cipher = chao(plain, true);
  print(plain);
  print(cipher);
  print(chao(cipher, false));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
