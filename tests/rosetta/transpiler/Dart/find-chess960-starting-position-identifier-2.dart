// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

Map<String, String> g2lMap = {"♜": "R", "♞": "N", "♝": "B", "♛": "Q", "♚": "K", "♖": "R", "♘": "N", "♗": "B", "♕": "Q", "♔": "K"};
Map<String, String> names = {"R": "rook", "N": "knight", "B": "bishop", "Q": "queen", "K": "king"};
Map<String, int> ntable = {"01": 0, "02": 1, "03": 2, "04": 3, "12": 4, "13": 5, "14": 6, "23": 7, "24": 8, "34": 9};
int indexOf(String s, String sub) {
  int i = 0;
  while (i <= s.length - sub.length) {
    if (_substr(s, i, i + sub.length) == sub) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String removeChar(String s, String ch) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c != ch) {
    res = res + c;
  }
    i = i + 1;
  }
  return res;
}

String g2l(String pieces) {
  String res = "";
  int i = 0;
  while (i < pieces.length) {
    String ch = _substr(pieces, i, i + 1);
    res = res + g2lMap[ch]!;
    i = i + 1;
  }
  return res;
}

int countChar(String s, String ch) {
  int c = 0;
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    c = c + 1;
  }
    i = i + 1;
  }
  return c;
}

int spid(String pieces) {
  pieces = g2l(pieces);
  if (pieces.length != 8) {
    return -1;
  }
  for (String one in ["K", "Q"]) {
    if (countChar(pieces, one) != 1) {
    return -1;
  }
  }
  for (String two in ["R", "N", "B"]) {
    if (countChar(pieces, two) != 2) {
    return -1;
  }
  }
  int r1 = pieces.indexOf("R");
  int r2 = _substr(pieces, r1 + 1, pieces.length).indexOf("R") + r1 + 1;
  int k = pieces.indexOf("K");
  if (k < r1 || k > r2) {
    return -1;
  }
  int b1 = pieces.indexOf("B");
  int b2 = _substr(pieces, b1 + 1, pieces.length).indexOf("B") + b1 + 1;
  if ((b2 - b1) % 2 == 0) {
    return -1;
  }
  String piecesN = removeChar(removeChar(pieces, "Q"), "B");
  int n1 = piecesN.indexOf("N");
  int n2 = _substr(piecesN, n1 + 1, piecesN.length).indexOf("N") + n1 + 1;
  int N = ntable[(n1).toString() + (n2).toString()]!;
  String piecesQ = removeChar(pieces, "B");
  int Q = piecesQ.indexOf("Q");
  int D = "0246".indexOf((b1).toString());
  int L = "1357".indexOf((b2).toString());
  if (D == 0 - 1) {
    D = "0246".indexOf((b2).toString());
    L = "1357".indexOf((b1).toString());
  }
  return 96 * N + 16 * Q + 4 * D + L;
}

void _main() {
  for (String pieces in ["♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"]) {
    print(pieces + " or " + g2l(pieces) + " has SP-ID of " + (spid(pieces)).toString());
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
