// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> generatePrimes(int n) {
  List<int> primes = [2];
  int cand = 3;
  while (primes.length < n) {
    bool isP = true;
    int i = 0;
    while (i < primes.length) {
    int p = primes[i];
    if (p * p > cand) {
    break;
  }
    if (cand % p == 0) {
    isP = false;
    break;
  }
    i = i + 1;
  }
    if (isP) {
    primes = [...primes, cand];
  }
    cand = cand + 2;
  }
  return primes;
}

List<int> primeFactors(int n, List<int> primes) {
  List<int> factors = <int>[];
  int _num = n;
  int i = 0;
  while (i < primes.length && primes[i] * primes[i] <= _num) {
    int p = primes[i];
    while (_num % p == 0) {
    factors = [...factors, p];
    _num = _num ~/ p;
  }
    i = i + 1;
  }
  if (_num > 1) {
    factors = [...factors, _num];
  }
  return factors;
}

Map<int, int> prevCats = <int, int>{};
int cat(int p, List<int> primes) {
  if (prevCats.containsKey(p)) {
    return (prevCats[p]!)!;
  }
  List<int> pf = primeFactors(p + 1, primes);
  bool all23 = true;
  for (int f in pf) {
    if (f != 2 && f != 3) {
    all23 = false;
    break;
  }
  }
  if (all23) {
    prevCats[p] = 1;
    return 1;
  }
  if (p > 2) {
    List<int> unique = <int>[];
    int last = -1;
    for (int f in pf) {
    if (f != last) {
    unique = [...unique, f];
    last = f;
  }
  };
    pf = unique;
  }
  int c = 2;
  while (c <= 11) {
    bool ok = true;
    for (int f in pf) {
    if (cat(f, primes) >= c) {
    ok = false;
    break;
  }
  }
    if (ok) {
    prevCats[p] = c;
    return c;
  }
    c = c + 1;
  }
  prevCats[p] = 12;
  return 12;
}

String padLeft(int n, int width) {
  String s = (n).toString();
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

void _main() {
  List<int> primes = generatePrimes(1000);
  List<List<int>> es = <List<int>>[];
  for (int __ = 0; __ < 12; __++) {
    es = [...es, []];
  }
  print("First 200 primes:\n");
  int idx = 0;
  while (idx < 200) {
    int p = primes[idx];
    int c = cat(p, primes);
    es[c - 1] = [...es[c - 1], p];
    idx = idx + 1;
  }
  int c = 1;
  while (c <= 6) {
    if (es[c - 1].length > 0) {
    print("Category " + (c).toString() + ":");
    print((es[c - 1]).toString());
    print("");
  }
    c = c + 1;
  }
  print("First thousand primes:\n");
  while (idx < 1000) {
    int p = primes[idx];
    int cv = cat(p, primes);
    es[cv - 1] = [...es[cv - 1], p];
    idx = idx + 1;
  }
  c = 1;
  while (c <= 12) {
    List<int> e = es[c - 1];
    if (e.length > 0) {
    String line = "Category " + padLeft(c, 2) + ": First = " + padLeft(e[0], 7) + "  Last = " + padLeft(e[e.length - 1], 8) + "  Count = " + padLeft(e.length, 6);
    print(line);
  }
    c = c + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
