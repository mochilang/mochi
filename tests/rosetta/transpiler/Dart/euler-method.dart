// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

num floorf(num x) {
  int y = (x).toInt();
  return (y).toDouble();
}

num powf(num base, int exp) {
  num r = 1.0;
  int i = 0;
  while (i < exp) {
    r = r * base;
    i = i + 1;
  }
  return r;
}

String fmtF(num x, int width, int prec) {
  num factor = powf(10.0, prec);
  num y = floorf(x * factor + 0.5) / factor;
  String s = (y).toString();
  int dot = s.indexOf(".");
  if (dot == 0 - 1) {
    s = s + ".";
    int j = 0;
    while (j < prec) {
    s = s + "0";
    j = j + 1;
  };
  } else {
    int decs = s.length - dot - 1;
    while (decs < prec) {
    s = s + "0";
    decs = decs + 1;
  };
  }
  while (s.length < width) {
    s = " " + s;
  }
  return s;
}

num expf(num x) {
  if (x < 0.0) {
    return 1.0 / expf(-x);
  }
  num term = 1.0;
  num sum = 1.0;
  int i = 1;
  while (i < 20) {
    term = term * x / ((i).toDouble());
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

num eulerStep(dynamic f, num x, num y, num h) {
  return y + h * f(x, y);
}

dynamic newCoolingRate(num k) {
  return ((dt) => -k * dt);
}

dynamic newTempFunc(num k, num ambient, num initial) {
  return ((t) => ambient + (initial - ambient) * expf(-k * t));
}

dynamic newCoolingRateDy(num k, num ambient) {
  var cr = newCoolingRate(k);
  return ((_x, obj) => cr(obj - ambient));
}

void _main() {
  num k = 0.07;
  num tempRoom = 20.0;
  num tempObject = 100.0;
  var fcr = newCoolingRateDy(k, tempRoom);
  var analytic = newTempFunc(k, tempRoom, tempObject);
  for (num step in [2.0, 5.0, 10.0]) {
    print("Step size = " + fmtF(step, 0, 1));
    print(" Time Euler's Analytic");
    num temp = tempObject;
    num time = 0.0;
    while (time <= 100.0) {
    String line = fmtF(time, 5, 1) + " " + fmtF(temp, 7, 3) + " " + fmtF(analytic(time), 7, 3);
    print(line);
    temp = eulerStep(fcr, time, temp, step);
    time = time + step;
  }
    print("");
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
