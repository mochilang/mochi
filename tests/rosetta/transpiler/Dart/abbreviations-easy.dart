// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  List<String> fields(String s) {
  List<String> words = [];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    final String ch = s.substring(i, i + 1);
    if (ch == " " || ch == "\n" || ch == "	") {
    if (cur.length > 0) {
    words = [...words, cur];
    cur = "";
  };
  } else {
    cur = cur + ch;
  }
    i = i + 1;
  }
  if (cur.length > 0) {
    words = [...words, cur];
  }
  return words;
}
  String padRight(String s, int width) {
  String out = s;
  int i = s.length;
  while (i < width) {
    out = out + " ";
    i = i + 1;
  }
  return out;
}
  String join(List<String> xs, String sep) {
  String res = "";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    res = res + sep;
  }
    res = res + xs[i];
    i = i + 1;
  }
  return res;
}
  List<String> validate(List<String> commands, List<String> words, List<int> mins) {
  List<String> results = [];
  if (words.length == 0) {
    return results;
  }
  int wi = 0;
  while (wi < words.length) {
    final String w = words[wi];
    bool found = false;
    final int wlen = w.length;
    int ci = 0;
    while (ci < commands.length) {
    final String cmd = commands[ci];
    if (mins[ci] != 0 && wlen >= mins[ci] && wlen <= cmd.length) {
    final String c = cmd.toUpperCase();
    final String ww = w.toUpperCase();
    if (c.substring(0, wlen) == ww) {
    results = [...results, c];
    found = true;
    break;
  };
  }
    ci = ci + 1;
  }
    if (!found) {
    results = [...results, "*error*"];
  }
    wi = wi + 1;
  }
  return results;
}
  void main() {
  final String table = "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find " + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput " + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO " + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT " + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT " + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ";
  final List<String> commands = fields(table);
  List<int> mins = [];
  int i = 0;
  while (i < commands.length) {
    int count = 0;
    int j = 0;
    final String cmd = commands[i];
    while (j < cmd.length) {
    final String ch = cmd.substring(j, j + 1);
    if (ch.compareTo("A") >= 0 && ch.compareTo("Z") <= 0) {
    count = count + 1;
  }
    j = j + 1;
  }
    mins = [...mins, count];
    i = i + 1;
  }
  final String sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin";
  final List<String> words = fields(sentence);
  final List<String> results = validate(commands, words, mins);
  String out1 = "user words:  ";
  int k = 0;
  while (k < words.length) {
    out1 = out1 + padRight(words[k], results[k].length) + " ";
    k = k + 1;
  }
  print(out1);
  print("full words:  " + join(results, " "));
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
