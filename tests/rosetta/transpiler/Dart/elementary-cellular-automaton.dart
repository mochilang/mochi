// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int bitAt(int x, int idx) {
  int v = x;
  int i = 0;
  while (i < idx) {
    v = v ~/ 2 as int;
    i = i + 1;
  }
  return v % 2;
}

void outputState(String state) {
  String line = "";
  int i = 0;
  while (i < state.length) {
    if (_substr(state, i, i + 1) == "1") {
    line = line + "#";
  } else {
    line = line + " ";
  }
    i = i + 1;
  }
  print(line);
}

String step(String state, int r) {
  int cells = state.length;
  String out = "";
  int i = 0;
  while (i < cells) {
    String l = _substr(state, (i - 1 + cells) % cells, (i - 1 + cells) % cells + 1);
    String c = _substr(state, i, i + 1);
    String rt = _substr(state, (i + 1) % cells, (i + 1) % cells + 1);
    int idx = 0;
    if (l == "1") {
    idx = idx + 4;
  }
    if (c == "1") {
    idx = idx + 2;
  }
    if (rt == "1") {
    idx = idx + 1;
  }
    if (bitAt(r, idx) == 1) {
    out = out + "1";
  } else {
    out = out + "0";
  }
    i = i + 1;
  }
  return out;
}

void elem(int r, int cells, int generations, String state) {
  outputState(state);
  int g = 0;
  String s = state;
  while (g < generations) {
    s = step(s, r);
    outputState(s);
    g = g + 1;
  }
}

String randInit(int cells, int seed) {
  String s = "";
  int val = seed;
  int i = 0;
  while (i < cells) {
    val = (val * 1664525 + 1013904223) % 2147483647;
    if (val % 2 == 0) {
    s = s + "0";
  } else {
    s = s + "1";
  }
    i = i + 1;
  }
  return s;
}

String singleInit(int cells) {
  String s = "";
  int i = 0;
  while (i < cells) {
    if (i == cells ~/ 2) {
    s = s + "1";
  } else {
    s = s + "0";
  }
    i = i + 1;
  }
  return s;
}

void _main() {
  int cells = 20;
  int generations = 9;
  print("Single 1, rule 90:");
  String state = singleInit(cells);
  elem(90, cells, generations, state);
  print("Random intial state, rule 30:");
  state = randInit(cells, 3);
  elem(30, cells, generations, state);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
