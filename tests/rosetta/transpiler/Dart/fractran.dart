// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class StepResult {
  BigInt n;
  bool ok;
  StepResult({required this.n, required this.ok});
}

StepResult step(BigInt n, List<List<BigInt>> program) {
  int i = 0;
  while (i < program.length) {
    BigInt _num = program[i][0];
    BigInt den = program[i][1];
    if (n % den == (BigInt.from(0))) {
    n = n ~/ den * _num;
    return StepResult(n: n, ok: true);
  }
    i = i + 1;
  }
  return StepResult(n: n, ok: false);
}

void _main() {
  List<List<BigInt>> program = [[BigInt.from(17), BigInt.from(91)], [BigInt.from(78), BigInt.from(85)], [BigInt.from(19), BigInt.from(51)], [BigInt.from(23), BigInt.from(38)], [BigInt.from(29), BigInt.from(33)], [BigInt.from(77), BigInt.from(29)], [BigInt.from(95), BigInt.from(23)], [BigInt.from(77), BigInt.from(19)], [BigInt.from(1), BigInt.from(17)], [BigInt.from(11), BigInt.from(13)], [BigInt.from(13), BigInt.from(11)], [BigInt.from(15), BigInt.from(14)], [BigInt.from(15), BigInt.from(2)], [BigInt.from(55), BigInt.from(1)]];
  BigInt n = BigInt.from(2);
  int primes = 0;
  int count = 0;
  int limit = 1000000;
  BigInt two = BigInt.from(2);
  String line = "";
  while (primes < 20 && count < limit) {
    StepResult res = step(n, program);
    n = res.n;
    if (!res.ok) {
    break;
  }
    BigInt m = n;
    int pow = 0;
    while (m % two == (BigInt.from(0))) {
    m = m ~/ two;
    pow = pow + 1;
  }
    if (m == (BigInt.from(1)) && pow > 1) {
    line = line + (pow).toString() + " ";
    primes = primes + 1;
  }
    count = count + 1;
  }
  if (line.length > 0) {
    print(_substr(line, 0, line.length - 1));
  } else {
    print("");
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
