// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

void printFactors(int n) {
  if (n < 1) {
    print("\nFactors of " + (n).toString() + " not computed");
    return;
  }
  print("\nFactors of " + (n).toString() + ": ");
  List<int> fs = [1];
  void apf(int p, int e) {
  int orig = fs.length;
  int pp = p;
  int i = 0;
  while (i < e) {
    int j = 0;
    while (j < orig) {
    fs = [...fs, fs[j] * pp];
    j = j + 1;
  }
    i = i + 1;
    pp = pp * p;
  }
}
  int e = 0;
  int m = n;
  while (m % 2 == 0) {
    m = m ~/ 2 as int;
    e = e + 1;
  }
  apf(2, e);
  int d = 3;
  while (m > 1) {
    if (d * d > m) {
    d = m;
  }
    e = 0;
    while (m % d == 0) {
    m = m ~/ d as int;
    e = e + 1;
  }
    if (e > 0) {
    apf(d, e);
  }
    d = d + 2;
  }
  print((fs).toString());
  print("Number of factors = " + (fs.length).toString());
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  printFactors(-1);
  printFactors(0);
  printFactors(1);
  printFactors(2);
  printFactors(3);
  printFactors(53);
  printFactors(45);
  printFactors(64);
  printFactors(600851475143);
  printFactors(999999999999999989);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
