// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<int> digits(int n) {
  if (n == 0) {
    return [0];
  }
  List<int> rev = <int>[];
  int x = n;
  while (x > 0) {
    rev = [...rev, x % 10];
    x = x ~/ 10 as int;
  }
  List<int> out = <int>[];
  int i = rev.length - 1;
  while (i >= 0) {
    out = [...out, rev[i]];
    i = i - 1;
  }
  return out;
}

String commatize(int n) {
  String s = (n).toString();
  String out = "";
  int i = s.length;
  while (i > 3) {
    out = "," + _substr(s, i - 3, i) + out;
    i = i - 3;
  }
  out = _substr(s, 0, i) + out;
  return out;
}

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  int d = 5;
  while (d * d <= n) {
    if (n % d == 0) {
    return false;
  }
    d = d + 2;
    if (n % d == 0) {
    return false;
  }
    d = d + 4;
  }
  return true;
}

List<String> split(String s, String sep) {
  List<String> parts = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    if (i + sep.length <= s.length && _substr(s, i, i + sep.length) == sep) {
    parts = [...parts, cur];
    cur = "";
    i = i + sep.length;
  } else {
    cur = cur + _substr(s, i, i + 1);
    i = i + 1;
  }
  }
  parts = [...parts, cur];
  return parts;
}

int parseIntStr(String str) {
  int i = 0;
  bool neg = false;
  if (str.length > 0 && _substr(str, 0, 1) == "-") {
    neg = true;
    i = 1;
  }
  int n = 0;
  Map<String, int> digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while (i < str.length) {
    n = n * 10 + (digits[_substr(str, i, i + 1)] ?? 0);
    i = i + 1;
  }
  if (neg) {
    n = -n;
  }
  return n;
}

String reverseStr(String s) {
  String out = "";
  int i = s.length - 1;
  while (i >= 0) {
    out = out + _substr(s, i, i + 1);
    i = i - 1;
  }
  return out;
}

String pad(String s, int w) {
  String out = s;
  while (out.length < w) {
    out = " " + out;
  }
  return out;
}

List<int> findFirst(List<int> list) {
  int i = 0;
  while (i < list.length) {
    if (list[i] > 10000000) {
    return [list[i], i];
  }
    i = i + 1;
  }
  return [-1, -1];
}

void _main() {
  List<List<int>> ranges = [[0, 0], [101, 909], [11011, 99099], [1110111, 9990999], [111101111, 119101111]];
  List<int> cyclops = <int>[];
  for (List<int> r in ranges) {
    int start = r[0];
    int end = r[1];
    int numDigits = (start).toString().length;
    int center = numDigits ~/ 2;
    int i = start;
    while (i <= end) {
    List<int> ds = digits(i);
    if (ds[center] == 0) {
    int count = 0;
    for (int d in ds) {
    if (d == 0) {
    count = count + 1;
  }
  };
    if (count == 1) {
    cyclops = [...cyclops, i];
  };
  }
    i = i + 1;
  }
  }
  print("The first 50 cyclops numbers are:");
  int idx = 0;
  while (idx < 50) {
    print(pad(commatize(cyclops[idx]), 6) + " ");
    idx = idx + 1;
    if (idx % 10 == 0) {
    print("\n");
  }
  }
  List<int> fi = findFirst(cyclops);
  print("\nFirst such number > 10 million is " + commatize(fi[0]) + " at zero-based index " + commatize(fi[1]));
  List<int> primes = <int>[];
  for (int n in cyclops) {
    if (isPrime(n)) {
    primes = [...primes, n];
  }
  }
  print("\n\nThe first 50 prime cyclops numbers are:");
  idx = 0;
  while (idx < 50) {
    print(pad(commatize(primes[idx]), 6) + " ");
    idx = idx + 1;
    if (idx % 10 == 0) {
    print("\n");
  }
  }
  List<int> fp = findFirst(primes);
  print("\nFirst such number > 10 million is " + commatize(fp[0]) + " at zero-based index " + commatize(fp[1]));
  List<int> bpcyclops = <int>[];
  List<int> ppcyclops = <int>[];
  for (int p in primes) {
    String ps = (p).toString();
    List<String> splitp = split(ps, "0");
    int noMiddle = int.parse(splitp[0] + splitp[1]);
    if (isPrime(noMiddle)) {
    bpcyclops = [...bpcyclops, p];
  }
    if (ps == reverseStr(ps)) {
    ppcyclops = [...ppcyclops, p];
  }
  }
  print("\n\nThe first 50 blind prime cyclops numbers are:");
  idx = 0;
  while (idx < 50) {
    print(pad(commatize(bpcyclops[idx]), 6) + " ");
    idx = idx + 1;
    if (idx % 10 == 0) {
    print("\n");
  }
  }
  List<int> fb = findFirst(bpcyclops);
  print("\nFirst such number > 10 million is " + commatize(fb[0]) + " at zero-based index " + commatize(fb[1]));
  print("\n\nThe first 50 palindromic prime cyclops numbers are:");
  idx = 0;
  while (idx < 50) {
    print(pad(commatize(ppcyclops[idx]), 9) + " ");
    idx = idx + 1;
    if (idx % 8 == 0) {
    print("\n");
  }
  }
  List<int> fpp = findFirst(ppcyclops);
  print("\n\nFirst such number > 10 million is " + commatize(fpp[0]) + " at zero-based index " + commatize(fpp[1]));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
