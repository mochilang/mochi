// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

List<List<String>> initGrid(int size) {
  List<List<String>> g = <List<String>>[];
  int y = 0;
  while (y < size) {
    List<String> row = <String>[];
    int x = 0;
    while (x < size) {
    row = [...row, " "];
    x = x + 1;
  }
    g = [...g, row];
    y = y + 1;
  }
  return g;
}

void set(List<List<String>> g, int x, int y) {
  if (x >= 0 && x < g[0].length && y >= 0 && y < g.length) {
    g[y]![x] = "#";
  }
}

List<List<String>> circle(int r) {
  final int size = r * 2 + 1;
  List<List<String>> g = initGrid(size);
  int x = r;
  int y = 0;
  int err = 1 - r;
  while (y <= x) {
    set(g, r + x, r + y);
    set(g, r + y, r + x);
    set(g, r - x, r + y);
    set(g, r - y, r + x);
    set(g, r - x, r - y);
    set(g, r - y, r - x);
    set(g, r + x, r - y);
    set(g, r + y, r - x);
    y = y + 1;
    if (err < 0) {
    err = err + 2 * y + 1;
  } else {
    x = x - 1;
    err = err + 2 * (y - x) + 1;
  }
  }
  return g;
}

String trimRight(List<String> row) {
  int end = row.length;
  while (end > 0 && row[end - 1] == " ") {
    end = end - 1;
  }
  String s = "";
  int i = 0;
  while (i < end) {
    s = s + row[i];
    i = i + 1;
  }
  return s;
}

List<List<String>> g = circle(10);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  for (var row in g) {
    print(trimRight(row));
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
