// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int indexOf3(String s, String ch, int start) {
  int i = start;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  String digits = "0123456789";
  int idx = indexOf3(digits, ch, 0);
  if (idx >= 0) {
    return 48 + idx;
  }
  if (ch == "X") {
    return 88;
  }
  if (ch == "é") {
    return 233;
  }
  if (ch == "😍") {
    return 128525;
  }
  if (ch == "🐡") {
    return 128033;
  }
  return 0;
}

String toHex(int n) {
  String digits = "0123456789ABCDEF";
  if (n == 0) {
    return "0";
  }
  int v = n;
  String out = "";
  while (v > 0) {
    int d = v % 16;
    out = _substr(digits, d, d + 1) + out;
    v = v ~/ 16;
  }
  return out;
}

void analyze(String s) {
  int le = s.length;
  print("Analyzing \"" + s + "\" which has a length of " + (le).toString() + ":");
  if (le > 1) {
    int i = 0;
    while (i < le - 1) {
    int j = i + 1;
    while (j < le) {
    if (_substr(s, j, j + 1) == _substr(s, i, i + 1)) {
    String ch = _substr(s, i, i + 1);
    print("  Not all characters in the string are unique.");
    print("  '" + ch + "' (0x" + toHex(ord(ch)).toLowerCase() + ") is duplicated at positions " + (i + 1).toString() + " and " + (j + 1).toString() + ".\n");
    return;
  }
    j = j + 1;
  }
    i = i + 1;
  };
  }
  print("  All characters in the string are unique.\n");
}

void _main() {
  List<String> strings = ["", ".", "abcABC", "XYZ ZYX", "1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ", "01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X", "hétérogénéité", "🎆🎃🎇🎈", "😍😀🙌💃😍🙌", "🐠🐟🐡🦈🐬🐳🐋🐡"];
  int i = 0;
  while (i < strings.length) {
    analyze(strings[i]);
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
