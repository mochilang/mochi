// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Point3 {
  num x;
  num y;
  num z;
  Point3({required this.x, required this.y, required this.z});
}

class Point2 {
  int x;
  int y;
  Point2({required this.x, required this.y});
}

num PI = 3.141592653589793;
num TWO_PI = 6.283185307179586;
num _mod(num x, num m) {
  return x - (((x / m).toInt()).toDouble()) * m;
}

num _sin(num x) {
  num y = _mod(x + PI, TWO_PI) - PI;
  num y2 = y * y;
  num y3 = y2 * y;
  num y5 = y3 * y2;
  num y7 = y5 * y2;
  return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0;
}

num _cos(num x) {
  num y = _mod(x + PI, TWO_PI) - PI;
  num y2 = y * y;
  num y4 = y2 * y2;
  num y6 = y4 * y2;
  return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0;
}

List<Point3> nodes = [Point3(x: -1.0, y: -1.0, z: -1.0), Point3(x: -1.0, y: -1.0, z: 1.0), Point3(x: -1.0, y: 1.0, z: -1.0), Point3(x: -1.0, y: 1.0, z: 1.0), Point3(x: 1.0, y: -1.0, z: -1.0), Point3(x: 1.0, y: -1.0, z: 1.0), Point3(x: 1.0, y: 1.0, z: -1.0), Point3(x: 1.0, y: 1.0, z: 1.0)];
List<List<int>> edges = [[0, 1], [1, 3], [3, 2], [2, 0], [4, 5], [5, 7], [7, 6], [6, 4], [0, 4], [1, 5], [2, 6], [3, 7]];
Point3 rotate(Point3 p, num ax, num ay) {
  num sinx = _sin(ax);
  num cosx = _cos(ax);
  num siny = _sin(ay);
  num cosy = _cos(ay);
  num x1 = p.x;
  num y1 = p.y * cosx - p.z * sinx;
  num z1 = p.y * sinx + p.z * cosx;
  num x2 = x1 * cosy + z1 * siny;
  num z2 = -x1 * siny + z1 * cosy;
  return Point3(x: x2, y: y1, z: z2);
}

int width = 40;
int height = 20;
num distance = 3.0;
num scale = 8.0;
Point2 project(Point3 p) {
  num factor = scale / (p.z + distance);
  int x = ((p.x * factor).toInt()) + width ~/ 2;
  int y = ((-p.y * factor).toInt()) + height ~/ 2;
  return Point2(x: x, y: y);
}

List<List<String>> clearGrid() {
  List<List<String>> g = <List<String>>[];
  int y = 0;
  while (y < height) {
    List<String> row = <String>[];
    int x = 0;
    while (x < width) {
    row = [...row, " "];
    x = x + 1;
  }
    g = [...g, row];
    y = y + 1;
  }
  return g;
}

void drawPoint(List<List<String>> g, int x, int y, String ch) {
  if (x >= 0 && x < width && y >= 0 && y < height) {
    List<String> row = g[y];
    row[x] = ch;
    g[y] = row;
  }
}

void bresenham(int x0, int y0, int x1, int y1, List<List<String>> g, String ch) {
  int dx = x1 - x0;
  if (dx < 0) {
    dx = -dx;
  }
  int dy = y1 - y0;
  if (dy < 0) {
    dy = -dy;
  }
  int sx = -1;
  if (x0 < x1) {
    sx = 1;
  }
  int sy = -1;
  if (y0 < y1) {
    sy = 1;
  }
  int err = dx - dy;
  while (true) {
    drawPoint(g, x0, y0, ch);
    if (x0 == x1 && y0 == y1) {
    break;
  }
    int e2 = 2 * err;
    if (e2 > -dy) {
    err = err - dy;
    x0 = x0 + sx;
  }
    if (e2 < dx) {
    err = err + dx;
    y0 = y0 + sy;
  }
  }
}

String render(List<List<String>> g) {
  String out = "";
  int y = 0;
  while (y < height) {
    String line = "";
    int x = 0;
    while (x < width) {
    line = line + g[y][x];
    x = x + 1;
  }
    out = out + line + "\n";
    y = y + 1;
  }
  return out;
}

void _main() {
  int f = 0;
  while (f < 10) {
    List<List<String>> grid = clearGrid();
    List<Point2> rot = <Point2>[];
    int i = 0;
    num ay = PI / 4.0 + ((f).toDouble()) * PI / 10.0;
    while (i < nodes.length) {
    Point3 p = rotate(nodes[i], PI / 4.0, ay);
    Point2 pp = project(p);
    rot = [...rot, pp];
    i = i + 1;
  }
    int e = 0;
    while (e < edges.length) {
    int a = edges[e][0];
    int b = edges[e][1];
    Point2 p1 = rot[a];
    Point2 p2 = rot[b];
    bresenham(p1.x, p1.y, p2.x, p2.y, grid, "#");
    e = e + 1;
  }
    print(render(grid));
    f = f + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
