// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  int d = 5;
  while (d * d <= n) {
    if (n % d == 0) {
    return false;
  }
    d = d + 2;
    if (n % d == 0) {
    return false;
  }
    d = d + 4;
  }
  return true;
}

List<int> bigTrim(List<int> a) {
  int n = a.length;
  while (n > 1 && a[n - 1] == 0) {
    a = a.sublist(0, n - 1);
    n = n - 1;
  }
  return a;
}

List<int> bigFromInt(int x) {
  if (x == 0) {
    return [0];
  }
  List<int> digits = <int>[];
  int n = x;
  while (n > 0) {
    digits = [...digits, n % 10];
    n = n ~/ 10;
  }
  return digits;
}

List<int> bigMulSmall(List<int> a, int m) {
  if (m == 0) {
    return [0];
  }
  List<int> res = <int>[];
  int carry = 0;
  int i = 0;
  while (i < a.length) {
    int prod = a[i] * m + carry;
    res = [...res, prod % 10];
    carry = prod ~/ 10;
    i = i + 1;
  }
  while (carry > 0) {
    res = [...res, carry % 10];
    carry = carry ~/ 10;
  }
  return bigTrim(res);
}

String bigToString(List<int> a) {
  String s = "";
  int i = a.length - 1;
  while (i >= 0) {
    s = s + (a[i]).toString();
    i = i - 1;
  }
  return s;
}

int pow2(int k) {
  int r = 1;
  int i = 0;
  while (i < k) {
    r = r * 2;
    i = i + 1;
  }
  return r;
}

List<int> ccFactors(int n, int m) {
  int p = 6 * m + 1;
  if (!isPrime(p)) {
    return List<int>.from([]);
  }
  List<int> prod = bigFromInt(p);
  p = 12 * m + 1;
  if (!isPrime(p)) {
    return List<int>.from([]);
  }
  prod = bigMulSmall(prod, p);
  int i = 1;
  while (i <= n - 2) {
    p = pow2(i) * 9 * m + 1;
    if (!isPrime(p)) {
    return List<int>.from([]);
  }
    prod = bigMulSmall(prod, p);
    i = i + 1;
  }
  return prod;
}

void ccNumbers(int start, int end) {
  int n = start;
  while (n <= end) {
    int m = 1;
    if (n > 4) {
    m = pow2(n - 4);
  }
    while (true) {
    List<int> _num = ccFactors(n, m);
    if (_num.length > 0) {
    print("a(" + (n).toString() + ") = " + bigToString(_num));
    break;
  }
    if (n <= 4) {
    m = m + 1;
  } else {
    m = m + pow2(n - 4);
  }
  }
    n = n + 1;
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  ccNumbers(3, 9);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
