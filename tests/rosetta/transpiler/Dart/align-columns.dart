// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  List<String> split(String s, String sep) {
  List<String> parts = [];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    if (sep.length > 0 && i + sep.length <= s.length && s.substring(i, i + sep.length) == sep) {
    parts = [...parts, cur];
    cur = "";
    i = i + sep.length;
  } else {
    cur = cur + s.substring(i, i + 1);
    i = i + 1;
  }
  }
  parts = [...parts, cur];
  return parts;
}
  List<String> rstripEmpty(List<String> words) {
  int n = words.length;
  while (n > 0 && words[n - 1] == "") {
    n = n - 1;
  }
  return words.sublist(0, n);
}
  String spaces(int n) {
  String out = "";
  int i = 0;
  while (i < n) {
    out = out + " ";
    i = i + 1;
  }
  return out;
}
  String pad(String word, int width, int align) {
  final int diff = width - word.length;
  if (align == 0) {
    return word + spaces(diff);
  }
  if (align == 2) {
    return spaces(diff) + word;
  }
  int left = diff ~/ 2 as int;
  int right = diff - left;
  return spaces(left) + word + spaces(right);
}
  Map<String, dynamic> newFormatter(String text) {
  List<String> lines = split(text, "\n");
  List<List<String>> fmtLines = [];
  List<int> width = [];
  int i = 0;
  while (i < lines.length) {
    if (lines[i].length == 0) {
    i = i + 1;
    continue;
  }
    List<String> words = rstripEmpty(split(lines[i], "\$"));
    fmtLines = [...fmtLines, words];
    int j = 0;
    while (j < words.length) {
    final int wlen = words[j].length;
    if (j == width.length) {
    width = [...width, wlen];
  } else {
    if (wlen > width[j]) {
    width[j] = wlen;
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return {"text": fmtLines, "width": width};
}
  void printFmt(Map<String, dynamic> f, int align) {
  final List<List<String>> lines = f["text"]!! as List<List<String>>;
  final List<int> width = f["width"]!! as List<int>;
  int i = 0;
  while (i < lines.length) {
    final List<String> words = lines[i];
    String line = "";
    int j = 0;
    while (j < words.length) {
    line = line + pad(words[j], width[j], align) + " ";
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
  print("");
}
  final String text = "Given\$a\$text\$file\$of\$many\$lines,\$where\$fields\$within\$a\$line\n" + "are\$delineated\$by\$a\$single\$'dollar'\$character,\$write\$a\$program\n" + "that\$aligns\$each\$column\$of\$fields\$by\$ensuring\$that\$words\$in\$each\n" + "column\$are\$separated\$by\$at\$least\$one\$space.\n" + "Further,\$allow\$for\$each\$word\$in\$a\$column\$to\$be\$either\$left\n" + "justified,\$right\$justified,\$or\$center\$justified\$within\$its\$column.";
  final Map<String, dynamic> f = newFormatter(text);
  printFmt(f, 0);
  printFmt(f, 1);
  printFmt(f, 2);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
