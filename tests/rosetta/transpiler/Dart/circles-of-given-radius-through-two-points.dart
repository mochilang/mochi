// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

class Point {
  num x;
  num y;
  Point({required this.x, required this.y});
}

num sqrtApprox(num x) {
  num g = x;
  int i = 0;
  while (i < 40) {
    g = (g + x / g) / 2.0;
    i = i + 1;
  }
  return g;
}

num hypot(num x, num y) {
  return sqrtApprox(x * x + y * y);
}

String Two = "Two circles.";
String R0 = "R==0.0 does not describe circles.";
String Co = "Coincident points describe an infinite number of circles.";
String CoR0 = "Coincident points with r==0.0 describe a degenerate circle.";
String Diam = "Points form a diameter and describe only a single circle.";
String Far = "Points too far apart to form circles.";
List<dynamic> circles(Point p1, Point p2, num r) {
  if (p1.x == p2.x && p1.y == p2.y) {
    if (r == 0.0) {
    return [p1, p1, "Coincident points with r==0.0 describe a degenerate circle."];
  };
    return [p1, p2, "Coincident points describe an infinite number of circles."];
  }
  if (r == 0.0) {
    return [p1, p2, "R==0.0 does not describe circles."];
  }
  num dx = p2.x - p1.x;
  num dy = p2.y - p1.y;
  num q = hypot(dx, dy);
  if (q > 2.0 * r) {
    return [p1, p2, "Points too far apart to form circles."];
  }
  Point m = Point(x: (p1.x + p2.x) / 2.0, y: (p1.y + p2.y) / 2.0);
  if (q == 2.0 * r) {
    return [m, m, "Points form a diameter and describe only a single circle."];
  }
  num d = sqrtApprox(r * r - q * q / 4.0);
  num ox = d * dx / q;
  num oy = d * dy / q;
  return [Point(x: m.x - oy, y: m.y + ox), Point(x: m.x + oy, y: m.y - ox), "Two circles."];
}

List<List<dynamic>> td = [[Point(x: 0.1234, y: 0.9876), Point(x: 0.8765, y: 0.2345), 2.0], [Point(x: 0.0, y: 2.0), Point(x: 0.0, y: 0.0), 1.0], [Point(x: 0.1234, y: 0.9876), Point(x: 0.1234, y: 0.9876), 2.0], [Point(x: 0.1234, y: 0.9876), Point(x: 0.8765, y: 0.2345), 0.5], [Point(x: 0.1234, y: 0.9876), Point(x: 0.1234, y: 0.9876), 0.0]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  for (var tc in td) {
    var p1 = tc[0];
    var p2 = tc[1];
    var r = tc[2];
    print("p1:  {" + (p1.x).toString() + " " + (p1.y).toString() + "}");
    print("p2:  {" + (p2.x).toString() + " " + (p2.y).toString() + "}");
    print("r:  " + (r).toString());
    List<dynamic> res = circles(p1, p2, r);
    var c1 = res[0];
    var c2 = res[1];
    var caseStr = res[2];
    print("   " + caseStr);
    if (caseStr == "Points form a diameter and describe only a single circle." || caseStr == "Coincident points with r==0.0 describe a degenerate circle.") {
    print("   Center:  {" + (c1.x).toString() + " " + (c1.y).toString() + "}");
  } else {
    if (caseStr == "Two circles.") {
    print("   Center 1:  {" + (c1.x).toString() + " " + (c1.y).toString() + "}");
    print("   Center 2:  {" + (c2.x).toString() + " " + (c2.y).toString() + "}");
  };
  }
    print("");
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
