// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

void printExpI(int b, int p) {
  if (p < 0) {
    print((b).toString() + "^" + (p).toString() + ": negative power not allowed");
    return;
  }
  int r = 1;
  int i = 1;
  while (i <= p) {
    r = r * b;
    i = i + 1;
  }
  print((b).toString() + "^" + (p).toString() + ": " + (r).toString());
}

num expF(num b, int p) {
  bool neg = false;
  if (p < 0) {
    neg = true;
    p = -p;
  }
  num r = 1.0;
  num pow = b;
  while (p > 0) {
    if (p % 2 == 1) {
    r = r * pow;
  }
    pow = pow * pow;
    p = p ~/ 2;
  }
  if (neg) {
    r = 1.0 / r;
  }
  return r;
}

void printExpF(num b, int p) {
  if (b == 0.0 && p < 0) {
    print((b).toString() + "^" + (p).toString() + ": +Inf");
    return;
  }
  print((b).toString() + "^" + (p).toString() + ": " + (expF(b, p)).toString());
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("expI tests");
  printExpI(2, 10);
  printExpI(2, -10);
  printExpI(-2, 10);
  printExpI(-2, 11);
  printExpI(11, 0);
  print("overflow undetected");
  printExpI(10, 10);
  print("\nexpF tests:");
  printExpF(2.0, 10);
  printExpF(2.0, -10);
  printExpF(-2.0, 10);
  printExpF(-2.0, 11);
  printExpF(11.0, 0);
  print("disallowed in expI, allowed here");
  printExpF(0.0, -1);
  print("other interesting cases for 32 bit float type");
  printExpF(10.0, 39);
  printExpF(10.0, -39);
  printExpF(-10.0, 39);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
