// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}

int powInt(int base, int exp) {
  int r = 1;
  int b = base;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    r = r * b;
  }
    b = b * b;
    e = e ~/ (2 as int);
  }
  return r;
}

int minInt(int x, int y) {
  if (x < y) {
    return x;
  }
  return y;
}

void throwDie(int nSides, int nDice, int s, List<int> counts) {
  if (nDice == 0) {
    counts[s] = counts[s] + 1;
    return;
  }
  int i = 1;
  while (i <= nSides) {
    throwDie(nSides, nDice - 1, s + i, counts);
    i = i + 1;
  }
}

num beatingProbability(int nSides1, int nDice1, int nSides2, int nDice2) {
  int len1 = (nSides1 + 1) * nDice1;
  List<int> c1 = <int>[];
  int i = 0;
  while (i < len1) {
    c1 = [...c1, 0];
    i = i + 1;
  }
  throwDie(nSides1, nDice1, 0, c1);
  int len2 = (nSides2 + 1) * nDice2;
  List<int> c2 = <int>[];
  int j = 0;
  while (j < len2) {
    c2 = [...c2, 0];
    j = j + 1;
  }
  throwDie(nSides2, nDice2, 0, c2);
  num p12 = ((powInt(nSides1, nDice1)).toDouble()) * ((powInt(nSides2, nDice2)).toDouble());
  num tot = 0.0;
  i = 0;
  while (i < len1) {
    j = 0;
    int m = minInt(i, len2);
    while (j < m) {
    tot = tot + c1[i] * ((c2[j]).toDouble()) / p12;
    j = j + 1;
  }
    i = i + 1;
  }
  return tot;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((beatingProbability(4, 9, 6, 6)).toString());
  print((beatingProbability(10, 5, 7, 6)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
