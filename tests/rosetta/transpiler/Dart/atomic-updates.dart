// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

List<int> randOrder(int seed, int n) {
  final int next = (seed * 1664525 + 1013904223) % 2147483647;
  return [next, next % n];
}

List<int> randChaos(int seed, int n) {
  final int next = (seed * 1103515245 + 12345) % 2147483647;
  return [next, next % n];
}

void main() {
  final int nBuckets = 10;
  final int initialSum = 1000;
  List<int> buckets = [];
  for (int i = 0; i < nBuckets; i++) {
    buckets = [...buckets, 0];
  }
  int i = nBuckets;
  int dist = initialSum;
  while (i > 0) {
    final int v = dist ~/ i;
    i = i - 1;
    buckets[i] = v;
    dist = dist - v;
  }
  int tc0 = 0;
  int tc1 = 0;
  int total = 0;
  int nTicks = 0;
  int seedOrder = 1;
  int seedChaos = 2;
  print("sum  ---updates---    mean  buckets");
  int t = 0;
  while (t < 5) {
    List<int> r = randOrder(seedOrder, nBuckets);
    seedOrder = r[0];
    int b1 = r[1];
    int b2 = (b1 + 1) % nBuckets;
    final int v1 = buckets[b1];
    final int v2 = buckets[b2];
    if (v1 > v2) {
    int a = (v1 - v2) ~/ 2 as int;
    if (a > buckets[b1]) {
    a = buckets[b1];
  };
    buckets[b1] = buckets[b1] - a;
    buckets[b2] = buckets[b2] + a;
  } else {
    int a = (v2 - v1) ~/ 2 as int;
    if (a > buckets[b2]) {
    a = buckets[b2];
  };
    buckets[b2] = buckets[b2] - a;
    buckets[b1] = buckets[b1] + a;
  }
    tc0 = tc0 + 1;
    r = randChaos(seedChaos, nBuckets);
    seedChaos = r[0];
    b1 = r[1];
    b2 = (b1 + 1) % nBuckets;
    r = randChaos(seedChaos, buckets[b1] + 1);
    seedChaos = r[0];
    int amt = r[1];
    if (amt > buckets[b1]) {
    amt = buckets[b1];
  }
    buckets[b1] = buckets[b1] - amt;
    buckets[b2] = buckets[b2] + amt;
    tc1 = tc1 + 1;
    int sum = 0;
    int idx = 0;
    while (idx < nBuckets) {
    sum = sum + buckets[idx];
    idx = idx + 1;
  }
    total = total + tc0 + tc1;
    nTicks = nTicks + 1;
    print((sum).toString() + " " + (tc0).toString() + " " + (tc1).toString() + " " + (total ~/ nTicks).toString() + "  " + (buckets).toString());
    tc0 = 0;
    tc1 = 0;
    t = t + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}
