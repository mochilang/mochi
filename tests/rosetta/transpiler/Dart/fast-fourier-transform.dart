// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Complex {
  num re;
  num im;
  Complex({required this.re, required this.im});
}

num PI = 3.141592653589793;
num sinApprox(num x) {
  num term = x;
  num sum = x;
  int n = 1;
  while (n <= 10) {
    num denom = (2 * n * (2 * n + 1)).toDouble();
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

num cosApprox(num x) {
  num term = 1.0;
  num sum = 1.0;
  int n = 1;
  while (n <= 10) {
    num denom = ((2 * n - 1) * (2 * n)).toDouble();
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

Complex cis(num x) {
  return Complex(re: cosApprox(x), im: sinApprox(x));
}

Complex add(Complex a, Complex b) {
  return Complex(re: a.re + b.re, im: a.im + b.im);
}

Complex sub(Complex a, Complex b) {
  return Complex(re: a.re - b.re, im: a.im - b.im);
}

Complex mul(Complex a, Complex b) {
  return Complex(re: a.re * b.re - a.im * b.im, im: a.re * b.im + a.im * b.re);
}

void ditfft2Rec(List<num> x, List<Complex> y, int offX, int offY, int n, int s) {
  if (n == 1) {
    y[offY] = Complex(re: x[offX], im: 0.0);
    return;
  }
  ditfft2Rec(x, y, offX, offY, n ~/ 2, 2 * s);
  ditfft2Rec(x, y, offX + s, offY + n ~/ 2, n ~/ 2, 2 * s);
  int k = 0;
  while (k < n ~/ 2) {
    num angle = -2.0 * PI * ((k).toDouble()) / ((n).toDouble());
    Complex tf = mul(cis(angle), y[offY + k + n ~/ 2]);
    Complex a = add(y[offY + k], tf);
    Complex b = sub(y[offY + k], tf);
    y[offY + k] = a;
    y[offY + k + n ~/ 2] = b;
    k = k + 1;
  }
}

void ditfft2(List<num> x, List<Complex> y, int n, int s) {
  ditfft2Rec(x, y, 0, 0, n, s);
}

void _main() {
  List<num> x = [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0];
  List<Complex> y = <Complex>[];
  int i = 0;
  while (i < x.length) {
    y = [...y, Complex(re: 0.0, im: 0.0)];
    i = i + 1;
  }
  ditfft2(x, y, x.length, 1);
  for (Complex c in y) {
    String line = pad(fmt(c.re), 8);
    if (c.im >= 0) {
    line = line + "+" + fmt(c.im);
  } else {
    line = line + fmt(c.im);
  }
    print(line);
  }
}

String pad(String s, int w) {
  String t = s;
  while (t.length < w) {
    t = " " + t;
  }
  return t;
}

String fmt(num x) {
  num y = floorf(x * 10000.0 + 0.5) / 10000.0;
  String s = (y).toString();
  int dot = s.indexOf(".");
  if (dot == 0 - 1) {
    s = s + ".0000";
  } else {
    int d = s.length - dot - 1;
    while (d < 4) {
    s = s + "0";
    d = d + 1;
  };
  }
  return s;
}

num floorf(num x) {
  int y = (x).toInt();
  return (y).toDouble();
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return 0 - 1;
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
