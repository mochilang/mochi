// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, int start, int end) {
  var n = s.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (start > n) start = n;
  if (end < 0) end = 0;
  if (end > n) end = n;
  if (start > end) start = end;
  return s.substring(start, end);
}


List<int> _sha256(List<int> bs) {
  final tmp = File('${Directory.systemTemp.path}/sha256_${DateTime.now().microsecondsSinceEpoch}.bin');
  tmp.writeAsBytesSync(bs.map((e) => e & 0xff).toList());
  final result = Process.runSync('sha256sum', [tmp.path]);
  tmp.deleteSync();
  var hex = '';
  if (result.stdout is String) {
    hex = (result.stdout as String).split(' ')[0];
  }
  final out = <int>[];
  for (var i = 0; i < hex.length; i += 2) {
    out.add(int.parse(hex.substring(i, i + 2), radix: 16));
  }
  return out;
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

List<int> set58(String addr) {
  String tmpl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
  List<int> a = <int>[];
  int i = 0;
  while (i < 25) {
    a = [...a, 0];
    i = i + 1;
  }
  int idx = 0;
  while (idx < addr.length) {
    String ch = _substr(addr, idx, idx + 1);
    int c = tmpl.indexOf(ch);
    if (c < 0) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
    int j = 24;
    while (j >= 0) {
    c = c + 58 * a[j];
    a[j] = c % 256;
    c = c ~/ 256 as int;
    j = j - 1;
  }
    if (c > 0) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
    idx = idx + 1;
  }
  return a;
}

List<int> doubleSHA256(List<int> bs) {
  dynamic first = _sha256(bs);
  return (_sha256(first) as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

List<int> computeChecksum(List<int> a) {
  List<int> hash = doubleSHA256(a.sublist(0, 21));
  return hash.sublist(0, 4);
}

bool validA58(String addr) {
  List<int> a = set58(addr);
  if (a.length != 25) {
    return false;
  }
  if (a[0] != 0) {
    return false;
  }
  List<int> sum = computeChecksum(a);
  int i = 0;
  while (i < 4) {
    if (a[21 + i] != sum[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")).toString());
  print((validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
