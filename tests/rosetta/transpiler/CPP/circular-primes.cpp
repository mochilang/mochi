// Generated by Mochi transpiler v0.10.52 on 2025-08-01 19:06:57 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <type_traits>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool isPrime(int64_t n);
bool isCircular(int64_t n);
std::string showList(const std::vector<int64_t>& xs);
int main();

std::vector<int64_t> circs = {};
std::vector<int64_t> digits = std::vector<int64_t>{int64_t(1), int64_t(3), int64_t(7), int64_t(9)};
std::vector<int64_t> q = std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3), int64_t(5), int64_t(7), int64_t(9)};
std::vector<int64_t> fq = std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3), int64_t(5), int64_t(7), int64_t(9)};
int64_t count = int64_t(0);

bool isPrime(int64_t n) {
    if ((n < int64_t(2))) {
        return false;
    }
    if (((n % int64_t(2)) == int64_t(0))) {
        return (n == int64_t(2));
    }
    if (((n % int64_t(3)) == int64_t(0))) {
        return (n == int64_t(3));
    }
    int64_t d = int64_t(5);
    while (((d * d) <= n)) {
        if (((n % d) == int64_t(0))) {
            return false;
        }
        d = (d + int64_t(2));
        if (((n % d) == int64_t(0))) {
            return false;
        }
        d = (d + int64_t(4));
    }
    return true;
}

bool isCircular(int64_t n) {
    int64_t nn = n;
    int64_t pow = int64_t(1);
    while ((nn > int64_t(0))) {
        pow = (pow * int64_t(10));
        nn = (nn / int64_t(10));
    }
    nn = n;
    while (true) {
        nn = (nn * int64_t(10));
        int64_t f = (nn / pow);
        nn = (nn + (f * (int64_t(1) - pow)));
        if ((nn == n)) {
            break;
        }
        if (!isPrime(nn)) {
            return false;
        }
    }
    return true;
}

std::string showList(const std::vector<int64_t>& xs) {
    std::string out = std::string("[");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        out = (out + ([&]{ std::ostringstream ss; ss << std::boolalpha << xs[i]; return ss.str(); }()));
        if ((i < (xs.size() - int64_t(1)))) {
            out = (out + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    return (out + std::string("]"));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << std::string("The first 19 circular primes are:");
        std::cout << std::endl;
        while (true) {
            int64_t f = q[int64_t(0)];
            int64_t fd = fq[int64_t(0)];
            if ((isPrime(f) && isCircular(f))) {
                circs = ([&]{ auto __tmp = circs; __tmp.push_back(f); return __tmp; }());
                count = (count + int64_t(1));
                if ((count == int64_t(19))) {
                    break;
                }
            }
            q = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), q.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+q.size()); })(q);
            fq = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), fq.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+fq.size()); })(fq);
            if (((f != int64_t(2)) && (f != int64_t(5)))) {
                for (int64_t d : digits) {
                    q = ([&]{ auto __tmp = q; __tmp.push_back(((f * int64_t(10)) + d)); return __tmp; }());
                    fq = ([&]{ auto __tmp = fq; __tmp.push_back(fd); return __tmp; }());
                }
            }
        }
        std::cout << showList(circs);
        std::cout << std::endl;
        std::cout << std::string("\nThe next 4 circular primes, in repunit format, are:");
        std::cout << std::endl;
        std::cout << std::string("[R(19) R(23) R(317) R(1031)]");
        std::cout << std::endl;
        std::cout << std::string("\nThe following repunits are probably circular primes:");
        std::cout << std::endl;
        for (int64_t i : std::vector<int64_t>{int64_t(5003), int64_t(9887), int64_t(15073), int64_t(25031), int64_t(35317), int64_t(49081)}) {
            std::cout << ((std::string("R(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }())) + std::string(") : true"));
            std::cout << std::endl;
        }
    }
    return 0;
}
