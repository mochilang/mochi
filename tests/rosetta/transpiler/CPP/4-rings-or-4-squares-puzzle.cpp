// Generated by Mochi transpiler v0.10.40 on 2025-07-25 18:19:14 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <any>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}

bool validComb(int a, int b, int c, int d, int e, int f, int g);
bool isUnique(int a, int b, int c, int d, int e, int f, int g);
std::map<std::string, std::any> getCombs(int low, int high, bool unique);
int main();

std::map<std::string, std::any> r1 = getCombs(1, 7, true);
std::map<std::string, std::any> r2 = getCombs(3, 9, true);
std::map<std::string, std::any> r3 = getCombs(0, 9, false);

bool validComb(int a, int b, int c, int d, int e, int f, int g) {
    int square1 = (a + b);
    int square2 = ((b + c) + d);
    int square3 = ((d + e) + f);
    int square4 = (f + g);
    return (((square1 == square2) && (square2 == square3)) && (square3 == square4));
}

bool isUnique(int a, int b, int c, int d, int e, int f, int g) {
    std::vector<int> nums = std::vector<int>{a, b, c, d, e, f, g};
    int i = 0;
    while ((i < nums.size())) {
        int j = (i + 1);
        while ((j < nums.size())) {
            if ((nums[i] == nums[j])) {
                return false;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return true;
}

std::map<std::string, std::any> getCombs(int low, int high, bool unique) {
    std::vector<std::vector<int>> valid = {};
    int count = 0;
    for (int b = low; b < (high + 1); b++ ) {
        for (int c = low; c < (high + 1); c++ ) {
            for (int d = low; d < (high + 1); d++ ) {
                auto s = ((double)(((double)(b) + (double)(c))) + (double)(d));
                for (int e = low; e < (high + 1); e++ ) {
                    for (int f = low; f < (high + 1); f++ ) {
                        auto a = ((double)(s) - (double)(b));
                        auto g = ((double)(s) - (double)(f));
                        if (((a < low) || (a > high))) {
                            continue;
                        }
                        if (((g < low) || (g > high))) {
                            continue;
                        }
                        if (((double)(((double)(((double)(d) + (double)(e))) + (double)(f))) != (double)(s))) {
                            continue;
                        }
                        if (((double)(((double)(f) + (double)(g))) != (double)(s))) {
                            continue;
                        }
                        if ((!unique || isUnique((int)(a), (int)(b), (int)(c), (int)(d), (int)(e), (int)(f), (int)(g)))) {
                            valid = ([&]{ auto __tmp = valid; __tmp.push_back((std::vector<int>)std::vector<auto>{a, b, c, d, e, f, g}); return __tmp; }());
                            count = (count + 1);
                        }
                    }
                }
            }
        }
    }
    return std::map<std::string, std::any>{{"count", std::any(count)}, {"list", std::any(valid)}};
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::cout << (([&]{ std::ostringstream ss; any_to_stream(ss, r1[std::string("count")]); return ss.str(); }()) + std::string(" unique solutions in 1 to 7"));
        std::cout << std::endl;
        any_to_stream(std::cout, r1[std::string("list")]);
        std::cout << std::endl;
        std::cout << (([&]{ std::ostringstream ss; any_to_stream(ss, r2[std::string("count")]); return ss.str(); }()) + std::string(" unique solutions in 3 to 9"));
        std::cout << std::endl;
        any_to_stream(std::cout, r2[std::string("list")]);
        std::cout << std::endl;
        std::cout << (([&]{ std::ostringstream ss; any_to_stream(ss, r3[std::string("count")]); return ss.str(); }()) + std::string(" non-unique solutions in 0 to 9"));
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
