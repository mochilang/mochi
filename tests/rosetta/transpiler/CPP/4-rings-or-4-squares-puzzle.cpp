// Generated by Mochi transpiler v0.10.55 on 2025-08-03 11:07:13 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <any>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool validComb(int64_t a, int64_t b, int64_t c, int64_t d, int64_t e, int64_t f, int64_t g);
bool isUnique(int64_t a, int64_t b, int64_t c, int64_t d, int64_t e, int64_t f, int64_t g);
std::map<std::string, std::any> getCombs(int64_t low, int64_t high, bool unique);
int main();

std::map<std::string, std::any> r1 = getCombs(int64_t(1), int64_t(7), true);
std::map<std::string, std::any> r2 = getCombs(int64_t(3), int64_t(9), true);
std::map<std::string, std::any> r3 = getCombs(int64_t(0), int64_t(9), false);

bool validComb(int64_t a, int64_t b, int64_t c, int64_t d, int64_t e, int64_t f, int64_t g) {
    int64_t square1 = (a + b);
    int64_t square2 = ((b + c) + d);
    int64_t square3 = ((d + e) + f);
    int64_t square4 = (f + g);
    return (((square1 == square2) && (square2 == square3)) && (square3 == square4));
}

bool isUnique(int64_t a, int64_t b, int64_t c, int64_t d, int64_t e, int64_t f, int64_t g) {
    std::vector<int64_t> nums = std::vector<int64_t>{a, b, c, d, e, f, g};
    int64_t i = int64_t(0);
    while ((i < nums.size())) {
        int64_t j = (i + int64_t(1));
        while ((j < nums.size())) {
            if ((nums[i] == nums[j])) {
                return false;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return true;
}

std::map<std::string, std::any> getCombs(int64_t low, int64_t high, bool unique) {
    std::vector<std::vector<int64_t>> valid = {};
    int64_t count = int64_t(0);
    for (int b = low; b < (high + int64_t(1)); b++ ) {
        for (int c = low; c < (high + int64_t(1)); c++ ) {
            for (int d = low; d < (high + int64_t(1)); d++ ) {
                int64_t s = ((b + c) + d);
                for (int e = low; e < (high + int64_t(1)); e++ ) {
                    for (int f = low; f < (high + int64_t(1)); f++ ) {
                        int64_t a = (s - b);
                        int64_t g = (s - f);
                        if (((a < low) || (a > high))) {
                            continue;
                        }
                        if (((g < low) || (g > high))) {
                            continue;
                        }
                        if ((((d + e) + f) != s)) {
                            continue;
                        }
                        if (((f + g) != s)) {
                            continue;
                        }
                        if ((!unique || isUnique(a, b, c, d, e, f, g))) {
                            valid = ([&]{ auto __tmp = valid; __tmp.push_back(std::vector<int64_t>{a, b, c, d, e, f, g}); return __tmp; }());
                            count = (count + int64_t(1));
                        }
                    }
                }
            }
        }
    }
    return std::map<std::string, std::any>{{"count", std::any(count)}, {"list", std::any(valid)}};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << (([&]{ std::ostringstream ss; any_to_stream(ss, r1.at(std::string("count")));
 return ss.str(); }()) + std::string(" unique solutions in 1 to 7"));
        std::cout << std::endl;
        any_to_stream(std::cout, r1.at(std::string("list")));
        std::cout << std::endl;
        std::cout << (([&]{ std::ostringstream ss; any_to_stream(ss, r2.at(std::string("count")));
 return ss.str(); }()) + std::string(" unique solutions in 3 to 9"));
        std::cout << std::endl;
        any_to_stream(std::cout, r2.at(std::string("list")));
        std::cout << std::endl;
        std::cout << (([&]{ std::ostringstream ss; any_to_stream(ss, r3.at(std::string("count")));
 return ss.str(); }()) + std::string(" non-unique solutions in 0 to 9"));
        std::cout << std::endl;
    }
    return 0;
}
