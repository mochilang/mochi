// Generated by Mochi transpiler v0.10.38 on 2025-07-24 08:26:45 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <any>
#include <map>
#include <sstream>
#include <iomanip>
#include <optional>



bool validComb(int a, int b, int c, int d, int e, int f, int g);
bool isUnique(int a, int b, int c, int d, int e, int f, int g);
std::map<std::string, std::any> getCombs(int low, int high, bool unique);
int main();

std::map<std::string, std::any> r1 = getCombs(1, 7, true);
std::map<std::string, std::any> r2 = getCombs(3, 9, true);
std::map<std::string, std::any> r3 = getCombs(0, 9, false);

bool validComb(int a, int b, int c, int d, int e, int f, int g) {
    int square1 = (a + b);
    int square2 = ((b + c) + d);
    int square3 = ((d + e) + f);
    int square4 = (f + g);
    return (((square1 == square2) && (square2 == square3)) && (square3 == square4));
}

bool isUnique(int a, int b, int c, int d, int e, int f, int g) {
    std::vector<int> nums = std::vector{a, b, c, d, e, f, g};
    int i = 0;
    while ((i < nums.size())) {
        int j = (i + 1);
        while ((j < nums.size())) {
            if ((nums[i] == nums[j])) {
                return false;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return true;
}

std::map<std::string, std::any> getCombs(int low, int high, bool unique) {
    std::vector<int> valid = {};
    int count = 0;
    for (int b = low; b < (high + 1); b++ ) {
        for (int c = low; c < (high + 1); c++ ) {
            for (int d = low; d < (high + 1); d++ ) {
                auto s = ((b + c) + d);
                for (int e = low; e < (high + 1); e++ ) {
                    for (int f = low; f < (high + 1); f++ ) {
                        auto a = (s - b);
                        auto g = (s - f);
                        if (((a < low) || (a > high))) {
                            continue;
                        }
                        if (((g < low) || (g > high))) {
                            continue;
                        }
                        if ((((d + e) + f) != s)) {
                            continue;
                        }
                        if (((f + g) != s)) {
                            continue;
                        }
                        if ((!unique || isUnique((int)(a), (int)(b), (int)(c), (int)(d), (int)(e), (int)(f), (int)(g)))) {
                            valid = ([&]{ auto __tmp = valid; __tmp.push_back(std::vector{a, b, c, d, e, f, g}); return __tmp; }());
                            count = (count + 1);
                        }
                    }
                }
            }
        }
    }
    return std::map<std::string, std::any>{{"count", std::any(count)}, {"list", std::any(valid)}};
}

int main() {
    std::cout << (([&]{ std::ostringstream ss; ss<<r1[std::string("count")]; return ss.str(); }()) + std::string(" unique solutions in 1 to 7"));
    std::cout << std::endl;
    std::cout << r1[std::string("list")];
    std::cout << std::endl;
    std::cout << (([&]{ std::ostringstream ss; ss<<r2[std::string("count")]; return ss.str(); }()) + std::string(" unique solutions in 3 to 9"));
    std::cout << std::endl;
    std::cout << r2[std::string("list")];
    std::cout << std::endl;
    std::cout << (([&]{ std::ostringstream ss; ss<<r3[std::string("count")]; return ss.str(); }()) + std::string(" non-unique solutions in 0 to 9"));
    std::cout << std::endl;
    return 0;
}
