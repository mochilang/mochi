// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:23:31 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <functional>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double pow10(int64_t n);
double powf(double base, double _exp);
std::string formatFloat(double f, int64_t prec);
std::string padLeft(std::string s, int64_t w);
std::string rowString(const std::vector<double>& row);
void printMatrix(std::string heading, const std::vector<std::vector<double>>& m);
std::vector<std::vector<double>> elementWiseMM(const std::vector<std::vector<double>>& m1, const std::vector<std::vector<double>>& m2, std::function<double(double, double)> f);
std::vector<std::vector<double>> elementWiseMS(const std::vector<std::vector<double>>& m, double s, std::function<double(double, double)> f);
double add(double a, double b);
double sub(double a, double b);
double mul(double a, double b);
double _div(double a, double b);
double _exp(double a, double b);
int main();

double pow10(int64_t n) {
    double r = 1.0;
    int64_t i = int64_t(0);
    while ((i < n)) {
        r = (r * 10.0);
        i = (i + int64_t(1));
    }
    return r;
}

double powf(double base, double _exp) {
    if ((_exp == 0.5)) {
        double guess = base;
        int64_t i = int64_t(0);
        while ((i < int64_t(20))) {
            guess = ((double)((guess + ((double)(base) / (guess)))) / (2.0));
            i = (i + int64_t(1));
        }
        return guess;
    }
    double result = 1.0;
    int64_t n = (int64_t)(_exp);
    int64_t i = int64_t(0);
    while ((i < n)) {
        result = (result * base);
        i = (i + int64_t(1));
    }
    return result;
}

std::string formatFloat(double f, int64_t prec) {
    double scale = pow10(prec);
    double scaled = ((f * scale) + 0.5);
    int64_t n = (int64_t)(scaled);
    std::string digits = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((digits.size() <= prec)) {
        digits = (std::string("0") + digits);
    }
    std::string intPart = digits.substr(int64_t(0), (digits.size() - prec) - int64_t(0));
    std::string fracPart = digits.substr((digits.size() - prec), digits.size() - (digits.size() - prec));
    return ((intPart + std::string(".")) + fracPart);
}

std::string padLeft(std::string s, int64_t w) {
    std::string res = std::string("");
    int64_t n = (w - s.size());
    while ((n > int64_t(0))) {
        res = (res + std::string(" "));
        n = (n - int64_t(1));
    }
    return (res + s);
}

std::string rowString(const std::vector<double>& row) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < row.size())) {
        s = (s + padLeft(formatFloat(row[i], int64_t(3)), int64_t(6)));
        if ((i < (row.size() - int64_t(1)))) {
            s = (s + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    return (s + std::string("] "));
}

void printMatrix(std::string heading, const std::vector<std::vector<double>>& m) {
    std::cout << heading;
    std::cout << std::endl;
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        std::cout << rowString(m[i]);
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

std::vector<std::vector<double>> elementWiseMM(const std::vector<std::vector<double>>& m1, const std::vector<std::vector<double>>& m2, std::function<double(double, double)> f) {
    std::vector<std::vector<double>> z = {};
    int64_t r = int64_t(0);
    while ((r < m1.size())) {
        std::vector<double> row = {};
        int64_t c = int64_t(0);
        while ((c < m1[r].size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((double)f(m1[r][c], m2[r][c])); return __tmp; }());
            c = (c + int64_t(1));
        }
        z = ([&]{ auto __tmp = z; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    return z;
}

std::vector<std::vector<double>> elementWiseMS(const std::vector<std::vector<double>>& m, double s, std::function<double(double, double)> f) {
    std::vector<std::vector<double>> z = {};
    int64_t r = int64_t(0);
    while ((r < m.size())) {
        std::vector<double> row = {};
        int64_t c = int64_t(0);
        while ((c < m[r].size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((double)f(m[r][c], s)); return __tmp; }());
            c = (c + int64_t(1));
        }
        z = ([&]{ auto __tmp = z; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    return z;
}

double add(double a, double b) {
    return (a + b);
}

double sub(double a, double b) {
    return (a - b);
}

double mul(double a, double b) {
    return (a * b);
}

double _div(double a, double b) {
    return ((double)(a) / (b));
}

double _exp(double a, double b) {
    return powf(a, b);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<double>> m1 = std::vector<std::vector<double>>{std::vector<double>{3.0, 1.0, 4.0}, std::vector<double>{1.0, 5.0, 9.0}};
        std::vector<std::vector<double>> m2 = std::vector<std::vector<double>>{std::vector<double>{2.0, 7.0, 1.0}, std::vector<double>{8.0, 2.0, 8.0}};
        printMatrix(std::string("m1:"), m1);
        printMatrix(std::string("m2:"), m2);
        std::cout << std::string("");
        std::cout << std::endl;
        printMatrix(std::string("m1 + m2:"), elementWiseMM(m1, m2, add));
        printMatrix(std::string("m1 - m2:"), elementWiseMM(m1, m2, sub));
        printMatrix(std::string("m1 * m2:"), elementWiseMM(m1, m2, mul));
        printMatrix(std::string("m1 / m2:"), elementWiseMM(m1, m2, _div));
        printMatrix(std::string("m1 ^ m2:"), elementWiseMM(m1, m2, _exp));
        std::cout << std::string("");
        std::cout << std::endl;
        double s = 0.5;
        std::cout << (std::string("s: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << s; return ss.str(); }()));
        std::cout << std::endl;
        printMatrix(std::string("m1 + s:"), elementWiseMS(m1, s, add));
        printMatrix(std::string("m1 - s:"), elementWiseMS(m1, s, sub));
        printMatrix(std::string("m1 * s:"), elementWiseMS(m1, s, mul));
        printMatrix(std::string("m1 / s:"), elementWiseMS(m1, s, _div));
        printMatrix(std::string("m1 ^ s:"), elementWiseMS(m1, s, _exp));
    }
    return 0;
}
