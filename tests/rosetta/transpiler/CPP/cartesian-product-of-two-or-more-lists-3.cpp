// Generated by Mochi transpiler v0.10.42 on 2025-07-27 19:17:12 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <any>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string listStr(const std::vector<int64_t>& xs);
std::string llStr(const std::vector<std::vector<int64_t>>& lst);
std::vector<int64_t> concat(const std::vector<int64_t>& a, const std::vector<int64_t>& b);
std::vector<std::vector<int64_t>> cartN(std::any lists);
int main();

std::string listStr(const std::vector<int64_t>& xs) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << xs[i]; return ss.str(); }()));
        if ((i < (xs.size() - int64_t(1)))) {
            s = (s + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

std::string llStr(const std::vector<std::vector<int64_t>>& lst) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        s = (s + listStr(lst[i]));
        if ((i < (lst.size() - int64_t(1)))) {
            s = (s + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

std::vector<int64_t> concat(const std::vector<int64_t>& a, const std::vector<int64_t>& b) {
    std::vector<int64_t> out = {};
    for (int64_t v : a) {
        out = ([&]{ auto __tmp = out; __tmp.push_back(v); return __tmp; }());
    }
    for (int64_t v : b) {
        out = ([&]{ auto __tmp = out; __tmp.push_back(v); return __tmp; }());
    }
    return out;
}

std::vector<std::vector<int64_t>> cartN(std::any lists) {
    if ((any_to_double(lists) == any_to_double(nullptr))) {
        return {};
    }
    std::vector<std::vector<int64_t>> a = std::any_cast<std::vector<std::vector<int64_t>>>(lists);
    if ((a.size() == int64_t(0))) {
        return std::vector<std::vector<int64_t>>{std::vector<int64_t>{}};
    }
    std::vector<std::vector<int64_t>> out = {};
    std::vector<std::vector<int64_t>> rest = cartN((std::any)(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), a.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+a.size()); })(a)));
    for (std::vector<int64_t> x : a[int64_t(0)]) {
        for (std::vector<int64_t> p : rest) {
            out = ([&]{ auto __tmp = out; __tmp.push_back(concat((std::vector<int64_t>)(std::vector<std::vector<int64_t>>{x}), p)); return __tmp; }());
        }
    }
    return out;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << llStr(cartN((std::any)(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2)}, std::vector<int64_t>{int64_t(3), int64_t(4)}})));
        std::cout << std::endl;
        std::cout << llStr(cartN((std::any)(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(3), int64_t(4)}, std::vector<int64_t>{int64_t(1), int64_t(2)}})));
        std::cout << std::endl;
        std::cout << llStr(cartN((std::any)(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2)}, std::vector<int64_t>{}})));
        std::cout << std::endl;
        std::cout << llStr(cartN((std::any)(std::vector<std::vector<int64_t>>{std::vector<int64_t>{}, std::vector<int64_t>{int64_t(1), int64_t(2)}})));
        std::cout << std::endl;
        std::cout << std::string("");
        std::cout << std::endl;
        std::cout << std::string("[");
        std::cout << std::endl;
        for (std::vector<int64_t> p : cartN((std::any)(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1776), int64_t(1789)}, std::vector<int64_t>{int64_t(7), int64_t(12)}, std::vector<int64_t>{int64_t(4), int64_t(14), int64_t(23)}, std::vector<int64_t>{int64_t(0), int64_t(1)}}))) {
            std::cout << (std::string(" ") + listStr(p));
            std::cout << std::endl;
        }
        std::cout << std::string("]");
        std::cout << std::endl;
        std::cout << llStr(cartN((std::any)(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(30)}, std::vector<int64_t>{int64_t(500), int64_t(100)}})));
        std::cout << std::endl;
        std::cout << llStr(cartN((std::any)(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{}, std::vector<int64_t>{int64_t(500), int64_t(100)}})));
        std::cout << std::endl;
        std::cout << std::string("");
        std::cout << std::endl;
        std::cout << llStr(cartN(nullptr));
        std::cout << std::endl;
        std::cout << llStr(cartN((std::any)(std::vector<int64_t>{})));
        std::cout << std::endl;
    }
    return 0;
}
