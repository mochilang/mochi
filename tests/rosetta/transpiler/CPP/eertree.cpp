// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:28:05 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <map>
#include <vector>
#include <type_traits>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::map<std::string, std::any> newNode(int64_t len);
std::vector<std::map<std::string, std::any>> eertree(std::string s);
std::vector<std::string> child(const std::vector<std::map<std::string, std::any>>& tree, int64_t idx, std::string p, std::vector<std::string> acc);
std::vector<std::string> subPalindromes(const std::vector<std::map<std::string, std::any>>& tree);
int main();

int64_t EVEN_ROOT = int64_t(0);
int64_t ODD_ROOT = int64_t(1);

std::map<std::string, std::any> newNode(int64_t len) {
    return std::map<std::string, std::any>{{"length", std::any(len)}, {"edges", std::any(std::map<auto, auto>{})}, {"suffix", std::any(int64_t(0))}};
}

std::vector<std::map<std::string, std::any>> eertree(std::string s) {
    std::vector<std::map<std::string, std::any>> tree = {};
    tree = ([&]{ auto __tmp = tree; __tmp.push_back(std::map<std::string, std::any>{{"length", std::any(int64_t(0))}, {"suffix", std::any(ODD_ROOT)}, {"edges", std::any(std::map<auto, auto>{})}}); return __tmp; }());
    tree = ([&]{ auto __tmp = tree; __tmp.push_back(std::map<std::string, std::any>{{"length", std::any(-int64_t(1))}, {"suffix", std::any(ODD_ROOT)}, {"edges", std::any(std::map<auto, auto>{})}}); return __tmp; }());
    int64_t suffix = ODD_ROOT;
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        int64_t n = suffix;
        int64_t k = int64_t(0);
        while (true) {
            k = std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("length")); return __it != __m.end() ? __it->second : std::any{}; })(tree[n]));
            int64_t b = ((i - k) - int64_t(1));
            if (((b >= int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(b, (b + int64_t(1)) - b); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+b, __v.begin()+(b + int64_t(1))); })(s) == c))) {
                break;
            }
            n = std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("suffix")); return __it != __m.end() ? __it->second : std::any{}; })(tree[n]));
        }
        std::map<std::string, int64_t> edges = std::any_cast<std::map<std::string, int64_t>>(([&](const auto& __m){ auto __it = __m.find(std::string("edges")); return __it != __m.end() ? __it->second : std::any{}; })(tree[n]));
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(edges, c)) {
            suffix = ([&](const auto& __m){ auto __it = __m.find(c); return __it != __m.end() ? __it->second : 0; })(edges);
            i = (i + int64_t(1));
            continue;
        }
        suffix = tree.size();
        tree = ([&]{ auto __tmp = tree; __tmp.push_back(newNode((k + int64_t(2)))); return __tmp; }());
        edges[c] = suffix;
        tree[n][std::string("edges")] = edges;
        if ((std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("length")); return __it != __m.end() ? __it->second : std::any{}; })(tree[suffix])) == int64_t(1))) {
            tree[suffix][std::string("suffix")] = int64_t(0);
            i = (i + int64_t(1));
            continue;
        }
        while (true) {
            n = std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("suffix")); return __it != __m.end() ? __it->second : std::any{}; })(tree[n]));
            int64_t b = ((i - std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("length")); return __it != __m.end() ? __it->second : std::any{}; })(tree[n]))) - int64_t(1));
            if (((b >= int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(b, (b + int64_t(1)) - b); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+b, __v.begin()+(b + int64_t(1))); })(s) == c))) {
                break;
            }
        }
        std::map<std::string, int64_t> en = std::any_cast<std::map<std::string, int64_t>>(([&](const auto& __m){ auto __it = __m.find(std::string("edges")); return __it != __m.end() ? __it->second : std::any{}; })(tree[n]));
        tree[suffix][std::string("suffix")] = ([&](const auto& __m){ auto __it = __m.find(c); return __it != __m.end() ? __it->second : 0; })(en);
        i = (i + int64_t(1));
    }
    return tree;
}

std::vector<std::string> child(const std::vector<std::map<std::string, std::any>>& tree, int64_t idx, std::string p, std::vector<std::string> acc) {
    std::map<std::string, int64_t> edges = std::any_cast<std::map<std::string, int64_t>>(([&](const auto& __m){ auto __it = __m.find(std::string("edges")); return __it != __m.end() ? __it->second : std::any{}; })(tree[idx]));
    for (const auto& __p : edges) {
        auto ch = __p.first;
        int64_t nxt = ([&](const auto& __m){ auto __it = __m.find(ch); return __it != __m.end() ? __it->second : 0; })(edges);
        std::string pal = ((ch + p) + ch);
        acc = ([&]{ auto __tmp = acc; __tmp.push_back(pal); return __tmp; }());
        acc = child(tree, nxt, pal, acc);
    }
    return acc;
}

std::vector<std::string> subPalindromes(const std::vector<std::map<std::string, std::any>>& tree) {
    std::vector<std::string> res = {};
    res = child(tree, EVEN_ROOT, std::string(""), res);
    std::map<std::string, int64_t> oEdges = std::any_cast<std::map<std::string, int64_t>>(([&](const auto& __m){ auto __it = __m.find(std::string("edges")); return __it != __m.end() ? __it->second : std::any{}; })(tree[ODD_ROOT]));
    for (const auto& __p : oEdges) {
        auto ch = __p.first;
        res = ([&]{ auto __tmp = res; __tmp.push_back(ch); return __tmp; }());
        res = child(tree, ([&](const auto& __m){ auto __it = __m.find(ch); return __it != __m.end() ? __it->second : 0; })(oEdges), ch, res);
    }
    return res;
}

int main() {
    std::vector<std::map<std::string, std::any>> tree = eertree(std::string("eertree"));
    std::vector<std::string> subs = subPalindromes(tree);
    std::cout << ([&]{ std::ostringstream ss; { auto __tmp = subs; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
    std::cout << std::endl;
    return 0;
}
