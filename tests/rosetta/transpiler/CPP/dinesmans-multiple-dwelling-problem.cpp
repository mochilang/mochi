// Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:52:23 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t absInt(int64_t n);
int main();

int64_t absInt(int64_t n) {
    if ((n < int64_t(0))) {
        return -n;
    }
    return n;
}

int main() {
    int64_t b = int64_t(1);
    while ((b <= int64_t(5))) {
        if ((b != int64_t(5))) {
            int64_t c = int64_t(1);
            while ((c <= int64_t(5))) {
                if (((c != int64_t(1)) && (c != b))) {
                    int64_t f = int64_t(1);
                    while ((f <= int64_t(5))) {
                        if ((((((f != int64_t(1)) && (f != int64_t(5))) && (f != b)) && (f != c)) && (absInt((f - c)) > int64_t(1)))) {
                            int64_t m = int64_t(1);
                            while ((m <= int64_t(5))) {
                                if (((((m != b) && (m != c)) && (m != f)) && (m > c))) {
                                    int64_t s = int64_t(1);
                                    while ((s <= int64_t(5))) {
                                        if ((((((s != b) && (s != c)) && (s != f)) && (s != m)) && (absInt((s - f)) > int64_t(1)))) {
                                            std::cout << ((((((((((std::string("Baker in ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }())) + std::string(", Cooper in ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << c; return ss.str(); }())) + std::string(", Fletcher in ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << f; return ss.str(); }())) + std::string(", Miller in ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }())) + std::string(", Smith in ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << s; return ss.str(); }())) + std::string("."));
                                            std::cout << std::endl;
                                            return int64_t(0);
                                        }
                                        s = (s + int64_t(1));
                                    }
                                }
                                m = (m + int64_t(1));
                            }
                        }
                        f = (f + int64_t(1));
                    }
                }
                c = (c + int64_t(1));
            }
        }
        b = (b + int64_t(1));
    }
    std::cout << std::string("No solution found.");
    std::cout << std::endl;
    return 0;
}
