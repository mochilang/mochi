// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:42 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <any>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}

std::vector<std::string> split(std::string s, std::string sep);
std::vector<std::string> rstripEmpty(const std::vector<std::string>& words);
std::string spaces(int n);
std::string pad(std::string word, int width, int align);
std::map<std::string, std::any> newFormatter(std::string text);
void printFmt(std::map<std::string, std::any>& f, int align);
int main();

std::string text = (((((std::string("Given$a$text$file$of$many$lines,$where$fields$within$a$line\n") + std::string("are$delineated$by$a$single$'dollar'$character,$write$a$program\n")) + std::string("that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n")) + std::string("column$are$separated$by$at$least$one$space.\n")) + std::string("Further,$allow$for$each$word$in$a$column$to$be$either$left\n")) + std::string("justified,$right$justified,$or$center$justified$within$its$column."));
std::map<std::string, std::any> f = newFormatter(text);

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int i = 0;
    while ((i < s.size())) {
        if ((((sep.size() > 0) && ((i + sep.size()) <= s.size())) && (s.substr(i, (i + sep.size()) - i) == sep))) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
            cur = std::string("");
            i = (i + sep.size());
        } else {
            cur = (cur + s.substr(i, (i + 1) - i));
            i = (i + 1);
        }
    }
    parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    return parts;
}

std::vector<std::string> rstripEmpty(const std::vector<std::string>& words) {
    int n = words.size();
    while (((n > 0) && (words[(n - 1)] == std::string("")))) {
        n = (n - 1);
    }
    return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, n - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+n); })(words);
}

std::string spaces(int n) {
    std::string out = std::string("");
    int i = 0;
    while ((i < n)) {
        out = (out + std::string(" "));
        i = (i + 1);
    }
    return out;
}

std::string pad(std::string word, int width, int align) {
    int diff = (width - word.size());
    if ((align == 0)) {
        return (word + spaces(diff));
    }
    if ((align == 2)) {
        return (spaces(diff) + word);
    }
    int left = (int)((diff / 2));
    int right = (diff - left);
    return ((spaces(left) + word) + spaces(right));
}

std::map<std::string, std::any> newFormatter(std::string text) {
    std::vector<std::string> lines = split(text, std::string("\n"));
    std::vector<std::vector<std::string>> fmtLines = {};
    std::vector<int> width = {};
    int i = 0;
    while ((i < lines.size())) {
        if ((lines[i].size() == 0)) {
            i = (i + 1);
            continue;
        }
        std::vector<std::string> words = rstripEmpty(split(lines[i], std::string("$")));
        fmtLines = ([&]{ auto __tmp = fmtLines; __tmp.push_back(words); return __tmp; }());
        int j = 0;
        while ((j < words.size())) {
            int wlen = words[j].size();
            if ((j == width.size())) {
                width = ([&]{ auto __tmp = width; __tmp.push_back(wlen); return __tmp; }());
            } else             if ((wlen > width[j])) {
                width[j] = wlen;
            }

            j = (j + 1);
        }
        i = (i + 1);
    }
    return std::map<std::string, std::any>{{"text", std::any(fmtLines)}, {"width", std::any(width)}};
}

void printFmt(std::map<std::string, std::any>& f, int align) {
    std::vector<std::vector<std::string>> lines = std::any_cast<std::vector<std::vector<std::string>>>(f[std::string("text")]);
    std::vector<int> width = std::any_cast<std::vector<int>>(f[std::string("width")]);
    int i = 0;
    while ((i < lines.size())) {
        std::vector<std::string> words = lines[i];
        std::string line = std::string("");
        int j = 0;
        while ((j < words.size())) {
            line = ((line + pad(words[j], width[j], align)) + std::string(" "));
            j = (j + 1);
        }
        std::cout << line;
        std::cout << std::endl;
        i = (i + 1);
    }
    std::cout << std::string("");
    std::cout << std::endl;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        printFmt(f, 0);
        printFmt(f, 1);
        printFmt(f, 2);
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
