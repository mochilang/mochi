// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:13:47 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

void printExpI(int64_t b, int64_t p);
double expF(double b, int64_t p);
void printExpF(double b, int64_t p);
int main();

void printExpI(int64_t b, int64_t p) {
    if ((p < int64_t(0))) {
        std::cout << (((([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }()) + std::string("^")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }())) + std::string(": negative power not allowed"));
        std::cout << std::endl;
        return;
    }
    int64_t r = int64_t(1);
    int64_t i = int64_t(1);
    while ((i <= p)) {
        r = (r * b);
        i = (i + int64_t(1));
    }
    std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }()) + std::string("^")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }())) + std::string(": ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << r; return ss.str(); }()));
    std::cout << std::endl;
}

double expF(double b, int64_t p) {
    bool neg = false;
    if ((p < int64_t(0))) {
        neg = true;
        p = -p;
    }
    double r = 1.0;
    double pow = b;
    while ((p > int64_t(0))) {
        if (((p % int64_t(2)) == int64_t(1))) {
            r = (r * pow);
        }
        pow = (pow * pow);
        p = (p / int64_t(2));
    }
    if (neg) {
        r = ((double)(1.0) / (r));
    }
    return r;
}

void printExpF(double b, int64_t p) {
    if (((b == 0.0) && (p < int64_t(0)))) {
        std::cout << (((([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }()) + std::string("^")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }())) + std::string(": +Inf"));
        std::cout << std::endl;
        return;
    }
    std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }()) + std::string("^")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }())) + std::string(": ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << expF(b, p); return ss.str(); }()));
    std::cout << std::endl;
}

int main() {
    std::cout << std::string("expI tests");
    std::cout << std::endl;
    printExpI(int64_t(2), int64_t(10));
    printExpI(int64_t(2), -int64_t(10));
    printExpI(-int64_t(2), int64_t(10));
    printExpI(-int64_t(2), int64_t(11));
    printExpI(int64_t(11), int64_t(0));
    std::cout << std::string("overflow undetected");
    std::cout << std::endl;
    printExpI(int64_t(10), int64_t(10));
    std::cout << std::string("\nexpF tests:");
    std::cout << std::endl;
    printExpF(2.0, int64_t(10));
    printExpF(2.0, -int64_t(10));
    printExpF(-2.0, int64_t(10));
    printExpF(-2.0, int64_t(11));
    printExpF(11.0, int64_t(0));
    std::cout << std::string("disallowed in expI, allowed here");
    std::cout << std::endl;
    printExpF(0.0, -int64_t(1));
    std::cout << std::string("other interesting cases for 32 bit float type");
    std::cout << std::endl;
    printExpF(10.0, int64_t(39));
    printExpF(10.0, -int64_t(39));
    printExpF(-10.0, int64_t(39));
    return 0;
}
