// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:11:24 GMT+7
#include <iostream>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
using cpp_int = boost::multiprecision::cpp_int;
struct BigRat {
    cpp_int num; cpp_int den;
    BigRat(cpp_int n=0, cpp_int d=1){ init(n,d); }
    static cpp_int _gcd(cpp_int a, cpp_int b){ if(a<0) a=-a; if(b<0) b=-b; while(b!=0){ cpp_int t=a%b; a=b; b=t;} return a; }
    void init(cpp_int n, cpp_int d){ if(d<0){ n=-n; d=-d; } cpp_int g=_gcd(n,d); num=n/g; den=d/g; }
    BigRat operator+(const BigRat& o) const { return BigRat(num*o.den + o.num*den, den*o.den); }
    BigRat operator-(const BigRat& o) const { return BigRat(num*o.den - o.num*den, den*o.den); }
    BigRat operator*(const BigRat& o) const { return BigRat(num*o.num, den*o.den); }
    BigRat operator/(const BigRat& o) const { return BigRat(num*o.den, den*o.num); }
};
template<typename A> BigRat _bigrat(A a){ return BigRat(cpp_int(a), cpp_int(1)); }
template<typename A, typename B> BigRat _bigrat(A a, B b){ return BigRat(cpp_int(a), cpp_int(b)); }
inline cpp_int _num(const BigRat& r){ return r.num; }
inline cpp_int _denom(const BigRat& r){ return r.den; }
static std::ostream& operator<<(std::ostream& os, const BigRat& r){ os<<r.num; if(r.den!=1) os<<"/"<<r.den; return os; }
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

BigRat bernoulli(int64_t n);
std::string padStart(std::string s, int64_t width, std::string pad);
int main();

BigRat bernoulli(int64_t n) {
    std::vector<BigRat> a = {};
    int64_t m = int64_t(0);
    while ((m <= n)) {
        a = ([&]{ auto __tmp = a; __tmp.push_back((_bigrat(int64_t(1)) / _bigrat((m + int64_t(1))))); return __tmp; }());
        int64_t j = m;
        while ((j >= int64_t(1))) {
            a[(j - int64_t(1))] = (_bigrat(j) * (a[(j - int64_t(1))] - a[j]));
            j = (j - int64_t(1));
        }
        m = (m + int64_t(1));
    }
    return a[int64_t(0)];
}

std::string padStart(std::string s, int64_t width, std::string pad) {
    std::string out = s;
    while ((out.size() < width)) {
        out = (pad + out);
    }
    return out;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        for (int i = int64_t(0); i < int64_t(61); i++ ) {
            BigRat b = bernoulli((int64_t)(i));
            if ((_num(b) != int64_t(0))) {
                std::string numStr = ([&]{ std::ostringstream ss; ss << std::boolalpha << _num(b); return ss.str(); }());
                std::string denStr = ([&]{ std::ostringstream ss; ss << std::boolalpha << _denom(b); return ss.str(); }());
                std::cout << (((((std::string("B(") + ([&]{ std::string __s = ([&]{ std::ostringstream ss; any_to_stream(ss, i);
 return ss.str(); }()); while(__s.size() < int64_t(2)) __s = std::string(" ") + __s; return __s; }())) + std::string(") =")) + ([&]{ std::string __s = numStr; while(__s.size() < int64_t(45)) __s = std::string(" ") + __s; return __s; }())) + std::string("/")) + denStr);
                std::cout << std::endl;
            }
        }
    }
    return 0;
}
