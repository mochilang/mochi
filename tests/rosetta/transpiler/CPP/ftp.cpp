// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:12:29 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct FileInfo;
struct FTPConn;

std::ostream& operator<<(std::ostream&, const FileInfo&);
std::ostream& operator<<(std::ostream&, const FTPConn&);


struct FileInfo {
    std::string name;
    int64_t size;
    std::string kind;
    auto operator<=>(const FileInfo&) const = default;
};

struct FTPConn {
    std::string dir;
    auto operator<=>(const FTPConn&) const = default;
};

std::ostream& operator<<(std::ostream& os, const FileInfo& v) {
    os << '{' << "'name': "<< "'" << v.name << "'"
 << ", " << "'size': "<< v.size
 << ", " << "'kind': "<< "'" << v.kind << "'"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const FTPConn& v) {
    os << '{' << "'dir': "<< "'" << v.dir << "'"
 << '}';
    return os;
}

FTPConn connect(std::string hostport);
void login(const FTPConn& conn, std::string user, std::string pass);
void changeDir(FTPConn conn, std::string dir);
std::vector<FileInfo> list(const FTPConn& conn);
std::string retrieve(const FTPConn& conn, std::string name);
int main();

std::map<std::string, std::map<std::string, std::string>> serverData = std::map<std::string, std::map<std::string, std::string>>{{"pub", std::map<std::string, std::string>{{"somefile.bin", std::string("This is a file from the FTP server.")}, {"readme.txt", std::string("Hello from ftp.")}}}};
std::map<std::string, std::vector<std::string>> serverNames = std::map<std::string, std::vector<std::string>>{{"pub", std::vector<std::string>{std::string("somefile.bin"), std::string("readme.txt")}}};

FTPConn connect(std::string hostport) {
    std::cout << (std::string("Connected to ") + hostport);
    std::cout << std::endl;
    return FTPConn{.dir = std::string("/")};
}

void login(const FTPConn& conn, std::string user, std::string pass) {
    std::cout << (std::string("Logged in as ") + user);
    std::cout << std::endl;
}

void changeDir(FTPConn conn, std::string dir) {
    conn.dir = dir;
}

std::vector<FileInfo> list(const FTPConn& conn) {
    std::vector<std::string> names = ([&](const auto& __m){ auto __it = __m.find(conn.dir); return __it != __m.end() ? __it->second : std::vector<std::string>{}; })(serverNames);
    std::map<std::string, std::string> dataDir = ([&](const auto& __m){ auto __it = __m.find(conn.dir); return __it != __m.end() ? __it->second : std::map<std::string, std::string>{}; })(serverData);
    std::vector<FileInfo> out = {};
    for (std::string name : names) {
        std::string content = ([&](const auto& __m){ auto __it = __m.find(name); return __it != __m.end() ? __it->second : ""; })(dataDir);
        out = ([&]{ auto __tmp = out; __tmp.push_back(FileInfo{.name = name, .size = content.size(), .kind = std::string("file")}); return __tmp; }());
    }
    return out;
}

std::string retrieve(const FTPConn& conn, std::string name) {
    return ([&](const auto& __m){ auto __it = __m.find(name); return __it != __m.end() ? __it->second : ""; })(([&](const auto& __m){ auto __it = __m.find(conn.dir); return __it != __m.end() ? __it->second : std::map<std::string, std::string>{}; })(serverData));
}

int main() {
    FTPConn conn = connect(std::string("localhost:21"));
    login(conn, std::string("anonymous"), std::string("anonymous"));
    changeDir(conn, std::string("pub"));
    std::cout << conn.dir;
    std::cout << std::endl;
    std::vector<FileInfo> files = list(conn);
    for (FileInfo f : files) {
        std::cout << ((f.name + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << f.size; return ss.str(); }()));
        std::cout << std::endl;
    }
    std::string data = retrieve(conn, std::string("somefile.bin"));
    std::cout << ((std::string("Wrote ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << data.size(); return ss.str(); }())) + std::string(" bytes to somefile.bin"));
    std::cout << std::endl;
    return 0;
}
