// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:39 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

std::string poly(int p);
bool aks(int n);
int main();

std::string poly(int p) {
    std::string s = std::string("");
    int coef = 1;
    int i = p;
    if ((coef != 1)) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << coef; return ss.str(); }()));
    }
    while ((i > 0)) {
        s = (s + std::string("x"));
        if ((i != 1)) {
            s = ((s + std::string("^")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }()));
        }
        coef = (int)(((coef * i) / ((p - i) + 1)));
        int d = coef;
        if ((((p - (i - 1)) % 2) == 1)) {
            d = -d;
        }
        if ((d < 0)) {
            s = ((s + std::string(" - ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << -d; return ss.str(); }()));
        } else {
            s = ((s + std::string(" + ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << d; return ss.str(); }()));
        }
        i = (i - 1);
    }
    if ((s == std::string(""))) {
        s = std::string("1");
    }
    return s;
}

bool aks(int n) {
    if ((n < 2)) {
        return false;
    }
    int c = n;
    int i = 1;
    while ((i < n)) {
        if (((c % n) != 0)) {
            return false;
        }
        c = (int)(((c * (n - i)) / (i + 1)));
        i = (i + 1);
    }
    return true;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        int p = 0;
        while ((p <= 7)) {
            std::cout << ((([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }()) + std::string(":  ")) + poly(p));
            std::cout << std::endl;
            p = (p + 1);
        }
        bool first = true;
        p = 2;
        std::string line = std::string("");
        while ((p < 50)) {
            if (aks(p)) {
                if (first) {
                    line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }()));
                    first = false;
                } else {
                    line = ((line + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }()));
                }
            }
            p = (p + 1);
        }
        std::cout << line;
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
