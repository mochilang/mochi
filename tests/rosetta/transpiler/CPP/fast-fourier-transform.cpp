// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:15:52 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Complex;

std::ostream& operator<<(std::ostream&, const Complex&);


struct Complex {
    double re;
    double im;
    auto operator<=>(const Complex&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Complex& v) {
    os << '{' << "'re': "<< std::fixed << std::setprecision(1) << v.re
 << ", " << "'im': "<< std::fixed << std::setprecision(1) << v.im
 << '}';
    return os;
}

double sinApprox(double x);
double cosApprox(double x);
Complex cis(double x);
Complex add(const Complex& a, const Complex& b);
Complex sub(const Complex& a, const Complex& b);
Complex mul(const Complex& a, const Complex& b);
void ditfft2Rec(const std::vector<double>& x, std::vector<Complex> y, int64_t offX, int64_t offY, int64_t n, int64_t s);
void ditfft2(const std::vector<double>& x, const std::vector<Complex>& y, int64_t n, int64_t s);
int main();
std::string pad(std::string s, int64_t w);
std::string fmt(double x);
double floorf(double x);
int64_t indexOf(std::string s, std::string ch);

double PI = 3.141592653589793;

double sinApprox(double x) {
    double term = x;
    double sum = x;
    int64_t n = int64_t(1);
    while ((n <= int64_t(10))) {
        double denom = (double)(((int64_t(2) * n) * ((int64_t(2) * n) + int64_t(1))));
        term = ((double)(((-term * x) * x)) / (denom));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

double cosApprox(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t n = int64_t(1);
    while ((n <= int64_t(10))) {
        double denom = (double)((((int64_t(2) * n) - int64_t(1)) * (int64_t(2) * n)));
        term = ((double)(((-term * x) * x)) / (denom));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

Complex cis(double x) {
    return Complex{.re = cosApprox(x), .im = sinApprox(x)};
}

Complex add(const Complex& a, const Complex& b) {
    return Complex{.re = (a.re + b.re), .im = (a.im + b.im)};
}

Complex sub(const Complex& a, const Complex& b) {
    return Complex{.re = (a.re - b.re), .im = (a.im - b.im)};
}

Complex mul(const Complex& a, const Complex& b) {
    return Complex{.re = ((a.re * b.re) - (a.im * b.im)), .im = ((a.re * b.im) + (a.im * b.re))};
}

void ditfft2Rec(const std::vector<double>& x, std::vector<Complex> y, int64_t offX, int64_t offY, int64_t n, int64_t s) {
    if ((n == int64_t(1))) {
        y[offY] = Complex{.re = x[offX], .im = 0.0};
        return;
    }
    ditfft2Rec(x, y, offX, offY, (n / int64_t(2)), (int64_t(2) * s));
    ditfft2Rec(x, y, (offX + s), (offY + (n / int64_t(2))), (n / int64_t(2)), (int64_t(2) * s));
    int64_t k = int64_t(0);
    while ((k < (n / int64_t(2)))) {
        double angle = ((double)(((-2.0 * PI) * (double)(k))) / ((double)(n)));
        Complex tf = mul(cis(angle), y[((offY + k) + (n / int64_t(2)))]);
        Complex a = add(y[(offY + k)], tf);
        Complex b = sub(y[(offY + k)], tf);
        y[(offY + k)] = a;
        y[((offY + k) + (n / int64_t(2)))] = b;
        k = (k + int64_t(1));
    }
}

void ditfft2(const std::vector<double>& x, const std::vector<Complex>& y, int64_t n, int64_t s) {
    ditfft2Rec(x, y, int64_t(0), int64_t(0), n, s);
}

std::string pad(std::string s, int64_t w) {
    std::string t = s;
    while ((t.size() < w)) {
        t = (std::string(" ") + t);
    }
    return t;
}

std::string fmt(double x) {
    double y = ((double)(floorf(((x * 10000.0) + 0.5))) / (10000.0));
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }());
    int64_t dot = _index_of(s, std::string("."));
    if ((dot == (int64_t(0) - int64_t(1)))) {
        s = (s + std::string(".0000"));
    } else {
        int64_t d = ((s.size() - dot) - int64_t(1));
        while ((d < int64_t(4))) {
            s = (s + std::string("0"));
            d = (d + int64_t(1));
        }
    }
    return s;
}

double floorf(double x) {
    int64_t y = (int64_t)(x);
    return (double)(y);
}

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return (int64_t(0) - int64_t(1));
}

int main() {
    std::vector<double> x = std::vector<double>{1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0};
    std::vector<Complex> y = {};
    int64_t i = int64_t(0);
    while ((i < x.size())) {
        y = ([&]{ auto __tmp = y; __tmp.push_back(Complex{.re = 0.0, .im = 0.0}); return __tmp; }());
        i = (i + int64_t(1));
    }
    ditfft2(x, y, (int64_t)(x.size()), int64_t(1));
    for (Complex c : y) {
        std::string line = pad((std::string)(fmt(c.re)), int64_t(8));
        if ((c.im >= int64_t(0))) {
            line = ((line + std::string("+")) + fmt(c.im));
        } else {
            line = (line + fmt(c.im));
        }
        std::cout << line;
        std::cout << std::endl;
    }
    return 0;
}
