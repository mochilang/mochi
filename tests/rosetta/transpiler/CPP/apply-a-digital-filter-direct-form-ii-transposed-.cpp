// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:54:41 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>



std::vector<double> applyFilter(const std::vector<double>& input, const std::vector<double>& a, const std::vector<double>& b);
int main();

std::vector<double> a = std::vector<double>{1.0, -2.7756e-16, 0.33333333, -1.85e-17};
std::vector<double> b = std::vector<double>{0.16666667, 0.5, 0.5, 0.16666667};
std::vector<double> sig = std::vector<double>{-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589};
std::vector<double> res = applyFilter(sig, a, b);
int k = 0;

std::vector<double> applyFilter(const std::vector<double>& input, const std::vector<double>& a, const std::vector<double>& b) {
    std::vector<double> out = {};
    double scale = ((double)(1.0) / (a[0]));
    int i = 0;
    while ((i < input.size())) {
        double tmp = 0.0;
        int j = 0;
        while (((j <= i) && (j < b.size()))) {
            tmp = (tmp + (b[j] * input[(i - j)]));
            j = (j + 1);
        }
        j = 0;
        while (((j < i) && ((j + 1) < a.size()))) {
            tmp = (tmp - (a[(j + 1)] * out[((i - j) - 1)]));
            j = (j + 1);
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back((tmp * scale)); return __tmp; }());
        i = (i + 1);
    }
    return out;
}

int main() {
    while ((k < res.size())) {
        { std::ostringstream __ss; double __dv = res[k]; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        k = (k + 1);
    }
    return 0;
}
