// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:19:15 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Pixel {
    int64_t R;
    int64_t G;
    int64_t B;
    auto operator<=>(const Pixel&) const = default;
};

struct Bitmap {
    int64_t cols;
    int64_t rows;
    std::vector<std::vector<Pixel>> px;
    auto operator<=>(const Bitmap&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Pixel& v) {
    os << '{' << "'R': "<< v.R
 << ", " << "'G': "<< v.G
 << ", " << "'B': "<< v.B
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Bitmap& v) {
    os << '{' << "'cols': "<< v.cols
 << ", " << "'rows': "<< v.rows
 << ", " << "'px': "<< "["; for(size_t i=0;i<v.px.size();++i){ if(i>0) os << ", "; os << v.px[i]; } os << "]"
 << '}';
    return os;
}

Pixel pixelFromRgb(int64_t c);
int64_t rgbFromPixel(Pixel p);
Bitmap NewBitmap(int64_t x, int64_t y);
void FillRgb(Bitmap b, int64_t c);
bool SetPxRgb(Bitmap b, int64_t x, int64_t y, int64_t c);
int64_t nextRand(int64_t seed);
int main();

Pixel pixelFromRgb(int64_t c) {
    int64_t r = ((int64_t)((c / 65536)) % 256);
    int64_t g = ((int64_t)((c / 256)) % 256);
    int64_t b = (c % 256);
    return Pixel{r, g, b};
}

int64_t rgbFromPixel(Pixel p) {
    return (((p.R * 65536) + (p.G * 256)) + p.B);
}

Bitmap NewBitmap(int64_t x, int64_t y) {
    std::vector<std::vector<Pixel>> data = {};
    int64_t row = 0;
    while ((row < y)) {
        std::vector<Pixel> r = {};
        int64_t col = 0;
        while ((col < x)) {
            r = ([&]{ auto __tmp = r; __tmp.push_back(Pixel{0, 0, 0}); return __tmp; }());
            col = (col + 1);
        }
        data = ([&]{ auto __tmp = data; __tmp.push_back(r); return __tmp; }());
        row = (row + 1);
    }
    return Bitmap{x, y, data};
}

void FillRgb(Bitmap b, int64_t c) {
    int64_t y = 0;
    Pixel p = pixelFromRgb(c);
    while ((y < b.rows)) {
        int64_t x = 0;
        while ((x < b.cols)) {
            std::vector<std::vector<Pixel>> px = b.px;
            std::vector<Pixel> row = px[y];
            row[x] = p;
            px[y] = row;
            b.px = px;
            x = (x + 1);
        }
        y = (y + 1);
    }
}

bool SetPxRgb(Bitmap b, int64_t x, int64_t y, int64_t c) {
    if (((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows))) {
        return false;
    }
    std::vector<std::vector<Pixel>> px = b.px;
    std::vector<Pixel> row = px[y];
    row[x] = pixelFromRgb(c);
    px[y] = row;
    b.px = px;
    return true;
}

int64_t nextRand(int64_t seed) {
    return (((seed * 1664525) + 1013904223) % 2147483648);
}

int main() {
    Bitmap bm = NewBitmap(400, 300);
    FillRgb(bm, 12615744);
    int64_t seed = _now();
    int64_t i = 0;
    while ((i < 2000)) {
        seed = nextRand(seed);
        int64_t x = (seed % 400);
        seed = nextRand(seed);
        int64_t y = (seed % 300);
        SetPxRgb(bm, x, y, 8405024);
        i = (i + 1);
    }
    int64_t x = 0;
    while ((x < 400)) {
        int64_t y = 240;
        while ((y < 245)) {
            SetPxRgb(bm, x, y, 8405024);
            y = (y + 1);
        }
        y = 260;
        while ((y < 265)) {
            SetPxRgb(bm, x, y, 8405024);
            y = (y + 1);
        }
        x = (x + 1);
    }
    int64_t y = 0;
    while ((y < 300)) {
        int64_t x = 80;
        while ((x < 85)) {
            SetPxRgb(bm, x, y, 8405024);
            x = (x + 1);
        }
        x = 95;
        while ((x < 100)) {
            SetPxRgb(bm, x, y, 8405024);
            x = (x + 1);
        }
        y = (y + 1);
    }
    return 0;
}
