// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:45:34 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Window;

std::ostream& operator<<(std::ostream&, const Window&);


struct Window {
    int64_t x;
    int64_t y;
    int64_t w;
    int64_t h;
    bool maximized;
    bool iconified;
    bool visible;
    bool shifted;
    auto operator<=>(const Window&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Window& v) {
    os << '{' << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << ", " << "'w': "<< v.w
 << ", " << "'h': "<< v.h
 << ", " << "'maximized': "<< v.maximized
 << ", " << "'iconified': "<< v.iconified
 << ", " << "'visible': "<< v.visible
 << ", " << "'shifted': "<< v.shifted
 << '}';
    return os;
}

void showState(const Window& w, std::string label);
Window maximize(Window w);
Window unmaximize(Window w);
Window iconify(Window w);
Window deiconify(Window w);
Window hide(Window w);
Window showWindow(Window w);
Window move(Window w);
int main();

void showState(const Window& w, std::string label) {
    std::cout << ((((((((((((((label + std::string(": pos=(")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << w.x; return ss.str(); }())) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << w.y; return ss.str(); }())) + std::string(") size=(")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << w.w; return ss.str(); }())) + std::string("x")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << w.h; return ss.str(); }())) + std::string(") max=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << w.maximized; return ss.str(); }())) + std::string(" icon=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << w.iconified; return ss.str(); }())) + std::string(" visible=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << w.visible; return ss.str(); }()));
    std::cout << std::endl;
}

Window maximize(Window w) {
    w.maximized = true;
    w.w = int64_t(800);
    w.h = int64_t(600);
    return w;
}

Window unmaximize(Window w) {
    w.maximized = false;
    w.w = int64_t(640);
    w.h = int64_t(480);
    return w;
}

Window iconify(Window w) {
    w.iconified = true;
    w.visible = false;
    return w;
}

Window deiconify(Window w) {
    w.iconified = false;
    w.visible = true;
    return w;
}

Window hide(Window w) {
    w.visible = false;
    return w;
}

Window showWindow(Window w) {
    w.visible = true;
    return w;
}

Window move(Window w) {
    if (w.shifted) {
        w.x = (w.x - int64_t(10));
        w.y = (w.y - int64_t(10));
    } else {
        w.x = (w.x + int64_t(10));
        w.y = (w.y + int64_t(10));
    }
    w.shifted = !w.shifted;
    return w;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        Window win = Window{.x = int64_t(100), .y = int64_t(100), .w = int64_t(640), .h = int64_t(480), .maximized = false, .iconified = false, .visible = true, .shifted = false};
        showState(win, std::string("Start"));
        win = maximize(win);
        showState(win, std::string("Maximize"));
        win = unmaximize(win);
        showState(win, std::string("Unmaximize"));
        win = iconify(win);
        showState(win, std::string("Iconify"));
        win = deiconify(win);
        showState(win, std::string("Deiconify"));
        win = hide(win);
        showState(win, std::string("Hide"));
        win = showWindow(win);
        showState(win, std::string("Show"));
        win = move(win);
        showState(win, std::string("Move"));
    }
    return 0;
}
