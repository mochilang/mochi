// Generated by Mochi transpiler v0.10.39 on 2025-07-24 16:12:47 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <optional>



std::vector<std::vector<int>> neighborsList();
std::vector<int> plus(std::vector<int>& a, std::vector<int>& b);
bool isStable(std::vector<int>& p);
int topple(std::vector<int>& p);
std::string pileString(std::vector<int>& p);
int main();

std::vector<int> s4 = std::vector{4, 3, 3, 3, 1, 2, 0, 2, 3};
std::vector<int> s1 = std::vector{1, 2, 0, 2, 1, 1, 0, 1, 3};
std::vector<int> s2 = std::vector{2, 1, 3, 1, 0, 1, 0, 1, 0};
std::vector<int> s3_a = plus(s1, s2);
std::vector<int> s3_b = plus(s2, s1);
std::vector<int> s3 = std::vector{3, 3, 3, 3, 3, 3, 3, 3, 3};
std::vector<int> s3_id = std::vector{2, 1, 2, 1, 0, 1, 2, 1, 2};
std::vector<int> s4b = plus(s3, s3_id);
std::vector<int> s5 = plus(s3_id, s3_id);

std::vector<std::vector<int>> neighborsList() {
    return std::vector<std::vector<int>>{std::vector{1, 3}, std::vector{0, 2, 4}, std::vector{1, 5}, std::vector{0, 4, 6}, std::vector{1, 3, 5, 7}, std::vector{2, 4, 8}, std::vector{3, 7}, std::vector{4, 6, 8}, std::vector{5, 7}};
}

std::vector<int> plus(std::vector<int>& a, std::vector<int>& b) {
    std::vector<int> res = {};
    int i = 0;
    while ((i < a.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((a[i] + b[i])); return __tmp; }());
        i = (i + 1);
    }
    return res;
}

bool isStable(std::vector<int>& p) {
    for (int v : p) {
        if ((v > 3)) {
            return false;
        }
    }
    return true;
}

int topple(std::vector<int>& p) {
    std::vector<std::vector<int>> neighbors = neighborsList();
    int i = 0;
    while ((i < p.size())) {
        if ((p[i] > 3)) {
            p[i] = (p[i] - 4);
            std::vector<int> nbs = neighbors[i];
            for (int j : nbs) {
                p[j] = (p[j] + 1);
            }
            return 0;
        }
        i = (i + 1);
    }
    return 0;
}

std::string pileString(std::vector<int>& p) {
    std::string s = std::string("");
    int r = 0;
    while ((r < 3)) {
        int c = 0;
        while ((c < 3)) {
            s = ((s + ([&]{ std::ostringstream ss; ss << std::boolalpha << p[((3 * r) + c)]; return ss.str(); }())) + std::string(" "));
            c = (c + 1);
        }
        s = (s + std::string("\n"));
        r = (r + 1);
    }
    return s;
}

int main() {
    std::cout << std::string("Avalanche of topplings:\n");
    std::cout << std::endl;
    std::cout << pileString(s4);
    std::cout << std::endl;
    while (!isStable(s4)) {
        topple(s4);
        std::cout << pileString(s4);
        std::cout << std::endl;
    }
    std::cout << std::string("Commutative additions:\n");
    std::cout << std::endl;
    while (!isStable(s3_a)) {
        topple(s3_a);
    }
    while (!isStable(s3_b)) {
        topple(s3_b);
    }
    std::cout << ((((pileString(s1) + std::string("\nplus\n\n")) + pileString(s2)) + std::string("\nequals\n\n")) + pileString(s3_a));
    std::cout << std::endl;
    std::cout << (((((std::string("and\n\n") + pileString(s2)) + std::string("\nplus\n\n")) + pileString(s1)) + std::string("\nalso equals\n\n")) + pileString(s3_b));
    std::cout << std::endl;
    std::cout << std::string("Addition of identity sandpile:\n");
    std::cout << std::endl;
    while (!isStable(s4b)) {
        topple(s4b);
    }
    std::cout << ((((pileString(s3) + std::string("\nplus\n\n")) + pileString(s3_id)) + std::string("\nequals\n\n")) + pileString(s4b));
    std::cout << std::endl;
    std::cout << std::string("Addition of identities:\n");
    std::cout << std::endl;
    while (!isStable(s5)) {
        topple(s5);
    }
    std::cout << ((((pileString(s3_id) + std::string("\nplus\n\n")) + pileString(s3_id)) + std::string("\nequals\n\n")) + pileString(s5));
    std::cout << std::endl;
    return 0;
}
