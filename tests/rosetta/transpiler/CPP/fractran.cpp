// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:12:15 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <boost/multiprecision/cpp_int.hpp>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct StepResult;

std::ostream& operator<<(std::ostream&, const StepResult&);


struct StepResult {
    boost::multiprecision::cpp_int n;
    bool ok;
    auto operator<=>(const StepResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const StepResult& v) {
    os << '{' << "'n': "<< v.n
 << ", " << "'ok': "<< v.ok
 << '}';
    return os;
}

StepResult step(boost::multiprecision::cpp_int n, const std::vector<std::vector<boost::multiprecision::cpp_int>>& program);
int main();

StepResult step(boost::multiprecision::cpp_int n, const std::vector<std::vector<boost::multiprecision::cpp_int>>& program) {
    int64_t i = int64_t(0);
    while ((i < program.size())) {
        boost::multiprecision::cpp_int num = program[i][int64_t(0)];
        boost::multiprecision::cpp_int den = program[i][int64_t(1)];
        if (((n % den) == (boost::multiprecision::cpp_int)(int64_t(0)))) {
            n = ((n / den) * num);
            return StepResult{.n = n, .ok = true};
        }
        i = (i + int64_t(1));
    }
    return StepResult{.n = n, .ok = false};
}

int main() {
    std::vector<std::vector<boost::multiprecision::cpp_int>> program = std::vector<std::vector<boost::multiprecision::cpp_int>>{std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(17)), (boost::multiprecision::cpp_int)(int64_t(91))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(78)), (boost::multiprecision::cpp_int)(int64_t(85))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(19)), (boost::multiprecision::cpp_int)(int64_t(51))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(23)), (boost::multiprecision::cpp_int)(int64_t(38))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(29)), (boost::multiprecision::cpp_int)(int64_t(33))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(77)), (boost::multiprecision::cpp_int)(int64_t(29))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(95)), (boost::multiprecision::cpp_int)(int64_t(23))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(77)), (boost::multiprecision::cpp_int)(int64_t(19))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(1)), (boost::multiprecision::cpp_int)(int64_t(17))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(11)), (boost::multiprecision::cpp_int)(int64_t(13))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(13)), (boost::multiprecision::cpp_int)(int64_t(11))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(15)), (boost::multiprecision::cpp_int)(int64_t(14))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(15)), (boost::multiprecision::cpp_int)(int64_t(2))}, std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(55)), (boost::multiprecision::cpp_int)(int64_t(1))}};
    boost::multiprecision::cpp_int n = int64_t(2);
    int64_t primes = int64_t(0);
    int64_t count = int64_t(0);
    int64_t limit = int64_t(1000000);
    boost::multiprecision::cpp_int two = int64_t(2);
    std::string line = std::string("");
    while (((primes < int64_t(20)) && (count < limit))) {
        StepResult res = step(n, program);
        n = res.n;
        if (!res.ok) {
            break;
        }
        boost::multiprecision::cpp_int m = n;
        int64_t pow = int64_t(0);
        while (((m % two) == (boost::multiprecision::cpp_int)(int64_t(0)))) {
            m = (m / two);
            pow = (pow + int64_t(1));
        }
        if (((m == (boost::multiprecision::cpp_int)(int64_t(1))) && (pow > int64_t(1)))) {
            line = ((line + ([&]{ std::ostringstream ss; ss << std::boolalpha << pow; return ss.str(); }())) + std::string(" "));
            primes = (primes + int64_t(1));
        }
        count = (count + int64_t(1));
    }
    if ((line.size() > int64_t(0))) {
        std::cout << line.substr(int64_t(0), (line.size() - int64_t(1)) - int64_t(0));
        std::cout << std::endl;
    } else {
        std::cout << std::string("");
        std::cout << std::endl;
    }
    return 0;
}
