// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:34:51 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <any>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> randInt(int64_t seed, int64_t n);
std::vector<std::any> newBoard(int64_t n, int64_t seed);
std::vector<std::vector<int64_t>> copyBoard(const std::vector<std::vector<int64_t>>& b);
std::vector<std::vector<int64_t>> flipRow(std::vector<std::vector<int64_t>> b, int64_t r);
std::vector<std::vector<int64_t>> flipCol(std::vector<std::vector<int64_t>> b, int64_t c);
bool boardsEqual(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b);
std::vector<std::any> shuffleBoard(std::vector<std::vector<int64_t>> b, int64_t seed);
std::map<std::string, std::vector<int64_t>> solve(const std::vector<std::vector<int64_t>>& board, const std::vector<std::vector<int64_t>>& target);
std::vector<std::any> applySolution(const std::vector<std::vector<int64_t>>& b, const std::map<std::string, std::vector<int64_t>>& sol);
void printBoard(const std::vector<std::vector<int64_t>>& b);
int main();

std::vector<int64_t> randInt(int64_t seed, int64_t n) {
    int64_t next = (((seed * int64_t(1664525)) + int64_t(1013904223)) % int64_t(2147483647));
    return std::vector<int64_t>{next, (next % n)};
}

std::vector<std::any> newBoard(int64_t n, int64_t seed) {
    std::vector<std::vector<int64_t>> board = {};
    int64_t s = seed;
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            std::vector<int64_t> r = randInt(s, int64_t(2));
            s = r[int64_t(0)];
            row = ([&]{ auto __tmp = row; __tmp.push_back(r[int64_t(1)]); return __tmp; }());
            j = (j + int64_t(1));
        }
        board = ([&]{ auto __tmp = board; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return std::vector<std::any>{std::any(board), std::any(s)};
}

std::vector<std::vector<int64_t>> copyBoard(const std::vector<std::vector<int64_t>>& b) {
    std::vector<std::vector<int64_t>> nb = {};
    int64_t i = int64_t(0);
    while ((i < b.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < b[i].size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(b[i][j]); return __tmp; }());
            j = (j + int64_t(1));
        }
        nb = ([&]{ auto __tmp = nb; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return nb;
}

std::vector<std::vector<int64_t>> flipRow(std::vector<std::vector<int64_t>> b, int64_t r) {
    int64_t j = int64_t(0);
    while ((j < b[r].size())) {
        b[r][j] = (int64_t(1) - b[r][j]);
        j = (j + int64_t(1));
    }
    return b;
}

std::vector<std::vector<int64_t>> flipCol(std::vector<std::vector<int64_t>> b, int64_t c) {
    int64_t i = int64_t(0);
    while ((i < b.size())) {
        b[i][c] = (int64_t(1) - b[i][c]);
        i = (i + int64_t(1));
    }
    return b;
}

bool boardsEqual(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b) {
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        int64_t j = int64_t(0);
        while ((j < a[i].size())) {
            if ((a[i][j] != b[i][j])) {
                return false;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return true;
}

std::vector<std::any> shuffleBoard(std::vector<std::vector<int64_t>> b, int64_t seed) {
    int64_t s = seed;
    int n = b.size();
    int64_t k = int64_t(0);
    while ((k < (int64_t(2) * n))) {
        std::vector<int64_t> r = randInt(s, (int64_t)(n));
        s = r[int64_t(0)];
        int64_t idx = (int64_t)(r[int64_t(1)]);
        if (((k % int64_t(2)) == int64_t(0))) {
            b = flipRow(b, idx);
        } else {
            b = flipCol(b, idx);
        }
        k = (k + int64_t(1));
    }
    return std::vector<std::any>{std::any(b), std::any(s)};
}

std::map<std::string, std::vector<int64_t>> solve(const std::vector<std::vector<int64_t>>& board, const std::vector<std::vector<int64_t>>& target) {
    int n = board.size();
    std::vector<int64_t> row = {};
    std::vector<int64_t> col = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        int64_t diff = ((board[i][int64_t(0)] != target[i][int64_t(0)]) ? int64_t(1) : int64_t(0));
        row = ([&]{ auto __tmp = row; __tmp.push_back(diff); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < n)) {
        int64_t diff = ((board[int64_t(0)][j] != target[int64_t(0)][j]) ? int64_t(1) : int64_t(0));
        int64_t val = ((diff + row[int64_t(0)]) % int64_t(2));
        col = ([&]{ auto __tmp = col; __tmp.push_back(val); return __tmp; }());
        j = (j + int64_t(1));
    }
    return std::map<std::string, std::vector<int64_t>>{{"row", row}, {"col", col}};
}

std::vector<std::any> applySolution(const std::vector<std::vector<int64_t>>& b, const std::map<std::string, std::vector<int64_t>>& sol) {
    std::vector<std::vector<int64_t>> board = b;
    int64_t moves = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < ([&](const auto& __m){ auto __it = __m.find(std::string("row")); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(sol).size())) {
        if ((([&](const auto& __m){ auto __it = __m.find(std::string("row")); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(sol)[i] == int64_t(1))) {
            board = flipRow(board, i);
            moves = (moves + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < ([&](const auto& __m){ auto __it = __m.find(std::string("col")); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(sol).size())) {
        if ((([&](const auto& __m){ auto __it = __m.find(std::string("col")); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(sol)[j] == int64_t(1))) {
            board = flipCol(board, j);
            moves = (moves + int64_t(1));
        }
        j = (j + int64_t(1));
    }
    return std::vector<std::any>{std::any(board), std::any(moves)};
}

void printBoard(const std::vector<std::vector<int64_t>>& b) {
    int64_t i = int64_t(0);
    while ((i < b.size())) {
        std::string line = std::string("");
        int64_t j = int64_t(0);
        while ((j < b[i].size())) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << b[i][j]; return ss.str(); }()));
            if ((j < (b[i].size() - int64_t(1)))) {
                line = (line + std::string(" "));
            }
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t n = int64_t(3);
        int64_t seed = int64_t(1);
        std::vector<std::any> res = newBoard(n, seed);
        std::vector<std::vector<int64_t>> target = std::any_cast<std::vector<std::vector<int64_t>>>(res[int64_t(0)]);
        seed = std::any_cast<int64_t>(res[int64_t(1)]);
        std::vector<std::vector<int64_t>> board = copyBoard(target);
        while (true) {
            std::vector<std::any> sres = shuffleBoard(copyBoard(board), seed);
            board = std::any_cast<std::vector<std::vector<int64_t>>>(sres[int64_t(0)]);
            seed = std::any_cast<int64_t>(sres[int64_t(1)]);
            if (!boardsEqual(board, target)) {
                break;
            }
        }
        std::cout << std::string("Target:");
        std::cout << std::endl;
        printBoard(target);
        std::cout << std::string("Board:");
        std::cout << std::endl;
        printBoard(board);
        std::map<std::string, std::vector<int64_t>> sol = solve(board, target);
        std::vector<std::any> ares = applySolution(board, sol);
        board = std::any_cast<std::vector<std::vector<int64_t>>>(ares[int64_t(0)]);
        int64_t moves = std::any_cast<int64_t>(ares[int64_t(1)]);
        std::cout << std::string("Solved:");
        std::cout << std::endl;
        printBoard(board);
        std::cout << (std::string("Moves: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << moves; return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
