// Generated by Mochi transpiler v0.10.52 on 2025-08-01 21:21:57 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <any>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Eatable;
struct Foodbox;
struct PeelFirst;

std::ostream& operator<<(std::ostream&, const Eatable&);
std::ostream& operator<<(std::ostream&, const Foodbox&);
std::ostream& operator<<(std::ostream&, const PeelFirst&);


struct Eatable {
    std::function<std::any()> eat;
    auto operator<=>(const Eatable&) const = default;
};

struct Foodbox {
    std::vector<PeelFirst> items;
    auto operator<=>(const Foodbox&) const = default;
};

struct PeelFirst {
    std::string value;
    auto operator<=>(const PeelFirst&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Eatable& v) {
    os << '{' << "'eat': "<< "<fn>"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Foodbox& v) {
    os << '{' << "'items': "<< "["; for(size_t i=0;i<v.items.size();++i){ if(i>0) os << ", "; os << v.items[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const PeelFirst& v) {
    os << '{' << "'value': "<< "'" << v.value << "'"
 << '}';
    return os;
}

void peelFirstEat(const PeelFirst& p);
int main();

void peelFirstEat(const PeelFirst& p) {
    std::cout << ((std::string("mm, that ") + p.value) + std::string(" was good!"));
    std::cout << std::endl;
}

int main() {
    Foodbox fb = Foodbox{.items = std::vector<PeelFirst>{PeelFirst{.value = std::string("banana")}, PeelFirst{.value = std::string("mango")}}};
    PeelFirst f0 = fb.items[int64_t(0)];
    peelFirstEat(f0);
    return 0;
}
