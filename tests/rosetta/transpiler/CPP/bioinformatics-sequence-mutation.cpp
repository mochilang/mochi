// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:54:26 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <any>
#include <sstream>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(long long)) os << std::any_cast<long long>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<long long>)) { const auto& v = std::any_cast<const std::vector<long long>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<long long>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<long long>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> randInt(int64_t s, int64_t n);
std::string padLeft(std::string s, int64_t w);
std::vector<std::any> makeSeq(int64_t s, int64_t le);
std::vector<std::any> mutate(int64_t s, std::string dna, const std::vector<int64_t>& w);
void prettyPrint(std::string dna, int64_t rowLen);
std::string wstring(const std::vector<int64_t>& w);
int main();

std::vector<int64_t> randInt(int64_t s, int64_t n) {
    int64_t next = (((s * 1664525) + 1013904223) % 2147483647);
    return std::vector<int64_t>{next, (next % n)};
}

std::string padLeft(std::string s, int64_t w) {
    std::string res = std::string("");
    int64_t n = (w - s.size());
    while ((n > 0)) {
        res = (res + std::string(" "));
        n = (n - 1);
    }
    return (res + s);
}

std::vector<std::any> makeSeq(int64_t s, int64_t le) {
    std::string bases = std::string("ACGT");
    std::string out = std::string("");
    int64_t i = 0;
    while ((i < le)) {
        std::vector<int64_t> r = randInt(s, 4);
        s = r[0];
        int64_t idx = (int64_t)(r[1]);
        out = (out + bases.substr(idx, (idx + 1) - idx));
        i = (i + 1);
    }
    return std::vector<std::any>{std::any(s), std::any(out)};
}

std::vector<std::any> mutate(int64_t s, std::string dna, const std::vector<int64_t>& w) {
    std::string bases = std::string("ACGT");
    int le = dna.size();
    std::vector<int64_t> r = randInt(s, (int64_t)(le));
    s = r[0];
    int64_t p = (int64_t)(r[1]);
    r = randInt(s, 300);
    s = r[0];
    int64_t x = (int64_t)(r[1]);
    std::vector<std::string> arr = {};
    int64_t i = 0;
    while ((i < le)) {
        arr = ([&]{ auto __tmp = arr; __tmp.push_back(dna.substr(i, (i + 1) - i)); return __tmp; }());
        i = (i + 1);
    }
    if ((x < w[0])) {
        r = randInt(s, 4);
        s = r[0];
        int64_t idx = (int64_t)(r[1]);
        std::string b = bases.substr(idx, (idx + 1) - idx);
        std::cout << ((((((std::string("  Change @") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }()), 3)) + std::string(" '")) + arr[p]) + std::string("' to '")) + b) + std::string("'"));
        std::cout << std::endl;
        arr[p] = b;
    } else     if ((x < (w[0] + w[1]))) {
        std::cout << ((((std::string("  Delete @") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }()), 3)) + std::string(" '")) + arr[p]) + std::string("'"));
        std::cout << std::endl;
        int64_t j = p;
        while ((j < (arr.size() - 1))) {
            arr[j] = arr[(j + 1)];
            j = (j + 1);
        }
        arr = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, (arr.size() - 1) - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+(arr.size() - 1)); })(arr);
    } else {
        r = randInt(s, 4);
        s = r[0];
        int64_t idx2 = (int64_t)(r[1]);
        std::string b = bases.substr(idx2, (idx2 + 1) - idx2);
        arr = ([&]{ auto __tmp = arr; __tmp.push_back(std::string("")); return __tmp; }());
        int64_t j = (arr.size() - 1);
        while ((j > p)) {
            arr[j] = arr[(j - 1)];
            j = (j - 1);
        }
        std::cout << ((((std::string("  Insert @") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }()), 3)) + std::string(" '")) + b) + std::string("'"));
        std::cout << std::endl;
        arr[p] = b;
    }

    std::string out = std::string("");
    i = 0;
    while ((i < arr.size())) {
        out = (out + arr[i]);
        i = (i + 1);
    }
    return std::vector<std::any>{std::any(s), std::any(out)};
}

void prettyPrint(std::string dna, int64_t rowLen) {
    std::cout << std::string("SEQUENCE:");
    std::cout << std::endl;
    int le = dna.size();
    int64_t i = 0;
    while ((i < le)) {
        int64_t k = (i + rowLen);
        if ((k > le)) {
            k = le;
        }
        std::cout << ((padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }()), 5) + std::string(": ")) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, k - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+k); })(dna));
        std::cout << std::endl;
        i = (i + rowLen);
    }
    int64_t a = 0;
    int64_t c = 0;
    int64_t g = 0;
    int64_t t = 0;
    int64_t idx = 0;
    while ((idx < le)) {
        std::string ch = dna.substr(idx, (idx + 1) - idx);
        if ((ch == std::string("A"))) {
            a = (a + 1);
        } else {
            if ((ch == std::string("C"))) {
                c = (c + 1);
            } else {
                if ((ch == std::string("G"))) {
                    g = (g + 1);
                } else {
                    if ((ch == std::string("T"))) {
                        t = (t + 1);
                    }
                }
            }
        }
        idx = (idx + 1);
    }
    std::cout << std::string("");
    std::cout << std::endl;
    std::cout << std::string("BASE COUNT:");
    std::cout << std::endl;
    std::cout << (std::string("    A: ") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()), 3));
    std::cout << std::endl;
    std::cout << (std::string("    C: ") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << c; return ss.str(); }()), 3));
    std::cout << std::endl;
    std::cout << (std::string("    G: ") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << g; return ss.str(); }()), 3));
    std::cout << std::endl;
    std::cout << (std::string("    T: ") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << t; return ss.str(); }()), 3));
    std::cout << std::endl;
    std::cout << std::string("    ------");
    std::cout << std::endl;
    std::cout << (std::string("    Î£: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << le; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << std::string("    ======");
    std::cout << std::endl;
}

std::string wstring(const std::vector<int64_t>& w) {
    return ((((((std::string("  Change: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << w[0]; return ss.str(); }())) + std::string("\n  Delete: ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << w[1]; return ss.str(); }())) + std::string("\n  Insert: ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << w[2]; return ss.str(); }())) + std::string("\n"));
}

int main() {
    int64_t seed = 1;
    std::vector<std::any> res = makeSeq(seed, 250);
    seed = std::any_cast<int64_t>(res[0]);
    std::string dna = std::any_cast<std::string>(res[1]);
    prettyPrint(dna, 50);
    int64_t muts = 10;
    std::vector<int64_t> w = std::vector<int64_t>{100, 100, 100};
    std::cout << std::string("\nWEIGHTS (ex 300):");
    std::cout << std::endl;
    std::cout << wstring(w);
    std::cout << std::endl;
    std::cout << ((std::string("MUTATIONS (") + ([&]{ std::ostringstream ss; ss << std::boolalpha << muts; return ss.str(); }())) + std::string("):"));
    std::cout << std::endl;
    int64_t i = 0;
    while ((i < muts)) {
        res = mutate(seed, dna, w);
        seed = std::any_cast<int64_t>(res[0]);
        dna = std::any_cast<std::string>(res[1]);
        i = (i + 1);
    }
    std::cout << std::string("");
    std::cout << std::endl;
    prettyPrint(dna, 50);
    return 0;
}
