// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:13:44 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

double sinApprox(double x);
int main();

double PI = 3.141592653589793;
double dt = 0.01;
double s = 0.0;
double t1 = 0.0;
double k1 = sinApprox(0.0);
int i = 1;
int i2 = 1;

double sinApprox(double x) {
    double term = x;
    double sum = x;
    int n = 1;
    while ((n <= 12)) {
        double denom = (double)(((2 * n) * ((2 * n) + 1)));
        term = ((double)(((-term * x) * x)) / (denom));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        while ((i <= 200)) {
            double t2 = ((double)(i) * dt);
            double k2 = sinApprox((t2 * PI));
            s = (s + (((k1 + k2) * 0.5) * (t2 - t1)));
            t1 = t2;
            k1 = k2;
            i = (i + 1);
        }
        while ((i2 <= 50)) {
            double t2 = (2.0 + ((double)(i2) * dt));
            double k2 = 0.0;
            s = (s + (((k1 + k2) * 0.5) * (t2 - t1)));
            t1 = t2;
            k1 = k2;
            i2 = (i2 + 1);
        }
        { std::ostringstream __ss; double __dv = s; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
