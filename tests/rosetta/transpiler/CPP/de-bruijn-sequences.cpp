// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:47:27 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <map>


static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> dbRec(int64_t k, int64_t n, int64_t t, int64_t p, std::vector<int64_t> a, std::vector<int64_t> seq);
std::string deBruijn(int64_t k, int64_t n);
bool allDigits(std::string s);
int64_t parseIntStr(std::string str);
void validate(std::string db);
std::string padLeft(int64_t n, int64_t width);
std::string joinStr(const std::vector<std::string>& xs, std::string sep);
std::string reverse(std::string s);
int main();

std::vector<int64_t> dbRec(int64_t k, int64_t n, int64_t t, int64_t p, std::vector<int64_t> a, std::vector<int64_t> seq) {
    if ((t > n)) {
        if (((n % p) == int64_t(0))) {
            int64_t j = int64_t(1);
            while ((j <= p)) {
                seq = ([&]{ auto __tmp = seq; __tmp.push_back(a[j]); return __tmp; }());
                j = (j + int64_t(1));
            }
        }
    } else {
        a[t] = a[(t - p)];
        seq = dbRec(k, n, (t + int64_t(1)), p, a, seq);
        int64_t j = (a[(t - p)] + int64_t(1));
        while ((j < k)) {
            a[t] = j;
            seq = dbRec(k, n, (t + int64_t(1)), t, a, seq);
            j = (j + int64_t(1));
        }
    }
    return seq;
}

std::string deBruijn(int64_t k, int64_t n) {
    std::string digits = std::string("0123456789");
    std::string alphabet = digits;
    if ((k < int64_t(10))) {
        alphabet = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), k - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+k); })(digits);
    }
    std::vector<int64_t> a = {};
    int64_t i = int64_t(0);
    while ((i < (k * n))) {
        a = ([&]{ auto __tmp = a; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> seq = {};
    seq = dbRec(k, n, int64_t(1), int64_t(1), a, seq);
    std::string b = std::string("");
    int64_t idx = int64_t(0);
    while ((idx < seq.size())) {
        b = (b + std::string(1, alphabet[seq[idx]]));
        idx = (idx + int64_t(1));
    }
    b = (b + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (n - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(n - int64_t(1))); })(b));
    return b;
}

bool allDigits(std::string s) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if (((ch < std::string("0")) || (ch > std::string("9")))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

int64_t parseIntStr(std::string str) {
    int64_t n = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < str.size())) {
        n = ((n * int64_t(10)) + (int64_t)(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(str)));
        i = (i + int64_t(1));
    }
    return n;
}

void validate(std::string db) {
    int le = db.size();
    std::vector<int64_t> found = {};
    int64_t i = int64_t(0);
    while ((i < int64_t(10000))) {
        found = ([&]{ auto __tmp = found; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < (le - int64_t(3)))) {
        std::string s = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(j, (j + int64_t(4)) - j); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+j, __v.begin()+(j + int64_t(4))); })(db);
        if (allDigits(s)) {
            int64_t n = _parse_int_str(s, int64_t(10));
            found[n] = (found[n] + int64_t(1));
        }
        j = (j + int64_t(1));
    }
    std::vector<std::string> errs = {};
    int64_t k = int64_t(0);
    while ((k < int64_t(10000))) {
        if ((found[k] == int64_t(0))) {
            errs = ([&]{ auto __tmp = errs; __tmp.push_back(((std::string("    PIN number ") + padLeft(k, int64_t(4))) + std::string(" missing"))); return __tmp; }());
        } else         if ((found[k] > int64_t(1))) {
            errs = ([&]{ auto __tmp = errs; __tmp.push_back(((((std::string("    PIN number ") + padLeft(k, int64_t(4))) + std::string(" occurs ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << found[k]; return ss.str(); }())) + std::string(" times"))); return __tmp; }());
        }

        k = (k + int64_t(1));
    }
    int lerr = errs.size();
    if ((lerr == int64_t(0))) {
        std::cout << std::string("  No errors found");
        std::cout << std::endl;
    } else {
        std::string pl = std::string("s");
        if ((lerr == int64_t(1))) {
            pl = std::string("");
        }
        std::cout << ((((std::string("  ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << lerr; return ss.str(); }())) + std::string(" error")) + pl) + std::string(" found:"));
        std::cout << std::endl;
        std::string msg = joinStr(errs, std::string("\n"));
        std::cout << msg;
        std::cout << std::endl;
    }
}

std::string padLeft(int64_t n, int64_t width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < width)) {
        s = (std::string("0") + s);
    }
    return s;
}

std::string joinStr(const std::vector<std::string>& xs, std::string sep) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((i > int64_t(0))) {
            res = (res + sep);
        }
        res = (res + xs[i]);
        i = (i + int64_t(1));
    }
    return res;
}

std::string reverse(std::string s) {
    std::string out = std::string("");
    int64_t i = (s.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        out = (out + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s));
        i = (i - int64_t(1));
    }
    return out;
}

int main() {
    std::string db = deBruijn(int64_t(10), int64_t(4));
    int le = db.size();
    std::cout << (std::string("The length of the de Bruijn sequence is ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << le; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << std::string("\nThe first 130 digits of the de Bruijn sequence are:");
    std::cout << std::endl;
    std::cout << ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(130) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(130)); })(db);
    std::cout << std::endl;
    std::cout << std::string("\nThe last 130 digits of the de Bruijn sequence are:");
    std::cout << std::endl;
    std::cout << ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((le - int64_t(130)), db.size() - (le - int64_t(130))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(le - int64_t(130)), __v.begin()+db.size()); })(db);
    std::cout << std::endl;
    std::cout << std::string("\nValidating the de Bruijn sequence:");
    std::cout << std::endl;
    validate(db);
    std::cout << std::string("\nValidating the reversed de Bruijn sequence:");
    std::cout << std::endl;
    std::string dbr = reverse(db);
    validate(dbr);
    db = ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(4443) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(4443)); })(db) + std::string(".")) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(4444), db.size() - int64_t(4444)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(4444), __v.begin()+db.size()); })(db));
    std::cout << std::string("\nValidating the overlaid de Bruijn sequence:");
    std::cout << std::endl;
    validate(db);
    return 0;
}
