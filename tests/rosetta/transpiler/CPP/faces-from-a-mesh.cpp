// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:14:38 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <any>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Edge;

std::ostream& operator<<(std::ostream&, const Edge&);


struct Edge {
    int64_t a;
    int64_t b;
    auto operator<=>(const Edge&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Edge& v) {
    os << '{' << "'a': "<< v.a
 << ", " << "'b': "<< v.b
 << '}';
    return os;
}

bool contains(const std::vector<int64_t>& xs, int64_t v);
bool sliceEqual(const std::vector<int64_t>& a, const std::vector<int64_t>& b);
void reverse(std::vector<int64_t> xs);
std::vector<int64_t> copyInts(const std::vector<int64_t>& xs);
bool perimEqual(const std::vector<int64_t>& p1, const std::vector<int64_t>& p2);
std::vector<Edge> sortEdges(const std::vector<Edge>& es);
std::vector<Edge> concat(const std::vector<Edge>& a, const std::vector<Edge>& b);
std::any faceToPerim(const std::vector<Edge>& face);
std::string listStr(const std::vector<int64_t>& xs);
int main();

std::vector<Edge> e = std::vector<Edge>{Edge{.a = int64_t(7), .b = int64_t(11)}, Edge{.a = int64_t(1), .b = int64_t(11)}, Edge{.a = int64_t(1), .b = int64_t(7)}};
std::vector<Edge> f = std::vector<Edge>{Edge{.a = int64_t(11), .b = int64_t(23)}, Edge{.a = int64_t(1), .b = int64_t(17)}, Edge{.a = int64_t(17), .b = int64_t(23)}, Edge{.a = int64_t(1), .b = int64_t(11)}};
std::vector<Edge> g = std::vector<Edge>{Edge{.a = int64_t(8), .b = int64_t(14)}, Edge{.a = int64_t(17), .b = int64_t(19)}, Edge{.a = int64_t(10), .b = int64_t(12)}, Edge{.a = int64_t(10), .b = int64_t(14)}, Edge{.a = int64_t(12), .b = int64_t(17)}, Edge{.a = int64_t(8), .b = int64_t(18)}, Edge{.a = int64_t(18), .b = int64_t(19)}};
std::vector<Edge> h = std::vector<Edge>{Edge{.a = int64_t(1), .b = int64_t(3)}, Edge{.a = int64_t(9), .b = int64_t(11)}, Edge{.a = int64_t(3), .b = int64_t(11)}, Edge{.a = int64_t(1), .b = int64_t(11)}};
std::vector<std::vector<Edge>> faces = std::vector<std::vector<Edge>>{e, f, g, h};
std::vector<std::string> names = std::vector<std::string>{std::string("E"), std::string("F"), std::string("G"), std::string("H")};
int64_t idx2 = int64_t(0);

bool contains(const std::vector<int64_t>& xs, int64_t v) {
    for (int64_t x : xs) {
        if ((x == v)) {
            return true;
        }
    }
    return false;
}

bool sliceEqual(const std::vector<int64_t>& a, const std::vector<int64_t>& b) {
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        if ((a[i] != b[i])) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

void reverse(std::vector<int64_t> xs) {
    int64_t i = int64_t(0);
    int64_t j = (xs.size() - int64_t(1));
    while ((i < j)) {
        int64_t t = xs[i];
        xs[i] = xs[j];
        xs[j] = t;
        i = (i + int64_t(1));
        j = (j - int64_t(1));
    }
}

std::vector<int64_t> copyInts(const std::vector<int64_t>& xs) {
    std::vector<int64_t> out = {};
    for (int64_t v : xs) {
        out = ([&]{ auto __tmp = out; __tmp.push_back(v); return __tmp; }());
    }
    return out;
}

bool perimEqual(const std::vector<int64_t>& p1, const std::vector<int64_t>& p2) {
    if ((p1.size() != p2.size())) {
        return false;
    }
    for (int64_t v : p1) {
        if (!contains(p2, v)) {
            return false;
        }
    }
    std::vector<int64_t> c = copyInts(p1);
    int64_t r = int64_t(0);
    while ((r < int64_t(2))) {
        int64_t i = int64_t(0);
        while ((i < p1.size())) {
            if (sliceEqual(c, p2)) {
                return true;
            }
            int64_t t = c[static_cast<size_t>((c.size() - int64_t(1)))];
            int64_t j = (c.size() - int64_t(1));
            while ((j > int64_t(0))) {
                c[j] = c[(j - int64_t(1))];
                j = (j - int64_t(1));
            }
            c[int64_t(0)] = t;
            i = (i + int64_t(1));
        }
        reverse(c);
        r = (r + int64_t(1));
    }
    return false;
}

std::vector<Edge> sortEdges(const std::vector<Edge>& es) {
    std::vector<Edge> arr = es;
    int n = arr.size();
    int64_t i = int64_t(0);
    while ((i < n)) {
        int64_t j = int64_t(0);
        while ((j < (n - int64_t(1)))) {
            Edge a = arr[j];
            Edge b = arr[(j + int64_t(1))];
            if (((a.a > b.a) || ((a.a == b.a) && (a.b > b.b)))) {
                arr[j] = b;
                arr[(j + int64_t(1))] = a;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return arr;
}

std::vector<Edge> concat(const std::vector<Edge>& a, const std::vector<Edge>& b) {
    std::vector<Edge> out = {};
    for (Edge x : a) {
        out = ([&]{ auto __tmp = out; __tmp.push_back(x); return __tmp; }());
    }
    for (Edge x : b) {
        out = ([&]{ auto __tmp = out; __tmp.push_back(x); return __tmp; }());
    }
    return out;
}

std::any faceToPerim(const std::vector<Edge>& face) {
    int le = face.size();
    if ((le == int64_t(0))) {
        return std::any{};
    }
    std::vector<Edge> edges = {};
    int64_t i = int64_t(0);
    while ((i < le)) {
        Edge e = face[i];
        if ((e.b <= e.a)) {
            return std::any{};
        }
        edges = ([&]{ auto __tmp = edges; __tmp.push_back(e); return __tmp; }());
        i = (i + int64_t(1));
    }
    edges = sortEdges(edges);
    Edge firstEdge = edges[int64_t(0)];
    std::vector<int64_t> perim = std::vector<int64_t>{firstEdge.a, firstEdge.b};
    int64_t first = firstEdge.a;
    int64_t last = firstEdge.b;
    edges = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), edges.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+edges.size()); })(edges);
    le = edges.size();
    bool done = false;
    while (((le > int64_t(0)) && !done)) {
        int64_t idx = int64_t(0);
        bool found = false;
        while ((idx < le)) {
            Edge e = edges[idx];
            if ((e.a == last)) {
                perim = ([&]{ auto __tmp = perim; __tmp.push_back(e.b); return __tmp; }());
                last = e.b;
                found = true;
            } else             if ((e.b == last)) {
                perim = ([&]{ auto __tmp = perim; __tmp.push_back(e.a); return __tmp; }());
                last = e.a;
                found = true;
            }

            if (found) {
                edges = concat(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), idx - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+idx); })(edges), ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((idx + int64_t(1)), edges.size() - (idx + int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(idx + int64_t(1)), __v.begin()+edges.size()); })(edges));
                le = (le - int64_t(1));
                if ((last == first)) {
                    if ((le == int64_t(0))) {
                        done = true;
                    } else {
                        return std::any{};
                    }
                }
                break;
            }
            idx = (idx + int64_t(1));
        }
        if (!found) {
            return std::any{};
        }
    }
    return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (perim.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(perim.size() - int64_t(1))); })(perim);
}

std::string listStr(const std::vector<int64_t>& xs) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << xs[i]; return ss.str(); }()));
        if ((i < (xs.size() - int64_t(1)))) {
            s = (s + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    std::cout << std::string("Perimeter format equality checks:");
    std::cout << std::endl;
    std::cout << (std::string("  Q == R is ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << perimEqual(std::vector<int64_t>{int64_t(8), int64_t(1), int64_t(3)}, std::vector<int64_t>{int64_t(1), int64_t(3), int64_t(8)}); return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("  U == V is ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << perimEqual(std::vector<int64_t>{int64_t(18), int64_t(8), int64_t(14), int64_t(10), int64_t(12), int64_t(17), int64_t(19)}, std::vector<int64_t>{int64_t(8), int64_t(14), int64_t(10), int64_t(12), int64_t(17), int64_t(19), int64_t(18)}); return ss.str(); }()));
    std::cout << std::endl;
    std::cout << std::string("\nEdge to perimeter format translations:");
    std::cout << std::endl;
    while ((idx2 < faces.size())) {
        std::any per = faceToPerim(faces[idx2]);
        if ((!per.has_value())) {
            std::cout << ((std::string("  ") + names[idx2]) + std::string(" => Invalid edge format"));
            std::cout << std::endl;
        } else {
            std::cout << (((std::string("  ") + names[idx2]) + std::string(" => ")) + listStr(std::any_cast<std::vector<int64_t>>(per)));
            std::cout << std::endl;
        }
        idx2 = (idx2 + int64_t(1));
    }
    return 0;
}
