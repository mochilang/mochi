// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:20:08 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int indexOf(std::string s, std::string ch);
int parseIntStr(std::string str);
int ord(std::string ch);
std::string chr(int n);
std::string toBinary(int n, int bits);
int binToInt(std::string bits);
std::string base64Encode(std::string text);
std::string base64Decode(std::string enc);
int main();

std::string msg = std::string("Rosetta Code Base64 decode data task");
std::string enc = base64Encode(msg);
std::string dec = base64Decode(enc);

int indexOf(std::string s, std::string ch) {
    int i = 0;
    while ((i < s.size())) {
        if ((std::string(1, s[i]) == ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

int parseIntStr(std::string str) {
    int i = 0;
    bool neg = false;
    if (((str.size() > 0) && (std::string(1, str[0]) == std::string("-")))) {
        neg = true;
        i = 1;
    }
    int n = 0;
    std::map<std::string, int> digits = std::map<std::string, int>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
    while ((i < str.size())) {
        n = ((n * 10) + digits[std::string(1, str[i])]);
        i = (i + 1);
    }
    if (neg) {
        n = -n;
    }
    return n;
}

int ord(std::string ch) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    int idx = indexOf(upper, ch);
    if ((idx >= 0)) {
        return (65 + idx);
    }
    idx = indexOf(lower, ch);
    if ((idx >= 0)) {
        return (97 + idx);
    }
    if (((ch >= std::string("0")) && (ch <= std::string("9")))) {
        return (48 + parseIntStr(ch));
    }
    if ((ch == std::string("+"))) {
        return 43;
    }
    if ((ch == std::string("/"))) {
        return 47;
    }
    if ((ch == std::string(" "))) {
        return 32;
    }
    if ((ch == std::string("="))) {
        return 61;
    }
    return 0;
}

std::string chr(int n) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    if (((n >= 65) && (n < 91))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - 65), (n - 64) - (n - 65)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - 65), __v.begin()+(n - 64)); })(upper);
    }
    if (((n >= 97) && (n < 123))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - 97), (n - 96) - (n - 97)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - 97), __v.begin()+(n - 96)); })(lower);
    }
    if (((n >= 48) && (n < 58))) {
        std::string digits = std::string("0123456789");
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - 48), (n - 47) - (n - 48)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - 48), __v.begin()+(n - 47)); })(digits);
    }
    if ((n == 43)) {
        return std::string("+");
    }
    if ((n == 47)) {
        return std::string("/");
    }
    if ((n == 32)) {
        return std::string(" ");
    }
    if ((n == 61)) {
        return std::string("=");
    }
    return std::string("?");
}

std::string toBinary(int n, int bits) {
    std::string b = std::string("");
    int val = n;
    int i = 0;
    while ((i < bits)) {
        b = (([&]{ std::ostringstream ss; ss << std::boolalpha << (val % 2); return ss.str(); }()) + b);
        val = (int)((val / 2));
        i = (i + 1);
    }
    return b;
}

int binToInt(std::string bits) {
    int n = 0;
    int i = 0;
    while ((i < bits.size())) {
        n = ((n * 2) + parseIntStr(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 1)); })(bits)));
        i = (i + 1);
    }
    return n;
}

std::string base64Encode(std::string text) {
    std::string alphabet = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
    std::string bin = std::string("");
    for (auto ch : text) {
        bin = (bin + toBinary(ord(std::string(1, ch)), 8));
    }
    while (((bin.size() % 6) != 0)) {
        bin = (bin + std::string("0"));
    }
    std::string out = std::string("");
    int i = 0;
    while ((i < bin.size())) {
        std::string chunk = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 6) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 6)); })(bin);
        int val = binToInt(chunk);
        out = (out + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(val, (val + 1) - val); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+val, __v.begin()+(val + 1)); })(alphabet));
        i = (i + 6);
    }
    int pad = ((3 - (text.size() % 3)) % 3);
    if ((pad == 1)) {
        out = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, (out.size() - 1) - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+(out.size() - 1)); })(out) + std::string("="));
    }
    if ((pad == 2)) {
        out = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, (out.size() - 2) - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+(out.size() - 2)); })(out) + std::string("=="));
    }
    return out;
}

std::string base64Decode(std::string enc) {
    std::string alphabet = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
    std::string bin = std::string("");
    int i = 0;
    while ((i < enc.size())) {
        std::string ch = std::string(1, enc[i]);
        if ((ch == std::string("="))) {
            break;
        }
        int idx = indexOf(alphabet, ch);
        bin = (bin + toBinary(idx, 6));
        i = (i + 1);
    }
    std::string out = std::string("");
    i = 0;
    while (((i + 8) <= bin.size())) {
        std::string chunk = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 8) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 8)); })(bin);
        int val = binToInt(chunk);
        out = (out + chr(val));
        i = (i + 8);
    }
    return out;
}

int main() {
    std::cout << (std::string("Original : ") + msg);
    std::cout << std::endl;
    std::cout << (std::string("\nEncoded  : ") + enc);
    std::cout << std::endl;
    std::cout << (std::string("\nDecoded  : ") + dec);
    std::cout << std::endl;
    return 0;
}
