// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:10:20 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t indexOf(std::string s, std::string ch);
int64_t parseIntStr(std::string str);
int64_t ord(std::string ch);
std::string chr(int64_t n);
std::string toBinary(int64_t n, int64_t bits);
int64_t binToInt(std::string bits);
std::string base64Encode(std::string text);
std::string base64Decode(std::string enc);
int main();

std::string msg = std::string("Rosetta Code Base64 decode data task");
std::string enc = base64Encode(msg);
std::string dec = base64Decode(enc);

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((std::string(1, s[i]) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

int64_t parseIntStr(std::string str) {
    int64_t i = int64_t(0);
    bool neg = false;
    if (((str.size() > int64_t(0)) && (std::string(1, str[int64_t(0)]) == std::string("-")))) {
        neg = true;
        i = int64_t(1);
    }
    int64_t n = int64_t(0);
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", int64_t(0)}, {"1", int64_t(1)}, {"2", int64_t(2)}, {"3", int64_t(3)}, {"4", int64_t(4)}, {"5", int64_t(5)}, {"6", int64_t(6)}, {"7", int64_t(7)}, {"8", int64_t(8)}, {"9", int64_t(9)}};
    while ((i < str.size())) {
        n = ((n * int64_t(10)) + digits.at(std::string(1, str[i])));
        i = (i + int64_t(1));
    }
    if (neg) {
        n = -n;
    }
    return n;
}

int64_t ord(std::string ch) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    int64_t idx = _index_of(upper, ch);
    if ((idx >= int64_t(0))) {
        return (int64_t(65) + idx);
    }
    idx = _index_of(lower, ch);
    if ((idx >= int64_t(0))) {
        return (int64_t(97) + idx);
    }
    if (((ch >= std::string("0")) && (ch <= std::string("9")))) {
        return (int64_t(48) + _parse_int_str(ch, int64_t(10)));
    }
    if ((ch == std::string("+"))) {
        return int64_t(43);
    }
    if ((ch == std::string("/"))) {
        return int64_t(47);
    }
    if ((ch == std::string(" "))) {
        return int64_t(32);
    }
    if ((ch == std::string("="))) {
        return int64_t(61);
    }
    return int64_t(0);
}

std::string chr(int64_t n) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    if (((n >= int64_t(65)) && (n < int64_t(91)))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - int64_t(65)), (n - int64_t(64)) - (n - int64_t(65))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - int64_t(65)), __v.begin()+(n - int64_t(64))); })(upper);
    }
    if (((n >= int64_t(97)) && (n < int64_t(123)))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - int64_t(97)), (n - int64_t(96)) - (n - int64_t(97))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - int64_t(97)), __v.begin()+(n - int64_t(96))); })(lower);
    }
    if (((n >= int64_t(48)) && (n < int64_t(58)))) {
        std::string digits = std::string("0123456789");
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - int64_t(48)), (n - int64_t(47)) - (n - int64_t(48))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - int64_t(48)), __v.begin()+(n - int64_t(47))); })(digits);
    }
    if ((n == int64_t(43))) {
        return std::string("+");
    }
    if ((n == int64_t(47))) {
        return std::string("/");
    }
    if ((n == int64_t(32))) {
        return std::string(" ");
    }
    if ((n == int64_t(61))) {
        return std::string("=");
    }
    return std::string("?");
}

std::string toBinary(int64_t n, int64_t bits) {
    std::string b = std::string("");
    int64_t val = n;
    int64_t i = int64_t(0);
    while ((i < bits)) {
        b = (([&]{ std::ostringstream ss; ss << std::boolalpha << (val % int64_t(2)); return ss.str(); }()) + b);
        val = (int64_t)((val / int64_t(2)));
        i = (i + int64_t(1));
    }
    return b;
}

int64_t binToInt(std::string bits) {
    int64_t n = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < bits.size())) {
        n = ((n * int64_t(2)) + _parse_int_str(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(bits), int64_t(10)));
        i = (i + int64_t(1));
    }
    return n;
}

std::string base64Encode(std::string text) {
    std::string alphabet = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
    std::string bin = std::string("");
    for (auto ch : text) {
        bin = (bin + toBinary(ord(std::string(1, ch)), int64_t(8)));
    }
    while (((bin.size() % int64_t(6)) != int64_t(0))) {
        bin = (bin + std::string("0"));
    }
    std::string out = std::string("");
    int64_t i = int64_t(0);
    while ((i < bin.size())) {
        std::string chunk = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(6)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(6))); })(bin);
        int64_t val = binToInt(chunk);
        out = (out + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(val, (val + int64_t(1)) - val); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+val, __v.begin()+(val + int64_t(1))); })(alphabet));
        i = (i + int64_t(6));
    }
    int64_t pad = ((int64_t(3) - (text.size() % int64_t(3))) % int64_t(3));
    if ((pad == int64_t(1))) {
        out = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (out.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(out.size() - int64_t(1))); })(out) + std::string("="));
    }
    if ((pad == int64_t(2))) {
        out = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (out.size() - int64_t(2)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(out.size() - int64_t(2))); })(out) + std::string("=="));
    }
    return out;
}

std::string base64Decode(std::string enc) {
    std::string alphabet = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
    std::string bin = std::string("");
    int64_t i = int64_t(0);
    while ((i < enc.size())) {
        std::string ch = std::string(1, enc[i]);
        if ((ch == std::string("="))) {
            break;
        }
        int64_t idx = _index_of(alphabet, ch);
        bin = (bin + toBinary(idx, int64_t(6)));
        i = (i + int64_t(1));
    }
    std::string out = std::string("");
    i = int64_t(0);
    while (((i + int64_t(8)) <= bin.size())) {
        std::string chunk = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(8)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(8))); })(bin);
        int64_t val = binToInt(chunk);
        out = (out + chr(val));
        i = (i + int64_t(8));
    }
    return out;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << (std::string("Original : ") + msg);
        std::cout << std::endl;
        std::cout << (std::string("\nEncoded  : ") + enc);
        std::cout << std::endl;
        std::cout << (std::string("\nDecoded  : ") + dec);
        std::cout << std::endl;
    }
    return 0;
}
