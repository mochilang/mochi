// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:45:48 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double sqrtApprox(double x);
std::map<std::string, std::any> makeSym(int64_t order, const std::vector<double>& elements);
std::vector<std::vector<double>> unpackSym(const std::map<std::string, std::any>& m);
void printMat(const std::vector<std::vector<double>>& m);
void printSym(const std::map<std::string, std::any>& m);
void printLower(const std::map<std::string, std::any>& m);
std::map<std::string, std::any> choleskyLower(const std::map<std::string, std::any>& a);
void demo(const std::map<std::string, std::any>& a);
int main();

double sqrtApprox(double x) {
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

std::map<std::string, std::any> makeSym(int64_t order, const std::vector<double>& elements) {
    return std::map<std::string, std::any>{{"order", std::any(order)}, {"ele", std::any(elements)}};
}

std::vector<std::vector<double>> unpackSym(const std::map<std::string, std::any>& m) {
    std::any n = m.at(std::string("order"));
    std::any ele = m.at(std::string("ele"));
    std::vector<std::vector<double>> mat = {};
    int64_t idx = int64_t(0);
    int64_t r = int64_t(0);
    while ((r < any_to_double(n))) {
        std::vector<double> row = {};
        int64_t c = int64_t(0);
        while ((c <= r)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((double)std::any_cast<int64_t>(std::any_cast<std::vector<int64_t>>(ele)[idx])); return __tmp; }());
            idx = (idx + int64_t(1));
            c = (c + int64_t(1));
        }
        while ((c < any_to_double(n))) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            c = (c + int64_t(1));
        }
        mat = ([&]{ auto __tmp = mat; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    r = int64_t(0);
    while ((r < any_to_double(n))) {
        int64_t c = (r + int64_t(1));
        while ((c < any_to_double(n))) {
            mat[r][c] = mat[c][r];
            c = (c + int64_t(1));
        }
        r = (r + int64_t(1));
    }
    return mat;
}

void printMat(const std::vector<std::vector<double>>& m) {
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        std::string line = std::string("");
        int64_t j = int64_t(0);
        while ((j < m[i].size())) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << m[i][j]; return ss.str(); }()));
            if ((j < (m[i].size() - int64_t(1)))) {
                line = (line + std::string(" "));
            }
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

void printSym(const std::map<std::string, std::any>& m) {
    printMat(unpackSym(m));
}

void printLower(const std::map<std::string, std::any>& m) {
    std::any n = m.at(std::string("order"));
    std::any ele = m.at(std::string("ele"));
    std::vector<std::vector<double>> mat = {};
    int64_t idx = int64_t(0);
    int64_t r = int64_t(0);
    while ((r < any_to_double(n))) {
        std::vector<double> row = {};
        int64_t c = int64_t(0);
        while ((c <= r)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((double)std::any_cast<int64_t>(std::any_cast<std::vector<int64_t>>(ele)[idx])); return __tmp; }());
            idx = (idx + int64_t(1));
            c = (c + int64_t(1));
        }
        while ((c < any_to_double(n))) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            c = (c + int64_t(1));
        }
        mat = ([&]{ auto __tmp = mat; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    printMat(mat);
}

std::map<std::string, std::any> choleskyLower(const std::map<std::string, std::any>& a) {
    std::any n = a.at(std::string("order"));
    std::any ae = a.at(std::string("ele"));
    std::vector<double> le = {};
    int64_t idx = int64_t(0);
    while ((idx < std::any_cast<std::string>(ae).size())) {
        le = ([&]{ auto __tmp = le; __tmp.push_back(0.0); return __tmp; }());
        idx = (idx + int64_t(1));
    }
    int64_t row = int64_t(1);
    int64_t col = int64_t(1);
    int64_t dr = int64_t(0);
    int64_t dc = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < std::any_cast<std::string>(ae).size())) {
        std::any e = std::any_cast<int64_t>(std::any_cast<std::vector<int64_t>>(ae)[i]);
        if ((i < dr)) {
            double d = ((double)((std::any_cast<double>(e) - le[i])) / (le[dc]));
            le[i] = d;
            int64_t ci = col;
            int64_t cx = dc;
            int64_t j = (i + int64_t(1));
            while ((j <= dr)) {
                cx = (cx + ci);
                ci = (ci + int64_t(1));
                le[j] = (le[j] + (d * le[cx]));
                j = (j + int64_t(1));
            }
            col = (col + int64_t(1));
            dc = (dc + col);
        } else {
            le[i] = sqrtApprox((std::any_cast<double>(e) - le[i]));
            row = (row + int64_t(1));
            dr = (dr + row);
            col = int64_t(1);
            dc = int64_t(0);
        }
        i = (i + int64_t(1));
    }
    return std::map<std::string, std::any>{{"order", std::any(n)}, {"ele", std::any(le)}};
}

void demo(const std::map<std::string, std::any>& a) {
    std::cout << std::string("A:");
    std::cout << std::endl;
    printSym(a);
    std::cout << std::string("L:");
    std::cout << std::endl;
    std::map<std::string, std::any> l = choleskyLower(a);
    printLower(l);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        demo(makeSym(int64_t(3), std::vector<double>{25.0, 15.0, 18.0, -5.0, 0.0, 11.0}));
        demo(makeSym(int64_t(4), std::vector<double>{18.0, 22.0, 70.0, 54.0, 86.0, 174.0, 42.0, 62.0, 134.0, 106.0}));
    }
    return 0;
}
