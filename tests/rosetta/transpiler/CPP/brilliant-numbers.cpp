// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:11:04 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <type_traits>
#include <any>
#include <map>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> primesUpTo(int64_t n);
std::vector<int64_t> sortInts(const std::vector<int64_t>& xs);
std::string commatize(int64_t n);
std::map<std::string, std::any> getBrilliant(int64_t digits, int64_t limit, bool countOnly);
int main();

std::vector<int64_t> primes = primesUpTo(3200000);

std::vector<int64_t> primesUpTo(int64_t n) {
    std::vector<bool> sieve = {};
    int64_t i = 0;
    while ((i <= n)) {
        sieve = ([&]{ auto __tmp = sieve; __tmp.push_back(true); return __tmp; }());
        i = (i + 1);
    }
    int64_t p = 2;
    while (((p * p) <= n)) {
        if (sieve[p]) {
            int64_t m = (p * p);
            while ((m <= n)) {
                sieve[m] = false;
                m = (m + p);
            }
        }
        p = (p + 1);
    }
    std::vector<int64_t> res = {};
    int64_t x = 2;
    while ((x <= n)) {
        if (sieve[x]) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(x); return __tmp; }());
        }
        x = (x + 1);
    }
    return res;
}

std::vector<int64_t> sortInts(const std::vector<int64_t>& xs) {
    std::vector<int64_t> res = {};
    std::vector<int64_t> tmp = xs;
    while ((tmp.size() > 0)) {
        int64_t min = tmp[0];
        int64_t idx = 0;
        int64_t i = 1;
        while ((i < tmp.size())) {
            if ((tmp[i] < min)) {
                min = tmp[i];
                idx = i;
            }
            i = (i + 1);
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(min); return __tmp; }());
        std::vector<int64_t> out = {};
        int64_t j = 0;
        while ((j < tmp.size())) {
            if ((j != idx)) {
                out = ([&]{ auto __tmp = out; __tmp.push_back(tmp[j]); return __tmp; }());
            }
            j = (j + 1);
        }
        tmp = out;
    }
    return res;
}

std::string commatize(int64_t n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    int64_t i = (s.size() - 3);
    while ((i >= 1)) {
        s = ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, i - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+i); })(s) + std::string(",")) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, s.size() - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+s.size()); })(s));
        i = (i - 3);
    }
    return s;
}

std::map<std::string, std::any> getBrilliant(int64_t digits, int64_t limit, bool countOnly) {
    std::vector<int64_t> brilliant = {};
    int64_t count = 0;
    int64_t pow = 1;
    int64_t next = 999999999999999;
    int64_t k = 1;
    while ((k <= digits)) {
        std::vector<int64_t> s = {};
        for (int64_t p : primes) {
            if ((p >= (pow * 10))) {
                break;
            }
            if ((p > pow)) {
                s = ([&]{ auto __tmp = s; __tmp.push_back(p); return __tmp; }());
            }
        }
        int64_t i = 0;
        while ((i < s.size())) {
            int64_t j = i;
            while ((j < s.size())) {
                int64_t prod = (s[i] * s[j]);
                if ((prod < limit)) {
                    if (countOnly) {
                        count = (count + 1);
                    } else {
                        brilliant = ([&]{ auto __tmp = brilliant; __tmp.push_back(prod); return __tmp; }());
                    }
                } else {
                    if ((prod < next)) {
                        next = prod;
                    }
                    break;
                }
                j = (j + 1);
            }
            i = (i + 1);
        }
        pow = (pow * 10);
        k = (k + 1);
    }
    if (countOnly) {
        return std::map<std::string, std::any>{{"bc", std::any(count)}, {"next", std::any(next)}};
    }
    return std::map<std::string, std::any>{{"bc", std::any(brilliant)}, {"next", std::any(next)}};
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::cout << std::string("First 100 brilliant numbers:");
        std::cout << std::endl;
        std::map<std::string, std::any> r = getBrilliant(2, 10000, false);
        std::vector<int64_t> br = sortInts(std::any_cast<std::vector<int64_t>>(r[std::string("bc")]));
        br = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 100 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+100); })(br);
        int64_t i = 0;
        while ((i < br.size())) {
            std::cout << (([&]{ std::string __s = ([&]{ std::ostringstream ss; ss << std::boolalpha << br[i]; return ss.str(); }()); while(__s.size() < 4) __s = std::string(" ") + __s; return __s; }()) + std::string(" "));
            std::cout << " ";
            std::cout << (false ? "true" : "false");
            std::cout << std::endl;
            if ((((i + 1) % 10) == 0)) {
                std::cout << std::string("");
                std::cout << " ";
                std::cout << (true ? "true" : "false");
                std::cout << std::endl;
            }
            i = (i + 1);
        }
        std::cout << std::string("");
        std::cout << " ";
        std::cout << (true ? "true" : "false");
        std::cout << std::endl;
        int64_t k = 1;
        while ((k <= 13)) {
            auto limit = pow(10, k);
            std::map<std::string, std::any> r2 = getBrilliant(k, (int64_t)(limit), true);
            std::any total = r2[std::string("bc")];
            std::any next = r2[std::string("next")];
            std::string climit = commatize((int64_t)(limit));
            std::string ctotal = commatize((int64_t)((std::any_cast<double>(total) + 1)));
            std::string cnext = commatize(std::any_cast<int64_t>(next));
            std::cout << (((((std::string("First >= ") + ([&]{ std::string __s = climit; while(__s.size() < 18) __s = std::string(" ") + __s; return __s; }())) + std::string(" is ")) + ([&]{ std::string __s = ctotal; while(__s.size() < 14) __s = std::string(" ") + __s; return __s; }())) + std::string(" in the series: ")) + ([&]{ std::string __s = cnext; while(__s.size() < 18) __s = std::string(" ") + __s; return __s; }()));
            std::cout << std::endl;
            k = (k + 1);
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
