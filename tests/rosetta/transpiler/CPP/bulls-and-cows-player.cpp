// Generated by Mochi transpiler v0.10.41 on 2025-07-27 11:44:49 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t indexOf(std::string s, std::string ch);
std::vector<std::string> fields(std::string s);
std::vector<std::string> makePatterns();
int main();

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = 0;
    while ((i < s.size())) {
        if ((s.substr(i, (i + 1) - i) == ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

std::vector<std::string> fields(std::string s) {
    std::vector<std::string> words = {};
    std::string cur = std::string("");
    int64_t i = 0;
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + 1) - i);
        if ((((ch == std::string(" ")) || (ch == std::string("\t"))) || (ch == std::string("\n")))) {
            if ((cur.size() > 0)) {
                words = ([&]{ auto __tmp = words; __tmp.push_back(cur); return __tmp; }());
                cur = std::string("");
            }
        } else {
            cur = (cur + ch);
        }
        i = (i + 1);
    }
    if ((cur.size() > 0)) {
        words = ([&]{ auto __tmp = words; __tmp.push_back(cur); return __tmp; }());
    }
    return words;
}

std::vector<std::string> makePatterns() {
    std::vector<std::string> digits = std::vector<std::string>{std::string("1"), std::string("2"), std::string("3"), std::string("4"), std::string("5"), std::string("6"), std::string("7"), std::string("8"), std::string("9")};
    std::vector<std::string> pats = {};
    int64_t i = 0;
    while ((i < digits.size())) {
        int64_t j = 0;
        while ((j < digits.size())) {
            if ((j != i)) {
                int64_t k = 0;
                while ((k < digits.size())) {
                    if (((k != i) && (k != j))) {
                        int64_t l = 0;
                        while ((l < digits.size())) {
                            if ((((l != i) && (l != j)) && (l != k))) {
                                pats = ([&]{ auto __tmp = pats; __tmp.push_back((((digits[i] + digits[j]) + digits[k]) + digits[l])); return __tmp; }());
                            }
                            l = (l + 1);
                        }
                    }
                    k = (k + 1);
                }
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return pats;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << (((((std::string("Cows and bulls/player\n") + std::string("You think of four digit number of unique digits in the range 1 to 9.\n")) + std::string("I guess.  You score my guess:\n")) + std::string("    A correct digit but not in the correct place is a cow.\n")) + std::string("    A correct digit in the correct place is a bull.\n")) + std::string("You give my score as two numbers separated with a space."));
        std::cout << std::endl;
        std::vector<std::string> patterns = makePatterns();
        while (true) {
            if ((patterns.size() == 0)) {
                std::cout << std::string("Oops, check scoring.");
                std::cout << std::endl;
                return 0;
            }
            std::string guess = patterns[0];
            patterns = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(1, patterns.size() - 1); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+1, __v.begin()+patterns.size()); })(patterns);
            int64_t cows = 0;
            int64_t bulls = 0;
            while (true) {
                std::cout << ((std::string("My guess: ") + guess) + std::string(".  Score? (c b) "));
                std::cout << std::endl;
                std::string line = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
                std::vector<std::string> toks = fields(line);
                if ((toks.size() == 2)) {
                    int64_t c = _parse_int_str(toks[0], 10);
                    int64_t b = _parse_int_str(toks[1], 10);
                    if ((((((c >= 0) && (c <= 4)) && (b >= 0)) && (b <= 4)) && ((c + b) <= 4))) {
                        cows = c;
                        bulls = b;
                        break;
                    }
                }
                std::cout << std::string("Score guess as two numbers: cows bulls");
                std::cout << std::endl;
            }
            if ((bulls == 4)) {
                std::cout << std::string("I did it. :)");
                std::cout << std::endl;
                return 0;
            }
            std::vector<std::string> next = {};
            int64_t idx = 0;
            while ((idx < patterns.size())) {
                std::string pat = patterns[idx];
                int64_t c = 0;
                int64_t b = 0;
                int64_t i = 0;
                while ((i < 4)) {
                    std::string cg = guess.substr(i, (i + 1) - i);
                    std::string cp = pat.substr(i, (i + 1) - i);
                    if ((cg == cp)) {
                        b = (b + 1);
                    } else                     if ((_index_of(pat, cg) >= 0)) {
                        c = (c + 1);
                    }

                    i = (i + 1);
                }
                if (((c == cows) && (b == bulls))) {
                    next = ([&]{ auto __tmp = next; __tmp.push_back(pat); return __tmp; }());
                }
                idx = (idx + 1);
            }
            patterns = next;
        }
    }
    return 0;
}
