// Generated by Mochi transpiler v0.10.42 on 2025-07-27 19:10:55 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t mod(int64_t n, int64_t m);
bool isPrime(int64_t n);
std::string pad(int64_t n, int64_t width);
void carmichael(int64_t p1);
int main();

int64_t mod(int64_t n, int64_t m) {
    return (((n % m) + m) % m);
}

bool isPrime(int64_t n) {
    if ((n < int64_t(2))) {
        return false;
    }
    if (((n % int64_t(2)) == int64_t(0))) {
        return (n == int64_t(2));
    }
    if (((n % int64_t(3)) == int64_t(0))) {
        return (n == int64_t(3));
    }
    int64_t d = int64_t(5);
    while (((d * d) <= n)) {
        if (((n % d) == int64_t(0))) {
            return false;
        }
        d = (d + int64_t(2));
        if (((n % d) == int64_t(0))) {
            return false;
        }
        d = (d + int64_t(4));
    }
    return true;
}

std::string pad(int64_t n, int64_t width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

void carmichael(int64_t p1) {
    for (int h3 = int64_t(2); h3 < p1; h3++ ) {
        for (int d = int64_t(1); d < (h3 + p1); d++ ) {
            if ((((((h3 + p1) * (p1 - int64_t(1))) % d) == int64_t(0)) && (mod((-p1 * p1), (int64_t)(h3)) == (d % h3)))) {
                int64_t p2 = (int64_t(1) + (((p1 - int64_t(1)) * (h3 + p1)) / d));
                if (!isPrime(p2)) {
                    continue;
                }
                int64_t p3 = (int64_t(1) + ((p1 * p2) / h3));
                if (!isPrime(p3)) {
                    continue;
                }
                if ((((p2 * p3) % (p1 - int64_t(1))) != int64_t(1))) {
                    continue;
                }
                int64_t c = ((p1 * p2) * p3);
                std::cout << ((((((pad(p1, int64_t(2)) + std::string("   ")) + pad(p2, int64_t(4))) + std::string("   ")) + pad(p3, int64_t(5))) + std::string("     ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << c; return ss.str(); }()));
                std::cout << std::endl;
            }
        }
    }
}

int main() {
    std::cout << std::string("The following are Carmichael munbers for p1 <= 61:\n");
    std::cout << std::endl;
    std::cout << std::string("p1     p2      p3     product");
    std::cout << std::endl;
    std::cout << std::string("==     ==      ==     =======");
    std::cout << std::endl;
    for (int p1 = int64_t(2); p1 < int64_t(62); p1++ ) {
        if (isPrime((int64_t)(p1))) {
            carmichael((int64_t)(p1));
        }
    }
    return 0;
}
