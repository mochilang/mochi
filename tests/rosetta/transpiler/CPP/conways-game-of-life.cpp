// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:45:59 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Field;
struct Life;

std::ostream& operator<<(std::ostream&, const Field&);
std::ostream& operator<<(std::ostream&, const Life&);


struct Field {
    std::vector<std::vector<bool>> s;
    int64_t w;
    int64_t h;
    auto operator<=>(const Field&) const = default;
};

struct Life {
    Field a;
    Field b;
    int64_t w;
    int64_t h;
    auto operator<=>(const Life&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Field& v) {
    os << '{' << "'s': "<< "["; for(size_t i=0;i<v.s.size();++i){ if(i>0) os << ", "; os << v.s[i]; } os << "]"
 << ", " << "'w': "<< v.w
 << ", " << "'h': "<< v.h
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Life& v) {
    os << '{' << "'a': "<< v.a
 << ", " << "'b': "<< v.b
 << ", " << "'w': "<< v.w
 << ", " << "'h': "<< v.h
 << '}';
    return os;
}

int64_t randN(int64_t n);
Field newField(int64_t w, int64_t h);
void setCell(Field f, int64_t x, int64_t y, bool b);
bool state(const Field& f, int64_t x, int64_t y);
bool nextState(const Field& f, int64_t x, int64_t y);
Life newLife(int64_t w, int64_t h);
void step(Life l);
std::string lifeString(const Life& l);
int main();

int64_t seed = int64_t(1);

int64_t randN(int64_t n) {
    seed = (((seed * int64_t(1664525)) + int64_t(1013904223)) % int64_t(2147483647));
    return (seed % n);
}

Field newField(int64_t w, int64_t h) {
    std::vector<std::vector<bool>> rows = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<bool> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(false); return __tmp; }());
            x = (x + int64_t(1));
        }
        rows = ([&]{ auto __tmp = rows; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return Field{.s = rows, .w = w, .h = h};
}

void setCell(Field f, int64_t x, int64_t y, bool b) {
    std::vector<std::vector<bool>> rows = f.s;
    std::vector<bool> row = rows[y];
    row[x] = b;
    rows[y] = row;
    f.s = rows;
}

bool state(const Field& f, int64_t x, int64_t y) {
    while ((y < int64_t(0))) {
        y = (y + f.h);
    }
    while ((x < int64_t(0))) {
        x = (x + f.w);
    }
    return f.s[(y % f.h)][(x % f.w)];
}

bool nextState(const Field& f, int64_t x, int64_t y) {
    int64_t count = int64_t(0);
    int64_t dy = -int64_t(1);
    while ((dy <= int64_t(1))) {
        int64_t dx = -int64_t(1);
        while ((dx <= int64_t(1))) {
            if ((!((dx == int64_t(0)) && (dy == int64_t(0))) && state(f, (x + dx), (y + dy)))) {
                count = (count + int64_t(1));
            }
            dx = (dx + int64_t(1));
        }
        dy = (dy + int64_t(1));
    }
    return ((count == int64_t(3)) || ((count == int64_t(2)) && state(f, x, y)));
}

Life newLife(int64_t w, int64_t h) {
    Field a = newField(w, h);
    int64_t i = int64_t(0);
    while ((i < ((w * h) / int64_t(2)))) {
        setCell(a, randN(w), randN(h), true);
        i = (i + int64_t(1));
    }
    return Life{.a = a, .b = newField(w, h), .w = w, .h = h};
}

void step(Life l) {
    int64_t y = int64_t(0);
    while ((y < l.h)) {
        int64_t x = int64_t(0);
        while ((x < l.w)) {
            setCell(l.b, x, y, nextState(l.a, x, y));
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    Field tmp = l.a;
    l.a = l.b;
    l.b = tmp;
}

std::string lifeString(const Life& l) {
    std::string out = std::string("");
    int64_t y = int64_t(0);
    while ((y < l.h)) {
        int64_t x = int64_t(0);
        while ((x < l.w)) {
            if (state(l.a, x, y)) {
                out = (out + std::string("*"));
            } else {
                out = (out + std::string(" "));
            }
            x = (x + int64_t(1));
        }
        out = (out + std::string("\n"));
        y = (y + int64_t(1));
    }
    return out;
}

int main() {
    Life l = newLife(int64_t(80), int64_t(15));
    int64_t i = int64_t(0);
    while ((i < int64_t(300))) {
        step(l);
        std::cout << std::string("\f");
        std::cout << std::endl;
        std::cout << lifeString(l);
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    return 0;
}
