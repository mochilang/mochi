// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:43:59 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t modPow(int64_t base, int64_t exp, int64_t m);
bool isPrime(int64_t n);
std::string commatize(int64_t n);
std::string pad(std::string s, int64_t width);
std::string join(const std::vector<std::string>& xs, std::string sep);
std::string formatRow(const std::vector<std::string>& row);
int main();

int64_t modPow(int64_t base, int64_t exp, int64_t m) {
    int64_t result = (int64_t(1) % m);
    int64_t b = (base % m);
    int64_t e = exp;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            result = ((result * b) % m);
        }
        b = ((b * b) % m);
        e = (int64_t)((e / int64_t(2)));
    }
    return result;
}

bool isPrime(int64_t n) {
    if ((n < int64_t(2))) {
        return false;
    }
    for (int64_t p : std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(5), int64_t(7), int64_t(11), int64_t(13), int64_t(17), int64_t(19), int64_t(23), int64_t(29)}) {
        if (((n % p) == int64_t(0))) {
            return (n == p);
        }
    }
    int64_t d = (n - int64_t(1));
    int64_t s = int64_t(0);
    while (((d % int64_t(2)) == int64_t(0))) {
        d = (d / int64_t(2));
        s = (s + int64_t(1));
    }
    for (int64_t a : std::vector<int64_t>{int64_t(2), int64_t(325), int64_t(9375), int64_t(28178), int64_t(450775), int64_t(9780504), int64_t(1795265022)}) {
        if (((a % n) == int64_t(0))) {
            return true;
        }
        int64_t x = modPow(a, d, n);
        if (((x == int64_t(1)) || (x == (n - int64_t(1))))) {
            continue;
        }
        int64_t r = int64_t(1);
        bool passed = false;
        while ((r < s)) {
            x = ((x * x) % n);
            if ((x == (n - int64_t(1)))) {
                passed = true;
                break;
            }
            r = (r + int64_t(1));
        }
        if (!passed) {
            return false;
        }
    }
    return true;
}

std::string commatize(int64_t n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    int64_t i = (s.size() - int64_t(3));
    while ((i > int64_t(0))) {
        s = ((s.substr(int64_t(0), i - int64_t(0)) + std::string(",")) + s.substr(i, s.size() - i));
        i = (i - int64_t(3));
    }
    return s;
}

std::string pad(std::string s, int64_t width) {
    std::string out = s;
    while ((out.size() < width)) {
        out = (std::string(" ") + out);
    }
    return out;
}

std::string join(const std::vector<std::string>& xs, std::string sep) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((i > int64_t(0))) {
            res = (res + sep);
        }
        res = (res + xs[i]);
        i = (i + int64_t(1));
    }
    return res;
}

std::string formatRow(const std::vector<std::string>& row) {
    std::vector<std::string> padded = {};
    int64_t i = int64_t(0);
    while ((i < row.size())) {
        padded = ([&]{ auto __tmp = padded; __tmp.push_back(pad(row[i], int64_t(9))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return ((std::string("[") + join(padded, std::string(" "))) + std::string("]"));
}

int main() {
    std::vector<std::string> cubans = {};
    int64_t cube1 = int64_t(1);
    int64_t count = int64_t(0);
    int64_t cube100k = int64_t(0);
    int64_t i = int64_t(1);
    while (true) {
        int64_t j = (i + int64_t(1));
        int64_t cube2 = ((j * j) * j);
        int64_t diff = (cube2 - cube1);
        if (isPrime(diff)) {
            if ((count < int64_t(200))) {
                cubans = ([&]{ auto __tmp = cubans; __tmp.push_back(commatize(diff)); return __tmp; }());
            }
            count = (count + int64_t(1));
            if ((count == int64_t(100000))) {
                cube100k = diff;
                break;
            }
        }
        cube1 = cube2;
        i = (i + int64_t(1));
    }
    std::cout << std::string("The first 200 cuban primes are:-");
    std::cout << std::endl;
    int64_t row = int64_t(0);
    while ((row < int64_t(20))) {
        std::vector<std::string> slice = {};
        int64_t k = int64_t(0);
        while ((k < int64_t(10))) {
            slice = ([&]{ auto __tmp = slice; __tmp.push_back(cubans[((row * int64_t(10)) + k)]); return __tmp; }());
            k = (k + int64_t(1));
        }
        std::cout << formatRow(slice);
        std::cout << std::endl;
        row = (row + int64_t(1));
    }
    std::cout << (std::string("\nThe 100,000th cuban prime is ") + commatize(cube100k));
    std::cout << std::endl;
    return 0;
}
