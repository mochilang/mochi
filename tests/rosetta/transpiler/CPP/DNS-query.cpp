// Generated by Mochi transpiler v0.10.39 on 2025-07-24 15:15:35 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <sstream>
#include <iomanip>
#include <optional>
#include <vector>
#include <netdb.h>
#include <arpa/inet.h>
#include <cstring>
#include <map>


static std::vector<std::any> _lookup_host(const std::string& host) {
    std::vector<std::any> res;
    std::vector<std::string> ips;
    addrinfo hints{}; memset(&hints, 0, sizeof(hints)); hints.ai_family = AF_INET;
    addrinfo* info=nullptr;
    int rc = getaddrinfo(host.c_str(), nullptr, &hints, &info);
    if(rc != 0) {
        res.push_back(ips);
        res.push_back(std::string(gai_strerror(rc)));
        return res;
    }
    for(auto p=info; p; p=p->ai_next){
        char buf[INET_ADDRSTRLEN];
        auto* addr = reinterpret_cast<sockaddr_in*>(p->ai_addr);
        if(inet_ntop(AF_INET, &addr->sin_addr, buf, sizeof(buf))) ips.push_back(std::string(buf));
    }
    freeaddrinfo(info);
    res.push_back(ips);
    res.push_back(std::any());
    return res;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}

int main();

std::vector<std::any> res = _lookup_host(std::string("www.kame.net"));
std::any addrs = res[0];
std::any err = res[1];

int main() {
    if ((!err.has_value())) {
        std::cout << ([&]{ std::ostringstream ss; any_to_stream(ss, addrs); return ss.str(); }());
        std::cout << std::endl;
    } else {
        any_to_stream(std::cout, err);
        std::cout << std::endl;
    }
    return 0;
}
