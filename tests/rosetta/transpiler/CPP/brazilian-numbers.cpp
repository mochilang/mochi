// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:17:54 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool sameDigits(int64_t n, int64_t b);
bool isBrazilian(int64_t n);
bool isPrime(int64_t n);
int main();

bool sameDigits(int64_t n, int64_t b) {
    int64_t f = (n % b);
    n = (int64_t)((n / b));
    while ((n > 0)) {
        if (((n % b) != f)) {
            return false;
        }
        n = (int64_t)((n / b));
    }
    return true;
}

bool isBrazilian(int64_t n) {
    if ((n < 7)) {
        return false;
    }
    if ((((n % 2) == 0) && (n >= 8))) {
        return true;
    }
    int64_t b = 2;
    while ((b < (n - 1))) {
        if (sameDigits(n, b)) {
            return true;
        }
        b = (b + 1);
    }
    return false;
}

bool isPrime(int64_t n) {
    if ((n < 2)) {
        return false;
    }
    if (((n % 2) == 0)) {
        return (n == 2);
    }
    if (((n % 3) == 0)) {
        return (n == 3);
    }
    int64_t d = 5;
    while (((d * d) <= n)) {
        if (((n % d) == 0)) {
            return false;
        }
        d = (d + 2);
        if (((n % d) == 0)) {
            return false;
        }
        d = (d + 4);
    }
    return true;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<std::string> kinds = std::vector<std::string>{std::string(" "), std::string(" odd "), std::string(" prime ")};
        for (std::string kind : kinds) {
            std::cout << ((std::string("First 20") + kind) + std::string("Brazilian numbers:"));
            std::cout << std::endl;
            int64_t c = 0;
            int64_t n = 7;
            while (true) {
                if (isBrazilian(n)) {
                    std::cout << (([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()) + std::string(" "));
                    std::cout << std::endl;
                    c = (c + 1);
                    if ((c == 20)) {
                        std::cout << std::string("\n");
                        std::cout << std::endl;
                        break;
                    }
                }
                if ((kind == std::string(" "))) {
                    n = (n + 1);
                } else                 if ((kind == std::string(" odd "))) {
                    n = (n + 2);
                } else {
                    while (true) {
                        n = (n + 2);
                        if (isPrime(n)) {
                            break;
                        }
                    }
                }

            }
        }
        int64_t n = 7;
        int64_t c = 0;
        while ((c < 100000)) {
            if (isBrazilian(n)) {
                c = (c + 1);
            }
            n = (n + 1);
        }
        std::cout << (std::string("The 100,000th Brazilian number: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (n - 1); return ss.str(); }()));
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
