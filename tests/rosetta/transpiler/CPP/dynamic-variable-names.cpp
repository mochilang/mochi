// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:17:29 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t parseIntStr(std::string str);
int main();

int64_t parseIntStr(std::string str) {
    int64_t i = int64_t(0);
    bool neg = false;
    if (((str.size() > int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(str) == std::string("-")))) {
        neg = true;
        i = int64_t(1);
    }
    int64_t n = int64_t(0);
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", int64_t(0)}, {"1", int64_t(1)}, {"2", int64_t(2)}, {"3", int64_t(3)}, {"4", int64_t(4)}, {"5", int64_t(5)}, {"6", int64_t(6)}, {"7", int64_t(7)}, {"8", int64_t(8)}, {"9", int64_t(9)}};
    while ((i < str.size())) {
        n = ((n * int64_t(10)) + ([&](const auto& __m){ auto __it = __m.find(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(str)); return __it != __m.end() ? __it->second : 0; })(digits));
        i = (i + int64_t(1));
    }
    if (neg) {
        n = -n;
    }
    return n;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t n = int64_t(0);
        while (((n < int64_t(1)) || (n > int64_t(5)))) {
            std::cout << std::string("How many integer variables do you want to create (max 5) : ");
            std::cout << std::endl;
            std::string line = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            if ((line.size() > int64_t(0))) {
                n = _parse_int_str(line, int64_t(10));
            }
        }
        std::map<std::string, int64_t> vars = {};
        std::cout << std::string("OK, enter the variable names and their values, below\n");
        std::cout << std::endl;
        int64_t i = int64_t(1);
        while ((i <= n)) {
            std::cout << ((std::string("\n  Variable ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }())) + std::string("\n"));
            std::cout << std::endl;
            std::cout << std::string("    Name  : ");
            std::cout << std::endl;
            std::string name = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(vars, name)) {
                std::cout << std::string("  Sorry, you've already created a variable of that name, try again");
                std::cout << std::endl;
                continue;
            }
            int64_t value = int64_t(0);
            while (true) {
                std::cout << std::string("    Value : ");
                std::cout << std::endl;
                std::string valstr = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
                if ((valstr.size() == int64_t(0))) {
                    std::cout << std::string("  Not a valid integer, try again");
                    std::cout << std::endl;
                    continue;
                }
                bool ok = true;
                int64_t j = int64_t(0);
                bool neg = false;
                if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(valstr) == std::string("-"))) {
                    neg = true;
                    j = int64_t(1);
                }
                while ((j < valstr.size())) {
                    std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(j, (j + int64_t(1)) - j); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+j, __v.begin()+(j + int64_t(1))); })(valstr);
                    if (((ch < std::string("0")) || (ch > std::string("9")))) {
                        ok = false;
                        break;
                    }
                    j = (j + int64_t(1));
                }
                if (!ok) {
                    std::cout << std::string("  Not a valid integer, try again");
                    std::cout << std::endl;
                    continue;
                }
                value = _parse_int_str(valstr, int64_t(10));
                break;
            }
            vars[name] = value;
            i = (i + int64_t(1));
        }
        std::cout << std::string("\nEnter q to quit");
        std::cout << std::endl;
        while (true) {
            std::cout << std::string("\nWhich variable do you want to inspect : ");
            std::cout << std::endl;
            std::string name = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            if ((([&]{ std::string __s = name; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }()) == std::string("q"))) {
                return int64_t(0);
            }
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(vars, name)) {
                std::cout << (std::string("It's value is ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __m){ auto __it = __m.find(name); return __it != __m.end() ? __it->second : 0; })(vars); return ss.str(); }()));
                std::cout << std::endl;
            } else {
                std::cout << std::string("Sorry there's no variable of that name, try again");
                std::cout << std::endl;
            }
        }
    }
    return 0;
}
