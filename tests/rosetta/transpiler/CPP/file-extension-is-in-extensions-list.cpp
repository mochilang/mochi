// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:22:10 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool endsWith(std::string s, std::string suf);
int64_t lastIndexOf(std::string s, std::string sub);
std::vector<std::any> fileExtInList(std::string filename);
std::string pad(std::string s, int64_t w);
int main();

std::vector<std::string> extensions = std::vector<std::string>{std::string("zip"), std::string("rar"), std::string("7z"), std::string("gz"), std::string("archive"), std::string("A##"), std::string("tar.bz2")};

bool endsWith(std::string s, std::string suf) {
    if ((s.size() < suf.size())) {
        return false;
    }
    return (s.substr((s.size() - suf.size()), s.size() - (s.size() - suf.size())) == suf);
}

int64_t lastIndexOf(std::string s, std::string sub) {
    int64_t idx = (int64_t(0) - int64_t(1));
    int64_t i = int64_t(0);
    while ((i <= (s.size() - sub.size()))) {
        if ((s.substr(i, (i + sub.size()) - i) == sub)) {
            idx = i;
        }
        i = (i + int64_t(1));
    }
    return idx;
}

std::vector<std::any> fileExtInList(std::string filename) {
    std::string fl = ([&]{ std::string __s = filename; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }());
    for (std::string ext : extensions) {
        std::string ext2 = (std::string(".") + ([&]{ std::string __s = ext; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }()));
        if (endsWith(fl, ext2)) {
            return std::vector<std::any>{std::any(true), std::any(ext)};
        }
    }
    int64_t idx = lastIndexOf(filename, std::string("."));
    if ((idx != (int64_t(0) - int64_t(1)))) {
        std::string t = filename.substr((idx + int64_t(1)), filename.size() - (idx + int64_t(1)));
        if ((t != std::string(""))) {
            return std::vector<std::any>{std::any(false), std::any(t)};
        }
        return std::vector<std::any>{std::any(false), std::any(std::string("<empty>"))};
    }
    return std::vector<std::any>{std::any(false), std::any(std::string("<none>"))};
}

std::string pad(std::string s, int64_t w) {
    std::string t = s;
    while ((t.size() < w)) {
        t = (t + std::string(" "));
    }
    return t;
}

int main() {
    std::cout << std::string("The listed extensions are:");
    std::cout << std::endl;
    { auto __tmp = extensions; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ", "; std::cout << __tmp[i]; } std::cout << "]"; }
    std::cout << std::endl;
    std::vector<std::string> tests = std::vector<std::string>{std::string("MyData.a##"), std::string("MyData.tar.Gz"), std::string("MyData.gzip"), std::string("MyData.7z.backup"), std::string("MyData..."), std::string("MyData"), std::string("MyData_v1.0.tar.bz2"), std::string("MyData_v1.0.bz2")};
    for (std::string t : tests) {
        std::vector<std::any> res = fileExtInList(t);
        bool ok = std::any_cast<bool>(res[int64_t(0)]);
        std::string ext = std::any_cast<std::string>(res[int64_t(1)]);
        std::cout << (((((pad(t, int64_t(20)) + std::string(" => ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ok; return ss.str(); }())) + std::string("  (extension = ")) + ext) + std::string(")"));
        std::cout << std::endl;
    }
    return 0;
}
