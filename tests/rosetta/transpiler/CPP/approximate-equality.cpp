// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:54:54 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>



double abs(double x);
double maxf(double a, double b);
bool isClose(double a, double b);
double sqrtApprox(double x);
int main();

double abs(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double maxf(double a, double b) {
    if ((a > b)) {
        return a;
    }
    return b;
}

bool isClose(double a, double b) {
    double relTol = 1e-09;
    double t = abs((a - b));
    double u = (relTol * maxf(abs(a), abs(b)));
    return (t <= u);
}

double sqrtApprox(double x) {
    double guess = x;
    int i = 0;
    while ((i < 10)) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + 1);
    }
    return guess;
}

int main() {
    double root2 = sqrtApprox(2.0);
    std::vector<std::vector<double>> pairs = std::vector<std::vector<double>>{std::vector<double>{1.0000000000000002e+14, 1.0000000000000002e+14}, std::vector<double>{100.01, 100.011}, std::vector<double>{((double)(1.0000000000000002e+13) / (10000.0)), 1.0000000000000001e+09}, std::vector<double>{0.001, 0.0010000001}, std::vector<double>{1.01e-22, 0.0}, std::vector<double>{(root2 * root2), 2.0}, std::vector<double>{(-root2 * root2), -2.0}, std::vector<double>{100000000000000000.0, 100000000000000000.0}, std::vector<double>{3.141592653589793, 3.141592653589793}};
    for (std::vector<double> pair : pairs) {
        double a = pair[0];
        double b = pair[1];
        std::string s = (isClose(a, b) ? std::string("≈") : std::string("≉"));
        std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()) + std::string(" ")) + s) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
