// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:13:30 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

int pfacSum(int i);
int main();

int pfacSum(int i) {
    int sum = 0;
    int p = 1;
    while ((p <= (i / 2))) {
        if (((i % p) == 0)) {
            sum = (sum + p);
        }
        p = (p + 1);
    }
    return sum;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        int d = 0;
        int a = 0;
        int pnum = 0;
        int i = 1;
        while ((i <= 20000)) {
            int j = pfacSum(i);
            if ((j < i)) {
                d = (d + 1);
            }
            if ((j == i)) {
                pnum = (pnum + 1);
            }
            if ((j > i)) {
                a = (a + 1);
            }
            i = (i + 1);
        }
        std::cout << ((std::string("There are ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << d; return ss.str(); }())) + std::string(" deficient numbers between 1 and 20000"));
        std::cout << std::endl;
        std::cout << ((std::string("There are ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }())) + std::string(" abundant numbers  between 1 and 20000"));
        std::cout << std::endl;
        std::cout << ((std::string("There are ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << pnum; return ss.str(); }())) + std::string(" perfect numbers between 1 and 20000"));
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
