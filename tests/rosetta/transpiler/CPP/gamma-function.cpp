// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:12:41 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double ln(double x);
double expf(double x);
double powf(double base, double _exp);
double lanczos7(double z);
int main();

std::vector<double> xs = std::vector<double>{-0.5, 0.1, 0.5, 1.0, 1.5, 2.0, 3.0, 10.0, 140.0, 170.0};

double ln(double x) {
    double k = 0.0;
    double v = x;
    while ((v >= 2.0)) {
        v = ((double)(v) / (2.0));
        k = (k + 1.0);
    }
    while ((v < 1.0)) {
        v = (v * 2.0);
        k = (k - 1.0);
    }
    double z = ((double)((v - 1.0)) / ((v + 1.0)));
    double zpow = z;
    double sum = z;
    int64_t i = int64_t(3);
    while ((i <= int64_t(9))) {
        zpow = ((zpow * z) * z);
        sum = (sum + ((double)(zpow) / ((double)(i))));
        i = (i + int64_t(2));
    }
    double ln2 = 0.6931471805599453;
    return ((k * ln2) + (2.0 * sum));
}

double expf(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t i = int64_t(1);
    while ((i < int64_t(20))) {
        term = ((double)((term * x)) / ((double)(i)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

double powf(double base, double _exp) {
    return expf((_exp * ln(base)));
}

double lanczos7(double z) {
    double t = (z + 6.5);
    double x = ((((((((0.9999999999998099 + ((double)(676.5203681218851) / (z))) - ((double)(1259.1392167224028) / ((z + 1.0)))) + ((double)(771.3234287776531) / ((z + 2.0)))) - ((double)(176.6150291621406) / ((z + 3.0)))) + ((double)(12.507343278686905) / ((z + 4.0)))) - ((double)(0.13857109526572012) / ((z + 5.0)))) + ((double)(9.984369578019572e-06) / ((z + 6.0)))) + ((double)(1.5056327351493116e-07) / ((z + 7.0))));
    return (((2.5066282746310002 * powf(t, (z - 0.5))) * powf(2.718281828459045, -t)) * x);
}

int main() {
    for (double x : xs) {
        std::cout << ((([&]{ std::ostringstream ss; ss << std::boolalpha << x; return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << lanczos7(x); return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
