// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:20:29 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t parseIntStr(std::string str);
std::vector<std::string> splitWs(std::string s);
std::map<std::string, std::any> parsePpm(std::string data);
int main();

std::string ppmData = std::string("P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n");
std::map<std::string, std::any> img = parsePpm(ppmData);

int64_t parseIntStr(std::string str) {
    int64_t i = 0;
    bool neg = false;
    if (((str.size() > 0) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 1 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+1); })(str) == std::string("-")))) {
        neg = true;
        i = 1;
    }
    int64_t n = 0;
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
    while ((i < str.size())) {
        n = ((n * 10) + digits[([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 1)); })(str)]);
        i = (i + 1);
    }
    if (neg) {
        n = -n;
    }
    return n;
}

std::vector<std::string> splitWs(std::string s) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int64_t i = 0;
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + 1) - i);
        if (((((ch == std::string(" ")) || (ch == std::string("\n"))) || (ch == std::string("\t"))) || (ch == std::string("\r")))) {
            if ((cur.size() > 0)) {
                parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
                cur = std::string("");
            }
        } else {
            cur = (cur + ch);
        }
        i = (i + 1);
    }
    if ((cur.size() > 0)) {
        parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    }
    return parts;
}

std::map<std::string, std::any> parsePpm(std::string data) {
    std::vector<std::string> toks = splitWs(data);
    if ((toks.size() < 4)) {
        return std::map<std::string, std::any>{{"err", std::any(true)}};
    }
    std::string magic = toks[0];
    int64_t w = parseIntStr(toks[1]);
    int64_t h = parseIntStr(toks[2]);
    int64_t maxv = parseIntStr(toks[3]);
    std::vector<int64_t> px = {};
    int64_t i = 4;
    while ((i < toks.size())) {
        px = ([&]{ auto __tmp = px; __tmp.push_back(parseIntStr(toks[i])); return __tmp; }());
        i = (i + 1);
    }
    return std::map<std::string, std::any>{{"magic", std::any(magic)}, {"w", std::any(w)}, {"h", std::any(h)}, {"max", std::any(maxv)}, {"px", std::any(px)}};
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::cout << (((std::string("width=") + ([&]{ std::ostringstream ss; ss << std::boolalpha << img["w"]; return ss.str(); }())) + std::string(" height=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << img["h"]; return ss.str(); }()));
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
