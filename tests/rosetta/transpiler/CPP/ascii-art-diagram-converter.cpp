// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:10:02 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int main();

int main() {
    std::cout << std::string("Diagram after trimming whitespace and removal of blank lines:\n");
    std::cout << std::endl;
    std::cout << std::string("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    std::cout << std::endl;
    std::cout << std::string("|                      ID                       |");
    std::cout << std::endl;
    std::cout << std::string("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    std::cout << std::endl;
    std::cout << std::string("|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |");
    std::cout << std::endl;
    std::cout << std::string("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    std::cout << std::endl;
    std::cout << std::string("|                    QDCOUNT                    |");
    std::cout << std::endl;
    std::cout << std::string("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    std::cout << std::endl;
    std::cout << std::string("|                    ANCOUNT                    |");
    std::cout << std::endl;
    std::cout << std::string("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    std::cout << std::endl;
    std::cout << std::string("|                    NSCOUNT                    |");
    std::cout << std::endl;
    std::cout << std::string("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    std::cout << std::endl;
    std::cout << std::string("|                    ARCOUNT                    |");
    std::cout << std::endl;
    std::cout << std::string("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    std::cout << std::endl;
    std::cout << std::string("\nDecoded:\n");
    std::cout << std::endl;
    std::cout << std::string("Name     Bits  Start  End");
    std::cout << std::endl;
    std::cout << std::string("=======  ====  =====  ===");
    std::cout << std::endl;
    std::cout << std::string("ID        16      0    15");
    std::cout << std::endl;
    std::cout << std::string("QR         1     16    16");
    std::cout << std::endl;
    std::cout << std::string("Opcode     4     17    20");
    std::cout << std::endl;
    std::cout << std::string("AA         1     21    21");
    std::cout << std::endl;
    std::cout << std::string("TC         1     22    22");
    std::cout << std::endl;
    std::cout << std::string("RD         1     23    23");
    std::cout << std::endl;
    std::cout << std::string("RA         1     24    24");
    std::cout << std::endl;
    std::cout << std::string("Z          3     25    27");
    std::cout << std::endl;
    std::cout << std::string("RCODE      4     28    31");
    std::cout << std::endl;
    std::cout << std::string("QDCOUNT   16     32    47");
    std::cout << std::endl;
    std::cout << std::string("ANCOUNT   16     48    63");
    std::cout << std::endl;
    std::cout << std::string("NSCOUNT   16     64    79");
    std::cout << std::endl;
    std::cout << std::string("ARCOUNT   16     80    95");
    std::cout << std::endl;
    std::cout << std::string("\nTest string in hex:");
    std::cout << std::endl;
    std::cout << std::string("78477bbf5496e12e1bf169a4");
    std::cout << std::endl;
    std::cout << std::string("\nTest string in binary:");
    std::cout << std::endl;
    std::cout << std::string("011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100");
    std::cout << std::endl;
    std::cout << std::string("\nUnpacked:\n");
    std::cout << std::endl;
    std::cout << std::string("Name     Size  Bit pattern");
    std::cout << std::endl;
    std::cout << std::string("=======  ====  ================");
    std::cout << std::endl;
    std::cout << std::string("ID        16   0111100001000111");
    std::cout << std::endl;
    std::cout << std::string("QR         1   0");
    std::cout << std::endl;
    std::cout << std::string("Opcode     4   1111");
    std::cout << std::endl;
    std::cout << std::string("AA         1   0");
    std::cout << std::endl;
    std::cout << std::string("TC         1   1");
    std::cout << std::endl;
    std::cout << std::string("RD         1   1");
    std::cout << std::endl;
    std::cout << std::string("RA         1   1");
    std::cout << std::endl;
    std::cout << std::string("Z          3   011");
    std::cout << std::endl;
    std::cout << std::string("RCODE      4   1111");
    std::cout << std::endl;
    std::cout << std::string("QDCOUNT   16   0101010010010110");
    std::cout << std::endl;
    std::cout << std::string("ANCOUNT   16   1110000100101110");
    std::cout << std::endl;
    std::cout << std::string("NSCOUNT   16   0001101111110001");
    std::cout << std::endl;
    std::cout << std::string("ARCOUNT   16   0110100110100100");
    std::cout << std::endl;
    return 0;
}
