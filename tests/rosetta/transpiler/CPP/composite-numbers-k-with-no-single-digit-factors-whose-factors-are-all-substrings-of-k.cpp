// Generated by Mochi transpiler v0.10.52 on 2025-08-01 21:23:57 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> primeFactors(int64_t n);
std::string commatize(int64_t n);
int64_t indexOf(std::string s, std::string sub);
std::string pad10(std::string s);
std::string trimRightStr(std::string s);
int main();

std::vector<int64_t> primeFactors(int64_t n) {
    std::vector<int64_t> factors = {};
    int64_t x = n;
    while (((x % int64_t(2)) == int64_t(0))) {
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(int64_t(2)); return __tmp; }());
        x = (int64_t)((x / int64_t(2)));
    }
    int64_t p = int64_t(3);
    while (((p * p) <= x)) {
        while (((x % p) == int64_t(0))) {
            factors = ([&]{ auto __tmp = factors; __tmp.push_back(p); return __tmp; }());
            x = (int64_t)((x / p));
        }
        p = (p + int64_t(2));
    }
    if ((x > int64_t(1))) {
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(x); return __tmp; }());
    }
    return factors;
}

std::string commatize(int64_t n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    std::string out = std::string("");
    int64_t i = (s.size() - int64_t(1));
    int64_t c = int64_t(0);
    while ((i >= int64_t(0))) {
        out = (s.substr(i, (i + int64_t(1)) - i) + out);
        c = (c + int64_t(1));
        if ((((c % int64_t(3)) == int64_t(0)) && (i > int64_t(0)))) {
            out = (std::string(",") + out);
        }
        i = (i - int64_t(1));
    }
    return out;
}

int64_t indexOf(std::string s, std::string sub) {
    int64_t i = int64_t(0);
    while (((i + sub.size()) <= s.size())) {
        if ((s.substr(i, (i + sub.size()) - i) == sub)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

std::string pad10(std::string s) {
    std::string str = s;
    while ((str.size() < int64_t(10))) {
        str = (std::string(" ") + str);
    }
    return str;
}

std::string trimRightStr(std::string s) {
    int end = s.size();
    while (((end > int64_t(0)) && (s.substr((end - int64_t(1)), end - (end - int64_t(1))) == std::string(" ")))) {
        end = (end - int64_t(1));
    }
    return s.substr(int64_t(0), end - int64_t(0));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<int64_t> res = {};
        int64_t count = int64_t(0);
        int64_t k = (int64_t(11) * int64_t(11));
        while ((count < int64_t(20))) {
            if (((((k % int64_t(3)) == int64_t(0)) || ((k % int64_t(5)) == int64_t(0))) || ((k % int64_t(7)) == int64_t(0)))) {
                k = (k + int64_t(2));
                continue;
            }
            std::vector<int64_t> factors = primeFactors(k);
            if ((factors.size() > int64_t(1))) {
                std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << k; return ss.str(); }());
                bool includesAll = true;
                int64_t prev = -int64_t(1);
                for (int64_t f : factors) {
                    if ((f == prev)) {
                        continue;
                    }
                    std::string fs = ([&]{ std::ostringstream ss; ss << std::boolalpha << f; return ss.str(); }());
                    if ((_index_of(s, fs) == -int64_t(1))) {
                        includesAll = false;
                        break;
                    }
                    prev = f;
                }
                if (includesAll) {
                    res = ([&]{ auto __tmp = res; __tmp.push_back(k); return __tmp; }());
                    count = (count + int64_t(1));
                }
            }
            k = (k + int64_t(2));
        }
        std::string line = std::string("");
        for (int64_t e : ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(10) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(10)); })(res)) {
            line = ((line + pad10(commatize(e))) + std::string(" "));
        }
        std::cout << trimRightStr(line);
        std::cout << std::endl;
        line = std::string("");
        for (int64_t e : ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(10), int64_t(20) - int64_t(10)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(10), __v.begin()+int64_t(20)); })(res)) {
            line = ((line + pad10(commatize(e))) + std::string(" "));
        }
        std::cout << trimRightStr(line);
        std::cout << std::endl;
    }
    return 0;
}
