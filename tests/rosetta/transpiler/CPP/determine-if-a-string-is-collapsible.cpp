// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:47:43 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::any> collapse(std::string s);
int main();

std::vector<std::any> collapse(std::string s) {
    int64_t i = int64_t(0);
    std::string prev = std::string("");
    std::string res = std::string("");
    int orig = s.size();
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + int64_t(1)) - i);
        if ((ch != prev)) {
            res = (res + ch);
            prev = ch;
        }
        i = (i + int64_t(1));
    }
    return std::vector<std::any>{std::any(res), std::any(orig), std::any(res.size())};
}

int main() {
    std::vector<std::string> strings = std::vector<std::string>{std::string(""), std::string("\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln "), std::string("..111111111111111111111111111111111111111111111111111111111111111777888"), std::string("I never give 'em hell, I just tell the truth, and they think it's hell. "), std::string("                                                   ---  Harry S Truman "), std::string("The better the 4-wheel drive, the further you'll be from help when ya get stuck!"), std::string("headmistressship"), std::string("aardvark"), std::string("😍😀🙌💃😍😍😍🙌")};
    int64_t idx = int64_t(0);
    while ((idx < strings.size())) {
        std::string s = strings[idx];
        std::vector<std::any> r = collapse(s);
        std::any cs = r[int64_t(0)];
        std::any olen = r[int64_t(1)];
        std::any clen = r[int64_t(2)];
        std::cout << ((((std::string("original : length = ") + ([&]{ std::ostringstream ss; any_to_stream(ss, olen);
 return ss.str(); }())) + std::string(", string = «««")) + s) + std::string("»»»"));
        std::cout << std::endl;
        std::cout << ((((std::string("collapsed: length = ") + ([&]{ std::ostringstream ss; any_to_stream(ss, clen);
 return ss.str(); }())) + std::string(", string = «««")) + ([&]{ std::ostringstream ss; any_to_stream(ss, cs);
 return ss.str(); }())) + std::string("»»»\n"));
        std::cout << std::endl;
        idx = (idx + int64_t(1));
    }
    return 0;
}
