// Generated by Mochi transpiler v0.10.37 on 2025-07-23 13:37:15 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <sstream>
#include <iomanip>
#include <optional>
#include <cstdlib>
#include <chrono>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}

int parseIntStr(std::string str);
int main();

int parseIntStr(std::string str) {
    int i = 0;
    bool neg = false;
    if (((str.size() > 0) && (([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(0, 1 - 0); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+0, c.begin()+1); })(str) == std::string("-")))) {
        neg = true;
        i = 1;
    }
    int n = 0;
    std::map<std::string, int> digits = std::map<std::string, int>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
    while ((i < str.size())) {
        n = ((n * 10) + digits[([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+i, c.begin()+(i + 1)); })(str)]);
        i = (i + 1);
    }
    if (neg) {
        n = -n;
    }
    return n;
}

int main() {
    int total = 0;
    bool computer = ((_now() % 2) == 0);
    std::cout << std::string("Enter q to quit at any time\n");
    std::cout << std::endl;
    if (computer) {
        std::cout << std::string("The computer will choose first");
        std::cout << std::endl;
    } else {
        std::cout << std::string("You will choose first");
        std::cout << std::endl;
    }
    std::cout << std::string("\n\nRunning total is now 0\n\n");
    std::cout << std::endl;
    int round = 1;
    bool done = false;
    while (!done) {
        std::cout << ((std::string("ROUND ") + ([&]{ std::ostringstream ss; ss<<round; return ss.str(); }())) + std::string(":\n\n"));
        std::cout << std::endl;
        int i = 0;
        while (((i < 2) && !done)) {
            if (computer) {
                int choice = 0;
                if ((total < 18)) {
                    choice = ((_now() % 3) + 1);
                } else {
                    choice = (21 - total);
                }
                total = (total + choice);
                std::cout << (std::string("The computer chooses ") + ([&]{ std::ostringstream ss; ss<<choice; return ss.str(); }()));
                std::cout << std::endl;
                std::cout << (std::string("Running total is now ") + ([&]{ std::ostringstream ss; ss<<total; return ss.str(); }()));
                std::cout << std::endl;
                if ((total == 21)) {
                    std::cout << std::string("\nSo, commiserations, the computer has won!");
                    std::cout << std::endl;
                    done = true;
                }
            } else {
                while (true) {
                    std::cout << std::string("Your choice 1 to 3 : ");
                    std::cout << std::endl;
                    std::string line = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
                    if (((line == std::string("q")) || (line == std::string("Q")))) {
                        std::cout << std::string("OK, quitting the game");
                        std::cout << std::endl;
                        done = true;
                        break;
                    }
                    int num = parseIntStr(line);
                    if (((num < 1) || (num > 3))) {
                        if (((total + num) > 21)) {
                            std::cout << std::string("Too big, try again");
                            std::cout << std::endl;
                        } else {
                            std::cout << std::string("Out of range, try again");
                            std::cout << std::endl;
                        }
                        continue;
                    }
                    if (((total + num) > 21)) {
                        std::cout << std::string("Too big, try again");
                        std::cout << std::endl;
                        continue;
                    }
                    total = (total + num);
                    std::cout << (std::string("Running total is now ") + ([&]{ std::ostringstream ss; ss<<total; return ss.str(); }()));
                    std::cout << std::endl;
                    break;
                }
                if ((total == 21)) {
                    std::cout << std::string("\nSo, congratulations, you've won!");
                    std::cout << std::endl;
                    done = true;
                }
            }
            std::cout << std::string("\n");
            std::cout << std::endl;
            computer = !computer;
            i = (i + 1);
        }
        round = (round + 1);
    }
    return 0;
}
