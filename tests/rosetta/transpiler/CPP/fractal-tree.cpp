// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:12:12 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double _mod(double x, double m);
double _sin(double x);
double _cos(double x);
std::vector<std::vector<std::string>> clearGrid();
void drawPoint(std::vector<std::vector<std::string>> g, int64_t x, int64_t y);
void bresenham(int64_t x0, int64_t y0, int64_t x1, int64_t y1, const std::vector<std::vector<std::string>>& g);
void ftree(const std::vector<std::vector<std::string>>& g, double x, double y, double dist, double dir, int64_t d);
std::string render(const std::vector<std::vector<std::string>>& g);
int main();

double PI = 3.141592653589793;
int64_t width = int64_t(80);
int64_t height = int64_t(40);
int64_t depth = int64_t(6);
double angle = 12.0;
double length = 12.0;
double frac = 0.8;

double _mod(double x, double m) {
    return (x - ((double)((int64_t)(((double)(x) / (m)))) * m));
}

double _sin(double x) {
    double y = (_mod((x + PI), (2.0 * PI)) - PI);
    double y2 = (y * y);
    double y3 = (y2 * y);
    double y5 = (y3 * y2);
    double y7 = (y5 * y2);
    return (((y - ((double)(y3) / (6.0))) + ((double)(y5) / (120.0))) - ((double)(y7) / (5040.0)));
}

double _cos(double x) {
    double y = (_mod((x + PI), (2.0 * PI)) - PI);
    double y2 = (y * y);
    double y4 = (y2 * y2);
    double y6 = (y4 * y2);
    return (((1.0 - ((double)(y2) / (2.0))) + ((double)(y4) / (24.0))) - ((double)(y6) / (720.0)));
}

std::vector<std::vector<std::string>> clearGrid() {
    std::vector<std::vector<std::string>> g = {};
    int64_t y = int64_t(0);
    while ((y < height)) {
        std::vector<std::string> row = {};
        int64_t x = int64_t(0);
        while ((x < width)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(std::string(" ")); return __tmp; }());
            x = (x + int64_t(1));
        }
        g = ([&]{ auto __tmp = g; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return g;
}

void drawPoint(std::vector<std::vector<std::string>> g, int64_t x, int64_t y) {
    if (((((x >= int64_t(0)) && (x < width)) && (y >= int64_t(0))) && (y < height))) {
        std::vector<std::string> row = g[y];
        row[x] = std::string("#");
        g[y] = row;
    }
}

void bresenham(int64_t x0, int64_t y0, int64_t x1, int64_t y1, const std::vector<std::vector<std::string>>& g) {
    int64_t dx = (x1 - x0);
    if ((dx < int64_t(0))) {
        dx = -dx;
    }
    int64_t dy = (y1 - y0);
    if ((dy < int64_t(0))) {
        dy = -dy;
    }
    int64_t sx = -int64_t(1);
    if ((x0 < x1)) {
        sx = int64_t(1);
    }
    int64_t sy = -int64_t(1);
    if ((y0 < y1)) {
        sy = int64_t(1);
    }
    int64_t err = (dx - dy);
    while (true) {
        drawPoint(g, x0, y0);
        if (((x0 == x1) && (y0 == y1))) {
            break;
        }
        int64_t e2 = (int64_t(2) * err);
        if ((e2 > -dy)) {
            err = (err - dy);
            x0 = (x0 + sx);
        }
        if ((e2 < dx)) {
            err = (err + dx);
            y0 = (y0 + sy);
        }
    }
}

void ftree(const std::vector<std::vector<std::string>>& g, double x, double y, double dist, double dir, int64_t d) {
    double rad = ((double)((dir * PI)) / (180.0));
    double x2 = (x + (dist * _sin(rad)));
    double y2 = (y - (dist * _cos(rad)));
    bresenham((int64_t)(x), (int64_t)(y), (int64_t)(x2), (int64_t)(y2), g);
    if ((d > int64_t(0))) {
        ftree(g, x2, y2, (dist * frac), (dir - angle), (d - int64_t(1)));
        ftree(g, x2, y2, (dist * frac), (dir + angle), (d - int64_t(1)));
    }
}

std::string render(const std::vector<std::vector<std::string>>& g) {
    std::string out = std::string("");
    int64_t y = int64_t(0);
    while ((y < height)) {
        std::string line = std::string("");
        int64_t x = int64_t(0);
        while ((x < width)) {
            line = (line + g[y][x]);
            x = (x + int64_t(1));
        }
        out = (out + line);
        if ((y < (height - int64_t(1)))) {
            out = (out + std::string("\n"));
        }
        y = (y + int64_t(1));
    }
    return out;
}

int main() {
    std::vector<std::vector<std::string>> grid = clearGrid();
    ftree(grid, (double)((width / int64_t(2))), (double)((height - int64_t(1))), length, 0.0, depth);
    std::cout << render(grid);
    std::cout << std::endl;
    return 0;
}
