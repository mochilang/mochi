// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:57 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

double d2d(double d);
double g2g(double g);
double m2m(double m);
double r2r(double r);
double d2g(double d);
double d2m(double d);
double d2r(double d);
double g2d(double g);
double g2m(double g);
double g2r(double g);
double m2d(double m);
double m2g(double m);
double m2r(double m);
double r2d(double r);
double r2g(double r);
double r2m(double r);
int main();

double d2d(double d) {
    return std::fmod(d, 360.0);
}

double g2g(double g) {
    return std::fmod(g, 400.0);
}

double m2m(double m) {
    return std::fmod(m, 6400.0);
}

double r2r(double r) {
    return std::fmod(r, (2.0 * 3.141592653589793));
}

double d2g(double d) {
    return ((double)((d2d(d) * 400.0)) / (360.0));
}

double d2m(double d) {
    return ((double)((d2d(d) * 6400.0)) / (360.0));
}

double d2r(double d) {
    return ((double)((d2d(d) * 3.141592653589793)) / (180.0));
}

double g2d(double g) {
    return ((double)((g2g(g) * 360.0)) / (400.0));
}

double g2m(double g) {
    return ((double)((g2g(g) * 6400.0)) / (400.0));
}

double g2r(double g) {
    return ((double)((g2g(g) * 3.141592653589793)) / (200.0));
}

double m2d(double m) {
    return ((double)((m2m(m) * 360.0)) / (6400.0));
}

double m2g(double m) {
    return ((double)((m2m(m) * 400.0)) / (6400.0));
}

double m2r(double m) {
    return ((double)((m2m(m) * 3.141592653589793)) / (3200.0));
}

double r2d(double r) {
    return ((double)((r2r(r) * 180.0)) / (3.141592653589793));
}

double r2g(double r) {
    return ((double)((r2r(r) * 200.0)) / (3.141592653589793));
}

double r2m(double r) {
    return ((double)((r2r(r) * 3200.0)) / (3.141592653589793));
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<double> angles = std::vector<double>{-2.0, -1.0, 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1000000.0};
        std::cout << std::string("degrees normalized_degs gradians mils radians");
        std::cout << std::endl;
        for (double a : angles) {
            std::cout << ((((((((([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << d2d(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << d2g(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << d2m(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << d2r(a); return ss.str(); }()));
            std::cout << std::endl;
        }
        std::cout << std::string("\ngradians normalized_grds degrees mils radians");
        std::cout << std::endl;
        for (double a : angles) {
            std::cout << ((((((((([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << g2g(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << g2d(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << g2m(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << g2r(a); return ss.str(); }()));
            std::cout << std::endl;
        }
        std::cout << std::string("\nmils normalized_mils degrees gradians radians");
        std::cout << std::endl;
        for (double a : angles) {
            std::cout << ((((((((([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << m2m(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << m2d(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << m2g(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << m2r(a); return ss.str(); }()));
            std::cout << std::endl;
        }
        std::cout << std::string("\nradians normalized_rads degrees gradians mils");
        std::cout << std::endl;
        for (double a : angles) {
            std::cout << ((((((((([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << r2r(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << r2d(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << r2g(a); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << r2m(a); return ss.str(); }()));
            std::cout << std::endl;
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
