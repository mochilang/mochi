// Generated by Mochi transpiler v0.10.56 on 2025-08-04 10:50:54 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>


static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t parseIntStr(std::string str);
int64_t anchorDay(int64_t y);
bool isLeapYear(int64_t y);
int main();

std::vector<std::string> days = std::vector<std::string>{std::string("Sunday"), std::string("Monday"), std::string("Tuesday"), std::string("Wednesday"), std::string("Thursday"), std::string("Friday"), std::string("Saturday")};
std::vector<int64_t> firstDaysCommon = std::vector<int64_t>{int64_t(3), int64_t(7), int64_t(7), int64_t(4), int64_t(2), int64_t(6), int64_t(4), int64_t(1), int64_t(5), int64_t(3), int64_t(7), int64_t(5)};
std::vector<int64_t> firstDaysLeap = std::vector<int64_t>{int64_t(4), int64_t(1), int64_t(7), int64_t(4), int64_t(2), int64_t(6), int64_t(4), int64_t(1), int64_t(5), int64_t(3), int64_t(7), int64_t(5)};

int64_t parseIntStr(std::string str) {
    int64_t i = int64_t(0);
    bool neg = false;
    if (((static_cast<int64_t>(str.size()) > int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(str) == std::string("-")))) {
        neg = true;
        i = int64_t(1);
    }
    int64_t n = int64_t(0);
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", int64_t(0)}, {"1", int64_t(1)}, {"2", int64_t(2)}, {"3", int64_t(3)}, {"4", int64_t(4)}, {"5", int64_t(5)}, {"6", int64_t(6)}, {"7", int64_t(7)}, {"8", int64_t(8)}, {"9", int64_t(9)}};
    while ((i < static_cast<int64_t>(str.size()))) {
        n = ((n * int64_t(10)) + ([&](const auto& __m){ auto __it = __m.find(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(str)); return __it != __m.end() ? __it->second : 0; })(digits));
        i = (i + int64_t(1));
    }
    if (neg) {
        n = -n;
    }
    return n;
}

int64_t anchorDay(int64_t y) {
    return ((((int64_t(2) + (int64_t(5) * (y % int64_t(4)))) + (int64_t(4) * (y % int64_t(100)))) + (int64_t(6) * (y % int64_t(400)))) % int64_t(7));
}

bool isLeapYear(int64_t y) {
    return (((y % int64_t(4)) == int64_t(0)) && (((y % int64_t(100)) != int64_t(0)) || ((y % int64_t(400)) == int64_t(0))));
}

int main() {
    std::vector<std::string> dates = std::vector<std::string>{std::string("1800-01-06"), std::string("1875-03-29"), std::string("1915-12-07"), std::string("1970-12-23"), std::string("2043-05-14"), std::string("2077-02-12"), std::string("2101-04-02")};
    std::cout << std::string("Days of week given by Doomsday rule:");
    std::cout << std::endl;
    for (std::string date : dates) {
        int64_t y = _parse_int_str(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(4) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(4)); })(date), int64_t(10));
        int64_t m = (_parse_int_str(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(5), int64_t(7) - int64_t(5)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(5), __v.begin()+int64_t(7)); })(date), int64_t(10)) - int64_t(1));
        int64_t d = _parse_int_str(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(8), int64_t(10) - int64_t(8)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(8), __v.begin()+int64_t(10)); })(date), int64_t(10));
        int64_t a = anchorDay(y);
        int64_t f = firstDaysCommon[m];
        if (isLeapYear(y)) {
            f = firstDaysLeap[m];
        }
        int64_t w = (d - f);
        if ((w < int64_t(0))) {
            w = (int64_t(7) + w);
        }
        int64_t dow = ((a + w) % int64_t(7));
        std::cout << ((date + std::string(" -> ")) + days[dow]);
        std::cout << std::endl;
    }
    return 0;
}
