// Generated by Mochi transpiler v0.10.37 on 2025-07-23 09:26:56 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <optional>
#include <cstdlib>
#include <chrono>


static int _now() {
    static int seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoi(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return seed;
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}

std::vector<int> shuffle(std::vector<int> xs) {
    std::vector<int> arr = xs;
    int i = 99;
    while ((i > 0)) {
        auto j = (_now() % (i + 1));
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
        i = (i - 1);
    }
    return arr;
}

void doTrials(int trials, int np, std::string strategy) {
    int pardoned = 0;
    int t = 0;
    while ((t < trials)) {
        std::vector<int> drawers = {};
        int i = 0;
        while ((i < 100)) {
            drawers = ([&]{ auto v = drawers; v.push_back(i); return v; }());
            i = (i + 1);
        }
        drawers = shuffle(drawers);
        int p = 0;
        bool success = true;
        while ((p < np)) {
            bool found = false;
            if ((strategy == std::string("optimal"))) {
                int prev = p;
                int d = 0;
                while ((d < 50)) {
                    int _this = drawers[prev];
                    if ((_this == p)) {
                        found = true;
                        break;
                    }
                    prev = _this;
                    d = (d + 1);
                }
            } else {
                std::vector<bool> opened = {};
                int k = 0;
                while ((k < 100)) {
                    opened = ([&]{ auto v = opened; v.push_back(false); return v; }());
                    k = (k + 1);
                }
                int d = 0;
                while ((d < 50)) {
                    int n = (_now() % 100);
                    while (opened[n]) {
                        n = (_now() % 100);
                    }
                    opened[n] = true;
                    if ((drawers[n] == p)) {
                        found = true;
                        break;
                    }
                    d = (d + 1);
                }
            }
            if (!found) {
                success = false;
                break;
            }
            p = (p + 1);
        }
        if (success) {
            pardoned = (pardoned + 1);
        }
        t = (t + 1);
    }
    double rf = (((double)(pardoned) / (double)(trials)) * 100.0);
    std::cout << ((((((std::string("  strategy = ") + strategy) + std::string("  pardoned = ")) + ([&]{ std::ostringstream ss; ss<<pardoned; return ss.str(); }())) + std::string(" relative frequency = ")) + ([&]{ std::ostringstream ss; ss<<rf; return ss.str(); }())) + std::string("%"));
    std::cout << std::endl;
}

int main() {
    int trials = 1000;
    for (int np : std::vector{10, 100}) {
        std::cout << ((((std::string("Results from ") + ([&]{ std::ostringstream ss; ss<<trials; return ss.str(); }())) + std::string(" trials with ")) + ([&]{ std::ostringstream ss; ss<<np; return ss.str(); }())) + std::string(" prisoners:\n"));
        std::cout << std::endl;
        for (std::string strat : std::vector{std::string("random"), std::string("optimal")}) {
            doTrials(trials, np, strat);
        }
    }
    return 0;
}
