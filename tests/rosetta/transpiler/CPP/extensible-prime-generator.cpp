// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:14:15 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t nextPrime(const std::vector<int64_t>& primes, int64_t start);
int main();

int64_t nextPrime(const std::vector<int64_t>& primes, int64_t start) {
    int64_t n = start;
    while (true) {
        bool isP = true;
        int64_t i = int64_t(0);
        while ((i < primes.size())) {
            int64_t p = primes[i];
            if (((p * p) > n)) {
                break;
            }
            if (((n % p) == int64_t(0))) {
                isP = false;
                break;
            }
            i = (i + int64_t(1));
        }
        if (isP) {
            return n;
        }
        n = (n + int64_t(2));
    }
}

int main() {
    std::vector<int64_t> primes = std::vector<int64_t>{int64_t(2)};
    int64_t cand = int64_t(3);
    while ((primes.size() < int64_t(10000))) {
        cand = nextPrime(primes, cand);
        primes = ([&]{ auto __tmp = primes; __tmp.push_back(cand); return __tmp; }());
        cand = (cand + int64_t(2));
    }
    std::string line = std::string("First twenty:");
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        line = ((line + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << primes[i]; return ss.str(); }()));
        i = (i + int64_t(1));
    }
    std::cout << line;
    std::cout << std::endl;
    int64_t idx = int64_t(0);
    while ((primes[idx] <= int64_t(100))) {
        idx = (idx + int64_t(1));
    }
    line = (std::string("Between 100 and 150: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << primes[idx]; return ss.str(); }()));
    idx = (idx + int64_t(1));
    while ((primes[idx] < int64_t(150))) {
        line = ((line + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << primes[idx]; return ss.str(); }()));
        idx = (idx + int64_t(1));
    }
    std::cout << line;
    std::cout << std::endl;
    while ((primes[idx] <= int64_t(7700))) {
        idx = (idx + int64_t(1));
    }
    int64_t count = int64_t(0);
    while ((primes[idx] < int64_t(8000))) {
        count = (count + int64_t(1));
        idx = (idx + int64_t(1));
    }
    std::cout << (std::string("Number beween 7,700 and 8,000: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << count; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("10,000th prime: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << primes[int64_t(9999)]; return ss.str(); }()));
    std::cout << std::endl;
    return 0;
}
