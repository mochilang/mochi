// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:30:25 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <map>
#include <type_traits>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double absf(double x);
double floorf(double x);
int indexOf(std::string s, std::string ch);
std::string fmtF(double x);
std::string padInt(int n, int width);
std::string padFloat(double x, int width);
double avgLen(int n);
double ana(int n);
int main();

double absf(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double floorf(double x) {
    int y = (int)(x);
    return (double)(y);
}

int indexOf(std::string s, std::string ch) {
    int i = 0;
    while ((i < s.size())) {
        if ((s.substr(i, (i + 1) - i) == ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

std::string fmtF(double x) {
    double y = ((double)(floorf(((x * 10000.0) + 0.5))) / (10000.0));
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }());
    int dot = indexOf(s, std::string("."));
    if ((dot == (0 - 1))) {
        s = (s + std::string(".0000"));
    } else {
        int decs = ((s.size() - dot) - 1);
        if ((decs > 4)) {
            s = s.substr(0, (dot + 5) - 0);
        } else {
            while ((decs < 4)) {
                s = (s + std::string("0"));
                decs = (decs + 1);
            }
        }
    }
    return s;
}

std::string padInt(int n, int width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

std::string padFloat(double x, int width) {
    std::string s = fmtF(x);
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

double avgLen(int n) {
    int tests = 10000;
    int sum = 0;
    int seed = 1;
    int t = 0;
    while ((t < tests)) {
        std::vector<bool> visited = {};
        int i = 0;
        while ((i < n)) {
            visited = ([&]{ auto __tmp = visited; __tmp.push_back(false); return __tmp; }());
            i = (i + 1);
        }
        int x = 0;
        while (!visited[x]) {
            visited[x] = true;
            sum = (sum + 1);
            seed = (((seed * 1664525) + 1013904223) % 2147483647);
            x = (seed % n);
        }
        t = (t + 1);
    }
    return ((double)((double)(sum)) / (tests));
}

double ana(int n) {
    double nn = (double)(n);
    double term = 1.0;
    double sum = 1.0;
    double i = (nn - 1.0);
    while ((i >= 1.0)) {
        term = (term * ((double)(i) / (nn)));
        sum = (sum + term);
        i = (i - 1.0);
    }
    return sum;
}

int main() {
    int nmax = 20;
    std::cout << std::string(" N    average    analytical    (error)");
    std::cout << std::endl;
    std::cout << std::string("===  =========  ============  =========");
    std::cout << std::endl;
    int n = 1;
    while ((n <= nmax)) {
        double a = avgLen(n);
        double b = ana(n);
        double err = (((double)(absf((a - b))) / (b)) * 100.0);
        std::string line = (((((((padInt(n, 3) + std::string("  ")) + padFloat(a, 9)) + std::string("  ")) + padFloat(b, 12)) + std::string("  (")) + padFloat(err, 6)) + std::string("%)"));
        std::cout << line;
        std::cout << std::endl;
        n = (n + 1);
    }
    return 0;
}
