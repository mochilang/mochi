// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:51 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

std::string sortRunes(std::string s);
bool deranged(std::string a, std::string b);
int main();

std::string sortRunes(std::string s) {
    std::vector<std::string> arr = {};
    int i = 0;
    while ((i < s.size())) {
        arr = ([&]{ auto __tmp = arr; __tmp.push_back(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 1)); })(s)); return __tmp; }());
        i = (i + 1);
    }
    int n = arr.size();
    int m = 0;
    while ((m < n)) {
        int j = 0;
        while ((j < (n - 1))) {
            if ((arr[j] > arr[(j + 1)])) {
                std::string tmp = arr[j];
                arr[j] = arr[(j + 1)];
                arr[(j + 1)] = tmp;
            }
            j = (j + 1);
        }
        m = (m + 1);
    }
    std::string out = std::string("");
    i = 0;
    while ((i < n)) {
        out = (out + arr[i]);
        i = (i + 1);
    }
    return out;
}

bool deranged(std::string a, std::string b) {
    if ((a.size() != b.size())) {
        return false;
    }
    int i = 0;
    while ((i < a.size())) {
        if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 1)); })(a) == ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 1)); })(b))) {
            return false;
        }
        i = (i + 1);
    }
    return true;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<std::string> words = std::vector<std::string>{std::string("constitutionalism"), std::string("misconstitutional")};
        std::map<std::string, std::vector<std::string>> m = {};
        int bestLen = 0;
        std::string w1 = std::string("");
        std::string w2 = std::string("");
        for (std::string w : words) {
            if ((w.size() <= bestLen)) {
                continue;
            }
            std::string k = sortRunes(w);
            if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(m, k)) {
                m[k] = std::vector<std::string>{w};
                continue;
            }
            for (auto c : m[k]) {
                if (deranged(w, (std::string)(c))) {
                    bestLen = w.size();
                    w1 = c;
                    w2 = w;
                    break;
                }
            }
            m[k] = ([&]{ auto __tmp = m[k]; __tmp.push_back(w); return __tmp; }());
        }
        std::cout << ((((w1 + std::string(" ")) + w2) + std::string(" : Length ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << bestLen; return ss.str(); }()));
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
