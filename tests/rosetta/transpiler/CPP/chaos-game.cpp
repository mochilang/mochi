// Generated by Mochi transpiler v0.10.47 on 2025-07-28 12:11:18 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> randInt(int64_t s, int64_t n);
int main();

int64_t width = int64_t(60);
int64_t height = (int64_t)(((double)(width) * 0.86602540378));
int64_t iterations = int64_t(5000);
std::vector<std::vector<std::string>> grid = {};
int64_t y = int64_t(0);
int64_t seed = int64_t(1);
std::vector<std::vector<int64_t>> vertices = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), (height - int64_t(1))}, std::vector<int64_t>{(width - int64_t(1)), (height - int64_t(1))}, std::vector<int64_t>{(int64_t)((width / int64_t(2))), int64_t(0)}};
int64_t px = (int64_t)((width / int64_t(2)));
int64_t py = (int64_t)((height / int64_t(2)));
int64_t i = int64_t(0);

std::vector<int64_t> randInt(int64_t s, int64_t n) {
    int64_t next = (((s * int64_t(1664525)) + int64_t(1013904223)) % int64_t(2147483647));
    return std::vector<int64_t>{next, (next % n)};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        while ((y < height)) {
            std::vector<std::string> line = {};
            int64_t x = int64_t(0);
            while ((x < width)) {
                line = ([&]{ auto __tmp = line; __tmp.push_back(std::string(" ")); return __tmp; }());
                x = (x + int64_t(1));
            }
            grid = ([&]{ auto __tmp = grid; __tmp.push_back(line); return __tmp; }());
            y = (y + int64_t(1));
        }
        while ((i < iterations)) {
            std::vector<int64_t> r = randInt(seed, int64_t(3));
            seed = r[int64_t(0)];
            int64_t idx = (int64_t)(r[int64_t(1)]);
            std::vector<int64_t> v = vertices[idx];
            px = (int64_t)(((px + v[int64_t(0)]) / int64_t(2)));
            py = (int64_t)(((py + v[int64_t(1)]) / int64_t(2)));
            if (((((px >= int64_t(0)) && (px < width)) && (py >= int64_t(0))) && (py < height))) {
                grid[py][px] = std::string("*");
            }
            i = (i + int64_t(1));
        }
        y = int64_t(0);
        while ((y < height)) {
            std::string line = std::string("");
            int64_t x = int64_t(0);
            while ((x < width)) {
                line = (line + grid[y][x]);
                x = (x + int64_t(1));
            }
            std::cout << line;
            std::cout << std::endl;
            y = (y + int64_t(1));
        }
    }
    return 0;
}
