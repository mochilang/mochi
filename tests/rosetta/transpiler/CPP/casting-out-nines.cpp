// Generated by Mochi transpiler v0.10.47 on 2025-07-28 12:10:45 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct TestCasesItem {
    int64_t base;
    std::string begin;
    std::string end;
    std::vector<std::string> kaprekar;
    auto operator<=>(const TestCasesItem&) const = default;
};

std::ostream& operator<<(std::ostream& os, const TestCasesItem& v) {
    os << '{' << "'base': "<< v.base
 << ", " << "'begin': "<< "'" << v.begin << "'"
 << ", " << "'end': "<< "'" << v.end << "'"
 << ", " << "'kaprekar': "<< "["; for(size_t i=0;i<v.kaprekar.size();++i){ if(i>0) os << ", "; os << v.kaprekar[i]; } os << "]"
 << '}';
    return os;
}

int64_t parseIntBase(std::string s, int64_t base);
std::string intToBase(int64_t n, int64_t base);
std::vector<std::string> subset(int64_t base, std::string begin, std::string end);
int main();

std::vector<TestCasesItem> testCases = std::vector<TestCasesItem>{TestCasesItem{.base = int64_t(10), .begin = std::string("1"), .end = std::string("100"), .kaprekar = std::vector<std::string>{std::string("1"), std::string("9"), std::string("45"), std::string("55"), std::string("99")}}, TestCasesItem{.base = int64_t(17), .begin = std::string("10"), .end = std::string("gg"), .kaprekar = std::vector<std::string>{std::string("3d"), std::string("d4"), std::string("gg")}}};
int64_t idx = int64_t(0);

int64_t parseIntBase(std::string s, int64_t base) {
    std::string digits = std::string("0123456789abcdefghijklmnopqrstuvwxyz");
    int64_t n = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        int64_t j = int64_t(0);
        int64_t v = int64_t(0);
        while ((j < digits.size())) {
            if ((digits.substr(j, (j + int64_t(1)) - j) == ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s))) {
                v = j;
                break;
            }
            j = (j + int64_t(1));
        }
        n = ((n * base) + v);
        i = (i + int64_t(1));
    }
    return n;
}

std::string intToBase(int64_t n, int64_t base) {
    std::string digits = std::string("0123456789abcdefghijklmnopqrstuvwxyz");
    if ((n == int64_t(0))) {
        return std::string("0");
    }
    std::string out = std::string("");
    int64_t v = n;
    while ((v > int64_t(0))) {
        int64_t d = (v % base);
        out = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(d, (d + int64_t(1)) - d); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+d, __v.begin()+(d + int64_t(1))); })(digits) + out);
        v = (v / base);
    }
    return out;
}

std::vector<std::string> subset(int64_t base, std::string begin, std::string end) {
    int64_t b = parseIntBase(begin, base);
    int64_t e = parseIntBase(end, base);
    std::vector<std::string> out = {};
    int64_t k = b;
    while ((k <= e)) {
        std::string ks = intToBase(k, base);
        int64_t mod = (base - int64_t(1));
        int64_t r1 = (parseIntBase(ks, base) % mod);
        int64_t r2 = ((parseIntBase(ks, base) * parseIntBase(ks, base)) % mod);
        if ((r1 == r2)) {
            out = ([&]{ auto __tmp = out; __tmp.push_back(ks); return __tmp; }());
        }
        k = (k + int64_t(1));
    }
    return out;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        while ((idx < testCases.size())) {
            TestCasesItem tc = testCases[idx];
            std::cout << ((((((std::string("\nTest case base = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << tc.base; return ss.str(); }())) + std::string(", begin = ")) + tc.begin) + std::string(", end = ")) + tc.end) + std::string(":"));
            std::cout << std::endl;
            std::vector<std::string> s = subset(tc.base, tc.begin, tc.end);
            std::cout << (std::string("Subset:  ") + ([&]{ std::ostringstream ss; { auto __tmp = s; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
            std::cout << std::endl;
            std::cout << (std::string("Kaprekar:") + ([&]{ std::ostringstream ss; { auto __tmp = tc.kaprekar; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
            std::cout << std::endl;
            int64_t sx = int64_t(0);
            bool valid = true;
            int64_t i = int64_t(0);
            while ((i < tc.kaprekar.size())) {
                std::string k = tc.kaprekar[i];
                bool found = false;
                while ((sx < s.size())) {
                    if ((s[sx] == k)) {
                        found = true;
                        sx = (sx + int64_t(1));
                        break;
                    }
                    sx = (sx + int64_t(1));
                }
                if (!found) {
                    std::cout << ((std::string("Fail:") + k) + std::string(" not in subset"));
                    std::cout << std::endl;
                    valid = false;
                    break;
                }
                i = (i + int64_t(1));
            }
            if (valid) {
                std::cout << std::string("Valid subset.");
                std::cout << std::endl;
            }
            idx = (idx + int64_t(1));
        }
    }
    return 0;
}
