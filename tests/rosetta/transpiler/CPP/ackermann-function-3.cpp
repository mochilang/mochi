// Generated by Mochi transpiler v0.10.39 on 2025-07-24 18:46:18 GMT+7
#include <iostream>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <sstream>
#include <iomanip>
#include <optional>
#include <vector>



boost::multiprecision::cpp_int pow_big(boost::multiprecision::cpp_int base, int exp);
int bit_len(boost::multiprecision::cpp_int x);
boost::multiprecision::cpp_int ackermann2(boost::multiprecision::cpp_int m, boost::multiprecision::cpp_int n);
void show(int m, int n);
int main();

std::string err = std::string("");

boost::multiprecision::cpp_int pow_big(boost::multiprecision::cpp_int base, int exp) {
    boost::multiprecision::cpp_int result = 1;
    boost::multiprecision::cpp_int b = base;
    int e = exp;
    while ((e > 0)) {
        if (((e % 2) == 1)) {
            result = (result * b);
        }
        b = (b * b);
        e = (int)((e / 2));
    }
    return result;
}

int bit_len(boost::multiprecision::cpp_int x) {
    boost::multiprecision::cpp_int n = x;
    int c = 0;
    while ((n > 0)) {
        n = (n / 2);
        c = (c + 1);
    }
    return c;
}

boost::multiprecision::cpp_int ackermann2(boost::multiprecision::cpp_int m, boost::multiprecision::cpp_int n) {
    if ((err != std::string(""))) {
        return (boost::multiprecision::cpp_int)(0);
    }
    if ((m <= 3)) {
        int mi = (int)(m);
        if ((mi == 0)) {
            return (n + 1);
        }
        if ((mi == 1)) {
            return (n + 2);
        }
        if ((mi == 2)) {
            return ((2 * n) + 3);
        }
        if ((mi == 3)) {
            int nb = bit_len(n);
            if ((nb > 64)) {
                err = ((std::string("A(m,n) had n of ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << nb; return ss.str(); }())) + std::string(" bits; too large"));
                return (boost::multiprecision::cpp_int)(0);
            }
            boost::multiprecision::cpp_int r = pow_big((boost::multiprecision::cpp_int)(2), (int)(n));
            return ((8 * r) - 3);
        }
    }
    if ((bit_len(n) == 0)) {
        return ackermann2((m - (boost::multiprecision::cpp_int)(1)), (boost::multiprecision::cpp_int)(1));
    }
    return ackermann2((m - (boost::multiprecision::cpp_int)(1)), (boost::multiprecision::cpp_int)(ackermann2(m, (n - (boost::multiprecision::cpp_int)(1)))));
}

void show(int m, int n) {
    err = std::string("");
    boost::multiprecision::cpp_int res = ackermann2((boost::multiprecision::cpp_int)(m), (boost::multiprecision::cpp_int)(n));
    if ((err != std::string(""))) {
        std::cout << (((((std::string("A(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }())) + std::string(") = Error: ")) + err);
        std::cout << std::endl;
        return;
    }
    if ((bit_len(res) <= 256)) {
        std::cout << (((((std::string("A(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }())) + std::string(") = ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << res; return ss.str(); }()));
        std::cout << std::endl;
    } else {
        std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << res; return ss.str(); }());
        std::string pre = s.substr(0, 20 - 0);
        std::string suf = s.substr((s.size() - 20), s.size() - (s.size() - 20));
        std::cout << (((((((((std::string("A(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }())) + std::string(") = ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << s.size(); return ss.str(); }())) + std::string(" digits starting/ending with: ")) + pre) + std::string("...")) + suf);
        std::cout << std::endl;
    }
}

int main() {
    show(0, 0);
    show(1, 2);
    show(2, 4);
    show(3, 100);
    show(3, 1000000);
    show(4, 1);
    show(4, 2);
    show(4, 3);
    return 0;
}
