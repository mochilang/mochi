// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:18:18 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t indexOf(std::string s, std::string ch);
std::vector<std::string> shuffle(const std::vector<std::string>& xs);
int main();

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = 0;
    while ((i < s.size())) {
        if ((s.substr(i, (i + 1) - i) == ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

std::vector<std::string> shuffle(const std::vector<std::string>& xs) {
    std::vector<std::string> arr = xs;
    int64_t i = (arr.size() - 1);
    while ((i > 0)) {
        auto j = (_now() % (i + 1));
        std::string tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
        i = (i - 1);
    }
    return arr;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::cout << std::string("Cows and Bulls");
        std::cout << std::endl;
        std::cout << std::string("Guess four digit number of unique digits in the range 1 to 9.");
        std::cout << std::endl;
        std::cout << std::string("A correct digit but not in the correct place is a cow.");
        std::cout << std::endl;
        std::cout << std::string("A correct digit in the correct place is a bull.");
        std::cout << std::endl;
        std::vector<std::string> digits = std::vector<std::string>{std::string("1"), std::string("2"), std::string("3"), std::string("4"), std::string("5"), std::string("6"), std::string("7"), std::string("8"), std::string("9")};
        digits = shuffle(digits);
        std::string pat = (((digits[0] + digits[1]) + digits[2]) + digits[3]);
        std::string valid = std::string("123456789");
        while (true) {
            std::cout << std::string("Guess: ");
            std::cout << std::endl;
            std::string guess = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            if ((guess.size() != 4)) {
                std::cout << std::string("Please guess a four digit number.");
                std::cout << std::endl;
                continue;
            }
            int64_t cows = 0;
            int64_t bulls = 0;
            std::string seen = std::string("");
            int64_t i = 0;
            bool malformed = false;
            while ((i < 4)) {
                std::string cg = guess.substr(i, (i + 1) - i);
                if ((_index_of(seen, cg) != -1)) {
                    std::cout << (std::string("Repeated digit: ") + cg);
                    std::cout << std::endl;
                    malformed = true;
                    break;
                }
                seen = (seen + cg);
                int64_t pos = _index_of(pat, cg);
                if ((pos == -1)) {
                    if ((_index_of(valid, cg) == -1)) {
                        std::cout << (std::string("Invalid digit: ") + cg);
                        std::cout << std::endl;
                        malformed = true;
                        break;
                    }
                } else {
                    if ((pos == i)) {
                        bulls = (bulls + 1);
                    } else {
                        cows = (cows + 1);
                    }
                }
                i = (i + 1);
            }
            if (malformed) {
                continue;
            }
            std::cout << (((std::string("Cows: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << cows; return ss.str(); }())) + std::string(", bulls: ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << bulls; return ss.str(); }()));
            std::cout << std::endl;
            if ((bulls == 4)) {
                std::cout << std::string("You got it.");
                std::cout << std::endl;
                break;
            }
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
