// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:22:25 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int> primeFactors(int n);
std::string repeat(std::string ch, int n);
double D(double n);
std::string pad(int n);
int main();

std::vector<int> primeFactors(int n) {
    std::vector<int> factors = {};
    int x = n;
    while (((x % 2) == 0)) {
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(2); return __tmp; }());
        x = (int)((x / 2));
    }
    int p = 3;
    while (((p * p) <= x)) {
        while (((x % p) == 0)) {
            factors = ([&]{ auto __tmp = factors; __tmp.push_back(p); return __tmp; }());
            x = (int)((x / p));
        }
        p = (p + 2);
    }
    if ((x > 1)) {
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(x); return __tmp; }());
    }
    return factors;
}

std::string repeat(std::string ch, int n) {
    std::string s = std::string("");
    int i = 0;
    while ((i < n)) {
        s = (s + ch);
        i = (i + 1);
    }
    return s;
}

double D(double n) {
    if ((n < 0.0)) {
        return -D(-n);
    }
    if ((n < 2.0)) {
        return 0.0;
    }
    std::vector<int> factors = {};
    if ((n < 1e+19)) {
        factors = primeFactors((int)(n));
    } else {
        int g = (int)(((double)(n) / (100.0)));
        factors = primeFactors(g);
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(2); return __tmp; }());
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(2); return __tmp; }());
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(5); return __tmp; }());
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(5); return __tmp; }());
    }
    int c = factors.size();
    if ((c == 1)) {
        return 1.0;
    }
    if ((c == 2)) {
        return (double)((factors[0] + factors[1]));
    }
    double d = ((double)(n) / ((double)(factors[0])));
    return ((D(d) * (double)(factors[0])) + d);
}

std::string pad(int n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < 4)) {
        s = (std::string(" ") + s);
    }
    return s;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<int> vals = {};
        int n = -99;
        while ((n < 101)) {
            vals = ([&]{ auto __tmp = vals; __tmp.push_back((int)(D((double)(n)))); return __tmp; }());
            n = (n + 1);
        }
        int i = 0;
        while ((i < vals.size())) {
            std::string line = std::string("");
            int j = 0;
            while ((j < 10)) {
                line = (line + pad(vals[(i + j)]));
                if ((j < 9)) {
                    line = (line + std::string(" "));
                }
                j = (j + 1);
            }
            std::cout << line;
            std::cout << std::endl;
            i = (i + 10);
        }
        double pow = 1.0;
        int m = 1;
        while ((m < 21)) {
            pow = (pow * 10.0);
            std::string exp = ([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }());
            if ((exp.size() < 2)) {
                exp = (exp + std::string(" "));
            }
            std::string res = (([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }()) + repeat(std::string("0"), (m - 1)));
            std::cout << (((std::string("D(10^") + exp) + std::string(") / 7 = ")) + res);
            std::cout << std::endl;
            m = (m + 1);
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
