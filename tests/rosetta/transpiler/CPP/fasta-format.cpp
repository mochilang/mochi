// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:13:24 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::string> splitLines(std::string s);
std::vector<std::string> parseFasta(std::string text);
int main();

std::string FASTA = (((((std::string(">Rosetta_Example_1\n") + std::string("THERECANBENOSPACE\n")) + std::string(">Rosetta_Example_2\n")) + std::string("THERECANBESEVERAL\n")) + std::string("LINESBUTTHEYALLMUST\n")) + std::string("BECONCATENATED"));

std::vector<std::string> splitLines(std::string s) {
    std::vector<std::string> lines = {};
    int64_t start = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == std::string("\n"))) {
            lines = ([&]{ auto __tmp = lines; __tmp.push_back(s.substr(start, i - start)); return __tmp; }());
            i = (i + int64_t(1));
            start = i;
        } else {
            i = (i + int64_t(1));
        }
    }
    lines = ([&]{ auto __tmp = lines; __tmp.push_back(s.substr(start, s.size() - start)); return __tmp; }());
    return lines;
}

std::vector<std::string> parseFasta(std::string text) {
    std::string key = std::string("");
    std::string val = std::string("");
    std::vector<std::string> out = {};
    for (std::string line : splitLines(text)) {
        if ((line == std::string(""))) {
            continue;
        }
        if ((line.substr(int64_t(0), int64_t(1) - int64_t(0)) == std::string(">"))) {
            if ((key != std::string(""))) {
                out = ([&]{ auto __tmp = out; __tmp.push_back(((key + std::string(": ")) + val)); return __tmp; }());
            }
            std::string hdr = line.substr(int64_t(1), line.size() - int64_t(1));
            int64_t idx = int64_t(0);
            while (((idx < hdr.size()) && (hdr.substr(idx, (idx + int64_t(1)) - idx) != std::string(" ")))) {
                idx = (idx + int64_t(1));
            }
            key = hdr.substr(int64_t(0), idx - int64_t(0));
            val = std::string("");
        } else {
            if ((key == std::string(""))) {
                std::cout << std::string("missing header");
                std::cout << std::endl;
                return {};
            }
            val = (val + line);
        }
    }
    if ((key != std::string(""))) {
        out = ([&]{ auto __tmp = out; __tmp.push_back(((key + std::string(": ")) + val)); return __tmp; }());
    }
    return out;
}

int main() {
    std::vector<std::string> res = parseFasta(FASTA);
    for (std::string line : res) {
        std::cout << line;
        std::cout << std::endl;
    }
    return 0;
}
