// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:40 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}

std::map<std::string, std::any> node(std::string cl, std::any le, int aa, std::any ri);
std::string treeString(std::any t);
std::any balance(std::any t);
std::any ins(std::any tr, int x);
std::any insert(std::any tr, int x);
int main();

std::any tr = nullptr;
int i = 1;

std::map<std::string, std::any> node(std::string cl, std::any le, int aa, std::any ri) {
    return std::map<std::string, std::any>{{"cl", std::any(cl)}, {"le", std::any(le)}, {"aa", std::any(aa)}, {"ri", std::any(ri)}};
}

std::string treeString(std::any t) {
    if ((any_to_double(t) == any_to_double(nullptr))) {
        return std::string("E");
    }
    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(t);
    return ((((((((std::string("T(") + ([&]{ std::ostringstream ss; any_to_stream(ss, m[std::string("cl")]);
 return ss.str(); }())) + std::string(", ")) + treeString(m[std::string("le")])) + std::string(", ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, m[std::string("aa")]);
 return ss.str(); }())) + std::string(", ")) + treeString(m[std::string("ri")])) + std::string(")"));
}

std::any balance(std::any t) {
    if ((any_to_double(t) == any_to_double(nullptr))) {
        return t;
    }
    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(t);
    if ((std::any_cast<std::string>(m[std::string("cl")]) != std::string("B"))) {
        return t;
    }
    std::any le = m[std::string("le")];
    std::any ri = m[std::string("ri")];
    if ((any_to_double(le) != any_to_double(nullptr))) {
        std::map<std::string, std::any> leMap = std::any_cast<std::map<std::string, std::any>>(le);
        if ((std::any_cast<std::string>(leMap[std::string("cl")]) == std::string("R"))) {
            std::any lele = leMap[std::string("le")];
            if ((any_to_double(lele) != any_to_double(nullptr))) {
                std::map<std::string, std::any> leleMap = std::any_cast<std::map<std::string, std::any>>(lele);
                if ((std::any_cast<std::string>(leleMap[std::string("cl")]) == std::string("R"))) {
                    return node(std::string("R"), (std::any)(node(std::string("B"), leleMap[std::string("le")], std::any_cast<int>(leleMap[std::string("aa")]), leleMap[std::string("ri")])), std::any_cast<int>(leMap[std::string("aa")]), (std::any)(node(std::string("B"), leMap[std::string("ri")], std::any_cast<int>(m[std::string("aa")]), ri)));
                }
            }
            std::any leri = leMap[std::string("ri")];
            if ((any_to_double(leri) != any_to_double(nullptr))) {
                std::map<std::string, std::any> leriMap = std::any_cast<std::map<std::string, std::any>>(leri);
                if ((std::any_cast<std::string>(leriMap[std::string("cl")]) == std::string("R"))) {
                    return node(std::string("R"), (std::any)(node(std::string("B"), leMap[std::string("le")], std::any_cast<int>(leMap[std::string("aa")]), leriMap[std::string("le")])), std::any_cast<int>(leriMap[std::string("aa")]), (std::any)(node(std::string("B"), leriMap[std::string("ri")], std::any_cast<int>(m[std::string("aa")]), ri)));
                }
            }
        }
    }
    if ((any_to_double(ri) != any_to_double(nullptr))) {
        std::map<std::string, std::any> riMap = std::any_cast<std::map<std::string, std::any>>(ri);
        if ((std::any_cast<std::string>(riMap[std::string("cl")]) == std::string("R"))) {
            std::any rile = riMap[std::string("le")];
            if ((any_to_double(rile) != any_to_double(nullptr))) {
                std::map<std::string, std::any> rileMap = std::any_cast<std::map<std::string, std::any>>(rile);
                if ((std::any_cast<std::string>(rileMap[std::string("cl")]) == std::string("R"))) {
                    return node(std::string("R"), (std::any)(node(std::string("B"), m[std::string("le")], std::any_cast<int>(m[std::string("aa")]), rileMap[std::string("le")])), std::any_cast<int>(rileMap[std::string("aa")]), (std::any)(node(std::string("B"), rileMap[std::string("ri")], std::any_cast<int>(riMap[std::string("aa")]), riMap[std::string("ri")])));
                }
            }
            std::any riri = riMap[std::string("ri")];
            if ((any_to_double(riri) != any_to_double(nullptr))) {
                std::map<std::string, std::any> ririMap = std::any_cast<std::map<std::string, std::any>>(riri);
                if ((std::any_cast<std::string>(ririMap[std::string("cl")]) == std::string("R"))) {
                    return node(std::string("R"), (std::any)(node(std::string("B"), m[std::string("le")], std::any_cast<int>(m[std::string("aa")]), riMap[std::string("le")])), std::any_cast<int>(riMap[std::string("aa")]), (std::any)(node(std::string("B"), ririMap[std::string("le")], std::any_cast<int>(ririMap[std::string("aa")]), ririMap[std::string("ri")])));
                }
            }
        }
    }
    return t;
}

std::any ins(std::any tr, int x) {
    if ((any_to_double(tr) == any_to_double(nullptr))) {
        return node(std::string("R"), nullptr, x, nullptr);
    }
    if ((x < std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(tr)[std::string("aa")]))) {
        return balance((std::any)(node((std::string)(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(tr)[std::string("cl")])), std::any_cast<std::any>(ins((std::any)(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(tr)[std::string("le")])), x)), (int)(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(tr)[std::string("aa")])), (std::any)(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(tr)[std::string("ri")])))));
    }
    if ((x > std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(tr)[std::string("aa")]))) {
        return balance((std::any)(node((std::string)(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(tr)[std::string("cl")])), (std::any)(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(tr)[std::string("le")])), (int)(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(tr)[std::string("aa")])), std::any_cast<std::any>(ins((std::any)(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(tr)[std::string("ri")])), x)))));
    }
    return tr;
}

std::any insert(std::any tr, int x) {
    std::any t = ins(tr, x);
    if ((any_to_double(t) == any_to_double(nullptr))) {
        return nullptr;
    }
    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(t);
    return node(std::string("B"), m[std::string("le")], std::any_cast<int>(m[std::string("aa")]), m[std::string("ri")]);
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        while ((i <= 16)) {
            tr = insert(tr, i);
            i = (i + 1);
        }
        std::cout << treeString(tr);
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
