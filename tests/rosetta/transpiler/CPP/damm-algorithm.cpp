// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:54:02 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool damm(std::string s);
std::string padLeft(std::string s, int64_t width);
int main();

bool damm(std::string s) {
    std::vector<std::vector<int64_t>> tbl = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(3), int64_t(1), int64_t(7), int64_t(5), int64_t(9), int64_t(8), int64_t(6), int64_t(4), int64_t(2)}, std::vector<int64_t>{int64_t(7), int64_t(0), int64_t(9), int64_t(2), int64_t(1), int64_t(5), int64_t(4), int64_t(8), int64_t(6), int64_t(3)}, std::vector<int64_t>{int64_t(4), int64_t(2), int64_t(0), int64_t(6), int64_t(8), int64_t(7), int64_t(1), int64_t(3), int64_t(5), int64_t(9)}, std::vector<int64_t>{int64_t(1), int64_t(7), int64_t(5), int64_t(0), int64_t(9), int64_t(8), int64_t(3), int64_t(4), int64_t(2), int64_t(6)}, std::vector<int64_t>{int64_t(6), int64_t(1), int64_t(2), int64_t(3), int64_t(0), int64_t(4), int64_t(5), int64_t(9), int64_t(7), int64_t(8)}, std::vector<int64_t>{int64_t(3), int64_t(6), int64_t(7), int64_t(4), int64_t(2), int64_t(0), int64_t(9), int64_t(5), int64_t(8), int64_t(1)}, std::vector<int64_t>{int64_t(5), int64_t(8), int64_t(6), int64_t(9), int64_t(7), int64_t(2), int64_t(0), int64_t(1), int64_t(3), int64_t(4)}, std::vector<int64_t>{int64_t(8), int64_t(9), int64_t(4), int64_t(5), int64_t(3), int64_t(6), int64_t(2), int64_t(0), int64_t(1), int64_t(7)}, std::vector<int64_t>{int64_t(9), int64_t(4), int64_t(3), int64_t(8), int64_t(6), int64_t(1), int64_t(7), int64_t(2), int64_t(0), int64_t(5)}, std::vector<int64_t>{int64_t(2), int64_t(5), int64_t(8), int64_t(1), int64_t(4), int64_t(3), int64_t(6), int64_t(7), int64_t(9), int64_t(0)}};
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", int64_t(0)}, {"1", int64_t(1)}, {"2", int64_t(2)}, {"3", int64_t(3)}, {"4", int64_t(4)}, {"5", int64_t(5)}, {"6", int64_t(6)}, {"7", int64_t(7)}, {"8", int64_t(8)}, {"9", int64_t(9)}};
    int64_t interim = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        int64_t digit = (int64_t)(([&](auto& __m){ auto __it = __m.find(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s)); return __it != __m.end() ? __it->second : 0; })(digits));
        std::vector<int64_t> row = tbl[interim];
        interim = row[digit];
        i = (i + int64_t(1));
    }
    return (interim == int64_t(0));
}

std::string padLeft(std::string s, int64_t width) {
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

int main() {
    for (std::string s : std::vector<std::string>{std::string("5724"), std::string("5727"), std::string("112946"), std::string("112949")}) {
        std::cout << ((padLeft(s, int64_t(6)) + std::string("  ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << damm(s); return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
