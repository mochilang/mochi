// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:45:40 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <type_traits>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t parseIntDigits(std::string s);
int64_t parseDC(std::string s);
int64_t parseRate(std::string s);
std::string dcString(int64_t dc);
int64_t extend(int64_t dc, int64_t n);
int64_t tax(int64_t total, int64_t rate);
std::string padLeft(std::string s, int64_t n);
int main();

int64_t parseIntDigits(std::string s) {
    int64_t n = int64_t(0);
    int64_t i = int64_t(0);
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", int64_t(0)}, {"1", int64_t(1)}, {"2", int64_t(2)}, {"3", int64_t(3)}, {"4", int64_t(4)}, {"5", int64_t(5)}, {"6", int64_t(6)}, {"7", int64_t(7)}, {"8", int64_t(8)}, {"9", int64_t(9)}};
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(digits, ch)) {
            return int64_t(0);
        }
        n = ((n * int64_t(10)) + digits.at(ch));
        i = (i + int64_t(1));
    }
    return n;
}

int64_t parseDC(std::string s) {
    bool neg = false;
    if (((s.size() > int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(s) == std::string("-")))) {
        neg = true;
        s = s.substr(int64_t(1), s.size() - int64_t(1));
    }
    int64_t dollars = int64_t(0);
    int64_t cents = int64_t(0);
    int64_t i = int64_t(0);
    bool seenDot = false;
    int64_t centDigits = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if ((ch == std::string("."))) {
            seenDot = true;
            i = (i + int64_t(1));
            continue;
        }
        int64_t d = parseIntDigits(ch);
        if (seenDot) {
            if ((centDigits < int64_t(2))) {
                cents = ((cents * int64_t(10)) + d);
                centDigits = (centDigits + int64_t(1));
            }
        } else {
            dollars = ((dollars * int64_t(10)) + d);
        }
        i = (i + int64_t(1));
    }
    if ((centDigits == int64_t(1))) {
        cents = (cents * int64_t(10));
    }
    int64_t val = ((dollars * int64_t(100)) + cents);
    if (neg) {
        val = -val;
    }
    return val;
}

int64_t parseRate(std::string s) {
    bool neg = false;
    if (((s.size() > int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(s) == std::string("-")))) {
        neg = true;
        s = s.substr(int64_t(1), s.size() - int64_t(1));
    }
    int64_t whole = int64_t(0);
    int64_t frac = int64_t(0);
    int64_t digits = int64_t(0);
    bool seenDot = false;
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if ((ch == std::string("."))) {
            seenDot = true;
            i = (i + int64_t(1));
            continue;
        }
        int64_t d = parseIntDigits(ch);
        if (seenDot) {
            if ((digits < int64_t(4))) {
                frac = ((frac * int64_t(10)) + d);
                digits = (digits + int64_t(1));
            }
        } else {
            whole = ((whole * int64_t(10)) + d);
        }
        i = (i + int64_t(1));
    }
    while ((digits < int64_t(4))) {
        frac = (frac * int64_t(10));
        digits = (digits + int64_t(1));
    }
    int64_t val = ((whole * int64_t(10000)) + frac);
    if (neg) {
        val = -val;
    }
    return val;
}

std::string dcString(int64_t dc) {
    int64_t d = (dc / int64_t(100));
    int64_t n = dc;
    if ((n < int64_t(0))) {
        n = -n;
    }
    int64_t c = (n % int64_t(100));
    std::string cstr = ([&]{ std::ostringstream ss; ss << std::boolalpha << c; return ss.str(); }());
    if ((cstr.size() == int64_t(1))) {
        cstr = (std::string("0") + cstr);
    }
    return ((([&]{ std::ostringstream ss; ss << std::boolalpha << d; return ss.str(); }()) + std::string(".")) + cstr);
}

int64_t extend(int64_t dc, int64_t n) {
    return (dc * n);
}

int64_t tax(int64_t total, int64_t rate) {
    return (int64_t)((((total * rate) + int64_t(5000)) / int64_t(10000)));
}

std::string padLeft(std::string s, int64_t n) {
    std::string out = s;
    while ((out.size() < n)) {
        out = (std::string(" ") + out);
    }
    return out;
}

int main() {
    int64_t hp = parseDC(std::string("5.50"));
    int64_t mp = parseDC(std::string("2.86"));
    int64_t rate = parseRate(std::string("0.0765"));
    int64_t totalBeforeTax = (extend(hp, int64_t(4000000000000000)) + extend(mp, int64_t(2)));
    int64_t t = tax(totalBeforeTax, rate);
    int64_t total = (totalBeforeTax + t);
    std::cout << (std::string("Total before tax: ") + padLeft(dcString(totalBeforeTax), int64_t(22)));
    std::cout << std::endl;
    std::cout << (std::string("             Tax: ") + padLeft(dcString(t), int64_t(22)));
    std::cout << std::endl;
    std::cout << (std::string("           Total: ") + padLeft(dcString(total), int64_t(22)));
    std::cout << std::endl;
    return 0;
}
