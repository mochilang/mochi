// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:49:02 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t toUnsigned16(int64_t n);
std::string bin16(int64_t n);
int64_t bit_and(int64_t a, int64_t b);
int64_t bit_or(int64_t a, int64_t b);
int64_t bit_xor(int64_t a, int64_t b);
int64_t bit_not(int64_t a);
int64_t shl(int64_t a, int64_t b);
int64_t shr(int64_t a, int64_t b);
int64_t las(int64_t a, int64_t b);
int64_t ras(int64_t a, int64_t b);
int64_t rol(int64_t a, int64_t b);
int64_t ror(int64_t a, int64_t b);
void bitwise(int64_t a, int64_t b);
int main();

int64_t toUnsigned16(int64_t n) {
    int64_t u = n;
    if ((u < 0)) {
        u = (u + 65536);
    }
    return (u % 65536);
}

std::string bin16(int64_t n) {
    int64_t u = toUnsigned16(n);
    std::string bits = std::string("");
    int64_t mask = 32768;
    for (int i = 0; i < 16; i++ ) {
        if ((u >= mask)) {
            bits = (bits + std::string("1"));
            u = (u - mask);
        } else {
            bits = (bits + std::string("0"));
        }
        mask = (int64_t)((mask / 2));
    }
    return bits;
}

int64_t bit_and(int64_t a, int64_t b) {
    int64_t ua = toUnsigned16(a);
    int64_t ub = toUnsigned16(b);
    int64_t res = 0;
    int64_t bit = 1;
    for (int i = 0; i < 16; i++ ) {
        if ((((ua % 2) == 1) && ((ub % 2) == 1))) {
            res = (res + bit);
        }
        ua = (int64_t)((ua / 2));
        ub = (int64_t)((ub / 2));
        bit = (bit * 2);
    }
    return res;
}

int64_t bit_or(int64_t a, int64_t b) {
    int64_t ua = toUnsigned16(a);
    int64_t ub = toUnsigned16(b);
    int64_t res = 0;
    int64_t bit = 1;
    for (int i = 0; i < 16; i++ ) {
        if ((((ua % 2) == 1) || ((ub % 2) == 1))) {
            res = (res + bit);
        }
        ua = (int64_t)((ua / 2));
        ub = (int64_t)((ub / 2));
        bit = (bit * 2);
    }
    return res;
}

int64_t bit_xor(int64_t a, int64_t b) {
    int64_t ua = toUnsigned16(a);
    int64_t ub = toUnsigned16(b);
    int64_t res = 0;
    int64_t bit = 1;
    for (int i = 0; i < 16; i++ ) {
        int64_t abit = (ua % 2);
        int64_t bbit = (ub % 2);
        if ((((abit == 1) && (bbit == 0)) || ((abit == 0) && (bbit == 1)))) {
            res = (res + bit);
        }
        ua = (int64_t)((ua / 2));
        ub = (int64_t)((ub / 2));
        bit = (bit * 2);
    }
    return res;
}

int64_t bit_not(int64_t a) {
    int64_t ua = toUnsigned16(a);
    return (65535 - ua);
}

int64_t shl(int64_t a, int64_t b) {
    int64_t ua = toUnsigned16(a);
    int64_t i = 0;
    while ((i < b)) {
        ua = ((ua * 2) % 65536);
        i = (i + 1);
    }
    return ua;
}

int64_t shr(int64_t a, int64_t b) {
    int64_t ua = toUnsigned16(a);
    int64_t i = 0;
    while ((i < b)) {
        ua = (int64_t)((ua / 2));
        i = (i + 1);
    }
    return ua;
}

int64_t las(int64_t a, int64_t b) {
    return shl(a, b);
}

int64_t ras(int64_t a, int64_t b) {
    int64_t val = a;
    int64_t i = 0;
    while ((i < b)) {
        if ((val >= 0)) {
            val = (int64_t)((val / 2));
        } else {
            val = (int64_t)(((val - 1) / 2));
        }
        i = (i + 1);
    }
    return toUnsigned16(val);
}

int64_t rol(int64_t a, int64_t b) {
    int64_t ua = toUnsigned16(a);
    int64_t left = shl(ua, b);
    int64_t right = shr(ua, (16 - b));
    return toUnsigned16((left + right));
}

int64_t ror(int64_t a, int64_t b) {
    int64_t ua = toUnsigned16(a);
    int64_t right = shr(ua, b);
    int64_t left = shl(ua, (16 - b));
    return toUnsigned16((left + right));
}

void bitwise(int64_t a, int64_t b) {
    std::cout << (std::string("a:   ") + bin16(a));
    std::cout << std::endl;
    std::cout << (std::string("b:   ") + bin16(b));
    std::cout << std::endl;
    std::cout << (std::string("and: ") + bin16(bit_and(a, b)));
    std::cout << std::endl;
    std::cout << (std::string("or:  ") + bin16(bit_or(a, b)));
    std::cout << std::endl;
    std::cout << (std::string("xor: ") + bin16(bit_xor(a, b)));
    std::cout << std::endl;
    std::cout << (std::string("not: ") + bin16(bit_not(a)));
    std::cout << std::endl;
    if ((b < 0)) {
        std::cout << std::string("Right operand is negative, but all shifts require an unsigned right operand (shift distance).");
        std::cout << std::endl;
        return;
    }
    std::cout << (std::string("shl: ") + bin16(shl(a, b)));
    std::cout << std::endl;
    std::cout << (std::string("shr: ") + bin16(shr(a, b)));
    std::cout << std::endl;
    std::cout << (std::string("las: ") + bin16(las(a, b)));
    std::cout << std::endl;
    std::cout << (std::string("ras: ") + bin16(ras(a, b)));
    std::cout << std::endl;
    std::cout << (std::string("rol: ") + bin16(rol(a, b)));
    std::cout << std::endl;
    std::cout << (std::string("ror: ") + bin16(ror(a, b)));
    std::cout << std::endl;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        bitwise(-460, 6);
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
