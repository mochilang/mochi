// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:16:12 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double floorf(double x);
int64_t indexOf(std::string s, std::string ch);
std::string fmt8(double x);
std::string pad2(int64_t x);
int main();
int64_t pow_int(int64_t base, int64_t _exp);

double floorf(double x) {
    int64_t y = (int64_t)(x);
    return (double)(y);
}

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return (int64_t(0) - int64_t(1));
}

std::string fmt8(double x) {
    double y = ((double)(floorf(((x * 100000000.0) + 0.5))) / (100000000.0));
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }());
    int64_t dot = _index_of(s, std::string("."));
    if ((dot == (int64_t(0) - int64_t(1)))) {
        s = (s + std::string(".00000000"));
    } else {
        int64_t decs = ((s.size() - dot) - int64_t(1));
        while ((decs < int64_t(8))) {
            s = (s + std::string("0"));
            decs = (decs + int64_t(1));
        }
    }
    return s;
}

std::string pad2(int64_t x) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << x; return ss.str(); }());
    if ((s.size() < int64_t(2))) {
        s = (std::string(" ") + s);
    }
    return s;
}

int64_t pow_int(int64_t base, int64_t _exp) {
    int64_t r = int64_t(1);
    int64_t b = base;
    int64_t e = _exp;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            r = (r * b);
        }
        b = (b * b);
        e = (int64_t)((e / int64_t(2)));
    }
    return r;
}

int main() {
    int64_t maxIt = int64_t(13);
    int64_t maxItJ = int64_t(10);
    double a1 = 1.0;
    double a2 = 0.0;
    double d1 = 3.2;
    std::cout << std::string(" i       d");
    std::cout << std::endl;
    int64_t i = int64_t(2);
    while ((i <= maxIt)) {
        double a = (a1 + ((double)((a1 - a2)) / (d1)));
        int64_t j = int64_t(1);
        while ((j <= maxItJ)) {
            double x = 0.0;
            double y = 0.0;
            int64_t k = int64_t(1);
            int64_t limit = pow_int(int64_t(2), i);
            while ((k <= limit)) {
                y = (1.0 - ((2.0 * y) * x));
                x = (a - (x * x));
                k = (k + int64_t(1));
            }
            a = (a - ((double)(x) / (y)));
            j = (j + int64_t(1));
        }
        double d = ((double)((a1 - a2)) / ((a - a1)));
        std::cout << ((pad2(i) + std::string("    ")) + fmt8(d));
        std::cout << std::endl;
        d1 = d;
        a2 = a1;
        a1 = a;
        i = (i + int64_t(1));
    }
    return 0;
}
