// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:11:29 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t nextRand(int64_t seed);
std::vector<std::any> shuffleChars(std::string s, int64_t seed);
std::vector<std::any> bestShuffle(std::string s, int64_t seed);
int main();

int64_t nextRand(int64_t seed) {
    return (((seed * int64_t(1664525)) + int64_t(1013904223)) % int64_t(2147483647));
}

std::vector<std::any> shuffleChars(std::string s, int64_t seed) {
    std::vector<std::string> chars = {};
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        chars = ([&]{ auto __tmp = chars; __tmp.push_back(s.substr(i, (i + int64_t(1)) - i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t sd = seed;
    int64_t idx = (chars.size() - int64_t(1));
    while ((idx > int64_t(0))) {
        sd = nextRand(sd);
        int64_t j = (sd % (idx + int64_t(1)));
        std::string tmp = chars[idx];
        chars[idx] = chars[j];
        chars[j] = tmp;
        idx = (idx - int64_t(1));
    }
    std::string res = std::string("");
    i = int64_t(0);
    while ((i < chars.size())) {
        res = (res + chars[i]);
        i = (i + int64_t(1));
    }
    return std::vector<std::any>{std::any(res), std::any(sd)};
}

std::vector<std::any> bestShuffle(std::string s, int64_t seed) {
    std::vector<std::any> r = shuffleChars(s, seed);
    std::any t = r[int64_t(0)];
    std::any sd = r[int64_t(1)];
    std::vector<std::string> arr = {};
    int64_t i = int64_t(0);
    while ((i < std::any_cast<std::string>(t).size())) {
        arr = ([&]{ auto __tmp = arr; __tmp.push_back((std::string)std::any_cast<std::string>(t).substr(i, (i + int64_t(1)) - i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < arr.size())) {
        int64_t j = int64_t(0);
        while ((j < arr.size())) {
            if ((((i != j) && (arr[i] != s.substr(j, (j + int64_t(1)) - j))) && (arr[j] != s.substr(i, (i + int64_t(1)) - i)))) {
                std::string tmp = arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;
                break;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    int64_t count = int64_t(0);
    i = int64_t(0);
    while ((i < arr.size())) {
        if ((arr[i] == s.substr(i, (i + int64_t(1)) - i))) {
            count = (count + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    std::string out = std::string("");
    i = int64_t(0);
    while ((i < arr.size())) {
        out = (out + arr[i]);
        i = (i + int64_t(1));
    }
    return std::vector<std::any>{std::any(out), sd, std::any(count)};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::string> ts = std::vector<std::string>{std::string("abracadabra"), std::string("seesaw"), std::string("elk"), std::string("grrrrrr"), std::string("up"), std::string("a")};
        int64_t seed = int64_t(1);
        int64_t i = int64_t(0);
        while ((i < ts.size())) {
            std::vector<std::any> r = bestShuffle(ts[i], seed);
            std::any shuf = r[int64_t(0)];
            seed = std::any_cast<int64_t>(r[int64_t(1)]);
            std::any cnt = r[int64_t(2)];
            std::cout << (((((ts[i] + std::string(" -> ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, shuf);
 return ss.str(); }())) + std::string(" (")) + ([&]{ std::ostringstream ss; any_to_stream(ss, cnt);
 return ss.str(); }())) + std::string(")"));
            std::cout << std::endl;
            i = (i + int64_t(1));
        }
    }
    return 0;
}
