// Generated by Mochi transpiler v0.10.39 on 2025-07-24 16:35:14 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <numeric>
#include <iomanip>
#include <optional>



std::vector<int> divisors(int n);
int sum(std::vector<int>& xs);
std::string sumStr(std::vector<int>& xs);
std::string pad2(int n);
std::string pad5(int n);
int abundantOdd(int searchFrom, int countFrom, int countTo, bool printOne);
int main();

std::vector<int> divisors(int n) {
    std::vector<int> divs = std::vector{1};
    std::vector<int> divs2 = {};
    int i = 2;
    while (((i * i) <= n)) {
        if (((n % i) == 0)) {
            int j = (int)((n / i));
            divs = ([&]{ auto __tmp = divs; __tmp.push_back(i); return __tmp; }());
            if ((i != j)) {
                divs2 = ([&]{ auto __tmp = divs2; __tmp.push_back(j); return __tmp; }());
            }
        }
        i = (i + 1);
    }
    int j = (divs2.size() - 1);
    while ((j >= 0)) {
        divs = ([&]{ auto __tmp = divs; __tmp.push_back(divs2[j]); return __tmp; }());
        j = (j - 1);
    }
    return divs;
}

int sum(std::vector<int>& xs) {
    int tot = 0;
    for (int v : xs) {
        tot = (tot + v);
    }
    return tot;
}

std::string sumStr(std::vector<int>& xs) {
    std::string s = std::string("");
    int i = 0;
    while ((i < xs.size())) {
        s = ((s + ([&]{ std::ostringstream ss; ss << std::boolalpha << xs[i]; return ss.str(); }())) + std::string(" + "));
        i = (i + 1);
    }
    return s.substr(0, (s.size() - 3) - 0);
}

std::string pad2(int n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    if ((s.size() < 2)) {
        return (std::string(" ") + s);
    }
    return s;
}

std::string pad5(int n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < 5)) {
        s = (std::string(" ") + s);
    }
    return s;
}

int abundantOdd(int searchFrom, int countFrom, int countTo, bool printOne) {
    int count = countFrom;
    int n = searchFrom;
    while ((count < countTo)) {
        std::vector<int> divs = divisors(n);
        double tot = ([&]{ auto __tmp = divs; return std::accumulate(__tmp.begin(), __tmp.end(), 0.0); }());
        if ((tot > n)) {
            count = (count + 1);
            if ((printOne && (count < countTo))) {
                n = (n + 2);
                continue;
            }
            std::string s = sumStr(divs);
            if (!printOne) {
                std::cout << ((((((pad2((int)(count)) + std::string(". ")) + pad5(n)) + std::string(" < ")) + s) + std::string(" = ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << tot; return ss.str(); }()));
                std::cout << std::endl;
            } else {
                std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()) + std::string(" < ")) + s) + std::string(" = ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << tot; return ss.str(); }()));
                std::cout << std::endl;
            }
        }
        n = (n + 2);
    }
    return n;
}

int main() {
    int max = 25;
    std::cout << ((std::string("The first ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << max; return ss.str(); }())) + std::string(" abundant odd numbers are:"));
    std::cout << std::endl;
    int n = abundantOdd(1, 0, (int)(max), false);
    std::cout << std::string("\nThe one thousandth abundant odd number is:");
    std::cout << std::endl;
    abundantOdd(n, (int)(max), 1000, true);
    std::cout << std::string("\nThe first abundant odd number above one billion is:");
    std::cout << std::endl;
    abundantOdd(1000000001, 0, 1, true);
    return 0;
}
