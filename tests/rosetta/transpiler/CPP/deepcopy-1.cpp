// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:54:37 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct cds;

std::ostream& operator<<(std::ostream&, const cds&);


struct cds {
    int64_t i;
    std::string s;
    std::vector<int64_t> b;
    std::map<int64_t, bool> m;
    auto operator<=>(const cds&) const = default;
};

std::ostream& operator<<(std::ostream& os, const cds& v) {
    os << '{' << "'i': "<< v.i
 << ", " << "'s': "<< "'" << v.s << "'"
 << ", " << "'b': "<< "["; for(size_t i=0;i<v.b.size();++i){ if(i>0) os << ", "; os << v.b[i]; } os << "]"
 << ", " << "'m': "<< "{"; bool first_3=true; for(const auto& p: v.m){ if(!first_3) os << ", "; first_3=false; os << p.first << ': ' << p.second; } os << "}"
 << '}';
    return os;
}

std::vector<int64_t> copyList(const std::vector<int64_t>& src);
std::map<int64_t, bool> copyMap(const std::map<int64_t, bool>& src);
cds deepcopy(const cds& c);
std::string cdsStr(const cds& c);
int main();

cds c1 = cds{.i = int64_t(1), .s = std::string("one"), .b = std::vector<int64_t>{int64_t(117), int64_t(110), int64_t(105), int64_t(116)}, .m = std::map<int64_t, bool>{{int64_t(1), true}}};
cds c2 = deepcopy(c1);

std::vector<int64_t> copyList(const std::vector<int64_t>& src) {
    std::vector<int64_t> out = {};
    for (int64_t v : src) {
        out = ([&]{ auto __tmp = out; __tmp.push_back(v); return __tmp; }());
    }
    return out;
}

std::map<int64_t, bool> copyMap(const std::map<int64_t, bool>& src) {
    std::map<int64_t, bool> out = {};
    for (std::map<int64_t, bool> k : src) {
        out[static_cast<size_t>(k)] = ([&](auto& __m){ auto __it = __m.find(static_cast<size_t>(k)); return __it != __m.end() ? __it->second : false; })(src);
    }
    return out;
}

cds deepcopy(const cds& c) {
    return cds{.i = c.i, .s = c.s, .b = copyList(c.b), .m = copyMap(c.m)};
}

std::string cdsStr(const cds& c) {
    std::string bs = std::string("[");
    int64_t i = int64_t(0);
    while ((i < c.b.size())) {
        bs = (bs + ([&]{ std::ostringstream ss; ss << std::boolalpha << c.b[i]; return ss.str(); }()));
        if ((i < (c.b.size() - int64_t(1)))) {
            bs = (bs + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    bs = (bs + std::string("]"));
    std::string ms = std::string("map[");
    bool first = true;
    for (auto k : c.m) {
        if (!first) {
            ms = (ms + std::string(" "));
        }
        ms = (((ms + ([&]{ std::ostringstream ss; any_to_stream(ss, k);
 return ss.str(); }())) + std::string(":")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](auto& __m){ auto __it = __m.find(static_cast<size_t>(k)); return __it != __m.end() ? __it->second : false; })(c.m); return ss.str(); }()));
        first = false;
    }
    ms = (ms + std::string("]"));
    return ((((((((std::string("{") + ([&]{ std::ostringstream ss; ss << std::boolalpha << c.i; return ss.str(); }())) + std::string(" ")) + c.s) + std::string(" ")) + bs) + std::string(" ")) + ms) + std::string("}"));
}

int main() {
    std::cout << cdsStr(c1);
    std::cout << std::endl;
    std::cout << cdsStr(c2);
    std::cout << std::endl;
    c1 = cds{.i = int64_t(0), .s = std::string("nil"), .b = std::vector<int64_t>{int64_t(122), int64_t(101), int64_t(114), int64_t(111)}, .m = std::map<int64_t, bool>{{int64_t(1), false}}};
    std::cout << cdsStr(c1);
    std::cout << std::endl;
    std::cout << cdsStr(c2);
    std::cout << std::endl;
    return 0;
}
