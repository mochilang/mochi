// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:29:32 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string padLeft(std::string s, int w);
int indexOfFrom(std::string s, std::string ch, int start);
bool containsStr(std::string s, std::string sub);
std::vector<std::string> distinct(const std::vector<std::string>& slist);
std::vector<std::vector<std::string>> permutations(const std::vector<std::string>& xs);
int headTailOverlap(std::string s1, std::string s2);
std::vector<std::string> deduplicate(const std::vector<std::string>& slist);
std::string joinAll(const std::vector<std::string>& ss);
std::string shortestCommonSuperstring(const std::vector<std::string>& slist);
void printCounts(std::string seq);
int main();

std::string padLeft(std::string s, int w) {
    std::string res = std::string("");
    int n = (w - s.size());
    while ((n > 0)) {
        res = (res + std::string(" "));
        n = (n - 1);
    }
    return (res + s);
}

int indexOfFrom(std::string s, std::string ch, int start) {
    int i = start;
    while ((i < s.size())) {
        if ((s.substr(i, (i + 1) - i) == ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

bool containsStr(std::string s, std::string sub) {
    int i = 0;
    int sl = s.size();
    int subl = sub.size();
    while ((i <= (sl - subl))) {
        if ((s.substr(i, (i + subl) - i) == sub)) {
            return true;
        }
        i = (i + 1);
    }
    return false;
}

std::vector<std::string> distinct(const std::vector<std::string>& slist) {
    std::vector<std::string> res = {};
    for (std::string s : slist) {
        bool found = false;
        for (std::string r : res) {
            if ((r == s)) {
                found = true;
                break;
            }
        }
        if (!found) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(s); return __tmp; }());
        }
    }
    return res;
}

std::vector<std::vector<std::string>> permutations(const std::vector<std::string>& xs) {
    if ((xs.size() <= 1)) {
        return std::vector<std::vector<std::string>>{xs};
    }
    std::vector<std::vector<std::string>> res = {};
    int i = 0;
    while ((i < xs.size())) {
        std::vector<std::string> rest = {};
        int j = 0;
        while ((j < xs.size())) {
            if ((j != i)) {
                rest = ([&]{ auto __tmp = rest; __tmp.push_back(xs[j]); return __tmp; }());
            }
            j = (j + 1);
        }
        std::vector<std::vector<std::string>> subs = permutations(rest);
        for (std::vector<std::string> p : subs) {
            std::vector<std::string> perm = std::vector<std::string>{xs[i]};
            int k = 0;
            while ((k < p.size())) {
                perm = ([&]{ auto __tmp = perm; __tmp.push_back(p[k]); return __tmp; }());
                k = (k + 1);
            }
            res = ([&]{ auto __tmp = res; __tmp.push_back(perm); return __tmp; }());
        }
        i = (i + 1);
    }
    return res;
}

int headTailOverlap(std::string s1, std::string s2) {
    int start = 0;
    while (true) {
        int ix = indexOfFrom(s1, ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 1 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+1); })(s2), start);
        if ((ix == (0 - 1))) {
            return 0;
        }
        start = ix;
        if ((s2.substr(0, (s1.size() - start) - 0) == s1.substr(start, s1.size() - start))) {
            return (s1.size() - start);
        }
        start = (start + 1);
    }
}

std::vector<std::string> deduplicate(const std::vector<std::string>& slist) {
    std::vector<std::string> arr = distinct(slist);
    std::vector<std::string> filtered = {};
    int i = 0;
    while ((i < arr.size())) {
        std::string s1 = arr[i];
        bool within = false;
        int j = 0;
        while ((j < arr.size())) {
            if (((j != i) && containsStr(arr[j], s1))) {
                within = true;
                break;
            }
            j = (j + 1);
        }
        if (!within) {
            filtered = ([&]{ auto __tmp = filtered; __tmp.push_back(s1); return __tmp; }());
        }
        i = (i + 1);
    }
    return filtered;
}

std::string joinAll(const std::vector<std::string>& ss) {
    std::string out = std::string("");
    for (std::string s : ss) {
        out = (out + s);
    }
    return out;
}

std::string shortestCommonSuperstring(const std::vector<std::string>& slist) {
    std::vector<std::string> ss = deduplicate(slist);
    std::string shortest = joinAll(ss);
    std::vector<std::vector<std::string>> perms = permutations(ss);
    int idx = 0;
    while ((idx < perms.size())) {
        std::vector<std::string> perm = perms[idx];
        std::string sup = perm[0];
        int i = 0;
        while ((i < (ss.size() - 1))) {
            int ov = headTailOverlap(perm[i], perm[(i + 1)]);
            sup = (sup + perm[(i + 1)].substr(ov, perm[(i + 1)].size() - ov));
            i = (i + 1);
        }
        if ((sup.size() < shortest.size())) {
            shortest = sup;
        }
        idx = (idx + 1);
    }
    return shortest;
}

void printCounts(std::string seq) {
    int a = 0;
    int c = 0;
    int g = 0;
    int t = 0;
    int i = 0;
    while ((i < seq.size())) {
        std::string ch = seq.substr(i, (i + 1) - i);
        if ((ch == std::string("A"))) {
            a = (a + 1);
        } else {
            if ((ch == std::string("C"))) {
                c = (c + 1);
            } else {
                if ((ch == std::string("G"))) {
                    g = (g + 1);
                } else {
                    if ((ch == std::string("T"))) {
                        t = (t + 1);
                    }
                }
            }
        }
        i = (i + 1);
    }
    int total = seq.size();
    std::cout << ((std::string("\nNucleotide counts for ") + seq) + std::string(":\n"));
    std::cout << std::endl;
    std::cout << (padLeft(std::string("A"), 10) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()), 12));
    std::cout << std::endl;
    std::cout << (padLeft(std::string("C"), 10) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << c; return ss.str(); }()), 12));
    std::cout << std::endl;
    std::cout << (padLeft(std::string("G"), 10) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << g; return ss.str(); }()), 12));
    std::cout << std::endl;
    std::cout << (padLeft(std::string("T"), 10) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << t; return ss.str(); }()), 12));
    std::cout << std::endl;
    std::cout << (padLeft(std::string("Other"), 10) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << (total - (((a + c) + g) + t)); return ss.str(); }()), 12));
    std::cout << std::endl;
    std::cout << std::string("  ____________________");
    std::cout << std::endl;
    std::cout << (padLeft(std::string("Total length"), 14) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << total; return ss.str(); }()), 8));
    std::cout << std::endl;
}

int main() {
    std::vector<std::vector<std::string>> tests = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("TA"), std::string("AAG"), std::string("TA"), std::string("GAA"), std::string("TA")}, std::vector<std::string>{std::string("CATTAGGG"), std::string("ATTAG"), std::string("GGG"), std::string("TA")}, std::vector<std::string>{std::string("AAGAUGGA"), std::string("GGAGCGCAUC"), std::string("AUCGCAAUAAGGA")}, std::vector<std::string>{std::string("ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT"), std::string("GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT"), std::string("CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"), std::string("TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"), std::string("AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT"), std::string("GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC"), std::string("CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT"), std::string("TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"), std::string("CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC"), std::string("GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT"), std::string("TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"), std::string("CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"), std::string("TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA")}};
    for (std::vector<std::string> seqs : tests) {
        std::string scs = shortestCommonSuperstring(seqs);
        printCounts(scs);
    }
    return 0;
}
