// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:13:08 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string padLeft(std::string s, int64_t w);
int64_t indexOfFrom(std::string s, std::string ch, int64_t start);
bool containsStr(std::string s, std::string sub);
std::vector<std::string> distinct(const std::vector<std::string>& slist);
std::vector<std::vector<std::string>> permutations(const std::vector<std::string>& xs);
int64_t headTailOverlap(std::string s1, std::string s2);
std::vector<std::string> deduplicate(const std::vector<std::string>& slist);
std::string joinAll(const std::vector<std::string>& ss);
std::string shortestCommonSuperstring(const std::vector<std::string>& slist);
void printCounts(std::string seq);
int main();

std::string padLeft(std::string s, int64_t w) {
    std::string res = std::string("");
    int64_t n = (w - s.size());
    while ((n > int64_t(0))) {
        res = (res + std::string(" "));
        n = (n - int64_t(1));
    }
    return (res + s);
}

int64_t indexOfFrom(std::string s, std::string ch, int64_t start) {
    int64_t i = start;
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

bool containsStr(std::string s, std::string sub) {
    int64_t i = int64_t(0);
    int sl = s.size();
    int subl = sub.size();
    while ((i <= (sl - subl))) {
        if ((s.substr(i, (i + subl) - i) == sub)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<std::string> distinct(const std::vector<std::string>& slist) {
    std::vector<std::string> res = {};
    for (std::string s : slist) {
        bool found = false;
        for (std::string r : res) {
            if ((r == s)) {
                found = true;
                break;
            }
        }
        if (!found) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(s); return __tmp; }());
        }
    }
    return res;
}

std::vector<std::vector<std::string>> permutations(const std::vector<std::string>& xs) {
    if ((xs.size() <= int64_t(1))) {
        return std::vector<std::vector<std::string>>{xs};
    }
    std::vector<std::vector<std::string>> res = {};
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        std::vector<std::string> rest = {};
        int64_t j = int64_t(0);
        while ((j < xs.size())) {
            if ((j != i)) {
                rest = ([&]{ auto __tmp = rest; __tmp.push_back(xs[j]); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        std::vector<std::vector<std::string>> subs = permutations(rest);
        for (std::vector<std::string> p : subs) {
            std::vector<std::string> perm = std::vector<std::string>{xs[i]};
            int64_t k = int64_t(0);
            while ((k < p.size())) {
                perm = ([&]{ auto __tmp = perm; __tmp.push_back(p[k]); return __tmp; }());
                k = (k + int64_t(1));
            }
            res = ([&]{ auto __tmp = res; __tmp.push_back(perm); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

int64_t headTailOverlap(std::string s1, std::string s2) {
    int64_t start = int64_t(0);
    while (true) {
        int64_t ix = indexOfFrom(s1, ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(s2), start);
        if ((ix == (int64_t(0) - int64_t(1)))) {
            return int64_t(0);
        }
        start = ix;
        int64_t sublen = (s1.size() - start);
        if ((sublen > s2.size())) {
            sublen = s2.size();
        }
        if ((s2.substr(int64_t(0), sublen - int64_t(0)) == s1.substr(start, (start + sublen) - start))) {
            return sublen;
        }
        start = (start + int64_t(1));
    }
}

std::vector<std::string> deduplicate(const std::vector<std::string>& slist) {
    std::vector<std::string> arr = distinct(slist);
    std::vector<std::string> filtered = {};
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        std::string s1 = arr[i];
        bool within = false;
        int64_t j = int64_t(0);
        while ((j < arr.size())) {
            if (((j != i) && containsStr(arr[j], s1))) {
                within = true;
                break;
            }
            j = (j + int64_t(1));
        }
        if (!within) {
            filtered = ([&]{ auto __tmp = filtered; __tmp.push_back(s1); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return filtered;
}

std::string joinAll(const std::vector<std::string>& ss) {
    std::string out = std::string("");
    for (std::string s : ss) {
        out = (out + s);
    }
    return out;
}

std::string shortestCommonSuperstring(const std::vector<std::string>& slist) {
    std::vector<std::string> ss = deduplicate(slist);
    std::string shortest = joinAll(ss);
    std::vector<std::vector<std::string>> perms = permutations(ss);
    int64_t idx = int64_t(0);
    while ((idx < perms.size())) {
        std::vector<std::string> perm = perms[idx];
        std::string sup = perm[int64_t(0)];
        int64_t i = int64_t(0);
        while ((i < (ss.size() - int64_t(1)))) {
            int64_t ov = headTailOverlap(perm[i], perm[(i + int64_t(1))]);
            sup = (sup + perm[(i + int64_t(1))].substr(ov, perm[(i + int64_t(1))].size() - ov));
            i = (i + int64_t(1));
        }
        if ((sup.size() < shortest.size())) {
            shortest = sup;
        }
        idx = (idx + int64_t(1));
    }
    return shortest;
}

void printCounts(std::string seq) {
    int64_t a = int64_t(0);
    int64_t c = int64_t(0);
    int64_t g = int64_t(0);
    int64_t t = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < seq.size())) {
        std::string ch = seq.substr(i, (i + int64_t(1)) - i);
        if ((ch == std::string("A"))) {
            a = (a + int64_t(1));
        } else {
            if ((ch == std::string("C"))) {
                c = (c + int64_t(1));
            } else {
                if ((ch == std::string("G"))) {
                    g = (g + int64_t(1));
                } else {
                    if ((ch == std::string("T"))) {
                        t = (t + int64_t(1));
                    }
                }
            }
        }
        i = (i + int64_t(1));
    }
    int total = seq.size();
    std::cout << ((std::string("\nNucleotide counts for ") + seq) + std::string(":\n"));
    std::cout << std::endl;
    std::cout << (padLeft(std::string("A"), int64_t(10)) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()), int64_t(12)));
    std::cout << std::endl;
    std::cout << (padLeft(std::string("C"), int64_t(10)) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << c; return ss.str(); }()), int64_t(12)));
    std::cout << std::endl;
    std::cout << (padLeft(std::string("G"), int64_t(10)) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << g; return ss.str(); }()), int64_t(12)));
    std::cout << std::endl;
    std::cout << (padLeft(std::string("T"), int64_t(10)) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << t; return ss.str(); }()), int64_t(12)));
    std::cout << std::endl;
    std::cout << (padLeft(std::string("Other"), int64_t(10)) + padLeft(([&]{ std::ostringstream ss; any_to_stream(ss, (total - (((a + c) + g) + t)));
 return ss.str(); }()), int64_t(12)));
    std::cout << std::endl;
    std::cout << std::string("  ____________________");
    std::cout << std::endl;
    std::cout << (padLeft(std::string("Total length"), int64_t(14)) + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << total; return ss.str(); }()), int64_t(8)));
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<std::string>> tests = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("TA"), std::string("AAG"), std::string("TA"), std::string("GAA"), std::string("TA")}, std::vector<std::string>{std::string("CATTAGGG"), std::string("ATTAG"), std::string("GGG"), std::string("TA")}, std::vector<std::string>{std::string("AAGAUGGA"), std::string("GGAGCGCAUC"), std::string("AUCGCAAUAAGGA")}, std::vector<std::string>{std::string("ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT"), std::string("GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT"), std::string("CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"), std::string("TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"), std::string("AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT"), std::string("GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC"), std::string("CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT"), std::string("TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"), std::string("CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC"), std::string("GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT"), std::string("TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"), std::string("CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"), std::string("TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA")}};
        for (std::vector<std::string> seqs : tests) {
            std::string scs = shortestCommonSuperstring(seqs);
            printCounts(scs);
        }
    }
    return 0;
}
