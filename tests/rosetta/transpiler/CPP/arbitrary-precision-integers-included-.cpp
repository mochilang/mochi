// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:57:28 GMT+7
#include <iostream>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int pow_int(int base, int exp);
boost::multiprecision::cpp_int pow_big(boost::multiprecision::cpp_int base, int exp);
int main();

int e1 = pow_int(3, 2);
int e2 = pow_int(4, e1);
boost::multiprecision::cpp_int base = 5;
boost::multiprecision::cpp_int x = pow_big(base, e2);
std::string s = _to_string(x);

int pow_int(int base, int exp) {
    int result = 1;
    int b = base;
    int e = exp;
    while ((e > 0)) {
        if (((e % 2) == 1)) {
            result = (result * b);
        }
        b = (b * b);
        e = (int)((e / 2));
    }
    return result;
}

boost::multiprecision::cpp_int pow_big(boost::multiprecision::cpp_int base, int exp) {
    boost::multiprecision::cpp_int result = 1;
    boost::multiprecision::cpp_int b = base;
    int e = exp;
    while ((e > 0)) {
        if (((e % 2) == 1)) {
            result = (result * b);
        }
        b = (b * b);
        e = (int)((e / 2));
    }
    return result;
}

int main() {
    std::cout << std::string("5^(4^(3^2)) has");
    std::cout << " ";
    std::cout << s.size();
    std::cout << " ";
    std::cout << std::string("digits:");
    std::cout << " ";
    std::cout << s.substr(0, 20 - 0);
    std::cout << " ";
    std::cout << std::string("...");
    std::cout << " ";
    std::cout << s.substr((s.size() - 20), s.size() - (s.size() - 20));
    std::cout << std::endl;
    return 0;
}
