// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:15:43 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool isPrime(int n);
int countPrimeFactors(int n);
std::string pad4(int n);
int main();

bool isPrime(int n) {
    if ((n < 2)) {
        return false;
    }
    if (((n % 2) == 0)) {
        return (n == 2);
    }
    if (((n % 3) == 0)) {
        return (n == 3);
    }
    int d = 5;
    while (((d * d) <= n)) {
        if (((n % d) == 0)) {
            return false;
        }
        d = (d + 2);
        if (((n % d) == 0)) {
            return false;
        }
        d = (d + 4);
    }
    return true;
}

int countPrimeFactors(int n) {
    if ((n == 1)) {
        return 0;
    }
    if (isPrime(n)) {
        return 1;
    }
    int count = 0;
    int f = 2;
    while (true) {
        if (((n % f) == 0)) {
            count = (count + 1);
            n = (n / f);
            if ((n == 1)) {
                return count;
            }
            if (isPrime(n)) {
                f = n;
            }
        } else         if ((f >= 3)) {
            f = (f + 2);
        } else {
            f = 3;
        }

    }
    return count;
}

std::string pad4(int n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < 4)) {
        s = (std::string(" ") + s);
    }
    return s;
}

int main() {
    int max = 120;
    std::cout << ((std::string("The attractive numbers up to and including ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << max; return ss.str(); }())) + std::string(" are:"));
    std::cout << std::endl;
    int count = 0;
    std::string line = std::string("");
    int lineCount = 0;
    int i = 1;
    while ((i <= max)) {
        int c = countPrimeFactors(i);
        if (isPrime(c)) {
            line = (line + pad4(i));
            count = (count + 1);
            lineCount = (lineCount + 1);
            if ((lineCount == 20)) {
                std::cout << line;
                std::cout << std::endl;
                line = std::string("");
                lineCount = 0;
            }
        }
        i = (i + 1);
    }
    if ((lineCount > 0)) {
        std::cout << line;
        std::cout << std::endl;
    }
    return 0;
}
