// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:39:54 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string trimLeftZeros(std::string s);
std::map<std::string, std::any> btString(std::string s);
std::string btToString(const std::vector<int>& b);
std::vector<int> btInt(int i);
int btToInt(const std::vector<int>& b);
std::vector<int> btNeg(const std::vector<int>& b);
std::vector<int> btAdd(const std::vector<int>& a, const std::vector<int>& b);
std::vector<int> btMul(const std::vector<int>& a, const std::vector<int>& b);
std::string padLeft(std::string s, int w);
void show(std::string label, const std::vector<int>& b);
int main();

std::string trimLeftZeros(std::string s) {
    int i = 0;
    while (((i < s.size()) && (s.substr(i, (i + 1) - i) == std::string("0")))) {
        i = (i + 1);
    }
    return s.substr(i, s.size() - i);
}

std::map<std::string, std::any> btString(std::string s) {
    s = trimLeftZeros(s);
    std::vector<int> b = {};
    int i = (s.size() - 1);
    while ((i >= 0)) {
        std::string ch = s.substr(i, (i + 1) - i);
        if ((ch == std::string("+"))) {
            b = ([&]{ auto __tmp = b; __tmp.push_back(1); return __tmp; }());
        } else {
            if ((ch == std::string("0"))) {
                b = ([&]{ auto __tmp = b; __tmp.push_back(0); return __tmp; }());
            } else {
                if ((ch == std::string("-"))) {
                    b = ([&]{ auto __tmp = b; __tmp.push_back((0 - 1)); return __tmp; }());
                } else {
                    return std::map<std::string, std::any>{{"bt", std::any({})}, {"ok", std::any(false)}};
                }
            }
        }
        i = (i - 1);
    }
    return std::map<std::string, std::any>{{"bt", std::any(b)}, {"ok", std::any(true)}};
}

std::string btToString(const std::vector<int>& b) {
    if ((b.size() == 0)) {
        return std::string("0");
    }
    std::string r = std::string("");
    int i = (b.size() - 1);
    while ((i >= 0)) {
        int d = b[i];
        if ((d == (0 - 1))) {
            r = (r + std::string("-"));
        } else {
            if ((d == 0)) {
                r = (r + std::string("0"));
            } else {
                r = (r + std::string("+"));
            }
        }
        i = (i - 1);
    }
    return r;
}

std::vector<int> btInt(int i) {
    if ((i == 0)) {
        return {};
    }
    int n = i;
    std::vector<int> b = {};
    while ((n != 0)) {
        int m = (n % 3);
        n = (int)((n / 3));
        if ((m == 2)) {
            m = (0 - 1);
            n = (n + 1);
        } else {
            if ((m == (0 - 2))) {
                m = 1;
                n = (n - 1);
            }
        }
        b = ([&]{ auto __tmp = b; __tmp.push_back(m); return __tmp; }());
    }
    return b;
}

int btToInt(const std::vector<int>& b) {
    int r = 0;
    int pt = 1;
    int i = 0;
    while ((i < b.size())) {
        r = (r + (b[i] * pt));
        pt = (pt * 3);
        i = (i + 1);
    }
    return r;
}

std::vector<int> btNeg(const std::vector<int>& b) {
    std::vector<int> r = {};
    int i = 0;
    while ((i < b.size())) {
        r = ([&]{ auto __tmp = r; __tmp.push_back(-b[i]); return __tmp; }());
        i = (i + 1);
    }
    return r;
}

std::vector<int> btAdd(const std::vector<int>& a, const std::vector<int>& b) {
    return btInt((btToInt(a) + btToInt(b)));
}

std::vector<int> btMul(const std::vector<int>& a, const std::vector<int>& b) {
    return btInt((btToInt(a) * btToInt(b)));
}

std::string padLeft(std::string s, int w) {
    std::string r = s;
    while ((r.size() < w)) {
        r = (std::string(" ") + r);
    }
    return r;
}

void show(std::string label, const std::vector<int>& b) {
    std::string l = padLeft(label, 7);
    std::string bs = padLeft(btToString(b), 12);
    std::string is = padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << btToInt(b); return ss.str(); }()), 7);
    std::cout << ((((l + std::string(" ")) + bs) + std::string(" ")) + is);
    std::cout << std::endl;
}

int main() {
    std::map<std::string, std::any> ares = btString(std::string("+-0++0+"));
    std::any a = ares[std::string("bt")];
    std::vector<int> b = btInt(-436);
    std::map<std::string, std::any> cres = btString(std::string("+-++-"));
    std::any c = cres[std::string("bt")];
    show(std::string("a:"), std::any_cast<std::vector<int>>(a));
    show(std::string("b:"), b);
    show(std::string("c:"), std::any_cast<std::vector<int>>(c));
    show(std::string("a(b-c):"), btMul(std::any_cast<std::vector<int>>(a), btAdd(b, btNeg(std::any_cast<std::vector<int>>(c)))));
    return 0;
}
