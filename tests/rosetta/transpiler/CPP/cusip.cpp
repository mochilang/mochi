// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:45:43 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <map>


static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t ord(std::string ch);
bool isCusip(std::string s);
int main();

std::vector<std::string> candidates = std::vector<std::string>{std::string("037833100"), std::string("17275R102"), std::string("38259P508"), std::string("594918104"), std::string("68389X106"), std::string("68389X105")};

int64_t ord(std::string ch) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    if (((ch >= std::string("0")) && (ch <= std::string("9")))) {
        return (_parse_int_str(ch, int64_t(10)) + int64_t(48));
    }
    int64_t idx = _index_of(upper, ch);
    if ((idx >= int64_t(0))) {
        return (int64_t(65) + idx);
    }
    return int64_t(0);
}

bool isCusip(std::string s) {
    if ((s.size() != int64_t(9))) {
        return false;
    }
    int64_t sum = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < int64_t(8))) {
        std::string c = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        int64_t v = int64_t(0);
        if (((c >= std::string("0")) && (c <= std::string("9")))) {
            v = _parse_int_str(c, int64_t(10));
        } else         if (((c >= std::string("A")) && (c <= std::string("Z")))) {
            v = (ord(c) - int64_t(55));
        } else         if ((c == std::string("*"))) {
            v = int64_t(36);
        } else         if ((c == std::string("@"))) {
            v = int64_t(37);
        } else         if ((c == std::string("#"))) {
            v = int64_t(38);
        } else {
            return false;
        }




        if (((i % int64_t(2)) == int64_t(1))) {
            v = (v * int64_t(2));
        }
        sum = ((sum + (v / int64_t(10))) + (v % int64_t(10)));
        i = (i + int64_t(1));
    }
    return (_parse_int_str(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(8), int64_t(9) - int64_t(8)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(8), __v.begin()+int64_t(9)); })(s), int64_t(10)) == ((int64_t(10) - (sum % int64_t(10))) % int64_t(10)));
}

int main() {
    for (std::string cand : candidates) {
        std::string b = std::string("incorrect");
        if (isCusip(cand)) {
            b = std::string("correct");
        }
        std::cout << ((cand + std::string(" -> ")) + b);
        std::cout << std::endl;
    }
    return 0;
}
