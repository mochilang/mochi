// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:47:40 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t ord(std::string ch);
std::string hex(int64_t n);
std::string quote(std::string s);
void analyze(std::string s);
int main();

int64_t ord(std::string ch) {
    if ((ch == std::string("5"))) {
        return int64_t(53);
    }
    if ((ch == std::string("T"))) {
        return int64_t(84);
    }
    if ((ch == std::string(" "))) {
        return int64_t(32);
    }
    if ((ch == std::string("é"))) {
        return int64_t(233);
    }
    if ((ch == std::string("🐺"))) {
        return int64_t(128058);
    }
    return int64_t(0);
}

std::string hex(int64_t n) {
    std::string digits = std::string("0123456789abcdef");
    if ((n == int64_t(0))) {
        return std::string("0x0");
    }
    int64_t m = n;
    std::string out = std::string("");
    while ((m > int64_t(0))) {
        int64_t d = (m % int64_t(16));
        out = (digits.substr(d, (d + int64_t(1)) - d) + out);
        m = (m / int64_t(16));
    }
    return (std::string("0x") + out);
}

std::string quote(std::string s) {
    return ((std::string("'") + s) + std::string("'"));
}

void analyze(std::string s) {
    int le = s.size();
    std::cout << ((((std::string("Analyzing ") + quote(s)) + std::string(" which has a length of ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << le; return ss.str(); }())) + std::string(":"));
    std::cout << std::endl;
    if ((le > int64_t(1))) {
        int64_t i = int64_t(1);
        while ((i < le)) {
            std::string cur = s.substr(i, (i + int64_t(1)) - i);
            std::string prev = s.substr((i - int64_t(1)), i - (i - int64_t(1)));
            if ((cur != prev)) {
                std::cout << std::string("  Not all characters in the string are the same.");
                std::cout << std::endl;
                std::cout << ((((((std::string("  ") + quote(cur)) + std::string(" (")) + hex(ord(cur))) + std::string(") is different at position ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }())) + std::string("."));
                std::cout << std::endl;
                std::cout << std::string("");
                std::cout << std::endl;
                return;
            }
            i = (i + int64_t(1));
        }
    }
    std::cout << std::string("  All characters in the string are the same.");
    std::cout << std::endl;
    std::cout << std::string("");
    std::cout << std::endl;
}

int main() {
    std::vector<std::string> strings = std::vector<std::string>{std::string(""), std::string("   "), std::string("2"), std::string("333"), std::string(".55"), std::string("tttTTT"), std::string("4444 444k"), std::string("pépé"), std::string("🐶🐶🐺🐶"), std::string("🎄🎄🎄🎄")};
    int64_t i = int64_t(0);
    while ((i < strings.size())) {
        analyze(strings[i]);
        i = (i + int64_t(1));
    }
    return 0;
}
