// Generated by Mochi transpiler v0.10.56 on 2025-08-04 10:07:31 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t pow(int64_t base, int64_t _exp);
bool isDisarium(int64_t n);
int main();

int64_t pow(int64_t base, int64_t _exp) {
    int64_t result = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < _exp)) {
        result = (result * base);
        i = (i + int64_t(1));
    }
    return result;
}

bool isDisarium(int64_t n) {
    std::vector<int64_t> digits = {};
    int64_t x = n;
    if ((x == int64_t(0))) {
        digits = ([&]{ auto __tmp = digits; __tmp.push_back(int64_t(0)); return __tmp; }());
    }
    while ((x > int64_t(0))) {
        digits = ([&]{ auto __tmp = digits; __tmp.push_back((x % int64_t(10))); return __tmp; }());
        x = (int64_t)((x / int64_t(10)));
    }
    int64_t sum = int64_t(0);
    int64_t pos = int64_t(1);
    int64_t i = (digits.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        sum = (sum + pow(digits[i], pos));
        pos = (pos + int64_t(1));
        i = (i - int64_t(1));
    }
    return (sum == n);
}

int main() {
    int64_t count = int64_t(0);
    int64_t n = int64_t(0);
    while (((count < int64_t(19)) && (n < int64_t(3000000)))) {
        if (isDisarium(n)) {
            std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
            std::cout << std::endl;
            count = (count + int64_t(1));
        }
        n = (n + int64_t(1));
    }
    std::cout << ((std::string("\nFound the first ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << count; return ss.str(); }())) + std::string(" Disarium numbers."));
    std::cout << std::endl;
    return 0;
}
