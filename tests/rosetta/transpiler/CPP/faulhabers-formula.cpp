// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:16:04 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <boost/multiprecision/cpp_int.hpp>
#include <map>


using cpp_int = boost::multiprecision::cpp_int;
struct BigRat {
    cpp_int num; cpp_int den;
    BigRat(cpp_int n=0, cpp_int d=1){ init(n,d); }
    static cpp_int _gcd(cpp_int a, cpp_int b){ if(a<0) a=-a; if(b<0) b=-b; while(b!=0){ cpp_int t=a%b; a=b; b=t;} return a; }
    void init(cpp_int n, cpp_int d){ if(d<0){ n=-n; d=-d; } cpp_int g=_gcd(n,d); num=n/g; den=d/g; }
    BigRat operator+(const BigRat& o) const { return BigRat(num*o.den + o.num*den, den*o.den); }
    BigRat operator-(const BigRat& o) const { return BigRat(num*o.den - o.num*den, den*o.den); }
    BigRat operator*(const BigRat& o) const { return BigRat(num*o.num, den*o.den); }
    BigRat operator/(const BigRat& o) const { return BigRat(num*o.den, den*o.num); }
    BigRat operator-() const { return BigRat(-num, den); }
};
template<typename A> BigRat _bigrat(A a){ return BigRat(cpp_int(a), cpp_int(1)); }
inline BigRat _bigrat(const BigRat& r){ return r; }
template<typename A, typename B> BigRat _bigrat(A a, B b){ return BigRat(cpp_int(a), cpp_int(b)); }
inline cpp_int _num(const BigRat& r){ return r.num; }
inline cpp_int _denom(const BigRat& r){ return r.den; }
static std::ostream& operator<<(std::ostream& os, const BigRat& r){ os<<r.num; if(r.den!=1) os<<"/"<<r.den; return os; }
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

BigRat bernoulli(int64_t n);
boost::multiprecision::cpp_int binom(int64_t n, int64_t k);
BigRat coeff(int64_t p, int64_t j);
int main();

BigRat bernoulli(int64_t n) {
    std::vector<BigRat> a = {};
    int64_t m = int64_t(0);
    while ((m <= n)) {
        a = ([&]{ auto __tmp = a; __tmp.push_back((_bigrat(int64_t(1)) / _bigrat((m + int64_t(1))))); return __tmp; }());
        int64_t j = m;
        while ((j >= int64_t(1))) {
            a[(j - int64_t(1))] = (_bigrat(j) * (a[(j - int64_t(1))] - a[j]));
            j = (j - int64_t(1));
        }
        m = (m + int64_t(1));
    }
    return a[int64_t(0)];
}

boost::multiprecision::cpp_int binom(int64_t n, int64_t k) {
    if (((k < int64_t(0)) || (k > n))) {
        return (boost::multiprecision::cpp_int)(int64_t(0));
    }
    int64_t kk = k;
    if ((kk > (n - kk))) {
        kk = (n - kk);
    }
    boost::multiprecision::cpp_int res = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < kk)) {
        res = (res * (boost::multiprecision::cpp_int)((n - i)));
        i = (i + int64_t(1));
        res = (res / (boost::multiprecision::cpp_int)(i));
    }
    return res;
}

BigRat coeff(int64_t p, int64_t j) {
    BigRat base = (_bigrat(int64_t(1)) / _bigrat((p + int64_t(1))));
    BigRat c = base;
    if (((j % int64_t(2)) == int64_t(1))) {
        c = -c;
    }
    c = (c * _bigrat(binom((p + int64_t(1)), j)));
    c = (c * bernoulli(j));
    return c;
}

int main() {
    int64_t p = int64_t(0);
    while ((p < int64_t(10))) {
        std::string line = (([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }()) + std::string(" :"));
        int64_t j = int64_t(0);
        while ((j <= p)) {
            BigRat c = coeff(p, j);
            if ((([&]{ std::ostringstream ss; ss << std::boolalpha << c; return ss.str(); }()) != std::string("0/1"))) {
                line = (((line + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << c; return ss.str(); }())) + std::string("Ã—n"));
                int64_t _exp = ((p + int64_t(1)) - j);
                if ((_exp > int64_t(1))) {
                    line = ((line + std::string("^")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << _exp; return ss.str(); }()));
                }
            }
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        p = (p + int64_t(1));
    }
    return 0;
}
