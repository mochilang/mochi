// Generated by Mochi transpiler v0.10.40 on 2025-07-25 18:08:46 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

int randDigit();
int main();

int randDigit() {
    return ((_now() % 9) + 1);
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<int> digits = {};
        for (int i = 0; i < 4; i++ ) {
            digits = ([&]{ auto __tmp = digits; __tmp.push_back(randDigit()); return __tmp; }());
        }
        std::string numstr = std::string("");
        for (int i = 0; i < 4; i++ ) {
            numstr = (numstr + ([&]{ std::ostringstream ss; ss << std::boolalpha << digits[i]; return ss.str(); }()));
        }
        std::cout << ((std::string("Your numbers: ") + numstr) + std::string("\n"));
        std::cout << std::endl;
        std::cout << std::string("Enter RPN: ");
        std::cout << std::endl;
        std::string expr = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
        if ((expr.size() != 7)) {
            std::cout << std::string("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)");
            std::cout << std::endl;
            return 0;
        }
        std::vector<int> stack = {};
        int i = 0;
        bool valid = true;
        while ((i < expr.size())) {
            std::string ch = expr.substr(i, (i + 1) - i);
            if (((ch >= std::string("0")) && (ch <= std::string("9")))) {
                if ((digits.size() == 0)) {
                    std::cout << std::string("too many numbers.");
                    std::cout << std::endl;
                    return 0;
                }
                int j = 0;
                while ((digits[j] != (std::stoi(ch) - std::stoi(std::string("0"))))) {
                    j = (j + 1);
                    if ((j == digits.size())) {
                        std::cout << std::string("wrong numbers.");
                        std::cout << std::endl;
                        return 0;
                    }
                }
                digits = ([&]{ auto __lhs = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, j - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+j); })(digits); auto __rhs = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((j + 1), digits.size() - (j + 1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(j + 1), __v.begin()+digits.size()); })(digits); __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
                stack = ([&]{ auto __tmp = stack; __tmp.push_back((int)(double)((std::stoi(ch) - std::stoi(std::string("0"))))); return __tmp; }());
            } else {
                if ((stack.size() < 2)) {
                    std::cout << std::string("invalid expression syntax.");
                    std::cout << std::endl;
                    valid = false;
                    break;
                }
                int b = stack[(stack.size() - 1)];
                int a = stack[(stack.size() - 2)];
                if ((ch == std::string("+"))) {
                    stack[(stack.size() - 2)] = (a + b);
                } else                 if ((ch == std::string("-"))) {
                    stack[(stack.size() - 2)] = (a - b);
                } else                 if ((ch == std::string("*"))) {
                    stack[(stack.size() - 2)] = (a * b);
                } else                 if ((ch == std::string("/"))) {
                    stack[(stack.size() - 2)] = (a / b);
                } else {
                    std::cout << (ch + std::string(" invalid."));
                    std::cout << std::endl;
                    valid = false;
                    break;
                }



                stack = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, (stack.size() - 1) - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+(stack.size() - 1)); })(stack);
            }
            i = (i + 1);
        }
        if (valid) {
            if ((abs((stack[0] - 24.0)) > 1e-06)) {
                std::cout << ((std::string("incorrect. ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << stack[0]; return ss.str(); }())) + std::string(" != 24"));
                std::cout << std::endl;
            } else {
                std::cout << std::string("correct.");
                std::cout << std::endl;
            }
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
