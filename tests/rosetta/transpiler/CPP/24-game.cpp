// Generated by Mochi transpiler v0.10.38 on 2025-07-24 08:23:21 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <type_traits>
#include <iomanip>
#include <optional>
#include <cstdlib>
#include <chrono>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}

int randDigit();
int main();

int randDigit() {
    return ((_now() % 9) + 1);
}

int main() {
    std::vector<int> digits = {};
    for (int i = 0; i < 4; i++ ) {
        digits = ([&]{ auto __tmp = digits; __tmp.push_back(randDigit()); return __tmp; }());
    }
    std::string numstr = std::string("");
    for (int i = 0; i < 4; i++ ) {
        numstr = (numstr + ([&]{ std::ostringstream ss; ss<<digits[i]; return ss.str(); }()));
    }
    std::cout << ((std::string("Your numbers: ") + numstr) + std::string("\n"));
    std::cout << std::endl;
    std::cout << std::string("Enter RPN: ");
    std::cout << std::endl;
    std::string expr = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
    if ((expr.size() != 7)) {
        std::cout << std::string("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)");
        std::cout << std::endl;
        return 0;
    }
    std::vector<int> stack = {};
    int i = 0;
    bool valid = true;
    while ((i < expr.size())) {
        std::string ch = expr.substr(i, (i + 1) - i);
        if (((ch >= std::string("0")) && (ch <= std::string("9")))) {
            if ((digits.size() == 0)) {
                std::cout << std::string("too many numbers.");
                std::cout << std::endl;
                return 0;
            }
            int j = 0;
            while ((digits[j] != (std::stoi(ch) - std::stoi(std::string("0"))))) {
                j = (j + 1);
                if ((j == digits.size())) {
                    std::cout << std::string("wrong numbers.");
                    std::cout << std::endl;
                    return 0;
                }
            }
            digits = ([&]{ auto __lhs = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(0, j - 0); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+0, c.begin()+j); })(digits); auto __rhs = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr((j + 1), digits.size() - (j + 1)); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+(j + 1), c.begin()+digits.size()); })(digits); __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
            stack = ([&]{ auto __tmp = stack; __tmp.push_back((int)(double)((std::stoi(ch) - std::stoi(std::string("0"))))); return __tmp; }());
        } else {
            if ((stack.size() < 2)) {
                std::cout << std::string("invalid expression syntax.");
                std::cout << std::endl;
                valid = false;
                break;
            }
            int b = stack[(stack.size() - 1)];
            int a = stack[(stack.size() - 2)];
            if ((ch == std::string("+"))) {
                stack[(stack.size() - 2)] = (a + b);
            } else             if ((ch == std::string("-"))) {
                stack[(stack.size() - 2)] = (a - b);
            } else             if ((ch == std::string("*"))) {
                stack[(stack.size() - 2)] = (a * b);
            } else             if ((ch == std::string("/"))) {
                stack[(stack.size() - 2)] = (a / b);
            } else {
                std::cout << (ch + std::string(" invalid."));
                std::cout << std::endl;
                valid = false;
                break;
            }



            stack = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(0, (stack.size() - 1) - 0); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+0, c.begin()+(stack.size() - 1)); })(stack);
        }
        i = (i + 1);
    }
    if (valid) {
        if ((abs((stack[0] - 24.0)) > 1e-06)) {
            std::cout << ((std::string("incorrect. ") + ([&]{ std::ostringstream ss; ss<<stack[0]; return ss.str(); }())) + std::string(" != 24"));
            std::cout << std::endl;
        } else {
            std::cout << std::string("correct.");
            std::cout << std::endl;
        }
    }
    return 0;
}
