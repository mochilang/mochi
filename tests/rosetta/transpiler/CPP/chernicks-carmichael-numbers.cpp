// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:45:33 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool isPrime(int64_t n);
std::vector<int64_t> bigTrim(std::vector<int64_t> a);
std::vector<int64_t> bigFromInt(int64_t x);
std::vector<int64_t> bigMulSmall(const std::vector<int64_t>& a, int64_t m);
std::string bigToString(const std::vector<int64_t>& a);
int64_t pow2(int64_t k);
std::vector<int64_t> ccFactors(int64_t n, int64_t m);
void ccNumbers(int64_t start, int64_t end);
int main();

bool isPrime(int64_t n) {
    if ((n < int64_t(2))) {
        return false;
    }
    if (((n % int64_t(2)) == int64_t(0))) {
        return (n == int64_t(2));
    }
    if (((n % int64_t(3)) == int64_t(0))) {
        return (n == int64_t(3));
    }
    int64_t d = int64_t(5);
    while (((d * d) <= n)) {
        if (((n % d) == int64_t(0))) {
            return false;
        }
        d = (d + int64_t(2));
        if (((n % d) == int64_t(0))) {
            return false;
        }
        d = (d + int64_t(4));
    }
    return true;
}

std::vector<int64_t> bigTrim(std::vector<int64_t> a) {
    int n = a.size();
    while (((n > int64_t(1)) && (a[(n - int64_t(1))] == int64_t(0)))) {
        a = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (n - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(n - int64_t(1))); })(a);
        n = (n - int64_t(1));
    }
    return a;
}

std::vector<int64_t> bigFromInt(int64_t x) {
    if ((x == int64_t(0))) {
        return std::vector<int64_t>{int64_t(0)};
    }
    std::vector<int64_t> digits = {};
    int64_t n = x;
    while ((n > int64_t(0))) {
        digits = ([&]{ auto __tmp = digits; __tmp.push_back((n % int64_t(10))); return __tmp; }());
        n = (n / int64_t(10));
    }
    return digits;
}

std::vector<int64_t> bigMulSmall(const std::vector<int64_t>& a, int64_t m) {
    if ((m == int64_t(0))) {
        return std::vector<int64_t>{int64_t(0)};
    }
    std::vector<int64_t> res = {};
    int64_t carry = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        int64_t prod = ((a[i] * m) + carry);
        res = ([&]{ auto __tmp = res; __tmp.push_back((prod % int64_t(10))); return __tmp; }());
        carry = (prod / int64_t(10));
        i = (i + int64_t(1));
    }
    while ((carry > int64_t(0))) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((carry % int64_t(10))); return __tmp; }());
        carry = (carry / int64_t(10));
    }
    return bigTrim(res);
}

std::string bigToString(const std::vector<int64_t>& a) {
    std::string s = std::string("");
    int64_t i = (a.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << a[i]; return ss.str(); }()));
        i = (i - int64_t(1));
    }
    return s;
}

int64_t pow2(int64_t k) {
    int64_t r = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < k)) {
        r = (r * int64_t(2));
        i = (i + int64_t(1));
    }
    return r;
}

std::vector<int64_t> ccFactors(int64_t n, int64_t m) {
    int64_t p = ((int64_t(6) * m) + int64_t(1));
    if (!isPrime(p)) {
        return std::vector<int64_t>{};
    }
    std::vector<int64_t> prod = bigFromInt(p);
    p = ((int64_t(12) * m) + int64_t(1));
    if (!isPrime(p)) {
        return std::vector<int64_t>{};
    }
    prod = bigMulSmall(prod, p);
    int64_t i = int64_t(1);
    while ((i <= (n - int64_t(2)))) {
        p = (((pow2(i) * int64_t(9)) * m) + int64_t(1));
        if (!isPrime(p)) {
            return std::vector<int64_t>{};
        }
        prod = bigMulSmall(prod, p);
        i = (i + int64_t(1));
    }
    return prod;
}

void ccNumbers(int64_t start, int64_t end) {
    int64_t n = start;
    while ((n <= end)) {
        int64_t m = int64_t(1);
        if ((n > int64_t(4))) {
            m = pow2((n - int64_t(4)));
        }
        while (true) {
            std::vector<int64_t> num = ccFactors(n, m);
            if ((num.size() > int64_t(0))) {
                std::cout << (((std::string("a(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }())) + std::string(") = ")) + bigToString(num));
                std::cout << std::endl;
                break;
            }
            if ((n <= int64_t(4))) {
                m = (m + int64_t(1));
            } else {
                m = (m + pow2((n - int64_t(4))));
            }
        }
        n = (n + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        ccNumbers(int64_t(3), int64_t(9));
    }
    return 0;
}
