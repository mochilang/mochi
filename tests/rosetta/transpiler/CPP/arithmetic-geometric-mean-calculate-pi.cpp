// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:22:54 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double abs(double x);
double sqrtApprox(double x);
double agmPi();
int main();

double abs(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double sqrtApprox(double x) {
    double guess = x;
    int i = 0;
    while ((i < 20)) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + 1);
    }
    return guess;
}

double agmPi() {
    double a = 1.0;
    double g = ((double)(1.0) / (sqrtApprox(2.0)));
    double sum = 0.0;
    double pow = 2.0;
    while ((abs((a - g)) > 1e-15)) {
        double t = ((double)((a + g)) / (2.0));
        double u = sqrtApprox((a * g));
        a = t;
        g = u;
        pow = (pow * 2.0);
        double diff = ((a * a) - (g * g));
        sum = (sum + (diff * pow));
    }
    double pi = ((double)(((4.0 * a) * a)) / ((1.0 - sum)));
    return pi;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << agmPi(); return ss.str(); }());
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
