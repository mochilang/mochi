// Generated by Mochi transpiler v0.10.40 on 2025-07-25 18:46:02 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

std::vector<std::string> fields(std::string s);
bool canSpell(std::string word, const std::vector<std::string>& blks);
auto newSpeller(std::string blocks);
int main();

std::vector<std::string> fields(std::string s) {
    std::vector<std::string> res = {};
    std::string cur = std::string("");
    int i = 0;
    while ((i < s.size())) {
        std::string c = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 1)); })(s);
        if ((c == std::string(" "))) {
            if ((cur.size() > 0)) {
                res = ([&]{ auto __tmp = res; __tmp.push_back(cur); return __tmp; }());
                cur = std::string("");
            }
        } else {
            cur = (cur + c);
        }
        i = (i + 1);
    }
    if ((cur.size() > 0)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(cur); return __tmp; }());
    }
    return res;
}

bool canSpell(std::string word, const std::vector<std::string>& blks) {
    if ((word.size() == 0)) {
        return true;
    }
    std::string c = ([&]{ std::string __s = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 1 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+1); })(word); for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }());
    int i = 0;
    while ((i < blks.size())) {
        std::string b = blks[i];
        if (((c == ([&]{ std::string __s = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 1 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+1); })(b); for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }())) || (c == ([&]{ std::string __s = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(1, 2 - 1); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+1, __v.begin()+2); })(b); for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }())))) {
            std::vector<std::string> rest = {};
            int j = 0;
            while ((j < blks.size())) {
                if ((j != i)) {
                    rest = ([&]{ auto __tmp = rest; __tmp.push_back(blks[j]); return __tmp; }());
                }
                j = (j + 1);
            }
            if (canSpell(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(1, word.size() - 1); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+1, __v.begin()+word.size()); })(word), rest)) {
                return true;
            }
        }
        i = (i + 1);
    }
    return false;
}

auto newSpeller(std::string blocks) {
    std::vector<std::string> bl = fields(blocks);
    return [&](std::string w) { return canSpell((std::string)(w), bl); };
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        auto sp = newSpeller(std::string("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM"));
        for (std::string word : std::vector<std::string>{std::string("A"), std::string("BARK"), std::string("BOOK"), std::string("TREAT"), std::string("COMMON"), std::string("SQUAD"), std::string("CONFUSE")}) {
            std::cout << ((word + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << sp(word); return ss.str(); }()));
            std::cout << std::endl;
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
