// Generated by Mochi transpiler v0.10.55 on 2025-08-03 10:27:23 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <functional>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::string> fields(std::string s);
bool canSpell(std::string word, const std::vector<std::string>& blks);
auto newSpeller(std::string blocks);
int main();

std::vector<std::string> fields(std::string s) {
    std::vector<std::string> res = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if ((c == std::string(" "))) {
            if ((cur.size() > int64_t(0))) {
                res = ([&]{ auto __tmp = res; __tmp.push_back(cur); return __tmp; }());
                cur = std::string("");
            }
        } else {
            cur = (cur + c);
        }
        i = (i + int64_t(1));
    }
    if ((cur.size() > int64_t(0))) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(cur); return __tmp; }());
    }
    return res;
}

bool canSpell(std::string word, const std::vector<std::string>& blks) {
    if ((word.size() == int64_t(0))) {
        return true;
    }
    std::string c = ([&]{ std::string __s = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(word); for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }());
    int64_t i = int64_t(0);
    while ((i < blks.size())) {
        std::string b = blks[i];
        if (((c == ([&]{ std::string __s = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(b); for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }())) || (c == ([&]{ std::string __s = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), int64_t(2) - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+int64_t(2)); })(b); for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }())))) {
            std::vector<std::string> rest = {};
            int64_t j = int64_t(0);
            while ((j < blks.size())) {
                if ((j != i)) {
                    rest = ([&]{ auto __tmp = rest; __tmp.push_back(blks[j]); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
            if (canSpell(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), word.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+word.size()); })(word), rest)) {
                return true;
            }
        }
        i = (i + int64_t(1));
    }
    return false;
}

auto newSpeller(std::string blocks) {
    std::vector<std::string> bl = fields(blocks);
    return [=](std::string w) { return canSpell(std::string(w), bl); };
}

int main() {
    std::function<bool(std::string)> sp = newSpeller(std::string("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM"));
    for (std::string word : std::vector<std::string>{std::string("A"), std::string("BARK"), std::string("BOOK"), std::string("TREAT"), std::string("COMMON"), std::string("SQUAD"), std::string("CONFUSE")}) {
        std::cout << ((word + std::string(" ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, sp(word));
 return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
