// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:16:54 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <functional>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

void flood(int64_t x, int64_t y, std::string repl);
int main();

std::vector<std::vector<std::string>> grid = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("."), std::string("."), std::string("."), std::string("."), std::string(".")}, std::vector<std::string>{std::string("."), std::string("#"), std::string("#"), std::string("#"), std::string(".")}, std::vector<std::string>{std::string("."), std::string("#"), std::string("."), std::string("#"), std::string(".")}, std::vector<std::string>{std::string("."), std::string("#"), std::string("#"), std::string("#"), std::string(".")}, std::vector<std::string>{std::string("."), std::string("."), std::string("."), std::string("."), std::string(".")}};

void flood(int64_t x, int64_t y, std::string repl) {
    std::string target = grid[y][x];
    if ((target == repl)) {
        return;
    }
    std::function<void(int64_t, int64_t)> ff = [&](int64_t px, int64_t py) mutable {
        if (((((px < 0) || (py < 0)) || (py >= grid.size())) || (px >= grid[0].size()))) {
            return;
        }
        if ((grid[py][px] != target)) {
            return;
        }
        grid[py][px] = repl;
        ff((px - 1), py);
        ff((px + 1), py);
        ff(px, (py - 1));
        ff(px, (py + 1));
    };
    ff(x, y);
}

int main() {
    flood(2, 2, std::string("o"));
    for (std::vector<std::string> row : grid) {
        std::string line = std::string("");
        for (std::string ch : row) {
            line = (line + ch);
        }
        std::cout << line;
        std::cout << std::endl;
    }
    return 0;
}
