// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:12:11 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool inBounds(int64_t x, int64_t y);
bool hasNeighbor(int64_t x, int64_t y);
int main();

int64_t w = 400;
int64_t h = 300;
int64_t n = 15000;
int64_t frost = 255;
std::vector<std::vector<int64_t>> grid = {};
int64_t y = 0;
int64_t a = 0;

bool inBounds(int64_t x, int64_t y) {
    return ((((x >= 0) && (x < w)) && (y >= 0)) && (y < h));
}

bool hasNeighbor(int64_t x, int64_t y) {
    int64_t dy = -1;
    while ((dy <= 1)) {
        int64_t dx = -1;
        while ((dx <= 1)) {
            if (!((dx == 0) && (dy == 0))) {
                int64_t nx = (x + dx);
                int64_t ny = (y + dy);
                if ((inBounds(nx, ny) && (grid[ny][nx] == frost))) {
                    return true;
                }
            }
            dx = (dx + 1);
        }
        dy = (dy + 1);
    }
    return false;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        while ((y < h)) {
            std::vector<int64_t> row = {};
            int64_t x = 0;
            while ((x < w)) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(0); return __tmp; }());
                x = (x + 1);
            }
            grid = ([&]{ auto __tmp = grid; __tmp.push_back(row); return __tmp; }());
            y = (y + 1);
        }
        grid[(h / 3)][(w / 3)] = frost;
        while ((a < n)) {
            int64_t px = (_now() % w);
            int64_t py = (_now() % h);
            if ((grid[py][px] == frost)) {
                bool lost = false;
                while (true) {
                    px = ((px + (_now() % 3)) - 1);
                    py = ((py + (_now() % 3)) - 1);
                    if (!inBounds(px, py)) {
                        lost = true;
                        break;
                    }
                    if ((grid[py][px] != frost)) {
                        break;
                    }
                }
                if (lost) {
                    continue;
                }
            } else {
                bool lost = false;
                while (!hasNeighbor(px, py)) {
                    px = ((px + (_now() % 3)) - 1);
                    py = ((py + (_now() % 3)) - 1);
                    if (!inBounds(px, py)) {
                        lost = true;
                        break;
                    }
                }
                if (lost) {
                    continue;
                }
            }
            grid[py][px] = frost;
            a = (a + 1);
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
