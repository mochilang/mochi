// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:45:41 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> egcd(int64_t a, int64_t b);
int64_t modInv(int64_t a, int64_t m);
int64_t crt(const std::vector<int64_t>& a, const std::vector<int64_t>& n);
int main();

std::vector<int64_t> n = std::vector<int64_t>{int64_t(3), int64_t(5), int64_t(7)};
std::vector<int64_t> a = std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(2)};
int64_t res = crt(a, n);

std::vector<int64_t> egcd(int64_t a, int64_t b) {
    if ((a == int64_t(0))) {
        return std::vector<int64_t>{b, int64_t(0), int64_t(1)};
    }
    std::vector<int64_t> res = egcd((b % a), a);
    int64_t g = res[int64_t(0)];
    int64_t x1 = res[int64_t(1)];
    int64_t y1 = res[int64_t(2)];
    return std::vector<int64_t>{g, (y1 - ((b / a) * x1)), x1};
}

int64_t modInv(int64_t a, int64_t m) {
    std::vector<int64_t> r = egcd(a, m);
    if ((r[int64_t(0)] != int64_t(1))) {
        return int64_t(0);
    }
    int64_t x = r[int64_t(1)];
    if ((x < int64_t(0))) {
        return (x + m);
    }
    return x;
}

int64_t crt(const std::vector<int64_t>& a, const std::vector<int64_t>& n) {
    int64_t prod = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < n.size())) {
        prod = (prod * n[i]);
        i = (i + int64_t(1));
    }
    int64_t x = int64_t(0);
    i = int64_t(0);
    while ((i < n.size())) {
        int64_t ni = n[i];
        int64_t ai = a[i];
        int64_t p = (prod / ni);
        int64_t inv = modInv((p % ni), ni);
        x = (x + ((ai * inv) * p));
        i = (i + int64_t(1));
    }
    return (x % prod);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << (([&]{ std::ostringstream ss; ss << std::boolalpha << res; return ss.str(); }()) + std::string(" <nil>"));
        std::cout << std::endl;
    }
    return 0;
}
