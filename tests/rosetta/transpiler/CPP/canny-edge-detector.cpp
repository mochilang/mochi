// Generated by Mochi transpiler v0.10.42 on 2025-07-27 19:10:14 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::vector<double>> conv2d(const std::vector<std::vector<double>>& img, const std::vector<std::vector<double>>& k);
std::vector<std::vector<double>> gradient(const std::vector<std::vector<double>>& img);
std::vector<std::vector<int64_t>> threshold(const std::vector<std::vector<double>>& g, double t);
void printMatrix(const std::vector<std::vector<int64_t>>& m);
int main();

double PI = 3.141592653589793;

std::vector<std::vector<double>> conv2d(const std::vector<std::vector<double>>& img, const std::vector<std::vector<double>>& k) {
    int h = img.size();
    int w = img[int64_t(0)].size();
    int n = k.size();
    int half = (n / int64_t(2));
    std::vector<std::vector<double>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<double> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            double sum = 0.0;
            int64_t j = int64_t(0);
            while ((j < n)) {
                int64_t i = int64_t(0);
                while ((i < n)) {
                    int64_t yy = ((y + j) - half);
                    if ((yy < int64_t(0))) {
                        yy = int64_t(0);
                    }
                    if ((yy >= h)) {
                        yy = (h - int64_t(1));
                    }
                    int64_t xx = ((x + i) - half);
                    if ((xx < int64_t(0))) {
                        xx = int64_t(0);
                    }
                    if ((xx >= w)) {
                        xx = (w - int64_t(1));
                    }
                    sum = (sum + (img[yy][xx] * k[j][i]));
                    i = (i + int64_t(1));
                }
                j = (j + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(sum); return __tmp; }());
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<std::vector<double>> gradient(const std::vector<std::vector<double>>& img) {
    std::vector<std::vector<double>> hx = std::vector<std::vector<double>>{std::vector<double>{-1.0, 0.0, 1.0}, std::vector<double>{-2.0, 0.0, 2.0}, std::vector<double>{-1.0, 0.0, 1.0}};
    std::vector<std::vector<double>> hy = std::vector<std::vector<double>>{std::vector<double>{1.0, 2.0, 1.0}, std::vector<double>{0.0, 0.0, 0.0}, std::vector<double>{-1.0, -2.0, -1.0}};
    std::vector<std::vector<double>> gx = conv2d(img, hx);
    std::vector<std::vector<double>> gy = conv2d(img, hy);
    int h = img.size();
    int w = img[int64_t(0)].size();
    std::vector<std::vector<double>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<double> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            double g = ((gx[y][x] * gx[y][x]) + (gy[y][x] * gy[y][x]));
            row = ([&]{ auto __tmp = row; __tmp.push_back(g); return __tmp; }());
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<std::vector<int64_t>> threshold(const std::vector<std::vector<double>>& g, double t) {
    int h = g.size();
    int w = g[int64_t(0)].size();
    std::vector<std::vector<int64_t>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<int64_t> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            if ((g[y][x] >= t)) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(1)); return __tmp; }());
            } else {
                row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            }
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

void printMatrix(const std::vector<std::vector<int64_t>>& m) {
    int64_t y = int64_t(0);
    while ((y < m.size())) {
        std::string line = std::string("");
        int64_t x = int64_t(0);
        while ((x < m[int64_t(0)].size())) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << m[y][x]; return ss.str(); }()));
            if ((x < (m[int64_t(0)].size() - int64_t(1)))) {
                line = (line + std::string(" "));
            }
            x = (x + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        y = (y + int64_t(1));
    }
}

int main() {
    std::vector<std::vector<double>> img = std::vector<std::vector<double>>{std::vector<double>{0.0, 0.0, 0.0, 0.0, 0.0}, std::vector<double>{0.0, 255.0, 255.0, 255.0, 0.0}, std::vector<double>{0.0, 255.0, 255.0, 255.0, 0.0}, std::vector<double>{0.0, 255.0, 255.0, 255.0, 0.0}, std::vector<double>{0.0, 0.0, 0.0, 0.0, 0.0}};
    std::vector<std::vector<double>> g = gradient(img);
    std::vector<std::vector<int64_t>> edges = threshold(g, (1020.0 * 1020.0));
    printMatrix(edges);
    return 0;
}
