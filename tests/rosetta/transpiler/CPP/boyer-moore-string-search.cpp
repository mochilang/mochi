// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:17:52 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t indexOfStr(std::string h, std::string n);
int64_t stringSearchSingle(std::string h, std::string n);
std::vector<int64_t> stringSearch(std::string h, std::string n);
std::string display(const std::vector<int64_t>& nums);
int main();

int64_t indexOfStr(std::string h, std::string n) {
    int hlen = h.size();
    int nlen = n.size();
    if ((nlen == 0)) {
        return 0;
    }
    int64_t i = 0;
    while ((i <= (hlen - nlen))) {
        if ((h.substr(i, (i + nlen) - i) == n)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

int64_t stringSearchSingle(std::string h, std::string n) {
    return indexOfStr(h, n);
}

std::vector<int64_t> stringSearch(std::string h, std::string n) {
    std::vector<int64_t> result = {};
    int64_t start = 0;
    int hlen = h.size();
    int nlen = n.size();
    while ((start < hlen)) {
        int64_t idx = indexOfStr(h.substr(start, hlen - start), n);
        if ((idx >= 0)) {
            result = ([&]{ auto __tmp = result; __tmp.push_back((start + idx)); return __tmp; }());
            start = ((start + idx) + nlen);
        } else {
            break;
        }
    }
    return result;
}

std::string display(const std::vector<int64_t>& nums) {
    std::string s = std::string("[");
    int64_t i = 0;
    while ((i < nums.size())) {
        if ((i > 0)) {
            s = (s + std::string(", "));
        }
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << nums[i]; return ss.str(); }()));
        i = (i + 1);
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<std::string> texts = std::vector<std::string>{std::string("GCTAGCTCTACGAGTCTA"), std::string("GGCTATAATGCGTA"), std::string("there would have been a time for such a word"), std::string("needle need noodle needle"), std::string("DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages"), std::string("Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk.")};
        std::vector<std::string> patterns = std::vector<std::string>{std::string("TCTA"), std::string("TAATAAA"), std::string("word"), std::string("needle"), std::string("and"), std::string("alfalfa")};
        int64_t i = 0;
        while ((i < texts.size())) {
            std::cout << (((std::string("text") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + 1); return ss.str(); }())) + std::string(" = ")) + texts[i]);
            std::cout << std::endl;
            i = (i + 1);
        }
        std::cout << std::string("");
        std::cout << std::endl;
        int64_t j = 0;
        while ((j < texts.size())) {
            std::vector<int64_t> idxs = stringSearch(texts[j], patterns[j]);
            std::cout << (((((std::string("Found \"") + patterns[j]) + std::string("\" in 'text")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << (j + 1); return ss.str(); }())) + std::string("' at indexes ")) + display(idxs));
            std::cout << std::endl;
            j = (j + 1);
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
