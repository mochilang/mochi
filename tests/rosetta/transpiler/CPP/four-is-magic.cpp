// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:12:10 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string capitalize(std::string s);
std::string say(int64_t n);
std::string fourIsMagic(int64_t n);
int main();

std::vector<std::string> small = std::vector<std::string>{std::string("zero"), std::string("one"), std::string("two"), std::string("three"), std::string("four"), std::string("five"), std::string("six"), std::string("seven"), std::string("eight"), std::string("nine"), std::string("ten"), std::string("eleven"), std::string("twelve"), std::string("thirteen"), std::string("fourteen"), std::string("fifteen"), std::string("sixteen"), std::string("seventeen"), std::string("eighteen"), std::string("nineteen")};
std::vector<std::string> tens = std::vector<std::string>{std::string(""), std::string(""), std::string("twenty"), std::string("thirty"), std::string("forty"), std::string("fifty"), std::string("sixty"), std::string("seventy"), std::string("eighty"), std::string("ninety")};
std::vector<std::string> illions = std::vector<std::string>{std::string(""), std::string(" thousand"), std::string(" million"), std::string(" billion"), std::string(" trillion"), std::string(" quadrillion"), std::string(" quintillion")};

std::string capitalize(std::string s) {
    if ((s.size() == int64_t(0))) {
        return s;
    }
    return (([&]{ std::string __s = s.substr(int64_t(0), int64_t(1) - int64_t(0)); for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }()) + s.substr(int64_t(1), s.size() - int64_t(1)));
}

std::string say(int64_t n) {
    std::string t = std::string("");
    if ((n < int64_t(0))) {
        t = std::string("negative ");
        n = -n;
    }
    if ((n < int64_t(20))) {
        return (t + small[n]);
    } else     if ((n < int64_t(100))) {
        t = tens[(n / int64_t(10))];
        int64_t s = (n % int64_t(10));
        if ((s > int64_t(0))) {
            t = ((t + std::string("-")) + small[s]);
        }
        return t;
    } else     if ((n < int64_t(1000))) {
        t = (small[(n / int64_t(100))] + std::string(" hundred"));
        int64_t s = (n % int64_t(100));
        if ((s > int64_t(0))) {
            t = ((t + std::string(" ")) + say(s));
        }
        return t;
    }


    std::string sx = std::string("");
    int64_t i = int64_t(0);
    int64_t nn = n;
    while ((nn > int64_t(0))) {
        int64_t p = (nn % int64_t(1000));
        nn = (nn / int64_t(1000));
        if ((p > int64_t(0))) {
            std::string ix = (say(p) + illions[i]);
            if ((sx != std::string(""))) {
                ix = ((ix + std::string(" ")) + sx);
            }
            sx = ix;
        }
        i = (i + int64_t(1));
    }
    return (t + sx);
}

std::string fourIsMagic(int64_t n) {
    std::string s = say(n);
    s = capitalize(s);
    std::string t = s;
    while ((n != int64_t(4))) {
        n = s.size();
        s = say(n);
        t = ((((t + std::string(" is ")) + s) + std::string(", ")) + s);
    }
    t = (t + std::string(" is magic."));
    return t;
}

int main() {
    std::vector<int64_t> nums = std::vector<int64_t>{int64_t(0), int64_t(4), int64_t(6), int64_t(11), int64_t(13), int64_t(75), int64_t(100), int64_t(337), -int64_t(164), int64_t(9223372036854775807)};
    for (int64_t n : nums) {
        std::cout << fourIsMagic(n);
        std::cout << std::endl;
    }
    return 0;
}
