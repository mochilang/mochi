// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:15:11 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double powf(double base, int64_t _exp);
double sqrtApprox(double x);
int64_t modPow(int64_t base, int64_t _exp, int64_t mod);
void mtest(int64_t m);
int main();

int64_t qlimit = int64_t(50000);

double powf(double base, int64_t _exp) {
    double result = 1.0;
    int64_t i = int64_t(0);
    while ((i < _exp)) {
        result = (result * base);
        i = (i + int64_t(1));
    }
    return result;
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double g = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        g = ((double)((g + ((double)(x) / (g)))) / (2.0));
        i = (i + int64_t(1));
    }
    return g;
}

int64_t modPow(int64_t base, int64_t _exp, int64_t mod) {
    int64_t result = (int64_t(1) % mod);
    int64_t b = (base % mod);
    int64_t e = _exp;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            result = ((result * b) % mod);
        }
        b = ((b * b) % mod);
        e = (e / int64_t(2));
    }
    return result;
}

void mtest(int64_t m) {
    if ((m < int64_t(4))) {
        std::cout << (((([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }()) + std::string(" < 4.  M")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }())) + std::string(" not tested."));
        std::cout << std::endl;
        return;
    }
    double flimit = sqrtApprox((powf(2.0, m) - 1.0));
    int64_t qlast = int64_t(0);
    if ((flimit < qlimit)) {
        qlast = (int64_t)(flimit);
    } else {
        qlast = qlimit;
    }
    std::vector<bool> composite = {};
    int64_t i = int64_t(0);
    while ((i <= qlast)) {
        composite = ([&]{ auto __tmp = composite; __tmp.push_back(false); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t sq = (int64_t)(sqrtApprox((double)(qlast)));
    int64_t q = int64_t(3);
    while (true) {
        if ((q <= sq)) {
            int64_t j = (q * q);
            while ((j <= qlast)) {
                composite[j] = true;
                j = (j + q);
            }
        }
        int64_t q8 = (q % int64_t(8));
        if ((((q8 == int64_t(1)) || (q8 == int64_t(7))) && (modPow(int64_t(2), m, q) == int64_t(1)))) {
            std::cout << (((std::string("M") + ([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }())) + std::string(" has factor ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << q; return ss.str(); }()));
            std::cout << std::endl;
            return;
        }
        while (true) {
            q = (q + int64_t(2));
            if ((q > qlast)) {
                std::cout << ((std::string("No factors of M") + ([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }())) + std::string(" found."));
                std::cout << std::endl;
                return;
            }
            if (!composite[q]) {
                break;
            }
        }
    }
}

int main() {
    mtest(int64_t(31));
    mtest(int64_t(67));
    return 0;
}
