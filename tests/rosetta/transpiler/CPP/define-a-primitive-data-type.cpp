// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:47:35 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct TinyInt {
    int64_t value;
    auto operator<=>(const TinyInt&) const = default;
};

std::ostream& operator<<(std::ostream& os, const TinyInt& v) {
    os << '{' << "'value': "<< v.value
 << '}';
    return os;
}

TinyInt TinyInt_Add(const TinyInt& self, const TinyInt& t2);
TinyInt TinyInt_Sub(const TinyInt& self, const TinyInt& t2);
TinyInt TinyInt_Mul(const TinyInt& self, const TinyInt& t2);
TinyInt TinyInt_Div(const TinyInt& self, const TinyInt& t2);
TinyInt TinyInt_Rem(const TinyInt& self, const TinyInt& t2);
TinyInt TinyInt_Inc(const TinyInt& self);
TinyInt TinyInt_Dec(const TinyInt& self);
TinyInt NewTinyInt(int64_t i);
int main();

TinyInt TinyInt_Add(const TinyInt& self, const TinyInt& t2) {
    return NewTinyInt((int64_t)((self.value + t2.value)));
}

TinyInt TinyInt_Sub(const TinyInt& self, const TinyInt& t2) {
    return NewTinyInt((int64_t)((self.value - t2.value)));
}

TinyInt TinyInt_Mul(const TinyInt& self, const TinyInt& t2) {
    return NewTinyInt((int64_t)((self.value * t2.value)));
}

TinyInt TinyInt_Div(const TinyInt& self, const TinyInt& t2) {
    return NewTinyInt((int64_t)((self.value / t2.value)));
}

TinyInt TinyInt_Rem(const TinyInt& self, const TinyInt& t2) {
    return NewTinyInt((int64_t)((self.value % t2.value)));
}

TinyInt TinyInt_Inc(const TinyInt& self) {
    return Add(NewTinyInt(int64_t(1)));
}

TinyInt TinyInt_Dec(const TinyInt& self) {
    return Sub(NewTinyInt(int64_t(1)));
}

TinyInt NewTinyInt(int64_t i) {
    if ((i < int64_t(1))) {
        i = int64_t(1);
    } else     if ((i > int64_t(10))) {
        i = int64_t(10);
    }

    return TinyInt{.value = i};
}

int main() {
    TinyInt t1 = NewTinyInt(int64_t(6));
    TinyInt t2 = NewTinyInt(int64_t(3));
    std::cout << (std::string("t1      = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << t1.value; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("t2      = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << t2.value; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("t1 + t2 = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << TinyInt_Add(t1, t2).value; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("t1 - t2 = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << TinyInt_Sub(t1, t2).value; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("t1 * t2 = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << TinyInt_Mul(t1, t2).value; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("t1 / t2 = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << TinyInt_Div(t1, t2).value; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("t1 % t2 = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << TinyInt_Rem(t1, t2).value; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("t1 + 1  = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << TinyInt_Inc(t1).value; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("t1 - 1  = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << TinyInt_Dec(t1).value; return ss.str(); }()));
    std::cout << std::endl;
    return 0;
}
