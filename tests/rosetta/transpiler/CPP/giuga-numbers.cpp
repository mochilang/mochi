// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:12:50 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> primeFactors(int64_t n);
bool isGiuga(int64_t n);
int main();

std::vector<int64_t> primeFactors(int64_t n) {
    std::vector<int64_t> factors = {};
    int64_t last = int64_t(0);
    int64_t x = n;
    while (((x % int64_t(2)) == int64_t(0))) {
        if ((last == int64_t(2))) {
            return std::vector<int64_t>{};
        }
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(int64_t(2)); return __tmp; }());
        last = int64_t(2);
        x = (x / int64_t(2));
    }
    int64_t p = int64_t(3);
    while (((p * p) <= x)) {
        while (((x % p) == int64_t(0))) {
            if ((last == p)) {
                return std::vector<int64_t>{};
            }
            factors = ([&]{ auto __tmp = factors; __tmp.push_back(p); return __tmp; }());
            last = p;
            x = (x / p);
        }
        p = (p + int64_t(2));
    }
    if ((x > int64_t(1))) {
        if ((last == x)) {
            return std::vector<int64_t>{};
        }
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(x); return __tmp; }());
    }
    return factors;
}

bool isGiuga(int64_t n) {
    std::vector<int64_t> facs = primeFactors(n);
    if ((facs.size() <= int64_t(2))) {
        return false;
    }
    for (int64_t f : facs) {
        if (((((n / f) - int64_t(1)) % f) != int64_t(0))) {
            return false;
        }
    }
    return true;
}

int main() {
    std::vector<int64_t> known = std::vector<int64_t>{int64_t(30), int64_t(858), int64_t(1722), int64_t(66198)};
    std::vector<int64_t> nums = {};
    for (int64_t n : known) {
        if (isGiuga(n)) {
            nums = ([&]{ auto __tmp = nums; __tmp.push_back(n); return __tmp; }());
        }
    }
    std::cout << std::string("The first 4 Giuga numbers are:");
    std::cout << std::endl;
    { auto __tmp = nums; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ", "; std::cout << __tmp[i]; } std::cout << "]"; }
    std::cout << std::endl;
    return 0;
}
