// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:12:07 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct SumCarry;
struct Add4Result;

std::ostream& operator<<(std::ostream&, const SumCarry&);
std::ostream& operator<<(std::ostream&, const Add4Result&);


struct SumCarry {
    bool s;
    bool c;
    auto operator<=>(const SumCarry&) const = default;
};

struct Add4Result {
    bool v;
    bool s3;
    bool s2;
    bool s1;
    bool s0;
    auto operator<=>(const Add4Result&) const = default;
};

std::ostream& operator<<(std::ostream& os, const SumCarry& v) {
    os << '{' << "'s': "<< v.s
 << ", " << "'c': "<< v.c
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Add4Result& v) {
    os << '{' << "'v': "<< v.v
 << ", " << "'s3': "<< v.s3
 << ", " << "'s2': "<< v.s2
 << ", " << "'s1': "<< v.s1
 << ", " << "'s0': "<< v.s0
 << '}';
    return os;
}

bool _xor(bool a, bool b);
SumCarry ha(bool a, bool b);
SumCarry fa(bool a, bool b, bool c0);
Add4Result add4(bool a3, bool a2, bool a1, bool a0, bool b3, bool b2, bool b1, bool b0);
int64_t b2i(bool b);
int main();

bool _xor(bool a, bool b) {
    return ((a && !b) || (!a && b));
}

SumCarry ha(bool a, bool b) {
    return SumCarry{.s = _xor(a, b), .c = (a && b)};
}

SumCarry fa(bool a, bool b, bool c0) {
    SumCarry r1 = ha(a, c0);
    SumCarry r2 = ha(r1.s, b);
    return SumCarry{.s = r2.s, .c = (r1.c || r2.c)};
}

Add4Result add4(bool a3, bool a2, bool a1, bool a0, bool b3, bool b2, bool b1, bool b0) {
    SumCarry r0 = fa(a0, b0, false);
    SumCarry r1 = fa(a1, b1, r0.c);
    SumCarry r2 = fa(a2, b2, r1.c);
    SumCarry r3 = fa(a3, b3, r2.c);
    return Add4Result{.v = r3.c, .s3 = r3.s, .s2 = r2.s, .s1 = r1.s, .s0 = r0.s};
}

int64_t b2i(bool b) {
    if (b) {
        return int64_t(1);
    }
    return int64_t(0);
}

int main() {
    Add4Result r = add4(true, false, true, false, true, false, false, true);
    std::cout << ((((((((([&]{ std::ostringstream ss; ss << std::boolalpha << b2i(r.v); return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << b2i(r.s3); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << b2i(r.s2); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << b2i(r.s1); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << b2i(r.s0); return ss.str(); }()));
    std::cout << std::endl;
    return 0;
}
