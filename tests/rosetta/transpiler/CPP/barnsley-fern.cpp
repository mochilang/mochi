// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:17:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int> randInt(int s, int n);
int main();

double xMin = -2.182;
double xMax = 2.6558;
double yMin = 0.0;
double yMax = 9.9983;
int width = 60;
int nIter = 10000;
double dx = (xMax - xMin);
double dy = (yMax - yMin);
int height = (int)(((double)((width * dy)) / (dx)));
std::vector<std::vector<std::string>> grid = {};
int row = 0;
int seed = 1;
double x = 0.0;
double y = 0.0;
int ix = (int)(((double)(((double)(width) * (x - xMin))) / (dx)));
int iy = (int)(((double)(((double)(height) * (yMax - y))) / (dy)));
int i = 0;

std::vector<int> randInt(int s, int n) {
    int next = (((s * 1664525) + 1013904223) % 2147483647);
    return std::vector<int>{next, (next % n)};
}

int main() {
    while ((row < height)) {
        std::vector<std::string> line = {};
        int col = 0;
        while ((col < width)) {
            line = ([&]{ auto __tmp = line; __tmp.push_back(std::string(" ")); return __tmp; }());
            col = (col + 1);
        }
        grid = ([&]{ auto __tmp = grid; __tmp.push_back(line); return __tmp; }());
        row = (row + 1);
    }
    if (((((ix >= 0) && (ix < width)) && (iy >= 0)) && (iy < height))) {
        grid[iy][ix] = std::string("*");
    }
    while ((i < nIter)) {
        std::vector<int> res = randInt(seed, 100);
        seed = res[0];
        int r = res[1];
        if ((r < 85)) {
            double nx = ((0.85 * x) + (0.04 * y));
            double ny = (((-0.04 * x) + (0.85 * y)) + 1.6);
            x = nx;
            y = ny;
        } else         if ((r < 92)) {
            double nx = ((0.2 * x) - (0.26 * y));
            double ny = (((0.23 * x) + (0.22 * y)) + 1.6);
            x = nx;
            y = ny;
        } else         if ((r < 99)) {
            double nx = ((-0.15 * x) + (0.28 * y));
            double ny = (((0.26 * x) + (0.24 * y)) + 0.44);
            x = nx;
            y = ny;
        } else {
            x = 0.0;
            y = (0.16 * y);
        }


        ix = (int)(((double)(((double)(width) * (x - xMin))) / (dx)));
        iy = (int)(((double)(((double)(height) * (yMax - y))) / (dy)));
        if (((((ix >= 0) && (ix < width)) && (iy >= 0)) && (iy < height))) {
            grid[iy][ix] = std::string("*");
        }
        i = (i + 1);
    }
    row = 0;
    while ((row < height)) {
        std::string line = std::string("");
        int col = 0;
        while ((col < width)) {
            line = (line + grid[row][col]);
            col = (col + 1);
        }
        std::cout << line;
        std::cout << std::endl;
        row = (row + 1);
    }
    return 0;
}
