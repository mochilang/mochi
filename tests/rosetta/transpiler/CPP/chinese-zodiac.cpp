// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:45:45 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Info {
    std::string animal;
    std::string yinYang;
    std::string element;
    std::string stemBranch;
    int64_t cycle;
    auto operator<=>(const Info&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Info& v) {
    os << '{' << "'animal': "<< "'" << v.animal << "'"
 << ", " << "'yinYang': "<< "'" << v.yinYang << "'"
 << ", " << "'element': "<< "'" << v.element << "'"
 << ", " << "'stemBranch': "<< "'" << v.stemBranch << "'"
 << ", " << "'cycle': "<< v.cycle
 << '}';
    return os;
}

Info cz(int64_t yr, const std::vector<std::string>& animal, const std::vector<std::string>& yinYang, const std::vector<std::string>& element, const std::vector<std::string>& sc, const std::vector<std::string>& bc);
int main();

std::vector<std::string> animal = std::vector<std::string>{std::string("Rat"), std::string("Ox"), std::string("Tiger"), std::string("Rabbit"), std::string("Dragon"), std::string("Snake"), std::string("Horse"), std::string("Goat"), std::string("Monkey"), std::string("Rooster"), std::string("Dog"), std::string("Pig")};
std::vector<std::string> yinYang = std::vector<std::string>{std::string("Yang"), std::string("Yin")};
std::vector<std::string> element = std::vector<std::string>{std::string("Wood"), std::string("Fire"), std::string("Earth"), std::string("Metal"), std::string("Water")};
std::vector<std::string> stemChArr = std::vector<std::string>{std::string("甲"), std::string("乙"), std::string("丙"), std::string("丁"), std::string("戊"), std::string("己"), std::string("庚"), std::string("辛"), std::string("壬"), std::string("癸")};
std::vector<std::string> branchChArr = std::vector<std::string>{std::string("子"), std::string("丑"), std::string("寅"), std::string("卯"), std::string("辰"), std::string("巳"), std::string("午"), std::string("未"), std::string("申"), std::string("酉"), std::string("戌"), std::string("亥")};

Info cz(int64_t yr, const std::vector<std::string>& animal, const std::vector<std::string>& yinYang, const std::vector<std::string>& element, const std::vector<std::string>& sc, const std::vector<std::string>& bc) {
    int64_t y = (yr - int64_t(4));
    int64_t stem = (y % int64_t(10));
    int64_t branch = (y % int64_t(12));
    std::string sb = (sc[stem] + bc[branch]);
    return Info{.animal = (std::string)(animal[branch]), .yinYang = (std::string)(yinYang[(stem % int64_t(2))]), .element = (std::string)(element[(int64_t)((stem / int64_t(2)))]), .stemBranch = sb, .cycle = ((y % int64_t(60)) + int64_t(1))};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        for (int64_t yr : std::vector<int64_t>{int64_t(1935), int64_t(1938), int64_t(1968), int64_t(1972), int64_t(1976)}) {
            Info r = cz(yr, animal, yinYang, element, stemChArr, branchChArr);
            std::cout << ((((((((((([&]{ std::ostringstream ss; ss << std::boolalpha << yr; return ss.str(); }()) + std::string(": ")) + r.element) + std::string(" ")) + r.animal) + std::string(", ")) + r.yinYang) + std::string(", Cycle year ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << r.cycle; return ss.str(); }())) + std::string(" ")) + r.stemBranch);
            std::cout << std::endl;
        }
    }
    return 0;
}
