// Generated by Mochi transpiler v0.10.56 on 2025-08-03 21:21:04 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <stdexcept>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct DivResult;

std::ostream& operator<<(std::ostream&, const DivResult&);


struct DivResult {
    int64_t q;
    int64_t r;
    auto operator<=>(const DivResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const DivResult& v) {
    os << '{' << "'q': "<< v.q
 << ", " << "'r': "<< v.r
 << '}';
    return os;
}

DivResult egyptianDivide(int64_t dividend, int64_t divisor);
int main();

DivResult egyptianDivide(int64_t dividend, int64_t divisor) {
    if (((dividend < int64_t(0)) || (divisor <= int64_t(0)))) {
        throw std::runtime_error(std::string("Invalid argument(s)"));
    }
    if ((dividend < divisor)) {
        return DivResult{.q = int64_t(0), .r = dividend};
    }
    std::vector<int64_t> powers = std::vector<int64_t>{int64_t(1)};
    std::vector<int64_t> doublings = std::vector<int64_t>{divisor};
    int64_t doubling = (divisor * int64_t(2));
    while ((doubling <= dividend)) {
        powers = ([&]{ auto __tmp = powers; __tmp.push_back((powers[static_cast<size_t>((powers.size() - int64_t(1)))] * int64_t(2))); return __tmp; }());
        doublings = ([&]{ auto __tmp = doublings; __tmp.push_back(doubling); return __tmp; }());
        doubling = (doubling * int64_t(2));
    }
    int64_t ans = int64_t(0);
    int64_t accum = int64_t(0);
    int64_t i = (doublings.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        if (((accum + doublings[i]) <= dividend)) {
            accum = (accum + doublings[i]);
            ans = (ans + powers[i]);
            if ((accum == dividend)) {
                break;
            }
        }
        i = (i - int64_t(1));
    }
    return DivResult{.q = ans, .r = (dividend - accum)};
}

int main() {
    int64_t dividend = int64_t(580);
    int64_t divisor = int64_t(34);
    DivResult res = egyptianDivide(dividend, divisor);
    std::cout << ((((((([&]{ std::ostringstream ss; ss << std::boolalpha << dividend; return ss.str(); }()) + std::string(" divided by ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << divisor; return ss.str(); }())) + std::string(" is ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << res.q; return ss.str(); }())) + std::string(" with remainder ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << res.r; return ss.str(); }()));
    std::cout << std::endl;
    return 0;
}
