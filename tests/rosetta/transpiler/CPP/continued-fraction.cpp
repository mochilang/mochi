// Generated by Mochi transpiler v0.10.56 on 2025-08-03 16:03:50 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::map<std::string, int64_t> newTerm(int64_t a, int64_t b);
std::vector<std::map<std::string, int64_t>> cfSqrt2(int64_t nTerms);
std::vector<std::map<std::string, int64_t>> cfNap(int64_t nTerms);
std::vector<std::map<std::string, int64_t>> cfPi(int64_t nTerms);
double real(const std::vector<std::map<std::string, int64_t>>& f);
int main();

std::map<std::string, int64_t> newTerm(int64_t a, int64_t b) {
    return std::map<std::string, int64_t>{{"a", a}, {"b", b}};
}

std::vector<std::map<std::string, int64_t>> cfSqrt2(int64_t nTerms) {
    std::vector<std::map<std::string, int64_t>> f = {};
    int64_t n = int64_t(0);
    while ((n < nTerms)) {
        f = ([&]{ auto __tmp = f; __tmp.push_back(newTerm(int64_t(2), int64_t(1))); return __tmp; }());
        n = (n + int64_t(1));
    }
    if ((nTerms > int64_t(0))) {
        f[int64_t(0)][std::string("a")] = int64_t(1);
    }
    return f;
}

std::vector<std::map<std::string, int64_t>> cfNap(int64_t nTerms) {
    std::vector<std::map<std::string, int64_t>> f = {};
    int64_t n = int64_t(0);
    while ((n < nTerms)) {
        f = ([&]{ auto __tmp = f; __tmp.push_back(newTerm(n, (n - int64_t(1)))); return __tmp; }());
        n = (n + int64_t(1));
    }
    if ((nTerms > int64_t(0))) {
        f[int64_t(0)][std::string("a")] = int64_t(2);
    }
    if ((nTerms > int64_t(1))) {
        f[int64_t(1)][std::string("b")] = int64_t(1);
    }
    return f;
}

std::vector<std::map<std::string, int64_t>> cfPi(int64_t nTerms) {
    std::vector<std::map<std::string, int64_t>> f = {};
    int64_t n = int64_t(0);
    while ((n < nTerms)) {
        int64_t g = ((int64_t(2) * n) - int64_t(1));
        f = ([&]{ auto __tmp = f; __tmp.push_back(newTerm(int64_t(6), (g * g))); return __tmp; }());
        n = (n + int64_t(1));
    }
    if ((nTerms > int64_t(0))) {
        f[int64_t(0)][std::string("a")] = int64_t(3);
    }
    return f;
}

double real(const std::vector<std::map<std::string, int64_t>>& f) {
    double r = 0.0;
    int64_t i = (f.size() - int64_t(1));
    while ((i > int64_t(0))) {
        r = ((double)((double)(([&](auto& __m){ auto __it = __m.find(std::string("b")); return __it != __m.end() ? __it->second : 0; })(f[i]))) / (((double)(([&](auto& __m){ auto __it = __m.find(std::string("a")); return __it != __m.end() ? __it->second : 0; })(f[i])) + r)));
        i = (i - int64_t(1));
    }
    if ((f.size() > int64_t(0))) {
        r = (r + (double)(([&](auto& __m){ auto __it = __m.find(std::string("a")); return __it != __m.end() ? __it->second : 0; })(f[int64_t(0)])));
    }
    return r;
}

int main() {
    std::cout << (std::string("sqrt2: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << real(cfSqrt2(int64_t(20))); return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("nap:   ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << real(cfNap(int64_t(20))); return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("pi:    ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << real(cfPi(int64_t(20))); return ss.str(); }()));
    std::cout << std::endl;
    return 0;
}
