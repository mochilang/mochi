// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:47:38 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool isPrime(int64_t n);
std::vector<int64_t> gen(int64_t idx, int64_t cur, bool used);
std::string pad(int64_t n, int64_t width);
int main();

std::vector<int64_t> digits = std::vector<int64_t>{int64_t(9), int64_t(8), int64_t(7), int64_t(6), int64_t(5), int64_t(4), int64_t(3), int64_t(2), int64_t(1)};
std::vector<int64_t> primes = gen(int64_t(0), int64_t(0), false);
int64_t i = int64_t(0);
std::string line = std::string("");

bool isPrime(int64_t n) {
    if ((n < int64_t(2))) {
        return false;
    }
    if (((n % int64_t(2)) == int64_t(0))) {
        return (n == int64_t(2));
    }
    int64_t d = int64_t(3);
    while (((d * d) <= n)) {
        if (((n % d) == int64_t(0))) {
            return false;
        }
        d = (d + int64_t(2));
    }
    return true;
}

std::vector<int64_t> gen(int64_t idx, int64_t cur, bool used) {
    if ((idx == digits.size())) {
        if ((used && isPrime(cur))) {
            return std::vector<int64_t>{cur};
        }
        return {};
    }
    std::vector<int64_t> with = gen((idx + int64_t(1)), ((cur * int64_t(10)) + digits[idx]), true);
    std::vector<int64_t> without = gen((idx + int64_t(1)), cur, used);
    return (with union without);
}

std::string pad(int64_t n, int64_t width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

int main() {
    std::cout << ((std::string("There are ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << primes.size(); return ss.str(); }())) + std::string(" descending primes, namely:"));
    std::cout << std::endl;
    while ((i < primes.size())) {
        line = ((line + pad(primes[i], int64_t(8))) + std::string(" "));
        if ((((i + int64_t(1)) % int64_t(10)) == int64_t(0))) {
            std::cout << line.substr(int64_t(0), (line.size() - int64_t(1)) - int64_t(0));
            std::cout << std::endl;
            line = std::string("");
        }
        i = (i + int64_t(1));
    }
    if ((line.size() > int64_t(0))) {
        std::cout << line.substr(int64_t(0), (line.size() - int64_t(1)) - int64_t(0));
        std::cout << std::endl;
    }
    return 0;
}
