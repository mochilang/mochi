// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:52:17 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <map>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::map<std::string, int64_t>> push(std::vector<std::map<std::string, int64_t>> h, const std::map<std::string, int64_t>& it);
std::map<std::string, std::any> step(std::vector<std::map<std::string, int64_t>> h, int64_t nv, const std::vector<int64_t>& dir);
std::vector<std::vector<int64_t>> positions(int64_t n);
std::string pad(std::string s, int64_t w);
int main();

std::vector<std::map<std::string, int64_t>> push(std::vector<std::map<std::string, int64_t>> h, const std::map<std::string, int64_t>& it) {
    h = ([&]{ auto __tmp = h; __tmp.push_back(it); return __tmp; }());
    int64_t i = (h.size() - int64_t(1));
    while (((i > int64_t(0)) && (([&](const auto& __m){ auto __it = __m.find(std::string("s")); return __it != __m.end() ? __it->second : 0; })(h[(i - int64_t(1))]) > ([&](const auto& __m){ auto __it = __m.find(std::string("s")); return __it != __m.end() ? __it->second : 0; })(h[i])))) {
        std::map<std::string, int64_t> tmp = h[(i - int64_t(1))];
        h[(i - int64_t(1))] = h[i];
        h[i] = tmp;
        i = (i - int64_t(1));
    }
    return h;
}

std::map<std::string, std::any> step(std::vector<std::map<std::string, int64_t>> h, int64_t nv, const std::vector<int64_t>& dir) {
    while (((h.size() == int64_t(0)) || ((nv * nv) <= ([&](const auto& __m){ auto __it = __m.find(std::string("s")); return __it != __m.end() ? __it->second : 0; })(h[int64_t(0)])))) {
        h = push(h, std::map<std::string, int64_t>{{"s", (nv * nv)}, {"a", nv}, {"b", int64_t(0)}});
        nv = (nv + int64_t(1));
    }
    int64_t s = ([&](const auto& __m){ auto __it = __m.find(std::string("s")); return __it != __m.end() ? __it->second : 0; })(h[int64_t(0)]);
    std::vector<std::vector<int64_t>> v = {};
    while (((h.size() > int64_t(0)) && (([&](const auto& __m){ auto __it = __m.find(std::string("s")); return __it != __m.end() ? __it->second : 0; })(h[int64_t(0)]) == s))) {
        std::map<std::string, int64_t> it = h[int64_t(0)];
        h = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), h.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+h.size()); })(h);
        v = ([&]{ auto __tmp = v; __tmp.push_back(std::vector<int64_t>{([&](const auto& __m){ auto __it = __m.find(std::string("a")); return __it != __m.end() ? __it->second : 0; })(it), ([&](const auto& __m){ auto __it = __m.find(std::string("b")); return __it != __m.end() ? __it->second : 0; })(it)}); return __tmp; }());
        if ((([&](const auto& __m){ auto __it = __m.find(std::string("a")); return __it != __m.end() ? __it->second : 0; })(it) > ([&](const auto& __m){ auto __it = __m.find(std::string("b")); return __it != __m.end() ? __it->second : 0; })(it))) {
            h = push(h, std::map<std::string, int64_t>{{"s", ((([&](const auto& __m){ auto __it = __m.find(std::string("a")); return __it != __m.end() ? __it->second : 0; })(it) * ([&](const auto& __m){ auto __it = __m.find(std::string("a")); return __it != __m.end() ? __it->second : 0; })(it)) + ((([&](const auto& __m){ auto __it = __m.find(std::string("b")); return __it != __m.end() ? __it->second : 0; })(it) + int64_t(1)) * (([&](const auto& __m){ auto __it = __m.find(std::string("b")); return __it != __m.end() ? __it->second : 0; })(it) + int64_t(1))))}, {"a", ([&](const auto& __m){ auto __it = __m.find(std::string("a")); return __it != __m.end() ? __it->second : 0; })(it)}, {"b", (([&](const auto& __m){ auto __it = __m.find(std::string("b")); return __it != __m.end() ? __it->second : 0; })(it) + int64_t(1))}});
        }
    }
    std::vector<std::vector<int64_t>> list = {};
    for (std::vector<int64_t> p : v) {
        list = ([&]{ auto __tmp = list; __tmp.push_back(p); return __tmp; }());
    }
    std::vector<std::vector<int64_t>> temp = list;
    for (std::vector<int64_t> p : temp) {
        if ((p[int64_t(0)] != p[int64_t(1)])) {
            list = ([&]{ auto __tmp = list; __tmp.push_back(std::vector<int64_t>{p[int64_t(1)], p[int64_t(0)]}); return __tmp; }());
        }
    }
    temp = list;
    for (std::vector<int64_t> p : temp) {
        if ((p[int64_t(1)] != int64_t(0))) {
            list = ([&]{ auto __tmp = list; __tmp.push_back(std::vector<int64_t>{p[int64_t(0)], -p[int64_t(1)]}); return __tmp; }());
        }
    }
    temp = list;
    for (std::vector<int64_t> p : temp) {
        if ((p[int64_t(0)] != int64_t(0))) {
            list = ([&]{ auto __tmp = list; __tmp.push_back(std::vector<int64_t>{-p[int64_t(0)], p[int64_t(1)]}); return __tmp; }());
        }
    }
    int64_t bestDot = -int64_t(999999999);
    std::vector<int64_t> best = dir;
    for (std::vector<int64_t> p : list) {
        int64_t cross = ((p[int64_t(0)] * dir[int64_t(1)]) - (p[int64_t(1)] * dir[int64_t(0)]));
        if ((cross >= int64_t(0))) {
            int64_t dot = ((p[int64_t(0)] * dir[int64_t(0)]) + (p[int64_t(1)] * dir[int64_t(1)]));
            if ((dot > bestDot)) {
                bestDot = dot;
                best = p;
            }
        }
    }
    return std::map<std::string, std::any>{{"d", std::any(best)}, {"heap", std::any(h)}, {"n", std::any(nv)}};
}

std::vector<std::vector<int64_t>> positions(int64_t n) {
    std::vector<std::vector<int64_t>> pos = {};
    int64_t x = int64_t(0);
    int64_t y = int64_t(0);
    std::vector<int64_t> dir = std::vector<int64_t>{int64_t(0), int64_t(1)};
    std::vector<std::map<std::string, int64_t>> heap = {};
    int64_t nv = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < n)) {
        pos = ([&]{ auto __tmp = pos; __tmp.push_back(std::vector<int64_t>{x, y}); return __tmp; }());
        std::map<std::string, std::any> st = step(heap, nv, dir);
        dir = std::any_cast<std::vector<int64_t>>(([&](const auto& __m){ auto __it = __m.find(std::string("d")); return __it != __m.end() ? __it->second : std::any{}; })(st));
        heap = std::any_cast<std::vector<std::map<std::string, int64_t>>>(([&](const auto& __m){ auto __it = __m.find(std::string("heap")); return __it != __m.end() ? __it->second : std::any{}; })(st));
        nv = std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("n")); return __it != __m.end() ? __it->second : std::any{}; })(st));
        x = (x + dir[int64_t(0)]);
        y = (y + dir[int64_t(1)]);
        i = (i + int64_t(1));
    }
    return pos;
}

std::string pad(std::string s, int64_t w) {
    std::string r = s;
    while ((r.size() < w)) {
        r = (r + std::string(" "));
    }
    return r;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<int64_t>> pts = positions(int64_t(40));
        std::cout << std::string("The first 40 Babylonian spiral points are:");
        std::cout << std::endl;
        std::string line = std::string("");
        int64_t i = int64_t(0);
        while ((i < pts.size())) {
            std::vector<int64_t> p = pts[i];
            std::string s = pad(((((std::string("(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << p[int64_t(0)]; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p[int64_t(1)]; return ss.str(); }())) + std::string(")")), int64_t(10));
            line = (line + s);
            if ((((i + int64_t(1)) % int64_t(10)) == int64_t(0))) {
                std::cout << line;
                std::cout << std::endl;
                line = std::string("");
            }
            i = (i + int64_t(1));
        }
    }
    return 0;
}
