// Generated by Mochi transpiler v0.10.42 on 2025-07-27 19:10:27 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>


static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static std::string _repeat(const std::string& s, int64_t n) {
    std::string out; out.reserve(s.size()*n);
    for(int64_t i=0;i<n;i++) out += s;
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::string> split(std::string s, std::string sep);
std::string join(const std::vector<std::string>& xs, std::string sep);
std::string repeat(std::string ch, int64_t n);
int64_t parseIntStr(std::string str);
std::string toBinary(int64_t n, int64_t bits);
int64_t binToInt(std::string bits);
std::string padRight(std::string s, int64_t width);
std::string canonicalize(std::string cidr);
int main();

std::vector<std::string> tests = std::vector<std::string>{std::string("87.70.141.1/22"), std::string("36.18.154.103/12"), std::string("62.62.197.11/29"), std::string("67.137.119.181/4"), std::string("161.214.74.21/24"), std::string("184.232.176.184/18")};

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((((sep.size() > int64_t(0)) && ((i + sep.size()) <= s.size())) && (s.substr(i, (i + sep.size()) - i) == sep))) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
            cur = std::string("");
            i = (i + sep.size());
        } else {
            cur = (cur + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s));
            i = (i + int64_t(1));
        }
    }
    parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    return parts;
}

std::string join(const std::vector<std::string>& xs, std::string sep) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((i > int64_t(0))) {
            res = (res + sep);
        }
        res = (res + xs[i]);
        i = (i + int64_t(1));
    }
    return res;
}

std::string repeat(std::string ch, int64_t n) {
    std::string out = std::string("");
    int64_t i = int64_t(0);
    while ((i < n)) {
        out = (out + ch);
        i = (i + int64_t(1));
    }
    return out;
}

int64_t parseIntStr(std::string str) {
    int64_t i = int64_t(0);
    bool neg = false;
    if (((str.size() > int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(str) == std::string("-")))) {
        neg = true;
        i = int64_t(1);
    }
    int64_t n = int64_t(0);
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", int64_t(0)}, {"1", int64_t(1)}, {"2", int64_t(2)}, {"3", int64_t(3)}, {"4", int64_t(4)}, {"5", int64_t(5)}, {"6", int64_t(6)}, {"7", int64_t(7)}, {"8", int64_t(8)}, {"9", int64_t(9)}};
    while ((i < str.size())) {
        n = ((n * int64_t(10)) + digits.at(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(str)));
        i = (i + int64_t(1));
    }
    if (neg) {
        n = -n;
    }
    return n;
}

std::string toBinary(int64_t n, int64_t bits) {
    std::string b = std::string("");
    int64_t val = n;
    int64_t i = int64_t(0);
    while ((i < bits)) {
        b = (([&]{ std::ostringstream ss; ss << std::boolalpha << (val % int64_t(2)); return ss.str(); }()) + b);
        val = (int64_t)((val / int64_t(2)));
        i = (i + int64_t(1));
    }
    return b;
}

int64_t binToInt(std::string bits) {
    int64_t n = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < bits.size())) {
        n = ((n * int64_t(2)) + _parse_int_str(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(bits), int64_t(10)));
        i = (i + int64_t(1));
    }
    return n;
}

std::string padRight(std::string s, int64_t width) {
    std::string out = s;
    while ((out.size() < width)) {
        out = (out + std::string(" "));
    }
    return out;
}

std::string canonicalize(std::string cidr) {
    std::vector<std::string> parts = split(cidr, std::string("/"));
    std::string dotted = parts[int64_t(0)];
    int64_t size = _parse_int_str(parts[int64_t(1)], int64_t(10));
    std::vector<std::string> binParts = {};
    for (std::string p : split(dotted, std::string("."))) {
        binParts = ([&]{ auto __tmp = binParts; __tmp.push_back(toBinary((int64_t)(_parse_int_str(p, int64_t(10))), int64_t(8))); return __tmp; }());
    }
    std::string binary = join(binParts, std::string(""));
    binary = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), size - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+size); })(binary) + _repeat(std::string("0"), (int64_t(32) - size)));
    std::vector<std::string> canonParts = {};
    int64_t i = int64_t(0);
    while ((i < binary.size())) {
        canonParts = ([&]{ auto __tmp = canonParts; __tmp.push_back(([&]{ std::ostringstream ss; ss << std::boolalpha << binToInt(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(8)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(8))); })(binary)); return ss.str(); }())); return __tmp; }());
        i = (i + int64_t(8));
    }
    return ((join(canonParts, std::string(".")) + std::string("/")) + parts[int64_t(1)]);
}

int main() {
    for (std::string t : tests) {
        std::cout << ((padRight(t, int64_t(18)) + std::string(" -> ")) + canonicalize(t));
        std::cout << std::endl;
    }
    return 0;
}
