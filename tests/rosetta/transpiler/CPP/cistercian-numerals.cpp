// Generated by Mochi transpiler v0.10.55 on 2025-08-03 11:44:35 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <functional>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

void initN();
void horiz(int64_t c1, int64_t c2, int64_t r);
void verti(int64_t r1, int64_t r2, int64_t c);
void diagd(int64_t c1, int64_t c2, int64_t r);
void diagu(int64_t c1, int64_t c2, int64_t r);
void initDraw();
void printNumeral();
int main();

std::vector<std::vector<std::string>> n = {};
std::map<int64_t, std::function<void()>> draw = {};
std::vector<int64_t> numbers = std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(20), int64_t(300), int64_t(4000), int64_t(5555), int64_t(6789), int64_t(9999)};

void initN() {
    int64_t i = int64_t(0);
    while ((i < int64_t(15))) {
        std::vector<std::string> row = {};
        int64_t j = int64_t(0);
        while ((j < int64_t(11))) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(std::string(" ")); return __tmp; }());
            j = (j + int64_t(1));
        }
        row[int64_t(5)] = std::string("x");
        n = ([&]{ auto __tmp = n; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
}

void horiz(int64_t c1, int64_t c2, int64_t r) {
    int64_t c = c1;
    while ((c <= c2)) {
        n[r][c] = std::string("x");
        c = (c + int64_t(1));
    }
}

void verti(int64_t r1, int64_t r2, int64_t c) {
    int64_t r = r1;
    while ((r <= r2)) {
        n[r][c] = std::string("x");
        r = (r + int64_t(1));
    }
}

void diagd(int64_t c1, int64_t c2, int64_t r) {
    int64_t c = c1;
    while ((c <= c2)) {
        n[((r + c) - c1)][c] = std::string("x");
        c = (c + int64_t(1));
    }
}

void diagu(int64_t c1, int64_t c2, int64_t r) {
    int64_t c = c1;
    while ((c <= c2)) {
        n[((r - c) + c1)][c] = std::string("x");
        c = (c + int64_t(1));
    }
}

void initDraw() {
    draw[int64_t(1)] = [=]() mutable {
    horiz(int64_t(6), int64_t(10), int64_t(0));
};
    draw[int64_t(2)] = [=]() mutable {
    horiz(int64_t(6), int64_t(10), int64_t(4));
};
    draw[int64_t(3)] = [=]() mutable {
    diagd(int64_t(6), int64_t(10), int64_t(0));
};
    draw[int64_t(4)] = [=]() mutable {
    diagu(int64_t(6), int64_t(10), int64_t(4));
};
    draw[int64_t(5)] = [=]() mutable {
    (draw.at(int64_t(1)))();
    (draw.at(int64_t(4)))();
};
    draw[int64_t(6)] = [=]() mutable {
    verti(int64_t(0), int64_t(4), int64_t(10));
};
    draw[int64_t(7)] = [=]() mutable {
    (draw.at(int64_t(1)))();
    (draw.at(int64_t(6)))();
};
    draw[int64_t(8)] = [=]() mutable {
    (draw.at(int64_t(2)))();
    (draw.at(int64_t(6)))();
};
    draw[int64_t(9)] = [=]() mutable {
    (draw.at(int64_t(1)))();
    (draw.at(int64_t(8)))();
};
    draw[int64_t(10)] = [=]() mutable {
    horiz(int64_t(0), int64_t(4), int64_t(0));
};
    draw[int64_t(20)] = [=]() mutable {
    horiz(int64_t(0), int64_t(4), int64_t(4));
};
    draw[int64_t(30)] = [=]() mutable {
    diagu(int64_t(0), int64_t(4), int64_t(4));
};
    draw[int64_t(40)] = [=]() mutable {
    diagd(int64_t(0), int64_t(4), int64_t(0));
};
    draw[int64_t(50)] = [=]() mutable {
    (draw.at(int64_t(10)))();
    (draw.at(int64_t(40)))();
};
    draw[int64_t(60)] = [=]() mutable {
    verti(int64_t(0), int64_t(4), int64_t(0));
};
    draw[int64_t(70)] = [=]() mutable {
    (draw.at(int64_t(10)))();
    (draw.at(int64_t(60)))();
};
    draw[int64_t(80)] = [=]() mutable {
    (draw.at(int64_t(20)))();
    (draw.at(int64_t(60)))();
};
    draw[int64_t(90)] = [=]() mutable {
    (draw.at(int64_t(10)))();
    (draw.at(int64_t(80)))();
};
    draw[int64_t(100)] = [=]() mutable {
    horiz(int64_t(6), int64_t(10), int64_t(14));
};
    draw[int64_t(200)] = [=]() mutable {
    horiz(int64_t(6), int64_t(10), int64_t(10));
};
    draw[int64_t(300)] = [=]() mutable {
    diagu(int64_t(6), int64_t(10), int64_t(14));
};
    draw[int64_t(400)] = [=]() mutable {
    diagd(int64_t(6), int64_t(10), int64_t(10));
};
    draw[int64_t(500)] = [=]() mutable {
    (draw.at(int64_t(100)))();
    (draw.at(int64_t(400)))();
};
    draw[int64_t(600)] = [=]() mutable {
    verti(int64_t(10), int64_t(14), int64_t(10));
};
    draw[int64_t(700)] = [=]() mutable {
    (draw.at(int64_t(100)))();
    (draw.at(int64_t(600)))();
};
    draw[int64_t(800)] = [=]() mutable {
    (draw.at(int64_t(200)))();
    (draw.at(int64_t(600)))();
};
    draw[int64_t(900)] = [=]() mutable {
    (draw.at(int64_t(100)))();
    (draw.at(int64_t(800)))();
};
    draw[int64_t(1000)] = [=]() mutable {
    horiz(int64_t(0), int64_t(4), int64_t(14));
};
    draw[int64_t(2000)] = [=]() mutable {
    horiz(int64_t(0), int64_t(4), int64_t(10));
};
    draw[int64_t(3000)] = [=]() mutable {
    diagd(int64_t(0), int64_t(4), int64_t(10));
};
    draw[int64_t(4000)] = [=]() mutable {
    diagu(int64_t(0), int64_t(4), int64_t(14));
};
    draw[int64_t(5000)] = [=]() mutable {
    (draw.at(int64_t(1000)))();
    (draw.at(int64_t(4000)))();
};
    draw[int64_t(6000)] = [=]() mutable {
    verti(int64_t(10), int64_t(14), int64_t(0));
};
    draw[int64_t(7000)] = [=]() mutable {
    (draw.at(int64_t(1000)))();
    (draw.at(int64_t(6000)))();
};
    draw[int64_t(8000)] = [=]() mutable {
    (draw.at(int64_t(2000)))();
    (draw.at(int64_t(6000)))();
};
    draw[int64_t(9000)] = [=]() mutable {
    (draw.at(int64_t(1000)))();
    (draw.at(int64_t(8000)))();
};
}

void printNumeral() {
    int64_t i = int64_t(0);
    while ((i < int64_t(15))) {
        std::string line = std::string("");
        int64_t j = int64_t(0);
        while ((j < int64_t(11))) {
            line = ((line + n[i][j]) + std::string(" "));
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    std::cout << std::string("");
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        initDraw();
        for (int64_t number : numbers) {
            initN();
            std::cout << (([&]{ std::ostringstream ss; ss << std::boolalpha << number; return ss.str(); }()) + std::string(":"));
            std::cout << std::endl;
            int64_t num = number;
            int64_t thousands = (num / int64_t(1000));
            num = (num % int64_t(1000));
            int64_t hundreds = (num / int64_t(100));
            num = (num % int64_t(100));
            int64_t tens = (num / int64_t(10));
            int64_t ones = (num % int64_t(10));
            if ((thousands > int64_t(0))) {
                (draw.at((thousands * int64_t(1000))))();
            }
            if ((hundreds > int64_t(0))) {
                (draw.at((hundreds * int64_t(100))))();
            }
            if ((tens > int64_t(0))) {
                (draw.at((tens * int64_t(10))))();
            }
            if ((ones > int64_t(0))) {
                (draw.at(ones))();
            }
            printNumeral();
        }
    }
    return 0;
}
