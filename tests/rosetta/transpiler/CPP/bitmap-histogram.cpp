// Generated by Mochi transpiler v0.10.55 on 2025-08-03 09:24:49 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
#if defined(__linux__)
    long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long pages; if (std::fscanf(f, "%*s %ld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss > 0) return rss;
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return usage.ru_maxrss * 1024;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::vector<int64_t>> image();
std::vector<int64_t> histogram(const std::vector<std::vector<int64_t>>& g, int64_t bins);
int64_t medianThreshold(const std::vector<int64_t>& h);
std::vector<std::vector<int64_t>> threshold(const std::vector<std::vector<int64_t>>& g, int64_t t);
void printImage(const std::vector<std::vector<int64_t>>& g);
int main();

std::vector<std::vector<int64_t>> image() {
    return std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(10000)}, std::vector<int64_t>{int64_t(65535), int64_t(65535), int64_t(65535)}, std::vector<int64_t>{int64_t(65535), int64_t(65535), int64_t(65535)}};
}

std::vector<int64_t> histogram(const std::vector<std::vector<int64_t>>& g, int64_t bins) {
    if ((bins <= int64_t(0))) {
        bins = g[int64_t(0)].size();
    }
    std::vector<int64_t> h = {};
    int64_t i = int64_t(0);
    while ((i < bins)) {
        h = ([&]{ auto __tmp = h; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t y = int64_t(0);
    while ((y < g.size())) {
        std::vector<int64_t> row = g[y];
        int64_t x = int64_t(0);
        while ((x < row.size())) {
            int64_t p = row[x];
            int64_t idx = (int64_t)(((p * (bins - int64_t(1))) / int64_t(65535)));
            h[idx] = (h[idx] + int64_t(1));
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    return h;
}

int64_t medianThreshold(const std::vector<int64_t>& h) {
    int64_t lb = int64_t(0);
    int64_t ub = (h.size() - int64_t(1));
    int64_t lSum = int64_t(0);
    int64_t uSum = int64_t(0);
    while ((lb <= ub)) {
        if (((lSum + h[lb]) < (uSum + h[ub]))) {
            lSum = (lSum + h[lb]);
            lb = (lb + int64_t(1));
        } else {
            uSum = (uSum + h[ub]);
            ub = (ub - int64_t(1));
        }
    }
    return (int64_t)(((ub * int64_t(65535)) / h.size()));
}

std::vector<std::vector<int64_t>> threshold(const std::vector<std::vector<int64_t>>& g, int64_t t) {
    std::vector<std::vector<int64_t>> out = {};
    int64_t y = int64_t(0);
    while ((y < g.size())) {
        std::vector<int64_t> row = g[y];
        std::vector<int64_t> newRow = {};
        int64_t x = int64_t(0);
        while ((x < row.size())) {
            if ((row[x] < t)) {
                newRow = ([&]{ auto __tmp = newRow; __tmp.push_back(int64_t(0)); return __tmp; }());
            } else {
                newRow = ([&]{ auto __tmp = newRow; __tmp.push_back(int64_t(65535)); return __tmp; }());
            }
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(newRow); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

void printImage(const std::vector<std::vector<int64_t>>& g) {
    int64_t y = int64_t(0);
    while ((y < g.size())) {
        std::vector<int64_t> row = g[y];
        std::string line = std::string("");
        int64_t x = int64_t(0);
        while ((x < row.size())) {
            if ((row[x] == int64_t(0))) {
                line = (line + std::string("0"));
            } else {
                line = (line + std::string("1"));
            }
            x = (x + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        y = (y + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long mem_start;
            __BenchGuard() : start(_bench_now()), mem_start(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end - mem_start;
                    if (__bench_mem < 0) __bench_mem = 0;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<int64_t>> img = image();
        std::vector<int64_t> h = histogram(img, int64_t(0));
        std::cout << (std::string("Histogram: ") + ([&]{ std::ostringstream ss; { auto __tmp = h; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        int64_t t = medianThreshold(h);
        std::cout << (std::string("Threshold: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << t; return ss.str(); }()));
        std::cout << std::endl;
        std::vector<std::vector<int64_t>> bw = threshold(img, t);
        printImage(bw);
    }
    return 0;
}
