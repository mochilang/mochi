// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:45:37 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Birthday {
    int64_t month;
    int64_t day;
    auto operator<=>(const Birthday&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Birthday& v) {
    os << '{' << "'month': "<< v.month
 << ", " << "'day': "<< v.day
 << '}';
    return os;
}

bool monthUnique(const Birthday& b, const std::vector<Birthday>& list);
bool dayUnique(const Birthday& b, const std::vector<Birthday>& list);
bool monthWithUniqueDay(const Birthday& b, const std::vector<Birthday>& list);
std::string bstr(const Birthday& b);
int main();

std::vector<Birthday> choices = std::vector<Birthday>{Birthday{.month = int64_t(5), .day = int64_t(15)}, Birthday{.month = int64_t(5), .day = int64_t(16)}, Birthday{.month = int64_t(5), .day = int64_t(19)}, Birthday{.month = int64_t(6), .day = int64_t(17)}, Birthday{.month = int64_t(6), .day = int64_t(18)}, Birthday{.month = int64_t(7), .day = int64_t(14)}, Birthday{.month = int64_t(7), .day = int64_t(16)}, Birthday{.month = int64_t(8), .day = int64_t(14)}, Birthday{.month = int64_t(8), .day = int64_t(15)}, Birthday{.month = int64_t(8), .day = int64_t(17)}};
std::vector<Birthday> filtered = {};
std::vector<Birthday> filtered2 = {};
std::vector<Birthday> filtered3 = {};
std::vector<Birthday> filtered4 = {};

bool monthUnique(const Birthday& b, const std::vector<Birthday>& list) {
    int64_t c = int64_t(0);
    for (Birthday x : list) {
        if ((x.month == b.month)) {
            c = (c + int64_t(1));
        }
    }
    return (c == int64_t(1));
}

bool dayUnique(const Birthday& b, const std::vector<Birthday>& list) {
    int64_t c = int64_t(0);
    for (Birthday x : list) {
        if ((x.day == b.day)) {
            c = (c + int64_t(1));
        }
    }
    return (c == int64_t(1));
}

bool monthWithUniqueDay(const Birthday& b, const std::vector<Birthday>& list) {
    for (Birthday x : list) {
        if (((x.month == b.month) && dayUnique(x, list))) {
            return true;
        }
    }
    return false;
}

std::string bstr(const Birthday& b) {
    std::vector<std::string> months = std::vector<std::string>{std::string(""), std::string("January"), std::string("February"), std::string("March"), std::string("April"), std::string("May"), std::string("June"), std::string("July"), std::string("August"), std::string("September"), std::string("October"), std::string("November"), std::string("December")};
    return ((months[b.month] + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << b.day; return ss.str(); }()));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        for (Birthday bd : choices) {
            if (!monthUnique(bd, choices)) {
                filtered = ([&]{ auto __tmp = filtered; __tmp.push_back(bd); return __tmp; }());
            }
        }
        for (Birthday bd : filtered) {
            if (!monthWithUniqueDay(bd, filtered)) {
                filtered2 = ([&]{ auto __tmp = filtered2; __tmp.push_back(bd); return __tmp; }());
            }
        }
        for (Birthday bd : filtered2) {
            if (dayUnique(bd, filtered2)) {
                filtered3 = ([&]{ auto __tmp = filtered3; __tmp.push_back(bd); return __tmp; }());
            }
        }
        for (Birthday bd : filtered3) {
            if (monthUnique(bd, filtered3)) {
                filtered4 = ([&]{ auto __tmp = filtered4; __tmp.push_back(bd); return __tmp; }());
            }
        }
        if ((filtered4.size() == int64_t(1))) {
            std::cout << (std::string("Cheryl's birthday is ") + bstr(filtered4[int64_t(0)]));
            std::cout << std::endl;
        } else {
            std::cout << std::string("Something went wrong!");
            std::cout << std::endl;
        }
    }
    return 0;
}
