// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:47:23 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string pad2(int64_t n);
std::string weekdayName(int64_t z);
int main();

std::string pad2(int64_t n) {
    if ((n < int64_t(10))) {
        return (std::string("0") + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()));
    }
    return ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
}

std::string weekdayName(int64_t z) {
    std::vector<std::string> names = std::vector<std::string>{std::string("Sunday"), std::string("Monday"), std::string("Tuesday"), std::string("Wednesday"), std::string("Thursday"), std::string("Friday"), std::string("Saturday")};
    return names[((z + int64_t(4)) % int64_t(7))];
}

int main() {
    int64_t ts = (int64_t)((_now() / int64_t(1000000000)));
    int64_t days = (int64_t)((ts / int64_t(86400)));
    int64_t z = (days + int64_t(719468));
    int64_t era = (int64_t)((z / int64_t(146097)));
    int64_t doe = (z - (era * int64_t(146097)));
    int64_t yoe = ((((doe - (doe / int64_t(1460))) + (doe / int64_t(36524))) - (doe / int64_t(146096))) / (int64_t)(int64_t(365)));
    int64_t y = (yoe + (era * int64_t(400)));
    int64_t doy = (doe - (((int64_t(365) * yoe) + (yoe / int64_t(4))) - (yoe / int64_t(100))));
    int64_t mp = (((int64_t(5) * doy) + int64_t(2)) / (int64_t)(int64_t(153)));
    int64_t d = (int64_t)(((doy - (((int64_t(153) * mp) + int64_t(2)) / (int64_t)(int64_t(5)))) + int64_t(1)));
    int64_t m = (int64_t)((mp + int64_t(3)));
    if ((m > int64_t(12))) {
        y = (y + int64_t(1));
        m = (m - int64_t(12));
    }
    std::string iso = ((((([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }()) + std::string("-")) + pad2(m)) + std::string("-")) + pad2(d));
    std::cout << iso;
    std::cout << std::endl;
    std::vector<std::string> months = std::vector<std::string>{std::string("January"), std::string("February"), std::string("March"), std::string("April"), std::string("May"), std::string("June"), std::string("July"), std::string("August"), std::string("September"), std::string("October"), std::string("November"), std::string("December")};
    std::string line = ((((((weekdayName(days) + std::string(", ")) + months[(m - int64_t(1))]) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << d; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }()));
    std::cout << line;
    std::cout << std::endl;
    return 0;
}
