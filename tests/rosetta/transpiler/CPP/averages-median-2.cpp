// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:26:11 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <vector>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double sel(std::vector<double> list, int k);
double median(const std::vector<double>& a);
int main();

double sel(std::vector<double> list, int k) {
    int i = 0;
    while ((i <= k)) {
        int minIndex = i;
        int j = (i + 1);
        while ((j < list.size())) {
            if ((list[j] < list[minIndex])) {
                minIndex = j;
            }
            j = (j + 1);
        }
        double tmp = list[i];
        list[i] = list[minIndex];
        list[minIndex] = tmp;
        i = (i + 1);
    }
    return list[k];
}

double median(const std::vector<double>& a) {
    std::vector<double> arr = a;
    int half = (int)((arr.size() / 2));
    double med = sel(arr, half);
    if (((arr.size() % 2) == 0)) {
        return ((double)((med + arr[(half - 1)])) / (2.0));
    }
    return med;
}

int main() {
    std::cout << _to_string(median(std::vector<double>{3.0, 1.0, 4.0, 1.0}));
    std::cout << std::endl;
    std::cout << _to_string(median(std::vector<double>{3.0, 1.0, 4.0, 1.0, 5.0}));
    std::cout << std::endl;
    return 0;
}
