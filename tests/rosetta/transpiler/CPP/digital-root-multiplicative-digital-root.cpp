// Generated by Mochi transpiler v0.10.56 on 2025-08-04 00:05:53 GMT+7
#include <iostream>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct MDRResult;

std::ostream& operator<<(std::ostream&, const MDRResult&);


struct MDRResult {
    int64_t mp;
    int64_t mdr;
    auto operator<=>(const MDRResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const MDRResult& v) {
    os << '{' << "'mp': "<< v.mp
 << ", " << "'mdr': "<< v.mdr
 << '}';
    return os;
}

std::string pad(std::string s, int64_t width);
boost::multiprecision::cpp_int mult(const boost::multiprecision::cpp_int& n, int64_t base);
MDRResult multDigitalRoot(const boost::multiprecision::cpp_int& n, int64_t base);
int main();

std::string pad(std::string s, int64_t width) {
    std::string out = s;
    while ((out.size() < width)) {
        out = (std::string(" ") + out);
    }
    return out;
}

boost::multiprecision::cpp_int mult(const boost::multiprecision::cpp_int& n, int64_t base) {
    boost::multiprecision::cpp_int m = int64_t(1);
    boost::multiprecision::cpp_int x = n;
    boost::multiprecision::cpp_int b = (boost::multiprecision::cpp_int)(base);
    while ((x > (boost::multiprecision::cpp_int)(int64_t(0)))) {
        m = (m * (x % b));
        x = (x / b);
    }
    return m;
}

MDRResult multDigitalRoot(const boost::multiprecision::cpp_int& n, int64_t base) {
    boost::multiprecision::cpp_int m = n;
    int64_t mp = int64_t(0);
    boost::multiprecision::cpp_int b = (boost::multiprecision::cpp_int)(base);
    while ((m >= b)) {
        m = mult(m, base);
        mp = (mp + int64_t(1));
    }
    return MDRResult{.mp = mp, .mdr = (int64_t)(m)};
}

int main() {
    int64_t base = int64_t(10);
    int64_t size = int64_t(5);
    std::cout << ((((pad(std::string("Number"), int64_t(20)) + std::string(" ")) + pad(std::string("MDR"), int64_t(3))) + std::string(" ")) + pad(std::string("MP"), int64_t(3)));
    std::cout << std::endl;
    std::vector<boost::multiprecision::cpp_int> nums = std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(123321)), (boost::multiprecision::cpp_int)(int64_t(7739)), (boost::multiprecision::cpp_int)(int64_t(893)), (boost::multiprecision::cpp_int)(int64_t(899998)), (boost::multiprecision::cpp_int)(int64_t(3778888999)), (boost::multiprecision::cpp_int)(int64_t(277777788888899))};
    int64_t i = int64_t(0);
    while ((i < nums.size())) {
        boost::multiprecision::cpp_int n = nums[i];
        MDRResult r = multDigitalRoot(n, base);
        std::cout << ((((pad(([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()), int64_t(20)) + std::string(" ")) + pad(([&]{ std::ostringstream ss; ss << std::boolalpha << r.mdr; return ss.str(); }()), int64_t(3))) + std::string(" ")) + pad(([&]{ std::ostringstream ss; ss << std::boolalpha << r.mp; return ss.str(); }()), int64_t(3)));
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    std::cout << std::string("");
    std::cout << std::endl;
    std::vector<std::vector<int64_t>> list = {};
    int64_t idx = int64_t(0);
    while ((idx < base)) {
        list = ([&]{ auto __tmp = list; __tmp.push_back(std::vector<int64_t>{}); return __tmp; }());
        idx = (idx + int64_t(1));
    }
    int64_t cnt = (size * base);
    boost::multiprecision::cpp_int n = int64_t(0);
    boost::multiprecision::cpp_int b = (boost::multiprecision::cpp_int)(base);
    while ((cnt > int64_t(0))) {
        MDRResult r = multDigitalRoot(n, base);
        int64_t mdr = r.mdr;
        if ((list[mdr].size() < size)) {
            list[mdr] = ([&]{ auto __tmp = list[mdr]; __tmp.push_back((int64_t)(n)); return __tmp; }());
            cnt = (cnt - int64_t(1));
        }
        n = (n + (boost::multiprecision::cpp_int)(int64_t(1)));
    }
    std::cout << std::string("MDR: First");
    std::cout << std::endl;
    int64_t j = int64_t(0);
    while ((j < base)) {
        std::cout << ((pad(([&]{ std::ostringstream ss; ss << std::boolalpha << j; return ss.str(); }()), int64_t(3)) + std::string(": ")) + ([&]{ std::ostringstream ss; { auto __tmp = list[j]; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        j = (j + int64_t(1));
    }
    return 0;
}
