// Generated by Mochi transpiler v0.10.52 on 2025-08-01 19:02:45 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Point {
    double x;
    double y;
    auto operator<=>(const Point&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Point& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << '}';
    return os;
}

double sqrtApprox(double x);
double hypot(double x, double y);
std::vector<std::any> circles(const Point& p1, const Point& p2, double r);
int main();

std::string Two = std::string("Two circles.");
std::string R0 = std::string("R==0.0 does not describe circles.");
std::string Co = std::string("Coincident points describe an infinite number of circles.");
std::string CoR0 = std::string("Coincident points with r==0.0 describe a degenerate circle.");
std::string Diam = std::string("Points form a diameter and describe only a single circle.");
std::string Far = std::string("Points too far apart to form circles.");
std::vector<std::vector<std::any>> td = std::vector<std::vector<std::any>>{std::vector<std::any>{std::any(Point{.x = 0.1234, .y = 0.9876}), std::any(Point{.x = 0.8765, .y = 0.2345}), std::any(2.0)}, std::vector<std::any>{std::any(Point{.x = 0.0, .y = 2.0}), std::any(Point{.x = 0.0, .y = 0.0}), std::any(1.0)}, std::vector<std::any>{std::any(Point{.x = 0.1234, .y = 0.9876}), std::any(Point{.x = 0.1234, .y = 0.9876}), std::any(2.0)}, std::vector<std::any>{std::any(Point{.x = 0.1234, .y = 0.9876}), std::any(Point{.x = 0.8765, .y = 0.2345}), std::any(0.5)}, std::vector<std::any>{std::any(Point{.x = 0.1234, .y = 0.9876}), std::any(Point{.x = 0.1234, .y = 0.9876}), std::any(0.0)}};

double sqrtApprox(double x) {
    double g = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(40))) {
        g = ((double)((g + ((double)(x) / (g)))) / (2.0));
        i = (i + int64_t(1));
    }
    return g;
}

double hypot(double x, double y) {
    return sqrtApprox(((x * x) + (y * y)));
}

std::vector<std::any> circles(const Point& p1, const Point& p2, double r) {
    if (((p1.x == p2.x) && (p1.y == p2.y))) {
        if ((r == 0.0)) {
            return std::vector<std::any>{std::any(p1), std::any(p1), std::any(std::string("Coincident points with r==0.0 describe a degenerate circle."))};
        }
        return std::vector<std::any>{std::any(p1), std::any(p2), std::any(std::string("Coincident points describe an infinite number of circles."))};
    }
    if ((r == 0.0)) {
        return std::vector<std::any>{std::any(p1), std::any(p2), std::any(std::string("R==0.0 does not describe circles."))};
    }
    double dx = (p2.x - p1.x);
    double dy = (p2.y - p1.y);
    double q = hypot(dx, dy);
    if ((q > (2.0 * r))) {
        return std::vector<std::any>{std::any(p1), std::any(p2), std::any(std::string("Points too far apart to form circles."))};
    }
    Point m = Point{.x = ((double)((p1.x + p2.x)) / (2.0)), .y = ((double)((p1.y + p2.y)) / (2.0))};
    if ((q == (2.0 * r))) {
        return std::vector<std::any>{std::any(m), std::any(m), std::any(std::string("Points form a diameter and describe only a single circle."))};
    }
    double d = sqrtApprox(((r * r) - ((double)((q * q)) / (4.0))));
    double ox = ((double)((d * dx)) / (q));
    double oy = ((double)((d * dy)) / (q));
    return std::vector<std::any>{std::any(Point{.x = (m.x - oy), .y = (m.y + ox)}), std::any(Point{.x = (m.x + oy), .y = (m.y - ox)}), std::any(std::string("Two circles."))};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        for (std::vector<std::any> tc : td) {
            std::any p1 = tc[int64_t(0)];
            std::any p2 = tc[int64_t(1)];
            std::any r = tc[int64_t(2)];
            std::cout << ((((std::string("p1:  {") + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<Point>(p1).x);
 return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<Point>(p1).y);
 return ss.str(); }())) + std::string("}"));
            std::cout << std::endl;
            std::cout << ((((std::string("p2:  {") + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<Point>(p2).x);
 return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<Point>(p2).y);
 return ss.str(); }())) + std::string("}"));
            std::cout << std::endl;
            std::cout << (std::string("r:  ") + ([&]{ std::ostringstream ss; any_to_stream(ss, r);
 return ss.str(); }()));
            std::cout << std::endl;
            std::vector<std::any> res = circles(std::any_cast<Point>(p1), std::any_cast<Point>(p2), std::any_cast<double>(r));
            std::any c1 = res[int64_t(0)];
            std::any c2 = res[int64_t(1)];
            std::any caseStr = res[int64_t(2)];
            std::cout << (std::string("   ") + ([&]{ std::ostringstream ss; any_to_stream(ss, caseStr);
 return ss.str(); }()));
            std::cout << std::endl;
            if (((any_to_string(caseStr) == std::string("Points form a diameter and describe only a single circle.")) || (any_to_string(caseStr) == std::string("Coincident points with r==0.0 describe a degenerate circle.")))) {
                std::cout << ((((std::string("   Center:  {") + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<Point>(c1).x);
 return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<Point>(c1).y);
 return ss.str(); }())) + std::string("}"));
                std::cout << std::endl;
            } else {
                if ((any_to_string(caseStr) == std::string("Two circles."))) {
                    std::cout << ((((std::string("   Center 1:  {") + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<Point>(c1).x);
 return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<Point>(c1).y);
 return ss.str(); }())) + std::string("}"));
                    std::cout << std::endl;
                    std::cout << ((((std::string("   Center 2:  {") + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<Point>(c2).x);
 return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<Point>(c2).y);
 return ss.str(); }())) + std::string("}"));
                    std::cout << std::endl;
                }
            }
            std::cout << std::string("");
            std::cout << std::endl;
        }
    }
    return 0;
}
