// Generated by Mochi transpiler v0.10.39 on 2025-07-24 19:13:15 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <sstream>
#include <algorithm>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>


template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; os << vec[i]; }
    os << "]";
    return os;
}



struct SomeStruct {
    std::map<std::string, std::string> runtimeFields;
    auto operator<=>(const SomeStruct&) const = default;
};

std::ostream& operator<<(std::ostream& os, const SomeStruct& v) {
    os << '{' << "'runtimeFields': "<< "{"; bool first_0=true; for(const auto& p: v.runtimeFields){ if(!first_0) os << ", "; first_0=false; os << p.first << ': ' << p.second; } os << "}"
 << '}';
    return os;
}

int main();

int main() {
    SomeStruct ss = SomeStruct{{}};
    std::cout << std::string("Create two fields at runtime: \n");
    std::cout << std::endl;
    int i = 1;
    while ((i <= 2)) {
        std::cout << ((std::string("  Field #") + ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }())) + std::string(":\n"));
        std::cout << std::endl;
        std::cout << std::string("       Enter name  : ");
        std::cout << std::endl;
        std::string name = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
        std::cout << std::string("       Enter value : ");
        std::cout << std::endl;
        std::string value = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
        std::map<std::string, std::string> fields = ss.runtimeFields;
        fields[name] = value;
        ss.runtimeFields = fields;
        std::cout << std::string("\n");
        std::cout << std::endl;
        i = (i + 1);
    }
    while (true) {
        std::cout << std::string("Which field do you want to inspect ? ");
        std::cout << std::endl;
        std::string name = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
        if (([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(ss.runtimeFields, name)) {
            std::string value = ss.runtimeFields[name];
            std::cout << ((std::string("Its value is '") + value) + std::string("'"));
            std::cout << std::endl;
            return 0;
        } else {
            std::cout << std::string("There is no field of that name, try again\n");
            std::cout << std::endl;
        }
    }
    return 0;
}
