// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:33 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <sstream>
#include <algorithm>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; os << vec[i]; }
    os << "]";
    return os;
}



struct SomeStruct {
    std::map<std::string, std::string> runtimeFields;
    auto operator<=>(const SomeStruct&) const = default;
};

std::ostream& operator<<(std::ostream& os, const SomeStruct& v) {
    os << '{' << "'runtimeFields': "<< "{"; bool first_0=true; for(const auto& p: v.runtimeFields){ if(!first_0) os << ", "; first_0=false; os << p.first << ': ' << p.second; } os << "}"
 << '}';
    return os;
}

int main();

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        SomeStruct ss = SomeStruct{{}};
        std::cout << std::string("Create two fields at runtime: \n");
        std::cout << std::endl;
        int i = 1;
        while ((i <= 2)) {
            std::cout << ((std::string("  Field #") + ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }())) + std::string(":\n"));
            std::cout << std::endl;
            std::cout << std::string("       Enter name  : ");
            std::cout << std::endl;
            std::string name = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            std::cout << std::string("       Enter value : ");
            std::cout << std::endl;
            std::string value = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            std::map<std::string, std::string> fields = ss.runtimeFields;
            fields[name] = value;
            ss.runtimeFields = fields;
            std::cout << std::string("\n");
            std::cout << std::endl;
            i = (i + 1);
        }
        while (true) {
            std::cout << std::string("Which field do you want to inspect ? ");
            std::cout << std::endl;
            std::string name = ([&]{ std::string __line; std::getline(std::cin, __line); return __line; }());
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(ss.runtimeFields, name)) {
                std::string value = ss.runtimeFields[name];
                std::cout << ((std::string("Its value is '") + value) + std::string("'"));
                std::cout << std::endl;
                return 0;
            } else {
                std::cout << std::string("There is no field of that name, try again\n");
                std::cout << std::endl;
            }
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
