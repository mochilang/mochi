// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:37:02 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <any>
#include <map>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Point {
    double x;
    double y;
    auto operator<=>(const Point&) const = default;
};

struct QuadSpline {
    double c0;
    double c1;
    double c2;
    auto operator<=>(const QuadSpline&) const = default;
};

struct QuadCurve {
    QuadSpline x;
    QuadSpline y;
    auto operator<=>(const QuadCurve&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Point& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const QuadSpline& v) {
    os << '{' << "'c0': "<< std::fixed << std::setprecision(1) << v.c0
 << ", " << "'c1': "<< std::fixed << std::setprecision(1) << v.c1
 << ", " << "'c2': "<< std::fixed << std::setprecision(1) << v.c2
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const QuadCurve& v) {
    os << '{' << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << '}';
    return os;
}

double absf(double x);
double maxf(double a, double b);
double minf(double a, double b);
double max3(double a, double b, double c);
double min3(double a, double b, double c);
std::vector<QuadSpline> subdivideQuadSpline(QuadSpline q, double t);
std::vector<QuadCurve> subdivideQuadCurve(QuadCurve q, double t);
bool rectsOverlap(double xa0, double ya0, double xa1, double ya1, double xb0, double yb0, double xb1, double yb1);
std::map<std::string, std::any> testIntersect(QuadCurve p, QuadCurve q, double tol);
bool seemsToBeDuplicate(const std::vector<Point>& pts, Point xy, double spacing);
std::vector<Point> findIntersects(QuadCurve p, QuadCurve q, double tol, double spacing);
int main();

double absf(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double maxf(double a, double b) {
    if ((a > b)) {
        return a;
    }
    return b;
}

double minf(double a, double b) {
    if ((a < b)) {
        return a;
    }
    return b;
}

double max3(double a, double b, double c) {
    double m = a;
    if ((b > m)) {
        m = b;
    }
    if ((c > m)) {
        m = c;
    }
    return m;
}

double min3(double a, double b, double c) {
    double m = a;
    if ((b < m)) {
        m = b;
    }
    if ((c < m)) {
        m = c;
    }
    return m;
}

std::vector<QuadSpline> subdivideQuadSpline(QuadSpline q, double t) {
    double s = (1.0 - t);
    QuadSpline u = QuadSpline{q.c0, 0.0, 0.0};
    QuadSpline v = QuadSpline{0.0, 0.0, q.c2};
    u.c1 = ((s * q.c0) + (t * q.c1));
    v.c1 = ((s * q.c1) + (t * q.c2));
    u.c2 = ((s * u.c1) + (t * v.c1));
    v.c0 = u.c2;
    return std::vector<QuadSpline>{u, v};
}

std::vector<QuadCurve> subdivideQuadCurve(QuadCurve q, double t) {
    std::vector<QuadSpline> xs = subdivideQuadSpline(q.x, t);
    std::vector<QuadSpline> ys = subdivideQuadSpline(q.y, t);
    QuadCurve u = QuadCurve{xs[0], ys[0]};
    QuadCurve v = QuadCurve{xs[1], ys[1]};
    return std::vector<QuadCurve>{u, v};
}

bool rectsOverlap(double xa0, double ya0, double xa1, double ya1, double xb0, double yb0, double xb1, double yb1) {
    return ((((xb0 <= xa1) && (xa0 <= xb1)) && (yb0 <= ya1)) && (ya0 <= yb1));
}

std::map<std::string, std::any> testIntersect(QuadCurve p, QuadCurve q, double tol) {
    double pxmin = min3(p.x.c0, p.x.c1, p.x.c2);
    double pymin = min3(p.y.c0, p.y.c1, p.y.c2);
    double pxmax = max3(p.x.c0, p.x.c1, p.x.c2);
    double pymax = max3(p.y.c0, p.y.c1, p.y.c2);
    double qxmin = min3(q.x.c0, q.x.c1, q.x.c2);
    double qymin = min3(q.y.c0, q.y.c1, q.y.c2);
    double qxmax = max3(q.x.c0, q.x.c1, q.x.c2);
    double qymax = max3(q.y.c0, q.y.c1, q.y.c2);
    bool exclude = true;
    bool accept = false;
    Point inter = Point{0.0, 0.0};
    if (rectsOverlap(pxmin, pymin, pxmax, pymax, qxmin, qymin, qxmax, qymax)) {
        exclude = false;
        double xmin = maxf(pxmin, qxmin);
        double xmax = minf(pxmax, qxmax);
        if (((xmax - xmin) <= tol)) {
            double ymin = maxf(pymin, qymin);
            double ymax = minf(pymax, qymax);
            if (((ymax - ymin) <= tol)) {
                accept = true;
                inter.x = (0.5 * (xmin + xmax));
                inter.y = (0.5 * (ymin + ymax));
            }
        }
    }
    return std::map<std::string, std::any>{{"exclude", std::any(exclude)}, {"accept", std::any(accept)}, {"intersect", std::any(inter)}};
}

bool seemsToBeDuplicate(const std::vector<Point>& pts, Point xy, double spacing) {
    int i = 0;
    while ((i < pts.size())) {
        Point pt = pts[i];
        if (((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing))) {
            return true;
        }
        i = (i + 1);
    }
    return false;
}

std::vector<Point> findIntersects(QuadCurve p, QuadCurve q, double tol, double spacing) {
    std::vector<Point> inters = {};
    std::vector<std::map<std::string, QuadCurve>> workload = std::vector<std::map<std::string, QuadCurve>>{std::map<std::string, QuadCurve>{{"p", p}, {"q", q}}};
    while ((workload.size() > 0)) {
        int idx = (workload.size() - 1);
        std::map<std::string, QuadCurve> work = workload[idx];
        workload = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, idx - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+idx); })(workload);
        std::map<std::string, std::any> res = testIntersect(work[std::string("p")], work[std::string("q")], tol);
        std::any excl = res[std::string("exclude")];
        std::any acc = res[std::string("accept")];
        Point inter = std::any_cast<Point>(res[std::string("intersect")]);
        if (std::any_cast<bool>(acc)) {
            if (!seemsToBeDuplicate(inters, inter, spacing)) {
                inters = ([&]{ auto __tmp = inters; __tmp.push_back(inter); return __tmp; }());
            }
        } else         if (!std::any_cast<bool>(excl)) {
            std::vector<QuadCurve> ps = subdivideQuadCurve(work[std::string("p")], 0.5);
            std::vector<QuadCurve> qs = subdivideQuadCurve(work[std::string("q")], 0.5);
            QuadCurve p0 = ps[0];
            QuadCurve p1 = ps[1];
            QuadCurve q0 = qs[0];
            QuadCurve q1 = qs[1];
            workload = ([&]{ auto __tmp = workload; __tmp.push_back(std::map<std::string, QuadCurve>{{"p", p0}, {"q", q0}}); return __tmp; }());
            workload = ([&]{ auto __tmp = workload; __tmp.push_back(std::map<std::string, QuadCurve>{{"p", p0}, {"q", q1}}); return __tmp; }());
            workload = ([&]{ auto __tmp = workload; __tmp.push_back(std::map<std::string, QuadCurve>{{"p", p1}, {"q", q0}}); return __tmp; }());
            workload = ([&]{ auto __tmp = workload; __tmp.push_back(std::map<std::string, QuadCurve>{{"p", p1}, {"q", q1}}); return __tmp; }());
        }

    }
    return inters;
}

int main() {
    QuadCurve p = QuadCurve{QuadSpline{-1.0, 0.0, 1.0}, QuadSpline{0.0, 10.0, 0.0}};
    QuadCurve q = QuadCurve{QuadSpline{2.0, -8.0, 2.0}, QuadSpline{1.0, 2.0, 3.0}};
    double tol = 1e-07;
    double spacing = (tol * 10.0);
    std::vector<Point> inters = findIntersects(p, q, tol, spacing);
    int i = 0;
    while ((i < inters.size())) {
        Point pt = inters[i];
        std::cout << ((((std::string("(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << pt.x; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << pt.y; return ss.str(); }())) + std::string(")"));
        std::cout << std::endl;
        i = (i + 1);
    }
    return 0;
}
