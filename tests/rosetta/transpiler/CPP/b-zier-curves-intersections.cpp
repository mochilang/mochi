// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:55:58 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Point;
struct QuadSpline;
struct QuadCurve;
struct TestRes;

std::ostream& operator<<(std::ostream&, const Point&);
std::ostream& operator<<(std::ostream&, const QuadSpline&);
std::ostream& operator<<(std::ostream&, const QuadCurve&);
std::ostream& operator<<(std::ostream&, const TestRes&);


struct Point {
    double x;
    double y;
    auto operator<=>(const Point&) const = default;
};

struct QuadSpline {
    double c0;
    double c1;
    double c2;
    auto operator<=>(const QuadSpline&) const = default;
};

struct QuadCurve {
    QuadSpline x;
    QuadSpline y;
    auto operator<=>(const QuadCurve&) const = default;
};

struct TestRes {
    bool exclude;
    bool accept;
    Point intersect;
    auto operator<=>(const TestRes&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Point& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const QuadSpline& v) {
    os << '{' << "'c0': "<< std::fixed << std::setprecision(1) << v.c0
 << ", " << "'c1': "<< std::fixed << std::setprecision(1) << v.c1
 << ", " << "'c2': "<< std::fixed << std::setprecision(1) << v.c2
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const QuadCurve& v) {
    os << '{' << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const TestRes& v) {
    os << '{' << "'exclude': "<< v.exclude
 << ", " << "'accept': "<< v.accept
 << ", " << "'intersect': "<< v.intersect
 << '}';
    return os;
}

double absf(double x);
double maxf(double a, double b);
double minf(double a, double b);
double max3(double a, double b, double c);
double min3(double a, double b, double c);
std::vector<QuadSpline> subdivideQuadSpline(const QuadSpline& q, double t);
std::vector<QuadCurve> subdivideQuadCurve(const QuadCurve& q, double t);
bool rectsOverlap(double xa0, double ya0, double xa1, double ya1, double xb0, double yb0, double xb1, double yb1);
TestRes testIntersect(const QuadCurve& p, const QuadCurve& q, double tol);
bool seemsToBeDuplicate(const std::vector<Point>& pts, const Point& xy, double spacing);
std::vector<Point> findIntersects(const QuadCurve& p, const QuadCurve& q, double tol, double spacing);
int main();

double absf(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double maxf(double a, double b) {
    if ((a > b)) {
        return a;
    }
    return b;
}

double minf(double a, double b) {
    if ((a < b)) {
        return a;
    }
    return b;
}

double max3(double a, double b, double c) {
    double m = a;
    if ((b > m)) {
        m = b;
    }
    if ((c > m)) {
        m = c;
    }
    return m;
}

double min3(double a, double b, double c) {
    double m = a;
    if ((b < m)) {
        m = b;
    }
    if ((c < m)) {
        m = c;
    }
    return m;
}

std::vector<QuadSpline> subdivideQuadSpline(const QuadSpline& q, double t) {
    double s = (1.0 - t);
    QuadSpline u = QuadSpline{.c0 = q.c0, .c1 = 0.0, .c2 = 0.0};
    QuadSpline v = QuadSpline{.c0 = 0.0, .c1 = 0.0, .c2 = q.c2};
    u.c1 = ((s * q.c0) + (t * q.c1));
    v.c1 = ((s * q.c1) + (t * q.c2));
    u.c2 = ((s * u.c1) + (t * v.c1));
    v.c0 = u.c2;
    return std::vector<QuadSpline>{u, v};
}

std::vector<QuadCurve> subdivideQuadCurve(const QuadCurve& q, double t) {
    std::vector<QuadSpline> xs = subdivideQuadSpline(q.x, t);
    std::vector<QuadSpline> ys = subdivideQuadSpline(q.y, t);
    QuadCurve u = QuadCurve{.x = xs[int64_t(0)], .y = ys[int64_t(0)]};
    QuadCurve v = QuadCurve{.x = xs[int64_t(1)], .y = ys[int64_t(1)]};
    return std::vector<QuadCurve>{u, v};
}

bool rectsOverlap(double xa0, double ya0, double xa1, double ya1, double xb0, double yb0, double xb1, double yb1) {
    return ((((xb0 <= xa1) && (xa0 <= xb1)) && (yb0 <= ya1)) && (ya0 <= yb1));
}

TestRes testIntersect(const QuadCurve& p, const QuadCurve& q, double tol) {
    double pxmin = min3(p.x.c0, p.x.c1, p.x.c2);
    double pymin = min3(p.y.c0, p.y.c1, p.y.c2);
    double pxmax = max3(p.x.c0, p.x.c1, p.x.c2);
    double pymax = max3(p.y.c0, p.y.c1, p.y.c2);
    double qxmin = min3(q.x.c0, q.x.c1, q.x.c2);
    double qymin = min3(q.y.c0, q.y.c1, q.y.c2);
    double qxmax = max3(q.x.c0, q.x.c1, q.x.c2);
    double qymax = max3(q.y.c0, q.y.c1, q.y.c2);
    TestRes res = TestRes{.exclude = true, .accept = false, .intersect = Point{.x = 0.0, .y = 0.0}};
    if (rectsOverlap(pxmin, pymin, pxmax, pymax, qxmin, qymin, qxmax, qymax)) {
        res.exclude = false;
        double xmin = maxf(pxmin, qxmin);
        double xmax = minf(pxmax, qxmax);
        if (((xmax - xmin) <= tol)) {
            double ymin = maxf(pymin, qymin);
            double ymax = minf(pymax, qymax);
            if (((ymax - ymin) <= tol)) {
                res.accept = true;
                res.intersect.x = (0.5 * (xmin + xmax));
                res.intersect.y = (0.5 * (ymin + ymax));
            }
        }
    }
    return res;
}

bool seemsToBeDuplicate(const std::vector<Point>& pts, const Point& xy, double spacing) {
    int64_t i = int64_t(0);
    while ((i < pts.size())) {
        Point pt = pts[i];
        if (((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing))) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<Point> findIntersects(const QuadCurve& p, const QuadCurve& q, double tol, double spacing) {
    std::vector<Point> inters = {};
    std::vector<std::map<std::string, QuadCurve>> workload = std::vector<std::map<std::string, QuadCurve>>{std::map<std::string, QuadCurve>{{"p", p}, {"q", q}}};
    while ((workload.size() > int64_t(0))) {
        int64_t idx = (workload.size() - int64_t(1));
        std::map<std::string, QuadCurve> work = workload[idx];
        workload = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), idx - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+idx); })(workload);
        TestRes res = testIntersect(([&](const auto& __m){ auto __it = __m.find(std::string("p")); return __it != __m.end() ? __it->second : QuadCurve{}; })(work), ([&](const auto& __m){ auto __it = __m.find(std::string("q")); return __it != __m.end() ? __it->second : QuadCurve{}; })(work), tol);
        bool excl = res.exclude;
        bool acc = res.accept;
        Point inter = res.intersect;
        if (acc) {
            if (!seemsToBeDuplicate(inters, inter, spacing)) {
                inters = ([&]{ auto __tmp = inters; __tmp.push_back(inter); return __tmp; }());
            }
        } else         if (!excl) {
            std::vector<QuadCurve> ps = subdivideQuadCurve(([&](const auto& __m){ auto __it = __m.find(std::string("p")); return __it != __m.end() ? __it->second : QuadCurve{}; })(work), 0.5);
            std::vector<QuadCurve> qs = subdivideQuadCurve(([&](const auto& __m){ auto __it = __m.find(std::string("q")); return __it != __m.end() ? __it->second : QuadCurve{}; })(work), 0.5);
            QuadCurve p0 = ps[int64_t(0)];
            QuadCurve p1 = ps[int64_t(1)];
            QuadCurve q0 = qs[int64_t(0)];
            QuadCurve q1 = qs[int64_t(1)];
            QuadCurve p0a = p0;
            QuadCurve q0a = q0;
            QuadCurve p1a = p1;
            QuadCurve q1a = q1;
            workload = ([&]{ auto __tmp = workload; __tmp.push_back(std::map<std::string, QuadCurve>{{"p", p0a}, {"q", q0a}}); return __tmp; }());
            workload = ([&]{ auto __tmp = workload; __tmp.push_back(std::map<std::string, QuadCurve>{{"p", p0}, {"q", q1a}}); return __tmp; }());
            workload = ([&]{ auto __tmp = workload; __tmp.push_back(std::map<std::string, QuadCurve>{{"p", p1a}, {"q", q0}}); return __tmp; }());
            workload = ([&]{ auto __tmp = workload; __tmp.push_back(std::map<std::string, QuadCurve>{{"p", p1}, {"q", q1}}); return __tmp; }());
        }

    }
    return inters;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        QuadCurve p = QuadCurve{.x = QuadSpline{.c0 = -1.0, .c1 = 0.0, .c2 = 1.0}, .y = QuadSpline{.c0 = 0.0, .c1 = 10.0, .c2 = 0.0}};
        QuadCurve q = QuadCurve{.x = QuadSpline{.c0 = 2.0, .c1 = -8.0, .c2 = 2.0}, .y = QuadSpline{.c0 = 1.0, .c1 = 2.0, .c2 = 3.0}};
        double tol = 1e-07;
        double spacing = (tol * 10.0);
        std::vector<Point> inters = findIntersects(p, q, tol, spacing);
        int64_t i = int64_t(0);
        while ((i < inters.size())) {
            Point pt = inters[i];
            std::cout << ((((std::string("(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << pt.x; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << pt.y; return ss.str(); }())) + std::string(")"));
            std::cout << std::endl;
            i = (i + int64_t(1));
        }
    }
    return 0;
}
