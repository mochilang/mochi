// Generated by Mochi transpiler v0.10.41 on 2025-07-26 20:43:43 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Writer {
    std::string order;
    int64_t bits;
    int64_t nbits;
    std::vector<int64_t> data;
    auto operator<=>(const Writer&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Writer& v) {
    os << '{' << "'order': "<< "'" << v.order << "'"
 << ", " << "'bits': "<< v.bits
 << ", " << "'nbits': "<< v.nbits
 << ", " << "'data': "<< "["; for(size_t i=0;i<v.data.size();++i){ if(i>0) os << ", "; os << v.data[i]; } os << "]"
 << '}';
    return os;
}

int64_t pow2(int64_t n);
int64_t lshift(int64_t x, int64_t n);
int64_t rshift(int64_t x, int64_t n);
Writer NewWriter(std::string order);
Writer writeBitsLSB(Writer w, int64_t c, int64_t width);
Writer writeBitsMSB(Writer w, int64_t c, int64_t width);
Writer WriteBits(Writer w, int64_t c, int64_t width);
Writer CloseWriter(Writer w);
std::string toBinary(int64_t n, int64_t bits);
std::string bytesToBits(const std::vector<int64_t>& bs);
void ExampleWriter_WriteBits();
int main();

int64_t pow2(int64_t n) {
    int64_t v = 1;
    int64_t i = 0;
    while ((i < n)) {
        v = (v * 2);
        i = (i + 1);
    }
    return v;
}

int64_t lshift(int64_t x, int64_t n) {
    return (x * pow2(n));
}

int64_t rshift(int64_t x, int64_t n) {
    return (x / pow2(n));
}

Writer NewWriter(std::string order) {
    return Writer{order, 0, 0, {}};
}

Writer writeBitsLSB(Writer w, int64_t c, int64_t width) {
    w.bits = (w.bits + lshift(c, w.nbits));
    w.nbits = (w.nbits + width);
    while ((w.nbits >= 8)) {
        int64_t b = (w.bits % 256);
        w.data = ([&]{ auto __tmp = w.data; __tmp.push_back(b); return __tmp; }());
        w.bits = rshift(w.bits, 8);
        w.nbits = (w.nbits - 8);
    }
    return w;
}

Writer writeBitsMSB(Writer w, int64_t c, int64_t width) {
    w.bits = (w.bits + lshift(c, ((32 - width) - w.nbits)));
    w.nbits = (w.nbits + width);
    while ((w.nbits >= 8)) {
        int64_t b = (rshift(w.bits, 24) % 256);
        w.data = ([&]{ auto __tmp = w.data; __tmp.push_back(b); return __tmp; }());
        w.bits = ((w.bits % pow2(24)) * 256);
        w.nbits = (w.nbits - 8);
    }
    return w;
}

Writer WriteBits(Writer w, int64_t c, int64_t width) {
    if ((w.order == std::string("LSB"))) {
        return writeBitsLSB(w, c, width);
    }
    return writeBitsMSB(w, c, width);
}

Writer CloseWriter(Writer w) {
    if ((w.nbits > 0)) {
        if ((w.order == std::string("MSB"))) {
            w.bits = rshift(w.bits, 24);
        }
        w.data = ([&]{ auto __tmp = w.data; __tmp.push_back((w.bits % 256)); return __tmp; }());
    }
    w.bits = 0;
    w.nbits = 0;
    return w;
}

std::string toBinary(int64_t n, int64_t bits) {
    std::string b = std::string("");
    int64_t val = n;
    int64_t i = 0;
    while ((i < bits)) {
        b = (([&]{ std::ostringstream ss; ss << std::boolalpha << (val % 2); return ss.str(); }()) + b);
        val = (val / 2);
        i = (i + 1);
    }
    return b;
}

std::string bytesToBits(const std::vector<int64_t>& bs) {
    std::string out = std::string("[");
    int64_t i = 0;
    while ((i < bs.size())) {
        out = (out + toBinary(bs[i], 8));
        if (((i + 1) < bs.size())) {
            out = (out + std::string(" "));
        }
        i = (i + 1);
    }
    out = (out + std::string("]"));
    return out;
}

void ExampleWriter_WriteBits() {
    Writer bw = NewWriter(std::string("MSB"));
    bw = WriteBits(bw, 15, 4);
    bw = WriteBits(bw, 0, 1);
    bw = WriteBits(bw, 19, 5);
    bw = CloseWriter(bw);
    std::cout << bytesToBits(bw.data);
    std::cout << std::endl;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        ExampleWriter_WriteBits();
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
