// Generated by Mochi transpiler v0.10.47 on 2025-07-28 13:53:06 GMT+7
#include <iostream>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <vector>
#include <map>
#include <sstream>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
using cpp_int = boost::multiprecision::cpp_int;
struct BigRat {
    cpp_int num; cpp_int den;
    BigRat(cpp_int n=0, cpp_int d=1){ init(n,d); }
    static cpp_int _gcd(cpp_int a, cpp_int b){ if(a<0) a=-a; if(b<0) b=-b; while(b!=0){ cpp_int t=a%b; a=b; b=t;} return a; }
    void init(cpp_int n, cpp_int d){ if(d<0){ n=-n; d=-d; } cpp_int g=_gcd(n,d); num=n/g; den=d/g; }
    BigRat operator+(const BigRat& o) const { return BigRat(num*o.den + o.num*den, den*o.den); }
    BigRat operator-(const BigRat& o) const { return BigRat(num*o.den - o.num*den, den*o.den); }
    BigRat operator*(const BigRat& o) const { return BigRat(num*o.num, den*o.den); }
    BigRat operator/(const BigRat& o) const { return BigRat(num*o.den, den*o.num); }
    BigRat operator-() const { return BigRat(-num, den); }
};
template<typename A> BigRat _bigrat(A a){ return BigRat(cpp_int(a), cpp_int(1)); }
inline BigRat _bigrat(const BigRat& r){ return r; }
template<typename A, typename B> BigRat _bigrat(A a, B b){ return BigRat(cpp_int(a), cpp_int(b)); }
inline cpp_int _num(const BigRat& r){ return r.num; }
inline cpp_int _denom(const BigRat& r){ return r.den; }
static std::ostream& operator<<(std::ostream& os, const BigRat& r){ os<<r.num; if(r.den!=1) os<<"/"<<r.den; return os; }
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

BigRat br(int64_t n, int64_t d);
std::string format(const std::vector<std::map<std::string, int64_t>>& ts);
BigRat tanEval(int64_t coef, const BigRat& f);
BigRat tans(const std::vector<std::map<std::string, int64_t>>& m);
int main();

std::vector<std::vector<std::map<std::string, int64_t>>> testCases = std::vector<std::vector<std::map<std::string, int64_t>>>{std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(2)}}, std::map<std::string, int64_t>{{"a", int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(3)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(2)}, {"n", int64_t(1)}, {"d", int64_t(3)}}, std::map<std::string, int64_t>{{"a", int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(7)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(4)}, {"n", int64_t(1)}, {"d", int64_t(5)}}, std::map<std::string, int64_t>{{"a", -int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(239)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(5)}, {"n", int64_t(1)}, {"d", int64_t(7)}}, std::map<std::string, int64_t>{{"a", int64_t(2)}, {"n", int64_t(3)}, {"d", int64_t(79)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(2)}}, std::map<std::string, int64_t>{{"a", int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(5)}}, std::map<std::string, int64_t>{{"a", int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(8)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(4)}, {"n", int64_t(1)}, {"d", int64_t(5)}}, std::map<std::string, int64_t>{{"a", -int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(70)}}, std::map<std::string, int64_t>{{"a", int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(99)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(5)}, {"n", int64_t(1)}, {"d", int64_t(7)}}, std::map<std::string, int64_t>{{"a", int64_t(4)}, {"n", int64_t(1)}, {"d", int64_t(53)}}, std::map<std::string, int64_t>{{"a", int64_t(2)}, {"n", int64_t(1)}, {"d", int64_t(4443)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(6)}, {"n", int64_t(1)}, {"d", int64_t(8)}}, std::map<std::string, int64_t>{{"a", int64_t(2)}, {"n", int64_t(1)}, {"d", int64_t(57)}}, std::map<std::string, int64_t>{{"a", int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(239)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(8)}, {"n", int64_t(1)}, {"d", int64_t(10)}}, std::map<std::string, int64_t>{{"a", -int64_t(1)}, {"n", int64_t(1)}, {"d", int64_t(239)}}, std::map<std::string, int64_t>{{"a", -int64_t(4)}, {"n", int64_t(1)}, {"d", int64_t(515)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(12)}, {"n", int64_t(1)}, {"d", int64_t(18)}}, std::map<std::string, int64_t>{{"a", int64_t(8)}, {"n", int64_t(1)}, {"d", int64_t(57)}}, std::map<std::string, int64_t>{{"a", -int64_t(5)}, {"n", int64_t(1)}, {"d", int64_t(239)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(16)}, {"n", int64_t(1)}, {"d", int64_t(21)}}, std::map<std::string, int64_t>{{"a", int64_t(3)}, {"n", int64_t(1)}, {"d", int64_t(239)}}, std::map<std::string, int64_t>{{"a", int64_t(4)}, {"n", int64_t(3)}, {"d", int64_t(1042)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(22)}, {"n", int64_t(1)}, {"d", int64_t(28)}}, std::map<std::string, int64_t>{{"a", int64_t(2)}, {"n", int64_t(1)}, {"d", int64_t(443)}}, std::map<std::string, int64_t>{{"a", -int64_t(5)}, {"n", int64_t(1)}, {"d", int64_t(1393)}}, std::map<std::string, int64_t>{{"a", -int64_t(10)}, {"n", int64_t(1)}, {"d", int64_t(11018)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(22)}, {"n", int64_t(1)}, {"d", int64_t(38)}}, std::map<std::string, int64_t>{{"a", int64_t(17)}, {"n", int64_t(7)}, {"d", int64_t(601)}}, std::map<std::string, int64_t>{{"a", int64_t(10)}, {"n", int64_t(7)}, {"d", int64_t(8149)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(44)}, {"n", int64_t(1)}, {"d", int64_t(57)}}, std::map<std::string, int64_t>{{"a", int64_t(7)}, {"n", int64_t(1)}, {"d", int64_t(239)}}, std::map<std::string, int64_t>{{"a", -int64_t(12)}, {"n", int64_t(1)}, {"d", int64_t(682)}}, std::map<std::string, int64_t>{{"a", int64_t(24)}, {"n", int64_t(1)}, {"d", int64_t(12943)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(88)}, {"n", int64_t(1)}, {"d", int64_t(172)}}, std::map<std::string, int64_t>{{"a", int64_t(51)}, {"n", int64_t(1)}, {"d", int64_t(239)}}, std::map<std::string, int64_t>{{"a", int64_t(32)}, {"n", int64_t(1)}, {"d", int64_t(682)}}, std::map<std::string, int64_t>{{"a", int64_t(44)}, {"n", int64_t(1)}, {"d", int64_t(5357)}}, std::map<std::string, int64_t>{{"a", int64_t(68)}, {"n", int64_t(1)}, {"d", int64_t(12943)}}}, std::vector<std::map<std::string, int64_t>>{std::map<std::string, int64_t>{{"a", int64_t(88)}, {"n", int64_t(1)}, {"d", int64_t(172)}}, std::map<std::string, int64_t>{{"a", int64_t(51)}, {"n", int64_t(1)}, {"d", int64_t(239)}}, std::map<std::string, int64_t>{{"a", int64_t(32)}, {"n", int64_t(1)}, {"d", int64_t(682)}}, std::map<std::string, int64_t>{{"a", int64_t(44)}, {"n", int64_t(1)}, {"d", int64_t(5357)}}, std::map<std::string, int64_t>{{"a", int64_t(68)}, {"n", int64_t(1)}, {"d", int64_t(12944)}}}};

BigRat br(int64_t n, int64_t d) {
    return (_bigrat(n) / _bigrat(_bigrat(d)));
}

std::string format(const std::vector<std::map<std::string, int64_t>>& ts) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < ts.size())) {
        std::map<std::string, int64_t> t = ts[i];
        s = (((((((s + std::string("{")) + ([&]{ std::ostringstream ss; any_to_stream(ss, t["a"]);
 return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, t["n"]);
 return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, t["d"]);
 return ss.str(); }())) + std::string("}"));
        if ((i < (ts.size() - int64_t(1)))) {
            s = (s + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    return (s + std::string("]"));
}

BigRat tanEval(int64_t coef, const BigRat& f) {
    if ((coef == int64_t(1))) {
        return f;
    }
    if ((coef < int64_t(0))) {
        return -_bigrat(tanEval(-coef, f));
    }
    int64_t ca = (coef / int64_t(2));
    int64_t cb = (coef - ca);
    BigRat a = tanEval(ca, f);
    BigRat b = tanEval(cb, f);
    return (_bigrat((a + b)) / _bigrat((_bigrat(int64_t(1)) - (a * b))));
}

BigRat tans(const std::vector<std::map<std::string, int64_t>>& m) {
    if ((m.size() == int64_t(1))) {
        std::map<std::string, int64_t> t = m[int64_t(0)];
        return tanEval((int64_t)(t["a"]), br((int64_t)(t["n"]), (int64_t)(t["d"])));
    }
    int64_t half = (m.size() / int64_t(2));
    BigRat a = tans(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), half - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+half); })(m));
    BigRat b = tans(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(half, m.size() - half); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+half, __v.begin()+m.size()); })(m));
    return (_bigrat((a + b)) / _bigrat((_bigrat(int64_t(1)) - (a * b))));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        for (std::vector<std::map<std::string, int64_t>> ts : testCases) {
            std::cout << (((std::string("tan ") + format(ts)) + std::string(" = ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << tans(ts); return ss.str(); }()));
            std::cout << std::endl;
        }
    }
    return 0;
}
