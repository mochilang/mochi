// Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:22:21 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool isLeap(int64_t y);
int64_t dayOfYear(int64_t y, int64_t m, int64_t d);
std::string ordinal(int64_t n);
std::string discordian(int64_t y, int64_t m, int64_t d);
int main();

std::vector<std::string> dayNames = std::vector<std::string>{std::string("Sweetmorn"), std::string("Boomtime"), std::string("Pungenday"), std::string("Prickle-Prickle"), std::string("Setting Orange")};
std::vector<std::string> seasons = std::vector<std::string>{std::string("Chaos"), std::string("Discord"), std::string("Confusion"), std::string("Bureaucracy"), std::string("The Aftermath")};
std::vector<std::vector<std::string>> holydays = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("Mungday"), std::string("Chaoflux")}, std::vector<std::string>{std::string("Mojoday"), std::string("Discoflux")}, std::vector<std::string>{std::string("Syaday"), std::string("Confuflux")}, std::vector<std::string>{std::string("Zaraday"), std::string("Bureflux")}, std::vector<std::string>{std::string("Maladay"), std::string("Afflux")}};
std::vector<int64_t> daysBefore = std::vector<int64_t>{int64_t(0), int64_t(31), int64_t(59), int64_t(90), int64_t(120), int64_t(151), int64_t(181), int64_t(212), int64_t(243), int64_t(273), int64_t(304), int64_t(334)};

bool isLeap(int64_t y) {
    if (((y % int64_t(400)) == int64_t(0))) {
        return true;
    }
    if (((y % int64_t(100)) == int64_t(0))) {
        return false;
    }
    return ((y % int64_t(4)) == int64_t(0));
}

int64_t dayOfYear(int64_t y, int64_t m, int64_t d) {
    int64_t doy = (daysBefore[(m - int64_t(1))] + d);
    if (((m > int64_t(2)) && isLeap(y))) {
        doy = (doy + int64_t(1));
    }
    return doy;
}

std::string ordinal(int64_t n) {
    std::string suff = std::string("th");
    int64_t mod100 = (n % int64_t(100));
    if (((mod100 < int64_t(11)) || (mod100 > int64_t(13)))) {
        int64_t r = (n % int64_t(10));
        if ((r == int64_t(1))) {
            suff = std::string("st");
        } else         if ((r == int64_t(2))) {
            suff = std::string("nd");
        } else         if ((r == int64_t(3))) {
            suff = std::string("rd");
        }


    }
    return (([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()) + suff);
}

std::string discordian(int64_t y, int64_t m, int64_t d) {
    if (((isLeap(y) && (m == int64_t(2))) && (d == int64_t(29)))) {
        return (std::string("St. Tib's Day, YOLD ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (y + int64_t(1166)); return ss.str(); }()));
    }
    int64_t doy = dayOfYear(y, m, d);
    if ((isLeap(y) && (doy > int64_t(60)))) {
        doy = (doy - int64_t(1));
    }
    int64_t idx = (doy - int64_t(1));
    int64_t season = (idx / int64_t(73));
    int64_t day = (idx % int64_t(73));
    std::string res = ((((((dayNames[(idx % int64_t(5))] + std::string(", the ")) + ordinal((day + int64_t(1)))) + std::string(" day of ")) + seasons[season]) + std::string(" in the YOLD ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << (y + int64_t(1166)); return ss.str(); }()));
    if ((day == int64_t(4))) {
        res = (((res + std::string(". Celebrate ")) + holydays[season][int64_t(0)]) + std::string("!"));
    }
    if ((day == int64_t(49))) {
        res = (((res + std::string(". Celebrate ")) + holydays[season][int64_t(1)]) + std::string("!"));
    }
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<int64_t>> dates = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(2010), int64_t(7), int64_t(22)}, std::vector<int64_t>{int64_t(2012), int64_t(2), int64_t(28)}, std::vector<int64_t>{int64_t(2012), int64_t(2), int64_t(29)}, std::vector<int64_t>{int64_t(2012), int64_t(3), int64_t(1)}, std::vector<int64_t>{int64_t(2012), int64_t(12), int64_t(31)}, std::vector<int64_t>{int64_t(2013), int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(2100), int64_t(12), int64_t(31)}, std::vector<int64_t>{int64_t(2015), int64_t(10), int64_t(19)}, std::vector<int64_t>{int64_t(2010), int64_t(1), int64_t(5)}, std::vector<int64_t>{int64_t(2011), int64_t(5), int64_t(3)}, std::vector<int64_t>{int64_t(2000), int64_t(3), int64_t(13)}};
        int64_t i = int64_t(0);
        while ((i < dates.size())) {
            std::vector<int64_t> dt = dates[i];
            std::cout << discordian(dt[int64_t(0)], dt[int64_t(1)], dt[int64_t(2)]);
            std::cout << std::endl;
            i = (i + int64_t(1));
        }
    }
    return 0;
}
