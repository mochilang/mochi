// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:13:40 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

int ackermann(int m, int n);
int main();

int ackermann(int m, int n) {
    if ((m == 0)) {
        return (n + 1);
    }
    if ((n == 0)) {
        return ackermann((m - 1), 1);
    }
    return ackermann((m - 1), (int)(ackermann(m, (n - 1))));
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::cout << (std::string("A(0, 0) = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ackermann(0, 0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("A(1, 2) = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ackermann(1, 2); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("A(2, 4) = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ackermann(2, 4); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("A(3, 4) = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ackermann(3, 4); return ss.str(); }()));
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
