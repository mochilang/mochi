// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:53:41 GMT+7
#include <iostream>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

boost::multiprecision::cpp_int pow_big(const boost::multiprecision::cpp_int& base, int64_t exp);
boost::multiprecision::cpp_int cullen(int64_t n);
boost::multiprecision::cpp_int woodall(int64_t n);
std::string show_list(const std::vector<boost::multiprecision::cpp_int>& xs);
int main();

boost::multiprecision::cpp_int pow_big(const boost::multiprecision::cpp_int& base, int64_t exp) {
    boost::multiprecision::cpp_int result = int64_t(1);
    boost::multiprecision::cpp_int b = base;
    int64_t e = exp;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            result = (result * b);
        }
        b = (b * b);
        e = (int64_t)((e / int64_t(2)));
    }
    return result;
}

boost::multiprecision::cpp_int cullen(int64_t n) {
    boost::multiprecision::cpp_int two_n = pow_big((boost::multiprecision::cpp_int)(int64_t(2)), n);
    return ((two_n * (boost::multiprecision::cpp_int)(n)) + (boost::multiprecision::cpp_int)(int64_t(1)));
}

boost::multiprecision::cpp_int woodall(int64_t n) {
    return (cullen(n) - (boost::multiprecision::cpp_int)(int64_t(2)));
}

std::string show_list(const std::vector<boost::multiprecision::cpp_int>& xs) {
    std::string line = std::string("");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << xs[i]; return ss.str(); }()));
        if ((i < (xs.size() - int64_t(1)))) {
            line = (line + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    return line;
}

int main() {
    std::vector<boost::multiprecision::cpp_int> cnums = {};
    int64_t i = int64_t(1);
    while ((i <= int64_t(20))) {
        cnums = ([&]{ auto __tmp = cnums; __tmp.push_back(cullen(i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::cout << std::string("First 20 Cullen numbers (n * 2^n + 1):");
    std::cout << std::endl;
    std::cout << show_list(cnums);
    std::cout << std::endl;
    std::vector<boost::multiprecision::cpp_int> wnums = {};
    i = int64_t(1);
    while ((i <= int64_t(20))) {
        wnums = ([&]{ auto __tmp = wnums; __tmp.push_back(woodall(i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::cout << std::string("\nFirst 20 Woodall numbers (n * 2^n - 1):");
    std::cout << std::endl;
    std::cout << show_list(wnums);
    std::cout << std::endl;
    std::vector<boost::multiprecision::cpp_int> cprimes = std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(1)), (boost::multiprecision::cpp_int)(int64_t(141)), (boost::multiprecision::cpp_int)(int64_t(4713)), (boost::multiprecision::cpp_int)(int64_t(5795)), (boost::multiprecision::cpp_int)(int64_t(6611))};
    std::cout << std::string("\nFirst 5 Cullen primes (in terms of n):");
    std::cout << std::endl;
    std::cout << show_list(cprimes);
    std::cout << std::endl;
    std::vector<boost::multiprecision::cpp_int> wprimes = std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(2)), (boost::multiprecision::cpp_int)(int64_t(3)), (boost::multiprecision::cpp_int)(int64_t(6)), (boost::multiprecision::cpp_int)(int64_t(30)), (boost::multiprecision::cpp_int)(int64_t(75)), (boost::multiprecision::cpp_int)(int64_t(81)), (boost::multiprecision::cpp_int)(int64_t(115)), (boost::multiprecision::cpp_int)(int64_t(123)), (boost::multiprecision::cpp_int)(int64_t(249)), (boost::multiprecision::cpp_int)(int64_t(362)), (boost::multiprecision::cpp_int)(int64_t(384)), (boost::multiprecision::cpp_int)(int64_t(462))};
    std::cout << std::string("\nFirst 12 Woodall primes (in terms of n):");
    std::cout << std::endl;
    std::cout << show_list(wprimes);
    std::cout << std::endl;
    return 0;
}
