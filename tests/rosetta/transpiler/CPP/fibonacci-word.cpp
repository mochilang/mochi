// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:21:36 GMT+7
#include <iostream>
#include <string>
#include <cmath>
#include <map>
#include <algorithm>
#include <type_traits>
#include <vector>
#include <sstream>
#include <iomanip>
#include <optional>
#include <any>


static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double entropy(std::string s);
std::string fibonacciWord(int64_t n);
int main();
std::string pad(std::string s, int64_t w);
std::string fmt(double x);
double floorf(double x);
int64_t indexOf(std::string s, std::string ch);

double entropy(std::string s) {
    std::map<std::string, int64_t> counts = {};
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + int64_t(1)) - i);
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(counts, ch)) {
            counts[ch] = (counts.at(ch) + int64_t(1));
        } else {
            counts[ch] = int64_t(1);
        }
        i = (i + int64_t(1));
    }
    double hm = 0.0;
    for (std::string k : ([&]{ std::vector<std::decay_t<decltype(counts.begin()->first)>> keys; for(const auto& __p : counts) keys.push_back(__p.first); return keys; }())) {
        double c = (double)(counts.at(k));
        hm = (hm + (c * (std::log(c) / std::log(2.0))));
    }
    double l = (double)(s.size());
    return ((std::log(l) / std::log(2.0)) - ((double)(hm) / (l)));
}

std::string fibonacciWord(int64_t n) {
    std::string a = std::string("1");
    std::string b = std::string("0");
    int64_t i = int64_t(1);
    while ((i < n)) {
        std::string tmp = b;
        b = (b + a);
        a = tmp;
        i = (i + int64_t(1));
    }
    return a;
}

std::string pad(std::string s, int64_t w) {
    std::string t = s;
    while ((t.size() < w)) {
        t = (std::string(" ") + t);
    }
    return t;
}

std::string fmt(double x) {
    double y = ((double)(floorf(((x * 100000000.0) + 0.5))) / (100000000.0));
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }());
    int64_t dot = _index_of(s, std::string("."));
    if ((dot == (int64_t(0) - int64_t(1)))) {
        s = (s + std::string(".00000000"));
    } else {
        int64_t d = ((s.size() - dot) - int64_t(1));
        while ((d < int64_t(8))) {
            s = (s + std::string("0"));
            d = (d + int64_t(1));
        }
    }
    return s;
}

double floorf(double x) {
    int64_t y = (int64_t)(x);
    return (double)(y);
}

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return (int64_t(0) - int64_t(1));
}

int main() {
    std::cout << ((pad(std::string("N"), int64_t(3)) + pad(std::string("Length"), int64_t(9))) + std::string("  Entropy      Word"));
    std::cout << std::endl;
    int64_t n = int64_t(1);
    while ((n < int64_t(10))) {
        std::string s = fibonacciWord(n);
        std::cout << (((((pad(([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()), int64_t(3)) + pad(([&]{ std::ostringstream ss; ss << std::boolalpha << s.size(); return ss.str(); }()), int64_t(9))) + std::string("  ")) + fmt(entropy(s))) + std::string("  ")) + s);
        std::cout << std::endl;
        n = (n + int64_t(1));
    }
    while ((n <= int64_t(37))) {
        std::string s = fibonacciWord(n);
        std::cout << (((pad(([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()), int64_t(3)) + pad(([&]{ std::ostringstream ss; ss << std::boolalpha << s.size(); return ss.str(); }()), int64_t(9))) + std::string("  ")) + fmt(entropy(s)));
        std::cout << std::endl;
        n = (n + int64_t(1));
    }
    return 0;
}
