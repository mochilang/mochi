// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:15:45 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <any>
#include <type_traits>
#include <cmath>
#include <optional>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string _char(int64_t n);
std::string fromBytes(const std::vector<int64_t>& bs);
int main();

std::vector<int64_t> b = std::vector<int64_t>{int64_t(98), int64_t(105), int64_t(110), int64_t(97), int64_t(114), int64_t(121)};
std::vector<int64_t> c = b;
std::vector<int64_t> d = {};
int64_t i = int64_t(0);
auto z = ([]{ auto __tmp = b; __tmp.push_back(int64_t(122)); return __tmp; }());
std::vector<int64_t> sub = ([](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), int64_t(3) - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+int64_t(3)); })(b);
std::vector<int64_t> f = {};
std::vector<int64_t> rem = {};

std::string _char(int64_t n) {
    std::string letters = std::string("abcdefghijklmnopqrstuvwxyz");
    int64_t idx = (n - int64_t(97));
    if (((idx < int64_t(0)) || (idx >= letters.size()))) {
        return std::string("?");
    }
    return letters.substr(idx, (idx + int64_t(1)) - idx);
}

std::string fromBytes(const std::vector<int64_t>& bs) {
    std::string s = std::string("");
    int64_t i = int64_t(0);
    while ((i < bs.size())) {
        s = (s + _char(bs[i]));
        i = (i + int64_t(1));
    }
    return s;
}

int main() {
    std::cout << ([&]{ std::ostringstream ss; { auto __tmp = b; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
    std::cout << std::endl;
    std::cout << ([&]{ std::ostringstream ss; { auto __tmp = c; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
    std::cout << std::endl;
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << (b == c); return ss.str(); }());
    std::cout << std::endl;
    while ((i < b.size())) {
        d = ([&]{ auto __tmp = d; __tmp.push_back(b[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    d[int64_t(1)] = int64_t(97);
    d[int64_t(4)] = int64_t(110);
    std::cout << fromBytes(b);
    std::cout << std::endl;
    std::cout << fromBytes(d);
    std::cout << std::endl;
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << (b.size() == int64_t(0)); return ss.str(); }());
    std::cout << std::endl;
    std::cout << fromBytes((std::vector<int64_t>)(z));
    std::cout << std::endl;
    std::cout << fromBytes(sub);
    std::cout << std::endl;
    i = int64_t(0);
    while ((i < d.size())) {
        int64_t val = d[i];
        if ((val == int64_t(110))) {
            f = ([&]{ auto __tmp = f; __tmp.push_back(int64_t(109)); return __tmp; }());
        } else {
            f = ([&]{ auto __tmp = f; __tmp.push_back(val); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    std::cout << ((fromBytes(d) + std::string(" -> ")) + fromBytes(f));
    std::cout << std::endl;
    rem = ([&]{ auto __tmp = rem; __tmp.push_back(b[int64_t(0)]); return __tmp; }());
    i = int64_t(3);
    while ((i < b.size())) {
        rem = ([&]{ auto __tmp = rem; __tmp.push_back(b[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::cout << fromBytes(rem);
    std::cout << std::endl;
    return 0;
}
