// Generated by Mochi transpiler v0.10.54 on 2025-08-02 12:09:15 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<double>)) { const auto& v = std::any_cast<const std::vector<double>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
static size_t any_len(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v).size();
    if(v.type() == typeid(std::vector<int64_t>)) return std::any_cast<std::vector<int64_t>>(v).size();
    if(v.type() == typeid(std::vector<double>)) return std::any_cast<std::vector<double>>(v).size();
    if(v.type() == typeid(std::vector<std::any>)) return std::any_cast<std::vector<std::any>>(v).size();
    if(v.type() == typeid(std::vector<std::string>)) return std::any_cast<std::vector<std::string>>(v).size();
    if(v.type() == typeid(std::map<std::string, std::any>)) return std::any_cast<std::map<std::string, std::any>>(v).size();
    return 0;
}
static std::any any_index(const std::any& v, int64_t i) {
    if(v.type() == typeid(std::vector<int64_t>)) return std::any_cast<std::vector<int64_t>>(v)[i];
    if(v.type() == typeid(std::vector<double>)) return std::any_cast<std::vector<double>>(v)[i];
    if(v.type() == typeid(std::vector<std::any>)) return std::any_cast<std::vector<std::any>>(v)[i];
    if(v.type() == typeid(std::vector<std::string>)) return std::any_cast<std::vector<std::string>>(v)[i];
    return std::any();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t parseIntStr(std::string str);
std::vector<std::string> fields(std::string s);
std::string unescape(std::string s);
std::map<std::string, std::any> parseProgram(std::string src);
void runVM(const std::map<std::string, std::any>& prog);
std::string trim(std::string s);
std::vector<std::string> split(std::string s, std::string sep);
int main();

int64_t parseIntStr(std::string str) {
    int64_t i = int64_t(0);
    bool neg = false;
    if (((str.size() > int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(str) == std::string("-")))) {
        neg = true;
        i = int64_t(1);
    }
    int64_t n = int64_t(0);
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", int64_t(0)}, {"1", int64_t(1)}, {"2", int64_t(2)}, {"3", int64_t(3)}, {"4", int64_t(4)}, {"5", int64_t(5)}, {"6", int64_t(6)}, {"7", int64_t(7)}, {"8", int64_t(8)}, {"9", int64_t(9)}};
    while ((i < str.size())) {
        n = ((n * int64_t(10)) + digits.at(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(str)));
        i = (i + int64_t(1));
    }
    if (neg) {
        n = -n;
    }
    return n;
}

std::vector<std::string> fields(std::string s) {
    std::vector<std::string> words = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + int64_t(1)) - i);
        if ((((ch == std::string(" ")) || (ch == std::string("\t"))) || (ch == std::string("\n")))) {
            if ((cur.size() > int64_t(0))) {
                words = ([&]{ auto __tmp = words; __tmp.push_back(cur); return __tmp; }());
                cur = std::string("");
            }
        } else {
            cur = (cur + ch);
        }
        i = (i + int64_t(1));
    }
    if ((cur.size() > int64_t(0))) {
        words = ([&]{ auto __tmp = words; __tmp.push_back(cur); return __tmp; }());
    }
    return words;
}

std::string unescape(std::string s) {
    std::string out = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if (((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s) == std::string("\\")) && ((i + int64_t(1)) < s.size()))) {
            std::string c = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((i + int64_t(1)), (i + int64_t(2)) - (i + int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(i + int64_t(1)), __v.begin()+(i + int64_t(2))); })(s);
            if ((c == std::string("n"))) {
                out = (out + std::string("\n"));
                i = (i + int64_t(2));
                continue;
            } else             if ((c == std::string("\\"))) {
                out = (out + std::string("\\"));
                i = (i + int64_t(2));
                continue;
            }

        }
        out = (out + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s));
        i = (i + int64_t(1));
    }
    return out;
}

std::map<std::string, std::any> parseProgram(std::string src) {
    std::vector<std::string> lines = split(src, std::string("\n"));
    std::vector<std::string> header = fields(lines[int64_t(0)]);
    int64_t dataSize = _parse_int_str(header[int64_t(1)], int64_t(10));
    int64_t nStrings = _parse_int_str(header[int64_t(3)], int64_t(10));
    std::vector<std::string> stringPool = {};
    int64_t i = int64_t(1);
    while ((i <= nStrings)) {
        std::string s = lines[i];
        if ((s.size() > int64_t(0))) {
            stringPool = ([&]{ auto __tmp = stringPool; __tmp.push_back(unescape(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), (s.size() - int64_t(1)) - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+(s.size() - int64_t(1))); })(s))); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    std::vector<std::map<std::string, std::any>> code = {};
    std::map<int64_t, int64_t> addrMap = {};
    while ((i < lines.size())) {
        std::string line = trim(lines[i]);
        if ((line.size() == int64_t(0))) {
            break;
        }
        std::vector<std::string> parts = fields(line);
        int64_t addr = _parse_int_str(parts[int64_t(0)], int64_t(10));
        std::string op = parts[int64_t(1)];
        int64_t arg = int64_t(0);
        if ((op == std::string("push"))) {
            arg = _parse_int_str(parts[int64_t(2)], int64_t(10));
        } else         if (((op == std::string("fetch")) || (op == std::string("store")))) {
            arg = _parse_int_str(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), (parts[int64_t(2)].size() - int64_t(1)) - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+(parts[int64_t(2)].size() - int64_t(1))); })(parts[int64_t(2)]), int64_t(10));
        } else         if (((op == std::string("jmp")) || (op == std::string("jz")))) {
            arg = _parse_int_str(parts[int64_t(3)], int64_t(10));
        }


        code = ([&]{ auto __tmp = code; __tmp.push_back(std::map<std::string, std::any>{{"addr", std::any(addr)}, {"op", std::any(op)}, {"arg", std::any(arg)}}); return __tmp; }());
        addrMap[addr] = (code.size() - int64_t(1));
        i = (i + int64_t(1));
    }
    return std::map<std::string, std::any>{{"dataSize", std::any(dataSize)}, {"strings", std::any(stringPool)}, {"code", std::any(code)}, {"addrMap", std::any(addrMap)}};
}

void runVM(const std::map<std::string, std::any>& prog) {
    std::vector<int64_t> data = {};
    int64_t i = int64_t(0);
    while ((i < any_to_double(prog.at(std::string("dataSize"))))) {
        data = ([&]{ auto __tmp = data; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> stack = {};
    int64_t pc = int64_t(0);
    std::any code = prog.at(std::string("code"));
    std::any addrMap = prog.at(std::string("addrMap"));
    std::any pool = prog.at(std::string("strings"));
    std::string line = std::string("");
    while ((pc < any_len(code))) {
        std::any inst = any_index(code, pc);
        std::any op = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(inst)[std::string("op")]);
        std::any arg = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(inst)[std::string("arg")]);
        if ((any_to_string(op) == std::string("push"))) {
            stack = ([&]{ auto __tmp = stack; __tmp.push_back(std::any_cast<int64_t>(arg)); return __tmp; }());
            pc = (pc + int64_t(1));
            continue;
        }
        if ((any_to_string(op) == std::string("store"))) {
            data[arg] = stack[(stack.size() - int64_t(1))];
            stack = slice(stack, int64_t(0), (stack.size() - int64_t(1)));
            pc = (pc + int64_t(1));
            continue;
        }
        if ((any_to_string(op) == std::string("fetch"))) {
            stack = ([&]{ auto __tmp = stack; __tmp.push_back(data[arg]); return __tmp; }());
            pc = (pc + int64_t(1));
            continue;
        }
        if ((any_to_string(op) == std::string("add"))) {
            stack[(stack.size() - int64_t(2))] = (stack[(stack.size() - int64_t(2))] + stack[(stack.size() - int64_t(1))]);
            stack = slice(stack, int64_t(0), (stack.size() - int64_t(1)));
            pc = (pc + int64_t(1));
            continue;
        }
        if ((any_to_string(op) == std::string("lt"))) {
            int64_t v = int64_t(0);
            if ((stack[(stack.size() - int64_t(2))] < stack[(stack.size() - int64_t(1))])) {
                v = int64_t(1);
            }
            stack[(stack.size() - int64_t(2))] = v;
            stack = slice(stack, int64_t(0), (stack.size() - int64_t(1)));
            pc = (pc + int64_t(1));
            continue;
        }
        if ((any_to_string(op) == std::string("jz"))) {
            int64_t v = stack[(stack.size() - int64_t(1))];
            stack = slice(stack, int64_t(0), (stack.size() - int64_t(1)));
            if ((v == int64_t(0))) {
                pc = std::any_cast<int64_t>(addrMap[arg]);
            } else {
                pc = (pc + int64_t(1));
            }
            continue;
        }
        if ((any_to_string(op) == std::string("jmp"))) {
            pc = std::any_cast<int64_t>(addrMap[arg]);
            continue;
        }
        if ((any_to_string(op) == std::string("prts"))) {
            std::any s = any_index(pool, stack[(stack.size() - int64_t(1))]);
            stack = slice(stack, int64_t(0), (stack.size() - int64_t(1)));
            if ((any_to_string(s) != std::string("\n"))) {
                line = (line + ([&]{ std::ostringstream ss; any_to_stream(ss, s);
 return ss.str(); }()));
            }
            pc = (pc + int64_t(1));
            continue;
        }
        if ((any_to_string(op) == std::string("prti"))) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << stack[(stack.size() - int64_t(1))]; return ss.str(); }()));
            std::cout << line;
            std::cout << std::endl;
            line = std::string("");
            stack = slice(stack, int64_t(0), (stack.size() - int64_t(1)));
            pc = (pc + int64_t(1));
            continue;
        }
        if ((any_to_string(op) == std::string("halt"))) {
            break;
        }
        pc = (pc + int64_t(1));
    }
}

std::string trim(std::string s) {
    int64_t start = int64_t(0);
    while (((start < s.size()) && ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, (start + int64_t(1)) - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+(start + int64_t(1))); })(s) == std::string(" ")) || (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, (start + int64_t(1)) - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+(start + int64_t(1))); })(s) == std::string("\t"))))) {
        start = (start + int64_t(1));
    }
    int end = s.size();
    while (((end > start) && ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((end - int64_t(1)), end - (end - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(end - int64_t(1)), __v.begin()+end); })(s) == std::string(" ")) || (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((end - int64_t(1)), end - (end - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(end - int64_t(1)), __v.begin()+end); })(s) == std::string("\t"))))) {
        end = (end - int64_t(1));
    }
    return s.substr(start, end - start);
}

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((((sep.size() > int64_t(0)) && ((i + sep.size()) <= s.size())) && (s.substr(i, (i + sep.size()) - i) == sep))) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
            cur = std::string("");
            i = (i + sep.size());
        } else {
            cur = (cur + s.substr(i, (i + int64_t(1)) - i));
            i = (i + int64_t(1));
        }
    }
    parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    return parts;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string programText = ((((((((((((((((((((std::string("Datasize: 1 Strings: 2\n") + std::string("\"count is: \"\n")) + std::string("\"\\n\"\n")) + std::string("    0 push  1\n")) + std::string("    5 store [0]\n")) + std::string("   10 fetch [0]\n")) + std::string("   15 push  10\n")) + std::string("   20 lt\n")) + std::string("   21 jz     (43) 65\n")) + std::string("   26 push  0\n")) + std::string("   31 prts\n")) + std::string("   32 fetch [0]\n")) + std::string("   37 prti\n")) + std::string("   38 push  1\n")) + std::string("   43 prts\n")) + std::string("   44 fetch [0]\n")) + std::string("   49 push  1\n")) + std::string("   54 add\n")) + std::string("   55 store [0]\n")) + std::string("   60 jmp    (-51) 10\n")) + std::string("   65 halt\n"));
        std::map<std::string, std::any> prog = parseProgram(programText);
        runVM(prog);
    }
    return 0;
}
