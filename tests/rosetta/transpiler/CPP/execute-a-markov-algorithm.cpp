// Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:25:47 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <any>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct TestSetItem;

std::ostream& operator<<(std::ostream&, const TestSetItem&);


struct TestSetItem {
    std::string ruleSet;
    std::string sample;
    std::string output;
    auto operator<=>(const TestSetItem&) const = default;
};

std::ostream& operator<<(std::ostream& os, const TestSetItem& v) {
    os << '{' << "'ruleSet': "<< "'" << v.ruleSet << "'"
 << ", " << "'sample': "<< "'" << v.sample << "'"
 << ", " << "'output': "<< "'" << v.output << "'"
 << '}';
    return os;
}

std::vector<std::string> split(std::string s, std::string sep);
std::string trimSpace(std::string s);
int64_t indexOfSub(std::string s, std::string sub);
std::map<std::string, std::any> parseRules(std::string rs);
std::string runRules(const std::vector<std::map<std::string, std::any>>& rules, std::string s);
std::map<std::string, std::any> interpret(std::string ruleset, std::string input);
int main();

std::vector<TestSetItem> testSet = std::vector<TestSetItem>{TestSetItem{.ruleSet = std::string("# This rules file is extracted from Wikipedia:\n# http://en.wikipedia.org/wiki/Markov_Algorithm\nA -> apple\nB -> bag\nS -> shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n"), .sample = std::string("I bought a B of As from T S."), .output = std::string("I bought a bag of apples from my brother.")}, TestSetItem{.ruleSet = std::string("# Slightly modified from the rules on Wikipedia\nA -> apple\nB -> bag\nS -> .shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n"), .sample = std::string("I bought a B of As from T S."), .output = std::string("I bought a bag of apples from T shop.")}, TestSetItem{.ruleSet = std::string("# BNF Syntax testing rules\nA -> apple\nWWWW -> with\nBgage -> ->.*\nB -> bag\n->.* -> money\nW -> WW\nS -> .shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n"), .sample = std::string("I bought a B of As W my Bgage from T S."), .output = std::string("I bought a bag of apples with my money from T shop.")}, TestSetItem{.ruleSet = std::string("### Unary Multiplication Engine, for testing Markov Algorithm implementations\n### By Donal Fellows.\n# Unary addition engine\n_+1 -> _1+\n1+1 -> 11+\n# Pass for converting from the splitting of multiplication into ordinary\n# addition\n1! -> !1\n,! -> !+\n_! -> _\n# Unary multiplication by duplicating left side, right side times\n1*1 -> x,@y\n1x -> xX\nX, -> 1,1\nX1 -> 1X\n_x -> _X\n,x -> ,X\ny1 -> 1y\ny_ -> _\n# Next phase of applying\n1@1 -> x,@y\n1@_ -> @_\n,@_ -> !_\n++ -> +\n# Termination cleanup for addition\n_1 -> 1\n1+_ -> 1\n_+_ ->\n"), .sample = std::string("_1111*11111_"), .output = std::string("11111111111111111111")}, TestSetItem{.ruleSet = std::string("# Turing machine: three-state busy beaver\n#\n# state A, symbol 0 => write 1, move right, new state B\nA0 -> 1B\n# state A, symbol 1 => write 1, move left, new state C\n0A1 -> C01\n1A1 -> C11\n# state B, symbol 0 => write 1, move left, new state A\n0B0 -> A01\n1B0 -> A11\n# state B, symbol 1 => write 1, move right, new state B\nB1 -> 1B\n# state C, symbol 0 => write 1, move left, new state B\n0C0 -> B01\n1C0 -> B11\n# state C, symbol 1 => write 1, move left, halt\n0C1 -> H01\n1C1 -> H11\n"), .sample = std::string("000000A000000"), .output = std::string("00011H1111000")}};

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((((sep.size() > int64_t(0)) && ((i + sep.size()) <= s.size())) && (s.substr(i, (i + sep.size()) - i) == sep))) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
            cur = std::string("");
            i = (i + sep.size());
        } else {
            cur = (cur + s.substr(i, (i + int64_t(1)) - i));
            i = (i + int64_t(1));
        }
    }
    parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    return parts;
}

std::string trimSpace(std::string s) {
    int64_t start = int64_t(0);
    while (((start < s.size()) && ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, (start + int64_t(1)) - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+(start + int64_t(1))); })(s) == std::string(" ")) || (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, (start + int64_t(1)) - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+(start + int64_t(1))); })(s) == std::string("\t"))))) {
        start = (start + int64_t(1));
    }
    int end = s.size();
    while (((end > start) && ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((end - int64_t(1)), end - (end - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(end - int64_t(1)), __v.begin()+end); })(s) == std::string(" ")) || (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((end - int64_t(1)), end - (end - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(end - int64_t(1)), __v.begin()+end); })(s) == std::string("\t"))))) {
        end = (end - int64_t(1));
    }
    return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, end - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+end); })(s);
}

int64_t indexOfSub(std::string s, std::string sub) {
    if ((sub.size() == int64_t(0))) {
        return int64_t(0);
    }
    int64_t i = int64_t(0);
    while (((i + sub.size()) <= s.size())) {
        if ((s.substr(i, (i + sub.size()) - i) == sub)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return (int64_t(0) - int64_t(1));
}

std::map<std::string, std::any> parseRules(std::string rs) {
    std::vector<std::map<std::string, std::any>> rules = {};
    for (std::string line : _split(rs, std::string("\n"))) {
        std::string ln = line;
        int64_t hash = indexOfSub(ln, std::string("#"));
        if ((hash >= int64_t(0))) {
            ln = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), hash - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+hash); })(ln);
        }
        ln = trimSpace(ln);
        if ((ln.size() == int64_t(0))) {
            continue;
        }
        int64_t arrow = (int64_t(0) - int64_t(1));
        int64_t j = int64_t(0);
        while (((j + int64_t(2)) <= ln.size())) {
            if ((ln.substr(j, (j + int64_t(2)) - j) == std::string("->"))) {
                bool pre = ((j > int64_t(0)) && ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((j - int64_t(1)), j - (j - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(j - int64_t(1)), __v.begin()+j); })(ln) == std::string(" ")) || (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((j - int64_t(1)), j - (j - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(j - int64_t(1)), __v.begin()+j); })(ln) == std::string("\t"))));
                bool post = (((j + int64_t(2)) < ln.size()) && ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((j + int64_t(2)), (j + int64_t(3)) - (j + int64_t(2))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(j + int64_t(2)), __v.begin()+(j + int64_t(3))); })(ln) == std::string(" ")) || (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((j + int64_t(2)), (j + int64_t(3)) - (j + int64_t(2))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(j + int64_t(2)), __v.begin()+(j + int64_t(3))); })(ln) == std::string("\t"))));
                if ((pre && post)) {
                    arrow = j;
                    break;
                }
            }
            j = (j + int64_t(1));
        }
        if ((arrow < int64_t(0))) {
            arrow = indexOfSub(ln, std::string("->"));
        }
        if ((arrow < int64_t(0))) {
            return std::map<std::string, std::any>{{"ok", std::any(false)}};
        }
        std::string pat = trimSpace(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), arrow - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+arrow); })(ln));
        std::string rest = trimSpace(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((arrow + int64_t(2)), ln.size() - (arrow + int64_t(2))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(arrow + int64_t(2)), __v.begin()+ln.size()); })(ln));
        bool term = false;
        if (((rest.size() > int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(rest) == std::string(".")))) {
            term = true;
            rest = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), rest.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+rest.size()); })(rest);
        }
        std::string rep = rest;
        rules = ([&]{ auto __tmp = rules; __tmp.push_back(std::map<std::string, std::any>{{"pat", std::any(pat)}, {"rep", std::any(rep)}, {"term", std::any(term)}}); return __tmp; }());
    }
    return std::map<std::string, std::any>{{"ok", std::any(true)}, {"rules", std::any(rules)}};
}

std::string runRules(const std::vector<std::map<std::string, std::any>>& rules, std::string s) {
    bool changed = true;
    while (changed) {
        changed = false;
        int64_t i = int64_t(0);
        while ((i < rules.size())) {
            std::map<std::string, std::any> r = rules[i];
            std::any pat = ([&](const auto& __m){ auto __it = __m.find(std::string("pat")); return __it != __m.end() ? __it->second : std::any{}; })(r);
            std::any rep = ([&](const auto& __m){ auto __it = __m.find(std::string("rep")); return __it != __m.end() ? __it->second : std::any{}; })(r);
            std::any term = ([&](const auto& __m){ auto __it = __m.find(std::string("term")); return __it != __m.end() ? __it->second : std::any{}; })(r);
            int64_t idx = indexOfSub(s, std::any_cast<std::string>(pat));
            if ((idx >= int64_t(0))) {
                s = ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), idx - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+idx); })(s) + ([&]{ std::ostringstream ss; any_to_stream(ss, rep);
 return ss.str(); }())) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((idx + std::any_cast<std::string>(pat).size()), s.size() - (idx + std::any_cast<std::string>(pat).size())); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(idx + std::any_cast<std::string>(pat).size()), __v.begin()+s.size()); })(s));
                changed = true;
                if (std::any_cast<bool>(term)) {
                    return s;
                }
                break;
            }
            i = (i + int64_t(1));
        }
    }
    return s;
}

std::map<std::string, std::any> interpret(std::string ruleset, std::string input) {
    std::map<std::string, std::any> p = parseRules(ruleset);
    if (!std::any_cast<bool>(([&](const auto& __m){ auto __it = __m.find(std::string("ok")); return __it != __m.end() ? std::any_cast<bool>(__it->second) : false; })(p))) {
        return std::map<std::string, std::any>{{"ok", std::any(false)}, {"out", std::any(std::string(""))}};
    }
    std::string out = runRules(std::any_cast<std::vector<std::map<std::string, std::any>>>(([&](const auto& __m){ auto __it = __m.find(std::string("rules")); return __it != __m.end() ? __it->second : std::any{}; })(p)), input);
    return std::map<std::string, std::any>{{"ok", std::any(true)}, {"out", std::any(out)}};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ((std::string("validating ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << testSet.size(); return ss.str(); }())) + std::string(" test cases"));
        std::cout << std::endl;
        bool failures = false;
        int64_t i = int64_t(0);
        while ((i < testSet.size())) {
            TestSetItem tc = testSet[i];
            std::map<std::string, std::any> res = interpret(tc.ruleSet, tc.sample);
            if (!std::any_cast<bool>(([&](const auto& __m){ auto __it = __m.find(std::string("ok")); return __it != __m.end() ? std::any_cast<bool>(__it->second) : false; })(res))) {
                std::cout << ((std::string("test ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }())) + std::string(" invalid ruleset"));
                std::cout << std::endl;
                failures = true;
            } else             if ((any_to_string(([&](const auto& __m){ auto __it = __m.find(std::string("out")); return __it != __m.end() ? __it->second : std::any{}; })(res)) != tc.output)) {
                std::cout << (((((std::string("test ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }())) + std::string(": got ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, ([&](const auto& __m){ auto __it = __m.find(std::string("out")); return __it != __m.end() ? __it->second : std::any{}; })(res));
 return ss.str(); }())) + std::string(", want ")) + tc.output);
                std::cout << std::endl;
                failures = true;
            }

            i = (i + int64_t(1));
        }
        if (!failures) {
            std::cout << std::string("no failures");
            std::cout << std::endl;
        }
    }
    return 0;
}
