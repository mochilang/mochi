// Generated by Mochi transpiler v0.10.42 on 2025-07-27 19:10:00 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string trimSpace(std::string s);
bool isUpper(std::string ch);
std::string padLeft(std::string s, int64_t w);
std::string snakeToCamel(std::string s);
std::string camelToSnake(std::string s);
int main();

std::string trimSpace(std::string s) {
    int64_t start = int64_t(0);
    while (((start < s.size()) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, (start + int64_t(1)) - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+(start + int64_t(1))); })(s) == std::string(" ")))) {
        start = (start + int64_t(1));
    }
    int end = s.size();
    while (((end > start) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((end - int64_t(1)), end - (end - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(end - int64_t(1)), __v.begin()+end); })(s) == std::string(" ")))) {
        end = (end - int64_t(1));
    }
    return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, end - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+end); })(s);
}

bool isUpper(std::string ch) {
    return ((ch >= std::string("A")) && (ch <= std::string("Z")));
}

std::string padLeft(std::string s, int64_t w) {
    std::string res = std::string("");
    int64_t n = (w - s.size());
    while ((n > int64_t(0))) {
        res = (res + std::string(" "));
        n = (n - int64_t(1));
    }
    return (res + s);
}

std::string snakeToCamel(std::string s) {
    s = trimSpace(s);
    std::string out = std::string("");
    bool up = false;
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if (((((ch == std::string("_")) || (ch == std::string("-"))) || (ch == std::string(" "))) || (ch == std::string(".")))) {
            up = true;
            i = (i + int64_t(1));
            continue;
        }
        if ((i == int64_t(0))) {
            out = (out + ([&]{ std::string __s = ch; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }()));
            up = false;
            i = (i + int64_t(1));
            continue;
        }
        if (up) {
            out = (out + ([&]{ std::string __s = ch; for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }()));
            up = false;
        } else {
            out = (out + ch);
        }
        i = (i + int64_t(1));
    }
    return out;
}

std::string camelToSnake(std::string s) {
    s = trimSpace(s);
    std::string out = std::string("");
    bool prevUnd = false;
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if ((((ch == std::string(" ")) || (ch == std::string("-"))) || (ch == std::string(".")))) {
            if ((!prevUnd && (out.size() > int64_t(0)))) {
                out = (out + std::string("_"));
                prevUnd = true;
            }
            i = (i + int64_t(1));
            continue;
        }
        if ((ch == std::string("_"))) {
            if ((!prevUnd && (out.size() > int64_t(0)))) {
                out = (out + std::string("_"));
                prevUnd = true;
            }
            i = (i + int64_t(1));
            continue;
        }
        if (isUpper(ch)) {
            if (((i > int64_t(0)) && !prevUnd)) {
                out = (out + std::string("_"));
            }
            out = (out + ([&]{ std::string __s = ch; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }()));
            prevUnd = false;
        } else {
            out = (out + ([&]{ std::string __s = ch; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }()));
            prevUnd = false;
        }
        i = (i + int64_t(1));
    }
    int64_t start = int64_t(0);
    while (((start < out.size()) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, (start + int64_t(1)) - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+(start + int64_t(1))); })(out) == std::string("_")))) {
        start = (start + int64_t(1));
    }
    int end = out.size();
    while (((end > start) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((end - int64_t(1)), end - (end - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(end - int64_t(1)), __v.begin()+end); })(out) == std::string("_")))) {
        end = (end - int64_t(1));
    }
    out = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, end - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+end); })(out);
    std::string res = std::string("");
    int64_t j = int64_t(0);
    bool lastUnd = false;
    while ((j < out.size())) {
        std::string c = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(j, (j + int64_t(1)) - j); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+j, __v.begin()+(j + int64_t(1))); })(out);
        if ((c == std::string("_"))) {
            if (!lastUnd) {
                res = (res + c);
            }
            lastUnd = true;
        } else {
            res = (res + c);
            lastUnd = false;
        }
        j = (j + int64_t(1));
    }
    return res;
}

int main() {
    std::vector<std::string> samples = std::vector<std::string>{std::string("snakeCase"), std::string("snake_case"), std::string("snake-case"), std::string("snake case"), std::string("snake CASE"), std::string("snake.case"), std::string("variable_10_case"), std::string("variable10Case"), std::string("É›rgo rE tHis"), std::string("hurry-up-joe!"), std::string("c://my-docs/happy_Flag-Day/12.doc"), std::string(" spaces ")};
    std::cout << std::string("=== To snake_case ===");
    std::cout << std::endl;
    for (std::string s : samples) {
        std::cout << ((padLeft(s, int64_t(34)) + std::string(" => ")) + camelToSnake(s));
        std::cout << std::endl;
    }
    std::cout << std::string("");
    std::cout << std::endl;
    std::cout << std::string("=== To camelCase ===");
    std::cout << std::endl;
    for (std::string s : samples) {
        std::cout << ((padLeft(s, int64_t(34)) + std::string(" => ")) + snakeToCamel(s));
        std::cout << std::endl;
    }
    return 0;
}
