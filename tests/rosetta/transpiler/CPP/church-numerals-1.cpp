// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:46:00 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
using Fn = std::function<std::any(std::any)>;
using Church = std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)>;


std::function<std::any(std::any)> zero(std::function<std::any(std::any)> f);
std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> succ(std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> c);
std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> add(std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> c, std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> d);
std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> mul(std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> c, std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> d);
std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> pow(std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> c, std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> d);
std::any incr(std::any i);
int64_t toInt(std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> c);
std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> intToChurch(int64_t i);
int main();

std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> z = zero;
std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> three = succ(succ(succ(z)));
std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> four = succ(three);

std::function<std::any(std::any)> zero(std::function<std::any(std::any)> f) {
    return [=](std::any x) mutable {
    return x;
};
}

std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> succ(std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> c) {
    return [=](std::function<std::any(std::any)> f) mutable {
    return [=](std::any x) mutable {
    return f((c(f))(x));
};
};
}

std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> add(std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> c, std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> d) {
    return [=](std::function<std::any(std::any)> f) mutable {
    return [=](std::any x) mutable {
    return (c(f))((d(f))(x));
};
};
}

std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> mul(std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> c, std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> d) {
    return [=](std::function<std::any(std::any)> f) mutable {
    return [=](std::any x) mutable {
    return (c(d(f)))(x);
};
};
}

std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> pow(std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> c, std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> d) {
    int64_t di = toInt(d);
    std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> prod = c;
    int64_t i = int64_t(1);
    while ((i < di)) {
        prod = mul(prod, c);
        i = (i + int64_t(1));
    }
    return prod;
}

std::any incr(std::any i) {
    return (std::any_cast<int64_t>(i) + int64_t(1));
}

int64_t toInt(std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> c) {
    return std::any_cast<int64_t>((c(incr))(int64_t(0)));
}

std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> intToChurch(int64_t i) {
    if ((i == int64_t(0))) {
        return zero;
    }
    return succ((std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)>)(intToChurch((i - int64_t(1)))));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << (std::string("three        -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(three); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("four         -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(four); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("three + four -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(add(three, four)); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("three * four -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(mul(three, four)); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("three ^ four -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(pow(three, four)); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("four ^ three -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(pow(four, three)); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("5 -> five    -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(intToChurch(int64_t(5))); return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
