// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:57:12 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string padLeft(std::string s, int64_t w);
std::string padRight(std::string s, int64_t w);
int64_t indexOf(std::string s, std::string ch);
std::string format2(double f);
int64_t cpx(double h);
std::string degrees2compasspoint(double h);
int main();

std::vector<std::string> compassPoint = std::vector<std::string>{std::string("North"), std::string("North by east"), std::string("North-northeast"), std::string("Northeast by north"), std::string("Northeast"), std::string("Northeast by east"), std::string("East-northeast"), std::string("East by north"), std::string("East"), std::string("East by south"), std::string("East-southeast"), std::string("Southeast by east"), std::string("Southeast"), std::string("Southeast by south"), std::string("South-southeast"), std::string("South by east"), std::string("South"), std::string("South by west"), std::string("South-southwest"), std::string("Southwest by south"), std::string("Southwest"), std::string("Southwest by west"), std::string("West-southwest"), std::string("West by south"), std::string("West"), std::string("West by north"), std::string("West-northwest"), std::string("Northwest by west"), std::string("Northwest"), std::string("Northwest by north"), std::string("North-northwest"), std::string("North by west")};
std::vector<double> headings = std::vector<double>{0.0, 16.87, 16.88, 33.75, 50.62, 50.63, 67.5, 84.37, 84.38, 101.25, 118.12, 118.13, 135.0, 151.87, 151.88, 168.75, 185.62, 185.63, 202.5, 219.37, 219.38, 236.25, 253.12, 253.13, 270.0, 286.87, 286.88, 303.75, 320.62, 320.63, 337.5, 354.37, 354.38};
int64_t i = 0;

std::string padLeft(std::string s, int64_t w) {
    std::string res = std::string("");
    int64_t n = (w - s.size());
    while ((n > 0)) {
        res = (res + std::string(" "));
        n = (n - 1);
    }
    return (res + s);
}

std::string padRight(std::string s, int64_t w) {
    std::string out = s;
    int i = s.size();
    while ((i < w)) {
        out = (out + std::string(" "));
        i = (i + 1);
    }
    return out;
}

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = 0;
    while ((i < s.size())) {
        if ((s.substr(i, (i + 1) - i) == ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

std::string format2(double f) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << f; return ss.str(); }());
    int64_t idx = _index_of(s, std::string("."));
    if ((idx < 0)) {
        s = (s + std::string(".00"));
    } else {
        int64_t need = (idx + 3);
        if ((s.size() > need)) {
            s = s.substr(0, need - 0);
        } else {
            while ((s.size() < need)) {
                s = (s + std::string("0"));
            }
        }
    }
    return s;
}

int64_t cpx(double h) {
    int64_t x = (int64_t)((((double)(h) / (11.25)) + 0.5));
    x = (x % 32);
    if ((x < 0)) {
        x = (x + 32);
    }
    return x;
}

std::string degrees2compasspoint(double h) {
    return compassPoint[cpx(h)];
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::cout << std::string("Index  Compass point         Degree");
        std::cout << std::endl;
        while ((i < headings.size())) {
            double h = headings[i];
            int64_t idx = ((i % 32) + 1);
            std::string cp = degrees2compasspoint(h);
            std::cout << (((((padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << idx; return ss.str(); }()), 4) + std::string("   ")) + padRight(cp, 19)) + std::string(" ")) + format2(h)) + std::string("Â°"));
            std::cout << std::endl;
            i = (i + 1);
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
