// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:22:56 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t indexOf(std::string s, std::string sub);
std::string removeChar(std::string s, std::string ch);
std::string g2l(std::string pieces);
int64_t countChar(std::string s, std::string ch);
int64_t spid(std::string pieces);
int main();

std::map<std::string, std::string> g2lMap = std::map<std::string, std::string>{{"♜", std::string("R")}, {"♞", std::string("N")}, {"♝", std::string("B")}, {"♛", std::string("Q")}, {"♚", std::string("K")}, {"♖", std::string("R")}, {"♘", std::string("N")}, {"♗", std::string("B")}, {"♕", std::string("Q")}, {"♔", std::string("K")}};
std::map<std::string, std::string> names = std::map<std::string, std::string>{{"R", std::string("rook")}, {"N", std::string("knight")}, {"B", std::string("bishop")}, {"Q", std::string("queen")}, {"K", std::string("king")}};
std::map<std::string, int64_t> ntable = std::map<std::string, int64_t>{{"01", int64_t(0)}, {"02", int64_t(1)}, {"03", int64_t(2)}, {"04", int64_t(3)}, {"12", int64_t(4)}, {"13", int64_t(5)}, {"14", int64_t(6)}, {"23", int64_t(7)}, {"24", int64_t(8)}, {"34", int64_t(9)}};

int64_t indexOf(std::string s, std::string sub) {
    int64_t i = int64_t(0);
    while ((i <= (s.size() - sub.size()))) {
        if ((s.substr(i, (i + sub.size()) - i) == sub)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

std::string removeChar(std::string s, std::string ch) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = s.substr(i, (i + int64_t(1)) - i);
        if ((c != ch)) {
            res = (res + c);
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::string g2l(std::string pieces) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < pieces.size())) {
        std::string ch = pieces.substr(i, (i + int64_t(1)) - i);
        res = (res + ([&](const auto& __m){ auto __it = __m.find(ch); return __it != __m.end() ? __it->second : ""; })(g2lMap));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t countChar(std::string s, std::string ch) {
    int64_t c = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            c = (c + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return c;
}

int64_t spid(std::string pieces) {
    pieces = g2l(pieces);
    if ((pieces.size() != int64_t(8))) {
        return -int64_t(1);
    }
    for (std::string one : std::vector<std::string>{std::string("K"), std::string("Q")}) {
        if ((countChar(pieces, one) != int64_t(1))) {
            return -int64_t(1);
        }
    }
    for (std::string two : std::vector<std::string>{std::string("R"), std::string("N"), std::string("B")}) {
        if ((countChar(pieces, two) != int64_t(2))) {
            return -int64_t(1);
        }
    }
    int64_t r1 = _index_of(pieces, std::string("R"));
    auto r2 = ((_index_of(pieces.substr((r1 + int64_t(1)), pieces.size() - (r1 + int64_t(1))), std::string("R")) + r1) + int64_t(1));
    int64_t k = _index_of(pieces, std::string("K"));
    if (((k < r1) || (k > r2))) {
        return -int64_t(1);
    }
    int64_t b1 = _index_of(pieces, std::string("B"));
    auto b2 = ((_index_of(pieces.substr((b1 + int64_t(1)), pieces.size() - (b1 + int64_t(1))), std::string("B")) + b1) + int64_t(1));
    if ((((b2 - b1) % int64_t(2)) == int64_t(0))) {
        return -int64_t(1);
    }
    std::string piecesN = removeChar(removeChar(pieces, std::string("Q")), std::string("B"));
    int64_t n1 = _index_of(piecesN, std::string("N"));
    auto n2 = ((_index_of(piecesN.substr((n1 + int64_t(1)), piecesN.size() - (n1 + int64_t(1))), std::string("N")) + n1) + int64_t(1));
    int64_t N = ([&](const auto& __m){ auto __it = __m.find((([&]{ std::ostringstream ss; ss << std::boolalpha << n1; return ss.str(); }()) + ([&]{ std::ostringstream ss; any_to_stream(ss, n2);
 return ss.str(); }()))); return __it != __m.end() ? __it->second : 0; })(ntable);
    std::string piecesQ = removeChar(pieces, std::string("B"));
    int64_t Q = _index_of(piecesQ, std::string("Q"));
    int64_t D = _index_of(std::string("0246"), ([&]{ std::ostringstream ss; ss << std::boolalpha << b1; return ss.str(); }()));
    int64_t L = _index_of(std::string("1357"), ([&]{ std::ostringstream ss; any_to_stream(ss, b2);
 return ss.str(); }()));
    if ((D == (int64_t(0) - int64_t(1)))) {
        D = _index_of(std::string("0246"), ([&]{ std::ostringstream ss; any_to_stream(ss, b2);
 return ss.str(); }()));
        L = _index_of(std::string("1357"), ([&]{ std::ostringstream ss; ss << std::boolalpha << b1; return ss.str(); }()));
    }
    return ((((int64_t(96) * N) + (int64_t(16) * Q)) + (int64_t(4) * D)) + L);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        for (std::string pieces : std::vector<std::string>{std::string("♕♘♖♗♗♘♔♖"), std::string("♖♘♗♕♔♗♘♖"), std::string("♖♕♘♗♗♔♖♘"), std::string("♖♘♕♗♗♔♖♘")}) {
            std::cout << ((((pieces + std::string(" or ")) + g2l(pieces)) + std::string(" has SP-ID of ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << spid(pieces); return ss.str(); }()));
            std::cout << std::endl;
        }
    }
    return 0;
}
