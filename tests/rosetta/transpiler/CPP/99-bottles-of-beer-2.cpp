// Generated by Mochi transpiler v0.10.39 on 2025-07-24 15:27:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <optional>



std::vector<std::string> fields(std::string s);
std::string join(std::vector<std::string> xs, std::string sep);
std::string numberName(int n);
std::string pluralizeFirst(std::string s, int n);
int randInt(int seed, int n);
std::string slur(std::string p, int d);
int main();

std::vector<std::string> fields(std::string s) {
    std::vector<std::string> words = {};
    std::string cur = std::string("");
    int i = 0;
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + 1) - i);
        if ((((ch == std::string(" ")) || (ch == std::string("\n"))) || (ch == std::string("\t")))) {
            if ((cur.size() > 0)) {
                words = ([&]{ auto __tmp = words; __tmp.push_back(cur); return __tmp; }());
                cur = std::string("");
            }
        } else {
            cur = (cur + ch);
        }
        i = (i + 1);
    }
    if ((cur.size() > 0)) {
        words = ([&]{ auto __tmp = words; __tmp.push_back(cur); return __tmp; }());
    }
    return words;
}

std::string join(std::vector<std::string> xs, std::string sep) {
    std::string res = std::string("");
    int i = 0;
    while ((i < xs.size())) {
        if ((i > 0)) {
            res = (res + sep);
        }
        res = (res + xs[i]);
        i = (i + 1);
    }
    return res;
}

std::string numberName(int n) {
    std::vector<std::string> small = std::vector{std::string("no"), std::string("one"), std::string("two"), std::string("three"), std::string("four"), std::string("five"), std::string("six"), std::string("seven"), std::string("eight"), std::string("nine"), std::string("ten"), std::string("eleven"), std::string("twelve"), std::string("thirteen"), std::string("fourteen"), std::string("fifteen"), std::string("sixteen"), std::string("seventeen"), std::string("eighteen"), std::string("nineteen")};
    std::vector<std::string> tens = std::vector{std::string("ones"), std::string("ten"), std::string("twenty"), std::string("thirty"), std::string("forty"), std::string("fifty"), std::string("sixty"), std::string("seventy"), std::string("eighty"), std::string("ninety")};
    if ((n < 0)) {
        return std::string("");
    }
    if ((n < 20)) {
        return small[n];
    }
    if ((n < 100)) {
        std::string t = tens[(int)((n / 10))];
        int s = (n % 10);
        if ((s > 0)) {
            t = ((t + std::string(" ")) + small[s]);
        }
        return t;
    }
    return std::string("");
}

std::string pluralizeFirst(std::string s, int n) {
    if ((n == 1)) {
        return s;
    }
    std::vector<std::string> w = fields(s);
    if ((w.size() > 0)) {
        w[0] = (w[0] + std::string("s"));
    }
    return join(w, std::string(" "));
}

int randInt(int seed, int n) {
    int next = (((seed * 1664525) + 1013904223) % 2147483647);
    return (next % n);
}

std::string slur(std::string p, int d) {
    if ((p.size() <= 2)) {
        return p;
    }
    std::vector<std::string> a = {};
    int i = 1;
    while ((i < (p.size() - 1))) {
        a = ([&]{ auto __tmp = a; __tmp.push_back((std::string)p.substr(i, (i + 1) - i)); return __tmp; }());
        i = (i + 1);
    }
    int idx = (a.size() - 1);
    int seed = d;
    while ((idx >= 1)) {
        seed = (((seed * 1664525) + 1013904223) % 2147483647);
        if (((seed % 100) >= d)) {
            int j = (seed % (idx + 1));
            std::string tmp = a[idx];
            a[idx] = a[j];
            a[j] = tmp;
        }
        idx = (idx - 1);
    }
    std::string s = p.substr(0, 1 - 0);
    int k = 0;
    while ((k < a.size())) {
        s = (s + a[k]);
        k = (k + 1);
    }
    s = (s + p.substr((p.size() - 1), p.size() - (p.size() - 1)));
    std::vector<std::string> w = fields(s);
    return join(w, std::string(" "));
}

int main() {
    int i = 99;
    while ((i > 0)) {
        std::cout << ((((slur(numberName(i), i) + std::string(" ")) + pluralizeFirst(slur(std::string("bottle of"), i), i)) + std::string(" ")) + slur(std::string("beer on the wall"), i));
        std::cout << std::endl;
        std::cout << ((((slur(numberName(i), i) + std::string(" ")) + pluralizeFirst(slur(std::string("bottle of"), i), i)) + std::string(" ")) + slur(std::string("beer"), i));
        std::cout << std::endl;
        std::cout << ((((slur(std::string("take one"), i) + std::string(" ")) + slur(std::string("down"), i)) + std::string(" ")) + slur(std::string("pass it around"), i));
        std::cout << std::endl;
        std::cout << ((((slur(numberName((i - 1)), i) + std::string(" ")) + pluralizeFirst(slur(std::string("bottle of"), i), (i - 1))) + std::string(" ")) + slur(std::string("beer on the wall"), i));
        std::cout << std::endl;
        i = (i - 1);
    }
    return 0;
}
