// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:54:45 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(long long)) os << std::any_cast<long long>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<long long>)) { const auto& v = std::any_cast<const std::vector<long long>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<long long>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<long long>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double sinApprox(double x);
double floor(double x);
double absFloat(double x);
int64_t absInt(int64_t n);
int64_t parseIntStr(std::string str);
std::vector<int64_t> parseDate(std::string s);
bool leap(int64_t y);
int64_t daysInMonth(int64_t y, int64_t m);
std::vector<int64_t> addDays(int64_t y, int64_t m, int64_t d, int64_t n);
std::string pad2(int64_t n);
std::string dateString(int64_t y, int64_t m, int64_t d);
int64_t day(int64_t y, int64_t m, int64_t d);
void biorhythms(std::string birth, std::string target);
int main();

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;

double sinApprox(double x) {
    double term = x;
    double sum = x;
    int64_t n = 1;
    while ((n <= 8)) {
        double denom = (double)(((2 * n) * ((2 * n) + 1)));
        term = ((double)(((-term * x) * x)) / (denom));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum;
}

double floor(double x) {
    int64_t i = (int64_t)(x);
    if (((double)(i) > x)) {
        i = (i - 1);
    }
    return (double)(i);
}

double absFloat(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

int64_t absInt(int64_t n) {
    if ((n < 0)) {
        return -n;
    }
    return n;
}

int64_t parseIntStr(std::string str) {
    int64_t i = 0;
    bool neg = false;
    if (((str.size() > 0) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 1 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+1); })(str) == std::string("-")))) {
        neg = true;
        i = 1;
    }
    int64_t n = 0;
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
    while ((i < str.size())) {
        n = ((n * 10) + digits[([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 1)); })(str)]);
        i = (i + 1);
    }
    if (neg) {
        n = -n;
    }
    return n;
}

std::vector<int64_t> parseDate(std::string s) {
    int64_t y = parseIntStr(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 4 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+4); })(s));
    int64_t m = parseIntStr(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(5, 7 - 5); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+5, __v.begin()+7); })(s));
    int64_t d = parseIntStr(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(8, 10 - 8); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+8, __v.begin()+10); })(s));
    return std::vector<int64_t>{y, m, d};
}

bool leap(int64_t y) {
    if (((y % 400) == 0)) {
        return true;
    }
    if (((y % 100) == 0)) {
        return false;
    }
    return ((y % 4) == 0);
}

int64_t daysInMonth(int64_t y, int64_t m) {
    int64_t feb = (leap(y) ? 29 : 28);
    std::vector<int64_t> lengths = std::vector<int64_t>{31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    return lengths[(m - 1)];
}

std::vector<int64_t> addDays(int64_t y, int64_t m, int64_t d, int64_t n) {
    int64_t yy = y;
    int64_t mm = m;
    int64_t dd = d;
    if ((n >= 0)) {
        int64_t i = 0;
        while ((i < n)) {
            dd = (dd + 1);
            if ((dd > daysInMonth(yy, mm))) {
                dd = 1;
                mm = (mm + 1);
                if ((mm > 12)) {
                    mm = 1;
                    yy = (yy + 1);
                }
            }
            i = (i + 1);
        }
    } else {
        int64_t i = 0;
        while ((i > n)) {
            dd = (dd - 1);
            if ((dd < 1)) {
                mm = (mm - 1);
                if ((mm < 1)) {
                    mm = 12;
                    yy = (yy - 1);
                }
                dd = daysInMonth(yy, mm);
            }
            i = (i - 1);
        }
    }
    return std::vector<int64_t>{yy, mm, dd};
}

std::string pad2(int64_t n) {
    if ((n < 10)) {
        return (std::string("0") + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()));
    }
    return ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
}

std::string dateString(int64_t y, int64_t m, int64_t d) {
    return ((((([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }()) + std::string("-")) + pad2(m)) + std::string("-")) + pad2(d));
}

int64_t day(int64_t y, int64_t m, int64_t d) {
    int64_t part1 = (367 * y);
    int64_t part2 = (int64_t)(((7 * (int64_t)((y + ((m + 9) / 12)))) / 4));
    int64_t part3 = (int64_t)(((275 * m) / 9));
    return ((((part1 - part2) + part3) + d) - 730530);
}

void biorhythms(std::string birth, std::string target) {
    std::vector<int64_t> bparts = parseDate(birth);
    int64_t by = bparts[0];
    int64_t bm = bparts[1];
    int64_t bd = bparts[2];
    std::vector<int64_t> tparts = parseDate(target);
    int64_t ty = tparts[0];
    int64_t tm = tparts[1];
    int64_t td = tparts[2];
    int64_t diff = absInt((day(ty, tm, td) - day(by, bm, bd)));
    std::cout << (((std::string("Born ") + birth) + std::string(", Target ")) + target);
    std::cout << std::endl;
    std::cout << (std::string("Day ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << diff; return ss.str(); }()));
    std::cout << std::endl;
    std::vector<std::string> cycles = std::vector<std::string>{std::string("Physical day "), std::string("Emotional day"), std::string("Mental day   ")};
    std::vector<int64_t> lengths = std::vector<int64_t>{23, 28, 33};
    std::vector<std::vector<std::string>> quadrants = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("up and rising"), std::string("peak")}, std::vector<std::string>{std::string("up but falling"), std::string("transition")}, std::vector<std::string>{std::string("down and falling"), std::string("valley")}, std::vector<std::string>{std::string("down but rising"), std::string("transition")}};
    int64_t i = 0;
    while ((i < 3)) {
        int64_t length = lengths[i];
        std::string cycle = cycles[i];
        int64_t position = (diff % length);
        int64_t quadrant = ((position * 4) / length);
        double percent = sinApprox(((double)(((2.0 * PI) * (double)(position))) / ((double)(length))));
        percent = ((double)(floor((percent * 1000.0))) / (10.0));
        std::string description = std::string("");
        if ((percent > 95.0)) {
            description = std::string(" peak");
        } else         if ((percent < -95.0)) {
            description = std::string(" valley");
        } else         if ((absFloat(percent) < 5.0)) {
            description = std::string(" critical transition");
        } else {
            int64_t daysToAdd = ((((quadrant + 1) * length) / 4) - position);
            std::vector<int64_t> res = addDays(ty, tm, td, daysToAdd);
            int64_t ny = res[0];
            int64_t nm = res[1];
            int64_t nd = res[2];
            std::string transition = dateString(ny, nm, nd);
            std::string trend = quadrants[quadrant][0];
            std::string next = quadrants[quadrant][1];
            std::string pct = ([&]{ std::ostringstream ss; ss << std::boolalpha << percent; return ss.str(); }());
            if (!(pct.find(std::string(".")) != std::string::npos)) {
                pct = (pct + std::string(".0"));
            }
            description = ((((((((std::string(" ") + pct) + std::string("% (")) + trend) + std::string(", next ")) + next) + std::string(" ")) + transition) + std::string(")"));
        }


        std::string posStr = ([&]{ std::ostringstream ss; ss << std::boolalpha << position; return ss.str(); }());
        if ((position < 10)) {
            posStr = (std::string(" ") + posStr);
        }
        std::cout << (((cycle + posStr) + std::string(" : ")) + description);
        std::cout << std::endl;
        i = (i + 1);
    }
    std::cout << std::string("");
    std::cout << std::endl;
}

int main() {
    std::vector<std::vector<std::string>> pairs = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("1943-03-09"), std::string("1972-07-11")}, std::vector<std::string>{std::string("1809-01-12"), std::string("1863-11-19")}, std::vector<std::string>{std::string("1809-02-12"), std::string("1863-11-19")}};
    int64_t idx = 0;
    while ((idx < pairs.size())) {
        std::vector<std::string> p = pairs[idx];
        biorhythms(p[0], p[1]);
        idx = (idx + 1);
    }
    return 0;
}
