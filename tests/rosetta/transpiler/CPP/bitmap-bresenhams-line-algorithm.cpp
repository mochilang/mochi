// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:31:49 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Point {
    int x;
    int y;
    auto operator<=>(const Point&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Point& v) {
    os << '{' << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << '}';
    return os;
}

int absi(int x);
std::vector<Point> bresenham(int x0, int y0, int x1, int y1);
int main();

int absi(int x) {
    if ((x < 0)) {
        return -x;
    }
    return x;
}

std::vector<Point> bresenham(int x0, int y0, int x1, int y1) {
    int dx = absi((x1 - x0));
    int dy = absi((y1 - y0));
    int sx = -1;
    if ((x0 < x1)) {
        sx = 1;
    }
    int sy = -1;
    if ((y0 < y1)) {
        sy = 1;
    }
    int err = (dx - dy);
    std::vector<Point> pts = {};
    while (true) {
        pts = ([&]{ auto __tmp = pts; __tmp.push_back(Point{x0, y0}); return __tmp; }());
        if (((x0 == x1) && (y0 == y1))) {
            break;
        }
        int e2 = (2 * err);
        if ((e2 > -dy)) {
            err = (err - dy);
            x0 = (x0 + sx);
        }
        if ((e2 < dx)) {
            err = (err + dx);
            y0 = (y0 + sy);
        }
    }
    return pts;
}

int main() {
    std::vector<Point> pts = bresenham(0, 0, 6, 4);
    int i = 0;
    while ((i < pts.size())) {
        Point p = pts[i];
        std::cout << ((((std::string("(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << p.x; return ss.str(); }())) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p.y; return ss.str(); }())) + std::string(")"));
        std::cout << std::endl;
        i = (i + 1);
    }
    return 0;
}
