// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:11:51 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

void floyd(int64_t n);
std::string pad(std::string s, int64_t w);
int main();

void floyd(int64_t n) {
    std::cout << ((std::string("Floyd ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }())) + std::string(":"));
    std::cout << std::endl;
    int64_t lowerLeftCorner = (((n * (n - int64_t(1))) / int64_t(2)) + int64_t(1));
    int64_t lastInColumn = lowerLeftCorner;
    int64_t lastInRow = int64_t(1);
    int64_t i = int64_t(1);
    int64_t row = int64_t(1);
    std::string line = std::string("");
    while ((row <= n)) {
        int w = ([&]{ std::ostringstream ss; ss << std::boolalpha << lastInColumn; return ss.str(); }()).size();
        if ((i < lastInRow)) {
            line = ((line + pad(([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }()), (int64_t)(w))) + std::string(" "));
            lastInColumn = (lastInColumn + int64_t(1));
        } else {
            line = (line + pad(([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }()), (int64_t)(w)));
            std::cout << line;
            std::cout << std::endl;
            line = std::string("");
            row = (row + int64_t(1));
            lastInRow = (lastInRow + row);
            lastInColumn = lowerLeftCorner;
        }
        i = (i + int64_t(1));
    }
}

std::string pad(std::string s, int64_t w) {
    std::string t = s;
    while ((t.size() < w)) {
        t = (std::string(" ") + t);
    }
    return t;
}

int main() {
    floyd(int64_t(5));
    floyd(int64_t(14));
    return 0;
}
