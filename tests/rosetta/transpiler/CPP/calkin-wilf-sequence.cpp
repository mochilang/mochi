// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:08:34 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <boost/multiprecision/cpp_int.hpp>
#include <sstream>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <map>


static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

auto bigrat(int64_t a, int64_t b);
std::vector<auto> calkinWilf(int64_t n);
std::vector<int64_t> toContinued(auto& r);
int64_t termNumber(const std::vector<int64_t>& cf);
std::string commatize(int64_t n);
int main();

auto bigrat(int64_t a, int64_t b) {
    return ((auto)(a) / (auto)(b));
}

std::vector<auto> calkinWilf(int64_t n) {
    std::vector<auto> seq = {};
    seq = ([&]{ auto __tmp = seq; __tmp.push_back(bigrat(1, 1)); return __tmp; }());
    int64_t i = 1;
    while ((i < n)) {
        std::vector<auto> prev = seq[(i - 1)];
        boost::multiprecision::cpp_int a = num(prev);
        boost::multiprecision::cpp_int b = denom(prev);
        boost::multiprecision::cpp_int f = (a / b);
        auto t = bigrat((int64_t)(f), 1);
        t = ((double)(t) * (double)((auto)(2)));
        t = (t - prev);
        t = ((double)(t) + (double)((auto)(1)));
        t = ((auto)(1) / t);
        seq = ([&]{ auto __tmp = seq; __tmp.push_back(t); return __tmp; }());
        i = (i + 1);
    }
    return seq;
}

std::vector<int64_t> toContinued(auto& r) {
    boost::multiprecision::cpp_int a = num(r);
    boost::multiprecision::cpp_int b = denom(r);
    std::vector<int64_t> res = {};
    while (true) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((int64_t)((a / b))); return __tmp; }());
        boost::multiprecision::cpp_int t = (a % b);
        a = b;
        b = t;
        if ((a == 1)) {
            break;
        }
    }
    if (((res.size() % 2) == 0)) {
        res[(res.size() - 1)] = (res[(res.size() - 1)] - 1);
        res = ([&]{ auto __tmp = res; __tmp.push_back(1); return __tmp; }());
    }
    return res;
}

int64_t termNumber(const std::vector<int64_t>& cf) {
    std::string b = std::string("");
    std::string d = std::string("1");
    for (int64_t n : cf) {
        b = (repeat(d, n) + b);
        if ((d == std::string("1"))) {
            d = std::string("0");
        } else {
            d = std::string("1");
        }
    }
    return _parse_int_str(b, 2);
}

std::string commatize(int64_t n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    std::string out = std::string("");
    int64_t i = 0;
    int64_t cnt = 0;
    bool neg = false;
    if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 1 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+1); })(s) == std::string("-"))) {
        neg = true;
        s = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(1, s.size() - 1); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+1, __v.begin()+s.size()); })(s);
    }
    i = (s.size() - 1);
    while ((i >= 0)) {
        out = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 1)); })(s) + out);
        cnt = (cnt + 1);
        if (((cnt == 3) && (i != 0))) {
            out = (std::string(",") + out);
            cnt = 0;
        }
        i = (i - 1);
    }
    if (neg) {
        out = (std::string("-") + out);
    }
    return out;
}

int main() {
    std::vector<auto> cw = calkinWilf(20);
    std::cout << std::string("The first 20 terms of the Calkin-Wilf sequnence are:");
    std::cout << std::endl;
    int64_t i = 0;
    while ((i < 20)) {
        std::vector<auto> r = cw[i];
        std::string s = ([&]{ std::ostringstream ss; any_to_stream(ss, num(r));
 return ss.str(); }());
        if ((denom(r) != 1)) {
            s = ((s + std::string("/")) + ([&]{ std::ostringstream ss; any_to_stream(ss, denom(r));
 return ss.str(); }()));
        }
        std::cout << ((([&]{ std::string __s = (i + (int64_t)(1)); while(__s.size() < 2) __s = std::string(" ") + __s; return __s; }()) + std::string(": ")) + s);
        std::cout << std::endl;
        i = (i + 1);
    }
    auto r = bigrat(83116, 51639);
    std::vector<int64_t> cf = toContinued(r);
    int64_t tn = termNumber(cf);
    std::cout << ((((((std::string("") + ([&]{ std::ostringstream ss; any_to_stream(ss, num(r));
 return ss.str(); }())) + std::string("/")) + ([&]{ std::ostringstream ss; any_to_stream(ss, denom(r));
 return ss.str(); }())) + std::string(" is the ")) + commatize(tn)) + std::string("th term of the sequence."));
    std::cout << std::endl;
    return 0;
}
