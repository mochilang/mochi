// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:44:09 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
using Church = std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)>;


std::any id(std::any x);
auto compose(std::function<std::any(std::any)> f, std::function<std::any(std::any)> g);
std::function<std::any(std::any)> zero();
std::function<std::any(std::any)> one();
std::function<std::any(std::any)> succ(std::function<std::any(std::any)> n);
std::function<std::any(std::any)> plus(std::function<std::any(std::any)> m, std::function<std::any(std::any)> n);
std::function<std::any(std::any)> mult(std::function<std::any(std::any)> m, std::function<std::any(std::any)> n);
std::function<std::any(std::any)> exp(std::function<std::any(std::any)> m, std::function<std::any(std::any)> n);
int64_t toInt(std::function<std::any(std::any)> x);
std::string toStr(std::function<std::any(std::any)> x);
int main();

std::any id(std::any x) {
    return x;
}

auto compose(std::function<std::any(std::any)> f, std::function<std::any(std::any)> g) {
    return [=](std::any x) mutable {
    return f(g(x));
};
}

std::function<std::any(std::any)> zero() {
    return [=](std::function<std::any(std::any)> f) mutable {
    return id;
};
}

std::function<std::any(std::any)> one() {
    return id;
}

std::function<std::any(std::any)> succ(std::function<std::any(std::any)> n) {
    return [=](std::function<std::any(std::any)> f) mutable {
    return compose(f, (std::function<std::any(std::any)>)(n(f)));
};
}

std::function<std::any(std::any)> plus(std::function<std::any(std::any)> m, std::function<std::any(std::any)> n) {
    return [=](std::function<std::any(std::any)> f) mutable {
    return compose((std::function<std::any(std::any)>)(m(f)), (std::function<std::any(std::any)>)(n(f)));
};
}

std::function<std::any(std::any)> mult(std::function<std::any(std::any)> m, std::function<std::any(std::any)> n) {
    return compose(m, n);
}

std::function<std::any(std::any)> exp(std::function<std::any(std::any)> m, std::function<std::any(std::any)> n) {
    return n(m);
}

int64_t toInt(std::function<std::any(std::any)> x) {
    int64_t counter = int64_t(0);
    std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> fCounter = [&](std::function<std::any(std::any)> f) mutable {
        counter = (counter + int64_t(1));
        return f;
    };
    (x(fCounter))(id);
    return counter;
}

std::string toStr(std::function<std::any(std::any)> x) {
    std::string s = std::string("");
    std::function<std::function<std::any(std::any)>(std::function<std::any(std::any)>)> fCounter = [&](std::function<std::any(std::any)> f) mutable {
        s = (s + std::string("|"));
        return f;
    };
    (x(fCounter))(id);
    return s;
}

int main() {
    std::cout << (std::string("zero = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(zero()); return ss.str(); }()));
    std::cout << std::endl;
    std::function<std::any(std::any)> onev = one();
    std::cout << (std::string("one = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(onev); return ss.str(); }()));
    std::cout << std::endl;
    std::function<std::any(std::any)> two = succ(succ(zero()));
    std::cout << (std::string("two = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(two); return ss.str(); }()));
    std::cout << std::endl;
    std::function<std::any(std::any)> three = plus(onev, two);
    std::cout << (std::string("three = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(three); return ss.str(); }()));
    std::cout << std::endl;
    std::function<std::any(std::any)> four = mult(two, two);
    std::cout << (std::string("four = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(four); return ss.str(); }()));
    std::cout << std::endl;
    std::function<std::any(std::any)> eight = exp(two, three);
    std::cout << (std::string("eight = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << toInt(eight); return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("toStr(four) = ") + toStr(four));
    std::cout << std::endl;
    return 0;
}
