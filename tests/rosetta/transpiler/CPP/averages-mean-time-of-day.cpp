// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:51:45 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double sinApprox(double x);
double cosApprox(double x);
double atanApprox(double x);
double atan2Approx(double y, double x);
int64_t digit(std::string ch);
int64_t parseTwo(std::string s, int64_t idx);
double parseSec(std::string s);
std::string pad(int64_t n);
std::string meanTime(const std::vector<std::string>& times);
int main();

double PI = 3.141592653589793;

double sinApprox(double x) {
    double term = x;
    double sum = x;
    int64_t n = int64_t(1);
    while ((n <= int64_t(8))) {
        double denom = (double)(((int64_t(2) * n) * ((int64_t(2) * n) + int64_t(1))));
        term = ((double)(((-term * x) * x)) / (denom));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

double cosApprox(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t n = int64_t(1);
    while ((n <= int64_t(8))) {
        double denom = (double)((((int64_t(2) * n) - int64_t(1)) * (int64_t(2) * n)));
        term = ((double)(((-term * x) * x)) / (denom));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

double atanApprox(double x) {
    if ((x > 1.0)) {
        return (((double)(PI) / (2.0)) - ((double)(x) / (((x * x) + 0.28))));
    }
    if ((x < -1.0)) {
        return (((double)(-PI) / (2.0)) - ((double)(x) / (((x * x) + 0.28))));
    }
    return ((double)(x) / ((1.0 + ((0.28 * x) * x))));
}

double atan2Approx(double y, double x) {
    if ((x > 0.0)) {
        return atanApprox(((double)(y) / (x)));
    }
    if ((x < 0.0)) {
        if ((y >= 0.0)) {
            return (atanApprox(((double)(y) / (x))) + PI);
        }
        return (atanApprox(((double)(y) / (x))) - PI);
    }
    if ((y > 0.0)) {
        return ((double)(PI) / (2.0));
    }
    if ((y < 0.0)) {
        return ((double)(-PI) / (2.0));
    }
    return 0.0;
}

int64_t digit(std::string ch) {
    std::string digits = std::string("0123456789");
    int64_t i = int64_t(0);
    while ((i < digits.size())) {
        if ((digits.substr(i, (i + int64_t(1)) - i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return int64_t(0);
}

int64_t parseTwo(std::string s, int64_t idx) {
    return ((digit(s.substr(idx, (idx + int64_t(1)) - idx)) * int64_t(10)) + digit(s.substr((idx + int64_t(1)), (idx + int64_t(2)) - (idx + int64_t(1)))));
}

double parseSec(std::string s) {
    int64_t h = parseTwo(s, int64_t(0));
    int64_t m = parseTwo(s, int64_t(3));
    int64_t sec = parseTwo(s, int64_t(6));
    int64_t tmp = ((((h * int64_t(60)) + m) * int64_t(60)) + sec);
    return (double)(tmp);
}

std::string pad(int64_t n) {
    if ((n < int64_t(10))) {
        return (std::string("0") + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()));
    }
    return ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
}

std::string meanTime(const std::vector<std::string>& times) {
    double ssum = 0.0;
    double csum = 0.0;
    int64_t i = int64_t(0);
    while ((i < times.size())) {
        double sec = parseSec(times[i]);
        double ang = ((double)(((sec * 2.0) * PI)) / (86400.0));
        ssum = (ssum + sinApprox(ang));
        csum = (csum + cosApprox(ang));
        i = (i + int64_t(1));
    }
    double theta = atan2Approx(ssum, csum);
    double frac = ((double)(theta) / ((2.0 * PI)));
    while ((frac < 0.0)) {
        frac = (frac + 1.0);
    }
    double total = (frac * 86400.0);
    int64_t si = (int64_t)(total);
    int64_t h = (int64_t)((si / int64_t(3600)));
    int64_t m = (int64_t)(((si % int64_t(3600)) / int64_t(60)));
    int64_t s = (int64_t)((si % int64_t(60)));
    return ((((pad(h) + std::string(":")) + pad(m)) + std::string(":")) + pad(s));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::string> inputs = std::vector<std::string>{std::string("23:00:17"), std::string("23:40:20"), std::string("00:12:45"), std::string("00:17:19")};
        std::cout << meanTime(inputs);
        std::cout << std::endl;
    }
    return 0;
}
