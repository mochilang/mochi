// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:47:46 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string padLeft(int64_t n, int64_t width);
std::string squeeze(std::string s, std::string ch);
int main();

std::vector<std::string> strings = std::vector<std::string>{std::string(""), std::string("\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln "), std::string("..1111111111111111111111111111111111111111111111111111111111111117777888"), std::string("I never give 'em hell, I just tell the truth, and they think it's hell. "), std::string("                                                   ---  Harry S Truman  "), std::string("The better the 4-wheel drive, the further you'll be from help when ya get stuck!"), std::string("headmistressship"), std::string("aardvark"), std::string("😍😀🙌💃😍😍😍🙌")};
std::vector<std::vector<std::string>> chars = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string(" ")}, std::vector<std::string>{std::string("-")}, std::vector<std::string>{std::string("7")}, std::vector<std::string>{std::string(".")}, std::vector<std::string>{std::string(" "), std::string("-"), std::string("r")}, std::vector<std::string>{std::string("e")}, std::vector<std::string>{std::string("s")}, std::vector<std::string>{std::string("a")}, std::vector<std::string>{std::string("😍")}};
int64_t i = int64_t(0);

std::string padLeft(int64_t n, int64_t width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

std::string squeeze(std::string s, std::string ch) {
    std::string out = std::string("");
    bool prev = false;
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = s.substr(i, (i + int64_t(1)) - i);
        if ((c == ch)) {
            if (!prev) {
                out = (out + c);
                prev = true;
            }
        } else {
            out = (out + c);
            prev = false;
        }
        i = (i + int64_t(1));
    }
    return out;
}

int main() {
    while ((i < strings.size())) {
        int64_t j = int64_t(0);
        std::string s = strings[i];
        while ((j < chars[i].size())) {
            std::string c = chars[i][j];
            std::string ss = squeeze(s, c);
            std::cout << ((std::string("specified character = '") + c) + std::string("'"));
            std::cout << std::endl;
            std::cout << ((((std::string("original : length = ") + padLeft((int64_t)(s.size()), int64_t(2))) + std::string(", string = «««")) + s) + std::string("»»»"));
            std::cout << std::endl;
            std::cout << ((((std::string("squeezed : length = ") + padLeft((int64_t)(ss.size()), int64_t(2))) + std::string(", string = «««")) + ss) + std::string("»»»"));
            std::cout << std::endl;
            std::cout << std::string("");
            std::cout << std::endl;
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return 0;
}
