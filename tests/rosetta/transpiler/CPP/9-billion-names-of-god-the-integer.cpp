// Generated by Mochi transpiler v0.10.40 on 2025-07-25 18:19:27 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

std::vector<int> bigTrim(const std::vector<int>& a);
std::vector<int> bigFromInt(int x);
std::vector<int> bigAdd(const std::vector<int>& a, const std::vector<int>& b);
std::vector<int> bigSub(const std::vector<int>& a, const std::vector<int>& b);
std::string bigToString(const std::vector<int>& a);
int minInt(int a, int b);
std::vector<std::vector<int>> cumu(int n);
std::vector<std::string> row(int n);
int main();

int x = 1;

std::vector<int> bigTrim(const std::vector<int>& a) {
    int n = a.size();
    while (((n > 1) && (a[(n - 1)] == 0))) {
        a = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, (n - 1) - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+(n - 1)); })(a);
        n = (n - 1);
    }
    return a;
}

std::vector<int> bigFromInt(int x) {
    if ((x == 0)) {
        return std::vector<int>{0};
    }
    std::vector<int> digits = {};
    int n = x;
    while ((n > 0)) {
        digits = ([&]{ auto __tmp = digits; __tmp.push_back((n % 10)); return __tmp; }());
        n = (n / 10);
    }
    return digits;
}

std::vector<int> bigAdd(const std::vector<int>& a, const std::vector<int>& b) {
    std::vector<int> res = {};
    int carry = 0;
    int i = 0;
    while ((((i < a.size()) || (i < b.size())) || (carry > 0))) {
        int av = 0;
        if ((i < a.size())) {
            av = a[i];
        }
        int bv = 0;
        if ((i < b.size())) {
            bv = b[i];
        }
        int s = ((av + bv) + carry);
        res = ([&]{ auto __tmp = res; __tmp.push_back((s % 10)); return __tmp; }());
        carry = (s / 10);
        i = (i + 1);
    }
    return bigTrim(res);
}

std::vector<int> bigSub(const std::vector<int>& a, const std::vector<int>& b) {
    std::vector<int> res = {};
    int borrow = 0;
    int i = 0;
    while ((i < a.size())) {
        int av = a[i];
        int bv = 0;
        if ((i < b.size())) {
            bv = b[i];
        }
        int diff = ((av - bv) - borrow);
        if ((diff < 0)) {
            diff = (diff + 10);
            borrow = 1;
        } else {
            borrow = 0;
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(diff); return __tmp; }());
        i = (i + 1);
    }
    return bigTrim(res);
}

std::string bigToString(const std::vector<int>& a) {
    std::string s = std::string("");
    int i = (a.size() - 1);
    while ((i >= 0)) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << a[i]; return ss.str(); }()));
        i = (i - 1);
    }
    return s;
}

int minInt(int a, int b) {
    if ((a < b)) {
        return a;
    } else {
        return b;
    }
}

std::vector<std::vector<int>> cumu(int n) {
    std::vector<std::vector<std::vector<int>>> cache = std::vector<std::vector<std::vector<int>>>{std::vector<std::vector<int>>{bigFromInt(1)}};
    int y = 1;
    while ((y <= n)) {
        std::vector<std::vector<int>> row = std::vector<std::vector<int>>{bigFromInt(0)};
        int x = 1;
        while ((x <= y)) {
            std::vector<int> val = cache[(y - x)][minInt(x, (y - x))];
            row = ([&]{ auto __tmp = row; __tmp.push_back(bigAdd(row[(row.size() - 1)], val)); return __tmp; }());
            x = (x + 1);
        }
        cache = ([&]{ auto __tmp = cache; __tmp.push_back(row); return __tmp; }());
        y = (y + 1);
    }
    return cache[n];
}

std::vector<std::string> row(int n) {
    std::vector<std::vector<int>> e = cumu(n);
    std::vector<std::string> out = {};
    int i = 0;
    while ((i < n)) {
        std::vector<int> diff = bigSub(e[(i + 1)], e[i]);
        out = ([&]{ auto __tmp = out; __tmp.push_back(bigToString(diff)); return __tmp; }());
        i = (i + 1);
    }
    return out;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::cout << std::string("rows:");
        std::cout << std::endl;
        while ((x < 11)) {
            std::vector<std::string> r = row(x);
            std::string line = std::string("");
            int i = 0;
            while ((i < r.size())) {
                line = (((line + std::string(" ")) + r[i]) + std::string(" "));
                i = (i + 1);
            }
            std::cout << line;
            std::cout << std::endl;
            x = (x + 1);
        }
        std::cout << std::string("");
        std::cout << std::endl;
        std::cout << std::string("sums:");
        std::cout << std::endl;
        for (int num : std::vector<int>{23, 123, 1234}) {
            std::vector<std::vector<int>> r = cumu(num);
            std::cout << ((([&]{ std::ostringstream ss; ss << std::boolalpha << num; return ss.str(); }()) + std::string(" ")) + bigToString(r[(r.size() - 1)]));
            std::cout << std::endl;
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
