// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:29:04 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double qsel(const std::vector<double>& a, int k);
double median(const std::vector<double>& list);
int main();

double qsel(const std::vector<double>& a, int k) {
    std::vector<double> arr = a;
    while ((arr.size() > 1)) {
        int px = (_now() % arr.size());
        double pv = arr[px];
        int last = (arr.size() - 1);
        double tmp = arr[px];
        arr[px] = arr[last];
        arr[last] = tmp;
        px = 0;
        int i = 0;
        while ((i < last)) {
            double v = arr[i];
            if ((v < pv)) {
                double tmp2 = arr[px];
                arr[px] = arr[i];
                arr[i] = tmp2;
                px = (px + 1);
            }
            i = (i + 1);
        }
        if ((px == k)) {
            return pv;
        }
        if ((k < px)) {
            arr = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, px - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+px); })(arr);
        } else {
            double tmp2 = arr[px];
            arr[px] = pv;
            arr[last] = tmp2;
            arr = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((px + 1), arr.size() - (px + 1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(px + 1), __v.begin()+arr.size()); })(arr);
            k = (k - (px + 1));
        }
    }
    return arr[0];
}

double median(const std::vector<double>& list) {
    std::vector<double> arr = list;
    int half = (int)((arr.size() / 2));
    double med = qsel(arr, half);
    if (((arr.size() % 2) == 0)) {
        return ((double)((med + qsel(arr, (half - 1)))) / (2.0));
    }
    return med;
}

int main() {
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << median(std::vector<double>{3.0, 1.0, 4.0, 1.0}); return ss.str(); }());
    std::cout << std::endl;
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << median(std::vector<double>{3.0, 1.0, 4.0, 1.0, 5.0}); return ss.str(); }());
    std::cout << std::endl;
    return 0;
}
