// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:29:49 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int main();

std::vector<int> arr1 = std::vector<int>{2, 7, 1, 8, 2};
std::map<int, int> counts1 = {};
std::vector<int> keys1 = {};
int i = 0;
int max1 = 0;
std::vector<int> modes1 = {};
std::vector<int> arr2 = std::vector<int>{2, 7, 1, 8, 2, 8};
std::map<int, int> counts2 = {};
std::vector<int> keys2 = {};
int max2 = 0;
std::vector<int> modes2 = {};

int main() {
    while ((i < arr1.size())) {
        int v = arr1[i];
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(counts1, v)) {
            counts1[v] = (counts1[v] + 1);
        } else {
            counts1[v] = 1;
            keys1 = ([&]{ auto __tmp = keys1; __tmp.push_back(v); return __tmp; }());
        }
        i = (i + 1);
    }
    i = 0;
    while ((i < keys1.size())) {
        int k = keys1[i];
        int c = counts1[k];
        if ((c > max1)) {
            max1 = c;
        }
        i = (i + 1);
    }
    i = 0;
    while ((i < keys1.size())) {
        int k = keys1[i];
        if ((counts1[k] == max1)) {
            modes1 = ([&]{ auto __tmp = modes1; __tmp.push_back(k); return __tmp; }());
        }
        i = (i + 1);
    }
    std::cout << ([&]{ std::ostringstream ss; { auto __tmp = modes1; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
    std::cout << std::endl;
    i = 0;
    while ((i < arr2.size())) {
        int v = arr2[i];
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(counts2, v)) {
            counts2[v] = (counts2[v] + 1);
        } else {
            counts2[v] = 1;
            keys2 = ([&]{ auto __tmp = keys2; __tmp.push_back(v); return __tmp; }());
        }
        i = (i + 1);
    }
    i = 0;
    while ((i < keys2.size())) {
        int k = keys2[i];
        int c = counts2[k];
        if ((c > max2)) {
            max2 = c;
        }
        i = (i + 1);
    }
    i = 0;
    while ((i < keys2.size())) {
        int k = keys2[i];
        if ((counts2[k] == max2)) {
            modes2 = ([&]{ auto __tmp = modes2; __tmp.push_back(k); return __tmp; }());
        }
        i = (i + 1);
    }
    std::cout << ([&]{ std::ostringstream ss; { auto __tmp = modes2; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
    std::cout << std::endl;
    return 0;
}
