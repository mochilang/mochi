// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:20:21 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Pixel {
    int64_t R;
    int64_t G;
    int64_t B;
    auto operator<=>(const Pixel&) const = default;
};

struct Bitmap {
    int64_t w;
    int64_t h;
    int64_t max;
    std::vector<std::vector<Pixel>> data;
    auto operator<=>(const Bitmap&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Pixel& v) {
    os << '{' << "'R': "<< v.R
 << ", " << "'G': "<< v.G
 << ", " << "'B': "<< v.B
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Bitmap& v) {
    os << '{' << "'w': "<< v.w
 << ", " << "'h': "<< v.h
 << ", " << "'max': "<< v.max
 << ", " << "'data': "<< "["; for(size_t i=0;i<v.data.size();++i){ if(i>0) os << ", "; os << v.data[i]; } os << "]"
 << '}';
    return os;
}

Bitmap newBitmap(int64_t w, int64_t h, int64_t max);
void setPx(Bitmap b, int64_t x, int64_t y, Pixel p);
Pixel getPx(Bitmap b, int64_t x, int64_t y);
std::vector<std::string> splitLines(std::string s);
std::vector<std::string> splitWS(std::string s);
int64_t parseIntStr(std::string str);
std::vector<std::string> tokenize(std::string s);
Bitmap readP3(std::string text);
void toGrey(Bitmap b);
std::string pad(int64_t n, int64_t w);
std::string writeP3(Bitmap b);
int main();

std::string ppmtxt = (((((((std::string("P3\n") + std::string("# feep.ppm\n")) + std::string("4 4\n")) + std::string("15\n")) + std::string(" 0  0  0    0  0  0    0  0  0   15  0 15\n")) + std::string(" 0  0  0    0 15  7    0  0  0    0  0  0\n")) + std::string(" 0  0  0    0  0  0    0 15  7    0  0  0\n")) + std::string("15  0 15    0  0  0    0  0  0    0  0  0\n"));
Bitmap bm = readP3(ppmtxt);
std::string out = writeP3(bm);

Bitmap newBitmap(int64_t w, int64_t h, int64_t max) {
    std::vector<std::vector<Pixel>> rows = {};
    int64_t y = 0;
    while ((y < h)) {
        std::vector<Pixel> row = {};
        int64_t x = 0;
        while ((x < w)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(Pixel{0, 0, 0}); return __tmp; }());
            x = (x + 1);
        }
        rows = ([&]{ auto __tmp = rows; __tmp.push_back(row); return __tmp; }());
        y = (y + 1);
    }
    return Bitmap{w, h, max, rows};
}

void setPx(Bitmap b, int64_t x, int64_t y, Pixel p) {
    std::vector<std::vector<Pixel>> rows = b.data;
    std::vector<Pixel> row = rows[y];
    row[x] = p;
    rows[y] = row;
    b.data = rows;
}

Pixel getPx(Bitmap b, int64_t x, int64_t y) {
    return b.data[y][x];
}

std::vector<std::string> splitLines(std::string s) {
    std::vector<std::string> out = {};
    std::string cur = std::string("");
    int64_t i = 0;
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + 1) - i);
        if ((ch == std::string("\n"))) {
            out = ([&]{ auto __tmp = out; __tmp.push_back(cur); return __tmp; }());
            cur = std::string("");
        } else {
            cur = (cur + ch);
        }
        i = (i + 1);
    }
    out = ([&]{ auto __tmp = out; __tmp.push_back(cur); return __tmp; }());
    return out;
}

std::vector<std::string> splitWS(std::string s) {
    std::vector<std::string> out = {};
    std::string cur = std::string("");
    int64_t i = 0;
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + 1) - i);
        if (((((ch == std::string(" ")) || (ch == std::string("\t"))) || (ch == std::string("\r"))) || (ch == std::string("\n")))) {
            if ((cur.size() > 0)) {
                out = ([&]{ auto __tmp = out; __tmp.push_back(cur); return __tmp; }());
                cur = std::string("");
            }
        } else {
            cur = (cur + ch);
        }
        i = (i + 1);
    }
    if ((cur.size() > 0)) {
        out = ([&]{ auto __tmp = out; __tmp.push_back(cur); return __tmp; }());
    }
    return out;
}

int64_t parseIntStr(std::string str) {
    int64_t i = 0;
    bool neg = false;
    if (((str.size() > 0) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 1 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+1); })(str) == std::string("-")))) {
        neg = true;
        i = 1;
    }
    int64_t n = 0;
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
    while ((i < str.size())) {
        n = ((n * 10) + digits[([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 1)); })(str)]);
        i = (i + 1);
    }
    if (neg) {
        n = -n;
    }
    return n;
}

std::vector<std::string> tokenize(std::string s) {
    std::vector<std::string> lines = splitLines(s);
    std::vector<std::string> toks = {};
    int64_t i = 0;
    while ((i < lines.size())) {
        std::string line = lines[i];
        if (((line.size() > 0) && (line.substr(0, 1 - 0) == std::string("#")))) {
            i = (i + 1);
            continue;
        }
        std::vector<std::string> parts = splitWS(line);
        int64_t j = 0;
        while ((j < parts.size())) {
            toks = ([&]{ auto __tmp = toks; __tmp.push_back(parts[j]); return __tmp; }());
            j = (j + 1);
        }
        i = (i + 1);
    }
    return toks;
}

Bitmap readP3(std::string text) {
    std::vector<std::string> toks = tokenize(text);
    if ((toks.size() < 4)) {
        return newBitmap(0, 0, 0);
    }
    if ((toks[0] != std::string("P3"))) {
        return newBitmap(0, 0, 0);
    }
    int64_t w = parseIntStr(toks[1]);
    int64_t h = parseIntStr(toks[2]);
    int64_t maxv = parseIntStr(toks[3]);
    int64_t idx = 4;
    Bitmap bm = newBitmap(w, h, maxv);
    int64_t y = (h - 1);
    while ((y >= 0)) {
        int64_t x = 0;
        while ((x < w)) {
            int64_t r = parseIntStr(toks[idx]);
            int64_t g = parseIntStr(toks[(idx + 1)]);
            int64_t b = parseIntStr(toks[(idx + 2)]);
            setPx(bm, x, y, Pixel{r, g, b});
            idx = (idx + 3);
            x = (x + 1);
        }
        y = (y - 1);
    }
    return bm;
}

void toGrey(Bitmap b) {
    int64_t h = b.h;
    int64_t w = b.w;
    int64_t m = 0;
    int64_t y = 0;
    while ((y < h)) {
        int64_t x = 0;
        while ((x < w)) {
            Pixel p = getPx(b, x, y);
            int64_t l = ((((p.R * 2126) + (p.G * 7152)) + (p.B * 722)) / 10000);
            if ((l > b.max)) {
                l = b.max;
            }
            setPx(b, x, y, Pixel{l, l, l});
            if ((l > m)) {
                m = l;
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    b.max = m;
}

std::string pad(int64_t n, int64_t w) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < w)) {
        s = (std::string(" ") + s);
    }
    return s;
}

std::string writeP3(Bitmap b) {
    int64_t h = b.h;
    int64_t w = b.w;
    int64_t max = b.max;
    int digits = ([&]{ std::ostringstream ss; ss << std::boolalpha << max; return ss.str(); }()).size();
    std::string out = ((((((std::string("P3\n# generated from Bitmap.writeppmp3\n") + ([&]{ std::ostringstream ss; ss << std::boolalpha << w; return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << h; return ss.str(); }())) + std::string("\n")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << max; return ss.str(); }())) + std::string("\n"));
    int64_t y = (h - 1);
    while ((y >= 0)) {
        std::string line = std::string("");
        int64_t x = 0;
        while ((x < w)) {
            Pixel p = getPx(b, x, y);
            line = ((((((line + std::string("   ")) + pad(p.R, (int64_t)(digits))) + std::string(" ")) + pad(p.G, (int64_t)(digits))) + std::string(" ")) + pad(p.B, (int64_t)(digits)));
            x = (x + 1);
        }
        out = ((out + line) + std::string("\n"));
        y = (y - 1);
    }
    return out;
}

int main() {
    std::cout << std::string("Original Colour PPM file");
    std::cout << std::endl;
    std::cout << ppmtxt;
    std::cout << std::endl;
    std::cout << std::string("Grey PPM:");
    std::cout << std::endl;
    toGrey(bm);
    std::cout << out;
    std::cout << std::endl;
    return 0;
}
