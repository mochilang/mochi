// Generated by Mochi transpiler v0.10.41 on 2025-07-27 11:45:14 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t indexOf(std::string s, std::string ch);
int64_t ord(std::string ch);
std::string chr(int64_t n);
std::string shiftRune(std::string r, int64_t k);
std::string encipher(std::string s, int64_t k);
std::string decipher(std::string s, int64_t k);
int main();

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = 0;
    while ((i < s.size())) {
        if ((s.substr(i, (i + 1) - i) == ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

int64_t ord(std::string ch) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    int64_t idx = _index_of(upper, ch);
    if ((idx >= 0)) {
        return (65 + idx);
    }
    idx = _index_of(lower, ch);
    if ((idx >= 0)) {
        return (97 + idx);
    }
    return 0;
}

std::string chr(int64_t n) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    if (((n >= 65) && (n < 91))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - 65), (n - 64) - (n - 65)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - 65), __v.begin()+(n - 64)); })(upper);
    }
    if (((n >= 97) && (n < 123))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - 97), (n - 96) - (n - 97)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - 97), __v.begin()+(n - 96)); })(lower);
    }
    return std::string("?");
}

std::string shiftRune(std::string r, int64_t k) {
    if (((r >= std::string("a")) && (r <= std::string("z")))) {
        return chr(((((ord(r) - 97) + k) % 26) + 97));
    }
    if (((r >= std::string("A")) && (r <= std::string("Z")))) {
        return chr(((((ord(r) - 65) + k) % 26) + 65));
    }
    return r;
}

std::string encipher(std::string s, int64_t k) {
    std::string out = std::string("");
    int64_t i = 0;
    while ((i < s.size())) {
        out = (out + shiftRune(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + 1) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + 1)); })(s), k));
        i = (i + 1);
    }
    return out;
}

std::string decipher(std::string s, int64_t k) {
    return encipher(s, ((26 - (k % 26)) % 26));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string pt = std::string("The five boxing wizards jump quickly");
        std::cout << (std::string("Plaintext: ") + pt);
        std::cout << std::endl;
        for (int64_t key : std::vector<int64_t>{0, 1, 7, 25, 26}) {
            if (((key < 1) || (key > 25))) {
                std::cout << ((std::string("Key ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << key; return ss.str(); }())) + std::string(" invalid"));
                std::cout << std::endl;
                continue;
            }
            std::string ct = encipher(pt, key);
            std::cout << (std::string("Key ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << key; return ss.str(); }()));
            std::cout << std::endl;
            std::cout << (std::string("  Enciphered: ") + ct);
            std::cout << std::endl;
            std::cout << (std::string("  Deciphered: ") + decipher(ct, key));
            std::cout << std::endl;
        }
    }
    return 0;
}
