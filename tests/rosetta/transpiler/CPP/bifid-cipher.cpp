// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:11:31 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <map>
#include <vector>
#include <sstream>
#include <type_traits>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::map<std::string, std::any> square_to_maps(const std::vector<std::vector<std::string>>& square);
std::string remove_space(std::string text, const std::map<std::string, std::vector<int64_t>>& emap);
std::string encrypt(std::string text, const std::map<std::string, std::vector<int64_t>>& emap, const std::map<std::string, std::string>& dmap);
std::string decrypt(std::string text, const std::map<std::string, std::vector<int64_t>>& emap, const std::map<std::string, std::string>& dmap);
int main();

std::map<std::string, std::any> square_to_maps(const std::vector<std::vector<std::string>>& square) {
    std::map<std::string, std::vector<int64_t>> emap = {};
    std::map<std::string, std::string> dmap = {};
    int64_t x = int64_t(0);
    while ((x < square.size())) {
        std::vector<std::string> row = square[x];
        int64_t y = int64_t(0);
        while ((y < row.size())) {
            std::string ch = row[y];
            emap[ch] = std::vector<int64_t>{x, y};
            dmap[((([&]{ std::ostringstream ss; ss << std::boolalpha << x; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }()))] = ch;
            y = (y + int64_t(1));
        }
        x = (x + int64_t(1));
    }
    return std::map<std::string, std::any>{{"e", std::any(emap)}, {"d", std::any(dmap)}};
}

std::string remove_space(std::string text, const std::map<std::string, std::vector<int64_t>>& emap) {
    std::string s = ([&]{ std::string __s = text; for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }());
    std::string out = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if (((ch != std::string(" ")) && ([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(emap, ch))) {
            out = (out + ch);
        }
        i = (i + int64_t(1));
    }
    return out;
}

std::string encrypt(std::string text, const std::map<std::string, std::vector<int64_t>>& emap, const std::map<std::string, std::string>& dmap) {
    text = remove_space(text, emap);
    std::vector<int64_t> row0 = {};
    std::vector<int64_t> row1 = {};
    int64_t i = int64_t(0);
    while ((i < text.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(text);
        std::vector<int64_t> xy = emap.at(ch);
        row0 = ([&]{ auto __tmp = row0; __tmp.push_back(xy[int64_t(0)]); return __tmp; }());
        row1 = ([&]{ auto __tmp = row1; __tmp.push_back(xy[int64_t(1)]); return __tmp; }());
        i = (i + int64_t(1));
    }
    for (int64_t v : row1) {
        row0 = ([&]{ auto __tmp = row0; __tmp.push_back(v); return __tmp; }());
    }
    std::string res = std::string("");
    int64_t j = int64_t(0);
    while ((j < row0.size())) {
        std::string key = ((([&]{ std::ostringstream ss; ss << std::boolalpha << row0[j]; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << row0[(j + int64_t(1))]; return ss.str(); }()));
        res = (res + dmap.at(key));
        j = (j + int64_t(2));
    }
    return res;
}

std::string decrypt(std::string text, const std::map<std::string, std::vector<int64_t>>& emap, const std::map<std::string, std::string>& dmap) {
    text = remove_space(text, emap);
    std::vector<int64_t> coords = {};
    int64_t i = int64_t(0);
    while ((i < text.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(text);
        std::vector<int64_t> xy = emap.at(ch);
        coords = ([&]{ auto __tmp = coords; __tmp.push_back(xy[int64_t(0)]); return __tmp; }());
        coords = ([&]{ auto __tmp = coords; __tmp.push_back(xy[int64_t(1)]); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t half = (coords.size() / int64_t(2));
    std::vector<int64_t> k1 = {};
    std::vector<int64_t> k2 = {};
    int64_t idx = int64_t(0);
    while ((idx < half)) {
        k1 = ([&]{ auto __tmp = k1; __tmp.push_back(coords[idx]); return __tmp; }());
        idx = (idx + int64_t(1));
    }
    while ((idx < coords.size())) {
        k2 = ([&]{ auto __tmp = k2; __tmp.push_back(coords[idx]); return __tmp; }());
        idx = (idx + int64_t(1));
    }
    std::string res = std::string("");
    int64_t j = int64_t(0);
    while ((j < half)) {
        std::string key = ((([&]{ std::ostringstream ss; ss << std::boolalpha << k1[j]; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << k2[j]; return ss.str(); }()));
        res = (res + dmap.at(key));
        j = (j + int64_t(1));
    }
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<std::string>> squareRosetta = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("A"), std::string("B"), std::string("C"), std::string("D"), std::string("E")}, std::vector<std::string>{std::string("F"), std::string("G"), std::string("H"), std::string("I"), std::string("K")}, std::vector<std::string>{std::string("L"), std::string("M"), std::string("N"), std::string("O"), std::string("P")}, std::vector<std::string>{std::string("Q"), std::string("R"), std::string("S"), std::string("T"), std::string("U")}, std::vector<std::string>{std::string("V"), std::string("W"), std::string("X"), std::string("Y"), std::string("Z")}, std::vector<std::string>{std::string("J"), std::string("1"), std::string("2"), std::string("3"), std::string("4")}};
        std::vector<std::vector<std::string>> squareWikipedia = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("B"), std::string("G"), std::string("W"), std::string("K"), std::string("Z")}, std::vector<std::string>{std::string("Q"), std::string("P"), std::string("N"), std::string("D"), std::string("S")}, std::vector<std::string>{std::string("I"), std::string("O"), std::string("A"), std::string("X"), std::string("E")}, std::vector<std::string>{std::string("F"), std::string("C"), std::string("L"), std::string("U"), std::string("M")}, std::vector<std::string>{std::string("T"), std::string("H"), std::string("Y"), std::string("V"), std::string("R")}, std::vector<std::string>{std::string("J"), std::string("1"), std::string("2"), std::string("3"), std::string("4")}};
        std::string textRosetta = std::string("0ATTACKATDAWN");
        std::string textWikipedia = std::string("FLEEATONCE");
        std::string textTest = std::string("The invasion will start on the first of January");
        std::map<std::string, std::any> maps = square_to_maps(squareRosetta);
        std::any emap = maps.at(std::string("e"));
        std::any dmap = maps.at(std::string("d"));
        std::cout << std::string("from Rosettacode");
        std::cout << std::endl;
        std::cout << (std::string("original:\t ") + textRosetta);
        std::cout << std::endl;
        std::string s = encrypt(textRosetta, std::any_cast<std::map<std::string, std::vector<int64_t>>>(emap), std::any_cast<std::map<std::string, std::string>>(dmap));
        std::cout << (std::string("codiert:\t ") + s);
        std::cout << std::endl;
        s = decrypt(s, std::any_cast<std::map<std::string, std::vector<int64_t>>>(emap), std::any_cast<std::map<std::string, std::string>>(dmap));
        std::cout << (std::string("and back:\t ") + s);
        std::cout << std::endl;
        maps = square_to_maps(squareWikipedia);
        emap = maps.at(std::string("e"));
        dmap = maps.at(std::string("d"));
        std::cout << std::string("from Wikipedia");
        std::cout << std::endl;
        std::cout << (std::string("original:\t ") + textWikipedia);
        std::cout << std::endl;
        s = encrypt(textWikipedia, std::any_cast<std::map<std::string, std::vector<int64_t>>>(emap), std::any_cast<std::map<std::string, std::string>>(dmap));
        std::cout << (std::string("codiert:\t ") + s);
        std::cout << std::endl;
        s = decrypt(s, std::any_cast<std::map<std::string, std::vector<int64_t>>>(emap), std::any_cast<std::map<std::string, std::string>>(dmap));
        std::cout << (std::string("and back:\t ") + s);
        std::cout << std::endl;
        maps = square_to_maps(squareWikipedia);
        emap = maps.at(std::string("e"));
        dmap = maps.at(std::string("d"));
        std::cout << std::string("from Rosettacode long part");
        std::cout << std::endl;
        std::cout << (std::string("original:\t ") + textTest);
        std::cout << std::endl;
        s = encrypt(textTest, std::any_cast<std::map<std::string, std::vector<int64_t>>>(emap), std::any_cast<std::map<std::string, std::string>>(dmap));
        std::cout << (std::string("codiert:\t ") + s);
        std::cout << std::endl;
        s = decrypt(s, std::any_cast<std::map<std::string, std::vector<int64_t>>>(emap), std::any_cast<std::map<std::string, std::string>>(dmap));
        std::cout << (std::string("and back:\t ") + s);
        std::cout << std::endl;
    }
    return 0;
}
