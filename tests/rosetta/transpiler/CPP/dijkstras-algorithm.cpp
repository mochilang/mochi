// Generated by Mochi transpiler v0.10.56 on 2025-08-04 00:38:51 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <algorithm>
#include <type_traits>
#include <vector>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

void addEdge(std::string u, std::string v, int64_t w);
std::vector<std::string> removeAt(const std::vector<std::string>& xs, int64_t idx);
std::map<std::string, std::any> dijkstra(std::string source);
std::string path(const std::map<std::string, std::string>& prev, std::string v);
int main();

int64_t INF = int64_t(1000000000);
std::map<std::string, std::map<std::string, int64_t>> graph = {};

void addEdge(std::string u, std::string v, int64_t w) {
    if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph, u)) {
        graph[u] = {};
    }
    graph[u][v] = w;
    if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph, v)) {
        graph[v] = {};
    }
}

std::vector<std::string> removeAt(const std::vector<std::string>& xs, int64_t idx) {
    std::vector<std::string> out = {};
    int64_t i = int64_t(0);
    for (std::string x : xs) {
        if ((i != idx)) {
            out = ([&]{ auto __tmp = out; __tmp.push_back(x); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return out;
}

std::map<std::string, std::any> dijkstra(std::string source) {
    std::map<std::string, int64_t> dist = {};
    std::map<std::string, std::string> prev = {};
    for (const auto& __p : graph) {
        auto v = __p.first;
        dist[v] = INF;
        prev[v] = std::string("");
    }
    dist[source] = int64_t(0);
    std::vector<std::string> q = {};
    for (const auto& __p : graph) {
        auto v = __p.first;
        q = ([&]{ auto __tmp = q; __tmp.push_back((std::string)v); return __tmp; }());
    }
    while ((q.size() > int64_t(0))) {
        int64_t bestIdx = int64_t(0);
        std::string u = q[int64_t(0)];
        int64_t i = int64_t(1);
        while ((i < q.size())) {
            std::string v = q[i];
            if ((([&](const auto& __m){ auto __it = __m.find(v); return __it != __m.end() ? __it->second : 0; })(dist) < ([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : 0; })(dist))) {
                u = v;
                bestIdx = i;
            }
            i = (i + int64_t(1));
        }
        q = removeAt(q, bestIdx);
        for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : std::map<std::string, int64_t>{}; })(graph)) {
            auto v = __p.first;
            int64_t alt = (([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : 0; })(dist) + ([&](const auto& __m){ auto __it = __m.find(v); return __it != __m.end() ? __it->second : 0; })(([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : std::map<std::string, int64_t>{}; })(graph)));
            if ((alt < ([&](const auto& __m){ auto __it = __m.find(v); return __it != __m.end() ? __it->second : 0; })(dist))) {
                dist[v] = alt;
                prev[v] = u;
            }
        }
    }
    return std::map<std::string, std::any>{{"dist", std::any(dist)}, {"prev", std::any(prev)}};
}

std::string path(const std::map<std::string, std::string>& prev, std::string v) {
    std::string s = v;
    std::string cur = v;
    while ((([&](const auto& __m){ auto __it = __m.find(cur); return __it != __m.end() ? __it->second : ""; })(prev) != std::string(""))) {
        cur = ([&](const auto& __m){ auto __it = __m.find(cur); return __it != __m.end() ? __it->second : ""; })(prev);
        s = (cur + s);
    }
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        addEdge(std::string("a"), std::string("b"), int64_t(7));
        addEdge(std::string("a"), std::string("c"), int64_t(9));
        addEdge(std::string("a"), std::string("f"), int64_t(14));
        addEdge(std::string("b"), std::string("c"), int64_t(10));
        addEdge(std::string("b"), std::string("d"), int64_t(15));
        addEdge(std::string("c"), std::string("d"), int64_t(11));
        addEdge(std::string("c"), std::string("f"), int64_t(2));
        addEdge(std::string("d"), std::string("e"), int64_t(6));
        addEdge(std::string("e"), std::string("f"), int64_t(9));
        std::map<std::string, std::any> res = dijkstra(std::string("a"));
        std::map<std::string, int64_t> dist = std::any_cast<std::map<std::string, int64_t>>(([&](const auto& __m){ auto __it = __m.find(std::string("dist")); return __it != __m.end() ? __it->second : std::any{}; })(res));
        std::map<std::string, std::string> prev = std::any_cast<std::map<std::string, std::string>>(([&](const auto& __m){ auto __it = __m.find(std::string("prev")); return __it != __m.end() ? __it->second : std::any{}; })(res));
        std::cout << (((std::string("Distance to e: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __m){ auto __it = __m.find(std::string("e")); return __it != __m.end() ? __it->second : 0; })(dist); return ss.str(); }())) + std::string(", Path: ")) + path(prev, std::string("e")));
        std::cout << std::endl;
        std::cout << (((std::string("Distance to f: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __m){ auto __it = __m.find(std::string("f")); return __it != __m.end() ? __it->second : 0; })(dist); return ss.str(); }())) + std::string(", Path: ")) + path(prev, std::string("f")));
        std::cout << std::endl;
    }
    return 0;
}
