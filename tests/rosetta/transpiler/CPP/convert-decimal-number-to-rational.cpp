// Generated by Mochi transpiler v0.10.56 on 2025-08-03 16:11:02 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>


static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t gcd(int64_t a, int64_t b);
std::map<std::string, int64_t> parseRational(std::string s);
int main();

int64_t gcd(int64_t a, int64_t b) {
    int64_t x = a;
    if ((x < int64_t(0))) {
        x = -x;
    }
    int64_t y = b;
    if ((y < int64_t(0))) {
        y = -y;
    }
    while ((y != int64_t(0))) {
        int64_t t = (x % y);
        x = y;
        y = t;
    }
    return x;
}

std::map<std::string, int64_t> parseRational(std::string s) {
    int64_t intPart = int64_t(0);
    int64_t fracPart = int64_t(0);
    int64_t denom = int64_t(1);
    bool afterDot = false;
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + int64_t(1)) - i);
        if ((ch == std::string("."))) {
            afterDot = true;
        } else {
            int64_t d = ((double)(_parse_int_str(ch, int64_t(10))) - (double)(_parse_int_str(std::string("0"), int64_t(10))));
            if (!afterDot) {
                intPart = ((intPart * int64_t(10)) + d);
            } else {
                fracPart = ((fracPart * int64_t(10)) + d);
                denom = (denom * int64_t(10));
            }
        }
        i = (i + int64_t(1));
    }
    int64_t num = ((intPart * denom) + fracPart);
    int64_t g = gcd(num, denom);
    return std::map<std::string, int64_t>{{"num", (int64_t)((num / g))}, {"den", (int64_t)((denom / g))}};
}

int main() {
    std::vector<std::string> inputs = std::vector<std::string>{std::string("0.9054054"), std::string("0.518518"), std::string("0.75")};
    for (std::string s : inputs) {
        std::map<std::string, int64_t> r = parseRational(s);
        std::cout << ((((s + std::string(" = ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](auto& __m){ auto __it = __m.find(std::string("num")); return __it != __m.end() ? __it->second : 0; })(r); return ss.str(); }())) + std::string("/")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](auto& __m){ auto __it = __m.find(std::string("den")); return __it != __m.end() ? __it->second : 0; })(r); return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
