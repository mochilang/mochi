// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:28:58 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t bitAt(int64_t x, int64_t idx);
void outputState(std::string state);
std::string step(std::string state, int64_t r);
void elem(int64_t r, int64_t cells, int64_t generations, std::string state);
std::string randInit(int64_t cells, int64_t seed);
std::string singleInit(int64_t cells);
int main();

int64_t bitAt(int64_t x, int64_t idx) {
    int64_t v = x;
    int64_t i = int64_t(0);
    while ((i < idx)) {
        v = (int64_t)((v / int64_t(2)));
        i = (i + int64_t(1));
    }
    return (v % int64_t(2));
}

void outputState(std::string state) {
    std::string line = std::string("");
    int64_t i = int64_t(0);
    while ((i < state.size())) {
        if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(state) == std::string("1"))) {
            line = (line + std::string("#"));
        } else {
            line = (line + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    std::cout << line;
    std::cout << std::endl;
}

std::string step(std::string state, int64_t r) {
    int cells = state.size();
    std::string out = std::string("");
    int64_t i = int64_t(0);
    while ((i < cells)) {
        std::string l = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((((i - int64_t(1)) + cells) % cells), ((((i - int64_t(1)) + cells) % cells) + int64_t(1)) - (((i - int64_t(1)) + cells) % cells)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(((i - int64_t(1)) + cells) % cells), __v.begin()+((((i - int64_t(1)) + cells) % cells) + int64_t(1))); })(state);
        std::string c = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(state);
        std::string rt = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(((i + int64_t(1)) % cells), (((i + int64_t(1)) % cells) + int64_t(1)) - ((i + int64_t(1)) % cells)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+((i + int64_t(1)) % cells), __v.begin()+(((i + int64_t(1)) % cells) + int64_t(1))); })(state);
        int64_t idx = int64_t(0);
        if ((l == std::string("1"))) {
            idx = (idx + int64_t(4));
        }
        if ((c == std::string("1"))) {
            idx = (idx + int64_t(2));
        }
        if ((rt == std::string("1"))) {
            idx = (idx + int64_t(1));
        }
        if ((bitAt(r, idx) == int64_t(1))) {
            out = (out + std::string("1"));
        } else {
            out = (out + std::string("0"));
        }
        i = (i + int64_t(1));
    }
    return out;
}

void elem(int64_t r, int64_t cells, int64_t generations, std::string state) {
    outputState(state);
    int64_t g = int64_t(0);
    std::string s = state;
    while ((g < generations)) {
        s = step(s, r);
        outputState(s);
        g = (g + int64_t(1));
    }
}

std::string randInit(int64_t cells, int64_t seed) {
    std::string s = std::string("");
    int64_t val = seed;
    int64_t i = int64_t(0);
    while ((i < cells)) {
        val = (((val * int64_t(1664525)) + int64_t(1013904223)) % int64_t(2147483647));
        if (((val % int64_t(2)) == int64_t(0))) {
            s = (s + std::string("0"));
        } else {
            s = (s + std::string("1"));
        }
        i = (i + int64_t(1));
    }
    return s;
}

std::string singleInit(int64_t cells) {
    std::string s = std::string("");
    int64_t i = int64_t(0);
    while ((i < cells)) {
        if ((i == (cells / int64_t(2)))) {
            s = (s + std::string("1"));
        } else {
            s = (s + std::string("0"));
        }
        i = (i + int64_t(1));
    }
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t cells = int64_t(20);
        int64_t generations = int64_t(9);
        std::cout << std::string("Single 1, rule 90:");
        std::cout << std::endl;
        std::string state = singleInit(cells);
        elem(int64_t(90), cells, generations, state);
        std::cout << std::string("Random intial state, rule 30:");
        std::cout << std::endl;
        state = randInit(cells, int64_t(3));
        elem(int64_t(30), cells, generations, state);
    }
    return 0;
}
