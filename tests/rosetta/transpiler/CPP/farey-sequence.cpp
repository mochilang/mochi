// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:15:45 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Frac;

std::ostream& operator<<(std::ostream&, const Frac&);


struct Frac {
    int64_t num;
    int64_t den;
    auto operator<=>(const Frac&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Frac& v) {
    os << '{' << "'num': "<< v.num
 << ", " << "'den': "<< v.den
 << '}';
    return os;
}

std::string fracStr(const Frac& f);
std::vector<Frac> gen(const Frac& l, const Frac& r, int64_t n, std::vector<Frac> acc);
int64_t totient(int64_t n);
int main();

std::string fracStr(const Frac& f) {
    return ((([&]{ std::ostringstream ss; ss << std::boolalpha << f.num; return ss.str(); }()) + std::string("/")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << f.den; return ss.str(); }()));
}

std::vector<Frac> gen(const Frac& l, const Frac& r, int64_t n, std::vector<Frac> acc) {
    Frac m = Frac{.num = (l.num + r.num), .den = (l.den + r.den)};
    if ((m.den <= n)) {
        acc = gen(l, m, n, acc);
        acc = ([&]{ auto __tmp = acc; __tmp.push_back(m); return __tmp; }());
        acc = gen(m, r, n, acc);
    }
    return acc;
}

int64_t totient(int64_t n) {
    int64_t tot = n;
    int64_t nn = n;
    int64_t p = int64_t(2);
    while (((p * p) <= nn)) {
        if (((nn % p) == int64_t(0))) {
            while (((nn % p) == int64_t(0))) {
                nn = (nn / p);
            }
            tot = (tot - (tot / p));
        }
        if ((p == int64_t(2))) {
            p = int64_t(1);
        }
        p = (p + int64_t(2));
    }
    if ((nn > int64_t(1))) {
        tot = (tot - (tot / nn));
    }
    return tot;
}

int main() {
    int64_t n = int64_t(1);
    while ((n <= int64_t(11))) {
        Frac l = Frac{.num = int64_t(0), .den = int64_t(1)};
        Frac r = Frac{.num = int64_t(1), .den = int64_t(1)};
        std::vector<Frac> seq = gen(l, r, n, std::vector<Frac>{});
        std::string line = (((std::string("F(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }())) + std::string("): ")) + fracStr(l));
        for (Frac f : seq) {
            line = ((line + std::string(" ")) + fracStr(f));
        }
        line = ((line + std::string(" ")) + fracStr(r));
        std::cout << line;
        std::cout << std::endl;
        n = (n + int64_t(1));
    }
    int64_t sum = int64_t(1);
    int64_t i = int64_t(1);
    int64_t next = int64_t(100);
    while ((i <= int64_t(1000))) {
        sum = (sum + totient(i));
        if ((i == next)) {
            std::cout << (((std::string("|F(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }())) + std::string(")|: ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << sum; return ss.str(); }()));
            std::cout << std::endl;
            next = (next + int64_t(100));
        }
        i = (i + int64_t(1));
    }
    return 0;
}
