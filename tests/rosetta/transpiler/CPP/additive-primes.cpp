// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:35 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

bool isPrime(int n);
int sumDigits(int n);
std::string pad(int n);
int main();

bool isPrime(int n) {
    if ((n < 2)) {
        return false;
    }
    if (((n % 2) == 0)) {
        return (n == 2);
    }
    if (((n % 3) == 0)) {
        return (n == 3);
    }
    int d = 5;
    while (((d * d) <= n)) {
        if (((n % d) == 0)) {
            return false;
        }
        d = (d + 2);
        if (((n % d) == 0)) {
            return false;
        }
        d = (d + 4);
    }
    return true;
}

int sumDigits(int n) {
    int s = 0;
    int x = n;
    while ((x > 0)) {
        s = (s + (x % 10));
        x = (int)((x / 10));
    }
    return s;
}

std::string pad(int n) {
    if ((n < 10)) {
        return (std::string("  ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()));
    }
    if ((n < 100)) {
        return (std::string(" ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()));
    }
    return ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::cout << std::string("Additive primes less than 500:");
        std::cout << std::endl;
        int count = 0;
        std::string line = std::string("");
        int lineCount = 0;
        int i = 2;
        while ((i < 500)) {
            if ((isPrime(i) && isPrime(sumDigits(i)))) {
                count = (count + 1);
                line = ((line + pad(i)) + std::string("  "));
                lineCount = (lineCount + 1);
                if ((lineCount == 10)) {
                    std::cout << line.substr(0, (line.size() - 2) - 0);
                    std::cout << std::endl;
                    line = std::string("");
                    lineCount = 0;
                }
            }
            if ((i > 2)) {
                i = (i + 2);
            } else {
                i = (i + 1);
            }
        }
        if ((lineCount > 0)) {
            std::cout << line.substr(0, (line.size() - 2) - 0);
            std::cout << std::endl;
        }
        std::cout << (([&]{ std::ostringstream ss; ss << std::boolalpha << count; return ss.str(); }()) + std::string(" additive primes found."));
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
