// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:54:34 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string listToStringInts(const std::vector<double>& xs);
std::vector<double> deconv(const std::vector<double>& g, const std::vector<double>& f);
int main();

std::string listToStringInts(const std::vector<double>& xs) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << (int64_t)(xs[i]); return ss.str(); }()));
        if ((i < (xs.size() - int64_t(1)))) {
            s = (s + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    return (s + std::string("]"));
}

std::vector<double> deconv(const std::vector<double>& g, const std::vector<double>& f) {
    std::vector<double> h = {};
    int64_t n = int64_t(0);
    int64_t hn = ((g.size() - f.size()) + int64_t(1));
    while ((n < hn)) {
        double v = g[n];
        int64_t lower = int64_t(0);
        if ((n >= f.size())) {
            lower = ((n - f.size()) + int64_t(1));
        }
        int64_t i = lower;
        while ((i < n)) {
            v = (v - (h[i] * f[(n - i)]));
            i = (i + int64_t(1));
        }
        v = ((double)(v) / (f[int64_t(0)]));
        h = ([&]{ auto __tmp = h; __tmp.push_back(v); return __tmp; }());
        n = (n + int64_t(1));
    }
    return h;
}

int main() {
    std::vector<double> h = std::vector<double>{-8.0, -9.0, -3.0, -1.0, -6.0, 7.0};
    std::vector<double> f = std::vector<double>{-3.0, -6.0, -1.0, 8.0, -6.0, 3.0, -1.0, -9.0, -9.0, 3.0, -2.0, 5.0, 2.0, -2.0, -7.0, -1.0};
    std::vector<double> g = std::vector<double>{24.0, 75.0, 71.0, -34.0, 3.0, 22.0, -45.0, 23.0, 245.0, 25.0, 52.0, 25.0, -67.0, -96.0, 96.0, 31.0, 55.0, 36.0, 29.0, -43.0, -7.0};
    std::cout << listToStringInts(h);
    std::cout << std::endl;
    std::cout << listToStringInts(deconv(g, f));
    std::cout << std::endl;
    std::cout << listToStringInts(f);
    std::cout << std::endl;
    std::cout << listToStringInts(deconv(g, h));
    std::cout << std::endl;
    return 0;
}
