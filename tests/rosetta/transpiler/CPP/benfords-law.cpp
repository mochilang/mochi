// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:23:17 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double floorf(double x);
int indexOf(std::string s, std::string ch);
std::string fmtF3(double x);
std::string padFloat3(double x, int width);
std::vector<double> fib1000();
int leadingDigit(double x);
void show(const std::vector<double>& nums, std::string title);
int main();

double floorf(double x) {
    int y = (int)(x);
    return (double)(y);
}

int indexOf(std::string s, std::string ch) {
    int i = 0;
    while ((i < s.size())) {
        if ((s.substr(i, (i + 1) - i) == ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

std::string fmtF3(double x) {
    double y = ((double)(floorf(((x * 1000.0) + 0.5))) / (1000.0));
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }());
    int dot = indexOf(s, std::string("."));
    if ((dot == (0 - 1))) {
        s = (s + std::string(".000"));
    } else {
        int decs = ((s.size() - dot) - 1);
        if ((decs > 3)) {
            s = s.substr(0, (dot + 4) - 0);
        } else {
            while ((decs < 3)) {
                s = (s + std::string("0"));
                decs = (decs + 1);
            }
        }
    }
    return s;
}

std::string padFloat3(double x, int width) {
    std::string s = fmtF3(x);
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

std::vector<double> fib1000() {
    double a = 0.0;
    double b = 1.0;
    std::vector<double> res = {};
    int i = 0;
    while ((i < 1000)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(b); return __tmp; }());
        double t = b;
        b = (b + a);
        a = t;
        i = (i + 1);
    }
    return res;
}

int leadingDigit(double x) {
    if ((x < 0.0)) {
        x = -x;
    }
    while ((x >= 10.0)) {
        x = ((double)(x) / (10.0));
    }
    while (((x > 0.0) && (x < 1.0))) {
        x = (x * 10.0);
    }
    return (int)(x);
}

void show(const std::vector<double>& nums, std::string title) {
    std::vector<int> counts = std::vector<int>{0, 0, 0, 0, 0, 0, 0, 0, 0};
    for (double n : nums) {
        int d = leadingDigit(n);
        if (((d >= 1) && (d <= 9))) {
            counts[(d - 1)] = (counts[(d - 1)] + 1);
        }
    }
    std::vector<double> preds = std::vector<double>{0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046};
    int total = nums.size();
    std::cout << title;
    std::cout << std::endl;
    std::cout << std::string("Digit  Observed  Predicted");
    std::cout << std::endl;
    int i = 0;
    while ((i < 9)) {
        double obs = ((double)((double)(counts[i])) / ((double)(total)));
        std::string line = (((((std::string("  ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + 1); return ss.str(); }())) + std::string("  ")) + padFloat3(obs, 9)) + std::string("  ")) + padFloat3(preds[i], 8));
        std::cout << line;
        std::cout << std::endl;
        i = (i + 1);
    }
}

int main() {
    show(fib1000(), std::string("First 1000 Fibonacci numbers"));
    return 0;
}
