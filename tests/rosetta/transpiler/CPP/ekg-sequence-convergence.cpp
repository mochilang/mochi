// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:23:19 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool contains(const std::vector<int64_t>& xs, int64_t n);
int64_t gcd(int64_t a, int64_t b);
std::vector<int64_t> sortInts(const std::vector<int64_t>& xs);
bool areSame(const std::vector<int64_t>& s, const std::vector<int64_t>& t);
void printSlice(int64_t start, const std::vector<int64_t>& seq);
int main();

bool contains(const std::vector<int64_t>& xs, int64_t n) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((xs[i] == n)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

int64_t gcd(int64_t a, int64_t b) {
    int64_t x = a;
    int64_t y = b;
    while ((y != int64_t(0))) {
        int64_t t = (x % y);
        x = y;
        y = t;
    }
    if ((x < int64_t(0))) {
        x = -x;
    }
    return x;
}

std::vector<int64_t> sortInts(const std::vector<int64_t>& xs) {
    std::vector<int64_t> arr = xs;
    int n = arr.size();
    int64_t i = int64_t(0);
    while ((i < n)) {
        int64_t j = int64_t(0);
        while ((j < (n - int64_t(1)))) {
            if ((arr[j] > arr[(j + int64_t(1))])) {
                int64_t tmp = arr[j];
                arr[j] = arr[(j + int64_t(1))];
                arr[(j + int64_t(1))] = tmp;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return arr;
}

bool areSame(const std::vector<int64_t>& s, const std::vector<int64_t>& t) {
    if ((s.size() != t.size())) {
        return false;
    }
    std::vector<int64_t> a = sortInts(s);
    std::vector<int64_t> b = sortInts(t);
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        if ((a[i] != b[i])) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

void printSlice(int64_t start, const std::vector<int64_t>& seq) {
    std::vector<int64_t> first = {};
    int64_t i = int64_t(0);
    while ((i < int64_t(30))) {
        first = ([&]{ auto __tmp = first; __tmp.push_back(seq[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::string pad = std::string("");
    if ((start < int64_t(10))) {
        pad = std::string(" ");
    }
    std::cout << ((((std::string("EKG(") + pad) + ([&]{ std::ostringstream ss; ss << std::boolalpha << start; return ss.str(); }())) + std::string("): ")) + ([&]{ std::ostringstream ss; { auto __tmp = first; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t limit = int64_t(100);
        std::vector<int64_t> starts = std::vector<int64_t>{int64_t(2), int64_t(5), int64_t(7), int64_t(9), int64_t(10)};
        std::vector<std::vector<int64_t>> ekg = {};
        int64_t s = int64_t(0);
        while ((s < starts.size())) {
            std::vector<int64_t> seq = std::vector<int64_t>{int64_t(1), starts[s]};
            int64_t n = int64_t(2);
            while ((n < limit)) {
                int64_t i = int64_t(2);
                bool done = false;
                while (!done) {
                    if ((!contains(seq, i) && (gcd(seq[(n - int64_t(1))], i) > int64_t(1)))) {
                        seq = ([&]{ auto __tmp = seq; __tmp.push_back(i); return __tmp; }());
                        done = true;
                    }
                    i = (i + int64_t(1));
                }
                n = (n + int64_t(1));
            }
            ekg = ([&]{ auto __tmp = ekg; __tmp.push_back(seq); return __tmp; }());
            printSlice(starts[s], seq);
            s = (s + int64_t(1));
        }
        int64_t i = int64_t(2);
        bool found = false;
        while ((i < limit)) {
            if (((ekg[int64_t(1)][i] == ekg[int64_t(2)][i]) && areSame(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), i - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+i); })(ekg[int64_t(1)]), ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), i - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+i); })(ekg[int64_t(2)])))) {
                std::cout << (std::string("\nEKG(5) and EKG(7) converge at term ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }()));
                std::cout << std::endl;
                found = true;
                break;
            }
            i = (i + int64_t(1));
        }
        if (!found) {
            std::cout << ((std::string("\nEKG5(5) and EKG(7) do not converge within ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << limit; return ss.str(); }())) + std::string(" terms"));
            std::cout << std::endl;
        }
    }
    return 0;
}
