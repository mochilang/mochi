// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:43:46 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <map>


static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t xor(int64_t a, int64_t b);
int64_t rshift(int64_t x, int64_t n);
int64_t ord(std::string ch);
std::string toHex(int64_t n);
std::vector<int64_t> crc32Table();
int64_t crc32(std::string s);
int main();

std::vector<int64_t> table = crc32Table();

int64_t xor(int64_t a, int64_t b) {
    int64_t res = int64_t(0);
    int64_t bit = int64_t(1);
    int64_t x = a;
    int64_t y = b;
    while (((x > int64_t(0)) || (y > int64_t(0)))) {
        int64_t abit = (x % int64_t(2));
        int64_t bbit = (y % int64_t(2));
        if ((abit != bbit)) {
            res = (res + bit);
        }
        x = (x / int64_t(2));
        y = (y / int64_t(2));
        bit = (bit * int64_t(2));
    }
    return res;
}

int64_t rshift(int64_t x, int64_t n) {
    int64_t v = x;
    int64_t i = int64_t(0);
    while ((i < n)) {
        v = (v / int64_t(2));
        i = (i + int64_t(1));
    }
    return v;
}

int64_t ord(std::string ch) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    int64_t idx = _index_of(upper, ch);
    if ((idx >= int64_t(0))) {
        return (int64_t(65) + idx);
    }
    idx = _index_of(lower, ch);
    if ((idx >= int64_t(0))) {
        return (int64_t(97) + idx);
    }
    if ((ch == std::string(" "))) {
        return int64_t(32);
    }
    return int64_t(0);
}

std::string toHex(int64_t n) {
    std::string digits = std::string("0123456789ABCDEF");
    if ((n == int64_t(0))) {
        return std::string("0");
    }
    int64_t v = n;
    std::string out = std::string("");
    while ((v > int64_t(0))) {
        int64_t d = (v % int64_t(16));
        out = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(d, (d + int64_t(1)) - d); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+d, __v.begin()+(d + int64_t(1))); })(digits) + out);
        v = (v / int64_t(16));
    }
    return out;
}

std::vector<int64_t> crc32Table() {
    std::vector<int64_t> table = {};
    int64_t i = int64_t(0);
    while ((i < int64_t(256))) {
        int64_t word = i;
        int64_t j = int64_t(0);
        while ((j < int64_t(8))) {
            if (((word % int64_t(2)) == int64_t(1))) {
                word = xor(rshift(word, int64_t(1)), int64_t(3988292384));
            } else {
                word = rshift(word, int64_t(1));
            }
            j = (j + int64_t(1));
        }
        table = ([&]{ auto __tmp = table; __tmp.push_back(word); return __tmp; }());
        i = (i + int64_t(1));
    }
    return table;
}

int64_t crc32(std::string s) {
    int64_t crc = int64_t(4294967295);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        int64_t c = ord(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s));
        int64_t idx = xor((crc % int64_t(256)), c);
        crc = xor(table[idx], rshift(crc, int64_t(8)));
        i = (i + int64_t(1));
    }
    return (int64_t(4294967295) - crc);
}

int main() {
    std::string s = std::string("The quick brown fox jumps over the lazy dog");
    int64_t result = crc32(s);
    std::string hex = ([&]{ std::string __s = toHex(result); for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }());
    std::cout << hex;
    std::cout << std::endl;
    return 0;
}
