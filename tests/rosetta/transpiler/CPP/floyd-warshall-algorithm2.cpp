// Generated by Mochi transpiler v0.10.52 on 2025-08-01 17:55:07 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct FWResult {
    std::vector<std::vector<int64_t>> dist;
    std::vector<std::vector<int64_t>> next;
    auto operator<=>(const FWResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const FWResult& v) {
    os << '{' << "'dist': "<< "["; for(size_t i=0;i<v.dist.size();++i){ if(i>0) os << ", "; os << v.dist[i]; } os << "]"
 << ", " << "'next': "<< "["; for(size_t i=0;i<v.next.size();++i){ if(i>0) os << ", "; os << v.next[i]; } os << "]"
 << '}';
    return os;
}

FWResult floydWarshall(const std::vector<std::vector<int64_t>>& graph);
std::vector<int64_t> path(int64_t u, int64_t v, const std::vector<std::vector<int64_t>>& next);
std::string pathStr(const std::vector<int64_t>& p);
int main();

int64_t INF = int64_t(1000000);
int64_t n = int64_t(4);
std::vector<std::vector<int64_t>> g = {};
FWResult res = floydWarshall(g);
int64_t i = int64_t(0);

FWResult floydWarshall(const std::vector<std::vector<int64_t>>& graph) {
    int n = graph.size();
    std::vector<std::vector<int64_t>> dist = {};
    std::vector<std::vector<int64_t>> next = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<int64_t> drow = {};
        std::vector<int64_t> nrow = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            drow = ([&]{ auto __tmp = drow; __tmp.push_back(graph[i][j]); return __tmp; }());
            if (((graph[i][j] < INF) && (i != j))) {
                nrow = ([&]{ auto __tmp = nrow; __tmp.push_back(j); return __tmp; }());
            } else {
                nrow = ([&]{ auto __tmp = nrow; __tmp.push_back(-int64_t(1)); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        dist = ([&]{ auto __tmp = dist; __tmp.push_back(drow); return __tmp; }());
        next = ([&]{ auto __tmp = next; __tmp.push_back(nrow); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t k = int64_t(0);
    while ((k < n)) {
        int64_t i = int64_t(0);
        while ((i < n)) {
            int64_t j = int64_t(0);
            while ((j < n)) {
                if (((dist[i][k] < INF) && (dist[k][j] < INF))) {
                    int64_t alt = (dist[i][k] + dist[k][j]);
                    if ((alt < dist[i][j])) {
                        dist[i][j] = alt;
                        next[i][j] = next[i][k];
                    }
                }
                j = (j + int64_t(1));
            }
            i = (i + int64_t(1));
        }
        k = (k + int64_t(1));
    }
    return FWResult{.dist = dist, .next = next};
}

std::vector<int64_t> path(int64_t u, int64_t v, const std::vector<std::vector<int64_t>>& next) {
    if ((next[u][v] < int64_t(0))) {
        return std::vector<int64_t>{};
    }
    std::vector<int64_t> p = std::vector<int64_t>{u};
    int64_t x = u;
    while ((x != v)) {
        x = next[x][v];
        p = ([&]{ auto __tmp = p; __tmp.push_back(x); return __tmp; }());
    }
    return p;
}

std::string pathStr(const std::vector<int64_t>& p) {
    std::string s = std::string("");
    int64_t i = int64_t(0);
    while ((i < p.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << (p[i] + int64_t(1)); return ss.str(); }()));
        if ((i < (p.size() - int64_t(1)))) {
            s = (s + std::string(" -> "));
        }
        i = (i + int64_t(1));
    }
    return s;
}

int main() {
    for (int i = int64_t(0); i < n; i++ ) {
        std::vector<int64_t> row = {};
        for (int j = int64_t(0); j < n; j++ ) {
            if (((double)(i) == (double)(j))) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            } else {
                row = ([&]{ auto __tmp = row; __tmp.push_back(INF); return __tmp; }());
            }
        }
        g = ([&]{ auto __tmp = g; __tmp.push_back(row); return __tmp; }());
    }
    g[int64_t(0)][int64_t(2)] = -int64_t(2);
    g[int64_t(2)][int64_t(3)] = int64_t(2);
    g[int64_t(3)][int64_t(1)] = -int64_t(1);
    g[int64_t(1)][int64_t(0)] = int64_t(4);
    g[int64_t(1)][int64_t(2)] = int64_t(3);
    std::cout << std::string("pair\tdist\tpath");
    std::cout << std::endl;
    while ((i < n)) {
        int64_t j = int64_t(0);
        while ((j < n)) {
            if ((i != j)) {
                std::vector<int64_t> p = path(i, j, res.next);
                std::cout << ((((((([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }()) + std::string(" -> ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << (j + int64_t(1)); return ss.str(); }())) + std::string("\t")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << res.dist[i][j]; return ss.str(); }())) + std::string("\t")) + pathStr(p));
                std::cout << std::endl;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return 0;
}
