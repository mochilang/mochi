// Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:29:46 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Colour {
    int64_t R;
    int64_t G;
    int64_t B;
    auto operator<=>(const Colour&) const = default;
};

struct Bitmap {
    int64_t width;
    int64_t height;
    std::vector<std::vector<Colour>> pixels;
    auto operator<=>(const Bitmap&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Colour& v) {
    os << '{' << "'R': "<< v.R
 << ", " << "'G': "<< v.G
 << ", " << "'B': "<< v.B
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Bitmap& v) {
    os << '{' << "'width': "<< v.width
 << ", " << "'height': "<< v.height
 << ", " << "'pixels': "<< "["; for(size_t i=0;i<v.pixels.size();++i){ if(i>0) os << ", "; os << v.pixels[i]; } os << "]"
 << '}';
    return os;
}

Bitmap newBitmap(int64_t w, int64_t h, Colour c);
void setPixel(Bitmap b, int64_t x, int64_t y, Colour c);
void fillRect(Bitmap b, int64_t x, int64_t y, int64_t w, int64_t h, Colour c);
std::string pad(int64_t n, int64_t width);
std::string writePPMP3(Bitmap b);
int main();

Bitmap newBitmap(int64_t w, int64_t h, Colour c) {
    std::vector<std::vector<Colour>> rows = {};
    int64_t y = 0;
    while ((y < h)) {
        std::vector<Colour> row = {};
        int64_t x = 0;
        while ((x < w)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(c); return __tmp; }());
            x = (x + 1);
        }
        rows = ([&]{ auto __tmp = rows; __tmp.push_back(row); return __tmp; }());
        y = (y + 1);
    }
    return Bitmap{w, h, rows};
}

void setPixel(Bitmap b, int64_t x, int64_t y, Colour c) {
    std::vector<std::vector<Colour>> rows = b.pixels;
    std::vector<Colour> row = rows[y];
    row[x] = c;
    rows[y] = row;
    b.pixels = rows;
}

void fillRect(Bitmap b, int64_t x, int64_t y, int64_t w, int64_t h, Colour c) {
    int64_t yy = y;
    while ((yy < (y + h))) {
        int64_t xx = x;
        while ((xx < (x + w))) {
            setPixel(b, xx, yy, c);
            xx = (xx + 1);
        }
        yy = (yy + 1);
    }
}

std::string pad(int64_t n, int64_t width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

std::string writePPMP3(Bitmap b) {
    int64_t maxv = 0;
    int64_t y = 0;
    while ((y < b.height)) {
        int64_t x = 0;
        while ((x < b.width)) {
            Colour p = b.pixels[y][x];
            if ((p.R > maxv)) {
                maxv = p.R;
            }
            if ((p.G > maxv)) {
                maxv = p.G;
            }
            if ((p.B > maxv)) {
                maxv = p.B;
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    std::string out = ((((((std::string("P3\n# generated from Bitmap.writeppmp3\n") + ([&]{ std::ostringstream ss; ss << std::boolalpha << b.width; return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << b.height; return ss.str(); }())) + std::string("\n")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << maxv; return ss.str(); }())) + std::string("\n"));
    int numsize = ([&]{ std::ostringstream ss; ss << std::boolalpha << maxv; return ss.str(); }()).size();
    y = (b.height - 1);
    while ((y >= 0)) {
        std::string line = std::string("");
        int64_t x = 0;
        while ((x < b.width)) {
            Colour p = b.pixels[y][x];
            line = ((((((line + std::string("   ")) + pad(p.R, (int64_t)(numsize))) + std::string(" ")) + pad(p.G, (int64_t)(numsize))) + std::string(" ")) + pad(p.B, (int64_t)(numsize)));
            x = (x + 1);
        }
        out = (out + line);
        if ((y > 0)) {
            out = (out + std::string("\n"));
        } else {
            out = (out + std::string("\n"));
        }
        y = (y - 1);
    }
    return out;
}

int main() {
    Colour black = Colour{0, 0, 0};
    Colour white = Colour{255, 255, 255};
    Bitmap bm = newBitmap(4, 4, black);
    fillRect(bm, 1, 0, 1, 2, white);
    setPixel(bm, 3, 3, Colour{127, 0, 63});
    std::string ppm = writePPMP3(bm);
    std::cout << ppm;
    std::cout << std::endl;
    return 0;
}
