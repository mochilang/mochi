// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:59:57 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> randOrder(int64_t seed, int64_t n);
std::vector<int64_t> randChaos(int64_t seed, int64_t n);
int main();

std::vector<int64_t> randOrder(int64_t seed, int64_t n) {
    int64_t next = (((seed * int64_t(1664525)) + int64_t(1013904223)) % int64_t(2147483647));
    return std::vector<int64_t>{next, (next % n)};
}

std::vector<int64_t> randChaos(int64_t seed, int64_t n) {
    int64_t next = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483647));
    return std::vector<int64_t>{next, (next % n)};
}

int main() {
    int64_t nBuckets = int64_t(10);
    int64_t initialSum = int64_t(1000);
    std::vector<int64_t> buckets = {};
    for (int i = int64_t(0); i < nBuckets; i++ ) {
        buckets = ([&]{ auto __tmp = buckets; __tmp.push_back(int64_t(0)); return __tmp; }());
    }
    int64_t i = nBuckets;
    int64_t dist = initialSum;
    while ((i > int64_t(0))) {
        int64_t v = (dist / i);
        i = (i - int64_t(1));
        buckets[i] = v;
        dist = (dist - v);
    }
    int64_t tc0 = int64_t(0);
    int64_t tc1 = int64_t(0);
    int64_t total = int64_t(0);
    int64_t nTicks = int64_t(0);
    int64_t seedOrder = int64_t(1);
    int64_t seedChaos = int64_t(2);
    std::cout << std::string("sum  ---updates---    mean  buckets");
    std::cout << std::endl;
    int64_t t = int64_t(0);
    while ((t < int64_t(5))) {
        std::vector<int64_t> r = randOrder(seedOrder, nBuckets);
        seedOrder = r[int64_t(0)];
        int64_t b1 = r[int64_t(1)];
        int64_t b2 = ((b1 + int64_t(1)) % nBuckets);
        int64_t v1 = buckets[b1];
        int64_t v2 = buckets[b2];
        if ((v1 > v2)) {
            int64_t a = (int64_t)(((v1 - v2) / int64_t(2)));
            if ((a > buckets[b1])) {
                a = buckets[b1];
            }
            buckets[b1] = (buckets[b1] - a);
            buckets[b2] = (buckets[b2] + a);
        } else {
            int64_t a = (int64_t)(((v2 - v1) / int64_t(2)));
            if ((a > buckets[b2])) {
                a = buckets[b2];
            }
            buckets[b2] = (buckets[b2] - a);
            buckets[b1] = (buckets[b1] + a);
        }
        tc0 = (tc0 + int64_t(1));
        r = randChaos(seedChaos, nBuckets);
        seedChaos = r[int64_t(0)];
        b1 = r[int64_t(1)];
        b2 = ((b1 + int64_t(1)) % nBuckets);
        r = randChaos(seedChaos, (buckets[b1] + int64_t(1)));
        seedChaos = r[int64_t(0)];
        int64_t amt = r[int64_t(1)];
        if ((amt > buckets[b1])) {
            amt = buckets[b1];
        }
        buckets[b1] = (buckets[b1] - amt);
        buckets[b2] = (buckets[b2] + amt);
        tc1 = (tc1 + int64_t(1));
        int64_t sum = int64_t(0);
        int64_t idx = int64_t(0);
        while ((idx < nBuckets)) {
            sum = (sum + buckets[idx]);
            idx = (idx + int64_t(1));
        }
        total = ((total + tc0) + tc1);
        nTicks = (nTicks + int64_t(1));
        std::cout << ((((((((([&]{ std::ostringstream ss; ss << std::boolalpha << sum; return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << tc0; return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << tc1; return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << (total / nTicks); return ss.str(); }())) + std::string("  ")) + ([&]{ std::ostringstream ss; { auto __tmp = buckets; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        tc0 = int64_t(0);
        tc1 = int64_t(0);
        t = (t + int64_t(1));
    }
    return 0;
}
