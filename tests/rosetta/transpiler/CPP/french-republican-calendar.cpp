// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:12:26 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool greLeap(int64_t year);
bool repLeap(int64_t year);
int64_t greToDay(int64_t d, int64_t m, int64_t y);
int64_t repToDay(int64_t d, int64_t m, int64_t y);
std::vector<int64_t> dayToGre(int64_t day);
std::vector<int64_t> dayToRep(int64_t day);
std::string formatRep(int64_t d, int64_t m, int64_t y);
std::string formatGre(int64_t d, int64_t m, int64_t y);
int main();

std::vector<std::string> gregorianStr = std::vector<std::string>{std::string("January"), std::string("February"), std::string("March"), std::string("April"), std::string("May"), std::string("June"), std::string("July"), std::string("August"), std::string("September"), std::string("October"), std::string("November"), std::string("December")};
std::vector<int64_t> gregorian = std::vector<int64_t>{int64_t(31), int64_t(28), int64_t(31), int64_t(30), int64_t(31), int64_t(30), int64_t(31), int64_t(31), int64_t(30), int64_t(31), int64_t(30), int64_t(31)};
std::vector<std::string> republicanStr = std::vector<std::string>{std::string("Vendemiaire"), std::string("Brumaire"), std::string("Frimaire"), std::string("Nivose"), std::string("Pluviose"), std::string("Ventose"), std::string("Germinal"), std::string("Floreal"), std::string("Prairial"), std::string("Messidor"), std::string("Thermidor"), std::string("Fructidor")};
std::vector<std::string> sansculotidesStr = std::vector<std::string>{std::string("Fete de la vertu"), std::string("Fete du genie"), std::string("Fete du travail"), std::string("Fete de l'opinion"), std::string("Fete des recompenses"), std::string("Fete de la Revolution")};
std::vector<int64_t> rep = dayToRep(greToDay(int64_t(20), int64_t(5), int64_t(1795)));
std::vector<int64_t> gre = dayToGre(repToDay(int64_t(1), int64_t(9), int64_t(3)));

bool greLeap(int64_t year) {
    int64_t a = (int64_t)((year % int64_t(4)));
    int64_t b = (int64_t)((year % int64_t(100)));
    int64_t c = (int64_t)((year % int64_t(400)));
    return ((a == int64_t(0)) && ((b != int64_t(0)) || (c == int64_t(0))));
}

bool repLeap(int64_t year) {
    int64_t a = (int64_t)(((year + int64_t(1)) % int64_t(4)));
    int64_t b = (int64_t)(((year + int64_t(1)) % int64_t(100)));
    int64_t c = (int64_t)(((year + int64_t(1)) % int64_t(400)));
    return ((a == int64_t(0)) && ((b != int64_t(0)) || (c == int64_t(0))));
}

int64_t greToDay(int64_t d, int64_t m, int64_t y) {
    int64_t yy = y;
    int64_t mm = m;
    if ((mm < int64_t(3))) {
        yy = (yy - int64_t(1));
        mm = (mm + int64_t(12));
    }
    return (((((((yy * int64_t(36525)) / int64_t(100)) - (yy / int64_t(100))) + (yy / int64_t(400))) + ((int64_t(306) * (mm + int64_t(1))) / int64_t(10))) + d) - int64_t(654842));
}

int64_t repToDay(int64_t d, int64_t m, int64_t y) {
    int64_t dd = d;
    int64_t mm = m;
    if ((mm == int64_t(13))) {
        mm = (mm - int64_t(1));
        dd = (dd + int64_t(30));
    }
    if (repLeap(y)) {
        dd = (dd - int64_t(1));
    }
    return (((((((int64_t(365) * y) + ((y + int64_t(1)) / int64_t(4))) - ((y + int64_t(1)) / int64_t(100))) + ((y + int64_t(1)) / int64_t(400))) + (int64_t(30) * mm)) + dd) - int64_t(395));
}

std::vector<int64_t> dayToGre(int64_t day) {
    int64_t y = ((day * int64_t(100)) / int64_t(36525));
    int64_t d = ((day - ((y * int64_t(36525)) / int64_t(100))) + int64_t(21));
    y = (y + int64_t(1792));
    d = (((d + (y / int64_t(100))) - (y / int64_t(400))) - int64_t(13));
    int64_t m = int64_t(8);
    while ((d > gregorian[m])) {
        d = (d - gregorian[m]);
        m = (m + int64_t(1));
        if ((m == int64_t(12))) {
            m = int64_t(0);
            y = (y + int64_t(1));
            if (greLeap(y)) {
                gregorian[int64_t(1)] = int64_t(29);
            } else {
                gregorian[int64_t(1)] = int64_t(28);
            }
        }
    }
    m = (m + int64_t(1));
    return std::vector<int64_t>{d, m, y};
}

std::vector<int64_t> dayToRep(int64_t day) {
    int64_t y = (((day - int64_t(1)) * int64_t(100)) / int64_t(36525));
    if (repLeap(y)) {
        y = (y - int64_t(1));
    }
    int64_t d = ((((day - (((y + int64_t(1)) * int64_t(36525)) / int64_t(100))) + int64_t(365)) + ((y + int64_t(1)) / int64_t(100))) - ((y + int64_t(1)) / int64_t(400)));
    y = (y + int64_t(1));
    int64_t m = int64_t(1);
    int64_t sc = int64_t(5);
    if (repLeap(y)) {
        sc = int64_t(6);
    }
    while ((d > int64_t(30))) {
        d = (d - int64_t(30));
        m = (m + int64_t(1));
        if ((m == int64_t(13))) {
            if ((d > sc)) {
                d = (d - sc);
                m = int64_t(1);
                y = (y + int64_t(1));
                sc = int64_t(5);
                if (repLeap(y)) {
                    sc = int64_t(6);
                }
            }
        }
    }
    return std::vector<int64_t>{d, m, y};
}

std::string formatRep(int64_t d, int64_t m, int64_t y) {
    if ((m == int64_t(13))) {
        return ((sansculotidesStr[(d - int64_t(1))] + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }()));
    }
    return ((((([&]{ std::ostringstream ss; ss << std::boolalpha << d; return ss.str(); }()) + std::string(" ")) + republicanStr[(m - int64_t(1))]) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }()));
}

std::string formatGre(int64_t d, int64_t m, int64_t y) {
    return ((((([&]{ std::ostringstream ss; ss << std::boolalpha << d; return ss.str(); }()) + std::string(" ")) + gregorianStr[(m - int64_t(1))]) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }()));
}

int main() {
    std::cout << formatRep(rep[int64_t(0)], rep[int64_t(1)], rep[int64_t(2)]);
    std::cout << std::endl;
    std::cout << formatGre(gre[int64_t(0)], gre[int64_t(1)], gre[int64_t(2)]);
    std::cout << std::endl;
    return 0;
}
