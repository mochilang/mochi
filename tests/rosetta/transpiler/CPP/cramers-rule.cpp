// Generated by Mochi transpiler v0.10.54 on 2025-08-02 12:07:16 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double det(const std::vector<std::vector<double>>& m);
std::vector<std::vector<double>> replaceCol(const std::vector<std::vector<double>>& m, int64_t col, const std::vector<double>& v);
int main();

std::vector<std::vector<double>> m = std::vector<std::vector<double>>{std::vector<double>{2.0, -1.0, 5.0, 1.0}, std::vector<double>{3.0, 2.0, 2.0, -6.0}, std::vector<double>{1.0, 3.0, 3.0, -1.0}, std::vector<double>{5.0, -2.0, -3.0, 3.0}};
std::vector<double> v = std::vector<double>{-3.0, -32.0, -47.0, 49.0};
double d = det(m);
std::vector<double> x = {};
int64_t i = int64_t(0);
std::string s = std::string("[");
int64_t j = int64_t(0);

double det(const std::vector<std::vector<double>>& m) {
    int n = m.size();
    if ((n == int64_t(1))) {
        return m[int64_t(0)][int64_t(0)];
    }
    double total = 0.0;
    double sign = 1.0;
    int64_t c = int64_t(0);
    while ((c < n)) {
        std::vector<std::vector<double>> sub = {};
        int64_t r = int64_t(1);
        while ((r < n)) {
            std::vector<double> row = {};
            int64_t cc = int64_t(0);
            while ((cc < n)) {
                if ((cc != c)) {
                    row = ([&]{ auto __tmp = row; __tmp.push_back(m[r][cc]); return __tmp; }());
                }
                cc = (cc + int64_t(1));
            }
            sub = ([&]{ auto __tmp = sub; __tmp.push_back(row); return __tmp; }());
            r = (r + int64_t(1));
        }
        total = (total + ((sign * m[int64_t(0)][c]) * det(sub)));
        sign = (sign * -1.0);
        c = (c + int64_t(1));
    }
    return total;
}

std::vector<std::vector<double>> replaceCol(const std::vector<std::vector<double>>& m, int64_t col, const std::vector<double>& v) {
    std::vector<std::vector<double>> res = {};
    int64_t r = int64_t(0);
    while ((r < m.size())) {
        std::vector<double> row = {};
        int64_t c = int64_t(0);
        while ((c < m[r].size())) {
            if ((c == col)) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(v[r]); return __tmp; }());
            } else {
                row = ([&]{ auto __tmp = row; __tmp.push_back(m[r][c]); return __tmp; }());
            }
            c = (c + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    return res;
}

int main() {
    while ((i < v.size())) {
        std::vector<std::vector<double>> mc = replaceCol(m, i, v);
        x = ([&]{ auto __tmp = x; __tmp.push_back(((double)(det(mc)) / (d))); return __tmp; }());
        i = (i + int64_t(1));
    }
    while ((j < x.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << x[j]; return ss.str(); }()));
        if ((j < (x.size() - int64_t(1)))) {
            s = (s + std::string(" "));
        }
        j = (j + int64_t(1));
    }
    s = (s + std::string("]"));
    std::cout << s;
    std::cout << std::endl;
    return 0;
}
