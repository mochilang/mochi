// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:57:44 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double sinApprox(double x);
double cosApprox(double x);
int main();

double PI = 3.141592653589793;
double degreesIncr = ((double)((0.1 * PI)) / (180.0));
double turns = 2.0;
double stop = (((360.0 * turns) * 10.0) * degreesIncr);
double width = 600.0;
double centre = ((double)(width) / (2.0));
double a = 1.0;
double b = 20.0;
double theta = 0.0;
int count = 0;

double sinApprox(double x) {
    double term = x;
    double sum = x;
    int n = 1;
    while ((n <= 10)) {
        double denom = (double)(((2 * n) * ((2 * n) + 1)));
        term = ((double)(((-term * x) * x)) / (denom));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum;
}

double cosApprox(double x) {
    double term = 1.0;
    double sum = 1.0;
    int n = 1;
    while ((n <= 10)) {
        double denom = (double)((((2 * n) - 1) * (2 * n)));
        term = ((double)(((-term * x) * x)) / (denom));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum;
}

int main() {
    while ((theta < stop)) {
        double r = (a + (b * theta));
        double x = (r * cosApprox(theta));
        double y = (r * sinApprox(theta));
        if (((count % 100) == 0)) {
            std::cout << ((_to_string((centre + x)) + std::string(",")) + _to_string((centre - y)));
            std::cout << std::endl;
        }
        theta = (theta + degreesIncr);
        count = (count + 1);
    }
    return 0;
}
