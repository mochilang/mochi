// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:12:00 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Fps;
struct Pair;

std::ostream& operator<<(std::ostream&, const Fps&);
std::ostream& operator<<(std::ostream&, const Pair&);


struct Fps {
    std::vector<double> coeffs;
    std::function<double(int64_t)> compute;
    auto operator<=>(const Fps&) const = default;
};

struct Pair {
    Fps sin;
    Fps cos;
    auto operator<=>(const Pair&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Fps& v) {
    os << '{' << "'coeffs': "<< "["; for(size_t i=0;i<v.coeffs.size();++i){ if(i>0) os << ", "; os << v.coeffs[i]; } os << "]"
 << ", " << "'compute': "<< "<fn>"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Pair& v) {
    os << '{' << "'sin': "<< v.sin
 << ", " << "'cos': "<< v.cos
 << '}';
    return os;
}

Fps newFps(std::function<double(int64_t)> fn);
double extract(Fps f, int64_t n);
Fps one();
Fps add(const Fps& a, const Fps& b);
Fps sub(const Fps& a, const Fps& b);
Fps mul(const Fps& a, const Fps& b);
Fps _div(const Fps& a, const Fps& b);
Fps differentiate(const Fps& a);
Fps integrate(const Fps& a);
Pair sinCos();
double floorf(double x);
std::string fmtF5(double x);
std::string padFloat5(double x, int64_t width);
std::string partialSeries(const Fps& f);
int main();

Fps newFps(std::function<double(int64_t)> fn) {
    return Fps{.coeffs = std::vector<double>{}, .compute = fn};
}

double extract(Fps f, int64_t n) {
    while ((f.coeffs.size() <= n)) {
        int idx = f.coeffs.size();
        double v = (f.compute)(idx);
        f.coeffs = ([&]{ auto __tmp = f.coeffs; __tmp.push_back(v); return __tmp; }());
    }
    return f.coeffs[n];
}

Fps one() {
    return newFps((std::function<double(int64_t)>)([=](int64_t i) mutable {
    if ((i == int64_t(0))) {
        return 1.0;
    }
    return 0.0;
}));
}

Fps add(const Fps& a, const Fps& b) {
    return newFps((std::function<double(int64_t)>)([=](int64_t n) mutable {
    return (extract(a, n) + extract(b, n));
}));
}

Fps sub(const Fps& a, const Fps& b) {
    return newFps((std::function<double(int64_t)>)([=](int64_t n) mutable {
    return (extract(a, n) - extract(b, n));
}));
}

Fps mul(const Fps& a, const Fps& b) {
    return newFps((std::function<double(int64_t)>)([=](int64_t n) mutable {
    double s = 0.0;
    int64_t k = int64_t(0);
    while ((k <= n)) {
        s = (s + (extract(a, k) * extract(b, (n - k))));
        k = (k + int64_t(1));
    }
    return s;
}));
}

Fps _div(const Fps& a, const Fps& b) {
    Fps q = newFps((std::function<double(int64_t)>)([=](int64_t n) mutable {
    return 0.0;
}));
    q.compute = [=](int64_t n) mutable {
    double b0 = extract(b, int64_t(0));
    if ((b0 == 0.0)) {
        return ((double)(0.0) / (0.0));
    }
    double s = extract(a, n);
    int64_t k = int64_t(1);
    while ((k <= n)) {
        s = (s - (extract(b, k) * extract(q, (n - k))));
        k = (k + int64_t(1));
    }
    return ((double)(s) / (b0));
};
    return q;
}

Fps differentiate(const Fps& a) {
    return newFps((std::function<double(int64_t)>)([=](int64_t n) mutable {
    return ((double)((n + int64_t(1))) * extract(a, (n + int64_t(1))));
}));
}

Fps integrate(const Fps& a) {
    return newFps((std::function<double(int64_t)>)([=](int64_t n) mutable {
    if ((n == int64_t(0))) {
        return 0.0;
    }
    return ((double)(extract(a, (n - int64_t(1)))) / ((double)(n)));
}));
}

Pair sinCos() {
    Fps sin = newFps((std::function<double(int64_t)>)([=](int64_t n) mutable {
    return 0.0;
}));
    Fps cos = sub(one(), integrate(sin));
    sin.compute = [=](int64_t n) mutable {
    if ((n == int64_t(0))) {
        return 0.0;
    }
    return ((double)(extract(cos, (n - int64_t(1)))) / ((double)(n)));
};
    return Pair{.sin = sin, .cos = cos};
}

double floorf(double x) {
    int64_t y = (int64_t)(x);
    return (double)(y);
}

std::string fmtF5(double x) {
    double y = ((double)(floorf(((x * 100000.0) + 0.5))) / (100000.0));
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }());
    int64_t dot = _index_of(s, std::string("."));
    if ((dot == (int64_t(0) - int64_t(1)))) {
        s = (s + std::string(".00000"));
    } else {
        int64_t decs = ((s.size() - dot) - int64_t(1));
        if ((decs > int64_t(5))) {
            s = s.substr(int64_t(0), (dot + int64_t(6)) - int64_t(0));
        } else {
            while ((decs < int64_t(5))) {
                s = (s + std::string("0"));
                decs = (decs + int64_t(1));
            }
        }
    }
    return s;
}

std::string padFloat5(double x, int64_t width) {
    std::string s = fmtF5(x);
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

std::string partialSeries(const Fps& f) {
    std::string out = std::string("");
    int64_t i = int64_t(0);
    while ((i < int64_t(6))) {
        out = (((out + std::string(" ")) + padFloat5(extract(f, i), int64_t(8))) + std::string(" "));
        i = (i + int64_t(1));
    }
    return out;
}

int main() {
    Pair p = sinCos();
    std::cout << (std::string("sin:") + partialSeries(p.sin));
    std::cout << std::endl;
    std::cout << (std::string("cos:") + partialSeries(p.cos));
    std::cout << std::endl;
    return 0;
}
