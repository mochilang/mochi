// Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:30:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <any>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Instruction;

std::ostream& operator<<(std::ostream&, const Instruction&);


struct Instruction {
    std::string Label;
    std::string Opcode;
    std::string Arg;
    auto operator<=>(const Instruction&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Instruction& v) {
    os << '{' << "'Label': "<< "'" << v.Label << "'"
 << ", " << "'Opcode': "<< "'" << v.Opcode << "'"
 << ", " << "'Arg': "<< "'" << v.Arg << "'"
 << '}';
    return os;
}

std::string trim(std::string s);
std::vector<std::string> split(std::string s, std::string sep);
std::vector<std::string> splitWS(std::string s);
int64_t indexOf(std::string s, std::string ch);
int64_t parseIntStr(std::string str);
std::map<std::string, std::any> parseAsm(std::string _asm);
std::vector<int64_t> compile(const std::map<std::string, std::any>& p);
int64_t floorMod(int64_t a, int64_t b);
int64_t run(const std::vector<int64_t>& bytecode);
int64_t execute(std::string _asm);
int main();

std::string trim(std::string s) {
    int64_t start = int64_t(0);
    while (((start < s.size()) && ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, (start + int64_t(1)) - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+(start + int64_t(1))); })(s) == std::string(" ")) || (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, (start + int64_t(1)) - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+(start + int64_t(1))); })(s) == std::string("\t"))))) {
        start = (start + int64_t(1));
    }
    int end = s.size();
    while (((end > start) && ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((end - int64_t(1)), end - (end - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(end - int64_t(1)), __v.begin()+end); })(s) == std::string(" ")) || (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((end - int64_t(1)), end - (end - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(end - int64_t(1)), __v.begin()+end); })(s) == std::string("\t"))))) {
        end = (end - int64_t(1));
    }
    return s.substr(start, end - start);
}

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((((sep.size() > int64_t(0)) && ((i + sep.size()) <= s.size())) && (s.substr(i, (i + sep.size()) - i) == sep))) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
            cur = std::string("");
            i = (i + sep.size());
        } else {
            cur = (cur + s.substr(i, (i + int64_t(1)) - i));
            i = (i + int64_t(1));
        }
    }
    parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    return parts;
}

std::vector<std::string> splitWS(std::string s) {
    std::vector<std::string> out = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + int64_t(1)) - i);
        if (((ch == std::string(" ")) || (ch == std::string("\t")))) {
            if ((cur.size() > int64_t(0))) {
                out = ([&]{ auto __tmp = out; __tmp.push_back(cur); return __tmp; }());
                cur = std::string("");
            }
        } else {
            cur = (cur + ch);
        }
        i = (i + int64_t(1));
    }
    if ((cur.size() > int64_t(0))) {
        out = ([&]{ auto __tmp = out; __tmp.push_back(cur); return __tmp; }());
    }
    return out;
}

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

int64_t parseIntStr(std::string str) {
    int64_t i = int64_t(0);
    bool neg = false;
    if (((str.size() > int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(str) == std::string("-")))) {
        neg = true;
        i = int64_t(1);
    }
    int64_t n = int64_t(0);
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", int64_t(0)}, {"1", int64_t(1)}, {"2", int64_t(2)}, {"3", int64_t(3)}, {"4", int64_t(4)}, {"5", int64_t(5)}, {"6", int64_t(6)}, {"7", int64_t(7)}, {"8", int64_t(8)}, {"9", int64_t(9)}};
    while ((i < str.size())) {
        n = ((n * int64_t(10)) + ([&](const auto& __m){ auto __it = __m.find(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(str)); return __it != __m.end() ? __it->second : 0; })(digits));
        i = (i + int64_t(1));
    }
    if (neg) {
        n = -n;
    }
    return n;
}

std::map<std::string, std::any> parseAsm(std::string _asm) {
    std::vector<std::string> lines = _split(_asm, std::string("\n"));
    std::vector<Instruction> instrs = {};
    std::map<std::string, int64_t> labels = std::map<std::string, int64_t>{};
    int64_t lineNum = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < lines.size())) {
        std::string line = lines[i];
        if ((_index_of(line, std::string(";")) != -int64_t(1))) {
            line = line.substr(int64_t(0), _index_of(line, std::string(";")) - int64_t(0));
        }
        line = trim(line);
        std::string label = std::string("");
        if ((_index_of(line, std::string(":")) != -int64_t(1))) {
            int64_t idx = _index_of(line, std::string(":"));
            label = trim(line.substr(int64_t(0), idx - int64_t(0)));
            line = trim(line.substr((idx + int64_t(1)), line.size() - (idx + int64_t(1))));
        }
        std::string opcode = std::string("");
        std::string arg = std::string("");
        if ((line.size() > int64_t(0))) {
            std::vector<std::string> parts = splitWS(line);
            if ((parts.size() > int64_t(0))) {
                opcode = parts[int64_t(0)];
            }
            if ((parts.size() > int64_t(1))) {
                arg = parts[int64_t(1)];
            } else {
                std::map<std::string, std::any> ops = std::map<std::string, std::any>{{"NOP", std::any(int64_t(0))}, {"LDA", std::any(int64_t(1))}, {"STA", std::any(int64_t(2))}, {"ADD", std::any(int64_t(3))}, {"SUB", std::any(int64_t(4))}, {"BRZ", std::any(int64_t(5))}, {"JMP", std::any(int64_t(6))}, {"STP", std::any(int64_t(7))}};
                if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(ops, opcode)) {
                    arg = opcode;
                    opcode = std::string("");
                }
            }
        }
        if ((label != std::string(""))) {
            labels[label] = lineNum;
        }
        instrs = ([&]{ auto __tmp = instrs; __tmp.push_back(Instruction{.Label = label, .Opcode = opcode, .Arg = arg}); return __tmp; }());
        lineNum = (lineNum + int64_t(1));
        i = (i + int64_t(1));
    }
    return std::map<std::string, std::any>{{"instructions", std::any(instrs)}, {"labels", std::any(labels)}};
}

std::vector<int64_t> compile(const std::map<std::string, std::any>& p) {
    std::vector<Instruction> instrs = std::any_cast<std::vector<Instruction>>(([&](const auto& __m){ auto __it = __m.find(std::string("instructions")); return __it != __m.end() ? __it->second : std::any{}; })(p));
    std::map<std::string, int64_t> labels = std::any_cast<std::map<std::string, int64_t>>(([&](const auto& __m){ auto __it = __m.find(std::string("labels")); return __it != __m.end() ? __it->second : std::any{}; })(p));
    std::vector<int64_t> bytecode = {};
    int64_t i = int64_t(0);
    std::map<std::string, int64_t> opcodes = std::map<std::string, int64_t>{{"NOP", int64_t(0)}, {"LDA", int64_t(1)}, {"STA", int64_t(2)}, {"ADD", int64_t(3)}, {"SUB", int64_t(4)}, {"BRZ", int64_t(5)}, {"JMP", int64_t(6)}, {"STP", int64_t(7)}};
    while ((i < instrs.size())) {
        Instruction ins = instrs[i];
        int64_t arg = int64_t(0);
        if ((ins.Arg != std::string(""))) {
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(labels, ins.Arg)) {
                arg = ([&](const auto& __m){ auto __it = __m.find(ins.Arg); return __it != __m.end() ? __it->second : 0; })(labels);
            } else {
                arg = _parse_int_str(ins.Arg, int64_t(10));
            }
        }
        int64_t code = int64_t(0);
        if ((ins.Opcode != std::string(""))) {
            code = ([&](const auto& __m){ auto __it = __m.find(ins.Opcode); return __it != __m.end() ? __it->second : 0; })(opcodes);
        }
        bytecode = ([&]{ auto __tmp = bytecode; __tmp.push_back(((code * int64_t(32)) + arg)); return __tmp; }());
        i = (i + int64_t(1));
    }
    while ((bytecode.size() < int64_t(32))) {
        bytecode = ([&]{ auto __tmp = bytecode; __tmp.push_back(int64_t(0)); return __tmp; }());
    }
    return bytecode;
}

int64_t floorMod(int64_t a, int64_t b) {
    int64_t r = (a % b);
    if ((r < int64_t(0))) {
        r = (r + b);
    }
    return r;
}

int64_t run(const std::vector<int64_t>& bytecode) {
    int64_t acc = int64_t(0);
    int64_t pc = int64_t(0);
    std::vector<int64_t> mem = {};
    int64_t i = int64_t(0);
    while ((i < bytecode.size())) {
        mem = ([&]{ auto __tmp = mem; __tmp.push_back(bytecode[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    while ((pc < int64_t(32))) {
        int64_t op = (mem[pc] / int64_t(32));
        int64_t arg = (mem[pc] % int64_t(32));
        pc = (pc + int64_t(1));
        if ((op == int64_t(0))) {
            continue;
        } else         if ((op == int64_t(1))) {
            acc = mem[arg];
        } else         if ((op == int64_t(2))) {
            mem[arg] = acc;
        } else         if ((op == int64_t(3))) {
            acc = floorMod((acc + mem[arg]), int64_t(256));
        } else         if ((op == int64_t(4))) {
            acc = floorMod((acc - mem[arg]), int64_t(256));
        } else         if ((op == int64_t(5))) {
            if ((acc == int64_t(0))) {
                pc = arg;
            }
        } else         if ((op == int64_t(6))) {
            pc = arg;
        } else         if ((op == int64_t(7))) {
            break;
        } else {
            break;
        }







    }
    return acc;
}

int64_t execute(std::string _asm) {
    std::map<std::string, std::any> parsed = parseAsm(_asm);
    std::vector<int64_t> bc = compile(parsed);
    return run(bc);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::string> examples = std::vector<std::string>{((((std::string("LDA   x\n") + std::string("ADD   y       ; accumulator = x + y\n")) + std::string("STP\n")) + std::string("x:            2\n")) + std::string("y:            2")), (((((((((((((std::string("loop:   LDA   prodt\n") + std::string("        ADD   x\n")) + std::string("        STA   prodt\n")) + std::string("        LDA   y\n")) + std::string("        SUB   one\n")) + std::string("        STA   y\n")) + std::string("        BRZ   done\n")) + std::string("        JMP   loop\n")) + std::string("done:   LDA   prodt   ; to display it\n")) + std::string("        STP\n")) + std::string("x:            8\n")) + std::string("y:            7\n")) + std::string("prodt:        0\n")) + std::string("one:          1")), (((((((((((((((((std::string("loop:   LDA   n\n") + std::string("        STA   temp\n")) + std::string("        ADD   m\n")) + std::string("        STA   n\n")) + std::string("        LDA   temp\n")) + std::string("        STA   m\n")) + std::string("        LDA   count\n")) + std::string("        SUB   one\n")) + std::string("        BRZ   done\n")) + std::string("        STA   count\n")) + std::string("        JMP   loop\n")) + std::string("done:   LDA   n       ; to display it\n")) + std::string("        STP\n")) + std::string("m:            1\n")) + std::string("n:            1\n")) + std::string("temp:         0\n")) + std::string("count:        8       ; valid range: 1-11\n")) + std::string("one:          1")), (((((((((((((((((((((((((((((((std::string("start:  LDA   load\n") + std::string("ADD   car     ; head of list\n")) + std::string("STA   ldcar\n")) + std::string("ADD   one\n")) + std::string("STA   ldcdr   ; next CONS cell\n")) + std::string("ldcar:  NOP\n")) + std::string("STA   value\n")) + std::string("ldcdr:  NOP\n")) + std::string("BRZ   done    ; 0 stands for NIL\n")) + std::string("STA   car\n")) + std::string("JMP   start\n")) + std::string("done:   LDA   value   ; CAR of last CONS\n")) + std::string("STP\n")) + std::string("load:   LDA   0\n")) + std::string("value:        0\n")) + std::string("car:          28\n")) + std::string("one:          1\n")) + std::string("                        ; order of CONS cells\n")) + std::string("                        ; in memory\n")) + std::string("                        ; does not matter\n")) + std::string("        6\n")) + std::string("        0       ; 0 stands for NIL\n")) + std::string("        2       ; (CADR ls)\n")) + std::string("        26      ; (CDDR ls) -- etc.\n")) + std::string("        5\n")) + std::string("        20\n")) + std::string("        3\n")) + std::string("        30\n")) + std::string("        1       ; value of (CAR ls)\n")) + std::string("        22      ; points to (CDR ls)\n")) + std::string("        4\n")) + std::string("        24")), ((((std::string("LDA  3\n") + std::string("SUB  4\n")) + std::string("STP  0\n")) + std::string("         0\n")) + std::string("         255")), ((((std::string("LDA  3\n") + std::string("SUB  4\n")) + std::string("STP  0\n")) + std::string("                0\n")) + std::string("                1")), ((((std::string("LDA  3\n") + std::string("ADD  4\n")) + std::string("STP  0\n")) + std::string("                1\n")) + std::string("                255"))};
        int64_t i = int64_t(0);
        while ((i < examples.size())) {
            int64_t res = execute(examples[i]);
            std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << res; return ss.str(); }());
            std::cout << std::endl;
            i = (i + int64_t(1));
        }
    }
    return 0;
}
