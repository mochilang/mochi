// Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:08:47 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> generatePrimes(int64_t n);
std::vector<int64_t> primeFactors(int64_t n, const std::vector<int64_t>& primes);
int64_t cat(int64_t p, const std::vector<int64_t>& primes);
std::string padLeft(int64_t n, int64_t width);
int main();

std::map<int64_t, int64_t> prevCats = {};

std::vector<int64_t> generatePrimes(int64_t n) {
    std::vector<int64_t> primes = std::vector<int64_t>{int64_t(2)};
    int64_t cand = int64_t(3);
    while ((primes.size() < n)) {
        bool isP = true;
        int64_t i = int64_t(0);
        while ((i < primes.size())) {
            int64_t p = primes[i];
            if (((p * p) > cand)) {
                break;
            }
            if (((cand % p) == int64_t(0))) {
                isP = false;
                break;
            }
            i = (i + int64_t(1));
        }
        if (isP) {
            primes = ([&]{ auto __tmp = primes; __tmp.push_back(cand); return __tmp; }());
        }
        cand = (cand + int64_t(2));
    }
    return primes;
}

std::vector<int64_t> primeFactors(int64_t n, const std::vector<int64_t>& primes) {
    std::vector<int64_t> factors = {};
    int64_t num = n;
    int64_t i = int64_t(0);
    while (((i < primes.size()) && ((primes[i] * primes[i]) <= num))) {
        int64_t p = primes[i];
        while (((num % p) == int64_t(0))) {
            factors = ([&]{ auto __tmp = factors; __tmp.push_back(p); return __tmp; }());
            num = (num / p);
        }
        i = (i + int64_t(1));
    }
    if ((num > int64_t(1))) {
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(num); return __tmp; }());
    }
    return factors;
}

int64_t cat(int64_t p, const std::vector<int64_t>& primes) {
    if ((prevCats.find(p) != prevCats.end())) {
        return ([&](const auto& __m){ auto __it = __m.find(p); return __it != __m.end() ? __it->second : 0; })(prevCats);
    }
    std::vector<int64_t> pf = primeFactors((p + int64_t(1)), primes);
    bool all23 = true;
    for (int64_t f : pf) {
        if (((f != int64_t(2)) && (f != int64_t(3)))) {
            all23 = false;
            break;
        }
    }
    if (all23) {
        prevCats[p] = int64_t(1);
        return int64_t(1);
    }
    if ((p > int64_t(2))) {
        std::vector<int64_t> unique = {};
        int64_t last = -int64_t(1);
        for (int64_t f : pf) {
            if ((f != last)) {
                unique = ([&]{ auto __tmp = unique; __tmp.push_back(f); return __tmp; }());
                last = f;
            }
        }
        pf = unique;
    }
    int64_t c = int64_t(2);
    while ((c <= int64_t(11))) {
        bool ok = true;
        for (int64_t f : pf) {
            if ((cat(f, primes) >= c)) {
                ok = false;
                break;
            }
        }
        if (ok) {
            prevCats[p] = c;
            return c;
        }
        c = (c + int64_t(1));
    }
    prevCats[p] = int64_t(12);
    return int64_t(12);
}

std::string padLeft(int64_t n, int64_t width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<int64_t> primes = generatePrimes(int64_t(1000));
        std::vector<std::vector<int64_t>> es = {};
        for (int _ = int64_t(0); _ < int64_t(12); _++ ) {
            es = ([&]{ auto __tmp = es; __tmp.push_back(std::vector<int64_t>{}); return __tmp; }());
        }
        std::cout << std::string("First 200 primes:\n");
        std::cout << std::endl;
        int64_t idx = int64_t(0);
        while ((idx < int64_t(200))) {
            int64_t p = primes[idx];
            int64_t c = cat(p, primes);
            es[(c - int64_t(1))] = ([&]{ auto __tmp = es[(c - int64_t(1))]; __tmp.push_back(p); return __tmp; }());
            idx = (idx + int64_t(1));
        }
        int64_t c = int64_t(1);
        while ((c <= int64_t(6))) {
            if ((es[(c - int64_t(1))].size() > int64_t(0))) {
                std::cout << ((std::string("Category ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << c; return ss.str(); }())) + std::string(":"));
                std::cout << std::endl;
                std::cout << ([&]{ std::ostringstream ss; { auto __tmp = es[(c - int64_t(1))]; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
                std::cout << std::endl;
                std::cout << std::string("");
                std::cout << std::endl;
            }
            c = (c + int64_t(1));
        }
        std::cout << std::string("First thousand primes:\n");
        std::cout << std::endl;
        while ((idx < int64_t(1000))) {
            int64_t p = primes[idx];
            int64_t cv = cat(p, primes);
            es[(cv - int64_t(1))] = ([&]{ auto __tmp = es[(cv - int64_t(1))]; __tmp.push_back(p); return __tmp; }());
            idx = (idx + int64_t(1));
        }
        c = int64_t(1);
        while ((c <= int64_t(12))) {
            std::vector<int64_t> e = es[(c - int64_t(1))];
            if ((e.size() > int64_t(0))) {
                std::string line = (((((((std::string("Category ") + padLeft(c, int64_t(2))) + std::string(": First = ")) + padLeft(e[int64_t(0)], int64_t(7))) + std::string("  Last = ")) + padLeft(e[static_cast<size_t>((e.size() - int64_t(1)))], int64_t(8))) + std::string("  Count = ")) + padLeft((int64_t)(e.size()), int64_t(6)));
                std::cout << line;
                std::cout << std::endl;
            }
            c = (c + int64_t(1));
        }
    }
    return 0;
}
