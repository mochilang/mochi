// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:36:22 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::map<std::string, int64_t> removeKey(const std::map<std::string, int64_t>& m, std::string k);
int main();

std::map<std::string, int64_t> removeKey(const std::map<std::string, int64_t>& m, std::string k) {
    std::map<std::string, int64_t> out = std::map<std::string, int64_t>{};
    for (const auto& __p : m) {
        auto key = __p.first;
        if ((key != k)) {
            out[key] = ([&](const auto& __m){ auto __it = __m.find(key); return __it != __m.end() ? __it->second : 0; })(m);
        }
    }
    return out;
}

int main() {
    std::map<std::string, int64_t> x = std::map<std::string, int64_t>{};
    x = {};
    x[std::string("foo")] = int64_t(3);
    int64_t y1 = ([&](const auto& __m){ auto __it = __m.find(std::string("bar")); return __it != __m.end() ? __it->second : 0; })(x);
    bool ok = ([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(x, std::string("bar"));
    std::cout << y1;
    std::cout << std::endl;
    std::cout << (ok ? "true" : "false");
    std::cout << std::endl;
    x = removeKey(x, std::string("foo"));
    x = std::map<std::string, int64_t>{{"foo", int64_t(2)}, {"bar", int64_t(42)}, {"baz", -int64_t(1)}};
    std::cout << ([&](const auto& __m){ auto __it = __m.find(std::string("foo")); return __it != __m.end() ? __it->second : 0; })(x);
    std::cout << " ";
    std::cout << ([&](const auto& __m){ auto __it = __m.find(std::string("bar")); return __it != __m.end() ? __it->second : 0; })(x);
    std::cout << " ";
    std::cout << ([&](const auto& __m){ auto __it = __m.find(std::string("baz")); return __it != __m.end() ? __it->second : 0; })(x);
    std::cout << std::endl;
    return 0;
}
