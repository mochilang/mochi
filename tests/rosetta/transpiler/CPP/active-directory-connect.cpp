// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:13:41 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; os << vec[i]; }
    os << "]";
    return os;
}



struct LDAPClient {
    std::string Base;
    std::string Host;
    int Port;
    bool UseSSL;
    std::string BindDN;
    std::string BindPassword;
    std::string UserFilter;
    std::string GroupFilter;
    std::vector<std::string> Attributes;
    auto operator<=>(const LDAPClient&) const = default;
};

std::ostream& operator<<(std::ostream& os, const LDAPClient& v) {
    os << '{' << "'Base': "<< "'" << v.Base << "'"
 << ", " << "'Host': "<< "'" << v.Host << "'"
 << ", " << "'Port': "<< v.Port
 << ", " << "'UseSSL': "<< v.UseSSL
 << ", " << "'BindDN': "<< "'" << v.BindDN << "'"
 << ", " << "'BindPassword': "<< "'" << v.BindPassword << "'"
 << ", " << "'UserFilter': "<< "'" << v.UserFilter << "'"
 << ", " << "'GroupFilter': "<< "'" << v.GroupFilter << "'"
 << ", " << "'Attributes': "<< "["; for(size_t i=0;i<v.Attributes.size();++i){ if(i>0) os << ", "; os << v.Attributes[i]; } os << "]"
 << '}';
    return os;
}

bool connect(LDAPClient client);
int main();

bool connect(LDAPClient client) {
    return ((client.Host != std::string("")) && (client.Port > 0));
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        LDAPClient client = LDAPClient{std::string("dc=example,dc=com"), std::string("ldap.example.com"), 389, false, std::string("uid=readonlyuser,ou=People,dc=example,dc=com"), std::string("readonlypassword"), std::string("(uid=%s)"), std::string("(memberUid=%s)"), std::vector<std::string>{std::string("givenName"), std::string("sn"), std::string("mail"), std::string("uid")}};
        if (connect(client)) {
            std::cout << (std::string("Connected to ") + client.Host);
            std::cout << std::endl;
        } else {
            std::cout << std::string("Failed to connect");
            std::cout << std::endl;
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
