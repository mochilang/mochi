// Generated by Mochi transpiler v0.10.40 on 2025-07-25 18:56:47 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

std::vector<std::vector<int>> newPile(int d);
std::vector<std::vector<int>> handlePile(std::vector<std::vector<int>> pile, int x, int y);
void drawPile(const std::vector<std::vector<int>>& pile, int d);
int main();

int dim = 16;

std::vector<std::vector<int>> newPile(int d) {
    std::vector<std::vector<int>> b = {};
    int y = 0;
    while ((y < d)) {
        std::vector<int> row = {};
        int x = 0;
        while ((x < d)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(0); return __tmp; }());
            x = (x + 1);
        }
        b = ([&]{ auto __tmp = b; __tmp.push_back(row); return __tmp; }());
        y = (y + 1);
    }
    return b;
}

std::vector<std::vector<int>> handlePile(std::vector<std::vector<int>> pile, int x, int y) {
    if ((pile[y][x] >= 4)) {
        pile[y][x] = (pile[y][x] - 4);
        if ((y > 0)) {
            pile[(y - 1)][x] = (pile[(y - 1)][x] + 1);
            if ((pile[(y - 1)][x] >= 4)) {
                pile = handlePile(pile, x, (y - 1));
            }
        }
        if ((x > 0)) {
            pile[y][(x - 1)] = (pile[y][(x - 1)] + 1);
            if ((pile[y][(x - 1)] >= 4)) {
                pile = handlePile(pile, (x - 1), y);
            }
        }
        if ((y < (dim - 1))) {
            pile[(y + 1)][x] = (pile[(y + 1)][x] + 1);
            if ((pile[(y + 1)][x] >= 4)) {
                pile = handlePile(pile, x, (y + 1));
            }
        }
        if ((x < (dim - 1))) {
            pile[y][(x + 1)] = (pile[y][(x + 1)] + 1);
            if ((pile[y][(x + 1)] >= 4)) {
                pile = handlePile(pile, (x + 1), y);
            }
        }
        pile = handlePile(pile, x, y);
    }
    return pile;
}

void drawPile(const std::vector<std::vector<int>>& pile, int d) {
    std::vector<std::string> chars = std::vector<std::string>{std::string(" "), std::string("░"), std::string("▓"), std::string("█")};
    int row = 0;
    while ((row < d)) {
        std::string line = std::string("");
        int col = 0;
        while ((col < d)) {
            int v = pile[row][col];
            if ((v > 3)) {
                v = 3;
            }
            line = (line + chars[v]);
            col = (col + 1);
        }
        std::cout << line;
        std::cout << std::endl;
        row = (row + 1);
    }
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<std::vector<int>> pile = newPile(16);
        int hdim = 7;
        pile[hdim][hdim] = 16;
        pile = handlePile(pile, hdim, hdim);
        drawPile(pile, 16);
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
