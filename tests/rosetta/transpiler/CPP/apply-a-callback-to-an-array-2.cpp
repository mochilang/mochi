// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:57:14 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

void each(const std::vector<int>& xs, auto f);
std::vector<int> Map(const std::vector<int>& xs, auto f);
int main();

void each(const std::vector<int>& xs, auto f) {
    for (int x : xs) {
        f(x);
    }
}

std::vector<int> Map(const std::vector<int>& xs, auto f) {
    std::vector<int> r = {};
    for (int x : xs) {
        r = ([&]{ auto __tmp = r; __tmp.push_back((int)f(x)); return __tmp; }());
    }
    return r;
}

int main() {
    std::vector<int> s = std::vector<int>{1, 2, 3, 4, 5};
    each(s, [&](int i) { return ([&]{
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << ((double)(i) * (double)(i)); return ss.str(); }());
    std::cout << std::endl;
    return 0;
}()); });
    std::cout << ([&]{ std::ostringstream ss; { auto __tmp = Map(s, [&](int i) { return ((double)(i) * (double)(i)); }); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
    std::cout << std::endl;
    return 0;
}
