// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:54:17 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t rnd();
std::vector<int64_t> deal(int64_t game);
void show(const std::vector<int64_t>& cards);
int main();

int64_t seed = int64_t(1);
std::string suits = std::string("CDHS");
std::string nums = std::string("A23456789TJQK");

int64_t rnd() {
    seed = (((seed * int64_t(214013)) + int64_t(2531011)) % int64_t(2147483648));
    return (seed / int64_t(65536));
}

std::vector<int64_t> deal(int64_t game) {
    seed = game;
    std::vector<int64_t> deck = {};
    int64_t i = int64_t(0);
    while ((i < int64_t(52))) {
        deck = ([&]{ auto __tmp = deck; __tmp.push_back((int64_t(51) - i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < int64_t(51))) {
        int64_t j = (int64_t(51) - (rnd() % (int64_t(52) - i)));
        int64_t tmp = deck[i];
        deck[i] = deck[j];
        deck[j] = tmp;
        i = (i + int64_t(1));
    }
    return deck;
}

void show(const std::vector<int64_t>& cards) {
    int64_t i = int64_t(0);
    while ((i < cards.size())) {
        int64_t c = cards[i];
        auto_write(stdout, ((std::string(" ") + nums.substr((c / int64_t(4)), ((c / int64_t(4)) + int64_t(1)) - (c / int64_t(4)))) + suits.substr((c % int64_t(4)), ((c % int64_t(4)) + int64_t(1)) - (c % int64_t(4)))));
        if (((((i + int64_t(1)) % int64_t(8)) == int64_t(0)) || ((i + int64_t(1)) == cards.size()))) {
            std::cout << std::string("");
            std::cout << std::endl;
        }
        i = (i + int64_t(1));
    }
}

int main() {
    std::cout << std::string("");
    std::cout << std::endl;
    std::cout << std::string("Game #1");
    std::cout << std::endl;
    show(deal(int64_t(1)));
    std::cout << std::string("");
    std::cout << std::endl;
    std::cout << std::string("Game #617");
    std::cout << std::endl;
    show(deal(int64_t(617)));
    return 0;
}
