// Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:12:39 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t fuscVal(int64_t n);
std::vector<int64_t> firstFusc(int64_t n);
std::string commatize(int64_t n);
std::string padLeft(std::string s, int64_t w);
int main();

int64_t fuscVal(int64_t n) {
    int64_t a = int64_t(1);
    int64_t b = int64_t(0);
    int64_t x = n;
    while ((x > int64_t(0))) {
        if (((x % int64_t(2)) == int64_t(0))) {
            x = (x / int64_t(2));
            a = (a + b);
        } else {
            x = ((x - int64_t(1)) / int64_t(2));
            b = (a + b);
        }
    }
    if ((n == int64_t(0))) {
        return int64_t(0);
    }
    return b;
}

std::vector<int64_t> firstFusc(int64_t n) {
    std::vector<int64_t> arr = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        arr = ([&]{ auto __tmp = arr; __tmp.push_back(fuscVal(i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return arr;
}

std::string commatize(int64_t n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    bool neg = false;
    if ((n < int64_t(0))) {
        neg = true;
        s = s.substr(int64_t(1), s.size() - int64_t(1));
    }
    int64_t i = (s.size() - int64_t(3));
    while ((i >= int64_t(1))) {
        s = ((s.substr(int64_t(0), i - int64_t(0)) + std::string(",")) + s.substr(i, s.size() - i));
        i = (i - int64_t(3));
    }
    if (neg) {
        return (std::string("-") + s);
    }
    return s;
}

std::string padLeft(std::string s, int64_t w) {
    std::string out = s;
    while ((out.size() < w)) {
        out = (std::string(" ") + out);
    }
    return out;
}

int main() {
    std::cout << std::string("The first 61 fusc numbers are:");
    std::cout << std::endl;
    std::cout << ([&]{ std::ostringstream ss; { auto __tmp = firstFusc(int64_t(61)); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
    std::cout << std::endl;
    std::cout << std::string("\nThe fusc numbers whose length > any previous fusc number length are:");
    std::cout << std::endl;
    std::vector<int64_t> idxs = std::vector<int64_t>{int64_t(0), int64_t(37), int64_t(1173), int64_t(35499), int64_t(699051), int64_t(19573419)};
    int64_t i = int64_t(0);
    while ((i < idxs.size())) {
        int64_t idx = idxs[i];
        int64_t val = fuscVal(idx);
        std::string numStr = padLeft(commatize(val), int64_t(7));
        std::string idxStr = padLeft(commatize(idx), int64_t(10));
        std::cout << (((numStr + std::string(" (index ")) + idxStr) + std::string(")"));
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    return 0;
}
