// Generated by Mochi transpiler v0.10.56 on 2025-08-04 10:49:08 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double pow10(int64_t n);
std::string formatFloat(double f, int64_t prec);
std::string padLeft(std::string s, int64_t w);
double averageSquareDiff(double f, const std::vector<double>& preds);
std::vector<double> diversityTheorem(double truth, const std::vector<double>& preds);
int main();

double pow10(int64_t n) {
    double r = 1.0;
    int64_t i = int64_t(0);
    while ((i < n)) {
        r = (r * 10.0);
        i = (i + int64_t(1));
    }
    return r;
}

std::string formatFloat(double f, int64_t prec) {
    double scale = pow10(prec);
    double scaled = ((f * scale) + 0.5);
    int64_t n = (int64_t)(scaled);
    std::string digits = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((static_cast<int64_t>(digits.size()) <= prec)) {
        digits = (std::string("0") + digits);
    }
    std::string intPart = digits.substr(int64_t(0), (static_cast<int64_t>(digits.size()) - prec) - int64_t(0));
    std::string fracPart = digits.substr((static_cast<int64_t>(digits.size()) - prec), static_cast<int64_t>(digits.size()) - (static_cast<int64_t>(digits.size()) - prec));
    return ((intPart + std::string(".")) + fracPart);
}

std::string padLeft(std::string s, int64_t w) {
    std::string res = std::string("");
    int64_t n = (w - static_cast<int64_t>(s.size()));
    while ((n > int64_t(0))) {
        res = (res + std::string(" "));
        n = (n - int64_t(1));
    }
    return (res + s);
}

double averageSquareDiff(double f, const std::vector<double>& preds) {
    double av = 0.0;
    int64_t i = int64_t(0);
    while ((i < static_cast<int64_t>(preds.size()))) {
        av = (av + ((preds[i] - f) * (preds[i] - f)));
        i = (i + int64_t(1));
    }
    av = ((double)(av) / ((double)(static_cast<int64_t>(preds.size()))));
    return av;
}

std::vector<double> diversityTheorem(double truth, const std::vector<double>& preds) {
    double av = 0.0;
    int64_t i = int64_t(0);
    while ((i < static_cast<int64_t>(preds.size()))) {
        av = (av + preds[i]);
        i = (i + int64_t(1));
    }
    av = ((double)(av) / ((double)(static_cast<int64_t>(preds.size()))));
    double avErr = averageSquareDiff(truth, preds);
    double crowdErr = ((truth - av) * (truth - av));
    double _div = averageSquareDiff(av, preds);
    return std::vector<double>{avErr, crowdErr, _div};
}

int main() {
    std::vector<std::vector<double>> predsArray = std::vector<std::vector<double>>{std::vector<double>{48.0, 47.0, 51.0}, std::vector<double>{48.0, 47.0, 51.0, 42.0}};
    double truth = 49.0;
    int64_t i = int64_t(0);
    while ((i < static_cast<int64_t>(predsArray.size()))) {
        std::vector<double> preds = predsArray[i];
        std::vector<double> res = diversityTheorem(truth, preds);
        std::cout << (std::string("Average-error : ") + padLeft(formatFloat(res[int64_t(0)], int64_t(3)), int64_t(6)));
        std::cout << std::endl;
        std::cout << (std::string("Crowd-error   : ") + padLeft(formatFloat(res[int64_t(1)], int64_t(3)), int64_t(6)));
        std::cout << std::endl;
        std::cout << (std::string("Diversity     : ") + padLeft(formatFloat(res[int64_t(2)], int64_t(3)), int64_t(6)));
        std::cout << std::endl;
        std::cout << std::string("");
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    return 0;
}
