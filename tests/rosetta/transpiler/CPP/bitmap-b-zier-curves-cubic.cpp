// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:15:04 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Pixel {
    int64_t r;
    int64_t g;
    int64_t b;
    auto operator<=>(const Pixel&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Pixel& v) {
    os << '{' << "'r': "<< v.r
 << ", " << "'g': "<< v.g
 << ", " << "'b': "<< v.b
 << '}';
    return os;
}

Pixel pixelFromRgb(int64_t rgb);
std::map<std::string, std::any> newBitmap(int64_t cols, int64_t rows);
void setPx(std::map<std::string, std::any> b, int64_t x, int64_t y, const Pixel& p);
void fill(std::map<std::string, std::any> b, const Pixel& p);
void fillRgb(const std::map<std::string, std::any>& b, int64_t rgb);
void line(const std::map<std::string, std::any>& b, int64_t x0, int64_t y0, int64_t x1, int64_t y1, const Pixel& p);
void bezier3(const std::map<std::string, std::any>& b, int64_t x1, int64_t y1, int64_t x2, int64_t y2, int64_t x3, int64_t y3, int64_t x4, int64_t y4, const Pixel& p);
int main();

int64_t b3Seg = int64_t(30);
std::map<std::string, std::any> b = newBitmap(int64_t(400), int64_t(300));

Pixel pixelFromRgb(int64_t rgb) {
    int64_t r = (int64_t)(((rgb / int64_t(65536)) % int64_t(256)));
    int64_t g = (int64_t)(((rgb / int64_t(256)) % int64_t(256)));
    int64_t b = (int64_t)((rgb % int64_t(256)));
    return Pixel{.r = r, .g = g, .b = b};
}

std::map<std::string, std::any> newBitmap(int64_t cols, int64_t rows) {
    std::vector<std::vector<Pixel>> d = {};
    int64_t y = int64_t(0);
    while ((y < rows)) {
        std::vector<Pixel> row = {};
        int64_t x = int64_t(0);
        while ((x < cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(Pixel{.r = int64_t(0), .g = int64_t(0), .b = int64_t(0)}); return __tmp; }());
            x = (x + int64_t(1));
        }
        d = ([&]{ auto __tmp = d; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return std::map<std::string, std::any>{{"cols", std::any(cols)}, {"rows", std::any(rows)}, {"data", std::any(d)}};
}

void setPx(std::map<std::string, std::any> b, int64_t x, int64_t y, const Pixel& p) {
    int64_t cols = std::any_cast<int64_t>(b.at(std::string("cols")));
    int64_t rows = std::any_cast<int64_t>(b.at(std::string("rows")));
    if (((((x >= int64_t(0)) && (x < cols)) && (y >= int64_t(0))) && (y < rows))) {
        std::any_cast<std::vector<std::vector<Pixel>>&>(b[std::string("data")])[y][x] = p;
    }
}

void fill(std::map<std::string, std::any> b, const Pixel& p) {
    int64_t cols = std::any_cast<int64_t>(b.at(std::string("cols")));
    int64_t rows = std::any_cast<int64_t>(b.at(std::string("rows")));
    int64_t y = int64_t(0);
    while ((y < rows)) {
        int64_t x = int64_t(0);
        while ((x < cols)) {
            std::any_cast<std::vector<std::vector<Pixel>>&>(b[std::string("data")])[y][x] = p;
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
}

void fillRgb(const std::map<std::string, std::any>& b, int64_t rgb) {
    fill(b, pixelFromRgb(rgb));
}

void line(const std::map<std::string, std::any>& b, int64_t x0, int64_t y0, int64_t x1, int64_t y1, const Pixel& p) {
    int64_t dx = (x1 - x0);
    if ((dx < int64_t(0))) {
        dx = -dx;
    }
    int64_t dy = (y1 - y0);
    if ((dy < int64_t(0))) {
        dy = -dy;
    }
    int64_t sx = -int64_t(1);
    if ((x0 < x1)) {
        sx = int64_t(1);
    }
    int64_t sy = -int64_t(1);
    if ((y0 < y1)) {
        sy = int64_t(1);
    }
    int64_t err = (dx - dy);
    while (true) {
        setPx(b, x0, y0, p);
        if (((x0 == x1) && (y0 == y1))) {
            break;
        }
        int64_t e2 = (int64_t(2) * err);
        if ((e2 > (int64_t(0) - dy))) {
            err = (err - dy);
            x0 = (x0 + sx);
        }
        if ((e2 < dx)) {
            err = (err + dx);
            y0 = (y0 + sy);
        }
    }
}

void bezier3(const std::map<std::string, std::any>& b, int64_t x1, int64_t y1, int64_t x2, int64_t y2, int64_t x3, int64_t y3, int64_t x4, int64_t y4, const Pixel& p) {
    std::vector<int64_t> px = {};
    std::vector<int64_t> py = {};
    int64_t i = int64_t(0);
    while ((i <= b3Seg)) {
        px = ([&]{ auto __tmp = px; __tmp.push_back(int64_t(0)); return __tmp; }());
        py = ([&]{ auto __tmp = py; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    double fx1 = (double)(x1);
    double fy1 = (double)(y1);
    double fx2 = (double)(x2);
    double fy2 = (double)(y2);
    double fx3 = (double)(x3);
    double fy3 = (double)(y3);
    double fx4 = (double)(x4);
    double fy4 = (double)(y4);
    i = int64_t(0);
    while ((i <= b3Seg)) {
        double d = ((double)((double)(i)) / ((double)(b3Seg)));
        double a = (1.0 - d);
        double bcoef = (a * a);
        double ccoef = (d * d);
        double a2 = (a * bcoef);
        double b2 = ((3.0 * bcoef) * d);
        double c2 = ((3.0 * a) * ccoef);
        double d2 = (ccoef * d);
        px[i] = (int64_t)(((((a2 * fx1) + (b2 * fx2)) + (c2 * fx3)) + (d2 * fx4)));
        py[i] = (int64_t)(((((a2 * fy1) + (b2 * fy2)) + (c2 * fy3)) + (d2 * fy4)));
        i = (i + int64_t(1));
    }
    int64_t x0 = px[int64_t(0)];
    int64_t y0 = py[int64_t(0)];
    i = int64_t(1);
    while ((i <= b3Seg)) {
        int64_t x = px[i];
        int64_t y = py[i];
        line(b, x0, y0, x, y, p);
        x0 = x;
        y0 = y;
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        fillRgb(b, int64_t(16773055));
        bezier3(b, int64_t(20), int64_t(200), int64_t(700), int64_t(50), -int64_t(300), int64_t(50), int64_t(380), int64_t(150), pixelFromRgb(int64_t(4165615)));
    }
    return 0;
}
