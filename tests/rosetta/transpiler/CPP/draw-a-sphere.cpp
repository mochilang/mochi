// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:16:57 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct V3;

std::ostream& operator<<(std::ostream&, const V3&);


struct V3 {
    double x;
    double y;
    double z;
    auto operator<=>(const V3&) const = default;
};

std::ostream& operator<<(std::ostream& os, const V3& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << ", " << "'z': "<< std::fixed << std::setprecision(1) << v.z
 << '}';
    return os;
}

double sqrtApprox(double x);
double powf(double base, int64_t _exp);
V3 normalize(const V3& v);
double dot(const V3& a, const V3& b);
void drawSphere(int64_t r, int64_t k, double ambient, const V3& light, std::string shades);
int main();

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double powf(double base, int64_t _exp) {
    double result = 1.0;
    int64_t i = int64_t(0);
    while ((i < _exp)) {
        result = (result * base);
        i = (i + int64_t(1));
    }
    return result;
}

V3 normalize(const V3& v) {
    double len = sqrtApprox((((v.x * v.x) + (v.y * v.y)) + (v.z * v.z)));
    return V3{.x = ((double)(v.x) / (len)), .y = ((double)(v.y) / (len)), .z = ((double)(v.z) / (len))};
}

double dot(const V3& a, const V3& b) {
    double d = (((a.x * b.x) + (a.y * b.y)) + (a.z * b.z));
    if ((d < 0.0)) {
        return -d;
    }
    return 0.0;
}

void drawSphere(int64_t r, int64_t k, double ambient, const V3& light, std::string shades) {
    int64_t i = -r;
    while ((i <= r)) {
        double x = ((double)(i) + 0.5);
        std::string line = std::string("");
        int64_t j = -(int64_t(2) * r);
        while ((j <= (int64_t(2) * r))) {
            double y = (((double)((double)(j)) / (2.0)) + 0.5);
            if ((((x * x) + (y * y)) <= ((double)(r) * (double)(r)))) {
                double zsq = ((((double)(r) * (double)(r)) - (x * x)) - (y * y));
                V3 vec = normalize(V3{.x = x, .y = y, .z = sqrtApprox(zsq)});
                double b = (powf(dot(light, vec), k) + ambient);
                int64_t intensity = (int64_t)(((1.0 - b) * ((double)(shades.size()) - 1.0)));
                if ((intensity < int64_t(0))) {
                    intensity = int64_t(0);
                }
                if ((intensity >= shades.size())) {
                    intensity = (shades.size() - int64_t(1));
                }
                line = (line + shades.substr(intensity, (intensity + int64_t(1)) - intensity));
            } else {
                line = (line + std::string(" "));
            }
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string shades = std::string(".:!*oe&#%@");
        V3 light = normalize(V3{.x = 30.0, .y = 30.0, .z = -50.0});
        drawSphere(int64_t(20), int64_t(4), 0.1, light, shades);
        drawSphere(int64_t(10), int64_t(2), 0.4, light, shades);
    }
    return 0;
}
