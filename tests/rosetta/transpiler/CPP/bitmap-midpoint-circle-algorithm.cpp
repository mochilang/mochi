// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:17:10 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::vector<std::string>> initGrid(int64_t size);
void set(std::vector<std::vector<std::string>> g, int64_t x, int64_t y);
std::vector<std::vector<std::string>> circle(int64_t r);
std::string trimRight(const std::vector<std::string>& row);
int main();

std::vector<std::vector<std::string>> g = circle(10);

std::vector<std::vector<std::string>> initGrid(int64_t size) {
    std::vector<std::vector<std::string>> g = {};
    int64_t y = 0;
    while ((y < size)) {
        std::vector<std::string> row = {};
        int64_t x = 0;
        while ((x < size)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(std::string(" ")); return __tmp; }());
            x = (x + 1);
        }
        g = ([&]{ auto __tmp = g; __tmp.push_back(row); return __tmp; }());
        y = (y + 1);
    }
    return g;
}

void set(std::vector<std::vector<std::string>> g, int64_t x, int64_t y) {
    if (((((x >= 0) && (x < g[0].size())) && (y >= 0)) && (y < g.size()))) {
        g[y][x] = std::string("#");
    }
}

std::vector<std::vector<std::string>> circle(int64_t r) {
    int64_t size = ((r * 2) + 1);
    std::vector<std::vector<std::string>> g = initGrid(size);
    int64_t x = r;
    int64_t y = 0;
    int64_t err = (1 - r);
    while ((y <= x)) {
        set(g, (r + x), (r + y));
        set(g, (r + y), (r + x));
        set(g, (r - x), (r + y));
        set(g, (r - y), (r + x));
        set(g, (r - x), (r - y));
        set(g, (r - y), (r - x));
        set(g, (r + x), (r - y));
        set(g, (r + y), (r - x));
        y = (y + 1);
        if ((err < 0)) {
            err = ((err + (2 * y)) + 1);
        } else {
            x = (x - 1);
            err = ((err + (2 * (y - x))) + 1);
        }
    }
    return g;
}

std::string trimRight(const std::vector<std::string>& row) {
    int end = row.size();
    while (((end > 0) && (row[(end - 1)] == std::string(" ")))) {
        end = (end - 1);
    }
    std::string s = std::string("");
    int64_t i = 0;
    while ((i < end)) {
        s = (s + row[i]);
        i = (i + 1);
    }
    return s;
}

int main() {
    for (std::vector<std::string> row : g) {
        std::cout << trimRight(row);
        std::cout << std::endl;
    }
    return 0;
}
