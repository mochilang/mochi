// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:53:56 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string padLeft(int64_t n, int64_t width);
int64_t modPow(int64_t base, int64_t exp, int64_t mod);
int main();

std::string padLeft(int64_t n, int64_t width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

int64_t modPow(int64_t base, int64_t exp, int64_t mod) {
    int64_t result = (int64_t(1) % mod);
    int64_t b = (base % mod);
    int64_t e = exp;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            result = ((result * b) % mod);
        }
        b = ((b * b) % mod);
        e = (e / int64_t(2));
    }
    return result;
}

int main() {
    int64_t k = int64_t(2);
    while ((k <= int64_t(10))) {
        std::cout << ((std::string("The first 50 Curzon numbers using a base of ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << k; return ss.str(); }())) + std::string(" :"));
        std::cout << std::endl;
        int64_t count = int64_t(0);
        int64_t n = int64_t(1);
        std::vector<int64_t> curzon50 = {};
        while (true) {
            int64_t d = ((k * n) + int64_t(1));
            if ((((modPow(k, n, d) + int64_t(1)) % d) == int64_t(0))) {
                if ((count < int64_t(50))) {
                    curzon50 = ([&]{ auto __tmp = curzon50; __tmp.push_back(n); return __tmp; }());
                }
                count = (count + int64_t(1));
                if ((count == int64_t(50))) {
                    int64_t idx = int64_t(0);
                    while ((idx < curzon50.size())) {
                        std::string line = std::string("");
                        int64_t j = int64_t(0);
                        while ((j < int64_t(10))) {
                            line = ((line + padLeft(curzon50[idx], int64_t(4))) + std::string(" "));
                            idx = (idx + int64_t(1));
                            j = (j + int64_t(1));
                        }
                        std::cout << line.substr(int64_t(0), (line.size() - int64_t(1)) - int64_t(0));
                        std::cout << std::endl;
                    }
                }
                if ((count == int64_t(1000))) {
                    std::cout << (std::string("\nOne thousandth: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }()));
                    std::cout << std::endl;
                    break;
                }
            }
            n = (n + int64_t(1));
        }
        std::cout << std::string("");
        std::cout << std::endl;
        k = (k + int64_t(2));
    }
    return 0;
}
