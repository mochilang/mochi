// Generated by Mochi transpiler v0.10.39 on 2025-07-24 18:52:03 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <any>
#include <vector>
#include <sstream>
#include <iomanip>
#include <optional>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}

std::vector<std::string> search_user(std::map<std::string, std::vector<std::string>>& directory, std::string username);
int main();

std::vector<std::string> search_user(std::map<std::string, std::vector<std::string>>& directory, std::string username) {
    return directory[username];
}

int main() {
    std::map<std::string, std::any> client = std::map<std::string, std::any>{{"Base", std::any(std::string("dc=example,dc=com"))}, {"Host", std::any(std::string("ldap.example.com"))}, {"Port", std::any(389)}, {"GroupFilter", std::any(std::string("(memberUid=%s)"))}};
    std::map<std::string, std::vector<std::string>> directory = std::map<std::string, std::vector<std::string>>{{"username", std::vector{std::string("admins"), std::string("users")}}, {"john", std::vector{std::string("users")}}};
    std::vector<std::string> groups = search_user(directory, std::string("username"));
    if ((groups.size() > 0)) {
        std::string out = std::string("Groups: [");
        int i = 0;
        while ((i < groups.size())) {
            out = (((out + std::string("\"")) + groups[i]) + std::string("\""));
            if ((i < (groups.size() - 1))) {
                out = (out + std::string(", "));
            }
            i = (i + 1);
        }
        out = (out + std::string("]"));
        std::cout << out;
        std::cout << std::endl;
    } else {
        std::cout << std::string("User not found");
        std::cout << std::endl;
    }
    return 0;
}
