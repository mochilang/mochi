// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:49 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

int pfacSum(int i);
std::string pad(int n, int width);
int main();

int pfacSum(int i) {
    int sum = 0;
    int p = 1;
    while ((p <= (i / 2))) {
        if (((i % p) == 0)) {
            sum = (sum + p);
        }
        p = (p + 1);
    }
    return sum;
}

std::string pad(int n, int width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<int> sums = {};
        int i = 0;
        while ((i < 20000)) {
            sums = ([&]{ auto __tmp = sums; __tmp.push_back(0); return __tmp; }());
            i = (i + 1);
        }
        i = 1;
        while ((i < 20000)) {
            sums[i] = pfacSum(i);
            i = (i + 1);
        }
        std::cout << std::string("The amicable pairs below 20,000 are:");
        std::cout << std::endl;
        int n = 2;
        while ((n < 19999)) {
            int m = sums[n];
            if ((((m > n) && (m < 20000)) && (n == sums[m]))) {
                std::cout << (((std::string("  ") + pad(n, 5)) + std::string(" and ")) + pad(m, 5));
                std::cout << std::endl;
            }
            n = (n + 1);
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
