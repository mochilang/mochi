// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:47 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

bool amb(const std::vector<std::vector<std::string>>& wordsets, std::vector<std::string> res, int idx);
int main();

bool amb(const std::vector<std::vector<std::string>>& wordsets, std::vector<std::string> res, int idx) {
    if ((idx == wordsets.size())) {
        return true;
    }
    std::string prev = std::string("");
    if ((idx > 0)) {
        prev = res[(idx - 1)];
    }
    int i = 0;
    while ((i < wordsets[idx].size())) {
        std::string w = wordsets[idx][i];
        if (((idx == 0) || (prev.substr((prev.size() - 1), prev.size() - (prev.size() - 1)) == w.substr(0, 1 - 0)))) {
            res[idx] = w;
            if (amb(wordsets, res, (idx + 1))) {
                return true;
            }
        }
        i = (i + 1);
    }
    return false;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<std::vector<std::string>> wordset = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("the"), std::string("that"), std::string("a")}, std::vector<std::string>{std::string("frog"), std::string("elephant"), std::string("thing")}, std::vector<std::string>{std::string("walked"), std::string("treaded"), std::string("grows")}, std::vector<std::string>{std::string("slowly"), std::string("quickly")}};
        std::vector<std::string> res = {};
        int i = 0;
        while ((i < wordset.size())) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(std::string("")); return __tmp; }());
            i = (i + 1);
        }
        if (amb(wordset, res, 0)) {
            std::string out = (std::string("[") + res[0]);
            int j = 1;
            while ((j < res.size())) {
                out = ((out + std::string(" ")) + res[j]);
                j = (j + 1);
            }
            out = (out + std::string("]"));
            std::cout << out;
            std::cout << std::endl;
        } else {
            std::cout << std::string("No amb found");
            std::cout << std::endl;
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
