// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:33:34 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <type_traits>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static bool any_to_bool(const std::any& v) {
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v);
    if(v.type() == typeid(int)) return std::any_cast<int>(v) != 0;
    if(v.type() == typeid(double)) return std::any_cast<double>(v) != 0.0;
    return v.has_value();
}
static size_t any_size(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v).size();
    if(v.type() == typeid(std::vector<int>)) return std::any_cast<std::vector<int>>(v).size();
    if(v.type() == typeid(std::vector<double>)) return std::any_cast<std::vector<double>>(v).size();
    if(v.type() == typeid(std::vector<std::string>)) return std::any_cast<std::vector<std::string>>(v).size();
    if(v.type() == typeid(std::vector<std::any>)) return std::any_cast<std::vector<std::any>>(v).size();
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::map<std::string, std::any> mean(const std::vector<double>& v);
int main();

std::map<std::string, std::any> mean(const std::vector<double>& v) {
    if ((v.size() == 0)) {
        return std::map<std::string, std::any>{{"ok", std::any(false)}};
    }
    double sum = 0.0;
    int i = 0;
    while ((i < v.size())) {
        sum = (sum + v[i]);
        i = (i + 1);
    }
    return std::map<std::string, std::any>{{"ok", std::any(true)}, {"mean", std::any(((double)(sum) / ((double)(v.size()))))}};
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<std::any> sets = std::vector<std::any>{std::any({}), std::any(std::vector<double>{3.0, 1.0, 4.0, 1.0, 5.0, 9.0}), std::any(std::vector<double>{1e+20, 3.0, 1.0, 4.0, 1.0, 5.0, 9.0, -1e+20}), std::any(std::vector<double>{10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.11}), std::any(std::vector<double>{10.0, 20.0, 30.0, 40.0, 50.0, -100.0, 4.7, -1100.0})};
        for (std::any v : sets) {
            std::cout << (std::string("Vector: ") + ([&]{ std::ostringstream ss; any_to_stream(ss, v);
 return ss.str(); }()));
            std::cout << std::endl;
            std::map<std::string, std::any> r = mean(std::any_cast<std::vector<double>>(v));
            if (any_to_bool(r[std::string("ok")])) {
                std::cout << (((std::string("Mean of ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << any_size(v); return ss.str(); }())) + std::string(" numbers is ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, r[std::string("mean")]);
 return ss.str(); }()));
                std::cout << std::endl;
            } else {
                std::cout << std::string("Mean undefined");
                std::cout << std::endl;
            }
            std::cout << std::string("");
            std::cout << std::endl;
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
