// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:59:09 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::map<std::string, std::any> mean(const std::vector<double>& v);
int main();

std::map<std::string, std::any> mean(const std::vector<double>& v) {
    if ((v.size() == int64_t(0))) {
        return std::map<std::string, std::any>{{"ok", std::any(false)}};
    }
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        sum = (sum + v[i]);
        i = (i + int64_t(1));
    }
    return std::map<std::string, std::any>{{"ok", std::any(true)}, {"mean", std::any(((double)(sum) / ((double)(v.size()))))}};
}

int main() {
    std::vector<std::vector<double>> sets = std::vector<std::vector<double>>{std::vector<double>{}, std::vector<double>{3.0, 1.0, 4.0, 1.0, 5.0, 9.0}, std::vector<double>{1e+20, 3.0, 1.0, 4.0, 1.0, 5.0, 9.0, -1e+20}, std::vector<double>{10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.11}, std::vector<double>{10.0, 20.0, 30.0, 40.0, 50.0, -100.0, 4.7, -1100.0}};
    for (std::vector<double> v : sets) {
        std::cout << (std::string("Vector: ") + ([&]{ std::ostringstream ss; { auto __tmp = v; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        std::map<std::string, std::any> r = mean(v);
        if (std::any_cast<bool>(([&](const auto& __m){ auto __it = __m.find(std::string("ok")); return __it != __m.end() ? std::any_cast<bool>(__it->second) : false; })(r))) {
            std::cout << (((std::string("Mean of ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << v.size(); return ss.str(); }())) + std::string(" numbers is ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, ([&](const auto& __m){ auto __it = __m.find(std::string("mean")); return __it != __m.end() ? __it->second : std::any{}; })(r));
 return ss.str(); }()));
            std::cout << std::endl;
        } else {
            std::cout << std::string("Mean undefined");
            std::cout << std::endl;
        }
        std::cout << std::string("");
        std::cout << std::endl;
    }
    return 0;
}
