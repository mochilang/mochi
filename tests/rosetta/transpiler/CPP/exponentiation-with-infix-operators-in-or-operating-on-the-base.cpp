// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:14:02 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double p(double x, double e);
std::string padInt(double f);
int main();

std::vector<std::string> ops = std::vector<std::string>{std::string("-x.p(e)"), std::string("-(x).p(e)"), std::string("(-x).p(e)"), std::string("-(x.p(e))")};

double p(double x, double e) {
    double r = 1.0;
    int64_t i = int64_t(0);
    while ((i < (int64_t)(e))) {
        r = (r * x);
        i = (i + int64_t(1));
    }
    return r;
}

std::string padInt(double f) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << (int64_t)(f); return ss.str(); }());
    if ((f >= int64_t(0))) {
        return (std::string(" ") + s);
    }
    return s;
}

int main() {
    for (double x : std::vector<double>{-5.0, 5.0}) {
        for (double e : std::vector<double>{2.0, 3.0}) {
            double a = -p(x, e);
            double b = -p(x, e);
            double c = p(-x, e);
            double d = -p(x, e);
            std::cout << ((((((((((((((((((((std::string("x = ") + ((x < int64_t(0)) ? std::string("") : std::string(" "))) + ([&]{ std::ostringstream ss; ss << std::boolalpha << (int64_t)(x); return ss.str(); }())) + std::string(" e = ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << (int64_t)(e); return ss.str(); }())) + std::string(" | ")) + ops[int64_t(0)]) + std::string(" = ")) + padInt(a)) + std::string(" | ")) + ops[int64_t(1)]) + std::string(" = ")) + padInt(b)) + std::string(" | ")) + ops[int64_t(2)]) + std::string(" = ")) + padInt(c)) + std::string(" | ")) + ops[int64_t(3)]) + std::string(" = ")) + padInt(d));
            std::cout << std::endl;
        }
    }
    return 0;
}
