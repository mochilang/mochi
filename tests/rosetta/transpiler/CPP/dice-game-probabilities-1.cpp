// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:49:34 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t powInt(int64_t base, int64_t exp);
int64_t minInt(int64_t x, int64_t y);
void throwDie(int64_t nSides, int64_t nDice, int64_t s, std::vector<int64_t> counts);
double beatingProbability(int64_t nSides1, int64_t nDice1, int64_t nSides2, int64_t nDice2);
int main();

int64_t powInt(int64_t base, int64_t exp) {
    int64_t r = int64_t(1);
    int64_t b = base;
    int64_t e = exp;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            r = (r * b);
        }
        b = (b * b);
        e = (e / (int64_t)(int64_t(2)));
    }
    return r;
}

int64_t minInt(int64_t x, int64_t y) {
    if ((x < y)) {
        return x;
    }
    return y;
}

void throwDie(int64_t nSides, int64_t nDice, int64_t s, std::vector<int64_t> counts) {
    if ((nDice == int64_t(0))) {
        counts[s] = (counts[s] + int64_t(1));
        return;
    }
    int64_t i = int64_t(1);
    while ((i <= nSides)) {
        throwDie(nSides, (nDice - int64_t(1)), (s + i), counts);
        i = (i + int64_t(1));
    }
}

double beatingProbability(int64_t nSides1, int64_t nDice1, int64_t nSides2, int64_t nDice2) {
    int64_t len1 = ((nSides1 + int64_t(1)) * nDice1);
    std::vector<int64_t> c1 = {};
    int64_t i = int64_t(0);
    while ((i < len1)) {
        c1 = ([&]{ auto __tmp = c1; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    throwDie(nSides1, nDice1, int64_t(0), c1);
    int64_t len2 = ((nSides2 + int64_t(1)) * nDice2);
    std::vector<int64_t> c2 = {};
    int64_t j = int64_t(0);
    while ((j < len2)) {
        c2 = ([&]{ auto __tmp = c2; __tmp.push_back(int64_t(0)); return __tmp; }());
        j = (j + int64_t(1));
    }
    throwDie(nSides2, nDice2, int64_t(0), c2);
    double p12 = ((double)(powInt(nSides1, nDice1)) * (double)(powInt(nSides2, nDice2)));
    double tot = 0.0;
    i = int64_t(0);
    while ((i < len1)) {
        j = int64_t(0);
        int64_t m = minInt(i, len2);
        while ((j < m)) {
            tot = (tot + ((double)((c1[i] * (double)(c2[j]))) / (p12)));
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return tot;
}

int main() {
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << beatingProbability(int64_t(4), int64_t(9), int64_t(6), int64_t(6)); return ss.str(); }());
    std::cout << std::endl;
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << beatingProbability(int64_t(10), int64_t(5), int64_t(7), int64_t(6)); return ss.str(); }());
    std::cout << std::endl;
    return 0;
}
