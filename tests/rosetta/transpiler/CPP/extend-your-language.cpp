// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:21:28 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct If2;

std::ostream& operator<<(std::ostream&, const If2&);


struct If2 {
    bool cond1;
    bool cond2;
    auto operator<=>(const If2&) const = default;
};

std::ostream& operator<<(std::ostream& os, const If2& v) {
    os << '{' << "'cond1': "<< v.cond1
 << ", " << "'cond2': "<< v.cond2
 << '}';
    return os;
}

If2 else1(const If2& i, std::function<std::any()> f);
If2 else2(const If2& i, std::function<std::any()> f);
If2 else0(const If2& i, std::function<std::any()> f);
If2 if2(bool cond1, bool cond2, std::function<std::any()> f);
int main();

int64_t a = int64_t(0);
int64_t b = int64_t(1);
If2 t = if2((a == int64_t(1)), (b == int64_t(3)), (std::function<std::any()>)([]() mutable {
    std::cout << std::string("a = 1 and b = 3");
    std::cout << std::endl;
    return std::any();
}));

If2 else1(const If2& i, std::function<std::any()> f) {
    if ((i.cond1 && (i.cond2 == false))) {
        f();
    }
    return i;
}

If2 else2(const If2& i, std::function<std::any()> f) {
    if ((i.cond2 && (i.cond1 == false))) {
        f();
    }
    return i;
}

If2 else0(const If2& i, std::function<std::any()> f) {
    if (((i.cond1 == false) && (i.cond2 == false))) {
        f();
    }
    return i;
}

If2 if2(bool cond1, bool cond2, std::function<std::any()> f) {
    if ((cond1 && cond2)) {
        f();
    }
    return If2{.cond1 = cond1, .cond2 = cond2};
}

int main() {
    t = else1(t, (std::function<std::any()>)([=]() mutable {
    std::cout << std::string("a = 1 and b <> 3");
    std::cout << std::endl;
    return std::any();
}));
    t = else2(t, (std::function<std::any()>)([=]() mutable {
    std::cout << std::string("a <> 1 and b = 3");
    std::cout << std::endl;
    return std::any();
}));
    else0(t, (std::function<std::any()>)([=]() mutable {
    std::cout << std::string("a <> 1 and b <> 3");
    std::cout << std::endl;
    return std::any();
}));
    a = int64_t(1);
    b = int64_t(0);
    t = if2((a == int64_t(1)), (b == int64_t(3)), (std::function<std::any()>)([=]() mutable {
    std::cout << std::string("a = 1 and b = 3");
    std::cout << std::endl;
    return std::any();
}));
    t = else0(t, (std::function<std::any()>)([=]() mutable {
    std::cout << std::string("a <> 1 and b <> 3");
    std::cout << std::endl;
    return std::any();
}));
    else1(t, (std::function<std::any()>)([=]() mutable {
    std::cout << std::string("a = 1 and b <> 3");
    std::cout << std::endl;
    return std::any();
}));
    return 0;
}
