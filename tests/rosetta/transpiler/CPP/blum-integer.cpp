// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:17:44 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool isPrime(int64_t n);
int64_t firstPrimeFactor(int64_t n);
int64_t indexOf(std::string s, std::string ch);
std::string padLeft(int64_t n, int64_t width);
std::string formatFloat(double f, int64_t prec);
int main();

bool isPrime(int64_t n) {
    if ((n < 2)) {
        return false;
    }
    if (((n % 2) == 0)) {
        return (n == 2);
    }
    if (((n % 3) == 0)) {
        return (n == 3);
    }
    int64_t d = 5;
    while (((d * d) <= n)) {
        if (((n % d) == 0)) {
            return false;
        }
        d = (d + 2);
        if (((n % d) == 0)) {
            return false;
        }
        d = (d + 4);
    }
    return true;
}

int64_t firstPrimeFactor(int64_t n) {
    if ((n == 1)) {
        return 1;
    }
    if (((n % 3) == 0)) {
        return 3;
    }
    if (((n % 5) == 0)) {
        return 5;
    }
    std::vector<int64_t> inc = std::vector<int64_t>{4, 2, 4, 2, 4, 6, 2, 6};
    int64_t k = 7;
    int64_t i = 0;
    while (((k * k) <= n)) {
        if (((n % k) == 0)) {
            return k;
        }
        k = (k + inc[i]);
        i = ((i + 1) % inc.size());
    }
    return n;
}

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = 0;
    while ((i < s.size())) {
        if ((s.substr(i, (i + 1) - i) == ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

std::string padLeft(int64_t n, int64_t width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

std::string formatFloat(double f, int64_t prec) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << f; return ss.str(); }());
    int64_t idx = _index_of(s, std::string("."));
    if ((idx < 0)) {
        return s;
    }
    int64_t need = ((idx + 1) + prec);
    if ((s.size() > need)) {
        return s.substr(0, need - 0);
    }
    return s;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::vector<int64_t> blum = {};
        std::vector<int64_t> counts = std::vector<int64_t>{0, 0, 0, 0};
        std::vector<int64_t> digits = std::vector<int64_t>{1, 3, 7, 9};
        int64_t i = 1;
        int64_t bc = 0;
        while (true) {
            int64_t p = firstPrimeFactor(i);
            if (((p % 4) == 3)) {
                int64_t q = (int64_t)((i / p));
                if ((((q != p) && ((q % 4) == 3)) && isPrime(q))) {
                    if ((bc < 50)) {
                        blum = ([&]{ auto __tmp = blum; __tmp.push_back(i); return __tmp; }());
                    }
                    int64_t d = (i % 10);
                    if ((d == 1)) {
                        counts[0] = (counts[0] + 1);
                    } else                     if ((d == 3)) {
                        counts[1] = (counts[1] + 1);
                    } else                     if ((d == 7)) {
                        counts[2] = (counts[2] + 1);
                    } else                     if ((d == 9)) {
                        counts[3] = (counts[3] + 1);
                    }



                    bc = (bc + 1);
                    if ((bc == 50)) {
                        std::cout << std::string("First 50 Blum integers:");
                        std::cout << std::endl;
                        int64_t idx = 0;
                        while ((idx < 50)) {
                            std::string line = std::string("");
                            int64_t j = 0;
                            while ((j < 10)) {
                                line = ((line + padLeft(blum[idx], 3)) + std::string(" "));
                                idx = (idx + 1);
                                j = (j + 1);
                            }
                            std::cout << line.substr(0, (line.size() - 1) - 0);
                            std::cout << std::endl;
                        }
                        break;
                    }
                }
            }
            if (((i % 5) == 3)) {
                i = (i + 4);
            } else {
                i = (i + 2);
            }
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
