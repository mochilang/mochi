// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:11:33 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> getBins(const std::vector<int64_t>& limits, const std::vector<int64_t>& data);
std::string padLeft(int64_t n, int64_t width);
void printBins(const std::vector<int64_t>& limits, const std::vector<int64_t>& bins);
int main();

std::vector<int64_t> getBins(const std::vector<int64_t>& limits, const std::vector<int64_t>& data) {
    int n = limits.size();
    std::vector<int64_t> bins = {};
    int64_t i = int64_t(0);
    while ((i < (n + int64_t(1)))) {
        bins = ([&]{ auto __tmp = bins; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < data.size())) {
        int64_t d = data[j];
        int64_t index = int64_t(0);
        while ((index < limits.size())) {
            if ((d < limits[index])) {
                break;
            }
            if ((d == limits[index])) {
                index = (index + int64_t(1));
                break;
            }
            index = (index + int64_t(1));
        }
        bins[index] = (bins[index] + int64_t(1));
        j = (j + int64_t(1));
    }
    return bins;
}

std::string padLeft(int64_t n, int64_t width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    int64_t pad = (width - s.size());
    std::string out = std::string("");
    int64_t i = int64_t(0);
    while ((i < pad)) {
        out = (out + std::string(" "));
        i = (i + int64_t(1));
    }
    return (out + s);
}

void printBins(const std::vector<int64_t>& limits, const std::vector<int64_t>& bins) {
    int n = limits.size();
    std::cout << (((std::string("           < ") + padLeft(limits[int64_t(0)], int64_t(3))) + std::string(" = ")) + padLeft(bins[int64_t(0)], int64_t(2)));
    std::cout << std::endl;
    int64_t i = int64_t(1);
    while ((i < n)) {
        std::cout << (((((std::string(">= ") + padLeft(limits[(i - int64_t(1))], int64_t(3))) + std::string(" and < ")) + padLeft(limits[i], int64_t(3))) + std::string(" = ")) + padLeft(bins[i], int64_t(2)));
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    std::cout << (((std::string(">= ") + padLeft(limits[(n - int64_t(1))], int64_t(3))) + std::string("           = ")) + padLeft(bins[n], int64_t(2)));
    std::cout << std::endl;
    std::cout << std::string("");
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<int64_t>> limitsList = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(23), int64_t(37), int64_t(43), int64_t(53), int64_t(67), int64_t(83)}, std::vector<int64_t>{int64_t(14), int64_t(18), int64_t(249), int64_t(312), int64_t(389), int64_t(392), int64_t(513), int64_t(591), int64_t(634), int64_t(720)}};
        std::vector<std::vector<int64_t>> dataList = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(95), int64_t(21), int64_t(94), int64_t(12), int64_t(99), int64_t(4), int64_t(70), int64_t(75), int64_t(83), int64_t(93), int64_t(52), int64_t(80), int64_t(57), int64_t(5), int64_t(53), int64_t(86), int64_t(65), int64_t(17), int64_t(92), int64_t(83), int64_t(71), int64_t(61), int64_t(54), int64_t(58), int64_t(47), int64_t(16), int64_t(8), int64_t(9), int64_t(32), int64_t(84), int64_t(7), int64_t(87), int64_t(46), int64_t(19), int64_t(30), int64_t(37), int64_t(96), int64_t(6), int64_t(98), int64_t(40), int64_t(79), int64_t(97), int64_t(45), int64_t(64), int64_t(60), int64_t(29), int64_t(49), int64_t(36), int64_t(43), int64_t(55)}, std::vector<int64_t>{int64_t(445), int64_t(814), int64_t(519), int64_t(697), int64_t(700), int64_t(130), int64_t(255), int64_t(889), int64_t(481), int64_t(122), int64_t(932), int64_t(77), int64_t(323), int64_t(525), int64_t(570), int64_t(219), int64_t(367), int64_t(523), int64_t(442), int64_t(933), int64_t(416), int64_t(589), int64_t(930), int64_t(373), int64_t(202), int64_t(253), int64_t(775), int64_t(47), int64_t(731), int64_t(685), int64_t(293), int64_t(126), int64_t(133), int64_t(450), int64_t(545), int64_t(100), int64_t(741), int64_t(583), int64_t(763), int64_t(306), int64_t(655), int64_t(267), int64_t(248), int64_t(477), int64_t(549), int64_t(238), int64_t(62), int64_t(678), int64_t(98), int64_t(534), int64_t(622), int64_t(907), int64_t(406), int64_t(714), int64_t(184), int64_t(391), int64_t(913), int64_t(42), int64_t(560), int64_t(247), int64_t(346), int64_t(860), int64_t(56), int64_t(138), int64_t(546), int64_t(38), int64_t(985), int64_t(948), int64_t(58), int64_t(213), int64_t(799), int64_t(319), int64_t(390), int64_t(634), int64_t(458), int64_t(945), int64_t(733), int64_t(507), int64_t(916), int64_t(123), int64_t(345), int64_t(110), int64_t(720), int64_t(917), int64_t(313), int64_t(845), int64_t(426), int64_t(9), int64_t(457), int64_t(628), int64_t(410), int64_t(723), int64_t(354), int64_t(895), int64_t(881), int64_t(953), int64_t(677), int64_t(137), int64_t(397), int64_t(97), int64_t(854), int64_t(740), int64_t(83), int64_t(216), int64_t(421), int64_t(94), int64_t(517), int64_t(479), int64_t(292), int64_t(963), int64_t(376), int64_t(981), int64_t(480), int64_t(39), int64_t(257), int64_t(272), int64_t(157), int64_t(5), int64_t(316), int64_t(395), int64_t(787), int64_t(942), int64_t(456), int64_t(242), int64_t(759), int64_t(898), int64_t(576), int64_t(67), int64_t(298), int64_t(425), int64_t(894), int64_t(435), int64_t(831), int64_t(241), int64_t(989), int64_t(614), int64_t(987), int64_t(770), int64_t(384), int64_t(692), int64_t(698), int64_t(765), int64_t(331), int64_t(487), int64_t(251), int64_t(600), int64_t(879), int64_t(342), int64_t(982), int64_t(527), int64_t(736), int64_t(795), int64_t(585), int64_t(40), int64_t(54), int64_t(901), int64_t(408), int64_t(359), int64_t(577), int64_t(237), int64_t(605), int64_t(847), int64_t(353), int64_t(968), int64_t(832), int64_t(205), int64_t(838), int64_t(427), int64_t(876), int64_t(959), int64_t(686), int64_t(646), int64_t(835), int64_t(127), int64_t(621), int64_t(892), int64_t(443), int64_t(198), int64_t(988), int64_t(791), int64_t(466), int64_t(23), int64_t(707), int64_t(467), int64_t(33), int64_t(670), int64_t(921), int64_t(180), int64_t(991), int64_t(396), int64_t(160), int64_t(436), int64_t(717), int64_t(918), int64_t(8), int64_t(374), int64_t(101), int64_t(684), int64_t(727), int64_t(749)}};
        int64_t i = int64_t(0);
        while ((i < limitsList.size())) {
            std::cout << ((std::string("Example ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }())) + std::string("\n"));
            std::cout << std::endl;
            std::vector<int64_t> bins = getBins(limitsList[i], dataList[i]);
            printBins(limitsList[i], bins);
            i = (i + int64_t(1));
        }
    }
    return 0;
}
