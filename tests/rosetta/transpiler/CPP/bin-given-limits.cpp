// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:26:07 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int> getBins(const std::vector<int>& limits, const std::vector<int>& data);
std::string padLeft(int n, int width);
void printBins(const std::vector<int>& limits, const std::vector<int>& bins);
int main();

std::vector<int> getBins(const std::vector<int>& limits, const std::vector<int>& data) {
    int n = limits.size();
    std::vector<int> bins = {};
    int i = 0;
    while ((i < (n + 1))) {
        bins = ([&]{ auto __tmp = bins; __tmp.push_back(0); return __tmp; }());
        i = (i + 1);
    }
    int j = 0;
    while ((j < data.size())) {
        int d = data[j];
        int index = 0;
        while ((index < limits.size())) {
            if ((d < limits[index])) {
                break;
            }
            if ((d == limits[index])) {
                index = (index + 1);
                break;
            }
            index = (index + 1);
        }
        bins[index] = (bins[index] + 1);
        j = (j + 1);
    }
    return bins;
}

std::string padLeft(int n, int width) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    int pad = (width - s.size());
    std::string out = std::string("");
    int i = 0;
    while ((i < pad)) {
        out = (out + std::string(" "));
        i = (i + 1);
    }
    return (out + s);
}

void printBins(const std::vector<int>& limits, const std::vector<int>& bins) {
    int n = limits.size();
    std::cout << (((std::string("           < ") + padLeft(limits[0], 3)) + std::string(" = ")) + padLeft(bins[0], 2));
    std::cout << std::endl;
    int i = 1;
    while ((i < n)) {
        std::cout << (((((std::string(">= ") + padLeft(limits[(i - 1)], 3)) + std::string(" and < ")) + padLeft(limits[i], 3)) + std::string(" = ")) + padLeft(bins[i], 2));
        std::cout << std::endl;
        i = (i + 1);
    }
    std::cout << (((std::string(">= ") + padLeft(limits[(n - 1)], 3)) + std::string("           = ")) + padLeft(bins[n], 2));
    std::cout << std::endl;
    std::cout << std::string("");
    std::cout << std::endl;
}

int main() {
    std::vector<std::vector<int>> limitsList = std::vector<std::vector<int>>{std::vector<int>{23, 37, 43, 53, 67, 83}, std::vector<int>{14, 18, 249, 312, 389, 392, 513, 591, 634, 720}};
    std::vector<std::vector<int>> dataList = std::vector<std::vector<int>>{std::vector<int>{95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55}, std::vector<int>{445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749}};
    int i = 0;
    while ((i < limitsList.size())) {
        std::cout << ((std::string("Example ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + 1); return ss.str(); }())) + std::string("\n"));
        std::cout << std::endl;
        std::vector<int> bins = getBins(limitsList[i], dataList[i]);
        printBins(limitsList[i], bins);
        i = (i + 1);
    }
    return 0;
}
