// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:49:05 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <type_traits>
#include <map>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _parse_int_str(const std::string& s, long base) {
    return std::stol(s, nullptr, base);
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> digits(int64_t n);
std::string commatize(int64_t n);
bool isPrime(int64_t n);
std::vector<std::string> split(std::string s, std::string sep);
int64_t parseIntStr(std::string str);
std::string reverseStr(std::string s);
std::string pad(std::string s, int64_t w);
std::vector<int64_t> findFirst(const std::vector<int64_t>& list);
int main();

std::vector<int64_t> digits(int64_t n) {
    if ((n == int64_t(0))) {
        return std::vector<int64_t>{int64_t(0)};
    }
    std::vector<int64_t> rev = {};
    int64_t x = n;
    while ((x > int64_t(0))) {
        rev = ([&]{ auto __tmp = rev; __tmp.push_back((x % int64_t(10))); return __tmp; }());
        x = (int64_t)((x / int64_t(10)));
    }
    std::vector<int64_t> out = {};
    int64_t i = (rev.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        out = ([&]{ auto __tmp = out; __tmp.push_back(rev[i]); return __tmp; }());
        i = (i - int64_t(1));
    }
    return out;
}

std::string commatize(int64_t n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    std::string out = std::string("");
    int i = s.size();
    while ((i > int64_t(3))) {
        out = ((std::string(",") + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((i - int64_t(3)), i - (i - int64_t(3))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(i - int64_t(3)), __v.begin()+i); })(s)) + out);
        i = (i - int64_t(3));
    }
    out = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), i - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+i); })(s) + out);
    return out;
}

bool isPrime(int64_t n) {
    if ((n < int64_t(2))) {
        return false;
    }
    if (((n % int64_t(2)) == int64_t(0))) {
        return (n == int64_t(2));
    }
    if (((n % int64_t(3)) == int64_t(0))) {
        return (n == int64_t(3));
    }
    int64_t d = int64_t(5);
    while (((d * d) <= n)) {
        if (((n % d) == int64_t(0))) {
            return false;
        }
        d = (d + int64_t(2));
        if (((n % d) == int64_t(0))) {
            return false;
        }
        d = (d + int64_t(4));
    }
    return true;
}

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((((i + sep.size()) <= s.size()) && (s.substr(i, (i + sep.size()) - i) == sep))) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
            cur = std::string("");
            i = (i + sep.size());
        } else {
            cur = (cur + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s));
            i = (i + int64_t(1));
        }
    }
    parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    return parts;
}

int64_t parseIntStr(std::string str) {
    int64_t i = int64_t(0);
    bool neg = false;
    if (((str.size() > int64_t(0)) && (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(str) == std::string("-")))) {
        neg = true;
        i = int64_t(1);
    }
    int64_t n = int64_t(0);
    std::map<std::string, int64_t> digits = std::map<std::string, int64_t>{{"0", int64_t(0)}, {"1", int64_t(1)}, {"2", int64_t(2)}, {"3", int64_t(3)}, {"4", int64_t(4)}, {"5", int64_t(5)}, {"6", int64_t(6)}, {"7", int64_t(7)}, {"8", int64_t(8)}, {"9", int64_t(9)}};
    while ((i < str.size())) {
        n = ((n * int64_t(10)) + ([&](auto& __m){ auto __it = __m.find(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(str)); return __it != __m.end() ? __it->second : 0; })(digits));
        i = (i + int64_t(1));
    }
    if (neg) {
        n = -n;
    }
    return n;
}

std::string reverseStr(std::string s) {
    std::string out = std::string("");
    int64_t i = (s.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        out = (out + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s));
        i = (i - int64_t(1));
    }
    return out;
}

std::string pad(std::string s, int64_t w) {
    std::string out = s;
    while ((out.size() < w)) {
        out = (std::string(" ") + out);
    }
    return out;
}

std::vector<int64_t> findFirst(const std::vector<int64_t>& list) {
    int64_t i = int64_t(0);
    while ((i < list.size())) {
        if ((list[i] > int64_t(10000000))) {
            return std::vector<int64_t>{list[i], i};
        }
        i = (i + int64_t(1));
    }
    return std::vector<int64_t>{-int64_t(1), -int64_t(1)};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<int64_t>> ranges = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(101), int64_t(909)}, std::vector<int64_t>{int64_t(11011), int64_t(99099)}, std::vector<int64_t>{int64_t(1110111), int64_t(9990999)}, std::vector<int64_t>{int64_t(111101111), int64_t(119101111)}};
        std::vector<int64_t> cyclops = {};
        for (std::vector<int64_t> r : ranges) {
            int64_t start = r[int64_t(0)];
            int64_t end = r[int64_t(1)];
            int numDigits = ([&]{ std::ostringstream ss; ss << std::boolalpha << start; return ss.str(); }()).size();
            int center = (numDigits / int64_t(2));
            int64_t i = start;
            while ((i <= end)) {
                std::vector<int64_t> ds = digits(i);
                if ((ds[static_cast<size_t>(center)] == int64_t(0))) {
                    int64_t count = int64_t(0);
                    for (int64_t d : ds) {
                        if ((d == int64_t(0))) {
                            count = (count + int64_t(1));
                        }
                    }
                    if ((count == int64_t(1))) {
                        cyclops = ([&]{ auto __tmp = cyclops; __tmp.push_back(i); return __tmp; }());
                    }
                }
                i = (i + int64_t(1));
            }
        }
        std::cout << std::string("The first 50 cyclops numbers are:");
        std::cout << std::endl;
        int64_t idx = int64_t(0);
        while ((idx < int64_t(50))) {
            std::cout << (pad(commatize(cyclops[idx]), int64_t(6)) + std::string(" "));
            std::cout << std::endl;
            idx = (idx + int64_t(1));
            if (((idx % int64_t(10)) == int64_t(0))) {
                std::cout << std::string("\n");
                std::cout << std::endl;
            }
        }
        std::vector<int64_t> fi = findFirst(cyclops);
        std::cout << (((std::string("\nFirst such number > 10 million is ") + commatize(fi[int64_t(0)])) + std::string(" at zero-based index ")) + commatize(fi[int64_t(1)]));
        std::cout << std::endl;
        std::vector<int64_t> primes = {};
        for (int64_t n : cyclops) {
            if (isPrime(n)) {
                primes = ([&]{ auto __tmp = primes; __tmp.push_back(n); return __tmp; }());
            }
        }
        std::cout << std::string("\n\nThe first 50 prime cyclops numbers are:");
        std::cout << std::endl;
        idx = int64_t(0);
        while ((idx < int64_t(50))) {
            std::cout << (pad(commatize(primes[idx]), int64_t(6)) + std::string(" "));
            std::cout << std::endl;
            idx = (idx + int64_t(1));
            if (((idx % int64_t(10)) == int64_t(0))) {
                std::cout << std::string("\n");
                std::cout << std::endl;
            }
        }
        std::vector<int64_t> fp = findFirst(primes);
        std::cout << (((std::string("\nFirst such number > 10 million is ") + commatize(fp[int64_t(0)])) + std::string(" at zero-based index ")) + commatize(fp[int64_t(1)]));
        std::cout << std::endl;
        std::vector<int64_t> bpcyclops = {};
        std::vector<int64_t> ppcyclops = {};
        for (int64_t p : primes) {
            std::string ps = ([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }());
            std::vector<std::string> splitp = _split(ps, std::string("0"));
            int64_t noMiddle = _parse_int_str((splitp[int64_t(0)] + splitp[int64_t(1)]), int64_t(10));
            if (isPrime(noMiddle)) {
                bpcyclops = ([&]{ auto __tmp = bpcyclops; __tmp.push_back(p); return __tmp; }());
            }
            if ((ps == reverseStr(ps))) {
                ppcyclops = ([&]{ auto __tmp = ppcyclops; __tmp.push_back(p); return __tmp; }());
            }
        }
        std::cout << std::string("\n\nThe first 50 blind prime cyclops numbers are:");
        std::cout << std::endl;
        idx = int64_t(0);
        while ((idx < int64_t(50))) {
            std::cout << (pad(commatize(bpcyclops[idx]), int64_t(6)) + std::string(" "));
            std::cout << std::endl;
            idx = (idx + int64_t(1));
            if (((idx % int64_t(10)) == int64_t(0))) {
                std::cout << std::string("\n");
                std::cout << std::endl;
            }
        }
        std::vector<int64_t> fb = findFirst(bpcyclops);
        std::cout << (((std::string("\nFirst such number > 10 million is ") + commatize(fb[int64_t(0)])) + std::string(" at zero-based index ")) + commatize(fb[int64_t(1)]));
        std::cout << std::endl;
        std::cout << std::string("\n\nThe first 50 palindromic prime cyclops numbers are:");
        std::cout << std::endl;
        idx = int64_t(0);
        while ((idx < int64_t(50))) {
            std::cout << (pad(commatize(ppcyclops[idx]), int64_t(9)) + std::string(" "));
            std::cout << std::endl;
            idx = (idx + int64_t(1));
            if (((idx % int64_t(8)) == int64_t(0))) {
                std::cout << std::string("\n");
                std::cout << std::endl;
            }
        }
        std::vector<int64_t> fpp = findFirst(ppcyclops);
        std::cout << (((std::string("\n\nFirst such number > 10 million is ") + commatize(fpp[int64_t(0)])) + std::string(" at zero-based index ")) + commatize(fpp[int64_t(1)]));
        std::cout << std::endl;
    }
    return 0;
}
