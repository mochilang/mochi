// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:21:22 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <sstream>
#include <map>
#include <vector>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}

std::vector<int> poolPut(const std::vector<int>& p, int x);
std::map<std::string, std::any> poolGet(std::vector<int> p);
std::vector<int> clearPool(const std::vector<int>& p);
int main();

std::vector<int> poolPut(const std::vector<int>& p, int x) {
    return ([&]{ auto __tmp = p; __tmp.push_back(x); return __tmp; }());
}

std::map<std::string, std::any> poolGet(std::vector<int> p) {
    if ((p.size() == 0)) {
        std::cout << std::string("pool empty");
        std::cout << std::endl;
        return std::map<std::string, std::any>{{"pool", std::any(p)}, {"val", std::any(0)}};
    }
    int idx = (p.size() - 1);
    int v = p[idx];
    p = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, idx - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+idx); })(p);
    return std::map<std::string, std::any>{{"pool", std::any(p)}, {"val", std::any(v)}};
}

std::vector<int> clearPool(const std::vector<int>& p) {
    return {};
}

int main() {
    std::vector<int> pool = {};
    int i = 1;
    int j = 2;
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + j); return ss.str(); }());
    std::cout << std::endl;
    pool = poolPut(pool, i);
    pool = poolPut(pool, j);
    i = 0;
    j = 0;
    std::map<std::string, std::any> res1 = poolGet(pool);
    pool = std::any_cast<std::vector<int>>(res1[std::string("pool")]);
    i = std::any_cast<int>(res1[std::string("val")]);
    std::map<std::string, std::any> res2 = poolGet(pool);
    pool = std::any_cast<std::vector<int>>(res2[std::string("pool")]);
    j = std::any_cast<int>(res2[std::string("val")]);
    i = 4;
    j = 5;
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + j); return ss.str(); }());
    std::cout << std::endl;
    pool = poolPut(pool, i);
    pool = poolPut(pool, j);
    i = 0;
    j = 0;
    pool = clearPool(pool);
    std::map<std::string, std::any> res3 = poolGet(pool);
    pool = std::any_cast<std::vector<int>>(res3[std::string("pool")]);
    i = std::any_cast<int>(res3[std::string("val")]);
    std::map<std::string, std::any> res4 = poolGet(pool);
    pool = std::any_cast<std::vector<int>>(res4[std::string("pool")]);
    j = std::any_cast<int>(res4[std::string("val")]);
    i = 7;
    j = 8;
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + j); return ss.str(); }());
    std::cout << std::endl;
    return 0;
}
