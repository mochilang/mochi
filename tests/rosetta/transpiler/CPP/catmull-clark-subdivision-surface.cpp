// Generated by Mochi transpiler v0.10.47 on 2025-07-28 12:11:12 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <any>
#include <map>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}


struct Point {
    double x;
    double y;
    double z;
    auto operator<=>(const Point&) const = default;
};

struct Edge {
    int64_t pn1;
    int64_t pn2;
    int64_t fn1;
    int64_t fn2;
    Point cp;
    auto operator<=>(const Edge&) const = default;
};

struct PointEx {
    Point p;
    int64_t n;
    auto operator<=>(const PointEx&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Point& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << ", " << "'z': "<< std::fixed << std::setprecision(1) << v.z
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Edge& v) {
    os << '{' << "'pn1': "<< v.pn1
 << ", " << "'pn2': "<< v.pn2
 << ", " << "'fn1': "<< v.fn1
 << ", " << "'fn2': "<< v.fn2
 << ", " << "'cp': "<< v.cp
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const PointEx& v) {
    os << '{' << "'p': "<< v.p
 << ", " << "'n': "<< v.n
 << '}';
    return os;
}

int64_t indexOf(std::string s, std::string ch);
std::string fmt4(double x);
std::string fmt2(int64_t n);
Point sumPoint(const Point& p1, const Point& p2);
Point mulPoint(const Point& p, double m);
Point divPoint(const Point& p, double d);
Point centerPoint(const Point& p1, const Point& p2);
std::vector<Point> getFacePoints(const std::vector<Point>& points, const std::vector<std::vector<int64_t>>& faces);
std::vector<std::vector<int64_t>> sortEdges(const std::vector<std::vector<int64_t>>& edges);
std::vector<Edge> getEdgesFaces(const std::vector<Point>& points, const std::vector<std::vector<int64_t>>& faces);
std::vector<Point> getEdgePoints(const std::vector<Point>& points, const std::vector<Edge>& edgesFaces, const std::vector<Point>& facePoints);
std::vector<Point> getAvgFacePoints(const std::vector<Point>& points, const std::vector<std::vector<int64_t>>& faces, const std::vector<Point>& facePoints);
std::vector<Point> getAvgMidEdges(const std::vector<Point>& points, const std::vector<Edge>& edgesFaces);
std::vector<int64_t> getPointsFaces(const std::vector<Point>& points, const std::vector<std::vector<int64_t>>& faces);
std::vector<Point> getNewPoints(const std::vector<Point>& points, const std::vector<int64_t>& pf, const std::vector<Point>& afp, const std::vector<Point>& ame);
std::string key(int64_t a, int64_t b);
std::vector<std::any> cmcSubdiv(const std::vector<Point>& points, const std::vector<std::vector<int64_t>>& faces);
std::string formatPoint(const Point& p);
std::string formatFace(const std::vector<int64_t>& f);
int main();

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

std::string fmt4(double x) {
    double y = (x * 10000.0);
    if ((y >= int64_t(0))) {
        y = (y + 0.5);
    } else {
        y = (y - 0.5);
    }
    y = ((double)((double)((int64_t)(y))) / (10000.0));
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }());
    int64_t dot = _index_of(s, std::string("."));
    if ((dot == (int64_t(0) - int64_t(1)))) {
        s = (s + std::string(".0000"));
    } else {
        int64_t decs = ((s.size() - dot) - int64_t(1));
        if ((decs > int64_t(4))) {
            s = s.substr(int64_t(0), (dot + int64_t(5)) - int64_t(0));
        } else {
            while ((decs < int64_t(4))) {
                s = (s + std::string("0"));
                decs = (decs + int64_t(1));
            }
        }
    }
    if ((x >= 0.0)) {
        s = (std::string(" ") + s);
    }
    return s;
}

std::string fmt2(int64_t n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    if ((s.size() < int64_t(2))) {
        return (std::string(" ") + s);
    }
    return s;
}

Point sumPoint(const Point& p1, const Point& p2) {
    return Point{.x = (p1.x + p2.x), .y = (p1.y + p2.y), .z = (p1.z + p2.z)};
}

Point mulPoint(const Point& p, double m) {
    return Point{.x = (p.x * m), .y = (p.y * m), .z = (p.z * m)};
}

Point divPoint(const Point& p, double d) {
    return mulPoint(p, ((double)(1.0) / (d)));
}

Point centerPoint(const Point& p1, const Point& p2) {
    return divPoint(sumPoint(p1, p2), 2.0);
}

std::vector<Point> getFacePoints(const std::vector<Point>& points, const std::vector<std::vector<int64_t>>& faces) {
    std::vector<Point> facePoints = {};
    int64_t i = int64_t(0);
    while ((i < faces.size())) {
        std::vector<int64_t> face = faces[i];
        Point fp = Point{.x = 0.0, .y = 0.0, .z = 0.0};
        for (int64_t idx : face) {
            fp = sumPoint(fp, points[idx]);
        }
        fp = divPoint(fp, (double)(face.size()));
        facePoints = ([&]{ auto __tmp = facePoints; __tmp.push_back(fp); return __tmp; }());
        i = (i + int64_t(1));
    }
    return facePoints;
}

std::vector<std::vector<int64_t>> sortEdges(const std::vector<std::vector<int64_t>>& edges) {
    std::vector<std::vector<int64_t>> res = {};
    std::vector<std::vector<int64_t>> tmp = edges;
    while ((tmp.size() > int64_t(0))) {
        std::vector<int64_t> min = tmp[int64_t(0)];
        int64_t idx = int64_t(0);
        int64_t j = int64_t(1);
        while ((j < tmp.size())) {
            std::vector<int64_t> e = tmp[j];
            if (((e[int64_t(0)] < min[int64_t(0)]) || ((e[int64_t(0)] == min[int64_t(0)]) && ((e[int64_t(1)] < min[int64_t(1)]) || ((e[int64_t(1)] == min[int64_t(1)]) && (e[int64_t(2)] < min[int64_t(2)])))))) {
                min = e;
                idx = j;
            }
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(min); return __tmp; }());
        std::vector<std::vector<int64_t>> out = {};
        int64_t k = int64_t(0);
        while ((k < tmp.size())) {
            if ((k != idx)) {
                out = ([&]{ auto __tmp = out; __tmp.push_back(tmp[k]); return __tmp; }());
            }
            k = (k + int64_t(1));
        }
        tmp = out;
    }
    return res;
}

std::vector<Edge> getEdgesFaces(const std::vector<Point>& points, const std::vector<std::vector<int64_t>>& faces) {
    std::vector<std::vector<int64_t>> edges = {};
    int64_t fnum = int64_t(0);
    while ((fnum < faces.size())) {
        std::vector<int64_t> face = faces[fnum];
        int numP = face.size();
        int64_t pi = int64_t(0);
        while ((pi < numP)) {
            int64_t pn1 = face[pi];
            int64_t pn2 = int64_t(0);
            if ((pi < (numP - int64_t(1)))) {
                pn2 = face[(pi + int64_t(1))];
            } else {
                pn2 = face[int64_t(0)];
            }
            if ((pn1 > pn2)) {
                int64_t tmpn = pn1;
                pn1 = pn2;
                pn2 = tmpn;
            }
            edges = ([&]{ auto __tmp = edges; __tmp.push_back(std::vector<int64_t>{pn1, pn2, fnum}); return __tmp; }());
            pi = (pi + int64_t(1));
        }
        fnum = (fnum + int64_t(1));
    }
    edges = sortEdges(edges);
    std::vector<std::vector<int64_t>> merged = {};
    int64_t idx = int64_t(0);
    while ((idx < edges.size())) {
        std::vector<int64_t> e1 = edges[idx];
        if ((idx < (edges.size() - int64_t(1)))) {
            std::vector<int64_t> e2 = edges[(idx + int64_t(1))];
            if (((e1[int64_t(0)] == e2[int64_t(0)]) && (e1[int64_t(1)] == e2[int64_t(1)]))) {
                merged = ([&]{ auto __tmp = merged; __tmp.push_back(std::vector<int64_t>{e1[int64_t(0)], e1[int64_t(1)], e1[int64_t(2)], e2[int64_t(2)]}); return __tmp; }());
                idx = (idx + int64_t(2));
                continue;
            }
        }
        merged = ([&]{ auto __tmp = merged; __tmp.push_back(std::vector<int64_t>{e1[int64_t(0)], e1[int64_t(1)], e1[int64_t(2)], -int64_t(1)}); return __tmp; }());
        idx = (idx + int64_t(1));
    }
    std::vector<Edge> edgesCenters = {};
    for (std::vector<int64_t> me : merged) {
        Point p1 = points[me[int64_t(0)]];
        Point p2 = points[me[int64_t(1)]];
        Point cp = centerPoint(p1, p2);
        edgesCenters = ([&]{ auto __tmp = edgesCenters; __tmp.push_back(Edge{.pn1 = me[int64_t(0)], .pn2 = me[int64_t(1)], .fn1 = me[int64_t(2)], .fn2 = me[int64_t(3)], .cp = cp}); return __tmp; }());
    }
    return edgesCenters;
}

std::vector<Point> getEdgePoints(const std::vector<Point>& points, const std::vector<Edge>& edgesFaces, const std::vector<Point>& facePoints) {
    std::vector<Point> edgePoints = {};
    int64_t i = int64_t(0);
    while ((i < edgesFaces.size())) {
        Edge edge = edgesFaces[i];
        Point cp = edge.cp;
        Point fp1 = facePoints[edge.fn1];
        Point fp2 = fp1;
        if ((edge.fn2 != (int64_t(0) - int64_t(1)))) {
            fp2 = facePoints[edge.fn2];
        }
        Point cfp = centerPoint(fp1, fp2);
        edgePoints = ([&]{ auto __tmp = edgePoints; __tmp.push_back(centerPoint(cp, cfp)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return edgePoints;
}

std::vector<Point> getAvgFacePoints(const std::vector<Point>& points, const std::vector<std::vector<int64_t>>& faces, const std::vector<Point>& facePoints) {
    int numP = points.size();
    std::vector<PointEx> temp = {};
    int64_t i = int64_t(0);
    while ((i < numP)) {
        temp = ([&]{ auto __tmp = temp; __tmp.push_back(PointEx{.p = Point{.x = 0.0, .y = 0.0, .z = 0.0}, .n = int64_t(0)}); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t fnum = int64_t(0);
    while ((fnum < faces.size())) {
        Point fp = facePoints[fnum];
        for (int64_t pn : faces[fnum]) {
            PointEx tp = temp[pn];
            temp[pn] = PointEx{.p = sumPoint(tp.p, fp), .n = (tp.n + int64_t(1))};
        }
        fnum = (fnum + int64_t(1));
    }
    std::vector<Point> avg = {};
    int64_t j = int64_t(0);
    while ((j < numP)) {
        PointEx tp = temp[j];
        avg = ([&]{ auto __tmp = avg; __tmp.push_back(divPoint(tp.p, (double)(tp.n))); return __tmp; }());
        j = (j + int64_t(1));
    }
    return avg;
}

std::vector<Point> getAvgMidEdges(const std::vector<Point>& points, const std::vector<Edge>& edgesFaces) {
    int numP = points.size();
    std::vector<PointEx> temp = {};
    int64_t i = int64_t(0);
    while ((i < numP)) {
        temp = ([&]{ auto __tmp = temp; __tmp.push_back(PointEx{.p = Point{.x = 0.0, .y = 0.0, .z = 0.0}, .n = int64_t(0)}); return __tmp; }());
        i = (i + int64_t(1));
    }
    for (Edge edge : edgesFaces) {
        Point cp = edge.cp;
        std::vector<int64_t> arr = std::vector<int64_t>{edge.pn1, edge.pn2};
        for (int64_t pn : arr) {
            PointEx tp = temp[pn];
            temp[pn] = PointEx{.p = sumPoint(tp.p, cp), .n = (tp.n + int64_t(1))};
        }
    }
    std::vector<Point> avg = {};
    int64_t j = int64_t(0);
    while ((j < numP)) {
        PointEx tp = temp[j];
        avg = ([&]{ auto __tmp = avg; __tmp.push_back(divPoint(tp.p, (double)(tp.n))); return __tmp; }());
        j = (j + int64_t(1));
    }
    return avg;
}

std::vector<int64_t> getPointsFaces(const std::vector<Point>& points, const std::vector<std::vector<int64_t>>& faces) {
    std::vector<int64_t> pf = {};
    int64_t i = int64_t(0);
    while ((i < points.size())) {
        pf = ([&]{ auto __tmp = pf; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t fnum = int64_t(0);
    while ((fnum < faces.size())) {
        for (int64_t pn : faces[fnum]) {
            pf[pn] = (pf[pn] + int64_t(1));
        }
        fnum = (fnum + int64_t(1));
    }
    return pf;
}

std::vector<Point> getNewPoints(const std::vector<Point>& points, const std::vector<int64_t>& pf, const std::vector<Point>& afp, const std::vector<Point>& ame) {
    std::vector<Point> newPts = {};
    int64_t i = int64_t(0);
    while ((i < points.size())) {
        double n = (double)(pf[i]);
        double m1 = ((double)((n - 3.0)) / (n));
        double m2 = ((double)(1.0) / (n));
        double m3 = ((double)(2.0) / (n));
        Point old = points[i];
        Point p1 = mulPoint(old, m1);
        Point p2 = mulPoint(afp[i], m2);
        Point p3 = mulPoint(ame[i], m3);
        newPts = ([&]{ auto __tmp = newPts; __tmp.push_back(sumPoint(sumPoint(p1, p2), p3)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return newPts;
}

std::string key(int64_t a, int64_t b) {
    if ((a < b)) {
        return ((([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }()));
    }
    return ((([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()));
}

std::vector<std::any> cmcSubdiv(const std::vector<Point>& points, const std::vector<std::vector<int64_t>>& faces) {
    std::vector<Point> facePoints = getFacePoints(points, faces);
    std::vector<Edge> edgesFaces = getEdgesFaces(points, faces);
    std::vector<Point> edgePoints = getEdgePoints(points, edgesFaces, facePoints);
    std::vector<Point> avgFacePoints = getAvgFacePoints(points, faces, facePoints);
    std::vector<Point> avgMidEdges = getAvgMidEdges(points, edgesFaces);
    std::vector<int64_t> pointsFaces = getPointsFaces(points, faces);
    std::vector<Point> newPoints = getNewPoints(points, pointsFaces, avgFacePoints, avgMidEdges);
    std::vector<int64_t> facePointNums = {};
    int nextPoint = newPoints.size();
    for (Point fp : facePoints) {
        newPoints = ([&]{ auto __tmp = newPoints; __tmp.push_back(fp); return __tmp; }());
        facePointNums = ([&]{ auto __tmp = facePointNums; __tmp.push_back((int64_t)nextPoint); return __tmp; }());
        nextPoint = (nextPoint + int64_t(1));
    }
    std::map<std::string, int64_t> edgePointNums = {};
    int64_t idx = int64_t(0);
    while ((idx < edgesFaces.size())) {
        Edge e = edgesFaces[idx];
        newPoints = ([&]{ auto __tmp = newPoints; __tmp.push_back(edgePoints[idx]); return __tmp; }());
        edgePointNums[key(e.pn1, e.pn2)] = nextPoint;
        nextPoint = (nextPoint + int64_t(1));
        idx = (idx + int64_t(1));
    }
    std::vector<std::vector<int64_t>> newFaces = {};
    int64_t fnum = int64_t(0);
    while ((fnum < faces.size())) {
        std::vector<int64_t> oldFace = faces[fnum];
        if ((oldFace.size() == int64_t(4))) {
            int64_t a = oldFace[int64_t(0)];
            int64_t b = oldFace[int64_t(1)];
            int64_t c = oldFace[int64_t(2)];
            int64_t d = oldFace[int64_t(3)];
            int64_t fpnum = facePointNums[fnum];
            int64_t ab = edgePointNums.at(key(a, b));
            int64_t da = edgePointNums.at(key(d, a));
            int64_t bc = edgePointNums.at(key(b, c));
            int64_t cd = edgePointNums.at(key(c, d));
            newFaces = ([&]{ auto __tmp = newFaces; __tmp.push_back(std::vector<int64_t>{a, ab, fpnum, da}); return __tmp; }());
            newFaces = ([&]{ auto __tmp = newFaces; __tmp.push_back(std::vector<int64_t>{b, bc, fpnum, ab}); return __tmp; }());
            newFaces = ([&]{ auto __tmp = newFaces; __tmp.push_back(std::vector<int64_t>{c, cd, fpnum, bc}); return __tmp; }());
            newFaces = ([&]{ auto __tmp = newFaces; __tmp.push_back(std::vector<int64_t>{d, da, fpnum, cd}); return __tmp; }());
        }
        fnum = (fnum + int64_t(1));
    }
    return std::vector<std::any>{std::any(newPoints), std::any(newFaces)};
}

std::string formatPoint(const Point& p) {
    return ((((((std::string("[") + fmt4(p.x)) + std::string(" ")) + fmt4(p.y)) + std::string(" ")) + fmt4(p.z)) + std::string("]"));
}

std::string formatFace(const std::vector<int64_t>& f) {
    if ((f.size() == int64_t(0))) {
        return std::string("[]");
    }
    std::string s = (std::string("[") + fmt2(f[int64_t(0)]));
    int64_t i = int64_t(1);
    while ((i < f.size())) {
        s = ((s + std::string(" ")) + fmt2(f[i]));
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            long memStart;
            __BenchGuard() : start(_bench_now()), memStart(_mem()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem_end = _mem();
                    auto __bench_dur = __bench_end - start;
                    auto __bench_mem = __bench_mem_end;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<Point> inputPoints = std::vector<Point>{Point{.x = -1.0, .y = 1.0, .z = 1.0}, Point{.x = -1.0, .y = -1.0, .z = 1.0}, Point{.x = 1.0, .y = -1.0, .z = 1.0}, Point{.x = 1.0, .y = 1.0, .z = 1.0}, Point{.x = 1.0, .y = -1.0, .z = -1.0}, Point{.x = 1.0, .y = 1.0, .z = -1.0}, Point{.x = -1.0, .y = -1.0, .z = -1.0}, Point{.x = -1.0, .y = 1.0, .z = -1.0}};
        std::vector<std::vector<int64_t>> inputFaces = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(3), int64_t(2), int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(5), int64_t(4), int64_t(6), int64_t(7)}, std::vector<int64_t>{int64_t(7), int64_t(0), int64_t(3), int64_t(5)}, std::vector<int64_t>{int64_t(7), int64_t(6), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(6), int64_t(1), int64_t(2), int64_t(4)}};
        std::vector<Point> outputPoints = inputPoints;
        std::vector<std::vector<int64_t>> outputFaces = inputFaces;
        int64_t i = int64_t(0);
        while ((i < int64_t(1))) {
            std::vector<std::any> res = cmcSubdiv(outputPoints, outputFaces);
            outputPoints = std::any_cast<std::vector<Point>>(res[int64_t(0)]);
            outputFaces = std::any_cast<std::vector<std::vector<int64_t>>>(res[int64_t(1)]);
            i = (i + int64_t(1));
        }
        for (Point p : outputPoints) {
            std::cout << formatPoint(p);
            std::cout << std::endl;
        }
        std::cout << std::string("");
        std::cout << std::endl;
        for (std::vector<int64_t> f : outputFaces) {
            std::cout << formatFace(f);
            std::cout << std::endl;
        }
    }
    return 0;
}
