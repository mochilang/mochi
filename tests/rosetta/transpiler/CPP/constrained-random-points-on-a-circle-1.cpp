// Generated by Mochi transpiler v0.10.55 on 2025-08-03 15:02:56 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <boost/multiprecision/cpp_int.hpp>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int main();

int64_t nPts = int64_t(100);
int64_t rMin = int64_t(10);
int64_t rMax = int64_t(15);
int64_t span = ((rMax + int64_t(1)) + rMax);
std::vector<std::vector<std::string>> rows = {};
int64_t r = int64_t(0);
int64_t u = int64_t(0);
std::map<std::string, bool> seen = {};
int64_t min2 = (rMin * rMin);
int64_t max2 = (rMax * rMax);
int64_t n = int64_t(0);
int64_t i = int64_t(0);

int main() {
    while ((r < span)) {
        std::vector<std::string> row = {};
        int64_t c = int64_t(0);
        while ((c < (span * int64_t(2)))) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(std::string(" ")); return __tmp; }());
            c = (c + int64_t(1));
        }
        rows = ([&]{ auto __tmp = rows; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    while ((n < nPts)) {
        boost::multiprecision::cpp_int x = ((_now() % span) - rMax);
        boost::multiprecision::cpp_int y = ((_now() % span) - rMax);
        boost::multiprecision::cpp_int rs = ((x * x) + (y * y));
        if (((rs < min2) || (rs > max2))) {
            continue;
        }
        n = (n + int64_t(1));
        boost::multiprecision::cpp_int row = (y + rMax);
        auto col = ((x + rMax) * int64_t(2));
        rows[static_cast<size_t>(row)][static_cast<size_t>(col)] = std::string("*");
        std::string key = ((([&]{ std::ostringstream ss; ss << std::boolalpha << row; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; any_to_stream(ss, col);
 return ss.str(); }()));
        if (!([&](auto& __m){ auto __it = __m.find(key); return __it != __m.end() ? __it->second : false; })(seen)) {
            seen[key] = true;
            u = (u + int64_t(1));
        }
    }
    while ((i < span)) {
        std::string line = std::string("");
        int64_t j = int64_t(0);
        while ((j < (span * int64_t(2)))) {
            line = (line + rows[i][j]);
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    std::cout << (([&]{ std::ostringstream ss; ss << std::boolalpha << u; return ss.str(); }()) + std::string(" unique points"));
    std::cout << std::endl;
    return 0;
}
