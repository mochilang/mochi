// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:15:34 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t digitSumMod(int64_t n, int64_t base);
std::vector<int64_t> fairshareList(int64_t n, int64_t base);
std::vector<int64_t> sortInts(const std::vector<int64_t>& xs);
std::string turns(int64_t n, int64_t base);
int main();

int64_t digitSumMod(int64_t n, int64_t base) {
    int64_t sum = int64_t(0);
    int64_t j = n;
    while ((j > int64_t(0))) {
        sum = (sum + (j % base));
        j = (j / base);
    }
    return (sum % base);
}

std::vector<int64_t> fairshareList(int64_t n, int64_t base) {
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(digitSumMod(i, base)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<int64_t> sortInts(const std::vector<int64_t>& xs) {
    std::vector<int64_t> arr = xs;
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        int64_t j = int64_t(0);
        while ((j < (arr.size() - int64_t(1)))) {
            if ((arr[j] > arr[(j + int64_t(1))])) {
                int64_t t = arr[j];
                arr[j] = arr[(j + int64_t(1))];
                arr[(j + int64_t(1))] = t;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return arr;
}

std::string turns(int64_t n, int64_t base) {
    std::vector<int64_t> counts = {};
    int64_t i = int64_t(0);
    while ((i < base)) {
        counts = ([&]{ auto __tmp = counts; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < n)) {
        int64_t v = digitSumMod(i, base);
        counts[v] = (counts[v] + int64_t(1));
        i = (i + int64_t(1));
    }
    std::map<int64_t, int64_t> freq = std::map<int64_t, int64_t>{};
    std::vector<int64_t> fkeys = {};
    i = int64_t(0);
    while ((i < base)) {
        int64_t c = counts[i];
        if ((c > int64_t(0))) {
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(freq, c)) {
                freq[c] = (([&](const auto& __m){ auto __it = __m.find(c); return __it != __m.end() ? __it->second : 0; })(freq) + int64_t(1));
            } else {
                freq[c] = int64_t(1);
                fkeys = ([&]{ auto __tmp = fkeys; __tmp.push_back(c); return __tmp; }());
            }
        }
        i = (i + int64_t(1));
    }
    int64_t total = int64_t(0);
    i = int64_t(0);
    while ((i < fkeys.size())) {
        total = (total + ([&](const auto& __m){ auto __it = __m.find(fkeys[i]); return __it != __m.end() ? __it->second : 0; })(freq));
        i = (i + int64_t(1));
    }
    if ((total != base)) {
        return ((std::string("only ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << total; return ss.str(); }())) + std::string(" have a turn"));
    }
    fkeys = sortInts(fkeys);
    std::string res = std::string("");
    i = int64_t(0);
    while ((i < fkeys.size())) {
        if ((i > int64_t(0))) {
            res = (res + std::string(" or "));
        }
        res = (res + ([&]{ std::ostringstream ss; ss << std::boolalpha << fkeys[i]; return ss.str(); }()));
        i = (i + int64_t(1));
    }
    return res;
}

int main() {
    std::vector<int64_t> bases1 = std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(5), int64_t(11)};
    int64_t i = int64_t(0);
    while ((i < bases1.size())) {
        int64_t b = bases1[i];
        std::cout << ((([&]{ std::string __s = ([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }()); while(__s.size() < int64_t(2)) __s = std::string(" ") + __s; return __s; }()) + std::string(" : ")) + ([&]{ std::ostringstream ss; { auto __tmp = fairshareList(int64_t(25), b); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    std::cout << std::string("");
    std::cout << std::endl;
    std::cout << std::string("How many times does each get a turn in 50000 iterations?");
    std::cout << std::endl;
    std::vector<int64_t> bases2 = std::vector<int64_t>{int64_t(191), int64_t(1377), int64_t(49999), int64_t(50000), int64_t(50001)};
    i = int64_t(0);
    while ((i < bases2.size())) {
        int64_t b = bases2[i];
        std::string t = turns(int64_t(50000), b);
        std::cout << (((std::string("  With ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }())) + std::string(" people: ")) + t);
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    return 0;
}
