// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:17:37 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Point;

std::ostream& operator<<(std::ostream&, const Point&);


struct Point {
    int64_t x;
    int64_t y;
    auto operator<=>(const Point&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Point& v) {
    os << '{' << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << '}';
    return os;
}

bool ccw(const Point& a, const Point& b, const Point& c);
std::vector<Point> sortPoints(const std::vector<Point>& ps);
std::vector<Point> convexHull(std::vector<Point> ps);
std::string pointStr(const Point& p);
std::string hullStr(const std::vector<Point>& h);
int main();

std::vector<Point> pts = std::vector<Point>{Point{.x = int64_t(16), .y = int64_t(3)}, Point{.x = int64_t(12), .y = int64_t(17)}, Point{.x = int64_t(0), .y = int64_t(6)}, Point{.x = -int64_t(4), .y = -int64_t(6)}, Point{.x = int64_t(16), .y = int64_t(6)}, Point{.x = int64_t(16), .y = -int64_t(7)}, Point{.x = int64_t(16), .y = -int64_t(3)}, Point{.x = int64_t(17), .y = -int64_t(4)}, Point{.x = int64_t(5), .y = int64_t(19)}, Point{.x = int64_t(19), .y = -int64_t(8)}, Point{.x = int64_t(3), .y = int64_t(16)}, Point{.x = int64_t(12), .y = int64_t(13)}, Point{.x = int64_t(3), .y = -int64_t(4)}, Point{.x = int64_t(17), .y = int64_t(5)}, Point{.x = -int64_t(3), .y = int64_t(15)}, Point{.x = -int64_t(3), .y = -int64_t(9)}, Point{.x = int64_t(0), .y = int64_t(11)}, Point{.x = -int64_t(9), .y = -int64_t(3)}, Point{.x = -int64_t(4), .y = -int64_t(2)}, Point{.x = int64_t(12), .y = int64_t(10)}};
std::vector<Point> hull = convexHull(pts);

bool ccw(const Point& a, const Point& b, const Point& c) {
    int64_t lhs = ((b.x - a.x) * (c.y - a.y));
    int64_t rhs = ((b.y - a.y) * (c.x - a.x));
    return (lhs > rhs);
}

std::vector<Point> sortPoints(const std::vector<Point>& ps) {
    std::vector<Point> arr = ps;
    int n = arr.size();
    int64_t i = int64_t(0);
    while ((i < n)) {
        int64_t j = int64_t(0);
        while ((j < (n - int64_t(1)))) {
            Point p = arr[j];
            Point q = arr[(j + int64_t(1))];
            if (((p.x > q.x) || ((p.x == q.x) && (p.y > q.y)))) {
                arr[j] = q;
                arr[(j + int64_t(1))] = p;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return arr;
}

std::vector<Point> convexHull(std::vector<Point> ps) {
    ps = sortPoints(ps);
    std::vector<Point> h = {};
    for (Point pt : ps) {
        while (((h.size() >= int64_t(2)) && (ccw(h[static_cast<size_t>((h.size() - int64_t(2)))], h[static_cast<size_t>((h.size() - int64_t(1)))], pt) == false))) {
            h = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (h.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(h.size() - int64_t(1))); })(h);
        }
        h = ([&]{ auto __tmp = h; __tmp.push_back(pt); return __tmp; }());
    }
    int64_t i = (ps.size() - int64_t(2));
    int64_t t = (h.size() + int64_t(1));
    while ((i >= int64_t(0))) {
        Point pt = ps[i];
        while (((h.size() >= t) && (ccw(h[static_cast<size_t>((h.size() - int64_t(2)))], h[static_cast<size_t>((h.size() - int64_t(1)))], pt) == false))) {
            h = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (h.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(h.size() - int64_t(1))); })(h);
        }
        h = ([&]{ auto __tmp = h; __tmp.push_back(pt); return __tmp; }());
        i = (i - int64_t(1));
    }
    return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (h.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(h.size() - int64_t(1))); })(h);
}

std::string pointStr(const Point& p) {
    return ((((std::string("(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << p.x; return ss.str(); }())) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p.y; return ss.str(); }())) + std::string(")"));
}

std::string hullStr(const std::vector<Point>& h) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < h.size())) {
        s = (s + pointStr(h[i]));
        if ((i < (h.size() - int64_t(1)))) {
            s = (s + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    std::cout << (std::string("Convex Hull: ") + hullStr(hull));
    std::cout << std::endl;
    return 0;
}
