// Generated by Mochi transpiler v0.10.39 on 2025-07-24 15:18:10 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <optional>



std::vector<std::string> fields(std::string s);
std::string padRight(std::string s, int width);
std::string join(std::vector<std::string> xs, std::string sep);
std::vector<std::string> validate(std::vector<std::string> commands, std::vector<std::string> words, std::vector<int> mins);
int main();

std::vector<std::string> fields(std::string s) {
    std::vector<std::string> words = {};
    std::string cur = std::string("");
    int i = 0;
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + 1) - i);
        if ((((ch == std::string(" ")) || (ch == std::string("\n"))) || (ch == std::string("\t")))) {
            if ((cur.size() > 0)) {
                words = ([&]{ auto __tmp = words; __tmp.push_back(cur); return __tmp; }());
                cur = std::string("");
            }
        } else {
            cur = (cur + ch);
        }
        i = (i + 1);
    }
    if ((cur.size() > 0)) {
        words = ([&]{ auto __tmp = words; __tmp.push_back(cur); return __tmp; }());
    }
    return words;
}

std::string padRight(std::string s, int width) {
    std::string out = s;
    int i = s.size();
    while ((i < width)) {
        out = (out + std::string(" "));
        i = (i + 1);
    }
    return out;
}

std::string join(std::vector<std::string> xs, std::string sep) {
    std::string res = std::string("");
    int i = 0;
    while ((i < xs.size())) {
        if ((i > 0)) {
            res = (res + sep);
        }
        res = (res + xs[i]);
        i = (i + 1);
    }
    return res;
}

std::vector<std::string> validate(std::vector<std::string> commands, std::vector<std::string> words, std::vector<int> mins) {
    std::vector<std::string> results = {};
    if ((words.size() == 0)) {
        return results;
    }
    int wi = 0;
    while ((wi < words.size())) {
        std::string w = words[wi];
        bool found = false;
        int wlen = w.size();
        int ci = 0;
        while ((ci < commands.size())) {
            std::string cmd = commands[ci];
            if ((((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= cmd.size()))) {
                std::string c = ([&]{ std::string __s = cmd; for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }());
                std::string ww = ([&]{ std::string __s = w; for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }());
                if ((c.substr(0, wlen - 0) == ww)) {
                    results = ([&]{ auto __tmp = results; __tmp.push_back(c); return __tmp; }());
                    found = true;
                    break;
                }
            }
            ci = (ci + 1);
        }
        if (!found) {
            results = ([&]{ auto __tmp = results; __tmp.push_back(std::string("*error*")); return __tmp; }());
        }
        wi = (wi + 1);
    }
    return results;
}

int main() {
    std::string table = ((((((std::string("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy ") + std::string("COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ")) + std::string("NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ")) + std::string(" Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ")) + std::string("MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ")) + std::string("READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ")) + std::string("RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp "));
    std::vector<std::string> commands = fields(table);
    std::vector<int> mins = {};
    int i = 0;
    while ((i < commands.size())) {
        int count = 0;
        int j = 0;
        std::string cmd = commands[i];
        while ((j < cmd.size())) {
            std::string ch = cmd.substr(j, (j + 1) - j);
            if (((ch >= std::string("A")) && (ch <= std::string("Z")))) {
                count = (count + 1);
            }
            j = (j + 1);
        }
        mins = ([&]{ auto __tmp = mins; __tmp.push_back(count); return __tmp; }());
        i = (i + 1);
    }
    std::string sentence = std::string("riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin");
    std::vector<std::string> words = fields(sentence);
    std::vector<std::string> results = validate(commands, words, mins);
    std::string out1 = std::string("user words:  ");
    int k = 0;
    while ((k < words.size())) {
        out1 = ((out1 + padRight(words[k], results[k].size())) + std::string(" "));
        k = (k + 1);
    }
    std::cout << out1;
    std::cout << std::endl;
    std::cout << (std::string("full words:  ") + join(results, std::string(" ")));
    std::cout << std::endl;
    return 0;
}
