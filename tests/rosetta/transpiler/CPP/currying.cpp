// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:53:54 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Foo;

std::ostream& operator<<(std::ostream&, const Foo&);


struct Foo {
    int64_t value;
    auto operator<=>(const Foo&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Foo& v) {
    os << '{' << "'value': "<< v.value
 << '}';
    return os;
}

double pow(double base, double exp);
auto PowN(double b);
auto PowE(double e);
int64_t Foo_Method(const Foo& self, int64_t b);
int main();

double pow(double base, double exp) {
    double result = 1.0;
    int64_t i = int64_t(0);
    while ((i < (int64_t)(exp))) {
        result = (result * base);
        i = (i + int64_t(1));
    }
    return result;
}

auto PowN(double b) {
    return [=](double e) { return pow(b, (double)(e)); };
}

auto PowE(double e) {
    return [=](double b) { return pow((double)(b), e); };
}

int64_t Foo_Method(const Foo& self, int64_t b) {
    return (self.value + b);
}

int main() {
    std::function<double(double)> pow2 = PowN(2.0);
    std::function<double(double)> cube = PowE(3.0);
    std::cout << (std::string("2^8 = ") + ([&]{ std::ostringstream ss; any_to_stream(ss, pow2(8.0));
 return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("4Â³ = ") + ([&]{ std::ostringstream ss; any_to_stream(ss, cube(4.0));
 return ss.str(); }()));
    std::cout << std::endl;
    Foo a = Foo{.value = int64_t(2)};
    std::function<int64_t(int64_t)> fn1 = [=](int64_t b) { return Foo_Method(a, b); };
    std::function<int64_t(Foo, int64_t)> fn2 = [=](Foo f, int64_t b) { return auto_Method(f, b); };
    std::cout << (std::string("2 + 2 = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << Foo_Method(a, int64_t(2)); return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("2 + 3 = ") + ([&]{ std::ostringstream ss; any_to_stream(ss, fn1(int64_t(3)));
 return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("2 + 4 = ") + ([&]{ std::ostringstream ss; any_to_stream(ss, fn2(a, int64_t(4)));
 return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("3 + 5 = ") + ([&]{ std::ostringstream ss; any_to_stream(ss, fn2(Foo{.value = int64_t(3)}, int64_t(5)));
 return ss.str(); }()));
    std::cout << std::endl;
    return 0;
}
