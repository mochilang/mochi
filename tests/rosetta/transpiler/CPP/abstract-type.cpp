// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:13:29 GMT+7
#include <iostream>
#include <string>
#include <memory>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; os << vec[i]; }
    os << "]";
    return os;
}

struct Beast;


struct Beast {
    virtual ~Beast() = default;
};

struct Dog : Beast {
    std::string kind;
    std::string name;
    Dog(std::string kind_, std::string name_) : kind(kind_), name(name_) {}
    auto operator<=>(const Dog&) const = default;
};

struct Cat : Beast {
    std::string kind;
    std::string name;
    Cat(std::string kind_, std::string name_) : kind(kind_), name(name_) {}
    auto operator<=>(const Cat&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Dog& v) {
    os << '{' << "'kind': "<< "'" << v.kind << "'"
 << ", " << "'name': "<< "'" << v.name << "'"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Cat& v) {
    os << '{' << "'kind': "<< "'" << v.kind << "'"
 << ", " << "'name': "<< "'" << v.name << "'"
 << '}';
    return os;
}

std::string beastKind(Beast* b);
std::string beastName(Beast* b);
std::string beastCry(Beast* b);
void bprint(Beast* b);
int main();

std::string beastKind(Beast* b) {
    return ([=]{
    const Dog* __dog = dynamic_cast<const Dog*>(b);
    if (__dog) {
        std::string k = __dog->kind;
        return k;
    }
    const Cat* __cat = dynamic_cast<const Cat*>(b);
    if (__cat) {
        std::string k = __cat->kind;
        return k;
    }
    return std::string{};
}());
}

std::string beastName(Beast* b) {
    return ([=]{
    const Dog* __dog = dynamic_cast<const Dog*>(b);
    if (__dog) {
        std::string n = __dog->name;
        return n;
    }
    const Cat* __cat = dynamic_cast<const Cat*>(b);
    if (__cat) {
        std::string n = __cat->name;
        return n;
    }
    return std::string{};
}());
}

std::string beastCry(Beast* b) {
    return ([=]{
    const Dog* __dog = dynamic_cast<const Dog*>(b);
    if (__dog) {
        return std::string("Woof");
    }
    const Cat* __cat = dynamic_cast<const Cat*>(b);
    if (__cat) {
        return std::string("Meow");
    }
    return std::string{};
}());
}

void bprint(Beast* b) {
    std::cout << (((((beastName((Beast*)(b)) + std::string(", who's a ")) + beastKind((Beast*)(b))) + std::string(", cries: \"")) + beastCry((Beast*)(b))) + std::string("\"."));
    std::cout << std::endl;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::shared_ptr<Beast> d = std::make_shared<Dog>(std::string("labrador"), std::string("Max"));
        std::shared_ptr<Beast> c = std::make_shared<Cat>(std::string("siamese"), std::string("Sammy"));
        bprint(d.get());
        bprint(c.get());
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
