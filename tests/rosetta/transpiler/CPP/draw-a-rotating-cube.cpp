// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:16:45 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Point3;
struct Point2;

std::ostream& operator<<(std::ostream&, const Point3&);
std::ostream& operator<<(std::ostream&, const Point2&);


struct Point3 {
    double x;
    double y;
    double z;
    auto operator<=>(const Point3&) const = default;
};

struct Point2 {
    int64_t x;
    int64_t y;
    auto operator<=>(const Point2&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Point3& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << ", " << "'z': "<< std::fixed << std::setprecision(1) << v.z
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Point2& v) {
    os << '{' << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << '}';
    return os;
}

double _mod(double x, double m);
double _sin(double x);
double _cos(double x);
Point3 rotate(const Point3& p, double ax, double ay);
Point2 project(const Point3& p);
std::vector<std::vector<std::string>> clearGrid();
void drawPoint(std::vector<std::vector<std::string>> g, int64_t x, int64_t y, std::string ch);
void bresenham(int64_t x0, int64_t y0, int64_t x1, int64_t y1, const std::vector<std::vector<std::string>>& g, std::string ch);
std::string render(const std::vector<std::vector<std::string>>& g);
int main();

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;
std::vector<Point3> nodes = std::vector<Point3>{Point3{.x = -1.0, .y = -1.0, .z = -1.0}, Point3{.x = -1.0, .y = -1.0, .z = 1.0}, Point3{.x = -1.0, .y = 1.0, .z = -1.0}, Point3{.x = -1.0, .y = 1.0, .z = 1.0}, Point3{.x = 1.0, .y = -1.0, .z = -1.0}, Point3{.x = 1.0, .y = -1.0, .z = 1.0}, Point3{.x = 1.0, .y = 1.0, .z = -1.0}, Point3{.x = 1.0, .y = 1.0, .z = 1.0}};
std::vector<std::vector<int64_t>> edges = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1)}, std::vector<int64_t>{int64_t(1), int64_t(3)}, std::vector<int64_t>{int64_t(3), int64_t(2)}, std::vector<int64_t>{int64_t(2), int64_t(0)}, std::vector<int64_t>{int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(5), int64_t(7)}, std::vector<int64_t>{int64_t(7), int64_t(6)}, std::vector<int64_t>{int64_t(6), int64_t(4)}, std::vector<int64_t>{int64_t(0), int64_t(4)}, std::vector<int64_t>{int64_t(1), int64_t(5)}, std::vector<int64_t>{int64_t(2), int64_t(6)}, std::vector<int64_t>{int64_t(3), int64_t(7)}};
int64_t width = int64_t(40);
int64_t height = int64_t(20);
double distance = 3.0;
double scale = 8.0;

double _mod(double x, double m) {
    return (x - ((double)((int64_t)(((double)(x) / (m)))) * m));
}

double _sin(double x) {
    double y = (_mod((x + PI), TWO_PI) - PI);
    double y2 = (y * y);
    double y3 = (y2 * y);
    double y5 = (y3 * y2);
    double y7 = (y5 * y2);
    return (((y - ((double)(y3) / (6.0))) + ((double)(y5) / (120.0))) - ((double)(y7) / (5040.0)));
}

double _cos(double x) {
    double y = (_mod((x + PI), TWO_PI) - PI);
    double y2 = (y * y);
    double y4 = (y2 * y2);
    double y6 = (y4 * y2);
    return (((1.0 - ((double)(y2) / (2.0))) + ((double)(y4) / (24.0))) - ((double)(y6) / (720.0)));
}

Point3 rotate(const Point3& p, double ax, double ay) {
    double sinx = _sin(ax);
    double cosx = _cos(ax);
    double siny = _sin(ay);
    double cosy = _cos(ay);
    double x1 = p.x;
    double y1 = ((p.y * cosx) - (p.z * sinx));
    double z1 = ((p.y * sinx) + (p.z * cosx));
    double x2 = ((x1 * cosy) + (z1 * siny));
    double z2 = ((-x1 * siny) + (z1 * cosy));
    return Point3{.x = x2, .y = y1, .z = z2};
}

Point2 project(const Point3& p) {
    double factor = ((double)(scale) / ((p.z + distance)));
    int64_t x = ((int64_t)((p.x * factor)) + (width / int64_t(2)));
    int64_t y = ((int64_t)((-p.y * factor)) + (height / int64_t(2)));
    return Point2{.x = x, .y = y};
}

std::vector<std::vector<std::string>> clearGrid() {
    std::vector<std::vector<std::string>> g = {};
    int64_t y = int64_t(0);
    while ((y < height)) {
        std::vector<std::string> row = {};
        int64_t x = int64_t(0);
        while ((x < width)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(std::string(" ")); return __tmp; }());
            x = (x + int64_t(1));
        }
        g = ([&]{ auto __tmp = g; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return g;
}

void drawPoint(std::vector<std::vector<std::string>> g, int64_t x, int64_t y, std::string ch) {
    if (((((x >= int64_t(0)) && (x < width)) && (y >= int64_t(0))) && (y < height))) {
        std::vector<std::string> row = g[y];
        row[x] = ch;
        g[y] = row;
    }
}

void bresenham(int64_t x0, int64_t y0, int64_t x1, int64_t y1, const std::vector<std::vector<std::string>>& g, std::string ch) {
    int64_t dx = (x1 - x0);
    if ((dx < int64_t(0))) {
        dx = -dx;
    }
    int64_t dy = (y1 - y0);
    if ((dy < int64_t(0))) {
        dy = -dy;
    }
    int64_t sx = -int64_t(1);
    if ((x0 < x1)) {
        sx = int64_t(1);
    }
    int64_t sy = -int64_t(1);
    if ((y0 < y1)) {
        sy = int64_t(1);
    }
    int64_t err = (dx - dy);
    while (true) {
        drawPoint(g, x0, y0, ch);
        if (((x0 == x1) && (y0 == y1))) {
            break;
        }
        int64_t e2 = (int64_t(2) * err);
        if ((e2 > -dy)) {
            err = (err - dy);
            x0 = (x0 + sx);
        }
        if ((e2 < dx)) {
            err = (err + dx);
            y0 = (y0 + sy);
        }
    }
}

std::string render(const std::vector<std::vector<std::string>>& g) {
    std::string out = std::string("");
    int64_t y = int64_t(0);
    while ((y < height)) {
        std::string line = std::string("");
        int64_t x = int64_t(0);
        while ((x < width)) {
            line = (line + g[y][x]);
            x = (x + int64_t(1));
        }
        out = ((out + line) + std::string("\n"));
        y = (y + int64_t(1));
    }
    return out;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t f = int64_t(0);
        while ((f < int64_t(10))) {
            std::vector<std::vector<std::string>> grid = clearGrid();
            std::vector<Point2> rot = {};
            int64_t i = int64_t(0);
            double ay = (((double)(PI) / (4.0)) + ((double)(((double)(f) * PI)) / (10.0)));
            while ((i < nodes.size())) {
                Point3 p = rotate(nodes[i], ((double)(PI) / (4.0)), ay);
                Point2 pp = project(p);
                rot = ([&]{ auto __tmp = rot; __tmp.push_back(pp); return __tmp; }());
                i = (i + int64_t(1));
            }
            int64_t e = int64_t(0);
            while ((e < edges.size())) {
                int64_t a = edges[e][int64_t(0)];
                int64_t b = edges[e][int64_t(1)];
                Point2 p1 = rot[a];
                Point2 p2 = rot[b];
                bresenham(p1.x, p1.y, p2.x, p2.y, grid, std::string("#"));
                e = (e + int64_t(1));
            }
            std::cout << render(grid);
            std::cout << std::endl;
            f = (f + int64_t(1));
        }
    }
    return 0;
}
