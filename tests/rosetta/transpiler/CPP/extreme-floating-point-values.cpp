// Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:14:22 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double makeInf();
double makeMax();
bool isNaN(double x);
void validateNaN(double n, std::string op);
void validateZero(double n, std::string op);
void validateGT(double a, double b, std::string op);
void validateNE(double a, double b, std::string op);
void validateEQ(double a, double b, std::string op);
int main();

double makeInf() {
    double x = 1.0;
    int64_t i = int64_t(0);
    while ((i < int64_t(400))) {
        x = (x * 10.0);
        i = (i + int64_t(1));
    }
    return x;
}

double makeMax() {
    double x = 1.0;
    int64_t i = int64_t(0);
    while ((i < int64_t(308))) {
        x = (x * 10.0);
        i = (i + int64_t(1));
    }
    return x;
}

bool isNaN(double x) {
    return (x != x);
}

void validateNaN(double n, std::string op) {
    if (isNaN(n)) {
        std::cout << (op + std::string(" -> NaN"));
        std::cout << std::endl;
    } else {
        std::cout << std::string("!!! Expected NaN from");
        std::cout << " ";
        std::cout << op;
        std::cout << " ";
        std::cout << std::string(" Found");
        std::cout << " ";
        { std::ostringstream __ss; double __dv = n; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
}

void validateZero(double n, std::string op) {
    if ((n == int64_t(0))) {
        std::cout << (op + std::string(" -> 0"));
        std::cout << std::endl;
    } else {
        std::cout << std::string("!!! Expected 0 from");
        std::cout << " ";
        std::cout << op;
        std::cout << " ";
        std::cout << std::string(" Found");
        std::cout << " ";
        { std::ostringstream __ss; double __dv = n; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
}

void validateGT(double a, double b, std::string op) {
    if ((a > b)) {
        std::cout << op;
        std::cout << std::endl;
    } else {
        std::cout << std::string("!!! Expected");
        std::cout << " ";
        std::cout << op;
        std::cout << " ";
        std::cout << std::string(" Found not true.");
        std::cout << std::endl;
    }
}

void validateNE(double a, double b, std::string op) {
    if ((a == b)) {
        std::cout << std::string("!!! Expected");
        std::cout << " ";
        std::cout << op;
        std::cout << " ";
        std::cout << std::string(" Found not true.");
        std::cout << std::endl;
    } else {
        std::cout << op;
        std::cout << std::endl;
    }
}

void validateEQ(double a, double b, std::string op) {
    if ((a == b)) {
        std::cout << op;
        std::cout << std::endl;
    } else {
        std::cout << std::string("!!! Expected");
        std::cout << " ";
        std::cout << op;
        std::cout << " ";
        std::cout << std::string(" Found not true.");
        std::cout << std::endl;
    }
}

int main() {
    double negZero = -0.0;
    double posInf = makeInf();
    double negInf = -posInf;
    double nan = ((double)(posInf) / (posInf));
    double maxVal = makeMax();
    { std::ostringstream __ss; double __dv = negZero; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << " ";
    { std::ostringstream __ss; double __dv = posInf; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << " ";
    { std::ostringstream __ss; double __dv = negInf; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << " ";
    { std::ostringstream __ss; double __dv = nan; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    { std::ostringstream __ss; double __dv = negZero; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << " ";
    { std::ostringstream __ss; double __dv = posInf; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << " ";
    { std::ostringstream __ss; double __dv = negInf; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << " ";
    { std::ostringstream __ss; double __dv = nan; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    std::cout << std::string("");
    std::cout << std::endl;
    validateNaN((negInf + posInf), std::string("-Inf + Inf"));
    validateNaN((0.0 * posInf), std::string("0 * Inf"));
    validateNaN(((double)(posInf) / (posInf)), std::string("Inf / Inf"));
    validateNaN(std::fmod(posInf, 1.0), std::string("Inf % 1"));
    validateNaN((1.0 + nan), std::string("1 + NaN"));
    validateZero(((double)(1.0) / (posInf)), std::string("1 / Inf"));
    validateGT(posInf, maxVal, std::string("Inf > max value"));
    validateGT(-maxVal, negInf, std::string("-Inf < max neg value"));
    validateNE(nan, nan, std::string("NaN != NaN"));
    validateEQ(negZero, 0.0, std::string("-0 == 0"));
    return 0;
}
