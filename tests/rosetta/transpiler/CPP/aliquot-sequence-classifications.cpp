// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:43 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <vector>
#include <sstream>
#include <type_traits>
#include <map>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}

int indexOf(const std::vector<int>& xs, int value);
bool contains(const std::vector<int>& xs, int value);
int maxOf(int a, int b);
int intSqrt(int n);
int sumProperDivisors(int n);
std::map<std::string, std::any> classifySequence(int k);
std::string padLeft(int n, int w);
std::string padRight(std::string s, int w);
std::string joinWithCommas(const std::vector<int>& seq);
int main();

int THRESHOLD = 140737488355328;

int indexOf(const std::vector<int>& xs, int value) {
    int i = 0;
    while ((i < xs.size())) {
        if ((xs[i] == value)) {
            return i;
        }
        i = (i + 1);
    }
    return (0 - 1);
}

bool contains(const std::vector<int>& xs, int value) {
    return (indexOf(xs, value) != (0 - 1));
}

int maxOf(int a, int b) {
    if ((a > b)) {
        return a;
    } else {
        return b;
    }
}

int intSqrt(int n) {
    if ((n == 0)) {
        return 0;
    }
    int x = n;
    int y = ((x + 1) / 2);
    while ((y < x)) {
        x = y;
        y = ((x + (n / x)) / 2);
    }
    return x;
}

int sumProperDivisors(int n) {
    if ((n < 2)) {
        return 0;
    }
    int sqrt = intSqrt(n);
    int sum = 1;
    int i = 2;
    while ((i <= sqrt)) {
        if (((n % i) == 0)) {
            sum = ((sum + i) + (n / i));
        }
        i = (i + 1);
    }
    if (((sqrt * sqrt) == n)) {
        sum = (sum - sqrt);
    }
    return sum;
}

std::map<std::string, std::any> classifySequence(int k) {
    int last = k;
    std::vector<int> seq = std::vector<int>{k};
    while (true) {
        last = sumProperDivisors(last);
        seq = ([&]{ auto __tmp = seq; __tmp.push_back(last); return __tmp; }());
        int n = seq.size();
        std::string aliquot = std::string("");
        if ((last == 0)) {
            aliquot = std::string("Terminating");
        } else         if (((n == 2) && (last == k))) {
            aliquot = std::string("Perfect");
        } else         if (((n == 3) && (last == k))) {
            aliquot = std::string("Amicable");
        } else         if (((n >= 4) && (last == k))) {
            aliquot = ((std::string("Sociable[") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (n - 1); return ss.str(); }())) + std::string("]"));
        } else         if ((last == seq[(n - 2)])) {
            aliquot = std::string("Aspiring");
        } else         if (contains(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(1, maxOf(1, (n - 2)) - 1); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+1, __v.begin()+maxOf(1, (n - 2))); })(seq), last)) {
            int idx = indexOf(seq, last);
            aliquot = ((std::string("Cyclic[") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ((n - 1) - idx); return ss.str(); }())) + std::string("]"));
        } else         if (((n == 16) || (last > THRESHOLD))) {
            aliquot = std::string("Non-Terminating");
        }






        if ((aliquot != std::string(""))) {
            return std::map<std::string, std::any>{{"seq", std::any(seq)}, {"aliquot", std::any(aliquot)}};
        }
    }
    return std::map<std::string, std::any>{{"seq", std::any(seq)}, {"aliquot", std::any(std::string(""))}};
}

std::string padLeft(int n, int w) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    while ((s.size() < w)) {
        s = (std::string(" ") + s);
    }
    return s;
}

std::string padRight(std::string s, int w) {
    std::string r = s;
    while ((r.size() < w)) {
        r = (r + std::string(" "));
    }
    return r;
}

std::string joinWithCommas(const std::vector<int>& seq) {
    std::string s = std::string("[");
    int i = 0;
    while ((i < seq.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << seq[i]; return ss.str(); }()));
        if ((i < (seq.size() - 1))) {
            s = (s + std::string(", "));
        }
        i = (i + 1);
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        std::cout << std::string("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n");
        std::cout << std::endl;
        int k = 1;
        while ((k <= 10)) {
            std::map<std::string, std::any> res = classifySequence(k);
            std::cout << ((((padLeft(k, 2) + std::string(": ")) + padRight(std::any_cast<std::string>(res[std::string("aliquot")]), 15)) + std::string(" ")) + joinWithCommas(std::any_cast<std::vector<int>>(res[std::string("seq")])));
            std::cout << std::endl;
            k = (k + 1);
        }
        std::cout << std::string("");
        std::cout << std::endl;
        std::vector<int> s = std::vector<int>{11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488};
        int i = 0;
        while ((i < s.size())) {
            int val = s[i];
            std::map<std::string, std::any> res = classifySequence(val);
            std::cout << ((((padLeft(val, 7) + std::string(": ")) + padRight(std::any_cast<std::string>(res[std::string("aliquot")]), 15)) + std::string(" ")) + joinWithCommas(std::any_cast<std::vector<int>>(res[std::string("seq")])));
            std::cout << std::endl;
            i = (i + 1);
        }
        std::cout << std::string("");
        std::cout << std::endl;
        int big = 15355717786080;
        std::map<std::string, std::any> r = classifySequence(big);
        std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << big; return ss.str(); }()) + std::string(": ")) + padRight(std::any_cast<std::string>(r[std::string("aliquot")]), 15)) + std::string(" ")) + joinWithCommas(std::any_cast<std::vector<int>>(r[std::string("seq")])));
        std::cout << std::endl;
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
