// Generated by Mochi transpiler v0.10.56 on 2025-08-04 10:18:58 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string padRight(std::string s, int64_t w);
std::string linearCombo(const std::vector<int64_t>& c);
int main();

std::string padRight(std::string s, int64_t w) {
    std::string r = s;
    while ((r.size() < w)) {
        r = (r + std::string(" "));
    }
    return r;
}

std::string linearCombo(const std::vector<int64_t>& c) {
    std::string out = std::string("");
    int64_t i = int64_t(0);
    while ((i < c.size())) {
        int64_t n = c[i];
        if ((n != int64_t(0))) {
            std::string op = std::string("");
            if (((n < int64_t(0)) && (out.size() == int64_t(0)))) {
                op = std::string("-");
            } else             if ((n < int64_t(0))) {
                op = std::string(" - ");
            } else             if (((n > int64_t(0)) && (out.size() == int64_t(0)))) {
                op = std::string("");
            } else {
                op = std::string(" + ");
            }


            int64_t av = n;
            if ((av < int64_t(0))) {
                av = -av;
            }
            std::string coeff = (([&]{ std::ostringstream ss; ss << std::boolalpha << av; return ss.str(); }()) + std::string("*"));
            if ((av == int64_t(1))) {
                coeff = std::string("");
            }
            out = (((((out + op) + coeff) + std::string("e(")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }())) + std::string(")"));
        }
        i = (i + int64_t(1));
    }
    if ((out.size() == int64_t(0))) {
        return std::string("0");
    }
    return out;
}

int main() {
    std::vector<std::vector<int64_t>> combos = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(3), int64_t(4)}, std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0)}, std::vector<int64_t>{int64_t(1), int64_t(1), int64_t(1)}, std::vector<int64_t>{-int64_t(1), -int64_t(1), -int64_t(1)}, std::vector<int64_t>{-int64_t(1), -int64_t(2), int64_t(0), -int64_t(3)}, std::vector<int64_t>{-int64_t(1)}};
    int64_t idx = int64_t(0);
    while ((idx < combos.size())) {
        std::vector<int64_t> c = combos[idx];
        std::string t = std::string("[");
        int64_t j = int64_t(0);
        while ((j < c.size())) {
            t = (t + ([&]{ std::ostringstream ss; ss << std::boolalpha << c[j]; return ss.str(); }()));
            if ((j < (c.size() - int64_t(1)))) {
                t = (t + std::string(", "));
            }
            j = (j + int64_t(1));
        }
        t = (t + std::string("]"));
        std::string lc = linearCombo(c);
        std::cout << ((padRight(t, int64_t(15)) + std::string("  ->  ")) + lc);
        std::cout << std::endl;
        idx = (idx + int64_t(1));
    }
    return 0;
}
