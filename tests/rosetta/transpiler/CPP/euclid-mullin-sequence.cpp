// Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:23:29 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <boost/multiprecision/cpp_int.hpp>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

boost::multiprecision::cpp_int gcd(const boost::multiprecision::cpp_int& a, const boost::multiprecision::cpp_int& b);
boost::multiprecision::cpp_int absBig(const boost::multiprecision::cpp_int& x);
boost::multiprecision::cpp_int pollardRho(const boost::multiprecision::cpp_int& n, const boost::multiprecision::cpp_int& c);
boost::multiprecision::cpp_int smallestPrimeFactorWheel(const boost::multiprecision::cpp_int& n, const boost::multiprecision::cpp_int& max);
boost::multiprecision::cpp_int smallestPrimeFactor(const boost::multiprecision::cpp_int& n);
int main();

boost::multiprecision::cpp_int zero = int64_t(0);
boost::multiprecision::cpp_int one = int64_t(1);
boost::multiprecision::cpp_int two = int64_t(2);
boost::multiprecision::cpp_int three = int64_t(3);
boost::multiprecision::cpp_int four = int64_t(4);
boost::multiprecision::cpp_int five = int64_t(5);
boost::multiprecision::cpp_int six = int64_t(6);
boost::multiprecision::cpp_int ten = int64_t(10);
boost::multiprecision::cpp_int k100 = int64_t(100000);

boost::multiprecision::cpp_int gcd(const boost::multiprecision::cpp_int& a, const boost::multiprecision::cpp_int& b) {
    boost::multiprecision::cpp_int x = a;
    boost::multiprecision::cpp_int y = b;
    while ((y != zero)) {
        boost::multiprecision::cpp_int t = (x % y);
        x = y;
        y = t;
    }
    return x;
}

boost::multiprecision::cpp_int absBig(const boost::multiprecision::cpp_int& x) {
    if ((x < zero)) {
        return (zero - x);
    }
    return x;
}

boost::multiprecision::cpp_int pollardRho(const boost::multiprecision::cpp_int& n, const boost::multiprecision::cpp_int& c) {
    std::function<boost::multiprecision::cpp_int(boost::multiprecision::cpp_int, boost::multiprecision::cpp_int)> g = [=](boost::multiprecision::cpp_int x, boost::multiprecision::cpp_int y) mutable {
        boost::multiprecision::cpp_int x2 = (x * x);
        x2 = (x2 + c);
        return (x2 % y);
    };
    boost::multiprecision::cpp_int x = int64_t(2);
    boost::multiprecision::cpp_int y = int64_t(2);
    boost::multiprecision::cpp_int z = int64_t(1);
    boost::multiprecision::cpp_int d = int64_t(0);
    int64_t count = int64_t(0);
    while (true) {
        x = g(x, n);
        y = g(g(y, n), n);
        d = absBig((x - y));
        d = (d % n);
        z = (z * d);
        count = (count + int64_t(1));
        if ((count == int64_t(100))) {
            d = gcd(z, n);
            if ((d != one)) {
                break;
            }
            z = one;
            count = int64_t(0);
        }
    }
    if ((d == n)) {
        return zero;
    }
    return d;
}

boost::multiprecision::cpp_int smallestPrimeFactorWheel(const boost::multiprecision::cpp_int& n, const boost::multiprecision::cpp_int& max) {
    if (((n % two) == zero)) {
        return two;
    }
    if (((n % three) == zero)) {
        return three;
    }
    if (((n % five) == zero)) {
        return five;
    }
    boost::multiprecision::cpp_int k = int64_t(7);
    std::vector<boost::multiprecision::cpp_int> inc = std::vector<boost::multiprecision::cpp_int>{four, two, four, two, four, six, two, six};
    int64_t i = int64_t(0);
    while (((k * k) <= n)) {
        if (((n % k) == zero)) {
            return k;
        }
        k = (k + inc[i]);
        if ((k > max)) {
            break;
        }
        i = ((i + int64_t(1)) % int64_t(8));
    }
    return zero;
}

boost::multiprecision::cpp_int smallestPrimeFactor(const boost::multiprecision::cpp_int& n) {
    boost::multiprecision::cpp_int s = smallestPrimeFactorWheel(n, k100);
    if ((s != zero)) {
        return s;
    }
    boost::multiprecision::cpp_int c = int64_t(1);
    while (true) {
        boost::multiprecision::cpp_int d = pollardRho(n, c);
        if ((d == zero)) {
            if ((c == ten)) {
                return n;
            }
            c = (c + one);
        } else {
            boost::multiprecision::cpp_int factor = smallestPrimeFactorWheel(d, d);
            boost::multiprecision::cpp_int s2 = smallestPrimeFactorWheel((n / d), factor);
            if ((s2 != zero)) {
                if ((s2 < factor)) {
                    return s2;
                } else {
                    return factor;
                }
            }
            return factor;
        }
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t k = int64_t(19);
        std::cout << ((std::string("First ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << k; return ss.str(); }())) + std::string(" terms of the Euclid–Mullin sequence:"));
        std::cout << std::endl;
        std::cout << int64_t(2);
        std::cout << std::endl;
        boost::multiprecision::cpp_int prod = int64_t(2);
        int64_t count = int64_t(1);
        while ((count < k)) {
            boost::multiprecision::cpp_int z = (prod + one);
            boost::multiprecision::cpp_int t = smallestPrimeFactor(z);
            std::cout << t;
            std::cout << std::endl;
            prod = (prod * t);
            count = (count + int64_t(1));
        }
    }
    return 0;
}
