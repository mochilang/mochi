// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:33:00 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

int main();

std::string msg = std::string("Hello World! ");
int shift = 0;
int inc = 1;
int clicks = 0;
int frames = 0;

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        while ((clicks < 5)) {
            std::string line = std::string("");
            int i = 0;
            while ((i < msg.size())) {
                int idx = ((shift + i) % msg.size());
                line = (line + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(idx, (idx + 1) - idx); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+idx, __v.begin()+(idx + 1)); })(msg));
                i = (i + 1);
            }
            std::cout << line;
            std::cout << std::endl;
            shift = ((shift + inc) % msg.size());
            frames = (frames + 1);
            if (((frames % msg.size()) == 0)) {
                inc = (msg.size() - inc);
                clicks = (clicks + 1);
            }
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
