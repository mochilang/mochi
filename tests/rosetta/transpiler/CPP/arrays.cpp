// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:09:29 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <type_traits>
#include <cmath>
#include <optional>
#include <any>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int>)) { const auto& v = std::any_cast<const std::vector<int>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string listStr(const std::vector<int>& xs);
int main();

std::vector<int> a = std::vector<int>{0, 0, 0, 0, 0};
std::vector<int> s = ([](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 4 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+4); })(a);
int cap_s = 5;

std::string listStr(const std::vector<int>& xs) {
    std::string s = std::string("[");
    int i = 0;
    while ((i < xs.size())) {
        s = (s + _to_string(xs[i]));
        if (((i + 1) < xs.size())) {
            s = (s + std::string(" "));
        }
        i = (i + 1);
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    std::cout << (std::string("len(a) = ") + _to_string(a.size()));
    std::cout << std::endl;
    std::cout << (std::string("a = ") + listStr(a));
    std::cout << std::endl;
    a[0] = 3;
    std::cout << (std::string("a = ") + listStr(a));
    std::cout << std::endl;
    std::cout << (std::string("a[0] = ") + _to_string(a[0]));
    std::cout << std::endl;
    std::cout << (std::string("s = ") + listStr(s));
    std::cout << std::endl;
    std::cout << (((std::string("len(s) = ") + _to_string(s.size())) + std::string("  cap(s) = ")) + _to_string(cap_s));
    std::cout << std::endl;
    s = ([](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(0, 5 - 0); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+0, __v.begin()+5); })(a);
    std::cout << (std::string("s = ") + listStr(s));
    std::cout << std::endl;
    a[0] = 22;
    s[0] = 22;
    std::cout << (std::string("a = ") + listStr(a));
    std::cout << std::endl;
    std::cout << (std::string("s = ") + listStr(s));
    std::cout << std::endl;
    s = ([&]{ auto __tmp = s; __tmp.push_back(4); return __tmp; }());
    s = ([&]{ auto __tmp = s; __tmp.push_back(5); return __tmp; }());
    s = ([&]{ auto __tmp = s; __tmp.push_back(6); return __tmp; }());
    cap_s = 10;
    std::cout << (std::string("s = ") + listStr(s));
    std::cout << std::endl;
    std::cout << (((std::string("len(s) = ") + _to_string(s.size())) + std::string("  cap(s) = ")) + _to_string(cap_s));
    std::cout << std::endl;
    a[4] = -1;
    std::cout << (std::string("a = ") + listStr(a));
    std::cout << std::endl;
    std::cout << (std::string("s = ") + listStr(s));
    std::cout << std::endl;
    s = {};
    for (int i = 0; i < 8; i++ ) {
        s = ([&]{ auto __tmp = s; __tmp.push_back(0); return __tmp; }());
    }
    cap_s = 8;
    std::cout << (std::string("s = ") + listStr(s));
    std::cout << std::endl;
    std::cout << (((std::string("len(s) = ") + _to_string(s.size())) + std::string("  cap(s) = ")) + _to_string(cap_s));
    std::cout << std::endl;
    return 0;
}
