// Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:23:42 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <functional>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t indexOf(std::string s, std::string ch);
double floorf(double x);
double powf(double base, int64_t _exp);
std::string fmtF(double x, int64_t width, int64_t prec);
double expf(double x);
double eulerStep(std::function<double(double, double)> f, double x, double y, double h);
auto newCoolingRate(double k);
auto newTempFunc(double k, double ambient, double initial);
auto newCoolingRateDy(double k, double ambient);
int main();

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

double floorf(double x) {
    int64_t y = (int64_t)(x);
    return (double)(y);
}

double powf(double base, int64_t _exp) {
    double r = 1.0;
    int64_t i = int64_t(0);
    while ((i < _exp)) {
        r = (r * base);
        i = (i + int64_t(1));
    }
    return r;
}

std::string fmtF(double x, int64_t width, int64_t prec) {
    double factor = powf(10.0, prec);
    double y = ((double)(floorf(((x * factor) + 0.5))) / (factor));
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }());
    int64_t dot = _index_of(s, std::string("."));
    if ((dot == (int64_t(0) - int64_t(1)))) {
        s = (s + std::string("."));
        int64_t j = int64_t(0);
        while ((j < prec)) {
            s = (s + std::string("0"));
            j = (j + int64_t(1));
        }
    } else {
        int64_t decs = ((s.size() - dot) - int64_t(1));
        while ((decs < prec)) {
            s = (s + std::string("0"));
            decs = (decs + int64_t(1));
        }
    }
    while ((s.size() < width)) {
        s = (std::string(" ") + s);
    }
    return s;
}

double expf(double x) {
    if ((x < 0.0)) {
        return ((double)(1.0) / (expf(-x)));
    }
    double term = 1.0;
    double sum = 1.0;
    int64_t i = int64_t(1);
    while ((i < int64_t(20))) {
        term = ((double)((term * x)) / ((double)(i)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

double eulerStep(std::function<double(double, double)> f, double x, double y, double h) {
    return (y + (h * f(x, y)));
}

auto newCoolingRate(double k) {
    return [=](double dt) mutable {
    return (-k * dt);
};
}

auto newTempFunc(double k, double ambient, double initial) {
    return [=](double t) mutable {
    return (ambient + ((initial - ambient) * expf((-k * t))));
};
}

auto newCoolingRateDy(double k, double ambient) {
    std::function<double(double)> cr = newCoolingRate(k);
    return [=](double _x, double obj) mutable {
    return cr((obj - ambient));
};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        double k = 0.07;
        double tempRoom = 20.0;
        double tempObject = 100.0;
        std::function<double(double, double)> fcr = newCoolingRateDy(k, tempRoom);
        std::function<double(double)> analytic = newTempFunc(k, tempRoom, tempObject);
        for (double step : std::vector<double>{2.0, 5.0, 10.0}) {
            std::cout << (std::string("Step size = ") + fmtF(step, int64_t(0), int64_t(1)));
            std::cout << std::endl;
            std::cout << std::string(" Time Euler's Analytic");
            std::cout << std::endl;
            double temp = tempObject;
            double time = 0.0;
            while ((time <= 100.0)) {
                std::string line = ((((fmtF(time, int64_t(5), int64_t(1)) + std::string(" ")) + fmtF(temp, int64_t(7), int64_t(3))) + std::string(" ")) + fmtF((double)(analytic(time)), int64_t(7), int64_t(3)));
                std::cout << line;
                std::cout << std::endl;
                temp = eulerStep(fcr, time, temp, step);
                time = (time + step);
            }
            std::cout << std::string("");
            std::cout << std::endl;
        }
    }
    return 0;
}
