// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:32:46 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long _mem() {
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
#ifdef __APPLE__
    return usage.ru_maxrss;
#else
    return usage.ru_maxrss * 1024;
#endif
}

bool kPrime(int n, int k);
std::vector<int> gen(int k, int count);
int main();

bool kPrime(int n, int k) {
    int nf = 0;
    int i = 2;
    while ((i <= n)) {
        while (((n % i) == 0)) {
            if ((nf == k)) {
                return false;
            }
            nf = (nf + 1);
            n = (n / i);
        }
        i = (i + 1);
    }
    return (nf == k);
}

std::vector<int> gen(int k, int count) {
    std::vector<int> r = {};
    int n = 2;
    while ((r.size() < count)) {
        if (kPrime(n, k)) {
            r = ([&]{ auto __tmp = r; __tmp.push_back(n); return __tmp; }());
        }
        n = (n + 1);
    }
    return r;
}

int main() {
    {
        auto __bench_start = _now();
        auto __bench_mem_start = _mem();
        int k = 1;
        while ((k <= 5)) {
            std::cout << ((([&]{ std::ostringstream ss; ss << std::boolalpha << k; return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; { auto __tmp = gen(k, 10); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ", "; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
            std::cout << std::endl;
            k = (k + 1);
        }
        auto __bench_end = _now();
        auto __bench_mem_end = _mem();
        auto __bench_dur = __bench_end - __bench_start;
        auto __bench_mem = __bench_mem_end;
        std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
    }
    return 0;
}
