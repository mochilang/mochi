// Generated by Mochi transpiler v0.10.55 on 2025-08-03 00:25:42 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <vector>
#include <type_traits>
#include <cmath>
#include <optional>
#include <any>
#include <map>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string padLeft(std::string s, int64_t w);
int main();

std::string dna = ((((((((((std::string("") + std::string("CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG")) + std::string("CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG")) + std::string("AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT")) + std::string("GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT")) + std::string("CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG")) + std::string("TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA")) + std::string("TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT")) + std::string("CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG")) + std::string("TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC")) + std::string("GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT"));
int le = dna.size();
int64_t i = int64_t(0);
int64_t a = int64_t(0);
int64_t c = int64_t(0);
int64_t g = int64_t(0);
int64_t t = int64_t(0);
int64_t idx = int64_t(0);

std::string padLeft(std::string s, int64_t w) {
    std::string res = std::string("");
    int64_t n = (w - s.size());
    while ((n > int64_t(0))) {
        res = (res + std::string(" "));
        n = (n - int64_t(1));
    }
    return (res + s);
}

int main() {
    std::cout << std::string("SEQUENCE:");
    std::cout << std::endl;
    while ((i < le)) {
        int64_t k = (i + int64_t(50));
        if ((k > le)) {
            k = le;
        }
        std::cout << ((padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }()), int64_t(5)) + std::string(": ")) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, k - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+k); })(dna));
        std::cout << std::endl;
        i = (i + int64_t(50));
    }
    while ((idx < le)) {
        std::string ch = dna.substr(idx, (idx + int64_t(1)) - idx);
        if ((ch == std::string("A"))) {
            a = (a + int64_t(1));
        } else {
            if ((ch == std::string("C"))) {
                c = (c + int64_t(1));
            } else {
                if ((ch == std::string("G"))) {
                    g = (g + int64_t(1));
                } else {
                    if ((ch == std::string("T"))) {
                        t = (t + int64_t(1));
                    }
                }
            }
        }
        idx = (idx + int64_t(1));
    }
    std::cout << std::string("");
    std::cout << std::endl;
    std::cout << std::string("BASE COUNT:");
    std::cout << std::endl;
    std::cout << (std::string("    A: ") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << a; return ss.str(); }()), int64_t(3)));
    std::cout << std::endl;
    std::cout << (std::string("    C: ") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << c; return ss.str(); }()), int64_t(3)));
    std::cout << std::endl;
    std::cout << (std::string("    G: ") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << g; return ss.str(); }()), int64_t(3)));
    std::cout << std::endl;
    std::cout << (std::string("    T: ") + padLeft(([&]{ std::ostringstream ss; ss << std::boolalpha << t; return ss.str(); }()), int64_t(3)));
    std::cout << std::endl;
    std::cout << std::string("    ------");
    std::cout << std::endl;
    std::cout << (std::string("    Î£: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << le; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << std::string("    ======");
    std::cout << std::endl;
    return 0;
}
