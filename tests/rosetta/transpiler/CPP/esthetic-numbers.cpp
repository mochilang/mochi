// Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:19:30 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string toBase(int64_t n, int64_t b);
int64_t uabs(int64_t a, int64_t b);
bool isEsthetic(int64_t n, int64_t b);
void dfs(int64_t n, int64_t m, int64_t i);
std::string commatize(int64_t n);
void listEsths(int64_t n, int64_t n2, int64_t m, int64_t m2, int64_t perLine, bool showAll);
int main();

std::string digits = std::string("0123456789abcdef");
std::vector<int64_t> esths = {};

std::string toBase(int64_t n, int64_t b) {
    if ((n == int64_t(0))) {
        return std::string("0");
    }
    int64_t v = n;
    std::string out = std::string("");
    while ((v > int64_t(0))) {
        int64_t d = (v % b);
        out = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(d, (d + int64_t(1)) - d); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+d, __v.begin()+(d + int64_t(1))); })(digits) + out);
        v = (v / b);
    }
    return out;
}

int64_t uabs(int64_t a, int64_t b) {
    if ((a > b)) {
        return (a - b);
    }
    return (b - a);
}

bool isEsthetic(int64_t n, int64_t b) {
    if ((n == int64_t(0))) {
        return false;
    }
    int64_t i = (n % b);
    n = (n / b);
    while ((n > int64_t(0))) {
        int64_t j = (n % b);
        if ((uabs(i, j) != int64_t(1))) {
            return false;
        }
        n = (n / b);
        i = j;
    }
    return true;
}

void dfs(int64_t n, int64_t m, int64_t i) {
    if (((i >= n) && (i <= m))) {
        esths = ([&]{ auto __tmp = esths; __tmp.push_back(i); return __tmp; }());
    }
    if (((i == int64_t(0)) || (i > m))) {
        return;
    }
    int64_t d = (i % int64_t(10));
    int64_t i1 = (((i * int64_t(10)) + d) - int64_t(1));
    int64_t i2 = (i1 + int64_t(2));
    if ((d == int64_t(0))) {
        dfs(n, m, i2);
    } else     if ((d == int64_t(9))) {
        dfs(n, m, i1);
    } else {
        dfs(n, m, i1);
        dfs(n, m, i2);
    }

}

std::string commatize(int64_t n) {
    std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
    int64_t i = (s.size() - int64_t(3));
    while ((i >= int64_t(1))) {
        s = ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), i - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+i); })(s) + std::string(",")) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, s.size() - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+s.size()); })(s));
        i = (i - int64_t(3));
    }
    return s;
}

void listEsths(int64_t n, int64_t n2, int64_t m, int64_t m2, int64_t perLine, bool showAll) {
    esths = std::vector<int64_t>{};
    int64_t i = int64_t(0);
    while ((i < int64_t(10))) {
        dfs(n2, m2, i);
        i = (i + int64_t(1));
    }
    int le = esths.size();
    std::cout << ((((((std::string("Base 10: ") + commatize((int64_t)(le))) + std::string(" esthetic numbers between ")) + commatize(n)) + std::string(" and ")) + commatize(m)) + std::string(":"));
    std::cout << std::endl;
    if (showAll) {
        int64_t c = int64_t(0);
        std::string line = std::string("");
        for (int64_t v : esths) {
            if ((line.size() > int64_t(0))) {
                line = (line + std::string(" "));
            }
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << v; return ss.str(); }()));
            c = (c + int64_t(1));
            if (((c % perLine) == int64_t(0))) {
                std::cout << line;
                std::cout << std::endl;
                line = std::string("");
            }
        }
        if ((line.size() > int64_t(0))) {
            std::cout << line;
            std::cout << std::endl;
        }
    } else {
        std::string line = std::string("");
        int64_t idx = int64_t(0);
        while ((idx < perLine)) {
            if ((line.size() > int64_t(0))) {
                line = (line + std::string(" "));
            }
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << esths[idx]; return ss.str(); }()));
            idx = (idx + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        std::cout << std::string("............");
        std::cout << std::endl;
        line = std::string("");
        idx = (le - perLine);
        while ((idx < le)) {
            if ((line.size() > int64_t(0))) {
                line = (line + std::string(" "));
            }
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << esths[idx]; return ss.str(); }()));
            idx = (idx + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
    }
    std::cout << std::string("");
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t b = int64_t(2);
        while ((b <= int64_t(16))) {
            int64_t start = (int64_t(4) * b);
            int64_t stop = (int64_t(6) * b);
            std::cout << ((((((std::string("Base ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << b; return ss.str(); }())) + std::string(": ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << start; return ss.str(); }())) + std::string("th to ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << stop; return ss.str(); }())) + std::string("th esthetic numbers:"));
            std::cout << std::endl;
            int64_t n = int64_t(1);
            int64_t c = int64_t(0);
            std::string line = std::string("");
            while ((c < stop)) {
                if (isEsthetic(n, b)) {
                    c = (c + int64_t(1));
                    if ((c >= start)) {
                        if ((line.size() > int64_t(0))) {
                            line = (line + std::string(" "));
                        }
                        line = (line + toBase(n, b));
                    }
                }
                n = (n + int64_t(1));
            }
            std::cout << line;
            std::cout << std::endl;
            std::cout << std::string("");
            std::cout << std::endl;
            b = (b + int64_t(1));
        }
        listEsths(int64_t(1000), int64_t(1010), int64_t(9999), int64_t(9898), int64_t(16), true);
        listEsths(int64_t(100000000), int64_t(101010101), int64_t(130000000), int64_t(123456789), int64_t(9), true);
        listEsths(int64_t(100000000000), int64_t(101010101010), int64_t(130000000000), int64_t(123456789898), int64_t(7), false);
        listEsths(int64_t(100000000000000), int64_t(101010101010101), int64_t(130000000000000), int64_t(123456789898989), int64_t(5), false);
        listEsths(int64_t(100000000000000000), int64_t(101010101010101010), int64_t(130000000000000000), int64_t(123456789898989898), int64_t(4), false);
    }
    return 0;
}
