// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:52:08 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::map<std::string, std::any> Node(int64_t data);
std::any getLink(const std::map<std::string, std::any>& n, int64_t dir);
void setLink(std::map<std::string, std::any> n, int64_t dir, std::any v);
int64_t opp(int64_t dir);
std::map<std::string, std::any> single(const std::map<std::string, std::any>& root, int64_t dir);
std::map<std::string, std::any> _double(const std::map<std::string, std::any>& root, int64_t dir);
void adjustBalance(std::map<std::string, std::any> root, int64_t dir, int64_t bal);
std::map<std::string, std::any> insertBalance(std::map<std::string, std::any> root, int64_t dir);
std::map<std::string, std::any> insertR(std::any root, int64_t data);
std::any Insert(std::any tree, int64_t data);
std::map<std::string, std::any> removeBalance(std::map<std::string, std::any> root, int64_t dir);
std::map<std::string, std::any> removeR(std::any root, int64_t data);
std::any Remove(std::any tree, int64_t data);
std::string indentStr(int64_t n);
void dumpNode(std::any node, int64_t indent, bool comma);
void dump(std::any node, int64_t indent);
int main();

std::map<std::string, std::any> Node(int64_t data) {
    return std::map<std::string, std::any>{{"Data", std::any(data)}, {"Balance", std::any(int64_t(0))}, {"Link", std::any(std::vector<std::any>{nullptr, nullptr})}};
}

std::any getLink(const std::map<std::string, std::any>& n, int64_t dir) {
    return std::any_cast<std::vector<std::any>>(([&](const auto& __m){ auto __it = __m.find(std::string("Link")); return __it != __m.end() ? __it->second : std::any{}; })(n))[dir];
}

void setLink(std::map<std::string, std::any> n, int64_t dir, std::any v) {
    std::vector<std::any> links = std::any_cast<std::vector<std::any>>(([&](const auto& __m){ auto __it = __m.find(std::string("Link")); return __it != __m.end() ? __it->second : std::any{}; })(n));
    links[dir] = v;
    n[std::string("Link")] = links;
}

int64_t opp(int64_t dir) {
    return (int64_t(1) - dir);
}

std::map<std::string, std::any> single(const std::map<std::string, std::any>& root, int64_t dir) {
    std::any tmp = getLink(root, opp(dir));
    setLink(root, opp(dir), getLink(std::any_cast<std::map<std::string, std::any>>(tmp), dir));
    setLink(std::any_cast<std::map<std::string, std::any>>(tmp), dir, (std::any)(root));
    return std::any_cast<std::map<std::string, std::any>>(tmp);
}

std::map<std::string, std::any> _double(const std::map<std::string, std::any>& root, int64_t dir) {
    std::any tmp = getLink(std::any_cast<std::map<std::string, std::any>>(getLink(root, opp(dir))), dir);
    setLink(std::any_cast<std::map<std::string, std::any>>(getLink(root, opp(dir))), dir, getLink(std::any_cast<std::map<std::string, std::any>>(tmp), opp(dir)));
    setLink(std::any_cast<std::map<std::string, std::any>>(tmp), opp(dir), getLink(root, opp(dir)));
    setLink(root, opp(dir), tmp);
    tmp = getLink(root, opp(dir));
    setLink(root, opp(dir), getLink(std::any_cast<std::map<std::string, std::any>>(tmp), dir));
    setLink(std::any_cast<std::map<std::string, std::any>>(tmp), dir, (std::any)(root));
    return std::any_cast<std::map<std::string, std::any>>(tmp);
}

void adjustBalance(std::map<std::string, std::any> root, int64_t dir, int64_t bal) {
    std::map<std::string, std::any> n = std::any_cast<std::map<std::string, std::any>>(getLink(root, dir));
    std::map<std::string, std::any> nn = std::any_cast<std::map<std::string, std::any>>(getLink(n, opp(dir)));
    if ((any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(nn)) == int64_t(0))) {
        root[std::string("Balance")] = int64_t(0);
        n[std::string("Balance")] = int64_t(0);
    } else     if ((any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(nn)) == bal)) {
        root[std::string("Balance")] = -bal;
        n[std::string("Balance")] = int64_t(0);
    } else {
        root[std::string("Balance")] = int64_t(0);
        n[std::string("Balance")] = bal;
    }

    nn[std::string("Balance")] = int64_t(0);
}

std::map<std::string, std::any> insertBalance(std::map<std::string, std::any> root, int64_t dir) {
    std::map<std::string, std::any> n = std::any_cast<std::map<std::string, std::any>>(getLink(root, dir));
    int64_t bal = ((int64_t(2) * dir) - int64_t(1));
    if ((any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(n)) == bal)) {
        root[std::string("Balance")] = int64_t(0);
        n[std::string("Balance")] = int64_t(0);
        return single(root, opp(dir));
    }
    adjustBalance(root, dir, bal);
    return _double(root, opp(dir));
}

std::map<std::string, std::any> insertR(std::any root, int64_t data) {
    if ((any_to_string(root) == any_to_string(nullptr))) {
        return std::map<std::string, std::any>{{"node", std::any(Node(data))}, {"done", std::any(false)}};
    }
    std::map<std::string, std::any> node = std::any_cast<std::map<std::string, std::any>>(root);
    int64_t dir = int64_t(0);
    if ((std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("Data")); return __it != __m.end() ? __it->second : std::any{}; })(node)) < data)) {
        dir = int64_t(1);
    }
    std::map<std::string, std::any> r = insertR(getLink(node, dir), data);
    setLink(node, dir, ([&](const auto& __m){ auto __it = __m.find(std::string("node")); return __it != __m.end() ? __it->second : std::any{}; })(r));
    if (std::any_cast<bool>(([&](const auto& __m){ auto __it = __m.find(std::string("done")); return __it != __m.end() ? __it->second : std::any{}; })(r))) {
        return std::map<std::string, std::any>{{"node", std::any(node)}, {"done", std::any(true)}};
    }
    node[std::string("Balance")] = (std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(node)) + ((int64_t(2) * dir) - int64_t(1)));
    if ((any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(node)) == int64_t(0))) {
        return std::map<std::string, std::any>{{"node", std::any(node)}, {"done", std::any(true)}};
    }
    if (((any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(node)) == int64_t(1)) || (any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(node)) == -int64_t(1)))) {
        return std::map<std::string, std::any>{{"node", std::any(node)}, {"done", std::any(false)}};
    }
    return std::map<std::string, std::any>{{"node", std::any(insertBalance(node, dir))}, {"done", std::any(true)}};
}

std::any Insert(std::any tree, int64_t data) {
    std::map<std::string, std::any> r = insertR(tree, data);
    return ([&](const auto& __m){ auto __it = __m.find(std::string("node")); return __it != __m.end() ? __it->second : std::any{}; })(r);
}

std::map<std::string, std::any> removeBalance(std::map<std::string, std::any> root, int64_t dir) {
    std::map<std::string, std::any> n = std::any_cast<std::map<std::string, std::any>>(getLink(root, opp(dir)));
    int64_t bal = ((int64_t(2) * dir) - int64_t(1));
    if ((any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(n)) == -bal)) {
        root[std::string("Balance")] = int64_t(0);
        n[std::string("Balance")] = int64_t(0);
        return std::map<std::string, std::any>{{"node", std::any(single(root, dir))}, {"done", std::any(false)}};
    }
    if ((any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(n)) == bal)) {
        adjustBalance(root, opp(dir), -bal);
        return std::map<std::string, std::any>{{"node", std::any(_double(root, dir))}, {"done", std::any(false)}};
    }
    root[std::string("Balance")] = -bal;
    n[std::string("Balance")] = bal;
    return std::map<std::string, std::any>{{"node", std::any(single(root, dir))}, {"done", std::any(true)}};
}

std::map<std::string, std::any> removeR(std::any root, int64_t data) {
    if ((any_to_string(root) == any_to_string(nullptr))) {
        return std::map<std::string, std::any>{{"node", std::any(nullptr)}, {"done", std::any(false)}};
    }
    std::map<std::string, std::any> node = std::any_cast<std::map<std::string, std::any>>(root);
    if ((std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("Data")); return __it != __m.end() ? __it->second : std::any{}; })(node)) == data)) {
        if ((any_to_string(getLink(node, int64_t(0))) == any_to_string(nullptr))) {
            return std::map<std::string, std::any>{{"node", std::any(getLink(node, int64_t(1)))}, {"done", std::any(false)}};
        }
        if ((any_to_string(getLink(node, int64_t(1))) == any_to_string(nullptr))) {
            return std::map<std::string, std::any>{{"node", std::any(getLink(node, int64_t(0)))}, {"done", std::any(false)}};
        }
        std::any heir = getLink(node, int64_t(0));
        while ((any_to_string(getLink(std::any_cast<std::map<std::string, std::any>>(heir), int64_t(1))) != any_to_string(nullptr))) {
            heir = getLink(std::any_cast<std::map<std::string, std::any>>(heir), int64_t(1));
        }
        node[std::string("Data")] = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(heir)[std::string("Data")]);
        data = (int64_t)(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(heir)[std::string("Data")]));
    }
    int64_t dir = int64_t(0);
    if ((std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("Data")); return __it != __m.end() ? __it->second : std::any{}; })(node)) < data)) {
        dir = int64_t(1);
    }
    std::map<std::string, std::any> r = removeR(getLink(node, dir), data);
    setLink(node, dir, ([&](const auto& __m){ auto __it = __m.find(std::string("node")); return __it != __m.end() ? __it->second : std::any{}; })(r));
    if (std::any_cast<bool>(([&](const auto& __m){ auto __it = __m.find(std::string("done")); return __it != __m.end() ? __it->second : std::any{}; })(r))) {
        return std::map<std::string, std::any>{{"node", std::any(node)}, {"done", std::any(true)}};
    }
    node[std::string("Balance")] = ((std::any_cast<int64_t>(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(node)) + int64_t(1)) - (int64_t(2) * dir));
    if (((any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(node)) == int64_t(1)) || (any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(node)) == -int64_t(1)))) {
        return std::map<std::string, std::any>{{"node", std::any(node)}, {"done", std::any(true)}};
    }
    if ((any_to_double(([&](const auto& __m){ auto __it = __m.find(std::string("Balance")); return __it != __m.end() ? __it->second : std::any{}; })(node)) == int64_t(0))) {
        return std::map<std::string, std::any>{{"node", std::any(node)}, {"done", std::any(false)}};
    }
    return removeBalance(node, dir);
}

std::any Remove(std::any tree, int64_t data) {
    std::map<std::string, std::any> r = removeR(tree, data);
    return ([&](const auto& __m){ auto __it = __m.find(std::string("node")); return __it != __m.end() ? __it->second : std::any{}; })(r);
}

std::string indentStr(int64_t n) {
    std::string s = std::string("");
    int64_t i = int64_t(0);
    while ((i < n)) {
        s = (s + std::string(" "));
        i = (i + int64_t(1));
    }
    return s;
}

void dumpNode(std::any node, int64_t indent, bool comma) {
    std::string sp = indentStr(indent);
    if ((any_to_string(node) == any_to_string(nullptr))) {
        std::string line = (sp + std::string("null"));
        if (comma) {
            line = (line + std::string(","));
        }
        std::cout << line;
        std::cout << std::endl;
    } else {
        std::cout << (sp + std::string("{"));
        std::cout << std::endl;
        std::cout << (((indentStr((indent + int64_t(3))) + std::string("\"Data\": ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(node)[std::string("Data")]));
 return ss.str(); }())) + std::string(","));
        std::cout << std::endl;
        std::cout << (((indentStr((indent + int64_t(3))) + std::string("\"Balance\": ")) + ([&]{ std::ostringstream ss; any_to_stream(ss, std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(node)[std::string("Balance")]));
 return ss.str(); }())) + std::string(","));
        std::cout << std::endl;
        std::cout << (indentStr((indent + int64_t(3))) + std::string("\"Link\": ["));
        std::cout << std::endl;
        dumpNode(getLink(std::any_cast<std::map<std::string, std::any>>(node), int64_t(0)), (indent + int64_t(6)), true);
        dumpNode(getLink(std::any_cast<std::map<std::string, std::any>>(node), int64_t(1)), (indent + int64_t(6)), false);
        std::cout << (indentStr((indent + int64_t(3))) + std::string("]"));
        std::cout << std::endl;
        std::string end = (sp + std::string("}"));
        if (comma) {
            end = (end + std::string(","));
        }
        std::cout << end;
        std::cout << std::endl;
    }
}

void dump(std::any node, int64_t indent) {
    dumpNode(node, indent, false);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::any tree = nullptr;
        std::cout << std::string("Empty tree:");
        std::cout << std::endl;
        dump(tree, int64_t(0));
        std::cout << std::string("");
        std::cout << std::endl;
        std::cout << std::string("Insert test:");
        std::cout << std::endl;
        tree = Insert(tree, int64_t(3));
        tree = Insert(tree, int64_t(1));
        tree = Insert(tree, int64_t(4));
        tree = Insert(tree, int64_t(1));
        tree = Insert(tree, int64_t(5));
        dump(tree, int64_t(0));
        std::cout << std::string("");
        std::cout << std::endl;
        std::cout << std::string("Remove test:");
        std::cout << std::endl;
        tree = Remove(tree, int64_t(3));
        tree = Remove(tree, int64_t(1));
        std::map<std::string, std::any> t = std::any_cast<std::map<std::string, std::any>>(tree);
        t[std::string("Balance")] = int64_t(0);
        tree = t;
        dump(tree, int64_t(0));
    }
    return 0;
}
