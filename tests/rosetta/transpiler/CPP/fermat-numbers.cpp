// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:16:37 GMT+7
#include <iostream>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <vector>
#include <sstream>
#include <map>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>


static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ', '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ', '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ", "; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t pow_int(int64_t base, int64_t exp);
boost::multiprecision::cpp_int pow_big(const boost::multiprecision::cpp_int& base, int64_t exp);
boost::multiprecision::cpp_int parseBigInt(std::string str);
boost::multiprecision::cpp_int fermat(int64_t n);
std::vector<boost::multiprecision::cpp_int> primeFactorsBig(const boost::multiprecision::cpp_int& n);
std::string show_list(const std::vector<boost::multiprecision::cpp_int>& xs);
int main();

int64_t pow_int(int64_t base, int64_t exp) {
    int64_t result = int64_t(1);
    int64_t b = base;
    int64_t e = exp;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            result = (result * b);
        }
        b = (b * b);
        e = (int64_t)((e / int64_t(2)));
    }
    return result;
}

boost::multiprecision::cpp_int pow_big(const boost::multiprecision::cpp_int& base, int64_t exp) {
    boost::multiprecision::cpp_int result = int64_t(1);
    boost::multiprecision::cpp_int b = base;
    int64_t e = exp;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            result = (result * b);
        }
        b = (b * b);
        e = (int64_t)((e / int64_t(2)));
    }
    return result;
}

boost::multiprecision::cpp_int parseBigInt(std::string str) {
    int64_t i = int64_t(0);
    bool neg = false;
    if (((str.size() > int64_t(0)) && (str.substr(int64_t(0), int64_t(1) - int64_t(0)) == std::string("-")))) {
        neg = true;
        i = int64_t(1);
    }
    boost::multiprecision::cpp_int n = int64_t(0);
    while ((i < str.size())) {
        std::string ch = str.substr(i, (i + int64_t(1)) - i);
        int64_t d = std::stoi(ch);
        n = ((n * (boost::multiprecision::cpp_int)(int64_t(10))) + (boost::multiprecision::cpp_int)(d));
        i = (i + int64_t(1));
    }
    if (neg) {
        n = -n;
    }
    return n;
}

boost::multiprecision::cpp_int fermat(int64_t n) {
    int64_t p = pow_int(int64_t(2), n);
    return (pow_big((boost::multiprecision::cpp_int)(int64_t(2)), p) + (boost::multiprecision::cpp_int)(int64_t(1)));
}

std::vector<boost::multiprecision::cpp_int> primeFactorsBig(const boost::multiprecision::cpp_int& n) {
    std::vector<boost::multiprecision::cpp_int> factors = {};
    boost::multiprecision::cpp_int m = n;
    boost::multiprecision::cpp_int d = int64_t(2);
    while (((m % d) == int64_t(0))) {
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(d); return __tmp; }());
        m = (m / d);
    }
    d = int64_t(3);
    while (((d * d) <= m)) {
        while (((m % d) == int64_t(0))) {
            factors = ([&]{ auto __tmp = factors; __tmp.push_back(d); return __tmp; }());
            m = (m / d);
        }
        d = (d + int64_t(2));
    }
    if ((m > int64_t(1))) {
        factors = ([&]{ auto __tmp = factors; __tmp.push_back(m); return __tmp; }());
    }
    return factors;
}

std::string show_list(const std::vector<boost::multiprecision::cpp_int>& xs) {
    std::string line = std::string("");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << xs[i]; return ss.str(); }()));
        if ((i < (xs.size() - int64_t(1)))) {
            line = (line + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    return line;
}

int main() {
    std::vector<boost::multiprecision::cpp_int> nums = {};
    for (int i = int64_t(0); i < int64_t(8); i++ ) {
        nums = ([&]{ auto __tmp = nums; __tmp.push_back(fermat((int64_t)(i))); return __tmp; }());
    }
    std::cout << std::string("First 8 Fermat numbers:");
    std::cout << std::endl;
    for (boost::multiprecision::cpp_int n : nums) {
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << n; return ss.str(); }());
        std::cout << std::endl;
    }
    std::map<int64_t, std::vector<boost::multiprecision::cpp_int>> extra = std::map<int64_t, std::vector<boost::multiprecision::cpp_int>>{{int64_t(6), std::vector<boost::multiprecision::cpp_int>{(boost::multiprecision::cpp_int)(int64_t(274177)), (boost::multiprecision::cpp_int)(int64_t(67280421310721))}}, {int64_t(7), std::vector<boost::multiprecision::cpp_int>{parseBigInt(std::string("59649589127497217")), parseBigInt(std::string("5704689200685129054721"))}}};
    std::cout << std::string("\nFactors:");
    std::cout << std::endl;
    int64_t i = int64_t(0);
    while ((i < nums.size())) {
        std::vector<boost::multiprecision::cpp_int> facs = {};
        if ((i <= int64_t(5))) {
            facs = primeFactorsBig(nums[i]);
        } else {
            facs = extra.at(i);
        }
        std::cout << (((std::string("F") + ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }())) + std::string(" = ")) + show_list(facs));
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    return 0;
}
