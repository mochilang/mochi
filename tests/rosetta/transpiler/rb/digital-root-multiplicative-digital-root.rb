# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pad(s, width)
    out = s
    while out.length < width
      out = _add(" ", out)
    end
    return out
  end
  def mult(n, base)
    m = 1
    x = n
    b = (base)
    while x > (0)
      m = m * (x % b)
      x = x / b
    end
    return m
  end
  def multDigitalRoot(n, base)
    m = n
    mp = 0
    b = (base)
    while m >= b
      m = mult(m, base)
      mp = _add(mp, 1)
    end
    return MDRResult.new(mp: mp, mdr: ((m).to_i))
  end
  def main()
    base = 10
    size = 5
    puts(_add(_add(_add(_add(pad("Number", 20), " "), pad("MDR", 3)), " "), pad("MP", 3)))
    nums = [(123321), (7739), (893), (899998), (3778888999), (277777788888899)]
    i = 0
    while i < nums.length
      n = nums[i]
      r = multDigitalRoot(n, base)
      puts(_add(_add(_add(_add(pad((n).to_s, 20), " "), pad((r.mdr).to_s, 3)), " "), pad((r.mp).to_s, 3)))
      i = _add(i, 1)
    end
    puts("")
    list = []
    idx = 0
    while idx < base
      list = list + [[]]
      idx = _add(idx, 1)
    end
    cnt = size * base
    n = 0
    b = (base)
    while cnt > 0
      r = multDigitalRoot(n, base)
      mdr = r.mdr
      if list[mdr].length < size
        list[mdr] = list[mdr] + [(n).to_i]
        cnt = cnt - 1
      end
      n = _add(n, (1))
    end
    puts("MDR: First")
    j = 0
    while j < base
      puts(_add(_add(pad((j).to_s, 3), ": "), (list[j]).to_s))
      j = _add(j, 1)
    end
  end
  MDRResult = Struct.new(:mp, :mdr, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
