# Generated by Mochi transpiler v0.10.41 on 2025-07-26 16:03 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def xor(a, b)
    res = 0
    bit = 1
    x = a
    y = b
    while x > 0 || y > 0
      abit = x % 2
      bbit = y % 2
      if abit != bbit
        res = _add(res, bit)
      end
      x = x / 2
      y = y / 2
      bit = bit * 2
    end
    return res
  end
  def rshift(x, n)
    v = x
    i = 0
    while i < n
      v = v / 2
      i = _add(i, 1)
    end
    return v
  end
  def ord(ch)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    idx = _indexOf(upper, ch)
    if idx >= 0
      return _add(65, idx)
    end
    idx = _indexOf(lower, ch)
    if idx >= 0
      return _add(97, idx)
    end
    if ch == " "
      return 32
    end
    return 0
  end
  def toHex(n)
    digits = "0123456789ABCDEF"
    if n == 0
      return "0"
    end
    v = n
    out = ""
    while v > 0
      d = v % 16
      out = _add(digits[d..._add(d, 1)], out)
      v = v / 16
    end
    return out
  end
  def crc32Table()
    table = []
    i = 0
    while i < 256
      word = i
      j = 0
      while j < 8
        if word % 2 == 1
          word = xor(rshift(word, 1), 3988292384)
        else
          word = rshift(word, 1)
        end
        j = _add(j, 1)
      end
      table = table + [word]
      i = _add(i, 1)
    end
    return table
  end
  $table = crc32Table()
  def crc32(s)
    crc = 4294967295
    i = 0
    while i < s.length
      c = ord(s[i..._add(i, 1)])
      idx = xor(crc % 256, c)
      crc = xor($table[idx], rshift(crc, 8))
      i = _add(i, 1)
    end
    return 4294967295 - crc
  end
  def main()
    s = "The quick brown fox jumps over the lazy dog"
    result = crc32(s)
    hex = toHex(result)
    puts(hex)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
