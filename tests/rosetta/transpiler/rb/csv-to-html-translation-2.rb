# Generated by Mochi transpiler v0.10.56 on 2025-08-03 16:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _split(s, sep)
  s.to_s.split(sep.to_s)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  $c = _add(_add(_add(_add(_add("Character,Speech\n", "The multitude,The messiah! Show us the messiah!\n"), "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n"), "The multitude,Who are you?\n"), "Brians mother,I'm his mother; that's who!\n"), "The multitude,Behold his mother! Behold his mother!")
  $rows = []
  _split($c, "\n").each do |line|
    $rows = ($rows << _split(line, ","))
  end
  $headings = true
  puts("<table>")
  if $headings
    if $rows.length > 0
      $th = ""
      $rows[0].each do |h|
        $th = _add(_add(_add($th, "<th>"), h), "</th>")
      end
      puts("   <thead>")
      puts(_add(_add("      <tr>", $th), "</tr>"))
      puts("   </thead>")
      puts("   <tbody>")
      $i = 1
      while $i < $rows.length
        cells = ""
        $rows[$i].each do |cell|
          cells = _add(_add(_add(cells, "<td>"), cell), "</td>")
        end
        puts(_add(_add("      <tr>", cells), "</tr>"))
        $i = _add($i, 1)
      end
      puts("   </tbody>")
    end
  else
    $rows.each do |row|
      cells = ""
      row.each do |cell|
        cells = _add(_add(_add(cells, "<td>"), cell), "</td>")
      end
      puts(_add(_add("    <tr>", cells), "</tr>"))
    end
  end
  puts("</table>")
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
