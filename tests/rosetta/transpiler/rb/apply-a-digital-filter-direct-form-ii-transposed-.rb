# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:12 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def applyFilter(input, a, b)
    out = []
    scale = 1.0 / a[0]
    i = 0
    while i < input.length
      tmp = 0.0
      j = 0
      while j <= i && j < b.length
        tmp = _add(tmp, b[j] * input[i - j])
        j = _add(j, 1)
      end
      j = 0
      while j < i && _add(j, 1) < a.length
        tmp = tmp - a[_add(j, 1)] * out[i - j - 1]
        j = _add(j, 1)
      end
      out = out + [tmp * scale]
      i = _add(i, 1)
    end
    return out
  end
  $a = [1.0, -2.7756e-16, 0.33333333, -1.85e-17]
  $b = [0.16666667, 0.5, 0.5, 0.16666667]
  $sig = [-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589]
  $res = applyFilter($sig, $a, $b)
  $k = 0
  while $k < $res.length
    puts($res[$k])
    $k = _add($k, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
