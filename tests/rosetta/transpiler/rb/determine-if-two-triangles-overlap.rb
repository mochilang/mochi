# Generated by Mochi transpiler v0.10.41 on 2025-07-27 09:09 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  Point = Struct.new(:x, :y, keyword_init: true)
  Triangle = Struct.new(:p1, :p2, :p3, keyword_init: true)
  def fmt1(f)
    s = (f).to_s
    idx = _indexOf(s, ".")
    if idx < 0
      s = _add(s, ".0")
    else
      need = _add(idx, 2)
      if s.length > need
        s = s[0...need]
      else
        while s.length < need
          s = _add(s, "0")
        end
      end
    end
    return s
  end
  def pointStr(p)
    return _add(_add(_add(_add("(", fmt1(p.x)), ", "), fmt1(p.y)), ")")
  end
  def triangleStr(t)
    return _add(_add(_add(_add(_add("Triangle ", pointStr(t.p1)), ", "), pointStr(t.p2)), ", "), pointStr(t.p3))
  end
  def orient(a, b, c)
    return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)
  end
  def pointInTri(p, t, onBoundary)
    d1 = orient(p, t.p1, t.p2)
    d2 = orient(p, t.p2, t.p3)
    d3 = orient(p, t.p3, t.p1)
    hasNeg = d1 < 0.0 || d2 < 0.0 || d3 < 0.0
    hasPos = d1 > 0.0 || d2 > 0.0 || d3 > 0.0
    if onBoundary
      return !(hasNeg && hasPos)
    end
    return !(hasNeg && hasPos) && d1 != 0.0 && d2 != 0.0 && d3 != 0.0
  end
  def edgeCheck(a0, a1, bs, onBoundary)
    d0 = orient(a0, a1, bs[0])
    d1 = orient(a0, a1, bs[1])
    d2 = orient(a0, a1, bs[2])
    if onBoundary
      return d0 <= 0.0 && d1 <= 0.0 && d2 <= 0.0
    end
    return d0 < 0.0 && d1 < 0.0 && d2 < 0.0
  end
  def triTri2D(t1, t2, onBoundary)
    a = [t1.p1, t1.p2, t1.p3]
    b = [t2.p1, t2.p2, t2.p3]
    i = 0
    while i < 3
      j = (_add(i, 1)) % 3
      if edgeCheck(a[i], a[j], b, onBoundary)
        return false
      end
      i = _add(i, 1)
    end
    i = 0
    while i < 3
      j = (_add(i, 1)) % 3
      if edgeCheck(b[i], b[j], a, onBoundary)
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def iff(cond, a, b)
    if cond
      return a
    else
      return b
    end
  end
  def main()
    t1 = Triangle.new(p1: Point.new(x: 0.0, y: 0.0), p2: Point.new(x: 5.0, y: 0.0), p3: Point.new(x: 0.0, y: 5.0))
    t2 = Triangle.new(p1: Point.new(x: 0.0, y: 0.0), p2: Point.new(x: 5.0, y: 0.0), p3: Point.new(x: 0.0, y: 6.0))
    puts(_add(triangleStr(t1), " and"))
    puts(triangleStr(t2))
    overlapping = triTri2D(t1, t2, true)
    puts(iff(overlapping, "overlap", "do not overlap"))
    puts("")
    t1 = Triangle.new(p1: Point.new(x: 0.0, y: 0.0), p2: Point.new(x: 0.0, y: 5.0), p3: Point.new(x: 5.0, y: 0.0))
    t2 = t1
    puts(_add(triangleStr(t1), " and"))
    puts(triangleStr(t2))
    overlapping = triTri2D(t1, t2, true)
    puts(iff(overlapping, "overlap (reversed)", "do not overlap"))
    puts("")
    t1 = Triangle.new(p1: Point.new(x: 0.0, y: 0.0), p2: Point.new(x: 5.0, y: 0.0), p3: Point.new(x: 0.0, y: 5.0))
    t2 = Triangle.new(p1: Point.new(x: -10.0, y: 0.0), p2: Point.new(x: -5.0, y: 0.0), p3: Point.new(x: -1.0, y: 6.0))
    puts(_add(triangleStr(t1), " and"))
    puts(triangleStr(t2))
    overlapping = triTri2D(t1, t2, true)
    puts(iff(overlapping, "overlap", "do not overlap"))
    puts("")
    t1["p3"] = Point.new(x: 2.5, y: 5.0)
    t2 = Triangle.new(p1: Point.new(x: 0.0, y: 4.0), p2: Point.new(x: 2.5, y: -1.0), p3: Point.new(x: 5.0, y: 4.0))
    puts(_add(triangleStr(t1), " and"))
    puts(triangleStr(t2))
    overlapping = triTri2D(t1, t2, true)
    puts(iff(overlapping, "overlap", "do not overlap"))
    puts("")
    t1 = Triangle.new(p1: Point.new(x: 0.0, y: 0.0), p2: Point.new(x: 1.0, y: 1.0), p3: Point.new(x: 0.0, y: 2.0))
    t2 = Triangle.new(p1: Point.new(x: 2.0, y: 1.0), p2: Point.new(x: 3.0, y: 0.0), p3: Point.new(x: 3.0, y: 2.0))
    puts(_add(triangleStr(t1), " and"))
    puts(triangleStr(t2))
    overlapping = triTri2D(t1, t2, true)
    puts(iff(overlapping, "overlap", "do not overlap"))
    puts("")
    t2 = Triangle.new(p1: Point.new(x: 2.0, y: 1.0), p2: Point.new(x: 3.0, y: -2.0), p3: Point.new(x: 3.0, y: 4.0))
    puts(_add(triangleStr(t1), " and"))
    puts(triangleStr(t2))
    overlapping = triTri2D(t1, t2, true)
    puts(iff(overlapping, "overlap", "do not overlap"))
    puts("")
    t1 = Triangle.new(p1: Point.new(x: 0.0, y: 0.0), p2: Point.new(x: 1.0, y: 0.0), p3: Point.new(x: 0.0, y: 1.0))
    t2 = Triangle.new(p1: Point.new(x: 1.0, y: 0.0), p2: Point.new(x: 2.0, y: 0.0), p3: Point.new(x: 1.0, y: 1.1))
    puts(_add(triangleStr(t1), " and"))
    puts(triangleStr(t2))
    puts("which have only a single corner in contact, if boundary points collide")
    overlapping = triTri2D(t1, t2, true)
    puts(iff(overlapping, "overlap", "do not overlap"))
    puts("")
    puts(_add(triangleStr(t1), " and"))
    puts(triangleStr(t2))
    puts("which have only a single corner in contact, if boundary points do not collide")
    overlapping = triTri2D(t1, t2, false)
    puts(iff(overlapping, "overlap", "do not overlap"))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
