# Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def toBase(n, b)
    if n == 0
      return "0"
    end
    s = ""
    x = n
    while x > 0
      s = _add((x % b).to_s, s)
      x = ((x / b)).to_i
    end
    return s
  end
  def reverseStr(s)
    out = ""
    i = s.length - 1
    while i >= 0
      out = _add(out, s[i..._add(i, 1)])
      i = i - 1
    end
    return out
  end
  def isPal(s)
    return s == reverseStr(s)
  end
  def main()
    puts("Numbers palindromic in both binary and ternary :\n")
    count = 0
    n = 0
    while count < 4
      b2 = toBase(n, 2)
      b3 = toBase(n, 3)
      if isPal(b2) && isPal(b3)
        puts((n).to_s)
        count = _add(count, 1)
      end
      n = _add(n, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
