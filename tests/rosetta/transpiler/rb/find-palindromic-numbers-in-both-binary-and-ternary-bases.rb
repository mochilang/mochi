# Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def toBase(n, b)
    if n == 0
      return "0"
    end
    s = ""
    x = n
    while x > 0
      s = _add((x % b).to_s, s)
      x = ((x / b)).to_i
    end
    return s
  end
  def parseIntStr(str)
    i = 0
    neg = false
    if str.length > 0 && str[0] == "-"
      neg = true
      i = 1
    end
    n = 0
    while i < str.length
      n = _add(n * 10, ((str[i..._add(i, 1)]).to_i)) - (("0").to_i)
      i = _add(i, 1)
    end
    if neg
      n = -n
    end
    return n
  end
  def parseIntBase(s, b)
    n = 0
    i = 0
    while i < s.length
      n = _add(n * b, parseIntStr(s[i..._add(i, 1)]))
      i = _add(i, 1)
    end
    return n
  end
  def reverseStr(s)
    out = ""
    i = s.length - 1
    while i >= 0
      out = _add(out, s[i..._add(i, 1)])
      i = i - 1
    end
    return out
  end
  def isPalindrome(s)
    return s == reverseStr(s)
  end
  def isPalindromeBin(n)
    b = toBase(n, 2)
    return isPalindrome(b)
  end
  def myMin(a, b)
    if a < b
      return a
    end
    return b
  end
  def myMax(a, b)
    if a > b
      return a
    end
    return b
  end
  def reverse3(n)
    x = 0
    y = n
    while y != 0
      x = _add(x * 3, (y % 3))
      y = ((y / 3)).to_i
    end
    return x
  end
  def show(n)
    puts(_add("Decimal : ", (n).to_s))
    puts(_add("Binary  : ", toBase(n, 2)))
    puts(_add("Ternary : ", toBase(n, 3)))
    puts("")
  end
  def main()
    puts("The first 6 numbers which are palindromic in both binary and ternary are :\n")
    show(0)
    count = 1
    lo = 0
    hi = 1
    pow2 = 1
    pow3 = 1
    while true
      i = lo
      while i < hi
        n = _add((_add(i * 3, 1)) * pow3, reverse3(i))
        if isPalindromeBin(n)
          show(n)
          count = _add(count, 1)
          if count >= 6
            return
          end
        end
        i = _add(i, 1)
      end
      if i == pow3
        pow3 = pow3 * 3
      else
        pow2 = pow2 * 4
      end
      while true
        while pow2 <= pow3
          pow2 = pow2 * 4
        end
        lo2 = (((pow2 / pow3 - 1) / 3)).to_i
        hi2 = _add((((pow2 * 2 / pow3 - 1) / 3)).to_i, 1)
        lo3 = ((pow3 / 3)).to_i
        hi3 = pow3
        if lo2 >= hi3
          pow3 = pow3 * 3
        else
          if lo3 >= hi2
            pow2 = pow2 * 4
          else
            lo = myMax(lo2, lo3)
            hi = myMin(hi2, hi3)
            break
          end
        end
      end
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
