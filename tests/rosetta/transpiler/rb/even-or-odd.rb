# Generated by Mochi transpiler v0.10.42 on 2025-07-27 15:12 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def parseBigInt(str)
    i = 0
    neg = false
    if str.length > 0 && str[0...1] == "-"
      neg = true
      i = 1
    end
    n = 0
    while i < str.length
      ch = str[i..._add(i, 1)]
      d = (ch).to_i
      n = _add(n * ((10)), ((d)))
      i = _add(i, 1)
    end
    if neg
      n = -n
    end
    return n
  end
  def pad(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def showInt(n)
    line = _add(_add("Testing integer ", pad(n, 3)), ":  ")
    if n % 2 == 0
      line = _add(line, "even ")
    else
      line = _add(line, " odd ")
    end
    if n % 2 == 0
      line = _add(line, "even")
    else
      line = _add(line, " odd")
    end
    puts(line)
  end
  def showBig(s)
    b = parseBigInt(s)
    line = _add(_add("Testing big integer ", (b).to_s), ":  ")
    if b % ((2)) == (0)
      line = _add(line, "even")
    else
      line = _add(line, "odd")
    end
    puts(line)
  end
  def main()
    showInt(-2)
    showInt(-1)
    showInt(0)
    showInt(1)
    showInt(2)
    showBig("-222222222222222222222222222222222222")
    showBig("-1")
    showBig("0")
    showBig("1")
    showBig("222222222222222222222222222222222222")
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
