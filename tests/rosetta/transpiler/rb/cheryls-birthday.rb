# Generated by Mochi transpiler v0.10.42 on 2025-07-28 01:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def monthUnique(b, list)
    c = 0
    list.each do |x|
      if x.month == b.month
        c = _add(c, 1)
      end
    end
    return c == 1
  end
  def dayUnique(b, list)
    c = 0
    list.each do |x|
      if x.day == b.day
        c = _add(c, 1)
      end
    end
    return c == 1
  end
  def monthWithUniqueDay(b, list)
    list.each do |x|
      if x.month == b.month && dayUnique(x, list)
        return true
      end
    end
    return false
  end
  def bstr(b)
    months = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    return _add(_add(months[b.month], " "), (b.day).to_s)
  end
  Birthday = Struct.new(:month, :day, keyword_init: true)
  choices = [Birthday.new(month: 5, day: 15), Birthday.new(month: 5, day: 16), Birthday.new(month: 5, day: 19), Birthday.new(month: 6, day: 17), Birthday.new(month: 6, day: 18), Birthday.new(month: 7, day: 14), Birthday.new(month: 7, day: 16), Birthday.new(month: 8, day: 14), Birthday.new(month: 8, day: 15), Birthday.new(month: 8, day: 17)]
  filtered = []
  choices.each do |bd|
    if !monthUnique(bd, choices)
      filtered = filtered + [bd]
    end
  end
  filtered2 = []
  filtered.each do |bd|
    if !monthWithUniqueDay(bd, filtered)
      filtered2 = filtered2 + [bd]
    end
  end
  filtered3 = []
  filtered2.each do |bd|
    if dayUnique(bd, filtered2)
      filtered3 = filtered3 + [bd]
    end
  end
  filtered4 = []
  filtered3.each do |bd|
    if monthUnique(bd, filtered3)
      filtered4 = filtered4 + [bd]
    end
  end
  if filtered4.length == 1
    puts(_add("Cheryl's birthday is ", bstr(filtered4[0])))
  else
    puts("Something went wrong!")
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
