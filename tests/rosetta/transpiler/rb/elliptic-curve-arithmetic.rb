# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def zero()
    return Pt.new(x: 0.0, y: 0.0, inf: true)
  end
  def isZero(p)
    return p.inf
  end
  def neg(p)
    return Pt.new(x: p.x, y: -p.y, inf: p.inf)
  end
  def dbl(p)
    if isZero(p)
      return p
    end
    _L = (3.0 * p.x * p.x) / (2.0 * p.y)
    x = _L * _L - 2.0 * p.x
    return Pt.new(x: x, y: _L * (p.x - x) - p.y, inf: false)
  end
  def add(p, q)
    if isZero(p)
      return q
    end
    if isZero(q)
      return p
    end
    if p.x == q.x
      if p.y == q.y
        return dbl(p)
      end
      return zero()
    end
    _L = (q.y - p.y) / (q.x - p.x)
    x = _L * _L - p.x - q.x
    return Pt.new(x: x, y: _L * (p.x - x) - p.y, inf: false)
  end
  def mul(p, n)
    r = zero()
    q = p
    k = n
    while k > 0
      if k % 2 == 1
        r = add(r, q)
      end
      q = dbl(q)
      k = k / 2
    end
    return r
  end
  def cbrtApprox(x)
    guess = x
    i = 0
    while i < 40
      guess = (_add(2.0 * guess, x / (guess * guess))) / 3.0
      i = _add(i, 1)
    end
    return guess
  end
  def fromY(y)
    return Pt.new(x: cbrtApprox(y * y - $bCoeff), y: y, inf: false)
  end
  def show(s, p)
    if isZero(p)
      puts(_add(s, "Zero"))
    else
      puts(_add(_add(_add(_add(_add(s, "("), (p.x).to_s), ", "), (p.y).to_s), ")"))
    end
  end
  def main()
    a = fromY(1.0)
    b = fromY(2.0)
    show("a = ", a)
    show("b = ", b)
    c = add(a, b)
    show("c = a + b = ", c)
    d = neg(c)
    show("d = -c = ", d)
    show("c + d = ", add(c, d))
    show("a + b + d = ", add(a, add(b, d)))
    show("a * 12345 = ", mul(a, 12345))
  end
  Pt = Struct.new(:x, :y, :inf, keyword_init: true)
  $bCoeff = 7.0
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
