# Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:07 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def isPrime(n)
    if n < 2
      return false
    end
    if n % 2 == 0
      return n == 2
    end
    if n % 3 == 0
      return n == 3
    end
    d = 5
    while d * d <= n
      if n % d == 0
        return false
      end
      d = _add(d, 2)
      if n % d == 0
        return false
      end
      d = _add(d, 4)
    end
    return true
  end
  def countPrimeFactors(n)
    if n == 1
      return 0
    end
    if isPrime(n)
      return 1
    end
    count = 0
    f = 2
    while true
      if n % f == 0
        count = _add(count, 1)
        n = n / f
        if n == 1
          return count
        end
        if isPrime(n)
          f = n
        end
      else
        if f >= 3
          f = _add(f, 2)
        else
          f = 3
        end
      end
    end
    return count
  end
  def pad4(n)
    s = (n).to_s
    while s.length < 4
      s = _add(" ", s)
    end
    return s
  end
  def main()
    max = 120
    puts(_add(_add("The attractive numbers up to and including ", (max).to_s), " are:"))
    count = 0
    line = ""
    lineCount = 0
    i = 1
    while i <= max
      c = countPrimeFactors(i)
      if isPrime(c)
        line = _add(line, pad4(i))
        count = _add(count, 1)
        lineCount = _add(lineCount, 1)
        if lineCount == 20
          puts(line)
          line = ""
          lineCount = 0
        end
      end
      i = _add(i, 1)
    end
    if lineCount > 0
      puts(line)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
