# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def parseIntStr(str)
    i = 0
    neg = false
    if str.length > 0 && str[0...1] == "-"
      neg = true
      i = 1
    end
    n = 0
    digits = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    while i < str.length
      n = _add(n * 10, digits[str[i..._add(i, 1)]])
      i = _add(i, 1)
    end
    if neg
      n = -n
    end
    return n
  end
  def main()
    n = 0
    while n < 1 || n > 5
      puts("How many integer variables do you want to create (max 5) : ")
      line = _input()
      if line.length > 0
        n = parseIntStr(line)
      end
    end
    vars = {}
    puts("OK, enter the variable names and their values, below\n")
    i = 1
    while i <= n
      puts(_add(_add("\n  Variable ", (i).to_s), "\n"))
      puts("    Name  : ")
      name = _input()
      if vars.key?(name)
        puts("  Sorry, you've already created a variable of that name, try again")
        next
      end
      value = 0
      while true
        puts("    Value : ")
        valstr = _input()
        if valstr.length == 0
          puts("  Not a valid integer, try again")
          next
        end
        ok = true
        j = 0
        neg = false
        if valstr[0...1] == "-"
          neg = true
          j = 1
        end
        while j < valstr.length
          ch = valstr[j..._add(j, 1)]
          if ch < "0" || ch > "9"
            ok = false
            break
          end
          j = _add(j, 1)
        end
        if !ok
          puts("  Not a valid integer, try again")
          next
        end
        value = parseIntStr(valstr)
        break
      end
      vars[name] = value
      i = _add(i, 1)
    end
    puts("\nEnter q to quit")
    while true
      puts("\nWhich variable do you want to inspect : ")
      name = _input()
      if name.downcase() == "q"
        return
      end
      if vars.key?(name)
        puts(_add("It's value is ", (vars[name]).to_s))
      else
        puts("Sorry there's no variable of that name, try again")
      end
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
