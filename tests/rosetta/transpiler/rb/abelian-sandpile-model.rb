# Generated by Mochi transpiler v0.10.40 on 2025-07-25 10:39 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  $dim = 16
  def newPile(d)
    b = []
    y = 0
    while y < d
      row = []
      x = 0
      while x < d
        row = row + [0]
        x = _add(x, 1)
      end
      b = b + [row]
      y = _add(y, 1)
    end
    return b
  end
  def handlePile(pile, x, y)
    if pile[y][x] >= 4
      pile[y][x] = pile[y][x] - 4
      if y > 0
        pile[y - 1][x] = _add(pile[y - 1][x], 1)
        if pile[y - 1][x] >= 4
          pile = handlePile(pile, x, y - 1)
        end
      end
      if x > 0
        pile[y][x - 1] = _add(pile[y][x - 1], 1)
        if pile[y][x - 1] >= 4
          pile = handlePile(pile, x - 1, y)
        end
      end
      if y < $dim - 1
        pile[_add(y, 1)][x] = _add(pile[_add(y, 1)][x], 1)
        if pile[_add(y, 1)][x] >= 4
          pile = handlePile(pile, x, _add(y, 1))
        end
      end
      if x < $dim - 1
        pile[y][_add(x, 1)] = _add(pile[y][_add(x, 1)], 1)
        if pile[y][_add(x, 1)] >= 4
          pile = handlePile(pile, _add(x, 1), y)
        end
      end
      pile = handlePile(pile, x, y)
    end
    return pile
  end
  def drawPile(pile, d)
    chars = [" ", "░", "▓", "█"]
    row = 0
    while row < d
      line = ""
      col = 0
      while col < d
        v = pile[row][col]
        if v > 3
          v = 3
        end
        line = _add(line, chars[v])
        col = _add(col, 1)
      end
      puts(line)
      row = _add(row, 1)
    end
  end
  def main()
    pile = newPile(16)
    hdim = 7
    pile[hdim][hdim] = 16
    pile = handlePile(pile, hdim, hdim)
    drawPile(pile, 16)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
