# Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  $daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
  $start = [3, 6, 6, 2, 4, 0, 2, 5, 1, 3, 6, 1]
  $months = [" January ", " February", "  March  ", "  April  ", "   May   ", "   June  ", "   July  ", "  August ", "September", " October ", " November", " December"]
  $days = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
  puts("                                [SNOOPY]\n")
  puts("                                  1969\n")
  $qtr = 0
  while $qtr < 4
    $mi = 0
    while $mi < 3
      puts(([_add(_add("      ", $months[_add($qtr * 3, $mi)]), "           "), (false ? 'True' : 'False')]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
      $mi = _add($mi, 1)
    end
    puts("")
    $mi = 0
    while $mi < 3
      $d = 0
      while $d < 7
        puts(([_add(" ", $days[$d]), (false ? 'True' : 'False')]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
        $d = _add($d, 1)
      end
      puts((["     ", (false ? 'True' : 'False')]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
      $mi = _add($mi, 1)
    end
    puts("")
    $week = 0
    while $week < 6
      $mi = 0
      while $mi < 3
        $day = 0
        while $day < 7
          $m = _add($qtr * 3, $mi)
          $val = _add(_add($week * 7, $day) - $start[$m], 1)
          if $val >= 1 && $val <= $daysInMonth[$m]
            $s = ($val).to_s
            if $s.length == 1
              $s = _add(" ", $s)
            end
            puts(([_add(" ", $s), (false ? 'True' : 'False')]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
          else
            puts((["   ", (false ? 'True' : 'False')]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
          end
          $day = _add($day, 1)
        end
        puts((["     ", (false ? 'True' : 'False')]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
        $mi = _add($mi, 1)
      end
      puts("")
      $week = _add($week, 1)
    end
    puts("")
    $qtr = _add($qtr, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
