# Generated by Mochi transpiler v0.10.50 on 2025-07-31 01:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def primesUpTo(n)
    sieve = []
    i = 0
    while i <= n
      sieve = sieve + [true]
      i = _add(i, 1)
    end
    p = 2
    while p * p <= n
      if sieve[p]
        m = p * p
        while m <= n
          sieve[m] = false
          m = _add(m, p)
        end
      end
      p = _add(p, 1)
    end
    res = []
    x = 2
    while x <= n
      if sieve[x]
        res = res + [x]
      end
      x = _add(x, 1)
    end
    return res
  end
  def longestSeq(dir)
    pd = 0
    longSeqs = [[2]]
    currSeq = [2]
    i = 1
    while i < $primes.length
      d = $primes[i] - $primes[i - 1]
      if (dir == "ascending" && d <= pd) || (dir == "descending" && d >= pd)
        if currSeq.length > longSeqs[0].length
          longSeqs = [currSeq]
        else
          if currSeq.length == longSeqs[0].length
            longSeqs = longSeqs + [currSeq]
          end
        end
        currSeq = [$primes[i - 1], $primes[i]]
      else
        currSeq = currSeq + [$primes[i]]
      end
      pd = d
      i = _add(i, 1)
    end
    if currSeq.length > longSeqs[0].length
      longSeqs = [currSeq]
    else
      if currSeq.length == longSeqs[0].length
        longSeqs = longSeqs + [currSeq]
      end
    end
    puts(_add(_add(_add(_add("Longest run(s) of primes with ", dir), " differences is "), (longSeqs[0].length).to_s), " :"))
    longSeqs.each do |ls|
      diffs = []
      j = 1
      while j < ls.length
        diffs = diffs + [ls[j] - ls[j - 1]]
        j = _add(j, 1)
      end
      k = 0
      while k < ls.length - 1
        puts(([_add(_add(_add((ls[k]).to_s, " ("), (diffs[k]).to_s), ") "), (false ? 'True' : 'False')]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
        k = _add(k, 1)
      end
      puts((ls[ls.length - 1]).to_s)
    end
    puts("")
  end
  def main()
    puts("For primes < 1 million:\n")
    ["ascending", "descending"].each do |dir|
      longestSeq(dir)
    end
  end
  $LIMIT = 999999
  $primes = primesUpTo($LIMIT)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
