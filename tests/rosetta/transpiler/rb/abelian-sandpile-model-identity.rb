# Generated by Mochi transpiler v0.10.40 on 2025-07-25 10:39 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def neighborsList()
    return [[1, 3], [0, 2, 4], [1, 5], [0, 4, 6], [1, 3, 5, 7], [2, 4, 8], [3, 7], [4, 6, 8], [5, 7]]
  end
  def plus(a, b)
    res = []
    i = 0
    while i < a.length
      res = res + [_add(a[i], b[i])]
      i = _add(i, 1)
    end
    return res
  end
  def isStable(p)
    p.each do |v|
      if v > 3
        return false
      end
    end
    return true
  end
  def topple(p)
    neighbors = neighborsList()
    i = 0
    while i < p.length
      if p[i] > 3
        p[i] = p[i] - 4
        nbs = neighbors[i]
        nbs.each do |j|
          p[j] = _add(p[j], 1)
        end
        return 0
      end
      i = _add(i, 1)
    end
    return 0
  end
  def pileString(p)
    s = ""
    r = 0
    while r < 3
      c = 0
      while c < 3
        s = _add(_add(s, (p[_add(3 * r, c)]).to_s), " ")
        c = _add(c, 1)
      end
      s = _add(s, "\n")
      r = _add(r, 1)
    end
    return s
  end
  puts("Avalanche of topplings:\n")
  $s4 = [4, 3, 3, 3, 1, 2, 0, 2, 3]
  puts(pileString($s4))
  while !isStable($s4)
    topple($s4)
    puts(pileString($s4))
  end
  puts("Commutative additions:\n")
  $s1 = [1, 2, 0, 2, 1, 1, 0, 1, 3]
  $s2 = [2, 1, 3, 1, 0, 1, 0, 1, 0]
  $s3_a = plus($s1, $s2)
  while !isStable($s3_a)
    topple($s3_a)
  end
  $s3_b = plus($s2, $s1)
  while !isStable($s3_b)
    topple($s3_b)
  end
  puts(_add(_add(_add(_add(pileString($s1), "\nplus\n\n"), pileString($s2)), "\nequals\n\n"), pileString($s3_a)))
  puts(_add(_add(_add(_add(_add("and\n\n", pileString($s2)), "\nplus\n\n"), pileString($s1)), "\nalso equals\n\n"), pileString($s3_b)))
  puts("Addition of identity sandpile:\n")
  $s3 = [3, 3, 3, 3, 3, 3, 3, 3, 3]
  $s3_id = [2, 1, 2, 1, 0, 1, 2, 1, 2]
  $s4b = plus($s3, $s3_id)
  while !isStable($s4b)
    topple($s4b)
  end
  puts(_add(_add(_add(_add(pileString($s3), "\nplus\n\n"), pileString($s3_id)), "\nequals\n\n"), pileString($s4b)))
  puts("Addition of identities:\n")
  $s5 = plus($s3_id, $s3_id)
  while !isStable($s5)
    topple($s5)
  end
  puts(_add(_add(_add(_add(pileString($s3_id), "\nplus\n\n"), pileString($s3_id)), "\nequals\n\n"), pileString($s5)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
