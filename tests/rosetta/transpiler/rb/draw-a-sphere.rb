# Generated by Mochi transpiler v0.10.42 on 2025-07-27 10:22 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  V3 = Struct.new(:x, :y, :z, keyword_init: true)
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def powf(base, exp)
    result = 1.0
    i = 0
    while i < exp
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def normalize(v)
    len = sqrtApprox(_add(_add(v.x * v.x, v.y * v.y), v.z * v.z))
    return V3.new(x: v.x / len, y: v.y / len, z: v.z / len)
  end
  def dot(a, b)
    d = _add(_add(a.x * b.x, a.y * b.y), a.z * b.z)
    if d < 0.0
      return -d
    end
    return 0.0
  end
  def drawSphere(r, k, ambient, light, shades)
    i = -r
    while i <= r
      x = _add(((i).to_f), 0.5)
      line = ""
      j = -(2 * r)
      while j <= 2 * r
        y = _add(((j).to_f) / 2.0, 0.5)
        if _add(x * x, y * y) <= ((r).to_f) * ((r).to_f)
          zsq = ((r).to_f) * ((r).to_f) - x * x - y * y
          vec = normalize(V3.new(x: x, y: y, z: sqrtApprox(zsq)))
          b = _add(powf(dot(light, vec), k), ambient)
          intensity = (((1.0 - b) * (((shades.length).to_f) - 1.0))).to_i
          if intensity < 0
            intensity = 0
          end
          if intensity >= shades.length
            intensity = shades.length - 1
          end
          line = _add(line, shades[intensity..._add(intensity, 1)])
        else
          line = _add(line, " ")
        end
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  def main()
    shades = ".:!*oe&#%@"
    light = normalize(V3.new(x: 30.0, y: 30.0, z: -50.0))
    drawSphere(20, 4, 0.1, light, shades)
    drawSphere(10, 2, 0.4, light, shades)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
