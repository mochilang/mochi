# Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def floorf(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def frac(x)
    return x - floorf(x)
  end
  def sinApprox(x)
    term = x
    sum = x
    n = 1
    while n <= 10
      denom = (((2 * n) * (_add(2 * n, 1)))).to_f
      term = -term * x * x / denom
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def sqrtApprox(x)
    if x <= 0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  $PI = 3.141592653589793
  $nframes = 10
  $w = 32
  $h = 32
  $total = 0
  $f = 1
  while $f <= $nframes
    y = 0
    while y < $h
      x = 0
      while x < $w
        fx = (x).to_f
        fy = (y).to_f
        value = sinApprox(fx / 16.0)
        value = _add(value, sinApprox(fy / 8.0))
        value = _add(value, sinApprox((_add(fx, fy)) / 16.0))
        value = _add(value, sinApprox(sqrtApprox(_add(fx * fx, fy * fy)) / 8.0))
        value = _add(value, 4.0)
        value = value / 8.0
        rem = frac(_add(value, (($f).to_f) / (($nframes).to_f)))
        ci = _add(((($nframes).to_f * rem)).to_i, 1)
        $total = _add($total, ci)
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    $f = _add($f, 1)
  end
  puts($total)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
