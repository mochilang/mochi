# Generated by Mochi transpiler v0.10.40 on 2025-07-25 12:23 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def poolPut(p, x)
    return p + [x]
  end
  def poolGet(p)
    if p.length == 0
      puts("pool empty")
      return {"pool" => p, "val" => 0}
    end
    idx = p.length - 1
    v = p[idx]
    p = p[0...idx]
    return {"pool" => p, "val" => v}
  end
  def clearPool(p)
    return []
  end
  def main()
    pool = []
    i = 1
    j = 2
    puts((_add(i, j)).to_s)
    pool = poolPut(pool, i)
    pool = poolPut(pool, j)
    i = 0
    j = 0
    res1 = poolGet(pool)
    pool = res1["pool"]
    i = (res1["val"]).to_i
    res2 = poolGet(pool)
    pool = res2["pool"]
    j = (res2["val"]).to_i
    i = 4
    j = 5
    puts((_add(i, j)).to_s)
    pool = poolPut(pool, i)
    pool = poolPut(pool, j)
    i = 0
    j = 0
    pool = clearPool(pool)
    res3 = poolGet(pool)
    pool = res3["pool"]
    i = (res3["val"]).to_i
    res4 = poolGet(pool)
    pool = res4["pool"]
    j = (res4["val"]).to_i
    i = 7
    j = 8
    puts((_add(i, j)).to_s)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
