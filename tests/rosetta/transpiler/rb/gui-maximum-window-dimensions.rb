# Generated by Mochi transpiler v0.10.54 on 2025-08-02 15:25 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def maximize(s, win)
    win["w"] = s.w
    win["h"] = s.h
    win["maximized"] = true
    return win
  end
  def main()
    screen = Screen.new(w: 1920, h: 1080)
    puts(_add(_add(_add("Screen size: ", (screen.w).to_s), " x "), (screen.h).to_s))
    win = Window.new(x: 50, y: 50, w: 800, h: 600, maximized: false)
    win = maximize(screen, win)
    puts(_add(_add(_add("Max usable : ", (win.w).to_s), " x "), (win.h).to_s))
  end
  Screen = Struct.new(:w, :h, keyword_init: true)
  Window = Struct.new(:x, :y, :w, :h, :maximized, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
