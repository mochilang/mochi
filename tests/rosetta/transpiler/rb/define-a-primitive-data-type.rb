# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def NewTinyInt(i)
    if i < 1
      i = 1
    else
      if i > 10
        i = 10
      end
    end
    return TinyInt.new(value: i)
  end
  def main()
    t1 = NewTinyInt(6)
    t2 = NewTinyInt(3)
    puts(_add("t1      = ", (t1["value"]).to_s))
    puts(_add("t2      = ", (t2["value"]).to_s))
    puts(_add("t1 + t2 = ", (t1.Add(t2).value).to_s))
    puts(_add("t1 - t2 = ", (t1.Sub(t2).value).to_s))
    puts(_add("t1 * t2 = ", (t1.Mul(t2).value).to_s))
    puts(_add("t1 / t2 = ", (t1.Div(t2).value).to_s))
    puts(_add("t1 % t2 = ", (t1.Rem(t2).value).to_s))
    puts(_add("t1 + 1  = ", (t1.Inc().value).to_s))
    puts(_add("t1 - 1  = ", (t1.Dec().value).to_s))
  end
  TinyInt = Struct.new(:value, keyword_init: true) do
    def Add(t2)
      return NewTinyInt(_add(value, t2["value"]))
    end
    def Sub(t2)
      return NewTinyInt(value - t2["value"])
    end
    def Mul(t2)
      return NewTinyInt(value * t2["value"])
    end
    def Div(t2)
      return NewTinyInt(value / t2["value"])
    end
    def Rem(t2)
      return NewTinyInt(value % t2["value"])
    end
    def Inc()
      return Add(NewTinyInt(1))
    end
    def Dec()
      return Sub(NewTinyInt(1))
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
