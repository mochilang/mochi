# Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:54 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def fields(s)
    res = []
    cur = ""
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      if c == " "
        if cur.length > 0
          res = res + [cur]
          cur = ""
        end
      else
        cur = _add(cur, c)
      end
      i = _add(i, 1)
    end
    if cur.length > 0
      res = res + [cur]
    end
    return res
  end
  def canSpell(word, blks)
    if word.length == 0
      return true
    end
    c = word[0...1].downcase()
    i = 0
    while i < blks.length
      b = blks[i]
      if c == b[0...1].downcase() || c == b[1...2].downcase()
        rest = []
        j = 0
        while j < blks.length
          if j != i
            rest = rest + [blks[j]]
          end
          j = _add(j, 1)
        end
        if canSpell(word[1...], rest)
          return true
        end
      end
      i = _add(i, 1)
    end
    return false
  end
  def newSpeller(blocks)
    bl = fields(blocks)
    return ->(w) { canSpell(w, bl) }
  end
  def main()
    sp = newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM")
    ["A", "BARK", "BOOK", "TREAT", "COMMON", "SQUAD", "CONFUSE"].each do |word|
      puts(_add(_add(word, " "), (sp.call(word)).to_s))
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
