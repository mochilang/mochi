# Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:27 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def splitLines(s)
    lines = []
    start = 0
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == "\n"
        lines = lines + [s[start...i]]
        i = _add(i, 1)
        start = i
      else
        i = _add(i, 1)
      end
    end
    lines = lines + [s[start...s.length]]
    return lines
  end
  def parseFasta(text)
    key = ""
    val = ""
    out = []
    splitLines(text).each do |line|
      if line == ""
        next
      end
      if line[0...1] == ">"
        if key != ""
          out = out + [_add(_add(key, ": "), val)]
        end
        hdr = line[1...line.length]
        idx = 0
        while idx < hdr.length && hdr[idx..._add(idx, 1)] != " "
          idx = _add(idx, 1)
        end
        key = hdr[0...idx]
        val = ""
      else
        if key == ""
          puts("missing header")
          return []
        end
        val = _add(val, line)
      end
    end
    if key != ""
      out = out + [_add(_add(key, ": "), val)]
    end
    return out
  end
  def main()
    res = parseFasta($FASTA)
    res.each do |line|
      puts(line)
    end
  end
  $FASTA = _add(_add(_add(_add(_add(">Rosetta_Example_1\n", "THERECANBENOSPACE\n"), ">Rosetta_Example_2\n"), "THERECANBESEVERAL\n"), "LINESBUTTHEYALLMUST\n"), "BECONCATENATED")
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
