# Generated by Mochi transpiler v0.10.42 on 2025-07-27 16:08 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def primeFactors(n)
    factors = []
    last = 0
    x = n
    while x % 2 == 0
      if last == 2
        return []
      end
      factors = factors + [2]
      last = 2
      x = x / 2
    end
    p = 3
    while p * p <= x
      while x % p == 0
        if last == p
          return []
        end
        factors = factors + [p]
        last = p
        x = x / p
      end
      p = _add(p, 2)
    end
    if x > 1
      if last == x
        return []
      end
      factors = factors + [x]
    end
    return factors
  end
  def isGiuga(n)
    facs = primeFactors(n)
    if facs.length <= 2
      return false
    end
    facs.each do |f|
      if ((n / f - 1) % f) != 0
        return false
      end
    end
    return true
  end
  def main()
    known = [30, 858, 1722, 66198]
    nums = []
    known.each do |n|
      if isGiuga(n)
        nums = nums + [n]
      end
    end
    puts("The first 4 Giuga numbers are:")
    puts(((x = nums); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
