# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    g = x
    i = 0
    while i < 20
      g = (_add(g, x / g)) / 2.0
      i = _add(i, 1)
    end
    return g
  end
  def newRsdv()
    return Rsdv.new(n: 0.0, a: 0.0, q: 0.0)
  end
  def add(r, x)
    n1 = _add(r["n"], 1.0)
    a1 = _add(r["a"], (x - r["a"]) / n1)
    q1 = _add(r["q"], (x - r["a"]) * (x - a1))
    return Rsdv.new(n: n1, a: a1, q: q1)
  end
  def sd(r)
    return sqrtApprox(r["q"] / r["n"])
  end
  def main()
    r = newRsdv()
    [2.0, 4.0, 4.0, 4.0, 5.0, 5.0, 7.0, 9.0].each do |x|
      r = add(r, x)
      puts((sd(r)).to_s)
    end
  end
  Rsdv = Struct.new(:n, :a, :q, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
