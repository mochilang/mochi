# Generated by Mochi transpiler v0.10.56 on 2025-08-03 16:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def newTerm(a, b)
    return {"a" => a, "b" => b}
  end
  def cfSqrt2(nTerms)
    f = []
    n = 0
    while n < nTerms
      f = (f << newTerm(2, 1))
      n = _add(n, 1)
    end
    if nTerms > 0
      f[0]["a"] = 1
    end
    return f
  end
  def cfNap(nTerms)
    f = []
    n = 0
    while n < nTerms
      f = (f << newTerm(n, n - 1))
      n = _add(n, 1)
    end
    if nTerms > 0
      f[0]["a"] = 2
    end
    if nTerms > 1
      f[1]["b"] = 1
    end
    return f
  end
  def cfPi(nTerms)
    f = []
    n = 0
    while n < nTerms
      g = 2 * n - 1
      f = (f << newTerm(6, g * g))
      n = _add(n, 1)
    end
    if nTerms > 0
      f[0]["a"] = 3
    end
    return f
  end
  def real(f)
    r = 0.0
    i = f.length - 1
    while i > 0
      r = ((f[i]["b"]).to_f) / (_add(((f[i]["a"]).to_f), r))
      i = i - 1
    end
    if f.length > 0
      r = _add(r, ((f[0]["a"]).to_f))
    end
    return r
  end
  def main()
    puts(_add("sqrt2: ", (real(cfSqrt2(20))).to_s))
    puts(_add("nap:   ", (real(cfNap(20))).to_s))
    puts(_add("pi:    ", (real(cfPi(20))).to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
