# Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def createLine(a, b)
    slope = (b.y - a.y) / (b.x - a.x)
    yint = a.y - slope * a.x
    return Line.new(slope: slope, yint: yint)
  end
  def evalX(l, x)
    return _add(l.slope * x, l.yint)
  end
  def intersection(l1, l2)
    if l1.slope == l2.slope
      return Point.new(x: 0.0, y: 0.0)
    end
    x = (l2.yint - l1.yint) / (l1.slope - l2.slope)
    y = evalX(l1, x)
    return Point.new(x: x, y: y)
  end
  def main()
    l1 = createLine(Point.new(x: 4.0, y: 0.0), Point.new(x: 6.0, y: 10.0))
    l2 = createLine(Point.new(x: 0.0, y: 3.0), Point.new(x: 10.0, y: 7.0))
    p = intersection(l1, l2)
    puts(_add(_add(_add(_add("{", (p.x).to_s), " "), (p.y).to_s), "}"))
  end
  Point = Struct.new(:x, :y, keyword_init: true)
  Line = Struct.new(:slope, :yint, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
