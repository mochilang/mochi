# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def contains(xs, n)
    i = 0
    while i < xs.length
      if xs[i] == n
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def gcd(a, b)
    x = a
    y = b
    while y != 0
      t = x % y
      x = y
      y = t
    end
    if x < 0
      x = -x
    end
    return x
  end
  def sortInts(xs)
    arr = xs
    n = arr.length
    i = 0
    while i < n
      j = 0
      while j < n - 1
        if arr[j] > arr[_add(j, 1)]
          tmp = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def areSame(s, t)
    if s.length != t.length
      return false
    end
    a = sortInts(s)
    b = sortInts(t)
    i = 0
    while i < a.length
      if a[i] != b[i]
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def printSlice(start, seq)
    first = []
    i = 0
    while i < 30
      first = first + [seq[i]]
      i = _add(i, 1)
    end
    pad = ""
    if start < 10
      pad = " "
    end
    puts(_add(_add(_add(_add("EKG(", pad), (start).to_s), "): "), (first).to_s))
  end
  def main()
    limit = 100
    starts = [2, 5, 7, 9, 10]
    ekg = []
    s = 0
    while s < starts.length
      seq = [1, starts[s]]
      n = 2
      while n < limit
        i = 2
        done = false
        while !done
          if !seq.include?(i) && gcd(seq[n - 1], i) > 1
            seq = seq + [i]
            done = true
          end
          i = _add(i, 1)
        end
        n = _add(n, 1)
      end
      ekg = ekg + [seq]
      printSlice(starts[s], seq)
      s = _add(s, 1)
    end
    i = 2
    found = false
    while i < limit
      if ekg[1][i] == ekg[2][i] && areSame(ekg[1][...i], ekg[2][...i])
        puts(_add("\nEKG(5) and EKG(7) converge at term ", (_add(i, 1)).to_s))
        found = true
        break
      end
      i = _add(i, 1)
    end
    if !found
      puts(_add(_add("\nEKG5(5) and EKG(7) do not converge within ", (limit).to_s), " terms"))
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
