# Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:54 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def beastKind(b)
    return (b.is_a?(Dog) ? ->(k) { k }.call(b.kind) : (b.is_a?(Cat) ? ->(k) { k }.call(b.kind) : nil))
  end
  def beastName(b)
    return (b.is_a?(Dog) ? ->(n) { n }.call(b.name) : (b.is_a?(Cat) ? ->(n) { n }.call(b.name) : nil))
  end
  def beastCry(b)
    return (b.is_a?(Dog) ? "Woof" : (b.is_a?(Cat) ? "Meow" : nil))
  end
  def bprint(b)
    puts(_add(_add(_add(_add(_add(beastName(b), ", who's a "), beastKind(b)), ", cries: \""), beastCry(b)), "\"."))
  end
  def main()
    d = Dog.new(kind: "labrador", name: "Max")
    c = Cat.new(kind: "siamese", name: "Sammy")
    bprint(d)
    bprint(c)
  end
  Dog = Struct.new(:kind, :name, keyword_init: true)
  Cat = Struct.new(:kind, :name, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
