# Generated by Mochi transpiler v0.10.42 on 2025-07-28 01:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def rotate(s, n)
    return _add(s[n...], s[...n])
  end
  def scrambleLeft(s)
    return _add(_add(_add(s[0...1], s[2...14]), s[1...2]), s[14...])
  end
  def scrambleRight(s)
    return _add(_add(_add(_add(s[1...3], s[4...15]), s[3...4]), s[15...]), s[0...1])
  end
  def chao(text, encode)
    left = "HXUCZVAMDSLKPEFJRIGTWOBNYQ"
    right = "PTLNBQDEOYSFAVZKGJRIHWXUMC"
    out = ""
    i = 0
    while i < text.length
      ch = text[i..._add(i, 1)]
      idx = 0
      if encode
        idx = _indexOf(right, ch)
        out = _add(out, left[idx..._add(idx, 1)])
      else
        idx = _indexOf(left, ch)
        out = _add(out, right[idx..._add(idx, 1)])
      end
      left = rotate(left, idx)
      right = rotate(right, idx)
      left = scrambleLeft(left)
      right = scrambleRight(right)
      i = _add(i, 1)
    end
    return out
  end
  def main()
    plain = "WELLDONEISBETTERTHANWELLSAID"
    cipher = chao(plain, true)
    puts(plain)
    puts(cipher)
    puts(chao(cipher, false))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
