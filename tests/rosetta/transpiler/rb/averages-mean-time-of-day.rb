# Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:07 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  $PI = 3.141592653589793
  def sinApprox(x)
    term = x
    sum = x
    n = 1
    while n <= 8
      denom = (((2 * n) * (_add(2 * n, 1)))).to_f
      term = -term * x * x / denom
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def cosApprox(x)
    term = 1.0
    sum = 1.0
    n = 1
    while n <= 8
      denom = (((2 * n - 1) * (2 * n))).to_f
      term = -term * x * x / denom
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def atanApprox(x)
    if x > 1.0
      return $PI / 2.0 - x / (_add(x * x, 0.28))
    end
    if x < (-1.0)
      return -$PI / 2.0 - x / (_add(x * x, 0.28))
    end
    return x / (_add(1.0, 0.28 * x * x))
  end
  def atan2Approx(y, x)
    if x > 0.0
      return atanApprox(y / x)
    end
    if x < 0.0
      if y >= 0.0
        return _add(atanApprox(y / x), $PI)
      end
      return atanApprox(y / x) - $PI
    end
    if y > 0.0
      return $PI / 2.0
    end
    if y < 0.0
      return -$PI / 2.0
    end
    return 0.0
  end
  def digit(ch)
    digits = "0123456789"
    i = 0
    while i < digits.length
      if digits[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return 0
  end
  def parseTwo(s, idx)
    return _add(digit(s[idx..._add(idx, 1)]) * 10, digit(s[_add(idx, 1)..._add(idx, 2)]))
  end
  def parseSec(s)
    h = parseTwo(s, 0)
    m = parseTwo(s, 3)
    sec = parseTwo(s, 6)
    tmp = _add((_add(h * 60, m)) * 60, sec)
    return (tmp).to_f
  end
  def pad(n)
    if n < 10
      return _add("0", (n).to_s)
    end
    return (n).to_s
  end
  def meanTime(times)
    ssum = 0.0
    csum = 0.0
    i = 0
    while i < times.length
      sec = parseSec(times[i])
      ang = sec * 2.0 * $PI / 86400.0
      ssum = _add(ssum, sinApprox(ang))
      csum = _add(csum, cosApprox(ang))
      i = _add(i, 1)
    end
    theta = atan2Approx(ssum, csum)
    frac = theta / (2.0 * $PI)
    while frac < 0.0
      frac = _add(frac, 1.0)
    end
    total = frac * 86400.0
    si = (total).to_i
    h = ((si / 3600)).to_i
    m = (((si % 3600) / 60)).to_i
    s = ((si % 60)).to_i
    return _add(_add(_add(_add(pad(h), ":"), pad(m)), ":"), pad(s))
  end
  def main()
    inputs = ["23:00:17", "23:40:20", "00:12:45", "00:17:19"]
    puts(meanTime(inputs))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
