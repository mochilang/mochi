# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pow2(k)
    v = 1
    i = 0
    while i < k
      v = v * 2
      i = _add(i, 1)
    end
    return v
  end
  def ruleBit(ruleNum, idx)
    r = ruleNum
    i = 0
    while i < idx
      r = r / 2
      i = _add(i, 1)
    end
    return r % 2
  end
  def evolve(state, ruleNum)
    out = []
    p = 0
    while p < 10
      b = 0
      q = 7
      while q >= 0
        st = state
        b = _add(b, st[0] * pow2(q))
        next_ = []
        i = 0
        while i < $n
          lidx = i - 1
          if lidx < 0
            lidx = $n - 1
          end
          left = st[lidx]
          center = st[i]
          ridx = _add(i, 1)
          if ridx >= $n
            ridx = 0
          end
          right = st[ridx]
          index = _add(_add(left * 4, center * 2), right)
          next_ = next_ + [ruleBit(ruleNum, index)]
          i = _add(i, 1)
        end
        state = next_
        q = q - 1
      end
      out = out + [b]
      p = _add(p, 1)
    end
    return out
  end
  $n = 64
  $init = []
  $i = 0
  while $i < $n
    $init = $init + [0]
    $i = _add($i, 1)
  end
  $init[0] = 1
  $bytes = evolve($init, 30)
  puts(($bytes).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
