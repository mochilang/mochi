# Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def show(xs)
    s = ""
    i = 0
    while i < xs.length
      s = _add(s, (xs[i]).to_s)
      if i < xs.length - 1
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    return s
  end
  def gen(init, n)
    b = init
    res = []
    sum = 0
    b.each do |x|
      res = res + [x]
      sum = _add(sum, x)
    end
    while res.length < n
      next_ = sum
      res = res + [next_]
      sum = _add(sum, next_) - b[0]
      b = b[1...b.length] + [next_]
    end
    return res
  end
  def main()
    n = 10
    puts(_add(" Fibonacci: ", show(gen([1, 1], n))))
    puts(_add("Tribonacci: ", show(gen([1, 1, 2], n))))
    puts(_add("Tetranacci: ", show(gen([1, 1, 2, 4], n))))
    puts(_add("     Lucas: ", show(gen([2, 1], n))))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
