# Generated by Mochi transpiler v0.10.50 on 2025-07-30 23:34 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

def join(xs, sep)
  res = ""
  i = 0
  while i < xs.length
    if i > 0
      res = _add(res, sep)
    end
    res = _add(res, xs[i])
    i = _add(i, 1)
  end
  return res
end
def sortPairs(xs)
  arr = xs
  i = 1
  while i < arr.length
    j = i
    while j > 0 && ((arr[j - 1]["count"]).to_i) < ((arr[j]["count"]).to_i)
      tmp = arr[j - 1]
      arr[j - 1] = arr[j]
      arr[j] = tmp
      j = j - 1
    end
    i = _add(i, 1)
  end
  return arr
end
def isAlphaNumDot(ch)
  return (ch >= "A" && ch <= "Z") || (ch >= "a" && ch <= "z") || (ch >= "0" && ch <= "9") || ch == "_" || ch == "."
end
def main()
  srcLines = ["package main", "", "import (", "    \"fmt\"", "    \"go/ast\"", "    \"go/parser\"", "    \"go/token\"", "    \"io/ioutil\"", "    \"os\"", "    \"sort\"", ")", "", "func main() {", "    if len(os.Args) != 2 {", "        fmt.Println(\"usage ff <go source filename>\")", "        return", "    }", "    src, err := ioutil.ReadFile(os.Args[1])", "    if err != nil {", "        fmt.Println(err)", "        return", "    }", "    fs := token.NewFileSet()", "    a, err := parser.ParseFile(fs, os.Args[1], src, 0)", "    if err != nil {", "        fmt.Println(err)", "        return", "    }", "    f := fs.File(a.Pos())", "    m := make(map[string]int)", "    ast.Inspect(a, func(n ast.Node) bool {", "        if ce, ok := n.(*ast.CallExpr); ok {", "            start := f.Offset(ce.Pos())", "            end := f.Offset(ce.Lparen)", "            m[string(src[start:end])]++", "        }", "        return true", "    })", "    cs := make(calls, 0, len(m))", "    for k, v := range m {", "        cs = append(cs, &call{k, v})", "    }", "    sort.Sort(cs)", "    for i, c := range cs {", "        fmt.Printf(\"%-20s %4d\\n\", c.expr, c.count)", "        if i == 9 {", "            break", "        }", "    }", "}", "", "type call struct {", "    expr  string", "    count int", "}", "type calls []*call", "", "func (c calls) Len() int           { return len(c) }", "func (c calls) Swap(i, j int)      { c[i], c[j] = c[j], c[i] }", "func (c calls) Less(i, j int) bool { return c[i].count > c[j].count }"]
  src = join(srcLines, "\n")
  freq = {}
  i = 0
  order = []
  while i < src.length
    ch = src[i..._add(i, 1)]
    if (ch >= "A" && ch <= "Z") || (ch >= "a" && ch <= "z") || ch == "_"
      j = _add(i, 1)
      while j < src.length && isAlphaNumDot(src[j..._add(j, 1)])
        j = _add(j, 1)
      end
      token = src[i...j]
      k = j
      while k < src.length
        cc = src[k..._add(k, 1)]
        if cc == " " || cc == "\t" || cc == "\n" || cc == "\r"
          k = _add(k, 1)
        else
          break
        end
      end
      if k < src.length && src[k..._add(k, 1)] == "("
        p = i - 1
        while p >= 0 && (src[p..._add(p, 1)] == " " || src[p..._add(p, 1)] == "\t")
          p = p - 1
        end
        skip = false
        if p >= 3
          before = src[p - 3..._add(p, 1)]
          if before == "func"
            skip = true
          end
        end
        if !skip
          if freq.key?(token)
            freq[token] = _add(freq[token], 1)
          else
            freq[token] = 1
            order = order + [token]
          end
        end
      end
      i = j
    else
      i = _add(i, 1)
    end
  end
  pairs = []
  order.each do |t|
    pairs = pairs + [{"expr" => t, "count" => freq[t]}]
  end
  pairs = sortPairs(pairs)
  idx = 0
  while idx < pairs.length && idx < 10
    p = pairs[idx]
    puts(_add(_add(p["expr"], " "), (p["count"]).to_s))
    idx = _add(idx, 1)
  end
end
main()
