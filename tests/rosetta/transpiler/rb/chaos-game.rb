# Generated by Mochi transpiler v0.10.50 on 2025-07-31 07:51 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def randInt(s, n)
    next_ = (_add(s * 1664525, 1013904223)) % 2147483647
    return [next_, next_ % n]
  end
  $width = 60
  $height = ((($width).to_f * 0.86602540378)).to_i
  $iterations = 5000
  $grid = []
  $y = 0
  while $y < $height
    line = []
    x = 0
    while x < $width
      line = line + [" "]
      x = _add(x, 1)
    end
    $grid = $grid + [line]
    $y = _add($y, 1)
  end
  $seed = 1
  $vertices = [[0, $height - 1], [$width - 1, $height - 1], [(($width / 2)).to_i, 0]]
  $px = (($width / 2)).to_i
  $py = (($height / 2)).to_i
  $i = 0
  while $i < $iterations
    r = randInt($seed, 3)
    $seed = r[0]
    idx = (r[1]).to_i
    v = $vertices[idx]
    $px = (((_add($px, v[0])) / 2)).to_i
    $py = (((_add($py, v[1])) / 2)).to_i
    if $px >= 0 && $px < $width && $py >= 0 && $py < $height
      $grid[$py][$px] = "*"
    end
    $i = _add($i, 1)
  end
  $y = 0
  while $y < $height
    line = ""
    x = 0
    while x < $width
      line = _add(line, $grid[$y][x])
      x = _add(x, 1)
    end
    puts(line)
    $y = _add($y, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
