# Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

def pad(n)
  s = (n).to_s
  while s.length < 4
    s = _add(" ", s)
  end
  return s
end
def hail(seq, cnt)
  out = pad(seq)
  if seq != 1
    cnt = _add(cnt, 1)
    if seq % 2 != 0
      seq = _add(3 * seq, 1)
    else
      seq = seq / 2
    end
  end
  return HailResult.new(seq: seq, cnt: cnt, out: out)
end
def main()
  seqs = []
  cnts = []
  (0...$jobs).each do |i|
    seqs = seqs + [_add(i, 1)]
    cnts = cnts + [0]
  end
  while true
    line = ""
    i = 0
    while i < $jobs
      res = hail(seqs[i], cnts[i])
      seqs[i] = res.seq
      cnts[i] = res.cnt
      line = _add(line, res.out)
      i = _add(i, 1)
    end
    puts(line)
    done = true
    j = 0
    while j < $jobs
      if seqs[j] != 1
        done = false
      end
      j = _add(j, 1)
    end
    if done
      break
    end
  end
  puts("")
  puts("COUNTS:")
  counts = ""
  k = 0
  while k < $jobs
    counts = _add(counts, pad(cnts[k]))
    k = _add(k, 1)
  end
  puts(counts)
  puts("")
end
$jobs = 12
HailResult = Struct.new(:seq, :cnt, :out, keyword_init: true)
main()
