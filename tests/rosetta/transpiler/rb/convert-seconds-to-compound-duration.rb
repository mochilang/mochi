# Generated by Mochi transpiler v0.10.50 on 2025-07-31 01:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def timeStr(sec)
    wks = sec / 604800
    sec = sec % 604800
    ds = sec / 86400
    sec = sec % 86400
    hrs = sec / 3600
    sec = sec % 3600
    mins = sec / 60
    sec = sec % 60
    res = ""
    comma = false
    if wks != 0
      res = _add(_add(res, (wks).to_s), " wk")
      comma = true
    end
    if ds != 0
      if comma
        res = _add(res, ", ")
      end
      res = _add(_add(res, (ds).to_s), " d")
      comma = true
    end
    if hrs != 0
      if comma
        res = _add(res, ", ")
      end
      res = _add(_add(res, (hrs).to_s), " hr")
      comma = true
    end
    if mins != 0
      if comma
        res = _add(res, ", ")
      end
      res = _add(_add(res, (mins).to_s), " min")
      comma = true
    end
    if sec != 0
      if comma
        res = _add(res, ", ")
      end
      res = _add(_add(res, (sec).to_s), " sec")
    end
    return res
  end
  puts(timeStr(7259))
  puts(timeStr(86400))
  puts(timeStr(6000000))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
