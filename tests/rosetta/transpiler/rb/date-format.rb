# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pad2(n)
    if n < 10
      return _add("0", (n).to_s)
    end
    return (n).to_s
  end
  def weekdayName(z)
    names = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    return names[(_add(z, 4)) % 7]
  end
  def main()
    ts = ((_now() / 1000000000)).to_i
    days = ((ts / 86400)).to_i
    z = _add(days, 719468)
    era = ((z / 146097)).to_i
    doe = z - era * 146097
    yoe = (_add(doe - doe / 1460, doe / 36524) - doe / 146096) / (365).to_i
    y = _add(yoe, era * 400)
    doy = doe - (_add(365 * yoe, yoe / 4) - yoe / 100)
    mp = (_add(5 * doy, 2)) / (153).to_i
    d = ((_add(doy - ((_add(153 * mp, 2)) / (5).to_i), 1))).to_i
    m = ((_add(mp, 3))).to_i
    if m > 12
      y = _add(y, 1)
      m = m - 12
    end
    iso = _add(_add(_add(_add((y).to_s, "-"), pad2(m)), "-"), pad2(d))
    puts(iso)
    months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    line = _add(_add(_add(_add(_add(_add(weekdayName(days), ", "), months[m - 1]), " "), (d).to_s), ", "), (y).to_s)
    puts(line)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
