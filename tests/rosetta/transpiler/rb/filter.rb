# Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

def randPerm(n)
  arr = []
  i = 0
  while i < n
    arr = arr + [i]
    i = _add(i, 1)
  end
  idx = n - 1
  while idx > 0
    j = _now() % (_add(idx, 1))
    tmp = arr[idx]
    arr[idx] = arr[j]
    arr[j] = tmp
    idx = idx - 1
  end
  return arr
end
def even(xs)
  r = []
  xs.each do |x|
    if x % 2 == 0
      r = r + [x]
    end
  end
  return r
end
def reduceToEven(xs)
  arr = xs
  last = 0
  i = 0
  while i < arr.length
    e = arr[i]
    if e % 2 == 0
      arr[last] = e
      last = _add(last, 1)
    end
    i = _add(i, 1)
  end
  return arr[...last]
end
def listStr(xs)
  s = "["
  i = 0
  while i < xs.length
    s = _add(s, (xs[i]).to_s)
    if _add(i, 1) < xs.length
      s = _add(s, " ")
    end
    i = _add(i, 1)
  end
  s = _add(s, "]")
  return s
end
def main()
  a = randPerm(20)
  cap_a = 20
  puts(listStr(a))
  puts(listStr(even(a)))
  puts(listStr(a))
  a = reduceToEven(a)
  puts(listStr(a))
  puts(_add(_add(_add("a len: ", (a.length).to_s), " cap: "), (cap_a).to_s))
end
main()
