# Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def listStr(xs)
    s = "["
    i = 0
    while i < xs.length
      s = _add(s, (xs[i]).to_s)
      if i < xs.length - 1
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def llStr(lst)
    s = "["
    i = 0
    while i < lst.length
      s = _add(s, listStr(lst[i]))
      if i < lst.length - 1
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def concat(a, b)
    out = []
    a.each do |v|
      out = out + [v]
    end
    b.each do |v|
      out = out + [v]
    end
    return out
  end
  def cartN(lists)
    if lists == nil
      return []
    end
    a = lists
    if a.length == 0
      return [[]]
    end
    out = []
    rest = cartN(a[1...a.length])
    a[0].each do |x|
      rest.each do |p|
        out = out + [concat([x], p)]
      end
    end
    return out
  end
  def main()
    puts(llStr(cartN([[1, 2], [3, 4]])))
    puts(llStr(cartN([[3, 4], [1, 2]])))
    puts(llStr(cartN([[1, 2], []])))
    puts(llStr(cartN([[], [1, 2]])))
    puts("")
    puts("[")
    cartN([[1776, 1789], [7, 12], [4, 14, 23], [0, 1]]).each do |p|
      puts(_add(" ", listStr(p)))
    end
    puts("]")
    puts(llStr(cartN([[1, 2, 3], [30], [500, 100]])))
    puts(llStr(cartN([[1, 2, 3], [], [500, 100]])))
    puts("")
    puts(llStr(cartN(nil)))
    puts(llStr(cartN([])))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
