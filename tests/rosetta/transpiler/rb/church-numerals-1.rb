# Generated by Mochi transpiler v0.10.42 on 2025-07-28 07:49 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

def zero(f)
  return ->(x) {
    return x
  }
end
def succ(c)
  return ->(f) {
    return ->(x) {
      return f.call(c.call(f).call(x))
    }
  }
end
def add(c, d)
  return ->(f) {
    return ->(x) {
      return c.call(f).call(d.call(f).call(x))
    }
  }
end
def mul(c, d)
  return ->(f) {
    return ->(x) {
      return c.call(d.call(f)).call(x)
    }
  }
end
def pow(c, d)
  di = toInt(d)
  prod = c
  i = 1
  while i < di
    prod = mul(prod, c)
    i = _add(i, 1)
  end
  return prod
end
def incr(i)
  return _add(((i).to_i), 1)
end
def toInt(c)
  return (c.call(method(:incr)).call(0)).to_i
end
def intToChurch(i)
  if i == 0
    return method(:zero)
  end
  return succ(intToChurch(i - 1))
end
$z = method(:zero)
$three = succ(succ(succ($z)))
$four = succ($three)
puts(_add("three        -> ", (toInt($three)).to_s))
puts(_add("four         -> ", (toInt($four)).to_s))
puts(_add("three + four -> ", (toInt(add($three, $four))).to_s))
puts(_add("three * four -> ", (toInt(mul($three, $four))).to_s))
puts(_add("three ^ four -> ", (toInt(pow($three, $four))).to_s))
puts(_add("four ^ three -> ", (toInt(pow($four, $three))).to_s))
puts(_add("5 -> five    -> ", (toInt(intToChurch(5))).to_s))
