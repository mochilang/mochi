# Generated by Mochi transpiler v0.10.41 on 2025-07-26 21:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def zero(f)
    return ->(x) {
      return x
    }
  end
  def succ(c)
    return ->(f) {
      return ->(x) {
        return f.call(c.call(f).call(x))
      }
    }
  end
  def add(c, d)
    return ->(f) {
      return ->(x) {
        return c.call(f).call(d.call(f).call(x))
      }
    }
  end
  def mul(c, d)
    return ->(f) {
      return ->(x) {
        return c.call(d.call(f)).call(x)
      }
    }
  end
  def pow(c, d)
    di = toInt(d)
    prod = c
    i = 1
    while i < di
      prod = mul(prod, c)
      i = _add(i, 1)
    end
    return prod
  end
  def incr(i)
    return _add(((i).to_i), 1)
  end
  def toInt(c)
    return (c.call(method(:incr)).call(0)).to_i
  end
  def intToChurch(i)
    if i == 0
      return method(:zero)
    end
    return succ(intToChurch(i - 1))
  end
  $z = method(:zero)
  $three = succ(succ(succ($z)))
  $four = succ($three)
  puts(_add("three        -> ", (toInt($three)).to_s))
  puts(_add("four         -> ", (toInt($four)).to_s))
  puts(_add("three + four -> ", (toInt(add($three, $four))).to_s))
  puts(_add("three * four -> ", (toInt(mul($three, $four))).to_s))
  puts(_add("three ^ four -> ", (toInt(pow($three, $four))).to_s))
  puts(_add("four ^ three -> ", (toInt(pow($four, $three))).to_s))
  puts(_add("5 -> five    -> ", (toInt(intToChurch(5))).to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
