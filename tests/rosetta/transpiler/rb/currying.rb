# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow(base, exp)
    result = 1.0
    i = 0
    while i < (exp).to_i
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def PowN(b)
    return ->(e) { b ** e }
  end
  def PowE(e)
    return ->(b) { pow(b, e) }
  end
  def main()
    pow2 = PowN(2.0)
    cube = PowE(3.0)
    puts(_add("2^8 = ", (pow2.call(8.0)).to_s))
    puts(_add("4Â³ = ", (cube.call(4.0)).to_s))
    a = Foo.new(value: 2)
    fn1 = ->(b) { a.Method(b) }
    fn2 = ->(f, b) { f.Method(b) }
    puts(_add("2 + 2 = ", (a.Method(2)).to_s))
    puts(_add("2 + 3 = ", (fn1.call(3)).to_s))
    puts(_add("2 + 4 = ", (fn2.call(a, 4)).to_s))
    puts(_add("3 + 5 = ", (fn2.call(Foo.new(value: 3), 5)).to_s))
  end
  Foo = Struct.new(:value, keyword_init: true) do
    def Method(b)
      return _add(value, b)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
