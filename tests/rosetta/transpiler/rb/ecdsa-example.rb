# Generated by Mochi transpiler v0.10.42 on 2025-07-27 10:22 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  module Testpkg
  def self.Pi; 3.14; end
  def self.Answer; 42; end
  def self.Add(a, b); a + b; end
  def self.FifteenPuzzleExample; 'Solution found in 52 moves: rrrulddluuuldrurdddrullulurrrddldluurddlulurruldrdrd'; end
end
testpkg = Testpkg
  $res = testpkg.ECDSAExample()
  puts(_add("Private key:\nD: ", $res.D))
  puts("\nPublic key:")
  puts(_add("X: ", $res.X))
  puts(_add("Y: ", $res.Y))
  puts("\nMessage: Rosetta Code")
  puts(_add("Hash   : ", $res.Hash))
  puts("\nSignature:")
  puts(_add("R: ", $res.R))
  puts(_add("S: ", $res.S))
  puts(_add("\nSignature verified: ", ($res.Valid).to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
