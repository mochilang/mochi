# Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def isPrime(n)
    if n < 2
      return false
    end
    i = 2
    while i * i <= n
      if n % i == 0
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def search(base, prefix, depth, limit, max)
    best = max
    d = 1
    while d < base
      val = _add(prefix * base, d)
      if isPrime(val)
        if val > best
          best = val
        end
        if _add(depth, 1) < limit
          best = search(base, val, _add(depth, 1), limit, best)
        end
      end
      d = _add(d, 1)
    end
    return best
  end
  def largest(base)
    return search(base, 0, 0, 6, 0)
  end
  def main()
    b = 3
    while b <= 10
      puts(_add(_add((b).to_s, ": "), (largest(b)).to_s))
      b = _add(b, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
