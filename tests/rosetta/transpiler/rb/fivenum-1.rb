# Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def sortFloat(xs)
    arr = xs
    n = arr.length
    i = 0
    while i < n
      j = 0
      while j < n - 1
        if arr[j] > arr[_add(j, 1)]
          t = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = t
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def median(s)
    n = s.length
    if n % 2 == 1
      return s[n / 2]
    end
    return (_add(s[n / 2 - 1], s[n / 2])) / 2.0
  end
  def fivenum(xs)
    s = sortFloat(xs)
    n = s.length
    q1 = s[(n - 1) / 4]
    med = median(s)
    q3 = s[(3 * (n - 1)) / 4]
    return [s[0], q1, med, q3, s[n - 1]]
  end
  $x1 = [36.0, 40.0, 7.0, 39.0, 41.0, 15.0]
  $x2 = [15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0]
  $x3 = [0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578]
  puts((fivenum($x1)).to_s)
  puts((fivenum($x2)).to_s)
  puts((fivenum($x3)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
