# Generated by Mochi transpiler v0.10.42 on 2025-07-27 15:12 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def ln(x)
    k = 0.0
    v = x
    while v >= 2.0
      v = v / 2.0
      k = _add(k, 1.0)
    end
    while v < 1.0
      v = v * 2.0
      k = k - 1.0
    end
    z = (v - 1.0) / (_add(v, 1.0))
    zpow = z
    sum = z
    i = 3
    while i <= 9
      zpow = zpow * z * z
      sum = _add(sum, zpow / ((i).to_f))
      i = _add(i, 2)
    end
    ln2 = 0.6931471805599453
    return _add((k * ln2), 2.0 * sum)
  end
  def harmonic(n)
    sum = 0.0
    i = 1
    while i <= n
      sum = _add(sum, 1.0 / ((i).to_f))
      i = _add(i, 1)
    end
    return sum
  end
  def main()
    n = 100000
    gamma = harmonic(n) - ln((n).to_f)
    puts((gamma).to_s)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
