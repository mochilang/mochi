# Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:50 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def fmt1(x)
    y = (((_add((x * 10.0), 0.5))).to_i).to_f / 10.0
    s = (y).to_s
    dot = _indexOf(s, ".")
    if dot < 0
      s = _add(s, ".0")
    end
    return s
  end
  def printColumnMatrix(xs)
    if xs.length == 0
      return
    end
    puts(_add(_add("⎡", fmt1(xs[0])), "⎤"))
    i = 1
    while i < xs.length - 1
      puts(_add(_add("⎢", fmt1(xs[i])), "⎥"))
      i = _add(i, 1)
    end
    puts(_add(_add("⎣ ", fmt1(xs[xs.length - 1])), "⎦"))
  end
  def deconv(g, f)
    h = []
    n = 0
    hn = _add(g.length - f.length, 1)
    while n < hn
      v = g[n]
      lower = 0
      if n >= f.length
        lower = _add(n - f.length, 1)
      end
      i = lower
      while i < n
        v = v - h[i] * f[n - i]
        i = _add(i, 1)
      end
      v = v / f[0]
      h = h + [v]
      n = _add(n, 1)
    end
    return h
  end
  def main()
    h = [-8.0, -9.0, -3.0, -1.0, -6.0, 7.0]
    f = [-3.0, -6.0, -1.0, 8.0, -6.0, 3.0, -1.0, -9.0, -9.0, 3.0, -2.0, 5.0, 2.0, -2.0, -7.0, -1.0]
    g = [24.0, 75.0, 71.0, -34.0, 3.0, 22.0, -45.0, 23.0, 245.0, 25.0, 52.0, 25.0, -67.0, -96.0, 96.0, 31.0, 55.0, 36.0, 29.0, -43.0, -7.0]
    puts("deconv(g, f) =")
    printColumnMatrix(deconv(g, f))
    puts("")
    puts("deconv(g, h) =")
    printColumnMatrix(deconv(g, h))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
