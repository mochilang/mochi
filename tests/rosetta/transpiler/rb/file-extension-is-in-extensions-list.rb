# Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

def endsWith(s, suf)
  if s.length < suf.length
    return false
  end
  return s[s.length - suf.length...s.length] == suf
end
def lastIndexOf(s, sub)
  idx = 0 - 1
  i = 0
  while i <= s.length - sub.length
    if s[i..._add(i, sub.length)] == sub
      idx = i
    end
    i = _add(i, 1)
  end
  return idx
end
def fileExtInList(filename)
  fl = filename.downcase()
  $extensions.each do |ext|
    ext2 = _add(".", ext.downcase())
    if endsWith(fl, ext2)
      return [true, ext]
    end
  end
  idx = lastIndexOf(filename, ".")
  if idx != 0 - 1
    t = filename[_add(idx, 1)...filename.length]
    if t != ""
      return [false, t]
    end
    return [false, "<empty>"]
  end
  return [false, "<none>"]
end
def pad(s, w)
  t = s
  while t.length < w
    t = _add(t, " ")
  end
  return t
end
def main()
  puts("The listed extensions are:")
  puts(((x = $extensions); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  tests = ["MyData.a##", "MyData.tar.Gz", "MyData.gzip", "MyData.7z.backup", "MyData...", "MyData", "MyData_v1.0.tar.bz2", "MyData_v1.0.bz2"]
  tests.each do |t|
    res = fileExtInList(t)
    ok = (res[0])
    ext = (res[1]).to_s
    puts(_add(_add(_add(_add(_add(pad(t, 20), " => "), (ok).to_s), "  (extension = "), ext), ")"))
  end
end
$extensions = ["zip", "rar", "7z", "gz", "archive", "A##", "tar.bz2"]
main()
