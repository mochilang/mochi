# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _split(s, sep)
  s.to_s.split(sep.to_s)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def split(s, sep)
    out = []
    start = 0
    i = 0
    n = sep.length
    while i <= s.length - n
      if s[i..._add(i, n)] == sep
        out = (out << s[start...i])
        i = _add(i, n)
        start = i
      else
        i = _add(i, 1)
      end
    end
    out = (out << s[start...s.length])
    return out
  end
  def htmlEscape(s)
    out = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == "&"
        out = _add(out, "&amp;")
      else
        if ch == "<"
          out = _add(out, "&lt;")
        else
          if ch == ">"
            out = _add(out, "&gt;")
          else
            out = _add(out, ch)
          end
        end
      end
      i = _add(i, 1)
    end
    return out
  end
  $c = _add(_add(_add(_add(_add("Character,Speech\n", "The multitude,The messiah! Show us the messiah!\n"), "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n"), "The multitude,Who are you?\n"), "Brians mother,I'm his mother; that's who!\n"), "The multitude,Behold his mother! Behold his mother!")
  $rows = []
  _split($c, "\n").each do |line|
    $rows = ($rows << _split(line, ","))
  end
  puts("<table>")
  $rows.each do |row|
    cells = ""
    row.each do |cell|
      cells = _add(_add(_add(cells, "<td>"), htmlEscape(cell)), "</td>")
    end
    puts(_add(_add("    <tr>", cells), "</tr>"))
  end
  puts("</table>")
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
