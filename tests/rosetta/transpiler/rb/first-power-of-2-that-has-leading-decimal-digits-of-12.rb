# Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def commatize(n)
    s = (n).to_s
    i = s.length % 3
    if i == 0
      i = 3
    end
    out = s[0...i]
    while i < s.length
      out = _add(_add(out, ","), s[i..._add(i, 3)])
      i = _add(i, 3)
    end
    return out
  end
  def p(l, n)
    _Ls = (l).to_s
    digits = 1
    d = 1
    while d <= 18 - _Ls.length
      digits = digits * 10
      d = _add(d, 1)
    end
    ten18 = 1000000000000000000
    count = 0
    i = 0
    probe = 1
    while true
      probe = probe * 2
      i = _add(i, 1)
      if probe >= ten18
        while true
          if probe >= ten18
            probe = probe / 10
          end
          if probe / digits == l
            count = _add(count, 1)
            if count >= n
              count = count - 1
              break
            end
          end
          probe = probe * 2
          i = _add(i, 1)
        end
      end
      ps = (probe).to_s
      le = _Ls.length
      if le > ps.length
        le = ps.length
      end
      if ps[0...le] == _Ls
        count = _add(count, 1)
        if count >= n
          break
        end
      end
    end
    return i
  end
  $params = [[12, 1], [12, 2], [123, 45]]
  $idx = 0
  while $idx < $params.length
    l = $params[$idx][0]
    m = $params[$idx][1]
    puts(_add(_add(_add(_add(_add("p(", (l).to_s), ", "), (m).to_s), ") = "), commatize(p(l, m))))
    $idx = _add($idx, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
