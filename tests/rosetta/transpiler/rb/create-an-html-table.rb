# Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:06 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def main()
    rows = []
    (0...4).each do |i|
      rows = rows + [[i * 3, _add(i * 3, 1), _add(i * 3, 2)]]
    end
    puts("<table>")
    puts("    <tr><th></th><th>X</th><th>Y</th><th>Z</th></tr>")
    idx = 0
    rows.each do |row|
      puts(_add(_add(_add(_add(_add(_add(_add(_add("    <tr><td>", (idx).to_s), "</td><td>"), (row[0]).to_s), "</td><td>"), (row[1]).to_s), "</td><td>"), (row[2]).to_s), "</td></tr>"))
      idx = _add(idx, 1)
    end
    puts("</table>")
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
