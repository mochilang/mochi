# Generated by Mochi transpiler v0.10.40 on 2025-07-25 10:39 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def kPrime(n, k)
    nf = 0
    i = 2
    while i <= n
      while n % i == 0
        if nf == k
          return false
        end
        nf = _add(nf, 1)
        n = n / i
      end
      i = _add(i, 1)
    end
    return nf == k
  end
  def gen(k, count)
    r = []
    n = 2
    while r.length < count
      if kPrime(n, k)
        r = r + [n]
      end
      n = _add(n, 1)
    end
    return r
  end
  def main()
    k = 1
    while k <= 5
      puts(_add(_add((k).to_s, " "), (gen(k, 10)).to_s))
      k = _add(k, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
