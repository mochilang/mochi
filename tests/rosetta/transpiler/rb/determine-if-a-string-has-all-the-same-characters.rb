# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ord(ch)
    if ch == "5"
      return 53
    end
    if ch == "T"
      return 84
    end
    if ch == " "
      return 32
    end
    if ch == "é"
      return 233
    end
    if ch == "🐺"
      return 128058
    end
    return 0
  end
  def hex(n)
    digits = "0123456789abcdef"
    if n == 0
      return "0x0"
    end
    m = n
    out = ""
    while m > 0
      d = m % 16
      out = _add(digits[d..._add(d, 1)], out)
      m = m / 16
    end
    return _add("0x", out)
  end
  def quote(s)
    return _add(_add("'", s), "'")
  end
  def analyze(s)
    le = s.length
    puts(_add(_add(_add(_add("Analyzing ", quote(s)), " which has a length of "), (le).to_s), ":"))
    if le > 1
      i = 1
      while i < le
        cur = s[i..._add(i, 1)]
        prev = s[i - 1...i]
        if cur != prev
          puts("  Not all characters in the string are the same.")
          puts(_add(_add(_add(_add(_add(_add("  ", quote(cur)), " ("), hex(ord(cur))), ") is different at position "), (_add(i, 1)).to_s), "."))
          puts("")
          return
        end
        i = _add(i, 1)
      end
    end
    puts("  All characters in the string are the same.")
    puts("")
  end
  def main()
    strings = ["", "   ", "2", "333", ".55", "tttTTT", "4444 444k", "pépé", "🐶🐶🐺🐶", "🎄🎄🎄🎄"]
    i = 0
    while i < strings.length
      analyze(strings[i])
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
