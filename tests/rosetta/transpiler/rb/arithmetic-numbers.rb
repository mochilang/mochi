# Generated by Mochi transpiler v0.10.37 on 2025-07-23 13:37 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end

def sieve(limit)
  spf = []
  i = 0
  while i <= limit
    spf = spf + [0]
    i = _add(i, 1)
  end
  i = 2
  while i <= limit
    if spf[i] == 0
      spf[i] = i
      if i * i <= limit
        j = i * i
        while j <= limit
          if spf[j] == 0
            spf[j] = i
          end
          j = _add(j, i)
        end
      end
    end
    i = _add(i, 1)
  end
  return spf
end
def primesFrom(spf, limit)
  primes = []
  i = 3
  while i <= limit
    if spf[i] == i
      primes = primes + [i]
    end
    i = _add(i, 1)
  end
  return primes
end
def pad3(n)
  s = (n).to_s
  while s.length < 3
    s = _add(" ", s)
  end
  return s
end
def commatize(n)
  s = (n).to_s
  out = ""
  i = s.length - 1
  c = 0
  while i >= 0
    out = _add(s[i..._add(i, 1)], out)
    c = _add(c, 1)
    if c % 3 == 0 && i > 0
      out = _add(",", out)
    end
    i = i - 1
  end
  return out
end
def primeCount(primes, last, spf)
  lo = 0
  hi = primes.length
  while lo < hi
    mid = ((_add(lo, hi)) / 2)
    if primes[mid] < last
      lo = _add(mid, 1)
    else
      hi = mid
    end
  end
  count = _add(lo, 1)
  if spf[last] != last
    count = count - 1
  end
  return count
end
def arithmeticNumbers(limit, spf)
  arr = [1]
  n = 3
  while arr.length < limit
    if spf[n] == n
      arr = arr + [n]
    else
      x = n
      sigma = 1
      tau = 1
      while x > 1
        p = spf[x]
        if p == 0
          p = x
        end
        cnt = 0
        power = p
        sum = 1
        while x % p == 0
          x = x / p
          cnt = _add(cnt, 1)
          sum = _add(sum, power)
          power = power * p
        end
        sigma = sigma * sum
        tau = tau * (_add(cnt, 1))
      end
      if sigma % tau == 0
        arr = arr + [n]
      end
    end
    n = _add(n, 1)
  end
  return arr
end
def main()
  limit = 1228663
  spf = sieve(limit)
  primes = primesFrom(spf, limit)
  arr = arithmeticNumbers(1000000, spf)
  puts("The first 100 arithmetic numbers are:")
  i = 0
  while i < 100
    line = ""
    j = 0
    while j < 10
      line = _add(line, pad3(arr[_add(i, j)]))
      if j < 9
        line = _add(line, " ")
      end
      j = _add(j, 1)
    end
    puts(line)
    i = _add(i, 10)
  end
  [1000, 10000, 100000, 1000000].each do |x|
    last = arr[x - 1]
    lastc = commatize(last)
    puts(_add(_add(_add("\nThe ", commatize(x)), "th arithmetic number is: "), lastc))
    pc = primeCount(primes, last, spf)
    comp = x - pc - 1
    puts(_add(_add(_add(_add("The count of such numbers <= ", lastc), " which are composite is "), commatize(comp)), "."))
  end
end
main()
