# Generated by Mochi transpiler v0.10.56 on 2025-08-03 16:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = a
    if x < 0
      x = -x
    end
    y = b
    if y < 0
      y = -y
    end
    while y != 0
      t = x % y
      x = y
      y = t
    end
    return x
  end
  def parseRational(s)
    intPart = 0
    fracPart = 0
    denom = 1
    afterDot = false
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == "."
        afterDot = true
      else
        d = (ch).to_i - ("0").to_i
        if !afterDot
          intPart = _add(intPart * 10, d)
        else
          fracPart = _add(fracPart * 10, d)
          denom = denom * 10
        end
      end
      i = _add(i, 1)
    end
    num = _add(intPart * denom, fracPart)
    g = gcd(num, denom)
    return {"num" => ((num / g)).to_i, "den" => ((denom / g)).to_i}
  end
  def main()
    inputs = ["0.9054054", "0.518518", "0.75"]
    inputs.each do |s|
      r = parseRational(s)
      puts(_add(_add(_add(_add(s, " = "), (r["num"]).to_s), "/"), (r["den"]).to_s))
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
