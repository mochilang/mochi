# Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:36 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def char(n)
    letters = "abcdefghijklmnopqrstuvwxyz"
    idx = n - 97
    if idx < 0 || idx >= letters.length
      return "?"
    end
    return letters[idx..._add(idx, 1)]
  end
  def fromBytes(bs)
    s = ""
    i = 0
    while i < bs.length
      s = _add(s, char(bs[i]))
      i = _add(i, 1)
    end
    return s
  end
  $b = [98, 105, 110, 97, 114, 121]
  puts(($b).to_s)
  $c = $b
  puts(($c).to_s)
  puts(($b == $c).to_s)
  $d = []
  $i = 0
  while $i < $b.length
    $d = $d + [$b[$i]]
    $i = _add($i, 1)
  end
  $d[1] = 97
  $d[4] = 110
  puts(fromBytes($b))
  puts(fromBytes($d))
  puts(($b.length == 0).to_s)
  $z = $b + [122]
  puts(fromBytes($z))
  $sub = $b[1...3]
  puts(fromBytes($sub))
  $f = []
  $i = 0
  while $i < $d.length
    $val = $d[$i]
    if $val == 110
      $f = $f + [109]
    else
      $f = $f + [$val]
    end
    $i = _add($i, 1)
  end
  puts(_add(_add(fromBytes($d), " -> "), fromBytes($f)))
  $rem = []
  $rem = $rem + [$b[0]]
  $i = 3
  while $i < $b.length
    $rem = $rem + [$b[$i]]
    $i = _add($i, 1)
  end
  puts(fromBytes($rem))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
