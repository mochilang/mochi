# Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:50 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  Cds = Struct.new(:i, :s, :b, :m, keyword_init: true)
  def copyList(src)
    out = []
    src.each do |v|
      out = out + [v]
    end
    return out
  end
  def copyMap(src)
    out = {}
    src.keys().each do |k|
      out[k] = src[k]
    end
    return out
  end
  def deepcopy(c)
    return Cds.new(i: c.i, s: c.s, b: copyList(c.b), m: copyMap(c.m))
  end
  def cdsStr(c)
    bs = "["
    i = 0
    while i < c.b.length
      bs = _add(bs, (c.b[i]).to_s)
      if i < c.b.length - 1
        bs = _add(bs, " ")
      end
      i = _add(i, 1)
    end
    bs = _add(bs, "]")
    ms = "map["
    first = true
    c.m.keys().each do |k|
      if !first
        ms = _add(ms, " ")
      end
      ms = _add(_add(_add(ms, (k).to_s), ":"), (c.m[k]).to_s)
      first = false
    end
    ms = _add(ms, "]")
    return _add(_add(_add(_add(_add(_add(_add(_add("{", (c.i).to_s), " "), c.s), " "), bs), " "), ms), "}")
  end
  $c1 = Cds.new(i: 1, s: "one", b: [117, 110, 105, 116], m: {1 => true})
  $c2 = deepcopy($c1)
  puts(cdsStr($c1))
  puts(cdsStr($c2))
  $c1 = Cds.new(i: 0, s: "nil", b: [122, 101, 114, 111], m: {1 => false})
  puts(cdsStr($c1))
  puts(cdsStr($c2))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
