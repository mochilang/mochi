# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _repeat(s, n)
  s * n.to_i
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pow2(n)
    p = 1
    i = 0
    while i < n
      p = p * 2
      i = _add(i, 1)
    end
    return p
  end
  def btoi(b)
    if b
      return 1
    end
    return 0
  end
  def addNoCells(cells)
    l = "O"
    r = "O"
    if cells[0...1] == "O"
      l = "."
    end
    if cells[cells.length - 1...cells.length] == "O"
      r = "."
    end
    cells = _add(_add(l, cells), r)
    cells = _add(_add(l, cells), r)
    return cells
  end
  def step(cells, ruleVal)
    newCells = ""
    i = 0
    while i < cells.length - 2
      bin = 0
      b = 2
      n = i
      while n < _add(i, 3)
        bin = _add(bin, btoi(cells[n..._add(n, 1)] == "O") * pow2(b))
        b = b - 1
        n = _add(n, 1)
      end
      a = "."
      if ((ruleVal / pow2(bin)) % 2 == 1)
        a = "O"
      end
      newCells = _add(newCells, a)
      i = _add(i, 1)
    end
    return newCells
  end
  def repeat(ch, n)
    s = ""
    i = 0
    while i < n
      s = _add(s, ch)
      i = _add(i, 1)
    end
    return s
  end
  def evolve(l, ruleVal)
    puts(_add(_add(" Rule #", (ruleVal).to_s), ":"))
    cells = "O"
    x = 0
    while x < l
      cells = addNoCells(cells)
      width = _add(40, (cells.length / 2))
      spaces = _repeat(" ", width - cells.length)
      puts(_add(spaces, cells))
      cells = step(cells, ruleVal)
      x = _add(x, 1)
    end
  end
  def main()
    [90, 30].each do |r|
      evolve(25, r)
      puts("")
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
