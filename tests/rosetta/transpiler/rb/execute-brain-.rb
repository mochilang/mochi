# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def chr(n)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 && n < 91
      return upper[n - 65...n - 64]
    end
    if n >= 97 && n < 123
      return lower[n - 97...n - 96]
    end
    if n == 32
      return " "
    end
    if n == 33
      return "!"
    end
    if n == 44
      return ","
    end
    if n == 13
      return ""
    end
    if n == 10
      return "\n"
    end
    return "?"
  end
  def bf(dLen, code)
    ds = []
    (0...dLen).each do |i|
      ds = ds + [0]
    end
    dp = 0
    ip = 0
    out = ""
    while ip < code.length
      ch = code[ip..._add(ip, 1)]
      if ch == ">"
        dp = _add(dp, 1)
      else
        if ch == "<"
          dp = dp - 1
        else
          if ch == "+"
            ds[dp] = _add(ds[dp], 1)
          else
            if ch == "-"
              ds[dp] = ds[dp] - 1
            else
              if ch == "."
                out = _add(out, chr(ds[dp]))
              else
                if ch == ","
                else
                  if ch == "["
                    if ds[dp] == 0
                      nc = 1
                      while nc > 0
                        ip = _add(ip, 1)
                        cc = code[ip..._add(ip, 1)]
                        if cc == "["
                          nc = _add(nc, 1)
                        else
                          if cc == "]"
                            nc = nc - 1
                          end
                        end
                      end
                    end
                  else
                    if ch == "]"
                      if ds[dp] != 0
                        nc = 1
                        while nc > 0
                          ip = ip - 1
                          cc = code[ip..._add(ip, 1)]
                          if cc == "]"
                            nc = _add(nc, 1)
                          else
                            if cc == "["
                              nc = nc - 1
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      ip = _add(ip, 1)
    end
    return out
  end
  def main()
    prog = _add(_add(_add("++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++\n", "++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>\n"), ">+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.\n"), "<+++++++.--------.<<<<<+.<+++.---.")
    out = bf(10, prog)
    puts(out)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
