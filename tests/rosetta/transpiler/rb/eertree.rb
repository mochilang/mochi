# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def newNode(len)
    return {"length" => len, "edges" => {}, "suffix" => 0}
  end
  def eertree(s)
    tree = []
    tree = tree + [{"length" => 0, "suffix" => $ODD_ROOT, "edges" => {}}]
    tree = tree + [{"length" => -1, "suffix" => $ODD_ROOT, "edges" => {}}]
    suffix = $ODD_ROOT
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      n = suffix
      k = 0
      while true
        k = (tree[n]["length"]).to_i
        b = i - k - 1
        if b >= 0 && s[b..._add(b, 1)] == c
          break
        end
        n = (tree[n]["suffix"]).to_i
      end
      edges = tree[n]["edges"]
      if edges.key?(c)
        suffix = edges[c]
        i = _add(i, 1)
        next
      end
      suffix = tree.length
      tree = tree + [newNode(_add(k, 2))]
      edges[c] = suffix
      tree[n]["edges"] = edges
      if ((tree[suffix]["length"]).to_i) == 1
        tree[suffix]["suffix"] = 0
        i = _add(i, 1)
        next
      end
      while true
        n = (tree[n]["suffix"]).to_i
        b = i - ((tree[n]["length"]).to_i) - 1
        if b >= 0 && s[b..._add(b, 1)] == c
          break
        end
      end
      en = tree[n]["edges"]
      tree[suffix]["suffix"] = en[c]
      i = _add(i, 1)
    end
    return tree
  end
  def child(tree, idx, p, acc)
    edges = tree[idx]["edges"]
    edges.keys().each do |ch|
      nxt = edges[ch]
      pal = _add(_add(ch, p), ch)
      acc = acc + [pal]
      acc = child(tree, nxt, pal, acc)
    end
    return acc
  end
  def subPalindromes(tree)
    res = []
    res = child(tree, $EVEN_ROOT, "", res)
    oEdges = tree[$ODD_ROOT]["edges"]
    oEdges.keys().each do |ch|
      res = res + [ch]
      res = child(tree, oEdges[ch], ch, res)
    end
    return res
  end
  def main()
    tree = eertree("eertree")
    subs = subPalindromes(tree)
    puts((subs).to_s)
  end
  $EVEN_ROOT = 0
  $ODD_ROOT = 1
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
