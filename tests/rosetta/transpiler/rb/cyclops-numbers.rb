# Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:06 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _split(s, sep)
  s.to_s.split(sep.to_s)
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def digits(n)
    if n == 0
      return [0]
    end
    rev = []
    x = n
    while x > 0
      rev = rev + [x % 10]
      x = ((x / 10)).to_i
    end
    out = []
    i = rev.length - 1
    while i >= 0
      out = out + [rev[i]]
      i = i - 1
    end
    return out
  end
  def commatize(n)
    s = (n).to_s
    out = ""
    i = s.length
    while i > 3
      out = _add(_add(",", s[i - 3...i]), out)
      i = i - 3
    end
    out = _add(s[0...i], out)
    return out
  end
  def isPrime(n)
    if n < 2
      return false
    end
    if n % 2 == 0
      return n == 2
    end
    if n % 3 == 0
      return n == 3
    end
    d = 5
    while d * d <= n
      if n % d == 0
        return false
      end
      d = _add(d, 2)
      if n % d == 0
        return false
      end
      d = _add(d, 4)
    end
    return true
  end
  def split(s, sep)
    parts = []
    cur = ""
    i = 0
    while i < s.length
      if _add(i, sep.length) <= s.length && s[i..._add(i, sep.length)] == sep
        parts = parts + [cur]
        cur = ""
        i = _add(i, sep.length)
      else
        cur = _add(cur, s[i..._add(i, 1)])
        i = _add(i, 1)
      end
    end
    parts = parts + [cur]
    return parts
  end
  def parseIntStr(str)
    i = 0
    neg = false
    if str.length > 0 && str[0...1] == "-"
      neg = true
      i = 1
    end
    n = 0
    digits = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    while i < str.length
      n = _add(n * 10, method(:digits)[str[i..._add(i, 1)]])
      i = _add(i, 1)
    end
    if neg
      n = -n
    end
    return n
  end
  def reverseStr(s)
    out = ""
    i = s.length - 1
    while i >= 0
      out = _add(out, s[i..._add(i, 1)])
      i = i - 1
    end
    return out
  end
  def pad(s, w)
    out = s
    while out.length < w
      out = _add(" ", out)
    end
    return out
  end
  def findFirst(list)
    i = 0
    while i < list.length
      if list[i] > 10000000
        return [list[i], i]
      end
      i = _add(i, 1)
    end
    return [-1, -1]
  end
  def main()
    ranges = [[0, 0], [101, 909], [11011, 99099], [1110111, 9990999], [111101111, 119101111]]
    cyclops = []
    ranges.each do |r|
      start = r[0]
      end_ = r[1]
      numDigits = (start).to_s.length
      center = numDigits / 2
      i = start
      while i <= end_
        ds = digits(i)
        if ds[center] == 0
          count = 0
          ds.each do |d|
            if d == 0
              count = _add(count, 1)
            end
          end
          if count == 1
            cyclops = cyclops + [i]
          end
        end
        i = _add(i, 1)
      end
    end
    puts("The first 50 cyclops numbers are:")
    idx = 0
    while idx < 50
      puts(_add(pad(commatize(cyclops[idx]), 6), " "))
      idx = _add(idx, 1)
      if idx % 10 == 0
        puts("\n")
      end
    end
    fi = findFirst(cyclops)
    puts(_add(_add(_add("\nFirst such number > 10 million is ", commatize(fi[0])), " at zero-based index "), commatize(fi[1])))
    primes = []
    cyclops.each do |n|
      if isPrime(n)
        primes = primes + [n]
      end
    end
    puts("\n\nThe first 50 prime cyclops numbers are:")
    idx = 0
    while idx < 50
      puts(_add(pad(commatize(primes[idx]), 6), " "))
      idx = _add(idx, 1)
      if idx % 10 == 0
        puts("\n")
      end
    end
    fp = findFirst(primes)
    puts(_add(_add(_add("\nFirst such number > 10 million is ", commatize(fp[0])), " at zero-based index "), commatize(fp[1])))
    bpcyclops = []
    ppcyclops = []
    primes.each do |p|
      ps = (p).to_s
      splitp = _split(ps, "0")
      noMiddle = parseIntStr(_add(splitp[0], splitp[1]))
      if isPrime(noMiddle)
        bpcyclops = bpcyclops + [p]
      end
      if ps == reverseStr(ps)
        ppcyclops = ppcyclops + [p]
      end
    end
    puts("\n\nThe first 50 blind prime cyclops numbers are:")
    idx = 0
    while idx < 50
      puts(_add(pad(commatize(bpcyclops[idx]), 6), " "))
      idx = _add(idx, 1)
      if idx % 10 == 0
        puts("\n")
      end
    end
    fb = findFirst(bpcyclops)
    puts(_add(_add(_add("\nFirst such number > 10 million is ", commatize(fb[0])), " at zero-based index "), commatize(fb[1])))
    puts("\n\nThe first 50 palindromic prime cyclops numbers are:")
    idx = 0
    while idx < 50
      puts(_add(pad(commatize(ppcyclops[idx]), 9), " "))
      idx = _add(idx, 1)
      if idx % 8 == 0
        puts("\n")
      end
    end
    fpp = findFirst(ppcyclops)
    puts(_add(_add(_add("\n\nFirst such number > 10 million is ", commatize(fpp[0])), " at zero-based index "), commatize(fpp[1])))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
