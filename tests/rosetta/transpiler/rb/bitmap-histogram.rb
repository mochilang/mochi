# Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:36 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def image()
    return [[0, 0, 10000], [65535, 65535, 65535], [65535, 65535, 65535]]
  end
  def histogram(g, bins)
    if bins <= 0
      bins = g[0].length
    end
    h = []
    i = 0
    while i < bins
      h = h + [0]
      i = _add(i, 1)
    end
    y = 0
    while y < g.length
      row = g[y]
      x = 0
      while x < row.length
        p = row[x]
        idx = (((p * (bins - 1)) / 65535)).to_i
        h[idx] = _add(h[idx], 1)
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    return h
  end
  def medianThreshold(h)
    lb = 0
    ub = h.length - 1
    lSum = 0
    uSum = 0
    while lb <= ub
      if _add(lSum, h[lb]) < _add(uSum, h[ub])
        lSum = _add(lSum, h[lb])
        lb = _add(lb, 1)
      else
        uSum = _add(uSum, h[ub])
        ub = ub - 1
      end
    end
    return (((ub * 65535) / h.length)).to_i
  end
  def threshold(g, t)
    out = []
    y = 0
    while y < g.length
      row = g[y]
      newRow = []
      x = 0
      while x < row.length
        if row[x] < t
          newRow = newRow + [0]
        else
          newRow = newRow + [65535]
        end
        x = _add(x, 1)
      end
      out = out + [newRow]
      y = _add(y, 1)
    end
    return out
  end
  def printImage(g)
    y = 0
    while y < g.length
      row = g[y]
      line = ""
      x = 0
      while x < row.length
        if row[x] == 0
          line = _add(line, "0")
        else
          line = _add(line, "1")
        end
        x = _add(x, 1)
      end
      puts(line)
      y = _add(y, 1)
    end
  end
  def main()
    img = image()
    h = histogram(img, 0)
    puts(_add("Histogram: ", (h).to_s))
    t = medianThreshold(h)
    puts(_add("Threshold: ", (t).to_s))
    bw = threshold(img, t)
    printImage(bw)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
