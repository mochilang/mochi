# Generated by Mochi transpiler v0.10.50 on 2025-07-30 23:34 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

def step(n, program)
  i = 0
  while i < program.length
    num = program[i][0]
    den = program[i][1]
    if n % den == (0)
      n = (n / den) * num
      return StepResult.new(n: n, ok: true)
    end
    i = _add(i, 1)
  end
  return StepResult.new(n: n, ok: false)
end
def main()
  program = [[(17), (91)], [(78), (85)], [(19), (51)], [(23), (38)], [(29), (33)], [(77), (29)], [(95), (23)], [(77), (19)], [(1), (17)], [(11), (13)], [(13), (11)], [(15), (14)], [(15), (2)], [(55), (1)]]
  n = 2
  primes = 0
  count = 0
  limit = 1000000
  two = 2
  line = ""
  while primes < 20 && count < limit
    res = step(n, program)
    n = res.n
    if !res.ok
      break
    end
    m = n
    pow = 0
    while m % two == (0)
      m = m / two
      pow = _add(pow, 1)
    end
    if m == (1) && pow > 1
      line = _add(_add(line, (pow).to_s), " ")
      primes = _add(primes, 1)
    end
    count = _add(count, 1)
  end
  if line.length > 0
    puts(line[0...line.length - 1])
  else
    puts("")
  end
end
StepResult = Struct.new(:n, :ok, keyword_init: true)
main()
