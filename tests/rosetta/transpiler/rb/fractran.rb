# Generated by Mochi transpiler v0.10.54 on 2025-08-02 15:25 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def step(n, program)
    i = 0
    while i < program.length
      num = program[i][0]
      den = program[i][1]
      if n % den == (0)
        n = (n / den) * num
        return StepResult.new(n: n, ok: true)
      end
      i = _add(i, 1)
    end
    return StepResult.new(n: n, ok: false)
  end
  def main()
    program = [[(17), (91)], [(78), (85)], [(19), (51)], [(23), (38)], [(29), (33)], [(77), (29)], [(95), (23)], [(77), (19)], [(1), (17)], [(11), (13)], [(13), (11)], [(15), (14)], [(15), (2)], [(55), (1)]]
    n = 2
    primes = 0
    count = 0
    limit = 1000000
    two = 2
    line = ""
    while primes < 20 && count < limit
      res = step(n, program)
      n = res.n
      if !res.ok
        break
      end
      m = n
      pow = 0
      while m % two == (0)
        m = m / two
        pow = _add(pow, 1)
      end
      if m == (1) && pow > 1
        line = _add(_add(line, (pow).to_s), " ")
        primes = _add(primes, 1)
      end
      count = _add(count, 1)
    end
    if line.length > 0
      puts(line[0...line.length - 1])
    else
      puts("")
    end
  end
  StepResult = Struct.new(:n, :ok, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
