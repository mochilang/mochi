# Generated by Mochi transpiler v0.10.42 on 2025-07-28 01:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def removeName(names, name)
    out = []
    names.each do |n|
      if n != name
        out = out + [n]
      end
    end
    return out
  end
  def main()
    clients = []
    broadcast = ->(msg) {
      puts(msg)
    }
    add = ->(name) {
      clients = clients + [name]
      broadcast.call(_add(_add("+++ \"", name), "\" connected +++\n"))
    }
    send = ->(name, msg) {
      broadcast.call(_add(_add(_add(name, "> "), msg), "\n"))
    }
    remove = ->(name) {
      clients = removeName(clients, name)
      broadcast.call(_add(_add("--- \"", name), "\" disconnected ---\n"))
    }
    add.call("Alice")
    add.call("Bob")
    send.call("Alice", "Hello Bob!")
    send.call("Bob", "Hi Alice!")
    remove.call("Bob")
    remove.call("Alice")
    broadcast.call("Server stopping!\n")
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
