# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def hasPrefix(s, p)
    if p.length > s.length
      return false
    end
    return s[0...p.length] == p
  end
  module GoOS
  def self.Getenv(name)
    ENV[name]
  end
  def self.Environ
    ENV.map { |k,v| "#{k}=#{v}" }
  end
end
os = GoOS
  $name = "SHELL"
  $prefix = _add($name, "=")
  os.Environ().each do |v|
    if hasPrefix(v, $prefix)
      puts(_add(_add($name, " has value "), v[$prefix.length...v.length]))
      return
    end
  end
  puts(_add($name, " not found"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
