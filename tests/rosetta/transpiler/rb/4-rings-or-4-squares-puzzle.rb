# Generated by Mochi transpiler v0.10.40 on 2025-07-25 10:39 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def validComb(a, b, c, d, e, f, g)
    square1 = _add(a, b)
    square2 = _add(_add(b, c), d)
    square3 = _add(_add(d, e), f)
    square4 = _add(f, g)
    return square1 == square2 && square2 == square3 && square3 == square4
  end
  def isUnique(a, b, c, d, e, f, g)
    nums = [a, b, c, d, e, f, g]
    i = 0
    while i < nums.length
      j = _add(i, 1)
      while j < nums.length
        if nums[i] == nums[j]
          return false
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return true
  end
  def getCombs(low, high, unique)
    valid = []
    count = 0
    (low...(_add(high, 1))).each do |b|
      (low...(_add(high, 1))).each do |c|
        (low...(_add(high, 1))).each do |d|
          s = _add(_add(b, c), d)
          (low...(_add(high, 1))).each do |e|
            (low...(_add(high, 1))).each do |f|
              a = s - b
              g = s - f
              if a < low || a > high
                next
              end
              if g < low || g > high
                next
              end
              if _add(_add(d, e), f) != s
                next
              end
              if _add(f, g) != s
                next
              end
              if !unique || isUnique(a, b, c, d, e, f, g)
                valid = valid + [[a, b, c, d, e, f, g]]
                count = _add(count, 1)
              end
            end
          end
        end
      end
    end
    return {"count" => count, "list" => valid}
  end
  $r1 = getCombs(1, 7, true)
  puts(_add(($r1["count"]).to_s, " unique solutions in 1 to 7"))
  puts($r1["list"])
  $r2 = getCombs(3, 9, true)
  puts(_add(($r2["count"]).to_s, " unique solutions in 3 to 9"))
  puts($r2["list"])
  $r3 = getCombs(0, 9, false)
  puts(_add(($r3["count"]).to_s, " non-unique solutions in 0 to 9"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
