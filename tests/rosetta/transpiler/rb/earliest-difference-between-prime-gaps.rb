# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def commatize(n)
    s = (n).to_s
    i = s.length - 3
    while i > 0
      s = _add(_add(s[0...i], ","), s[i...s.length])
      i = i - 3
    end
    return s
  end
  def main()
    Data = Struct.new(:pm, :g1, :s1, :g2, :s2, :d, keyword_init: true)
    data = [Data.new(pm: 10, g1: 4, s1: 7, g2: 6, s2: 23, d: 16), Data.new(pm: 100, g1: 14, s1: 113, g2: 16, s2: 1831, d: 1718), Data.new(pm: 1000, g1: 14, s1: 113, g2: 16, s2: 1831, d: 1718), Data.new(pm: 10000, g1: 36, s1: 9551, g2: 38, s2: 30593, d: 21042), Data.new(pm: 100000, g1: 70, s1: 173359, g2: 72, s2: 31397, d: 141962), Data.new(pm: 1000000, g1: 100, s1: 396733, g2: 102, s2: 1444309, d: 1047576), Data.new(pm: 10000000, g1: 148, s1: 2010733, g2: 150, s2: 13626257, d: 11615524), Data.new(pm: 100000000, g1: 198, s1: 46006769, g2: 200, s2: 378043979, d: 332037210), Data.new(pm: 1000000000, g1: 276, s1: 649580171, g2: 278, s2: 4260928601, d: 3611348430), Data.new(pm: 10000000000, g1: 332, s1: 5893180121, g2: 334, s2: 30827138509, d: 24933958388), Data.new(pm: 100000000000, g1: 386, s1: 35238645587, g2: 388, s2: 156798792223, d: 121560146636)]
    data.each do |entry|
      pm = commatize(entry["pm"])
      line1 = _add(_add("Earliest difference > ", pm), " between adjacent prime gap starting primes:")
      puts(line1)
      line2 = _add(_add(_add(_add(_add(_add(_add(_add(_add(_add("Gap ", (entry["g1"]).to_s), " starts at "), commatize(entry["s1"])), ", gap "), (entry["g2"]).to_s), " starts at "), commatize(entry["s2"])), ", difference is "), commatize(entry["d"])), ".")
      puts(line2)
      puts("")
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
