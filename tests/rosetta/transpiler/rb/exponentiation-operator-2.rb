# Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:27 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def expI(b, p)
    r = 1
    i = 0
    while i < p
      r = r * b
      i = _add(i, 1)
    end
    return r
  end
  def expF(b, p)
    r = 1.0
    pow = b
    n = p
    neg = false
    if p < 0
      n = -p
      neg = true
    end
    while n > 0
      if n % 2 == 1
        r = r * pow
      end
      pow = pow * pow
      n = n / 2
    end
    if neg
      r = 1.0 / r
    end
    return r
  end
  def printExpF(b, p)
    if b == 0.0 && p < 0
      puts(_add(_add(_add((b).to_s, "^"), (p).to_s), ": +Inf"))
    else
      puts(_add(_add(_add(_add((b).to_s, "^"), (p).to_s), ": "), (expF(b, p)).to_s))
    end
  end
  def main()
    puts("expI tests")
    [[2, 10], [2, -10], [-2, 10], [-2, 11], [11, 0]].each do |pair|
      if pair[1] < 0
        puts(_add(_add(_add((pair[0]).to_s, "^"), (pair[1]).to_s), ": negative power not allowed"))
      else
        puts(_add(_add(_add(_add((pair[0]).to_s, "^"), (pair[1]).to_s), ": "), (expI(pair[0], pair[1])).to_s))
      end
    end
    puts("overflow undetected")
    puts(_add("10^10: ", (expI(10, 10)).to_s))
    puts("\nexpF tests:")
    [[2.0, 10], [2.0, -10], [-2.0, 10], [-2.0, 11], [11.0, 0]].each do |pair|
      printExpF(pair[0], pair[1])
    end
    puts("disallowed in expI, allowed here")
    printExpF(0.0, -1)
    puts("other interesting cases for 32 bit float type")
    printExpF(10.0, 39)
    printExpF(10.0, -39)
    printExpF(-10.0, 39)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
