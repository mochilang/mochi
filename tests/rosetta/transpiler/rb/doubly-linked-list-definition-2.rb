# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def newList()
    return {"nodes" => {}, "head" => 0, "tail" => 0, "nextID" => 1}
  end
  def newNode(l, v)
    id = (l["nextID"]).to_i
    l["nextID"] = _add(id, 1)
    nodes = l["nodes"]
    n = {"id" => id, "value" => v, "next" => 0, "prev" => 0}
    nodes[id] = n
    l["nodes"] = nodes
    return n
  end
  def pushFront(l, v)
    n = newNode(l, v)
    n["next"] = l["head"]
    if ((l["head"]).to_i) != 0
      nodes = l["nodes"]
      h = nodes[(l["head"]).to_i]
      h["prev"] = n["id"]
      nodes[(h["id"]).to_i] = h
      l["nodes"] = nodes
    else
      l["tail"] = n["id"]
    end
    l["head"] = n["id"]
    nodes2 = l["nodes"]
    nodes2[(n["id"]).to_i] = n
    l["nodes"] = nodes2
    return n
  end
  def pushBack(l, v)
    n = newNode(l, v)
    n["prev"] = l["tail"]
    if ((l["tail"]).to_i) != 0
      nodes = l["nodes"]
      t = nodes[(l["tail"]).to_i]
      t["next"] = n["id"]
      nodes[(t["id"]).to_i] = t
      l["nodes"] = nodes
    else
      l["head"] = n["id"]
    end
    l["tail"] = n["id"]
    nodes2 = l["nodes"]
    nodes2[(n["id"]).to_i] = n
    l["nodes"] = nodes2
    return n
  end
  def insertBefore(l, refID, v)
    if refID == 0
      return pushFront(l, v)
    end
    nodes = l["nodes"]
    ref = nodes[refID]
    n = newNode(l, v)
    n["prev"] = ref["prev"]
    n["next"] = ref["id"]
    if ((ref["prev"]).to_i) != 0
      p = nodes[(ref["prev"]).to_i]
      p["next"] = n["id"]
      nodes[(p["id"]).to_i] = p
    else
      l["head"] = n["id"]
    end
    ref["prev"] = n["id"]
    nodes[refID] = ref
    nodes[(n["id"]).to_i] = n
    l["nodes"] = nodes
    return n
  end
  def insertAfter(l, refID, v)
    if refID == 0
      return pushBack(l, v)
    end
    nodes = l["nodes"]
    ref = nodes[refID]
    n = newNode(l, v)
    n["next"] = ref["next"]
    n["prev"] = ref["id"]
    if ((ref["next"]).to_i) != 0
      nx = nodes[(ref["next"]).to_i]
      nx["prev"] = n["id"]
      nodes[(nx["id"]).to_i] = nx
    else
      l["tail"] = n["id"]
    end
    ref["next"] = n["id"]
    nodes[refID] = ref
    nodes[(n["id"]).to_i] = n
    l["nodes"] = nodes
    return n
  end
  def main()
    l = newList()
    e4 = pushBack(l, 4)
    e1 = pushFront(l, 1)
    insertBefore(l, (e4["id"]).to_i, 3)
    insertAfter(l, (e1["id"]).to_i, "two")
    id = (l["head"]).to_i
    nodes = l["nodes"]
    while id != 0
      node = nodes[id]
      puts((node["value"]).to_s)
      id = (node["next"]).to_i
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
