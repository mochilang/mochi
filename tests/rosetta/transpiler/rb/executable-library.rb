# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def hailstone(n)
    seq = []
    x = n
    seq = seq + [x]
    while x > 1
      if x % 2 == 0
        x = x / 2
      else
        x = _add(3 * x, 1)
      end
      seq = seq + [x]
    end
    return seq
  end
  def listString(xs)
    s = "["
    i = 0
    while i < xs.length
      s = _add(s, (xs[i]).to_s)
      if i < xs.length - 1
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def libMain()
    seq = hailstone(27)
    puts("")
    puts("Hailstone sequence for the number 27:")
    puts(_add(_add("  has ", (seq.length).to_s), " elements"))
    puts(_add("  starts with ", listString(seq[0...4])))
    puts(_add("  ends with ", listString(seq[seq.length - 4...seq.length])))
    longest = 0
    length = 0
    i = 1
    while i < 100000
      l = hailstone(i).length
      if l > length
        longest = i
        length = l
      end
      i = _add(i, 1)
    end
    puts("")
    puts(_add(_add(_add((longest).to_s, " has the longest Hailstone sequence, its length being "), (length).to_s), "."))
  end
  libMain()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
