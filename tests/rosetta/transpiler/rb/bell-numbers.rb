# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def bellTriangle(n)
    tri = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < i
        row = row + [(0)]
        j = _add(j, 1)
      end
      tri = tri + [row]
      i = _add(i, 1)
    end
    tri[1][0] = 1
    i = 2
    while i < n
      tri[i][0] = tri[i - 1][i - 2]
      j = 1
      while j < i
        tri[i][j] = _add(tri[i][j - 1], tri[i - 1][j - 1])
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return tri
  end
  def main()
    bt = bellTriangle(51)
    puts("First fifteen and fiftieth Bell numbers:")
    (1...16).each do |i|
      puts(_add(_add(_add("", _padStart((i).to_s, 2, " ")), ": "), (bt[i][0]).to_s))
    end
    puts(_add("50: ", (bt[50][0]).to_s))
    puts("")
    puts("The first ten rows of Bell's triangle:")
    (1...11).each do |i|
      puts(((x = bt[i]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
