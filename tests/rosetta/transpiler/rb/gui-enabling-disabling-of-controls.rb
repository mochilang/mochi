# Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def state(v)
    return State.new(entry: v == 0, inc: v < 10, dec: v > 0)
  end
  def printState(v)
    s = state(v)
    puts(_add(_add(_add(_add(_add(_add(_add("value=", (v).to_s), " entry="), (s.entry).to_s), " inc="), (s.inc).to_s), " dec="), (s.dec).to_s))
  end
  def main()
    v = 0
    printState(v)
    while true
      s = state(v)
      if !s.inc
        break
      end
      v = _add(v, 1)
      printState(v)
    end
    while true
      s = state(v)
      if !s.dec
        break
      end
      v = v - 1
      printState(v)
    end
  end
  State = Struct.new(:entry, :inc, :dec, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
