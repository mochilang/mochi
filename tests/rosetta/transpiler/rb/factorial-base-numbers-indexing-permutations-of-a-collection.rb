# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _split(s, sep)
  s.to_s.split(sep.to_s)
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def split(s, sep)
    parts = []
    cur = ""
    i = 0
    while i < s.length
      if sep.length > 0 && _add(i, sep.length) <= s.length && s[i..._add(i, sep.length)] == sep
        parts = parts + [cur]
        cur = ""
        i = _add(i, sep.length)
      else
        cur = _add(cur, s[i..._add(i, 1)])
        i = _add(i, 1)
      end
    end
    parts = parts + [cur]
    return parts
  end
  def parseIntStr(str)
    i = 0
    neg = false
    if str.length > 0 && str[0...1] == "-"
      neg = true
      i = 1
    end
    n = 0
    digits = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    while i < str.length
      n = _add(n * 10, digits[str[i..._add(i, 1)]])
      i = _add(i, 1)
    end
    if neg
      n = -n
    end
    return n
  end
  def joinInts(nums, sep)
    s = ""
    i = 0
    while i < nums.length
      if i > 0
        s = _add(s, sep)
      end
      s = _add(s, (nums[i]).to_s)
      i = _add(i, 1)
    end
    return s
  end
  def undot(s)
    parts = _split(s, ".")
    nums = []
    parts.each do |p|
      nums = nums + [parseIntStr(p)]
    end
    return nums
  end
  def factorial(n)
    f = 1
    i = 2
    while i <= n
      f = f * i
      i = _add(i, 1)
    end
    return f
  end
  def genFactBaseNums(size, countOnly)
    results = []
    count = 0
    n = 0
    while true
      radix = 2
      res = []
      if !countOnly
        z = 0
        while z < size
          res = res + [0]
          z = _add(z, 1)
        end
      end
      k = n
      while k > 0
        div = k / radix
        rem = k % radix
        if !countOnly && radix <= _add(size, 1)
          res[_add(size - radix, 1)] = rem
        end
        k = div
        radix = _add(radix, 1)
      end
      if radix > _add(size, 2)
        break
      end
      count = _add(count, 1)
      if !countOnly
        results = results + [res]
      end
      n = _add(n, 1)
    end
    return [results, count]
  end
  def mapToPerms(factNums)
    perms = []
    psize = _add(factNums[0].length, 1)
    start = []
    i = 0
    while i < psize
      start = start + [i]
      i = _add(i, 1)
    end
    factNums.each do |fn|
      perm = []
      j = 0
      while j < start.length
        perm = perm + [start[j]]
        j = _add(j, 1)
      end
      m = 0
      while m < fn.length
        g = fn[m]
        if g != 0
          first = m
          last = _add(m, g)
          t = 1
          while t <= g
            temp = perm[first]
            x = _add(first, 1)
            while x <= last
              perm[x - 1] = perm[x]
              x = _add(x, 1)
            end
            perm[last] = temp
            t = _add(t, 1)
          end
        end
        m = _add(m, 1)
      end
      perms = perms + [perm]
    end
    return perms
  end
  def randInt(n)
    $seed = (_add($seed * 1664525, 1013904223)) % 2147483647
    return $seed % n
  end
  def main()
    g = genFactBaseNums(3, false)
    factNums = g[0]
    perms = mapToPerms(factNums)
    i = 0
    while i < factNums.length
      puts(_add(_add(joinInts(factNums[i], "."), " -> "), joinInts(perms[i], "")))
      i = _add(i, 1)
    end
    count2 = factorial(11)
    puts(_add("\nPermutations generated = ", (count2).to_s))
    puts(_add("compared to 11! which  = ", (factorial(11)).to_s))
    puts("")
    fbn51s = ["39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0", "51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1"]
    factNums = [undot(fbn51s[0]), undot(fbn51s[1])]
    perms = mapToPerms(factNums)
    shoe = "A♠K♠Q♠J♠T♠9♠8♠7♠6♠5♠4♠3♠2♠A♥K♥Q♥J♥T♥9♥8♥7♥6♥5♥4♥3♥2♥A♦K♦Q♦J♦T♦9♦8♦7♦6♦5♦4♦3♦2♦A♣K♣Q♣J♣T♣9♣8♣7♣6♣5♣4♣3♣2♣"
    cards = []
    i = 0
    while i < 52
      card = shoe[2 * i..._add(2 * i, 2)]
      if card[0...1] == "T"
        card = _add("10", card[1...2])
      end
      cards = cards + [card]
      i = _add(i, 1)
    end
    i = 0
    while i < fbn51s.length
      puts(fbn51s[i])
      perm = perms[i]
      j = 0
      line = ""
      while j < perm.length
        line = _add(line, cards[perm[j]])
        j = _add(j, 1)
      end
      puts(_add(line, "\n"))
      i = _add(i, 1)
    end
    fbn51 = []
    i = 0
    while i < 51
      fbn51 = fbn51 + [randInt(52 - i)]
      i = _add(i, 1)
    end
    puts(joinInts(fbn51, "."))
    perms = mapToPerms([fbn51])
    line = ""
    i = 0
    while i < perms[0].length
      line = _add(line, cards[perms[0][i]])
      i = _add(i, 1)
    end
    puts(line)
  end
  $seed = 1
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
