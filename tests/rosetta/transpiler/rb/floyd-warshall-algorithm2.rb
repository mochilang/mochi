# Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def floydWarshall(graph)
    n = graph.length
    dist = []
    next_ = []
    i = 0
    while i < n
      drow = []
      nrow = []
      j = 0
      while j < n
        drow = drow + [graph[i][j]]
        if graph[i][j] < $INF && i != j
          nrow = nrow + [j]
        else
          nrow = nrow + [-1]
        end
        j = _add(j, 1)
      end
      dist = dist + [drow]
      next_ = next_ + [nrow]
      i = _add(i, 1)
    end
    k = 0
    while k < n
      i = 0
      while i < n
        j = 0
        while j < n
          if dist[i][k] < $INF && dist[k][j] < $INF
            alt = _add(dist[i][k], dist[k][j])
            if alt < dist[i][j]
              dist[i][j] = alt
              next_[i][j] = next_[i][k]
            end
          end
          j = _add(j, 1)
        end
        i = _add(i, 1)
      end
      k = _add(k, 1)
    end
    return FWResult.new(dist: dist, next_: next_)
  end
  def path(u, v, next_)
    if next_[u][v] < 0
      return []
    end
    p = [u]
    x = u
    while x != v
      x = next_[x][v]
      p = p + [x]
    end
    return p
  end
  def pathStr(p)
    s = ""
    i = 0
    while i < p.length
      s = _add(s, (_add(p[i], 1)).to_s)
      if i < p.length - 1
        s = _add(s, " -> ")
      end
      i = _add(i, 1)
    end
    return s
  end
  $INF = 1000000
  FWResult = Struct.new(:dist, :next_, keyword_init: true)
  $n = 4
  $g = []
  (0...$n).each do |i|
    row = []
    (0...$n).each do |j|
      if i == j
        row = row + [0]
      else
        row = row + [$INF]
      end
    end
    $g = $g + [row]
  end
  $g[0][2] = -2
  $g[2][3] = 2
  $g[3][1] = -1
  $g[1][0] = 4
  $g[1][2] = 3
  $res = floydWarshall($g)
  puts("pair\tdist\tpath")
  $i = 0
  while $i < $n
    j = 0
    while j < $n
      if $i != j
        p = path($i, j, $res.next)
        puts(_add(_add(_add(_add(_add(_add((_add($i, 1)).to_s, " -> "), (_add(j, 1)).to_s), "\t"), ($res.dist[$i][j]).to_s), "\t"), pathStr(p)))
      end
      j = _add(j, 1)
    end
    $i = _add($i, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
