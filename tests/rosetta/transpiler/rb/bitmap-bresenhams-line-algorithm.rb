# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def absi(x)
    if x < 0
      return -x
    end
    return x
  end
  def bresenham(x0, y0, x1, y1)
    dx = absi(x1 - x0)
    dy = absi(y1 - y0)
    sx = -1
    if x0 < x1
      sx = 1
    end
    sy = -1
    if y0 < y1
      sy = 1
    end
    err = dx - dy
    pts = []
    while true
      pts = pts + [Point.new(x: x0, y: y0)]
      if x0 == x1 && y0 == y1
        break
      end
      e2 = 2 * err
      if e2 > (-dy)
        err = err - dy
        x0 = _add(x0, sx)
      end
      if e2 < dx
        err = _add(err, dx)
        y0 = _add(y0, sy)
      end
    end
    return pts
  end
  def main()
    pts = bresenham(0, 0, 6, 4)
    i = 0
    while i < pts.length
      p = pts[i]
      puts(_add(_add(_add(_add("(", (p.x).to_s), ","), (p.y).to_s), ")"))
      i = _add(i, 1)
    end
  end
  Point = Struct.new(:x, :y, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
