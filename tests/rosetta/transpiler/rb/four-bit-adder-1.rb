# Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def xor(a, b)
    return (a && (!b)) || ((!a) && b)
  end
  def ha(a, b)
    return SumCarry.new(s: xor(a, b), c: a && b)
  end
  def fa(a, b, c0)
    r1 = ha(a, c0)
    r2 = ha(r1.s, b)
    return SumCarry.new(s: r2.s, c: r1.c || r2.c)
  end
  def add4(a3, a2, a1, a0, b3, b2, b1, b0)
    r0 = fa(a0, b0, false)
    r1 = fa(a1, b1, r0.c)
    r2 = fa(a2, b2, r1.c)
    r3 = fa(a3, b3, r2.c)
    return Add4Result.new(v: r3.c, s3: r3.s, s2: r2.s, s1: r1.s, s0: r0.s)
  end
  def b2i(b)
    if b
      return 1
    end
    return 0
  end
  def main()
    r = add4(true, false, true, false, true, false, false, true)
    puts(_add(_add(_add(_add(_add(_add(_add(_add((b2i(r.v)).to_s, " "), (b2i(r.s3)).to_s), " "), (b2i(r.s2)).to_s), " "), (b2i(r.s1)).to_s), " "), (b2i(r.s0)).to_s))
  end
  SumCarry = Struct.new(:s, :c, keyword_init: true)
  Add4Result = Struct.new(:v, :s3, :s2, :s1, :s0, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
