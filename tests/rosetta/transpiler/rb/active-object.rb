# Generated by Mochi transpiler v0.10.40 on 2025-07-25 10:39 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  $PI = 3.141592653589793
  def sinApprox(x)
    term = x
    sum = x
    n = 1
    while n <= 12
      denom = (((2 * n) * (_add(2 * n, 1)))).to_f
      term = -term * x * x / denom
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  $dt = 0.01
  $s = 0.0
  $t1 = 0.0
  $k1 = sinApprox(0.0)
  $i = 1
  while $i <= 200
    $t2 = (($i).to_f) * $dt
    $k2 = sinApprox($t2 * $PI)
    $s = _add($s, (_add($k1, $k2)) * 0.5 * ($t2 - $t1))
    $t1 = $t2
    $k1 = $k2
    $i = _add($i, 1)
  end
  $i2 = 1
  while $i2 <= 50
    $t2 = _add(2.0, (($i2).to_f) * $dt)
    $k2 = 0.0
    $s = _add($s, (_add($k1, $k2)) * 0.5 * ($t2 - $t1))
    $t1 = $t2
    $k1 = $k2
    $i2 = _add($i2, 1)
  end
  puts($s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
