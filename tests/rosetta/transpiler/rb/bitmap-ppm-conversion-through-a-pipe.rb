# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pixelFromRgb(c)
    r = (((c / 65536)).to_i) % 256
    g = (((c / 256)).to_i) % 256
    b = c % 256
    return Pixel.new(R: r, G: g, B: b)
  end
  def rgbFromPixel(p)
    return _add(_add(p.R * 65536, p.G * 256), p.B)
  end
  def NewBitmap(x, y)
    data = []
    row = 0
    while row < y
      r = []
      col = 0
      while col < x
        r = r + [Pixel.new(R: 0, G: 0, B: 0)]
        col = _add(col, 1)
      end
      data = data + [r]
      row = _add(row, 1)
    end
    return Bitmap.new(cols: x, rows: y, px: data)
  end
  def FillRgb(b, c)
    y = 0
    p = pixelFromRgb(c)
    while y < b.rows
      x = 0
      while x < b.cols
        px = b.px
        row = px[y]
        row[x] = p
        px[y] = row
        b["px"] = px
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
  end
  def SetPxRgb(b, x, y, c)
    if x < 0 || x >= b.cols || y < 0 || y >= b.rows
      return false
    end
    px = b.px
    row = px[y]
    row[x] = pixelFromRgb(c)
    px[y] = row
    b["px"] = px
    return true
  end
  def nextRand(seed)
    return (_add(seed * 1664525, 1013904223)) % 2147483648
  end
  def main()
    bm = NewBitmap(400, 300)
    FillRgb(bm, 12615744)
    seed = _now()
    i = 0
    while i < 2000
      seed = nextRand(seed)
      x = seed % 400
      seed = nextRand(seed)
      y = seed % 300
      SetPxRgb(bm, x, y, 8405024)
      i = _add(i, 1)
    end
    x = 0
    while x < 400
      y = 240
      while y < 245
        SetPxRgb(bm, x, y, 8405024)
        y = _add(y, 1)
      end
      y = 260
      while y < 265
        SetPxRgb(bm, x, y, 8405024)
        y = _add(y, 1)
      end
      x = _add(x, 1)
    end
    y = 0
    while y < 300
      x = 80
      while x < 85
        SetPxRgb(bm, x, y, 8405024)
        x = _add(x, 1)
      end
      x = 95
      while x < 100
        SetPxRgb(bm, x, y, 8405024)
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
  end
  Pixel = Struct.new(:R, :G, :B, keyword_init: true)
  Bitmap = Struct.new(:cols, :rows, :px, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
