# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def flood(x, y, repl)
    target = $grid[y][x]
    if target == repl
      return
    end
    ff = ->(px, py) {
      if px < 0 || py < 0 || py >= $grid.length || px >= $grid[0].length
        return
      end
      if $grid[py][px] != target
        return
      end
      $grid[py][px] = repl
      ff.call(px - 1, py)
      ff.call(_add(px, 1), py)
      ff.call(px, py - 1)
      ff.call(px, _add(py, 1))
    }
    ff.call(x, y)
  end
  $grid = [[".", ".", ".", ".", "."], [".", "#", "#", "#", "."], [".", "#", ".", "#", "."], [".", "#", "#", "#", "."], [".", ".", ".", ".", "."]]
  flood(2, 2, "o")
  $grid.each do |row|
    $line = ""
    row.each do |ch|
      $line = _add($line, ch)
    end
    puts($line)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
