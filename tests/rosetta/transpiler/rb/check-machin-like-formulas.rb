# Generated by Mochi transpiler v0.10.50 on 2025-07-31 07:51 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def br(n, d)
    return ((n).to_r) / (((d).to_r)).to_r
  end
  def format(ts)
    s = "["
    i = 0
    while i < ts.length
      t = ts[i]
      s = _add(_add(_add(_add(_add(_add(_add(s, "{"), (t["a"]).to_s), " "), (t["n"]).to_s), " "), (t["d"]).to_s), "}")
      if i < ts.length - 1
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def tanEval(coef, f)
    if coef == 1
      return f
    end
    if coef < 0
      return -((tanEval(-coef, f))).to_r
    end
    ca = coef / 2
    cb = coef - ca
    a = tanEval(ca, f)
    b = tanEval(cb, f)
    return ((_add(a, b))).to_r / (((1).to_r - a * b)).to_r
  end
  def tans(m)
    if m.length == 1
      t = m[0]
      return tanEval(t["a"], br(t["n"], t["d"]))
    end
    half = m.length / 2
    a = tans(m[0...half])
    b = tans(m[half...])
    return ((_add(a, b))).to_r / (((1).to_r - a * b)).to_r
  end
  $testCases = [[{"a" => 1, "n" => 1, "d" => 2}, {"a" => 1, "n" => 1, "d" => 3}], [{"a" => 2, "n" => 1, "d" => 3}, {"a" => 1, "n" => 1, "d" => 7}], [{"a" => 4, "n" => 1, "d" => 5}, {"a" => -1, "n" => 1, "d" => 239}], [{"a" => 5, "n" => 1, "d" => 7}, {"a" => 2, "n" => 3, "d" => 79}], [{"a" => 1, "n" => 1, "d" => 2}, {"a" => 1, "n" => 1, "d" => 5}, {"a" => 1, "n" => 1, "d" => 8}], [{"a" => 4, "n" => 1, "d" => 5}, {"a" => -1, "n" => 1, "d" => 70}, {"a" => 1, "n" => 1, "d" => 99}], [{"a" => 5, "n" => 1, "d" => 7}, {"a" => 4, "n" => 1, "d" => 53}, {"a" => 2, "n" => 1, "d" => 4443}], [{"a" => 6, "n" => 1, "d" => 8}, {"a" => 2, "n" => 1, "d" => 57}, {"a" => 1, "n" => 1, "d" => 239}], [{"a" => 8, "n" => 1, "d" => 10}, {"a" => -1, "n" => 1, "d" => 239}, {"a" => -4, "n" => 1, "d" => 515}], [{"a" => 12, "n" => 1, "d" => 18}, {"a" => 8, "n" => 1, "d" => 57}, {"a" => -5, "n" => 1, "d" => 239}], [{"a" => 16, "n" => 1, "d" => 21}, {"a" => 3, "n" => 1, "d" => 239}, {"a" => 4, "n" => 3, "d" => 1042}], [{"a" => 22, "n" => 1, "d" => 28}, {"a" => 2, "n" => 1, "d" => 443}, {"a" => -5, "n" => 1, "d" => 1393}, {"a" => -10, "n" => 1, "d" => 11018}], [{"a" => 22, "n" => 1, "d" => 38}, {"a" => 17, "n" => 7, "d" => 601}, {"a" => 10, "n" => 7, "d" => 8149}], [{"a" => 44, "n" => 1, "d" => 57}, {"a" => 7, "n" => 1, "d" => 239}, {"a" => -12, "n" => 1, "d" => 682}, {"a" => 24, "n" => 1, "d" => 12943}], [{"a" => 88, "n" => 1, "d" => 172}, {"a" => 51, "n" => 1, "d" => 239}, {"a" => 32, "n" => 1, "d" => 682}, {"a" => 44, "n" => 1, "d" => 5357}, {"a" => 68, "n" => 1, "d" => 12943}], [{"a" => 88, "n" => 1, "d" => 172}, {"a" => 51, "n" => 1, "d" => 239}, {"a" => 32, "n" => 1, "d" => 682}, {"a" => 44, "n" => 1, "d" => 5357}, {"a" => 68, "n" => 1, "d" => 12944}]]
  $testCases.each do |ts|
    puts(_add(_add(_add("tan ", format(ts)), " = "), (tans(ts)).to_s))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
