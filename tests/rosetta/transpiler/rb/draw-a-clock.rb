# Generated by Mochi transpiler v0.10.41 on 2025-07-26 18:07 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pow2(exp)
    r = 1
    i = 0
    while i < exp
      r = r * 2
      i = _add(i, 1)
    end
    return r
  end
  def bin(n, digits)
    s = ""
    i = digits - 1
    while i >= 0
      p = pow2(i)
      if n >= p
        s = _add(s, "x")
        n = n - p
      else
        s = _add(s, " ")
      end
      if i > 0
        s = _add(s, "|")
      end
      i = i - 1
    end
    return s
  end
  $t = _now() / 1000000000
  $sec = $t % 60
  $mins = $t / 60
  $min = $mins % 60
  $hour = ($mins / 60) % 24
  puts(bin($hour, 8))
  puts("")
  puts(bin($min, 8))
  puts("")
  $xs = ""
  $i = 0
  while $i < $sec
    $xs = _add($xs, "x")
    $i = _add($i, 1)
  end
  $out = ""
  $j = 0
  while $j < $xs.length
    $out = _add($out, $xs[$j..._add($j, 1)])
    if (_add($j, 1)) % 5 == 0 && _add($j, 1) < $xs.length
      $out = _add($out, "|")
    end
    $j = _add($j, 1)
  end
  puts($out)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
