# Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:54 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pfacSum(i)
    sum = 0
    p = 1
    while p <= i / 2
      if i % p == 0
        sum = _add(sum, p)
      end
      p = _add(p, 1)
    end
    return sum
  end
  def pad(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def main()
    sums = []
    i = 0
    while i < 20000
      sums = sums + [0]
      i = _add(i, 1)
    end
    i = 1
    while i < 20000
      sums[i] = pfacSum(i)
      i = _add(i, 1)
    end
    puts("The amicable pairs below 20,000 are:")
    n = 2
    while n < 19999
      m = sums[n]
      if m > n && m < 20000 && n == sums[m]
        puts(_add(_add(_add("  ", pad(n, 5)), " and "), pad(m, 5)))
      end
      n = _add(n, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
