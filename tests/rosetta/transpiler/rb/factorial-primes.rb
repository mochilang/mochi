# Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:27 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def factorial(n)
    result = 1
    i = 2
    while i <= n
      result = result * i
      i = _add(i, 1)
    end
    return result
  end
  def isPrime(n)
    if n < 2
      return false
    end
    if n % 2 == 0
      return n == 2
    end
    d = 3
    while d * d <= n
      if n % d == 0
        return false
      end
      d = _add(d, 2)
    end
    return true
  end
  def padLeft(s, w)
    out = s
    while out.length < w
      out = _add(" ", out)
    end
    return out
  end
  def main()
    n = 0
    count = 0
    while count < 10
      n = _add(n, 1)
      f = factorial(n)
      if isPrime(f - 1)
        count = _add(count, 1)
        puts(_add(_add(_add(_add(padLeft((count).to_s, 2), ": "), padLeft((n).to_s, 2)), "! - 1 = "), (f - 1).to_s))
      end
      if count < 10 && isPrime(_add(f, 1))
        count = _add(count, 1)
        puts(_add(_add(_add(_add(padLeft((count).to_s, 2), ": "), padLeft((n).to_s, 2)), "! + 1 = "), (_add(f, 1)).to_s))
      end
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
