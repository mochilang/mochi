# Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:50 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def collapse(s)
    i = 0
    prev = ""
    res = ""
    orig = s.length
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch != prev
        res = _add(res, ch)
        prev = ch
      end
      i = _add(i, 1)
    end
    return [res, orig, res.length]
  end
  def main()
    strings = ["", "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln ", "..111111111111111111111111111111111111111111111111111111111111111777888", "I never give 'em hell, I just tell the truth, and they think it's hell. ", "                                                   ---  Harry S Truman ", "The better the 4-wheel drive, the further you'll be from help when ya get stuck!", "headmistressship", "aardvark", "😍😀🙌💃😍😍😍🙌"]
    idx = 0
    while idx < strings.length
      s = strings[idx]
      r = collapse(s)
      cs = r[0]
      olen = r[1]
      clen = r[2]
      puts(_add(_add(_add(_add("original : length = ", (olen).to_s), ", string = «««"), s), "»»»"))
      puts(_add(_add(_add(_add("collapsed: length = ", (clen).to_s), ", string = «««"), cs), "»»»\n"))
      idx = _add(idx, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
