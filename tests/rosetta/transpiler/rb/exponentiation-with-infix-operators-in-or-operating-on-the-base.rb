# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def p(x, e)
    r = 1.0
    i = 0
    while i < ((e).to_i)
      r = r * x
      i = _add(i, 1)
    end
    return r
  end
  def padInt(f)
    s = (((f).to_i)).to_s
    if f >= 0
      return _add(" ", s)
    end
    return s
  end
  $ops = ["-x.p(e)", "-(x).p(e)", "(-x).p(e)", "-(x.p(e))"]
  [-5.0, 5.0].each do |x|
    [2.0, 3.0].each do |e|
      a = -p(x, e)
      b = -(p(x, e))
      c = p(-x, e)
      d = -(p(x, e))
      puts(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add("x = ", ((x < 0 ? "" : " "))), (((x).to_i)).to_s), " e = "), (((e).to_i)).to_s), " | "), $ops[0]), " = "), padInt(a)), " | "), $ops[1]), " = "), padInt(b)), " | "), $ops[2]), " = "), padInt(c)), " | "), $ops[3]), " = "), padInt(d)))
    end
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
