# Generated by Mochi transpiler v0.10.50 on 2025-07-31 07:51 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def main()
    pkg_dog = "Salt"
    _Dog = "Pepper"
    pkg_DOG = "Mustard"
    packageSees = ->(d1, d2, d3) {
      puts(_add(_add(_add(_add(_add("Package sees: ", d1), " "), d2), " "), d3))
      return {"pkg_dog" => true, "Dog" => true, "pkg_DOG" => true}
    }
    d = packageSees.call(pkg_dog, _Dog, pkg_DOG)
    puts(_add(_add("There are ", (d.length).to_s), " dogs.\n"))
    dog = "Benjamin"
    d = packageSees.call(pkg_dog, _Dog, pkg_DOG)
    puts(_add(_add(_add(_add(_add("Main sees:   ", dog), " "), _Dog), " "), pkg_DOG))
    d["dog"] = true
    d["Dog"] = true
    d["pkg_DOG"] = true
    puts(_add(_add("There are ", (d.length).to_s), " dogs.\n"))
    _Dog = "Samba"
    d = packageSees.call(pkg_dog, _Dog, pkg_DOG)
    puts(_add(_add(_add(_add(_add("Main sees:   ", dog), " "), _Dog), " "), pkg_DOG))
    d["dog"] = true
    d["Dog"] = true
    d["pkg_DOG"] = true
    puts(_add(_add("There are ", (d.length).to_s), " dogs.\n"))
    _DOG = "Bernie"
    d = packageSees.call(pkg_dog, _Dog, pkg_DOG)
    puts(_add(_add(_add(_add(_add("Main sees:   ", dog), " "), _Dog), " "), _DOG))
    d["dog"] = true
    d["Dog"] = true
    d["pkg_DOG"] = true
    d["DOG"] = true
    puts(_add(_add("There are ", (d.length).to_s), " dogs."))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
