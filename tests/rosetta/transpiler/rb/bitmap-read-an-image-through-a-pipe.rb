# Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:36 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def parseIntStr(str)
    i = 0
    neg = false
    if str.length > 0 && str[0...1] == "-"
      neg = true
      i = 1
    end
    n = 0
    digits = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    while i < str.length
      n = _add(n * 10, digits[str[i..._add(i, 1)]])
      i = _add(i, 1)
    end
    if neg
      n = -n
    end
    return n
  end
  def splitWs(s)
    parts = []
    cur = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == " " || ch == "\n" || ch == "\t" || ch == "\r"
        if cur.length > 0
          parts = parts + [cur]
          cur = ""
        end
      else
        cur = _add(cur, ch)
      end
      i = _add(i, 1)
    end
    if cur.length > 0
      parts = parts + [cur]
    end
    return parts
  end
  def parsePpm(data)
    toks = splitWs(data)
    if toks.length < 4
      return {"err" => true}
    end
    magic = toks[0]
    w = parseIntStr(toks[1])
    h = parseIntStr(toks[2])
    maxv = parseIntStr(toks[3])
    px = []
    i = 4
    while i < toks.length
      px = px + [parseIntStr(toks[i])]
      i = _add(i, 1)
    end
    return {"magic" => magic, "w" => w, "h" => h, "max" => maxv, "px" => px}
  end
  $ppmData = "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n"
  $img = parsePpm($ppmData)
  puts(_add(_add(_add("width=", ($img["w"]).to_s), " height="), ($img["h"]).to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
