# Generated by Mochi transpiler v0.10.41 on 2025-07-27 09:09 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def join(xs, sep)
    res = ""
    i = 0
    while i < xs.length
      if i > 0
        res = _add(res, sep)
      end
      res = _add(res, xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def sentenceType(s)
    if s.length == 0
      return ""
    end
    types = []
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == "?"
        types = types + ["Q"]
      else
        if ch == "!"
          types = types + ["E"]
        else
          if ch == "."
            types = types + ["S"]
          end
        end
      end
      i = _add(i, 1)
    end
    last = s[s.length - 1...s.length]
    if _indexOf("?!.", last) == (-1)
      types = types + ["N"]
    end
    return join(types, "|")
  end
  def main()
    s = "hi there, how are you today? I'd like to present to you the washing machine 9001. You have been nominated to win one of these! Just make sure you don't break it"
    result = sentenceType(s)
    puts(result)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
