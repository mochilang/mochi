# Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:07 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def bsearch(arr, x)
    low = 0
    high = arr.length - 1
    while low <= high
      mid = (_add(low, high)) / 2
      if arr[mid] > x
        high = mid - 1
      else
        if arr[mid] < x
          low = _add(mid, 1)
        else
          return mid
        end
      end
    end
    return -1
  end
  def bsearchRec(arr, x, low, high)
    if high < low
      return -1
    end
    mid = (_add(low, high)) / 2
    if arr[mid] > x
      return bsearchRec(arr, x, low, mid - 1)
    else
      if arr[mid] < x
        return bsearchRec(arr, x, _add(mid, 1), high)
      end
    end
    return mid
  end
  def main()
    nums = [-31, 0, 1, 2, 2, 4, 65, 83, 99, 782]
    x = 2
    idx = bsearch(nums, x)
    if idx >= 0
      puts(_add(_add(_add((x).to_s, " is at index "), (idx).to_s), "."))
    else
      puts(_add((x).to_s, " is not found."))
    end
    x = 5
    idx = bsearchRec(nums, x, 0, nums.length - 1)
    if idx >= 0
      puts(_add(_add(_add((x).to_s, " is at index "), (idx).to_s), "."))
    else
      puts(_add((x).to_s, " is not found."))
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
