# Generated by Mochi transpiler v0.10.50 on 2025-07-31 01:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def quibble(items)
    n = items.length
    if n == 0
      return "{}"
    else
      if n == 1
        return _add(_add("{", items[0]), "}")
      else
        if n == 2
          return _add(_add(_add(_add("{", items[0]), " and "), items[1]), "}")
        else
          prefix = ""
          (0...n - 1).each do |i|
            if i == n - 1
              break
            end
            if i > 0
              prefix = _add(prefix, ", ")
            end
            prefix = _add(prefix, items[i])
          end
          return _add(_add(_add(_add("{", prefix), " and "), items[n - 1]), "}")
        end
      end
    end
  end
  def main()
    puts(quibble([]))
    puts(quibble(["ABC"]))
    puts(quibble(["ABC", "DEF"]))
    puts(quibble(["ABC", "DEF", "G", "H"]))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
