# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def sinApprox(x)
    term = x
    sum = x
    n = 1
    while n <= 8
      denom = (((2 * n) * (_add(2 * n, 1)))).to_f
      term = -term * x * x / denom
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def cosApprox(x)
    term = 1.0
    sum = 1.0
    n = 1
    while n <= 8
      denom = (((2 * n - 1) * (2 * n))).to_f
      term = -term * x * x / denom
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def atanApprox(x)
    if x > 1.0
      return $PI / 2.0 - x / (_add(x * x, 0.28))
    end
    if x < (-1.0)
      return -$PI / 2.0 - x / (_add(x * x, 0.28))
    end
    return x / (_add(1.0, 0.28 * x * x))
  end
  def atan2Approx(y, x)
    if x > 0.0
      r = atanApprox(y / x)
      return r
    end
    if x < 0.0
      if y >= 0.0
        return _add(atanApprox(y / x), $PI)
      end
      return atanApprox(y / x) - $PI
    end
    if y > 0.0
      return $PI / 2.0
    end
    if y < 0.0
      return -$PI / 2.0
    end
    return 0.0
  end
  def sqrtApprox(x)
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def rad(x)
    return x * $PI / 180.0
  end
  def deg(x)
    return x * 180.0 / $PI
  end
  def distance(lat1, lon1, lat2, lon2)
    phi1 = rad(lat1)
    phi2 = rad(lat2)
    dphi = rad(lat2 - lat1)
    dlambda = rad(lon2 - lon1)
    sdphi = sinApprox(dphi / 2)
    sdlambda = sinApprox(dlambda / 2)
    a = _add(sdphi * sdphi, cosApprox(phi1) * cosApprox(phi2) * sdlambda * sdlambda)
    c = 2 * atan2Approx(sqrtApprox(a), sqrtApprox(1 - a))
    return (6371.0 / 1.852) * c
  end
  def bearing(lat1, lon1, lat2, lon2)
    phi1 = rad(lat1)
    phi2 = rad(lat2)
    dl = rad(lon2 - lon1)
    y = sinApprox(dl) * cosApprox(phi2)
    x = cosApprox(phi1) * sinApprox(phi2) - sinApprox(phi1) * cosApprox(phi2) * cosApprox(dl)
    br = deg(atan2Approx(y, x))
    if br < 0
      br = _add(br, 360)
    end
    return br
  end
  def floor(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def pow10(n)
    p = 1.0
    i = 0
    while i < n
      p = p * 10.0
      i = _add(i, 1)
    end
    return p
  end
  def round(x, n)
    m = pow10(n)
    return floor(_add(x * m, 0.5)) / m
  end
  def sortByDistance(xs)
    arr = xs
    i = 1
    while i < arr.length
      j = i
      while j > 0 && arr[j - 1][0] > arr[j][0]
        tmp = arr[j - 1]
        arr[j - 1] = arr[j]
        arr[j] = tmp
        j = j - 1
      end
      i = _add(i, 1)
    end
    return arr
  end
  def main()
    planeLat = 51.514669
    planeLon = 2.198581
    results = []
    $airports.each do |ap|
      d = distance(planeLat, planeLon, ap.lat, ap.lon)
      b = bearing(planeLat, planeLon, ap.lat, ap.lon)
      results = results + [[d, b, ap]]
    end
    results = sortByDistance(results)
    puts("Distance Bearing ICAO Country               Airport")
    puts("--------------------------------------------------------------")
    i = 0
    while i < results.length
      r = results[i]
      ap = r[2]
      dist = r[0]
      bear = r[1]
      line = _add(_add(_add(_add(_add(_add(_add(_add((round(dist, 1)).to_s, "\t"), (round(bear, 0)).to_s), "\t"), ap.icao), "\t"), ap.country), " "), ap.name)
      puts(line)
      i = _add(i, 1)
    end
  end
  $PI = 3.141592653589793
  Airport = Struct.new(:name, :country, :icao, :lat, :lon, keyword_init: true)
  $airports = [Airport.new(name: "Koksijde Air Base", country: "Belgium", icao: "EBFN", lat: 51.090301513671875, lon: 2.652780055999756), Airport.new(name: "Ostend-Bruges International Airport", country: "Belgium", icao: "EBOS", lat: 51.198898315399994, lon: 2.8622200489), Airport.new(name: "Kent International Airport", country: "United Kingdom", icao: "EGMH", lat: 51.342201, lon: 1.34611), Airport.new(name: "Calais-Dunkerque Airport", country: "France", icao: "LFAC", lat: 50.962100982666016, lon: 1.954759955406189), Airport.new(name: "Westkapelle heliport", country: "Belgium", icao: "EBKW", lat: 51.32222366333, lon: 3.2930560112), Airport.new(name: "Lympne Airport", country: "United Kingdom", icao: "EGMK", lat: 51.08, lon: 1.013), Airport.new(name: "Ursel Air Base", country: "Belgium", icao: "EBUL", lat: 51.14419937133789, lon: 3.475559949874878), Airport.new(name: "Southend Airport", country: "United Kingdom", icao: "EGMC", lat: 51.5713996887207, lon: 0.6955559849739075), Airport.new(name: "Merville-Calonne Airport", country: "France", icao: "LFQT", lat: 50.61840057373047, lon: 2.642240047454834), Airport.new(name: "Wevelgem Airport", country: "Belgium", icao: "EBKT", lat: 50.817199707, lon: 3.20472002029), Airport.new(name: "Midden-Zeeland Airport", country: "Netherlands", icao: "EHMZ", lat: 51.5121994019, lon: 3.73111009598), Airport.new(name: "Lydd Airport", country: "United Kingdom", icao: "EGMD", lat: 50.95610046386719, lon: 0.9391670227050781), Airport.new(name: "RAF Wattisham", country: "United Kingdom", icao: "EGUW", lat: 52.1273002625, lon: 0.956264019012), Airport.new(name: "Beccles Airport", country: "United Kingdom", icao: "EGSM", lat: 52.435298919699996, lon: 1.6183300018300002), Airport.new(name: "Lille/Marcq-en-Baroeul Airport", country: "France", icao: "LFQO", lat: 50.687198638916016, lon: 3.0755600929260254), Airport.new(name: "Lashenden (Headcorn) Airfield", country: "United Kingdom", icao: "EGKH", lat: 51.156898, lon: 0.641667), Airport.new(name: "Le Touquet-CÃ´te d'Opale Airport", country: "France", icao: "LFAT", lat: 50.517398834228516, lon: 1.6205899715423584), Airport.new(name: "Rochester Airport", country: "United Kingdom", icao: "EGTO", lat: 51.351898193359375, lon: 0.5033329725265503), Airport.new(name: "Lille-Lesquin Airport", country: "France", icao: "LFQQ", lat: 50.563332, lon: 3.086886), Airport.new(name: "Thurrock Airfield", country: "United Kingdom", icao: "EGMT", lat: 51.537505, lon: 0.367634)]
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
