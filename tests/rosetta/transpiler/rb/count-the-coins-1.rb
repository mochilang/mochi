# Generated by Mochi transpiler v0.10.56 on 2025-08-03 16:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def countChange(amount)
    ways = []
    i = 0
    while i <= amount
      ways = (ways << 0)
      i = _add(i, 1)
    end
    ways[0] = 1
    coins = [1, 5, 10, 25]
    idx = 0
    while idx < coins.length
      coin = coins[idx]
      j = coin
      while j <= amount
        ways[j] = _add(ways[j], ways[j - coin])
        j = _add(j, 1)
      end
      idx = _add(idx, 1)
    end
    return ways[amount]
  end
  $amount = 10
  puts(_add(_add(_add("amount, ways to make change: ", ($amount).to_s), " "), (countChange($amount)).to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
