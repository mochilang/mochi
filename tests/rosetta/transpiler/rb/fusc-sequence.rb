# Generated by Mochi transpiler v0.10.54 on 2025-08-02 15:25 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def fuscVal(n)
    a = 1
    b = 0
    x = n
    while x > 0
      if x % 2 == 0
        x = x / 2
        a = _add(a, b)
      else
        x = (x - 1) / 2
        b = _add(a, b)
      end
    end
    if n == 0
      return 0
    end
    return b
  end
  def firstFusc(n)
    arr = []
    i = 0
    while i < n
      arr = arr + [fuscVal(i)]
      i = _add(i, 1)
    end
    return arr
  end
  def commatize(n)
    s = (n).to_s
    neg = false
    if n < 0
      neg = true
      s = s[1...s.length]
    end
    i = s.length - 3
    while i >= 1
      s = _add(_add(s[0...i], ","), s[i...s.length])
      i = i - 3
    end
    if neg
      return _add("-", s)
    end
    return s
  end
  def padLeft(s, w)
    out = s
    while out.length < w
      out = _add(" ", out)
    end
    return out
  end
  def main()
    puts("The first 61 fusc numbers are:")
    puts((firstFusc(61)).to_s)
    puts("\nThe fusc numbers whose length > any previous fusc number length are:")
    idxs = [0, 37, 1173, 35499, 699051, 19573419]
    i = 0
    while i < idxs.length
      idx = idxs[i]
      val = fuscVal(idx)
      numStr = padLeft(commatize(val), 7)
      idxStr = padLeft(commatize(idx), 10)
      puts(_add(_add(_add(numStr, " (index "), idxStr), ")"))
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
