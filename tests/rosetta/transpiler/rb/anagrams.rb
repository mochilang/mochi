# Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:54 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def sortRunes(s)
    arr = []
    i = 0
    while i < s.length
      arr = arr + [s[i..._add(i, 1)]]
      i = _add(i, 1)
    end
    n = arr.length
    m = 0
    while m < n
      j = 0
      while j < n - 1
        if arr[j] > arr[_add(j, 1)]
          tmp = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = tmp
        end
        j = _add(j, 1)
      end
      m = _add(m, 1)
    end
    out = ""
    i = 0
    while i < n
      out = _add(out, arr[i])
      i = _add(i, 1)
    end
    return out
  end
  def sortStrings(xs)
    res = []
    tmp = xs
    while tmp.length > 0
      min = tmp[0]
      idx = 0
      i = 1
      while i < tmp.length
        if tmp[i] < min
          min = tmp[i]
          idx = i
        end
        i = _add(i, 1)
      end
      res = res + [min]
      out = []
      j = 0
      while j < tmp.length
        if j != idx
          out = out + [tmp[j]]
        end
        j = _add(j, 1)
      end
      tmp = out
    end
    return res
  end
  def main()
    words = ["abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"]
    groups = {}
    maxLen = 0
    words.each do |w|
      k = sortRunes(w)
      if !(groups.key?(k))
        groups[k] = [w]
      else
        groups[k] = groups[k] + [w]
      end
      if groups[k].length > maxLen
        maxLen = groups[k].length
      end
    end
    printed = {}
    words.each do |w|
      k = sortRunes(w)
      if groups[k].length == maxLen
        if !(printed.key?(k))
          g = sortStrings(groups[k])
          line = _add("[", g[0])
          i = 1
          while i < g.length
            line = _add(_add(line, " "), g[i])
            i = _add(i, 1)
          end
          line = _add(line, "]")
          puts(line)
          printed[k] = true
        end
      end
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
