# Generated by Mochi transpiler v0.10.50 on 2025-07-31 01:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def ccw(a, b, c)
    lhs = (b.x - a.x) * (c.y - a.y)
    rhs = (b.y - a.y) * (c.x - a.x)
    return lhs > rhs
  end
  def sortPoints(ps)
    arr = ps
    n = arr.length
    i = 0
    while i < n
      j = 0
      while j < n - 1
        p = arr[j]
        q = arr[_add(j, 1)]
        if p.x > q.x || (p.x == q.x && p.y > q.y)
          arr[j] = q
          arr[_add(j, 1)] = p
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def convexHull(ps)
    ps = sortPoints(ps)
    h = []
    ps.each do |pt|
      while h.length >= 2 && ccw(h[h.length - 2], h[h.length - 1], pt) == false
        h = h[...h.length - 1]
      end
      h = h + [pt]
    end
    i = ps.length - 2
    t = _add(h.length, 1)
    while i >= 0
      pt = ps[i]
      while h.length >= t && ccw(h[h.length - 2], h[h.length - 1], pt) == false
        h = h[...h.length - 1]
      end
      h = h + [pt]
      i = i - 1
    end
    return h[...h.length - 1]
  end
  def pointStr(p)
    return _add(_add(_add(_add("(", (p.x).to_s), ","), (p.y).to_s), ")")
  end
  def hullStr(h)
    s = "["
    i = 0
    while i < h.length
      s = _add(s, pointStr(h[i]))
      if i < h.length - 1
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  Point = Struct.new(:x, :y, keyword_init: true)
  $pts = [Point.new(x: 16, y: 3), Point.new(x: 12, y: 17), Point.new(x: 0, y: 6), Point.new(x: -4, y: -6), Point.new(x: 16, y: 6), Point.new(x: 16, y: -7), Point.new(x: 16, y: -3), Point.new(x: 17, y: -4), Point.new(x: 5, y: 19), Point.new(x: 19, y: -8), Point.new(x: 3, y: 16), Point.new(x: 12, y: 13), Point.new(x: 3, y: -4), Point.new(x: 17, y: 5), Point.new(x: -3, y: 15), Point.new(x: -3, y: -9), Point.new(x: 0, y: 11), Point.new(x: -9, y: -3), Point.new(x: -4, y: -2), Point.new(x: 12, y: 10)]
  $hull = convexHull($pts)
  puts(_add("Convex Hull: ", hullStr($hull)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
