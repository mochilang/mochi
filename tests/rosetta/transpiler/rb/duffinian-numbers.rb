# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:47 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = a
    if x < 0
      x = -x
    end
    y = b
    if y < 0
      y = -y
    end
    while y != 0
      t = x % y
      x = y
      y = t
    end
    return x
  end
  def divisors(n)
    divs = []
    i = 1
    while i * i <= n
      if n % i == 0
        divs = divs + [i]
        j = ((n / i)).to_i
        if i != j
          divs = divs + [j]
        end
      end
      i = _add(i, 1)
    end
    return divs
  end
  def sum(xs)
    s = 0
    xs.each do |v|
      s = _add(s, v)
    end
    return s
  end
  def isDuffinian(n)
    divs = divisors(n)
    if divs.length <= 2
      return false
    end
    sigma = divs.sum
    return gcd(sigma, n) == 1
  end
  def pad(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def printTable(nums, perRow, width)
    i = 0
    line = ""
    while i < nums.length
      line = _add(_add(line, " "), pad(nums[i], width))
      if (_add(i, 1)) % perRow == 0
        puts(line[1...line.length])
        line = ""
      end
      i = _add(i, 1)
    end
    if line.length > 0
      puts(line[1...line.length])
    end
  end
  def main()
    duff = []
    n = 1
    while duff.length < 50
      if isDuffinian(n)
        duff = duff + [n]
      end
      n = _add(n, 1)
    end
    puts("First 50 Duffinian numbers:")
    printTable(duff, 10, 3)
    triplets = []
    n = 1
    while triplets.length < 20
      if isDuffinian(n) && isDuffinian(_add(n, 1)) && isDuffinian(_add(n, 2))
        triplets = triplets + [_add(_add(_add(_add(_add(_add("(", (n).to_s), ","), (_add(n, 1)).to_s), ","), (_add(n, 2)).to_s), ")")]
        n = _add(n, 3)
      end
      n = _add(n, 1)
    end
    puts("\nFirst 20 Duffinian triplets:")
    i = 0
    while i < triplets.length
      line = ""
      j = 0
      while j < 4 && i < triplets.length
        line = _add(line, padStr(triplets[i], 16))
        j = _add(j, 1)
        i = _add(i, 1)
      end
      puts(line)
    end
  end
  def padStr(s, width)
    res = s
    while res.length < width
      res = _add(res, " ")
    end
    return res
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
