# Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def nextRand()
    $seed = (_add($seed * 1664525, 1013904223)) % 2147483647
    return $seed
  end
  def randBit()
    r = nextRand()
    if r % 2 == 0
      return 0
    end
    return 255
  end
  $width = 320
  $height = 240
  $seed = _now() % 2147483647
  puts("P2")
  puts(_add(_add(($width).to_s, " "), ($height).to_s))
  puts("255")
  $y = 0
  while $y < $height
    line = ""
    x = 0
    while x < $width
      val = randBit()
      line = _add(line, (val).to_s)
      if x < $width - 1
        line = _add(line, " ")
      end
      x = _add(x, 1)
    end
    puts(line)
    $y = _add($y, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
