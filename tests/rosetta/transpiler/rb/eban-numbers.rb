# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def ebanNumbers(start, stop)
    nums = []
    $billions.each do |b|
      $vals.each do |m|
        $vals.each do |t|
          $vals.each do |r|
            n = _add(_add(_add(b * 1000000000, m * 1000000), t * 1000), r)
            if (n >= start) && (n <= stop)
              nums = nums + [n]
            end
          end
        end
      end
    end
    return nums
  end
  def countEban(start, stop)
    count = 0
    $billions.each do |b|
      $vals.each do |m|
        $vals.each do |t|
          $vals.each do |r|
            n = _add(_add(_add(b * 1000000000, m * 1000000), t * 1000), r)
            if (n >= start) && (n <= stop)
              count = _add(count, 1)
            end
          end
        end
      end
    end
    return count
  end
  def main()
    ranges = [[2, 1000, true], [1000, 4000, true], [2, 10000, false], [2, 100000, false], [2, 1000000, false], [2, 10000000, false], [2, 100000000, false], [2, 1000000000, false]]
    ranges.each do |rg|
      start = (rg[0]).to_i
      stop = (rg[1]).to_i
      show = (rg[2])
      if start == 2
        puts(_add(_add("eban numbers up to and including ", (stop).to_s), ":"))
      else
        puts(_add(_add(_add(_add("eban numbers between ", (start).to_s), " and "), (stop).to_s), " (inclusive):"))
      end
      if show
        nums = ebanNumbers(start, stop)
        line = ""
        i = 0
        while i < nums.length
          line = _add(_add(line, (nums[i]).to_s), " ")
          i = _add(i, 1)
        end
        if line.length > 0
          puts(line[0...line.length - 1])
        end
      end
      c = countEban(start, stop)
      puts(_add(_add("count = ", (c).to_s), "\n"))
    end
  end
  $vals = [0, 2, 4, 6, 30, 32, 34, 36, 40, 42, 44, 46, 50, 52, 54, 56, 60, 62, 64, 66]
  $billions = [0, 2, 4, 6]
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
