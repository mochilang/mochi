# Generated by Mochi transpiler v0.10.42 on 2025-07-27 16:43 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def divisors(n)
    divs = [1]
    divs2 = []
    i = 2
    while i * i <= n
      if n % i == 0
        j = ((n / i)).to_i
        divs = divs + [i]
        if i != j
          divs2 = divs2 + [j]
        end
      end
      i = _add(i, 1)
    end
    j = divs2.length - 1
    while j >= 0
      divs = divs + [divs2[j]]
      j = j - 1
    end
    return divs
  end
  def sum(xs)
    tot = 0
    xs.each do |v|
      tot = _add(tot, v)
    end
    return tot
  end
  def sumStr(xs)
    s = ""
    i = 0
    while i < xs.length
      s = _add(_add(s, (xs[i]).to_s), " + ")
      i = _add(i, 1)
    end
    return s[0...s.length - 3]
  end
  def pad2(n)
    s = (n).to_s
    if s.length < 2
      return _add(" ", s)
    end
    return s
  end
  def pad5(n)
    s = (n).to_s
    while s.length < 5
      s = _add(" ", s)
    end
    return s
  end
  def abundantOdd(searchFrom, countFrom, countTo, printOne)
    count = countFrom
    n = searchFrom
    while count < countTo
      divs = divisors(n)
      tot = divs.sum
      if tot > n
        count = _add(count, 1)
        if printOne && count < countTo
          n = _add(n, 2)
          next
        end
        s = sumStr(divs)
        if !printOne
          puts(_add(_add(_add(_add(_add(_add(pad2(count), ". "), pad5(n)), " < "), s), " = "), (tot).to_s))
        else
          puts(_add(_add(_add(_add((n).to_s, " < "), s), " = "), (tot).to_s))
        end
      end
      n = _add(n, 2)
    end
    return n
  end
  def main()
    max = 25
    puts(_add(_add("The first ", (max).to_s), " abundant odd numbers are:"))
    n = abundantOdd(1, 0, max, false)
    puts("\nThe one thousandth abundant odd number is:")
    abundantOdd(n, max, 1000, true)
    puts("\nThe first abundant odd number above one billion is:")
    abundantOdd(1000000001, 0, 1, true)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
