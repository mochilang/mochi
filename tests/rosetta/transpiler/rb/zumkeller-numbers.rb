# Generated by Mochi transpiler v0.10.42 on 2025-07-27 16:35 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def getDivisors(n)
    divs = [1, n]
    i = 2
    while i * i <= n
      if n % i == 0
        j = ((n / i)).to_i
        divs = divs + [i]
        if i != j
          divs = divs + [j]
        end
      end
      i = _add(i, 1)
    end
    return divs
  end
  def sum(xs)
    s = 0
    xs.each do |x|
      s = _add(s, x)
    end
    return s
  end
  def isPartSum(divs, target)
    possible = []
    i = 0
    while i <= target
      possible = possible + [false]
      i = _add(i, 1)
    end
    possible[0] = true
    divs.each do |v|
      s = target
      while s >= v
        if possible[s - v]
          possible[s] = true
        end
        s = s - 1
      end
    end
    return possible[target]
  end
  def isZumkeller(n)
    divs = getDivisors(n)
    s = divs.sum
    if s % 2 == 1
      return false
    end
    if n % 2 == 1
      abundance = s - 2 * n
      return abundance > 0 && abundance % 2 == 0
    end
    return isPartSum(divs, s / 2)
  end
  def pad(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def main()
    puts("The first 220 Zumkeller numbers are:")
    count = 0
    line = ""
    i = 2
    while count < 220
      if isZumkeller(i)
        line = _add(_add(line, pad(i, 3)), " ")
        count = _add(count, 1)
        if count % 20 == 0
          puts(line[0...line.length - 1])
          line = ""
        end
      end
      i = _add(i, 1)
    end
    puts("\nThe first 40 odd Zumkeller numbers are:")
    count = 0
    line = ""
    i = 3
    while count < 40
      if isZumkeller(i)
        line = _add(_add(line, pad(i, 5)), " ")
        count = _add(count, 1)
        if count % 10 == 0
          puts(line[0...line.length - 1])
          line = ""
        end
      end
      i = _add(i, 2)
    end
    puts("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:")
    count = 0
    line = ""
    i = 3
    while count < 40
      if i % 10 != 5 && isZumkeller(i)
        line = _add(_add(line, pad(i, 7)), " ")
        count = _add(count, 1)
        if count % 8 == 0
          puts(line[0...line.length - 1])
          line = ""
        end
      end
      i = _add(i, 2)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
