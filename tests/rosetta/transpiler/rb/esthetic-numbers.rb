# Generated by Mochi transpiler v0.10.42 on 2025-07-27 10:22 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  $digits = "0123456789abcdef"
  def toBase(n, b)
    if n == 0
      return "0"
    end
    v = n
    out = ""
    while v > 0
      d = v % b
      out = _add($digits[d..._add(d, 1)], out)
      v = v / b
    end
    return out
  end
  def uabs(a, b)
    if a > b
      return a - b
    end
    return b - a
  end
  def isEsthetic(n, b)
    if n == 0
      return false
    end
    i = n % b
    n = n / b
    while n > 0
      j = n % b
      if uabs(i, j) != 1
        return false
      end
      n = n / b
      i = j
    end
    return true
  end
  $esths = []
  def dfs(n, m, i)
    if i >= n && i <= m
      $esths = $esths + [i]
    end
    if i == 0 || i > m
      return
    end
    d = i % 10
    i1 = _add(i * 10, d) - 1
    i2 = _add(i1, 2)
    if d == 0
      dfs(n, m, i2)
    else
      if d == 9
        dfs(n, m, i1)
      else
        dfs(n, m, i1)
        dfs(n, m, i2)
      end
    end
  end
  def commatize(n)
    s = (n).to_s
    i = s.length - 3
    while i >= 1
      s = _add(_add(s[0...i], ","), s[i...s.length])
      i = i - 3
    end
    return s
  end
  def listEsths(n, n2, m, m2, perLine, showAll)
    $esths = []
    i = 0
    while i < 10
      dfs(n2, m2, i)
      i = _add(i, 1)
    end
    le = $esths.length
    puts(_add(_add(_add(_add(_add(_add("Base 10: ", commatize(le)), " esthetic numbers between "), commatize(n)), " and "), commatize(m)), ":"))
    if showAll
      c = 0
      line = ""
      $esths.each do |v|
        if line.length > 0
          line = _add(line, " ")
        end
        line = _add(line, (v).to_s)
        c = _add(c, 1)
        if c % perLine == 0
          puts(line)
          line = ""
        end
      end
      if line.length > 0
        puts(line)
      end
    else
      line = ""
      idx = 0
      while idx < perLine
        if line.length > 0
          line = _add(line, " ")
        end
        line = _add(line, ($esths[idx]).to_s)
        idx = _add(idx, 1)
      end
      puts(line)
      puts("............")
      line = ""
      idx = le - perLine
      while idx < le
        if line.length > 0
          line = _add(line, " ")
        end
        line = _add(line, ($esths[idx]).to_s)
        idx = _add(idx, 1)
      end
      puts(line)
    end
    puts("")
  end
  def main()
    b = 2
    while b <= 16
      start = 4 * b
      stop = 6 * b
      puts(_add(_add(_add(_add(_add(_add("Base ", (b).to_s), ": "), (start).to_s), "th to "), (stop).to_s), "th esthetic numbers:"))
      n = 1
      c = 0
      line = ""
      while c < stop
        if isEsthetic(n, b)
          c = _add(c, 1)
          if c >= start
            if line.length > 0
              line = _add(line, " ")
            end
            line = _add(line, toBase(n, b))
          end
        end
        n = _add(n, 1)
      end
      puts(line)
      puts("")
      b = _add(b, 1)
    end
    listEsths(1000, 1010, 9999, 9898, 16, true)
    listEsths(100000000, 101010101, 130000000, 123456789, 9, true)
    listEsths(100000000000, 101010101010, 130000000000, 123456789898, 7, false)
    listEsths(100000000000000, 101010101010101, 130000000000000, 123456789898989, 5, false)
    listEsths(100000000000000000, 101010101010101010, 130000000000000000, 123456789898989898, 4, false)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
