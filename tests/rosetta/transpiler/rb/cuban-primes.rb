# Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:06 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def modPow(base, exp, m)
    result = 1 % m
    b = base % m
    e = exp
    while e > 0
      if e % 2 == 1
        result = (result * b) % m
      end
      b = (b * b) % m
      e = ((e / 2)).to_i
    end
    return result
  end
  def isPrime(n)
    if n < 2
      return false
    end
    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29].each do |p|
      if n % p == 0
        return n == p
      end
    end
    d = n - 1
    s = 0
    while d % 2 == 0
      d = d / 2
      s = _add(s, 1)
    end
    [2, 325, 9375, 28178, 450775, 9780504, 1795265022].each do |a|
      if a % n == 0
        return true
      end
      x = modPow(a, d, n)
      if x == 1 || x == n - 1
        next
      end
      r = 1
      passed = false
      while r < s
        x = (x * x) % n
        if x == n - 1
          passed = true
          break
        end
        r = _add(r, 1)
      end
      if !passed
        return false
      end
    end
    return true
  end
  def commatize(n)
    s = (n).to_s
    i = s.length - 3
    while i > 0
      s = _add(_add(s[0...i], ","), s[i...s.length])
      i = i - 3
    end
    return s
  end
  def pad(s, width)
    out = s
    while out.length < width
      out = _add(" ", out)
    end
    return out
  end
  def join(xs, sep)
    res = ""
    i = 0
    while i < xs.length
      if i > 0
        res = _add(res, sep)
      end
      res = _add(res, xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def formatRow(row)
    padded = []
    i = 0
    while i < row.length
      padded = padded + [pad(row[i], 9)]
      i = _add(i, 1)
    end
    return _add(_add("[", join(padded, " ")), "]")
  end
  def main()
    cubans = []
    cube1 = 1
    count = 0
    cube100k = 0
    i = 1
    while true
      j = _add(i, 1)
      cube2 = j * j * j
      diff = cube2 - cube1
      if isPrime(diff)
        if count < 200
          cubans = cubans + [commatize(diff)]
        end
        count = _add(count, 1)
        if count == 100000
          cube100k = diff
          break
        end
      end
      cube1 = cube2
      i = _add(i, 1)
    end
    puts("The first 200 cuban primes are:-")
    row = 0
    while row < 20
      slice = []
      k = 0
      while k < 10
        slice = slice + [cubans[_add(row * 10, k)]]
        k = _add(k, 1)
      end
      puts(formatRow(slice))
      row = _add(row, 1)
    end
    puts(_add("\nThe 100,000th cuban prime is ", commatize(cube100k)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
