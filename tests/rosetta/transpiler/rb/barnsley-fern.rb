# Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:07 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  $xMin = -2.182
  $xMax = 2.6558
  $yMin = 0.0
  $yMax = 9.9983
  $width = 60
  $nIter = 10000
  $dx = $xMax - $xMin
  $dy = $yMax - $yMin
  $height = (($width * $dy / $dx)).to_i
  $grid = []
  $row = 0
  while $row < $height
    $line = []
    $col = 0
    while $col < $width
      $line = $line + [" "]
      $col = _add($col, 1)
    end
    $grid = $grid + [$line]
    $row = _add($row, 1)
  end
  $seed = 1
  def randInt(s, n)
    next_ = (_add(s * 1664525, 1013904223)) % 2147483647
    return [next_, next_ % n]
  end
  $x = 0.0
  $y = 0.0
  $ix = (((($width).to_f) * ($x - $xMin) / $dx)).to_i
  $iy = (((($height).to_f) * ($yMax - $y) / $dy)).to_i
  if $ix >= 0 && $ix < $width && $iy >= 0 && $iy < $height
    $grid[$iy][$ix] = "*"
  end
  $i = 0
  while $i < $nIter
    $res = randInt($seed, 100)
    $seed = $res[0]
    $r = $res[1]
    if $r < 85
      $nx = _add(0.85 * $x, 0.04 * $y)
      $ny = _add(_add(-0.04 * $x, 0.85 * $y), 1.6)
      $x = $nx
      $y = $ny
    else
      if $r < 92
        $nx = 0.2 * $x - 0.26 * $y
        $ny = _add(_add(0.23 * $x, 0.22 * $y), 1.6)
        $x = $nx
        $y = $ny
      else
        if $r < 99
          $nx = _add(-0.15 * $x, 0.28 * $y)
          $ny = _add(_add(0.26 * $x, 0.24 * $y), 0.44)
          $x = $nx
          $y = $ny
        else
          $x = 0.0
          $y = 0.16 * $y
        end
      end
    end
    $ix = (((($width).to_f) * ($x - $xMin) / $dx)).to_i
    $iy = (((($height).to_f) * ($yMax - $y) / $dy)).to_i
    if $ix >= 0 && $ix < $width && $iy >= 0 && $iy < $height
      $grid[$iy][$ix] = "*"
    end
    $i = _add($i, 1)
  end
  $row = 0
  while $row < $height
    $line = ""
    $col = 0
    while $col < $width
      $line = _add($line, $grid[$row][$col])
      $col = _add($col, 1)
    end
    puts($line)
    $row = _add($row, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
