# Generated by Mochi transpiler v0.10.37 on 2025-07-23 13:37 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end

def randOrder(seed, n)
  next_ = (_add(seed * 1664525, 1013904223)) % 2147483647
  return [next_, next_ % n]
end
def randChaos(seed, n)
  next_ = (_add(seed * 1103515245, 12345)) % 2147483647
  return [next_, next_ % n]
end
def main()
  nBuckets = 10
  initialSum = 1000
  buckets = []
  (0...nBuckets).each do |i|
    buckets = buckets + [0]
  end
  i = nBuckets
  dist = initialSum
  while i > 0
    v = dist / i
    i = i - 1
    buckets[i] = v
    dist = dist - v
  end
  tc0 = 0
  tc1 = 0
  total = 0
  nTicks = 0
  seedOrder = 1
  seedChaos = 2
  puts("sum  ---updates---    mean  buckets")
  t = 0
  while t < 5
    r = randOrder(seedOrder, nBuckets)
    seedOrder = r[0]
    b1 = r[1]
    b2 = (_add(b1, 1)) % nBuckets
    v1 = buckets[b1]
    v2 = buckets[b2]
    if v1 > v2
      a = ((v1 - v2) / 2)
      if a > buckets[b1]
        a = buckets[b1]
      end
      buckets[b1] = buckets[b1] - a
      buckets[b2] = _add(buckets[b2], a)
    else
      a = ((v2 - v1) / 2)
      if a > buckets[b2]
        a = buckets[b2]
      end
      buckets[b2] = buckets[b2] - a
      buckets[b1] = _add(buckets[b1], a)
    end
    tc0 = _add(tc0, 1)
    r = randChaos(seedChaos, nBuckets)
    seedChaos = r[0]
    b1 = r[1]
    b2 = (_add(b1, 1)) % nBuckets
    r = randChaos(seedChaos, _add(buckets[b1], 1))
    seedChaos = r[0]
    amt = r[1]
    if amt > buckets[b1]
      amt = buckets[b1]
    end
    buckets[b1] = buckets[b1] - amt
    buckets[b2] = _add(buckets[b2], amt)
    tc1 = _add(tc1, 1)
    sum = 0
    idx = 0
    while idx < nBuckets
      sum = _add(sum, buckets[idx])
      idx = _add(idx, 1)
    end
    total = _add(_add(total, tc0), tc1)
    nTicks = _add(nTicks, 1)
    puts(_add(_add(_add(_add(_add(_add(_add(_add((sum).to_s, " "), (tc0).to_s), " "), (tc1).to_s), " "), (total / nTicks).to_s), "  "), (buckets).to_s))
    tc0 = 0
    tc1 = 0
    t = _add(t, 1)
  end
end
main()
