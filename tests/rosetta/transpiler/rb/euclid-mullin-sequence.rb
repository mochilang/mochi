# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = a
    y = b
    while y != $zero
      t = x % y
      x = y
      y = t
    end
    return x
  end
  def absBig(x)
    if x < $zero
      return $zero - x
    end
    return x
  end
  def pollardRho(n, c)
    g = ->(x, y) {
      x2 = x * x
      x2 = _add(x2, c)
      return x2 % y
    }
    x = 2
    y = 2
    z = 1
    d = 0
    count = 0
    while true
      x = g.call(x, n)
      y = g.call(g.call(y, n), n)
      d = absBig(x - y)
      d = d % n
      z = z * d
      count = _add(count, 1)
      if count == 100
        d = gcd(z, n)
        if d != $one
          break
        end
        z = $one
        count = 0
      end
    end
    if d == n
      return $zero
    end
    return d
  end
  def smallestPrimeFactorWheel(n, max)
    if n % $two == $zero
      return $two
    end
    if n % $three == $zero
      return $three
    end
    if n % $five == $zero
      return $five
    end
    k = 7
    inc = [$four, $two, $four, $two, $four, $six, $two, $six]
    i = 0
    while k * k <= n
      if n % k == $zero
        return k
      end
      k = _add(k, inc[i])
      if k > max
        break
      end
      i = (_add(i, 1)) % 8
    end
    return $zero
  end
  def smallestPrimeFactor(n)
    s = smallestPrimeFactorWheel(n, $k100)
    if s != $zero
      return s
    end
    c = 1
    while true
      d = pollardRho(n, c)
      if d == $zero
        if c == $ten
          return n
        end
        c = _add(c, $one)
      else
        factor = smallestPrimeFactorWheel(d, d)
        s2 = smallestPrimeFactorWheel(n / d, factor)
        if s2 != $zero
          if s2 < factor
            return s2
          else
            return factor
          end
        end
        return factor
      end
    end
  end
  def main()
    k = 19
    puts(_add(_add("First ", (k).to_s), " terms of the Euclidâ€“Mullin sequence:"))
    puts(2)
    prod = 2
    count = 1
    while count < k
      z = _add(prod, $one)
      t = smallestPrimeFactor(z)
      puts(t)
      prod = prod * t
      count = _add(count, 1)
    end
  end
  $zero = 0
  $one = 1
  $two = 2
  $three = 3
  $four = 4
  $five = 5
  $six = 6
  $ten = 10
  $k100 = 100000
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
