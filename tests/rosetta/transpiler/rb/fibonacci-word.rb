# Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def entropy(s)
    counts = {}
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if counts.key?(ch)
        counts[ch] = _add(counts[ch], 1)
      else
        counts[ch] = 1
      end
      i = _add(i, 1)
    end
    hm = 0.0
    counts.keys().each do |k|
      c = (counts[k]).to_f
      hm = _add(hm, c * (math.log(c) / math.log(2.0)))
    end
    l = (s.length).to_f
    return (math.log(l) / math.log(2.0)) - hm / l
  end
  def fibonacciWord(n)
    a = "1"
    b = "0"
    i = 1
    while i < n
      tmp = b
      b = _add(b, a)
      a = tmp
      i = _add(i, 1)
    end
    return a
  end
  def main()
    puts(_add(_add(pad("N", 3), pad("Length", 9)), "  Entropy      Word"))
    n = 1
    while n < 10
      s = fibonacciWord(n)
      puts(_add(_add(_add(_add(_add(pad((n).to_s, 3), pad((s.length).to_s, 9)), "  "), fmt(entropy(s))), "  "), s))
      n = _add(n, 1)
    end
    while n <= 37
      s = fibonacciWord(n)
      puts(_add(_add(_add(pad((n).to_s, 3), pad((s.length).to_s, 9)), "  "), fmt(entropy(s))))
      n = _add(n, 1)
    end
  end
  def pad(s, w)
    t = s
    while t.length < w
      t = _add(" ", t)
    end
    return t
  end
  def fmt(x)
    y = floorf(_add(x * 100000000.0, 0.5)) / 100000000.0
    s = (y).to_s
    dot = _indexOf(s, ".")
    if dot == 0 - 1
      s = _add(s, ".00000000")
    else
      d = s.length - dot - 1
      while d < 8
        s = _add(s, "0")
        d = _add(d, 1)
      end
    end
    return s
  end
  def floorf(x)
    y = (x).to_i
    return (y).to_f
  end
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return 0 - 1
  end
  module PythonMath
  def self.pi; Math::PI; end
  def self.e; Math::E; end
  def self.sqrt(x); Math.sqrt(x); end
  def self.pow(x, y); x ** y; end
  def self.sin(x); Math.sin(x); end
  def self.log(x); Math.log(x); end
end
def math; PythonMath; end

  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
