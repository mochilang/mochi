# Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:50 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    g = x
    i = 0
    while i < 20
      g = (_add(g, x / g)) / 2.0
      i = _add(i, 1)
    end
    return g
  end
  $dxs = [-0.533, 0.27, 0.859, -0.043, -0.205, -0.127, -0.071, 0.275, 1.251, -0.231, -0.401, 0.269, 0.491, 0.951, 1.15, 0.001, -0.382, 0.161, 0.915, 2.08, -2.337, 0.034, -0.126, 0.014, 0.709, 0.129, -1.093, -0.483, -1.193, 0.02, -0.051, 0.047, -0.095, 0.695, 0.34, -0.182, 0.287, 0.213, -0.423, -0.021, -0.134, 1.798, 0.021, -1.099, -0.361, 1.636, -1.134, 1.315, 0.201, 0.034, 0.097, -0.17, 0.054, -0.553, -0.024, -0.181, -0.7, -0.361, -0.789, 0.279, -0.174, -0.009, -0.323, -0.658, 0.348, -0.528, 0.881, 0.021, -0.853, 0.157, 0.648, 1.774, -1.043, 0.051, 0.021, 0.247, -0.31, 0.171, 0.0, 0.106, 0.024, -0.386, 0.962, 0.765, -0.125, -0.289, 0.521, 0.017, 0.281, -0.749, -0.149, -2.436, -0.909, 0.394, -0.113, -0.598, 0.443, -0.521, -0.799, 0.087]
  $dys = [0.136, 0.717, 0.459, -0.225, 1.392, 0.385, 0.121, -0.395, 0.49, -0.682, -0.065, 0.242, -0.288, 0.658, 0.459, 0.0, 0.426, 0.205, -0.765, -2.188, -0.742, -0.01, 0.089, 0.208, 0.585, 0.633, -0.444, -0.351, -1.087, 0.199, 0.701, 0.096, -0.025, -0.868, 1.051, 0.157, 0.216, 0.162, 0.249, -0.007, 0.009, 0.508, -0.79, 0.723, 0.881, -0.508, 0.393, -0.226, 0.71, 0.038, -0.217, 0.831, 0.48, 0.407, 0.447, -0.295, 1.126, 0.38, 0.549, -0.445, -0.046, 0.428, -0.074, 0.217, -0.822, 0.491, 1.347, -0.141, 1.23, -0.044, 0.079, 0.219, 0.698, 0.275, 0.056, 0.031, 0.421, 0.064, 0.721, 0.104, -0.729, 0.65, -1.103, 0.154, -1.72, 0.051, -0.385, 0.477, 1.537, -0.901, 0.939, -0.411, 0.341, -0.411, 0.106, 0.224, -0.947, -1.424, -0.542, -1.032]
  def funnel(fa, r)
    x = 0.0
    result = []
    i = 0
    while i < fa.length
      f = fa[i]
      result = result + [_add(x, f)]
      x = r.call(x, f)
      i = _add(i, 1)
    end
    return result
  end
  def mean(fa)
    sum = 0.0
    i = 0
    while i < fa.length
      sum = _add(sum, fa[i])
      i = _add(i, 1)
    end
    return sum / ((fa.length))
  end
  def stdDev(fa)
    m = mean(fa)
    sum = 0.0
    i = 0
    while i < fa.length
      d = fa[i] - m
      sum = _add(sum, d * d)
      i = _add(i, 1)
    end
    r = sqrtApprox(sum / ((fa.length)))
    return r
  end
  def experiment(label, r)
    rxs = funnel($dxs, r)
    rys = funnel($dys, r)
    puts(_add(label, "  :      x        y"))
    puts(_add(_add(_add("Mean    :  ", (mean(rxs)).to_s), ", "), (mean(rys)).to_s))
    puts(_add(_add(_add("Std Dev :  ", (stdDev(rxs)).to_s), ", "), (stdDev(rys)).to_s))
    puts("")
  end
  def main()
    experiment("Rule 1", ->(x, y) { 0.0 })
    experiment("Rule 2", ->(x, dz) { -dz })
    experiment("Rule 3", ->(z, dz) { -(_add(z, dz)) })
    experiment("Rule 4", ->(z, dz) { _add(z, dz) })
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
