# Generated by Mochi transpiler v0.10.37 on 2025-07-23 14:33 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _iterate(obj)
  if obj.is_a?(String)
    obj.each_char { |ch| yield ch }
  else
    obj.each { |elem| yield elem }
  end
end


def _pad_start(str, len, pad)
  str.rjust(len, pad[0])
end
class String
  def padStart(len, pad)
    rjust(len, pad[0])
  end
end

def bernoulli(n)
  a = []
  m = 0
  while m <= n
    a = a + [1 / ((_add(m, 1)))]
    j = m
    while j >= 1
      a[j - 1] = (j) * (a[j - 1] - a[j])
      j = j - 1
    end
    m = _add(m, 1)
  end
  return a[0]
end
(0...61).each do |i|
  $b = bernoulli(i)
  if $b.numerator() != 0
    $numStr = ($b.numerator()).to_s
    $denStr = ($b.denominator()).to_s
    puts(_add(_add(_add(_add(_add("B(", _pad_start((i).to_s, 2, " ")), ") ="), $numStr.padStart(45, " ")), "/"), $denStr))
  end
end
