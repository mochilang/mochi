# Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:07 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def bernoulli(n)
    a = []
    m = 0
    while m <= n
      a = a + [(1).to_r / (((_add(m, 1))).to_r)]
      j = m
      while j >= 1
        a[j - 1] = ((j).to_r) * (a[j - 1] - a[j])
        j = j - 1
      end
      m = _add(m, 1)
    end
    return a[0]
  end
  def padStart(s, width, pad)
    out = s
    while out.length < width
      out = _add(pad, out)
    end
    return out
  end
  (0...61).each do |i|
    $b = bernoulli(i)
    if $b.numerator() != 0
      $numStr = ($b.numerator()).to_s
      $denStr = ($b.denominator()).to_s
      puts(_add(_add(_add(_add(_add("B(", _padStart((i).to_s, 2, " ")), ") ="), _padStart($numStr, 45, " ")), "/"), $denStr))
    end
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
