# Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:54 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pow10(exp)
    n = 1
    i = 0
    while i < exp
      n = n * 10
      i = _add(i, 1)
    end
    return n
  end
  def totient(n)
    tot = n
    nn = n
    i = 2
    while i * i <= nn
      if nn % i == 0
        while nn % i == 0
          nn = nn / i
        end
        tot = tot - tot / i
      end
      if i == 2
        i = 1
      end
      i = _add(i, 2)
    end
    if nn > 1
      tot = tot - tot / nn
    end
    return tot
  end
  def getPerfectPowers(maxExp)
    upper = pow10(maxExp)
    i = 2
    while i * i < upper
      p = i
      while true
        p = p * i
        if p >= upper
          break
        end
        $pps[p] = true
      end
      i = _add(i, 1)
    end
  end
  def getAchilles(minExp, maxExp)
    lower = pow10(minExp)
    upper = pow10(maxExp)
    achilles = {}
    b = 1
    while b * b * b < upper
      b3 = b * b * b
      a = 1
      while true
        p = b3 * a * a
        if p >= upper
          break
        end
        if p >= lower
          if !($pps.key?(p))
            achilles[p] = true
          end
        end
        a = _add(a, 1)
      end
      b = _add(b, 1)
    end
    return achilles
  end
  def sortInts(xs)
    res = []
    tmp = xs
    while tmp.length > 0
      min = tmp[0]
      idx = 0
      i = 1
      while i < tmp.length
        if tmp[i] < min
          min = tmp[i]
          idx = i
        end
        i = _add(i, 1)
      end
      res = _add(res, [min])
      out = []
      j = 0
      while j < tmp.length
        if j != idx
          out = _add(out, [tmp[j]])
        end
        j = _add(j, 1)
      end
      tmp = out
    end
    return res
  end
  def pad(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def main()
    maxDigits = 15
    getPerfectPowers(5)
    achSet = getAchilles(1, 5)
    ach = []
    achSet.keys().each do |k|
      ach = _add(ach, [k])
    end
    ach = sortInts(ach)
    puts("First 50 Achilles numbers:")
    i = 0
    while i < 50
      line = ""
      j = 0
      while j < 10
        line = _add(line, pad(ach[i], 4))
        if j < 9
          line = _add(line, " ")
        end
        i = _add(i, 1)
        j = _add(j, 1)
      end
      puts(line)
    end
    puts("\nFirst 30 strong Achilles numbers:")
    strong = []
    count = 0
    idx = 0
    while count < 30
      tot = totient(ach[idx])
      if achSet.key?(tot)
        strong = _add(strong, [ach[idx]])
        count = _add(count, 1)
      end
      idx = _add(idx, 1)
    end
    i = 0
    while i < 30
      line = ""
      j = 0
      while j < 10
        line = _add(line, pad(strong[i], 5))
        if j < 9
          line = _add(line, " ")
        end
        i = _add(i, 1)
        j = _add(j, 1)
      end
      puts(line)
    end
    puts("\nNumber of Achilles numbers with:")
    counts = [1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383]
    d = 2
    while d <= maxDigits
      c = counts[d - 2]
      puts(_add(_add(pad(d, 2), " digits: "), (c).to_s))
      d = _add(d, 1)
    end
  end
  $pps = {}
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
