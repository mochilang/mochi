# Generated by Mochi transpiler v0.10.42 on 2025-07-27 16:09 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def sieve(limit)
    primes = []
    i = 0
    while i < limit
      primes = primes + [true]
      i = _add(i, 1)
    end
    primes[0] = false
    primes[1] = false
    p = 2
    while p * p < limit
      if primes[p]
        k = p * p
        while k < limit
          primes[k] = false
          k = _add(k, p)
        end
      end
      p = _add(p, 1)
    end
    return primes
  end
  def goldbachCount(primes, n)
    c = 0
    i = 1
    while i <= n / 2
      if primes[i] && primes[n - i]
        c = _add(c, 1)
      end
      i = _add(i, 1)
    end
    return c
  end
  def pad(n)
    if n < 10
      return _add("  ", (n).to_s)
    end
    if n < 100
      return _add(" ", (n).to_s)
    end
    return (n).to_s
  end
  def main()
    primes = sieve(1000)
    puts("The first 100 Goldbach numbers:")
    line = ""
    n = 2
    count = 0
    while count < 100
      v = goldbachCount(primes, 2 * n)
      line = _add(_add(line, pad(v)), " ")
      count = _add(count, 1)
      n = _add(n, 1)
      if count % 10 == 0
        puts(line[0...line.length - 1])
        line = ""
      end
    end
    val = goldbachCount(primes, 1000)
    puts(_add("\nThe 1,000th Goldbach number = ", (val).to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
