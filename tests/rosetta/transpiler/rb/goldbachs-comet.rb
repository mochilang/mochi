# Generated by Mochi transpiler v0.10.50 on 2025-07-30 23:34 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

def sieve(limit)
  primes = []
  i = 0
  while i < limit
    primes = primes + [true]
    i = _add(i, 1)
  end
  primes[0] = false
  primes[1] = false
  p = 2
  while p * p < limit
    if primes[p]
      k = p * p
      while k < limit
        primes[k] = false
        k = _add(k, p)
      end
    end
    p = _add(p, 1)
  end
  return primes
end
def goldbachCount(primes, n)
  c = 0
  i = 1
  while i <= n / 2
    if primes[i] && primes[n - i]
      c = _add(c, 1)
    end
    i = _add(i, 1)
  end
  return c
end
def pad(n)
  if n < 10
    return _add("  ", (n).to_s)
  end
  if n < 100
    return _add(" ", (n).to_s)
  end
  return (n).to_s
end
def main()
  primes = sieve(1000)
  puts("The first 100 Goldbach numbers:")
  line = ""
  n = 2
  count = 0
  while count < 100
    v = goldbachCount(primes, 2 * n)
    line = _add(_add(line, pad(v)), " ")
    count = _add(count, 1)
    n = _add(n, 1)
    if count % 10 == 0
      puts(line[0...line.length - 1])
      line = ""
    end
  end
  val = goldbachCount(primes, 1000)
  puts(_add("\nThe 1,000th Goldbach number = ", (val).to_s))
end
main()
