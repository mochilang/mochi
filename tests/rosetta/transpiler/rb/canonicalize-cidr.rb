# Generated by Mochi transpiler v0.10.42 on 2025-07-28 01:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _repeat(s, n)
  s * n.to_i
end


def _split(s, sep)
  s.to_s.split(sep.to_s)
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def split(s, sep)
    parts = []
    cur = ""
    i = 0
    while i < s.length
      if sep.length > 0 && _add(i, sep.length) <= s.length && s[i..._add(i, sep.length)] == sep
        parts = parts + [cur]
        cur = ""
        i = _add(i, sep.length)
      else
        cur = _add(cur, s[i..._add(i, 1)])
        i = _add(i, 1)
      end
    end
    parts = parts + [cur]
    return parts
  end
  def join(xs, sep)
    res = ""
    i = 0
    while i < xs.length
      if i > 0
        res = _add(res, sep)
      end
      res = _add(res, xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def repeat(ch, n)
    out = ""
    i = 0
    while i < n
      out = _add(out, ch)
      i = _add(i, 1)
    end
    return out
  end
  def parseIntStr(str)
    i = 0
    neg = false
    if str.length > 0 && str[0...1] == "-"
      neg = true
      i = 1
    end
    n = 0
    digits = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    while i < str.length
      n = _add(n * 10, digits[str[i..._add(i, 1)]])
      i = _add(i, 1)
    end
    if neg
      n = -n
    end
    return n
  end
  def toBinary(n, bits)
    b = ""
    val = n
    i = 0
    while i < bits
      b = _add((val % 2).to_s, b)
      val = ((val / 2)).to_i
      i = _add(i, 1)
    end
    return b
  end
  def binToInt(bits)
    n = 0
    i = 0
    while i < bits.length
      n = _add(n * 2, parseIntStr(bits[i..._add(i, 1)]))
      i = _add(i, 1)
    end
    return n
  end
  def padRight(s, width)
    out = s
    while out.length < width
      out = _add(out, " ")
    end
    return out
  end
  def canonicalize(cidr)
    parts = _split(cidr, "/")
    dotted = parts[0]
    size = parseIntStr(parts[1])
    binParts = []
    _split(dotted, ".").each do |p|
      binParts = binParts + [toBinary(parseIntStr(p), 8)]
    end
    binary = join(binParts, "")
    binary = _add(binary[0...size], _repeat("0", 32 - size))
    canonParts = []
    i = 0
    while i < binary.length
      canonParts = canonParts + [(binToInt(binary[i..._add(i, 8)])).to_s]
      i = _add(i, 8)
    end
    return _add(_add(join(canonParts, "."), "/"), parts[1])
  end
  tests = ["87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"]
  tests.each do |t|
    puts(_add(_add(padRight(t, 18), " -> "), canonicalize(t)))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
