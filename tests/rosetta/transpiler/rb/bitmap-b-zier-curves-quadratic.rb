# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pixelFromRgb(rgb)
    r = (((rgb / 65536) % 256)).to_i
    g = (((rgb / 256) % 256)).to_i
    b = ((rgb % 256)).to_i
    return Pixel.new(r: r, g: g, b: b)
  end
  def newBitmap(cols, rows)
    d = []
    y = 0
    while y < rows
      row = []
      x = 0
      while x < cols
        row = row + [Pixel.new(r: 0, g: 0, b: 0)]
        x = _add(x, 1)
      end
      d = d + [row]
      y = _add(y, 1)
    end
    return {"cols" => cols, "rows" => rows, "data" => d}
  end
  def setPx(b, x, y, p)
    cols = (b["cols"]).to_i
    rows = (b["rows"]).to_i
    if x >= 0 && x < cols && y >= 0 && y < rows
      b["data"][y][x] = p
    end
  end
  def fill(b, p)
    cols = (b["cols"]).to_i
    rows = (b["rows"]).to_i
    y = 0
    while y < rows
      x = 0
      while x < cols
        b["data"][y][x] = p
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
  end
  def fillRgb(b, rgb)
    fill(b, pixelFromRgb(rgb))
  end
  def line(b, x0, y0, x1, y1, p)
    dx = x1 - x0
    if dx < 0
      dx = -dx
    end
    dy = y1 - y0
    if dy < 0
      dy = -dy
    end
    sx = -1
    if x0 < x1
      sx = 1
    end
    sy = -1
    if y0 < y1
      sy = 1
    end
    err = dx - dy
    while true
      setPx(b, x0, y0, p)
      if x0 == x1 && y0 == y1
        break
      end
      e2 = 2 * err
      if e2 > (0 - dy)
        err = err - dy
        x0 = _add(x0, sx)
      end
      if e2 < dx
        err = _add(err, dx)
        y0 = _add(y0, sy)
      end
    end
  end
  def bezier2(b, x1, y1, x2, y2, x3, y3, p)
    px = []
    py = []
    i = 0
    while i <= $b2Seg
      px = px + [0]
      py = py + [0]
      i = _add(i, 1)
    end
    fx1 = (x1).to_f
    fy1 = (y1).to_f
    fx2 = (x2).to_f
    fy2 = (y2).to_f
    fx3 = (x3).to_f
    fy3 = (y3).to_f
    i = 0
    while i <= $b2Seg
      c = ((i).to_f) / (($b2Seg).to_f)
      a = 1.0 - c
      a2 = a * a
      b2 = 2.0 * c * a
      c2 = c * c
      px[i] = ((_add(_add(a2 * fx1, b2 * fx2), c2 * fx3))).to_i
      py[i] = ((_add(_add(a2 * fy1, b2 * fy2), c2 * fy3))).to_i
      i = _add(i, 1)
    end
    x0 = px[0]
    y0 = py[0]
    i = 1
    while i <= $b2Seg
      x = px[i]
      y = py[i]
      line(b, x0, y0, x, y, p)
      x0 = x
      y0 = y
      i = _add(i, 1)
    end
  end
  $b2Seg = 20
  Pixel = Struct.new(:r, :g, :b, keyword_init: true)
  $b = newBitmap(400, 300)
  fillRgb($b, 14614575)
  bezier2($b, 20, 150, 500, -100, 300, 280, pixelFromRgb(4165615))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
