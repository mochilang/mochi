# Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def log10floor(n)
    p = 0
    v = n
    while v >= 10
      v = ((v / 10)).to_i
      p = _add(p, 1)
    end
    return p
  end
  def commatize(n)
    s = (n).to_s
    res = ""
    i = 0
    while i < s.length
      if i > 0 && (s.length - i) % 3 == 0
        res = _add(res, ",")
      end
      res = _add(res, s[i..._add(i, 1)])
      i = _add(i, 1)
    end
    return res
  end
  def showDistribution(sizes)
    bins = []
    i = 0
    while i < 12
      bins = bins + [0]
      i = _add(i, 1)
    end
    total = 0
    sizes.each do |sz|
      total = _add(total, sz)
      idx = 0
      if sz > 0
        idx = _add(log10floor(sz), 1)
      end
      bins[idx] = _add(bins[idx], 1)
    end
    puts("File size distribution:\n")
    i = 0
    while i < bins.length
      prefix = "  "
      if i > 0
        prefix = "+ "
      end
      puts(_add(_add(_add(_add(prefix, "Files less than 10 ^ "), (i).to_s), " bytes : "), (bins[i]).to_s))
      i = _add(i, 1)
    end
    puts("                                  -----")
    puts(_add("= Total number of files         : ", (sizes.length).to_s))
    puts(_add(_add("  Total size of files           : ", commatize(total)), " bytes"))
  end
  def main()
    sizes = [0, 1, 9, 10, 99, 100, 1234, 50000, 730000, 8200000]
    showDistribution(sizes)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
