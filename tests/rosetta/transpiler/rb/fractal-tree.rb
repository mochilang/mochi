# Generated by Mochi transpiler v0.10.50 on 2025-07-30 23:34 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

def _mod(x, m)
  return x - ((((x / m)).to_i).to_f) * m
end
def _sin(x)
  y = _mod(_add(x, $PI), 2.0 * $PI) - $PI
  y2 = y * y
  y3 = y2 * y
  y5 = y3 * y2
  y7 = y5 * y2
  return _add(y - y3 / 6.0, y5 / 120.0) - y7 / 5040.0
end
def _cos(x)
  y = _mod(_add(x, $PI), 2.0 * $PI) - $PI
  y2 = y * y
  y4 = y2 * y2
  y6 = y4 * y2
  return _add(1.0 - y2 / 2.0, y4 / 24.0) - y6 / 720.0
end
def clearGrid()
  g = []
  y = 0
  while y < $height
    row = []
    x = 0
    while x < $width
      row = row + [" "]
      x = _add(x, 1)
    end
    g = g + [row]
    y = _add(y, 1)
  end
  return g
end
def drawPoint(g, x, y)
  if x >= 0 && x < $width && y >= 0 && y < $height
    row = g[y]
    row[x] = "#"
    g[y] = row
  end
end
def bresenham(x0, y0, x1, y1, g)
  dx = x1 - x0
  if dx < 0
    dx = -dx
  end
  dy = y1 - y0
  if dy < 0
    dy = -dy
  end
  sx = -1
  if x0 < x1
    sx = 1
  end
  sy = -1
  if y0 < y1
    sy = 1
  end
  err = dx - dy
  while true
    drawPoint(g, x0, y0)
    if x0 == x1 && y0 == y1
      break
    end
    e2 = 2 * err
    if e2 > (-dy)
      err = err - dy
      x0 = _add(x0, sx)
    end
    if e2 < dx
      err = _add(err, dx)
      y0 = _add(y0, sy)
    end
  end
end
def ftree(g, x, y, dist, dir, d)
  rad = dir * $PI / 180.0
  x2 = _add(x, dist * _sin(rad))
  y2 = y - dist * _cos(rad)
  bresenham((x).to_i, (y).to_i, (x2).to_i, (y2).to_i, g)
  if d > 0
    ftree(g, x2, y2, dist * $frac, dir - $angle, d - 1)
    ftree(g, x2, y2, dist * $frac, _add(dir, $angle), d - 1)
  end
end
def render(g)
  out = ""
  y = 0
  while y < $height
    line = ""
    x = 0
    while x < $width
      line = _add(line, g[y][x])
      x = _add(x, 1)
    end
    out = _add(out, line)
    if y < $height - 1
      out = _add(out, "\n")
    end
    y = _add(y, 1)
  end
  return out
end
def main()
  grid = clearGrid()
  ftree(grid, (($width / 2)).to_f, (($height - 1)).to_f, $length, 0.0, $depth)
  puts(render(grid))
end
$PI = 3.141592653589793
$width = 80
$height = 40
$depth = 6
$angle = 12.0
$length = 12.0
$frac = 0.8
main()
