# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def padLeft(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def modPow(base, exp, mod)
    result = 1 % mod
    b = base % mod
    e = exp
    while e > 0
      if e % 2 == 1
        result = (result * b) % mod
      end
      b = (b * b) % mod
      e = e / 2
    end
    return result
  end
  def main()
    k = 2
    while k <= 10
      puts(_add(_add("The first 50 Curzon numbers using a base of ", (k).to_s), " :"))
      count = 0
      n = 1
      curzon50 = []
      while true
        d = _add(k * n, 1)
        if (_add(modPow(k, n, d), 1)) % d == 0
          if count < 50
            curzon50 = (curzon50 << n)
          end
          count = _add(count, 1)
          if count == 50
            idx = 0
            while idx < curzon50.length
              line = ""
              j = 0
              while j < 10
                line = _add(_add(line, padLeft(curzon50[idx], 4)), " ")
                idx = _add(idx, 1)
                j = _add(j, 1)
              end
              puts(line[0...line.length - 1])
            end
          end
          if count == 1000
            puts(_add("\nOne thousandth: ", (n).to_s))
            break
          end
        end
        n = _add(n, 1)
      end
      puts("")
      k = _add(k, 2)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
