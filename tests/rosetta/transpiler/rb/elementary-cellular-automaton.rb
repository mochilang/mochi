# Generated by Mochi transpiler v0.10.42 on 2025-07-27 10:22 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def bitAt(x, idx)
    v = x
    i = 0
    while i < idx
      v = ((v / 2)).to_i
      i = _add(i, 1)
    end
    return v % 2
  end
  def outputState(state)
    line = ""
    i = 0
    while i < state.length
      if state[i..._add(i, 1)] == "1"
        line = _add(line, "#")
      else
        line = _add(line, " ")
      end
      i = _add(i, 1)
    end
    puts(line)
  end
  def step(state, r)
    cells = state.length
    out = ""
    i = 0
    while i < cells
      l = state[(_add(i - 1, cells)) % cells..._add((_add(i - 1, cells)) % cells, 1)]
      c = state[i..._add(i, 1)]
      rt = state[(_add(i, 1)) % cells..._add((_add(i, 1)) % cells, 1)]
      idx = 0
      if l == "1"
        idx = _add(idx, 4)
      end
      if c == "1"
        idx = _add(idx, 2)
      end
      if rt == "1"
        idx = _add(idx, 1)
      end
      if bitAt(r, idx) == 1
        out = _add(out, "1")
      else
        out = _add(out, "0")
      end
      i = _add(i, 1)
    end
    return out
  end
  def elem(r, cells, generations, state)
    outputState(state)
    g = 0
    s = state
    while g < generations
      s = step(s, r)
      outputState(s)
      g = _add(g, 1)
    end
  end
  def randInit(cells, seed)
    s = ""
    val = seed
    i = 0
    while i < cells
      val = (_add(val * 1664525, 1013904223)) % 2147483647
      if val % 2 == 0
        s = _add(s, "0")
      else
        s = _add(s, "1")
      end
      i = _add(i, 1)
    end
    return s
  end
  def singleInit(cells)
    s = ""
    i = 0
    while i < cells
      if i == cells / 2
        s = _add(s, "1")
      else
        s = _add(s, "0")
      end
      i = _add(i, 1)
    end
    return s
  end
  def main()
    cells = 20
    generations = 9
    puts("Single 1, rule 90:")
    state = singleInit(cells)
    elem(90, cells, generations, state)
    puts("Random intial state, rule 30:")
    state = randInit(cells, 3)
    elem(30, cells, generations, state)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
