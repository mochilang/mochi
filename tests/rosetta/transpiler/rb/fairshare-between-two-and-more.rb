# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def digitSumMod(n, base)
    sum = 0
    j = n
    while j > 0
      sum = _add(sum, j % base)
      j = j / base
    end
    return sum % base
  end
  def fairshareList(n, base)
    res = []
    i = 0
    while i < n
      res = res + [digitSumMod(i, base)]
      i = _add(i, 1)
    end
    return res
  end
  def sortInts(xs)
    arr = xs
    i = 0
    while i < arr.length
      j = 0
      while j < arr.length - 1
        if arr[j] > arr[_add(j, 1)]
          t = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = t
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def turns(n, base)
    counts = []
    i = 0
    while i < base
      counts = counts + [0]
      i = _add(i, 1)
    end
    i = 0
    while i < n
      v = digitSumMod(i, base)
      counts[v] = _add(counts[v], 1)
      i = _add(i, 1)
    end
    freq = {}
    fkeys = []
    i = 0
    while i < base
      c = counts[i]
      if c > 0
        if freq.key?(c)
          freq[c] = _add(freq[c], 1)
        else
          freq[c] = 1
          fkeys = fkeys + [c]
        end
      end
      i = _add(i, 1)
    end
    total = 0
    i = 0
    while i < fkeys.length
      total = _add(total, freq[fkeys[i]])
      i = _add(i, 1)
    end
    if total != base
      return _add(_add("only ", (total).to_s), " have a turn")
    end
    fkeys = sortInts(fkeys)
    res = ""
    i = 0
    while i < fkeys.length
      if i > 0
        res = _add(res, " or ")
      end
      res = _add(res, (fkeys[i]).to_s)
      i = _add(i, 1)
    end
    return res
  end
  def main()
    bases1 = [2, 3, 5, 11]
    i = 0
    while i < bases1.length
      b = bases1[i]
      puts(_add(_add(_padStart((b).to_s, 2, " "), " : "), (fairshareList(25, b)).to_s))
      i = _add(i, 1)
    end
    puts("")
    puts("How many times does each get a turn in 50000 iterations?")
    bases2 = [191, 1377, 49999, 50000, 50001]
    i = 0
    while i < bases2.length
      b = bases2[i]
      t = turns(50000, b)
      puts(_add(_add(_add("  With ", (b).to_s), " people: "), t))
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
