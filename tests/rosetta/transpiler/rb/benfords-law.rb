# Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:07 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def floorf(x)
    y = (x).to_i
    return (y).to_f
  end
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def fmtF3(x)
    y = floorf(_add(x * 1000.0, 0.5)) / 1000.0
    s = (y).to_s
    dot = _indexOf(s, ".")
    if dot == 0 - 1
      s = _add(s, ".000")
    else
      decs = s.length - dot - 1
      if decs > 3
        s = s[0..._add(dot, 4)]
      else
        while decs < 3
          s = _add(s, "0")
          decs = _add(decs, 1)
        end
      end
    end
    return s
  end
  def padFloat3(x, width)
    s = fmtF3(x)
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def fib1000()
    a = 0.0
    b = 1.0
    res = []
    i = 0
    while i < 1000
      res = res + [b]
      t = b
      b = _add(b, a)
      a = t
      i = _add(i, 1)
    end
    return res
  end
  def leadingDigit(x)
    if x < 0.0
      x = -x
    end
    while x >= 10.0
      x = x / 10.0
    end
    while x > 0.0 && x < 1.0
      x = x * 10.0
    end
    return (x).to_i
  end
  def show(nums, title)
    counts = [0, 0, 0, 0, 0, 0, 0, 0, 0]
    nums.each do |n|
      d = leadingDigit(n)
      if d >= 1 && d <= 9
        counts[d - 1] = _add(counts[d - 1], 1)
      end
    end
    preds = [0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046]
    total = nums.length
    puts(title)
    puts("Digit  Observed  Predicted")
    i = 0
    while i < 9
      obs = ((counts[i]).to_f) / ((total).to_f)
      line = _add(_add(_add(_add(_add("  ", (_add(i, 1)).to_s), "  "), padFloat3(obs, 9)), "  "), padFloat3(preds[i], 8))
      puts(line)
      i = _add(i, 1)
    end
  end
  def main()
    show(fib1000(), "First 1000 Fibonacci numbers")
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
