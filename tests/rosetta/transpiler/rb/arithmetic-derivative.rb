# Generated by Mochi transpiler v0.10.40 on 2025-07-25 12:24 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def primeFactors(n)
    factors = []
    x = n
    while x % 2 == 0
      factors = factors + [2]
      x = ((x / 2)).to_i
    end
    p = 3
    while p * p <= x
      while x % p == 0
        factors = factors + [p]
        x = ((x / p)).to_i
      end
      p = _add(p, 2)
    end
    if x > 1
      factors = factors + [x]
    end
    return factors
  end
  def repeat(ch, n)
    s = ""
    i = 0
    while i < n
      s = _add(s, ch)
      i = _add(i, 1)
    end
    return s
  end
  def D(n)
    if n < 0.0
      return -D(-n)
    end
    if n < 2.0
      return 0.0
    end
    factors = []
    if n < 10000000000000000000.0
      factors = primeFactors(((n)).to_i)
    else
      g = ((n / 100.0)).to_i
      factors = primeFactors(g)
      factors = factors + [2]
      factors = factors + [2]
      factors = factors + [5]
      factors = factors + [5]
    end
    c = factors.length
    if c == 1
      return 1.0
    end
    if c == 2
      return ((_add(factors[0], factors[1]))).to_f
    end
    d = n / ((factors[0]).to_f)
    return _add(D(d) * ((factors[0]).to_f), d)
  end
  def pad(n)
    s = (n).to_s
    while s.length < 4
      s = _add(" ", s)
    end
    return s
  end
  def main()
    vals = []
    n = -99
    while n < 101
      vals = vals + [((D((n).to_f))).to_i]
      n = _add(n, 1)
    end
    i = 0
    while i < vals.length
      line = ""
      j = 0
      while j < 10
        line = _add(line, pad(vals[_add(i, j)]))
        if j < 9
          line = _add(line, " ")
        end
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 10)
    end
    pow = 1.0
    m = 1
    while m < 21
      pow = pow * 10.0
      exp = (m).to_s
      if exp.length < 2
        exp = _add(exp, " ")
      end
      res = _add((m).to_s, repeat("0", m - 1))
      puts(_add(_add(_add("D(10^", exp), ") / 7 = "), res))
      m = _add(m, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
