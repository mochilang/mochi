# Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def multiplier(n1, n2)
    n1n2 = n1 * n2
    return ->(m) { n1n2 * m }
  end
  def main()
    x = 2.0
    xi = 0.5
    y = 4.0
    yi = 0.25
    z = _add(x, y)
    zi = 1.0 / (_add(x, y))
    numbers = [x, y, z]
    inverses = [xi, yi, zi]
    mfs = []
    i = 0
    while i < numbers.length
      mfs = mfs + [multiplier(numbers[i], inverses[i])]
      i = _add(i, 1)
    end
    mfs.each do |mf|
      puts((mf.call(1.0)).to_s)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
