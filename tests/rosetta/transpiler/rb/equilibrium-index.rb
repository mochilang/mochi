# Generated by Mochi transpiler v0.10.42 on 2025-07-27 10:22 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  $seed = _now() % 2147483647
  def randN(n)
    $seed = (_add($seed * 1664525, 1013904223)) % 2147483647
    return $seed % n
  end
  def eqIndices(xs)
    r = 0
    i = 0
    while i < xs.length
      r = _add(r, xs[i])
      i = _add(i, 1)
    end
    l = 0
    eq = []
    i = 0
    while i < xs.length
      r = r - xs[i]
      if l == r
        eq = eq + [i]
      end
      l = _add(l, xs[i])
      i = _add(i, 1)
    end
    return eq
  end
  def main()
    puts(((x = eqIndices([-7, 1, 5, 2, -4, 3, 0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    verylong = []
    i = 0
    while i < 10000
      $seed = (_add($seed * 1664525, 1013904223)) % 2147483647
      verylong = verylong + [$seed % 1001 - 500]
      i = _add(i, 1)
    end
    puts(((x = eqIndices(verylong)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
