# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def commatize(n)
    s = (n).to_s
    i = s.length - 3
    while i >= 1
      s = _add(_add(s[0...i], ","), s[i...s.length])
      i = i - 3
    end
    return s
  end
  def primeSieve(n)
    sieve = []
    i = 0
    while i <= n
      sieve = sieve + [false]
      i = _add(i, 1)
    end
    sieve[0] = true
    sieve[1] = true
    p = 2
    while p * p <= n
      if !sieve[p]
        m = p * p
        while m <= n
          sieve[m] = true
          m = _add(m, p)
        end
      end
      p = _add(p, 1)
    end
    return sieve
  end
  def search(xs, target)
    low = 0
    high = xs.length
    while low < high
      mid = (_add(low, high)) / 2
      if xs[mid] < target
        low = _add(mid, 1)
      else
        high = mid
      end
    end
    return low
  end
  def main()
    limit = 45000
    compMap = primeSieve(limit)
    compSums = []
    primeSums = []
    csum = 0
    psum = 0
    i = 2
    while i <= limit
      if compMap[i]
        csum = _add(csum, i)
        compSums = compSums + [csum]
      else
        psum = _add(psum, i)
        primeSums = primeSums + [psum]
      end
      i = _add(i, 1)
    end
    puts("Sum        | Prime Index | Composite Index")
    puts("------------------------------------------")
    idx = 0
    while idx < primeSums.length
      s = primeSums[idx]
      j = search(compSums, s)
      if j < compSums.length && compSums[j] == s
        sumStr = _padStart(commatize(s), 10, " ")
        piStr = _padStart(commatize(_add(idx, 1)), 11, " ")
        ciStr = _padStart(commatize(_add(j, 1)), 15, " ")
        puts(_add(_add(_add(_add(sumStr, " | "), piStr), " | "), ciStr))
      end
      idx = _add(idx, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
