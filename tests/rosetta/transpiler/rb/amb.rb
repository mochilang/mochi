# Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:54 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def amb(wordsets, res, idx)
    if idx == wordsets.length
      return true
    end
    prev = ""
    if idx > 0
      prev = res[idx - 1]
    end
    i = 0
    while i < wordsets[idx].length
      w = wordsets[idx][i]
      if idx == 0 || prev[prev.length - 1...prev.length] == w[0...1]
        res[idx] = w
        if amb(wordsets, res, _add(idx, 1))
          return true
        end
      end
      i = _add(i, 1)
    end
    return false
  end
  def main()
    wordset = [["the", "that", "a"], ["frog", "elephant", "thing"], ["walked", "treaded", "grows"], ["slowly", "quickly"]]
    res = []
    i = 0
    while i < wordset.length
      res = res + [""]
      i = _add(i, 1)
    end
    if amb(wordset, res, 0)
      out = _add("[", res[0])
      j = 1
      while j < res.length
        out = _add(_add(out, " "), res[j])
        j = _add(j, 1)
      end
      out = _add(out, "]")
      puts(out)
    else
      puts("No amb found")
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
