# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def listStr(xs)
    s = "["
    i = 0
    while i < xs.length
      s = _add(s, (xs[i]).to_s)
      if i < xs.length - 1
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def pointerDemo()
    puts("Pointer:")
    i = 0
    puts("Before:")
    puts(_add(_add(_add("\t<address>: ", (i).to_s), ", "), (i).to_s))
    i = 3
    puts("After:")
    puts(_add(_add(_add("\t<address>: ", (i).to_s), ", "), (i).to_s))
  end
  def sliceDemo()
    puts("Slice:")
    a = []
    (0...10).each do |_|
      a = (a << 0)
    end
    s = a
    puts("Before:")
    puts(_add("\ts: ", listStr(s)))
    puts(_add("\ta: ", listStr(a)))
    data = [65, 32, 115, 116, 114, 105, 110, 103, 46]
    idx = 0
    while idx < data.length
      s[idx] = data[idx]
      idx = _add(idx, 1)
    end
    puts("After:")
    puts(_add("\ts: ", listStr(s)))
    puts(_add("\ta: ", listStr(a)))
  end
  pointerDemo()
  puts("")
  sliceDemo()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
