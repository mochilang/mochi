# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'digest'
def _sha256(bs)
  Digest::SHA256.digest(bs.pack('C*')).bytes
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def set58(addr)
    tmpl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
    a = []
    i = 0
    while i < 25
      a = a + [0]
      i = _add(i, 1)
    end
    idx = 0
    while idx < addr.length
      ch = addr[idx..._add(idx, 1)]
      c = _indexOf(tmpl, ch)
      if c < 0
        return []
      end
      j = 24
      while j >= 0
        c = _add(c, 58 * a[j])
        a[j] = c % 256
        c = ((c / 256)).to_i
        j = j - 1
      end
      if c > 0
        return []
      end
      idx = _add(idx, 1)
    end
    return a
  end
  def doubleSHA256(bs)
    first = _sha256(bs)
    return _sha256(first)
  end
  def computeChecksum(a)
    hash = doubleSHA256(a[0...21])
    return hash[0...4]
  end
  def validA58(addr)
    a = set58(addr)
    if a.length != 25
      return false
    end
    if a[0] != 0
      return false
    end
    sum = computeChecksum(a)
    i = 0
    while i < 4
      if a[_add(21, i)] != sum[i]
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  puts((validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")).to_s)
  puts((validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
