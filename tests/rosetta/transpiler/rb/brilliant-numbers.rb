# Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:36 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def primesUpTo(n)
    sieve = []
    i = 0
    while i <= n
      sieve = sieve + [true]
      i = _add(i, 1)
    end
    p = 2
    while p * p <= n
      if sieve[p]
        m = p * p
        while m <= n
          sieve[m] = false
          m = _add(m, p)
        end
      end
      p = _add(p, 1)
    end
    res = []
    x = 2
    while x <= n
      if sieve[x]
        res = res + [x]
      end
      x = _add(x, 1)
    end
    return res
  end
  def sortInts(xs)
    res = []
    tmp = xs
    while tmp.length > 0
      min = tmp[0]
      idx = 0
      i = 1
      while i < tmp.length
        if tmp[i] < min
          min = tmp[i]
          idx = i
        end
        i = _add(i, 1)
      end
      res = res + [min]
      out = []
      j = 0
      while j < tmp.length
        if j != idx
          out = out + [tmp[j]]
        end
        j = _add(j, 1)
      end
      tmp = out
    end
    return res
  end
  def commatize(n)
    s = (n).to_s
    i = s.length - 3
    while i >= 1
      s = _add(_add(s[0...i], ","), s[i...s.length])
      i = i - 3
    end
    return s
  end
  $primes = primesUpTo(3200000)
  def getBrilliant(digits, limit, countOnly)
    brilliant = []
    count = 0
    pow = 1
    next_ = 999999999999999
    k = 1
    while k <= digits
      s = []
      $primes.each do |p|
        if p >= pow * 10
          break
        end
        if p > pow
          s = s + [p]
        end
      end
      i = 0
      while i < s.length
        j = i
        while j < s.length
          prod = s[i] * s[j]
          if prod < limit
            if countOnly
              count = _add(count, 1)
            else
              brilliant = brilliant + [prod]
            end
          else
            if prod < next_
              next_ = prod
            end
            break
          end
          j = _add(j, 1)
        end
        i = _add(i, 1)
      end
      pow = pow * 10
      k = _add(k, 1)
    end
    if countOnly
      return {"bc" => count, "next" => next_}
    end
    return {"bc" => brilliant, "next" => next_}
  end
  def main()
    puts("First 100 brilliant numbers:")
    r = getBrilliant(2, 10000, false)
    br = sortInts(r["bc"])
    br = br[0...100]
    i = 0
    while i < br.length
      puts(([_add(_padStart((br[i]).to_s, 4, " "), " "), (false ? 'True' : 'False')]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
      if (_add(i, 1)) % 10 == 0
        puts((["", (true ? 'True' : 'False')]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
      end
      i = _add(i, 1)
    end
    puts((["", (true ? 'True' : 'False')]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
    k = 1
    while k <= 13
      limit = 10 ** k
      r2 = getBrilliant(k, limit, true)
      total = r2["bc"]
      next_ = r2["next"]
      climit = commatize(limit)
      ctotal = commatize(_add(total, 1))
      cnext = commatize(next_)
      puts(_add(_add(_add(_add(_add("First >= ", _padStart(climit, 18, " ")), " is "), _padStart(ctotal, 14, " ")), " in the series: "), _padStart(cnext, 18, " ")))
      k = _add(k, 1)
    end
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
