# Generated by Mochi transpiler v0.10.39 on 2025-07-24 13:03 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

Pixel = Struct.new(:R, :G, :B, keyword_init: true)
def pixelFromRgb(c)
  r = (((c / 65536)).to_i) % 256
  g = (((c / 256)).to_i) % 256
  b = c % 256
  return Pixel.new(R: r, G: g, B: b)
end
def rgbFromPixel(p)
  p = Marshal.load(Marshal.dump(p))
  return _add(_add(p.R * 65536, p.G * 256), p.B)
end
Bitmap = Struct.new(:cols, :rows, :px, keyword_init: true)
def NewBitmap(x, y)
  data = []
  row = 0
  while row < y
    r = []
    col = 0
    while col < x
      r = r + [Pixel.new(R: 0, G: 0, B: 0)]
      col = _add(col, 1)
    end
    data = data + [r]
    row = _add(row, 1)
  end
  return Bitmap.new(cols: x, rows: y, px: data)
end
def Extent(b)
  b = Marshal.load(Marshal.dump(b))
  return {"cols" => b.cols, "rows" => b.rows}
end
def Fill(b, p)
  p = Marshal.load(Marshal.dump(p))
  b = Marshal.load(Marshal.dump(b))
  y = 0
  while y < b.rows
    x = 0
    while x < b.cols
      px = b.px
      row = px[y]
      row[x] = p
      px[y] = row
      b["px"] = px
      x = _add(x, 1)
    end
    y = _add(y, 1)
  end
end
def FillRgb(b, c)
  b = Marshal.load(Marshal.dump(b))
  Fill(b, pixelFromRgb(c))
end
def SetPx(b, x, y, p)
  p = Marshal.load(Marshal.dump(p))
  b = Marshal.load(Marshal.dump(b))
  if x < 0 || x >= b.cols || y < 0 || y >= b.rows
    return false
  end
  px = b.px
  row = px[y]
  row[x] = p
  px[y] = row
  b["px"] = px
  return true
end
def SetPxRgb(b, x, y, c)
  b = Marshal.load(Marshal.dump(b))
  return SetPx(b, x, y, pixelFromRgb(c))
end
def GetPx(b, x, y)
  b = Marshal.load(Marshal.dump(b))
  if x < 0 || x >= b.cols || y < 0 || y >= b.rows
    return {"ok" => false}
  end
  row = b.px[y]
  return {"ok" => true, "pixel" => row[x]}
end
def GetPxRgb(b, x, y)
  b = Marshal.load(Marshal.dump(b))
  r = GetPx(b, x, y)
  if !r["ok"]
    return {"ok" => false}
  end
  return {"ok" => true, "rgb" => rgbFromPixel(r["pixel"])}
end
def ppmSize(b)
  b = Marshal.load(Marshal.dump(b))
  header = _add(_add(_add(_add("P6\n# Creator: Rosetta Code http://rosettacode.org/\n", (b.cols).to_s), " "), (b.rows).to_s), "\n255\n")
  return _add(header.length, 3 * b.cols * b.rows)
end
def pixelStr(p)
  p = Marshal.load(Marshal.dump(p))
  return _add(_add(_add(_add(_add(_add("{", (p.R).to_s), " "), (p.G).to_s), " "), (p.B).to_s), "}")
end
def main()
  bm = NewBitmap(300, 240)
  FillRgb(bm, 16711680)
  SetPxRgb(bm, 10, 20, 255)
  SetPxRgb(bm, 20, 30, 0)
  SetPxRgb(bm, 30, 40, 1056816)
  c1 = GetPx(bm, 0, 0)
  c2 = GetPx(bm, 10, 20)
  c3 = GetPx(bm, 30, 40)
  puts(_add(_add(_add("Image size: ", (bm.cols).to_s), " Ã— "), (bm.rows).to_s))
  puts(_add((ppmSize(bm)).to_s, " bytes when encoded as PPM."))
  if c1["ok"]
    puts(_add("Pixel at (0,0) is ", pixelStr(c1["pixel"])))
  end
  if c2["ok"]
    puts(_add("Pixel at (10,20) is ", pixelStr(c2["pixel"])))
  end
  if c3["ok"]
    p = c3["pixel"]
    r16 = p["R"] * 257
    g16 = p["G"] * 257
    b16 = p["B"] * 257
    puts(_add(_add(_add(_add(_add("Pixel at (30,40) has R=", (r16).to_s), ", G="), (g16).to_s), ", B="), (b16).to_s))
  end
end
main()
