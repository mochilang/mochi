# Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:40 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def intSqrt(x)
    if x < 2
      return x
    end
    left = 1
    right = x / 2
    ans = 0
    while left <= right
      mid = _add(left, (right - left) / 2)
      sq = mid * mid
      if sq == x
        return mid
      end
      if sq < x
        left = _add(mid, 1)
        ans = mid
      else
        right = mid - 1
      end
    end
    return ans
  end
  def sumRecip(n)
    s = 1
    limit = intSqrt(n)
    f = 2
    while f <= limit
      if n % f == 0
        s = _add(s, n / f)
        f2 = n / f
        if f2 != f
          s = _add(s, f)
        end
      end
      f = _add(f, 1)
    end
    return s
  end
  def main()
    nums = [6, 28, 120, 496, 672, 8128, 30240, 32760, 523776]
    nums.each do |n|
      s = sumRecip(n)
      if s % n == 0
        val = s / n
        perfect = ""
        if val == 1
          perfect = "perfect!"
        end
        puts(_add(_add(_add(_add(_add("Sum of recipr. factors of ", (n).to_s), " = "), (val).to_s), " exactly "), perfect))
      end
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
