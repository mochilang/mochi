# Generated by Mochi transpiler v0.10.40 on 2025-07-25 10:39 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def poly(p)
    s = ""
    coef = 1
    i = p
    if coef != 1
      s = _add(s, (coef).to_s)
    end
    while i > 0
      s = _add(s, "x")
      if i != 1
        s = _add(_add(s, "^"), (i).to_s)
      end
      coef = ((coef * i / (_add(p - i, 1)))).to_i
      d = coef
      if (p - (i - 1)) % 2 == 1
        d = -d
      end
      if d < 0
        s = _add(_add(s, " - "), (-d).to_s)
      else
        s = _add(_add(s, " + "), (d).to_s)
      end
      i = i - 1
    end
    if s == ""
      s = "1"
    end
    return s
  end
  def aks(n)
    if n < 2
      return false
    end
    c = n
    i = 1
    while i < n
      if c % n != 0
        return false
      end
      c = ((c * (n - i) / (_add(i, 1)))).to_i
      i = _add(i, 1)
    end
    return true
  end
  def main()
    p = 0
    while p <= 7
      puts(_add(_add((p).to_s, ":  "), poly(p)))
      p = _add(p, 1)
    end
    first = true
    p = 2
    line = ""
    while p < 50
      if aks(p)
        if first
          line = _add(line, (p).to_s)
          first = false
        else
          line = _add(_add(line, " "), (p).to_s)
        end
      end
      p = _add(p, 1)
    end
    puts(line)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
