# Generated by Mochi transpiler v0.10.42 on 2025-07-27 15:12 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def floorf(x)
    y = (x).to_i
    return (y).to_f
  end
  def powf(base, exp)
    r = 1.0
    i = 0
    while i < exp
      r = r * base
      i = _add(i, 1)
    end
    return r
  end
  def fmtF(x, width, prec)
    factor = powf(10.0, prec)
    y = floorf(_add(x * factor, 0.5)) / factor
    s = (y).to_s
    dot = _indexOf(s, ".")
    if dot == 0 - 1
      s = _add(s, ".")
      j = 0
      while j < prec
        s = _add(s, "0")
        j = _add(j, 1)
      end
    else
      decs = s.length - dot - 1
      while decs < prec
        s = _add(s, "0")
        decs = _add(decs, 1)
      end
    end
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def expf(x)
    if x < 0.0
      return 1.0 / expf(-x)
    end
    term = 1.0
    sum = 1.0
    i = 1
    while i < 20
      term = term * x / ((i).to_f)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def eulerStep(f, x, y, h)
    return _add(y, h * f.call(x, y))
  end
  def newCoolingRate(k)
    return ->(dt) {
      return -k * dt
    }
  end
  def newTempFunc(k, ambient, initial)
    return ->(t) {
      return _add(ambient, (initial - ambient) * expf(-k * t))
    }
  end
  def newCoolingRateDy(k, ambient)
    cr = newCoolingRate(k)
    return ->(_x, obj) {
      return cr.call(obj - ambient)
    }
  end
  def main()
    k = 0.07
    tempRoom = 20.0
    tempObject = 100.0
    fcr = newCoolingRateDy(k, tempRoom)
    analytic = newTempFunc(k, tempRoom, tempObject)
    [2.0, 5.0, 10.0].each do |step|
      puts(_add("Step size = ", fmtF(step, 0, 1)))
      puts(" Time Euler's Analytic")
      temp = tempObject
      time = 0.0
      while time <= 100.0
        line = _add(_add(_add(_add(fmtF(time, 5, 1), " "), fmtF(temp, 7, 3)), " "), fmtF(analytic.call(time), 7, 3))
        puts(line)
        temp = eulerStep(fcr, time, temp, step)
        time = _add(time, step)
      end
      puts("")
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
