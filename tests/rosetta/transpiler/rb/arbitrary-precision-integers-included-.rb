# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:12 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pow_int(base, exp)
    result = 1
    b = base
    e = exp
    while e > 0
      if e % 2 == 1
        result = result * b
      end
      b = b * b
      e = ((e / 2)).to_i
    end
    return result
  end
  def pow_big(base, exp)
    result = 1
    b = base
    e = exp
    while e > 0
      if e % 2 == 1
        result = result * b
      end
      b = b * b
      e = ((e / 2)).to_i
    end
    return result
  end
  $e1 = pow_int(3, 2)
  $e2 = pow_int(4, $e1)
  $base = 5
  $x = pow_big($base, $e2)
  $s = ($x).to_s
  puts((["5^(4^(3^2)) has", $s.length, "digits:", $s[0...20], "...", $s[$s.length - 20...$s.length]]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
