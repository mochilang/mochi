# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def isPrime(n)
    if n < 2
      return false
    end
    if n % 2 == 0
      return n == 2
    end
    if n % 3 == 0
      return n == 3
    end
    d = 5
    while d * d <= n
      if n % d == 0
        return false
      end
      d = _add(d, 2)
      if n % d == 0
        return false
      end
      d = _add(d, 4)
    end
    return true
  end
  def firstPrimeFactor(n)
    if n == 1
      return 1
    end
    if n % 3 == 0
      return 3
    end
    if n % 5 == 0
      return 5
    end
    inc = [4, 2, 4, 2, 4, 6, 2, 6]
    k = 7
    i = 0
    while k * k <= n
      if n % k == 0
        return k
      end
      k = _add(k, inc[i])
      i = (_add(i, 1)) % inc.length
    end
    return n
  end
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def padLeft(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def formatFloat(f, prec)
    s = (f).to_s
    idx = _indexOf(s, ".")
    if idx < 0
      return s
    end
    need = _add(_add(idx, 1), prec)
    if s.length > need
      return s[0...need]
    end
    return s
  end
  def main()
    blum = []
    counts = [0, 0, 0, 0]
    digits = [1, 3, 7, 9]
    i = 1
    bc = 0
    while true
      p = firstPrimeFactor(i)
      if p % 4 == 3
        q = ((i / p)).to_i
        if q != p && q % 4 == 3 && isPrime(q)
          if bc < 50
            blum = blum + [i]
          end
          d = i % 10
          if d == 1
            counts[0] = _add(counts[0], 1)
          else
            if d == 3
              counts[1] = _add(counts[1], 1)
            else
              if d == 7
                counts[2] = _add(counts[2], 1)
              else
                if d == 9
                  counts[3] = _add(counts[3], 1)
                end
              end
            end
          end
          bc = _add(bc, 1)
          if bc == 50
            puts("First 50 Blum integers:")
            idx = 0
            while idx < 50
              line = ""
              j = 0
              while j < 10
                line = _add(_add(line, padLeft(blum[idx], 3)), " ")
                idx = _add(idx, 1)
                j = _add(j, 1)
              end
              puts(line[0...line.length - 1])
            end
            break
          end
        end
      end
      if i % 5 == 3
        i = _add(i, 4)
      else
        i = _add(i, 2)
      end
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
