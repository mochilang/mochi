# Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:07 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def floorf(x)
    y = (x).to_i
    return (y).to_f
  end
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def fmtF(x)
    y = floorf(_add(x * 10000.0, 0.5)) / 10000.0
    s = (y).to_s
    dot = _indexOf(s, ".")
    if dot == 0 - 1
      s = _add(s, ".0000")
    else
      decs = s.length - dot - 1
      if decs > 4
        s = s[0..._add(dot, 5)]
      else
        while decs < 4
          s = _add(s, "0")
          decs = _add(decs, 1)
        end
      end
    end
    return s
  end
  def padInt(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def padFloat(x, width)
    s = fmtF(x)
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def avgLen(n)
    tests = 10000
    sum = 0
    seed = 1
    t = 0
    while t < tests
      visited = []
      i = 0
      while i < n
        visited = visited + [false]
        i = _add(i, 1)
      end
      x = 0
      while !visited[x]
        visited[x] = true
        sum = _add(sum, 1)
        seed = (_add(seed * 1664525, 1013904223)) % 2147483647
        x = seed % n
      end
      t = _add(t, 1)
    end
    return ((sum).to_f) / tests
  end
  def ana(n)
    nn = (n).to_f
    term = 1.0
    sum = 1.0
    i = nn - 1.0
    while i >= 1.0
      term = term * (i / nn)
      sum = _add(sum, term)
      i = i - 1.0
    end
    return sum
  end
  def main()
    nmax = 20
    puts(" N    average    analytical    (error)")
    puts("===  =========  ============  =========")
    n = 1
    while n <= nmax
      a = avgLen(n)
      b = ana(n)
      err = absf(a - b) / b * 100.0
      line = _add(_add(_add(_add(_add(_add(_add(padInt(n, 3), "  "), padFloat(a, 9)), "  "), padFloat(b, 12)), "  ("), padFloat(err, 6)), "%)")
      puts(line)
      n = _add(n, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
