# Generated by Mochi transpiler v0.10.42 on 2025-07-27 16:36 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  $doors = []
  (0...100).each do |i|
    $doors = $doors + [false]
  end
  (1...101).each do |pass|
    $idx = pass - 1
    while $idx < 100
      $doors[$idx] = !$doors[$idx]
      $idx = _add($idx, pass)
    end
  end
  (0...10).each do |row|
    $line = ""
    (0...10).each do |col|
      $idx = _add(row * 10, col)
      if $doors[$idx]
        $line = _add($line, "1")
      else
        $line = _add($line, "0")
      end
      if col < 9
        $line = _add($line, " ")
      end
    end
    puts($line)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
