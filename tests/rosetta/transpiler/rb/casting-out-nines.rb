# Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def parseIntBase(s, base)
    digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    n = 0
    i = 0
    while i < s.length
      j = 0
      v = 0
      while j < digits.length
        if digits[j..._add(j, 1)] == s[i..._add(i, 1)]
          v = j
          break
        end
        j = _add(j, 1)
      end
      n = _add(n * base, v)
      i = _add(i, 1)
    end
    return n
  end
  def intToBase(n, base)
    digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    if n == 0
      return "0"
    end
    out = ""
    v = n
    while v > 0
      d = v % base
      out = _add(digits[d..._add(d, 1)], out)
      v = v / base
    end
    return out
  end
  def subset(base, begin, end)
    b = parseIntBase(begin_, base)
    e = parseIntBase(end_, base)
    out = []
    k = b
    while k <= e
      ks = intToBase(k, base)
      mod = base - 1
      r1 = parseIntBase(ks, base) % mod
      r2 = (parseIntBase(ks, base) * parseIntBase(ks, base)) % mod
      if r1 == r2
        out = out + [ks]
      end
      k = _add(k, 1)
    end
    return out
  end
  TestCasesItem = Struct.new(:base, :begin_, :end_, :kaprekar, keyword_init: true)
  testCases = [TestCasesItem.new(base: 10, begin_: "1", end_: "100", kaprekar: ["1", "9", "45", "55", "99"]), TestCasesItem.new(base: 17, begin_: "10", end_: "gg", kaprekar: ["3d", "d4", "gg"])]
  $idx = 0
  while $idx < testCases.length
    $tc = testCases[$idx]
    puts(_add(_add(_add(_add(_add(_add("\nTest case base = ", ($tc["base"]).to_s), ", begin = "), $tc["begin"]), ", end = "), $tc["end"]), ":"))
    $s = subset($tc["base"], $tc["begin"], $tc["end"])
    puts(_add("Subset:  ", ($s).to_s))
    puts(_add("Kaprekar:", ($tc["kaprekar"]).to_s))
    $sx = 0
    $valid = true
    $i = 0
    while $i < $tc["kaprekar"].length
      $k = $tc["kaprekar"][$i]
      $found = false
      while $sx < $s.length
        if $s[$sx] == $k
          $found = true
          $sx = _add($sx, 1)
          break
        end
        $sx = _add($sx, 1)
      end
      if !$found
        puts(_add(_add("Fail:", $k), " not in subset"))
        $valid = false
        break
      end
      $i = _add($i, 1)
    end
    if $valid
      puts("Valid subset.")
    end
    $idx = _add($idx, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
