# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def padLeft(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def squeeze(s, ch)
    out = ""
    prev = false
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      if c == ch
        if !prev
          out = _add(out, c)
          prev = true
        end
      else
        out = _add(out, c)
        prev = false
      end
      i = _add(i, 1)
    end
    return out
  end
  $strings = ["", "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln ", "..1111111111111111111111111111111111111111111111111111111111111117777888", "I never give 'em hell, I just tell the truth, and they think it's hell. ", "                                                   ---  Harry S Truman  ", "The better the 4-wheel drive, the further you'll be from help when ya get stuck!", "headmistressship", "aardvark", "😍😀🙌💃😍😍😍🙌"]
  $chars = [[" "], ["-"], ["7"], ["."], [" ", "-", "r"], ["e"], ["s"], ["a"], ["😍"]]
  $i = 0
  while $i < $strings.length
    j = 0
    s = $strings[$i]
    while j < $chars[$i].length
      c = $chars[$i][j]
      ss = squeeze(s, c)
      puts(_add(_add("specified character = '", c), "'"))
      puts(_add(_add(_add(_add("original : length = ", padLeft(s.length, 2)), ", string = «««"), s), "»»»"))
      puts(_add(_add(_add(_add("squeezed : length = ", padLeft(ss.length, 2)), ", string = «««"), ss), "»»»"))
      puts("")
      j = _add(j, 1)
    end
    $i = _add($i, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
