# Generated by Mochi transpiler v0.10.50 on 2025-07-31 07:51 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def cz(yr, animal, yinYang, element, sc, bc)
    y = yr - 4
    stem = y % 10
    branch = y % 12
    sb = _add(sc[stem], bc[branch])
    return Info.new(animal: (animal[branch]).to_s, yinYang: (yinYang[stem % 2]).to_s, element: (element[((stem / 2)).to_i]).to_s, stemBranch: sb, cycle: _add(y % 60, 1))
  end
  $animal = ["Rat", "Ox", "Tiger", "Rabbit", "Dragon", "Snake", "Horse", "Goat", "Monkey", "Rooster", "Dog", "Pig"]
  $yinYang = ["Yang", "Yin"]
  $element = ["Wood", "Fire", "Earth", "Metal", "Water"]
  $stemChArr = ["甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"]
  $branchChArr = ["子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"]
  Info = Struct.new(:animal, :yinYang, :element, :stemBranch, :cycle, keyword_init: true)
  [1935, 1938, 1968, 1972, 1976].each do |yr|
    r = cz(yr, $animal, $yinYang, $element, $stemChArr, $branchChArr)
    puts(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add((yr).to_s, ": "), r.element), " "), r.animal), ", "), r.yinYang), ", Cycle year "), (r.cycle).to_s), " "), r.stemBranch))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
