# Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:36 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def cholesky(a)
    n = a.length
    l = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = row + [0.0]
        j = _add(j, 1)
      end
      l = l + [row]
      i = _add(i, 1)
    end
    i = 0
    while i < n
      j = 0
      while j <= i
        sum = a[i][j]
        k = 0
        while k < j
          sum = sum - l[i][k] * l[j][k]
          k = _add(k, 1)
        end
        if i == j
          l[i][j] = sqrtApprox(sum)
        else
          l[i][j] = sum / l[j][j]
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return l
  end
  def printMat(m)
    i = 0
    while i < m.length
      line = ""
      j = 0
      while j < m[i].length
        line = _add(line, (m[i][j]).to_s)
        if j < m[i].length - 1
          line = _add(line, " ")
        end
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  def demo(a)
    puts("A:")
    printMat(a)
    l = cholesky(a)
    puts("L:")
    printMat(l)
  end
  demo([[25.0, 15.0, -5.0], [15.0, 18.0, 0.0], [-5.0, 0.0, 11.0]])
  demo([[18.0, 22.0, 54.0, 42.0], [22.0, 70.0, 86.0, 62.0], [54.0, 86.0, 174.0, 134.0], [42.0, 62.0, 134.0, 106.0]])
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
