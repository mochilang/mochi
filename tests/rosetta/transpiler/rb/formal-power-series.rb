# Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def newFps(fn)
    return Fps.new(coeffs: [], compute: fn)
  end
  def extract(f, n)
    while f.coeffs.length <= n
      idx = f.coeffs.length
      v = f.compute.call(idx)
      f["coeffs"] = f.coeffs + [v]
    end
    return f.coeffs[n]
  end
  def one()
    return newFps(->(i) {
      if i == 0
        return 1.0
      end
      return 0.0
    })
  end
  def add(a, b)
    return newFps(->(n) {
      return _add(extract(a, n), extract(b, n))
    })
  end
  def sub(a, b)
    return newFps(->(n) {
      return extract(a, n) - extract(b, n)
    })
  end
  def mul(a, b)
    return newFps(->(n) {
      s = 0.0
      k = 0
      while k <= n
        s = _add(s, extract(a, k) * extract(b, n - k))
        k = _add(k, 1)
      end
      return s
    })
  end
  def div(a, b)
    q = newFps(->(n) {
      return 0.0
    })
    q["compute"] = ->(n) {
      b0 = extract(b, 0)
      if b0 == 0.0
        return (0.0 / 0.0)
      end
      s = extract(a, n)
      k = 1
      while k <= n
        s = s - extract(b, k) * extract(q, n - k)
        k = _add(k, 1)
      end
      return s / b0
    }
    return q
  end
  def differentiate(a)
    return newFps(->(n) {
      return (((_add(n, 1))).to_f) * extract(a, _add(n, 1))
    })
  end
  def integrate(a)
    return newFps(->(n) {
      if n == 0
        return 0.0
      end
      return extract(a, n - 1) / ((n).to_f)
    })
  end
  def sinCos()
    sin = newFps(->(n) {
      return 0.0
    })
    cos = sub(one(), integrate(sin))
    sin["compute"] = ->(n) {
      if n == 0
        return 0.0
      end
      return extract(cos, n - 1) / ((n).to_f)
    }
    return Pair.new(sin: sin, cos: cos)
  end
  def floorf(x)
    y = (x).to_i
    return (y).to_f
  end
  def fmtF5(x)
    y = floorf(_add(x * 100000.0, 0.5)) / 100000.0
    s = (y).to_s
    dot = _indexOf(s, ".")
    if dot == 0 - 1
      s = _add(s, ".00000")
    else
      decs = s.length - dot - 1
      if decs > 5
        s = s[0..._add(dot, 6)]
      else
        while decs < 5
          s = _add(s, "0")
          decs = _add(decs, 1)
        end
      end
    end
    return s
  end
  def padFloat5(x, width)
    s = fmtF5(x)
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def partialSeries(f)
    out = ""
    i = 0
    while i < 6
      out = _add(_add(_add(out, " "), padFloat5(extract(f, i), 8)), " ")
      i = _add(i, 1)
    end
    return out
  end
  def main()
    p = sinCos()
    puts(_add("sin:", partialSeries(p.sin)))
    puts(_add("cos:", partialSeries(p.cos)))
  end
  Fps = Struct.new(:coeffs, :compute, keyword_init: true)
  Pair = Struct.new(:sin, :cos, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
