# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def indexOf3(s, ch, start)
    i = start
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def ord(ch)
    digits = "0123456789"
    idx = indexOf3(digits, ch, 0)
    if idx >= 0
      return _add(48, idx)
    end
    if ch == "X"
      return 88
    end
    if ch == "é"
      return 233
    end
    if ch == "😍"
      return 128525
    end
    if ch == "🐡"
      return 128033
    end
    return 0
  end
  def toHex(n)
    digits = "0123456789ABCDEF"
    if n == 0
      return "0"
    end
    v = n
    out = ""
    while v > 0
      d = v % 16
      out = _add(digits[d..._add(d, 1)], out)
      v = v / 16
    end
    return out
  end
  def analyze(s)
    le = s.length
    puts(_add(_add(_add(_add("Analyzing \"", s), "\" which has a length of "), (le).to_s), ":"))
    if le > 1
      i = 0
      while i < le - 1
        j = _add(i, 1)
        while j < le
          if s[j..._add(j, 1)] == s[i..._add(i, 1)]
            ch = s[i..._add(i, 1)]
            puts("  Not all characters in the string are unique.")
            puts(_add(_add(_add(_add(_add(_add(_add(_add("  '", ch), "' (0x"), toHex(ord(ch)).downcase()), ") is duplicated at positions "), (_add(i, 1)).to_s), " and "), (_add(j, 1)).to_s), ".\n"))
            return
          end
          j = _add(j, 1)
        end
        i = _add(i, 1)
      end
    end
    puts("  All characters in the string are unique.\n")
  end
  def main()
    strings = ["", ".", "abcABC", "XYZ ZYX", "1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ", "01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X", "hétérogénéité", "🎆🎃🎇🎈", "😍😀🙌💃😍🙌", "🐠🐟🐡🦈🐬🐳🐋🐡"]
    i = 0
    while i < strings.length
      analyze(strings[i])
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
