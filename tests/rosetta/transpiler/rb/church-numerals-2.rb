# Generated by Mochi transpiler v0.10.41 on 2025-07-26 21:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def id(x)
    return x
  end
  def compose(f, g)
    return ->(x) {
      return f.call(g.call(x))
    }
  end
  def zero()
    return ->(f) {
      return method(:id)
    }
  end
  def one()
    return method(:id)
  end
  def succ(n)
    return ->(f) {
      return compose(f, n.call(f))
    }
  end
  def plus(m, n)
    return ->(f) {
      return compose(m.call(f), n.call(f))
    }
  end
  def mult(m, n)
    return compose(m, n)
  end
  def exp(m, n)
    return n.call(m)
  end
  def toInt(x)
    counter = 0
    fCounter = ->(f) {
      counter = _add(counter, 1)
      return f
    }
    x.call(fCounter).call(method(:id))
    return counter
  end
  def toStr(x)
    s = ""
    fCounter = ->(f) {
      s = _add(s, "|")
      return f
    }
    x.call(fCounter).call(method(:id))
    return s
  end
  def main()
    puts(_add("zero = ", (toInt(zero())).to_s))
    onev = one()
    puts(_add("one = ", (toInt(onev)).to_s))
    two = succ(succ(zero()))
    puts(_add("two = ", (toInt(two)).to_s))
    three = plus(onev, two)
    puts(_add("three = ", (toInt(three)).to_s))
    four = mult(two, two)
    puts(_add("four = ", (toInt(four)).to_s))
    eight = exp(two, three)
    puts(_add("eight = ", (toInt(eight)).to_s))
    puts(_add("toStr(four) = ", toStr(four)))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
