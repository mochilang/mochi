# Generated by Mochi transpiler v0.10.42 on 2025-07-28 01:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def egcd(a, b)
    if a == 0
      return [b, 0, 1]
    end
    res = egcd(b % a, a)
    g = res[0]
    x1 = res[1]
    y1 = res[2]
    return [g, y1 - (b / a) * x1, x1]
  end
  def modInv(a, m)
    r = egcd(a, m)
    if r[0] != 1
      return 0
    end
    x = r[1]
    if x < 0
      return _add(x, m)
    end
    return x
  end
  def crt(a, n)
    prod = 1
    i = 0
    while i < n.length
      prod = prod * n[i]
      i = _add(i, 1)
    end
    x = 0
    i = 0
    while i < n.length
      ni = n[i]
      ai = a[i]
      p = prod / ni
      inv = modInv(p % ni, ni)
      x = _add(x, ai * inv * p)
      i = _add(i, 1)
    end
    return x % prod
  end
  n = [3, 5, 7]
  a = [2, 3, 2]
  res = crt(a, n)
  puts(_add((res).to_s, " <nil>"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
