# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def powf(base, exp)
    result = 1.0
    i = 0
    while i < exp
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    g = x
    i = 0
    while i < 20
      g = (_add(g, x / g)) / 2.0
      i = _add(i, 1)
    end
    return g
  end
  def modPow(base, exp, mod)
    result = 1 % mod
    b = base % mod
    e = exp
    while e > 0
      if e % 2 == 1
        result = (result * b) % mod
      end
      b = (b * b) % mod
      e = e / 2
    end
    return result
  end
  def mtest(m)
    if m < 4
      puts(_add(_add(_add((m).to_s, " < 4.  M"), (m).to_s), " not tested."))
      return
    end
    flimit = sqrtApprox(powf(2.0, m) - 1.0)
    qlast = 0
    if flimit < $qlimit
      qlast = (flimit).to_i
    else
      qlast = $qlimit
    end
    composite = []
    i = 0
    while i <= qlast
      composite = composite + [false]
      i = _add(i, 1)
    end
    sq = (sqrtApprox((qlast).to_f)).to_i
    q = 3
    while true
      if q <= sq
        j = q * q
        while j <= qlast
          composite[j] = true
          j = _add(j, q)
        end
      end
      q8 = q % 8
      if (q8 == 1 || q8 == 7) && modPow(2, m, q) == 1
        puts(_add(_add(_add("M", (m).to_s), " has factor "), (q).to_s))
        return
      end
      while true
        q = _add(q, 2)
        if q > qlast
          puts(_add(_add("No factors of M", (m).to_s), " found."))
          return
        end
        if !composite[q]
          break
        end
      end
    end
  end
  def main()
    mtest(31)
    mtest(67)
  end
  $qlimit = 50000
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
