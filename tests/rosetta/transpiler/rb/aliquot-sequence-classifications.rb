# Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:54 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def indexOf(xs, value)
    i = 0
    while i < xs.length
      if xs[i] == value
        return i
      end
      i = _add(i, 1)
    end
    return 0 - 1
  end
  def contains(xs, value)
    return _indexOf(xs, value) != 0 - 1
  end
  def maxOf(a, b)
    if a > b
      return a
    else
      return b
    end
  end
  def intSqrt(n)
    if n == 0
      return 0
    end
    x = n
    y = (_add(x, 1)) / 2
    while y < x
      x = y
      y = (_add(x, n / x)) / 2
    end
    return x
  end
  def sumProperDivisors(n)
    if n < 2
      return 0
    end
    sqrt = intSqrt(n)
    sum = 1
    i = 2
    while i <= sqrt
      if n % i == 0
        sum = _add(_add(sum, i), n / i)
      end
      i = _add(i, 1)
    end
    if sqrt * sqrt == n
      sum = sum - sqrt
    end
    return sum
  end
  def classifySequence(k)
    last = k
    seq = [k]
    while true
      last = sumProperDivisors(last)
      seq = seq + [last]
      n = seq.length
      aliquot = ""
      if last == 0
        aliquot = "Terminating"
      else
        if n == 2 && last == k
          aliquot = "Perfect"
        else
          if n == 3 && last == k
            aliquot = "Amicable"
          else
            if n >= 4 && last == k
              aliquot = _add(_add("Sociable[", (n - 1).to_s), "]")
            else
              if last == seq[n - 2]
                aliquot = "Aspiring"
              else
                if seq[1...maxOf(1, n - 2)].include?(last)
                  idx = _indexOf(seq, last)
                  aliquot = _add(_add("Cyclic[", (n - 1 - idx).to_s), "]")
                else
                  if n == 16 || last > $THRESHOLD
                    aliquot = "Non-Terminating"
                  end
                end
              end
            end
          end
        end
      end
      if aliquot != ""
        return {"seq" => seq, "aliquot" => aliquot}
      end
    end
    return {"seq" => seq, "aliquot" => ""}
  end
  def padLeft(n, w)
    s = (n).to_s
    while s.length < w
      s = _add(" ", s)
    end
    return s
  end
  def padRight(s, w)
    r = s
    while r.length < w
      r = _add(r, " ")
    end
    return r
  end
  def joinWithCommas(seq)
    s = "["
    i = 0
    while i < seq.length
      s = _add(s, (seq[i]).to_s)
      if i < seq.length - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def main()
    puts("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n")
    k = 1
    while k <= 10
      res = classifySequence(k)
      puts(_add(_add(_add(_add(padLeft(k, 2), ": "), padRight((res["aliquot"]).to_s, 15)), " "), joinWithCommas(res["seq"])))
      k = _add(k, 1)
    end
    puts("")
    s = [11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488]
    i = 0
    while i < s.length
      val = s[i]
      res = classifySequence(val)
      puts(_add(_add(_add(_add(padLeft(val, 7), ": "), padRight((res["aliquot"]).to_s, 15)), " "), joinWithCommas(res["seq"])))
      i = _add(i, 1)
    end
    puts("")
    big = 15355717786080
    r = classifySequence(big)
    puts(_add(_add(_add(_add((big).to_s, ": "), padRight((r["aliquot"]).to_s, 15)), " "), joinWithCommas(r["seq"])))
  end
  $THRESHOLD = 140737488355328
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
