# Generated by Mochi transpiler v0.10.42 on 2025-07-27 10:22 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def generatePrimes(n)
    primes = [2]
    cand = 3
    while primes.length < n
      isP = true
      i = 0
      while i < primes.length
        p = primes[i]
        if p * p > cand
          break
        end
        if cand % p == 0
          isP = false
          break
        end
        i = _add(i, 1)
      end
      if isP
        primes = primes + [cand]
      end
      cand = _add(cand, 2)
    end
    return primes
  end
  def primeFactors(n, primes)
    factors = []
    num = n
    i = 0
    while i < primes.length && primes[i] * primes[i] <= num
      p = primes[i]
      while num % p == 0
        factors = factors + [p]
        num = num / p
      end
      i = _add(i, 1)
    end
    if num > 1
      factors = factors + [num]
    end
    return factors
  end
  $prevCats = {}
  def cat(p, primes)
    if $prevCats.include?(p)
      return $prevCats[p]
    end
    pf = primeFactors(_add(p, 1), primes)
    all23 = true
    pf.each do |f|
      if f != 2 && f != 3
        all23 = false
        break
      end
    end
    if all23
      $prevCats[p] = 1
      return 1
    end
    if p > 2
      unique = []
      last = -1
      pf.each do |f|
        if f != last
          unique = unique + [f]
          last = f
        end
      end
      pf = unique
    end
    c = 2
    while c <= 11
      ok = true
      pf.each do |f|
        if cat(f, primes) >= c
          ok = false
          break
        end
      end
      if ok
        $prevCats[p] = c
        return c
      end
      c = _add(c, 1)
    end
    $prevCats[p] = 12
    return 12
  end
  def padLeft(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def main()
    primes = generatePrimes(1000)
    es = []
    (0...12).each do |_|
      es = es + [[]]
    end
    puts("First 200 primes:\n")
    idx = 0
    while idx < 200
      p = primes[idx]
      c = cat(p, primes)
      es[c - 1] = es[c - 1] + [p]
      idx = _add(idx, 1)
    end
    c = 1
    while c <= 6
      if es[c - 1].length > 0
        puts(_add(_add("Category ", (c).to_s), ":"))
        puts((es[c - 1]).to_s)
        puts("")
      end
      c = _add(c, 1)
    end
    puts("First thousand primes:\n")
    while idx < 1000
      p = primes[idx]
      cv = cat(p, primes)
      es[cv - 1] = es[cv - 1] + [p]
      idx = _add(idx, 1)
    end
    c = 1
    while c <= 12
      e = es[c - 1]
      if e.length > 0
        line = _add(_add(_add(_add(_add(_add(_add("Category ", padLeft(c, 2)), ": First = "), padLeft(e[0], 7)), "  Last = "), padLeft(e[e.length - 1], 8)), "  Count = "), padLeft(e.length, 6))
        puts(line)
      end
      c = _add(c, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
