# Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:07 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def maxf(a, b)
    if a > b
      return a
    end
    return b
  end
  def minf(a, b)
    if a < b
      return a
    end
    return b
  end
  def max3(a, b, c)
    m = a
    if b > m
      m = b
    end
    if c > m
      m = c
    end
    return m
  end
  def min3(a, b, c)
    m = a
    if b < m
      m = b
    end
    if c < m
      m = c
    end
    return m
  end
  Point = Struct.new(:x, :y, keyword_init: true)
  QuadSpline = Struct.new(:c0, :c1, :c2, keyword_init: true)
  QuadCurve = Struct.new(:x, :y, keyword_init: true)
  def subdivideQuadSpline(q, t)
    s = 1.0 - t
    u = QuadSpline.new(c0: q.c0, c1: 0.0, c2: 0.0)
    v = QuadSpline.new(c0: 0.0, c1: 0.0, c2: q.c2)
    u["c1"] = _add(s * q.c0, t * q.c1)
    v["c1"] = _add(s * q.c1, t * q.c2)
    u["c2"] = _add(s * u.c1, t * v.c1)
    v["c0"] = u.c2
    return [u, v]
  end
  def subdivideQuadCurve(q, t)
    xs = subdivideQuadSpline(q.x, t)
    ys = subdivideQuadSpline(q.y, t)
    u = QuadCurve.new(x: xs[0], y: ys[0])
    v = QuadCurve.new(x: xs[1], y: ys[1])
    return [u, v]
  end
  def rectsOverlap(xa0, ya0, xa1, ya1, xb0, yb0, xb1, yb1)
    return xb0 <= xa1 && xa0 <= xb1 && yb0 <= ya1 && ya0 <= yb1
  end
  def testIntersect(p, q, tol)
    pxmin = min3(p.x.c0, p.x.c1, p.x.c2)
    pymin = min3(p.y.c0, p.y.c1, p.y.c2)
    pxmax = max3(p.x.c0, p.x.c1, p.x.c2)
    pymax = max3(p.y.c0, p.y.c1, p.y.c2)
    qxmin = min3(q.x.c0, q.x.c1, q.x.c2)
    qymin = min3(q.y.c0, q.y.c1, q.y.c2)
    qxmax = max3(q.x.c0, q.x.c1, q.x.c2)
    qymax = max3(q.y.c0, q.y.c1, q.y.c2)
    exclude = true
    accept = false
    inter = Point.new(x: 0.0, y: 0.0)
    if rectsOverlap(pxmin, pymin, pxmax, pymax, qxmin, qymin, qxmax, qymax)
      exclude = false
      xmin = maxf(pxmin, qxmin)
      xmax = minf(pxmax, qxmax)
      if xmax - xmin <= tol
        ymin = maxf(pymin, qymin)
        ymax = minf(pymax, qymax)
        if ymax - ymin <= tol
          accept = true
          inter["x"] = 0.5 * (_add(xmin, xmax))
          inter["y"] = 0.5 * (_add(ymin, ymax))
        end
      end
    end
    return {"exclude" => exclude, "accept" => accept, "intersect" => inter}
  end
  def seemsToBeDuplicate(pts, xy, spacing)
    i = 0
    while i < pts.length
      pt = pts[i]
      if absf(pt.x - xy.x) < spacing && absf(pt.y - xy.y) < spacing
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def findIntersects(p, q, tol, spacing)
    inters = []
    workload = [{"p" => p, "q" => q}]
    while workload.length > 0
      idx = workload.length - 1
      work = workload[idx]
      workload = workload[...idx]
      res = testIntersect(work["p"], work["q"], tol)
      excl = res["exclude"]
      acc = res["accept"]
      inter = (res["intersect"])
      if acc
        if !seemsToBeDuplicate(inters, inter, spacing)
          inters = inters + [inter]
        end
      else
        if !excl
          ps = subdivideQuadCurve(work["p"], 0.5)
          qs = subdivideQuadCurve(work["q"], 0.5)
          p0 = ps[0]
          p1 = ps[1]
          q0 = qs[0]
          q1 = qs[1]
          workload = workload + [{"p" => p0, "q" => q0}]
          workload = workload + [{"p" => p0, "q" => q1}]
          workload = workload + [{"p" => p1, "q" => q0}]
          workload = workload + [{"p" => p1, "q" => q1}]
        end
      end
    end
    return inters
  end
  def main()
    p = QuadCurve.new(x: QuadSpline.new(c0: -1.0, c1: 0.0, c2: 1.0), y: QuadSpline.new(c0: 0.0, c1: 10.0, c2: 0.0))
    q = QuadCurve.new(x: QuadSpline.new(c0: 2.0, c1: -8.0, c2: 2.0), y: QuadSpline.new(c0: 1.0, c1: 2.0, c2: 3.0))
    tol = 1e-07
    spacing = tol * 10.0
    inters = findIntersects(p, q, tol, spacing)
    i = 0
    while i < inters.length
      pt = inters[i]
      puts(_add(_add(_add(_add("(", (pt.x).to_s), ", "), (pt.y).to_s), ")"))
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
