# Generated by Mochi transpiler v0.10.54 on 2025-08-02 16:40 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def lower(ch)
    up = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    low = "abcdefghijklmnopqrstuvwxyz"
    i = 0
    while i < up.length
      if ch == up[i..._add(i, 1)]
        return low[i..._add(i, 1)]
      end
      i = _add(i, 1)
    end
    return ch
  end
  $partList = ["A", "B", "C", "D"]
  $nAssemblies = 3
  $partList.each do |p|
    puts(_add(p, " worker running"))
  end
  (1...(_add($nAssemblies, 1))).each do |cycle|
    puts(_add("begin assembly cycle ", (cycle).to_s))
    a = ""
    $partList.each do |p|
      puts(_add(p, " worker begins part"))
      puts(_add(_add(p, " worker completed "), p.downcase()))
      a = _add(a, p.downcase())
    end
    puts(_add(_add(_add(a, " assembled.  cycle "), (cycle).to_s), " complete"))
  end
  $partList.each do |p|
    puts(_add(p, " worker stopped"))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
