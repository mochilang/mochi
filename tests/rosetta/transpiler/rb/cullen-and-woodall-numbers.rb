# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow_big(base, exp)
    result = 1
    b = base
    e = exp
    while e > 0
      if e % 2 == 1
        result = result * b
      end
      b = b * b
      e = ((e / 2)).to_i
    end
    return result
  end
  def cullen(n)
    two_n = pow_big((2), n)
    return _add((two_n * ((n))), ((1)))
  end
  def woodall(n)
    return cullen(n) - ((2))
  end
  def show_list(xs)
    line = ""
    i = 0
    while i < xs.length
      line = _add(line, (xs[i]).to_s)
      if i < xs.length - 1
        line = _add(line, " ")
      end
      i = _add(i, 1)
    end
    return line
  end
  def main()
    cnums = []
    i = 1
    while i <= 20
      cnums = (cnums << cullen(i))
      i = _add(i, 1)
    end
    puts("First 20 Cullen numbers (n * 2^n + 1):")
    puts(show_list(cnums))
    wnums = []
    i = 1
    while i <= 20
      wnums = (wnums << woodall(i))
      i = _add(i, 1)
    end
    puts("\nFirst 20 Woodall numbers (n * 2^n - 1):")
    puts(show_list(wnums))
    cprimes = [(1), (141), (4713), (5795), (6611)]
    puts("\nFirst 5 Cullen primes (in terms of n):")
    puts(show_list(cprimes))
    wprimes = [(2), (3), (6), (30), (75), (81), (115), (123), (249), (362), (384), (462)]
    puts("\nFirst 12 Woodall primes (in terms of n):")
    puts(show_list(wprimes))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
