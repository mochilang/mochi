# Generated by Mochi transpiler v0.10.40 on 2025-07-25 12:18 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def fib(n)
    if n < 2
      return n
    end
    a = 0
    b = 1
    i = 1
    while i < n
      t = _add(a, b)
      a = b
      b = t
      i = _add(i, 1)
    end
    return b
  end
  def main()
    [0, 1, 2, 3, 4, 5, 10, 40, -1].each do |n|
      if n < 0
        puts("fib undefined for negative numbers")
      else
        puts(_add(_add(_add("fib ", (n).to_s), " = "), (fib(n)).to_s))
      end
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
