# Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pow10(n)
    r = 1.0
    i = 0
    while i < n
      r = r * 10.0
      i = _add(i, 1)
    end
    return r
  end
  def formatFloat(f, prec)
    scale = pow10(prec)
    scaled = _add((f * scale), 0.5)
    n = ((scaled).to_i)
    digits = (n).to_s
    while digits.length <= prec
      digits = _add("0", digits)
    end
    intPart = digits[0...digits.length - prec]
    fracPart = digits[digits.length - prec...digits.length]
    return _add(_add(intPart, "."), fracPart)
  end
  def padLeft(s, w)
    res = ""
    n = w - s.length
    while n > 0
      res = _add(res, " ")
      n = n - 1
    end
    return _add(res, s)
  end
  def averageSquareDiff(f, preds)
    av = 0.0
    i = 0
    while i < preds.length
      av = _add(av, (preds[i] - f) * (preds[i] - f))
      i = _add(i, 1)
    end
    av = av / ((preds.length).to_f)
    return av
  end
  def diversityTheorem(truth, preds)
    av = 0.0
    i = 0
    while i < preds.length
      av = _add(av, preds[i])
      i = _add(i, 1)
    end
    av = av / ((preds.length).to_f)
    avErr = averageSquareDiff(truth, preds)
    crowdErr = (truth - av) * (truth - av)
    div = averageSquareDiff(av, preds)
    return [avErr, crowdErr, div]
  end
  def main()
    predsArray = [[48.0, 47.0, 51.0], [48.0, 47.0, 51.0, 42.0]]
    truth = 49.0
    i = 0
    while i < predsArray.length
      preds = predsArray[i]
      res = diversityTheorem(truth, preds)
      puts(_add("Average-error : ", padLeft(formatFloat(res[0], 3), 6)))
      puts(_add("Crowd-error   : ", padLeft(formatFloat(res[1], 3), 6)))
      puts(_add("Diversity     : ", padLeft(formatFloat(res[2], 3), 6)))
      puts("")
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
