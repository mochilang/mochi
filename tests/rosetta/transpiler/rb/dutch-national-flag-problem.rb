# Generated by Mochi transpiler v0.10.42 on 2025-07-27 10:22 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def listStr(xs)
    s = "["
    i = 0
    while i < xs.length
      s = _add(s, (xs[i]).to_s)
      if i < xs.length - 1
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def ordered(xs)
    if xs.length == 0
      return true
    end
    prev = xs[0]
    i = 1
    while i < xs.length
      if xs[i] < prev
        return false
      end
      prev = xs[i]
      i = _add(i, 1)
    end
    return true
  end
  def outOfOrder(n)
    if n < 2
      return []
    end
    r = []
    while true
      r = []
      i = 0
      while i < n
        r = r + [_now() % 3]
        i = _add(i, 1)
      end
      if !ordered(r)
        break
      end
    end
    return r
  end
  def sort3(a)
    lo = 0
    mid = 0
    hi = a.length - 1
    while mid <= hi
      v = a[mid]
      if v == 0
        tmp = a[lo]
        a[lo] = a[mid]
        a[mid] = tmp
        lo = _add(lo, 1)
        mid = _add(mid, 1)
      else
        if v == 1
          mid = _add(mid, 1)
        else
          tmp = a[mid]
          a[mid] = a[hi]
          a[hi] = tmp
          hi = hi - 1
        end
      end
    end
    return a
  end
  def main()
    f = outOfOrder(12)
    puts(listStr(f))
    f = sort3(f)
    puts(listStr(f))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
