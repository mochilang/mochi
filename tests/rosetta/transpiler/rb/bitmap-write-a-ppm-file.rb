# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def newBitmap(w, h, c)
    rows = []
    y = 0
    while y < h
      row = []
      x = 0
      while x < w
        row = row + [c]
        x = _add(x, 1)
      end
      rows = rows + [row]
      y = _add(y, 1)
    end
    return Bitmap.new(width: w, height: h, pixels: rows)
  end
  def setPixel(b, x, y, c)
    rows = b.pixels
    row = rows[y]
    row[x] = c
    rows[y] = row
    b["pixels"] = rows
  end
  def fillRect(b, x, y, w, h, c)
    yy = y
    while yy < _add(y, h)
      xx = x
      while xx < _add(x, w)
        setPixel(b, xx, yy, c)
        xx = _add(xx, 1)
      end
      yy = _add(yy, 1)
    end
  end
  def pad(n, width)
    s = (n).to_s
    while s.length < width
      s = _add(" ", s)
    end
    return s
  end
  def writePPMP3(b)
    maxv = 0
    y = 0
    while y < b.height
      x = 0
      while x < b.width
        p = b.pixels[y][x]
        if p.R > maxv
          maxv = p.R
        end
        if p.G > maxv
          maxv = p.G
        end
        if p.B > maxv
          maxv = p.B
        end
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    out = _add(_add(_add(_add(_add(_add("P3\n# generated from Bitmap.writeppmp3\n", (b.width).to_s), " "), (b.height).to_s), "\n"), (maxv).to_s), "\n")
    numsize = (maxv).to_s.length
    y = b.height - 1
    while y >= 0
      line = ""
      x = 0
      while x < b.width
        p = b.pixels[y][x]
        line = _add(_add(_add(_add(_add(_add(line, "   "), pad(p.R, numsize)), " "), pad(p.G, numsize)), " "), pad(p.B, numsize))
        x = _add(x, 1)
      end
      out = _add(out, line)
      if y > 0
        out = _add(out, "\n")
      else
        out = _add(out, "\n")
      end
      y = y - 1
    end
    return out
  end
  def main()
    black = Colour.new(R: 0, G: 0, B: 0)
    white = Colour.new(R: 255, G: 255, B: 255)
    bm = newBitmap(4, 4, black)
    fillRect(bm, 1, 0, 1, 2, white)
    setPixel(bm, 3, 3, Colour.new(R: 127, G: 0, B: 63))
    ppm = writePPMP3(bm)
    puts(ppm)
  end
  Colour = Struct.new(:R, :G, :B, keyword_init: true)
  Bitmap = Struct.new(:width, :height, :pixels, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
