# Generated by Mochi transpiler v0.10.50 on 2025-07-31 07:51 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def setChar(s, idx, ch)
    return _add(_add(s[0...idx], ch), s[_add(idx, 1)...s.length])
  end
  $width = 81
  $height = 5
  $lines = []
  (0...$height).each do |i|
    row = ""
    j = 0
    while j < $width
      row = _add(row, "*")
      j = _add(j, 1)
    end
    $lines = $lines + [row]
  end
  $stack = [{"start" => 0, "len" => $width, "index" => 1}]
  while $stack.length > 0
    frame = $stack[$stack.length - 1]
    $stack = $stack[...$stack.length - 1]
    start = frame.start
    lenSeg = frame.len
    index = frame.index
    seg = ((lenSeg / 3)).to_i
    if seg == 0
      next
    end
    i = index
    while i < $height
      j = _add(start, seg)
      while j < _add(start, 2 * seg)
        $lines[i] = setChar($lines[i], j, " ")
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    $stack = $stack + [{"start" => start, "len" => seg, "index" => _add(index, 1)}]
    $stack = $stack + [{"start" => _add(start, seg * 2), "len" => seg, "index" => _add(index, 1)}]
  end
  $lines.each do |line|
    puts(line)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
