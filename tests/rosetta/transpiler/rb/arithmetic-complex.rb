# Generated by Mochi transpiler v0.10.37 on 2025-07-23 13:37 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end

Complex = Struct.new(:re, :im, keyword_init: true)
def add(a, b)
  b = Marshal.load(Marshal.dump(b))
  a = Marshal.load(Marshal.dump(a))
  return Complex.new(re: _add(a.re, b.re), im: _add(a.im, b.im))
end
def mul(a, b)
  b = Marshal.load(Marshal.dump(b))
  a = Marshal.load(Marshal.dump(a))
  return Complex.new(re: a.re * b.re - a.im * b.im, im: _add(a.re * b.im, a.im * b.re))
end
def neg(a)
  a = Marshal.load(Marshal.dump(a))
  return Complex.new(re: -a.re, im: -a.im)
end
def inv(a)
  a = Marshal.load(Marshal.dump(a))
  denom = _add(a.re * a.re, a.im * a.im)
  return Complex.new(re: a.re / denom, im: -a.im / denom)
end
def conj(a)
  a = Marshal.load(Marshal.dump(a))
  return Complex.new(re: a.re, im: -a.im)
end
def cstr(a)
  a = Marshal.load(Marshal.dump(a))
  s = _add("(", (a.re).to_s)
  if a.im >= 0
    s = _add(_add(_add(s, "+"), (a.im).to_s), "i)")
  else
    s = _add(_add(s, (a.im).to_s), "i)")
  end
  return s
end
$a = Complex.new(re: 1.0, im: 1.0)
$b = Complex.new(re: 3.14159, im: 1.25)
puts(_add("a:       ", cstr($a)))
puts(_add("b:       ", cstr($b)))
puts(_add("a + b:   ", cstr(add($a, $b))))
puts(_add("a * b:   ", cstr(mul($a, $b))))
puts(_add("-a:      ", cstr(neg($a))))
puts(_add("1 / a:   ", cstr(inv($a))))
puts(_add("aÌ…:       ", cstr(conj($a))))
