# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:12 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def add(a, b)
    return Complex.new(re: _add(a.re, b.re), im: _add(a.im, b.im))
  end
  def mul(a, b)
    return Complex.new(re: a.re * b.re - a.im * b.im, im: _add(a.re * b.im, a.im * b.re))
  end
  def neg(a)
    return Complex.new(re: -a.re, im: -a.im)
  end
  def inv(a)
    denom = _add(a.re * a.re, a.im * a.im)
    return Complex.new(re: a.re / denom, im: -a.im / denom)
  end
  def conj(a)
    return Complex.new(re: a.re, im: -a.im)
  end
  def cstr(a)
    s = _add("(", (a.re).to_s)
    if a.im >= 0
      s = _add(_add(_add(s, "+"), (a.im).to_s), "i)")
    else
      s = _add(_add(s, (a.im).to_s), "i)")
    end
    return s
  end
  Complex = Struct.new(:re, :im, keyword_init: true)
  $a = Complex.new(re: 1.0, im: 1.0)
  $b = Complex.new(re: 3.14159, im: 1.25)
  puts(_add("a:       ", cstr($a)))
  puts(_add("b:       ", cstr($b)))
  puts(_add("a + b:   ", cstr(add($a, $b))))
  puts(_add("a * b:   ", cstr(mul($a, $b))))
  puts(_add("-a:      ", cstr(neg($a))))
  puts(_add("1 / a:   ", cstr(inv($a))))
  puts(_add("aÌ…:       ", cstr(conj($a))))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
