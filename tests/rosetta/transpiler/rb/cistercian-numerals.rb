# Generated by Mochi transpiler v0.10.50 on 2025-07-31 01:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def initN()
    i = 0
    while i < 15
      row = []
      j = 0
      while j < 11
        row = row + [" "]
        j = _add(j, 1)
      end
      row[5] = "x"
      $n = $n + [row]
      i = _add(i, 1)
    end
  end
  def horiz(c1, c2, r)
    c = c1
    while c <= c2
      $n[r][c] = "x"
      c = _add(c, 1)
    end
  end
  def verti(r1, r2, c)
    r = r1
    while r <= r2
      $n[r][c] = "x"
      r = _add(r, 1)
    end
  end
  def diagd(c1, c2, r)
    c = c1
    while c <= c2
      $n[_add(r, c) - c1][c] = "x"
      c = _add(c, 1)
    end
  end
  def diagu(c1, c2, r)
    c = c1
    while c <= c2
      $n[_add(r - c, c1)][c] = "x"
      c = _add(c, 1)
    end
  end
  def initDraw()
    $draw[1] = ->() {
      horiz(6, 10, 0)
    }
    $draw[2] = ->() {
      horiz(6, 10, 4)
    }
    $draw[3] = ->() {
      diagd(6, 10, 0)
    }
    $draw[4] = ->() {
      diagu(6, 10, 4)
    }
    $draw[5] = ->() {
      $draw[1].call()
      $draw[4].call()
    }
    $draw[6] = ->() {
      verti(0, 4, 10)
    }
    $draw[7] = ->() {
      $draw[1].call()
      $draw[6].call()
    }
    $draw[8] = ->() {
      $draw[2].call()
      $draw[6].call()
    }
    $draw[9] = ->() {
      $draw[1].call()
      $draw[8].call()
    }
    $draw[10] = ->() {
      horiz(0, 4, 0)
    }
    $draw[20] = ->() {
      horiz(0, 4, 4)
    }
    $draw[30] = ->() {
      diagu(0, 4, 4)
    }
    $draw[40] = ->() {
      diagd(0, 4, 0)
    }
    $draw[50] = ->() {
      $draw[10].call()
      $draw[40].call()
    }
    $draw[60] = ->() {
      verti(0, 4, 0)
    }
    $draw[70] = ->() {
      $draw[10].call()
      $draw[60].call()
    }
    $draw[80] = ->() {
      $draw[20].call()
      $draw[60].call()
    }
    $draw[90] = ->() {
      $draw[10].call()
      $draw[80].call()
    }
    $draw[100] = ->() {
      horiz(6, 10, 14)
    }
    $draw[200] = ->() {
      horiz(6, 10, 10)
    }
    $draw[300] = ->() {
      diagu(6, 10, 14)
    }
    $draw[400] = ->() {
      diagd(6, 10, 10)
    }
    $draw[500] = ->() {
      $draw[100].call()
      $draw[400].call()
    }
    $draw[600] = ->() {
      verti(10, 14, 10)
    }
    $draw[700] = ->() {
      $draw[100].call()
      $draw[600].call()
    }
    $draw[800] = ->() {
      $draw[200].call()
      $draw[600].call()
    }
    $draw[900] = ->() {
      $draw[100].call()
      $draw[800].call()
    }
    $draw[1000] = ->() {
      horiz(0, 4, 14)
    }
    $draw[2000] = ->() {
      horiz(0, 4, 10)
    }
    $draw[3000] = ->() {
      diagd(0, 4, 10)
    }
    $draw[4000] = ->() {
      diagu(0, 4, 14)
    }
    $draw[5000] = ->() {
      $draw[1000].call()
      $draw[4000].call()
    }
    $draw[6000] = ->() {
      verti(10, 14, 0)
    }
    $draw[7000] = ->() {
      $draw[1000].call()
      $draw[6000].call()
    }
    $draw[8000] = ->() {
      $draw[2000].call()
      $draw[6000].call()
    }
    $draw[9000] = ->() {
      $draw[1000].call()
      $draw[8000].call()
    }
  end
  def printNumeral()
    i = 0
    while i < 15
      line = ""
      j = 0
      while j < 11
        line = _add(_add(line, $n[i][j]), " ")
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
    puts("")
  end
  $n = []
  $draw = {}
  initDraw()
  $numbers = [0, 1, 20, 300, 4000, 5555, 6789, 9999]
  $numbers.each do |number|
    initN()
    puts(_add((number).to_s, ":"))
    num = number
    thousands = num / 1000
    num = num % 1000
    hundreds = num / 100
    num = num % 100
    tens = num / 10
    ones = num % 10
    if thousands > 0
      $draw[thousands * 1000].call()
    end
    if hundreds > 0
      $draw[hundreds * 100].call()
    end
    if tens > 0
      $draw[tens * 10].call()
    end
    if ones > 0
      $draw[ones].call()
    end
    printNumeral()
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
