# Generated by Mochi transpiler v0.10.42 on 2025-07-28 07:49 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

def randN(n)
  $seed = (_add($seed * 1664525, 1013904223)) % 2147483647
  return $seed % n
end
def newField(w, h)
  rows = []
  y = 0
  while y < h
    row = []
    x = 0
    while x < w
      row = row + [false]
      x = _add(x, 1)
    end
    rows = rows + [row]
    y = _add(y, 1)
  end
  return Field.new(s: rows, w: w, h: h)
end
def setCell(f, x, y, b)
  rows = f.s
  row = rows[y]
  row[x] = b
  rows[y] = row
  f["s"] = rows
end
def state(f, x, y)
  while y < 0
    y = _add(y, f.h)
  end
  while x < 0
    x = _add(x, f.w)
  end
  return f.s[y % f.h][x % f.w]
end
def nextState(f, x, y)
  count = 0
  dy = -1
  while dy <= 1
    dx = -1
    while dx <= 1
      if !(dx == 0 && dy == 0) && state(f, _add(x, dx), _add(y, dy))
        count = _add(count, 1)
      end
      dx = _add(dx, 1)
    end
    dy = _add(dy, 1)
  end
  return count == 3 || (count == 2 && state(f, x, y))
end
def newLife(w, h)
  a = newField(w, h)
  i = 0
  while i < (w * h / 2)
    setCell(a, randN(w), randN(h), true)
    i = _add(i, 1)
  end
  return Life.new(a: a, b: newField(w, h), w: w, h: h)
end
def step(l)
  y = 0
  while y < l.h
    x = 0
    while x < l.w
      setCell(l.b, x, y, nextState(l.a, x, y))
      x = _add(x, 1)
    end
    y = _add(y, 1)
  end
  tmp = l.a
  l["a"] = l.b
  l["b"] = tmp
end
def lifeString(l)
  out = ""
  y = 0
  while y < l.h
    x = 0
    while x < l.w
      if state(l.a, x, y)
        out = _add(out, "*")
      else
        out = _add(out, " ")
      end
      x = _add(x, 1)
    end
    out = _add(out, "\n")
    y = _add(y, 1)
  end
  return out
end
def main()
  l = newLife(80, 15)
  i = 0
  while i < 300
    step(l)
    puts("\f")
    puts(lifeString(l))
    i = _add(i, 1)
  end
end
Field = Struct.new(:s, :w, :h, keyword_init: true)
Life = Struct.new(:a, :b, :w, :h, keyword_init: true)
$seed = 1
main()
