# Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:07 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def fmt3(x)
    y = (((_add((x * 1000.0), 0.5))).to_i).to_f / 1000.0
    s = (y).to_s
    dot = _indexOf(s, ".")
    if dot == 0 - 1
      s = _add(s, ".000")
    else
      decs = s.length - dot - 1
      if decs > 3
        s = s[0..._add(dot, 4)]
      else
        while decs < 3
          s = _add(s, "0")
          decs = _add(decs, 1)
        end
      end
    end
    return s
  end
  def pad(s, width)
    out = s
    while out.length < width
      out = _add(" ", out)
    end
    return out
  end
  def smaSeries(xs, period)
    res = []
    sum = 0.0
    i = 0
    while i < xs.length
      sum = _add(sum, xs[i])
      if i >= period
        sum = sum - xs[i - period]
      end
      denom = _add(i, 1)
      if denom > period
        denom = period
      end
      res = res + [sum / ((denom).to_f)]
      i = _add(i, 1)
    end
    return res
  end
  def main()
    xs = [1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0]
    sma3 = smaSeries(xs, 3)
    sma5 = smaSeries(xs, 5)
    puts("x       sma3   sma5")
    i = 0
    while i < xs.length
      line = _add(_add(_add(_add(pad(fmt3(xs[i]), 5), "  "), pad(fmt3(sma3[i]), 5)), "  "), pad(fmt3(sma5[i]), 5))
      puts(line)
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
