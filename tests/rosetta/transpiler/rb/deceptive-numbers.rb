# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def isPrime(n)
    if n < 2
      return false
    end
    if n % 2 == 0
      return n == 2
    end
    if n % 3 == 0
      return n == 3
    end
    d = 5
    while d * d <= n
      if n % d == 0
        return false
      end
      d = _add(d, 2)
      if n % d == 0
        return false
      end
      d = _add(d, 4)
    end
    return true
  end
  def listToString(xs)
    s = "["
    i = 0
    while i < xs.length
      s = _add(s, (xs[i]).to_s)
      if i < xs.length - 1
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def main()
    count = 0
    limit = 25
    n = 17
    repunit = (1111111111111111)
    eleven = 11
    hundred = 100
    deceptive = []
    while count < limit
      if !isPrime(n) && n % 3 != 0 && n % 5 != 0
        bn = (n)
        if repunit % bn == (0)
          deceptive = (deceptive << n)
          count = _add(count, 1)
        end
      end
      n = _add(n, 2)
      repunit = _add((repunit * hundred), eleven)
    end
    puts(_add(_add("The first ", (limit).to_s), " deceptive numbers are:"))
    puts(listToString(deceptive))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
