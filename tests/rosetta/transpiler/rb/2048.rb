# Generated by Mochi transpiler v0.10.37 on 2025-07-23 09:33 +0700

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end

$SIZE = 4
def newBoard()
  b = []
  y = 0
  while y < $SIZE
    row = []
    x = 0
    while x < $SIZE
      row = row + [0]
      x = x + 1
    end
    b = b + [row]
    y = y + 1
  end
  return b
end
def spawnTile(b)
  empty = []
  y = 0
  while y < $SIZE
    x = 0
    while x < $SIZE
      if b[y][x] == 0
        empty = empty + [[x, y]]
      end
      x = x + 1
    end
    y = y + 1
  end
  if empty.length == 0
    return {"board" => b, "full" => true}
  end
  idx = _now() % empty.length
  cell = empty[idx]
  val = 4
  if _now() % 10 < 9
    val = 2
  end
  b[cell[1]][cell[0]] = val
  return {"board" => b, "full" => empty.length == 1}
end
def pad(n)
  s = (n).to_s
  pad = 4 - s.length
  i = 0
  out = ""
  while i < pad
    out = out + " "
    i = i + 1
  end
  return out + s
end
def draw(b, score)
  puts("Score: " + ($score).to_s)
  y = 0
  while y < $SIZE
    puts("+----+----+----+----+")
    line = "|"
    x = 0
    while x < $SIZE
      v = b[y][x]
      if v == 0
        line = line + "    |"
      else
        line = line + pad(v) + "|"
      end
      x = x + 1
    end
    puts(line)
    y = y + 1
  end
  puts("+----+----+----+----+")
  puts("W=Up S=Down A=Left D=Right Q=Quit")
end
def reverseRow(r)
  out = []
  i = $r.length - 1
  while i >= 0
    out = out + [$r[i]]
    i = i - 1
  end
  return out
end
def slideLeft(row)
  xs = []
  i = 0
  while i < row.length
    if row[i] != 0
      xs = xs + [row[i]]
    end
    i = i + 1
  end
  res = []
  gain = 0
  i = 0
  while i < xs.length
    if i + 1 < xs.length && xs[i] == xs[i + 1]
      v = xs[i] * 2
      gain = gain + v
      res = res + [v]
      i = i + 2
    else
      res = res + [xs[i]]
      i = i + 1
    end
  end
  while res.length < $SIZE
    res = res + [0]
  end
  return {"row" => res, "gain" => gain}
end
def moveLeft(b, score)
  $moved = false
  y = 0
  while y < $SIZE
    $r = slideLeft(b[y])
    new = $r["row"]
    $score = $score + $r["gain"]
    x = 0
    while x < $SIZE
      if b[y][x] != new[x]
        $moved = true
      end
      b[y][x] = new[x]
      x = x + 1
    end
    y = y + 1
  end
  return {"board" => b, "score" => $score, "moved" => $moved}
end
def moveRight(b, score)
  $moved = false
  y = 0
  while y < $SIZE
    rev = reverseRow(b[y])
    $r = slideLeft(rev)
    rev = $r["row"]
    $score = $score + $r["gain"]
    rev = reverseRow(rev)
    x = 0
    while x < $SIZE
      if b[y][x] != rev[x]
        $moved = true
      end
      b[y][x] = rev[x]
      x = x + 1
    end
    y = y + 1
  end
  return {"board" => b, "score" => $score, "moved" => $moved}
end
def getCol(b, x)
  col = []
  y = 0
  while y < $SIZE
    col = col + [b[y][x]]
    y = y + 1
  end
  return col
end
def setCol(b, x, col)
  y = 0
  while y < $SIZE
    b[y][x] = col[y]
    y = y + 1
  end
end
def moveUp(b, score)
  $moved = false
  x = 0
  while x < $SIZE
    col = getCol(b, x)
    $r = slideLeft(col)
    new = $r["row"]
    $score = $score + $r["gain"]
    y = 0
    while y < $SIZE
      if b[y][x] != new[y]
        $moved = true
      end
      b[y][x] = new[y]
      y = y + 1
    end
    x = x + 1
  end
  return {"board" => b, "score" => $score, "moved" => $moved}
end
def moveDown(b, score)
  $moved = false
  x = 0
  while x < $SIZE
    col = reverseRow(getCol(b, x))
    $r = slideLeft(col)
    col = $r["row"]
    $score = $score + $r["gain"]
    col = reverseRow(col)
    y = 0
    while y < $SIZE
      if b[y][x] != col[y]
        $moved = true
      end
      b[y][x] = col[y]
      y = y + 1
    end
    x = x + 1
  end
  return {"board" => b, "score" => $score, "moved" => $moved}
end
def hasMoves(b)
  y = 0
  while y < $SIZE
    x = 0
    while x < $SIZE
      if b[y][x] == 0
        return true
      end
      if x + 1 < $SIZE && b[y][x] == b[y][x + 1]
        return true
      end
      if y + 1 < $SIZE && b[y][x] == b[y + 1][x]
        return true
      end
      x = x + 1
    end
    y = y + 1
  end
  return false
end
def has2048(b)
  y = 0
  while y < $SIZE
    x = 0
    while x < $SIZE
      if b[y][x] >= 2048
        return true
      end
      x = x + 1
    end
    y = y + 1
  end
  return false
end
$board = newBoard()
$r = spawnTile($board)
$board = $r["board"]
$full = $r["full"]
$r = spawnTile($board)
$board = $r["board"]
$full = $r["full"]
$score = 0
draw($board, $score)
while true
  puts("Move: ")
  $cmd = _input()
  $moved = false
  if $cmd == "a" || $cmd == "A"
    $m = moveLeft($board, $score)
    $board = $m["board"]
    $score = $m["score"]
    $moved = $m["moved"]
  end
  if $cmd == "d" || $cmd == "D"
    $m = moveRight($board, $score)
    $board = $m["board"]
    $score = $m["score"]
    $moved = $m["moved"]
  end
  if $cmd == "w" || $cmd == "W"
    $m = moveUp($board, $score)
    $board = $m["board"]
    $score = $m["score"]
    $moved = $m["moved"]
  end
  if $cmd == "s" || $cmd == "S"
    $m = moveDown($board, $score)
    $board = $m["board"]
    $score = $m["score"]
    $moved = $m["moved"]
  end
  if $cmd == "q" || $cmd == "Q"
    break
  end
  if $moved
    $r2 = spawnTile($board)
    $board = $r2["board"]
    $full = $r2["full"]
    if $full && (!hasMoves($board))
      draw($board, $score)
      puts("Game Over")
      break
    end
  end
  draw($board, $score)
  if has2048($board)
    puts("You win!")
    break
  end
  if !hasMoves($board)
    puts("Game Over")
    break
  end
end
