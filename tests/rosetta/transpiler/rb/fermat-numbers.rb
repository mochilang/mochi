# Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pow_int(base, exp)
    result = 1
    b = base
    e = exp
    while e > 0
      if e % 2 == 1
        result = result * b
      end
      b = b * b
      e = ((e / 2)).to_i
    end
    return result
  end
  def pow_big(base, exp)
    result = 1
    b = base
    e = exp
    while e > 0
      if e % 2 == 1
        result = result * b
      end
      b = b * b
      e = ((e / 2)).to_i
    end
    return result
  end
  def parseBigInt(str)
    i = 0
    neg = false
    if str.length > 0 && str[0...1] == "-"
      neg = true
      i = 1
    end
    n = 0
    while i < str.length
      ch = str[i..._add(i, 1)]
      d = (ch).to_i
      n = _add(n * ((10)), ((d)))
      i = _add(i, 1)
    end
    if neg
      n = -n
    end
    return n
  end
  def fermat(n)
    p = pow_int(2, n)
    return _add(pow_big((2), p), ((1)))
  end
  def primeFactorsBig(n)
    factors = []
    m = n
    d = 2
    while m % d == 0
      factors = factors + [d]
      m = m / d
    end
    d = 3
    while d * d <= m
      while m % d == 0
        factors = factors + [d]
        m = m / d
      end
      d = _add(d, 2)
    end
    if m > 1
      factors = factors + [m]
    end
    return factors
  end
  def show_list(xs)
    line = ""
    i = 0
    while i < xs.length
      line = _add(line, (xs[i]).to_s)
      if i < xs.length - 1
        line = _add(line, " ")
      end
      i = _add(i, 1)
    end
    return line
  end
  def main()
    nums = []
    (0...8).each do |i|
      nums = nums + [fermat(i)]
    end
    puts("First 8 Fermat numbers:")
    nums.each do |n|
      puts((n).to_s)
    end
    extra = {6 => [(274177), (67280421310721)], 7 => [parseBigInt("59649589127497217"), parseBigInt("5704689200685129054721")]}
    puts("\nFactors:")
    i = 0
    while i < nums.length
      facs = []
      if i <= 5
        facs = primeFactorsBig(nums[i])
      else
        facs = extra[i]
      end
      puts(_add(_add(_add("F", (i).to_s), " = "), show_list(facs)))
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
