# Generated by Mochi transpiler v0.10.54 on 2025-08-02 15:25 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def isPrime(n)
    if n < 2
      return false
    end
    if n % 2 == 0
      return n == 2
    end
    if n % 3 == 0
      return n == 3
    end
    d = 5
    while d * d <= n
      if n % d == 0
        return false
      end
      d = _add(d, 2)
      if n % d == 0
        return false
      end
      d = _add(d, 4)
    end
    return true
  end
  def commatize(n)
    s = (n).to_s
    i = s.length - 3
    while i >= 1
      s = _add(_add(s[0...i], ","), s[i...s.length])
      i = i - 3
    end
    return s
  end
  def padLeft(s, w)
    out = s
    while out.length < w
      out = _add(" ", out)
    end
    return out
  end
  def padRight(s, w)
    out = s
    while out.length < w
      out = _add(out, " ")
    end
    return out
  end
  def main()
    i = $limit
    n = 0
    while n < $limit
      if isPrime(i)
        n = _add(n, 1)
        nStr = padRight((n).to_s, 2)
        pStr = padLeft(commatize(i), 19)
        puts(_add(_add(_add("n = ", nStr), "  "), pStr))
        i = _add(i, i) - 1
      end
      i = _add(i, 1)
    end
  end
  $limit = 42
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
