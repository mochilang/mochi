# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def fracStr(f)
    return _add(_add((f.num).to_s, "/"), (f.den).to_s)
  end
  def gen(l, r, n, acc)
    m = Frac.new(num: _add(l.num, r.num), den: _add(l.den, r.den))
    if m.den <= n
      acc = gen(l, m, n, acc)
      acc = acc + [m]
      acc = gen(m, r, n, acc)
    end
    return acc
  end
  def totient(n)
    tot = n
    nn = n
    p = 2
    while p * p <= nn
      if nn % p == 0
        while nn % p == 0
          nn = nn / p
        end
        tot = tot - tot / p
      end
      if p == 2
        p = 1
      end
      p = _add(p, 2)
    end
    if nn > 1
      tot = tot - tot / nn
    end
    return tot
  end
  def main()
    n = 1
    while n <= 11
      l = Frac.new(num: 0, den: 1)
      r = Frac.new(num: 1, den: 1)
      seq = gen(l, r, n, [])
      line = _add(_add(_add("F(", (n).to_s), "): "), fracStr(l))
      seq.each do |f|
        line = _add(_add(line, " "), fracStr(f))
      end
      line = _add(_add(line, " "), fracStr(r))
      puts(line)
      n = _add(n, 1)
    end
    sum = 1
    i = 1
    next_ = 100
    while i <= 1000
      sum = _add(sum, totient(i))
      if i == next_
        puts(_add(_add(_add("|F(", (i).to_s), ")|: "), (sum).to_s))
        next_ = _add(next_, 100)
      end
      i = _add(i, 1)
    end
  end
  Frac = Struct.new(:num, :den, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
