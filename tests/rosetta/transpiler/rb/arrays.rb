# Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:40 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def listStr(xs)
    s = "["
    i = 0
    while i < xs.length
      s = _add(s, (xs[i]).to_s)
      if _add(i, 1) < xs.length
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  $a = [0, 0, 0, 0, 0]
  puts(_add("len(a) = ", ($a.length).to_s))
  puts(_add("a = ", listStr($a)))
  $a[0] = 3
  puts(_add("a = ", listStr($a)))
  puts(_add("a[0] = ", ($a[0]).to_s))
  $s = $a[0...4]
  $cap_s = 5
  puts(_add("s = ", listStr($s)))
  puts(_add(_add(_add("len(s) = ", ($s.length).to_s), "  cap(s) = "), ($cap_s).to_s))
  $s = $a[0...5]
  puts(_add("s = ", listStr($s)))
  $a[0] = 22
  $s[0] = 22
  puts(_add("a = ", listStr($a)))
  puts(_add("s = ", listStr($s)))
  $s = $s + [4]
  $s = $s + [5]
  $s = $s + [6]
  $cap_s = 10
  puts(_add("s = ", listStr($s)))
  puts(_add(_add(_add("len(s) = ", ($s.length).to_s), "  cap(s) = "), ($cap_s).to_s))
  $a[4] = -1
  puts(_add("a = ", listStr($a)))
  puts(_add("s = ", listStr($s)))
  $s = []
  (0...8).each do |i|
    $s = $s + [0]
  end
  $cap_s = 8
  puts(_add("s = ", listStr($s)))
  puts(_add(_add(_add("len(s) = ", ($s.length).to_s), "  cap(s) = "), ($cap_s).to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
