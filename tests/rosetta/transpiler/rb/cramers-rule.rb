# Generated by Mochi transpiler v0.10.50 on 2025-07-31 01:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def det(m)
    n = m.length
    if n == 1
      return m[0][0]
    end
    total = 0.0
    sign = 1.0
    c = 0
    while c < n
      sub = []
      r = 1
      while r < n
        row = []
        cc = 0
        while cc < n
          if cc != c
            row = row + [m[r][cc]]
          end
          cc = _add(cc, 1)
        end
        sub = sub + [row]
        r = _add(r, 1)
      end
      total = _add(total, sign * m[0][c] * det(sub))
      sign = sign * (-1.0)
      c = _add(c, 1)
    end
    return total
  end
  def replaceCol(m, col, v)
    res = []
    r = 0
    while r < m.length
      row = []
      c = 0
      while c < m[r].length
        if c == col
          row = row + [v[r]]
        else
          row = row + [m[r][c]]
        end
        c = _add(c, 1)
      end
      res = res + [row]
      r = _add(r, 1)
    end
    return res
  end
  $m = [[2.0, -1.0, 5.0, 1.0], [3.0, 2.0, 2.0, -6.0], [1.0, 3.0, 3.0, -1.0], [5.0, -2.0, -3.0, 3.0]]
  $v = [-3.0, -32.0, -47.0, 49.0]
  $d = det($m)
  $x = []
  $i = 0
  while $i < $v.length
    mc = replaceCol($m, $i, $v)
    $x = $x + [det(mc) / $d]
    $i = _add($i, 1)
  end
  $s = "["
  $j = 0
  while $j < $x.length
    $s = _add($s, ($x[$j]).to_s)
    if $j < $x.length - 1
      $s = _add($s, " ")
    end
    $j = _add($j, 1)
  end
  $s = _add($s, "]")
  puts($s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
