# Generated by Mochi transpiler v0.10.42 on 2025-07-27 16:09 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    g = x
    i = 0
    while i < 20
      g = (_add(g, x / g)) / 2.0
      i = _add(i, 1)
    end
    return g
  end
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def main()
    oldPhi = 1.0
    phi = 0.0
    iters = 0
    limit = 1e-05
    while true
      phi = _add(1.0, 1.0 / oldPhi)
      iters = _add(iters, 1)
      if abs(phi - oldPhi) <= limit
        break
      end
      oldPhi = phi
    end
    actual = (_add(1.0, sqrtApprox(5.0))) / 2.0
    puts(_add("Final value of phi : ", (phi).to_s))
    puts(_add("Number of iterations : ", (iters).to_s))
    puts(_add("Error (approx) : ", (phi - actual).to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
