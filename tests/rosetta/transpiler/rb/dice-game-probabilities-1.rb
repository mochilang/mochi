# Generated by Mochi transpiler v0.10.41 on 2025-07-27 09:09 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def powInt(base, exp)
    r = 1
    b = base
    e = exp
    while e > 0
      if e % 2 == 1
        r = r * b
      end
      b = b * b
      e = e / (2)
    end
    return r
  end
  def minInt(x, y)
    if x < y
      return x
    end
    return y
  end
  def throwDie(nSides, nDice, s, counts)
    if nDice == 0
      counts[s] = _add(counts[s], 1)
      return
    end
    i = 1
    while i <= nSides
      throwDie(nSides, nDice - 1, _add(s, i), counts)
      i = _add(i, 1)
    end
  end
  def beatingProbability(nSides1, nDice1, nSides2, nDice2)
    len1 = (_add(nSides1, 1)) * nDice1
    c1 = []
    i = 0
    while i < len1
      c1 = c1 + [0]
      i = _add(i, 1)
    end
    throwDie(nSides1, nDice1, 0, c1)
    len2 = (_add(nSides2, 1)) * nDice2
    c2 = []
    j = 0
    while j < len2
      c2 = c2 + [0]
      j = _add(j, 1)
    end
    throwDie(nSides2, nDice2, 0, c2)
    p12 = ((powInt(nSides1, nDice1))) * ((powInt(nSides2, nDice2)))
    tot = 0.0
    i = 0
    while i < len1
      j = 0
      m = minInt(i, len2)
      while j < m
        tot = _add(tot, (c1[i] * (c2[j])) / p12)
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return tot
  end
  puts((beatingProbability(4, 9, 6, 6)).to_s)
  puts((beatingProbability(10, 5, 7, 6)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
