# Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def capitalize(s)
    if s.length == 0
      return s
    end
    return _add(s[0...1].upcase(), s[1...s.length])
  end
  def say(n)
    t = ""
    if n < 0
      t = "negative "
      n = -n
    end
    if n < 20
      return _add(t, $small[n])
    else
      if n < 100
        t = $tens[n / 10]
        s = n % 10
        if s > 0
          t = _add(_add(t, "-"), $small[s])
        end
        return t
      else
        if n < 1000
          t = _add($small[n / 100], " hundred")
          s = n % 100
          if s > 0
            t = _add(_add(t, " "), say(s))
          end
          return t
        end
      end
    end
    sx = ""
    i = 0
    nn = n
    while nn > 0
      p = nn % 1000
      nn = nn / 1000
      if p > 0
        ix = _add(say(p), $illions[i])
        if sx != ""
          ix = _add(_add(ix, " "), sx)
        end
        sx = ix
      end
      i = _add(i, 1)
    end
    return _add(t, sx)
  end
  def fourIsMagic(n)
    s = say(n)
    s = capitalize(s)
    t = s
    while n != 4
      n = s.length
      s = say(n)
      t = _add(_add(_add(_add(t, " is "), s), ", "), s)
    end
    t = _add(t, " is magic.")
    return t
  end
  def main()
    nums = [0, 4, 6, 11, 13, 75, 100, 337, -164, 9223372036854775807]
    nums.each do |n|
      puts(fourIsMagic(n))
    end
  end
  $small = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
  $tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
  $illions = ["", " thousand", " million", " billion", " trillion", " quadrillion", " quintillion"]
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
