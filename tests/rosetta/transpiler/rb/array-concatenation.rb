# Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:40 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def concatInts(a, b)
    out = []
    a.each do |v|
      out = out + [v]
    end
    b.each do |v|
      out = out + [v]
    end
    return out
  end
  def concatAny(a, b)
    out = []
    a.each do |v|
      out = out + [v]
    end
    b.each do |v|
      out = out + [v]
    end
    return out
  end
  $a = [1, 2, 3]
  $b = [7, 12, 60]
  puts((concatInts($a, $b)).to_s)
  $i = [1, 2, 3]
  $j = ["Crosby", "Stills", "Nash", "Young"]
  puts((concatAny($i, $j)).to_s)
  $l = [1, 2, 3]
  $m = [7, 12, 60]
  puts((concatInts($l, $m)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
