# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def parseIntDigits(s)
    n = 0
    i = 0
    digits = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    while i < s.length
      ch = s[i..._add(i, 1)]
      if !(digits.include?(ch))
        return 0
      end
      n = _add(n * 10, digits[ch])
      i = _add(i, 1)
    end
    return n
  end
  def parseDC(s)
    neg = false
    if s.length > 0 && s[0...1] == "-"
      neg = true
      s = s[1...s.length]
    end
    dollars = 0
    cents = 0
    i = 0
    seenDot = false
    centDigits = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == "."
        seenDot = true
        i = _add(i, 1)
        next
      end
      d = parseIntDigits(ch)
      if seenDot
        if centDigits < 2
          cents = _add(cents * 10, d)
          centDigits = _add(centDigits, 1)
        end
      else
        dollars = _add(dollars * 10, d)
      end
      i = _add(i, 1)
    end
    if centDigits == 1
      cents = cents * 10
    end
    val = _add(dollars * 100, cents)
    if neg
      val = -val
    end
    return val
  end
  def parseRate(s)
    neg = false
    if s.length > 0 && s[0...1] == "-"
      neg = true
      s = s[1...s.length]
    end
    whole = 0
    frac = 0
    digits = 0
    seenDot = false
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == "."
        seenDot = true
        i = _add(i, 1)
        next
      end
      d = parseIntDigits(ch)
      if seenDot
        if digits < 4
          frac = _add(frac * 10, d)
          digits = _add(digits, 1)
        end
      else
        whole = _add(whole * 10, d)
      end
      i = _add(i, 1)
    end
    while digits < 4
      frac = frac * 10
      digits = _add(digits, 1)
    end
    val = _add(whole * 10000, frac)
    if neg
      val = -val
    end
    return val
  end
  def dcString(dc)
    d = dc / 100
    n = dc
    if n < 0
      n = -n
    end
    c = n % 100
    cstr = (c).to_s
    if cstr.length == 1
      cstr = _add("0", cstr)
    end
    return _add(_add((d).to_s, "."), cstr)
  end
  def extend(dc, n)
    return dc * n
  end
  def tax(total, rate)
    return (((_add(total * rate, 5000)) / 10000)).to_i
  end
  def padLeft(s, n)
    out = s
    while out.length < n
      out = _add(" ", out)
    end
    return out
  end
  def main()
    hp = parseDC("5.50")
    mp = parseDC("2.86")
    rate = parseRate("0.0765")
    totalBeforeTax = _add(extend(hp, 4000000000000000), extend(mp, 2))
    t = tax(totalBeforeTax, rate)
    total = _add(totalBeforeTax, t)
    puts(_add("Total before tax: ", padLeft(dcString(totalBeforeTax), 22)))
    puts(_add("             Tax: ", padLeft(dcString(t), 22)))
    puts(_add("           Total: ", padLeft(dcString(total), 22)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
