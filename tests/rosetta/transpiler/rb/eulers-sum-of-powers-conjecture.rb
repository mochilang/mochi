# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def eulerSum()
    pow5 = []
    i = 0
    while i < 250
      pow5 = pow5 + [i * i * i * i * i]
      i = _add(i, 1)
    end
    sums = {}
    x2 = 2
    while x2 < 250
      x3 = 1
      while x3 < x2
        s = _add(pow5[x2], pow5[x3])
        if !(sums.key?(s))
          sums[s] = [x2, x3]
        end
        x3 = _add(x3, 1)
      end
      x2 = _add(x2, 1)
    end
    x0 = 4
    while x0 < 250
      x1 = 3
      while x1 < x0
        y = _add(x0, 1)
        while y < 250
          rem = pow5[y] - pow5[x0] - pow5[x1]
          if sums.key?(rem)
            pair = sums[rem]
            a = pair[0]
            b = pair[1]
            if x1 > a && a > b
              return [x0, x1, a, b, y]
            end
          end
          y = _add(y, 1)
        end
        x1 = _add(x1, 1)
      end
      x0 = _add(x0, 1)
    end
    return [0, 0, 0, 0, 0]
  end
  def main()
    r = eulerSum()
    puts(_add(_add(_add(_add(_add(_add(_add(_add((r[0]).to_s, " "), (r[1]).to_s), " "), (r[2]).to_s), " "), (r[3]).to_s), " "), (r[4]).to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
