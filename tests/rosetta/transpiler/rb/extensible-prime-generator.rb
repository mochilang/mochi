# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def nextPrime(primes, start)
    n = start
    while true
      isP = true
      i = 0
      while i < primes.length
        p = primes[i]
        if p * p > n
          break
        end
        if n % p == 0
          isP = false
          break
        end
        i = _add(i, 1)
      end
      if isP
        return n
      end
      n = _add(n, 2)
    end
  end
  def main()
    primes = [2]
    cand = 3
    while primes.length < 10000
      cand = nextPrime(primes, cand)
      primes = primes + [cand]
      cand = _add(cand, 2)
    end
    line = "First twenty:"
    i = 0
    while i < 20
      line = _add(_add(line, " "), (primes[i]).to_s)
      i = _add(i, 1)
    end
    puts(line)
    idx = 0
    while primes[idx] <= 100
      idx = _add(idx, 1)
    end
    line = _add("Between 100 and 150: ", (primes[idx]).to_s)
    idx = _add(idx, 1)
    while primes[idx] < 150
      line = _add(_add(line, " "), (primes[idx]).to_s)
      idx = _add(idx, 1)
    end
    puts(line)
    while primes[idx] <= 7700
      idx = _add(idx, 1)
    end
    count = 0
    while primes[idx] < 8000
      count = _add(count, 1)
      idx = _add(idx, 1)
    end
    puts(_add("Number beween 7,700 and 8,000: ", (count).to_s))
    puts(_add("10,000th prime: ", (primes[9999]).to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
