# Generated by Mochi transpiler v0.10.40 on 2025-07-25 10:39 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def node(cl, le, aa, ri)
    return {"cl" => cl, "le" => le, "aa" => aa, "ri" => ri}
  end
  def treeString(t)
    if t == nil
      return "E"
    end
    m = t
    return _add(_add(_add(_add(_add(_add(_add(_add("T(", m["cl"]), ", "), treeString(m["le"])), ", "), (m["aa"]).to_s), ", "), treeString(m["ri"])), ")")
  end
  def balance(t)
    if t == nil
      return t
    end
    m = t
    if m["cl"] != "B"
      return t
    end
    le = m["le"]
    ri = m["ri"]
    if le != nil
      leMap = le
      if leMap["cl"] == "R"
        lele = leMap["le"]
        if lele != nil
          leleMap = lele
          if leleMap["cl"] == "R"
            return node("R", node("B", leleMap["le"], leleMap["aa"], leleMap["ri"]), leMap["aa"], node("B", leMap["ri"], m["aa"], ri))
          end
        end
        leri = leMap["ri"]
        if leri != nil
          leriMap = leri
          if leriMap["cl"] == "R"
            return node("R", node("B", leMap["le"], leMap["aa"], leriMap["le"]), leriMap["aa"], node("B", leriMap["ri"], m["aa"], ri))
          end
        end
      end
    end
    if ri != nil
      riMap = ri
      if riMap["cl"] == "R"
        rile = riMap["le"]
        if rile != nil
          rileMap = rile
          if rileMap["cl"] == "R"
            return node("R", node("B", m["le"], m["aa"], rileMap["le"]), rileMap["aa"], node("B", rileMap["ri"], riMap["aa"], riMap["ri"]))
          end
        end
        riri = riMap["ri"]
        if riri != nil
          ririMap = riri
          if ririMap["cl"] == "R"
            return node("R", node("B", m["le"], m["aa"], riMap["le"]), riMap["aa"], node("B", ririMap["le"], ririMap["aa"], ririMap["ri"]))
          end
        end
      end
    end
    return t
  end
  def ins(tr, x)
    if tr == nil
      return node("R", nil, x, nil)
    end
    if x < tr["aa"]
      return balance(node(tr["cl"], ins(tr["le"], x), tr["aa"], tr["ri"]))
    end
    if x > tr["aa"]
      return balance(node(tr["cl"], tr["le"], tr["aa"], ins(tr["ri"], x)))
    end
    return tr
  end
  def insert(tr, x)
    t = ins(tr, x)
    if t == nil
      return nil
    end
    m = t
    return node("B", m["le"], m["aa"], m["ri"])
  end
  $tr = nil
  $i = 1
  while $i <= 16
    $tr = insert($tr, $i)
    $i = _add($i, 1)
  end
  puts(treeString($tr))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
