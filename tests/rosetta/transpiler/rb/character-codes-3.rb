# Generated by Mochi transpiler v0.10.42 on 2025-07-28 01:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def ord(ch)
    if ch == "a"
      return 97
    end
    if ch == "π"
      return 960
    end
    if ch == "A"
      return 65
    end
    return 0
  end
  def chr(n)
    if n == 97
      return "a"
    end
    if n == 960
      return "π"
    end
    if n == 65
      return "A"
    end
    return "?"
  end
  b = ord("a")
  r = ord("π")
  s = "aπ"
  puts(_add(_add(_add(_add((b).to_s, " "), (r).to_s), " "), s))
  puts(_add(_add(_add(_add("string cast to []rune: [", (b).to_s), " "), (r).to_s), "]"))
  puts(_add(_add(_add("    string range loop: ", (b).to_s), " "), (r).to_s))
  puts("         string bytes: 0x61 0xcf 0x80")
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
