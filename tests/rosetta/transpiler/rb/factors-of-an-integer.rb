# Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:27 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def printFactors(n)
    if n < 1
      puts(_add(_add("\nFactors of ", (n).to_s), " not computed"))
      return
    end
    puts(_add(_add("\nFactors of ", (n).to_s), ": "))
    fs = [1]
    apf = ->(p, e) {
      orig = fs.length
      pp = p
      i = 0
      while i < e
        j = 0
        while j < orig
          fs = fs + [fs[j] * pp]
          j = _add(j, 1)
        end
        i = _add(i, 1)
        pp = pp * p
      end
    }
    e = 0
    m = n
    while m % 2 == 0
      m = ((m / 2)).to_i
      e = _add(e, 1)
    end
    apf.call(2, e)
    d = 3
    while m > 1
      if d * d > m
        d = m
      end
      e = 0
      while m % d == 0
        m = ((m / d)).to_i
        e = _add(e, 1)
      end
      if e > 0
        apf.call(d, e)
      end
      d = _add(d, 2)
    end
    puts((fs).to_s)
    puts(_add("Number of factors = ", (fs.length).to_s))
  end
  printFactors(-1)
  printFactors(0)
  printFactors(1)
  printFactors(2)
  printFactors(3)
  printFactors(53)
  printFactors(45)
  printFactors(64)
  printFactors(600851475143)
  printFactors(999999999999999989)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
