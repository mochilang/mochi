# Generated by Mochi transpiler v0.10.39 on 2025-07-24 13:03 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

def square_to_maps(square)
  emap = {}
  dmap = {}
  x = 0
  while x < square.length
    row = square[x]
    y = 0
    while y < row.length
      ch = row[y]
      emap[ch] = [x, y]
      dmap[_add(_add((x).to_s, ","), (y).to_s)] = ch
      y = _add(y, 1)
    end
    x = _add(x, 1)
  end
  return {"e" => emap, "d" => dmap}
end
def remove_space(text, emap)
  s = text.upcase()
  out = ""
  i = 0
  while i < s.length
    ch = s[i..._add(i, 1)]
    if ch != " " && emap.key?(ch)
      out = _add(out, ch)
    end
    i = _add(i, 1)
  end
  return out
end
def encrypt(text, emap, dmap)
  text = remove_space(text, emap)
  row0 = []
  row1 = []
  i = 0
  while i < text.length
    ch = text[i..._add(i, 1)]
    xy = emap[ch]
    row0 = row0 + [xy[0]]
    row1 = row1 + [xy[1]]
    i = _add(i, 1)
  end
  row1.each do |v|
    row0 = row0 + [v]
  end
  res = ""
  j = 0
  while j < row0.length
    key = _add(_add((row0[j]).to_s, ","), (row0[_add(j, 1)]).to_s)
    res = _add(res, dmap[key])
    j = _add(j, 2)
  end
  return res
end
def decrypt(text, emap, dmap)
  text = remove_space(text, emap)
  coords = []
  i = 0
  while i < text.length
    ch = text[i..._add(i, 1)]
    xy = emap[ch]
    coords = coords + [xy[0]]
    coords = coords + [xy[1]]
    i = _add(i, 1)
  end
  half = coords.length / 2
  k1 = []
  k2 = []
  idx = 0
  while idx < half
    k1 = k1 + [coords[idx]]
    idx = _add(idx, 1)
  end
  while idx < coords.length
    k2 = k2 + [coords[idx]]
    idx = _add(idx, 1)
  end
  res = ""
  j = 0
  while j < half
    key = _add(_add((k1[j]).to_s, ","), (k2[j]).to_s)
    res = _add(res, dmap[key])
    j = _add(j, 1)
  end
  return res
end
def main()
  squareRosetta = [["A", "B", "C", "D", "E"], ["F", "G", "H", "I", "K"], ["L", "M", "N", "O", "P"], ["Q", "R", "S", "T", "U"], ["V", "W", "X", "Y", "Z"], ["J", "1", "2", "3", "4"]]
  squareWikipedia = [["B", "G", "W", "K", "Z"], ["Q", "P", "N", "D", "S"], ["I", "O", "A", "X", "E"], ["F", "C", "L", "U", "M"], ["T", "H", "Y", "V", "R"], ["J", "1", "2", "3", "4"]]
  textRosetta = "0ATTACKATDAWN"
  textWikipedia = "FLEEATONCE"
  textTest = "The invasion will start on the first of January"
  maps = square_to_maps(squareRosetta)
  emap = maps["e"]
  dmap = maps["d"]
  puts("from Rosettacode")
  puts(_add("original:\t ", textRosetta))
  s = encrypt(textRosetta, emap, dmap)
  puts(_add("codiert:\t ", s))
  s = decrypt(s, emap, dmap)
  puts(_add("and back:\t ", s))
  maps = square_to_maps(squareWikipedia)
  emap = maps["e"]
  dmap = maps["d"]
  puts("from Wikipedia")
  puts(_add("original:\t ", textWikipedia))
  s = encrypt(textWikipedia, emap, dmap)
  puts(_add("codiert:\t ", s))
  s = decrypt(s, emap, dmap)
  puts(_add("and back:\t ", s))
  maps = square_to_maps(squareWikipedia)
  emap = maps["e"]
  dmap = maps["d"]
  puts("from Rosettacode long part")
  puts(_add("original:\t ", textTest))
  s = encrypt(textTest, emap, dmap)
  puts(_add("codiert:\t ", s))
  s = decrypt(s, emap, dmap)
  puts(_add("and back:\t ", s))
end
main()
