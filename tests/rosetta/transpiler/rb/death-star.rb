# Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:50 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  V3 = Struct.new(:x, :y, :z, keyword_init: true)
  Sphere = Struct.new(:cx, :cy, :cz, :r, keyword_init: true)
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def powf(base, exp)
    result = 1.0
    i = 0
    while i < exp
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def normalize(v)
    len = sqrtApprox(_add(_add(v.x * v.x, v.y * v.y), v.z * v.z))
    return V3.new(x: v.x / len, y: v.y / len, z: v.z / len)
  end
  def dot(a, b)
    d = _add(_add(a.x * b.x, a.y * b.y), a.z * b.z)
    if d < 0.0
      return -d
    end
    return 0.0
  end
  def hitSphere(s, x, y)
    dx = x - s.cx
    dy = y - s.cy
    zsq = s.r * s.r - (_add(dx * dx, dy * dy))
    if zsq < 0.0
      return {"hit" => false}
    end
    z = sqrtApprox(zsq)
    return {"hit" => true, "z1" => s.cz - z, "z2" => _add(s.cz, z)}
  end
  def main()
    shades = ".:!*oe&#%@"
    light = normalize(V3.new(x: -50.0, y: 30.0, z: 50.0))
    pos = Sphere.new(cx: 20.0, cy: 20.0, cz: 0.0, r: 20.0)
    neg = Sphere.new(cx: 1.0, cy: 1.0, cz: -6.0, r: 20.0)
    yi = 0
    while yi <= 40
      y = _add(((yi).to_f), 0.5)
      line = ""
      xi = -20
      while xi <= 60
        x = _add(_add((((xi).to_f) - pos.cx) / 2.0, 0.5), pos.cx)
        hb = hitSphere(pos, x, y)
        if !hb["hit"]
          line = _add(line, " ")
          xi = _add(xi, 1)
          next
        end
        zb1 = hb["z1"]
        zb2 = hb["z2"]
        hs = hitSphere(neg, x, y)
        hitRes = 1
        if !hs["hit"]
          hitRes = 1
        else
          if hs["z1"] > zb1
            hitRes = 1
          else
            if hs["z2"] > zb2
              hitRes = 0
            else
              if hs["z2"] > zb1
                hitRes = 2
              else
                hitRes = 1
              end
            end
          end
        end
        if hitRes == 0
          line = _add(line, " ")
          xi = _add(xi, 1)
          next
        end
        vec = {}
        if hitRes == 1
          vec = V3.new(x: x - pos.cx, y: y - pos.cy, z: zb1 - pos.cz)
        else
          vec = V3.new(x: neg.cx - x, y: neg.cy - y, z: neg.cz - hs["z2"])
        end
        vec = normalize(vec)
        b = _add(powf(dot(light, vec), 2), 0.5)
        intensity = (((1.0 - b) * ((shades.length).to_f))).to_i
        if intensity < 0
          intensity = 0
        end
        if intensity >= shades.length
          intensity = shades.length - 1
        end
        line = _add(line, shades[intensity..._add(intensity, 1)])
        xi = _add(xi, 1)
      end
      puts(line)
      yi = _add(yi, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
