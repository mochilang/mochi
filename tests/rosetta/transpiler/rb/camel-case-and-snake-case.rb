# Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:52 +0700

def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

def trimSpace(s)
  start = 0
  while start < s.length && s[start..._add(start, 1)] == " "
    start = _add(start, 1)
  end
  end_ = s.length
  while end_ > start && s[end_ - 1...end_] == " "
    end_ = end_ - 1
  end
  return s[start...end_]
end
def isUpper(ch)
  return ch >= "A" && ch <= "Z"
end
def padLeft(s, w)
  res = ""
  n = w - s.length
  while n > 0
    res = _add(res, " ")
    n = n - 1
  end
  return _add(res, s)
end
def snakeToCamel(s)
  s = trimSpace(s)
  out = ""
  up = false
  i = 0
  while i < s.length
    ch = s[i..._add(i, 1)]
    if ch == "_" || ch == "-" || ch == " " || ch == "."
      up = true
      i = _add(i, 1)
      next
    end
    if i == 0
      out = _add(out, ch.downcase())
      up = false
      i = _add(i, 1)
      next
    end
    if up
      out = _add(out, ch.upcase())
      up = false
    else
      out = _add(out, ch)
    end
    i = _add(i, 1)
  end
  return out
end
def camelToSnake(s)
  s = trimSpace(s)
  out = ""
  prevUnd = false
  i = 0
  while i < s.length
    ch = s[i..._add(i, 1)]
    if ch == " " || ch == "-" || ch == "."
      if !prevUnd && out.length > 0
        out = _add(out, "_")
        prevUnd = true
      end
      i = _add(i, 1)
      next
    end
    if ch == "_"
      if !prevUnd && out.length > 0
        out = _add(out, "_")
        prevUnd = true
      end
      i = _add(i, 1)
      next
    end
    if isUpper(ch)
      if i > 0 && (!prevUnd)
        out = _add(out, "_")
      end
      out = _add(out, ch.downcase())
      prevUnd = false
    else
      out = _add(out, ch.downcase())
      prevUnd = false
    end
    i = _add(i, 1)
  end
  start = 0
  while start < out.length && out[start..._add(start, 1)] == "_"
    start = _add(start, 1)
  end
  end_ = out.length
  while end_ > start && out[end_ - 1...end_] == "_"
    end_ = end_ - 1
  end
  out = out[start...end_]
  res = ""
  j = 0
  lastUnd = false
  while j < out.length
    c = out[j..._add(j, 1)]
    if c == "_"
      if !lastUnd
        res = _add(res, c)
      end
      lastUnd = true
    else
      res = _add(res, c)
      lastUnd = false
    end
    j = _add(j, 1)
  end
  return res
end
def main()
  samples = ["snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "]
  puts("=== To snake_case ===")
  samples.each do |s|
    puts(_add(_add(padLeft(s, 34), " => "), camelToSnake(s)))
  end
  puts("")
  puts("=== To camelCase ===")
  samples.each do |s|
    puts(_add(_add(padLeft(s, 34), " => "), snakeToCamel(s)))
  end
end
main()
