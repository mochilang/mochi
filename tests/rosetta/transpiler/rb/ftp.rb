# Generated by Mochi transpiler v0.10.54 on 2025-08-02 15:25 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def connect(hostport)
    puts(_add("Connected to ", hostport))
    return FTPConn.new(dir: "/")
  end
  def login(conn, user, pass)
    puts(_add("Logged in as ", user))
  end
  def changeDir(conn, dir)
    conn["dir"] = dir
  end
  def list(conn)
    names = $serverNames[conn.dir]
    dataDir = $serverData[conn.dir]
    out = []
    names.each do |name|
      content = dataDir[name]
      out = out + [FileInfo.new(name: name, size: content.length, kind: "file")]
    end
    return out
  end
  def retrieve(conn, name)
    return $serverData[conn.dir][name]
  end
  def main()
    conn = connect("localhost:21")
    login(conn, "anonymous", "anonymous")
    changeDir(conn, "pub")
    puts(conn.dir)
    files = list(conn)
    files.each do |f|
      puts(_add(_add(f.name, " "), (f.size).to_s))
    end
    data = retrieve(conn, "somefile.bin")
    puts(_add(_add("Wrote ", (data.length).to_s), " bytes to somefile.bin"))
  end
  FileInfo = Struct.new(:name, :size, :kind, keyword_init: true)
  FTPConn = Struct.new(:dir, keyword_init: true)
  $serverData = {"pub" => {"somefile.bin" => "This is a file from the FTP server.", "readme.txt" => "Hello from ftp."}}
  $serverNames = {"pub" => ["somefile.bin", "readme.txt"]}
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
