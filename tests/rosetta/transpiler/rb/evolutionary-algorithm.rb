# Generated by Mochi transpiler v0.10.42 on 2025-07-27 15:12 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  $target = "METHINKS IT IS LIKE A WEASEL"
  $chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ "
  $seed = 1
  def randInt(s, n)
    next_ = (_add(s * 1664525, 1013904223)) % 2147483647
    return [next_, next_ % n]
  end
  def randChar()
    r = randInt($seed, $chars.length)
    $seed = r[0]
    idx = (r[1]).to_i
    return $chars[idx..._add(idx, 1)]
  end
  def randomString(n)
    s = ""
    i = 0
    while i < n
      s = _add(s, randChar())
      i = _add(i, 1)
    end
    return s
  end
  def fitness(s)
    h = 0
    i = 0
    while i < $target.length
      if s[i..._add(i, 1)] != $target[i..._add(i, 1)]
        h = _add(h, 1)
      end
      i = _add(i, 1)
    end
    return h
  end
  def mutate(p)
    m = ""
    i = 0
    while i < p.length
      r = randInt($seed, 20)
      $seed = r[0]
      if r[1] == 0
        m = _add(m, randChar())
      else
        m = _add(m, p[i..._add(i, 1)])
      end
      i = _add(i, 1)
    end
    return m
  end
  def main()
    parent = randomString($target.length)
    puts(parent)
    best = fitness(parent)
    done = false
    while !done
      i = 0
      while i < 20
        child = mutate(parent)
        f = fitness(child)
        if f < best
          best = f
          parent = child
          puts(parent)
          if best == 0
            done = true
            break
          end
        end
        i = _add(i, 1)
      end
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
