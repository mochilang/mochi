# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def else1(i, f)
    if i.cond1 && (i.cond2 == false)
      f.call()
    end
    return i
  end
  def else2(i, f)
    if i.cond2 && (i.cond1 == false)
      f.call()
    end
    return i
  end
  def else0(i, f)
    if (i.cond1 == false) && (i.cond2 == false)
      f.call()
    end
    return i
  end
  def if2(cond1, cond2, f)
    if cond1 && cond2
      f.call()
    end
    return If2.new(cond1: cond1, cond2: cond2)
  end
  If2 = Struct.new(:cond1, :cond2, keyword_init: true)
  $a = 0
  $b = 1
  $t = if2($a == 1, $b == 3, ->() {
    puts("a = 1 and b = 3")
  })
  $t = else1($t, ->() {
    puts("a = 1 and b <> 3")
  })
  $t = else2($t, ->() {
    puts("a <> 1 and b = 3")
  })
  else0($t, ->() {
    puts("a <> 1 and b <> 3")
  })
  $a = 1
  $b = 0
  $t = if2($a == 1, $b == 3, ->() {
    puts("a = 1 and b = 3")
  })
  $t = else0($t, ->() {
    puts("a <> 1 and b <> 3")
  })
  else1($t, ->() {
    puts("a = 1 and b <> 3")
  })
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
