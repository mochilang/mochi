# Generated by Mochi transpiler v0.10.50 on 2025-07-31 01:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def primeFactors(n)
    factors = []
    x = n
    while x % 2 == 0
      factors = factors + [2]
      x = ((x / 2)).to_i
    end
    p = 3
    while p * p <= x
      while x % p == 0
        factors = factors + [p]
        x = ((x / p)).to_i
      end
      p = _add(p, 2)
    end
    if x > 1
      factors = factors + [x]
    end
    return factors
  end
  def commatize(n)
    s = (n).to_s
    out = ""
    i = s.length - 1
    c = 0
    while i >= 0
      out = _add(s[i..._add(i, 1)], out)
      c = _add(c, 1)
      if c % 3 == 0 && i > 0
        out = _add(",", out)
      end
      i = i - 1
    end
    return out
  end
  def indexOf(s, sub)
    i = 0
    while _add(i, sub.length) <= s.length
      if s[i..._add(i, sub.length)] == sub
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def pad10(s)
    str = s
    while str.length < 10
      str = _add(" ", str)
    end
    return str
  end
  def trimRightStr(s)
    end_ = s.length
    while end_ > 0 && s[end_ - 1...end_] == " "
      end_ = end_ - 1
    end
    return s[0...end_]
  end
  def main()
    res = []
    count = 0
    k = 11 * 11
    while count < 20
      if k % 3 == 0 || k % 5 == 0 || k % 7 == 0
        k = _add(k, 2)
        next
      end
      factors = primeFactors(k)
      if factors.length > 1
        s = (k).to_s
        includesAll = true
        prev = -1
        factors.each do |f|
          if f == prev
            next
          end
          fs = (f).to_s
          if _indexOf(s, fs) == (-1)
            includesAll = false
            break
          end
          prev = f
        end
        if includesAll
          res = res + [k]
          count = _add(count, 1)
        end
      end
      k = _add(k, 2)
    end
    line = ""
    res[0...10].each do |e|
      line = _add(_add(line, pad10(commatize(e))), " ")
    end
    puts(trimRightStr(line))
    line = ""
    res[10...20].each do |e|
      line = _add(_add(line, pad10(commatize(e))), " ")
    end
    puts(trimRightStr(line))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
