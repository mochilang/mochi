# Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:36 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  $w = 400
  $h = 300
  $n = 15000
  $frost = 255
  $grid = []
  $y = 0
  while $y < $h
    $row = []
    $x = 0
    while $x < $w
      $row = $row + [0]
      $x = _add($x, 1)
    end
    $grid = $grid + [$row]
    $y = _add($y, 1)
  end
  $grid[$h / 3][$w / 3] = $frost
  def inBounds(x, y)
    return x >= 0 && x < $w && y >= 0 && y < $h
  end
  def hasNeighbor(x, y)
    dy = -1
    while dy <= 1
      dx = -1
      while dx <= 1
        if !(dx == 0 && dy == 0)
          nx = _add(x, dx)
          ny = _add(y, dy)
          if inBounds(nx, ny) && $grid[ny][nx] == $frost
            return true
          end
        end
        dx = _add(dx, 1)
      end
      dy = _add(dy, 1)
    end
    return false
  end
  $a = 0
  while $a < $n
    $px = _now() % $w
    $py = _now() % $h
    if $grid[$py][$px] == $frost
      $lost = false
      while true
        $px = _add($px, (_now() % 3)) - 1
        $py = _add($py, (_now() % 3)) - 1
        if !inBounds($px, $py)
          $lost = true
          break
        end
        if $grid[$py][$px] != $frost
          break
        end
      end
      if $lost
        next
      end
    else
      $lost = false
      while !hasNeighbor($px, $py)
        $px = _add($px, (_now() % 3)) - 1
        $py = _add($py, (_now() % 3)) - 1
        if !inBounds($px, $py)
          $lost = true
          break
        end
      end
      if $lost
        next
      end
    end
    $grid[$py][$px] = $frost
    $a = _add($a, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
