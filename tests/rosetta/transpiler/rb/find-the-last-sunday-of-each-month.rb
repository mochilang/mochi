# Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def leapYear(y)
    return (y % 4 == 0 && y % 100 != 0) || (y % 400 == 0)
  end
  def monthDays(y, m)
    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if m == 2 && leapYear(y)
      return 29
    end
    return days[m]
  end
  def zeller(y, m, d)
    mm = m
    yy = y
    if mm < 3
      mm = _add(mm, 12)
      yy = yy - 1
    end
    _K = yy % 100
    _J = yy / 100
    h = (_add(_add(_add(_add(_add(d, (13 * (_add(mm, 1))) / 5), _K), _K / 4), _J / 4), 5 * _J)) % 7
    return (_add(h, 6)) % 7
  end
  def lastSunday(y, m)
    day = monthDays(y, m)
    while day > 0 && zeller(y, m, day) != 0
      day = day - 1
    end
    return day
  end
  def monthName(m)
    names = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    return names[m]
  end
  def main()
    year = (_input()).to_i
    puts(_add("Last Sundays of each month of ", (year).to_s))
    puts("==================================")
    m = 1
    while m <= 12
      day = lastSunday(year, m)
      puts(_add(_add(monthName(m), ": "), (day).to_s))
      m = _add(m, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
