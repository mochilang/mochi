# Generated by Mochi transpiler v0.10.42 on 2025-07-27 16:38 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def parseIntStr(str)
    i = 0
    neg = false
    if str.length > 0 && str[0...1] == "-"
      neg = true
      i = 1
    end
    n = 0
    digits = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    while i < str.length
      n = _add(n * 10, digits[str[i..._add(i, 1)]])
      i = _add(i, 1)
    end
    if neg
      n = -n
    end
    return n
  end
  def main()
    total = 0
    computer = _now() % 2 == 0
    puts("Enter q to quit at any time\n")
    if computer
      puts("The computer will choose first")
    else
      puts("You will choose first")
    end
    puts("\n\nRunning total is now 0\n\n")
    round = 1
    done = false
    while !done
      puts(_add(_add("ROUND ", (round).to_s), ":\n\n"))
      i = 0
      while i < 2 && (!done)
        if computer
          choice = 0
          if total < 18
            choice = _add(_now() % 3, 1)
          else
            choice = 21 - total
          end
          total = _add(total, choice)
          puts(_add("The computer chooses ", (choice).to_s))
          puts(_add("Running total is now ", (total).to_s))
          if total == 21
            puts("\nSo, commiserations, the computer has won!")
            done = true
          end
        else
          while true
            puts("Your choice 1 to 3 : ")
            line = _input()
            if line == "q" || line == "Q"
              puts("OK, quitting the game")
              done = true
              break
            end
            num = parseIntStr(line)
            if num < 1 || num > 3
              if _add(total, num) > 21
                puts("Too big, try again")
              else
                puts("Out of range, try again")
              end
              next
            end
            if _add(total, num) > 21
              puts("Too big, try again")
              next
            end
            total = _add(total, num)
            puts(_add("Running total is now ", (total).to_s))
            break
          end
          if total == 21
            puts("\nSo, congratulations, you've won!")
            done = true
          end
        end
        puts("\n")
        computer = !computer
        i = _add(i, 1)
      end
      round = _add(round, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
