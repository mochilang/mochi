# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def dbRec(k, n, t, p, a, seq)
    if t > n
      if n % p == 0
        j = 1
        while j <= p
          seq = (seq << a[j])
          j = _add(j, 1)
        end
      end
    else
      a[t] = a[t - p]
      seq = dbRec(k, n, _add(t, 1), p, a, seq)
      j = _add(a[t - p], 1)
      while j < k
        a[t] = j
        seq = dbRec(k, n, _add(t, 1), t, a, seq)
        j = _add(j, 1)
      end
    end
    return seq
  end
  def deBruijn(k, n)
    digits = "0123456789"
    alphabet = digits
    if k < 10
      alphabet = digits[0...k]
    end
    a = []
    i = 0
    while i < k * n
      a = (a << 0)
      i = _add(i, 1)
    end
    seq = []
    seq = dbRec(k, n, 1, 1, a, seq)
    b = ""
    idx = 0
    while idx < seq.length
      b = _add(b, alphabet[seq[idx]])
      idx = _add(idx, 1)
    end
    b = _add(b, b[0...n - 1])
    return b
  end
  def allDigits(s)
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch < "0" || ch > "9"
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def parseIntStr(str)
    n = 0
    i = 0
    while i < str.length
      n = _add(n * 10, ((str[i..._add(i, 1)]).to_i))
      i = _add(i, 1)
    end
    return n
  end
  def validate(db)
    le = db.length
    found = []
    i = 0
    while i < 10000
      found = (found << 0)
      i = _add(i, 1)
    end
    j = 0
    while j < le - 3
      s = db[j..._add(j, 4)]
      if allDigits(s)
        n = parseIntStr(s)
        found[n] = _add(found[n], 1)
      end
      j = _add(j, 1)
    end
    errs = []
    k = 0
    while k < 10000
      if found[k] == 0
        errs = (errs << _add(_add("    PIN number ", padLeft(k, 4)), " missing"))
      else
        if found[k] > 1
          errs = (errs << _add(_add(_add(_add("    PIN number ", padLeft(k, 4)), " occurs "), (found[k]).to_s), " times"))
        end
      end
      k = _add(k, 1)
    end
    lerr = errs.length
    if lerr == 0
      puts("  No errors found")
    else
      pl = "s"
      if lerr == 1
        pl = ""
      end
      puts(_add(_add(_add(_add("  ", (lerr).to_s), " error"), pl), " found:"))
      msg = joinStr(errs, "\n")
      puts(msg)
    end
  end
  def padLeft(n, width)
    s = (n).to_s
    while s.length < width
      s = _add("0", s)
    end
    return s
  end
  def joinStr(xs, sep)
    res = ""
    i = 0
    while i < xs.length
      if i > 0
        res = _add(res, sep)
      end
      res = _add(res, xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def reverse(s)
    out = ""
    i = s.length - 1
    while i >= 0
      out = _add(out, s[i..._add(i, 1)])
      i = i - 1
    end
    return out
  end
  def main()
    db = deBruijn(10, 4)
    le = db.length
    puts(_add("The length of the de Bruijn sequence is ", (le).to_s))
    puts("\nThe first 130 digits of the de Bruijn sequence are:")
    puts(db[0...130])
    puts("\nThe last 130 digits of the de Bruijn sequence are:")
    puts(db[le - 130...])
    puts("\nValidating the de Bruijn sequence:")
    validate(db)
    puts("\nValidating the reversed de Bruijn sequence:")
    dbr = reverse(db)
    validate(dbr)
    db = _add(_add(db[0...4443], "."), db[4444...db.length])
    puts("\nValidating the overlaid de Bruijn sequence:")
    validate(db)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
