# Generated by Mochi transpiler v0.10.54 on 2025-08-02 15:25 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def xor(a, b)
    res = 0
    bit = 1
    x = a
    y = b
    while x > 0 || y > 0
      if ((_add(x % 2, y % 2)) % 2 == 1)
        res = _add(res, bit)
      end
      x = x / 2
      y = y / 2
      bit = bit * 2
    end
    return res
  end
  def enc(b)
    return xor(b, b / 2)
  end
  def dec(g)
    b = 0
    x = g
    while x > 0
      b = xor(b, x)
      x = x / 2
    end
    return b
  end
  def binary(n)
    if n == 0
      return "0"
    end
    s = ""
    x = n
    while x > 0
      if x % 2 == 1
        s = _add("1", s)
      else
        s = _add("0", s)
      end
      x = x / 2
    end
    return s
  end
  def pad5(s)
    p = s
    while p.length < 5
      p = _add("0", p)
    end
    return p
  end
  def main()
    puts("decimal  binary   gray    decoded")
    b = 0
    while b < 32
      g = enc(b)
      d = dec(g)
      puts(_add(_add(_add(_add(_add(_add(_add("  ", pad5(binary(b))), "   "), pad5(binary(g))), "   "), pad5(binary(d))), "  "), (d).to_s))
      b = _add(b, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
