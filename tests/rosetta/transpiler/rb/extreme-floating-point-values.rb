# Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:15 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def makeInf()
    x = 1.0
    i = 0
    while i < 400
      x = x * 10.0
      i = _add(i, 1)
    end
    return x
  end
  def makeMax()
    x = 1.0
    i = 0
    while i < 308
      x = x * 10.0
      i = _add(i, 1)
    end
    return x
  end
  def isNaN(x)
    return x != x
  end
  def validateNaN(n, op)
    if isNaN(n)
      puts(_add(op, " -> NaN"))
    else
      puts((["!!! Expected NaN from", op, " Found", n]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
    end
  end
  def validateZero(n, op)
    if n == 0
      puts(_add(op, " -> 0"))
    else
      puts((["!!! Expected 0 from", op, " Found", n]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
    end
  end
  def validateGT(a, b, op)
    if a > b
      puts(op)
    else
      puts((["!!! Expected", op, " Found not true."]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
    end
  end
  def validateNE(a, b, op)
    if a == b
      puts((["!!! Expected", op, " Found not true."]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
    else
      puts(op)
    end
  end
  def validateEQ(a, b, op)
    if a == b
      puts(op)
    else
      puts((["!!! Expected", op, " Found not true."]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
    end
  end
  def main()
    negZero = -0.0
    posInf = makeInf()
    negInf = -posInf
    nan = posInf / posInf
    maxVal = makeMax()
    puts(([negZero, posInf, negInf, nan]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
    puts(([negZero, posInf, negInf, nan]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
    puts("")
    validateNaN(_add(negInf, posInf), "-Inf + Inf")
    validateNaN(0.0 * posInf, "0 * Inf")
    validateNaN(posInf / posInf, "Inf / Inf")
    validateNaN(posInf % 1.0, "Inf % 1")
    validateNaN(_add(1.0, nan), "1 + NaN")
    validateZero(1.0 / posInf, "1 / Inf")
    validateGT(posInf, maxVal, "Inf > max value")
    validateGT(-maxVal, negInf, "-Inf < max neg value")
    validateNE(nan, nan, "NaN != NaN")
    validateEQ(negZero, 0.0, "-0 == 0")
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
