# Generated by Mochi transpiler v0.10.50 on 2025-07-30 16:46 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def main()
    _INF = 1000000000
    n = 4
    dist = []
    next_ = []
    i = 0
    while i < n
      row = []
      nrow = []
      j = 0
      while j < n
        if i == j
          row = row + [0]
        else
          row = row + [_INF]
        end
        nrow = nrow + [0 - 1]
        j = _add(j, 1)
      end
      dist = dist + [row]
      next_ = next_ + [nrow]
      i = _add(i, 1)
    end
    dist[0][2] = -2
    next_[0][2] = 2
    dist[2][3] = 2
    next_[2][3] = 3
    dist[3][1] = -1
    next_[3][1] = 1
    dist[1][0] = 4
    next_[1][0] = 0
    dist[1][2] = 3
    next_[1][2] = 2
    k = 0
    while k < n
      i = 0
      while i < n
        j = 0
        while j < n
          if dist[i][k] < _INF && dist[k][j] < _INF
            alt = _add(dist[i][k], dist[k][j])
            if alt < dist[i][j]
              dist[i][j] = alt
              next_[i][j] = next_[i][k]
            end
          end
          j = _add(j, 1)
        end
        i = _add(i, 1)
      end
      k = _add(k, 1)
    end
    path = ->(u, v) {
      ui = u - 1
      vi = v - 1
      if next_[ui][vi] == 0 - 1
        return []
      end
      p = [u]
      cur = ui
      while cur != vi
        cur = next_[cur][vi]
        p = p + [_add(cur, 1)]
      end
      return p
    }
    pathStr = ->(p) {
      s = ""
      first = true
      idx = 0
      while idx < p.length
        x = p[idx]
        if !first
          s = _add(s, " -> ")
        end
        s = _add(s, (x).to_s)
        first = false
        idx = _add(idx, 1)
      end
      return s
    }
    puts("pair\tdist\tpath")
    a = 0
    while a < n
      b = 0
      while b < n
        if a != b
          puts(_add(_add(_add(_add(_add(_add((_add(a, 1)).to_s, " -> "), (_add(b, 1)).to_s), "\t"), (dist[a][b]).to_s), "\t"), pathStr.call(path.call(_add(a, 1), _add(b, 1)))))
        end
        b = _add(b, 1)
      end
      a = _add(a, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
