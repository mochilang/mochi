# Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:02 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ord(ch)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if ch >= "0" && ch <= "9"
      return _add(parseIntStr(ch, 10), 48)
    end
    idx = _indexOf(upper, ch)
    if idx >= 0
      return _add(65, idx)
    end
    return 0
  end
  def isCusip(s)
    if s.length != 9
      return false
    end
    sum = 0
    i = 0
    while i < 8
      c = s[i..._add(i, 1)]
      v = 0
      if c >= "0" && c <= "9"
        v = parseIntStr(c, 10)
      else
        if c >= "A" && c <= "Z"
          v = ord(c) - 55
        else
          if c == "*"
            v = 36
          else
            if c == "@"
              v = 37
            else
              if c == "#"
                v = 38
              else
                return false
              end
            end
          end
        end
      end
      if i % 2 == 1
        v = v * 2
      end
      sum = _add(_add(sum, v / 10), v % 10)
      i = _add(i, 1)
    end
    return parseIntStr(s[8...9], 10) == (10 - (sum % 10)) % 10
  end
  $candidates = ["037833100", "17275R102", "38259P508", "594918104", "68389X106", "68389X105"]
  $candidates.each do |cand|
    b = "incorrect"
    if isCusip(cand)
      b = "correct"
    end
    puts(_add(_add(cand, " -> "), b))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
