# Generated by Mochi transpiler v0.10.42 on 2025-07-27 10:22 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def isPrime(n)
    if n < 2
      return false
    end
    if n % 2 == 0
      return n == 2
    end
    d = 3
    while d * d <= n
      if n % d == 0
        return false
      end
      d = _add(d, 2)
    end
    return true
  end
  def revInt(n)
    r = 0
    t = n
    while t > 0
      r = _add(r * 10, t % 10)
      t = ((t / 10)).to_i
    end
    return r
  end
  def main()
    emirps = []
    n = 2
    while emirps.length < 10000
      if isPrime(n)
        r = revInt(n)
        if r != n && isPrime(r)
          emirps = emirps + [n]
        end
      end
      n = _add(n, 1)
    end
    line = "   ["
    i = 0
    while i < 20
      line = _add(line, (emirps[i]).to_s)
      if i < 19
        line = _add(line, ", ")
      end
      i = _add(i, 1)
    end
    line = _add(line, "]")
    puts("First 20:")
    puts(line)
    line = "  ["
    emirps.each do |e|
      if e >= 8000
        break
      end
      if e >= 7700
        line = _add(_add(line, (e).to_s), ", ")
      end
    end
    line = _add(line, "]")
    puts("Between 7700 and 8000:")
    puts(line)
    puts("10000th:")
    puts(_add(_add("   [", (emirps[9999]).to_s), "]"))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
