# Generated by Mochi transpiler v0.10.41 on 2025-07-27 00:51 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def absInt(n)
    if n < 0
      return -n
    end
    return n
  end
  def main()
    b = 1
    while b <= 5
      if b != 5
        c = 1
        while c <= 5
          if c != 1 && c != b
            f = 1
            while f <= 5
              if f != 1 && f != 5 && f != b && f != c && absInt(f - c) > 1
                m = 1
                while m <= 5
                  if m != b && m != c && m != f && m > c
                    s = 1
                    while s <= 5
                      if s != b && s != c && s != f && s != m && absInt(s - f) > 1
                        puts(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add("Baker in ", (b).to_s), ", Cooper in "), (c).to_s), ", Fletcher in "), (f).to_s), ", Miller in "), (m).to_s), ", Smith in "), (s).to_s), "."))
                        return
                      end
                      s = _add(s, 1)
                    end
                  end
                  m = _add(m, 1)
                end
              end
              f = _add(f, 1)
            end
          end
          c = _add(c, 1)
        end
      end
      b = _add(b, 1)
    end
    puts("No solution found.")
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
