# Generated by Mochi transpiler v0.10.41 on 2025-07-26 17:57 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def padRight(s, w)
    r = s
    while r.length < w
      r = _add(r, " ")
    end
    return r
  end
  def linearCombo(c)
    out = ""
    i = 0
    while i < c.length
      n = c[i]
      if n != 0
        op = ""
        if n < 0 && out.length == 0
          op = "-"
        else
          if n < 0
            op = " - "
          else
            if n > 0 && out.length == 0
              op = ""
            else
              op = " + "
            end
          end
        end
        av = n
        if av < 0
          av = -av
        end
        coeff = _add((av).to_s, "*")
        if av == 1
          coeff = ""
        end
        out = _add(_add(_add(_add(_add(out, op), coeff), "e("), (_add(i, 1)).to_s), ")")
      end
      i = _add(i, 1)
    end
    if out.length == 0
      return "0"
    end
    return out
  end
  def main()
    combos = [[1, 2, 3], [0, 1, 2, 3], [1, 0, 3, 4], [1, 2, 0], [0, 0, 0], [0], [1, 1, 1], [-1, -1, -1], [-1, -2, 0, -3], [-1]]
    idx = 0
    while idx < combos.length
      c = combos[idx]
      t = "["
      j = 0
      while j < c.length
        t = _add(t, (c[j]).to_s)
        if j < c.length - 1
          t = _add(t, ", ")
        end
        j = _add(j, 1)
      end
      t = _add(t, "]")
      lc = linearCombo(c)
      puts(_add(_add(padRight(t, 15), "  ->  "), lc))
      idx = _add(idx, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
