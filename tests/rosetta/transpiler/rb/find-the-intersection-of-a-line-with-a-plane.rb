# Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:44 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def add(a, b)
    return Vector.new(x: _add(a.x, b.x), y: _add(a.y, b.y), z: _add(a.z, b.z))
  end
  def sub(a, b)
    return Vector.new(x: a.x - b.x, y: a.y - b.y, z: a.z - b.z)
  end
  def mul(v, s)
    return Vector.new(x: v.x * s, y: v.y * s, z: v.z * s)
  end
  def dot(a, b)
    return _add(_add(a.x * b.x, a.y * b.y), a.z * b.z)
  end
  def intersectPoint(rv, rp, pn, pp)
    diff = sub(rp, pp)
    prod1 = dot(diff, pn)
    prod2 = dot(rv, pn)
    prod3 = prod1 / prod2
    return sub(rp, mul(rv, prod3))
  end
  def main()
    rv = Vector.new(x: 0.0, y: -1.0, z: -1.0)
    rp = Vector.new(x: 0.0, y: 0.0, z: 10.0)
    pn = Vector.new(x: 0.0, y: 0.0, z: 1.0)
    pp = Vector.new(x: 0.0, y: 0.0, z: 5.0)
    ip = intersectPoint(rv, rp, pn, pp)
    puts(_add(_add(_add(_add(_add(_add("The ray intersects the plane at (", (ip.x).to_s), ", "), (ip.y).to_s), ", "), (ip.z).to_s), ")"))
  end
  Vector = Struct.new(:x, :y, :z, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
