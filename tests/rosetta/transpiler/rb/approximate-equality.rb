# Generated by Mochi transpiler v0.10.40 on 2025-07-25 12:21 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def maxf(a, b)
    if a > b
      return a
    end
    return b
  end
  def isClose(a, b)
    relTol = 1e-09
    t = abs(a - b)
    u = relTol * maxf(abs(a), abs(b))
    return t <= u
  end
  def sqrtApprox(x)
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def main()
    root2 = sqrtApprox(2.0)
    pairs = [[1.0000000000000002e+14, 1.0000000000000002e+14], [100.01, 100.011], [1.0000000000000002e+13 / 10000.0, 1.0000000000000001e+09], [0.001, 0.0010000001], [1.01e-22, 0.0], [root2 * root2, 2.0], [(-root2) * root2, -2.0], [100000000000000000.0, 100000000000000000.0], [3.141592653589793, 3.141592653589793]]
    pairs.each do |pair|
      a = pair[0]
      b = pair[1]
      s = (isClose(a, b) ? "≈" : "≉")
      puts(_add(_add(_add(_add((a).to_s, " "), s), " "), (b).to_s))
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
