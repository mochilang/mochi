# Generated by Mochi transpiler v0.10.42 on 2025-07-27 16:42 +0000
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def pfacSum(i)
    sum = 0
    p = 1
    while p <= i / 2
      if i % p == 0
        sum = _add(sum, p)
      end
      p = _add(p, 1)
    end
    return sum
  end
  def main()
    d = 0
    a = 0
    pnum = 0
    i = 1
    while i <= 20000
      j = pfacSum(i)
      if j < i
        d = _add(d, 1)
      end
      if j == i
        pnum = _add(pnum, 1)
      end
      if j > i
        a = _add(a, 1)
      end
      i = _add(i, 1)
    end
    puts(_add(_add("There are ", (d).to_s), " deficient numbers between 1 and 20000"))
    puts(_add(_add("There are ", (a).to_s), " abundant numbers  between 1 and 20000"))
    puts(_add(_add("There are ", (pnum).to_s), " perfect numbers between 1 and 20000"))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
