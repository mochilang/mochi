# Generated by Mochi transpiler v0.10.38 on 2025-07-24 00:42 +0000

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.rjust(len, ch)
end

Rational_ = Struct.new(:num, :denom, keyword_init: true)
$OP_ADD = 1
$OP_SUB = 2
$OP_MUL = 3
$OP_DIV = 4
Num = Struct.new(:value, keyword_init: true)
Bin = Struct.new(:op, :left, :right, keyword_init: true)
def binEval(op, l, r)
  lv = exprEval(l)
  rv = exprEval(r)
  if op == $OP_ADD
    return Rational_.new(num: _add(lv.num * rv.denom, lv.denom * rv.num), denom: lv.denom * rv.denom)
  end
  if op == $OP_SUB
    return Rational_.new(num: lv.num * rv.denom - lv.denom * rv.num, denom: lv.denom * rv.denom)
  end
  if op == $OP_MUL
    return Rational_.new(num: lv.num * rv.num, denom: lv.denom * rv.denom)
  end
  return Rational_.new(num: lv.num * rv.denom, denom: lv.denom * rv.num)
end
def binString(op, l, r)
  ls = exprString(l)
  rs = exprString(r)
  opstr = ""
  if op == $OP_ADD
    opstr = " + "
  else
    if op == $OP_SUB
      opstr = " - "
    else
      if op == $OP_MUL
        opstr = " * "
      else
        opstr = " / "
      end
    end
  end
  return _add(_add(_add(_add("(", ls), opstr), rs), ")")
end
def newNum(n)
  return Num.new(value: Rational_.new(num: n, denom: 1))
end
def exprEval(x)
  return (x.is_a?(Num) ? ->(v) { v }.call(x.value) : (x.is_a?(Bin) ? ->(op) { ->(l) { ->(r) { binEval(op, l, r) }.call(x.right) }.call(x.left) }.call(x.op) : nil))
end
def exprString(x)
  return (x.is_a?(Num) ? ->(v) { (v["num"]).to_s }.call(x.value) : (x.is_a?(Bin) ? ->(op) { ->(l) { ->(r) { binString(op, l, r) }.call(x.right) }.call(x.left) }.call(x.op) : nil))
end
$n_cards = 4
$goal = 24
$digit_range = 9
def solve(xs)
  if xs.length == 1
    f = exprEval(xs[0])
    if f.denom != 0 && f.num == f.denom * $goal
      puts(exprString(xs[0]))
      return true
    end
    return false
  end
  i = 0
  while i < xs.length
    j = _add(i, 1)
    while j < xs.length
      rest = []
      k = 0
      while k < xs.length
        if k != i && k != j
          rest = rest + [xs[k]]
        end
        k = _add(k, 1)
      end
      a = xs[i]
      b = xs[j]
      [$OP_ADD, $OP_SUB, $OP_MUL, $OP_DIV].each do |op|
        node = Bin.new(op: op, left: a, right: b)
        if solve(rest + [node])
          return true
        end
      end
      node = Bin.new(op: $OP_SUB, left: b, right: a)
      if solve(rest + [node])
        return true
      end
      node = Bin.new(op: $OP_DIV, left: b, right: a)
      if solve(rest + [node])
        return true
      end
      j = _add(j, 1)
    end
    i = _add(i, 1)
  end
  return false
end
def main()
  iter = 0
  while iter < 10
    cards = []
    i = 0
    while i < $n_cards
      n = _add((_now() % ($digit_range - 1)), 1)
      cards = cards + [newNum(n)]
      puts(_add(" ", (n).to_s))
      i = _add(i, 1)
    end
    puts(":  ")
    if !solve(cards)
      puts("No solution")
    end
    iter = _add(iter, 1)
  end
end
main()
