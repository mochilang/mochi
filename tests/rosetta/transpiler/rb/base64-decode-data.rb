# Generated by Mochi transpiler v0.10.42 on 2025-07-28 00:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1664525 + 1013904223) % 2147483647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


def parseIntStr(str, base = 10)
  str.to_i(base)
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def parseIntStr(str)
    i = 0
    neg = false
    if str.length > 0 && str[0] == "-"
      neg = true
      i = 1
    end
    n = 0
    digits = {"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
    while i < str.length
      n = _add(n * 10, digits[str[i]])
      i = _add(i, 1)
    end
    if neg
      n = -n
    end
    return n
  end
  def ord(ch)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    idx = _indexOf(upper, ch)
    if idx >= 0
      return _add(65, idx)
    end
    idx = _indexOf(lower, ch)
    if idx >= 0
      return _add(97, idx)
    end
    if ch >= "0" && ch <= "9"
      return _add(48, parseIntStr(ch))
    end
    if ch == "+"
      return 43
    end
    if ch == "/"
      return 47
    end
    if ch == " "
      return 32
    end
    if ch == "="
      return 61
    end
    return 0
  end
  def chr(n)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 && n < 91
      return upper[n - 65...n - 64]
    end
    if n >= 97 && n < 123
      return lower[n - 97...n - 96]
    end
    if n >= 48 && n < 58
      digits = "0123456789"
      return digits[n - 48...n - 47]
    end
    if n == 43
      return "+"
    end
    if n == 47
      return "/"
    end
    if n == 32
      return " "
    end
    if n == 61
      return "="
    end
    return "?"
  end
  def toBinary(n, bits)
    b = ""
    val = n
    i = 0
    while i < bits
      b = _add((val % 2).to_s, b)
      val = ((val / 2)).to_i
      i = _add(i, 1)
    end
    return b
  end
  def binToInt(bits)
    n = 0
    i = 0
    while i < bits.length
      n = _add(n * 2, parseIntStr(bits[i..._add(i, 1)]))
      i = _add(i, 1)
    end
    return n
  end
  def base64Encode(text)
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    bin = ""
    text.each_char do |ch|
      bin = _add(bin, toBinary(ord(ch), 8))
    end
    while bin.length % 6 != 0
      bin = _add(bin, "0")
    end
    out = ""
    i = 0
    while i < bin.length
      chunk = bin[i..._add(i, 6)]
      val = binToInt(chunk)
      out = _add(out, alphabet[val..._add(val, 1)])
      i = _add(i, 6)
    end
    pad = (3 - (text.length % 3)) % 3
    if pad == 1
      out = _add(out[0...out.length - 1], "=")
    end
    if pad == 2
      out = _add(out[0...out.length - 2], "==")
    end
    return out
  end
  def base64Decode(enc)
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    bin = ""
    i = 0
    while i < enc.length
      ch = enc[i]
      if ch == "="
        break
      end
      idx = _indexOf(alphabet, ch)
      bin = _add(bin, toBinary(idx, 6))
      i = _add(i, 1)
    end
    out = ""
    i = 0
    while _add(i, 8) <= bin.length
      chunk = bin[i..._add(i, 8)]
      val = binToInt(chunk)
      out = _add(out, chr(val))
      i = _add(i, 8)
    end
    return out
  end
  $msg = "Rosetta Code Base64 decode data task"
  puts(_add("Original : ", $msg))
  $enc = base64Encode($msg)
  puts(_add("\nEncoded  : ", $enc))
  $dec = base64Decode($enc)
  puts(_add("\nDecoded  : ", $dec))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
