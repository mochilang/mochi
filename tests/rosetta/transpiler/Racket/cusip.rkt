;; Generated by Mochi 0.10.42 on 2025-07-28 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (ord ch)
  (let/ec _return (begin
(define upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(if (and (string>=? ch "0") (string<=? ch "9")) (let ()
(_return (let ([__l (_parse-int-str ch 10)] [__r 48]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(define idx (index-of upper ch))
(if (>= idx 0) (let ()
(_return (let ([__l 65] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return 0)
))
)
(define (isCusip s)
  (let/ec _return (begin
(if (not (equal? (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 9)) (let ()
(_return #f)
) (void))
(define sum 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 8) (let ()
    (define c (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define v 0)
    (if (and (string>=? c "0") (string<=? c "9")) (let ()
(set! v (_parse-int-str c 10))
) (let ()
(if (and (string>=? c "A") (string<=? c "Z")) (let ()
(set! v (- (ord c) 55))
) (let ()
(if (string=? c "*") (let ()
(set! v 36)
) (let ()
(if (string=? c "@") (let ()
(set! v 37)
) (let ()
(if (string=? c "#") (let ()
(set! v 38)
) (let ()
(_return #f)
))
))
))
))
))
    (if (equal? (modulo i 2) 1) (let ()
(set! v (* v 2))
) (void))
    (set! sum (let ([__l (let ([__l sum] [__r (quotient v 10)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (modulo v 10)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (equal? (_parse-int-str (substring s 8 9) 10) (modulo (- 10 (modulo sum 10)) 10)))
))
)
(define candidates (list "037833100" "17275R102" "38259P508" "594918104" "68389X106" "68389X105"))
(let/ec _break (for ([cand candidates])
  (let/ec _cont
(define b "incorrect")
(if (isCusip cand) (let ()
(set! b "correct")
) (void))
(displayln (string-append (string-append cand " -> ") b))
  )))
