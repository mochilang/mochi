;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (pow2 n)
  (let/ec _return (begin
(define p 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! p (* p 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return p)
))
)
(define (btoi b)
  (let/ec _return (begin
(if b (let ()
(_return 1)
) (void))
(_return 0)
))
)
(define (addNoCells cells)
  (let/ec _return (begin
(define l "O")
(define r "O")
(if (string=? (substring cells 0 1) "O") (let ()
(set! l ".")
) (void))
(if (string=? (substring cells (- (cond [(string? cells) (string-length cells)] [(hash? cells) (hash-count cells)] [else (length cells)]) 1) (cond [(string? cells) (string-length cells)] [(hash? cells) (hash-count cells)] [else (length cells)])) "O") (let ()
(set! r ".")
) (void))
(set! cells (string-append (string-append l cells) r))
(set! cells (string-append (string-append l cells) r))
(_return cells)
))
)
(define (step cells ruleVal)
  (let/ec _return (begin
(define newCells "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (- (cond [(string? cells) (string-length cells)] [(hash? cells) (hash-count cells)] [else (length cells)]) 2)) (let ()
    (define bin 0)
    (define b 2)
    (define n i)
    (let/ec _break (let loop ()
  (if (< n (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
    (set! bin (let ([__l bin] [__r (* (btoi (string=? (substring cells n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "O")) (pow2 b))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! b (- b 1))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define a ".")
    (if (equal? (modulo (quotient ruleVal (pow2 bin)) 2) 1) (let ()
(set! a "O")
) (void))
    (set! newCells (string-append newCells a))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return newCells)
))
)
(define (repeat ch n)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! s (string-append s ch))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (evolve l ruleVal)
  (let/ec _return (begin
(displayln (string-append (string-append " Rule #" (format "~a" ruleVal)) ":"))
(define cells "O")
(define x 0)
(let/ec _break (let loop ()
  (if (< x l) (let ()
    (set! cells (addNoCells cells))
    (define width (let ([__l 40] [__r (quotient (cond [(string? cells) (string-length cells)] [(hash? cells) (hash-count cells)] [else (length cells)]) 2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define spaces (_repeat " " (- width (cond [(string? cells) (string-length cells)] [(hash? cells) (hash-count cells)] [else (length cells)]))))
    (displayln (string-append spaces cells))
    (set! cells (step cells ruleVal))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(let/ec _break (for ([r (list 90 30)])
  (let/ec _cont
(evolve 25 r)
(displayln "")
  )))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
