;; Generated by Mochi 0.10.37 on 2025-07-23 12:26 +0700
#lang racket/base
(require racket/list racket/string racket/math json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (fields s)
  (let/ec _return (begin
(define res (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define c (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? c " ") (let ()
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! res (append res (list cur)))
(set! cur "")
) (void))
) (let ()
(set! cur (string-append cur c))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! res (append res (list cur)))
) (void))
(_return res)
))
)
(define (canSpell word blks)
  (let/ec _return (begin
(if (equal? (cond [(string? word) (string-length word)] [(hash? word) (hash-count word)] [else (length word)]) 0) (let ()
(_return #t)
) (void))
(define c (lower (substring word 0 1)))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? blks) (string-length blks)] [(hash? blks) (hash-count blks)] [else (length blks)])) (let ()
    (define b (list-ref blks i))
    (if (or (equal? c (lower (substring b 0 1))) (equal? c (lower (substring b 1 2)))) (let ()
(define rest (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? blks) (string-length blks)] [(hash? blks) (hash-count blks)] [else (length blks)])) (let ()
    (if (not (equal? j i)) (let ()
(set! rest (append rest (list (list-ref blks j))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (canSpell (substring word 1 (string-length word)) rest) (let ()
(_return #t)
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (newSpeller blocks)
  (let/ec _return (begin
(define bl (fields blocks))
(_return (lambda (w) (canSpell w bl)))
))
)
(define (main)
  (let/ec _return (begin
(define sp (newSpeller "BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM"))
(for ([word (list "A" "BARK" "BOOK" "TREAT" "COMMON" "SQUAD" "CONFUSE")])
(displayln (string-append (string-append word " ") (format "~a" (sp word))))
)
))
)
(main)
