;; Generated by Mochi 0.10.40 on 2025-07-25 19:02 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (randDigit)
  (let/ec _return (begin
(_return (let ([__l (modulo (now) 9)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (main)
  (let/ec _return (begin
(define digits (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i 4)
(set! digits (append digits (list (randDigit))))
      (set! i (+ i 1))
      (loop)))
))
(define numstr "")
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i 4)
(set! numstr (string-append numstr (format "~a" (list-ref digits i))))
      (set! i (+ i 1))
      (loop)))
))
(displayln (string-append (string-append "Your numbers: " numstr) "\n"))
(displayln "Enter RPN: ")
(define expr (input))
(if (not (equal? (cond [(string? expr) (string-length expr)] [(hash? expr) (hash-count expr)] [else (length expr)]) 7)) (let ()
(displayln "invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
(_return void)
) (void))
(define stack (list))
(define i 0)
(define valid #t)
(let/ec _break (let loop ()
  (if (< i (cond [(string? expr) (string-length expr)] [(hash? expr) (hash-count expr)] [else (length expr)])) (let ()
    (define ch (substring expr i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (and (string>=? ch "0") (string<=? ch "9")) (let ()
(if (equal? (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) 0) (let ()
(displayln "too many numbers.")
(_return void)
) (void))
(define j 0)
(let/ec _break (let loop ()
  (if (not (equal? (list-ref digits j) (- (int ch) (int "0")))) (let ()
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? j (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])) (let ()
(displayln "wrong numbers.")
(_return void)
) (void))
    (loop)) (void))))
(set! digits (let ([__l (sublist digits 0 j)] [__r (sublist digits (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (length digits))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! stack (append stack (list (float (- (int ch) (int "0"))))))
) (let ()
(if (< (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2) (let ()
(displayln "invalid expression syntax.")
(set! valid #f)
(_break)
) (void))
(define b (list-ref stack (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
(define a (list-ref stack (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2)))
(if (string=? ch "+") (let ()
(set! stack (list-set stack (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2) (let ([__l a] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(if (string=? ch "-") (let ()
(set! stack (list-set stack (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2) (- a b)))
) (let ()
(if (string=? ch "*") (let ()
(set! stack (list-set stack (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2) (* a b)))
) (let ()
(if (string=? ch "/") (let ()
(set! stack (list-set stack (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2) (/ a b)))
) (let ()
(displayln (string-append ch " invalid."))
(set! valid #f)
(_break)
))
))
))
))
(set! stack (sublist stack 0 (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if valid (let ()
(if (> (abs (- (list-ref stack 0) 24.0)) 1e-06) (let ()
(displayln (string-append (string-append "incorrect. " (format "~a" (list-ref stack 0))) " != 24"))
) (let ()
(displayln "correct.")
))
) (void))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
