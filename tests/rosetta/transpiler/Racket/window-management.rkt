;; Generated by Mochi 0.10.50 on 2025-07-30 23:37 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (showState w label)
  (let/ec _return (begin
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append label ": pos=(") (format "~a" (if w (hash-ref w "x" #f) #f))) ",") (format "~a" (if w (hash-ref w "y" #f) #f))) ") size=(") (format "~a" (if w (hash-ref w "w" #f) #f))) "x") (format "~a" (if w (hash-ref w "h" #f) #f))) ") max=") (format "~a" (if w (hash-ref w "maximized" #f) #f))) " icon=") (format "~a" (if w (hash-ref w "iconified" #f) #f))) " visible=") (format "~a" (if w (hash-ref w "visible" #f) #f))))
))
)
(define (maximize w)
  (let/ec _return (begin
(set! w (hash-set (or w (hash)) "maximized" #t))
(set! w (hash-set (or w (hash)) "w" 800))
(set! w (hash-set (or w (hash)) "h" 600))
(_return w)
))
)
(define (unmaximize w)
  (let/ec _return (begin
(set! w (hash-set (or w (hash)) "maximized" #f))
(set! w (hash-set (or w (hash)) "w" 640))
(set! w (hash-set (or w (hash)) "h" 480))
(_return w)
))
)
(define (iconify w)
  (let/ec _return (begin
(set! w (hash-set (or w (hash)) "iconified" #t))
(set! w (hash-set (or w (hash)) "visible" #f))
(_return w)
))
)
(define (deiconify w)
  (let/ec _return (begin
(set! w (hash-set (or w (hash)) "iconified" #f))
(set! w (hash-set (or w (hash)) "visible" #t))
(_return w)
))
)
(define (hide w)
  (let/ec _return (begin
(set! w (hash-set (or w (hash)) "visible" #f))
(_return w)
))
)
(define (showWindow w)
  (let/ec _return (begin
(set! w (hash-set (or w (hash)) "visible" #t))
(_return w)
))
)
(define (move w)
  (let/ec _return (begin
(if (if w (hash-ref w "shifted" #f) #f) (let ()
(set! w (hash-set (or w (hash)) "x" (- (if w (hash-ref w "x" #f) #f) 10)))
(set! w (hash-set (or w (hash)) "y" (- (if w (hash-ref w "y" #f) #f) 10)))
) (let ()
(set! w (hash-set (or w (hash)) "x" (let ([__l (if w (hash-ref w "x" #f) #f)] [__r 10]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! w (hash-set (or w (hash)) "y" (let ([__l (if w (hash-ref w "y" #f) #f)] [__r 10]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
(set! w (hash-set (or w (hash)) "shifted" (not (if w (hash-ref w "shifted" #f) #f))))
(_return w)
))
)
(define (main)
  (let/ec _return (begin
(define win (hash "x" 100 "y" 100 "w" 640 "h" 480 "maximized" #f "iconified" #f "visible" #t "shifted" #f))
(showState win "Start")
(set! win (maximize win))
(showState win "Maximize")
(set! win (unmaximize win))
(showState win "Unmaximize")
(set! win (iconify win))
(showState win "Iconify")
(set! win (deiconify win))
(showState win "Deiconify")
(set! win (hide win))
(showState win "Hide")
(set! win (showWindow win))
(showState win "Show")
(set! win (move win))
(showState win "Move")
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
