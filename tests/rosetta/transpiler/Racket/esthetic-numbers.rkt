;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define digits "0123456789abcdef")
(define (toBase n b)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(_return "0")
) (void))
(define v n)
(define out "")
(let/ec _break (let loop ()
  (if (> v 0) (let ()
    (define d (modulo v b))
    (set! out (string-append (slice digits d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) out))
    (set! v (quotient v b))
    (loop)) (void))))
(_return out)
))
)
(define (uabs a b)
  (let/ec _return (begin
(if (> a b) (let ()
(_return (- a b))
) (void))
(_return (- b a))
))
)
(define (isEsthetic n b)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(_return #f)
) (void))
(define i (modulo n b))
(set! n (quotient n b))
(let/ec _break (let loop ()
  (if (> n 0) (let ()
    (define j (modulo n b))
    (if (not (equal? (uabs i j) 1)) (let ()
(_return #f)
) (void))
    (set! n (quotient n b))
    (set! i j)
    (loop)) (void))))
(_return #t)
))
)
(define esths (list))
(define (dfs n m i)
  (let/ec _return (begin
(if (and (>= i n) (<= i m)) (let ()
(set! esths (append esths (list i)))
) (void))
(if (or (equal? i 0) (> i m)) (let ()
(_return void)
) (void))
(define d (modulo i 10))
(define i1 (- (let ([__l (* i 10)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
(define i2 (let ([__l i1] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? d 0) (let ()
(dfs n m i2)
) (let ()
(if (equal? d 9) (let ()
(dfs n m i1)
) (let ()
(dfs n m i1)
(dfs n m i2)
))
))
))
)
(define (commatize n)
  (let/ec _return (begin
(define s (format "~a" n))
(define i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 3))
(let/ec _break (let loop ()
  (if (>= i 1) (let ()
    (set! s (string-append (string-append (slice s 0 i) ",") (slice s i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))))
    (set! i (- i 3))
    (loop)) (void))))
(_return s)
))
)
(define (listEsths n n2 m m2 perLine showAll)
  (let/ec _return (begin
(set! esths (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let ()
    (dfs n2 m2 i)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define le (cond [(string? esths) (string-length esths)] [(hash? esths) (hash-count esths)] [else (length esths)]))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append "Base 10: " (commatize le)) " esthetic numbers between ") (commatize n)) " and ") (commatize m)) ":"))
(if showAll (let ()
(define c 0)
(define line "")
(let/ec _break (for ([v esths])
  (let/ec _cont
(if (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(set! line (string-append line " "))
) (void))
(set! line (string-append line (format "~a" v)))
(set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? (modulo c perLine) 0) (let ()
(displayln line)
(set! line "")
) (void))
  )))
(if (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(displayln line)
) (void))
) (let ()
(define line "")
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx perLine) (let ()
    (if (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(set! line (string-append line " "))
) (void))
    (set! line (string-append line (format "~a" (if esths (list-ref esths (int idx)) #f))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln line)
(displayln "............")
(set! line "")
(set! idx (- le perLine))
(let/ec _break (let loop ()
  (if (< idx le) (let ()
    (if (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(set! line (string-append line " "))
) (void))
    (set! line (string-append line (format "~a" (if esths (list-ref esths (int idx)) #f))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln line)
))
(displayln "")
))
)
(define (main)
  (let/ec _return (begin
(define b 2)
(let/ec _break (let loop ()
  (if (<= b 16) (let ()
    (define start (* 4 b))
    (define stop (* 6 b))
    (displayln (string-append (string-append (string-append (string-append (string-append (string-append "Base " (format "~a" b)) ": ") (format "~a" start)) "th to ") (format "~a" stop)) "th esthetic numbers:"))
    (define n 1)
    (define c 0)
    (define line "")
    (let/ec _break (let loop ()
  (if (< c stop) (let ()
    (if (isEsthetic n b) (let ()
(set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (>= c start) (let ()
(if (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(set! line (string-append line " "))
) (void))
(set! line (string-append line (toBase n b)))
) (void))
) (void))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (displayln "")
    (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(listEsths 1000 1010 9999 9898 16 #t)
(listEsths 100000000 101010101 130000000 123456789 9 #t)
(listEsths 100000000000 101010101010 130000000000 123456789898 7 #f)
(listEsths 100000000000000 101010101010101 130000000000000 123456789898989 5 #f)
(listEsths 100000000000000000 101010101010101010 130000000000000000 123456789898989898 4 #f)
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
