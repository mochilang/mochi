;; Generated by Mochi 0.10.55 on 2025-08-03 07:58 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define nPts 100)
(define rMin 10)
(define rMax 15)
(define span (let ([__l (let ([__l rMax] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r rMax]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define poss (list))
(define min2 (* rMin rMin))
(define max2 (* rMax rMax))
(define y (- rMax))
(let/ec _break (let loop ()
  (if (<= y rMax) (let ()
    (define x (- rMax))
    (let/ec _break (let loop ()
  (if (<= x rMax) (let ()
    (define r2 (let ([__l (* x x)] [__r (* y y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (and (>= r2 min2) (<= r2 max2)) (let ()
(set! poss (append poss (list (list x y))))
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (string-append (format "~a" (cond [(string? poss) (string-length poss)] [(hash? poss) (hash-count poss)] [else (length poss)])) " possible points"))
(define rows (list))
(define r 0)
(let/ec _break (let loop ()
  (if (< r span) (let ()
    (define row (list))
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c (* span 2)) (let ()
    (set! row (append row (list " ")))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! rows (append rows (list row)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define u 0)
(define seen (hash))
(define n 0)
(let/ec _break (let loop ()
  (if (< n nPts) (let ()
    (define i (modulo (now) (cond [(string? poss) (string-length poss)] [(hash? poss) (hash-count poss)] [else (length poss)])))
    (define x (if (if poss (if (hash? poss) (hash-ref poss i #f) (list-ref poss (int i))) #f) (if (hash? (if poss (if (hash? poss) (hash-ref poss i #f) (list-ref poss (int i))) #f)) (hash-ref (if poss (if (hash? poss) (hash-ref poss i #f) (list-ref poss (int i))) #f) 0 #f) (list-ref (if poss (if (hash? poss) (hash-ref poss i #f) (list-ref poss (int i))) #f) (int 0))) #f))
    (define yy (if (if poss (if (hash? poss) (hash-ref poss i #f) (list-ref poss (int i))) #f) (if (hash? (if poss (if (hash? poss) (hash-ref poss i #f) (list-ref poss (int i))) #f)) (hash-ref (if poss (if (hash? poss) (hash-ref poss i #f) (list-ref poss (int i))) #f) 1 #f) (list-ref (if poss (if (hash? poss) (hash-ref poss i #f) (list-ref poss (int i))) #f) (int 1))) #f))
    (define row (let ([__l yy] [__r rMax]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define col (* (let ([__l x] [__r rMax]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
    (set! rows (list-set rows row (list-set (list-ref rows row) col "*")))
    (define key (string-append (string-append (format "~a" row) ",") (format "~a" col)))
    (if (not (if seen (hash-ref seen key #f) #f)) (let ()
(set! seen (hash-set (or seen (hash)) key #t))
(set! u (let ([__l u] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define i2 0)
(let/ec _break (let loop ()
  (if (< i2 span) (let ()
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (* span 2)) (let ()
    (set! line (string-append line (if (if rows (if (hash? rows) (hash-ref rows i2 #f) (list-ref rows (int i2))) #f) (if (hash? (if rows (if (hash? rows) (hash-ref rows i2 #f) (list-ref rows (int i2))) #f)) (hash-ref (if rows (if (hash? rows) (hash-ref rows i2 #f) (list-ref rows (int i2))) #f) j #f) (list-ref (if rows (if (hash? rows) (hash-ref rows i2 #f) (list-ref rows (int i2))) #f) (int j))) #f)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i2 (let ([__l i2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (string-append (format "~a" u) " unique points"))
