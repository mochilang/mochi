;; Generated by Mochi 0.10.42 on 2025-07-28 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (listStr xs)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (set! s (string-append s (format "~a" (if xs (list-ref xs (int i)) #f))))
    (if (< i (- (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)) (let ()
(set! s (string-append s " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (pointerDemo)
  (let/ec _return (begin
(displayln "Pointer:")
(define i 0)
(displayln "Before:")
(displayln (string-append (string-append (string-append "\t<address>: " (format "~a" i)) ", ") (format "~a" i)))
(set! i 3)
(displayln "After:")
(displayln (string-append (string-append (string-append "\t<address>: " (format "~a" i)) ", ") (format "~a" i)))
))
)
(define (sliceDemo)
  (let/ec _return (begin
(displayln "Slice:")
(define a (list))
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ 10)
(set! a (append a (list 0)))
      (set! _ (+ _ 1))
      (loop)))
))
(define s a)
(displayln "Before:")
(displayln (string-append "\ts: " (listStr s)))
(displayln (string-append "\ta: " (listStr a)))
(define data (list 65 32 115 116 114 105 110 103 46))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])) (let ()
    (set! s (list-set s (int idx) (if data (list-ref data (int idx)) #f)))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "After:")
(displayln (string-append "\ts: " (listStr s)))
(displayln (string-append "\ta: " (listStr a)))
))
)
(pointerDemo)
(displayln "")
(sliceDemo)
