;; Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (splitPath p)
  (let/ec _return (begin
(define parts (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)])) (let ()
    (if (string=? (slice p i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "/") (let ()
(if (not (string=? cur "")) (let ()
(set! parts (append parts (list cur)))
(set! cur "")
) (void))
) (let ()
(set! cur (string-append cur (slice p i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (not (string=? cur "")) (let ()
(set! parts (append parts (list cur)))
) (void))
(_return parts)
))
)
(define (joinPath parts)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? parts) (string-length parts)] [(hash? parts) (hash-count parts)] [else (length parts)])) (let ()
    (set! s (string-append (string-append s "/") (if parts (list-ref parts (int i)) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (commonPrefix paths)
  (let/ec _return (begin
(if (equal? (cond [(string? paths) (string-length paths)] [(hash? paths) (hash-count paths)] [else (length paths)]) 0) (let ()
(_return "")
) (void))
(define base (splitPath (if paths (list-ref paths (int 0)) #f)))
(define i 0)
(define prefix (list))
(let/ec _break (let loop ()
  (if (< i (cond [(string? base) (string-length base)] [(hash? base) (hash-count base)] [else (length base)])) (let ()
    (define comp (if base (list-ref base (int i)) #f))
    (define ok #t)
    (let/ec _break (for ([p paths])
  (let/ec _cont
(define parts (splitPath p))
(if (or (>= i (cond [(string? parts) (string-length parts)] [(hash? parts) (hash-count parts)] [else (length parts)])) (not (string=? (if parts (list-ref parts (int i)) #f) comp))) (let ()
(set! ok #f)
(_break)
) (void))
  )))
    (if ok (let ()
(set! prefix (append prefix (list comp)))
) (let ()
(_break)
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (joinPath prefix))
))
)
(define (main)
  (let/ec _return (begin
(define paths (list "/home/user1/tmp/coverage/test" "/home/user1/tmp/covert/operator" "/home/user1/tmp/coven/members" "/home//user1/tmp/coventry" "/home/user1/././tmp/covertly/foo" "/home/bob/../user1/tmp/coved/bar"))
(define c (commonPrefix paths))
(if (string=? c "") (let ()
(displayln "No common path")
) (let ()
(displayln (string-append "Common path: " c))
))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
