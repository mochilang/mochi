;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (absInt n)
  (let/ec _return (begin
(if (< n 0) (let ()
(_return (- n))
) (void))
(_return n)
))
)
(define (main)
  (let/ec _return (begin
(define b 1)
(let/ec _break (let loop ()
  (if (<= b 5) (let ()
    (if (not (equal? b 5)) (let ()
(define c 1)
(let/ec _break (let loop ()
  (if (<= c 5) (let ()
    (if (and (not (equal? c 1)) (not (equal? c b))) (let ()
(define f 1)
(let/ec _break (let loop ()
  (if (<= f 5) (let ()
    (if (and (and (and (and (not (equal? f 1)) (not (equal? f 5))) (not (equal? f b))) (not (equal? f c))) (> (absInt (- f c)) 1)) (let ()
(define m 1)
(let/ec _break (let loop ()
  (if (<= m 5) (let ()
    (if (and (and (and (not (equal? m b)) (not (equal? m c))) (not (equal? m f))) (> m c)) (let ()
(define s 1)
(let/ec _break (let loop ()
  (if (<= s 5) (let ()
    (if (and (and (and (and (not (equal? s b)) (not (equal? s c))) (not (equal? s f))) (not (equal? s m))) (> (absInt (- s f)) 1)) (let ()
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Baker in " (format "~a" b)) ", Cooper in ") (format "~a" c)) ", Fletcher in ") (format "~a" f)) ", Miller in ") (format "~a" m)) ", Smith in ") (format "~a" s)) "."))
(_return void)
) (void))
    (set! s (let ([__l s] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! f (let ([__l f] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "No solution found.")
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
