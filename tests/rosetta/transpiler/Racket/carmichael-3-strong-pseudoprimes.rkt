;; Generated by Mochi 0.10.39 on 2025-07-24 20:52 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (mod n m)
  (let/ec _return (begin
(_return (modulo (let ([__l (modulo n m)] [__r m]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) m))
))
)
(define (isPrime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(if (equal? (modulo n 2) 0) (let ()
(_return (equal? n 2))
) (void))
(if (equal? (modulo n 3) 0) (let ()
(_return (equal? n 3))
) (void))
(define d 5)
(let/ec _break (let loop ()
  (if (<= (* d d) n) (let ()
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (pad n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (carmichael p1)
  (let/ec _return (begin
(let/ec _break (let ([h3 2])
  (let loop ()
    (when (< h3 p1)
(let/ec _break (let ([d 1])
  (let loop ()
    (when (< d (let ([__l h3] [__r p1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (and (equal? (modulo (* (let ([__l h3] [__r p1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- p1 1)) d) 0) (equal? (mod (* (- p1) p1) h3) (modulo d h3))) (let ()
(define p2 (let ([__l 1] [__r (/ (* (- p1 1) (let ([__l h3] [__r p1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) d)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (not (isPrime p2)) (let ()
(begin (set! d (+ d 1)) (loop))
) (void))
(define p3 (let ([__l 1] [__r (/ (* p1 p2) h3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (not (isPrime p3)) (let ()
(begin (set! d (+ d 1)) (loop))
) (void))
(if (not (equal? (modulo (* p2 p3) (- p1 1)) 1)) (let ()
(begin (set! d (+ d 1)) (loop))
) (void))
(define c (* (* p1 p2) p3))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (pad p1 2) "   ") (pad p2 4)) "   ") (pad p3 5)) "     ") (format "~a" c)))
) (void))
      (set! d (+ d 1))
      (loop)))
))
      (set! h3 (+ h3 1))
      (loop)))
))
))
)
(displayln "The following are Carmichael munbers for p1 <= 61:\n")
(displayln "p1     p2      p3     product")
(displayln "==     ==      ==     =======")
(let/ec _break (let ([p1 2])
  (let loop ()
    (when (< p1 62)
(if (isPrime p1) (let ()
(carmichael p1)
) (void))
      (set! p1 (+ p1 1))
      (loop)))
))
