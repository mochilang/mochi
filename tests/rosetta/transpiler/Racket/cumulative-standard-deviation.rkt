;; Generated by Mochi 0.10.42 on 2025-07-28 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define g x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let ()
    (set! g (/ (let ([__l g] [__r (/ x g)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return g)
))
)
(define (newRsdv)
  (let/ec _return (begin
(_return (hash "n" 0.0 "a" 0.0 "q" 0.0))
))
)
(define (add r x)
  (let/ec _return (begin
(define n1 (let ([__l (if r (hash-ref r "n" #f) #f)] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define a1 (let ([__l (if r (hash-ref r "a" #f) #f)] [__r (/ (- x (if r (hash-ref r "a" #f) #f)) n1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define q1 (let ([__l (if r (hash-ref r "q" #f) #f)] [__r (* (- x (if r (hash-ref r "a" #f) #f)) (- x a1))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (hash "n" n1 "a" a1 "q" q1))
))
)
(define (sd r)
  (let/ec _return (begin
(_return (sqrtApprox (/ (if r (hash-ref r "q" #f) #f) (if r (hash-ref r "n" #f) #f))))
))
)
(define (main)
  (let/ec _return (begin
(define r (newRsdv))
(let/ec _break (for ([x (list 2.0 4.0 4.0 4.0 5.0 5.0 7.0 9.0)])
  (let/ec _cont
(set! r (add r x))
(displayln (format "~a" (sd r)))
  )))
))
)
(main)
