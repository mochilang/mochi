;; Generated by Mochi 0.10.42 on 2025-07-27 22:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (primesUpTo n)
  (let/ec _return (begin
(define sieve (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let ()
    (set! sieve (append sieve (list #t)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define p 2)
(let/ec _break (let loop ()
  (if (<= (* p p) n) (let ()
    (if (if sieve (list-ref sieve (int p)) #f) (let ()
(define m (* p p))
(let/ec _break (let loop ()
  (if (<= m n) (let ()
    (set! sieve (list-set sieve (int m) #f))
    (set! m (let ([__l m] [__r p]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define res (list))
(define x 2)
(let/ec _break (let loop ()
  (if (<= x n) (let ()
    (if (if sieve (list-ref sieve (int x)) #f) (let ()
(set! res (append res (list x)))
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (sortInts xs)
  (let/ec _return (begin
(define res (list))
(define tmp xs)
(let/ec _break (let loop ()
  (if (> (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)]) 0) (let ()
    (define min (if tmp (list-ref tmp (int 0)) #f))
    (define idx 0)
    (define i 1)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)])) (let ()
    (if (< (if tmp (list-ref tmp (int i)) #f) min) (let ()
(set! min (if tmp (list-ref tmp (int i)) #f))
(set! idx i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list min)))
    (define out (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)])) (let ()
    (if (not (equal? j idx)) (let ()
(set! out (append out (list (if tmp (list-ref tmp (int j)) #f))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! tmp out)
    (loop)) (void))))
(_return res)
))
)
(define (commatize n)
  (let/ec _return (begin
(define s (format "~a" n))
(define i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 3))
(let/ec _break (let loop ()
  (if (>= i 1) (let ()
    (set! s (string-append (string-append (substring s 0 i) ",") (substring s i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))))
    (set! i (- i 3))
    (loop)) (void))))
(_return s)
))
)
(define primes (primesUpTo 3200000))
(define (getBrilliant digits limit countOnly)
  (let/ec _return (begin
(define brilliant (list))
(define count 0)
(define pow 1)
(define next 999999999999999)
(define k 1)
(let/ec _break (let loop ()
  (if (<= k digits) (let ()
    (define s (list))
    (let/ec _break (for ([p primes] #:break (>= p (* pow 10)))
  (let/ec _cont
(if (> p pow) (let ()
(set! s (append s (list p)))
) (void))
  )))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define j i)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define prod (* (if s (list-ref s (int i)) #f) (if s (list-ref s (int j)) #f)))
    (if (< prod limit) (let ()
(if countOnly (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! brilliant (append brilliant (list prod)))
))
) (let ()
(if (< prod next) (let ()
(set! next prod)
) (void))
(_break)
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! pow (* pow 10))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if countOnly (let ()
(_return (hash "bc" count "next" next))
) (void))
(_return (hash "bc" brilliant "next" next))
))
)
(define (main)
  (let/ec _return (begin
(displayln "First 100 brilliant numbers:")
(define r (getBrilliant 2 10000 #f))
(define br (sortInts (if r (hash-ref r "bc" #f) #f)))
(set! br (sublist br 0 100))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? br) (string-length br)] [(hash? br) (hash-count br)] [else (length br)])) (let ()
    (displayln (string-join (map (lambda (x) (format "~a" x)) (list (string-append (pad-start (format "~a" (if br (list-ref br (int i)) #f)) 4 " ") " ") #f)) " "))
    (if (equal? (modulo (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 10) 0) (let ()
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "" #t)) " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "" #t)) " "))
(define k 1)
(let/ec _break (let loop ()
  (if (<= k 13) (let ()
    (define limit (expt 10 k))
    (define r2 (getBrilliant k limit #t))
    (define total (if r2 (hash-ref r2 "bc" #f) #f))
    (define next (if r2 (hash-ref r2 "next" #f) #f))
    (define climit (commatize limit))
    (define ctotal (commatize (let ([__l total] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define cnext (commatize next))
    (displayln (string-append (string-append (string-append (string-append (string-append "First >= " (pad-start climit 18 " ")) " is ") (pad-start ctotal 14 " ")) " in the series: ") (pad-start cnext 18 " ")))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
