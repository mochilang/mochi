;; Generated by Mochi 0.10.40 on 2025-07-25 21:58 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (poly p)
  (let/ec _return (begin
(define s "")
(define coef 1)
(define i p)
(if (not (equal? coef 1)) (let ()
(set! s (string-append s (format "~a" coef)))
) (void))
(let/ec _break (let loop ()
  (if (> i 0) (let ()
    (set! s (string-append s "x"))
    (if (not (equal? i 1)) (let ()
(set! s (string-append (string-append s "^") (format "~a" i)))
) (void))
    (set! coef (int (/ (* coef i) (let ([__l (- p i)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (define d coef)
    (if (equal? (modulo (- p (- i 1)) 2) 1) (let ()
(set! d (- d))
) (void))
    (if (< d 0) (let ()
(set! s (string-append (string-append s " - ") (format "~a" (- d))))
) (let ()
(set! s (string-append (string-append s " + ") (format "~a" d)))
))
    (set! i (- i 1))
    (loop)) (void))))
(if (string=? s "") (let ()
(set! s "1")
) (void))
(_return s)
))
)
(define (aks n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(define c n)
(define i 1)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (if (not (equal? (modulo c n) 0)) (let ()
(_return #f)
) (void))
    (set! c (int (/ (* c (- n i)) (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (main)
  (let/ec _return (begin
(define p 0)
(let/ec _break (let loop ()
  (if (<= p 7) (let ()
    (displayln (string-append (string-append (format "~a" p) ":  ") (poly p)))
    (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define first #t)
(set! p 2)
(define line "")
(let/ec _break (let loop ()
  (if (< p 50) (let ()
    (if (aks p) (let ()
(if first (let ()
(set! line (string-append line (format "~a" p)))
(set! first #f)
) (let ()
(set! line (string-append (string-append line " ") (format "~a" p)))
))
) (void))
    (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln line)
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
