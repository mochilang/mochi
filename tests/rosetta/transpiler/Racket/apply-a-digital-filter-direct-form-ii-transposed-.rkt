;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (applyFilter input a b)
  (let/ec _return (begin
(define out (list))
(define scale (/ 1.0 (list-ref a 0)))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? input) (string-length input)] [(hash? input) (hash-count input)] [else (length input)])) (let ()
    (define tmp 0.0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (and (<= j i) (< j (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (let ()
    (set! tmp (let ([__l tmp] [__r (* (list-ref b j) (list-ref input (- i j)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! j 0)
    (let/ec _break (let loop ()
  (if (and (< j i) (< (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))) (let ()
    (set! tmp (- tmp (* (list-ref a (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (list-ref out (- (- i j) 1)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list (* tmp scale))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define a (list 1.0 (- 2.7756e-16) 0.33333333 (- 1.85e-17)))
(define b (list 0.16666667 0.5 0.5 0.16666667))
(define sig (list (- 0.917843918645) 0.141984778794 1.20536903482 0.190286794412 (- 0.662370894973) (- 1.00700480494) (- 0.404707073677) 0.800482325044 0.743500089861 1.01090520172 0.741527555207 0.277841675195 0.400833448236 (- 0.2085993586) (- 0.172842103641) (- 0.134316096293) 0.0259303398477 0.490105989562 0.549391221511 0.9047198589))
(define res (applyFilter sig a b))
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)])) (let ()
    (displayln (list-ref res k))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
