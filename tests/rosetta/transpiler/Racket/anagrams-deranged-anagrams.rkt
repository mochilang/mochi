;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (sortRunes s)
  (let/ec _return (begin
(define arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (set! arr (append arr (list (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define n (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define m 0)
(let/ec _break (let loop ()
  (if (< m n) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- n 1)) (let ()
    (if (string>? (list-ref arr j) (list-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(define tmp (list-ref arr j))
(set! arr (list-set arr j (list-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! arr (list-set arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) tmp))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define out "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! out (string-append out (list-ref arr i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (deranged a b)
  (let/ec _return (begin
(if (not (equal? (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let ()
    (if (string=? (substring a i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (substring b i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (main)
  (let/ec _return (begin
(define words (list "constitutionalism" "misconstitutional"))
(define m (hash))
(define bestLen 0)
(define w1 "")
(define w2 "")
(let/ec _break (for ([w words] #:unless (<= (cond [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)]) bestLen))
  (let/ec _cont
(define k (sortRunes w))
(if (not (hash-has-key? m k)) (let ()
(set! m (hash-set (or m (hash)) k (list w)))
(_cont)
) (void))
(let/ec _break (for ([c (if m (hash-ref m k #f) #f)])
  (let/ec _cont
(if (deranged w c) (let ()
(set! bestLen (cond [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)]))
(set! w1 c)
(set! w2 w)
(_break)
) (void))
  )))
(set! m (hash-set (or m (hash)) k (append (if m (hash-ref m k #f) #f) (list w))))
  )))
(displayln (string-append (string-append (string-append (string-append w1 " ") w2) " : Length ") (format "~a" bestLen)))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
