;; Generated by Mochi 0.10.38 on 2025-07-23 16:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (pow_int base exp)
  (let/ec _return (begin
(define result 1)
(define b base)
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let ()
    (if (equal? (modulo e 2) 1) (let ()
(set! result (* result b))
) (void))
    (set! b (* b b))
    (set! e (int (quotient e 2)))
    (loop)) (void))))
(_return result)
))
)
(define (pow_big base exp)
  (let/ec _return (begin
(define result 1)
(define b base)
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let ()
    (if (equal? (modulo e 2) 1) (let ()
(set! result (* result b))
) (void))
    (set! b (* b b))
    (set! e (int (quotient e 2)))
    (loop)) (void))))
(_return result)
))
)
(define e1 (pow_int 3 2))
(define e2 (pow_int 4 e1))
(define base 5)
(define x (pow_big base e2))
(define s (format "~a" x))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "5^(4^(3^2)) has" (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) "digits:" (substring s 0 20) "..." (substring s (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 20) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))) " "))
