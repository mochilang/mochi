;; Generated by Mochi 0.10.42 on 2025-07-27 22:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (isPrime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(if (equal? (modulo n 2) 0) (let ()
(_return (equal? n 2))
) (void))
(if (equal? (modulo n 3) 0) (let ()
(_return (equal? n 3))
) (void))
(define d 5)
(let/ec _break (let loop ()
  (if (<= (* d d) n) (let ()
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (firstPrimeFactor n)
  (let/ec _return (begin
(if (equal? n 1) (let ()
(_return 1)
) (void))
(if (equal? (modulo n 3) 0) (let ()
(_return 3)
) (void))
(if (equal? (modulo n 5) 0) (let ()
(_return 5)
) (void))
(define inc (list 4 2 4 2 4 6 2 6))
(define k 7)
(define i 0)
(let/ec _break (let loop ()
  (if (<= (* k k) n) (let ()
    (if (equal? (modulo n k) 0) (let ()
(_return k)
) (void))
    (set! k (let ([__l k] [__r (if inc (list-ref inc (int i)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (modulo (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? inc) (string-length inc)] [(hash? inc) (hash-count inc)] [else (length inc)])))
    (loop)) (void))))
(_return n)
))
)
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (padLeft n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (formatFloat f prec)
  (let/ec _return (begin
(define s (format "~a" f))
(define idx (indexOf s "."))
(if (< idx 0) (let ()
(_return s)
) (void))
(define need (let ([__l (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r prec]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (> (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) need) (let ()
(_return (substring s 0 need))
) (void))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define blum (list))
(define counts (list 0 0 0 0))
(define digits (list 1 3 7 9))
(define i 1)
(define bc 0)
(let/ec _break (let loop ()
  (if #t (let ()
    (define p (firstPrimeFactor i))
    (if (equal? (modulo p 4) 3) (let ()
(define q (int (quotient i p)))
(if (and (and (not (equal? q p)) (equal? (modulo q 4) 3)) (isPrime q)) (let ()
(if (< bc 50) (let ()
(set! blum (append blum (list i)))
) (void))
(define d (modulo i 10))
(if (equal? d 1) (let ()
(set! counts (list-set counts (int 0) (let ([__l (if counts (list-ref counts (int 0)) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(if (equal? d 3) (let ()
(set! counts (list-set counts (int 1) (let ([__l (if counts (list-ref counts (int 1)) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(if (equal? d 7) (let ()
(set! counts (list-set counts (int 2) (let ([__l (if counts (list-ref counts (int 2)) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(if (equal? d 9) (let ()
(set! counts (list-set counts (int 3) (let ([__l (if counts (list-ref counts (int 3)) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
))
))
))
(set! bc (let ([__l bc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? bc 50) (let ()
(displayln "First 50 Blum integers:")
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx 50) (let ()
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 10) (let ()
    (set! line (string-append (string-append line (padLeft (if blum (list-ref blum (int idx)) #f) 3)) " "))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln (substring line 0 (- (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 1)))
    (loop)) (void))))
(_break)
) (void))
) (void))
) (void))
    (if (equal? (modulo i 5) 3) (let ()
(set! i (let ([__l i] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
