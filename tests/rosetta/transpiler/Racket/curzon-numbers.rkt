;; Generated by Mochi 0.10.42 on 2025-07-28 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (padLeft n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (modPow base exp mod)
  (let/ec _return (begin
(define result (modulo 1 mod))
(define b (modulo base mod))
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let ()
    (if (equal? (modulo e 2) 1) (let ()
(set! result (modulo (* result b) mod))
) (void))
    (set! b (modulo (* b b) mod))
    (set! e (quotient e 2))
    (loop)) (void))))
(_return result)
))
)
(define (main)
  (let/ec _return (begin
(define k 2)
(let/ec _break (let loop ()
  (if (<= k 10) (let ()
    (displayln (string-append (string-append "The first 50 Curzon numbers using a base of " (format "~a" k)) " :"))
    (define count 0)
    (define n 1)
    (define curzon50 (list))
    (let/ec _break (let loop ()
  (if #t (let ()
    (define d (let ([__l (* k n)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo (let ([__l (modPow k n d)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) d) 0) (let ()
(if (< count 50) (let ()
(set! curzon50 (append curzon50 (list n)))
) (void))
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? count 50) (let ()
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? curzon50) (string-length curzon50)] [(hash? curzon50) (hash-count curzon50)] [else (length curzon50)])) (let ()
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 10) (let ()
    (set! line (string-append (string-append line (padLeft (if curzon50 (list-ref curzon50 (int idx)) #f) 4)) " "))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln (substring line 0 (- (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 1)))
    (loop)) (void))))
) (void))
(if (equal? count 1000) (let ()
(displayln (string-append "\nOne thousandth: " (format "~a" n)))
(_break)
) (void))
) (void))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln "")
    (set! k (let ([__l k] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
