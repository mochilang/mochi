;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (pow10 n)
  (let/ec _return (begin
(define r 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! r (* r 10.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return r)
))
)
(define (powf base exp)
  (let/ec _return (begin
(if (equal? exp 0.5) (let ()
(define guess base)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let ()
    (set! guess (/ (let ([__l guess] [__r (/ base guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
) (void))
(define result 1.0)
(define n (int exp))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (formatFloat f prec)
  (let/ec _return (begin
(define scale (pow10 prec))
(define scaled (let ([__l (* f scale)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define n (int scaled))
(define digits (format "~a" n))
(let/ec _break (let loop ()
  (if (<= (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) prec) (let ()
    (set! digits (string-append "0" digits))
    (loop)) (void))))
(define intPart (substring digits 0 (- (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) prec)))
(define fracPart (substring digits (- (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) prec) (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])))
(_return (string-append (string-append intPart ".") fracPart))
))
)
(define (padLeft s w)
  (let/ec _return (begin
(define res "")
(define n (- w (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(let/ec _break (let loop ()
  (if (> n 0) (let ()
    (set! res (string-append res " "))
    (set! n (- n 1))
    (loop)) (void))))
(_return (string-append res s))
))
)
(define (rowString row)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let ()
    (set! s (string-append s (padLeft (formatFloat (if row (list-ref row (int i)) #f) 3) 6)))
    (if (< i (- (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)]) 1)) (let ()
(set! s (string-append s " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append s "] "))
))
)
(define (printMatrix heading m)
  (let/ec _return (begin
(displayln heading)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let ()
    (displayln (rowString (if m (list-ref m (int i)) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (elementWiseMM m1 m2 f)
  (let/ec _return (begin
(define z (list))
(define r 0)
(let/ec _break (let loop ()
  (if (< r (cond [(string? m1) (string-length m1)] [(hash? m1) (hash-count m1)] [else (length m1)])) (let ()
    (define row (list))
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c (cond [(string? (if m1 (list-ref m1 (int r)) #f)) (string-length (if m1 (list-ref m1 (int r)) #f))] [(hash? (if m1 (list-ref m1 (int r)) #f)) (hash-count (if m1 (list-ref m1 (int r)) #f))] [else (length (if m1 (list-ref m1 (int r)) #f))])) (let ()
    (set! row (append row (list (f (if (if m1 (list-ref m1 (int r)) #f) (list-ref (if m1 (list-ref m1 (int r)) #f) (int c)) #f) (if (if m2 (list-ref m2 (int r)) #f) (list-ref (if m2 (list-ref m2 (int r)) #f) (int c)) #f)))))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! z (append z (list row)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return z)
))
)
(define (elementWiseMS m s f)
  (let/ec _return (begin
(define z (list))
(define r 0)
(let/ec _break (let loop ()
  (if (< r (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let ()
    (define row (list))
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c (cond [(string? (if m (list-ref m (int r)) #f)) (string-length (if m (list-ref m (int r)) #f))] [(hash? (if m (list-ref m (int r)) #f)) (hash-count (if m (list-ref m (int r)) #f))] [else (length (if m (list-ref m (int r)) #f))])) (let ()
    (set! row (append row (list (f (if (if m (list-ref m (int r)) #f) (list-ref (if m (list-ref m (int r)) #f) (int c)) #f) s))))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! z (append z (list row)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return z)
))
)
(define (add a b)
  (let/ec _return (begin
(_return (let ([__l a] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (sub a b)
  (let/ec _return (begin
(_return (- a b))
))
)
(define (mul a b)
  (let/ec _return (begin
(_return (* a b))
))
)
(define (div a b)
  (let/ec _return (begin
(_return (/ a b))
))
)
(define (exp a b)
  (let/ec _return (begin
(_return (powf a b))
))
)
(define (main)
  (let/ec _return (begin
(define m1 (list (list 3.0 1.0 4.0) (list 1.0 5.0 9.0)))
(define m2 (list (list 2.0 7.0 1.0) (list 8.0 2.0 8.0)))
(printMatrix "m1:" m1)
(printMatrix "m2:" m2)
(displayln "")
(printMatrix "m1 + m2:" (elementWiseMM m1 m2 add))
(printMatrix "m1 - m2:" (elementWiseMM m1 m2 sub))
(printMatrix "m1 * m2:" (elementWiseMM m1 m2 mul))
(printMatrix "m1 / m2:" (elementWiseMM m1 m2 div))
(printMatrix "m1 ^ m2:" (elementWiseMM m1 m2 exp))
(displayln "")
(define s 0.5)
(displayln (string-append "s: " (format "~a" s)))
(printMatrix "m1 + s:" (elementWiseMS m1 s add))
(printMatrix "m1 - s:" (elementWiseMS m1 s sub))
(printMatrix "m1 * s:" (elementWiseMS m1 s mul))
(printMatrix "m1 / s:" (elementWiseMS m1 s div))
(printMatrix "m1 ^ s:" (elementWiseMS m1 s exp))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
