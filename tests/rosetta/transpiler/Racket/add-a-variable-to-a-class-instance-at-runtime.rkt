;; Generated by Mochi 0.10.37 on 2025-07-23 13:56 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (main)
  (let/ec _return (begin
(define ss (hash "runtimeFields" (hash)))
(displayln "Create two fields at runtime: \n")
(define i 1)
(let/ec _break (let loop ()
  (if (<= i 2) (let ()
    (displayln (string-append (string-append "  Field #" (format "~a" i)) ":\n"))
    (displayln "       Enter name  : ")
    (define name (input))
    (displayln "       Enter value : ")
    (define value (input))
    (define fields (hash-ref ss "runtimeFields"))
    (set! fields (hash-set fields name value))
    (set! ss (hash-set ss "runtimeFields" fields))
    (displayln "\n")
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if #t (let ()
    (displayln "Which field do you want to inspect ? ")
    (define name (input))
    (if (hash-has-key? (hash-ref ss "runtimeFields") name) (let ()
(define value (hash-ref (hash-ref ss "runtimeFields") name))
(displayln (string-append (string-append "Its value is '" value) "'"))
(_return void)
) (let ()
(displayln "There is no field of that name, try again\n")
))
    (loop)) (void))))
))
)
(main)
