;; Generated by Mochi 0.10.55 on 2025-08-03 09:40 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define months (hash "January" 1 "February" 2 "March" 3 "April" 4 "May" 5 "June" 6 "July" 7 "August" 8 "September" 9 "October" 10 "November" 11 "December" 12))
(define (isLeap y)
  (let/ec _return (begin
(if (equal? (modulo y 400) 0) (let ()
(_return #t)
) (void))
(if (equal? (modulo y 100) 0) (let ()
(_return #f)
) (void))
(_return (equal? (modulo y 4) 0))
))
)
(define (daysInMonth y m)
  (let/ec _return (begin
(define feb (if (isLeap y) 29 28))
(define lengths (list 31 feb 31 30 31 30 31 31 30 31 30 31))
(_return (if lengths (if (hash? lengths) (hash-ref lengths (- m 1) #f) (list-ref lengths (int (- m 1)))) #f))
))
)
(define (daysBeforeYear y)
  (let/ec _return (begin
(define days 0)
(define yy 1970)
(let/ec _break (let loop ()
  (if (< yy y) (let ()
    (set! days (let ([__l days] [__r 365]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (isLeap yy) (let ()
(set! days (let ([__l days] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! yy (let ([__l yy] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return days)
))
)
(define (daysBeforeMonth y m)
  (let/ec _return (begin
(define days 0)
(define mm 1)
(let/ec _break (let loop ()
  (if (< mm m) (let ()
    (set! days (let ([__l days] [__r (daysInMonth y mm)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! mm (let ([__l mm] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return days)
))
)
(define (epochSeconds y m d h mi)
  (let/ec _return (begin
(define days (let ([__l (let ([__l (daysBeforeYear y)] [__r (daysBeforeMonth y m)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (- d 1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (let ([__l (let ([__l (* days 86400)] [__r (* h 3600)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* mi 60)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (fromEpoch sec)
  (let/ec _return (begin
(define days (quotient sec 86400))
(define rem (modulo sec 86400))
(define y 1970)
(let/ec _break (let loop ()
  (if #t (let ()
    (define dy (if (isLeap y) 366 365))
    (if (>= days dy) (let ()
(set! days (- days dy))
(set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(_break)
))
    (loop)) (void))))
(define m 1)
(let/ec _break (let loop ()
  (if #t (let ()
    (define dim (daysInMonth y m))
    (if (>= days dim) (let ()
(set! days (- days dim))
(set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(_break)
))
    (loop)) (void))))
(define d (let ([__l days] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define h (quotient rem 3600))
(define mi (quotient (modulo rem 3600) 60))
(_return (list y m d h mi))
))
)
(define (pad2 n)
  (let/ec _return (begin
(if (< n 10) (let ()
(_return (string-append "0" (format "~a" n)))
) (void))
(_return (format "~a" n))
))
)
(define (absInt n)
  (let/ec _return (begin
(if (< n 0) (let ()
(_return (- n))
) (void))
(_return n)
))
)
(define (formatDate parts offset abbr)
  (let/ec _return (begin
(define y (if parts (if (hash? parts) (hash-ref parts 0 #f) (list-ref parts (int 0))) #f))
(define m (if parts (if (hash? parts) (hash-ref parts 1 #f) (list-ref parts (int 1))) #f))
(define d (if parts (if (hash? parts) (hash-ref parts 2 #f) (list-ref parts (int 2))) #f))
(define h (if parts (if (hash? parts) (hash-ref parts 3 #f) (list-ref parts (int 3))) #f))
(define mi (if parts (if (hash? parts) (hash-ref parts 4 #f) (list-ref parts (int 4))) #f))
(define sign "+")
(if (< offset 0) (let ()
(set! sign "-")
) (void))
(define off (quotient (absInt offset) 60))
(define offh (pad2 (quotient off 60)))
(define offm (pad2 (modulo off 60)))
(_return (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" y) "-") (pad2 m)) "-") (pad2 d)) " ") (pad2 h)) ":") (pad2 mi)) ":00 ") sign) offh) offm) " ") abbr))
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (slice str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (slice str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (parseTime s)
  (let/ec _return (begin
(define c (index-of s ":"))
(define h (_parse-int-str (slice s 0 c) 10))
(define mi (_parse-int-str (slice s (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l c] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 10))
(define ampm (slice s (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 2) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(define hh h)
(if (and (string=? ampm "pm") (not (equal? h 12))) (let ()
(set! hh (let ([__l h] [__r 12]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (and (string=? ampm "am") (equal? h 12)) (let ()
(set! hh 0)
) (void))
(_return (list hh mi))
))
)
(define (main)
  (let/ec _return (begin
(define input "March 7 2009 7:30pm EST")
(displayln (string-append "Input:              " input))
(define parts (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? input) (string-length input)] [(hash? input) (hash-count input)] [else (length input)])) (let ()
    (define ch (slice input i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch " ") (let ()
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! parts (append parts (list cur)))
(set! cur "")
) (void))
) (let ()
(set! cur (string-append cur ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! parts (append parts (list cur)))
) (void))
(define month (if months (hash-ref months (if parts (if (hash? parts) (hash-ref parts 0 #f) (list-ref parts (int 0))) #f) #f) #f))
(define day (_parse-int-str (if parts (if (hash? parts) (hash-ref parts 1 #f) (list-ref parts (int 1))) #f) 10))
(define year (_parse-int-str (if parts (if (hash? parts) (hash-ref parts 2 #f) (list-ref parts (int 2))) #f) 10))
(define tm (parseTime (if parts (if (hash? parts) (hash-ref parts 3 #f) (list-ref parts (int 3))) #f)))
(define hour (if tm (if (hash? tm) (hash-ref tm 0 #f) (list-ref tm (int 0))) #f))
(define minute (if tm (if (hash? tm) (hash-ref tm 1 #f) (list-ref tm (int 1))) #f))
(define tz (if parts (if (hash? parts) (hash-ref parts 4 #f) (list-ref parts (int 4))) #f))
(define zoneOffsets (hash "EST" (- 18000) "EDT" (- 14400) "MST" (- 25200)))
(define local (epochSeconds year month day hour minute))
(define utc (- local (if zoneOffsets (hash-ref zoneOffsets tz #f) #f)))
(define utc12 (let ([__l utc] [__r 43200]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define startDST (epochSeconds 2009 3 8 7 0))
(define offEast (- 18000))
(if (>= utc12 startDST) (let ()
(set! offEast (- 14400))
) (void))
(define eastParts (fromEpoch (let ([__l utc12] [__r offEast]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define eastAbbr "EST")
(if (equal? offEast (- 14400)) (let ()
(set! eastAbbr "EDT")
) (void))
(displayln (string-append "+12 hrs:            " (formatDate eastParts offEast eastAbbr)))
(define offAZ (- 25200))
(define azParts (fromEpoch (let ([__l utc12] [__r offAZ]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(displayln (string-append "+12 hrs in Arizona: " (formatDate azParts offAZ "MST")))
))
)
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
