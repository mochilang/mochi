;; Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (log10floor n)
  (let/ec _return (begin
(define p 0)
(define v n)
(let/ec _break (let loop ()
  (if (>= v 10) (let ()
    (set! v (int (quotient v 10)))
    (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return p)
))
)
(define (commatize n)
  (let/ec _return (begin
(define s (format "~a" n))
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (> i 0) (equal? (modulo (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) i) 3) 0)) (let ()
(set! res (string-append res ","))
) (void))
    (set! res (string-append res (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (showDistribution sizes)
  (let/ec _return (begin
(define bins (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 12) (let ()
    (set! bins (append bins (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define total 0)
(let/ec _break (for ([sz sizes])
  (let/ec _cont
(set! total (let ([__l total] [__r sz]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define idx 0)
(if (> sz 0) (let ()
(set! idx (let ([__l (log10floor sz)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(set! bins (list-set bins (int idx) (let ([__l (if bins (list-ref bins (int idx)) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
  )))
(displayln "File size distribution:\n")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bins) (string-length bins)] [(hash? bins) (hash-count bins)] [else (length bins)])) (let ()
    (define prefix "  ")
    (if (> i 0) (let ()
(set! prefix "+ ")
) (void))
    (displayln (string-append (string-append (string-append (string-append prefix "Files less than 10 ^ ") (format "~a" i)) " bytes : ") (format "~a" (if bins (list-ref bins (int i)) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "                                  -----")
(displayln (string-append "= Total number of files         : " (format "~a" (cond [(string? sizes) (string-length sizes)] [(hash? sizes) (hash-count sizes)] [else (length sizes)]))))
(displayln (string-append (string-append "  Total size of files           : " (commatize total)) " bytes"))
))
)
(define (main)
  (let/ec _return (begin
(define sizes (list 0 1 9 10 99 100 1234 50000 730000 8200000))
(showDistribution sizes)
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
