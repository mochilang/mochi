;; Generated by Mochi 0.10.40 on 2025-07-25 20:07 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (pow_big base exp)
  (let/ec _return (begin
(define result 1)
(define b base)
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let ()
    (if (equal? (modulo e 2) 1) (let ()
(set! result (* result b))
) (void))
    (set! b (* b b))
    (set! e (int (quotient e 2)))
    (loop)) (void))))
(_return result)
))
)
(define (bit_len x)
  (let/ec _return (begin
(define n x)
(define c 0)
(let/ec _break (let loop ()
  (if (> n 0) (let ()
    (set! n (quotient n 2))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return c)
))
)
(define err "")
(define (ackermann2 m n)
  (let/ec _return (begin
(if (not (string=? err "")) (let ()
(_return 0)
) (void))
(if (<= m 3) (let ()
(define mi (int m))
(if (equal? mi 0) (let ()
(_return (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (equal? mi 1) (let ()
(_return (let ([__l n] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (equal? mi 2) (let ()
(_return (let ([__l (* 2 n)] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (equal? mi 3) (let ()
(define nb (bit_len n))
(if (> nb 64) (let ()
(set! err (string-append (string-append "A(m,n) had n of " (format "~a" nb)) " bits; too large"))
(_return 0)
) (void))
(define r (pow_big 2 (int n)))
(_return (- (* 8 r) 3))
) (void))
) (void))
(if (equal? (bit_len n) 0) (let ()
(_return (ackermann2 (- m 1) 1))
) (void))
(_return (ackermann2 (- m 1) (ackermann2 m (- n 1))))
))
)
(define (show m n)
  (let/ec _return (begin
(set! err "")
(define res (ackermann2 m n))
(if (not (string=? err "")) (let ()
(displayln (string-append (string-append (string-append (string-append (string-append "A(" (format "~a" m)) ", ") (format "~a" n)) ") = Error: ") err))
(_return void)
) (void))
(if (<= (bit_len res) 256) (let ()
(displayln (string-append (string-append (string-append (string-append (string-append "A(" (format "~a" m)) ", ") (format "~a" n)) ") = ") (format "~a" res)))
) (let ()
(define s (format "~a" res))
(define pre (substring s 0 20))
(define suf (substring s (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 20) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "A(" (format "~a" m)) ", ") (format "~a" n)) ") = ") (format "~a" (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) " digits starting/ending with: ") pre) "...") suf))
))
))
)
(define (main)
  (let/ec _return (begin
(show 0 0)
(show 1 2)
(show 2 4)
(show 3 100)
(show 3 1000000)
(show 4 1)
(show 4 2)
(show 4 3)
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
