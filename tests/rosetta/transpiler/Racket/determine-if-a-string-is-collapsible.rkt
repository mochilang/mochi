;; Generated by Mochi 0.10.55 on 2025-08-03 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (collapse s)
  (let/ec _return (begin
(define i 0)
(define prev "")
(define res "")
(define orig (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (not (string=? ch prev)) (let ()
(set! res (string-append res ch))
(set! prev ch)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list res orig (cond [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)])))
))
)
(define (main)
  (let/ec _return (begin
(define strings (list "" "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln " "..111111111111111111111111111111111111111111111111111111111111111777888" "I never give 'em hell, I just tell the truth, and they think it's hell. " "                                                   ---  Harry S Truman " "The better the 4-wheel drive, the further you'll be from help when ya get stuck!" "headmistressship" "aardvark" "😍😀🙌💃😍😍😍🙌"))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? strings) (string-length strings)] [(hash? strings) (hash-count strings)] [else (length strings)])) (let/ec _cont
    (define s (if strings (if (hash? strings) (hash-ref strings idx #f) (list-ref strings (int idx))) #f))
    (define r (collapse s))
    (define cs (if r (if (hash? r) (hash-ref r 0 #f) (list-ref r (int 0))) #f))
    (define olen (if r (if (hash? r) (hash-ref r 1 #f) (list-ref r (int 1))) #f))
    (define clen (if r (if (hash? r) (hash-ref r 2 #f) (list-ref r (int 2))) #f))
    (displayln (string-append (string-append (string-append (string-append "original : length = " (format "~a" olen)) ", string = «««") s) "»»»"))
    (displayln (string-append (string-append (string-append (string-append "collapsed: length = " (format "~a" clen)) ", string = «««") cs) "»»»\n"))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
