;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (absi x)
  (let/ec _return (begin
(if (< x 0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (bresenham x0 y0 x1 y1)
  (let/ec _return (begin
(define dx (absi (- x1 x0)))
(define dy (absi (- y1 y0)))
(define sx (- 1))
(if (< x0 x1) (let ()
(set! sx 1)
) (void))
(define sy (- 1))
(if (< y0 y1) (let ()
(set! sy 1)
) (void))
(define err (- dx dy))
(define pts (list))
(let/ec _break (let loop ()
  (if #t (let ()
    (set! pts (append pts (list (hash "x" x0 "y" y0))))
    (if (and (equal? x0 x1) (equal? y0 y1)) (let ()
(_break)
) (void))
    (define e2 (* 2 err))
    (if (> e2 (- dy)) (let ()
(set! err (- err dy))
(set! x0 (let ([__l x0] [__r sx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (if (< e2 dx) (let ()
(set! err (let ([__l err] [__r dx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! y0 (let ([__l y0] [__r sy]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (loop)) (void))))
(_return pts)
))
)
(define (main)
  (let/ec _return (begin
(define pts (bresenham 0 0 6 4))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? pts) (string-length pts)] [(hash? pts) (hash-count pts)] [else (length pts)])) (let ()
    (define p (list-ref pts i))
    (displayln (string-append (string-append (string-append (string-append "(" (format "~a" (if p (hash-ref p "x" #f) #f))) ",") (format "~a" (if p (hash-ref p "y" #f) #f))) ")"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
