;; Generated by Mochi 0.10.47 on 2025-07-28 11:49 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (quibble items)
  (let/ec _return (begin
(define n (cond [(string? items) (string-length items)] [(hash? items) (hash-count items)] [else (length items)]))
(if (equal? n 0) (let ()
(_return "{}")
) (let ()
(if (equal? n 1) (let ()
(_return (string-append (string-append "{" (if items (list-ref items (int 0)) #f)) "}"))
) (let ()
(if (equal? n 2) (let ()
(_return (string-append (string-append (string-append (string-append "{" (if items (list-ref items (int 0)) #f)) " and ") (if items (list-ref items (int 1)) #f)) "}"))
) (let ()
(define prefix "")
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (- n 1))
(if (equal? i (- n 1)) (let ()
(_break)
) (void))
(if (> i 0) (let ()
(set! prefix (string-append prefix ", "))
) (void))
(set! prefix (string-append prefix (if items (list-ref items (int i)) #f)))
      (set! i (+ i 1))
      (loop)))
))
(_return (string-append (string-append (string-append (string-append "{" prefix) " and ") (if items (list-ref items (int (- n 1))) #f)) "}"))
))
))
))
))
)
(define (main)
  (let/ec _return (begin
(displayln (quibble (list)))
(displayln (quibble (list "ABC")))
(displayln (quibble (list "ABC" "DEF")))
(displayln (quibble (list "ABC" "DEF" "G" "H")))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
