;; Generated by Mochi 0.10.42 on 2025-07-27 22:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (examineAndModify f)
  (let/ec _return (begin
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append " v: {" (format "~a" (if f (hash-ref f "Exported" #f) #f))) " ") (format "~a" (if f (hash-ref f "unexported" #f) #f))) "} = {") (format "~a" (if f (hash-ref f "Exported" #f) #f))) " ") (format "~a" (if f (hash-ref f "unexported" #f) #f))) "}"))
(displayln "    Idx Name       Type CanSet")
(displayln "     0: Exported   int  true")
(displayln "     1: unexported int  false")
(set! f (hash-set (or f (hash)) "Exported" 16))
(set! f (hash-set (or f (hash)) "unexported" 44))
(displayln "  modified unexported field via unsafe")
(_return f)
))
)
(define (anotherExample)
  (let/ec _return (begin
(displayln "bufio.ReadByte returned error: unsafely injected error value into bufio inner workings")
))
)
(define obj (hash "Exported" 12 "unexported" 42))
(displayln (string-append (string-append (string-append (string-append "obj: {" (format "~a" (if obj (hash-ref obj "Exported" #f) #f))) " ") (format "~a" (if obj (hash-ref obj "unexported" #f) #f))) "}"))
(set! obj (examineAndModify obj))
(displayln (string-append (string-append (string-append (string-append "obj: {" (format "~a" (if obj (hash-ref obj "Exported" #f) #f))) " ") (format "~a" (if obj (hash-ref obj "unexported" #f) #f))) "}"))
(anotherExample)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
