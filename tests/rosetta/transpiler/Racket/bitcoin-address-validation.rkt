;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (set58 addr)
  (let/ec _return (begin
(define tmpl "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
(define a (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 25) (let ()
    (set! a (append a (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? addr) (string-length addr)] [(hash? addr) (hash-count addr)] [else (length addr)])) (let ()
    (define ch (substring addr idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define c (indexOf tmpl ch))
    (if (< c 0) (let ()
(_return (list))
) (void))
    (define j 24)
    (let/ec _break (let loop ()
  (if (>= j 0) (let ()
    (set! c (let ([__l c] [__r (* 58 (list-ref a j))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! a (list-set a j (modulo c 256)))
    (set! c (int (quotient c 256)))
    (set! j (- j 1))
    (loop)) (void))))
    (if (> c 0) (let ()
(_return (list))
) (void))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return a)
))
)
(define (doubleSHA256 bs)
  (let/ec _return (begin
(define first (sha256 bs))
(_return (sha256 first))
))
)
(define (computeChecksum a)
  (let/ec _return (begin
(define hash (doubleSHA256 (sublist a 0 21)))
(_return (sublist hash 0 4))
))
)
(define (validA58 addr)
  (let/ec _return (begin
(define a (set58 addr))
(if (not (equal? (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 25)) (let ()
(_return #f)
) (void))
(if (not (equal? (list-ref a 0) 0)) (let ()
(_return #f)
) (void))
(define sum (computeChecksum a))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 4) (let ()
    (if (not (equal? (list-ref a (let ([__l 21] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (list-ref sum i))) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(displayln (format "~a" (validA58 "1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")))
(displayln (format "~a" (validA58 "17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")))
