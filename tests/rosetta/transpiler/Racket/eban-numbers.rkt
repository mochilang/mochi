;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define vals (list 0 2 4 6 30 32 34 36 40 42 44 46 50 52 54 56 60 62 64 66))
(define billions (list 0 2 4 6))
(define (ebanNumbers start stop)
  (let/ec _return (begin
(define nums (list))
(let/ec _break (for ([b billions])
  (let/ec _cont
(let/ec _break (for ([m vals])
  (let/ec _cont
(let/ec _break (for ([t vals])
  (let/ec _cont
(let/ec _break (for ([r vals])
  (let/ec _cont
(define n (let ([__l (let ([__l (let ([__l (* b 1000000000)] [__r (* m 1000000)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* t 1000)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r r]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (and (>= n start) (<= n stop)) (let ()
(set! nums (append nums (list n)))
) (void))
  )))
  )))
  )))
  )))
(_return nums)
))
)
(define (countEban start stop)
  (let/ec _return (begin
(define count 0)
(let/ec _break (for ([b billions])
  (let/ec _cont
(let/ec _break (for ([m vals])
  (let/ec _cont
(let/ec _break (for ([t vals])
  (let/ec _cont
(let/ec _break (for ([r vals])
  (let/ec _cont
(define n (let ([__l (let ([__l (let ([__l (* b 1000000000)] [__r (* m 1000000)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* t 1000)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r r]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (and (>= n start) (<= n stop)) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
  )))
  )))
  )))
  )))
(_return count)
))
)
(define (main)
  (let/ec _return (begin
(define ranges (list (list 2 1000 #t) (list 1000 4000 #t) (list 2 10000 #f) (list 2 100000 #f) (list 2 1000000 #f) (list 2 10000000 #f) (list 2 100000000 #f) (list 2 1000000000 #f)))
(let/ec _break (for ([rg ranges])
  (let/ec _cont
(define start (int (if rg (list-ref rg (int 0)) #f)))
(define stop (int (if rg (list-ref rg (int 1)) #f)))
(define show (if rg (list-ref rg (int 2)) #f))
(if (equal? start 2) (let ()
(displayln (string-append (string-append "eban numbers up to and including " (format "~a" stop)) ":"))
) (let ()
(displayln (string-append (string-append (string-append (string-append "eban numbers between " (format "~a" start)) " and ") (format "~a" stop)) " (inclusive):"))
))
(if show (let ()
(define nums (ebanNumbers start stop))
(define line "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
    (set! line (string-append (string-append line (format "~a" (if nums (list-ref nums (int i)) #f))) " "))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(displayln (substring line 0 (- (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 1)))
) (void))
) (void))
(define c (countEban start stop))
(displayln (string-append (string-append "count = " (format "~a" c)) "\n"))
  )))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
