;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (nextRand seed)
  (let/ec _return (begin
(_return (modulo (let ([__l (* seed 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
))
)
(define (shuffleChars s seed)
  (let/ec _return (begin
(define chars (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (set! chars (append chars (list (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define sd seed)
(define idx (- (cond [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)]) 1))
(let/ec _break (let loop ()
  (if (> idx 0) (let ()
    (set! sd (nextRand sd))
    (define j (modulo sd (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define tmp (list-ref chars idx))
    (set! chars (list-set chars idx (list-ref chars j)))
    (set! chars (list-set chars j tmp))
    (set! idx (- idx 1))
    (loop)) (void))))
(define res "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)])) (let ()
    (set! res (string-append res (list-ref chars i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list res sd))
))
)
(define (bestShuffle s seed)
  (let/ec _return (begin
(define r (shuffleChars s seed))
(define t (list-ref r 0))
(define sd (list-ref r 1))
(define arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? t) (string-length t)] [(hash? t) (hash-count t)] [else (length t)])) (let ()
    (set! arr (append arr (list (substring t i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let ()
    (if (and (and (not (equal? i j)) (not (equal? (list-ref arr i) (substring s j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))) (not (equal? (list-ref arr j) (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))) (let ()
(define tmp (list-ref arr i))
(set! arr (list-set arr i (list-ref arr j)))
(set! arr (list-set arr j tmp))
(_break)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define count 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let ()
    (if (equal? (list-ref arr i) (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define out "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let ()
    (set! out (string-append out (list-ref arr i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list out sd count))
))
)
(define (main)
  (let/ec _return (begin
(define ts (list "abracadabra" "seesaw" "elk" "grrrrrr" "up" "a"))
(define seed 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? ts) (string-length ts)] [(hash? ts) (hash-count ts)] [else (length ts)])) (let ()
    (define r (bestShuffle (list-ref ts i) seed))
    (define shuf (list-ref r 0))
    (set! seed (list-ref r 1))
    (define cnt (list-ref r 2))
    (displayln (string-append (string-append (string-append (string-append (string-append (list-ref ts i) " -> ") shuf) " (") (format "~a" cnt)) ")"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
