;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let ()
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (powf base exp)
  (let/ec _return (begin
(define result 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let ()
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (normalize v)
  (let/ec _return (begin
(define len (sqrtApprox (let ([__l (let ([__l (* (if v (hash-ref v "x" #f) #f) (if v (hash-ref v "x" #f) #f))] [__r (* (if v (hash-ref v "y" #f) #f) (if v (hash-ref v "y" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (if v (hash-ref v "z" #f) #f) (if v (hash-ref v "z" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(_return (hash "x" (/ (if v (hash-ref v "x" #f) #f) len) "y" (/ (if v (hash-ref v "y" #f) #f) len) "z" (/ (if v (hash-ref v "z" #f) #f) len)))
))
)
(define (dot a b)
  (let/ec _return (begin
(define d (let ([__l (let ([__l (* (if a (hash-ref a "x" #f) #f) (if b (hash-ref b "x" #f) #f))] [__r (* (if a (hash-ref a "y" #f) #f) (if b (hash-ref b "y" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (if a (hash-ref a "z" #f) #f) (if b (hash-ref b "z" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (< d 0.0) (let ()
(_return (- d))
) (void))
(_return 0.0)
))
)
(define (drawSphere r k ambient light shades)
  (let/ec _return (begin
(define i (- r))
(let/ec _break (let loop ()
  (if (<= i r) (let ()
    (define x (let ([__l (exact->inexact i)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define line "")
    (define j (- (* 2 r)))
    (let/ec _break (let loop ()
  (if (<= j (* 2 r)) (let ()
    (define y (let ([__l (/ (exact->inexact j) 2.0)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (<= (let ([__l (* x x)] [__r (* y y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (* (exact->inexact r) (exact->inexact r))) (let ()
(define zsq (- (- (* (exact->inexact r) (exact->inexact r)) (* x x)) (* y y)))
(define vec (normalize (hash "x" x "y" y "z" (sqrtApprox zsq))))
(define b (let ([__l (powf (dot light vec) k)] [__r ambient]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define intensity (int (* (- 1.0 b) (- (exact->inexact (cond [(string? shades) (string-length shades)] [(hash? shades) (hash-count shades)] [else (length shades)])) 1.0))))
(if (< intensity 0) (let ()
(set! intensity 0)
) (void))
(if (>= intensity (cond [(string? shades) (string-length shades)] [(hash? shades) (hash-count shades)] [else (length shades)])) (let ()
(set! intensity (- (cond [(string? shades) (string-length shades)] [(hash? shades) (hash-count shades)] [else (length shades)]) 1))
) (void))
(set! line (string-append line (substring shades intensity (let ([__l intensity] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (let ()
(set! line (string-append line " "))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(define shades ".:!*oe&#%@")
(define light (normalize (hash "x" 30.0 "y" 30.0 "z" (- 50.0))))
(drawSphere 20 4 0.1 light shades)
(drawSphere 10 2 0.4 light shades)
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
