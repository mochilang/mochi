;; Generated by Mochi 0.10.50 on 2025-07-30 23:37 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define INF 1000000)
(define (floydWarshall graph)
  (let/ec _return (begin
(define n (cond [(string? graph) (string-length graph)] [(hash? graph) (hash-count graph)] [else (length graph)]))
(define dist (list))
(define next (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (define drow (list))
    (define nrow (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let ()
    (set! drow (append drow (list (if (if graph (list-ref graph (int i)) #f) (list-ref (if graph (list-ref graph (int i)) #f) (int j)) #f))))
    (if (and (< (if (if graph (list-ref graph (int i)) #f) (list-ref (if graph (list-ref graph (int i)) #f) (int j)) #f) INF) (not (equal? i j))) (let ()
(set! nrow (append nrow (list j)))
) (let ()
(set! nrow (append nrow (list (- 1))))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! dist (append dist (list drow)))
    (set! next (append next (list nrow)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define k 0)
(let/ec _break (let loop ()
  (if (< k n) (let ()
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i n) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let ()
    (if (and (< (if (if dist (list-ref dist (int i)) #f) (list-ref (if dist (list-ref dist (int i)) #f) (int k)) #f) INF) (< (if (if dist (list-ref dist (int k)) #f) (list-ref (if dist (list-ref dist (int k)) #f) (int j)) #f) INF)) (let ()
(define alt (let ([__l (if (if dist (list-ref dist (int i)) #f) (list-ref (if dist (list-ref dist (int i)) #f) (int k)) #f)] [__r (if (if dist (list-ref dist (int k)) #f) (list-ref (if dist (list-ref dist (int k)) #f) (int j)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (< alt (if (if dist (list-ref dist (int i)) #f) (list-ref (if dist (list-ref dist (int i)) #f) (int j)) #f)) (let ()
(set! dist (list-set dist i (list-set (list-ref dist i) j alt)))
(set! next (list-set next i (list-set (list-ref next i) j (if (if next (list-ref next (int i)) #f) (list-ref (if next (list-ref next (int i)) #f) (int k)) #f))))
) (void))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "dist" dist "next" next))
))
)
(define (path u v next)
  (let/ec _return (begin
(if (< (if (if next (list-ref next (int u)) #f) (list-ref (if next (list-ref next (int u)) #f) (int v)) #f) 0) (let ()
(_return (list))
) (void))
(define p (list u))
(define x u)
(let/ec _break (let loop ()
  (if (not (equal? x v)) (let ()
    (set! x (if (if next (list-ref next (int x)) #f) (list-ref (if next (list-ref next (int x)) #f) (int v)) #f))
    (set! p (append p (list x)))
    (loop)) (void))))
(_return p)
))
)
(define (pathStr p)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)])) (let ()
    (set! s (string-append s (format "~a" (let ([__l (if p (list-ref p (int i)) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (if (< i (- (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)]) 1)) (let ()
(set! s (string-append s " -> "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define n 4)
(define g (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i n)
(define row (list))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j n)
(if (equal? i j) (let ()
(set! row (append row (list 0)))
) (let ()
(set! row (append row (list INF)))
))
      (set! j (+ j 1))
      (loop)))
))
(set! g (append g (list row)))
      (set! i (+ i 1))
      (loop)))
))
(set! g (list-set g 0 (list-set (list-ref g 0) 2 (- 2))))
(set! g (list-set g 2 (list-set (list-ref g 2) 3 2)))
(set! g (list-set g 3 (list-set (list-ref g 3) 1 (- 1))))
(set! g (list-set g 1 (list-set (list-ref g 1) 0 4)))
(set! g (list-set g 1 (list-set (list-ref g 1) 2 3)))
(define res (floydWarshall g))
(displayln "pair\tdist\tpath")
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let ()
    (if (not (equal? i j)) (let ()
(define p (path i j (if res (hash-ref res "next" #f) #f)))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " -> ") (format "~a" (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) "\t") (format "~a" (if (if (if res (hash-ref res "dist" #f) #f) (list-ref (if res (hash-ref res "dist" #f) #f) (int i)) #f) (list-ref (if (if res (hash-ref res "dist" #f) #f) (list-ref (if res (hash-ref res "dist" #f) #f) (int i)) #f) (int j)) #f))) "\t") (pathStr p)))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
