;; Generated by Mochi 0.10.38 on 2025-07-23 16:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (concatInts a b)
  (let/ec _return (begin
(define out (list))
(for ([v a])
(set! out (append out (list v)))
)
(for ([v b])
(set! out (append out (list v)))
)
(_return out)
))
)
(define (concatAny a b)
  (let/ec _return (begin
(define out (list))
(for ([v a])
(set! out (append out (list v)))
)
(for ([v b])
(set! out (append out (list v)))
)
(_return out)
))
)
(define a (list 1 2 3))
(define b (list 7 12 60))
(displayln (format "~a" (concatInts a b)))
(define i (list 1 2 3))
(define j (list "Crosby" "Stills" "Nash" "Young"))
(displayln (format "~a" (concatAny i j)))
(define l (list 1 2 3))
(define m (list 7 12 60))
(displayln (format "~a" (concatInts l m)))
