;; Generated by Mochi 0.10.55 on 2025-08-03 07:58 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define seed 1)
(define (randN n)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
(_return (modulo seed n))
))
)
(define (newField w h)
  (let/ec _return (begin
(define rows (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let ()
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let ()
    (set! row (append row (list #f)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! rows (append rows (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "s" rows "w" w "h" h))
))
)
(define (setCell f x y b)
  (let/ec _return (begin
(define rows (if f (hash-ref f "s" #f) #f))
(define row (if rows (if (hash? rows) (hash-ref rows y #f) (list-ref rows (int y))) #f))
(set! row (list-set row (int x) b))
(set! rows (list-set rows (int y) row))
(set! f (hash-set (or f (hash)) "s" rows))
))
)
(define (state f x y)
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (< y 0) (let ()
    (set! y (let ([__l y] [__r (if f (hash-ref f "h" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (< x 0) (let ()
    (set! x (let ([__l x] [__r (if f (hash-ref f "w" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (if (if (if f (hash-ref f "s" #f) #f) (if (hash? (if f (hash-ref f "s" #f) #f)) (hash-ref (if f (hash-ref f "s" #f) #f) (modulo y (if f (hash-ref f "h" #f) #f)) #f) (list-ref (if f (hash-ref f "s" #f) #f) (int (modulo y (if f (hash-ref f "h" #f) #f))))) #f) (if (hash? (if (if f (hash-ref f "s" #f) #f) (if (hash? (if f (hash-ref f "s" #f) #f)) (hash-ref (if f (hash-ref f "s" #f) #f) (modulo y (if f (hash-ref f "h" #f) #f)) #f) (list-ref (if f (hash-ref f "s" #f) #f) (int (modulo y (if f (hash-ref f "h" #f) #f))))) #f)) (hash-ref (if (if f (hash-ref f "s" #f) #f) (if (hash? (if f (hash-ref f "s" #f) #f)) (hash-ref (if f (hash-ref f "s" #f) #f) (modulo y (if f (hash-ref f "h" #f) #f)) #f) (list-ref (if f (hash-ref f "s" #f) #f) (int (modulo y (if f (hash-ref f "h" #f) #f))))) #f) (modulo x (if f (hash-ref f "w" #f) #f)) #f) (list-ref (if (if f (hash-ref f "s" #f) #f) (if (hash? (if f (hash-ref f "s" #f) #f)) (hash-ref (if f (hash-ref f "s" #f) #f) (modulo y (if f (hash-ref f "h" #f) #f)) #f) (list-ref (if f (hash-ref f "s" #f) #f) (int (modulo y (if f (hash-ref f "h" #f) #f))))) #f) (int (modulo x (if f (hash-ref f "w" #f) #f))))) #f))
))
)
(define (nextState f x y)
  (let/ec _return (begin
(define count 0)
(define dy (- 1))
(let/ec _break (let loop ()
  (if (<= dy 1) (let ()
    (define dx (- 1))
    (let/ec _break (let loop ()
  (if (<= dx 1) (let ()
    (if (and (not (and (equal? dx 0) (equal? dy 0))) (state f (let ([__l x] [__r dx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l y] [__r dy]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! dx (let ([__l dx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! dy (let ([__l dy] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (or (equal? count 3) (and (equal? count 2) (state f x y))))
))
)
(define (newLife w h)
  (let/ec _return (begin
(define a (newField w h))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (quotient (* w h) 2)) (let ()
    (setCell a (randN w) (randN h) #t)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "a" a "b" (newField w h) "w" w "h" h))
))
)
(define (step l)
  (let/ec _return (begin
(define y 0)
(let/ec _break (let loop ()
  (if (< y (if l (hash-ref l "h" #f) #f)) (let ()
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x (if l (hash-ref l "w" #f) #f)) (let ()
    (setCell (if l (hash-ref l "b" #f) #f) x y (nextState (if l (hash-ref l "a" #f) #f) x y))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define tmp (if l (hash-ref l "a" #f) #f))
(set! l (hash-set (or l (hash)) "a" (if l (hash-ref l "b" #f) #f)))
(set! l (hash-set (or l (hash)) "b" tmp))
))
)
(define (lifeString l)
  (let/ec _return (begin
(define out "")
(define y 0)
(let/ec _break (let loop ()
  (if (< y (if l (hash-ref l "h" #f) #f)) (let ()
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x (if l (hash-ref l "w" #f) #f)) (let ()
    (if (state (if l (hash-ref l "a" #f) #f) x y) (let ()
(set! out (string-append out "*"))
) (let ()
(set! out (string-append out " "))
))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (string-append out "\n"))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define l (newLife 80 15))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 300) (let ()
    (step l)
    (displayln "\f")
    (displayln (lifeString l))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
