;; Generated by Mochi 0.10.39 on 2025-07-24 20:52 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (trimSpace s)
  (let/ec _return (begin
(define start 0)
(let/ec _break (let loop ()
  (if (and (< start (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (string=? (substring s start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ")) (let ()
    (set! start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define end (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(let/ec _break (let loop ()
  (if (and (> end start) (string=? (substring s (- end 1) end) " ")) (let ()
    (set! end (- end 1))
    (loop)) (void))))
(_return (substring s start end))
))
)
(define (isUpper ch)
  (let/ec _return (begin
(_return (and (string>=? ch "A") (string<=? ch "Z")))
))
)
(define (padLeft s w)
  (let/ec _return (begin
(define res "")
(define n (- w (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(let/ec _break (let loop ()
  (if (> n 0) (let ()
    (set! res (string-append res " "))
    (set! n (- n 1))
    (loop)) (void))))
(_return (string-append res s))
))
)
(define (snakeToCamel s)
  (let/ec _return (begin
(set! s (trimSpace s))
(define out "")
(define up #f)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (or (or (string=? ch "_") (string=? ch "-")) (string=? ch " ")) (string=? ch ".")) (let ()
(set! up #t)
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if (equal? i 0) (let ()
(set! out (string-append out (lower ch)))
(set! up #f)
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if up (let ()
(set! out (string-append out (upper ch)))
(set! up #f)
) (let ()
(set! out (string-append out ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (camelToSnake s)
  (let/ec _return (begin
(set! s (trimSpace s))
(define out "")
(define prevUnd #f)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (or (string=? ch " ") (string=? ch "-")) (string=? ch ".")) (let ()
(if (and (not prevUnd) (> (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) 0)) (let ()
(set! out (string-append out "_"))
(set! prevUnd #t)
) (void))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if (string=? ch "_") (let ()
(if (and (not prevUnd) (> (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) 0)) (let ()
(set! out (string-append out "_"))
(set! prevUnd #t)
) (void))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if (isUpper ch) (let ()
(if (and (> i 0) (not prevUnd)) (let ()
(set! out (string-append out "_"))
) (void))
(set! out (string-append out (lower ch)))
(set! prevUnd #f)
) (let ()
(set! out (string-append out (lower ch)))
(set! prevUnd #f)
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define start 0)
(let/ec _break (let loop ()
  (if (and (< start (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)])) (string=? (substring out start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "_")) (let ()
    (set! start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define end (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]))
(let/ec _break (let loop ()
  (if (and (> end start) (string=? (substring out (- end 1) end) "_")) (let ()
    (set! end (- end 1))
    (loop)) (void))))
(set! out (substring out start end))
(define res "")
(define j 0)
(define lastUnd #f)
(let/ec _break (let loop ()
  (if (< j (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)])) (let ()
    (define c (substring out j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? c "_") (let ()
(if (not lastUnd) (let ()
(set! res (string-append res c))
) (void))
(set! lastUnd #t)
) (let ()
(set! res (string-append res c))
(set! lastUnd #f)
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (main)
  (let/ec _return (begin
(define samples (list "snakeCase" "snake_case" "snake-case" "snake case" "snake CASE" "snake.case" "variable_10_case" "variable10Case" "É›rgo rE tHis" "hurry-up-joe!" "c://my-docs/happy_Flag-Day/12.doc" " spaces "))
(displayln "=== To snake_case ===")
(for ([s samples])
(displayln (string-append (string-append (padLeft s 34) " => ") (camelToSnake s)))
)
(displayln "")
(displayln "=== To camelCase ===")
(for ([s samples])
(displayln (string-append (string-append (padLeft s 34) " => ") (snakeToCamel s)))
)
))
)
(main)
