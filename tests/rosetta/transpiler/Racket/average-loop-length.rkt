;; Generated by Mochi 0.10.39 on 2025-07-24 13:16 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (absf x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (floorf x)
  (let/ec _return (begin
(_return (exact->inexact (int x)))
))
)
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (fmtF x)
  (let/ec _return (begin
(define y (/ (floorf (let ([__l (* x 10000.0)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 10000.0))
(define s (format "~a" y))
(define dot (indexOf s "."))
(if (equal? dot (- 0 1)) (let ()
(set! s (string-append s ".0000"))
) (let ()
(define decs (- (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) dot) 1))
(if (> decs 4) (let ()
(set! s (substring s 0 (let ([__l dot] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(let/ec _break (let loop ()
  (if (< decs 4) (let ()
    (set! s (string-append s "0"))
    (set! decs (let ([__l decs] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
))
(_return s)
))
)
(define (padInt n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (padFloat x width)
  (let/ec _return (begin
(define s (fmtF x))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (avgLen n)
  (let/ec _return (begin
(define tests 10000)
(define sum 0)
(define seed 1)
(define t 0)
(let/ec _break (let loop ()
  (if (< t tests) (let ()
    (define visited (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! visited (append visited (list #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define x 0)
    (let/ec _break (let loop ()
  (if (not (list-ref visited x)) (let ()
    (set! visited (list-set visited x #t))
    (set! sum (let ([__l sum] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! seed (modulo (let ([__l (* seed 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
    (set! x (modulo seed n))
    (loop)) (void))))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (/ (exact->inexact sum) tests))
))
)
(define (ana n)
  (let/ec _return (begin
(define nn (exact->inexact n))
(define term 1.0)
(define sum 1.0)
(define i (- nn 1.0))
(let/ec _break (let loop ()
  (if (>= i 1.0) (let ()
    (set! term (* term (/ i nn)))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (- i 1.0))
    (loop)) (void))))
(_return sum)
))
)
(define (main)
  (let/ec _return (begin
(define nmax 20)
(displayln " N    average    analytical    (error)")
(displayln "===  =========  ============  =========")
(define n 1)
(let/ec _break (let loop ()
  (if (<= n nmax) (let ()
    (define a (avgLen n))
    (define b (ana n))
    (define err (* (/ (absf (- a b)) b) 100.0))
    (define line (string-append (string-append (string-append (string-append (string-append (string-append (string-append (padInt n 3) "  ") (padFloat a 9)) "  ") (padFloat b 12)) "  (") (padFloat err 6)) "%)"))
    (displayln line)
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
