;; Generated by Mochi 0.10.55 on 2025-08-02 23:42 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (br n d)
  (let/ec _return (begin
(_return (/ n d))
))
)
(define testCases (list (list (hash "a" 1 "n" 1 "d" 2) (hash "a" 1 "n" 1 "d" 3)) (list (hash "a" 2 "n" 1 "d" 3) (hash "a" 1 "n" 1 "d" 7)) (list (hash "a" 4 "n" 1 "d" 5) (hash "a" (- 1) "n" 1 "d" 239)) (list (hash "a" 5 "n" 1 "d" 7) (hash "a" 2 "n" 3 "d" 79)) (list (hash "a" 1 "n" 1 "d" 2) (hash "a" 1 "n" 1 "d" 5) (hash "a" 1 "n" 1 "d" 8)) (list (hash "a" 4 "n" 1 "d" 5) (hash "a" (- 1) "n" 1 "d" 70) (hash "a" 1 "n" 1 "d" 99)) (list (hash "a" 5 "n" 1 "d" 7) (hash "a" 4 "n" 1 "d" 53) (hash "a" 2 "n" 1 "d" 4443)) (list (hash "a" 6 "n" 1 "d" 8) (hash "a" 2 "n" 1 "d" 57) (hash "a" 1 "n" 1 "d" 239)) (list (hash "a" 8 "n" 1 "d" 10) (hash "a" (- 1) "n" 1 "d" 239) (hash "a" (- 4) "n" 1 "d" 515)) (list (hash "a" 12 "n" 1 "d" 18) (hash "a" 8 "n" 1 "d" 57) (hash "a" (- 5) "n" 1 "d" 239)) (list (hash "a" 16 "n" 1 "d" 21) (hash "a" 3 "n" 1 "d" 239) (hash "a" 4 "n" 3 "d" 1042)) (list (hash "a" 22 "n" 1 "d" 28) (hash "a" 2 "n" 1 "d" 443) (hash "a" (- 5) "n" 1 "d" 1393) (hash "a" (- 10) "n" 1 "d" 11018)) (list (hash "a" 22 "n" 1 "d" 38) (hash "a" 17 "n" 7 "d" 601) (hash "a" 10 "n" 7 "d" 8149)) (list (hash "a" 44 "n" 1 "d" 57) (hash "a" 7 "n" 1 "d" 239) (hash "a" (- 12) "n" 1 "d" 682) (hash "a" 24 "n" 1 "d" 12943)) (list (hash "a" 88 "n" 1 "d" 172) (hash "a" 51 "n" 1 "d" 239) (hash "a" 32 "n" 1 "d" 682) (hash "a" 44 "n" 1 "d" 5357) (hash "a" 68 "n" 1 "d" 12943)) (list (hash "a" 88 "n" 1 "d" 172) (hash "a" 51 "n" 1 "d" 239) (hash "a" 32 "n" 1 "d" 682) (hash "a" 44 "n" 1 "d" 5357) (hash "a" 68 "n" 1 "d" 12944))))
(define (format_ ts)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? ts) (string-length ts)] [(hash? ts) (hash-count ts)] [else (length ts)])) (let ()
    (define t (if ts (if (hash? ts) (hash-ref ts i #f) (list-ref ts (int i))) #f))
    (set! s (string-append (string-append (string-append (string-append (string-append (string-append (string-append s "{") (format "~a" (if t (hash-ref t "a" #f) #f))) " ") (format "~a" (if t (hash-ref t "n" #f) #f))) " ") (format "~a" (if t (hash-ref t "d" #f) #f))) "}"))
    (if (< i (- (cond [(string? ts) (string-length ts)] [(hash? ts) (hash-count ts)] [else (length ts)]) 1)) (let ()
(set! s (string-append s " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append s "]"))
))
)
(define (tanEval coef f)
  (let/ec _return (begin
(if (equal? coef 1) (let ()
(_return f)
) (void))
(if (< coef 0) (let ()
(_return (- (tanEval (- coef) f)))
) (void))
(define ca (quotient coef 2))
(define cb (- coef ca))
(define a (tanEval ca f))
(define b (tanEval cb f))
(_return (/ (let ([__l a] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- 1 (* a b))))
))
)
(define (tans m)
  (let/ec _return (begin
(if (equal? (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]) 1) (let ()
(define t (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))
(_return (tanEval (if t (hash-ref t "a" #f) #f) (br (if t (hash-ref t "n" #f) #f) (if t (hash-ref t "d" #f) #f))))
) (void))
(define half (quotient (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]) 2))
(define a (tans (slice m 0 half)))
(define b (tans (slice m half (length m))))
(_return (/ (let ([__l a] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- 1 (* a b))))
))
)
(let/ec _break (for ([ts testCases])
  (let/ec _cont
(displayln (string-append (string-append (string-append "tan " (format_ ts)) " = ") (format "~a" (tans ts))))
  )))
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
