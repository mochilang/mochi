;; Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define glyphs "♜♞♝♛♚♖♘♗♕♔")
(define g2lMap (hash "♜" "R" "♞" "N" "♝" "B" "♛" "Q" "♚" "K" "♖" "R" "♘" "N" "♗" "B" "♕" "Q" "♔" "K"))
(define names (hash "R" "rook" "N" "knight" "B" "bishop" "Q" "queen" "K" "king"))
(define ntable (hash "01" 0 "02" 1 "03" 2 "04" 3 "12" 4 "13" 5 "14" 6 "23" 7 "24" 8 "34" 9))
(define (indexOf s sub)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) (cond [(string? sub) (string-length sub)] [(hash? sub) (hash-count sub)] [else (length sub)]))) (let ()
    (if (string=? (slice s i (let ([__l i] [__r (cond [(string? sub) (string-length sub)] [(hash? sub) (hash-count sub)] [else (length sub)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sub) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (strReplace s old new)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (and (> (cond [(string? old) (string-length old)] [(hash? old) (hash-count old)] [else (length old)]) 0) (<= (let ([__l i] [__r (cond [(string? old) (string-length old)] [(hash? old) (hash-count old)] [else (length old)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) (string=? (slice s i (let ([__l i] [__r (cond [(string? old) (string-length old)] [(hash? old) (hash-count old)] [else (length old)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) old)) (let ()
(set! res (string-append res new))
(set! i (let ([__l i] [__r (cond [(string? old) (string-length old)] [(hash? old) (hash-count old)] [else (length old)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! res (string-append res (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(_return res)
))
)
(define (g2l pieces)
  (let/ec _return (begin
(define lets "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? pieces) (string-length pieces)] [(hash? pieces) (hash-count pieces)] [else (length pieces)])) (let ()
    (define ch (slice pieces i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! lets (string-append lets (if g2lMap (hash-ref g2lMap ch #f) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return lets)
))
)
(define (spid pieces)
  (let/ec _return (begin
(set! pieces (g2l pieces))
(if (not (equal? (cond [(string? pieces) (string-length pieces)] [(hash? pieces) (hash-count pieces)] [else (length pieces)]) 8)) (let ()
(_return (- 1))
) (void))
(let/ec _break (for ([one (list "K" "Q")])
  (let/ec _cont
(define count 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? pieces) (string-length pieces)] [(hash? pieces) (hash-count pieces)] [else (length pieces)])) (let ()
    (if (string=? (slice pieces i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) one) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (not (equal? count 1)) (let ()
(_return (- 1))
) (void))
  )))
(let/ec _break (for ([two (list "R" "N" "B")])
  (let/ec _cont
(define count 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? pieces) (string-length pieces)] [(hash? pieces) (hash-count pieces)] [else (length pieces)])) (let ()
    (if (string=? (slice pieces i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) two) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (not (equal? count 2)) (let ()
(_return (- 1))
) (void))
  )))
(define r1 (index-of pieces "R"))
(define r2 (let ([__l (let ([__l (index-of (slice pieces (let ([__l r1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? pieces) (string-length pieces)] [(hash? pieces) (hash-count pieces)] [else (length pieces)])) "R")] [__r r1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define k (index-of pieces "K"))
(if (or (< k r1) (> k r2)) (let ()
(_return (- 1))
) (void))
(define b1 (index-of pieces "B"))
(define b2 (let ([__l (let ([__l (index-of (slice pieces (let ([__l b1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? pieces) (string-length pieces)] [(hash? pieces) (hash-count pieces)] [else (length pieces)])) "B")] [__r b1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? (modulo (- b2 b1) 2) 0) (let ()
(_return (- 1))
) (void))
(define piecesN (strReplace pieces "Q" ""))
(set! piecesN (strReplace piecesN "B" ""))
(define n1 (index-of piecesN "N"))
(define n2 (let ([__l (let ([__l (index-of (slice piecesN (let ([__l n1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? piecesN) (string-length piecesN)] [(hash? piecesN) (hash-count piecesN)] [else (length piecesN)])) "N")] [__r n1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define np (string-append (format "~a" n1) (format "~a" n2)))
(define N (if ntable (hash-ref ntable np #f) #f))
(define piecesQ (strReplace pieces "B" ""))
(define Q (index-of piecesQ "Q"))
(define D (index-of "0246" (format "~a" b1)))
(define L (index-of "1357" (format "~a" b2)))
(if (equal? D (- 0 1)) (let ()
(set! D (index-of "0246" (format "~a" b2)))
(set! L (index-of "1357" (format "~a" b1)))
) (void))
(_return (let ([__l (let ([__l (let ([__l (* 96 N)] [__r (* 16 Q)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* 4 D)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r L]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (main)
  (let/ec _return (begin
(let/ec _break (for ([pieces (list "♕♘♖♗♗♘♔♖" "♖♘♗♕♔♗♘♖" "♖♕♘♗♗♔♖♘" "♖♘♕♗♗♔♖♘")])
  (let/ec _cont
(displayln (string-append (string-append (string-append (string-append pieces " or ") (g2l pieces)) " has SP-ID of ") (format "~a" (spid pieces))))
  )))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
