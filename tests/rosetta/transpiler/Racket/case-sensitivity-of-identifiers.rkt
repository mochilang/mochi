;; Generated by Mochi 0.10.39 on 2025-07-24 20:52 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (main)
  (let/ec _return (begin
(define pkg_dog "Salt")
(define Dog "Pepper")
(define pkg_DOG "Mustard")
(define (packageSees d1 d2 d3)
  (let/ec _return (begin
(displayln (string-append (string-append (string-append (string-append (string-append "Package sees: " d1) " ") d2) " ") d3))
(_return (hash "pkg_dog" #t "Dog" #t "pkg_DOG" #t))
))
)
(define d (packageSees pkg_dog Dog pkg_DOG))
(displayln (string-append (string-append "There are " (format "~a" (cond [(string? d) (string-length d)] [(hash? d) (hash-count d)] [else (length d)]))) " dogs.\n"))
(define dog "Benjamin")
(set! d (packageSees pkg_dog Dog pkg_DOG))
(displayln (string-append (string-append (string-append (string-append (string-append "Main sees:   " dog) " ") Dog) " ") pkg_DOG))
(set! d (hash-set (or d (hash)) "dog" #t))
(set! d (hash-set (or d (hash)) "Dog" #t))
(set! d (hash-set (or d (hash)) "pkg_DOG" #t))
(displayln (string-append (string-append "There are " (format "~a" (cond [(string? d) (string-length d)] [(hash? d) (hash-count d)] [else (length d)]))) " dogs.\n"))
(set! Dog "Samba")
(set! d (packageSees pkg_dog Dog pkg_DOG))
(displayln (string-append (string-append (string-append (string-append (string-append "Main sees:   " dog) " ") Dog) " ") pkg_DOG))
(set! d (hash-set (or d (hash)) "dog" #t))
(set! d (hash-set (or d (hash)) "Dog" #t))
(set! d (hash-set (or d (hash)) "pkg_DOG" #t))
(displayln (string-append (string-append "There are " (format "~a" (cond [(string? d) (string-length d)] [(hash? d) (hash-count d)] [else (length d)]))) " dogs.\n"))
(define DOG "Bernie")
(set! d (packageSees pkg_dog Dog pkg_DOG))
(displayln (string-append (string-append (string-append (string-append (string-append "Main sees:   " dog) " ") Dog) " ") DOG))
(set! d (hash-set (or d (hash)) "dog" #t))
(set! d (hash-set (or d (hash)) "Dog" #t))
(set! d (hash-set (or d (hash)) "pkg_DOG" #t))
(set! d (hash-set (or d (hash)) "DOG" #t))
(displayln (string-append (string-append "There are " (format "~a" (cond [(string? d) (string-length d)] [(hash? d) (hash-count d)] [else (length d)]))) " dogs."))
))
)
(main)
