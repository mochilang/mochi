;; Generated by Mochi 0.10.38 on 2025-07-23 16:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define PI 3.141592653589793)
(define (sinApprox x)
  (let/ec _return (begin
(define term x)
(define sum x)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 10) (let ()
    (define denom (exact->inexact (* (* 2 n) (let ([__l (* 2 n)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! term (/ (* (* (- term) x) x) denom))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (cosApprox x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 10) (let ()
    (define denom (exact->inexact (* (- (* 2 n) 1) (* 2 n))))
    (set! term (/ (* (* (- term) x) x) denom))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define degreesIncr (/ (* 0.1 PI) 180.0))
(define turns 2.0)
(define stop (* (* (* 360.0 turns) 10.0) degreesIncr))
(define width 600.0)
(define centre (/ width 2.0))
(define a 1.0)
(define b 20.0)
(define theta 0.0)
(define count 0)
(let/ec _break (let loop ()
  (if (< theta stop) (let ()
    (define r (let ([__l a] [__r (* b theta)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define x (* r (cosApprox theta)))
    (define y (* r (sinApprox theta)))
    (if (equal? (modulo count 100) 0) (let ()
(displayln (string-append (string-append (format "~a" (let ([__l centre] [__r x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ",") (format "~a" (- centre y))))
) (void))
    (set! theta (let ([__l theta] [__r degreesIncr]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
