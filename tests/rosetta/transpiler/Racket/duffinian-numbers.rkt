;; Generated by Mochi 0.10.54 on 2025-08-02 13:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (gcd a b)
  (let/ec _return (begin
(define x a)
(if (< x 0) (let ()
(set! x (- x))
) (void))
(define y b)
(if (< y 0) (let ()
(set! y (- y))
) (void))
(let/ec _break (let loop ()
  (if (not (equal? y 0)) (let ()
    (define t (modulo x y))
    (set! x y)
    (set! y t)
    (loop)) (void))))
(_return x)
))
)
(define (divisors n)
  (let/ec _return (begin
(define divs (list))
(define i 1)
(let/ec _break (let loop ()
  (if (<= (* i i) n) (let ()
    (if (equal? (modulo n i) 0) (let ()
(set! divs (append divs (list i)))
(define j (int (quotient n i)))
(if (not (equal? i j)) (let ()
(set! divs (append divs (list j)))
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return divs)
))
)
(define (sum xs)
  (let/ec _return (begin
(define s 0)
(let/ec _break (for ([v xs])
  (let/ec _cont
(set! s (let ([__l s] [__r v]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
  )))
(_return s)
))
)
(define (isDuffinian n)
  (let/ec _return (begin
(define divs (divisors n))
(if (<= (cond [(string? divs) (string-length divs)] [(hash? divs) (hash-count divs)] [else (length divs)]) 2) (let ()
(_return #f)
) (void))
(define sigma (apply + divs))
(_return (equal? (gcd sigma n) 1))
))
)
(define (pad n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (printTable nums perRow width)
  (let/ec _return (begin
(define i 0)
(define line "")
(let/ec _break (let loop ()
  (if (< i (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
    (set! line (string-append (string-append line " ") (pad (if nums (list-ref nums (int i)) #f) width)))
    (if (equal? (modulo (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) perRow) 0) (let ()
(displayln (slice line 1 (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)])))
(set! line "")
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(displayln (slice line 1 (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)])))
) (void))
))
)
(define (main)
  (let/ec _return (begin
(define duff (list))
(define n 1)
(let/ec _break (let loop ()
  (if (< (cond [(string? duff) (string-length duff)] [(hash? duff) (hash-count duff)] [else (length duff)]) 50) (let ()
    (if (isDuffinian n) (let ()
(set! duff (append duff (list n)))
) (void))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "First 50 Duffinian numbers:")
(printTable duff 10 3)
(define triplets (list))
(set! n 1)
(let/ec _break (let loop ()
  (if (< (cond [(string? triplets) (string-length triplets)] [(hash? triplets) (hash-count triplets)] [else (length triplets)]) 20) (let ()
    (if (and (and (isDuffinian n) (isDuffinian (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (isDuffinian (let ([__l n] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(set! triplets (append triplets (list (string-append (string-append (string-append (string-append (string-append (string-append "(" (format "~a" n)) ",") (format "~a" (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) ",") (format "~a" (let ([__l n] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) ")"))))
(set! n (let ([__l n] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "\nFirst 20 Duffinian triplets:")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? triplets) (string-length triplets)] [(hash? triplets) (hash-count triplets)] [else (length triplets)])) (let ()
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (and (< j 4) (< i (cond [(string? triplets) (string-length triplets)] [(hash? triplets) (hash-count triplets)] [else (length triplets)]))) (let ()
    (set! line (string-append line (padStr (if triplets (list-ref triplets (int i)) #f) 16)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (loop)) (void))))
))
)
(define (padStr s width)
  (let/ec _return (begin
(define res s)
(let/ec _break (let loop ()
  (if (< (cond [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) width) (let ()
    (set! res (string-append res " "))
    (loop)) (void))))
(_return res)
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
