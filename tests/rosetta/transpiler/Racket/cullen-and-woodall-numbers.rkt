;; Generated by Mochi 0.10.42 on 2025-07-28 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (pow_big base exp)
  (let/ec _return (begin
(define result 1)
(define b base)
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let ()
    (if (equal? (modulo e 2) 1) (let ()
(set! result (* result b))
) (void))
    (set! b (* b b))
    (set! e (int (quotient e 2)))
    (loop)) (void))))
(_return result)
))
)
(define (cullen n)
  (let/ec _return (begin
(define two_n (pow_big 2 n))
(_return (let ([__l (* two_n n)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (woodall n)
  (let/ec _return (begin
(_return (- (cullen n) 2))
))
)
(define (show_list xs)
  (let/ec _return (begin
(define line "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (set! line (string-append line (format "~a" (if xs (list-ref xs (int i)) #f))))
    (if (< i (- (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)) (let ()
(set! line (string-append line " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return line)
))
)
(define (main)
  (let/ec _return (begin
(define cnums (list))
(define i 1)
(let/ec _break (let loop ()
  (if (<= i 20) (let ()
    (set! cnums (append cnums (list (cullen i))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "First 20 Cullen numbers (n * 2^n + 1):")
(displayln (show_list cnums))
(define wnums (list))
(set! i 1)
(let/ec _break (let loop ()
  (if (<= i 20) (let ()
    (set! wnums (append wnums (list (woodall i))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "\nFirst 20 Woodall numbers (n * 2^n - 1):")
(displayln (show_list wnums))
(define cprimes (list 1 141 4713 5795 6611))
(displayln "\nFirst 5 Cullen primes (in terms of n):")
(displayln (show_list cprimes))
(define wprimes (list 2 3 6 30 75 81 115 123 249 362 384 462))
(displayln "\nFirst 12 Woodall primes (in terms of n):")
(displayln (show_list wprimes))
))
)
(main)
