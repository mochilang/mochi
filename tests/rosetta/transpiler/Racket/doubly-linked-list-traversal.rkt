;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define nodes (hash))
(define head (- 0 1))
(define tail (- 0 1))
(define (listString)
  (let/ec _return (begin
(if (equal? head (- 0 1)) (let ()
(_return "<nil>")
) (void))
(define r (string-append "[" (if (if nodes (hash-ref nodes head #f) #f) (hash-ref (if nodes (hash-ref nodes head #f) #f) "value" #f) #f)))
(define id (int (if (if nodes (hash-ref nodes head #f) #f) (hash-ref (if nodes (hash-ref nodes head #f) #f) "next" #f) #f)))
(let/ec _break (let loop ()
  (if (not (equal? id (- 0 1))) (let ()
    (set! r (string-append (string-append r " ") (if (if nodes (hash-ref nodes id #f) #f) (hash-ref (if nodes (hash-ref nodes id #f) #f) "value" #f) #f)))
    (set! id (int (if (if nodes (hash-ref nodes id #f) #f) (hash-ref (if nodes (hash-ref nodes id #f) #f) "next" #f) #f)))
    (loop)) (void))))
(set! r (string-append r "]"))
(_return r)
))
)
(displayln (listString))
(set! nodes (hash-set (or nodes (hash)) 0 (hash "value" "A" "next" (- 0 1) "prev" (- 0 1))))
(set! head 0)
(set! tail 0)
(set! nodes (hash-set (or nodes (hash)) 1 (hash "value" "B" "next" (- 0 1) "prev" 0)))
(set! nodes (hash-set nodes 0 (hash-set (hash-ref nodes 0) "next" 1)))
(set! tail 1)
(displayln (listString))
(set! nodes (hash-set (or nodes (hash)) 2 (hash "value" "C" "next" 1 "prev" 0)))
(set! nodes (hash-set nodes 1 (hash-set (hash-ref nodes 1) "prev" 2)))
(set! nodes (hash-set nodes 0 (hash-set (hash-ref nodes 0) "next" 2)))
(displayln (listString))
(define out "From tail:")
(define id tail)
(let/ec _break (let loop ()
  (if (not (equal? id (- 0 1))) (let ()
    (set! out (string-append (string-append out " ") (if (if nodes (hash-ref nodes id #f) #f) (hash-ref (if nodes (hash-ref nodes id #f) #f) "value" #f) #f)))
    (set! id (int (if (if nodes (hash-ref nodes id #f) #f) (hash-ref (if nodes (hash-ref nodes id #f) #f) "prev" #f) #f)))
    (loop)) (void))))
(displayln out)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
