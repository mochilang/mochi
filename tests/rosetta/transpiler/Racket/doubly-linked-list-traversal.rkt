;; Generated by Mochi 0.10.55 on 2025-08-03 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define nodes (hash))
(define head (- 0 1))
(define tail (- 0 1))
(define (listString)
  (let/ec _return (begin
(if (equal? head (- 0 1)) (let ()
(_return "<nil>")
) (void))
(define r (string-append "[" (if (if nodes (hash-ref nodes head #f) #f) (hash-ref (if nodes (hash-ref nodes head #f) #f) "value" #f) #f)))
(define id (int (if (if nodes (hash-ref nodes head #f) #f) (hash-ref (if nodes (hash-ref nodes head #f) #f) "next" #f) #f)))
(let/ec _break (let loop ()
  (if (not (equal? id (- 0 1))) (let/ec _cont
    (set! r (string-append (string-append r " ") (if (if nodes (hash-ref nodes id #f) #f) (hash-ref (if nodes (hash-ref nodes id #f) #f) "value" #f) #f)))
    (set! id (int (if (if nodes (hash-ref nodes id #f) #f) (hash-ref (if nodes (hash-ref nodes id #f) #f) "next" #f) #f)))
    (loop)) (void))))
(set! r (string-append r "]"))
(_return r)
))
)
(displayln (listString))
(set! nodes (hash-set (or nodes (hash)) 0 (hash "value" "A" "next" (- 0 1) "prev" (- 0 1))))
(set! head 0)
(set! tail 0)
(set! nodes (hash-set (or nodes (hash)) 1 (hash "value" "B" "next" (- 0 1) "prev" 0)))
(set! nodes (hash-set nodes 0 (hash-set (hash-ref nodes 0) "next" 1)))
(set! tail 1)
(displayln (listString))
(set! nodes (hash-set (or nodes (hash)) 2 (hash "value" "C" "next" 1 "prev" 0)))
(set! nodes (hash-set nodes 1 (hash-set (hash-ref nodes 1) "prev" 2)))
(set! nodes (hash-set nodes 0 (hash-set (hash-ref nodes 0) "next" 2)))
(displayln (listString))
(define out "From tail:")
(define id tail)
(let/ec _break (let loop ()
  (if (not (equal? id (- 0 1))) (let/ec _cont
    (set! out (string-append (string-append out " ") (if (if nodes (hash-ref nodes id #f) #f) (hash-ref (if nodes (hash-ref nodes id #f) #f) "value" #f) #f)))
    (set! id (int (if (if nodes (hash-ref nodes id #f) #f) (hash-ref (if nodes (hash-ref nodes id #f) #f) "prev" #f) #f)))
    (loop)) (void))))
(displayln out)
