;; Generated by Mochi 0.10.55 on 2025-08-02 23:42 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (isPrime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(if (equal? (modulo n 2) 0) (let ()
(_return (equal? n 2))
) (void))
(if (equal? (modulo n 3) 0) (let ()
(_return (equal? n 3))
) (void))
(define d 5)
(let/ec _break (let loop ()
  (if (<= (* d d) n) (let ()
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (bigTrim a)
  (let/ec _return (begin
(define n (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(let/ec _break (let loop ()
  (if (and (> n 1) (equal? (if a (if (hash? a) (hash-ref a (- n 1) #f) (list-ref a (int (- n 1)))) #f) 0)) (let ()
    (set! a (slice a 0 (- n 1)))
    (set! n (- n 1))
    (loop)) (void))))
(_return a)
))
)
(define (bigFromInt x)
  (let/ec _return (begin
(if (equal? x 0) (let ()
(_return (list 0))
) (void))
(define digits (list))
(define n x)
(let/ec _break (let loop ()
  (if (> n 0) (let ()
    (set! digits (append digits (list (modulo n 10))))
    (set! n (quotient n 10))
    (loop)) (void))))
(_return digits)
))
)
(define (bigMulSmall a m)
  (let/ec _return (begin
(if (equal? m 0) (let ()
(_return (list 0))
) (void))
(define res (list))
(define carry 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let ()
    (define prod (let ([__l (* (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) m)] [__r carry]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! res (append res (list (modulo prod 10))))
    (set! carry (quotient prod 10))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (> carry 0) (let ()
    (set! res (append res (list (modulo carry 10))))
    (set! carry (quotient carry 10))
    (loop)) (void))))
(_return (bigTrim res))
))
)
(define (bigToString a)
  (let/ec _return (begin
(define s "")
(define i (- (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (set! s (string-append s (format "~a" (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f))))
    (set! i (- i 1))
    (loop)) (void))))
(_return s)
))
)
(define (pow2 k)
  (let/ec _return (begin
(define r 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i k) (let ()
    (set! r (* r 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return r)
))
)
(define (ccFactors n m)
  (let/ec _return (begin
(define p (let ([__l (* 6 m)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (not (isPrime p)) (let ()
(_return (list))
) (void))
(define prod (bigFromInt p))
(set! p (let ([__l (* 12 m)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (not (isPrime p)) (let ()
(_return (list))
) (void))
(set! prod (bigMulSmall prod p))
(define i 1)
(let/ec _break (let loop ()
  (if (<= i (- n 2)) (let ()
    (set! p (let ([__l (* (* (pow2 i) 9) m)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (not (isPrime p)) (let ()
(_return (list))
) (void))
    (set! prod (bigMulSmall prod p))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return prod)
))
)
(define (ccNumbers start end)
  (let/ec _return (begin
(define n start)
(let/ec _break (let loop ()
  (if (<= n end) (let ()
    (define m 1)
    (if (> n 4) (let ()
(set! m (pow2 (- n 4)))
) (void))
    (let/ec _break (let loop ()
  (if #t (let ()
    (define num (ccFactors n m))
    (if (> (cond [(string? num) (string-length num)] [(hash? num) (hash-count num)] [else (length num)]) 0) (let ()
(displayln (string-append (string-append (string-append "a(" (format "~a" n)) ") = ") (bigToString num)))
(_break)
) (void))
    (if (<= n 4) (let ()
(set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! m (let ([__l m] [__r (pow2 (- n 4))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(ccNumbers 3 9)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
