;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define n 64)
(define (pow2 k)
  (let/ec _return (begin
(define v 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i k) (let ()
    (set! v (* v 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return v)
))
)
(define (ruleBit ruleNum idx)
  (let/ec _return (begin
(define r ruleNum)
(define i 0)
(let/ec _break (let loop ()
  (if (< i idx) (let ()
    (set! r (quotient r 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (modulo r 2))
))
)
(define (evolve state ruleNum)
  (let/ec _return (begin
(define out (list))
(define p 0)
(let/ec _break (let loop ()
  (if (< p 10) (let ()
    (define b 0)
    (define q 7)
    (let/ec _break (let loop ()
  (if (>= q 0) (let ()
    (define st state)
    (set! b (let ([__l b] [__r (* (if st (list-ref st (int 0)) #f) (pow2 q))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define next (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i n) (let ()
    (define lidx (- i 1))
    (if (< lidx 0) (let ()
(set! lidx (- n 1))
) (void))
    (define left (if st (list-ref st (int lidx)) #f))
    (define center (if st (list-ref st (int i)) #f))
    (define ridx (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (>= ridx n) (let ()
(set! ridx 0)
) (void))
    (define right (if st (list-ref st (int ridx)) #f))
    (define index (let ([__l (let ([__l (* left 4)] [__r (* center 2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r right]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! next (append next (list (ruleBit ruleNum index))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! state next)
    (set! q (- q 1))
    (loop)) (void))))
    (set! out (append out (list b)))
    (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define init (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! init (append init (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! init (list-set init (int 0) 1))
(define bytes (evolve init 30))
(displayln (format "~a" bytes))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
