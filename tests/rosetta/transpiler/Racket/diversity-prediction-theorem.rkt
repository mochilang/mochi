;; Generated by Mochi 0.10.55 on 2025-08-03 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (pow10 n)
  (let/ec _return (begin
(define r 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! r (* r 10.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return r)
))
)
(define (formatFloat f prec)
  (let/ec _return (begin
(define scale (pow10 prec))
(define scaled (let ([__l (* f scale)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define n (int scaled))
(define digits (format "~a" n))
(let/ec _break (let loop ()
  (if (<= (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) prec) (let/ec _cont
    (set! digits (string-append "0" digits))
    (loop)) (void))))
(define intPart (slice digits 0 (- (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) prec)))
(define fracPart (slice digits (- (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) prec) (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])))
(_return (string-append (string-append intPart ".") fracPart))
))
)
(define (padLeft s w)
  (let/ec _return (begin
(define res "")
(define n (- w (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(let/ec _break (let loop ()
  (if (> n 0) (let/ec _cont
    (set! res (string-append res " "))
    (set! n (- n 1))
    (loop)) (void))))
(_return (string-append res s))
))
)
(define (averageSquareDiff f preds)
  (let/ec _return (begin
(define av 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? preds) (string-length preds)] [(hash? preds) (hash-count preds)] [else (length preds)])) (let/ec _cont
    (set! av (let ([__l av] [__r (* (- (if preds (if (hash? preds) (hash-ref preds i #f) (list-ref preds (int i))) #f) f) (- (if preds (if (hash? preds) (hash-ref preds i #f) (list-ref preds (int i))) #f) f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! av (/ av (exact->inexact (cond [(string? preds) (string-length preds)] [(hash? preds) (hash-count preds)] [else (length preds)]))))
(_return av)
))
)
(define (diversityTheorem truth preds)
  (let/ec _return (begin
(define av 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? preds) (string-length preds)] [(hash? preds) (hash-count preds)] [else (length preds)])) (let/ec _cont
    (set! av (let ([__l av] [__r (if preds (if (hash? preds) (hash-ref preds i #f) (list-ref preds (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! av (/ av (exact->inexact (cond [(string? preds) (string-length preds)] [(hash? preds) (hash-count preds)] [else (length preds)]))))
(define avErr (averageSquareDiff truth preds))
(define crowdErr (* (- truth av) (- truth av)))
(define div (averageSquareDiff av preds))
(_return (list avErr crowdErr div))
))
)
(define (main)
  (let/ec _return (begin
(define predsArray (list (list 48.0 47.0 51.0) (list 48.0 47.0 51.0 42.0)))
(define truth 49.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? predsArray) (string-length predsArray)] [(hash? predsArray) (hash-count predsArray)] [else (length predsArray)])) (let/ec _cont
    (define preds (if predsArray (if (hash? predsArray) (hash-ref predsArray i #f) (list-ref predsArray (int i))) #f))
    (define res (diversityTheorem truth preds))
    (displayln (string-append "Average-error : " (padLeft (formatFloat (if res (if (hash? res) (hash-ref res 0 #f) (list-ref res (int 0))) #f) 3) 6)))
    (displayln (string-append "Crowd-error   : " (padLeft (formatFloat (if res (if (hash? res) (hash-ref res 1 #f) (list-ref res (int 1))) #f) 3) 6)))
    (displayln (string-append "Diversity     : " (padLeft (formatFloat (if res (if (hash? res) (hash-ref res 2 #f) (list-ref res (int 2))) #f) 3) 6)))
    (displayln "")
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
