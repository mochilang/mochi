;; Generated by Mochi 0.10.37 on 2025-07-23 10:23 +0700
#lang racket/base
(require racket/list racket/string racket/math json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (input) (read-line))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (sublist str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (+ (* n 10) (hash-ref digits (sublist str i (+ i 1)))))
    (set! i (+ i 1))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (main)
  (let/ec _return (begin
(define total 0)
(define computer (equal? (modulo (now) 2) 0))
(displayln "Enter q to quit at any time\n")
(if computer (let ()
(displayln "The computer will choose first")
) (let ()
(displayln "You will choose first")
))
(displayln "\n\nRunning total is now 0\n\n")
(define round 1)
(define done #f)
(let/ec _break (let loop ()
  (if (not done) (let ()
    (displayln (string-append (string-append "ROUND " (format "~a" round)) ":\n\n"))
    (define i 0)
    (let/ec _break (let loop ()
  (if (and (< i 2) (not done)) (let ()
    (if computer (let ()
(define choice 0)
(if (< total 18) (let ()
(set! choice (+ (modulo (now) 3) 1))
) (let ()
(set! choice (- 21 total))
))
(set! total (+ total choice))
(displayln (string-append "The computer chooses " (format "~a" choice)))
(displayln (string-append "Running total is now " (format "~a" total)))
(if (equal? total 21) (let ()
(displayln "\nSo, commiserations, the computer has won!")
(set! done #t)
) (void))
) (let ()
(let/ec _break (let loop ()
  (if #t (let ()
    (displayln "Your choice 1 to 3 : ")
    (define line (input))
    (if (or (string=? line "q") (string=? line "Q")) (let ()
(displayln "OK, quitting the game")
(set! done #t)
(_break)
) (void))
    (define num (parseIntStr line))
    (if (or (< num 1) (> num 3)) (let ()
(if (> (+ total num) 21) (let ()
(displayln "Too big, try again")
) (let ()
(displayln "Out of range, try again")
))
(loop)
) (void))
    (if (> (+ total num) 21) (let ()
(displayln "Too big, try again")
(loop)
) (void))
    (set! total (+ total num))
    (displayln (string-append "Running total is now " (format "~a" total)))
    (_break)
    (loop)) (void))))
(if (equal? total 21) (let ()
(displayln "\nSo, congratulations, you've won!")
(set! done #t)
) (void))
))
    (displayln "\n")
    (set! computer (not computer))
    (set! i (+ i 1))
    (loop)) (void))))
    (set! round (+ round 1))
    (loop)) (void))))
))
)
(main)
