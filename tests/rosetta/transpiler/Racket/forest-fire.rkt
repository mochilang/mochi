;; Generated by Mochi 0.10.50 on 2025-07-30 23:37 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define rows 20)
(define cols 30)
(define p 0.01)
(define f 0.001)
(define (repeat ch n)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! s (string-append s ch))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (chance prob)
  (let/ec _return (begin
(define threshold (int (* prob 1000.0)))
(_return (< (modulo (now) 1000) threshold))
))
)
(define (newBoard)
  (let/ec _return (begin
(define b (list))
(define r 0)
(let/ec _break (let loop ()
  (if (< r rows) (let ()
    (define row (list))
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c cols) (let ()
    (if (equal? (modulo (now) 2) 0) (let ()
(set! row (append row (list "T")))
) (let ()
(set! row (append row (list " ")))
))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! b (append b (list row)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return b)
))
)
(define (step src)
  (let/ec _return (begin
(define dst (list))
(define r 0)
(let/ec _break (let loop ()
  (if (< r rows) (let ()
    (define row (list))
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c cols) (let ()
    (define cell (if (if src (list-ref src (int r)) #f) (list-ref (if src (list-ref src (int r)) #f) (int c)) #f))
    (define next cell)
    (if (string=? cell "#") (let ()
(set! next " ")
) (let ()
(if (string=? cell "T") (let ()
(define burning #f)
(define dr (- 1))
(let/ec _break (let loop ()
  (if (<= dr 1) (let ()
    (define dc (- 1))
    (let/ec _break (let loop ()
  (if (<= dc 1) (let ()
    (if (or (not (equal? dr 0)) (not (equal? dc 0))) (let ()
(define rr (let ([__l r] [__r dr]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define cc (let ([__l c] [__r dc]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (and (and (and (>= rr 0) (< rr rows)) (>= cc 0)) (< cc cols)) (let ()
(if (string=? (if (if src (list-ref src (int rr)) #f) (list-ref (if src (list-ref src (int rr)) #f) (int cc)) #f) "#") (let ()
(set! burning #t)
) (void))
) (void))
) (void))
    (set! dc (let ([__l dc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! dr (let ([__l dr] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (or burning (chance f)) (let ()
(set! next "#")
) (void))
) (let ()
(if (chance p) (let ()
(set! next "T")
) (void))
))
))
    (set! row (append row (list next)))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! dst (append dst (list row)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return dst)
))
)
(define (printBoard b)
  (let/ec _return (begin
(displayln (string-append (_repeat "__" cols) "\n\n"))
(define r 0)
(let/ec _break (let loop ()
  (if (< r rows) (let ()
    (define line "")
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c cols) (let ()
    (define cell (if (if b (list-ref b (int r)) #f) (list-ref (if b (list-ref b (int r)) #f) (int c)) #f))
    (if (string=? cell " ") (let ()
(set! line (string-append line "  "))
) (let ()
(set! line (string-append (string-append line " ") cell))
))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln (string-append line "\n"))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define board (newBoard))
(printBoard board)
(set! board (step board))
(printBoard board)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
