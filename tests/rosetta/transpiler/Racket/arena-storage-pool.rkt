;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (poolPut p x)
  (let/ec _return (begin
(_return (append p (list x)))
))
)
(define (poolGet p)
  (let/ec _return (begin
(if (equal? (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)]) 0) (let ()
(displayln "pool empty")
(_return (hash "pool" p "val" 0))
) (void))
(define idx (- (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)]) 1))
(define v (list-ref p idx))
(set! p (sublist p 0 idx))
(_return (hash "pool" p "val" v))
))
)
(define (clearPool p)
  (let/ec _return (begin
(_return (list))
))
)
(define (main)
  (let/ec _return (begin
(define pool (list))
(define i 1)
(define j 2)
(displayln (format "~a" (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! pool (poolPut pool i))
(set! pool (poolPut pool j))
(set! i 0)
(set! j 0)
(define res1 (poolGet pool))
(set! pool (if res1 (hash-ref res1 "pool" #f) #f))
(set! i (int (if res1 (hash-ref res1 "val" #f) #f)))
(define res2 (poolGet pool))
(set! pool (if res2 (hash-ref res2 "pool" #f) #f))
(set! j (int (if res2 (hash-ref res2 "val" #f) #f)))
(set! i 4)
(set! j 5)
(displayln (format "~a" (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! pool (poolPut pool i))
(set! pool (poolPut pool j))
(set! i 0)
(set! j 0)
(set! pool (clearPool pool))
(define res3 (poolGet pool))
(set! pool (if res3 (hash-ref res3 "pool" #f) #f))
(set! i (int (if res3 (hash-ref res3 "val" #f) #f)))
(define res4 (poolGet pool))
(set! pool (if res4 (hash-ref res4 "pool" #f) #f))
(set! j (int (if res4 (hash-ref res4 "val" #f) #f)))
(set! i 7)
(set! j 8)
(displayln (format "~a" (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
