;; Generated by Mochi 0.10.55 on 2025-08-03 07:58 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (det m)
  (let/ec _return (begin
(define n (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]))
(if (equal? n 1) (let ()
(_return (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 0))) #f))
) (void))
(define total 0.0)
(define sign 1.0)
(define c 0)
(let/ec _break (let loop ()
  (if (< c n) (let ()
    (define sub (list))
    (define r 1)
    (let/ec _break (let loop ()
  (if (< r n) (let ()
    (define row (list))
    (define cc 0)
    (let/ec _break (let loop ()
  (if (< cc n) (let ()
    (if (not (equal? cc c)) (let ()
(set! row (append row (list (if (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f) (if (hash? (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f) cc #f) (list-ref (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f) (int cc))) #f))))
) (void))
    (set! cc (let ([__l cc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! sub (append sub (list row)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! total (let ([__l total] [__r (* (* sign (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) c #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int c))) #f)) (det sub))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! sign (* sign (- 1.0)))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return total)
))
)
(define (replaceCol m col v)
  (let/ec _return (begin
(define res (list))
(define r 0)
(let/ec _break (let loop ()
  (if (< r (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let ()
    (define row (list))
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c (cond [(string? (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f)) (string-length (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f))] [(hash? (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f)) (hash-count (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f))] [else (length (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f))])) (let ()
    (if (equal? c col) (let ()
(set! row (append row (list (if v (if (hash? v) (hash-ref v r #f) (list-ref v (int r))) #f))))
) (let ()
(set! row (append row (list (if (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f) (if (hash? (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f) c #f) (list-ref (if m (if (hash? m) (hash-ref m r #f) (list-ref m (int r))) #f) (int c))) #f))))
))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define m (list (list 2.0 (- 1.0) 5.0 1.0) (list 3.0 2.0 2.0 (- 6.0)) (list 1.0 3.0 3.0 (- 1.0)) (list 5.0 (- 2.0) (- 3.0) 3.0)))
(define v (list (- 3.0) (- 32.0) (- 47.0) 49.0))
(define d (det m))
(define x (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let ()
    (define mc (replaceCol m i v))
    (set! x (append x (list (/ (det mc) d))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define s "[")
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? x) (string-length x)] [(hash? x) (hash-count x)] [else (length x)])) (let ()
    (set! s (string-append s (format "~a" (if x (if (hash? x) (hash-ref x j #f) (list-ref x (int j))) #f))))
    (if (< j (- (cond [(string? x) (string-length x)] [(hash? x) (hash-count x)] [else (length x)]) 1)) (let ()
(set! s (string-append s " "))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(displayln s)
