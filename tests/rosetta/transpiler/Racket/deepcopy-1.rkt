;; Generated by Mochi 0.10.55 on 2025-08-03 09:40 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (copyList src)
  (let/ec _return (begin
(define out (list))
(let/ec _break (for ([v src])
  (let/ec _cont
(set! out (append out (list v)))
  )))
(_return out)
))
)
(define (copyMap src)
  (let/ec _return (begin
(define out (hash))
(let/ec _break (for ([k (in-hash-keys src)])
  (let/ec _cont
(set! out (hash-set (or out (hash)) k (if src (hash-ref src k #f) #f)))
  )))
(_return out)
))
)
(define (deepcopy c)
  (let/ec _return (begin
(_return (hash "i" (if c (hash-ref c "i" #f) #f) "s" (if c (hash-ref c "s" #f) #f) "b" (copyList (if c (hash-ref c "b" #f) #f)) "m" (copyMap (if c (hash-ref c "m" #f) #f))))
))
)
(define (cdsStr c)
  (let/ec _return (begin
(define bs "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if c (hash-ref c "b" #f) #f)) (string-length (if c (hash-ref c "b" #f) #f))] [(hash? (if c (hash-ref c "b" #f) #f)) (hash-count (if c (hash-ref c "b" #f) #f))] [else (length (if c (hash-ref c "b" #f) #f))])) (let ()
    (set! bs (string-append bs (format "~a" (if (if c (hash-ref c "b" #f) #f) (if (hash? (if c (hash-ref c "b" #f) #f)) (hash-ref (if c (hash-ref c "b" #f) #f) i #f) (list-ref (if c (hash-ref c "b" #f) #f) (int i))) #f))))
    (if (< i (- (cond [(string? (if c (hash-ref c "b" #f) #f)) (string-length (if c (hash-ref c "b" #f) #f))] [(hash? (if c (hash-ref c "b" #f) #f)) (hash-count (if c (hash-ref c "b" #f) #f))] [else (length (if c (hash-ref c "b" #f) #f))]) 1)) (let ()
(set! bs (string-append bs " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! bs (string-append bs "]"))
(define ms "map[")
(define first #t)
(let/ec _break (for ([k (in-hash-keys (if c (hash-ref c "m" #f) #f))])
  (let/ec _cont
(if (not first) (let ()
(set! ms (string-append ms " "))
) (void))
(set! ms (string-append (string-append (string-append ms (format "~a" k)) ":") (format "~a" (if (if c (hash-ref c "m" #f) #f) (if (hash? (if c (hash-ref c "m" #f) #f)) (hash-ref (if c (hash-ref c "m" #f) #f) k #f) (list-ref (if c (hash-ref c "m" #f) #f) (int k))) #f))))
(set! first #f)
  )))
(set! ms (string-append ms "]"))
(_return (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "{" (format "~a" (if c (hash-ref c "i" #f) #f))) " ") (if c (hash-ref c "s" #f) #f)) " ") bs) " ") ms) "}"))
))
)
(define c1 (hash "i" 1 "s" "one" "b" (list 117 110 105 116) "m" (hash 1 #t)))
(define c2 (deepcopy c1))
(displayln (cdsStr c1))
(displayln (cdsStr c2))
(set! c1 (hash "i" 0 "s" "nil" "b" (list 122 101 114 111) "m" (hash 1 #f)))
(displayln (cdsStr c1))
(displayln (cdsStr c2))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
