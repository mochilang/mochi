;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (isPrime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(if (equal? (modulo n 2) 0) (let ()
(_return (equal? n 2))
) (void))
(define d 3)
(let/ec _break (let loop ()
  (if (<= (* d d) n) (let ()
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (revInt n)
  (let/ec _return (begin
(define r 0)
(define t n)
(let/ec _break (let loop ()
  (if (> t 0) (let ()
    (set! r (let ([__l (* r 10)] [__r (modulo t 10)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! t (int (quotient t 10)))
    (loop)) (void))))
(_return r)
))
)
(define (main)
  (let/ec _return (begin
(define emirps (list))
(define n 2)
(let/ec _break (let loop ()
  (if (< (cond [(string? emirps) (string-length emirps)] [(hash? emirps) (hash-count emirps)] [else (length emirps)]) 10000) (let ()
    (if (isPrime n) (let ()
(define r (revInt n))
(if (and (not (equal? r n)) (isPrime r)) (let ()
(set! emirps (append emirps (list n)))
) (void))
) (void))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define line "   [")
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let ()
    (set! line (string-append line (format "~a" (if emirps (list-ref emirps (int i)) #f))))
    (if (< i 19) (let ()
(set! line (string-append line ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! line (string-append line "]"))
(displayln "First 20:")
(displayln line)
(set! line "  [")
(let/ec _break (for ([e emirps] #:break (>= e 8000))
  (let/ec _cont
(if (>= e 7700) (let ()
(set! line (string-append (string-append line (format "~a" e)) ", "))
) (void))
  )))
(set! line (string-append line "]"))
(displayln "Between 7700 and 8000:")
(displayln line)
(displayln "10000th:")
(displayln (string-append (string-append "   [" (format "~a" (if emirps (list-ref emirps (int 9999)) #f))) "]"))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
