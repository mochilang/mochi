;; Generated by Mochi 0.10.42 on 2025-07-27 23:42 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define stx "\x02")
(define etx "\x03")
(define (contains s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (sortStrings xs)
  (let/ec _return (begin
(define arr xs)
(define n (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- n 1)) (let ()
    (if (string>? (if arr (list-ref arr (int j)) #f) (if arr (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) #f)) (let ()
(define tmp (if arr (list-ref arr (int j)) #f))
(set! arr (list-set arr (int j) (if arr (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) #f)))
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (bwt s)
  (let/ec _return (begin
(if (or (string-contains? s stx) (string-contains? s etx)) (let ()
(_return (hash "err" #t "res" ""))
) (void))
(set! s (string-append (string-append stx s) etx))
(define le (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(define table (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i le) (let ()
    (define rot (let ([__l (substring s i le)] [__r (substring s 0 i)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! table (append table (list rot)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! table (sortStrings table))
(define last "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i le) (let ()
    (set! last (string-append last (substring (if table (list-ref table (int i)) #f) (- le 1) le)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "err" #f "res" last))
))
)
(define (ibwt r)
  (let/ec _return (begin
(define le (cond [(string? r) (string-length r)] [(hash? r) (hash-count r)] [else (length r)]))
(define table (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i le) (let ()
    (set! table (append table (list "")))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define n 0)
(let/ec _break (let loop ()
  (if (< n le) (let ()
    (set! i 0)
    (let/ec _break (let loop ()
  (if (< i le) (let ()
    (set! table (list-set table (int i) (string-append (substring r i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (if table (list-ref table (int i)) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! table (sortStrings table))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i le) (let ()
    (if (string=? (substring (if table (list-ref table (int i)) #f) (- le 1) le) etx) (let ()
(_return (substring (if table (list-ref table (int i)) #f) 1 (- le 1)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return "")
))
)
(define (makePrintable s)
  (let/ec _return (begin
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch stx) (let ()
(set! out (string-append out "^"))
) (let ()
(if (string=? ch etx) (let ()
(set! out (string-append out "|"))
) (let ()
(set! out (string-append out ch))
))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define examples (list "banana" "appellee" "dogwood" "TO BE OR NOT TO BE OR WANT TO BE OR NOT?" "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES" "\x02ABC\x03"))
(let/ec _break (for ([t examples])
  (let/ec _cont
(displayln (makePrintable t))
(define res (bwt t))
(if (if res (hash-ref res "err" #f) #f) (let ()
(displayln " --> ERROR: String can't contain STX or ETX")
(displayln " -->")
) (let ()
(define enc (format "~a" (if res (hash-ref res "res" #f) #f)))
(displayln (string-append " --> " (makePrintable enc)))
(define r (ibwt enc))
(displayln (string-append " --> " r))
))
(displayln "")
  )))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
