;; Generated by Mochi 0.10.55 on 2025-08-03 09:40 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (digits n)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(_return (list 0))
) (void))
(define rev (list))
(define x n)
(let/ec _break (let loop ()
  (if (> x 0) (let ()
    (set! rev (append rev (list (modulo x 10))))
    (set! x (int (quotient x 10)))
    (loop)) (void))))
(define out (list))
(define i (- (cond [(string? rev) (string-length rev)] [(hash? rev) (hash-count rev)] [else (length rev)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (set! out (append out (list (if rev (if (hash? rev) (hash-ref rev i #f) (list-ref rev (int i))) #f))))
    (set! i (- i 1))
    (loop)) (void))))
(_return out)
))
)
(define (commatize n)
  (let/ec _return (begin
(define s (format "~a" n))
(define out "")
(define i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(let/ec _break (let loop ()
  (if (> i 3) (let ()
    (set! out (string-append (string-append "," (slice s (- i 3) i)) out))
    (set! i (- i 3))
    (loop)) (void))))
(set! out (string-append (slice s 0 i) out))
(_return out)
))
)
(define (isPrime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(if (equal? (modulo n 2) 0) (let ()
(_return (equal? n 2))
) (void))
(if (equal? (modulo n 3) 0) (let ()
(_return (equal? n 3))
) (void))
(define d 5)
(let/ec _break (let loop ()
  (if (<= (* d d) n) (let ()
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (split s sep)
  (let/ec _return (begin
(define parts (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (<= (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (string=? (slice s i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sep)) (let ()
(set! parts (append parts (list cur)))
(set! cur "")
(set! i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! cur (string-append cur (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(set! parts (append parts (list cur)))
(_return parts)
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (slice str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (slice str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (reverseStr s)
  (let/ec _return (begin
(define out "")
(define i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (set! out (string-append out (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (- i 1))
    (loop)) (void))))
(_return out)
))
)
(define (pad s w)
  (let/ec _return (begin
(define out s)
(let/ec _break (let loop ()
  (if (< (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) w) (let ()
    (set! out (string-append " " out))
    (loop)) (void))))
(_return out)
))
)
(define (findFirst list_)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? list_) (string-length list_)] [(hash? list_) (hash-count list_)] [else (length list_)])) (let ()
    (if (> (if list_ (if (hash? list_) (hash-ref list_ i #f) (list-ref list_ (int i))) #f) 10000000) (let ()
(_return (list (if list_ (if (hash? list_) (hash-ref list_ i #f) (list-ref list_ (int i))) #f) i))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list (- 1) (- 1)))
))
)
(define (main)
  (let/ec _return (begin
(define ranges (list (list 0 0) (list 101 909) (list 11011 99099) (list 1110111 9990999) (list 111101111 119101111)))
(define cyclops (list))
(let/ec _break (for ([r ranges])
  (let/ec _cont
(define start (if r (if (hash? r) (hash-ref r 0 #f) (list-ref r (int 0))) #f))
(define end (if r (if (hash? r) (hash-ref r 1 #f) (list-ref r (int 1))) #f))
(define numDigits (cond [(string? (format "~a" start)) (string-length (format "~a" start))] [(hash? (format "~a" start)) (hash-count (format "~a" start))] [else (length (format "~a" start))]))
(define center (quotient numDigits 2))
(define i start)
(let/ec _break (let loop ()
  (if (<= i end) (let ()
    (define ds (digits i))
    (if (equal? (if ds (if (hash? ds) (hash-ref ds center #f) (list-ref ds (int center))) #f) 0) (let ()
(define count 0)
(let/ec _break (for ([d ds])
  (let/ec _cont
(if (equal? d 0) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
  )))
(if (equal? count 1) (let ()
(set! cyclops (append cyclops (list i)))
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
  )))
(displayln "The first 50 cyclops numbers are:")
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx 50) (let ()
    (displayln (string-append (pad (commatize (if cyclops (if (hash? cyclops) (hash-ref cyclops idx #f) (list-ref cyclops (int idx))) #f)) 6) " "))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo idx 10) 0) (let ()
(displayln "\n")
) (void))
    (loop)) (void))))
(define fi (findFirst cyclops))
(displayln (string-append (string-append (string-append "\nFirst such number > 10 million is " (commatize (if fi (if (hash? fi) (hash-ref fi 0 #f) (list-ref fi (int 0))) #f))) " at zero-based index ") (commatize (if fi (if (hash? fi) (hash-ref fi 1 #f) (list-ref fi (int 1))) #f))))
(define primes (list))
(let/ec _break (for ([n cyclops])
  (let/ec _cont
(if (isPrime n) (let ()
(set! primes (append primes (list n)))
) (void))
  )))
(displayln "\n\nThe first 50 prime cyclops numbers are:")
(set! idx 0)
(let/ec _break (let loop ()
  (if (< idx 50) (let ()
    (displayln (string-append (pad (commatize (if primes (if (hash? primes) (hash-ref primes idx #f) (list-ref primes (int idx))) #f)) 6) " "))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo idx 10) 0) (let ()
(displayln "\n")
) (void))
    (loop)) (void))))
(define fp (findFirst primes))
(displayln (string-append (string-append (string-append "\nFirst such number > 10 million is " (commatize (if fp (if (hash? fp) (hash-ref fp 0 #f) (list-ref fp (int 0))) #f))) " at zero-based index ") (commatize (if fp (if (hash? fp) (hash-ref fp 1 #f) (list-ref fp (int 1))) #f))))
(define bpcyclops (list))
(define ppcyclops (list))
(let/ec _break (for ([p primes])
  (let/ec _cont
(define ps (format "~a" p))
(define splitp (string-split ps "0"))
(define noMiddle (_parse-int-str (string-append (if splitp (if (hash? splitp) (hash-ref splitp 0 #f) (list-ref splitp (int 0))) #f) (if splitp (if (hash? splitp) (hash-ref splitp 1 #f) (list-ref splitp (int 1))) #f)) 10))
(if (isPrime noMiddle) (let ()
(set! bpcyclops (append bpcyclops (list p)))
) (void))
(if (string=? ps (reverseStr ps)) (let ()
(set! ppcyclops (append ppcyclops (list p)))
) (void))
  )))
(displayln "\n\nThe first 50 blind prime cyclops numbers are:")
(set! idx 0)
(let/ec _break (let loop ()
  (if (< idx 50) (let ()
    (displayln (string-append (pad (commatize (if bpcyclops (if (hash? bpcyclops) (hash-ref bpcyclops idx #f) (list-ref bpcyclops (int idx))) #f)) 6) " "))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo idx 10) 0) (let ()
(displayln "\n")
) (void))
    (loop)) (void))))
(define fb (findFirst bpcyclops))
(displayln (string-append (string-append (string-append "\nFirst such number > 10 million is " (commatize (if fb (if (hash? fb) (hash-ref fb 0 #f) (list-ref fb (int 0))) #f))) " at zero-based index ") (commatize (if fb (if (hash? fb) (hash-ref fb 1 #f) (list-ref fb (int 1))) #f))))
(displayln "\n\nThe first 50 palindromic prime cyclops numbers are:")
(set! idx 0)
(let/ec _break (let loop ()
  (if (< idx 50) (let ()
    (displayln (string-append (pad (commatize (if ppcyclops (if (hash? ppcyclops) (hash-ref ppcyclops idx #f) (list-ref ppcyclops (int idx))) #f)) 9) " "))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo idx 8) 0) (let ()
(displayln "\n")
) (void))
    (loop)) (void))))
(define fpp (findFirst ppcyclops))
(displayln (string-append (string-append (string-append "\n\nFirst such number > 10 million is " (commatize (if fpp (if (hash? fpp) (hash-ref fpp 0 #f) (list-ref fpp (int 0))) #f))) " at zero-based index ") (commatize (if fpp (if (hash? fpp) (hash-ref fpp 1 #f) (list-ref fpp (int 1))) #f))))
))
)
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
