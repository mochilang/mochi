;; Generated by Mochi 0.10.54 on 2025-08-02 13:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (contains xs n)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (equal? (if xs (list-ref xs (int i)) #f) n) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (gcd a b)
  (let/ec _return (begin
(define x a)
(define y b)
(let/ec _break (let loop ()
  (if (not (equal? y 0)) (let ()
    (define t (modulo x y))
    (set! x y)
    (set! y t)
    (loop)) (void))))
(if (< x 0) (let ()
(set! x (- x))
) (void))
(_return x)
))
)
(define (sortInts xs)
  (let/ec _return (begin
(define arr xs)
(define n (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- n 1)) (let ()
    (if (> (if arr (list-ref arr (int j)) #f) (if arr (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) #f)) (let ()
(define tmp (if arr (list-ref arr (int j)) #f))
(set! arr (list-set arr (int j) (if arr (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) #f)))
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (areSame s t)
  (let/ec _return (begin
(if (not (equal? (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) (cond [(string? t) (string-length t)] [(hash? t) (hash-count t)] [else (length t)]))) (let ()
(_return #f)
) (void))
(define a (sortInts s))
(define b (sortInts t))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let ()
    (if (not (equal? (if a (list-ref a (int i)) #f) (if b (list-ref b (int i)) #f))) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (printSlice start seq)
  (let/ec _return (begin
(define first (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 30) (let ()
    (set! first (append first (list (if seq (list-ref seq (int i)) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define pad "")
(if (< start 10) (let ()
(set! pad " ")
) (void))
(displayln (string-append (string-append (string-append (string-append "EKG(" pad) (format "~a" start)) "): ") (format "~a" first)))
))
)
(define (main)
  (let/ec _return (begin
(define limit 100)
(define starts (list 2 5 7 9 10))
(define ekg (list))
(define s 0)
(let/ec _break (let loop ()
  (if (< s (cond [(string? starts) (string-length starts)] [(hash? starts) (hash-count starts)] [else (length starts)])) (let ()
    (define seq (list 1 (if starts (list-ref starts (int s)) #f)))
    (define n 2)
    (let/ec _break (let loop ()
  (if (< n limit) (let ()
    (define i 2)
    (define done #f)
    (let/ec _break (let loop ()
  (if (not done) (let ()
    (if (and (not (member i seq)) (> (gcd (if seq (list-ref seq (int (- n 1))) #f) i) 1)) (let ()
(set! seq (append seq (list i)))
(set! done #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! ekg (append ekg (list seq)))
    (printSlice (if starts (list-ref starts (int s)) #f) seq)
    (set! s (let ([__l s] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define i 2)
(define found #f)
(let/ec _break (let loop ()
  (if (< i limit) (let ()
    (if (and (equal? (if (if ekg (list-ref ekg (int 1)) #f) (list-ref (if ekg (list-ref ekg (int 1)) #f) (int i)) #f) (if (if ekg (list-ref ekg (int 2)) #f) (list-ref (if ekg (list-ref ekg (int 2)) #f) (int i)) #f)) (areSame (slice (if ekg (list-ref ekg (int 1)) #f) 0 i) (slice (if ekg (list-ref ekg (int 2)) #f) 0 i))) (let ()
(displayln (string-append "\nEKG(5) and EKG(7) converge at term " (format "~a" (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! found #t)
(_break)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (not found) (let ()
(displayln (string-append (string-append "\nEKG5(5) and EKG(7) do not converge within " (format "~a" limit)) " terms"))
) (void))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
