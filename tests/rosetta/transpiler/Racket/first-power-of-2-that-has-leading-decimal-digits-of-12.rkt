;; Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (commatize n)
  (let/ec _return (begin
(define s (format "~a" n))
(define i (modulo (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 3))
(if (equal? i 0) (let ()
(set! i 3)
) (void))
(define out (slice s 0 i))
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (set! out (string-append (string-append out ",") (slice s i (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (p L n)
  (let/ec _return (begin
(define Ls (format "~a" L))
(define digits 1)
(define d 1)
(let/ec _break (let loop ()
  (if (<= d (- 18 (cond [(string? Ls) (string-length Ls)] [(hash? Ls) (hash-count Ls)] [else (length Ls)]))) (let ()
    (set! digits (* digits 10))
    (set! d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define ten18 1000000000000000000)
(define count 0)
(define i 0)
(define probe 1)
(let/ec _break (let loop ()
  (if #t (let ()
    (set! probe (* probe 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (>= probe ten18) (let ()
(let/ec _break (let loop ()
  (if #t (let ()
    (if (>= probe ten18) (let ()
(set! probe (quotient probe 10))
) (void))
    (if (equal? (quotient probe digits) L) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (>= count n) (let ()
(set! count (- count 1))
(_break)
) (void))
) (void))
    (set! probe (* probe 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (define ps (format "~a" probe))
    (define le (cond [(string? Ls) (string-length Ls)] [(hash? Ls) (hash-count Ls)] [else (length Ls)]))
    (if (> le (cond [(string? ps) (string-length ps)] [(hash? ps) (hash-count ps)] [else (length ps)])) (let ()
(set! le (cond [(string? ps) (string-length ps)] [(hash? ps) (hash-count ps)] [else (length ps)]))
) (void))
    (if (string=? (slice ps 0 le) Ls) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (>= count n) (let ()
(_break)
) (void))
) (void))
    (loop)) (void))))
(_return i)
))
)
(define params (list (list 12 1) (list 12 2) (list 123 45)))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? params) (string-length params)] [(hash? params) (hash-count params)] [else (length params)])) (let ()
    (define L (if (if params (list-ref params (int idx)) #f) (list-ref (if params (list-ref params (int idx)) #f) (int 0)) #f))
    (define m (if (if params (list-ref params (int idx)) #f) (list-ref (if params (list-ref params (int idx)) #f) (int 1)) #f))
    (displayln (string-append (string-append (string-append (string-append (string-append "p(" (format "~a" L)) ", ") (format "~a" m)) ") = ") (commatize (p L m))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
