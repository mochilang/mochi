;; Generated by Mochi 0.10.37 on 2025-07-23 12:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define PI 3.141592653589793)
(define (sinApprox x)
  (let/ec _return (begin
(define term x)
(define sum x)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 12) (let ()
    (define denom (exact->inexact (* (* 2 n) (let ([__l (* 2 n)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! term (/ (* (* (- term) x) x) denom))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define dt 0.01)
(define s 0.0)
(define t1 0.0)
(define k1 (sinApprox 0.0))
(define i 1)
(let/ec _break (let loop ()
  (if (<= i 200) (let ()
    (define t2 (* (exact->inexact i) dt))
    (define k2 (sinApprox (* t2 PI)))
    (set! s (let ([__l s] [__r (* (* (let ([__l k1] [__r k2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 0.5) (- t2 t1))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! t1 t2)
    (set! k1 k2)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define i2 1)
(let/ec _break (let loop ()
  (if (<= i2 50) (let ()
    (define t2 (let ([__l 2.0] [__r (* (exact->inexact i2) dt)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define k2 0.0)
    (set! s (let ([__l s] [__r (* (* (let ([__l k1] [__r k2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 0.5) (- t2 t1))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! t1 t2)
    (set! k1 k2)
    (set! i2 (let ([__l i2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln s)
