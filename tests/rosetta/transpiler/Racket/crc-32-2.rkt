;; Generated by Mochi 0.10.42 on 2025-07-28 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (xor a b)
  (let/ec _return (begin
(define res 0)
(define bit 1)
(define x a)
(define y b)
(let/ec _break (let loop ()
  (if (or (> x 0) (> y 0)) (let ()
    (define abit (modulo x 2))
    (define bbit (modulo y 2))
    (if (not (equal? abit bbit)) (let ()
(set! res (let ([__l res] [__r bit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! x (quotient x 2))
    (set! y (quotient y 2))
    (set! bit (* bit 2))
    (loop)) (void))))
(_return res)
))
)
(define (rshift x n)
  (let/ec _return (begin
(define v x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! v (quotient v 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return v)
))
)
(define (ord ch)
  (let/ec _return (begin
(define upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower "abcdefghijklmnopqrstuvwxyz")
(define idx (index-of upper ch))
(if (>= idx 0) (let ()
(_return (let ([__l 65] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(set! idx (index-of lower ch))
(if (>= idx 0) (let ()
(_return (let ([__l 97] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (string=? ch " ") (let ()
(_return 32)
) (void))
(_return 0)
))
)
(define (toHex n)
  (let/ec _return (begin
(define digits "0123456789ABCDEF")
(if (equal? n 0) (let ()
(_return "0")
) (void))
(define v n)
(define out "")
(let/ec _break (let loop ()
  (if (> v 0) (let ()
    (define d (modulo v 16))
    (set! out (string-append (substring digits d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) out))
    (set! v (quotient v 16))
    (loop)) (void))))
(_return out)
))
)
(define (crc32Table)
  (let/ec _return (begin
(define table (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 256) (let ()
    (define word i)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 8) (let ()
    (if (equal? (modulo word 2) 1) (let ()
(set! word (xor (rshift word 1) 3988292384))
) (let ()
(set! word (rshift word 1))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! table (append table (list word)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return table)
))
)
(define table (crc32Table))
(define (crc32 s)
  (let/ec _return (begin
(define crc 4294967295)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define c (ord (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (define idx (xor (modulo crc 256) c))
    (set! crc (xor (if table (list-ref table (int idx)) #f) (rshift crc 8)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 4294967295 crc))
))
)
(define (main)
  (let/ec _return (begin
(define s "The quick brown fox jumps over the lazy dog")
(define result (crc32 s))
(define hex (lower (toHex result)))
(displayln hex)
))
)
(main)
