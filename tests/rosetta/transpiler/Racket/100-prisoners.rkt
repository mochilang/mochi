;; Generated by Mochi 0.10.40 on 2025-07-25 19:02 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (shuffle xs)
  (let/ec _return (begin
(define arr xs)
(define i 99)
(let/ec _break (let loop ()
  (if (> i 0) (let ()
    (define j (modulo (now) (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define tmp (list-ref arr i))
    (set! arr (list-set arr i (list-ref arr j)))
    (set! arr (list-set arr j tmp))
    (set! i (- i 1))
    (loop)) (void))))
(_return arr)
))
)
(define (doTrials trials np strategy)
  (let/ec _return (begin
(define pardoned 0)
(define t 0)
(let/ec _break (let loop ()
  (if (< t trials) (let ()
    (define drawers (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i 100) (let ()
    (set! drawers (append drawers (list i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! drawers (shuffle drawers))
    (define p 0)
    (define success #t)
    (let/ec _break (let loop ()
  (if (< p np) (let ()
    (define found #f)
    (if (string=? strategy "optimal") (let ()
(define prev p)
(define d 0)
(let/ec _break (let loop ()
  (if (< d 50) (let ()
    (define this (list-ref drawers prev))
    (if (equal? this p) (let ()
(set! found #t)
(_break)
) (void))
    (set! prev this)
    (set! d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (let ()
(define opened (list))
(define k 0)
(let/ec _break (let loop ()
  (if (< k 100) (let ()
    (set! opened (append opened (list #f)))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define d 0)
(let/ec _break (let loop ()
  (if (< d 50) (let ()
    (define n (modulo (now) 100))
    (let/ec _break (let loop ()
  (if (list-ref opened n) (let ()
    (set! n (modulo (now) 100))
    (loop)) (void))))
    (set! opened (list-set opened n #t))
    (if (equal? (list-ref drawers n) p) (let ()
(set! found #t)
(_break)
) (void))
    (set! d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
    (if (not found) (let ()
(set! success #f)
(_break)
) (void))
    (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if success (let ()
(set! pardoned (let ([__l pardoned] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define rf (* (/ (exact->inexact pardoned) (exact->inexact trials)) 100.0))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append "  strategy = " strategy) "  pardoned = ") (format "~a" pardoned)) " relative frequency = ") (format "~a" rf)) "%"))
))
)
(define (main)
  (let/ec _return (begin
(define trials 1000)
(for ([np (list 10 100)])
(displayln (string-append (string-append (string-append (string-append "Results from " (format "~a" trials)) " trials with ") (format "~a" np)) " prisoners:\n"))
(for ([strat (list "random" "optimal")])
(doTrials trials np strat)
)
)
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
