;; Generated by Mochi 0.10.37 on 2025-07-23 09:04 +0700
#lang racket/base
(require racket/list racket/string racket/math json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (input) (read-line))
(define (sublist lst start end) (take (drop lst start) (- end start)))


(define (shuffle xs)
(define arr xs)
(define i 99)
(let/ec _break (let loop ()
  (if (> i 0) (let ()
    (define j (modulo (now) (+ i 1)))
    (define tmp (list-ref arr i))
    (set! arr (list-set arr i (list-ref arr j)))
    (set! arr (list-set arr j tmp))
    (set! i (- i 1))
    (loop)) (void))))
arr
)
(define (doTrials trials np strategy)
(define pardoned 0)
(define t 0)
(let/ec _break (let loop ()
  (if (< t trials) (let ()
    (define drawers (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i 100) (let ()
    (set! drawers (append drawers (list i)))
    (set! i (+ i 1))
    (loop)) (void))))
    (set! drawers (shuffle drawers))
    (define p 0)
    (define success #t)
    (let/ec _break (let loop ()
  (if (< p np) (let ()
    (define found #f)
    (if (string=? strategy "optimal") (let ()
(define prev p)
(define d 0)
(let/ec _break (let loop ()
  (if (< d 50) (let ()
    (define this (list-ref drawers prev))
    (if (= this p) (let ()
(set! found #t)
(_break)
) (void))
    (set! prev this)
    (set! d (+ d 1))
    (loop)) (void))))
) (let ()
(define opened (list))
(define k 0)
(let/ec _break (let loop ()
  (if (< k 100) (let ()
    (set! opened (append opened (list #f)))
    (set! k (+ k 1))
    (loop)) (void))))
(define d 0)
(let/ec _break (let loop ()
  (if (< d 50) (let ()
    (define n (modulo (now) 100))
    (let/ec _break (let loop ()
  (if (list-ref opened n) (let ()
    (set! n (modulo (now) 100))
    (loop)) (void))))
    (set! opened (list-set opened n #t))
    (if (= (list-ref drawers n) p) (let ()
(set! found #t)
(_break)
) (void))
    (set! d (+ d 1))
    (loop)) (void))))
))
    (if (not found) (let ()
(set! success #f)
(_break)
) (void))
    (set! p (+ p 1))
    (loop)) (void))))
    (if success (let ()
(set! pardoned (+ pardoned 1))
) (void))
    (set! t (+ t 1))
    (loop)) (void))))
(define rf (* (/ (exact->inexact pardoned) (exact->inexact trials)) 100.0))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append "  strategy = " strategy) "  pardoned = ") (format "~a" pardoned)) " relative frequency = ") (format "~a" rf)) "%"))
)
(define (main)
(define trials 1000)
(for ([np (list 10 100)])
(displayln (string-append (string-append (string-append (string-append "Results from " (format "~a" trials)) " trials with ") (format "~a" np)) " prisoners:\n"))
(for ([strat (list "random" "optimal")])
(doTrials trials np strat)
)
)
)
(main)
