;; Generated by Mochi 0.10.41 on 2025-07-27 15:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (fmt3 x)
  (let/ec _return (begin
(define y (/ (exact->inexact (int (let ([__l (* x 1000.0)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) 1000.0))
(define s (format "~a" y))
(define dot (indexOf s "."))
(if (equal? dot (- 0 1)) (let ()
(set! s (string-append s ".000"))
) (let ()
(define decs (- (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) dot) 1))
(if (> decs 3) (let ()
(set! s (substring s 0 (let ([__l dot] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(let/ec _break (let loop ()
  (if (< decs 3) (let ()
    (set! s (string-append s "0"))
    (set! decs (let ([__l decs] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
))
(_return s)
))
)
(define (pad s width)
  (let/ec _return (begin
(define out s)
(let/ec _break (let loop ()
  (if (< (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) width) (let ()
    (set! out (string-append " " out))
    (loop)) (void))))
(_return out)
))
)
(define (smaSeries xs period)
  (let/ec _return (begin
(define res (list))
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (set! sum (let ([__l sum] [__r (list-ref xs i)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (>= i period) (let ()
(set! sum (- sum (list-ref xs (- i period))))
) (void))
    (define denom (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (> denom period) (let ()
(set! denom period)
) (void))
    (set! res (append res (list (/ sum (exact->inexact denom)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (main)
  (let/ec _return (begin
(define xs (list 1.0 2.0 3.0 4.0 5.0 5.0 4.0 3.0 2.0 1.0))
(define sma3 (smaSeries xs 3))
(define sma5 (smaSeries xs 5))
(displayln "x       sma3   sma5")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (define line (string-append (string-append (string-append (string-append (pad (fmt3 (list-ref xs i)) 5) "  ") (pad (fmt3 (list-ref sma3 i)) 5)) "  ") (pad (fmt3 (list-ref sma5 i)) 5)))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
