;; Generated by Mochi 0.10.38 on 2025-07-23 16:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (add a b)
  (let/ec _return (begin
(_return (hash "re" (let ([__l (hash-ref a "re")] [__r (hash-ref b "re")]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "im" (let ([__l (hash-ref a "im")] [__r (hash-ref b "im")]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (mul a b)
  (let/ec _return (begin
(_return (hash "re" (- (* (hash-ref a "re") (hash-ref b "re")) (* (hash-ref a "im") (hash-ref b "im"))) "im" (let ([__l (* (hash-ref a "re") (hash-ref b "im"))] [__r (* (hash-ref a "im") (hash-ref b "re"))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (neg a)
  (let/ec _return (begin
(_return (hash "re" (- (hash-ref a "re")) "im" (- (hash-ref a "im"))))
))
)
(define (inv a)
  (let/ec _return (begin
(define denom (let ([__l (* (hash-ref a "re") (hash-ref a "re"))] [__r (* (hash-ref a "im") (hash-ref a "im"))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (hash "re" (/ (hash-ref a "re") denom) "im" (/ (- (hash-ref a "im")) denom)))
))
)
(define (conj a)
  (let/ec _return (begin
(_return (hash "re" (hash-ref a "re") "im" (- (hash-ref a "im"))))
))
)
(define (cstr a)
  (let/ec _return (begin
(define s (string-append "(" (format "~a" (hash-ref a "re"))))
(if (>= (hash-ref a "im") 0) (let ()
(set! s (string-append (string-append (string-append s "+") (format "~a" (hash-ref a "im"))) "i)"))
) (let ()
(set! s (string-append (string-append s (format "~a" (hash-ref a "im"))) "i)"))
))
(_return s)
))
)
(define a (hash "re" 1.0 "im" 1.0))
(define b (hash "re" 3.14159 "im" 1.25))
(displayln (string-append "a:       " (cstr a)))
(displayln (string-append "b:       " (cstr b)))
(displayln (string-append "a + b:   " (cstr (add a b))))
(displayln (string-append "a * b:   " (cstr (mul a b))))
(displayln (string-append "-a:      " (cstr (neg a))))
(displayln (string-append "1 / a:   " (cstr (inv a))))
(displayln (string-append "aÌ…:       " (cstr (conj a))))
