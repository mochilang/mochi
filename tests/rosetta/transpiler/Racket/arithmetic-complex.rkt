;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (add a b)
  (let/ec _return (begin
(_return (hash "re" (let ([__l (if a (hash-ref a "re" #f) #f)] [__r (if b (hash-ref b "re" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "im" (let ([__l (if a (hash-ref a "im" #f) #f)] [__r (if b (hash-ref b "im" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (mul a b)
  (let/ec _return (begin
(_return (hash "re" (- (* (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "re" #f) #f)) (* (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "im" #f) #f))) "im" (let ([__l (* (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "im" #f) #f))] [__r (* (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "re" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (neg a)
  (let/ec _return (begin
(_return (hash "re" (- (if a (hash-ref a "re" #f) #f)) "im" (- (if a (hash-ref a "im" #f) #f))))
))
)
(define (inv a)
  (let/ec _return (begin
(define denom (let ([__l (* (if a (hash-ref a "re" #f) #f) (if a (hash-ref a "re" #f) #f))] [__r (* (if a (hash-ref a "im" #f) #f) (if a (hash-ref a "im" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (hash "re" (/ (if a (hash-ref a "re" #f) #f) denom) "im" (/ (- (if a (hash-ref a "im" #f) #f)) denom)))
))
)
(define (conj a)
  (let/ec _return (begin
(_return (hash "re" (if a (hash-ref a "re" #f) #f) "im" (- (if a (hash-ref a "im" #f) #f))))
))
)
(define (cstr a)
  (let/ec _return (begin
(define s (string-append "(" (format "~a" (if a (hash-ref a "re" #f) #f))))
(if (>= (if a (hash-ref a "im" #f) #f) 0) (let ()
(set! s (string-append (string-append (string-append s "+") (format "~a" (if a (hash-ref a "im" #f) #f))) "i)"))
) (let ()
(set! s (string-append (string-append s (format "~a" (if a (hash-ref a "im" #f) #f))) "i)"))
))
(_return s)
))
)
(define a (hash "re" 1.0 "im" 1.0))
(define b (hash "re" 3.14159 "im" 1.25))
(displayln (string-append "a:       " (cstr a)))
(displayln (string-append "b:       " (cstr b)))
(displayln (string-append "a + b:   " (cstr (add a b))))
(displayln (string-append "a * b:   " (cstr (mul a b))))
(displayln (string-append "-a:      " (cstr (neg a))))
(displayln (string-append "1 / a:   " (cstr (inv a))))
(displayln (string-append "aÌ…:       " (cstr (conj a))))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
