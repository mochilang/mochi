;; Generated by Mochi 0.10.55 on 2025-08-03 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (powInt base exp)
  (let/ec _return (begin
(define r 1)
(define b base)
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let/ec _cont
    (if (equal? (modulo e 2) 1) (let ()
(set! r (* r b))
) (void))
    (set! b (* b b))
    (set! e (quotient e (int 2)))
    (loop)) (void))))
(_return r)
))
)
(define (minInt x y)
  (let/ec _return (begin
(if (< x y) (let ()
(_return x)
) (void))
(_return y)
))
)
(define (throwDie nSides nDice s counts)
  (let/ec _return (begin
(if (equal? nDice 0) (let ()
(set! counts (list-set counts (int s) (let ([__l (if counts (if (hash? counts) (hash-ref counts s #f) (list-ref counts (int s))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(_return void)
) (void))
(define i 1)
(let/ec _break (let loop ()
  (if (<= i nSides) (let/ec _cont
    (throwDie nSides (- nDice 1) (let ([__l s] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) counts)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (beatingProbability nSides1 nDice1 nSides2 nDice2)
  (let/ec _return (begin
(define len1 (* (let ([__l nSides1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) nDice1))
(define c1 (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i len1) (let/ec _cont
    (set! c1 (append c1 (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(throwDie nSides1 nDice1 0 c1)
(define len2 (* (let ([__l nSides2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) nDice2))
(define c2 (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j len2) (let/ec _cont
    (set! c2 (append c2 (list 0)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(throwDie nSides2 nDice2 0 c2)
(define p12 (* (exact->inexact (powInt nSides1 nDice1)) (exact->inexact (powInt nSides2 nDice2))))
(define tot 0.0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i len1) (let/ec _cont
    (set! j 0)
    (define m (minInt i len2))
    (let/ec _break (let loop ()
  (if (< j m) (let/ec _cont
    (set! tot (let ([__l tot] [__r (/ (* (if c1 (if (hash? c1) (hash-ref c1 i #f) (list-ref c1 (int i))) #f) (exact->inexact (if c2 (if (hash? c2) (hash-ref c2 j #f) (list-ref c2 (int j))) #f))) p12)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return tot)
))
)
(displayln (format "~a" (beatingProbability 4 9 6 6)))
(displayln (format "~a" (beatingProbability 10 5 7 6)))
