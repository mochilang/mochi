;; Generated by Mochi 0.10.54 on 2025-08-02 12:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define INF 1000000000)
(define graph (hash))
(define (addEdge u v w)
  (let/ec _return (begin
(if (not (hash-has-key? graph u)) (let ()
(set! graph (hash-set (or graph (hash)) u (hash)))
) (void))
(set! graph (hash-set graph u (hash-set (hash-ref graph u) v w)))
(if (not (hash-has-key? graph v)) (let ()
(set! graph (hash-set (or graph (hash)) v (hash)))
) (void))
))
)
(define (removeAt xs idx)
  (let/ec _return (begin
(define out (list))
(define i 0)
(let/ec _break (for ([x xs])
  (let/ec _cont
(if (not (equal? i idx)) (let ()
(set! out (append out (list x)))
) (void))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
  )))
(_return out)
))
)
(define (dijkstra source)
  (let/ec _return (begin
(define dist (hash))
(define prev (hash))
(let/ec _break (for ([v (in-hash-keys graph)])
  (let/ec _cont
(set! dist (hash-set (or dist (hash)) v INF))
(set! prev (hash-set (or prev (hash)) v ""))
  )))
(set! dist (hash-set (or dist (hash)) source 0))
(define q (list))
(let/ec _break (for ([v (in-hash-keys graph)])
  (let/ec _cont
(set! q (append q (list v)))
  )))
(let/ec _break (let loop ()
  (if (> (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)]) 0) (let ()
    (define bestIdx 0)
    (define u (if q (list-ref q (int 0)) #f))
    (define i 1)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)])) (let ()
    (define v (if q (list-ref q (int i)) #f))
    (if (< (if dist (hash-ref dist v #f) #f) (if dist (hash-ref dist u #f) #f)) (let ()
(set! u v)
(set! bestIdx i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! q (removeAt q bestIdx))
    (let/ec _break (for ([v (in-hash-keys (if graph (hash-ref graph u #f) #f))])
  (let/ec _cont
(define alt (let ([__l (if dist (hash-ref dist u #f) #f)] [__r (if (if graph (hash-ref graph u #f) #f) (hash-ref (if graph (hash-ref graph u #f) #f) v #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (< alt (if dist (hash-ref dist v #f) #f)) (let ()
(set! dist (hash-set (or dist (hash)) v alt))
(set! prev (hash-set (or prev (hash)) v u))
) (void))
  )))
    (loop)) (void))))
(_return (hash "dist" dist "prev" prev))
))
)
(define (path prev v)
  (let/ec _return (begin
(define s v)
(define cur v)
(let/ec _break (let loop ()
  (if (not (string=? (if prev (hash-ref prev cur #f) #f) "")) (let ()
    (set! cur (if prev (hash-ref prev cur #f) #f))
    (set! s (string-append cur s))
    (loop)) (void))))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(addEdge "a" "b" 7)
(addEdge "a" "c" 9)
(addEdge "a" "f" 14)
(addEdge "b" "c" 10)
(addEdge "b" "d" 15)
(addEdge "c" "d" 11)
(addEdge "c" "f" 2)
(addEdge "d" "e" 6)
(addEdge "e" "f" 9)
(define res (dijkstra "a"))
(define dist (if res (hash-ref res "dist" #f) #f))
(define prev (if res (hash-ref res "prev" #f) #f))
(displayln (string-append (string-append (string-append "Distance to e: " (format "~a" (if dist (hash-ref dist "e" #f) #f))) ", Path: ") (path prev "e")))
(displayln (string-append (string-append (string-append "Distance to f: " (format "~a" (if dist (hash-ref dist "f" #f) #f))) ", Path: ") (path prev "f")))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
