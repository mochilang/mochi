;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (log2 x)
  (let/ec _return (begin
(define k 0.0)
(define v x)
(let/ec _break (let loop ()
  (if (>= v 2.0) (let ()
    (set! v (/ v 2.0))
    (set! k (let ([__l k] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (< v 1.0) (let ()
    (set! v (* v 2.0))
    (set! k (- k 1.0))
    (loop)) (void))))
(define z (/ (- v 1.0) (let ([__l v] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define zpow z)
(define sum z)
(define i 3)
(let/ec _break (let loop ()
  (if (<= i 9) (let ()
    (set! zpow (* (* zpow z) z))
    (set! sum (let ([__l sum] [__r (/ zpow (exact->inexact i))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define ln2 0.6931471805599453)
(_return (let ([__l k] [__r (/ (* 2.0 sum) ln2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (entropy data)
  (let/ec _return (begin
(if (string=? data "") (let ()
(_return 0.0)
) (void))
(define counts (hash))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])) (let ()
    (define ch (substring data i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (hash-has-key? counts ch) (let ()
(set! counts (hash-set (or counts (hash)) ch (let ([__l (if counts (hash-ref counts ch #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(set! counts (hash-set (or counts (hash)) ch 1))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define e 0.0)
(define l (exact->inexact (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])))
(let/ec _break (for ([ch (in-hash-keys counts)])
  (let/ec _cont
(define px (/ (exact->inexact (if counts (hash-ref counts ch #f) #f)) l))
(if (> px 0.0) (let ()
(set! e (- e (* px (log2 px))))
) (void))
  )))
(_return e)
))
)
(define source (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "// Mochi translation of the Rosetta \"Entropy-Narcissist\" task\n" "// Simplified to compute the entropy of this source string\n\n") "fun log2(x: float): float {\n") "  var k = 0.0\n") "  var v = x\n") "  while v >= 2.0 {\n") "    v = v / 2.0\n") "    k = k + 1.0\n") "  }\n") "  while v < 1.0 {\n") "    v = v * 2.0\n") "    k = k - 1.0\n") "  }\n") "  let z = (v - 1.0) / (v + 1.0)\n") "  var zpow = z\n") "  var sum = z\n") "  var i = 3\n") "  while i <= 9 {\n") "    zpow = zpow * z * z\n") "    sum = sum + zpow / (i as float)\n") "    i = i + 2\n") "  }\n") "  let ln2 = 0.6931471805599453\n") "  return k + 2.0 * sum / ln2\n") "}\n\n") "fun entropy(data: string): float {\n") "  if data == \"\" { return 0.0 }\n") "  var counts: map<string,int> = {}\n") "  var i = 0\n") "  while i < len(data) {\n") "    let ch = substring(data, i, i+1)\n") "    if ch in counts {\n") "      counts[ch] = counts[ch] + 1\n") "    } else {\n") "      counts[ch] = 1\n") "    }\n") "    i = i + 1\n") "  }\n") "  var e = 0.0\n") "  let l = len(data) as float\n") "  for ch in counts {\n") "    let px = (counts[ch] as float) / l\n") "    if px > 0.0 {\n") "      e = e - px * log2(px)\n") "    }\n") "  }\n") "  return e\n") "}\n\n") "// Store the program source as a string constant\n") "let source = ... // truncated in actual source\n") "\nfun main() {\n") "  print(\"Source file entropy: \" + str(entropy(source)))\n") "}\n\n") "main()\n"))
(define (main)
  (let/ec _return (begin
(displayln (string-append "Source file entropy: " (format "~a" (entropy source))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
