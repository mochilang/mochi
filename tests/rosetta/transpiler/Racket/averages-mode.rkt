;; Generated by Mochi 0.10.41 on 2025-07-27 15:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define arr1 (list 2 7 1 8 2))
(define counts1 (hash))
(define keys1 (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr1) (string-length arr1)] [(hash? arr1) (hash-count arr1)] [else (length arr1)])) (let ()
    (define v (list-ref arr1 i))
    (if (hash-has-key? counts1 v) (let ()
(set! counts1 (hash-set (or counts1 (hash)) v (let ([__l (if counts1 (hash-ref counts1 v #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(set! counts1 (hash-set (or counts1 (hash)) v 1))
(set! keys1 (append keys1 (list v)))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define max1 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? keys1) (string-length keys1)] [(hash? keys1) (hash-count keys1)] [else (length keys1)])) (let ()
    (define k (list-ref keys1 i))
    (define c (if counts1 (hash-ref counts1 k #f) #f))
    (if (> c max1) (let ()
(set! max1 c)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define modes1 (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? keys1) (string-length keys1)] [(hash? keys1) (hash-count keys1)] [else (length keys1)])) (let ()
    (define k (list-ref keys1 i))
    (if (equal? (if counts1 (hash-ref counts1 k #f) #f) max1) (let ()
(set! modes1 (append modes1 (list k)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (format "~a" modes1))
(define arr2 (list 2 7 1 8 2 8))
(define counts2 (hash))
(define keys2 (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr2) (string-length arr2)] [(hash? arr2) (hash-count arr2)] [else (length arr2)])) (let ()
    (define v (list-ref arr2 i))
    (if (hash-has-key? counts2 v) (let ()
(set! counts2 (hash-set (or counts2 (hash)) v (let ([__l (if counts2 (hash-ref counts2 v #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(set! counts2 (hash-set (or counts2 (hash)) v 1))
(set! keys2 (append keys2 (list v)))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define max2 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? keys2) (string-length keys2)] [(hash? keys2) (hash-count keys2)] [else (length keys2)])) (let ()
    (define k (list-ref keys2 i))
    (define c (if counts2 (hash-ref counts2 k #f) #f))
    (if (> c max2) (let ()
(set! max2 c)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define modes2 (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? keys2) (string-length keys2)] [(hash? keys2) (hash-count keys2)] [else (length keys2)])) (let ()
    (define k (list-ref keys2 i))
    (if (equal? (if counts2 (hash-ref counts2 k #f) #f) max2) (let ()
(set! modes2 (append modes2 (list k)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (format "~a" modes2))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
