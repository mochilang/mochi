;; Generated by Mochi 0.10.39 on 2025-07-24 13:25 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define seed 1)
(define (prng max)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return (modulo seed max))
))
)
(define (gen n)
  (let/ec _return (begin
(define arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! arr (append arr (list "[")))
    (set! arr (append arr (list "]")))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1))
(let/ec _break (let loop ()
  (if (> j 0) (let ()
    (define k (prng (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define tmp (list-ref arr j))
    (set! arr (list-set arr j (list-ref arr k)))
    (set! arr (list-set arr k tmp))
    (set! j (- j 1))
    (loop)) (void))))
(define out "")
(for ([ch arr])
(set! out (string-append out ch))
)
(_return out)
))
)
(define (testBalanced s)
  (let/ec _return (begin
(define open 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define c (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? c "[") (let ()
(set! open (let ([__l open] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? c "]") (let ()
(if (equal? open 0) (let ()
(displayln (string-append s ": not ok"))
(_return void)
) (void))
(set! open (- open 1))
) (let ()
(displayln (string-append s ": not ok"))
(_return void)
))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (equal? open 0) (let ()
(displayln (string-append s ": ok"))
) (let ()
(displayln (string-append s ": not ok"))
))
))
)
(define (main)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let ()
    (testBalanced (gen i))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(testBalanced "()")
))
)
(main)
