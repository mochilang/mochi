;; Generated by Mochi 0.10.47 on 2025-07-28 11:49 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define n (list))
(define (initN)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i 15) (let ()
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 11) (let ()
    (set! row (append row (list " ")))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row (list-set row (int 5) "x"))
    (set! n (append n (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (horiz c1 c2 r)
  (let/ec _return (begin
(define c c1)
(let/ec _break (let loop ()
  (if (<= c c2) (let ()
    (set! n (list-set n r (list-set (list-ref n r) c "x")))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (verti r1 r2 c)
  (let/ec _return (begin
(define r r1)
(let/ec _break (let loop ()
  (if (<= r r2) (let ()
    (set! n (list-set n r (list-set (list-ref n r) c "x")))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (diagd c1 c2 r)
  (let/ec _return (begin
(define c c1)
(let/ec _break (let loop ()
  (if (<= c c2) (let ()
    (set! n (list-set n (- (let ([__l r] [__r c]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) c1) (list-set (list-ref n (- (let ([__l r] [__r c]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) c1)) c "x")))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (diagu c1 c2 r)
  (let/ec _return (begin
(define c c1)
(let/ec _break (let loop ()
  (if (<= c c2) (let ()
    (set! n (list-set n (let ([__l (- r c)] [__r c1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref n (let ([__l (- r c)] [__r c1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) c "x")))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define draw (hash))
(define (initDraw)
  (let/ec _return (begin
(set! draw (hash-set (or draw (hash)) 1 (lambda ()
  (let/ec _return (begin
(horiz 6 10 0)
)))))
(set! draw (hash-set (or draw (hash)) 2 (lambda ()
  (let/ec _return (begin
(horiz 6 10 4)
)))))
(set! draw (hash-set (or draw (hash)) 3 (lambda ()
  (let/ec _return (begin
(diagd 6 10 0)
)))))
(set! draw (hash-set (or draw (hash)) 4 (lambda ()
  (let/ec _return (begin
(diagu 6 10 4)
)))))
(set! draw (hash-set (or draw (hash)) 5 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 1 #f) #f)
(if draw (hash-ref draw 4 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 6 (lambda ()
  (let/ec _return (begin
(verti 0 4 10)
)))))
(set! draw (hash-set (or draw (hash)) 7 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 1 #f) #f)
(if draw (hash-ref draw 6 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 8 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 2 #f) #f)
(if draw (hash-ref draw 6 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 9 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 1 #f) #f)
(if draw (hash-ref draw 8 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 10 (lambda ()
  (let/ec _return (begin
(horiz 0 4 0)
)))))
(set! draw (hash-set (or draw (hash)) 20 (lambda ()
  (let/ec _return (begin
(horiz 0 4 4)
)))))
(set! draw (hash-set (or draw (hash)) 30 (lambda ()
  (let/ec _return (begin
(diagu 0 4 4)
)))))
(set! draw (hash-set (or draw (hash)) 40 (lambda ()
  (let/ec _return (begin
(diagd 0 4 0)
)))))
(set! draw (hash-set (or draw (hash)) 50 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 10 #f) #f)
(if draw (hash-ref draw 40 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 60 (lambda ()
  (let/ec _return (begin
(verti 0 4 0)
)))))
(set! draw (hash-set (or draw (hash)) 70 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 10 #f) #f)
(if draw (hash-ref draw 60 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 80 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 20 #f) #f)
(if draw (hash-ref draw 60 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 90 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 10 #f) #f)
(if draw (hash-ref draw 80 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 100 (lambda ()
  (let/ec _return (begin
(horiz 6 10 14)
)))))
(set! draw (hash-set (or draw (hash)) 200 (lambda ()
  (let/ec _return (begin
(horiz 6 10 10)
)))))
(set! draw (hash-set (or draw (hash)) 300 (lambda ()
  (let/ec _return (begin
(diagu 6 10 14)
)))))
(set! draw (hash-set (or draw (hash)) 400 (lambda ()
  (let/ec _return (begin
(diagd 6 10 10)
)))))
(set! draw (hash-set (or draw (hash)) 500 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 100 #f) #f)
(if draw (hash-ref draw 400 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 600 (lambda ()
  (let/ec _return (begin
(verti 10 14 10)
)))))
(set! draw (hash-set (or draw (hash)) 700 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 100 #f) #f)
(if draw (hash-ref draw 600 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 800 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 200 #f) #f)
(if draw (hash-ref draw 600 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 900 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 100 #f) #f)
(if draw (hash-ref draw 800 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 1000 (lambda ()
  (let/ec _return (begin
(horiz 0 4 14)
)))))
(set! draw (hash-set (or draw (hash)) 2000 (lambda ()
  (let/ec _return (begin
(horiz 0 4 10)
)))))
(set! draw (hash-set (or draw (hash)) 3000 (lambda ()
  (let/ec _return (begin
(diagd 0 4 10)
)))))
(set! draw (hash-set (or draw (hash)) 4000 (lambda ()
  (let/ec _return (begin
(diagu 0 4 14)
)))))
(set! draw (hash-set (or draw (hash)) 5000 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 1000 #f) #f)
(if draw (hash-ref draw 4000 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 6000 (lambda ()
  (let/ec _return (begin
(verti 10 14 0)
)))))
(set! draw (hash-set (or draw (hash)) 7000 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 1000 #f) #f)
(if draw (hash-ref draw 6000 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 8000 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 2000 #f) #f)
(if draw (hash-ref draw 6000 #f) #f)
)))))
(set! draw (hash-set (or draw (hash)) 9000 (lambda ()
  (let/ec _return (begin
(if draw (hash-ref draw 1000 #f) #f)
(if draw (hash-ref draw 8000 #f) #f)
)))))
))
)
(define (printNumeral)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i 15) (let ()
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 11) (let ()
    (set! line (string-append (string-append line (if (if n (list-ref n (int i)) #f) (list-ref (if n (list-ref n (int i)) #f) (int j)) #f)) " "))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
))
)
(initDraw)
(define numbers (list 0 1 20 300 4000 5555 6789 9999))
(let/ec _break (for ([number numbers])
  (let/ec _cont
(initN)
(displayln (string-append (format "~a" number) ":"))
(define num number)
(define thousands (quotient num 1000))
(set! num (modulo num 1000))
(define hundreds (quotient num 100))
(set! num (modulo num 100))
(define tens (quotient num 10))
(define ones (modulo num 10))
(if (> thousands 0) (let ()
(if draw (hash-ref draw (* thousands 1000) #f) #f)
) (void))
(if (> hundreds 0) (let ()
(if draw (hash-ref draw (* hundreds 100) #f) #f)
) (void))
(if (> tens 0) (let ()
(if draw (hash-ref draw (* tens 10) #f) #f)
) (void))
(if (> ones 0) (let ()
(if draw (hash-ref draw ones #f) #f)
) (void))
(printNumeral)
  )))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
