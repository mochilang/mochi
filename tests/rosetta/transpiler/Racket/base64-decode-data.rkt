;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (+ i 1)) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (substring str 0 (+ 0 1)) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (substring str i (+ i 1)) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (ord ch)
  (let/ec _return (begin
(define upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower "abcdefghijklmnopqrstuvwxyz")
(define idx (indexOf upper ch))
(if (>= idx 0) (let ()
(_return (let ([__l 65] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(set! idx (indexOf lower ch))
(if (>= idx 0) (let ()
(_return (let ([__l 97] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (and (string>=? ch "0") (string<=? ch "9")) (let ()
(_return (let ([__l 48] [__r (parseIntStr ch)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (string=? ch "+") (let ()
(_return 43)
) (void))
(if (string=? ch "/") (let ()
(_return 47)
) (void))
(if (string=? ch " ") (let ()
(_return 32)
) (void))
(if (string=? ch "=") (let ()
(_return 61)
) (void))
(_return 0)
))
)
(define (chr n)
  (let/ec _return (begin
(define upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower "abcdefghijklmnopqrstuvwxyz")
(if (and (>= n 65) (< n 91)) (let ()
(_return (substring upper (- n 65) (- n 64)))
) (void))
(if (and (>= n 97) (< n 123)) (let ()
(_return (substring lower (- n 97) (- n 96)))
) (void))
(if (and (>= n 48) (< n 58)) (let ()
(define digits "0123456789")
(_return (substring digits (- n 48) (- n 47)))
) (void))
(if (equal? n 43) (let ()
(_return "+")
) (void))
(if (equal? n 47) (let ()
(_return "/")
) (void))
(if (equal? n 32) (let ()
(_return " ")
) (void))
(if (equal? n 61) (let ()
(_return "=")
) (void))
(_return "?")
))
)
(define (toBinary n bits)
  (let/ec _return (begin
(define b "")
(define val n)
(define i 0)
(let/ec _break (let loop ()
  (if (< i bits) (let ()
    (set! b (string-append (format "~a" (modulo val 2)) b))
    (set! val (int (quotient val 2)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return b)
))
)
(define (binToInt bits)
  (let/ec _return (begin
(define n 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)])) (let ()
    (set! n (let ([__l (* n 2)] [__r (parseIntStr (substring bits i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return n)
))
)
(define (base64Encode text)
  (let/ec _return (begin
(define alphabet "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
(define bin "")
(for ([__i (in-range (string-length text))])
  (define ch (substring text __i (+ __i 1)))
(set! bin (string-append bin (toBinary (ord ch) 8)))
)
(let/ec _break (let loop ()
  (if (not (equal? (modulo (cond [(string? bin) (string-length bin)] [(hash? bin) (hash-count bin)] [else (length bin)]) 6) 0)) (let ()
    (set! bin (string-append bin "0"))
    (loop)) (void))))
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bin) (string-length bin)] [(hash? bin) (hash-count bin)] [else (length bin)])) (let ()
    (define chunk (substring bin i (let ([__l i] [__r 6]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define val (binToInt chunk))
    (set! out (string-append out (substring alphabet val (let ([__l val] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 6]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define pad (modulo (- 3 (modulo (cond [(string? text) (string-length text)] [(hash? text) (hash-count text)] [else (length text)]) 3)) 3))
(if (equal? pad 1) (let ()
(set! out (string-append (substring out 0 (- (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) 1)) "="))
) (void))
(if (equal? pad 2) (let ()
(set! out (string-append (substring out 0 (- (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) 2)) "=="))
) (void))
(_return out)
))
)
(define (base64Decode enc)
  (let/ec _return (begin
(define alphabet "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
(define bin "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? enc) (string-length enc)] [(hash? enc) (hash-count enc)] [else (length enc)])) (let ()
    (define ch (substring enc i (+ i 1)))
    (if (string=? ch "=") (let ()
(_break)
) (void))
    (define idx (indexOf alphabet ch))
    (set! bin (string-append bin (toBinary idx 6)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define out "")
(set! i 0)
(let/ec _break (let loop ()
  (if (<= (let ([__l i] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? bin) (string-length bin)] [(hash? bin) (hash-count bin)] [else (length bin)])) (let ()
    (define chunk (substring bin i (let ([__l i] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define val (binToInt chunk))
    (set! out (string-append out (chr val)))
    (set! i (let ([__l i] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define msg "Rosetta Code Base64 decode data task")
(displayln (string-append "Original : " msg))
(define enc (base64Encode msg))
(displayln (string-append "\nEncoded  : " enc))
(define dec (base64Decode enc))
(displayln (string-append "\nDecoded  : " dec))
