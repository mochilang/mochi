;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (trim s)
  (let/ec _return (begin
(define start 0)
(let/ec _break (let loop ()
  (if (and (< start (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (or (string=? (slice s start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ") (string=? (slice s start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "\t"))) (let ()
    (set! start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define end (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(let/ec _break (let loop ()
  (if (and (> end start) (or (string=? (slice s (- end 1) end) " ") (string=? (slice s (- end 1) end) "\t"))) (let ()
    (set! end (- end 1))
    (loop)) (void))))
(_return (slice s start end))
))
)
(define (split s sep)
  (let/ec _return (begin
(define parts (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (and (> (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)]) 0) (<= (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) (string=? (slice s i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sep)) (let ()
(set! parts (append parts (list cur)))
(set! cur "")
(set! i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! cur (string-append cur (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(set! parts (append parts (list cur)))
(_return parts)
))
)
(define (splitWS s)
  (let/ec _return (begin
(define out (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (string=? ch " ") (string=? ch "\t")) (let ()
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! out (append out (list cur)))
(set! cur "")
) (void))
) (let ()
(set! cur (string-append cur ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! out (append out (list cur)))
) (void))
(_return out)
))
)
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (slice str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (slice str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (parseAsm asm)
  (let/ec _return (begin
(define lines (string-split asm "\n"))
(define instrs (list))
(define labels (hash))
(define lineNum 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lines) (string-length lines)] [(hash? lines) (hash-count lines)] [else (length lines)])) (let ()
    (define line (if lines (list-ref lines (int i)) #f))
    (if (not (equal? (index-of line ";") (- 1))) (let ()
(set! line (slice line 0 (index-of line ";")))
) (void))
    (set! line (trim line))
    (define label "")
    (if (not (equal? (index-of line ":") (- 1))) (let ()
(define idx (index-of line ":"))
(set! label (trim (slice line 0 idx)))
(set! line (trim (slice line (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]))))
) (void))
    (define opcode "")
    (define arg "")
    (if (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(define parts (splitWS line))
(if (> (cond [(string? parts) (string-length parts)] [(hash? parts) (hash-count parts)] [else (length parts)]) 0) (let ()
(set! opcode (if parts (list-ref parts (int 0)) #f))
) (void))
(if (> (cond [(string? parts) (string-length parts)] [(hash? parts) (hash-count parts)] [else (length parts)]) 1) (let ()
(set! arg (if parts (list-ref parts (int 1)) #f))
) (let ()
(define ops (hash "NOP" 0 "LDA" 1 "STA" 2 "ADD" 3 "SUB" 4 "BRZ" 5 "JMP" 6 "STP" 7))
(if (not (hash-has-key? ops opcode)) (let ()
(set! arg opcode)
(set! opcode "")
) (void))
))
) (void))
    (if (not (string=? label "")) (let ()
(set! labels (hash-set (or labels (hash)) label lineNum))
) (void))
    (set! instrs (append instrs (list (hash "Label" label "Opcode" opcode "Arg" arg))))
    (set! lineNum (let ([__l lineNum] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "instructions" instrs "labels" labels))
))
)
(define (compile p)
  (let/ec _return (begin
(define instrs (if p (hash-ref p "instructions" #f) #f))
(define labels (if p (hash-ref p "labels" #f) #f))
(define bytecode (list))
(define i 0)
(define opcodes (hash "NOP" 0 "LDA" 1 "STA" 2 "ADD" 3 "SUB" 4 "BRZ" 5 "JMP" 6 "STP" 7))
(let/ec _break (let loop ()
  (if (< i (cond [(string? instrs) (string-length instrs)] [(hash? instrs) (hash-count instrs)] [else (length instrs)])) (let ()
    (define ins (if instrs (list-ref instrs (int i)) #f))
    (define arg 0)
    (if (not (string=? (if ins (hash-ref ins "Arg" #f) #f) "")) (let ()
(if (hash-has-key? labels (if ins (hash-ref ins "Arg" #f) #f)) (let ()
(set! arg (if labels (hash-ref labels (if ins (hash-ref ins "Arg" #f) #f) #f) #f))
) (let ()
(set! arg (_parse-int-str (if ins (hash-ref ins "Arg" #f) #f) 10))
))
) (void))
    (define code 0)
    (if (not (string=? (if ins (hash-ref ins "Opcode" #f) #f) "")) (let ()
(set! code (if opcodes (hash-ref opcodes (if ins (hash-ref ins "Opcode" #f) #f) #f) #f))
) (void))
    (set! bytecode (append bytecode (list (let ([__l (* code 32)] [__r arg]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (< (cond [(string? bytecode) (string-length bytecode)] [(hash? bytecode) (hash-count bytecode)] [else (length bytecode)]) 32) (let ()
    (set! bytecode (append bytecode (list 0)))
    (loop)) (void))))
(_return bytecode)
))
)
(define (floorMod a b)
  (let/ec _return (begin
(define r (modulo a b))
(if (< r 0) (let ()
(set! r (let ([__l r] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return r)
))
)
(define (run bytecode)
  (let/ec _return (begin
(define acc 0)
(define pc 0)
(define mem (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bytecode) (string-length bytecode)] [(hash? bytecode) (hash-count bytecode)] [else (length bytecode)])) (let ()
    (set! mem (append mem (list (if bytecode (list-ref bytecode (int i)) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (< pc 32) (let ()
    (define op (quotient (if mem (list-ref mem (int pc)) #f) 32))
    (define arg (modulo (if mem (list-ref mem (int pc)) #f) 32))
    (set! pc (let ([__l pc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? op 0) (let ()
(loop)
) (let ()
(if (equal? op 1) (let ()
(set! acc (if mem (list-ref mem (int arg)) #f))
) (let ()
(if (equal? op 2) (let ()
(set! mem (list-set mem (int arg) acc))
) (let ()
(if (equal? op 3) (let ()
(set! acc (floorMod (let ([__l acc] [__r (if mem (list-ref mem (int arg)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 256))
) (let ()
(if (equal? op 4) (let ()
(set! acc (floorMod (- acc (if mem (list-ref mem (int arg)) #f)) 256))
) (let ()
(if (equal? op 5) (let ()
(if (equal? acc 0) (let ()
(set! pc arg)
) (void))
) (let ()
(if (equal? op 6) (let ()
(set! pc arg)
) (let ()
(if (equal? op 7) (let ()
(_break)
) (let ()
(_break)
))
))
))
))
))
))
))
))
    (loop)) (void))))
(_return acc)
))
)
(define (execute asm)
  (let/ec _return (begin
(define parsed (parseAsm asm))
(define bc (compile parsed))
(_return (run bc))
))
)
(define (main)
  (let/ec _return (begin
(define examples (list (string-append (string-append (string-append (string-append "LDA   x\n" "ADD   y       ; accumulator = x + y\n") "STP\n") "x:            2\n") "y:            2") (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "loop:   LDA   prodt\n" "        ADD   x\n") "        STA   prodt\n") "        LDA   y\n") "        SUB   one\n") "        STA   y\n") "        BRZ   done\n") "        JMP   loop\n") "done:   LDA   prodt   ; to display it\n") "        STP\n") "x:            8\n") "y:            7\n") "prodt:        0\n") "one:          1") (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "loop:   LDA   n\n" "        STA   temp\n") "        ADD   m\n") "        STA   n\n") "        LDA   temp\n") "        STA   m\n") "        LDA   count\n") "        SUB   one\n") "        BRZ   done\n") "        STA   count\n") "        JMP   loop\n") "done:   LDA   n       ; to display it\n") "        STP\n") "m:            1\n") "n:            1\n") "temp:         0\n") "count:        8       ; valid range: 1-11\n") "one:          1") (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "start:  LDA   load\n" "ADD   car     ; head of list\n") "STA   ldcar\n") "ADD   one\n") "STA   ldcdr   ; next CONS cell\n") "ldcar:  NOP\n") "STA   value\n") "ldcdr:  NOP\n") "BRZ   done    ; 0 stands for NIL\n") "STA   car\n") "JMP   start\n") "done:   LDA   value   ; CAR of last CONS\n") "STP\n") "load:   LDA   0\n") "value:        0\n") "car:          28\n") "one:          1\n") "                        ; order of CONS cells\n") "                        ; in memory\n") "                        ; does not matter\n") "        6\n") "        0       ; 0 stands for NIL\n") "        2       ; (CADR ls)\n") "        26      ; (CDDR ls) -- etc.\n") "        5\n") "        20\n") "        3\n") "        30\n") "        1       ; value of (CAR ls)\n") "        22      ; points to (CDR ls)\n") "        4\n") "        24") (string-append (string-append (string-append (string-append "LDA  3\n" "SUB  4\n") "STP  0\n") "         0\n") "         255") (string-append (string-append (string-append (string-append "LDA  3\n" "SUB  4\n") "STP  0\n") "                0\n") "                1") (string-append (string-append (string-append (string-append "LDA  3\n" "ADD  4\n") "STP  0\n") "                1\n") "                255")))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? examples) (string-length examples)] [(hash? examples) (hash-count examples)] [else (length examples)])) (let ()
    (define res (execute (if examples (list-ref examples (int i)) #f)))
    (displayln (format "~a" res))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
