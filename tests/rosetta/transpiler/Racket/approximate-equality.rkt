;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (abs x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (maxf a b)
  (let/ec _return (begin
(if (> a b) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (isClose a b)
  (let/ec _return (begin
(define relTol 1e-09)
(define t (abs (- a b)))
(define u (* relTol (maxf (abs a) (abs b))))
(_return (<= t u))
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let ()
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (main)
  (let/ec _return (begin
(define root2 (sqrtApprox 2.0))
(define pairs (list (list 1.0000000000000002e+14 1.0000000000000002e+14) (list 100.01 100.011) (list (/ 1.0000000000000002e+13 10000.0) 1.0000000000000001e+09) (list 0.001 0.0010000001) (list 1.01e-22 0.0) (list (* root2 root2) 2.0) (list (* (- root2) root2) (- 2.0)) (list 100000000000000000.0 100000000000000000.0) (list 3.141592653589793 3.141592653589793)))
(for ([pair pairs])
(define a (list-ref pair 0))
(define b (list-ref pair 1))
(define s (if (isClose a b) "â‰ˆ" "â‰‰"))
(displayln (string-append (string-append (string-append (string-append (format "~a" a) " ") s) " ") (format "~a" b)))
)
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
