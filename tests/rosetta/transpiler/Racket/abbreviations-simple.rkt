;; Generated by Mochi 0.10.40 on 2025-07-25 19:02 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (fields s)
  (let/ec _return (begin
(define words (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (or (string=? ch " ") (string=? ch "\n")) (string=? ch "\t")) (let ()
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! words (append words (list cur)))
(set! cur "")
) (void))
) (let ()
(set! cur (string-append cur ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! words (append words (list cur)))
) (void))
(_return words)
))
)
(define (padRight s width)
  (let/ec _return (begin
(define out s)
(define i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(let/ec _break (let loop ()
  (if (< i width) (let ()
    (set! out (string-append out " "))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (join xs sep)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (> i 0) (let ()
(set! res (string-append res sep))
) (void))
    (set! res (string-append res (list-ref xs i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (substring str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (substring str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (isDigits s)
  (let/ec _return (begin
(if (equal? (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 0) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (string<? ch "0") (string>? ch "9")) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (readTable table)
  (let/ec _return (begin
(define toks (fields table))
(define cmds (list))
(define mins (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? toks) (string-length toks)] [(hash? toks) (hash-count toks)] [else (length toks)])) (let ()
    (define cmd (list-ref toks i))
    (define minlen (cond [(string? cmd) (string-length cmd)] [(hash? cmd) (hash-count cmd)] [else (length cmd)]))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (and (< i (cond [(string? toks) (string-length toks)] [(hash? toks) (hash-count toks)] [else (length toks)])) (isDigits (list-ref toks i))) (let ()
(define num (parseIntStr (list-ref toks i)))
(if (and (>= num 1) (< num (cond [(string? cmd) (string-length cmd)] [(hash? cmd) (hash-count cmd)] [else (length cmd)]))) (let ()
(set! minlen num)
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
) (void))
    (set! cmds (append cmds (list cmd)))
    (set! mins (append mins (list minlen)))
    (loop)) (void))))
(_return (hash "commands" cmds "mins" mins))
))
)
(define (validate commands mins words)
  (let/ec _return (begin
(define results (list))
(define wi 0)
(let/ec _break (let loop ()
  (if (< wi (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)])) (let ()
    (define w (list-ref words wi))
    (define found #f)
    (define wlen (cond [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)]))
    (define ci 0)
    (let/ec _break (let loop ()
  (if (< ci (cond [(string? commands) (string-length commands)] [(hash? commands) (hash-count commands)] [else (length commands)])) (let ()
    (define cmd (list-ref commands ci))
    (if (and (and (not (equal? (list-ref mins ci) 0)) (>= wlen (list-ref mins ci))) (<= wlen (cond [(string? cmd) (string-length cmd)] [(hash? cmd) (hash-count cmd)] [else (length cmd)]))) (let ()
(define c (upper cmd))
(define ww (upper w))
(if (string=? (substring c 0 wlen) ww) (let ()
(set! results (append results (list c)))
(set! found #t)
(_break)
) (void))
) (void))
    (set! ci (let ([__l ci] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (not found) (let ()
(set! results (append results (list "*error*")))
) (void))
    (set! wi (let ([__l wi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return results)
))
)
(define (main)
  (let/ec _return (begin
(define table (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "" "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 "))
(define sentence "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin")
(define tbl (readTable table))
(define commands (if tbl (hash-ref tbl "commands" #f) #f))
(define mins (if tbl (hash-ref tbl "mins" #f) #f))
(define words (fields sentence))
(define results (validate commands mins words))
(define out1 "user words:")
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)])) (let ()
    (set! out1 (string-append out1 " "))
    (if (< k (- (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)]) 1)) (let ()
(set! out1 (string-append out1 (padRight (list-ref words k) (cond [(string? (list-ref results k)) (string-length (list-ref results k))] [(hash? (list-ref results k)) (hash-count (list-ref results k))] [else (length (list-ref results k))]))))
) (let ()
(set! out1 (string-append out1 (list-ref words k)))
))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln out1)
(displayln (string-append "full words: " (join results " ")))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
