;; Generated by Mochi 0.10.47 on 2025-07-28 11:49 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (isPrime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(if (equal? (modulo n 2) 0) (let ()
(_return (equal? n 2))
) (void))
(if (equal? (modulo n 3) 0) (let ()
(_return (equal? n 3))
) (void))
(define d 5)
(let/ec _break (let loop ()
  (if (<= (* d d) n) (let ()
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define circs (list))
(define (isCircular n)
  (let/ec _return (begin
(define nn n)
(define pow 1)
(let/ec _break (let loop ()
  (if (> nn 0) (let ()
    (set! pow (* pow 10))
    (set! nn (quotient nn 10))
    (loop)) (void))))
(set! nn n)
(let/ec _break (let loop ()
  (if #t (let ()
    (set! nn (* nn 10))
    (define f (quotient nn pow))
    (set! nn (let ([__l nn] [__r (* f (- 1 pow))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? nn n) (let ()
(_break)
) (void))
    (if (not (isPrime nn)) (let ()
(_return #f)
) (void))
    (loop)) (void))))
(_return #t)
))
)
(displayln "The first 19 circular primes are:")
(define digits (list 1 3 7 9))
(define q (list 1 2 3 5 7 9))
(define fq (list 1 2 3 5 7 9))
(define count 0)
(let/ec _break (let loop ()
  (if #t (let ()
    (define f (if q (list-ref q (int 0)) #f))
    (define fd (if fq (list-ref fq (int 0)) #f))
    (if (and (isPrime f) (isCircular f)) (let ()
(set! circs (append circs (list f)))
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? count 19) (let ()
(_break)
) (void))
) (void))
    (set! q (sublist q 1 (length q)))
    (set! fq (sublist fq 1 (length fq)))
    (if (and (not (equal? f 2)) (not (equal? f 5))) (let ()
(let/ec _break (for ([d digits])
  (let/ec _cont
(set! q (append q (list (let ([__l (* f 10)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! fq (append fq (list fd)))
  )))
) (void))
    (loop)) (void))))
(define (showList xs)
  (let/ec _return (begin
(define out "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (set! out (string-append out (format "~a" (if xs (list-ref xs (int i)) #f))))
    (if (< i (- (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)) (let ()
(set! out (string-append out ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append out "]"))
))
)
(displayln (showList circs))
(displayln "\nThe next 4 circular primes, in repunit format, are:")
(displayln "[R(19) R(23) R(317) R(1031)]")
(displayln "\nThe following repunits are probably circular primes:")
(let/ec _break (for ([i (list 5003 9887 15073 25031 35317 49081)])
  (let/ec _cont
(displayln (string-append (string-append "R(" (format "~a" i)) ") : true"))
  )))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
