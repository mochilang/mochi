;; Generated by Mochi 0.10.37 on 2025-07-23 11:36 +0700
#lang racket/base
(require racket/list racket/string racket/math json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (fields s)
  (let/ec _return (begin
(define words (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (or (string=? ch " ") (string=? ch "\n")) (string=? ch "\t")) (let ()
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! words (append words (list cur)))
(set! cur "")
) (void))
) (let ()
(set! cur (string-append cur ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! words (append words (list cur)))
) (void))
(_return words)
))
)
(define (padRight s width)
  (let/ec _return (begin
(define out s)
(define i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(let/ec _break (let loop ()
  (if (< i width) (let ()
    (set! out (string-append out " "))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (join xs sep)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (> i 0) (let ()
(set! res (string-append res sep))
) (void))
    (set! res (string-append res (list-ref xs i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (validate commands words mins)
  (let/ec _return (begin
(define results (list))
(if (equal? (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)]) 0) (let ()
(_return results)
) (void))
(define wi 0)
(let/ec _break (let loop ()
  (if (< wi (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)])) (let ()
    (define w (list-ref words wi))
    (define found #f)
    (define wlen (cond [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)]))
    (define ci 0)
    (let/ec _break (let loop ()
  (if (< ci (cond [(string? commands) (string-length commands)] [(hash? commands) (hash-count commands)] [else (length commands)])) (let ()
    (define cmd (list-ref commands ci))
    (if (and (and (not (equal? (list-ref mins ci) 0)) (>= wlen (list-ref mins ci))) (<= wlen (cond [(string? cmd) (string-length cmd)] [(hash? cmd) (hash-count cmd)] [else (length cmd)]))) (let ()
(define c (upper cmd))
(define ww (upper w))
(if (equal? (substring c 0 wlen) ww) (let ()
(set! results (append results (list c)))
(set! found #t)
(_break)
) (void))
) (void))
    (set! ci (let ([__l ci] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (not found) (let ()
(set! results (append results (list "*error*")))
) (void))
    (set! wi (let ([__l wi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return results)
))
)
(define (main)
  (let/ec _return (begin
(define table (string-append (string-append (string-append (string-append (string-append (string-append "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp "))
(define commands (fields table))
(define mins (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? commands) (string-length commands)] [(hash? commands) (hash-count commands)] [else (length commands)])) (let ()
    (define count 0)
    (define j 0)
    (define cmd (list-ref commands i))
    (let/ec _break (let loop ()
  (if (< j (cond [(string? cmd) (string-length cmd)] [(hash? cmd) (hash-count cmd)] [else (length cmd)])) (let ()
    (define ch (substring cmd j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string<=? (string>=? ch (and "A" ch)) "Z") (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! mins (append mins (list count)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define sentence "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin")
(define words (fields sentence))
(define results (validate commands words mins))
(define out1 "user words:  ")
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)])) (let ()
    (set! out1 (string-append (string-append out1 (padRight (list-ref words k) (cond [(string? (list-ref results k)) (string-length (list-ref results k))] [(hash? (list-ref results k)) (hash-count (list-ref results k))] [else (length (list-ref results k))]))) " "))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln out1)
(displayln (string-append "full words:  " (join results " ")))
))
)
(main)
