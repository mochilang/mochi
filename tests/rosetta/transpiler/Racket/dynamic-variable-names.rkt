;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (substring str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (substring str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (main)
  (let/ec _return (begin
(define n 0)
(let/ec _break (let loop ()
  (if (or (< n 1) (> n 5)) (let ()
    (displayln "How many integer variables do you want to create (max 5) : ")
    (define line (input))
    (if (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(set! n (_parse-int-str line 10))
) (void))
    (loop)) (void))))
(define vars (hash))
(displayln "OK, enter the variable names and their values, below\n")
(define i 1)
(let/ec _break (let loop ()
  (if (<= i n) (let ()
    (displayln (string-append (string-append "\n  Variable " (format "~a" i)) "\n"))
    (displayln "    Name  : ")
    (define name (input))
    (if (hash-has-key? vars name) (let ()
(displayln "  Sorry, you've already created a variable of that name, try again")
(loop)
) (void))
    (define value 0)
    (let/ec _break (let loop ()
  (if #t (let ()
    (displayln "    Value : ")
    (define valstr (input))
    (if (equal? (cond [(string? valstr) (string-length valstr)] [(hash? valstr) (hash-count valstr)] [else (length valstr)]) 0) (let ()
(displayln "  Not a valid integer, try again")
(loop)
) (void))
    (define ok #t)
    (define j 0)
    (define neg #f)
    (if (string=? (substring valstr 0 1) "-") (let ()
(set! neg #t)
(set! j 1)
) (void))
    (let/ec _break (let loop ()
  (if (< j (cond [(string? valstr) (string-length valstr)] [(hash? valstr) (hash-count valstr)] [else (length valstr)])) (let ()
    (define ch (substring valstr j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (string<? ch "0") (string>? ch "9")) (let ()
(set! ok #f)
(_break)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (not ok) (let ()
(displayln "  Not a valid integer, try again")
(loop)
) (void))
    (set! value (_parse-int-str valstr 10))
    (_break)
    (loop)) (void))))
    (set! vars (hash-set (or vars (hash)) name value))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "\nEnter q to quit")
(let/ec _break (let loop ()
  (if #t (let ()
    (displayln "\nWhich variable do you want to inspect : ")
    (define name (input))
    (if (string=? (lower name) "q") (let ()
(_return void)
) (void))
    (if (hash-has-key? vars name) (let ()
(displayln (string-append "It's value is " (format "~a" (if vars (hash-ref vars name #f) #f))))
) (let ()
(displayln "Sorry there's no variable of that name, try again")
))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
