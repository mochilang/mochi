;; Generated by Mochi 0.10.55 on 2025-08-03 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (pad2 n)
  (let/ec _return (begin
(if (< n 10) (let ()
(_return (string-append "0" (format "~a" n)))
) (void))
(_return (format "~a" n))
))
)
(define (weekdayName z)
  (let/ec _return (begin
(define names (list "Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday"))
(_return (if names (if (hash? names) (hash-ref names (modulo (let ([__l z] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 7) #f) (list-ref names (int (modulo (let ([__l z] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 7)))) #f))
))
)
(define (main)
  (let/ec _return (begin
(define ts (int (quotient (now) 1000000000)))
(define days (int (quotient ts 86400)))
(define z (let ([__l days] [__r 719468]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define era (int (quotient z 146097)))
(define doe (- z (* era 146097)))
(define yoe (quotient (- (let ([__l (- doe (quotient doe 1460))] [__r (quotient doe 36524)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (quotient doe 146096)) (int 365)))
(define y (let ([__l yoe] [__r (* era 400)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define doy (- doe (- (let ([__l (* 365 yoe)] [__r (quotient yoe 4)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (quotient yoe 100))))
(define mp (quotient (let ([__l (* 5 doy)] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (int 153)))
(define d (int (let ([__l (- doy (quotient (let ([__l (* 153 mp)] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (int 5)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define m (int (let ([__l mp] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(if (> m 12) (let ()
(set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! m (- m 12))
) (void))
(define iso (string-append (string-append (string-append (string-append (format "~a" y) "-") (pad2 m)) "-") (pad2 d)))
(displayln iso)
(define months (list "January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December"))
(define line (string-append (string-append (string-append (string-append (string-append (string-append (weekdayName days) ", ") (if months (if (hash? months) (hash-ref months (- m 1) #f) (list-ref months (int (- m 1)))) #f)) " ") (format "~a" d)) ", ") (format "~a" y)))
(displayln line)
))
)
(main)
