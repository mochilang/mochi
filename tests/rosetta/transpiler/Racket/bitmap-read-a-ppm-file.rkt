;; Generated by Mochi 0.10.42 on 2025-07-27 22:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (newBitmap w h max)
  (let/ec _return (begin
(define rows (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let ()
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let ()
    (set! row (append row (list (hash "R" 0 "G" 0 "B" 0))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! rows (append rows (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "w" w "h" h "max" max "data" rows))
))
)
(define (setPx b x y p)
  (let/ec _return (begin
(define rows (if b (hash-ref b "data" #f) #f))
(define row (if rows (list-ref rows (int y)) #f))
(set! row (list-set row (int x) p))
(set! rows (list-set rows (int y) row))
(set! b (hash-set (or b (hash)) "data" rows))
))
)
(define (getPx b x y)
  (let/ec _return (begin
(_return (if (if (if b (hash-ref b "data" #f) #f) (list-ref (if b (hash-ref b "data" #f) #f) (int y)) #f) (list-ref (if (if b (hash-ref b "data" #f) #f) (list-ref (if b (hash-ref b "data" #f) #f) (int y)) #f) (int x)) #f))
))
)
(define (splitLines s)
  (let/ec _return (begin
(define out (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substr s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch "\n") (let ()
(set! out (append out (list cur)))
(set! cur "")
) (let ()
(set! cur (string-append cur ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! out (append out (list cur)))
(_return out)
))
)
(define (splitWS s)
  (let/ec _return (begin
(define out (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substr s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (or (or (string=? ch " ") (string=? ch "\t")) (string=? ch "\r")) (string=? ch "\n")) (let ()
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! out (append out (list cur)))
(set! cur "")
) (void))
) (let ()
(set! cur (string-append cur ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! out (append out (list cur)))
) (void))
(_return out)
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (substring str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (substring str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (tokenize s)
  (let/ec _return (begin
(define lines (splitLines s))
(define toks (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lines) (string-length lines)] [(hash? lines) (hash-count lines)] [else (length lines)])) (let ()
    (define line (if lines (list-ref lines (int i)) #f))
    (if (and (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (string=? (substr line 0 1) "#")) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (define parts (splitWS line))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? parts) (string-length parts)] [(hash? parts) (hash-count parts)] [else (length parts)])) (let ()
    (set! toks (append toks (list (if parts (list-ref parts (int j)) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return toks)
))
)
(define (readP3 text)
  (let/ec _return (begin
(define toks (tokenize text))
(if (< (cond [(string? toks) (string-length toks)] [(hash? toks) (hash-count toks)] [else (length toks)]) 4) (let ()
(_return (newBitmap 0 0 0))
) (void))
(if (not (string=? (if toks (list-ref toks (int 0)) #f) "P3")) (let ()
(_return (newBitmap 0 0 0))
) (void))
(define w (parseIntStr (if toks (list-ref toks (int 1)) #f)))
(define h (parseIntStr (if toks (list-ref toks (int 2)) #f)))
(define maxv (parseIntStr (if toks (list-ref toks (int 3)) #f)))
(define idx 4)
(define bm (newBitmap w h maxv))
(define y (- h 1))
(let/ec _break (let loop ()
  (if (>= y 0) (let ()
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let ()
    (define r (parseIntStr (if toks (list-ref toks (int idx)) #f)))
    (define g (parseIntStr (if toks (list-ref toks (int (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) #f)))
    (define b (parseIntStr (if toks (list-ref toks (int (let ([__l idx] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) #f)))
    (setPx bm x y (hash "R" r "G" g "B" b))
    (set! idx (let ([__l idx] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (- y 1))
    (loop)) (void))))
(_return bm)
))
)
(define (toGrey b)
  (let/ec _return (begin
(define h (if b (hash-ref b "h" #f) #f))
(define w (if b (hash-ref b "w" #f) #f))
(define m 0)
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let ()
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let ()
    (define p (getPx b x y))
    (define l (quotient (let ([__l (let ([__l (* (if p (hash-ref p "R" #f) #f) 2126)] [__r (* (if p (hash-ref p "G" #f) #f) 7152)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (if p (hash-ref p "B" #f) #f) 722)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 10000))
    (if (> l (if b (hash-ref b "max" #f) #f)) (let ()
(set! l (if b (hash-ref b "max" #f) #f))
) (void))
    (setPx b x y (hash "R" l "G" l "B" l))
    (if (> l m) (let ()
(set! m l)
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! b (hash-set (or b (hash)) "max" m))
))
)
(define (pad n w)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) w) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (writeP3 b)
  (let/ec _return (begin
(define h (if b (hash-ref b "h" #f) #f))
(define w (if b (hash-ref b "w" #f) #f))
(define max (if b (hash-ref b "max" #f) #f))
(define digits (cond [(string? (format "~a" max)) (string-length (format "~a" max))] [(hash? (format "~a" max)) (hash-count (format "~a" max))] [else (length (format "~a" max))]))
(define out (string-append (string-append (string-append (string-append (string-append (string-append "P3\n# generated from Bitmap.writeppmp3\n" (format "~a" w)) " ") (format "~a" h)) "\n") (format "~a" max)) "\n"))
(define y (- h 1))
(let/ec _break (let loop ()
  (if (>= y 0) (let ()
    (define line "")
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let ()
    (define p (getPx b x y))
    (set! line (string-append (string-append (string-append (string-append (string-append (string-append line "   ") (pad (if p (hash-ref p "R" #f) #f) digits)) " ") (pad (if p (hash-ref p "G" #f) #f) digits)) " ") (pad (if p (hash-ref p "B" #f) #f) digits)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (string-append (string-append out line) "\n"))
    (set! y (- y 1))
    (loop)) (void))))
(_return out)
))
)
(define ppmtxt (string-append (string-append (string-append (string-append (string-append (string-append (string-append "P3\n" "# feep.ppm\n") "4 4\n") "15\n") " 0  0  0    0  0  0    0  0  0   15  0 15\n") " 0  0  0    0 15  7    0  0  0    0  0  0\n") " 0  0  0    0  0  0    0 15  7    0  0  0\n") "15  0 15    0  0  0    0  0  0    0  0  0\n"))
(displayln "Original Colour PPM file")
(displayln ppmtxt)
(define bm (readP3 ppmtxt))
(displayln "Grey PPM:")
(toGrey bm)
(define out (writeP3 bm))
(displayln out)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
