;; Generated by Mochi 0.10.41 on 2025-07-26 17:02 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (sieve limit)
  (let/ec _return (begin
(define spf (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i limit) (let ()
    (set! spf (append spf (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 2)
(let/ec _break (let loop ()
  (if (<= i limit) (let ()
    (if (equal? (list-ref spf i) 0) (let ()
(set! spf (list-set spf i i))
(if (<= (* i i) limit) (let ()
(define j (* i i))
(let/ec _break (let loop ()
  (if (<= j limit) (let ()
    (if (equal? (list-ref spf j) 0) (let ()
(set! spf (list-set spf j i))
) (void))
    (set! j (let ([__l j] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return spf)
))
)
(define (primesFrom spf limit)
  (let/ec _return (begin
(define primes (list))
(define i 3)
(let/ec _break (let loop ()
  (if (<= i limit) (let ()
    (if (equal? (list-ref spf i) i) (let ()
(set! primes (append primes (list i)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return primes)
))
)
(define (pad3 n)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 3) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (commatize n)
  (let/ec _return (begin
(define s (format "~a" n))
(define out "")
(define i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1))
(define c 0)
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (set! out (string-append (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) out))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (and (equal? (modulo c 3) 0) (> i 0)) (let ()
(set! out (string-append "," out))
) (void))
    (set! i (- i 1))
    (loop)) (void))))
(_return out)
))
)
(define (primeCount primes last spf)
  (let/ec _return (begin
(define lo 0)
(define hi (cond [(string? primes) (string-length primes)] [(hash? primes) (hash-count primes)] [else (length primes)]))
(let/ec _break (let loop ()
  (if (< lo hi) (let ()
    (define mid (int (quotient (let ([__l lo] [__r hi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2)))
    (if (< (list-ref primes mid) last) (let ()
(set! lo (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! hi mid)
))
    (loop)) (void))))
(define count (let ([__l lo] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (not (equal? (list-ref spf last) last)) (let ()
(set! count (- count 1))
) (void))
(_return count)
))
)
(define (arithmeticNumbers limit spf)
  (let/ec _return (begin
(define arr (list 1))
(define n 3)
(let/ec _break (let loop ()
  (if (< (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) limit) (let ()
    (if (equal? (list-ref spf n) n) (let ()
(set! arr (append arr (list n)))
) (let ()
(define x n)
(define sigma 1)
(define tau 1)
(let/ec _break (let loop ()
  (if (> x 1) (let ()
    (define p (list-ref spf x))
    (if (equal? p 0) (let ()
(set! p x)
) (void))
    (define cnt 0)
    (define power p)
    (define sum 1)
    (let/ec _break (let loop ()
  (if (equal? (modulo x p) 0) (let ()
    (set! x (quotient x p))
    (set! cnt (let ([__l cnt] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! sum (let ([__l sum] [__r power]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! power (* power p))
    (loop)) (void))))
    (set! sigma (* sigma sum))
    (set! tau (* tau (let ([__l cnt] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (loop)) (void))))
(if (equal? (modulo sigma tau) 0) (let ()
(set! arr (append arr (list n)))
) (void))
))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (main)
  (let/ec _return (begin
(define limit 1228663)
(define spf (sieve limit))
(define primes (primesFrom spf limit))
(define arr (arithmeticNumbers 1000000 spf))
(displayln "The first 100 arithmetic numbers are:")
(define i 0)
(let/ec _break (let loop ()
  (if (< i 100) (let ()
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 10) (let ()
    (set! line (string-append line (pad3 (list-ref arr (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (if (< j 9) (let ()
(set! line (string-append line " "))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 10]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (for ([x (list 1000 10000 100000 1000000)])
  (let/ec _cont
(define last (list-ref arr (- x 1)))
(define lastc (commatize last))
(displayln (string-append (string-append (string-append "\nThe " (commatize x)) "th arithmetic number is: ") lastc))
(define pc (primeCount primes last spf))
(define comp (- (- x pc) 1))
(displayln (string-append (string-append (string-append (string-append "The count of such numbers <= " lastc) " which are composite is ") (commatize comp)) "."))
  )))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
