;; Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (pow_int base exp)
  (let/ec _return (begin
(define result 1)
(define b base)
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let ()
    (if (equal? (modulo e 2) 1) (let ()
(set! result (* result b))
) (void))
    (set! b (* b b))
    (set! e (int (quotient e 2)))
    (loop)) (void))))
(_return result)
))
)
(define (pow_big base exp)
  (let/ec _return (begin
(define result 1)
(define b base)
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let ()
    (if (equal? (modulo e 2) 1) (let ()
(set! result (* result b))
) (void))
    (set! b (* b b))
    (set! e (int (quotient e 2)))
    (loop)) (void))))
(_return result)
))
)
(define (parseBigInt str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (slice str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (define ch (slice str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define d (int ch))
    (set! n (let ([__l (* n 10)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (fermat n)
  (let/ec _return (begin
(define p (pow_int 2 n))
(_return (let ([__l (pow_big 2 p)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (primeFactorsBig n)
  (let/ec _return (begin
(define factors (list))
(define m n)
(define d 2)
(let/ec _break (let loop ()
  (if (equal? (modulo m d) 0) (let ()
    (set! factors (append factors (list d)))
    (set! m (quotient m d))
    (loop)) (void))))
(set! d 3)
(let/ec _break (let loop ()
  (if (<= (* d d) m) (let ()
    (let/ec _break (let loop ()
  (if (equal? (modulo m d) 0) (let ()
    (set! factors (append factors (list d)))
    (set! m (quotient m d))
    (loop)) (void))))
    (set! d (let ([__l d] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> m 1) (let ()
(set! factors (append factors (list m)))
) (void))
(_return factors)
))
)
(define (show_list xs)
  (let/ec _return (begin
(define line "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (set! line (string-append line (format "~a" (if xs (list-ref xs (int i)) #f))))
    (if (< i (- (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)) (let ()
(set! line (string-append line " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return line)
))
)
(define (main)
  (let/ec _return (begin
(define nums (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i 8)
(set! nums (append nums (list (fermat i))))
      (set! i (+ i 1))
      (loop)))
))
(displayln "First 8 Fermat numbers:")
(let/ec _break (for ([n nums])
  (let/ec _cont
(displayln (format "~a" n))
  )))
(define extra (hash 6 (list 274177 67280421310721) 7 (list (parseBigInt "59649589127497217") (parseBigInt "5704689200685129054721"))))
(displayln "\nFactors:")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
    (define facs (list))
    (if (<= i 5) (let ()
(set! facs (primeFactorsBig (if nums (list-ref nums (int i)) #f)))
) (let ()
(set! facs (if extra (hash-ref extra i #f) #f))
))
    (displayln (string-append (string-append (string-append "F" (format "~a" i)) " = ") (show_list facs)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
