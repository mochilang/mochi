;; Generated by Mochi 0.10.42 on 2025-07-27 23:50 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define width 81)
(define height 5)
(define lines (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i height)
(define row "")
(define j 0)
(let/ec _break (let loop ()
  (if (< j width) (let ()
    (set! row (string-append row "*"))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! lines (append lines (list row)))
      (set! i (+ i 1))
      (loop)))
))
(define (setChar s idx ch)
  (let/ec _return (begin
(_return (let ([__l (string-append (substring s 0 idx) ch)] [__r (substring s (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define stack (list (hash "start" 0 "len" width "index" 1)))
(let/ec _break (let loop ()
  (if (> (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 0) (let ()
    (define frame (if stack (list-ref stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1))) #f))
    (set! stack (sublist stack 0 (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
    (define start (if frame (hash-ref frame "start" #f) #f))
    (define lenSeg (if frame (hash-ref frame "len" #f) #f))
    (define index (if frame (hash-ref frame "index" #f) #f))
    (define seg (int (quotient lenSeg 3)))
    (if (equal? seg 0) (let ()
(loop)
) (void))
    (define i index)
    (let/ec _break (let loop ()
  (if (< i height) (let ()
    (define j (let ([__l start] [__r seg]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< j (let ([__l start] [__r (* 2 seg)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
    (set! lines (list-set lines (int i) (setChar (if lines (list-ref lines (int i)) #f) j " ")))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! stack (append stack (list (hash "start" start "len" seg "index" (let ([__l index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (set! stack (append stack (list (hash "start" (let ([__l start] [__r (* seg 2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "len" seg "index" (let ([__l index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (loop)) (void))))
(let/ec _break (for ([line lines])
  (let/ec _cont
(displayln line)
  )))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
