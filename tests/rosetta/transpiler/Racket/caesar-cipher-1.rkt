;; Generated by Mochi 0.10.42 on 2025-07-27 23:42 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (ord ch)
  (let/ec _return (begin
(define upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower "abcdefghijklmnopqrstuvwxyz")
(define idx (indexOf upper ch))
(if (>= idx 0) (let ()
(_return (let ([__l 65] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(set! idx (indexOf lower ch))
(if (>= idx 0) (let ()
(_return (let ([__l 97] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return 0)
))
)
(define (chr n)
  (let/ec _return (begin
(define upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower "abcdefghijklmnopqrstuvwxyz")
(if (and (>= n 65) (< n 91)) (let ()
(_return (substring upper (- n 65) (- n 64)))
) (void))
(if (and (>= n 97) (< n 123)) (let ()
(_return (substring lower (- n 97) (- n 96)))
) (void))
(_return "?")
))
)
(define (shiftRune r k)
  (let/ec _return (begin
(if (and (string>=? r "a") (string<=? r "z")) (let ()
(_return (chr (let ([__l (modulo (let ([__l (- (ord r) 97)] [__r k]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 26)] [__r 97]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(if (and (string>=? r "A") (string<=? r "Z")) (let ()
(_return (chr (let ([__l (modulo (let ([__l (- (ord r) 65)] [__r k]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 26)] [__r 65]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(_return r)
))
)
(define (encipher s k)
  (let/ec _return (begin
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (set! out (string-append out (shiftRune (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) k)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (decipher s k)
  (let/ec _return (begin
(_return (encipher s (modulo (- 26 (modulo k 26)) 26)))
))
)
(define (main)
  (let/ec _return (begin
(define pt "The five boxing wizards jump quickly")
(displayln (string-append "Plaintext: " pt))
(let/ec _break (for ([key (list 0 1 7 25 26)])
  (let/ec _cont
(if (or (< key 1) (> key 25)) (let ()
(displayln (string-append (string-append "Key " (format "~a" key)) " invalid"))
(_cont)
) (void))
(define ct (encipher pt key))
(displayln (string-append "Key " (format "~a" key)))
(displayln (string-append "  Enciphered: " ct))
(displayln (string-append "  Deciphered: " (decipher ct key)))
  )))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
