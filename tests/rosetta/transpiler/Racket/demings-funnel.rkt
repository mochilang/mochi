;; Generated by Mochi 0.10.55 on 2025-08-03 09:40 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define g x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let ()
    (set! g (/ (let ([__l g] [__r (/ x g)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return g)
))
)
(define dxs (list (- 0.533) 0.27 0.859 (- 0.043) (- 0.205) (- 0.127) (- 0.071) 0.275 1.251 (- 0.231) (- 0.401) 0.269 0.491 0.951 1.15 0.001 (- 0.382) 0.161 0.915 2.08 (- 2.337) 0.034 (- 0.126) 0.014 0.709 0.129 (- 1.093) (- 0.483) (- 1.193) 0.02 (- 0.051) 0.047 (- 0.095) 0.695 0.34 (- 0.182) 0.287 0.213 (- 0.423) (- 0.021) (- 0.134) 1.798 0.021 (- 1.099) (- 0.361) 1.636 (- 1.134) 1.315 0.201 0.034 0.097 (- 0.17) 0.054 (- 0.553) (- 0.024) (- 0.181) (- 0.7) (- 0.361) (- 0.789) 0.279 (- 0.174) (- 0.009) (- 0.323) (- 0.658) 0.348 (- 0.528) 0.881 0.021 (- 0.853) 0.157 0.648 1.774 (- 1.043) 0.051 0.021 0.247 (- 0.31) 0.171 0.0 0.106 0.024 (- 0.386) 0.962 0.765 (- 0.125) (- 0.289) 0.521 0.017 0.281 (- 0.749) (- 0.149) (- 2.436) (- 0.909) 0.394 (- 0.113) (- 0.598) 0.443 (- 0.521) (- 0.799) 0.087))
(define dys (list 0.136 0.717 0.459 (- 0.225) 1.392 0.385 0.121 (- 0.395) 0.49 (- 0.682) (- 0.065) 0.242 (- 0.288) 0.658 0.459 0.0 0.426 0.205 (- 0.765) (- 2.188) (- 0.742) (- 0.01) 0.089 0.208 0.585 0.633 (- 0.444) (- 0.351) (- 1.087) 0.199 0.701 0.096 (- 0.025) (- 0.868) 1.051 0.157 0.216 0.162 0.249 (- 0.007) 0.009 0.508 (- 0.79) 0.723 0.881 (- 0.508) 0.393 (- 0.226) 0.71 0.038 (- 0.217) 0.831 0.48 0.407 0.447 (- 0.295) 1.126 0.38 0.549 (- 0.445) (- 0.046) 0.428 (- 0.074) 0.217 (- 0.822) 0.491 1.347 (- 0.141) 1.23 (- 0.044) 0.079 0.219 0.698 0.275 0.056 0.031 0.421 0.064 0.721 0.104 (- 0.729) 0.65 (- 1.103) 0.154 (- 1.72) 0.051 (- 0.385) 0.477 1.537 (- 0.901) 0.939 (- 0.411) 0.341 (- 0.411) 0.106 0.224 (- 0.947) (- 1.424) (- 0.542) (- 1.032)))
(define (funnel fa r)
  (let/ec _return (begin
(define x 0.0)
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? fa) (string-length fa)] [(hash? fa) (hash-count fa)] [else (length fa)])) (let ()
    (define f (if fa (if (hash? fa) (hash-ref fa i #f) (list-ref fa (int i))) #f))
    (set! result (append result (list (let ([__l x] [__r f]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! x (r x f))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (mean fa)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? fa) (string-length fa)] [(hash? fa) (hash-count fa)] [else (length fa)])) (let ()
    (set! sum (let ([__l sum] [__r (if fa (if (hash? fa) (hash-ref fa i #f) (list-ref fa (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (/ sum (exact->inexact (cond [(string? fa) (string-length fa)] [(hash? fa) (hash-count fa)] [else (length fa)]))))
))
)
(define (stdDev fa)
  (let/ec _return (begin
(define m (mean fa))
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? fa) (string-length fa)] [(hash? fa) (hash-count fa)] [else (length fa)])) (let ()
    (define d (- (if fa (if (hash? fa) (hash-ref fa i #f) (list-ref fa (int i))) #f) m))
    (set! sum (let ([__l sum] [__r (* d d)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define r (sqrtApprox (/ sum (exact->inexact (cond [(string? fa) (string-length fa)] [(hash? fa) (hash-count fa)] [else (length fa)])))))
(_return r)
))
)
(define (experiment label r)
  (let/ec _return (begin
(define rxs (funnel dxs r))
(define rys (funnel dys r))
(displayln (string-append label "  :      x        y"))
(displayln (string-append (string-append (string-append "Mean    :  " (format "~a" (mean rxs))) ", ") (format "~a" (mean rys))))
(displayln (string-append (string-append (string-append "Std Dev :  " (format "~a" (stdDev rxs))) ", ") (format "~a" (stdDev rys))))
(displayln "")
))
)
(define (main)
  (let/ec _return (begin
(experiment "Rule 1" (lambda (x y) 0.0))
(experiment "Rule 2" (lambda (x dz) (- dz)))
(experiment "Rule 3" (lambda (z dz) (- (let ([__l z] [__r dz]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(experiment "Rule 4" (lambda (z dz) (let ([__l z] [__r dz]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
