;; Generated by Mochi 0.10.55 on 2025-08-02 17:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (rotate s n)
  (let/ec _return (begin
(_return (let ([__l (slice s n (string-length s))] [__r (slice s 0 n)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (scrambleLeft s)
  (let/ec _return (begin
(_return (let ([__l (let ([__l (let ([__l (slice s 0 1)] [__r (slice s 2 14)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (slice s 1 2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (slice s 14 (string-length s))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (scrambleRight s)
  (let/ec _return (begin
(_return (let ([__l (let ([__l (let ([__l (let ([__l (slice s 1 3)] [__r (slice s 4 15)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (slice s 3 4)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (slice s 15 (string-length s))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (slice s 0 1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (chao text encode)
  (let/ec _return (begin
(define left "HXUCZVAMDSLKPEFJRIGTWOBNYQ")
(define right "PTLNBQDEOYSFAVZKGJRIHWXUMC")
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? text) (string-length text)] [(hash? text) (hash-count text)] [else (length text)])) (let ()
    (define ch (slice text i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define idx 0)
    (if encode (let ()
(set! idx (index-of right ch))
(set! out (string-append out (slice left idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (let ()
(set! idx (index-of left ch))
(set! out (string-append out (slice right idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
    (set! left (rotate left idx))
    (set! right (rotate right idx))
    (set! left (scrambleLeft left))
    (set! right (scrambleRight right))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define plain "WELLDONEISBETTERTHANWELLSAID")
(define cipher (chao plain #t))
(displayln plain)
(displayln cipher)
(displayln (chao cipher #f))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
