;; Generated by Mochi 0.10.38 on 2025-07-24 07:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define OP_ADD 1)
(define OP_SUB 2)
(define OP_MUL 3)
(define OP_DIV 4)
(define (binEval op l r)
  (let/ec _return (begin
(define lv (exprEval l))
(define rv (exprEval r))
(if (equal? op OP_ADD) (let ()
(_return (hash "num" (let ([__l (* (hash-ref lv "num") (hash-ref rv "denom"))] [__r (* (hash-ref lv "denom") (hash-ref rv "num"))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "denom" (* (hash-ref lv "denom") (hash-ref rv "denom"))))
) (void))
(if (equal? op OP_SUB) (let ()
(_return (hash "num" (- (* (hash-ref lv "num") (hash-ref rv "denom")) (* (hash-ref lv "denom") (hash-ref rv "num"))) "denom" (* (hash-ref lv "denom") (hash-ref rv "denom"))))
) (void))
(if (equal? op OP_MUL) (let ()
(_return (hash "num" (* (hash-ref lv "num") (hash-ref rv "num")) "denom" (* (hash-ref lv "denom") (hash-ref rv "denom"))))
) (void))
(_return (hash "num" (* (hash-ref lv "num") (hash-ref rv "denom")) "denom" (* (hash-ref lv "denom") (hash-ref rv "num"))))
))
)
(define (binString op l r)
  (let/ec _return (begin
(define ls (exprString l))
(define rs (exprString r))
(define opstr "")
(if (equal? op OP_ADD) (let ()
(set! opstr " + ")
) (let ()
(if (equal? op OP_SUB) (let ()
(set! opstr " - ")
) (let ()
(if (equal? op OP_MUL) (let ()
(set! opstr " * ")
) (let ()
(set! opstr " / ")
))
))
))
(_return (string-append (string-append (string-append (string-append "(" ls) opstr) rs) ")"))
))
)
(define (newNum n)
  (let/ec _return (begin
(_return (hash "value" (hash "num" n "denom" 1)))
))
)
(define (exprEval x)
  (let/ec _return (begin
(_return (match x
  [(Num v) v]
  [(Bin op l r) (binEval op l r)]
))
))
)
(define (exprString x)
  (let/ec _return (begin
(_return (match x
  [(Num v) (format "~a" (hash-ref v "num"))]
  [(Bin op l r) (binString op l r)]
))
))
)
(define n_cards 4)
(define goal 24)
(define digit_range 9)
(define (solve xs)
  (let/ec _return (begin
(if (equal? (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1) (let ()
(define f (exprEval (list-ref xs 0)))
(if (and (not (equal? (hash-ref f "denom") 0)) (equal? (hash-ref f "num") (* (hash-ref f "denom") goal))) (let ()
(displayln (exprString (list-ref xs 0)))
(_return #t)
) (void))
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< j (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (define rest (list))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (and (not (equal? k i)) (not (equal? k j))) (let ()
(set! rest (append rest (list (list-ref xs k))))
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define a (list-ref xs i))
    (define b (list-ref xs j))
    (define node (hash "op" OP_ADD "left" a "right" b))
    (for ([op (list OP_ADD OP_SUB OP_MUL OP_DIV)])
(set! node (hash "op" op "left" a "right" b))
(if (solve (append rest (list node))) (let ()
(_return #t)
) (void))
)
    (set! node (hash "op" OP_SUB "left" b "right" a))
    (if (solve (append rest (list node))) (let ()
(_return #t)
) (void))
    (set! node (hash "op" OP_DIV "left" b "right" a))
    (if (solve (append rest (list node))) (let ()
(_return #t)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (main)
  (let/ec _return (begin
(define iter 0)
(let/ec _break (let loop ()
  (if (< iter 10) (let ()
    (define cards (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i n_cards) (let ()
    (define n (let ([__l (modulo (now) (- digit_range 1))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! cards (append cards (list (newNum n))))
    (displayln (string-append " " (format "~a" n)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln ":  ")
    (if (not (solve cards)) (let ()
(displayln "No solution")
) (void))
    (set! iter (let ([__l iter] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
