;; Generated by Mochi 0.10.41 on 2025-07-27 15:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (trimLeftZeros s)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (and (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "0")) (let ()
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (substring s i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
))
)
(define (btString s)
  (let/ec _return (begin
(set! s (trimLeftZeros s))
(define b (list))
(define i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (define ch (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch "+") (let ()
(set! b (append b (list 1)))
) (let ()
(if (string=? ch "0") (let ()
(set! b (append b (list 0)))
) (let ()
(if (string=? ch "-") (let ()
(set! b (append b (list (- 0 1))))
) (let ()
(_return (hash "bt" (list) "ok" #f))
))
))
))
    (set! i (- i 1))
    (loop)) (void))))
(_return (hash "bt" b "ok" #t))
))
)
(define (btToString b)
  (let/ec _return (begin
(if (equal? (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]) 0) (let ()
(_return "0")
) (void))
(define r "")
(define i (- (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (define d (list-ref b i))
    (if (equal? d (- 0 1)) (let ()
(set! r (string-append r "-"))
) (let ()
(if (equal? d 0) (let ()
(set! r (string-append r "0"))
) (let ()
(set! r (string-append r "+"))
))
))
    (set! i (- i 1))
    (loop)) (void))))
(_return r)
))
)
(define (btInt i)
  (let/ec _return (begin
(if (equal? i 0) (let ()
(_return (list))
) (void))
(define n i)
(define b (list))
(let/ec _break (let loop ()
  (if (not (equal? n 0)) (let ()
    (define m (modulo n 3))
    (set! n (int (quotient n 3)))
    (if (equal? m 2) (let ()
(set! m (- 0 1))
(set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (equal? m (- 0 2)) (let ()
(set! m 1)
(set! n (- n 1))
) (void))
))
    (set! b (append b (list m)))
    (loop)) (void))))
(_return b)
))
)
(define (btToInt b)
  (let/ec _return (begin
(define r 0)
(define pt 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
    (set! r (let ([__l r] [__r (* (list-ref b i) pt)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! pt (* pt 3))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return r)
))
)
(define (btNeg b)
  (let/ec _return (begin
(define r (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
    (set! r (append r (list (- (list-ref b i)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return r)
))
)
(define (btAdd a b)
  (let/ec _return (begin
(_return (btInt (let ([__l (btToInt a)] [__r (btToInt b)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (btMul a b)
  (let/ec _return (begin
(_return (btInt (* (btToInt a) (btToInt b))))
))
)
(define (padLeft s w)
  (let/ec _return (begin
(define r s)
(let/ec _break (let loop ()
  (if (< (cond [(string? r) (string-length r)] [(hash? r) (hash-count r)] [else (length r)]) w) (let ()
    (set! r (string-append " " r))
    (loop)) (void))))
(_return r)
))
)
(define (show label b)
  (let/ec _return (begin
(define l (padLeft label 7))
(define bs (padLeft (btToString b) 12))
(define is (padLeft (format "~a" (btToInt b)) 7))
(displayln (string-append (string-append (string-append (string-append l " ") bs) " ") is))
))
)
(define (main)
  (let/ec _return (begin
(define ares (btString "+-0++0+"))
(define a (if ares (hash-ref ares "bt" #f) #f))
(define b (btInt (- 436)))
(define cres (btString "+-++-"))
(define c (if cres (hash-ref cres "bt" #f) #f))
(show "a:" a)
(show "b:" b)
(show "c:" c)
(show "a(b-c):" (btMul a (btAdd b (btNeg c))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
