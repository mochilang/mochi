;; Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define jobs 12)
(define (pad n)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 4) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (hail seq cnt)
  (let/ec _return (begin
(define out (pad seq))
(if (not (equal? seq 1)) (let ()
(set! cnt (let ([__l cnt] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (not (equal? (modulo seq 2) 0)) (let ()
(set! seq (let ([__l (* 3 seq)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! seq (quotient seq 2))
))
) (void))
(_return (hash "seq" seq "cnt" cnt "out" out))
))
)
(define (main)
  (let/ec _return (begin
(define seqs (list))
(define cnts (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i jobs)
(set! seqs (append seqs (list (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! cnts (append cnts (list 0)))
      (set! i (+ i 1))
      (loop)))
))
(let/ec _break (let loop ()
  (if #t (let ()
    (define line "")
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i jobs) (let ()
    (define res (hail (if seqs (list-ref seqs (int i)) #f) (if cnts (list-ref cnts (int i)) #f)))
    (set! seqs (list-set seqs (int i) (if res (hash-ref res "seq" #f) #f)))
    (set! cnts (list-set cnts (int i) (if res (hash-ref res "cnt" #f) #f)))
    (set! line (string-append line (if res (hash-ref res "out" #f) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (define done #t)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j jobs) (let ()
    (if (not (equal? (if seqs (list-ref seqs (int j)) #f) 1)) (let ()
(set! done #f)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if done (let ()
(_break)
) (void))
    (loop)) (void))))
(displayln "")
(displayln "COUNTS:")
(define counts "")
(define k 0)
(let/ec _break (let loop ()
  (if (< k jobs) (let ()
    (set! counts (string-append counts (pad (if cnts (list-ref cnts (int k)) #f))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln counts)
(displayln "")
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
