;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define EVEN_ROOT 0)
(define ODD_ROOT 1)
(define (newNode len)
  (let/ec _return (begin
(_return (hash "length" len "edges" (hash) "suffix" 0))
))
)
(define (eertree s)
  (let/ec _return (begin
(define tree (list))
(set! tree (append tree (list (hash "length" 0 "suffix" ODD_ROOT "edges" (hash)))))
(set! tree (append tree (list (hash "length" (- 1) "suffix" ODD_ROOT "edges" (hash)))))
(define suffix ODD_ROOT)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define c (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define n suffix)
    (define k 0)
    (let/ec _break (let loop ()
  (if #t (let ()
    (set! k (int (if (if tree (list-ref tree (int n)) #f) (hash-ref (if tree (list-ref tree (int n)) #f) "length" #f) #f)))
    (define b (- (- i k) 1))
    (if (and (>= b 0) (equal? (substring s b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) c)) (let ()
(_break)
) (void))
    (set! n (int (if (if tree (list-ref tree (int n)) #f) (hash-ref (if tree (list-ref tree (int n)) #f) "suffix" #f) #f)))
    (loop)) (void))))
    (define edges (if (if tree (list-ref tree (int n)) #f) (hash-ref (if tree (list-ref tree (int n)) #f) "edges" #f) #f))
    (if (hash-has-key? edges c) (let ()
(set! suffix (if edges (hash-ref edges c #f) #f))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (set! suffix (cond [(string? tree) (string-length tree)] [(hash? tree) (hash-count tree)] [else (length tree)]))
    (set! tree (append tree (list (newNode (let ([__l k] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (set! edges (hash-set (or edges (hash)) c suffix))
    (set! tree (list-set tree n (hash-set (list-ref tree n) "edges" edges)))
    (if (equal? (int (if (if tree (list-ref tree (int suffix)) #f) (hash-ref (if tree (list-ref tree (int suffix)) #f) "length" #f) #f)) 1) (let ()
(set! tree (list-set tree suffix (hash-set (list-ref tree suffix) "suffix" 0)))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (let/ec _break (let loop ()
  (if #t (let ()
    (set! n (int (if (if tree (list-ref tree (int n)) #f) (hash-ref (if tree (list-ref tree (int n)) #f) "suffix" #f) #f)))
    (define b (- (- i (int (if (if tree (list-ref tree (int n)) #f) (hash-ref (if tree (list-ref tree (int n)) #f) "length" #f) #f))) 1))
    (if (and (>= b 0) (equal? (substring s b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) c)) (let ()
(_break)
) (void))
    (loop)) (void))))
    (define en (if (if tree (list-ref tree (int n)) #f) (hash-ref (if tree (list-ref tree (int n)) #f) "edges" #f) #f))
    (set! tree (list-set tree suffix (hash-set (list-ref tree suffix) "suffix" (if en (hash-ref en c #f) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return tree)
))
)
(define (child tree idx p acc)
  (let/ec _return (begin
(define edges (if (if tree (list-ref tree (int idx)) #f) (hash-ref (if tree (list-ref tree (int idx)) #f) "edges" #f) #f))
(let/ec _break (for ([ch (in-hash-keys edges)])
  (let/ec _cont
(define nxt (if edges (hash-ref edges ch #f) #f))
(define pal (let ([__l (string-append ch p)] [__r ch]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! acc (append acc (list pal)))
(set! acc (child tree nxt pal acc))
  )))
(_return acc)
))
)
(define (subPalindromes tree)
  (let/ec _return (begin
(define res (list))
(set! res (child tree EVEN_ROOT "" res))
(define oEdges (if (if tree (list-ref tree (int ODD_ROOT)) #f) (hash-ref (if tree (list-ref tree (int ODD_ROOT)) #f) "edges" #f) #f))
(let/ec _break (for ([ch (in-hash-keys oEdges)])
  (let/ec _cont
(set! res (append res (list ch)))
(set! res (child tree (if oEdges (hash-ref oEdges ch #f) #f) ch res))
  )))
(_return res)
))
)
(define (main)
  (let/ec _return (begin
(define tree (eertree "eertree"))
(define subs (subPalindromes tree))
(displayln (format "~a" subs))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
