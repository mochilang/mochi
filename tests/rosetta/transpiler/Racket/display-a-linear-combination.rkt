;; Generated by Mochi 0.10.55 on 2025-08-03 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (padRight s w)
  (let/ec _return (begin
(define r s)
(let/ec _break (let loop ()
  (if (< (cond [(string? r) (string-length r)] [(hash? r) (hash-count r)] [else (length r)]) w) (let/ec _cont
    (set! r (string-append r " "))
    (loop)) (void))))
(_return r)
))
)
(define (linearCombo c)
  (let/ec _return (begin
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? c) (string-length c)] [(hash? c) (hash-count c)] [else (length c)])) (let/ec _cont
    (define n (if c (if (hash? c) (hash-ref c i #f) (list-ref c (int i))) #f))
    (if (not (equal? n 0)) (let ()
(define op "")
(if (and (< n 0) (equal? (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) 0)) (let ()
(set! op "-")
) (let ()
(if (< n 0) (let ()
(set! op " - ")
) (let ()
(if (and (> n 0) (equal? (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) 0)) (let ()
(set! op "")
) (let ()
(set! op " + ")
))
))
))
(define av n)
(if (< av 0) (let ()
(set! av (- av))
) (void))
(define coeff (string-append (format "~a" av) "*"))
(if (equal? av 1) (let ()
(set! coeff "")
) (void))
(set! out (string-append (string-append (string-append (string-append (string-append out op) coeff) "e(") (format "~a" (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) ")"))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (equal? (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) 0) (let ()
(_return "0")
) (void))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define combos (list (list 1 2 3) (list 0 1 2 3) (list 1 0 3 4) (list 1 2 0) (list 0 0 0) (list 0) (list 1 1 1) (list (- 1) (- 1) (- 1)) (list (- 1) (- 2) 0 (- 3)) (list (- 1))))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? combos) (string-length combos)] [(hash? combos) (hash-count combos)] [else (length combos)])) (let/ec _cont
    (define c (if combos (if (hash? combos) (hash-ref combos idx #f) (list-ref combos (int idx))) #f))
    (define t "[")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? c) (string-length c)] [(hash? c) (hash-count c)] [else (length c)])) (let/ec _cont
    (set! t (string-append t (format "~a" (if c (if (hash? c) (hash-ref c j #f) (list-ref c (int j))) #f))))
    (if (< j (- (cond [(string? c) (string-length c)] [(hash? c) (hash-count c)] [else (length c)]) 1)) (let ()
(set! t (string-append t ", "))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! t (string-append t "]"))
    (define lc (linearCombo c))
    (displayln (string-append (string-append (padRight t 15) "  ->  ") lc))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
