;; Generated by Mochi 0.10.38 on 2025-07-23 16:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (d2d d)
  (let/ec _return (begin
(_return (- d (* (floor (/ d 360.0)) 360.0)))
))
)
(define (g2g g)
  (let/ec _return (begin
(_return (- g (* (floor (/ g 400.0)) 400.0)))
))
)
(define (m2m m)
  (let/ec _return (begin
(_return (- m (* (floor (/ m 6400.0)) 6400.0)))
))
)
(define (r2r r)
  (let/ec _return (begin
(_return (- r (* (floor (/ r (* 2.0 3.141592653589793))) (* 2.0 3.141592653589793))))
))
)
(define (d2g d)
  (let/ec _return (begin
(_return (/ (* (d2d d) 400.0) 360.0))
))
)
(define (d2m d)
  (let/ec _return (begin
(_return (/ (* (d2d d) 6400.0) 360.0))
))
)
(define (d2r d)
  (let/ec _return (begin
(_return (/ (* (d2d d) 3.141592653589793) 180.0))
))
)
(define (g2d g)
  (let/ec _return (begin
(_return (/ (* (g2g g) 360.0) 400.0))
))
)
(define (g2m g)
  (let/ec _return (begin
(_return (/ (* (g2g g) 6400.0) 400.0))
))
)
(define (g2r g)
  (let/ec _return (begin
(_return (/ (* (g2g g) 3.141592653589793) 200.0))
))
)
(define (m2d m)
  (let/ec _return (begin
(_return (/ (* (m2m m) 360.0) 6400.0))
))
)
(define (m2g m)
  (let/ec _return (begin
(_return (/ (* (m2m m) 400.0) 6400.0))
))
)
(define (m2r m)
  (let/ec _return (begin
(_return (/ (* (m2m m) 3.141592653589793) 3200.0))
))
)
(define (r2d r)
  (let/ec _return (begin
(_return (/ (* (r2r r) 180.0) 3.141592653589793))
))
)
(define (r2g r)
  (let/ec _return (begin
(_return (/ (* (r2r r) 200.0) 3.141592653589793))
))
)
(define (r2m r)
  (let/ec _return (begin
(_return (/ (* (r2r r) 3200.0) 3.141592653589793))
))
)
(define (main)
  (let/ec _return (begin
(define angles (list (- 2.0) (- 1.0) 0.0 1.0 2.0 6.2831853 16.0 57.2957795 359.0 399.0 6399.0 1000000.0))
(displayln "degrees normalized_degs gradians mils radians")
(for ([a angles])
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" a) " ") (format "~a" (d2d a))) " ") (format "~a" (d2g a))) " ") (format "~a" (d2m a))) " ") (format "~a" (d2r a))))
)
(displayln "\ngradians normalized_grds degrees mils radians")
(for ([a angles])
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" a) " ") (format "~a" (g2g a))) " ") (format "~a" (g2d a))) " ") (format "~a" (g2m a))) " ") (format "~a" (g2r a))))
)
(displayln "\nmils normalized_mils degrees gradians radians")
(for ([a angles])
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" a) " ") (format "~a" (m2m a))) " ") (format "~a" (m2d a))) " ") (format "~a" (m2g a))) " ") (format "~a" (m2r a))))
)
(displayln "\nradians normalized_rads degrees gradians mils")
(for ([a angles])
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" a) " ") (format "~a" (r2r a))) " ") (format "~a" (r2d a))) " ") (format "~a" (r2g a))) " ") (format "~a" (r2m a))))
)
))
)
(main)
