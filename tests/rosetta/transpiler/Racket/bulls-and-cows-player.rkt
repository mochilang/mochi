;; Generated by Mochi 0.10.39 on 2025-07-24 20:52 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (fields s)
  (let/ec _return (begin
(define words (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (or (string=? ch " ") (string=? ch "\t")) (string=? ch "\n")) (let ()
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! words (append words (list cur)))
(set! cur "")
) (void))
) (let ()
(set! cur (string-append cur ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! words (append words (list cur)))
) (void))
(_return words)
))
)
(define (makePatterns)
  (let/ec _return (begin
(define digits (list "1" "2" "3" "4" "5" "6" "7" "8" "9"))
(define pats (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])) (let ()
    (if (not (equal? j i)) (let ()
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])) (let ()
    (if (and (not (equal? k i)) (not (equal? k j))) (let ()
(define l 0)
(let/ec _break (let loop ()
  (if (< l (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])) (let ()
    (if (and (and (not (equal? l i)) (not (equal? l j))) (not (equal? l k))) (let ()
(set! pats (append pats (list (let ([__l (let ([__l (let ([__l (list-ref digits i)] [__r (list-ref digits j)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (list-ref digits k)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (list-ref digits l)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
    (set! l (let ([__l l] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return pats)
))
)
(define (main)
  (let/ec _return (begin
(displayln (string-append (string-append (string-append (string-append (string-append "Cows and bulls/player\n" "You think of four digit number of unique digits in the range 1 to 9.\n") "I guess.  You score my guess:\n") "    A correct digit but not in the correct place is a cow.\n") "    A correct digit in the correct place is a bull.\n") "You give my score as two numbers separated with a space."))
(define patterns (makePatterns))
(let/ec _break (let loop ()
  (if #t (let ()
    (if (equal? (cond [(string? patterns) (string-length patterns)] [(hash? patterns) (hash-count patterns)] [else (length patterns)]) 0) (let ()
(displayln "Oops, check scoring.")
(_return void)
) (void))
    (define guess (list-ref patterns 0))
    (set! patterns (sublist patterns 1 (length patterns)))
    (define cows 0)
    (define bulls 0)
    (let/ec _break (let loop ()
  (if #t (let ()
    (displayln (string-append (string-append "My guess: " guess) ".  Score? (c b) "))
    (define line (input))
    (define toks (fields line))
    (if (equal? (cond [(string? toks) (string-length toks)] [(hash? toks) (hash-count toks)] [else (length toks)]) 2) (let ()
(define c (int (list-ref toks 0)))
(define b (int (list-ref toks 1)))
(if (and (and (and (and (>= c 0) (<= c 4)) (>= b 0)) (<= b 4)) (<= (let ([__l c] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 4)) (let ()
(set! cows c)
(set! bulls b)
(_break)
) (void))
) (void))
    (displayln "Score guess as two numbers: cows bulls")
    (loop)) (void))))
    (if (equal? bulls 4) (let ()
(displayln "I did it. :)")
(_return void)
) (void))
    (define next (list))
    (define idx 0)
    (let/ec _break (let loop ()
  (if (< idx (cond [(string? patterns) (string-length patterns)] [(hash? patterns) (hash-count patterns)] [else (length patterns)])) (let ()
    (define pat (list-ref patterns idx))
    (define c 0)
    (define b 0)
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i 4) (let ()
    (define cg (substring guess i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define cp (substring pat i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? cg cp) (let ()
(set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (>= (indexOf pat cg) 0) (let ()
(set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (and (equal? c cows) (equal? b bulls)) (let ()
(set! next (append next (list pat)))
) (void))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! patterns next)
    (loop)) (void))))
))
)
(main)
