;; Generated by Mochi 0.10.47 on 2025-07-28 11:49 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (slice str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (slice str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (fields s)
  (let/ec _return (begin
(define words (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (or (string=? ch " ") (string=? ch "\t")) (string=? ch "\n")) (let ()
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! words (append words (list cur)))
(set! cur "")
) (void))
) (let ()
(set! cur (string-append cur ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! words (append words (list cur)))
) (void))
(_return words)
))
)
(define (unescape s)
  (let/ec _return (begin
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (string=? (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "\\") (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) (let ()
(define c (slice s (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(if (string=? c "n") (let ()
(set! out (string-append out "\n"))
(set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (let ()
(if (string=? c "\\") (let ()
(set! out (string-append out "\\"))
(set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
))
) (void))
    (set! out (string-append out (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (parseProgram src)
  (let/ec _return (begin
(define lines (string-split src "\n"))
(define header (fields (if lines (list-ref lines (int 0)) #f)))
(define dataSize (_parse-int-str (if header (list-ref header (int 1)) #f) 10))
(define nStrings (_parse-int-str (if header (list-ref header (int 3)) #f) 10))
(define stringPool (list))
(define i 1)
(let/ec _break (let loop ()
  (if (<= i nStrings) (let ()
    (define s (if lines (list-ref lines (int i)) #f))
    (if (> (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 0) (let ()
(set! stringPool (append stringPool (list (unescape (slice s 1 (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1))))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define code (list))
(define addrMap (hash))
(let/ec _break (let loop ()
  (if (< i (cond [(string? lines) (string-length lines)] [(hash? lines) (hash-count lines)] [else (length lines)])) (let ()
    (define line (trim (if lines (list-ref lines (int i)) #f)))
    (if (equal? (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(_break)
) (void))
    (define parts (fields line))
    (define addr (_parse-int-str (if parts (list-ref parts (int 0)) #f) 10))
    (define op (if parts (list-ref parts (int 1)) #f))
    (define arg 0)
    (if (string=? op "push") (let ()
(set! arg (_parse-int-str (if parts (list-ref parts (int 2)) #f) 10))
) (let ()
(if (or (string=? op "fetch") (string=? op "store")) (let ()
(set! arg (_parse-int-str (slice (if parts (list-ref parts (int 2)) #f) 1 (- (cond [(string? (if parts (list-ref parts (int 2)) #f)) (string-length (if parts (list-ref parts (int 2)) #f))] [(hash? (if parts (list-ref parts (int 2)) #f)) (hash-count (if parts (list-ref parts (int 2)) #f))] [else (length (if parts (list-ref parts (int 2)) #f))]) 1)) 10))
) (let ()
(if (or (string=? op "jmp") (string=? op "jz")) (let ()
(set! arg (_parse-int-str (if parts (list-ref parts (int 3)) #f) 10))
) (void))
))
))
    (set! code (append code (list (hash "addr" addr "op" op "arg" arg))))
    (set! addrMap (hash-set (or addrMap (hash)) addr (- (cond [(string? code) (string-length code)] [(hash? code) (hash-count code)] [else (length code)]) 1)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "dataSize" dataSize "strings" stringPool "code" code "addrMap" addrMap))
))
)
(define (runVM prog)
  (let/ec _return (begin
(define data (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if prog (hash-ref prog "dataSize" #f) #f)) (let ()
    (set! data (append data (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define stack (list))
(define pc 0)
(define code (if prog (hash-ref prog "code" #f) #f))
(define addrMap (if prog (hash-ref prog "addrMap" #f) #f))
(define pool (if prog (hash-ref prog "strings" #f) #f))
(define line "")
(let/ec _break (let loop ()
  (if (< pc (cond [(string? code) (string-length code)] [(hash? code) (hash-count code)] [else (length code)])) (let ()
    (define inst (if code (list-ref code (int pc)) #f))
    (define op (if inst (hash-ref inst "op" #f) #f))
    (define arg (if inst (hash-ref inst "arg" #f) #f))
    (if (string=? op "push") (let ()
(set! stack (append stack (list arg)))
(set! pc (let ([__l pc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if (string=? op "store") (let ()
(set! data (list-set data (int arg) (if stack (list-ref stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1))) #f)))
(set! stack (slice stack 0 (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
(set! pc (let ([__l pc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if (string=? op "fetch") (let ()
(set! stack (append stack (list (if data (list-ref data (int arg)) #f))))
(set! pc (let ([__l pc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if (string=? op "add") (let ()
(set! stack (list-set stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2)) (let ([__l (if stack (list-ref stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2))) #f)] [__r (if stack (list-ref stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! stack (slice stack 0 (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
(set! pc (let ([__l pc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if (string=? op "lt") (let ()
(define v 0)
(if (< (if stack (list-ref stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2))) #f) (if stack (list-ref stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1))) #f)) (let ()
(set! v 1)
) (void))
(set! stack (list-set stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2)) v))
(set! stack (slice stack 0 (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
(set! pc (let ([__l pc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if (string=? op "jz") (let ()
(define v (if stack (list-ref stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1))) #f))
(set! stack (slice stack 0 (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
(if (equal? v 0) (let ()
(set! pc (if addrMap (list-ref addrMap (int arg)) #f))
) (let ()
(set! pc (let ([__l pc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
(loop)
) (void))
    (if (string=? op "jmp") (let ()
(set! pc (if addrMap (list-ref addrMap (int arg)) #f))
(loop)
) (void))
    (if (string=? op "prts") (let ()
(define s (if pool (list-ref pool (int (if stack (list-ref stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1))) #f))) #f))
(set! stack (slice stack 0 (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
(if (not (string=? s "\n")) (let ()
(set! line (string-append line s))
) (void))
(set! pc (let ([__l pc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if (string=? op "prti") (let ()
(set! line (string-append line (format "~a" (if stack (list-ref stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1))) #f))))
(displayln line)
(set! line "")
(set! stack (slice stack 0 (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
(set! pc (let ([__l pc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (if (string=? op "halt") (let ()
(_break)
) (void))
    (set! pc (let ([__l pc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (trim s)
  (let/ec _return (begin
(define start 0)
(let/ec _break (let loop ()
  (if (and (< start (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (or (string=? (slice s start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ") (string=? (slice s start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "\t"))) (let ()
    (set! start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define end (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(let/ec _break (let loop ()
  (if (and (> end start) (or (string=? (slice s (- end 1) end) " ") (string=? (slice s (- end 1) end) "\t"))) (let ()
    (set! end (- end 1))
    (loop)) (void))))
(_return (slice s start end))
))
)
(define (split s sep)
  (let/ec _return (begin
(define parts (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (and (> (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)]) 0) (<= (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) (string=? (slice s i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sep)) (let ()
(set! parts (append parts (list cur)))
(set! cur "")
(set! i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! cur (string-append cur (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(set! parts (append parts (list cur)))
(_return parts)
))
)
(define (main)
  (let/ec _return (begin
(define programText (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Datasize: 1 Strings: 2\n" "\"count is: \"\n") "\"\\n\"\n") "    0 push  1\n") "    5 store [0]\n") "   10 fetch [0]\n") "   15 push  10\n") "   20 lt\n") "   21 jz     (43) 65\n") "   26 push  0\n") "   31 prts\n") "   32 fetch [0]\n") "   37 prti\n") "   38 push  1\n") "   43 prts\n") "   44 fetch [0]\n") "   49 push  1\n") "   54 add\n") "   55 store [0]\n") "   60 jmp    (-51) 10\n") "   65 halt\n"))
(define prog (parseProgram programText))
(runVM prog)
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
