;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (contains xs v)
  (let/ec _return (begin
(let/ec _break (for ([x xs])
  (let/ec _cont
(if (equal? x v) (let ()
(_return #t)
) (void))
  )))
(_return #f)
))
)
(define (copyInts xs)
  (let/ec _return (begin
(define out (list))
(let/ec _break (for ([x xs])
  (let/ec _cont
(set! out (append out (list x)))
  )))
(_return out)
))
)
(define (sliceEqual a b)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let ()
    (if (not (equal? (if a (list-ref a (int i)) #f) (if b (list-ref b (int i)) #f))) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (reverse xs)
  (let/ec _return (begin
(define i 0)
(define j (- (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1))
(let/ec _break (let loop ()
  (if (< i j) (let ()
    (define t (if xs (list-ref xs (int i)) #f))
    (set! xs (list-set xs (int i) (if xs (list-ref xs (int j)) #f)))
    (set! xs (list-set xs (int j) t))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (- j 1))
    (loop)) (void))))
))
)
(define (perimEqual p1 p2)
  (let/ec _return (begin
(if (not (equal? (cond [(string? p1) (string-length p1)] [(hash? p1) (hash-count p1)] [else (length p1)]) (cond [(string? p2) (string-length p2)] [(hash? p2) (hash-count p2)] [else (length p2)]))) (let ()
(_return #f)
) (void))
(let/ec _break (for ([v p1])
  (let/ec _cont
(if (not (member v p2)) (let ()
(_return #f)
) (void))
  )))
(define c (copyInts p1))
(define r 0)
(let/ec _break (let loop ()
  (if (< r 2) (let ()
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? c) (string-length c)] [(hash? c) (hash-count c)] [else (length c)])) (let ()
    (if (sliceEqual c p2) (let ()
(_return #t)
) (void))
    (define t (if c (list-ref c (int (- (cond [(string? c) (string-length c)] [(hash? c) (hash-count c)] [else (length c)]) 1))) #f))
    (define j (- (cond [(string? c) (string-length c)] [(hash? c) (hash-count c)] [else (length c)]) 1))
    (let/ec _break (let loop ()
  (if (> j 0) (let ()
    (set! c (list-set c (int j) (if c (list-ref c (int (- j 1))) #f)))
    (set! j (- j 1))
    (loop)) (void))))
    (set! c (list-set c (int 0) t))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (reverse c)
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (sortEdges es)
  (let/ec _return (begin
(define arr es)
(define n (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- n 1)) (let ()
    (define a (if arr (list-ref arr (int j)) #f))
    (define b (if arr (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) #f))
    (if (or (> (if a (hash-ref a "a" #f) #f) (if b (hash-ref b "a" #f) #f)) (and (equal? (if a (hash-ref a "a" #f) #f) (if b (hash-ref b "a" #f) #f)) (> (if a (hash-ref a "b" #f) #f) (if b (hash-ref b "b" #f) #f)))) (let ()
(set! arr (list-set arr (int j) b))
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) a))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (concat a b)
  (let/ec _return (begin
(define out (list))
(let/ec _break (for ([x a])
  (let/ec _cont
(set! out (append out (list x)))
  )))
(let/ec _break (for ([x b])
  (let/ec _cont
(set! out (append out (list x)))
  )))
(_return out)
))
)
(define (faceToPerim face)
  (let/ec _return (begin
(define le (cond [(string? face) (string-length face)] [(hash? face) (hash-count face)] [else (length face)]))
(if (equal? le 0) (let ()
(_return #f)
) (void))
(define edges (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i le) (let ()
    (define e (if face (list-ref face (int i)) #f))
    (if (<= (if e (hash-ref e "b" #f) #f) (if e (hash-ref e "a" #f) #f)) (let ()
(_return #f)
) (void))
    (set! edges (append edges (list e)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! edges (sortEdges edges))
(define firstEdge (if edges (list-ref edges (int 0)) #f))
(define perim (list (if firstEdge (hash-ref firstEdge "a" #f) #f) (if firstEdge (hash-ref firstEdge "b" #f) #f)))
(define first (if firstEdge (hash-ref firstEdge "a" #f) #f))
(define last (if firstEdge (hash-ref firstEdge "b" #f) #f))
(set! edges (slice edges 1 (cond [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])))
(set! le (cond [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)]))
(define done #f)
(let/ec _break (let loop ()
  (if (and (> le 0) (not done)) (let ()
    (define idx 0)
    (define found #f)
    (let/ec _break (let loop ()
  (if (< idx le) (let ()
    (define e (if edges (list-ref edges (int idx)) #f))
    (if (equal? (if e (hash-ref e "a" #f) #f) last) (let ()
(set! perim (append perim (list (if e (hash-ref e "b" #f) #f))))
(set! last (if e (hash-ref e "b" #f) #f))
(set! found #t)
) (let ()
(if (equal? (if e (hash-ref e "b" #f) #f) last) (let ()
(set! perim (append perim (list (if e (hash-ref e "a" #f) #f))))
(set! last (if e (hash-ref e "a" #f) #f))
(set! found #t)
) (void))
))
    (if found (let ()
(set! edges (concat (slice edges 0 idx) (slice edges (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)]))))
(set! le (- le 1))
(if (equal? last first) (let ()
(if (equal? le 0) (let ()
(set! done #t)
) (let ()
(_return #f)
))
) (void))
(_break)
) (void))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (not found) (let ()
(_return #f)
) (void))
    (loop)) (void))))
(_return (slice perim 0 (- (cond [(string? perim) (string-length perim)] [(hash? perim) (hash-count perim)] [else (length perim)]) 1)))
))
)
(define (listStr xs)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (set! s (string-append s (format "~a" (if xs (list-ref xs (int i)) #f))))
    (if (< i (- (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)) (let ()
(set! s (string-append s " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(displayln "Perimeter format equality checks:")
(displayln (string-append "  Q == R is " (format "~a" (perimEqual (list 8 1 3) (list 1 3 8)))))
(displayln (string-append "  U == V is " (format "~a" (perimEqual (list 18 8 14 10 12 17 19) (list 8 14 10 12 17 19 18)))))
(define e (list (hash "a" 7 "b" 11) (hash "a" 1 "b" 11) (hash "a" 1 "b" 7)))
(define f (list (hash "a" 11 "b" 23) (hash "a" 1 "b" 17) (hash "a" 17 "b" 23) (hash "a" 1 "b" 11)))
(define g (list (hash "a" 8 "b" 14) (hash "a" 17 "b" 19) (hash "a" 10 "b" 12) (hash "a" 10 "b" 14) (hash "a" 12 "b" 17) (hash "a" 8 "b" 18) (hash "a" 18 "b" 19)))
(define h (list (hash "a" 1 "b" 3) (hash "a" 9 "b" 11) (hash "a" 3 "b" 11) (hash "a" 1 "b" 11)))
(displayln "\nEdge to perimeter format translations:")
(define faces (list e f g h))
(define names (list "E" "F" "G" "H"))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? faces) (string-length faces)] [(hash? faces) (hash-count faces)] [else (length faces)])) (let ()
    (define per (faceToPerim (if faces (list-ref faces (int idx)) #f)))
    (if (equal? per #f) (let ()
(displayln (string-append (string-append "  " (if names (list-ref names (int idx)) #f)) " => Invalid edge format"))
) (let ()
(displayln (string-append (string-append (string-append "  " (if names (list-ref names (int idx)) #f)) " => ") (listStr per)))
))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
