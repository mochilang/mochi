;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (digitSumMod n base)
  (let/ec _return (begin
(define sum 0)
(define j n)
(let/ec _break (let loop ()
  (if (> j 0) (let ()
    (set! sum (let ([__l sum] [__r (modulo j base)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (quotient j base))
    (loop)) (void))))
(_return (modulo sum base))
))
)
(define (fairshareList n base)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! res (append res (list (digitSumMod i base))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (sortInts xs)
  (let/ec _return (begin
(define arr xs)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1)) (let ()
    (if (> (if arr (list-ref arr (int j)) #f) (if arr (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) #f)) (let ()
(define t (if arr (list-ref arr (int j)) #f))
(set! arr (list-set arr (int j) (if arr (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) #f)))
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) t))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (turns n base)
  (let/ec _return (begin
(define counts (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i base) (let ()
    (set! counts (append counts (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (define v (digitSumMod i base))
    (set! counts (list-set counts (int v) (let ([__l (if counts (list-ref counts (int v)) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define freq (hash))
(define fkeys (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i base) (let ()
    (define c (if counts (list-ref counts (int i)) #f))
    (if (> c 0) (let ()
(if (hash-has-key? freq c) (let ()
(set! freq (hash-set (or freq (hash)) c (let ([__l (if freq (hash-ref freq c #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(set! freq (hash-set (or freq (hash)) c 1))
(set! fkeys (append fkeys (list c)))
))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define total 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? fkeys) (string-length fkeys)] [(hash? fkeys) (hash-count fkeys)] [else (length fkeys)])) (let ()
    (set! total (let ([__l total] [__r (if freq (hash-ref freq (if fkeys (list-ref fkeys (int i)) #f) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (not (equal? total base)) (let ()
(_return (string-append (string-append "only " (format "~a" total)) " have a turn"))
) (void))
(set! fkeys (sortInts fkeys))
(define res "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? fkeys) (string-length fkeys)] [(hash? fkeys) (hash-count fkeys)] [else (length fkeys)])) (let ()
    (if (> i 0) (let ()
(set! res (string-append res " or "))
) (void))
    (set! res (string-append res (format "~a" (if fkeys (list-ref fkeys (int i)) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (main)
  (let/ec _return (begin
(define bases1 (list 2 3 5 11))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bases1) (string-length bases1)] [(hash? bases1) (hash-count bases1)] [else (length bases1)])) (let ()
    (define b (if bases1 (list-ref bases1 (int i)) #f))
    (displayln (string-append (string-append (pad-start (format "~a" b) 2 " ") " : ") (format "~a" (fairshareList 25 b))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
(displayln "How many times does each get a turn in 50000 iterations?")
(define bases2 (list 191 1377 49999 50000 50001))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bases2) (string-length bases2)] [(hash? bases2) (hash-count bases2)] [else (length bases2)])) (let ()
    (define b (if bases2 (list-ref bases2 (int i)) #f))
    (define t (turns 50000 b))
    (displayln (string-append (string-append (string-append "  With " (format "~a" b)) " people: ") t))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
