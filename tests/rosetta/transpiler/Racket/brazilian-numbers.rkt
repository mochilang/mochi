;; Generated by Mochi 0.10.39 on 2025-07-24 23:29 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (sameDigits n b)
  (let/ec _return (begin
(define f (modulo n b))
(set! n (int (quotient n b)))
(let/ec _break (let loop ()
  (if (> n 0) (let ()
    (if (not (equal? (modulo n b) f)) (let ()
(_return #f)
) (void))
    (set! n (int (quotient n b)))
    (loop)) (void))))
(_return #t)
))
)
(define (isBrazilian n)
  (let/ec _return (begin
(if (< n 7) (let ()
(_return #f)
) (void))
(if (and (equal? (modulo n 2) 0) (>= n 8)) (let ()
(_return #t)
) (void))
(define b 2)
(let/ec _break (let loop ()
  (if (< b (- n 1)) (let ()
    (if (sameDigits n b) (let ()
(_return #t)
) (void))
    (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (isPrime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(if (equal? (modulo n 2) 0) (let ()
(_return (equal? n 2))
) (void))
(if (equal? (modulo n 3) 0) (let ()
(_return (equal? n 3))
) (void))
(define d 5)
(let/ec _break (let loop ()
  (if (<= (* d d) n) (let ()
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (main)
  (let/ec _return (begin
(define kinds (list " " " odd " " prime "))
(for ([kind kinds])
(displayln (string-append (string-append "First 20" kind) "Brazilian numbers:"))
(define c 0)
(define n 7)
(let/ec _break (let loop ()
  (if #t (let ()
    (if (isBrazilian n) (let ()
(displayln (string-append (format "~a" n) " "))
(set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? c 20) (let ()
(displayln "\n")
(_break)
) (void))
) (void))
    (if (string=? kind " ") (let ()
(set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? kind " odd ") (let ()
(set! n (let ([__l n] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(let/ec _break (let loop ()
  (if #t (let ()
    (set! n (let ([__l n] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (isPrime n) (let ()
(_break)
) (void))
    (loop)) (void))))
))
))
    (loop)) (void))))
)
(define n 7)
(define c 0)
(let/ec _break (let loop ()
  (if (< c 100000) (let ()
    (if (isBrazilian n) (let ()
(set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (string-append "The 100,000th Brazilian number: " (format "~a" (- n 1))))
))
)
(main)
