;; Generated by Mochi 0.10.55 on 2025-08-03 10:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (powf base exp)
  (let/ec _return (begin
(define result 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let/ec _cont
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (normalize v)
  (let/ec _return (begin
(define len (sqrtApprox (let ([__l (let ([__l (* (if v (hash-ref v "x" #f) #f) (if v (hash-ref v "x" #f) #f))] [__r (* (if v (hash-ref v "y" #f) #f) (if v (hash-ref v "y" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (if v (hash-ref v "z" #f) #f) (if v (hash-ref v "z" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(_return (hash "x" (/ (if v (hash-ref v "x" #f) #f) len) "y" (/ (if v (hash-ref v "y" #f) #f) len) "z" (/ (if v (hash-ref v "z" #f) #f) len)))
))
)
(define (dot a b)
  (let/ec _return (begin
(define d (let ([__l (let ([__l (* (if a (hash-ref a "x" #f) #f) (if b (hash-ref b "x" #f) #f))] [__r (* (if a (hash-ref a "y" #f) #f) (if b (hash-ref b "y" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (if a (hash-ref a "z" #f) #f) (if b (hash-ref b "z" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (< d 0.0) (let ()
(_return (- d))
) (void))
(_return 0.0)
))
)
(define (hitSphere s x y)
  (let/ec _return (begin
(define dx (- x (if s (hash-ref s "cx" #f) #f)))
(define dy (- y (if s (hash-ref s "cy" #f) #f)))
(define zsq (- (* (if s (hash-ref s "r" #f) #f) (if s (hash-ref s "r" #f) #f)) (let ([__l (* dx dx)] [__r (* dy dy)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(if (< zsq 0.0) (let ()
(_return (hash "hit" #f))
) (void))
(define z (sqrtApprox zsq))
(_return (hash "hit" #t "z1" (- (if s (hash-ref s "cz" #f) #f) z) "z2" (let ([__l (if s (hash-ref s "cz" #f) #f)] [__r z]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (main)
  (let/ec _return (begin
(define shades ".:!*oe&#%@")
(define light (normalize (hash "x" (- 50.0) "y" 30.0 "z" 50.0)))
(define pos (hash "cx" 20.0 "cy" 20.0 "cz" 0.0 "r" 20.0))
(define neg (hash "cx" 1.0 "cy" 1.0 "cz" (- 6.0) "r" 20.0))
(define yi 0)
(let/ec _break (let loop ()
  (if (<= yi 40) (let/ec _cont
    (define y (let ([__l (exact->inexact yi)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define line "")
    (define xi (- 20))
    (let/ec _break (let loop ()
  (if (<= xi 60) (let/ec _cont
    (define x (let ([__l (let ([__l (/ (- (exact->inexact xi) (if pos (hash-ref pos "cx" #f) #f)) 2.0)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if pos (hash-ref pos "cx" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define hb (hitSphere pos x y))
    (if (not (if hb (hash-ref hb "hit" #f) #f)) (let ()
(set! line (string-append line " "))
(set! xi (let ([__l xi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
    (define zb1 (if hb (hash-ref hb "z1" #f) #f))
    (define zb2 (if hb (hash-ref hb "z2" #f) #f))
    (define hs (hitSphere neg x y))
    (define hitRes 1)
    (if (not (if hs (hash-ref hs "hit" #f) #f)) (let ()
(set! hitRes 1)
) (let ()
(if (> (if hs (hash-ref hs "z1" #f) #f) zb1) (let ()
(set! hitRes 1)
) (let ()
(if (> (if hs (hash-ref hs "z2" #f) #f) zb2) (let ()
(set! hitRes 0)
) (let ()
(if (> (if hs (hash-ref hs "z2" #f) #f) zb1) (let ()
(set! hitRes 2)
) (let ()
(set! hitRes 1)
))
))
))
))
    (if (equal? hitRes 0) (let ()
(set! line (string-append line " "))
(set! xi (let ([__l xi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
    (define vec (hash))
    (if (equal? hitRes 1) (let ()
(set! vec (hash "x" (- x (if pos (hash-ref pos "cx" #f) #f)) "y" (- y (if pos (hash-ref pos "cy" #f) #f)) "z" (- zb1 (if pos (hash-ref pos "cz" #f) #f))))
) (let ()
(set! vec (hash "x" (- (if neg (hash-ref neg "cx" #f) #f) x) "y" (- (if neg (hash-ref neg "cy" #f) #f) y) "z" (- (if neg (hash-ref neg "cz" #f) #f) (if hs (hash-ref hs "z2" #f) #f))))
))
    (set! vec (normalize vec))
    (define b (let ([__l (powf (dot light vec) 2)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define intensity (int (* (- 1.0 b) (exact->inexact (cond [(string? shades) (string-length shades)] [(hash? shades) (hash-count shades)] [else (length shades)])))))
    (if (< intensity 0) (let ()
(set! intensity 0)
) (void))
    (if (>= intensity (cond [(string? shades) (string-length shades)] [(hash? shades) (hash-count shades)] [else (length shades)])) (let ()
(set! intensity (- (cond [(string? shades) (string-length shades)] [(hash? shades) (hash-count shades)] [else (length shades)]) 1))
) (void))
    (set! line (string-append line (slice shades intensity (let ([__l intensity] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! xi (let ([__l xi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! yi (let ([__l yi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
