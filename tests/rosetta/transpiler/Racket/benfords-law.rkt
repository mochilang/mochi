;; Generated by Mochi 0.10.41 on 2025-07-27 15:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (floorf x)
  (let/ec _return (begin
(define y (int x))
(_return (exact->inexact y))
))
)
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (fmtF3 x)
  (let/ec _return (begin
(define y (/ (floorf (let ([__l (* x 1000.0)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 1000.0))
(define s (format "~a" y))
(define dot (indexOf s "."))
(if (equal? dot (- 0 1)) (let ()
(set! s (string-append s ".000"))
) (let ()
(define decs (- (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) dot) 1))
(if (> decs 3) (let ()
(set! s (substring s 0 (let ([__l dot] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(let/ec _break (let loop ()
  (if (< decs 3) (let ()
    (set! s (string-append s "0"))
    (set! decs (let ([__l decs] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
))
(_return s)
))
)
(define (padFloat3 x width)
  (let/ec _return (begin
(define s (fmtF3 x))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (fib1000)
  (let/ec _return (begin
(define a 0.0)
(define b 1.0)
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 1000) (let ()
    (set! res (append res (list b)))
    (define t b)
    (set! b (let ([__l b] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! a t)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (leadingDigit x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(set! x (- x))
) (void))
(let/ec _break (let loop ()
  (if (>= x 10.0) (let ()
    (set! x (/ x 10.0))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (and (> x 0.0) (< x 1.0)) (let ()
    (set! x (* x 10.0))
    (loop)) (void))))
(_return (int x))
))
)
(define (show nums title)
  (let/ec _return (begin
(define counts (list 0 0 0 0 0 0 0 0 0))
(let/ec _break (for ([n nums])
  (let/ec _cont
(define d (leadingDigit n))
(if (and (>= d 1) (<= d 9)) (let ()
(set! counts (list-set counts (int (- d 1)) (let ([__l (if counts (list-ref counts (int (- d 1))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
  )))
(define preds (list 0.301 0.176 0.125 0.097 0.079 0.067 0.058 0.051 0.046))
(define total (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)]))
(displayln title)
(displayln "Digit  Observed  Predicted")
(define i 0)
(let/ec _break (let loop ()
  (if (< i 9) (let ()
    (define obs (/ (exact->inexact (if counts (list-ref counts (int i)) #f)) (exact->inexact total)))
    (define line (string-append (string-append (string-append (string-append (string-append "  " (format "~a" (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) "  ") (padFloat3 obs 9)) "  ") (padFloat3 (if preds (list-ref preds (int i)) #f) 8)))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(show (fib1000) "First 1000 Fibonacci numbers")
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
