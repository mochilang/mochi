;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define bCoeff 7.0)
(define (zero)
  (let/ec _return (begin
(_return (hash "x" 0.0 "y" 0.0 "inf" #t))
))
)
(define (isZero p)
  (let/ec _return (begin
(_return (if p (hash-ref p "inf" #f) #f))
))
)
(define (neg p)
  (let/ec _return (begin
(_return (hash "x" (if p (hash-ref p "x" #f) #f) "y" (- (if p (hash-ref p "y" #f) #f)) "inf" (if p (hash-ref p "inf" #f) #f)))
))
)
(define (dbl p)
  (let/ec _return (begin
(if (isZero p) (let ()
(_return p)
) (void))
(define L (/ (* (* 3.0 (if p (hash-ref p "x" #f) #f)) (if p (hash-ref p "x" #f) #f)) (* 2.0 (if p (hash-ref p "y" #f) #f))))
(define x (- (* L L) (* 2.0 (if p (hash-ref p "x" #f) #f))))
(_return (hash "x" x "y" (- (* L (- (if p (hash-ref p "x" #f) #f) x)) (if p (hash-ref p "y" #f) #f)) "inf" #f))
))
)
(define (add p q)
  (let/ec _return (begin
(if (isZero p) (let ()
(_return q)
) (void))
(if (isZero q) (let ()
(_return p)
) (void))
(if (equal? (if p (hash-ref p "x" #f) #f) (if q (hash-ref q "x" #f) #f)) (let ()
(if (equal? (if p (hash-ref p "y" #f) #f) (if q (hash-ref q "y" #f) #f)) (let ()
(_return (dbl p))
) (void))
(_return (zero))
) (void))
(define L (/ (- (if q (hash-ref q "y" #f) #f) (if p (hash-ref p "y" #f) #f)) (- (if q (hash-ref q "x" #f) #f) (if p (hash-ref p "x" #f) #f))))
(define x (- (- (* L L) (if p (hash-ref p "x" #f) #f)) (if q (hash-ref q "x" #f) #f)))
(_return (hash "x" x "y" (- (* L (- (if p (hash-ref p "x" #f) #f) x)) (if p (hash-ref p "y" #f) #f)) "inf" #f))
))
)
(define (mul p n)
  (let/ec _return (begin
(define r (zero))
(define q p)
(define k n)
(let/ec _break (let loop ()
  (if (> k 0) (let ()
    (if (equal? (modulo k 2) 1) (let ()
(set! r (add r q))
) (void))
    (set! q (dbl q))
    (set! k (quotient k 2))
    (loop)) (void))))
(_return r)
))
)
(define (cbrtApprox x)
  (let/ec _return (begin
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 40) (let ()
    (set! guess (/ (let ([__l (* 2.0 guess)] [__r (/ x (* guess guess))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 3.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (fromY y)
  (let/ec _return (begin
(_return (hash "x" (cbrtApprox (- (* y y) bCoeff)) "y" y "inf" #f))
))
)
(define (show s p)
  (let/ec _return (begin
(if (isZero p) (let ()
(displayln (string-append s "Zero"))
) (let ()
(displayln (string-append (string-append (string-append (string-append (string-append s "(") (format "~a" (if p (hash-ref p "x" #f) #f))) ", ") (format "~a" (if p (hash-ref p "y" #f) #f))) ")"))
))
))
)
(define (main)
  (let/ec _return (begin
(define a (fromY 1.0))
(define b (fromY 2.0))
(show "a = " a)
(show "b = " b)
(define c (add a b))
(show "c = a + b = " c)
(define d (neg c))
(show "d = -c = " d)
(show "c + d = " (add c d))
(show "a + b + d = " (add a (add b d)))
(show "a * 12345 = " (mul a 12345))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
