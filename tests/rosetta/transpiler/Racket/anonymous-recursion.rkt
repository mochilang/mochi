;; Generated by Mochi 0.10.38 on 2025-07-23 16:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (fib n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return n)
) (void))
(_return (let ([__l (fib (- n 1))] [__r (fib (- n 2))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (main)
  (let/ec _return (begin
(define i (- 1))
(let/ec _break (let loop ()
  (if (<= i 10) (let ()
    (if (< i 0) (let ()
(displayln (string-append (string-append "fib(" (format "~a" i)) ") returned error: negative n is forbidden"))
) (let ()
(displayln (string-append (string-append (string-append "fib(" (format "~a" i)) ") = ") (format "~a" (fib i))))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
