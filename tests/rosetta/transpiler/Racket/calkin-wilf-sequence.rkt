;; Generated by Mochi 0.10.42 on 2025-07-27 23:42 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (bigrat a b)
  (let/ec _return (begin
(_return (/ a b))
))
)
(define (calkinWilf n)
  (let/ec _return (begin
(define seq (list))
(set! seq (append seq (list (bigrat 1 1))))
(define i 1)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (define prev (if seq (list-ref seq (int (- i 1))) #f))
    (define a (num prev))
    (define b (denom prev))
    (define f (/ a b))
    (define t (bigrat f 1))
    (set! t (* t 2))
    (set! t (- t prev))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! t (/ 1 t))
    (set! seq (append seq (list t)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return seq)
))
)
(define (toContinued r)
  (let/ec _return (begin
(define a (num r))
(define b (denom r))
(define res (list))
(let/ec _break (let loop ()
  (if #t (let ()
    (set! res (append res (list (int (/ a b)))))
    (define t (modulo a b))
    (set! a b)
    (set! b t)
    (if (equal? a 1) (let ()
(_break)
) (void))
    (loop)) (void))))
(if (equal? (modulo (cond [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) 2) 0) (let ()
(set! res (list-set res (int (- (cond [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) 1)) (- (if res (list-ref res (int (- (cond [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) 1))) #f) 1)))
(set! res (append res (list 1)))
) (void))
(_return res)
))
)
(define (termNumber cf)
  (let/ec _return (begin
(define b "")
(define d "1")
(let/ec _break (for ([n cf])
  (let/ec _cont
(set! b (string-append (_repeat d n) b))
(if (string=? d "1") (let ()
(set! d "0")
) (let ()
(set! d "1")
))
  )))
(_return (_parse-int-str b 2))
))
)
(define (commatize n)
  (let/ec _return (begin
(define s (format "~a" n))
(define out "")
(define i 0)
(define cnt 0)
(define neg #f)
(if (string=? (substring s 0 1) "-") (let ()
(set! neg #t)
(set! s (substring s 1 (string-length s)))
) (void))
(set! i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (set! out (string-append (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) out))
    (set! cnt (let ([__l cnt] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (and (equal? cnt 3) (not (equal? i 0))) (let ()
(set! out (string-append "," out))
(set! cnt 0)
) (void))
    (set! i (- i 1))
    (loop)) (void))))
(if neg (let ()
(set! out (string-append "-" out))
) (void))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define cw (calkinWilf 20))
(displayln "The first 20 terms of the Calkin-Wilf sequnence are:")
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let ()
    (define r (if cw (list-ref cw (int i)) #f))
    (define s (format "~a" (num r)))
    (if (not (equal? (denom r) 1)) (let ()
(set! s (string-append (string-append s "/") (format "~a" (denom r))))
) (void))
    (displayln (string-append (string-append (pad-start (let ([__l i] [__r (int 1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2 " ") ": ") s))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define r (bigrat 83116 51639))
(define cf (toContinued r))
(define tn (termNumber cf))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append "" (format "~a" (num r))) "/") (format "~a" (denom r))) " is the ") (commatize tn)) "th term of the sequence."))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
