;; Generated by Mochi 0.10.55 on 2025-08-03 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (repeat ch n)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! s (string-append s ch))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (cubLine n dx dy cde)
  (let/ec _return (begin
(define line (let ([__l (_repeat " " (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))] [__r (slice cde 0 1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define d (- (* 9 dx) 1))
(let/ec _break (let loop ()
  (if (> d 0) (let/ec _cont
    (set! line (string-append line (slice cde 1 2)))
    (set! d (- d 1))
    (loop)) (void))))
(set! line (string-append line (slice cde 0 1)))
(set! line (string-append (string-append line (_repeat " " dy)) (slice cde 2 (string-length cde))))
(displayln line)
))
)
(define (cuboid dx dy dz)
  (let/ec _return (begin
(displayln (string-append (string-append (string-append (string-append (string-append (string-append "cuboid " (format "~a" dx)) " ") (format "~a" dy)) " ") (format "~a" dz)) ":"))
(cubLine (let ([__l dy] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) dx 0 "+-")
(define i 1)
(let/ec _break (let loop ()
  (if (<= i dy) (let/ec _cont
    (cubLine (let ([__l (- dy i)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) dx (- i 1) "/ |")
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(cubLine 0 dx dy "+-|")
(define j (- (- (* 4 dz) dy) 2))
(let/ec _break (let loop ()
  (if (> j 0) (let/ec _cont
    (cubLine 0 dx dy "| |")
    (set! j (- j 1))
    (loop)) (void))))
(cubLine 0 dx dy "| +")
(set! i 1)
(let/ec _break (let loop ()
  (if (<= i dy) (let/ec _cont
    (cubLine 0 dx (- dy i) "| /")
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(cubLine 0 dx 0 "+-\n")
))
)
(cuboid 2 3 4)
(displayln "")
(cuboid 1 1 1)
(displayln "")
(cuboid 6 2 1)
