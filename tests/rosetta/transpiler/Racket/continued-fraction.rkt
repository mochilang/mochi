;; Generated by Mochi 0.10.55 on 2025-08-03 07:58 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (newTerm a b)
  (let/ec _return (begin
(_return (hash "a" a "b" b))
))
)
(define (cfSqrt2 nTerms)
  (let/ec _return (begin
(define f (list))
(define n 0)
(let/ec _break (let loop ()
  (if (< n nTerms) (let ()
    (set! f (append f (list (newTerm 2 1))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> nTerms 0) (let ()
(set! f (list-set f 0 (hash-set (list-ref f 0) "a" 1)))
) (void))
(_return f)
))
)
(define (cfNap nTerms)
  (let/ec _return (begin
(define f (list))
(define n 0)
(let/ec _break (let loop ()
  (if (< n nTerms) (let ()
    (set! f (append f (list (newTerm n (- n 1)))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> nTerms 0) (let ()
(set! f (list-set f 0 (hash-set (list-ref f 0) "a" 2)))
) (void))
(if (> nTerms 1) (let ()
(set! f (list-set f 1 (hash-set (list-ref f 1) "b" 1)))
) (void))
(_return f)
))
)
(define (cfPi nTerms)
  (let/ec _return (begin
(define f (list))
(define n 0)
(let/ec _break (let loop ()
  (if (< n nTerms) (let ()
    (define g (- (* 2 n) 1))
    (set! f (append f (list (newTerm 6 (* g g)))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> nTerms 0) (let ()
(set! f (list-set f 0 (hash-set (list-ref f 0) "a" 3)))
) (void))
(_return f)
))
)
(define (real f)
  (let/ec _return (begin
(define r 0.0)
(define i (- (cond [(string? f) (string-length f)] [(hash? f) (hash-count f)] [else (length f)]) 1))
(let/ec _break (let loop ()
  (if (> i 0) (let ()
    (set! r (/ (exact->inexact (if (if f (if (hash? f) (hash-ref f i #f) (list-ref f (int i))) #f) (hash-ref (if f (if (hash? f) (hash-ref f i #f) (list-ref f (int i))) #f) "b" #f) #f)) (let ([__l (exact->inexact (if (if f (if (hash? f) (hash-ref f i #f) (list-ref f (int i))) #f) (hash-ref (if f (if (hash? f) (hash-ref f i #f) (list-ref f (int i))) #f) "a" #f) #f))] [__r r]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! i (- i 1))
    (loop)) (void))))
(if (> (cond [(string? f) (string-length f)] [(hash? f) (hash-count f)] [else (length f)]) 0) (let ()
(set! r (let ([__l r] [__r (exact->inexact (if (if f (if (hash? f) (hash-ref f 0 #f) (list-ref f (int 0))) #f) (hash-ref (if f (if (hash? f) (hash-ref f 0 #f) (list-ref f (int 0))) #f) "a" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return r)
))
)
(define (main)
  (let/ec _return (begin
(displayln (string-append "sqrt2: " (format "~a" (real (cfSqrt2 20)))))
(displayln (string-append "nap:   " (format "~a" (real (cfNap 20)))))
(displayln (string-append "pi:    " (format "~a" (real (cfPi 20)))))
))
)
(main)
