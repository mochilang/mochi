;; Generated by Mochi 0.10.39 on 2025-07-24 20:52 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (split s sep)
  (let/ec _return (begin
(define parts (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (and (> (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)]) 0) (<= (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) (string=? (substring s i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sep)) (let ()
(set! parts (append parts (list cur)))
(set! cur "")
(set! i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! cur (string-append cur (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(set! parts (append parts (list cur)))
(_return parts)
))
)
(define (join xs sep)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (> i 0) (let ()
(set! res (string-append res sep))
) (void))
    (set! res (string-append res (list-ref xs i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (repeat ch n)
  (let/ec _return (begin
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! out (string-append out ch))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (substring str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (substring str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (toBinary n bits)
  (let/ec _return (begin
(define b "")
(define val n)
(define i 0)
(let/ec _break (let loop ()
  (if (< i bits) (let ()
    (set! b (string-append (format "~a" (modulo val 2)) b))
    (set! val (int (quotient val 2)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return b)
))
)
(define (binToInt bits)
  (let/ec _return (begin
(define n 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)])) (let ()
    (set! n (let ([__l (* n 2)] [__r (parseIntStr (substring bits i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return n)
))
)
(define (padRight s width)
  (let/ec _return (begin
(define out s)
(let/ec _break (let loop ()
  (if (< (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) width) (let ()
    (set! out (string-append out " "))
    (loop)) (void))))
(_return out)
))
)
(define (canonicalize cidr)
  (let/ec _return (begin
(define parts (split cidr "/"))
(define dotted (list-ref parts 0))
(define size (parseIntStr (list-ref parts 1)))
(define binParts (list))
(for ([p (split dotted ".")])
(set! binParts (append binParts (list (toBinary (parseIntStr p) 8))))
)
(define binary (join binParts ""))
(set! binary (let ([__l (substring binary 0 size)] [__r (repeat "0" (- 32 size))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define canonParts (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? binary) (string-length binary)] [(hash? binary) (hash-count binary)] [else (length binary)])) (let ()
    (set! canonParts (append canonParts (list (format "~a" (binToInt (substring binary i (let ([__l i] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))))
    (set! i (let ([__l i] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append (string-append (join canonParts ".") "/") (list-ref parts 1)))
))
)
(define tests (list "87.70.141.1/22" "36.18.154.103/12" "62.62.197.11/29" "67.137.119.181/4" "161.214.74.21/24" "184.232.176.184/18"))
(for ([t tests])
(displayln (string-append (string-append (padRight t 18) " -> ") (canonicalize t)))
)
