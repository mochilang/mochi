;; Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (endsWith s suf)
  (let/ec _return (begin
(if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) (cond [(string? suf) (string-length suf)] [(hash? suf) (hash-count suf)] [else (length suf)])) (let ()
(_return #f)
) (void))
(_return (string=? (slice s (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) (cond [(string? suf) (string-length suf)] [(hash? suf) (hash-count suf)] [else (length suf)])) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) suf))
))
)
(define (lastIndexOf s sub)
  (let/ec _return (begin
(define idx (- 0 1))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) (cond [(string? sub) (string-length sub)] [(hash? sub) (hash-count sub)] [else (length sub)]))) (let ()
    (if (string=? (slice s i (let ([__l i] [__r (cond [(string? sub) (string-length sub)] [(hash? sub) (hash-count sub)] [else (length sub)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sub) (let ()
(set! idx i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return idx)
))
)
(define extensions (list "zip" "rar" "7z" "gz" "archive" "A##" "tar.bz2"))
(define (fileExtInList filename)
  (let/ec _return (begin
(define fl (lower filename))
(let/ec _break (for ([ext extensions])
  (let/ec _cont
(define ext2 (string-append "." (lower ext)))
(if (endsWith fl ext2) (let ()
(_return (list #t ext))
) (void))
  )))
(define idx (lastIndexOf filename "."))
(if (not (equal? idx (- 0 1))) (let ()
(define t (slice filename (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? filename) (string-length filename)] [(hash? filename) (hash-count filename)] [else (length filename)])))
(if (not (string=? t "")) (let ()
(_return (list #f t))
) (void))
(_return (list #f "<empty>"))
) (void))
(_return (list #f "<none>"))
))
)
(define (pad s w)
  (let/ec _return (begin
(define t s)
(let/ec _break (let loop ()
  (if (< (cond [(string? t) (string-length t)] [(hash? t) (hash-count t)] [else (length t)]) w) (let ()
    (set! t (string-append t " "))
    (loop)) (void))))
(_return t)
))
)
(define (main)
  (let/ec _return (begin
(displayln "The listed extensions are:")
(displayln extensions)
(define tests (list "MyData.a##" "MyData.tar.Gz" "MyData.gzip" "MyData.7z.backup" "MyData..." "MyData" "MyData_v1.0.tar.bz2" "MyData_v1.0.bz2"))
(let/ec _break (for ([t tests])
  (let/ec _cont
(define res (fileExtInList t))
(define ok (if res (list-ref res (int 0)) #f))
(define ext (format "~a" (if res (list-ref res (int 1)) #f)))
(displayln (string-append (string-append (string-append (string-append (string-append (pad t 20) " => ") (format "~a" ok)) "  (extension = ") ext) ")"))
  )))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
