;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (pad s width)
  (let/ec _return (begin
(define out s)
(let/ec _break (let loop ()
  (if (< (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) width) (let ()
    (set! out (string-append " " out))
    (loop)) (void))))
(_return out)
))
)
(define (mult n base)
  (let/ec _return (begin
(define m 1)
(define x n)
(define b base)
(let/ec _break (let loop ()
  (if (> x 0) (let ()
    (set! m (* m (modulo x b)))
    (set! x (quotient x b))
    (loop)) (void))))
(_return m)
))
)
(define (multDigitalRoot n base)
  (let/ec _return (begin
(define m n)
(define mp 0)
(define b base)
(let/ec _break (let loop ()
  (if (>= m b) (let ()
    (set! m (mult m base))
    (set! mp (let ([__l mp] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "mp" mp "mdr" (int m)))
))
)
(define (main)
  (let/ec _return (begin
(define base 10)
(define size 5)
(displayln (string-append (string-append (string-append (string-append (pad "Number" 20) " ") (pad "MDR" 3)) " ") (pad "MP" 3)))
(define nums (list 123321 7739 893 899998 3778888999 277777788888899))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
    (define n (if nums (list-ref nums (int i)) #f))
    (define r (multDigitalRoot n base))
    (displayln (string-append (string-append (string-append (string-append (pad (format "~a" n) 20) " ") (pad (format "~a" (if r (hash-ref r "mdr" #f) #f)) 3)) " ") (pad (format "~a" (if r (hash-ref r "mp" #f) #f)) 3)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
(define list_ (list))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx base) (let ()
    (set! list_ (append list_ (list (list))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define cnt (* size base))
(define n 0)
(define b base)
(let/ec _break (let loop ()
  (if (> cnt 0) (let ()
    (define r (multDigitalRoot n base))
    (define mdr (if r (hash-ref r "mdr" #f) #f))
    (if (< (cond [(string? (if list_ (list-ref list_ (int mdr)) #f)) (string-length (if list_ (list-ref list_ (int mdr)) #f))] [(hash? (if list_ (list-ref list_ (int mdr)) #f)) (hash-count (if list_ (list-ref list_ (int mdr)) #f))] [else (length (if list_ (list-ref list_ (int mdr)) #f))]) size) (let ()
(set! list_ (list-set list_ (int mdr) (append (if list_ (list-ref list_ (int mdr)) #f) (list (int n)))))
(set! cnt (- cnt 1))
) (void))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "MDR: First")
(define j 0)
(let/ec _break (let loop ()
  (if (< j base) (let ()
    (displayln (string-append (string-append (pad (format "~a" j) 3) ": ") (format "~a" (if list_ (list-ref list_ (int j)) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
