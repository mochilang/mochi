;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define PI 3.141592653589793)
(define TWO_PI 6.283185307179586)
(define (_mod x m)
  (let/ec _return (begin
(_return (- x (* (exact->inexact (int (/ x m))) m)))
))
)
(define (_sin x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) TWO_PI) PI))
(define y2 (* y y))
(define y3 (* y2 y))
(define y5 (* y3 y2))
(define y7 (* y5 y2))
(_return (- (let ([__l (- y (/ y3 6.0))] [__r (/ y5 120.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y7 5040.0)))
))
)
(define (_cos x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) TWO_PI) PI))
(define y2 (* y y))
(define y4 (* y2 y2))
(define y6 (* y4 y2))
(_return (- (let ([__l (- 1.0 (/ y2 2.0))] [__r (/ y4 24.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y6 720.0)))
))
)
(define nodes (list (hash "x" (- 1.0) "y" (- 1.0) "z" (- 1.0)) (hash "x" (- 1.0) "y" (- 1.0) "z" 1.0) (hash "x" (- 1.0) "y" 1.0 "z" (- 1.0)) (hash "x" (- 1.0) "y" 1.0 "z" 1.0) (hash "x" 1.0 "y" (- 1.0) "z" (- 1.0)) (hash "x" 1.0 "y" (- 1.0) "z" 1.0) (hash "x" 1.0 "y" 1.0 "z" (- 1.0)) (hash "x" 1.0 "y" 1.0 "z" 1.0)))
(define edges (list (list 0 1) (list 1 3) (list 3 2) (list 2 0) (list 4 5) (list 5 7) (list 7 6) (list 6 4) (list 0 4) (list 1 5) (list 2 6) (list 3 7)))
(define (rotate p ax ay)
  (let/ec _return (begin
(define sinx (_sin ax))
(define cosx (_cos ax))
(define siny (_sin ay))
(define cosy (_cos ay))
(define x1 (if p (hash-ref p "x" #f) #f))
(define y1 (- (* (if p (hash-ref p "y" #f) #f) cosx) (* (if p (hash-ref p "z" #f) #f) sinx)))
(define z1 (let ([__l (* (if p (hash-ref p "y" #f) #f) sinx)] [__r (* (if p (hash-ref p "z" #f) #f) cosx)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define x2 (let ([__l (* x1 cosy)] [__r (* z1 siny)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define z2 (let ([__l (* (- x1) siny)] [__r (* z1 cosy)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (hash "x" x2 "y" y1 "z" z2))
))
)
(define width 40)
(define height 20)
(define distance 3.0)
(define scale 8.0)
(define (project p)
  (let/ec _return (begin
(define factor (/ scale (let ([__l (if p (hash-ref p "z" #f) #f)] [__r distance]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define x (let ([__l (int (* (if p (hash-ref p "x" #f) #f) factor))] [__r (quotient width 2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define y (let ([__l (int (* (- (if p (hash-ref p "y" #f) #f)) factor))] [__r (quotient height 2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (hash "x" x "y" y))
))
)
(define (clearGrid)
  (let/ec _return (begin
(define g (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y height) (let ()
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x width) (let ()
    (set! row (append row (list " ")))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! g (append g (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return g)
))
)
(define (drawPoint g x y ch)
  (let/ec _return (begin
(if (and (and (and (>= x 0) (< x width)) (>= y 0)) (< y height)) (let ()
(define row (if g (list-ref g (int y)) #f))
(set! row (list-set row (int x) ch))
(set! g (list-set g (int y) row))
) (void))
))
)
(define (bresenham x0 y0 x1 y1 g ch)
  (let/ec _return (begin
(define dx (- x1 x0))
(if (< dx 0) (let ()
(set! dx (- dx))
) (void))
(define dy (- y1 y0))
(if (< dy 0) (let ()
(set! dy (- dy))
) (void))
(define sx (- 1))
(if (< x0 x1) (let ()
(set! sx 1)
) (void))
(define sy (- 1))
(if (< y0 y1) (let ()
(set! sy 1)
) (void))
(define err (- dx dy))
(let/ec _break (let loop ()
  (if #t (let ()
    (drawPoint g x0 y0 ch)
    (if (and (equal? x0 x1) (equal? y0 y1)) (let ()
(_break)
) (void))
    (define e2 (* 2 err))
    (if (> e2 (- dy)) (let ()
(set! err (- err dy))
(set! x0 (let ([__l x0] [__r sx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (if (< e2 dx) (let ()
(set! err (let ([__l err] [__r dx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! y0 (let ([__l y0] [__r sy]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (loop)) (void))))
))
)
(define (render g)
  (let/ec _return (begin
(define out "")
(define y 0)
(let/ec _break (let loop ()
  (if (< y height) (let ()
    (define line "")
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x width) (let ()
    (set! line (string-append line (if (if g (list-ref g (int y)) #f) (list-ref (if g (list-ref g (int y)) #f) (int x)) #f)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (string-append (string-append out line) "\n"))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define f 0)
(let/ec _break (let loop ()
  (if (< f 10) (let ()
    (define grid (clearGrid))
    (define rot (list))
    (define i 0)
    (define ay (let ([__l (/ PI 4.0)] [__r (/ (* (exact->inexact f) PI) 10.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< i (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])) (let ()
    (define p (rotate (if nodes (list-ref nodes (int i)) #f) (/ PI 4.0) ay))
    (define pp (project p))
    (set! rot (append rot (list pp)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define e 0)
    (let/ec _break (let loop ()
  (if (< e (cond [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])) (let ()
    (define a (if (if edges (list-ref edges (int e)) #f) (list-ref (if edges (list-ref edges (int e)) #f) (int 0)) #f))
    (define b (if (if edges (list-ref edges (int e)) #f) (list-ref (if edges (list-ref edges (int e)) #f) (int 1)) #f))
    (define p1 (if rot (list-ref rot (int a)) #f))
    (define p2 (if rot (list-ref rot (int b)) #f))
    (bresenham (if p1 (hash-ref p1 "x" #f) #f) (if p1 (hash-ref p1 "y" #f) #f) (if p2 (hash-ref p2 "x" #f) #f) (if p2 (hash-ref p2 "y" #f) #f) grid "#")
    (set! e (let ([__l e] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln (render grid))
    (set! f (let ([__l f] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
