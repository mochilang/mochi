;; Generated by Mochi 0.10.37 on 2025-07-23 10:21 +0700
#lang racket/base
(require racket/list racket/string racket/math json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (input) (read-line))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define SIZE 4)
(define (newBoard)
  (let/ec _return (begin
(define b (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x SIZE) (let ()
    (set! row (append row (list 0)))
    (set! x (+ x 1))
    (loop)) (void))))
    (set! b (append b (list row)))
    (set! y (+ y 1))
    (loop)) (void))))
(_return b)
))
)
(define (spawnTile b)
  (let/ec _return (begin
(define empty (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x SIZE) (let ()
    (if (equal? (list-ref (list-ref b y) x) 0) (let ()
(set! empty (append empty (list (list x y))))
) (void))
    (set! x (+ x 1))
    (loop)) (void))))
    (set! y (+ y 1))
    (loop)) (void))))
(if (equal? (cond [(string? empty) (string-length empty)] [(hash? empty) (hash-count empty)] [else (length empty)]) 0) (let ()
(_return (hash "board" b "full" #t))
) (void))
(define idx (modulo (now) (cond [(string? empty) (string-length empty)] [(hash? empty) (hash-count empty)] [else (length empty)])))
(define cell (list-ref empty idx))
(define val 4)
(if (< (modulo (now) 10) 9) (let ()
(set! val 2)
) (void))
(set! b (list-set b (list-ref cell 1) (list-set (list-ref b (list-ref cell 1)) (list-ref cell 0) val)))
(_return (hash "board" b "full" (equal? (cond [(string? empty) (string-length empty)] [(hash? empty) (hash-count empty)] [else (length empty)]) 1)))
))
)
(define (pad n)
  (let/ec _return (begin
(define s (format "~a" n))
(define pad (- 4 (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(define i 0)
(define out "")
(let/ec _break (let loop ()
  (if (< i pad) (let ()
    (set! out (string-append out " "))
    (set! i (+ i 1))
    (loop)) (void))))
(_return (string-append out s))
))
)
(define (draw b score)
  (let/ec _return (begin
(displayln (string-append "Score: " (format "~a" score)))
(define y 0)
(let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (displayln "+----+----+----+----+")
    (define line "|")
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x SIZE) (let ()
    (define v (list-ref (list-ref b y) x))
    (if (equal? v 0) (let ()
(set! line (string-append line "    |"))
) (let ()
(set! line (string-append (string-append line (pad v)) "|"))
))
    (set! x (+ x 1))
    (loop)) (void))))
    (displayln line)
    (set! y (+ y 1))
    (loop)) (void))))
(displayln "+----+----+----+----+")
(displayln "W=Up S=Down A=Left D=Right Q=Quit")
))
)
(define (reverseRow r)
  (let/ec _return (begin
(define out (list))
(define i (- (cond [(string? r) (string-length r)] [(hash? r) (hash-count r)] [else (length r)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (set! out (append out (list (list-ref r i))))
    (set! i (- i 1))
    (loop)) (void))))
(_return out)
))
)
(define (slideLeft row)
  (let/ec _return (begin
(define xs (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let ()
    (if (not (equal? (list-ref row i) 0)) (let ()
(set! xs (append xs (list (list-ref row i))))
) (void))
    (set! i (+ i 1))
    (loop)) (void))))
(define res (list))
(define gain 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (and (< (+ i 1) (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (equal? (list-ref xs i) (list-ref xs (+ i 1)))) (let ()
(define v (* (list-ref xs i) 2))
(set! gain (+ gain v))
(set! res (append res (list v)))
(set! i (+ i 2))
) (let ()
(set! res (append res (list (list-ref xs i))))
(set! i (+ i 1))
))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (< (cond [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) SIZE) (let ()
    (set! res (append res (list 0)))
    (loop)) (void))))
(_return (hash "row" res "gain" gain))
))
)
(define (moveLeft b score)
  (let/ec _return (begin
(define moved #f)
(define y 0)
(let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (define r (slideLeft (list-ref b y)))
    (define new (hash-ref r "row"))
    (set! score (+ score (hash-ref r "gain")))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x SIZE) (let ()
    (if (not (equal? (list-ref (list-ref b y) x) (list-ref new x))) (let ()
(set! moved #t)
) (void))
    (set! b (list-set b y (list-set (list-ref b y) x (list-ref new x))))
    (set! x (+ x 1))
    (loop)) (void))))
    (set! y (+ y 1))
    (loop)) (void))))
(_return (hash "board" b "score" score "moved" moved))
))
)
(define (moveRight b score)
  (let/ec _return (begin
(define moved #f)
(define y 0)
(let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (define rev (reverseRow (list-ref b y)))
    (define r (slideLeft rev))
    (set! rev (hash-ref r "row"))
    (set! score (+ score (hash-ref r "gain")))
    (set! rev (reverseRow rev))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x SIZE) (let ()
    (if (not (equal? (list-ref (list-ref b y) x) (list-ref rev x))) (let ()
(set! moved #t)
) (void))
    (set! b (list-set b y (list-set (list-ref b y) x (list-ref rev x))))
    (set! x (+ x 1))
    (loop)) (void))))
    (set! y (+ y 1))
    (loop)) (void))))
(_return (hash "board" b "score" score "moved" moved))
))
)
(define (getCol b x)
  (let/ec _return (begin
(define col (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (set! col (append col (list (list-ref (list-ref b y) x))))
    (set! y (+ y 1))
    (loop)) (void))))
(_return col)
))
)
(define (setCol b x col)
  (let/ec _return (begin
(define y 0)
(let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (set! b (list-set b y (list-set (list-ref b y) x (list-ref col y))))
    (set! y (+ y 1))
    (loop)) (void))))
))
)
(define (moveUp b score)
  (let/ec _return (begin
(define moved #f)
(define x 0)
(let/ec _break (let loop ()
  (if (< x SIZE) (let ()
    (define col (getCol b x))
    (define r (slideLeft col))
    (define new (hash-ref r "row"))
    (set! score (+ score (hash-ref r "gain")))
    (define y 0)
    (let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (if (not (equal? (list-ref (list-ref b y) x) (list-ref new y))) (let ()
(set! moved #t)
) (void))
    (set! b (list-set b y (list-set (list-ref b y) x (list-ref new y))))
    (set! y (+ y 1))
    (loop)) (void))))
    (set! x (+ x 1))
    (loop)) (void))))
(_return (hash "board" b "score" score "moved" moved))
))
)
(define (moveDown b score)
  (let/ec _return (begin
(define moved #f)
(define x 0)
(let/ec _break (let loop ()
  (if (< x SIZE) (let ()
    (define col (reverseRow (getCol b x)))
    (define r (slideLeft col))
    (set! col (hash-ref r "row"))
    (set! score (+ score (hash-ref r "gain")))
    (set! col (reverseRow col))
    (define y 0)
    (let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (if (not (equal? (list-ref (list-ref b y) x) (list-ref col y))) (let ()
(set! moved #t)
) (void))
    (set! b (list-set b y (list-set (list-ref b y) x (list-ref col y))))
    (set! y (+ y 1))
    (loop)) (void))))
    (set! x (+ x 1))
    (loop)) (void))))
(_return (hash "board" b "score" score "moved" moved))
))
)
(define (hasMoves b)
  (let/ec _return (begin
(define y 0)
(let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x SIZE) (let ()
    (if (equal? (list-ref (list-ref b y) x) 0) (let ()
(_return #t)
) (void))
    (if (and (< (+ x 1) SIZE) (equal? (list-ref (list-ref b y) x) (list-ref (list-ref b y) (+ x 1)))) (let ()
(_return #t)
) (void))
    (if (and (< (+ y 1) SIZE) (equal? (list-ref (list-ref b y) x) (list-ref (list-ref b (+ y 1)) x))) (let ()
(_return #t)
) (void))
    (set! x (+ x 1))
    (loop)) (void))))
    (set! y (+ y 1))
    (loop)) (void))))
(_return #f)
))
)
(define (has2048 b)
  (let/ec _return (begin
(define y 0)
(let/ec _break (let loop ()
  (if (< y SIZE) (let ()
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x SIZE) (let ()
    (if (>= (list-ref (list-ref b y) x) 2048) (let ()
(_return #t)
) (void))
    (set! x (+ x 1))
    (loop)) (void))))
    (set! y (+ y 1))
    (loop)) (void))))
(_return #f)
))
)
(define board (newBoard))
(define r (spawnTile board))
(set! board (hash-ref r "board"))
(define full (hash-ref r "full"))
(set! r (spawnTile board))
(set! board (hash-ref r "board"))
(set! full (hash-ref r "full"))
(define score 0)
(draw board score)
(let/ec _break (let loop ()
  (if #t (let ()
    (displayln "Move: ")
    (define cmd (input))
    (define moved #f)
    (if (or (string=? cmd "a") (string=? cmd "A")) (let ()
(define m (moveLeft board score))
(set! board (hash-ref m "board"))
(set! score (hash-ref m "score"))
(set! moved (hash-ref m "moved"))
) (void))
    (if (or (string=? cmd "d") (string=? cmd "D")) (let ()
(define m (moveRight board score))
(set! board (hash-ref m "board"))
(set! score (hash-ref m "score"))
(set! moved (hash-ref m "moved"))
) (void))
    (if (or (string=? cmd "w") (string=? cmd "W")) (let ()
(define m (moveUp board score))
(set! board (hash-ref m "board"))
(set! score (hash-ref m "score"))
(set! moved (hash-ref m "moved"))
) (void))
    (if (or (string=? cmd "s") (string=? cmd "S")) (let ()
(define m (moveDown board score))
(set! board (hash-ref m "board"))
(set! score (hash-ref m "score"))
(set! moved (hash-ref m "moved"))
) (void))
    (if (or (string=? cmd "q") (string=? cmd "Q")) (let ()
(_break)
) (void))
    (if moved (let ()
(define r2 (spawnTile board))
(set! board (hash-ref r2 "board"))
(set! full (hash-ref r2 "full"))
(if (and full (not (hasMoves board))) (let ()
(draw board score)
(displayln "Game Over")
(_break)
) (void))
) (void))
    (draw board score)
    (if (has2048 board) (let ()
(displayln "You win!")
(_break)
) (void))
    (if (not (hasMoves board)) (let ()
(displayln "Game Over")
(_break)
) (void))
    (loop)) (void))))
