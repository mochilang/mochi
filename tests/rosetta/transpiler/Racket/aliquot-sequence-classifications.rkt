;; Generated by Mochi 0.10.37 on 2025-07-23 14:07 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define THRESHOLD 140737488355328)
(define (indexOf xs value)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (equal? (list-ref xs i) value) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 0 1))
))
)
(define (contains xs value)
  (let/ec _return (begin
(_return (not (equal? (indexOf xs value) (- 0 1))))
))
)
(define (maxOf a b)
  (let/ec _return (begin
(if (> a b) (let ()
(_return a)
) (let ()
(_return b)
))
))
)
(define (intSqrt n)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(_return 0)
) (void))
(define x n)
(define y (quotient (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
(let/ec _break (let loop ()
  (if (< y x) (let ()
    (set! x y)
    (set! y (quotient (let ([__l x] [__r (quotient n x)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
    (loop)) (void))))
(_return x)
))
)
(define (sumProperDivisors n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return 0)
) (void))
(define sqrt (intSqrt n))
(define sum 1)
(define i 2)
(let/ec _break (let loop ()
  (if (<= i sqrt) (let ()
    (if (equal? (modulo n i) 0) (let ()
(set! sum (let ([__l (let ([__l sum] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (quotient n i)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (equal? (* sqrt sqrt) n) (let ()
(set! sum (- sum sqrt))
) (void))
(_return sum)
))
)
(define (classifySequence k)
  (let/ec _return (begin
(define last k)
(define seq (list k))
(let/ec _break (let loop ()
  (if #t (let ()
    (set! last (sumProperDivisors last))
    (set! seq (append seq (list last)))
    (define n (cond [(string? seq) (string-length seq)] [(hash? seq) (hash-count seq)] [else (length seq)]))
    (define aliquot "")
    (if (equal? last 0) (let ()
(set! aliquot "Terminating")
) (let ()
(if (and (equal? n 2) (equal? last k)) (let ()
(set! aliquot "Perfect")
) (let ()
(if (and (equal? n 3) (equal? last k)) (let ()
(set! aliquot "Amicable")
) (let ()
(if (and (>= n 4) (equal? last k)) (let ()
(set! aliquot (string-append (string-append "Sociable[" (format "~a" (- n 1))) "]"))
) (let ()
(if (equal? last (list-ref seq (- n 2))) (let ()
(set! aliquot "Aspiring")
) (let ()
(if (contains (sublist seq 1 (maxOf 1 (- n 2))) last) (let ()
(define idx (indexOf seq last))
(set! aliquot (string-append (string-append "Cyclic[" (format "~a" (- (- n 1) idx))) "]"))
) (let ()
(if (or (equal? n 16) (> last THRESHOLD)) (let ()
(set! aliquot "Non-Terminating")
) (void))
))
))
))
))
))
))
    (if (not (string=? aliquot "")) (let ()
(_return (hash "seq" seq "aliquot" aliquot))
) (void))
    (loop)) (void))))
(_return (hash "seq" seq "aliquot" ""))
))
)
(define (padLeft n w)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) w) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (padRight s w)
  (let/ec _return (begin
(define r s)
(let/ec _break (let loop ()
  (if (< (cond [(string? r) (string-length r)] [(hash? r) (hash-count r)] [else (length r)]) w) (let ()
    (set! r (string-append r " "))
    (loop)) (void))))
(_return r)
))
)
(define (joinWithCommas seq)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? seq) (string-length seq)] [(hash? seq) (hash-count seq)] [else (length seq)])) (let ()
    (set! s (string-append s (format "~a" (list-ref seq i))))
    (if (< i (- (cond [(string? seq) (string-length seq)] [(hash? seq) (hash-count seq)] [else (length seq)]) 1)) (let ()
(set! s (string-append s ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(displayln "Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n")
(define k 1)
(let/ec _break (let loop ()
  (if (<= k 10) (let ()
    (define res (classifySequence k))
    (displayln (string-append (string-append (string-append (string-append (padLeft k 2) ": ") (padRight (format "~a" (hash-ref res "aliquot")) 15)) " ") (joinWithCommas (hash-ref res "seq"))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
(define s (list 11 12 28 496 220 1184 12496 1264460 790 909 562 1064 1488))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define val (list-ref s i))
    (define res (classifySequence val))
    (displayln (string-append (string-append (string-append (string-append (padLeft val 7) ": ") (padRight (format "~a" (hash-ref res "aliquot")) 15)) " ") (joinWithCommas (hash-ref res "seq"))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
(define big 15355717786080)
(define r (classifySequence big))
(displayln (string-append (string-append (string-append (string-append (format "~a" big) ": ") (padRight (format "~a" (hash-ref r "aliquot")) 15)) " ") (joinWithCommas (hash-ref r "seq"))))
))
)
(main)
