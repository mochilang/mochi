;; Generated by Mochi 0.10.55 on 2025-08-03 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (listToStringInts xs)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (set! s (string-append s (format "~a" (int (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f)))))
    (if (< i (- (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)) (let ()
(set! s (string-append s " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append s "]"))
))
)
(define (deconv g f)
  (let/ec _return (begin
(define h (list))
(define n 0)
(define hn (let ([__l (- (cond [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)]) (cond [(string? f) (string-length f)] [(hash? f) (hash-count f)] [else (length f)]))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (< n hn) (let/ec _cont
    (define v (if g (if (hash? g) (hash-ref g n #f) (list-ref g (int n))) #f))
    (define lower_ 0)
    (if (>= n (cond [(string? f) (string-length f)] [(hash? f) (hash-count f)] [else (length f)])) (let ()
(set! lower_ (let ([__l (- n (cond [(string? f) (string-length f)] [(hash? f) (hash-count f)] [else (length f)]))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (define i lower_)
    (let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! v (- v (* (if h (if (hash? h) (hash-ref h i #f) (list-ref h (int i))) #f) (if f (if (hash? f) (hash-ref f (- n i) #f) (list-ref f (int (- n i)))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! v (/ v (if f (if (hash? f) (hash-ref f 0 #f) (list-ref f (int 0))) #f)))
    (set! h (append h (list v)))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return h)
))
)
(define (main)
  (let/ec _return (begin
(define h (list (- 8.0) (- 9.0) (- 3.0) (- 1.0) (- 6.0) 7.0))
(define f (list (- 3.0) (- 6.0) (- 1.0) 8.0 (- 6.0) 3.0 (- 1.0) (- 9.0) (- 9.0) 3.0 (- 2.0) 5.0 2.0 (- 2.0) (- 7.0) (- 1.0)))
(define g (list 24.0 75.0 71.0 (- 34.0) 3.0 22.0 (- 45.0) 23.0 245.0 25.0 52.0 25.0 (- 67.0) (- 96.0) 96.0 31.0 55.0 36.0 29.0 (- 43.0) (- 7.0)))
(displayln (listToStringInts h))
(displayln (listToStringInts (deconv g f)))
(displayln (listToStringInts f))
(displayln (listToStringInts (deconv g h)))
))
)
(main)
