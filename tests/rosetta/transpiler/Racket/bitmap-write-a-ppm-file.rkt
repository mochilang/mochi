;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (newBitmap w h c)
  (let/ec _return (begin
(define rows (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let ()
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let ()
    (set! row (append row (list c)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! rows (append rows (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "width" w "height" h "pixels" rows))
))
)
(define (setPixel b x y c)
  (let/ec _return (begin
(define rows (if b (hash-ref b "pixels" #f) #f))
(define row (list-ref rows y))
(set! row (list-set row x c))
(set! rows (list-set rows y row))
(set! b (hash-set (or b (hash)) "pixels" rows))
))
)
(define (fillRect b x y w h c)
  (let/ec _return (begin
(define yy y)
(let/ec _break (let loop ()
  (if (< yy (let ([__l y] [__r h]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
    (define xx x)
    (let/ec _break (let loop ()
  (if (< xx (let ([__l x] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
    (setPixel b xx yy c)
    (set! xx (let ([__l xx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! yy (let ([__l yy] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (pad n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (writePPMP3 b)
  (let/ec _return (begin
(define maxv 0)
(define y 0)
(let/ec _break (let loop ()
  (if (< y (if b (hash-ref b "height" #f) #f)) (let ()
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x (if b (hash-ref b "width" #f) #f)) (let ()
    (define p (list-ref (list-ref (if b (hash-ref b "pixels" #f) #f) y) x))
    (if (> (if p (hash-ref p "R" #f) #f) maxv) (let ()
(set! maxv (if p (hash-ref p "R" #f) #f))
) (void))
    (if (> (if p (hash-ref p "G" #f) #f) maxv) (let ()
(set! maxv (if p (hash-ref p "G" #f) #f))
) (void))
    (if (> (if p (hash-ref p "B" #f) #f) maxv) (let ()
(set! maxv (if p (hash-ref p "B" #f) #f))
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define out (string-append (string-append (string-append (string-append (string-append (string-append "P3\n# generated from Bitmap.writeppmp3\n" (format "~a" (if b (hash-ref b "width" #f) #f))) " ") (format "~a" (if b (hash-ref b "height" #f) #f))) "\n") (format "~a" maxv)) "\n"))
(define numsize (cond [(string? (format "~a" maxv)) (string-length (format "~a" maxv))] [(hash? (format "~a" maxv)) (hash-count (format "~a" maxv))] [else (length (format "~a" maxv))]))
(set! y (- (if b (hash-ref b "height" #f) #f) 1))
(let/ec _break (let loop ()
  (if (>= y 0) (let ()
    (define line "")
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x (if b (hash-ref b "width" #f) #f)) (let ()
    (define p (list-ref (list-ref (if b (hash-ref b "pixels" #f) #f) y) x))
    (set! line (string-append (string-append (string-append (string-append (string-append (string-append line "   ") (pad (if p (hash-ref p "R" #f) #f) numsize)) " ") (pad (if p (hash-ref p "G" #f) #f) numsize)) " ") (pad (if p (hash-ref p "B" #f) #f) numsize)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (string-append out line))
    (if (> y 0) (let ()
(set! out (string-append out "\n"))
) (let ()
(set! out (string-append out "\n"))
))
    (set! y (- y 1))
    (loop)) (void))))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define black (hash "R" 0 "G" 0 "B" 0))
(define white (hash "R" 255 "G" 255 "B" 255))
(define bm (newBitmap 4 4 black))
(fillRect bm 1 0 1 2 white)
(setPixel bm 3 3 (hash "R" 127 "G" 0 "B" 63))
(define ppm (writePPMP3 bm))
(displayln ppm)
))
)
(main)
