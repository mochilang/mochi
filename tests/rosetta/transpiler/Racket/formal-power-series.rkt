;; Generated by Mochi 0.10.50 on 2025-07-30 23:37 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (newFps fn)
  (let/ec _return (begin
(_return (hash "coeffs" (list) "compute" fn))
))
)
(define (extract f n)
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (<= (cond [(string? (if f (hash-ref f "coeffs" #f) #f)) (string-length (if f (hash-ref f "coeffs" #f) #f))] [(hash? (if f (hash-ref f "coeffs" #f) #f)) (hash-count (if f (hash-ref f "coeffs" #f) #f))] [else (length (if f (hash-ref f "coeffs" #f) #f))]) n) (let ()
    (define idx (cond [(string? (if f (hash-ref f "coeffs" #f) #f)) (string-length (if f (hash-ref f "coeffs" #f) #f))] [(hash? (if f (hash-ref f "coeffs" #f) #f)) (hash-count (if f (hash-ref f "coeffs" #f) #f))] [else (length (if f (hash-ref f "coeffs" #f) #f))]))
    (define v ((if f (hash-ref f "compute" #f) #f) idx))
    (set! f (hash-set (or f (hash)) "coeffs" (append (if f (hash-ref f "coeffs" #f) #f) (list v))))
    (loop)) (void))))
(_return (if (if f (hash-ref f "coeffs" #f) #f) (list-ref (if f (hash-ref f "coeffs" #f) #f) (int n)) #f))
))
)
(define (one)
  (let/ec _return (begin
(_return (newFps (lambda (i)
  (let/ec _return (begin
(if (equal? i 0) (let ()
(_return 1.0)
) (void))
(_return 0.0)
)))))
))
)
(define (add a b)
  (let/ec _return (begin
(_return (newFps (lambda (n)
  (let/ec _return (begin
(_return (let ([__l (extract a n)] [__r (extract b n)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
)))))
))
)
(define (sub a b)
  (let/ec _return (begin
(_return (newFps (lambda (n)
  (let/ec _return (begin
(_return (- (extract a n) (extract b n)))
)))))
))
)
(define (mul a b)
  (let/ec _return (begin
(_return (newFps (lambda (n)
  (let/ec _return (begin
(define s 0.0)
(define k 0)
(let/ec _break (let loop ()
  (if (<= k n) (let ()
    (set! s (let ([__l s] [__r (* (extract a k) (extract b (- n k)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
)))))
))
)
(define (div a b)
  (let/ec _return (begin
(define q (newFps (lambda (n)
  (let/ec _return (begin
(_return 0.0)
)))))
(set! q (hash-set (or q (hash)) "compute" (lambda (n)
  (let/ec _return (begin
(define b0 (extract b 0))
(if (equal? b0 0.0) (let ()
(_return (/ 0.0 0.0))
) (void))
(define s (extract a n))
(define k 1)
(let/ec _break (let loop ()
  (if (<= k n) (let ()
    (set! s (- s (* (extract b k) (extract q (- n k)))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (/ s b0))
)))))
(_return q)
))
)
(define (differentiate a)
  (let/ec _return (begin
(_return (newFps (lambda (n)
  (let/ec _return (begin
(_return (* (exact->inexact (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (extract a (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
)))))
))
)
(define (integrate a)
  (let/ec _return (begin
(_return (newFps (lambda (n)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(_return 0.0)
) (void))
(_return (/ (extract a (- n 1)) (exact->inexact n)))
)))))
))
)
(define (sinCos)
  (let/ec _return (begin
(define sin (newFps (lambda (n)
  (let/ec _return (begin
(_return 0.0)
)))))
(define cos (sub (one) (integrate sin)))
(set! sin (hash-set (or sin (hash)) "compute" (lambda (n)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(_return 0.0)
) (void))
(_return (/ (extract cos (- n 1)) (exact->inexact n)))
)))))
(_return (hash "sin" sin "cos" cos))
))
)
(define (floorf x)
  (let/ec _return (begin
(define y (int x))
(_return (exact->inexact y))
))
)
(define (fmtF5 x)
  (let/ec _return (begin
(define y (/ (floorf (let ([__l (* x 100000.0)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 100000.0))
(define s (format "~a" y))
(define dot (index-of s "."))
(if (equal? dot (- 0 1)) (let ()
(set! s (string-append s ".00000"))
) (let ()
(define decs (- (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) dot) 1))
(if (> decs 5) (let ()
(set! s (slice s 0 (let ([__l dot] [__r 6]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(let/ec _break (let loop ()
  (if (< decs 5) (let ()
    (set! s (string-append s "0"))
    (set! decs (let ([__l decs] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
))
(_return s)
))
)
(define (padFloat5 x width)
  (let/ec _return (begin
(define s (fmtF5 x))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (partialSeries f)
  (let/ec _return (begin
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i 6) (let ()
    (set! out (string-append (string-append (string-append out " ") (padFloat5 (extract f i) 8)) " "))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define p (sinCos))
(displayln (string-append "sin:" (partialSeries (if p (hash-ref p "sin" #f) #f))))
(displayln (string-append "cos:" (partialSeries (if p (hash-ref p "cos" #f) #f))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
