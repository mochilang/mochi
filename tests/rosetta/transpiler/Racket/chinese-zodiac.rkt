;; Generated by Mochi 0.10.47 on 2025-07-28 11:49 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define animal (list "Rat" "Ox" "Tiger" "Rabbit" "Dragon" "Snake" "Horse" "Goat" "Monkey" "Rooster" "Dog" "Pig"))
(define yinYang (list "Yang" "Yin"))
(define element (list "Wood" "Fire" "Earth" "Metal" "Water"))
(define stemChArr (list "甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"))
(define branchChArr (list "子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"))
(define (cz yr animal yinYang element sc bc)
  (let/ec _return (begin
(define y (- yr 4))
(define stem (modulo y 10))
(define branch (modulo y 12))
(define sb (string-append (if sc (list-ref sc (int stem)) #f) (if bc (list-ref bc (int branch)) #f)))
(_return (hash "animal" (format "~a" (if animal (list-ref animal (int branch)) #f)) "yinYang" (format "~a" (if yinYang (list-ref yinYang (int (modulo stem 2))) #f)) "element" (format "~a" (if element (list-ref element (int (int (quotient stem 2)))) #f)) "stemBranch" sb "cycle" (let ([__l (modulo y 60)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(let/ec _break (for ([yr (list 1935 1938 1968 1972 1976)])
  (let/ec _cont
(define r (cz yr animal yinYang element stemChArr branchChArr))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" yr) ": ") (if r (hash-ref r "element" #f) #f)) " ") (if r (hash-ref r "animal" #f) #f)) ", ") (if r (hash-ref r "yinYang" #f) #f)) ", Cycle year ") (format "~a" (if r (hash-ref r "cycle" #f) #f))) " ") (if r (hash-ref r "stemBranch" #f) #f)))
  )))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
