;; Generated by Mochi 0.10.40 on 2025-07-25 19:02 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (fields s)
  (let/ec _return (begin
(define words (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (or (string=? ch " ") (string=? ch "\n")) (string=? ch "\t")) (let ()
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! words (append words (list cur)))
(set! cur "")
) (void))
) (let ()
(set! cur (string-append cur ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? cur) (string-length cur)] [(hash? cur) (hash-count cur)] [else (length cur)]) 0) (let ()
(set! words (append words (list cur)))
) (void))
(_return words)
))
)
(define (join xs sep)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (> i 0) (let ()
(set! res (string-append res sep))
) (void))
    (set! res (string-append res (list-ref xs i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (numberName n)
  (let/ec _return (begin
(define small (list "no" "one" "two" "three" "four" "five" "six" "seven" "eight" "nine" "ten" "eleven" "twelve" "thirteen" "fourteen" "fifteen" "sixteen" "seventeen" "eighteen" "nineteen"))
(define tens (list "ones" "ten" "twenty" "thirty" "forty" "fifty" "sixty" "seventy" "eighty" "ninety"))
(if (< n 0) (let ()
(_return "")
) (void))
(if (< n 20) (let ()
(_return (list-ref small n))
) (void))
(if (< n 100) (let ()
(define t (list-ref tens (int (quotient n 10))))
(define s (modulo n 10))
(if (> s 0) (let ()
(set! t (string-append (string-append t " ") (list-ref small s)))
) (void))
(_return t)
) (void))
(_return "")
))
)
(define (pluralizeFirst s n)
  (let/ec _return (begin
(if (equal? n 1) (let ()
(_return s)
) (void))
(define w (fields s))
(if (> (cond [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)]) 0) (let ()
(set! w (list-set w 0 (string-append (list-ref w 0) "s")))
) (void))
(_return (join w " "))
))
)
(define (randInt seed n)
  (let/ec _return (begin
(define next (modulo (let ([__l (* seed 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
(_return (modulo next n))
))
)
(define (slur p d)
  (let/ec _return (begin
(if (<= (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)]) 2) (let ()
(_return p)
) (void))
(define a (list))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (- (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)]) 1)) (let ()
    (set! a (append a (list (substring p i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define idx (- (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 1))
(define seed d)
(let/ec _break (let loop ()
  (if (>= idx 1) (let ()
    (set! seed (modulo (let ([__l (* seed 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
    (if (>= (modulo seed 100) d) (let ()
(define j (modulo seed (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define tmp (list-ref a idx))
(set! a (list-set a idx (list-ref a j)))
(set! a (list-set a j tmp))
) (void))
    (set! idx (- idx 1))
    (loop)) (void))))
(define s (substring p 0 1))
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let ()
    (set! s (string-append s (list-ref a k)))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s (substring p (- (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)]) 1) (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)]))))
(define w (fields s))
(_return (join w " "))
))
)
(define (main)
  (let/ec _return (begin
(define i 99)
(let/ec _break (let loop ()
  (if (> i 0) (let ()
    (displayln (string-append (string-append (string-append (string-append (slur (numberName i) i) " ") (pluralizeFirst (slur "bottle of" i) i)) " ") (slur "beer on the wall" i)))
    (displayln (string-append (string-append (string-append (string-append (slur (numberName i) i) " ") (pluralizeFirst (slur "bottle of" i) i)) " ") (slur "beer" i)))
    (displayln (string-append (string-append (string-append (string-append (slur "take one" i) " ") (slur "down" i)) " ") (slur "pass it around" i)))
    (displayln (string-append (string-append (string-append (string-append (slur (numberName (- i 1)) i) " ") (pluralizeFirst (slur "bottle of" i) (- i 1))) " ") (slur "beer on the wall" i)))
    (set! i (- i 1))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
