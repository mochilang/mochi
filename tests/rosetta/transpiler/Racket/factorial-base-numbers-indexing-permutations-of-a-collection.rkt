;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (split s sep)
  (let/ec _return (begin
(define parts (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (and (> (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)]) 0) (<= (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) (string=? (slice s i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sep)) (let ()
(set! parts (append parts (list cur)))
(set! cur "")
(set! i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! cur (string-append cur (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(set! parts (append parts (list cur)))
(_return parts)
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (slice str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (slice str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (joinInts nums sep)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
    (if (> i 0) (let ()
(set! s (string-append s sep))
) (void))
    (set! s (string-append s (format "~a" (if nums (list-ref nums (int i)) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (undot s)
  (let/ec _return (begin
(define parts (string-split s "."))
(define nums (list))
(let/ec _break (for ([p parts])
  (let/ec _cont
(set! nums (append nums (list (_parse-int-str p 10))))
  )))
(_return nums)
))
)
(define (factorial n)
  (let/ec _return (begin
(define f 1)
(define i 2)
(let/ec _break (let loop ()
  (if (<= i n) (let ()
    (set! f (* f i))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return f)
))
)
(define (genFactBaseNums size countOnly)
  (let/ec _return (begin
(define results (list))
(define count 0)
(define n 0)
(let/ec _break (let loop ()
  (if #t (let ()
    (define radix 2)
    (define res (list))
    (if (not countOnly) (let ()
(define z 0)
(let/ec _break (let loop ()
  (if (< z size) (let ()
    (set! res (append res (list 0)))
    (set! z (let ([__l z] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (define k n)
    (let/ec _break (let loop ()
  (if (> k 0) (let ()
    (define div (quotient k radix))
    (define rem (modulo k radix))
    (if (and (not countOnly) (<= radix (let ([__l size] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(set! res (list-set res (int (let ([__l (- size radix)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) rem))
) (void))
    (set! k div)
    (set! radix (let ([__l radix] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (> radix (let ([__l size] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(_break)
) (void))
    (set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (not countOnly) (let ()
(set! results (append results (list res)))
) (void))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list results count))
))
)
(define (mapToPerms factNums)
  (let/ec _return (begin
(define perms (list))
(define psize (let ([__l (cond [(string? (if factNums (list-ref factNums (int 0)) #f)) (string-length (if factNums (list-ref factNums (int 0)) #f))] [(hash? (if factNums (list-ref factNums (int 0)) #f)) (hash-count (if factNums (list-ref factNums (int 0)) #f))] [else (length (if factNums (list-ref factNums (int 0)) #f))])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define start (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i psize) (let ()
    (set! start (append start (list i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (for ([fn factNums])
  (let/ec _cont
(define perm (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? start) (string-length start)] [(hash? start) (hash-count start)] [else (length start)])) (let ()
    (set! perm (append perm (list (if start (list-ref start (int j)) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define m 0)
(let/ec _break (let loop ()
  (if (< m (cond [(string? fn) (string-length fn)] [(hash? fn) (hash-count fn)] [else (length fn)])) (let ()
    (define g (if fn (list-ref fn (int m)) #f))
    (if (not (equal? g 0)) (let ()
(define first m)
(define last (let ([__l m] [__r g]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define t 1)
(let/ec _break (let loop ()
  (if (<= t g) (let ()
    (define temp (if perm (list-ref perm (int first)) #f))
    (define x (let ([__l first] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (<= x last) (let ()
    (set! perm (list-set perm (int (- x 1)) (if perm (list-ref perm (int x)) #f)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! perm (list-set perm (int last) temp))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! perms (append perms (list perm)))
  )))
(_return perms)
))
)
(define seed 1)
(define (randInt n)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
(_return (modulo seed n))
))
)
(define (main)
  (let/ec _return (begin
(define g (genFactBaseNums 3 #f))
(define factNums (if g (list-ref g (int 0)) #f))
(define perms (mapToPerms factNums))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? factNums) (string-length factNums)] [(hash? factNums) (hash-count factNums)] [else (length factNums)])) (let ()
    (displayln (string-append (string-append (joinInts (if factNums (list-ref factNums (int i)) #f) ".") " -> ") (joinInts (if perms (list-ref perms (int i)) #f) "")))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define count2 (factorial 11))
(displayln (string-append "\nPermutations generated = " (format "~a" count2)))
(displayln (string-append "compared to 11! which  = " (format "~a" (factorial 11))))
(displayln "")
(define fbn51s (list "39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0" "51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1"))
(set! factNums (list (undot (if fbn51s (list-ref fbn51s (int 0)) #f)) (undot (if fbn51s (list-ref fbn51s (int 1)) #f))))
(set! perms (mapToPerms factNums))
(define shoe "A♠K♠Q♠J♠T♠9♠8♠7♠6♠5♠4♠3♠2♠A♥K♥Q♥J♥T♥9♥8♥7♥6♥5♥4♥3♥2♥A♦K♦Q♦J♦T♦9♦8♦7♦6♦5♦4♦3♦2♦A♣K♣Q♣J♣T♣9♣8♣7♣6♣5♣4♣3♣2♣")
(define cards (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i 52) (let ()
    (define card (slice shoe (* 2 i) (let ([__l (* 2 i)] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? (slice card 0 1) "T") (let ()
(set! card (string-append "10" (slice card 1 2)))
) (void))
    (set! cards (append cards (list card)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? fbn51s) (string-length fbn51s)] [(hash? fbn51s) (hash-count fbn51s)] [else (length fbn51s)])) (let ()
    (displayln (if fbn51s (list-ref fbn51s (int i)) #f))
    (define perm (if perms (list-ref perms (int i)) #f))
    (define j 0)
    (define line "")
    (let/ec _break (let loop ()
  (if (< j (cond [(string? perm) (string-length perm)] [(hash? perm) (hash-count perm)] [else (length perm)])) (let ()
    (set! line (string-append line (if cards (list-ref cards (int (if perm (list-ref perm (int j)) #f))) #f)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln (string-append line "\n"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define fbn51 (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i 51) (let ()
    (set! fbn51 (append fbn51 (list (randInt (- 52 i)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (joinInts fbn51 "."))
(set! perms (mapToPerms (list fbn51)))
(define line "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if perms (list-ref perms (int 0)) #f)) (string-length (if perms (list-ref perms (int 0)) #f))] [(hash? (if perms (list-ref perms (int 0)) #f)) (hash-count (if perms (list-ref perms (int 0)) #f))] [else (length (if perms (list-ref perms (int 0)) #f))])) (let ()
    (set! line (string-append line (if cards (list-ref cards (int (if (if perms (list-ref perms (int 0)) #f) (list-ref (if perms (list-ref perms (int 0)) #f) (int i)) #f))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln line)
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
