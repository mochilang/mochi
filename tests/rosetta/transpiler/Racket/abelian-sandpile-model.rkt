;; Generated by Mochi 0.10.37 on 2025-07-23 15:43 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define dim 16)
(define (newPile d)
  (let/ec _return (begin
(define b (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y d) (let ()
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x d) (let ()
    (set! row (append row (list 0)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! b (append b (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return b)
))
)
(define (handlePile pile x y)
  (let/ec _return (begin
(if (>= (list-ref (list-ref pile y) x) 4) (let ()
(set! pile (list-set pile y (list-set (list-ref pile y) x (- (list-ref (list-ref pile y) x) 4))))
(if (> y 0) (let ()
(set! pile (list-set pile (- y 1) (list-set (list-ref pile (- y 1)) x (let ([__l (list-ref (list-ref pile (- y 1)) x)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(if (>= (list-ref (list-ref pile (- y 1)) x) 4) (let ()
(set! pile (handlePile pile x (- y 1)))
) (void))
) (void))
(if (> x 0) (let ()
(set! pile (list-set pile y (list-set (list-ref pile y) (- x 1) (let ([__l (list-ref (list-ref pile y) (- x 1))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(if (>= (list-ref (list-ref pile y) (- x 1)) 4) (let ()
(set! pile (handlePile pile (- x 1) y))
) (void))
) (void))
(if (< y (- dim 1)) (let ()
(set! pile (list-set pile (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref pile (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) x (let ([__l (list-ref (list-ref pile (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) x)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(if (>= (list-ref (list-ref pile (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) x) 4) (let ()
(set! pile (handlePile pile x (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
) (void))
(if (< x (- dim 1)) (let ()
(set! pile (list-set pile y (list-set (list-ref pile y) (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (list-ref (list-ref pile y) (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(if (>= (list-ref (list-ref pile y) (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 4) (let ()
(set! pile (handlePile pile (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) y))
) (void))
) (void))
(set! pile (handlePile pile x y))
) (void))
(_return pile)
))
)
(define (drawPile pile d)
  (let/ec _return (begin
(define chars (list " " "░" "▓" "█"))
(define row 0)
(let/ec _break (let loop ()
  (if (< row d) (let ()
    (define line "")
    (define col 0)
    (let/ec _break (let loop ()
  (if (< col d) (let ()
    (define v (list-ref (list-ref pile row) col))
    (if (> v 3) (let ()
(set! v 3)
) (void))
    (set! line (string-append line (list-ref chars v)))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(define pile (newPile 16))
(define hdim 7)
(set! pile (list-set pile hdim (list-set (list-ref pile hdim) hdim 16)))
(set! pile (handlePile pile hdim hdim))
(drawPile pile 16)
))
)
(main)
