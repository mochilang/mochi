;; Generated by Mochi 0.10.41 on 2025-07-26 19:01 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (mean v)
  (let/ec _return (begin
(if (equal? (cond [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)]) 0) (let ()
(_return (hash "ok" #f))
) (void))
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let ()
    (set! sum (let ([__l sum] [__r (list-ref v i)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "ok" #t "mean" (/ sum (exact->inexact (cond [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])))))
))
)
(define (main)
  (let/ec _return (begin
(define sets (list (list) (list 3.0 1.0 4.0 1.0 5.0 9.0) (list 1e+20 3.0 1.0 4.0 1.0 5.0 9.0 (- 1e+20)) (list 10.0 9.0 8.0 7.0 6.0 5.0 4.0 3.0 2.0 1.0 0.0 0.0 0.0 0.0 0.11) (list 10.0 20.0 30.0 40.0 50.0 (- 100.0) 4.7 (- 1100.0))))
(let/ec _break (for ([v sets])
  (let/ec _cont
(displayln (string-append "Vector: " (format "~a" v)))
(define r (mean v))
(if (if r (hash-ref r "ok" #f) #f) (let ()
(displayln (string-append (string-append (string-append "Mean of " (format "~a" (cond [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)]))) " numbers is ") (format "~a" (if r (hash-ref r "mean" #f) #f))))
) (let ()
(displayln "Mean undefined")
))
(displayln "")
  )))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
