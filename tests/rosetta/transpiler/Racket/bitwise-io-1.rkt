;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (pow2 n)
  (let/ec _return (begin
(define v 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! v (* v 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return v)
))
)
(define (lshift x n)
  (let/ec _return (begin
(_return (* x (pow2 n)))
))
)
(define (rshift x n)
  (let/ec _return (begin
(_return (quotient x (pow2 n)))
))
)
(define (NewWriter order)
  (let/ec _return (begin
(_return (hash "order" order "bits" 0 "nbits" 0 "data" (list)))
))
)
(define (writeBitsLSB w c width)
  (let/ec _return (begin
(set! w (hash-set (or w (hash)) "bits" (let ([__l (if w (hash-ref w "bits" #f) #f)] [__r (lshift c (if w (hash-ref w "nbits" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! w (hash-set (or w (hash)) "nbits" (let ([__l (if w (hash-ref w "nbits" #f) #f)] [__r width]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(let/ec _break (let loop ()
  (if (>= (if w (hash-ref w "nbits" #f) #f) 8) (let ()
    (define b (modulo (if w (hash-ref w "bits" #f) #f) 256))
    (set! w (hash-set (or w (hash)) "data" (append (if w (hash-ref w "data" #f) #f) (list b))))
    (set! w (hash-set (or w (hash)) "bits" (rshift (if w (hash-ref w "bits" #f) #f) 8)))
    (set! w (hash-set (or w (hash)) "nbits" (- (if w (hash-ref w "nbits" #f) #f) 8)))
    (loop)) (void))))
(_return w)
))
)
(define (writeBitsMSB w c width)
  (let/ec _return (begin
(set! w (hash-set (or w (hash)) "bits" (let ([__l (if w (hash-ref w "bits" #f) #f)] [__r (lshift c (- (- 32 width) (if w (hash-ref w "nbits" #f) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! w (hash-set (or w (hash)) "nbits" (let ([__l (if w (hash-ref w "nbits" #f) #f)] [__r width]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(let/ec _break (let loop ()
  (if (>= (if w (hash-ref w "nbits" #f) #f) 8) (let ()
    (define b (modulo (rshift (if w (hash-ref w "bits" #f) #f) 24) 256))
    (set! w (hash-set (or w (hash)) "data" (append (if w (hash-ref w "data" #f) #f) (list b))))
    (set! w (hash-set (or w (hash)) "bits" (* (modulo (if w (hash-ref w "bits" #f) #f) (pow2 24)) 256)))
    (set! w (hash-set (or w (hash)) "nbits" (- (if w (hash-ref w "nbits" #f) #f) 8)))
    (loop)) (void))))
(_return w)
))
)
(define (WriteBits w c width)
  (let/ec _return (begin
(if (string=? (if w (hash-ref w "order" #f) #f) "LSB") (let ()
(_return (writeBitsLSB w c width))
) (void))
(_return (writeBitsMSB w c width))
))
)
(define (CloseWriter w)
  (let/ec _return (begin
(if (> (if w (hash-ref w "nbits" #f) #f) 0) (let ()
(if (string=? (if w (hash-ref w "order" #f) #f) "MSB") (let ()
(set! w (hash-set (or w (hash)) "bits" (rshift (if w (hash-ref w "bits" #f) #f) 24)))
) (void))
(set! w (hash-set (or w (hash)) "data" (append (if w (hash-ref w "data" #f) #f) (list (modulo (if w (hash-ref w "bits" #f) #f) 256)))))
) (void))
(set! w (hash-set (or w (hash)) "bits" 0))
(set! w (hash-set (or w (hash)) "nbits" 0))
(_return w)
))
)
(define (toBinary n bits)
  (let/ec _return (begin
(define b "")
(define val n)
(define i 0)
(let/ec _break (let loop ()
  (if (< i bits) (let ()
    (set! b (string-append (format "~a" (modulo val 2)) b))
    (set! val (quotient val 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return b)
))
)
(define (bytesToBits bs)
  (let/ec _return (begin
(define out "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bs) (string-length bs)] [(hash? bs) (hash-count bs)] [else (length bs)])) (let ()
    (set! out (string-append out (toBinary (list-ref bs i) 8)))
    (if (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? bs) (string-length bs)] [(hash? bs) (hash-count bs)] [else (length bs)])) (let ()
(set! out (string-append out " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! out (string-append out "]"))
(_return out)
))
)
(define (ExampleWriter_WriteBits)
  (let/ec _return (begin
(define bw (NewWriter "MSB"))
(set! bw (WriteBits bw 15 4))
(set! bw (WriteBits bw 0 1))
(set! bw (WriteBits bw 19 5))
(set! bw (CloseWriter bw))
(displayln (bytesToBits (if bw (hash-ref bw "data" #f) #f)))
))
)
(ExampleWriter_WriteBits)
