;; Generated by Mochi 0.10.42 on 2025-07-27 22:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (bsearch arr x)
  (let/ec _return (begin
(define low 0)
(define high (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1))
(let/ec _break (let loop ()
  (if (<= low high) (let ()
    (define mid (quotient (let ([__l low] [__r high]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
    (if (> (if arr (list-ref arr (int mid)) #f) x) (let ()
(set! high (- mid 1))
) (let ()
(if (< (if arr (list-ref arr (int mid)) #f) x) (let ()
(set! low (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(_return mid)
))
))
    (loop)) (void))))
(_return (- 1))
))
)
(define (bsearchRec arr x low high)
  (let/ec _return (begin
(if (< high low) (let ()
(_return (- 1))
) (void))
(define mid (quotient (let ([__l low] [__r high]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
(if (> (if arr (list-ref arr (int mid)) #f) x) (let ()
(_return (bsearchRec arr x low (- mid 1)))
) (let ()
(if (< (if arr (list-ref arr (int mid)) #f) x) (let ()
(_return (bsearchRec arr x (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) high))
) (void))
))
(_return mid)
))
)
(define (main)
  (let/ec _return (begin
(define nums (list (- 31) 0 1 2 2 4 65 83 99 782))
(define x 2)
(define idx (bsearch nums x))
(if (>= idx 0) (let ()
(displayln (string-append (string-append (string-append (format "~a" x) " is at index ") (format "~a" idx)) "."))
) (let ()
(displayln (string-append (format "~a" x) " is not found."))
))
(set! x 5)
(set! idx (bsearchRec nums x 0 (- (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)]) 1)))
(if (>= idx 0) (let ()
(displayln (string-append (string-append (string-append (format "~a" x) " is at index ") (format "~a" idx)) "."))
) (let ()
(displayln (string-append (format "~a" x) " is not found."))
))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
