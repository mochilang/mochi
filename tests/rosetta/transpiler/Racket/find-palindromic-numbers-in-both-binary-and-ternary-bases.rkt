;; Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (toBase n b)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(_return "0")
) (void))
(define s "")
(define x n)
(let/ec _break (let loop ()
  (if (> x 0) (let ()
    (set! s (string-append (format "~a" (modulo x b)) s))
    (set! x (int (quotient x b)))
    (loop)) (void))))
(_return s)
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (substring str 0 (+ 0 1)) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (- (let ([__l (* n 10)] [__r (int (slice str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (int "0")))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define (parseIntBase s b)
  (let/ec _return (begin
(define n 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (set! n (let ([__l (* n b)] [__r (_parse-int-str (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 10)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return n)
))
)
(define (reverseStr s)
  (let/ec _return (begin
(define out "")
(define i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (set! out (string-append out (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (- i 1))
    (loop)) (void))))
(_return out)
))
)
(define (isPalindrome s)
  (let/ec _return (begin
(_return (string=? s (reverseStr s)))
))
)
(define (isPalindromeBin n)
  (let/ec _return (begin
(define b (toBase n 2))
(_return (isPalindrome b))
))
)
(define (myMin a b)
  (let/ec _return (begin
(if (< a b) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (myMax a b)
  (let/ec _return (begin
(if (> a b) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (reverse3 n)
  (let/ec _return (begin
(define x 0)
(define y n)
(let/ec _break (let loop ()
  (if (not (equal? y 0)) (let ()
    (set! x (let ([__l (* x 3)] [__r (modulo y 3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! y (int (quotient y 3)))
    (loop)) (void))))
(_return x)
))
)
(define (show n)
  (let/ec _return (begin
(displayln (string-append "Decimal : " (format "~a" n)))
(displayln (string-append "Binary  : " (toBase n 2)))
(displayln (string-append "Ternary : " (toBase n 3)))
(displayln "")
))
)
(define (main)
  (let/ec _return (begin
(displayln "The first 6 numbers which are palindromic in both binary and ternary are :\n")
(show 0)
(define count 1)
(define lo 0)
(define hi 1)
(define pow2 1)
(define pow3 1)
(let/ec _break (let loop ()
  (if #t (let ()
    (define i lo)
    (let/ec _break (let loop ()
  (if (< i hi) (let ()
    (define n (let ([__l (* (let ([__l (* i 3)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) pow3)] [__r (reverse3 i)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (isPalindromeBin n) (let ()
(show n)
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (>= count 6) (let ()
(_return void)
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (equal? i pow3) (let ()
(set! pow3 (* pow3 3))
) (let ()
(set! pow2 (* pow2 4))
))
    (let/ec _break (let loop ()
  (if #t (let ()
    (let/ec _break (let loop ()
  (if (<= pow2 pow3) (let ()
    (set! pow2 (* pow2 4))
    (loop)) (void))))
    (define lo2 (int (quotient (- (quotient pow2 pow3) 1) 3)))
    (define hi2 (let ([__l (int (quotient (- (quotient (* pow2 2) pow3) 1) 3))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define lo3 (int (quotient pow3 3)))
    (define hi3 pow3)
    (if (>= lo2 hi3) (let ()
(set! pow3 (* pow3 3))
) (let ()
(if (>= lo3 hi2) (let ()
(set! pow2 (* pow2 4))
) (let ()
(set! lo (myMax lo2 lo3))
(set! hi (myMin hi2 hi3))
(_break)
))
))
    (loop)) (void))))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
