;; Generated by Mochi 0.10.50 on 2025-07-30 23:37 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define PI 3.141592653589793)
(define (_mod x m)
  (let/ec _return (begin
(_return (- x (* (exact->inexact (int (/ x m))) m)))
))
)
(define (_sin x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (* 2.0 PI)) PI))
(define y2 (* y y))
(define y3 (* y2 y))
(define y5 (* y3 y2))
(define y7 (* y5 y2))
(_return (- (let ([__l (- y (/ y3 6.0))] [__r (/ y5 120.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y7 5040.0)))
))
)
(define (_cos x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (* 2.0 PI)) PI))
(define y2 (* y y))
(define y4 (* y2 y2))
(define y6 (* y4 y2))
(_return (- (let ([__l (- 1.0 (/ y2 2.0))] [__r (/ y4 24.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y6 720.0)))
))
)
(define width 80)
(define height 40)
(define depth 6)
(define angle 12.0)
(define length 12.0)
(define frac 0.8)
(define (clearGrid)
  (let/ec _return (begin
(define g (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y height) (let ()
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x width) (let ()
    (set! row (append row (list " ")))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! g (append g (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return g)
))
)
(define (drawPoint g x y)
  (let/ec _return (begin
(if (and (and (and (>= x 0) (< x width)) (>= y 0)) (< y height)) (let ()
(define row (if g (list-ref g (int y)) #f))
(set! row (list-set row (int x) "#"))
(set! g (list-set g (int y) row))
) (void))
))
)
(define (bresenham x0 y0 x1 y1 g)
  (let/ec _return (begin
(define dx (- x1 x0))
(if (< dx 0) (let ()
(set! dx (- dx))
) (void))
(define dy (- y1 y0))
(if (< dy 0) (let ()
(set! dy (- dy))
) (void))
(define sx (- 1))
(if (< x0 x1) (let ()
(set! sx 1)
) (void))
(define sy (- 1))
(if (< y0 y1) (let ()
(set! sy 1)
) (void))
(define err (- dx dy))
(let/ec _break (let loop ()
  (if #t (let ()
    (drawPoint g x0 y0)
    (if (and (equal? x0 x1) (equal? y0 y1)) (let ()
(_break)
) (void))
    (define e2 (* 2 err))
    (if (> e2 (- dy)) (let ()
(set! err (- err dy))
(set! x0 (let ([__l x0] [__r sx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (if (< e2 dx) (let ()
(set! err (let ([__l err] [__r dx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! y0 (let ([__l y0] [__r sy]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (loop)) (void))))
))
)
(define (ftree g x y dist dir d)
  (let/ec _return (begin
(define rad (/ (* dir PI) 180.0))
(define x2 (let ([__l x] [__r (* dist (_sin rad))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define y2 (- y (* dist (_cos rad))))
(bresenham (int x) (int y) (int x2) (int y2) g)
(if (> d 0) (let ()
(ftree g x2 y2 (* dist frac) (- dir angle) (- d 1))
(ftree g x2 y2 (* dist frac) (let ([__l dir] [__r angle]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- d 1))
) (void))
))
)
(define (render g)
  (let/ec _return (begin
(define out "")
(define y 0)
(let/ec _break (let loop ()
  (if (< y height) (let ()
    (define line "")
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x width) (let ()
    (set! line (string-append line (if (if g (list-ref g (int y)) #f) (list-ref (if g (list-ref g (int y)) #f) (int x)) #f)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (string-append out line))
    (if (< y (- height 1)) (let ()
(set! out (string-append out "\n"))
) (void))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define grid (clearGrid))
(ftree grid (exact->inexact (quotient width 2)) (exact->inexact (- height 1)) length 0.0 depth)
(displayln (render grid))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
