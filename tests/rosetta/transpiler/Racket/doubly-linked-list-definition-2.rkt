;; Generated by Mochi 0.10.55 on 2025-08-03 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (newList)
  (let/ec _return (begin
(_return (hash "nodes" (hash) "head" 0 "tail" 0 "nextID" 1))
))
)
(define (newNode l v)
  (let/ec _return (begin
(define id (int (if l (hash-ref l "nextID" #f) #f)))
(set! l (hash-set (or l (hash)) "nextID" (let ([__l id] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define nodes (if l (hash-ref l "nodes" #f) #f))
(define n (hash "id" id "value" v "next" 0 "prev" 0))
(set! nodes (hash-set (or nodes (hash)) id n))
(set! l (hash-set (or l (hash)) "nodes" nodes))
(_return n)
))
)
(define (pushFront l v)
  (let/ec _return (begin
(define n (newNode l v))
(set! n (hash-set (or n (hash)) "next" (if l (hash-ref l "head" #f) #f)))
(if (not (equal? (int (if l (hash-ref l "head" #f) #f)) 0)) (let ()
(define nodes (if l (hash-ref l "nodes" #f) #f))
(define h (if nodes (hash-ref nodes (int (if l (hash-ref l "head" #f) #f)) #f) #f))
(set! h (hash-set (or h (hash)) "prev" (if n (hash-ref n "id" #f) #f)))
(set! nodes (hash-set (or nodes (hash)) (int (if h (hash-ref h "id" #f) #f)) h))
(set! l (hash-set (or l (hash)) "nodes" nodes))
) (let ()
(set! l (hash-set (or l (hash)) "tail" (if n (hash-ref n "id" #f) #f)))
))
(set! l (hash-set (or l (hash)) "head" (if n (hash-ref n "id" #f) #f)))
(define nodes2 (if l (hash-ref l "nodes" #f) #f))
(set! nodes2 (hash-set (or nodes2 (hash)) (int (if n (hash-ref n "id" #f) #f)) n))
(set! l (hash-set (or l (hash)) "nodes" nodes2))
(_return n)
))
)
(define (pushBack l v)
  (let/ec _return (begin
(define n (newNode l v))
(set! n (hash-set (or n (hash)) "prev" (if l (hash-ref l "tail" #f) #f)))
(if (not (equal? (int (if l (hash-ref l "tail" #f) #f)) 0)) (let ()
(define nodes (if l (hash-ref l "nodes" #f) #f))
(define t (if nodes (hash-ref nodes (int (if l (hash-ref l "tail" #f) #f)) #f) #f))
(set! t (hash-set (or t (hash)) "next" (if n (hash-ref n "id" #f) #f)))
(set! nodes (hash-set (or nodes (hash)) (int (if t (hash-ref t "id" #f) #f)) t))
(set! l (hash-set (or l (hash)) "nodes" nodes))
) (let ()
(set! l (hash-set (or l (hash)) "head" (if n (hash-ref n "id" #f) #f)))
))
(set! l (hash-set (or l (hash)) "tail" (if n (hash-ref n "id" #f) #f)))
(define nodes2 (if l (hash-ref l "nodes" #f) #f))
(set! nodes2 (hash-set (or nodes2 (hash)) (int (if n (hash-ref n "id" #f) #f)) n))
(set! l (hash-set (or l (hash)) "nodes" nodes2))
(_return n)
))
)
(define (insertBefore l refID v)
  (let/ec _return (begin
(if (equal? refID 0) (let ()
(_return (pushFront l v))
) (void))
(define nodes (if l (hash-ref l "nodes" #f) #f))
(define ref (if nodes (hash-ref nodes refID #f) #f))
(define n (newNode l v))
(set! n (hash-set (or n (hash)) "prev" (if ref (hash-ref ref "prev" #f) #f)))
(set! n (hash-set (or n (hash)) "next" (if ref (hash-ref ref "id" #f) #f)))
(if (not (equal? (int (if ref (hash-ref ref "prev" #f) #f)) 0)) (let ()
(define p (if nodes (hash-ref nodes (int (if ref (hash-ref ref "prev" #f) #f)) #f) #f))
(set! p (hash-set (or p (hash)) "next" (if n (hash-ref n "id" #f) #f)))
(set! nodes (hash-set (or nodes (hash)) (int (if p (hash-ref p "id" #f) #f)) p))
) (let ()
(set! l (hash-set (or l (hash)) "head" (if n (hash-ref n "id" #f) #f)))
))
(set! ref (hash-set (or ref (hash)) "prev" (if n (hash-ref n "id" #f) #f)))
(set! nodes (hash-set (or nodes (hash)) refID ref))
(set! nodes (hash-set (or nodes (hash)) (int (if n (hash-ref n "id" #f) #f)) n))
(set! l (hash-set (or l (hash)) "nodes" nodes))
(_return n)
))
)
(define (insertAfter l refID v)
  (let/ec _return (begin
(if (equal? refID 0) (let ()
(_return (pushBack l v))
) (void))
(define nodes (if l (hash-ref l "nodes" #f) #f))
(define ref (if nodes (hash-ref nodes refID #f) #f))
(define n (newNode l v))
(set! n (hash-set (or n (hash)) "next" (if ref (hash-ref ref "next" #f) #f)))
(set! n (hash-set (or n (hash)) "prev" (if ref (hash-ref ref "id" #f) #f)))
(if (not (equal? (int (if ref (hash-ref ref "next" #f) #f)) 0)) (let ()
(define nx (if nodes (hash-ref nodes (int (if ref (hash-ref ref "next" #f) #f)) #f) #f))
(set! nx (hash-set (or nx (hash)) "prev" (if n (hash-ref n "id" #f) #f)))
(set! nodes (hash-set (or nodes (hash)) (int (if nx (hash-ref nx "id" #f) #f)) nx))
) (let ()
(set! l (hash-set (or l (hash)) "tail" (if n (hash-ref n "id" #f) #f)))
))
(set! ref (hash-set (or ref (hash)) "next" (if n (hash-ref n "id" #f) #f)))
(set! nodes (hash-set (or nodes (hash)) refID ref))
(set! nodes (hash-set (or nodes (hash)) (int (if n (hash-ref n "id" #f) #f)) n))
(set! l (hash-set (or l (hash)) "nodes" nodes))
(_return n)
))
)
(define (main)
  (let/ec _return (begin
(define l (newList))
(define e4 (pushBack l 4))
(define e1 (pushFront l 1))
(insertBefore l (int (if e4 (hash-ref e4 "id" #f) #f)) 3)
(insertAfter l (int (if e1 (hash-ref e1 "id" #f) #f)) "two")
(define id (int (if l (hash-ref l "head" #f) #f)))
(define nodes (if l (hash-ref l "nodes" #f) #f))
(let/ec _break (let loop ()
  (if (not (equal? id 0)) (let/ec _cont
    (define node (if nodes (hash-ref nodes id #f) #f))
    (displayln (format "~a" (if node (hash-ref node "value" #f) #f)))
    (set! id (int (if node (hash-ref node "next" #f) #f)))
    (loop)) (void))))
))
)
(main)
