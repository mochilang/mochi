;; Generated by Mochi 0.10.39 on 2025-07-24 13:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (powf base exp)
  (let/ec _return (begin
(define result 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let ()
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (nthRoot x n)
  (let/ec _return (begin
(define low 0.0)
(define high x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 60) (let ()
    (define mid (/ (let ([__l low] [__r high]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (if (> (powf mid n) x) (let ()
(set! high mid)
) (let ()
(set! low mid)
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return low)
))
)
(define (main)
  (let/ec _return (begin
(define sum 0.0)
(define sumRecip 0.0)
(define prod 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 10) (let ()
    (define f (exact->inexact n))
    (set! sum (let ([__l sum] [__r f]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! sumRecip (let ([__l sumRecip] [__r (/ 1.0 f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! prod (* prod f))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define count 10.0)
(define a (/ sum count))
(define g (nthRoot prod 10))
(define h (/ count sumRecip))
(displayln (string-append (string-append (string-append (string-append (string-append "A: " (format "~a" a)) " G: ") (format "~a" g)) " H: ") (format "~a" h)))
(displayln (string-append "A >= G >= H: " (format "~a" (and (>= a g) (>= g h)))))
))
)
(main)
