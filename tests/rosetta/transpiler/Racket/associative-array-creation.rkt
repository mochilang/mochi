;; Generated by Mochi 0.10.39 on 2025-07-24 13:13 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (removeKey m k)
  (let/ec _return (begin
(define out (hash))
(for ([key (in-hash-keys m)])
(if (not (string=? key k)) (let ()
(set! out (hash-set out key (hash-ref m key #f)))
) (void))
)
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define x #f)
(set! x (hash))
(set! x (hash-set x "foo" 3))
(define y1 (hash-ref x "bar" #f))
(define ok (hash-has-key? x "bar"))
(displayln y1)
(displayln ok)
(set! x (removeKey x "foo"))
(set! x (hash "foo" 2 "bar" 42 "baz" (- 1)))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list (hash-ref x "foo" #f) (hash-ref x "bar" #f) (hash-ref x "baz" #f))) " "))
))
)
(main)
