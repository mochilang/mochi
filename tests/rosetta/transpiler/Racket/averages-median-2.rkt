;; Generated by Mochi 0.10.39 on 2025-07-24 13:16 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (sel list k)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (<= i k) (let ()
    (define minIndex i)
    (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< j (cond [(string? list) (string-length list)] [(hash? list) (hash-count list)] [else (length list)])) (let ()
    (if (< (list-ref list j) (list-ref list minIndex)) (let ()
(set! minIndex j)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define tmp (list-ref list i))
    (set! list (list-set list i (list-ref list minIndex)))
    (set! list (list-set list minIndex tmp))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list-ref list k))
))
)
(define (median a)
  (let/ec _return (begin
(define arr a)
(define half (int (quotient (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 2)))
(define med (sel arr half))
(if (equal? (modulo (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 2) 0) (let ()
(_return (/ (let ([__l med] [__r (list-ref arr (- half 1))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
) (void))
(_return med)
))
)
(displayln (format "~a" (median (list 3.0 1.0 4.0 1.0))))
(displayln (format "~a" (median (list 3.0 1.0 4.0 1.0 5.0))))
