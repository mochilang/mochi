;; Generated by Mochi 0.10.37 on 2025-07-23 12:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (search_user directory username)
  (let/ec _return (begin
(_return (hash-ref directory username))
))
)
(define (main)
  (let/ec _return (begin
(define client (hash "Base" "dc=example,dc=com" "Host" "ldap.example.com" "Port" 389 "GroupFilter" "(memberUid=%s)"))
(define directory (hash "username" (list "admins" "users") "john" (list "users")))
(define groups (search_user directory "username"))
(if (> (cond [(string? groups) (string-length groups)] [(hash? groups) (hash-count groups)] [else (length groups)]) 0) (let ()
(define out "Groups: [")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? groups) (string-length groups)] [(hash? groups) (hash-count groups)] [else (length groups)])) (let ()
    (set! out (string-append (string-append (string-append out "\"") (list-ref groups i)) "\""))
    (if (< i (- (cond [(string? groups) (string-length groups)] [(hash? groups) (hash-count groups)] [else (length groups)]) 1)) (let ()
(set! out (string-append out ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! out (string-append out "]"))
(displayln out)
) (let ()
(displayln "User not found")
))
))
)
(main)
