;; Generated by Mochi 0.10.39 on 2025-07-24 20:52 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define daysInMonth (list 31 28 31 30 31 30 31 31 30 31 30 31))
(define start (list 3 6 6 2 4 0 2 5 1 3 6 1))
(define months (list " January " " February" "  March  " "  April  " "   May   " "   June  " "   July  " "  August " "September" " October " " November" " December"))
(define days (list "Su" "Mo" "Tu" "We" "Th" "Fr" "Sa"))
(displayln "                                [SNOOPY]\n")
(displayln "                                  1969\n")
(define qtr 0)
(let/ec _break (let loop ()
  (if (< qtr 4) (let ()
    (define mi 0)
    (let/ec _break (let loop ()
  (if (< mi 3) (let ()
    (displayln (string-join (map (lambda (x) (format "~a" x)) (list (string-append (string-append "      " (list-ref months (let ([__l (* qtr 3)] [__r mi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) "           ") #f)) " "))
    (set! mi (let ([__l mi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln "")
    (set! mi 0)
    (let/ec _break (let loop ()
  (if (< mi 3) (let ()
    (define d 0)
    (let/ec _break (let loop ()
  (if (< d 7) (let ()
    (displayln (string-join (map (lambda (x) (format "~a" x)) (list (string-append " " (list-ref days d)) #f)) " "))
    (set! d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln (string-join (map (lambda (x) (format "~a" x)) (list "     " #f)) " "))
    (set! mi (let ([__l mi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln "")
    (define week 0)
    (let/ec _break (let loop ()
  (if (< week 6) (let ()
    (set! mi 0)
    (let/ec _break (let loop ()
  (if (< mi 3) (let ()
    (define day 0)
    (let/ec _break (let loop ()
  (if (< day 7) (let ()
    (define m (let ([__l (* qtr 3)] [__r mi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define val (let ([__l (- (let ([__l (* week 7)] [__r day]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-ref start m))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (and (>= val 1) (<= val (list-ref daysInMonth m))) (let ()
(define s (format "~a" val))
(if (equal? (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1) (let ()
(set! s (string-append " " s))
) (void))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list (string-append " " s) #f)) " "))
) (let ()
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "   " #f)) " "))
))
    (set! day (let ([__l day] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln (string-join (map (lambda (x) (format "~a" x)) (list "     " #f)) " "))
    (set! mi (let ([__l mi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln "")
    (set! week (let ([__l week] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln "")
    (set! qtr (let ([__l qtr] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
