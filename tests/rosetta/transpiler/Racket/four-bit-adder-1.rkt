;; Generated by Mochi 0.10.50 on 2025-07-30 23:37 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (xor a b)
  (let/ec _return (begin
(_return (or (and a (not b)) (and (not a) b)))
))
)
(define (ha a b)
  (let/ec _return (begin
(_return (hash "s" (xor a b) "c" (and a b)))
))
)
(define (fa a b c0)
  (let/ec _return (begin
(define r1 (ha a c0))
(define r2 (ha (if r1 (hash-ref r1 "s" #f) #f) b))
(_return (hash "s" (if r2 (hash-ref r2 "s" #f) #f) "c" (or (if r1 (hash-ref r1 "c" #f) #f) (if r2 (hash-ref r2 "c" #f) #f))))
))
)
(define (add4 a3 a2 a1 a0 b3 b2 b1 b0)
  (let/ec _return (begin
(define r0 (fa a0 b0 #f))
(define r1 (fa a1 b1 (if r0 (hash-ref r0 "c" #f) #f)))
(define r2 (fa a2 b2 (if r1 (hash-ref r1 "c" #f) #f)))
(define r3 (fa a3 b3 (if r2 (hash-ref r2 "c" #f) #f)))
(_return (hash "v" (if r3 (hash-ref r3 "c" #f) #f) "s3" (if r3 (hash-ref r3 "s" #f) #f) "s2" (if r2 (hash-ref r2 "s" #f) #f) "s1" (if r1 (hash-ref r1 "s" #f) #f) "s0" (if r0 (hash-ref r0 "s" #f) #f)))
))
)
(define (b2i b)
  (let/ec _return (begin
(if b (let ()
(_return 1)
) (void))
(_return 0)
))
)
(define (main)
  (let/ec _return (begin
(define r (add4 #t #f #t #f #t #f #f #t))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" (b2i (if r (hash-ref r "v" #f) #f))) " ") (format "~a" (b2i (if r (hash-ref r "s3" #f) #f)))) " ") (format "~a" (b2i (if r (hash-ref r "s2" #f) #f)))) " ") (format "~a" (b2i (if r (hash-ref r "s1" #f) #f)))) " ") (format "~a" (b2i (if r (hash-ref r "s0" #f) #f)))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
