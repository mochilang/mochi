;; Generated by Mochi 0.10.41 on 2025-07-26 17:02 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (listStr xs)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (set! s (string-append s (format "~a" (list-ref xs i))))
    (if (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
(set! s (string-append s " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define a (list 0 0 0 0 0))
(displayln (string-append "len(a) = " (format "~a" (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))))
(displayln (string-append "a = " (listStr a)))
(set! a (list-set a 0 3))
(displayln (string-append "a = " (listStr a)))
(displayln (string-append "a[0] = " (format "~a" (list-ref a 0))))
(define s (sublist a 0 4))
(define cap_s 5)
(displayln (string-append "s = " (listStr s)))
(displayln (string-append (string-append (string-append "len(s) = " (format "~a" (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) "  cap(s) = ") (format "~a" cap_s)))
(set! s (sublist a 0 5))
(displayln (string-append "s = " (listStr s)))
(set! a (list-set a 0 22))
(set! s (list-set s 0 22))
(displayln (string-append "a = " (listStr a)))
(displayln (string-append "s = " (listStr s)))
(set! s (append s (list 4)))
(set! s (append s (list 5)))
(set! s (append s (list 6)))
(set! cap_s 10)
(displayln (string-append "s = " (listStr s)))
(displayln (string-append (string-append (string-append "len(s) = " (format "~a" (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) "  cap(s) = ") (format "~a" cap_s)))
(set! a (list-set a 4 (- 1)))
(displayln (string-append "a = " (listStr a)))
(displayln (string-append "s = " (listStr s)))
(set! s (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i 8)
(set! s (append s (list 0)))
      (set! i (+ i 1))
      (loop)))
))
(set! cap_s 8)
(displayln (string-append "s = " (listStr s)))
(displayln (string-append (string-append (string-append "len(s) = " (format "~a" (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) "  cap(s) = ") (format "~a" cap_s)))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
