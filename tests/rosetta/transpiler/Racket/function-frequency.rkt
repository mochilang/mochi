;; Generated by Mochi 0.10.52 on 2025-08-01 18:34 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (join xs sep)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (> i 0) (let ()
(set! res (string-append res sep))
) (void))
    (set! res (string-append res (if xs (list-ref xs (int i)) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (sortPairs xs)
  (let/ec _return (begin
(define arr xs)
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let ()
    (define j i)
    (let/ec _break (let loop ()
  (if (and (> j 0) (< (int (if (if arr (list-ref arr (int (- j 1))) #f) (hash-ref (if arr (list-ref arr (int (- j 1))) #f) "count" #f) #f)) (int (if (if arr (list-ref arr (int j)) #f) (hash-ref (if arr (list-ref arr (int j)) #f) "count" #f) #f)))) (let ()
    (define tmp (if arr (list-ref arr (int (- j 1))) #f))
    (set! arr (list-set arr (int (- j 1)) (if arr (list-ref arr (int j)) #f)))
    (set! arr (list-set arr (int j) tmp))
    (set! j (- j 1))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (isAlphaNumDot ch)
  (let/ec _return (begin
(_return (or (or (or (or (and (string>=? ch "A") (string<=? ch "Z")) (and (string>=? ch "a") (string<=? ch "z"))) (and (string>=? ch "0") (string<=? ch "9"))) (string=? ch "_")) (string=? ch ".")))
))
)
(define (main)
  (let/ec _return (begin
(define srcLines (list "package main" "" "import (" "    \"fmt\"" "    \"go/ast\"" "    \"go/parser\"" "    \"go/token\"" "    \"io/ioutil\"" "    \"os\"" "    \"sort\"" ")" "" "func main() {" "    if len(os.Args) != 2 {" "        fmt.Println(\"usage ff <go source filename>\")" "        return" "    }" "    src, err := ioutil.ReadFile(os.Args[1])" "    if err != nil {" "        fmt.Println(err)" "        return" "    }" "    fs := token.NewFileSet()" "    a, err := parser.ParseFile(fs, os.Args[1], src, 0)" "    if err != nil {" "        fmt.Println(err)" "        return" "    }" "    f := fs.File(a.Pos())" "    m := make(map[string]int)" "    ast.Inspect(a, func(n ast.Node) bool {" "        if ce, ok := n.(*ast.CallExpr); ok {" "            start := f.Offset(ce.Pos())" "            end := f.Offset(ce.Lparen)" "            m[string(src[start:end])]++" "        }" "        return true" "    })" "    cs := make(calls, 0, len(m))" "    for k, v := range m {" "        cs = append(cs, &call{k, v})" "    }" "    sort.Sort(cs)" "    for i, c := range cs {" "        fmt.Printf(\"%-20s %4d\\n\", c.expr, c.count)" "        if i == 9 {" "            break" "        }" "    }" "}" "" "type call struct {" "    expr  string" "    count int" "}" "type calls []*call" "" "func (c calls) Len() int           { return len(c) }" "func (c calls) Swap(i, j int)      { c[i], c[j] = c[j], c[i] }" "func (c calls) Less(i, j int) bool { return c[i].count > c[j].count }"))
(define src (join srcLines "\n"))
(define freq (hash))
(define i 0)
(define order (list))
(let/ec _break (let loop ()
  (if (< i (cond [(string? src) (string-length src)] [(hash? src) (hash-count src)] [else (length src)])) (let ()
    (define ch (slice src i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (or (and (string>=? ch "A") (string<=? ch "Z")) (and (string>=? ch "a") (string<=? ch "z"))) (string=? ch "_")) (let ()
(define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (and (< j (cond [(string? src) (string-length src)] [(hash? src) (hash-count src)] [else (length src)])) (isAlphaNumDot (slice src j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) (let ()
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define token (slice src i j))
(define k j)
(let/ec _break (let loop ()
  (if (< k (cond [(string? src) (string-length src)] [(hash? src) (hash-count src)] [else (length src)])) (let ()
    (define cc (slice src k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (or (or (string=? cc " ") (string=? cc "\t")) (string=? cc "\n")) (string=? cc "\r")) (let ()
(set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(_break)
))
    (loop)) (void))))
(if (and (< k (cond [(string? src) (string-length src)] [(hash? src) (hash-count src)] [else (length src)])) (string=? (slice src k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "(")) (let ()
(define p (- i 1))
(let/ec _break (let loop ()
  (if (and (>= p 0) (or (string=? (slice src p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ") (string=? (slice src p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "\t"))) (let ()
    (set! p (- p 1))
    (loop)) (void))))
(define skip #f)
(if (>= p 3) (let ()
(define before (slice src (- p 3) (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(if (string=? before "func") (let ()
(set! skip #t)
) (void))
) (void))
(if (not skip) (let ()
(if (hash-has-key? freq token) (let ()
(set! freq (hash-set (or freq (hash)) token (let ([__l (if freq (hash-ref freq token #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(set! freq (hash-set (or freq (hash)) token 1))
(set! order (append order (list token)))
))
) (void))
) (void))
(set! i j)
) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(define pairs (list))
(let/ec _break (for ([t order])
  (let/ec _cont
(set! pairs (append pairs (list (hash "expr" t "count" (if freq (hash-ref freq t #f) #f)))))
  )))
(set! pairs (sortPairs pairs))
(define idx 0)
(let/ec _break (let loop ()
  (if (and (< idx (cond [(string? pairs) (string-length pairs)] [(hash? pairs) (hash-count pairs)] [else (length pairs)])) (< idx 10)) (let ()
    (define p (if pairs (list-ref pairs (int idx)) #f))
    (displayln (string-append (string-append (if p (hash-ref p "expr" #f) #f) " ") (format "~a" (if p (hash-ref p "count" #f) #f))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
