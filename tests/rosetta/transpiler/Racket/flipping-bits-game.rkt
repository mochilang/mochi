;; Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (randInt seed n)
  (let/ec _return (begin
(define next (modulo (let ([__l (* seed 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
(_return (list next (modulo next n)))
))
)
(define (newBoard n seed)
  (let/ec _return (begin
(define board (list))
(define s seed)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let ()
    (define r (randInt s 2))
    (set! s (if r (list-ref r (int 0)) #f))
    (set! row (append row (list (if r (list-ref r (int 1)) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! board (append board (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list board s))
))
)
(define (copyBoard b)
  (let/ec _return (begin
(define nb (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if b (list-ref b (int i)) #f)) (string-length (if b (list-ref b (int i)) #f))] [(hash? (if b (list-ref b (int i)) #f)) (hash-count (if b (list-ref b (int i)) #f))] [else (length (if b (list-ref b (int i)) #f))])) (let ()
    (set! row (append row (list (if (if b (list-ref b (int i)) #f) (list-ref (if b (list-ref b (int i)) #f) (int j)) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! nb (append nb (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return nb)
))
)
(define (flipRow b r)
  (let/ec _return (begin
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? (if b (list-ref b (int r)) #f)) (string-length (if b (list-ref b (int r)) #f))] [(hash? (if b (list-ref b (int r)) #f)) (hash-count (if b (list-ref b (int r)) #f))] [else (length (if b (list-ref b (int r)) #f))])) (let ()
    (set! b (list-set b r (list-set (list-ref b r) j (- 1 (if (if b (list-ref b (int r)) #f) (list-ref (if b (list-ref b (int r)) #f) (int j)) #f)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return b)
))
)
(define (flipCol b c)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
    (set! b (list-set b i (list-set (list-ref b i) c (- 1 (if (if b (list-ref b (int i)) #f) (list-ref (if b (list-ref b (int i)) #f) (int c)) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return b)
))
)
(define (boardsEqual a b)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if a (list-ref a (int i)) #f)) (string-length (if a (list-ref a (int i)) #f))] [(hash? (if a (list-ref a (int i)) #f)) (hash-count (if a (list-ref a (int i)) #f))] [else (length (if a (list-ref a (int i)) #f))])) (let ()
    (if (not (equal? (if (if a (list-ref a (int i)) #f) (list-ref (if a (list-ref a (int i)) #f) (int j)) #f) (if (if b (list-ref b (int i)) #f) (list-ref (if b (list-ref b (int i)) #f) (int j)) #f))) (let ()
(_return #f)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (shuffleBoard b seed)
  (let/ec _return (begin
(define s seed)
(define n (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))
(define k 0)
(let/ec _break (let loop ()
  (if (< k (* 2 n)) (let ()
    (define r (randInt s n))
    (set! s (if r (list-ref r (int 0)) #f))
    (define idx (int (if r (list-ref r (int 1)) #f)))
    (if (equal? (modulo k 2) 0) (let ()
(set! b (flipRow b idx))
) (let ()
(set! b (flipCol b idx))
))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list b s))
))
)
(define (solve board target)
  (let/ec _return (begin
(define n (cond [(string? board) (string-length board)] [(hash? board) (hash-count board)] [else (length board)]))
(define row (list))
(define col (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (define diff (if (not (equal? (if (if board (list-ref board (int i)) #f) (list-ref (if board (list-ref board (int i)) #f) (int 0)) #f) (if (if target (list-ref target (int i)) #f) (list-ref (if target (list-ref target (int i)) #f) (int 0)) #f))) 1 0))
    (set! row (append row (list diff)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (< j n) (let ()
    (define diff (if (not (equal? (if (if board (list-ref board (int 0)) #f) (list-ref (if board (list-ref board (int 0)) #f) (int j)) #f) (if (if target (list-ref target (int 0)) #f) (list-ref (if target (list-ref target (int 0)) #f) (int j)) #f))) 1 0))
    (define val (modulo (let ([__l diff] [__r (if row (list-ref row (int 0)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
    (set! col (append col (list val)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "row" row "col" col))
))
)
(define (applySolution b sol)
  (let/ec _return (begin
(define board b)
(define moves 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if sol (hash-ref sol "row" #f) #f)) (string-length (if sol (hash-ref sol "row" #f) #f))] [(hash? (if sol (hash-ref sol "row" #f) #f)) (hash-count (if sol (hash-ref sol "row" #f) #f))] [else (length (if sol (hash-ref sol "row" #f) #f))])) (let ()
    (if (equal? (if (if sol (hash-ref sol "row" #f) #f) (list-ref (if sol (hash-ref sol "row" #f) #f) (int i)) #f) 1) (let ()
(set! board (flipRow board i))
(set! moves (let ([__l moves] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? (if sol (hash-ref sol "col" #f) #f)) (string-length (if sol (hash-ref sol "col" #f) #f))] [(hash? (if sol (hash-ref sol "col" #f) #f)) (hash-count (if sol (hash-ref sol "col" #f) #f))] [else (length (if sol (hash-ref sol "col" #f) #f))])) (let ()
    (if (equal? (if (if sol (hash-ref sol "col" #f) #f) (list-ref (if sol (hash-ref sol "col" #f) #f) (int j)) #f) 1) (let ()
(set! board (flipCol board j))
(set! moves (let ([__l moves] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list board moves))
))
)
(define (printBoard b)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if b (list-ref b (int i)) #f)) (string-length (if b (list-ref b (int i)) #f))] [(hash? (if b (list-ref b (int i)) #f)) (hash-count (if b (list-ref b (int i)) #f))] [else (length (if b (list-ref b (int i)) #f))])) (let ()
    (set! line (string-append line (format "~a" (if (if b (list-ref b (int i)) #f) (list-ref (if b (list-ref b (int i)) #f) (int j)) #f))))
    (if (< j (- (cond [(string? (if b (list-ref b (int i)) #f)) (string-length (if b (list-ref b (int i)) #f))] [(hash? (if b (list-ref b (int i)) #f)) (hash-count (if b (list-ref b (int i)) #f))] [else (length (if b (list-ref b (int i)) #f))]) 1)) (let ()
(set! line (string-append line " "))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(define n 3)
(define seed 1)
(define res (newBoard n seed))
(define target (if res (list-ref res (int 0)) #f))
(set! seed (int (if res (list-ref res (int 1)) #f)))
(define board (copyBoard target))
(let/ec _break (let loop ()
  (if #t (let ()
    (define sres (shuffleBoard (copyBoard board) seed))
    (set! board (if sres (list-ref sres (int 0)) #f))
    (set! seed (int (if sres (list-ref sres (int 1)) #f)))
    (if (not (boardsEqual board target)) (let ()
(_break)
) (void))
    (loop)) (void))))
(displayln "Target:")
(printBoard target)
(displayln "Board:")
(printBoard board)
(define sol (solve board target))
(define ares (applySolution board sol))
(set! board (if ares (list-ref ares (int 0)) #f))
(define moves (int (if ares (list-ref ares (int 1)) #f)))
(displayln "Solved:")
(printBoard board)
(displayln (string-append "Moves: " (format "~a" moves)))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
