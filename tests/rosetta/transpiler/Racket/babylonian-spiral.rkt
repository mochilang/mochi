;; Generated by Mochi 0.10.40 on 2025-07-25 23:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (push h it)
  (let/ec _return (begin
(set! h (append h (list it)))
(define i (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 1))
(let/ec _break (let loop ()
  (if (and (> i 0) (> (if (if h (list-ref h (- i 1)) #f) (hash-ref (if h (list-ref h (- i 1)) #f) "s" #f) #f) (if (if h (list-ref h i) #f) (hash-ref (if h (list-ref h i) #f) "s" #f) #f))) (let ()
    (define tmp (if h (list-ref h (- i 1)) #f))
    (set! h (list-set h (- i 1) (if h (list-ref h i) #f)))
    (set! h (list-set h i tmp))
    (set! i (- i 1))
    (loop)) (void))))
(_return h)
))
)
(define (step h nv dir)
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (or (equal? (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 0) (<= (* nv nv) (if (if h (list-ref h 0) #f) (hash-ref (if h (list-ref h 0) #f) "s" #f) #f))) (let ()
    (set! h (push h (hash "s" (* nv nv) "a" nv "b" 0)))
    (set! nv (let ([__l nv] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define s (if (if h (list-ref h 0) #f) (hash-ref (if h (list-ref h 0) #f) "s" #f) #f))
(define v (list))
(let/ec _break (let loop ()
  (if (and (> (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 0) (equal? (if (if h (list-ref h 0) #f) (hash-ref (if h (list-ref h 0) #f) "s" #f) #f) s)) (let ()
    (define it (if h (list-ref h 0) #f))
    (set! h (sublist h 1 (length h)))
    (set! v (append v (list (list (if it (hash-ref it "a" #f) #f) (if it (hash-ref it "b" #f) #f)))))
    (if (> (if it (hash-ref it "a" #f) #f) (if it (hash-ref it "b" #f) #f)) (let ()
(set! h (push h (hash "s" (let ([__l (* (if it (hash-ref it "a" #f) #f) (if it (hash-ref it "a" #f) #f))] [__r (* (let ([__l (if it (hash-ref it "b" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (if it (hash-ref it "b" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "a" (if it (hash-ref it "a" #f) #f) "b" (let ([__l (if it (hash-ref it "b" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
    (loop)) (void))))
(define list_ (list))
(let/ec _break (for ([p v])
  (let/ec _cont
(set! list_ (append list_ (list p)))
  )))
(define temp list_)
(let/ec _break (for ([p temp])
  (let/ec _cont
(if (not (equal? (if p (list-ref p 0) #f) (if p (list-ref p 1) #f))) (let ()
(set! list_ (append list_ (list (list (if p (list-ref p 1) #f) (if p (list-ref p 0) #f)))))
) (void))
  )))
(set! temp list_)
(let/ec _break (for ([p temp])
  (let/ec _cont
(if (not (equal? (if p (list-ref p 1) #f) 0)) (let ()
(set! list_ (append list_ (list (list (if p (list-ref p 0) #f) (- (if p (list-ref p 1) #f))))))
) (void))
  )))
(set! temp list_)
(let/ec _break (for ([p temp])
  (let/ec _cont
(if (not (equal? (if p (list-ref p 0) #f) 0)) (let ()
(set! list_ (append list_ (list (list (- (if p (list-ref p 0) #f)) (if p (list-ref p 1) #f)))))
) (void))
  )))
(define bestDot (- 999999999))
(define best dir)
(let/ec _break (for ([p list_])
  (let/ec _cont
(define cross (- (* (if p (list-ref p 0) #f) (if dir (list-ref dir 1) #f)) (* (if p (list-ref p 1) #f) (if dir (list-ref dir 0) #f))))
(if (>= cross 0) (let ()
(define dot (let ([__l (* (if p (list-ref p 0) #f) (if dir (list-ref dir 0) #f))] [__r (* (if p (list-ref p 1) #f) (if dir (list-ref dir 1) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (> dot bestDot) (let ()
(set! bestDot dot)
(set! best p)
) (void))
) (void))
  )))
(_return (hash "d" best "heap" h "n" nv))
))
)
(define (positions n)
  (let/ec _return (begin
(define pos (list))
(define x 0)
(define y 0)
(define dir (list 0 1))
(define heap (list))
(define nv 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! pos (append pos (list (list x y))))
    (define st (step heap nv dir))
    (set! dir (if st (hash-ref st "d" #f) #f))
    (set! heap (if st (hash-ref st "heap" #f) #f))
    (set! nv (int (if st (hash-ref st "n" #f) #f)))
    (set! x (let ([__l x] [__r (if dir (list-ref dir 0) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! y (let ([__l y] [__r (if dir (list-ref dir 1) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return pos)
))
)
(define (pad s w)
  (let/ec _return (begin
(define r s)
(let/ec _break (let loop ()
  (if (< (cond [(string? r) (string-length r)] [(hash? r) (hash-count r)] [else (length r)]) w) (let ()
    (set! r (string-append r " "))
    (loop)) (void))))
(_return r)
))
)
(define (main)
  (let/ec _return (begin
(define pts (positions 40))
(displayln "The first 40 Babylonian spiral points are:")
(define line "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? pts) (string-length pts)] [(hash? pts) (hash-count pts)] [else (length pts)])) (let ()
    (define p (if pts (list-ref pts i) #f))
    (define s (pad (string-append (string-append (string-append (string-append "(" (format "~a" (if p (list-ref p 0) #f))) ", ") (format "~a" (if p (list-ref p 1) #f))) ")") 10))
    (set! line (string-append line s))
    (if (equal? (modulo (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 10) 0) (let ()
(displayln line)
(set! line "")
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
