;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (padLeft s w)
  (let/ec _return (begin
(define res "")
(define n (- w (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(let/ec _break (let loop ()
  (if (> n 0) (let ()
    (set! res (string-append res " "))
    (set! n (- n 1))
    (loop)) (void))))
(_return (string-append res s))
))
)
(define (indexOfFrom s ch start)
  (let/ec _return (begin
(define i start)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (containsStr s sub)
  (let/ec _return (begin
(define i 0)
(define sl (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(define subl (cond [(string? sub) (string-length sub)] [(hash? sub) (hash-count sub)] [else (length sub)]))
(let/ec _break (let loop ()
  (if (<= i (- sl subl)) (let ()
    (if (string=? (substring s i (let ([__l i] [__r subl]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sub) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (distinct slist)
  (let/ec _return (begin
(define res (list))
(for ([s slist])
(define found #f)
(for ([r res])
(if (equal? r s) (let ()
(set! found #t)
(_break)
) (void))
)
(if (not found) (let ()
(set! res (append res (list s)))
) (void))
)
(_return res)
))
)
(define (permutations xs)
  (let/ec _return (begin
(if (<= (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1) (let ()
(_return (list xs))
) (void))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (define rest (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (not (equal? j i)) (let ()
(set! rest (append rest (list (list-ref xs j))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define subs (permutations rest))
    (for ([p subs])
(define perm (list (list-ref xs i)))
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)])) (let ()
    (set! perm (append perm (list (list-ref p k))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! res (append res (list perm)))
)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (headTailOverlap s1 s2)
  (let/ec _return (begin
(define start 0)
(let/ec _break (let loop ()
  (if #t (let ()
    (define ix (indexOfFrom s1 (substring s2 0 1) start))
    (if (equal? ix (- 0 1)) (let ()
(_return 0)
) (void))
    (set! start ix)
    (if (equal? (substring s2 0 (- (cond [(string? s1) (string-length s1)] [(hash? s1) (hash-count s1)] [else (length s1)]) start)) (substring s1 start (cond [(string? s1) (string-length s1)] [(hash? s1) (hash-count s1)] [else (length s1)]))) (let ()
(_return (- (cond [(string? s1) (string-length s1)] [(hash? s1) (hash-count s1)] [else (length s1)]) start))
) (void))
    (set! start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (deduplicate slist)
  (let/ec _return (begin
(define arr (distinct slist))
(define filtered (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let ()
    (define s1 (list-ref arr i))
    (define within #f)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let ()
    (if (and (not (equal? j i)) (containsStr (list-ref arr j) s1)) (let ()
(set! within #t)
(_break)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (not within) (let ()
(set! filtered (append filtered (list s1)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return filtered)
))
)
(define (joinAll ss)
  (let/ec _return (begin
(define out "")
(for ([s ss])
(set! out (string-append out s))
)
(_return out)
))
)
(define (shortestCommonSuperstring slist)
  (let/ec _return (begin
(define ss (deduplicate slist))
(define shortest (joinAll ss))
(define perms (permutations ss))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? perms) (string-length perms)] [(hash? perms) (hash-count perms)] [else (length perms)])) (let ()
    (define perm (list-ref perms idx))
    (define sup (list-ref perm 0))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (- (cond [(string? ss) (string-length ss)] [(hash? ss) (hash-count ss)] [else (length ss)]) 1)) (let ()
    (define ov (headTailOverlap (list-ref perm i) (list-ref perm (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! sup (string-append sup (substring (list-ref perm (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ov (cond [(string? (list-ref perm (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (string-length (list-ref perm (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))] [(hash? (list-ref perm (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (hash-count (list-ref perm (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))] [else (length (list-ref perm (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (< (cond [(string? sup) (string-length sup)] [(hash? sup) (hash-count sup)] [else (length sup)]) (cond [(string? shortest) (string-length shortest)] [(hash? shortest) (hash-count shortest)] [else (length shortest)])) (let ()
(set! shortest sup)
) (void))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return shortest)
))
)
(define (printCounts seq)
  (let/ec _return (begin
(define a 0)
(define c 0)
(define g 0)
(define t 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? seq) (string-length seq)] [(hash? seq) (hash-count seq)] [else (length seq)])) (let ()
    (define ch (substring seq i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch "A") (let ()
(set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? ch "C") (let ()
(set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? ch "G") (let ()
(set! g (let ([__l g] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? ch "T") (let ()
(set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
))
))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define total (cond [(string? seq) (string-length seq)] [(hash? seq) (hash-count seq)] [else (length seq)]))
(displayln (string-append (string-append "\nNucleotide counts for " seq) ":\n"))
(displayln (let ([__l (padLeft "A" 10)] [__r (padLeft (format "~a" a) 12)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(displayln (let ([__l (padLeft "C" 10)] [__r (padLeft (format "~a" c) 12)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(displayln (let ([__l (padLeft "G" 10)] [__r (padLeft (format "~a" g) 12)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(displayln (let ([__l (padLeft "T" 10)] [__r (padLeft (format "~a" t) 12)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(displayln (let ([__l (padLeft "Other" 10)] [__r (padLeft (format "~a" (- total (let ([__l (let ([__l (let ([__l a] [__r c]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r g]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r t]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) 12)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(displayln "  ____________________")
(displayln (let ([__l (padLeft "Total length" 14)] [__r (padLeft (format "~a" total) 8)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (main)
  (let/ec _return (begin
(define tests (list (list "TA" "AAG" "TA" "GAA" "TA") (list "CATTAGGG" "ATTAG" "GGG" "TA") (list "AAGAUGGA" "GGAGCGCAUC" "AUCGCAAUAAGGA") (list "ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT" "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT" "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA" "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC" "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT" "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC" "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT" "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC" "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC" "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT" "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC" "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA" "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA")))
(for ([seqs tests])
(define scs (shortestCommonSuperstring seqs))
(printCounts scs)
)
))
)
(main)
