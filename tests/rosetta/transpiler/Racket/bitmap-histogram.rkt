;; Generated by Mochi 0.10.42 on 2025-07-27 22:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (image)
  (let/ec _return (begin
(_return (list (list 0 0 10000) (list 65535 65535 65535) (list 65535 65535 65535)))
))
)
(define (histogram g bins)
  (let/ec _return (begin
(if (<= bins 0) (let ()
(set! bins (cond [(string? (if g (list-ref g (int 0)) #f)) (string-length (if g (list-ref g (int 0)) #f))] [(hash? (if g (list-ref g (int 0)) #f)) (hash-count (if g (list-ref g (int 0)) #f))] [else (length (if g (list-ref g (int 0)) #f))]))
) (void))
(define h (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i bins) (let ()
    (set! h (append h (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define y 0)
(let/ec _break (let loop ()
  (if (< y (cond [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)])) (let ()
    (define row (if g (list-ref g (int y)) #f))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let ()
    (define p (if row (list-ref row (int x)) #f))
    (define idx (int (quotient (* p (- bins 1)) 65535)))
    (set! h (list-set h (int idx) (let ([__l (if h (list-ref h (int idx)) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return h)
))
)
(define (medianThreshold h)
  (let/ec _return (begin
(define lb 0)
(define ub (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 1))
(define lSum 0)
(define uSum 0)
(let/ec _break (let loop ()
  (if (<= lb ub) (let ()
    (if (< (let ([__l lSum] [__r (if h (list-ref h (int lb)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l uSum] [__r (if h (list-ref h (int ub)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(set! lSum (let ([__l lSum] [__r (if h (list-ref h (int lb)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! lb (let ([__l lb] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! uSum (let ([__l uSum] [__r (if h (list-ref h (int ub)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! ub (- ub 1))
))
    (loop)) (void))))
(_return (int (quotient (* ub 65535) (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]))))
))
)
(define (threshold g t)
  (let/ec _return (begin
(define out (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y (cond [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)])) (let ()
    (define row (if g (list-ref g (int y)) #f))
    (define newRow (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let ()
    (if (< (if row (list-ref row (int x)) #f) t) (let ()
(set! newRow (append newRow (list 0)))
) (let ()
(set! newRow (append newRow (list 65535)))
))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list newRow)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (printImage g)
  (let/ec _return (begin
(define y 0)
(let/ec _break (let loop ()
  (if (< y (cond [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)])) (let ()
    (define row (if g (list-ref g (int y)) #f))
    (define line "")
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let ()
    (if (equal? (if row (list-ref row (int x)) #f) 0) (let ()
(set! line (string-append line "0"))
) (let ()
(set! line (string-append line "1"))
))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(define img (image))
(define h (histogram img 0))
(displayln (string-append "Histogram: " (format "~a" h)))
(define t (medianThreshold h))
(displayln (string-append "Threshold: " (format "~a" t)))
(define bw (threshold img t))
(printImage bw)
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
