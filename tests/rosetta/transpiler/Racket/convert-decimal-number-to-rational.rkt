;; Generated by Mochi 0.10.55 on 2025-08-03 07:58 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (gcd a b)
  (let/ec _return (begin
(define x a)
(if (< x 0) (let ()
(set! x (- x))
) (void))
(define y b)
(if (< y 0) (let ()
(set! y (- y))
) (void))
(let/ec _break (let loop ()
  (if (not (equal? y 0)) (let ()
    (define t (modulo x y))
    (set! x y)
    (set! y t)
    (loop)) (void))))
(_return x)
))
)
(define (parseRational s)
  (let/ec _return (begin
(define intPart 0)
(define fracPart 0)
(define denom 1)
(define afterDot #f)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch ".") (let ()
(set! afterDot #t)
) (let ()
(define d (- (int ch) (int "0")))
(if (not afterDot) (let ()
(set! intPart (let ([__l (* intPart 10)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! fracPart (let ([__l (* fracPart 10)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! denom (* denom 10))
))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define num (let ([__l (* intPart denom)] [__r fracPart]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define g (gcd num denom))
(_return (hash "num" (int (quotient num g)) "den" (int (quotient denom g))))
))
)
(define (main)
  (let/ec _return (begin
(define inputs (list "0.9054054" "0.518518" "0.75"))
(let/ec _break (for ([s inputs])
  (let/ec _cont
(define r (parseRational s))
(displayln (string-append (string-append (string-append (string-append s " = ") (format "~a" (if r (hash-ref r "num" #f) #f))) "/") (format "~a" (if r (hash-ref r "den" #f) #f))))
  )))
))
)
(main)
