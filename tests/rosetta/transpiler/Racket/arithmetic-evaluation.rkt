;; Generated by Mochi 0.10.38 on 2025-07-23 16:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (skipWS p)
  (let/ec _return (begin
(define i (hash-ref p "pos"))
(let/ec _break (let loop ()
  (if (and (< i (cond [(string? (hash-ref p "expr")) (string-length (hash-ref p "expr"))] [(hash? (hash-ref p "expr")) (hash-count (hash-ref p "expr"))] [else (length (hash-ref p "expr"))])) (string=? (substring (hash-ref p "expr") i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ")) (let ()
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! p (hash-set p "pos" i))
(_return p)
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define n 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (- (let ([__l (* n 10)] [__r (int (substring str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 48))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return n)
))
)
(define (parseNumber p)
  (let/ec _return (begin
(set! p (skipWS p))
(define start (hash-ref p "pos"))
(let/ec _break (let loop ()
  (if (< (hash-ref p "pos") (cond [(string? (hash-ref p "expr")) (string-length (hash-ref p "expr"))] [(hash? (hash-ref p "expr")) (hash-count (hash-ref p "expr"))] [else (length (hash-ref p "expr"))])) (let ()
    (define ch (substring (hash-ref p "expr") (hash-ref p "pos") (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (and (string>=? ch "0") (string<=? ch "9")) (let ()
(set! p (hash-set p "pos" (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(_break)
))
    (loop)) (void))))
(define token (substring (hash-ref p "expr") start (hash-ref p "pos")))
(_return (hash "v" (parseIntStr token) "p" p))
))
)
(define (parseFactor p)
  (let/ec _return (begin
(set! p (skipWS p))
(if (and (< (hash-ref p "pos") (cond [(string? (hash-ref p "expr")) (string-length (hash-ref p "expr"))] [(hash? (hash-ref p "expr")) (hash-count (hash-ref p "expr"))] [else (length (hash-ref p "expr"))])) (string=? (substring (hash-ref p "expr") (hash-ref p "pos") (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "(")) (let ()
(set! p (hash-set p "pos" (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define r (parseExpr p))
(define v (hash-ref r "v"))
(set! p (hash-ref r "p"))
(set! p (skipWS p))
(if (and (< (hash-ref p "pos") (cond [(string? (hash-ref p "expr")) (string-length (hash-ref p "expr"))] [(hash? (hash-ref p "expr")) (hash-count (hash-ref p "expr"))] [else (length (hash-ref p "expr"))])) (string=? (substring (hash-ref p "expr") (hash-ref p "pos") (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ")")) (let ()
(set! p (hash-set p "pos" (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(_return (hash "v" v "p" p))
) (void))
(if (and (< (hash-ref p "pos") (cond [(string? (hash-ref p "expr")) (string-length (hash-ref p "expr"))] [(hash? (hash-ref p "expr")) (hash-count (hash-ref p "expr"))] [else (length (hash-ref p "expr"))])) (string=? (substring (hash-ref p "expr") (hash-ref p "pos") (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "-")) (let ()
(set! p (hash-set p "pos" (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define r (parseFactor p))
(define v (hash-ref r "v"))
(set! p (hash-ref r "p"))
(_return (hash "v" (- v) "p" p))
) (void))
(_return (parseNumber p))
))
)
(define (powInt base exp)
  (let/ec _return (begin
(define r 1)
(define b base)
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let ()
    (if (equal? (modulo e 2) 1) (let ()
(set! r (* r b))
) (void))
    (set! b (* b b))
    (set! e (quotient e (int 2)))
    (loop)) (void))))
(_return r)
))
)
(define (parsePower p)
  (let/ec _return (begin
(define r (parseFactor p))
(define v (hash-ref r "v"))
(set! p (hash-ref r "p"))
(let/ec _break (let loop ()
  (if #t (let ()
    (set! p (skipWS p))
    (if (and (< (hash-ref p "pos") (cond [(string? (hash-ref p "expr")) (string-length (hash-ref p "expr"))] [(hash? (hash-ref p "expr")) (hash-count (hash-ref p "expr"))] [else (length (hash-ref p "expr"))])) (string=? (substring (hash-ref p "expr") (hash-ref p "pos") (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "^")) (let ()
(set! p (hash-set p "pos" (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define r2 (parseFactor p))
(define rhs (hash-ref r2 "v"))
(set! p (hash-ref r2 "p"))
(set! v (powInt v rhs))
) (let ()
(_break)
))
    (loop)) (void))))
(_return (hash "v" v "p" p))
))
)
(define (parseTerm p)
  (let/ec _return (begin
(define r (parsePower p))
(define v (hash-ref r "v"))
(set! p (hash-ref r "p"))
(let/ec _break (let loop ()
  (if #t (let ()
    (set! p (skipWS p))
    (if (< (hash-ref p "pos") (cond [(string? (hash-ref p "expr")) (string-length (hash-ref p "expr"))] [(hash? (hash-ref p "expr")) (hash-count (hash-ref p "expr"))] [else (length (hash-ref p "expr"))])) (let ()
(define op (substring (hash-ref p "expr") (hash-ref p "pos") (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(if (string=? op "*") (let ()
(set! p (hash-set p "pos" (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define r2 (parsePower p))
(define rhs (hash-ref r2 "v"))
(set! p (hash-ref r2 "p"))
(set! v (* v rhs))
(loop)
) (void))
(if (string=? op "/") (let ()
(set! p (hash-set p "pos" (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define r2 (parsePower p))
(define rhs (hash-ref r2 "v"))
(set! p (hash-ref r2 "p"))
(set! v (quotient v (int rhs)))
(loop)
) (void))
) (void))
    (_break)
    (loop)) (void))))
(_return (hash "v" v "p" p))
))
)
(define (parseExpr p)
  (let/ec _return (begin
(define r (parseTerm p))
(define v (hash-ref r "v"))
(set! p (hash-ref r "p"))
(let/ec _break (let loop ()
  (if #t (let ()
    (set! p (skipWS p))
    (if (< (hash-ref p "pos") (cond [(string? (hash-ref p "expr")) (string-length (hash-ref p "expr"))] [(hash? (hash-ref p "expr")) (hash-count (hash-ref p "expr"))] [else (length (hash-ref p "expr"))])) (let ()
(define op (substring (hash-ref p "expr") (hash-ref p "pos") (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(if (string=? op "+") (let ()
(set! p (hash-set p "pos" (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define r2 (parseTerm p))
(define rhs (hash-ref r2 "v"))
(set! p (hash-ref r2 "p"))
(set! v (let ([__l v] [__r rhs]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
(if (string=? op "-") (let ()
(set! p (hash-set p "pos" (let ([__l (hash-ref p "pos")] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define r2 (parseTerm p))
(define rhs (hash-ref r2 "v"))
(set! p (hash-ref r2 "p"))
(set! v (- v rhs))
(loop)
) (void))
) (void))
    (_break)
    (loop)) (void))))
(_return (hash "v" v "p" p))
))
)
(define (evalExpr expr)
  (let/ec _return (begin
(define p (hash "expr" expr "pos" 0))
(define r (parseExpr p))
(_return (hash-ref r "v"))
))
)
(define (main)
  (let/ec _return (begin
(define expr "2*(3-1)+2*5")
(displayln (string-append (string-append expr " = ") (format "~a" (evalExpr expr))))
))
)
(main)
