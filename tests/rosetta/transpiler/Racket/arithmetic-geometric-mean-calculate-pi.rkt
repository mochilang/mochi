;; Generated by Mochi 0.10.38 on 2025-07-23 16:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (abs x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let ()
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (agmPi)
  (let/ec _return (begin
(define a 1.0)
(define g (/ 1.0 (sqrtApprox 2.0)))
(define sum 0.0)
(define pow 2.0)
(let/ec _break (let loop ()
  (if (> (abs (- a g)) 1e-15) (let ()
    (define t (/ (let ([__l a] [__r g]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (define u (sqrtApprox (* a g)))
    (set! a t)
    (set! g u)
    (set! pow (* pow 2.0))
    (define diff (- (* a a) (* g g)))
    (set! sum (let ([__l sum] [__r (* diff pow)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define pi (/ (* (* 4.0 a) a) (- 1.0 sum)))
(_return pi)
))
)
(define (main)
  (let/ec _return (begin
(displayln (format "~a" (agmPi)))
))
)
(main)
