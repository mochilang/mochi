;; Generated by Mochi 0.10.41 on 2025-07-27 15:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (bernoulli n)
  (let/ec _return (begin
(define a (list))
(define m 0)
(let/ec _break (let loop ()
  (if (<= m n) (let ()
    (set! a (append a (list (/ 1 (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (define j m)
    (let/ec _break (let loop ()
  (if (>= j 1) (let ()
    (set! a (list-set a (int (- j 1)) (* j (- (if a (list-ref a (int (- j 1))) #f) (if a (list-ref a (int j)) #f)))))
    (set! j (- j 1))
    (loop)) (void))))
    (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (if a (list-ref a (int 0)) #f))
))
)
(define (padStart s width pad)
  (let/ec _return (begin
(define out s)
(let/ec _break (let loop ()
  (if (< (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) width) (let ()
    (set! out (string-append pad out))
    (loop)) (void))))
(_return out)
))
)
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i 61)
(define b (bernoulli i))
(if (not (equal? (num b) 0)) (let ()
(define numStr (format "~a" (num b)))
(define denStr (format "~a" (denom b)))
(displayln (string-append (string-append (string-append (string-append (string-append "B(" (pad-start (format "~a" i) 2 " ")) ") =") (pad-start numStr 45 " ")) "/") denStr))
) (void))
      (set! i (+ i 1))
      (loop)))
))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
