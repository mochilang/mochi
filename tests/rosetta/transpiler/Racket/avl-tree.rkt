;; Generated by Mochi 0.10.39 on 2025-07-24 13:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (Node data)
  (let/ec _return (begin
(_return (hash "Data" data "Balance" 0 "Link" (list #f #f)))
))
)
(define (getLink n dir)
  (let/ec _return (begin
(_return (list-ref (if n (hash-ref n "Link" #f) #f) dir))
))
)
(define (setLink n dir v)
  (let/ec _return (begin
(define links (if n (hash-ref n "Link" #f) #f))
(set! links (list-set links dir v))
(set! n (hash-set (or n (hash)) "Link" links))
))
)
(define (opp dir)
  (let/ec _return (begin
(_return (- 1 dir))
))
)
(define (single root dir)
  (let/ec _return (begin
(define tmp (getLink root (opp dir)))
(setLink root (opp dir) (getLink tmp dir))
(setLink tmp dir root)
(_return tmp)
))
)
(define (double root dir)
  (let/ec _return (begin
(define tmp (getLink (getLink root (opp dir)) dir))
(setLink (getLink root (opp dir)) dir (getLink tmp (opp dir)))
(setLink tmp (opp dir) (getLink root (opp dir)))
(setLink root (opp dir) tmp)
(set! tmp (getLink root (opp dir)))
(setLink root (opp dir) (getLink tmp dir))
(setLink tmp dir root)
(_return tmp)
))
)
(define (adjustBalance root dir bal)
  (let/ec _return (begin
(define n (getLink root dir))
(define nn (getLink n (opp dir)))
(if (equal? (if nn (hash-ref nn "Balance" #f) #f) 0) (let ()
(set! root (hash-set (or root (hash)) "Balance" 0))
(set! n (hash-set (or n (hash)) "Balance" 0))
) (let ()
(if (equal? (if nn (hash-ref nn "Balance" #f) #f) bal) (let ()
(set! root (hash-set (or root (hash)) "Balance" (- bal)))
(set! n (hash-set (or n (hash)) "Balance" 0))
) (let ()
(set! root (hash-set (or root (hash)) "Balance" 0))
(set! n (hash-set (or n (hash)) "Balance" bal))
))
))
(set! nn (hash-set (or nn (hash)) "Balance" 0))
))
)
(define (insertBalance root dir)
  (let/ec _return (begin
(define n (getLink root dir))
(define bal (- (* 2 dir) 1))
(if (equal? (if n (hash-ref n "Balance" #f) #f) bal) (let ()
(set! root (hash-set (or root (hash)) "Balance" 0))
(set! n (hash-set (or n (hash)) "Balance" 0))
(_return (single root (opp dir)))
) (void))
(adjustBalance root dir bal)
(_return (double root (opp dir)))
))
)
(define (insertR root data)
  (let/ec _return (begin
(if (equal? root #f) (let ()
(_return (hash "node" (Node data) "done" #f))
) (void))
(define node root)
(define dir 0)
(if (< (int (if node (hash-ref node "Data" #f) #f)) data) (let ()
(set! dir 1)
) (void))
(define r (insertR (getLink node dir) data))
(setLink node dir (if r (hash-ref r "node" #f) #f))
(if (if r (hash-ref r "done" #f) #f) (let ()
(_return (hash "node" node "done" #t))
) (void))
(set! node (hash-set (or node (hash)) "Balance" (let ([__l (int (if node (hash-ref node "Balance" #f) #f))] [__r (- (* 2 dir) 1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(if (equal? (if node (hash-ref node "Balance" #f) #f) 0) (let ()
(_return (hash "node" node "done" #t))
) (void))
(if (or (equal? (if node (hash-ref node "Balance" #f) #f) 1) (equal? (if node (hash-ref node "Balance" #f) #f) (- 1))) (let ()
(_return (hash "node" node "done" #f))
) (void))
(_return (hash "node" (insertBalance node dir) "done" #t))
))
)
(define (Insert tree data)
  (let/ec _return (begin
(define r (insertR tree data))
(_return (if r (hash-ref r "node" #f) #f))
))
)
(define (removeBalance root dir)
  (let/ec _return (begin
(define n (getLink root (opp dir)))
(define bal (- (* 2 dir) 1))
(if (equal? (if n (hash-ref n "Balance" #f) #f) (- bal)) (let ()
(set! root (hash-set (or root (hash)) "Balance" 0))
(set! n (hash-set (or n (hash)) "Balance" 0))
(_return (hash "node" (single root dir) "done" #f))
) (void))
(if (equal? (if n (hash-ref n "Balance" #f) #f) bal) (let ()
(adjustBalance root (opp dir) (- bal))
(_return (hash "node" (double root dir) "done" #f))
) (void))
(set! root (hash-set (or root (hash)) "Balance" (- bal)))
(set! n (hash-set (or n (hash)) "Balance" bal))
(_return (hash "node" (single root dir) "done" #t))
))
)
(define (removeR root data)
  (let/ec _return (begin
(if (equal? root #f) (let ()
(_return (hash "node" #f "done" #f))
) (void))
(define node root)
(if (equal? (int (if node (hash-ref node "Data" #f) #f)) data) (let ()
(if (equal? (getLink node 0) #f) (let ()
(_return (hash "node" (getLink node 1) "done" #f))
) (void))
(if (equal? (getLink node 1) #f) (let ()
(_return (hash "node" (getLink node 0) "done" #f))
) (void))
(define heir (getLink node 0))
(let/ec _break (let loop ()
  (if (not (equal? (getLink heir 1) #f)) (let ()
    (set! heir (getLink heir 1))
    (loop)) (void))))
(set! node (hash-set (or node (hash)) "Data" (if heir (hash-ref heir "Data" #f) #f)))
(set! data (int (if heir (hash-ref heir "Data" #f) #f)))
) (void))
(define dir 0)
(if (< (int (if node (hash-ref node "Data" #f) #f)) data) (let ()
(set! dir 1)
) (void))
(define r (removeR (getLink node dir) data))
(setLink node dir (if r (hash-ref r "node" #f) #f))
(if (if r (hash-ref r "done" #f) #f) (let ()
(_return (hash "node" node "done" #t))
) (void))
(set! node (hash-set (or node (hash)) "Balance" (- (let ([__l (int (if node (hash-ref node "Balance" #f) #f))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (* 2 dir))))
(if (or (equal? (if node (hash-ref node "Balance" #f) #f) 1) (equal? (if node (hash-ref node "Balance" #f) #f) (- 1))) (let ()
(_return (hash "node" node "done" #t))
) (void))
(if (equal? (if node (hash-ref node "Balance" #f) #f) 0) (let ()
(_return (hash "node" node "done" #f))
) (void))
(_return (removeBalance node dir))
))
)
(define (Remove tree data)
  (let/ec _return (begin
(define r (removeR tree data))
(_return (if r (hash-ref r "node" #f) #f))
))
)
(define (indentStr n)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! s (string-append s " "))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (dumpNode node indent comma)
  (let/ec _return (begin
(define sp (indentStr indent))
(if (equal? node #f) (let ()
(define line (string-append sp "null"))
(if comma (let ()
(set! line (string-append line ","))
) (void))
(displayln line)
) (let ()
(displayln (string-append sp "{"))
(displayln (string-append (string-append (string-append (indentStr (let ([__l indent] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "\"Data\": ") (format "~a" (if node (hash-ref node "Data" #f) #f))) ","))
(displayln (string-append (string-append (string-append (indentStr (let ([__l indent] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "\"Balance\": ") (format "~a" (if node (hash-ref node "Balance" #f) #f))) ","))
(displayln (string-append (indentStr (let ([__l indent] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "\"Link\": ["))
(dumpNode (getLink node 0) (let ([__l indent] [__r 6]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #t)
(dumpNode (getLink node 1) (let ([__l indent] [__r 6]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f)
(displayln (string-append (indentStr (let ([__l indent] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "]"))
(define end (string-append sp "}"))
(if comma (let ()
(set! end (string-append end ","))
) (void))
(displayln end)
))
))
)
(define (dump node indent)
  (let/ec _return (begin
(dumpNode node indent #f)
))
)
(define (main)
  (let/ec _return (begin
(define tree #f)
(displayln "Empty tree:")
(dump tree 0)
(displayln "")
(displayln "Insert test:")
(set! tree (Insert tree 3))
(set! tree (Insert tree 1))
(set! tree (Insert tree 4))
(set! tree (Insert tree 1))
(set! tree (Insert tree 5))
(dump tree 0)
(displayln "")
(displayln "Remove test:")
(set! tree (Remove tree 3))
(set! tree (Remove tree 1))
(define t tree)
(set! t (hash-set (or t (hash)) "Balance" 0))
(set! tree t)
(dump tree 0)
))
)
(main)
