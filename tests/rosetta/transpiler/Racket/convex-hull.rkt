;; Generated by Mochi 0.10.55 on 2025-08-03 07:58 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (ccw a b c)
  (let/ec _return (begin
(define lhs (* (- (if b (hash-ref b "x" #f) #f) (if a (hash-ref a "x" #f) #f)) (- (if c (hash-ref c "y" #f) #f) (if a (hash-ref a "y" #f) #f))))
(define rhs (* (- (if b (hash-ref b "y" #f) #f) (if a (hash-ref a "y" #f) #f)) (- (if c (hash-ref c "x" #f) #f) (if a (hash-ref a "x" #f) #f))))
(_return (> lhs rhs))
))
)
(define (sortPoints ps)
  (let/ec _return (begin
(define arr ps)
(define n (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- n 1)) (let ()
    (define p (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f))
    (define q (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
    (if (or (> (if p (hash-ref p "x" #f) #f) (if q (hash-ref q "x" #f) #f)) (and (equal? (if p (hash-ref p "x" #f) #f) (if q (hash-ref q "x" #f) #f)) (> (if p (hash-ref p "y" #f) #f) (if q (hash-ref q "y" #f) #f)))) (let ()
(set! arr (list-set arr (int j) q))
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) p))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (convexHull ps)
  (let/ec _return (begin
(set! ps (sortPoints ps))
(define h (list))
(let/ec _break (for ([pt ps])
  (let/ec _cont
(let/ec _break (let loop ()
  (if (and (>= (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 2) (equal? (ccw (if h (if (hash? h) (hash-ref h (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 2) #f) (list-ref h (int (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 2)))) #f) (if h (if (hash? h) (hash-ref h (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 1) #f) (list-ref h (int (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 1)))) #f) pt) #f)) (let ()
    (set! h (slice h 0 (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 1)))
    (loop)) (void))))
(set! h (append h (list pt)))
  )))
(define i (- (cond [(string? ps) (string-length ps)] [(hash? ps) (hash-count ps)] [else (length ps)]) 2))
(define t (let ([__l (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (define pt (if ps (if (hash? ps) (hash-ref ps i #f) (list-ref ps (int i))) #f))
    (let/ec _break (let loop ()
  (if (and (>= (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) t) (equal? (ccw (if h (if (hash? h) (hash-ref h (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 2) #f) (list-ref h (int (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 2)))) #f) (if h (if (hash? h) (hash-ref h (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 1) #f) (list-ref h (int (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 1)))) #f) pt) #f)) (let ()
    (set! h (slice h 0 (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 1)))
    (loop)) (void))))
    (set! h (append h (list pt)))
    (set! i (- i 1))
    (loop)) (void))))
(_return (slice h 0 (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 1)))
))
)
(define (pointStr p)
  (let/ec _return (begin
(_return (string-append (string-append (string-append (string-append "(" (format "~a" (if p (hash-ref p "x" #f) #f))) ",") (format "~a" (if p (hash-ref p "y" #f) #f))) ")"))
))
)
(define (hullStr h)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)])) (let ()
    (set! s (string-append s (pointStr (if h (if (hash? h) (hash-ref h i #f) (list-ref h (int i))) #f))))
    (if (< i (- (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 1)) (let ()
(set! s (string-append s " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define pts (list (hash "x" 16 "y" 3) (hash "x" 12 "y" 17) (hash "x" 0 "y" 6) (hash "x" (- 4) "y" (- 6)) (hash "x" 16 "y" 6) (hash "x" 16 "y" (- 7)) (hash "x" 16 "y" (- 3)) (hash "x" 17 "y" (- 4)) (hash "x" 5 "y" 19) (hash "x" 19 "y" (- 8)) (hash "x" 3 "y" 16) (hash "x" 12 "y" 13) (hash "x" 3 "y" (- 4)) (hash "x" 17 "y" 5) (hash "x" (- 3) "y" 15) (hash "x" (- 3) "y" (- 9)) (hash "x" 0 "y" 11) (hash "x" (- 9) "y" (- 3)) (hash "x" (- 4) "y" (- 2)) (hash "x" 12 "y" 10)))
(define hull (convexHull pts))
(displayln (string-append "Convex Hull: " (hullStr hull)))
