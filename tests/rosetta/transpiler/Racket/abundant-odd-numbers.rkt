;; Generated by Mochi 0.10.37 on 2025-07-23 12:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (divisors n)
  (let/ec _return (begin
(define divs (list 1))
(define divs2 (list))
(define i 2)
(let/ec _break (let loop ()
  (if (<= (* i i) n) (let ()
    (if (equal? (modulo n i) 0) (let ()
(define j (int (quotient n i)))
(set! divs (append divs (list i)))
(if (not (equal? i j)) (let ()
(set! divs2 (append divs2 (list j)))
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j (- (cond [(string? divs2) (string-length divs2)] [(hash? divs2) (hash-count divs2)] [else (length divs2)]) 1))
(let/ec _break (let loop ()
  (if (>= j 0) (let ()
    (set! divs (append divs (list (list-ref divs2 j))))
    (set! j (- j 1))
    (loop)) (void))))
(_return divs)
))
)
(define (sum xs)
  (let/ec _return (begin
(define tot 0)
(for ([v xs])
(set! tot (let ([__l tot] [__r v]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
)
(_return tot)
))
)
(define (sumStr xs)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (set! s (string-append (string-append s (format "~a" (list-ref xs i))) " + "))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (substring s 0 (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 3)))
))
)
(define (pad2 n)
  (let/ec _return (begin
(define s (format "~a" n))
(if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 2) (let ()
(_return (string-append " " s))
) (void))
(_return s)
))
)
(define (pad5 n)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 5) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (abundantOdd searchFrom countFrom countTo printOne)
  (let/ec _return (begin
(define count countFrom)
(define n searchFrom)
(let/ec _break (let loop ()
  (if (< count countTo) (let ()
    (define divs (divisors n))
    (define tot (apply + divs))
    (if (> tot n) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (and printOne (< count countTo)) (let ()
(set! n (let ([__l n] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
(define s (sumStr divs))
(if (not printOne) (let ()
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (pad2 count) ". ") (pad5 n)) " < ") s) " = ") (format "~a" tot)))
) (let ()
(displayln (string-append (string-append (string-append (string-append (format "~a" n) " < ") s) " = ") (format "~a" tot)))
))
) (void))
    (set! n (let ([__l n] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return n)
))
)
(define (main)
  (let/ec _return (begin
(define max 25)
(displayln (string-append (string-append "The first " (format "~a" max)) " abundant odd numbers are:"))
(define n (abundantOdd 1 0 max #f))
(displayln "\nThe one thousandth abundant odd number is:")
(abundantOdd n max 1000 #t)
(displayln "\nThe first abundant odd number above one billion is:")
(abundantOdd 1000000001 0 1 #t)
))
)
(main)
