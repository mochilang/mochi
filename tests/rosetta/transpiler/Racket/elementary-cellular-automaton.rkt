;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (bitAt x idx)
  (let/ec _return (begin
(define v x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i idx) (let ()
    (set! v (int (quotient v 2)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (modulo v 2))
))
)
(define (outputState state)
  (let/ec _return (begin
(define line "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? state) (string-length state)] [(hash? state) (hash-count state)] [else (length state)])) (let ()
    (if (string=? (substring state i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "1") (let ()
(set! line (string-append line "#"))
) (let ()
(set! line (string-append line " "))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln line)
))
)
(define (step state r)
  (let/ec _return (begin
(define cells (cond [(string? state) (string-length state)] [(hash? state) (hash-count state)] [else (length state)]))
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i cells) (let ()
    (define l (substring state (modulo (let ([__l (- i 1)] [__r cells]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) cells) (let ([__l (modulo (let ([__l (- i 1)] [__r cells]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) cells)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define c (substring state i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define rt (substring state (modulo (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) cells) (let ([__l (modulo (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) cells)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define idx 0)
    (if (string=? l "1") (let ()
(set! idx (let ([__l idx] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (if (string=? c "1") (let ()
(set! idx (let ([__l idx] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (if (string=? rt "1") (let ()
(set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (if (equal? (bitAt r idx) 1) (let ()
(set! out (string-append out "1"))
) (let ()
(set! out (string-append out "0"))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (elem r cells generations state)
  (let/ec _return (begin
(outputState state)
(define g 0)
(define s state)
(let/ec _break (let loop ()
  (if (< g generations) (let ()
    (set! s (step s r))
    (outputState s)
    (set! g (let ([__l g] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (randInit cells seed)
  (let/ec _return (begin
(define s "")
(define val seed)
(define i 0)
(let/ec _break (let loop ()
  (if (< i cells) (let ()
    (set! val (modulo (let ([__l (* val 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
    (if (equal? (modulo val 2) 0) (let ()
(set! s (string-append s "0"))
) (let ()
(set! s (string-append s "1"))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (singleInit cells)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i cells) (let ()
    (if (equal? i (quotient cells 2)) (let ()
(set! s (string-append s "1"))
) (let ()
(set! s (string-append s "0"))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define cells 20)
(define generations 9)
(displayln "Single 1, rule 90:")
(define state (singleInit cells))
(elem 90 cells generations state)
(displayln "Random intial state, rule 30:")
(set! state (randInit cells 3))
(elem 30 cells generations state)
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
