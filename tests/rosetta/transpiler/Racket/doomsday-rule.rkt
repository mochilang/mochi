;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (parseIntStr str)
  (let/ec _return (begin
(define i 0)
(define neg #f)
(if (and (> (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (substring str 0 1) "-")) (let ()
(set! neg #t)
(set! i 1)
) (void))
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let ()
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits (substring str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if neg (let ()
(set! n (- n))
) (void))
(_return n)
))
)
(define days (list "Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday"))
(define (anchorDay y)
  (let/ec _return (begin
(_return (modulo (let ([__l (let ([__l (let ([__l 2] [__r (* 5 (modulo y 4))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* 4 (modulo y 100))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* 6 (modulo y 400))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 7))
))
)
(define (isLeapYear y)
  (let/ec _return (begin
(_return (and (equal? (modulo y 4) 0) (or (not (equal? (modulo y 100) 0)) (equal? (modulo y 400) 0))))
))
)
(define firstDaysCommon (list 3 7 7 4 2 6 4 1 5 3 7 5))
(define firstDaysLeap (list 4 1 7 4 2 6 4 1 5 3 7 5))
(define (main)
  (let/ec _return (begin
(define dates (list "1800-01-06" "1875-03-29" "1915-12-07" "1970-12-23" "2043-05-14" "2077-02-12" "2101-04-02"))
(displayln "Days of week given by Doomsday rule:")
(let/ec _break (for ([date dates])
  (let/ec _cont
(define y (_parse-int-str (sublist date 0 4) 10))
(define m (- (_parse-int-str (sublist date 5 7) 10) 1))
(define d (_parse-int-str (sublist date 8 10) 10))
(define a (anchorDay y))
(define f (if firstDaysCommon (list-ref firstDaysCommon (int m)) #f))
(if (isLeapYear y) (let ()
(set! f (if firstDaysLeap (list-ref firstDaysLeap (int m)) #f))
) (void))
(define w (- d f))
(if (< w 0) (let ()
(set! w (let ([__l 7] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(define dow (modulo (let ([__l a] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 7))
(displayln (string-append (string-append date " -> ") (if days (list-ref days (int dow)) #f)))
  )))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
