;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define PI 3.141592653589793)
(define (sinApprox x)
  (let/ec _return (begin
(define term x)
(define sum x)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 10) (let ()
    (define denom (exact->inexact (* (* 2 n) (let ([__l (* 2 n)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! term (/ (* (* (- term) x) x) denom))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (cosApprox x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 10) (let ()
    (define denom (exact->inexact (* (- (* 2 n) 1) (* 2 n))))
    (set! term (/ (* (* (- term) x) x) denom))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let ()
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define L 10.0)
(define G 9.81)
(define dt 0.2)
(define phi0 (/ PI 4.0))
(define omega (sqrtApprox (/ G L)))
(define t 0.0)
(let/ec _break (let ([step 0])
  (let loop ()
    (when (< step 10)
(define phi (* phi0 (cosApprox (* omega t))))
(define pos (int (let ([__l (* 10.0 (sinApprox phi))] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(displayln (format "~a" pos))
(set! t (let ([__l t] [__r dt]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! step (+ step 1))
      (loop)))
))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
