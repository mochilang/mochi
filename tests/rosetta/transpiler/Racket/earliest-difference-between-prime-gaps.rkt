;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (commatize n)
  (let/ec _return (begin
(define s (format "~a" n))
(define i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 3))
(let/ec _break (let loop ()
  (if (> i 0) (let ()
    (set! s (string-append (string-append (substring s 0 i) ",") (substring s i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))))
    (set! i (- i 3))
    (loop)) (void))))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define data (list (hash "pm" 10 "g1" 4 "s1" 7 "g2" 6 "s2" 23 "d" 16) (hash "pm" 100 "g1" 14 "s1" 113 "g2" 16 "s2" 1831 "d" 1718) (hash "pm" 1000 "g1" 14 "s1" 113 "g2" 16 "s2" 1831 "d" 1718) (hash "pm" 10000 "g1" 36 "s1" 9551 "g2" 38 "s2" 30593 "d" 21042) (hash "pm" 100000 "g1" 70 "s1" 173359 "g2" 72 "s2" 31397 "d" 141962) (hash "pm" 1000000 "g1" 100 "s1" 396733 "g2" 102 "s2" 1444309 "d" 1047576) (hash "pm" 10000000 "g1" 148 "s1" 2010733 "g2" 150 "s2" 13626257 "d" 11615524) (hash "pm" 100000000 "g1" 198 "s1" 46006769 "g2" 200 "s2" 378043979 "d" 332037210) (hash "pm" 1000000000 "g1" 276 "s1" 649580171 "g2" 278 "s2" 4260928601 "d" 3611348430) (hash "pm" 10000000000 "g1" 332 "s1" 5893180121 "g2" 334 "s2" 30827138509 "d" 24933958388) (hash "pm" 100000000000 "g1" 386 "s1" 35238645587 "g2" 388 "s2" 156798792223 "d" 121560146636)))
(let/ec _break (for ([entry data])
  (let/ec _cont
(define pm (commatize (if entry (hash-ref entry "pm" #f) #f)))
(define line1 (string-append (string-append "Earliest difference > " pm) " between adjacent prime gap starting primes:"))
(displayln line1)
(define line2 (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Gap " (format "~a" (if entry (hash-ref entry "g1" #f) #f))) " starts at ") (commatize (if entry (hash-ref entry "s1" #f) #f))) ", gap ") (format "~a" (if entry (hash-ref entry "g2" #f) #f))) " starts at ") (commatize (if entry (hash-ref entry "s2" #f) #f))) ", difference is ") (commatize (if entry (hash-ref entry "d" #f) #f))) "."))
(displayln line2)
(displayln "")
  )))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
