;; Generated by Mochi 0.10.55 on 2025-08-03 07:58 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (primesUpTo n)
  (let/ec _return (begin
(define sieve (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let ()
    (set! sieve (append sieve (list #t)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define p 2)
(let/ec _break (let loop ()
  (if (<= (* p p) n) (let ()
    (if (if sieve (if (hash? sieve) (hash-ref sieve p #f) (list-ref sieve (int p))) #f) (let ()
(define m (* p p))
(let/ec _break (let loop ()
  (if (<= m n) (let ()
    (set! sieve (list-set sieve (int m) #f))
    (set! m (let ([__l m] [__r p]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define res (list))
(define x 2)
(let/ec _break (let loop ()
  (if (<= x n) (let ()
    (if (if sieve (if (hash? sieve) (hash-ref sieve x #f) (list-ref sieve (int x))) #f) (let ()
(set! res (append res (list x)))
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define LIMIT 999999)
(define primes (primesUpTo LIMIT))
(define (longestSeq dir)
  (let/ec _return (begin
(define pd 0)
(define longSeqs (list (list 2)))
(define currSeq (list 2))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? primes) (string-length primes)] [(hash? primes) (hash-count primes)] [else (length primes)])) (let ()
    (define d (- (if primes (if (hash? primes) (hash-ref primes i #f) (list-ref primes (int i))) #f) (if primes (if (hash? primes) (hash-ref primes (- i 1) #f) (list-ref primes (int (- i 1)))) #f)))
    (if (or (and (string=? dir "ascending") (<= d pd)) (and (string=? dir "descending") (>= d pd))) (let ()
(if (> (cond [(string? currSeq) (string-length currSeq)] [(hash? currSeq) (hash-count currSeq)] [else (length currSeq)]) (cond [(string? (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f)) (string-length (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))] [(hash? (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f)) (hash-count (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))] [else (length (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))])) (let ()
(set! longSeqs (list currSeq))
) (let ()
(if (equal? (cond [(string? currSeq) (string-length currSeq)] [(hash? currSeq) (hash-count currSeq)] [else (length currSeq)]) (cond [(string? (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f)) (string-length (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))] [(hash? (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f)) (hash-count (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))] [else (length (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))])) (let ()
(set! longSeqs (append longSeqs (list currSeq)))
) (void))
))
(set! currSeq (list (if primes (if (hash? primes) (hash-ref primes (- i 1) #f) (list-ref primes (int (- i 1)))) #f) (if primes (if (hash? primes) (hash-ref primes i #f) (list-ref primes (int i))) #f)))
) (let ()
(set! currSeq (append currSeq (list (if primes (if (hash? primes) (hash-ref primes i #f) (list-ref primes (int i))) #f))))
))
    (set! pd d)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? currSeq) (string-length currSeq)] [(hash? currSeq) (hash-count currSeq)] [else (length currSeq)]) (cond [(string? (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f)) (string-length (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))] [(hash? (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f)) (hash-count (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))] [else (length (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))])) (let ()
(set! longSeqs (list currSeq))
) (let ()
(if (equal? (cond [(string? currSeq) (string-length currSeq)] [(hash? currSeq) (hash-count currSeq)] [else (length currSeq)]) (cond [(string? (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f)) (string-length (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))] [(hash? (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f)) (hash-count (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))] [else (length (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))])) (let ()
(set! longSeqs (append longSeqs (list currSeq)))
) (void))
))
(displayln (string-append (string-append (string-append (string-append "Longest run(s) of primes with " dir) " differences is ") (format "~a" (cond [(string? (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f)) (string-length (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))] [(hash? (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f)) (hash-count (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))] [else (length (if longSeqs (if (hash? longSeqs) (hash-ref longSeqs 0 #f) (list-ref longSeqs (int 0))) #f))]))) " :"))
(let/ec _break (for ([ls longSeqs])
  (let/ec _cont
(define diffs (list))
(define j 1)
(let/ec _break (let loop ()
  (if (< j (cond [(string? ls) (string-length ls)] [(hash? ls) (hash-count ls)] [else (length ls)])) (let ()
    (set! diffs (append diffs (list (- (if ls (if (hash? ls) (hash-ref ls j #f) (list-ref ls (int j))) #f) (if ls (if (hash? ls) (hash-ref ls (- j 1) #f) (list-ref ls (int (- j 1)))) #f)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define k 0)
(let/ec _break (let loop ()
  (if (< k (- (cond [(string? ls) (string-length ls)] [(hash? ls) (hash-count ls)] [else (length ls)]) 1)) (let ()
    (displayln (string-join (map (lambda (x) (format "~a" x)) (list (string-append (string-append (string-append (format "~a" (if ls (if (hash? ls) (hash-ref ls k #f) (list-ref ls (int k))) #f)) " (") (format "~a" (if diffs (if (hash? diffs) (hash-ref diffs k #f) (list-ref diffs (int k))) #f))) ") ") #f)) " "))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (format "~a" (if ls (if (hash? ls) (hash-ref ls (- (cond [(string? ls) (string-length ls)] [(hash? ls) (hash-count ls)] [else (length ls)]) 1) #f) (list-ref ls (int (- (cond [(string? ls) (string-length ls)] [(hash? ls) (hash-count ls)] [else (length ls)]) 1)))) #f)))
  )))
(displayln "")
))
)
(define (main)
  (let/ec _return (begin
(displayln "For primes < 1 million:\n")
(let/ec _break (for ([dir (list "ascending" "descending")])
  (let/ec _cont
(longestSeq dir)
  )))
))
)
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
