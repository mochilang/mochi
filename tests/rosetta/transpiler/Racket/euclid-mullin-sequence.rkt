;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define zero 0)
(define one 1)
(define two 2)
(define three 3)
(define four 4)
(define five 5)
(define six 6)
(define ten 10)
(define k100 100000)
(define (gcd a b)
  (let/ec _return (begin
(define x a)
(define y b)
(let/ec _break (let loop ()
  (if (not (equal? y zero)) (let ()
    (define t (modulo x y))
    (set! x y)
    (set! y t)
    (loop)) (void))))
(_return x)
))
)
(define (absBig x)
  (let/ec _return (begin
(if (< x zero) (let ()
(_return (- zero x))
) (void))
(_return x)
))
)
(define (pollardRho n c)
  (let/ec _return (begin
(define (g x y)
  (let/ec _return (begin
(define x2 (* x x))
(set! x2 (let ([__l x2] [__r c]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (modulo x2 y))
))
)
(define x 2)
(define y 2)
(define z 1)
(define d 0)
(define count 0)
(let/ec _break (let loop ()
  (if #t (let ()
    (set! x (g x n))
    (set! y (g (g y n) n))
    (set! d (absBig (- x y)))
    (set! d (modulo d n))
    (set! z (* z d))
    (set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? count 100) (let ()
(set! d (gcd z n))
(if (not (equal? d one)) (let ()
(_break)
) (void))
(set! z one)
(set! count 0)
) (void))
    (loop)) (void))))
(if (equal? d n) (let ()
(_return zero)
) (void))
(_return d)
))
)
(define (smallestPrimeFactorWheel n max)
  (let/ec _return (begin
(if (equal? (modulo n two) zero) (let ()
(_return two)
) (void))
(if (equal? (modulo n three) zero) (let ()
(_return three)
) (void))
(if (equal? (modulo n five) zero) (let ()
(_return five)
) (void))
(define k 7)
(define inc (list four two four two four six two six))
(define i 0)
(let/ec _break (let loop ()
  (if (<= (* k k) n) (let ()
    (if (equal? (modulo n k) zero) (let ()
(_return k)
) (void))
    (set! k (let ([__l k] [__r (if inc (list-ref inc (int i)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (> k max) (let ()
(_break)
) (void))
    (set! i (modulo (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 8))
    (loop)) (void))))
(_return zero)
))
)
(define (smallestPrimeFactor n)
  (let/ec _return (begin
(define s (smallestPrimeFactorWheel n k100))
(if (not (equal? s zero)) (let ()
(_return s)
) (void))
(define c 1)
(let/ec _break (let loop ()
  (if #t (let ()
    (define d (pollardRho n c))
    (if (equal? d zero) (let ()
(if (equal? c ten) (let ()
(_return n)
) (void))
(set! c (let ([__l c] [__r one]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(define factor (smallestPrimeFactorWheel d d))
(define s2 (smallestPrimeFactorWheel (quotient n d) factor))
(if (not (equal? s2 zero)) (let ()
(if (< s2 factor) (let ()
(_return s2)
) (let ()
(_return factor)
))
) (void))
(_return factor)
))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(define k 19)
(displayln (string-append (string-append "First " (format "~a" k)) " terms of the Euclidâ€“Mullin sequence:"))
(displayln 2)
(define prod 2)
(define count 1)
(let/ec _break (let loop ()
  (if (< count k) (let ()
    (define z (let ([__l prod] [__r one]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define t (smallestPrimeFactor z))
    (displayln t)
    (set! prod (* prod t))
    (set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
