;; Generated by Mochi 0.10.39 on 2025-07-24 13:25 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define xMin (- 2.182))
(define xMax 2.6558)
(define yMin 0.0)
(define yMax 9.9983)
(define width 60)
(define nIter 10000)
(define dx (- xMax xMin))
(define dy (- yMax yMin))
(define height (int (/ (* width dy) dx)))
(define grid (list))
(define row 0)
(let/ec _break (let loop ()
  (if (< row height) (let ()
    (define line (list))
    (define col 0)
    (let/ec _break (let loop ()
  (if (< col width) (let ()
    (set! line (append line (list " ")))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! grid (append grid (list line)))
    (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define seed 1)
(define (randInt s n)
  (let/ec _return (begin
(define next (modulo (let ([__l (* s 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
(_return (list next (modulo next n)))
))
)
(define x 0.0)
(define y 0.0)
(define ix (int (/ (* (exact->inexact width) (- x xMin)) dx)))
(define iy (int (/ (* (exact->inexact height) (- yMax y)) dy)))
(if (and (and (and (>= ix 0) (< ix width)) (>= iy 0)) (< iy height)) (let ()
(set! grid (list-set grid iy (list-set (list-ref grid iy) ix "*")))
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i nIter) (let ()
    (define res (randInt seed 100))
    (set! seed (list-ref res 0))
    (define r (list-ref res 1))
    (if (< r 85) (let ()
(define nx (let ([__l (* 0.85 x)] [__r (* 0.04 y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define ny (let ([__l (let ([__l (* (- 0.04) x)] [__r (* 0.85 y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1.6]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! x nx)
(set! y ny)
) (let ()
(if (< r 92) (let ()
(define nx (- (* 0.2 x) (* 0.26 y)))
(define ny (let ([__l (let ([__l (* 0.23 x)] [__r (* 0.22 y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1.6]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! x nx)
(set! y ny)
) (let ()
(if (< r 99) (let ()
(define nx (let ([__l (* (- 0.15) x)] [__r (* 0.28 y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define ny (let ([__l (let ([__l (* 0.26 x)] [__r (* 0.24 y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 0.44]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! x nx)
(set! y ny)
) (let ()
(set! x 0.0)
(set! y (* 0.16 y))
))
))
))
    (set! ix (int (/ (* (exact->inexact width) (- x xMin)) dx)))
    (set! iy (int (/ (* (exact->inexact height) (- yMax y)) dy)))
    (if (and (and (and (>= ix 0) (< ix width)) (>= iy 0)) (< iy height)) (let ()
(set! grid (list-set grid iy (list-set (list-ref grid iy) ix "*")))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! row 0)
(let/ec _break (let loop ()
  (if (< row height) (let ()
    (define line "")
    (define col 0)
    (let/ec _break (let loop ()
  (if (< col width) (let ()
    (set! line (string-append line (list-ref (list-ref grid row) col)))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
