;; Generated by Mochi 0.10.55 on 2025-08-03 09:40 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (modPow base exp m)
  (let/ec _return (begin
(define result (modulo 1 m))
(define b (modulo base m))
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let ()
    (if (equal? (modulo e 2) 1) (let ()
(set! result (modulo (* result b) m))
) (void))
    (set! b (modulo (* b b) m))
    (set! e (int (quotient e 2)))
    (loop)) (void))))
(_return result)
))
)
(define (isPrime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(let/ec _break (for ([p (list 2 3 5 7 11 13 17 19 23 29)])
  (let/ec _cont
(if (equal? (modulo n p) 0) (let ()
(_return (equal? n p))
) (void))
  )))
(define d (- n 1))
(define s 0)
(let/ec _break (let loop ()
  (if (equal? (modulo d 2) 0) (let ()
    (set! d (quotient d 2))
    (set! s (let ([__l s] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (for ([a (list 2 325 9375 28178 450775 9780504 1795265022)])
  (let/ec _cont
(if (equal? (modulo a n) 0) (let ()
(_return #t)
) (void))
(define x (modPow a d n))
(if (or (equal? x 1) (equal? x (- n 1))) (let ()
(_cont)
) (void))
(define r 1)
(define passed #f)
(let/ec _break (let loop ()
  (if (< r s) (let ()
    (set! x (modulo (* x x) n))
    (if (equal? x (- n 1)) (let ()
(set! passed #t)
(_break)
) (void))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (not passed) (let ()
(_return #f)
) (void))
  )))
(_return #t)
))
)
(define (commatize n)
  (let/ec _return (begin
(define s (format "~a" n))
(define i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 3))
(let/ec _break (let loop ()
  (if (> i 0) (let ()
    (set! s (string-append (string-append (slice s 0 i) ",") (slice s i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))))
    (set! i (- i 3))
    (loop)) (void))))
(_return s)
))
)
(define (pad s width)
  (let/ec _return (begin
(define out s)
(let/ec _break (let loop ()
  (if (< (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) width) (let ()
    (set! out (string-append " " out))
    (loop)) (void))))
(_return out)
))
)
(define (join xs sep)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (> i 0) (let ()
(set! res (string-append res sep))
) (void))
    (set! res (string-append res (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (formatRow row)
  (let/ec _return (begin
(define padded (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let ()
    (set! padded (append padded (list (pad (if row (if (hash? row) (hash-ref row i #f) (list-ref row (int i))) #f) 9))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append (string-append "[" (join padded " ")) "]"))
))
)
(define (main)
  (let/ec _return (begin
(define cubans (list))
(define cube1 1)
(define count 0)
(define cube100k 0)
(define i 1)
(let/ec _break (let loop ()
  (if #t (let ()
    (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define cube2 (* (* j j) j))
    (define diff (- cube2 cube1))
    (if (isPrime diff) (let ()
(if (< count 200) (let ()
(set! cubans (append cubans (list (commatize diff))))
) (void))
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? count 100000) (let ()
(set! cube100k diff)
(_break)
) (void))
) (void))
    (set! cube1 cube2)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "The first 200 cuban primes are:-")
(define row 0)
(let/ec _break (let loop ()
  (if (< row 20) (let ()
    (define slice (list))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k 10) (let ()
    (set! slice (append slice (list (if cubans (if (hash? cubans) (hash-ref cubans (let ([__l (* row 10)] [__r k]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref cubans (int (let ([__l (* row 10)] [__r k]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln (formatRow slice))
    (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (string-append "\nThe 100,000th cuban prime is " (commatize cube100k)))
))
)
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
