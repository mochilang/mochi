;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (egyptianDivide dividend divisor)
  (let/ec _return (begin
(if (or (< dividend 0) (<= divisor 0)) (let ()
(panic "Invalid argument(s)")
) (void))
(if (< dividend divisor) (let ()
(_return (hash "q" 0 "r" dividend))
) (void))
(define powers (list 1))
(define doublings (list divisor))
(define doubling (* divisor 2))
(let/ec _break (let loop ()
  (if (<= doubling dividend) (let ()
    (set! powers (append powers (list (* (if powers (list-ref powers (int (- (cond [(string? powers) (string-length powers)] [(hash? powers) (hash-count powers)] [else (length powers)]) 1))) #f) 2))))
    (set! doublings (append doublings (list doubling)))
    (set! doubling (* doubling 2))
    (loop)) (void))))
(define ans 0)
(define accum 0)
(define i (- (cond [(string? doublings) (string-length doublings)] [(hash? doublings) (hash-count doublings)] [else (length doublings)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (if (<= (let ([__l accum] [__r (if doublings (list-ref doublings (int i)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) dividend) (let ()
(set! accum (let ([__l accum] [__r (if doublings (list-ref doublings (int i)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! ans (let ([__l ans] [__r (if powers (list-ref powers (int i)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? accum dividend) (let ()
(_break)
) (void))
) (void))
    (set! i (- i 1))
    (loop)) (void))))
(_return (hash "q" ans "r" (- dividend accum)))
))
)
(define (main)
  (let/ec _return (begin
(define dividend 580)
(define divisor 34)
(define res (egyptianDivide dividend divisor))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" dividend) " divided by ") (format "~a" divisor)) " is ") (format "~a" (if res (hash-ref res "q" #f) #f))) " with remainder ") (format "~a" (if res (hash-ref res "r" #f) #f))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
