;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (pixelFromRgb c)
  (let/ec _return (begin
(define r (modulo (int (quotient c 65536)) 256))
(define g (modulo (int (quotient c 256)) 256))
(define b (modulo c 256))
(_return (hash "R" r "G" g "B" b))
))
)
(define (rgbFromPixel p)
  (let/ec _return (begin
(_return (let ([__l (let ([__l (* (if p (hash-ref p "R" #f) #f) 65536)] [__r (* (if p (hash-ref p "G" #f) #f) 256)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if p (hash-ref p "B" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (NewBitmap x y)
  (let/ec _return (begin
(define data (list))
(define row 0)
(let/ec _break (let loop ()
  (if (< row y) (let ()
    (define r (list))
    (define col 0)
    (let/ec _break (let loop ()
  (if (< col x) (let ()
    (set! r (append r (list (hash "R" 0 "G" 0 "B" 0))))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! data (append data (list r)))
    (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "cols" x "rows" y "px" data))
))
)
(define (FillRgb b c)
  (let/ec _return (begin
(define y 0)
(define p (pixelFromRgb c))
(let/ec _break (let loop ()
  (if (< y (if b (hash-ref b "rows" #f) #f)) (let ()
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x (if b (hash-ref b "cols" #f) #f)) (let ()
    (define px (if b (hash-ref b "px" #f) #f))
    (define row (list-ref px y))
    (set! row (list-set row x p))
    (set! px (list-set px y row))
    (set! b (hash-set (or b (hash)) "px" px))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (SetPxRgb b x y c)
  (let/ec _return (begin
(if (or (or (or (< x 0) (>= x (if b (hash-ref b "cols" #f) #f))) (< y 0)) (>= y (if b (hash-ref b "rows" #f) #f))) (let ()
(_return #f)
) (void))
(define px (if b (hash-ref b "px" #f) #f))
(define row (list-ref px y))
(set! row (list-set row x (pixelFromRgb c)))
(set! px (list-set px y row))
(set! b (hash-set (or b (hash)) "px" px))
(_return #t)
))
)
(define (nextRand seed)
  (let/ec _return (begin
(_return (modulo (let ([__l (* seed 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
))
)
(define (main)
  (let/ec _return (begin
(define bm (NewBitmap 400 300))
(FillRgb bm 12615744)
(define seed (now))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 2000) (let ()
    (set! seed (nextRand seed))
    (define x (modulo seed 400))
    (set! seed (nextRand seed))
    (define y (modulo seed 300))
    (SetPxRgb bm x y 8405024)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define x 0)
(let/ec _break (let loop ()
  (if (< x 400) (let ()
    (define y 240)
    (let/ec _break (let loop ()
  (if (< y 245) (let ()
    (SetPxRgb bm x y 8405024)
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y 260)
    (let/ec _break (let loop ()
  (if (< y 265) (let ()
    (SetPxRgb bm x y 8405024)
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define y 0)
(let/ec _break (let loop ()
  (if (< y 300) (let ()
    (define x 80)
    (let/ec _break (let loop ()
  (if (< x 85) (let ()
    (SetPxRgb bm x y 8405024)
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! x 95)
    (let/ec _break (let loop ()
  (if (< x 100) (let ()
    (SetPxRgb bm x y 8405024)
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
