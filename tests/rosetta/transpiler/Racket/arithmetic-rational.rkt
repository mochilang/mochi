;; Generated by Mochi 0.10.38 on 2025-07-23 16:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (intSqrt x)
  (let/ec _return (begin
(if (< x 2) (let ()
(_return x)
) (void))
(define left 1)
(define right (quotient x 2))
(define ans 0)
(let/ec _break (let loop ()
  (if (<= left right) (let ()
    (define mid (let ([__l left] [__r (quotient (- right left) 2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define sq (* mid mid))
    (if (equal? sq x) (let ()
(_return mid)
) (void))
    (if (< sq x) (let ()
(set! left (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! ans mid)
) (let ()
(set! right (- mid 1))
))
    (loop)) (void))))
(_return ans)
))
)
(define (sumRecip n)
  (let/ec _return (begin
(define s 1)
(define limit (intSqrt n))
(define f 2)
(let/ec _break (let loop ()
  (if (<= f limit) (let ()
    (if (equal? (modulo n f) 0) (let ()
(set! s (let ([__l s] [__r (quotient n f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define f2 (quotient n f))
(if (not (equal? f2 f)) (let ()
(set! s (let ([__l s] [__r f]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
) (void))
    (set! f (let ([__l f] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define nums (list 6 28 120 496 672 8128 30240 32760 523776))
(for ([n nums])
(define s (sumRecip n))
(if (equal? (modulo s n) 0) (let ()
(define val (/ s n))
(define perfect "")
(if (equal? val 1) (let ()
(set! perfect "perfect!")
) (void))
(displayln (string-append (string-append (string-append (string-append (string-append "Sum of recipr. factors of " (format "~a" n)) " = ") (format "~a" val)) " exactly ") perfect))
) (void))
)
))
)
(main)
