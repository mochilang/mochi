;; Generated by Mochi 0.10.54 on 2025-08-02 14:19 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (padLeft n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (squeeze s ch)
  (let/ec _return (begin
(define out "")
(define prev #f)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define c (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? c ch) (let ()
(if (not prev) (let ()
(set! out (string-append out c))
(set! prev #t)
) (void))
) (let ()
(set! out (string-append out c))
(set! prev #f)
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define strings (list "" "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln " "..1111111111111111111111111111111111111111111111111111111111111117777888" "I never give 'em hell, I just tell the truth, and they think it's hell. " "                                                   ---  Harry S Truman  " "The better the 4-wheel drive, the further you'll be from help when ya get stuck!" "headmistressship" "aardvark" "😍😀🙌💃😍😍😍🙌"))
(define chars (list (list " ") (list "-") (list "7") (list ".") (list " " "-" "r") (list "e") (list "s") (list "a") (list "😍")))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? strings) (string-length strings)] [(hash? strings) (hash-count strings)] [else (length strings)])) (let ()
    (define j 0)
    (define s (if strings (list-ref strings (int i)) #f))
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if chars (list-ref chars (int i)) #f)) (string-length (if chars (list-ref chars (int i)) #f))] [(hash? (if chars (list-ref chars (int i)) #f)) (hash-count (if chars (list-ref chars (int i)) #f))] [else (length (if chars (list-ref chars (int i)) #f))])) (let ()
    (define c (if (if chars (list-ref chars (int i)) #f) (list-ref (if chars (list-ref chars (int i)) #f) (int j)) #f))
    (define ss (squeeze s c))
    (displayln (string-append (string-append "specified character = '" c) "'"))
    (displayln (string-append (string-append (string-append (string-append "original : length = " (padLeft (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 2)) ", string = «««") s) "»»»"))
    (displayln (string-append (string-append (string-append (string-append "squeezed : length = " (padLeft (cond [(string? ss) (string-length ss)] [(hash? ss) (hash-count ss)] [else (length ss)]) 2)) ", string = «««") ss) "»»»"))
    (displayln "")
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
