;; Generated by Mochi 0.10.55 on 2025-08-02 17:46 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define width 60)
(define height (int (* (exact->inexact width) 0.86602540378)))
(define iterations 5000)
(define grid (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y height) (let ()
    (define line (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x width) (let ()
    (set! line (append line (list " ")))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! grid (append grid (list line)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define (randInt s n)
  (let/ec _return (begin
(define next (modulo (let ([__l (* s 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
(_return (list next (modulo next n)))
))
)
(define seed 1)
(define vertices (list (list 0 (- height 1)) (list (- width 1) (- height 1)) (list (int (quotient width 2)) 0)))
(define px (int (quotient width 2)))
(define py (int (quotient height 2)))
(define i 0)
(let/ec _break (let loop ()
  (if (< i iterations) (let ()
    (define r (randInt seed 3))
    (set! seed (if r (if (hash? r) (hash-ref r 0 #f) (list-ref r (int 0))) #f))
    (define idx (int (if r (if (hash? r) (hash-ref r 1 #f) (list-ref r (int 1))) #f)))
    (define v (if vertices (if (hash? vertices) (hash-ref vertices idx #f) (list-ref vertices (int idx))) #f))
    (set! px (int (quotient (let ([__l px] [__r (if v (if (hash? v) (hash-ref v 0 #f) (list-ref v (int 0))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2)))
    (set! py (int (quotient (let ([__l py] [__r (if v (if (hash? v) (hash-ref v 1 #f) (list-ref v (int 1))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2)))
    (if (and (and (and (>= px 0) (< px width)) (>= py 0)) (< py height)) (let ()
(set! grid (list-set grid py (list-set (list-ref grid py) px "*")))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! y 0)
(let/ec _break (let loop ()
  (if (< y height) (let ()
    (define line "")
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x width) (let ()
    (set! line (string-append line (if (if grid (if (hash? grid) (hash-ref grid y #f) (list-ref grid (int y))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid y #f) (list-ref grid (int y))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid y #f) (list-ref grid (int y))) #f) x #f) (list-ref (if grid (if (hash? grid) (hash-ref grid y #f) (list-ref grid (int y))) #f) (int x))) #f)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
