;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (primeFactors n)
  (let/ec _return (begin
(define factors (list))
(define x n)
(let/ec _break (let loop ()
  (if (equal? (modulo x 2) 0) (let ()
    (set! factors (append factors (list 2)))
    (set! x (int (quotient x 2)))
    (loop)) (void))))
(define p 3)
(let/ec _break (let loop ()
  (if (<= (* p p) x) (let ()
    (let/ec _break (let loop ()
  (if (equal? (modulo x p) 0) (let ()
    (set! factors (append factors (list p)))
    (set! x (int (quotient x p)))
    (loop)) (void))))
    (set! p (let ([__l p] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> x 1) (let ()
(set! factors (append factors (list x)))
) (void))
(_return factors)
))
)
(define (repeat ch n)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! s (string-append s ch))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (D n)
  (let/ec _return (begin
(if (< n 0.0) (let ()
(_return (- (D (- n))))
) (void))
(if (< n 2.0) (let ()
(_return 0.0)
) (void))
(define factors (list))
(if (< n 1e+19) (let ()
(set! factors (primeFactors (int n)))
) (let ()
(define g (int (/ n 100.0)))
(set! factors (primeFactors g))
(set! factors (append factors (list 2)))
(set! factors (append factors (list 2)))
(set! factors (append factors (list 5)))
(set! factors (append factors (list 5)))
))
(define c (cond [(string? factors) (string-length factors)] [(hash? factors) (hash-count factors)] [else (length factors)]))
(if (equal? c 1) (let ()
(_return 1.0)
) (void))
(if (equal? c 2) (let ()
(_return (exact->inexact (let ([__l (list-ref factors 0)] [__r (list-ref factors 1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(define d (/ n (exact->inexact (list-ref factors 0))))
(_return (let ([__l (* (D d) (exact->inexact (list-ref factors 0)))] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (pad n)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 4) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define vals (list))
(define n (- 99))
(let/ec _break (let loop ()
  (if (< n 101) (let ()
    (set! vals (append vals (list (int (D (exact->inexact n))))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? vals) (string-length vals)] [(hash? vals) (hash-count vals)] [else (length vals)])) (let ()
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 10) (let ()
    (set! line (string-append line (pad (list-ref vals (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (if (< j 9) (let ()
(set! line (string-append line " "))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 10]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define pow 1.0)
(define m 1)
(let/ec _break (let loop ()
  (if (< m 21) (let ()
    (set! pow (* pow 10.0))
    (define exp (format "~a" m))
    (if (< (cond [(string? exp) (string-length exp)] [(hash? exp) (hash-count exp)] [else (length exp)]) 2) (let ()
(set! exp (string-append exp " "))
) (void))
    (define res (string-append (format "~a" m) (repeat "0" (- m 1))))
    (displayln (string-append (string-append (string-append "D(10^" exp) ") / 7 = ") res))
    (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
