;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (makeInf)
  (let/ec _return (begin
(define x 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 400) (let ()
    (set! x (* x 10.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return x)
))
)
(define (makeMax)
  (let/ec _return (begin
(define x 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 308) (let ()
    (set! x (* x 10.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return x)
))
)
(define (isNaN x)
  (let/ec _return (begin
(_return (not (equal? x x)))
))
)
(define (validateNaN n op)
  (let/ec _return (begin
(if (isNaN n) (let ()
(displayln (string-append op " -> NaN"))
) (let ()
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "!!! Expected NaN from" op " Found" n)) " "))
))
))
)
(define (validateZero n op)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(displayln (string-append op " -> 0"))
) (let ()
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "!!! Expected 0 from" op " Found" n)) " "))
))
))
)
(define (validateGT a b op)
  (let/ec _return (begin
(if (> a b) (let ()
(displayln op)
) (let ()
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "!!! Expected" op " Found not true.")) " "))
))
))
)
(define (validateNE a b op)
  (let/ec _return (begin
(if (equal? a b) (let ()
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "!!! Expected" op " Found not true.")) " "))
) (let ()
(displayln op)
))
))
)
(define (validateEQ a b op)
  (let/ec _return (begin
(if (equal? a b) (let ()
(displayln op)
) (let ()
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "!!! Expected" op " Found not true.")) " "))
))
))
)
(define (main)
  (let/ec _return (begin
(define negZero (- 0.0))
(define posInf (makeInf))
(define negInf (- posInf))
(define nan (/ posInf posInf))
(define maxVal (makeMax))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list negZero posInf negInf nan)) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list negZero posInf negInf nan)) " "))
(displayln "")
(validateNaN (let ([__l negInf] [__r posInf]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "-Inf + Inf")
(validateNaN (* 0.0 posInf) "0 * Inf")
(validateNaN (/ posInf posInf) "Inf / Inf")
(validateNaN (- posInf (* (floor (/ posInf 1.0)) 1.0)) "Inf % 1")
(validateNaN (let ([__l 1.0] [__r nan]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "1 + NaN")
(validateZero (/ 1.0 posInf) "1 / Inf")
(validateGT posInf maxVal "Inf > max value")
(validateGT (- maxVal) negInf "-Inf < max neg value")
(validateNE nan nan "NaN != NaN")
(validateEQ negZero 0.0 "-0 == 0")
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
