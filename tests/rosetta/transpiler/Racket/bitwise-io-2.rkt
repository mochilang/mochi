;; Generated by Mochi 0.10.42 on 2025-07-27 22:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (pow2 n)
  (let/ec _return (begin
(define v 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! v (* v 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return v)
))
)
(define (lshift x n)
  (let/ec _return (begin
(_return (* x (pow2 n)))
))
)
(define (rshift x n)
  (let/ec _return (begin
(_return (quotient x (pow2 n)))
))
)
(define (NewWriter order)
  (let/ec _return (begin
(_return (hash "order" order "bits" 0 "nbits" 0 "data" (list)))
))
)
(define (writeBitsLSB w c width)
  (let/ec _return (begin
(set! w (hash-set (or w (hash)) "bits" (let ([__l (if w (hash-ref w "bits" #f) #f)] [__r (lshift c (if w (hash-ref w "nbits" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! w (hash-set (or w (hash)) "nbits" (let ([__l (if w (hash-ref w "nbits" #f) #f)] [__r width]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(let/ec _break (let loop ()
  (if (>= (if w (hash-ref w "nbits" #f) #f) 8) (let ()
    (define b (modulo (if w (hash-ref w "bits" #f) #f) 256))
    (set! w (hash-set (or w (hash)) "data" (append (if w (hash-ref w "data" #f) #f) (list b))))
    (set! w (hash-set (or w (hash)) "bits" (rshift (if w (hash-ref w "bits" #f) #f) 8)))
    (set! w (hash-set (or w (hash)) "nbits" (- (if w (hash-ref w "nbits" #f) #f) 8)))
    (loop)) (void))))
(_return w)
))
)
(define (writeBitsMSB w c width)
  (let/ec _return (begin
(set! w (hash-set (or w (hash)) "bits" (let ([__l (if w (hash-ref w "bits" #f) #f)] [__r (lshift c (- (- 32 width) (if w (hash-ref w "nbits" #f) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! w (hash-set (or w (hash)) "nbits" (let ([__l (if w (hash-ref w "nbits" #f) #f)] [__r width]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(let/ec _break (let loop ()
  (if (>= (if w (hash-ref w "nbits" #f) #f) 8) (let ()
    (define b (modulo (rshift (if w (hash-ref w "bits" #f) #f) 24) 256))
    (set! w (hash-set (or w (hash)) "data" (append (if w (hash-ref w "data" #f) #f) (list b))))
    (set! w (hash-set (or w (hash)) "bits" (* (modulo (if w (hash-ref w "bits" #f) #f) (pow2 24)) 256)))
    (set! w (hash-set (or w (hash)) "nbits" (- (if w (hash-ref w "nbits" #f) #f) 8)))
    (loop)) (void))))
(_return w)
))
)
(define (WriteBits w c width)
  (let/ec _return (begin
(if (string=? (if w (hash-ref w "order" #f) #f) "LSB") (let ()
(_return (writeBitsLSB w c width))
) (void))
(_return (writeBitsMSB w c width))
))
)
(define (CloseWriter w)
  (let/ec _return (begin
(if (> (if w (hash-ref w "nbits" #f) #f) 0) (let ()
(if (string=? (if w (hash-ref w "order" #f) #f) "MSB") (let ()
(set! w (hash-set (or w (hash)) "bits" (rshift (if w (hash-ref w "bits" #f) #f) 24)))
) (void))
(set! w (hash-set (or w (hash)) "data" (append (if w (hash-ref w "data" #f) #f) (list (modulo (if w (hash-ref w "bits" #f) #f) 256)))))
) (void))
(set! w (hash-set (or w (hash)) "bits" 0))
(set! w (hash-set (or w (hash)) "nbits" 0))
(_return w)
))
)
(define (NewReader data order)
  (let/ec _return (begin
(_return (hash "order" order "data" data "idx" 0 "bits" 0 "nbits" 0))
))
)
(define (readBitsLSB r width)
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (< (if r (hash-ref r "nbits" #f) #f) width) (let ()
    (if (>= (if r (hash-ref r "idx" #f) #f) (cond [(string? (if r (hash-ref r "data" #f) #f)) (string-length (if r (hash-ref r "data" #f) #f))] [(hash? (if r (hash-ref r "data" #f) #f)) (hash-count (if r (hash-ref r "data" #f) #f))] [else (length (if r (hash-ref r "data" #f) #f))])) (let ()
(_return (hash "val" 0 "eof" #t))
) (void))
    (define b (if (if r (hash-ref r "data" #f) #f) (list-ref (if r (hash-ref r "data" #f) #f) (int (if r (hash-ref r "idx" #f) #f))) #f))
    (set! r (hash-set (or r (hash)) "idx" (let ([__l (if r (hash-ref r "idx" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! r (hash-set (or r (hash)) "bits" (let ([__l (if r (hash-ref r "bits" #f) #f)] [__r (lshift b (if r (hash-ref r "nbits" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! r (hash-set (or r (hash)) "nbits" (let ([__l (if r (hash-ref r "nbits" #f) #f)] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (loop)) (void))))
(define mask (- (pow2 width) 1))
(define out (modulo (if r (hash-ref r "bits" #f) #f) (let ([__l mask] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! r (hash-set (or r (hash)) "bits" (rshift (if r (hash-ref r "bits" #f) #f) width)))
(set! r (hash-set (or r (hash)) "nbits" (- (if r (hash-ref r "nbits" #f) #f) width)))
(_return (hash "val" out "eof" #f))
))
)
(define (readBitsMSB r width)
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (< (if r (hash-ref r "nbits" #f) #f) width) (let ()
    (if (>= (if r (hash-ref r "idx" #f) #f) (cond [(string? (if r (hash-ref r "data" #f) #f)) (string-length (if r (hash-ref r "data" #f) #f))] [(hash? (if r (hash-ref r "data" #f) #f)) (hash-count (if r (hash-ref r "data" #f) #f))] [else (length (if r (hash-ref r "data" #f) #f))])) (let ()
(_return (hash "val" 0 "eof" #t))
) (void))
    (define b (if (if r (hash-ref r "data" #f) #f) (list-ref (if r (hash-ref r "data" #f) #f) (int (if r (hash-ref r "idx" #f) #f))) #f))
    (set! r (hash-set (or r (hash)) "idx" (let ([__l (if r (hash-ref r "idx" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! r (hash-set (or r (hash)) "bits" (let ([__l (if r (hash-ref r "bits" #f) #f)] [__r (lshift b (- 24 (if r (hash-ref r "nbits" #f) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! r (hash-set (or r (hash)) "nbits" (let ([__l (if r (hash-ref r "nbits" #f) #f)] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (loop)) (void))))
(define out (rshift (if r (hash-ref r "bits" #f) #f) (- 32 width)))
(set! r (hash-set (or r (hash)) "bits" (modulo (* (if r (hash-ref r "bits" #f) #f) (pow2 width)) (pow2 32))))
(set! r (hash-set (or r (hash)) "nbits" (- (if r (hash-ref r "nbits" #f) #f) width)))
(_return (hash "val" out "eof" #f))
))
)
(define (ReadBits r width)
  (let/ec _return (begin
(if (string=? (if r (hash-ref r "order" #f) #f) "LSB") (let ()
(_return (readBitsLSB r width))
) (void))
(_return (readBitsMSB r width))
))
)
(define (toBinary n bits)
  (let/ec _return (begin
(define b "")
(define val n)
(define i 0)
(let/ec _break (let loop ()
  (if (< i bits) (let ()
    (set! b (string-append (format "~a" (modulo val 2)) b))
    (set! val (quotient val 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return b)
))
)
(define (bytesToBits bs)
  (let/ec _return (begin
(define out "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bs) (string-length bs)] [(hash? bs) (hash-count bs)] [else (length bs)])) (let ()
    (set! out (string-append out (toBinary (if bs (list-ref bs (int i)) #f) 8)))
    (if (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? bs) (string-length bs)] [(hash? bs) (hash-count bs)] [else (length bs)])) (let ()
(set! out (string-append out " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! out (string-append out "]"))
(_return out)
))
)
(define (bytesToHex bs)
  (let/ec _return (begin
(define digits "0123456789ABCDEF")
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bs) (string-length bs)] [(hash? bs) (hash-count bs)] [else (length bs)])) (let ()
    (define b (if bs (list-ref bs (int i)) #f))
    (define hi (quotient b 16))
    (define lo (modulo b 16))
    (set! out (string-append (string-append out (substring digits hi (let ([__l hi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (substring digits lo (let ([__l lo] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (if (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? bs) (string-length bs)] [(hash? bs) (hash-count bs)] [else (length bs)])) (let ()
(set! out (string-append out " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (ord ch)
  (let/ec _return (begin
(define upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower "abcdefghijklmnopqrstuvwxyz")
(define idx (indexOf upper ch))
(if (>= idx 0) (let ()
(_return (let ([__l 65] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(set! idx (indexOf lower ch))
(if (>= idx 0) (let ()
(_return (let ([__l 97] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (and (string>=? ch "0") (string<=? ch "9")) (let ()
(_return (let ([__l 48] [__r (parseIntStr ch)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (string=? ch " ") (let ()
(_return 32)
) (void))
(if (string=? ch ".") (let ()
(_return 46)
) (void))
(_return 0)
))
)
(define (chr n)
  (let/ec _return (begin
(define upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower "abcdefghijklmnopqrstuvwxyz")
(if (and (>= n 65) (< n 91)) (let ()
(_return (substring upper (- n 65) (- n 64)))
) (void))
(if (and (>= n 97) (< n 123)) (let ()
(_return (substring lower (- n 97) (- n 96)))
) (void))
(if (and (>= n 48) (< n 58)) (let ()
(define digits "0123456789")
(_return (substring digits (- n 48) (- n 47)))
) (void))
(if (equal? n 32) (let ()
(_return " ")
) (void))
(if (equal? n 46) (let ()
(_return ".")
) (void))
(_return "?")
))
)
(define (bytesOfStr s)
  (let/ec _return (begin
(define bs (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (set! bs (append bs (list (ord (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return bs)
))
)
(define (bytesToDec bs)
  (let/ec _return (begin
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bs) (string-length bs)] [(hash? bs) (hash-count bs)] [else (length bs)])) (let ()
    (set! out (string-append out (format "~a" (if bs (list-ref bs (int i)) #f))))
    (if (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? bs) (string-length bs)] [(hash? bs) (hash-count bs)] [else (length bs)])) (let ()
(set! out (string-append out " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (Example)
  (let/ec _return (begin
(define message "This is a test.")
(define msgBytes (bytesOfStr message))
(displayln (string-append (string-append (string-append "\"" message) "\" as bytes: ") (bytesToDec msgBytes)))
(displayln (string-append "    original bits: " (bytesToBits msgBytes)))
(define bw (NewWriter "MSB"))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? msgBytes) (string-length msgBytes)] [(hash? msgBytes) (hash-count msgBytes)] [else (length msgBytes)])) (let ()
    (set! bw (WriteBits bw (if msgBytes (list-ref msgBytes (int i)) #f) 7))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! bw (CloseWriter bw))
(displayln (string-append "Written bitstream: " (bytesToBits (if bw (hash-ref bw "data" #f) #f))))
(displayln (string-append "Written bytes: " (bytesToHex (if bw (hash-ref bw "data" #f) #f))))
(define br (NewReader (if bw (hash-ref bw "data" #f) #f) "MSB"))
(define result "")
(let/ec _break (let loop ()
  (if #t (let ()
    (define r (ReadBits br 7))
    (if (if r (hash-ref r "eof" #f) #f) (let ()
(_break)
) (void))
    (define v (int (if r (hash-ref r "val" #f) #f)))
    (if (not (equal? v 0)) (let ()
(set! result (string-append result (chr v)))
) (void))
    (loop)) (void))))
(displayln (string-append (string-append "Read back as \"" result) "\""))
))
)
(Example)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
