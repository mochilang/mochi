;; Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (qsel a k)
  (let/ec _return (begin
(define arr a)
(let/ec _break (let loop ()
  (if (> (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1) (let ()
    (define px (modulo (now) (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])))
    (define pv (if arr (list-ref arr (int px)) #f))
    (define last (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1))
    (define tmp (if arr (list-ref arr (int px)) #f))
    (set! arr (list-set arr (int px) (if arr (list-ref arr (int last)) #f)))
    (set! arr (list-set arr (int last) tmp))
    (set! px 0)
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i last) (let ()
    (define v (if arr (list-ref arr (int i)) #f))
    (if (< v pv) (let ()
(define t (if arr (list-ref arr (int px)) #f))
(set! arr (list-set arr (int px) (if arr (list-ref arr (int i)) #f)))
(set! arr (list-set arr (int i) t))
(set! px (let ([__l px] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! arr (list-set arr (int px) pv))
    (if (equal? px k) (let ()
(_return pv)
) (void))
    (if (< k px) (let ()
(set! arr (slice arr 0 px))
) (let ()
(set! arr (slice arr (let ([__l px] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (length arr)))
(set! k (- k (let ([__l px] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
    (loop)) (void))))
(_return (if arr (list-ref arr (int 0)) #f))
))
)
(define (fivenum a)
  (let/ec _return (begin
(define last (- (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 1))
(define m (quotient last 2))
(define n5 (list))
(set! n5 (append n5 (list (qsel (slice a 0 m) 0))))
(set! n5 (append n5 (list (qsel (slice a 0 m) (quotient (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 4)))))
(set! n5 (append n5 (list (qsel a m))))
(define arr2 (slice a m (length a)))
(define q3 (- (- last m) (quotient (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 4)))
(set! n5 (append n5 (list (qsel arr2 q3))))
(set! arr2 (slice arr2 q3 (length arr2)))
(set! n5 (append n5 (list (qsel arr2 (- (cond [(string? arr2) (string-length arr2)] [(hash? arr2) (hash-count arr2)] [else (length arr2)]) 1)))))
(_return n5)
))
)
(define x1 (list 36.0 40.0 7.0 39.0 41.0 15.0))
(define x2 (list 15.0 6.0 42.0 41.0 7.0 36.0 49.0 40.0 39.0 47.0 43.0))
(define x3 (list 0.14082834 0.0974879 1.73131507 0.87636009 (- 1.95059594) 0.73438555 (- 0.03035726) 1.4667597 (- 0.74621349) (- 0.72588772) 0.6390516 0.61501527 (- 0.9898378) (- 1.00447874) (- 0.62759469) 0.66206163 1.04312009 (- 0.10305385) 0.75775634 0.32566578))
(displayln (format "~a" (fivenum x1)))
(displayln (format "~a" (fivenum x2)))
(displayln (format "~a" (fivenum x3)))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
