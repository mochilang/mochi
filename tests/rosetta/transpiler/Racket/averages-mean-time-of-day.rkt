;; Generated by Mochi 0.10.41 on 2025-07-26 19:01 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define PI 3.141592653589793)
(define (sinApprox x)
  (let/ec _return (begin
(define term x)
(define sum x)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 8) (let ()
    (define denom (exact->inexact (* (* 2 n) (let ([__l (* 2 n)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! term (/ (* (* (- term) x) x) denom))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (cosApprox x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 8) (let ()
    (define denom (exact->inexact (* (- (* 2 n) 1) (* 2 n))))
    (set! term (/ (* (* (- term) x) x) denom))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (atanApprox x)
  (let/ec _return (begin
(if (> x 1.0) (let ()
(_return (- (/ PI 2.0) (/ x (let ([__l (* x x)] [__r 0.28]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
(if (< x (- 1.0)) (let ()
(_return (- (/ (- PI) 2.0) (/ x (let ([__l (* x x)] [__r 0.28]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
(_return (/ x (let ([__l 1.0] [__r (* (* 0.28 x) x)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (atan2Approx y x)
  (let/ec _return (begin
(if (> x 0.0) (let ()
(_return (atanApprox (/ y x)))
) (void))
(if (< x 0.0) (let ()
(if (>= y 0.0) (let ()
(_return (let ([__l (atanApprox (/ y x))] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return (- (atanApprox (/ y x)) PI))
) (void))
(if (> y 0.0) (let ()
(_return (/ PI 2.0))
) (void))
(if (< y 0.0) (let ()
(_return (/ (- PI) 2.0))
) (void))
(_return 0.0)
))
)
(define (digit ch)
  (let/ec _return (begin
(define digits "0123456789")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])) (let ()
    (if (string=? (substring digits i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return 0)
))
)
(define (parseTwo s idx)
  (let/ec _return (begin
(_return (let ([__l (* (digit (substring s idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) 10)] [__r (digit (substring s (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l idx] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (parseSec s)
  (let/ec _return (begin
(define h (parseTwo s 0))
(define m (parseTwo s 3))
(define sec (parseTwo s 6))
(define tmp (let ([__l (* (let ([__l (* h 60)] [__r m]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 60)] [__r sec]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (exact->inexact tmp))
))
)
(define (pad n)
  (let/ec _return (begin
(if (< n 10) (let ()
(_return (string-append "0" (format "~a" n)))
) (void))
(_return (format "~a" n))
))
)
(define (meanTime times)
  (let/ec _return (begin
(define ssum 0.0)
(define csum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? times) (string-length times)] [(hash? times) (hash-count times)] [else (length times)])) (let ()
    (define sec (parseSec (list-ref times i)))
    (define ang (/ (* (* sec 2.0) PI) 86400.0))
    (set! ssum (let ([__l ssum] [__r (sinApprox ang)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! csum (let ([__l csum] [__r (cosApprox ang)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define theta (atan2Approx ssum csum))
(define frac (/ theta (* 2.0 PI)))
(let/ec _break (let loop ()
  (if (< frac 0.0) (let ()
    (set! frac (let ([__l frac] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define total (* frac 86400.0))
(define si (int total))
(define h (int (quotient si 3600)))
(define m (int (quotient (modulo si 3600) 60)))
(define s (int (modulo si 60)))
(_return (string-append (string-append (string-append (string-append (pad h) ":") (pad m)) ":") (pad s)))
))
)
(define (main)
  (let/ec _return (begin
(define inputs (list "23:00:17" "23:40:20" "00:12:45" "00:17:19"))
(displayln (meanTime inputs))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
