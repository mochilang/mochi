;; Generated by Mochi 0.10.42 on 2025-07-27 22:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define b3Seg 30)
(define (pixelFromRgb rgb)
  (let/ec _return (begin
(define r (int (modulo (quotient rgb 65536) 256)))
(define g (int (modulo (quotient rgb 256) 256)))
(define b (int (modulo rgb 256)))
(_return (hash "r" r "g" g "b" b))
))
)
(define (newBitmap cols rows)
  (let/ec _return (begin
(define d (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y rows) (let ()
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x cols) (let ()
    (set! row (append row (list (hash "r" 0 "g" 0 "b" 0))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! d (append d (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "cols" cols "rows" rows "data" d))
))
)
(define (setPx b x y p)
  (let/ec _return (begin
(define cols (int (if b (hash-ref b "cols" #f) #f)))
(define rows (int (if b (hash-ref b "rows" #f) #f)))
(if (and (and (and (>= x 0) (< x cols)) (>= y 0)) (< y rows)) (let ()
(set! b p)
) (void))
))
)
(define (fill b p)
  (let/ec _return (begin
(define cols (int (if b (hash-ref b "cols" #f) #f)))
(define rows (int (if b (hash-ref b "rows" #f) #f)))
(define y 0)
(let/ec _break (let loop ()
  (if (< y rows) (let ()
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x cols) (let ()
    (set! b p)
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (fillRgb b rgb)
  (let/ec _return (begin
(fill b (pixelFromRgb rgb))
))
)
(define (line b x0 y0 x1 y1 p)
  (let/ec _return (begin
(define dx (- x1 x0))
(if (< dx 0) (let ()
(set! dx (- dx))
) (void))
(define dy (- y1 y0))
(if (< dy 0) (let ()
(set! dy (- dy))
) (void))
(define sx (- 1))
(if (< x0 x1) (let ()
(set! sx 1)
) (void))
(define sy (- 1))
(if (< y0 y1) (let ()
(set! sy 1)
) (void))
(define err (- dx dy))
(let/ec _break (let loop ()
  (if #t (let ()
    (setPx b x0 y0 p)
    (if (and (equal? x0 x1) (equal? y0 y1)) (let ()
(_break)
) (void))
    (define e2 (* 2 err))
    (if (> e2 (- 0 dy)) (let ()
(set! err (- err dy))
(set! x0 (let ([__l x0] [__r sx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (if (< e2 dx) (let ()
(set! err (let ([__l err] [__r dx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! y0 (let ([__l y0] [__r sy]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (loop)) (void))))
))
)
(define (bezier3 b x1 y1 x2 y2 x3 y3 x4 y4 p)
  (let/ec _return (begin
(define px (list))
(define py (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i b3Seg) (let ()
    (set! px (append px (list 0)))
    (set! py (append py (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define fx1 (exact->inexact x1))
(define fy1 (exact->inexact y1))
(define fx2 (exact->inexact x2))
(define fy2 (exact->inexact y2))
(define fx3 (exact->inexact x3))
(define fy3 (exact->inexact y3))
(define fx4 (exact->inexact x4))
(define fy4 (exact->inexact y4))
(set! i 0)
(let/ec _break (let loop ()
  (if (<= i b3Seg) (let ()
    (define d (/ (exact->inexact i) (exact->inexact b3Seg)))
    (define a (- 1.0 d))
    (define bcoef (* a a))
    (define ccoef (* d d))
    (define a2 (* a bcoef))
    (define b2 (* (* 3.0 bcoef) d))
    (define c2 (* (* 3.0 a) ccoef))
    (define d2 (* ccoef d))
    (set! px (list-set px (int i) (int (let ([__l (let ([__l (let ([__l (* a2 fx1)] [__r (* b2 fx2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* c2 fx3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* d2 fx4)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! py (list-set py (int i) (int (let ([__l (let ([__l (let ([__l (* a2 fy1)] [__r (* b2 fy2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* c2 fy3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* d2 fy4)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define x0 (if px (list-ref px (int 0)) #f))
(define y0 (if py (list-ref py (int 0)) #f))
(set! i 1)
(let/ec _break (let loop ()
  (if (<= i b3Seg) (let ()
    (define x (if px (list-ref px (int i)) #f))
    (define y (if py (list-ref py (int i)) #f))
    (line b x0 y0 x y p)
    (set! x0 x)
    (set! y0 y)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define b (newBitmap 400 300))
(fillRgb b 16773055)
(bezier3 b 20 200 700 50 (- 300) 50 380 150 (pixelFromRgb 4165615))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
