;; Generated by Mochi 0.10.42 on 2025-07-27 22:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (indexOfStr h n)
  (let/ec _return (begin
(define hlen (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]))
(define nlen (cond [(string? n) (string-length n)] [(hash? n) (hash-count n)] [else (length n)]))
(if (equal? nlen 0) (let ()
(_return 0)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (- hlen nlen)) (let ()
    (if (string=? (substring h i (let ([__l i] [__r nlen]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) n) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (stringSearchSingle h n)
  (let/ec _return (begin
(_return (indexOfStr h n))
))
)
(define (stringSearch h n)
  (let/ec _return (begin
(define result (list))
(define start 0)
(define hlen (cond [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]))
(define nlen (cond [(string? n) (string-length n)] [(hash? n) (hash-count n)] [else (length n)]))
(let/ec _break (let loop ()
  (if (< start hlen) (let ()
    (define idx (indexOfStr (substring h start hlen) n))
    (if (>= idx 0) (let ()
(set! result (append result (list (let ([__l start] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! start (let ([__l (let ([__l start] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r nlen]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(_break)
))
    (loop)) (void))))
(_return result)
))
)
(define (display nums)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
    (if (> i 0) (let ()
(set! s (string-append s ", "))
) (void))
    (set! s (string-append s (format "~a" (if nums (list-ref nums (int i)) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define texts (list "GCTAGCTCTACGAGTCTA" "GGCTATAATGCGTA" "there would have been a time for such a word" "needle need noodle needle" "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages" "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."))
(define patterns (list "TCTA" "TAATAAA" "word" "needle" "and" "alfalfa"))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? texts) (string-length texts)] [(hash? texts) (hash-count texts)] [else (length texts)])) (let ()
    (displayln (string-append (string-append (string-append "text" (format "~a" (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) " = ") (if texts (list-ref texts (int i)) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? texts) (string-length texts)] [(hash? texts) (hash-count texts)] [else (length texts)])) (let ()
    (define idxs (stringSearch (if texts (list-ref texts (int j)) #f) (if patterns (list-ref patterns (int j)) #f)))
    (displayln (string-append (string-append (string-append (string-append (string-append "Found \"" (if patterns (list-ref patterns (int j)) #f)) "\" in 'text") (format "~a" (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) "' at indexes ") (display idxs)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
