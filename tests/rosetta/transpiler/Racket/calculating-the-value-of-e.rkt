;; Generated by Mochi 0.10.42 on 2025-07-27 23:42 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define epsilon 1e-15)
(define (absf x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (pow10 n)
  (let/ec _return (begin
(define r 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! r (* r 10.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return r)
))
)
(define (formatFloat f prec)
  (let/ec _return (begin
(define scale (pow10 prec))
(define scaled (let ([__l (* f scale)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define n (int scaled))
(define digits (format "~a" n))
(let/ec _break (let loop ()
  (if (<= (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) prec) (let ()
    (set! digits (string-append "0" digits))
    (loop)) (void))))
(define intPart (substring digits 0 (- (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) prec)))
(define fracPart (substring digits (- (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) prec) (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])))
(_return (string-append (string-append intPart ".") fracPart))
))
)
(define factval 1)
(define e 2.0)
(define n 2)
(define term 1.0)
(let/ec _break (let loop ()
  (if #t (let ()
    (set! factval (* factval n))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! term (/ 1.0 (exact->inexact factval)))
    (set! e (let ([__l e] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (< (absf term) epsilon) (let ()
(_break)
) (void))
    (loop)) (void))))
(displayln (string-append "e = " (formatFloat e 15)))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
