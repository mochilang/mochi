;; Generated by Mochi 0.10.40 on 2025-07-25 20:07 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (pow10 exp)
  (let/ec _return (begin
(define n 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let ()
    (set! n (* n 10))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return n)
))
)
(define (totient n)
  (let/ec _return (begin
(define tot n)
(define nn n)
(define i 2)
(let/ec _break (let loop ()
  (if (<= (* i i) nn) (let ()
    (if (equal? (modulo nn i) 0) (let ()
(let/ec _break (let loop ()
  (if (equal? (modulo nn i) 0) (let ()
    (set! nn (quotient nn i))
    (loop)) (void))))
(set! tot (- tot (quotient tot i)))
) (void))
    (if (equal? i 2) (let ()
(set! i 1)
) (void))
    (set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> nn 1) (let ()
(set! tot (- tot (quotient tot nn)))
) (void))
(_return tot)
))
)
(define pps (hash))
(define (getPerfectPowers maxExp)
  (let/ec _return (begin
(define upper (pow10 maxExp))
(define i 2)
(let/ec _break (let loop ()
  (if (< (* i i) upper) (let ()
    (define p i)
    (let/ec _break (let loop ()
  (if #t (let ()
    (set! p (* p i))
    (if (>= p upper) (let ()
(_break)
) (void))
    (set! pps (hash-set (or pps (hash)) p #t))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (getAchilles minExp maxExp)
  (let/ec _return (begin
(define lower (pow10 minExp))
(define upper (pow10 maxExp))
(define achilles (hash))
(define b 1)
(let/ec _break (let loop ()
  (if (< (* (* b b) b) upper) (let ()
    (define b3 (* (* b b) b))
    (define a 1)
    (let/ec _break (let loop ()
  (if #t (let ()
    (define p (* (* b3 a) a))
    (if (>= p upper) (let ()
(_break)
) (void))
    (if (>= p lower) (let ()
(if (not (hash-has-key? pps p)) (let ()
(set! achilles (hash-set (or achilles (hash)) p #t))
) (void))
) (void))
    (set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return achilles)
))
)
(define (sortInts xs)
  (let/ec _return (begin
(define res (list))
(define tmp xs)
(let/ec _break (let loop ()
  (if (> (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)]) 0) (let ()
    (define min (list-ref tmp 0))
    (define idx 0)
    (define i 1)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)])) (let ()
    (if (< (list-ref tmp i) min) (let ()
(set! min (list-ref tmp i))
(set! idx i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list min)))
    (define out (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)])) (let ()
    (if (not (equal? j idx)) (let ()
(set! out (append out (list (list-ref tmp j))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! tmp out)
    (loop)) (void))))
(_return res)
))
)
(define (pad n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define maxDigits 15)
(getPerfectPowers 5)
(define achSet (getAchilles 1 5))
(define ach (list))
(for ([k (hash-keys achSet)])
(set! ach (append ach (list k)))
)
(set! ach (sortInts ach))
(displayln "First 50 Achilles numbers:")
(define i 0)
(let/ec _break (let loop ()
  (if (< i 50) (let ()
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 10) (let ()
    (set! line (string-append line (pad (list-ref ach i) 4)))
    (if (< j 9) (let ()
(set! line (string-append line " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (loop)) (void))))
(displayln "\nFirst 30 strong Achilles numbers:")
(define strong (list))
(define count 0)
(define idx 0)
(let/ec _break (let loop ()
  (if (< count 30) (let ()
    (define tot (totient (list-ref ach idx)))
    (if (hash-has-key? achSet tot) (let ()
(set! strong (append strong (list (list-ref ach idx))))
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i 30) (let ()
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 10) (let ()
    (set! line (string-append line (pad (list-ref strong i) 5)))
    (if (< j 9) (let ()
(set! line (string-append line " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (loop)) (void))))
(displayln "\nNumber of Achilles numbers with:")
(define counts (list 1 12 47 192 664 2242 7395 24008 77330 247449 788855 2508051 7960336 25235383))
(define d 2)
(let/ec _break (let loop ()
  (if (<= d maxDigits) (let ()
    (define c (list-ref counts (- d 2)))
    (displayln (string-append (string-append (pad d 2) " digits: ") (format "~a" c)))
    (set! d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
