;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (split s sep)
  (let/ec _return (begin
(define parts (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (and (> (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)]) 0) (<= (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) (string=? (substring s i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sep)) (let ()
(set! parts (append parts (list cur)))
(set! cur "")
(set! i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! cur (string-append cur (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(set! parts (append parts (list cur)))
(_return parts)
))
)
(define (rstripEmpty words)
  (let/ec _return (begin
(define n (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)]))
(let/ec _break (let loop ()
  (if (and (> n 0) (string=? (list-ref words (- n 1)) "")) (let ()
    (set! n (- n 1))
    (loop)) (void))))
(_return (sublist words 0 n))
))
)
(define (spaces n)
  (let/ec _return (begin
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! out (string-append out " "))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (pad word width align)
  (let/ec _return (begin
(define diff (- width (cond [(string? word) (string-length word)] [(hash? word) (hash-count word)] [else (length word)])))
(if (equal? align 0) (let ()
(_return (string-append word (spaces diff)))
) (void))
(if (equal? align 2) (let ()
(_return (string-append (spaces diff) word))
) (void))
(define left (int (quotient diff 2)))
(define right (- diff left))
(_return (let ([__l (string-append (spaces left) word)] [__r (spaces right)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (newFormatter text)
  (let/ec _return (begin
(define lines (split text "\n"))
(define fmtLines (list))
(define width (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lines) (string-length lines)] [(hash? lines) (hash-count lines)] [else (length lines)])) (let ()
    (if (equal? (cond [(string? (list-ref lines i)) (string-length (list-ref lines i))] [(hash? (list-ref lines i)) (hash-count (list-ref lines i))] [else (length (list-ref lines i))]) 0) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (define words (rstripEmpty (split (list-ref lines i) "$")))
    (set! fmtLines (append fmtLines (list words)))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)])) (let ()
    (define wlen (cond [(string? (list-ref words j)) (string-length (list-ref words j))] [(hash? (list-ref words j)) (hash-count (list-ref words j))] [else (length (list-ref words j))]))
    (if (equal? j (cond [(string? width) (string-length width)] [(hash? width) (hash-count width)] [else (length width)])) (let ()
(set! width (append width (list wlen)))
) (let ()
(if (> wlen (list-ref width j)) (let ()
(set! width (list-set width j wlen))
) (void))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "text" fmtLines "width" width))
))
)
(define (printFmt f align)
  (let/ec _return (begin
(define lines (if f (hash-ref f "text" #f) #f))
(define width (if f (hash-ref f "width" #f) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lines) (string-length lines)] [(hash? lines) (hash-count lines)] [else (length lines)])) (let ()
    (define words (list-ref lines i))
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)])) (let ()
    (set! line (string-append (string-append line (pad (list-ref words j) (list-ref width j) align)) " "))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
))
)
(define text (string-append (string-append (string-append (string-append (string-append "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" "are$delineated$by$a$single$'dollar'$character,$write$a$program\n") "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n") "column$are$separated$by$at$least$one$space.\n") "Further,$allow$for$each$word$in$a$column$to$be$either$left\n") "justified,$right$justified,$or$center$justified$within$its$column."))
(define f (newFormatter text))
(printFmt f 0)
(printFmt f 1)
(printFmt f 2)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
