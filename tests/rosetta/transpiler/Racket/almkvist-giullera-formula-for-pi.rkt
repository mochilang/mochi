;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (bigTrim a)
  (let/ec _return (begin
(define n (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(let/ec _break (let loop ()
  (if (and (> n 1) (equal? (list-ref a (- n 1)) 0)) (let ()
    (set! a (sublist a 0 (- n 1)))
    (set! n (- n 1))
    (loop)) (void))))
(_return a)
))
)
(define (bigFromInt x)
  (let/ec _return (begin
(if (equal? x 0) (let ()
(_return (list 0))
) (void))
(define digits (list))
(define n x)
(let/ec _break (let loop ()
  (if (> n 0) (let ()
    (set! digits (append digits (list (modulo n 10))))
    (set! n (quotient n 10))
    (loop)) (void))))
(_return digits)
))
)
(define (bigCmp a b)
  (let/ec _return (begin
(if (> (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
(_return 1)
) (void))
(if (< (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
(_return (- 1))
) (void))
(define i (- (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (if (> (list-ref a i) (list-ref b i)) (let ()
(_return 1)
) (void))
    (if (< (list-ref a i) (list-ref b i)) (let ()
(_return (- 1))
) (void))
    (set! i (- i 1))
    (loop)) (void))))
(_return 0)
))
)
(define (bigAdd a b)
  (let/ec _return (begin
(define res (list))
(define carry 0)
(define i 0)
(let/ec _break (let loop ()
  (if (or (or (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (> carry 0)) (let ()
    (define av 0)
    (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let ()
(set! av (list-ref a i))
) (void))
    (define bv 0)
    (if (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
(set! bv (list-ref b i))
) (void))
    (define s (let ([__l (let ([__l av] [__r bv]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r carry]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! res (append res (list (modulo s 10))))
    (set! carry (quotient s 10))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (bigTrim res))
))
)
(define (bigSub a b)
  (let/ec _return (begin
(define res (list))
(define borrow 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let ()
    (define av (list-ref a i))
    (define bv 0)
    (if (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
(set! bv (list-ref b i))
) (void))
    (define diff (- (- av bv) borrow))
    (if (< diff 0) (let ()
(set! diff (let ([__l diff] [__r 10]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! borrow 1)
) (let ()
(set! borrow 0)
))
    (set! res (append res (list diff)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (bigTrim res))
))
)
(define (bigMulSmall a m)
  (let/ec _return (begin
(if (equal? m 0) (let ()
(_return (list 0))
) (void))
(define res (list))
(define carry 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let ()
    (define prod (let ([__l (* (list-ref a i) m)] [__r carry]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! res (append res (list (modulo prod 10))))
    (set! carry (quotient prod 10))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (> carry 0) (let ()
    (set! res (append res (list (modulo carry 10))))
    (set! carry (quotient carry 10))
    (loop)) (void))))
(_return (bigTrim res))
))
)
(define (bigMulBig a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (let ([__l (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])] [__r (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
    (set! res (append res (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let ()
    (define carry 0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
    (define idx (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define prod (let ([__l (let ([__l (list-ref res idx)] [__r (* (list-ref a i) (list-ref b j))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r carry]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! res (list-set res idx (modulo prod 10)))
    (set! carry (quotient prod 10))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define idx (let ([__l i] [__r (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (> carry 0) (let ()
    (define prod (let ([__l (list-ref res idx)] [__r carry]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! res (list-set res idx (modulo prod 10)))
    (set! carry (quotient prod 10))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (bigTrim res))
))
)
(define (bigMulPow10 a k)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i k) (let ()
    (set! a (append (list 0) a))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return a)
))
)
(define (bigDivSmall a m)
  (let/ec _return (begin
(define res (list))
(define rem 0)
(define i (- (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (define cur (let ([__l (* rem 10)] [__r (list-ref a i)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define q (quotient cur m))
    (set! rem (modulo cur m))
    (set! res (append (list q) res))
    (set! i (- i 1))
    (loop)) (void))))
(_return (bigTrim res))
))
)
(define (bigToString a)
  (let/ec _return (begin
(define s "")
(define i (- (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (set! s (string-append s (format "~a" (list-ref a i))))
    (set! i (- i 1))
    (loop)) (void))))
(_return s)
))
)
(define (repeat ch n)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! s (string-append s ch))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (sortInts xs)
  (let/ec _return (begin
(define res (list))
(define tmp xs)
(let/ec _break (let loop ()
  (if (> (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)]) 0) (let ()
    (define min (list-ref tmp 0))
    (define idx 0)
    (define i 1)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)])) (let ()
    (if (< (list-ref tmp i) min) (let ()
(set! min (list-ref tmp i))
(set! idx i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list min)))
    (define out (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)])) (let ()
    (if (not (equal? j idx)) (let ()
(set! out (append out (list (list-ref tmp j))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! tmp out)
    (loop)) (void))))
(_return res)
))
)
(define (primesUpTo n)
  (let/ec _return (begin
(define sieve (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let ()
    (set! sieve (append sieve (list #t)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define p 2)
(let/ec _break (let loop ()
  (if (<= (* p p) n) (let ()
    (if (list-ref sieve p) (let ()
(define m (* p p))
(let/ec _break (let loop ()
  (if (<= m n) (let ()
    (set! sieve (list-set sieve m #f))
    (set! m (let ([__l m] [__r p]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define res (list))
(define x 2)
(let/ec _break (let loop ()
  (if (<= x n) (let ()
    (if (list-ref sieve x) (let ()
(set! res (append res (list x)))
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (factorialExp n primes)
  (let/ec _return (begin
(define m (hash))
(for ([p primes] #:break (> p n))
(define t n)
(define e 0)
(let/ec _break (let loop ()
  (if (> t 0) (let ()
    (set! t (/ t p))
    (set! e (let ([__l e] [__r t]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! m (hash-set (or m (hash)) (format "~a" p) e))
)
(_return m)
))
)
(define (factorSmall x primes)
  (let/ec _return (begin
(define f (hash))
(define n x)
(for ([p primes] #:break (> (* p p) n))
(define c 0)
(let/ec _break (let loop ()
  (if (equal? (modulo n p) 0) (let ()
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (/ n p))
    (loop)) (void))))
(if (> c 0) (let ()
(set! f (hash-set (or f (hash)) (format "~a" p) c))
) (void))
)
(if (> n 1) (let ()
(set! f (hash-set (or f (hash)) (format "~a" n) (let ([__l (hash-ref f (format "~a" n) 0)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(_return f)
))
)
(define (computeIP n primes)
  (let/ec _return (begin
(define exps (factorialExp (* 6 n) primes))
(define fn (factorialExp n primes))
(for ([k (in-hash-keys fn)])
(set! exps (hash-set (or exps (hash)) k (- (hash-ref exps k 0) (* 6 (if fn (hash-ref fn k #f) #f)))))
)
(set! exps (hash-set (or exps (hash)) "2" (let ([__l (hash-ref exps "2" 0)] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define t2 (let ([__l (let ([__l (* (* 532 n) n)] [__r (* 126 n)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 9]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define ft2 (factorSmall t2 primes))
(for ([k (in-hash-keys ft2)])
(set! exps (hash-set (or exps (hash)) k (let ([__l (hash-ref exps k 0)] [__r (if ft2 (hash-ref ft2 k #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
)
(set! exps (hash-set (or exps (hash)) "3" (- (hash-ref exps "3" 0) 1)))
(define keys (list))
(for ([k (in-hash-keys exps)])
(set! keys (append keys (list (int k))))
)
(set! keys (sortInts keys))
(define res (bigFromInt 1))
(for ([p keys])
(define e (if exps (hash-ref exps (format "~a" p) #f) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (< i e) (let ()
    (set! res (bigMulSmall res p))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
)
(_return res)
))
)
(define (formatTerm ip pw)
  (let/ec _return (begin
(define s (bigToString ip))
(if (>= pw (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
(define frac (string-append (repeat "0" (- pw (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) s))
(if (< (cond [(string? frac) (string-length frac)] [(hash? frac) (hash-count frac)] [else (length frac)]) 33) (let ()
(set! frac (string-append frac (repeat "0" (- 33 (cond [(string? frac) (string-length frac)] [(hash? frac) (hash-count frac)] [else (length frac)])))))
) (void))
(_return (string-append "0." (substring frac 0 33)))
) (void))
(define intpart (substring s 0 (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) pw)))
(define frac (substring s (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) pw) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(if (< (cond [(string? frac) (string-length frac)] [(hash? frac) (hash-count frac)] [else (length frac)]) 33) (let ()
(set! frac (string-append frac (repeat "0" (- 33 (cond [(string? frac) (string-length frac)] [(hash? frac) (hash-count frac)] [else (length frac)])))))
) (void))
(_return (string-append (string-append intpart ".") (substring frac 0 33)))
))
)
(define (bigAbsDiff a b)
  (let/ec _return (begin
(if (>= (bigCmp a b) 0) (let ()
(_return (bigSub a b))
) (void))
(_return (bigSub b a))
))
)
(define (main)
  (let/ec _return (begin
(define primes (primesUpTo 2000))
(displayln "N                               Integer Portion  Pow  Nth Term (33 dp)")
(define line (repeat "-" 89))
(displayln line)
(define sum (bigFromInt 0))
(define prev (bigFromInt 0))
(define denomPow 0)
(define n 0)
(let/ec _break (let loop ()
  (if #t (let ()
    (define ip (computeIP n primes))
    (define pw (let ([__l (* 6 n)] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (> pw denomPow) (let ()
(set! sum (bigMulPow10 sum (- pw denomPow)))
(set! prev (bigMulPow10 prev (- pw denomPow)))
(set! denomPow pw)
) (void))
    (if (< n 10) (let ()
(define termStr (formatTerm ip pw))
(define ipStr (bigToString ip))
(let/ec _break (let loop ()
  (if (< (cond [(string? ipStr) (string-length ipStr)] [(hash? ipStr) (hash-count ipStr)] [else (length ipStr)]) 44) (let ()
    (set! ipStr (string-append " " ipStr))
    (loop)) (void))))
(define pwStr (format "~a" (- pw)))
(let/ec _break (let loop ()
  (if (< (cond [(string? pwStr) (string-length pwStr)] [(hash? pwStr) (hash-count pwStr)] [else (length pwStr)]) 3) (let ()
    (set! pwStr (string-append " " pwStr))
    (loop)) (void))))
(define padTerm termStr)
(let/ec _break (let loop ()
  (if (< (cond [(string? padTerm) (string-length padTerm)] [(hash? padTerm) (hash-count padTerm)] [else (length padTerm)]) 35) (let ()
    (set! padTerm (string-append padTerm " "))
    (loop)) (void))))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" n) "  ") ipStr) "  ") pwStr) "  ") padTerm))
) (void))
    (set! sum (bigAdd sum ip))
    (define diff (bigAbsDiff sum prev))
    (if (and (>= denomPow 70) (< (bigCmp diff (bigMulPow10 (bigFromInt 1) (- denomPow 70))) 0)) (let ()
(_break)
) (void))
    (set! prev sum)
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define precision 70)
(define target (bigMulPow10 (bigFromInt 1) (let ([__l denomPow] [__r (* 2 precision)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define low (bigFromInt 0))
(define high (bigMulPow10 (bigFromInt 1) (let ([__l precision] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(let/ec _break (let loop ()
  (if (< (bigCmp low (bigSub high (bigFromInt 1))) 0) (let ()
    (define mid (bigDivSmall (bigAdd low high) 2))
    (define prod (bigMulBig (bigMulBig mid mid) sum))
    (if (<= (bigCmp prod target) 0) (let ()
(set! low mid)
) (let ()
(set! high (bigSub mid (bigFromInt 1)))
))
    (loop)) (void))))
(define piInt low)
(define piStr (bigToString piInt))
(if (<= (cond [(string? piStr) (string-length piStr)] [(hash? piStr) (hash-count piStr)] [else (length piStr)]) precision) (let ()
(set! piStr (string-append (repeat "0" (let ([__l (- precision (cond [(string? piStr) (string-length piStr)] [(hash? piStr) (hash-count piStr)] [else (length piStr)]))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) piStr))
) (void))
(define out (string-append (string-append (substring piStr 0 (- (cond [(string? piStr) (string-length piStr)] [(hash? piStr) (hash-count piStr)] [else (length piStr)]) precision)) ".") (substring piStr (- (cond [(string? piStr) (string-length piStr)] [(hash? piStr) (hash-count piStr)] [else (length piStr)]) precision) (cond [(string? piStr) (string-length piStr)] [(hash? piStr) (hash-count piStr)] [else (length piStr)]))))
(displayln "")
(displayln "Pi to 70 decimal places is:")
(displayln out)
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
