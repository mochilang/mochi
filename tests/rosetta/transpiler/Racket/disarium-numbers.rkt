;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (pow base exp)
  (let/ec _return (begin
(define result 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let ()
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (isDisarium n)
  (let/ec _return (begin
(define digits (list))
(define x n)
(if (equal? x 0) (let ()
(set! digits (append digits (list 0)))
) (void))
(let/ec _break (let loop ()
  (if (> x 0) (let ()
    (set! digits (append digits (list (modulo x 10))))
    (set! x (int (quotient x 10)))
    (loop)) (void))))
(define sum 0)
(define pos 1)
(define i (- (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let ()
    (set! sum (let ([__l sum] [__r (expt (if digits (list-ref digits (int i)) #f) pos)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! pos (let ([__l pos] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (- i 1))
    (loop)) (void))))
(_return (equal? sum n))
))
)
(define (main)
  (let/ec _return (begin
(define count 0)
(define n 0)
(let/ec _break (let loop ()
  (if (and (< count 19) (< n 3000000)) (let ()
    (if (isDisarium n) (let ()
(displayln (format "~a" n))
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (string-append (string-append "\nFound the first " (format "~a" count)) " Disarium numbers."))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
