;; Generated by Mochi 0.10.38 on 2025-07-23 16:59 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (isPrime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(if (equal? (modulo n 2) 0) (let ()
(_return (equal? n 2))
) (void))
(if (equal? (modulo n 3) 0) (let ()
(_return (equal? n 3))
) (void))
(define d 5)
(let/ec _break (let loop ()
  (if (<= (* d d) n) (let ()
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define asc (list))
(define (gen first cand digits)
  (let/ec _return (begin
(if (equal? digits 0) (let ()
(if (isPrime cand) (let ()
(set! asc (append asc (list cand)))
) (void))
(_return void)
) (void))
(define i first)
(let/ec _break (let loop ()
  (if (< i 10) (let ()
    (gen (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (* cand 10)] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- digits 1))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (pad n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define digits 1)
(let/ec _break (let loop ()
  (if (< digits 10) (let ()
    (gen 1 0 digits)
    (set! digits (let ([__l digits] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (string-append (string-append "There are " (format "~a" (cond [(string? asc) (string-length asc)] [(hash? asc) (hash-count asc)] [else (length asc)]))) " ascending primes, namely:"))
(define i 0)
(define line "")
(let/ec _break (let loop ()
  (if (< i (cond [(string? asc) (string-length asc)] [(hash? asc) (hash-count asc)] [else (length asc)])) (let ()
    (set! line (string-append (string-append line (pad (list-ref asc i) 8)) " "))
    (if (equal? (modulo (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 10) 0) (let ()
(displayln (substring line 0 (- (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 1)))
(set! line "")
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 0) (let ()
(displayln (substring line 0 (- (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 1)))
) (void))
))
)
(main)
