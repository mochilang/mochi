;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (generatePrimes n)
  (let/ec _return (begin
(define primes (list 2))
(define cand 3)
(let/ec _break (let loop ()
  (if (< (cond [(string? primes) (string-length primes)] [(hash? primes) (hash-count primes)] [else (length primes)]) n) (let ()
    (define isP #t)
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? primes) (string-length primes)] [(hash? primes) (hash-count primes)] [else (length primes)])) (let ()
    (define p (if primes (list-ref primes (int i)) #f))
    (if (> (* p p) cand) (let ()
(_break)
) (void))
    (if (equal? (modulo cand p) 0) (let ()
(set! isP #f)
(_break)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if isP (let ()
(set! primes (append primes (list cand)))
) (void))
    (set! cand (let ([__l cand] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return primes)
))
)
(define (primeFactors n primes)
  (let/ec _return (begin
(define factors (list))
(define num n)
(define i 0)
(let/ec _break (let loop ()
  (if (and (< i (cond [(string? primes) (string-length primes)] [(hash? primes) (hash-count primes)] [else (length primes)])) (<= (* (if primes (list-ref primes (int i)) #f) (if primes (list-ref primes (int i)) #f)) num)) (let ()
    (define p (if primes (list-ref primes (int i)) #f))
    (let/ec _break (let loop ()
  (if (equal? (modulo num p) 0) (let ()
    (set! factors (append factors (list p)))
    (set! num (quotient num p))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> num 1) (let ()
(set! factors (append factors (list num)))
) (void))
(_return factors)
))
)
(define prevCats (hash))
(define (cat p primes)
  (let/ec _return (begin
(if (hash-has-key? prevCats p) (let ()
(_return (if prevCats (hash-ref prevCats p #f) #f))
) (void))
(define pf (primeFactors (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) primes))
(define all23 #t)
(let/ec _break (for ([f pf])
  (let/ec _cont
(if (and (not (equal? f 2)) (not (equal? f 3))) (let ()
(set! all23 #f)
(_break)
) (void))
  )))
(if all23 (let ()
(set! prevCats (hash-set (or prevCats (hash)) p 1))
(_return 1)
) (void))
(if (> p 2) (let ()
(define unique (list))
(define last (- 1))
(let/ec _break (for ([f pf])
  (let/ec _cont
(if (not (equal? f last)) (let ()
(set! unique (append unique (list f)))
(set! last f)
) (void))
  )))
(set! pf unique)
) (void))
(define c 2)
(let/ec _break (let loop ()
  (if (<= c 11) (let ()
    (define ok #t)
    (let/ec _break (for ([f pf])
  (let/ec _cont
(if (>= (cat f primes) c) (let ()
(set! ok #f)
(_break)
) (void))
  )))
    (if ok (let ()
(set! prevCats (hash-set (or prevCats (hash)) p c))
(_return c)
) (void))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! prevCats (hash-set (or prevCats (hash)) p 12))
(_return 12)
))
)
(define (padLeft n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define primes (generatePrimes 1000))
(define es (list))
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ 12)
(set! es (append es (list (list))))
      (set! _ (+ _ 1))
      (loop)))
))
(displayln "First 200 primes:\n")
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx 200) (let ()
    (define p (if primes (list-ref primes (int idx)) #f))
    (define c (cat p primes))
    (set! es (list-set es (int (- c 1)) (append (if es (list-ref es (int (- c 1))) #f) (list p))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define c 1)
(let/ec _break (let loop ()
  (if (<= c 6) (let ()
    (if (> (cond [(string? (if es (list-ref es (int (- c 1))) #f)) (string-length (if es (list-ref es (int (- c 1))) #f))] [(hash? (if es (list-ref es (int (- c 1))) #f)) (hash-count (if es (list-ref es (int (- c 1))) #f))] [else (length (if es (list-ref es (int (- c 1))) #f))]) 0) (let ()
(displayln (string-append (string-append "Category " (format "~a" c)) ":"))
(displayln (format "~a" (if es (list-ref es (int (- c 1))) #f)))
(displayln "")
) (void))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "First thousand primes:\n")
(let/ec _break (let loop ()
  (if (< idx 1000) (let ()
    (define p (if primes (list-ref primes (int idx)) #f))
    (define cv (cat p primes))
    (set! es (list-set es (int (- cv 1)) (append (if es (list-ref es (int (- cv 1))) #f) (list p))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! c 1)
(let/ec _break (let loop ()
  (if (<= c 12) (let ()
    (define e (if es (list-ref es (int (- c 1))) #f))
    (if (> (cond [(string? e) (string-length e)] [(hash? e) (hash-count e)] [else (length e)]) 0) (let ()
(define line (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Category " (padLeft c 2)) ": First = ") (padLeft (if e (list-ref e (int 0)) #f) 7)) "  Last = ") (padLeft (if e (list-ref e (int (- (cond [(string? e) (string-length e)] [(hash? e) (hash-count e)] [else (length e)]) 1))) #f) 8)) "  Count = ") (padLeft (cond [(string? e) (string-length e)] [(hash? e) (hash-count e)] [else (length e)]) 6)))
(displayln line)
) (void))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
