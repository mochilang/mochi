;; Generated by Mochi 0.10.55 on 2025-08-03 09:40 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (parseIntDigits s)
  (let/ec _return (begin
(define n 0)
(define i 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (not (hash-has-key? digits ch)) (let ()
(_return 0)
) (void))
    (set! n (let ([__l (* n 10)] [__r (if digits (hash-ref digits ch #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return n)
))
)
(define (parseDC s)
  (let/ec _return (begin
(define neg #f)
(if (and (> (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 0) (string=? (slice s 0 1) "-")) (let ()
(set! neg #t)
(set! s (slice s 1 (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
) (void))
(define dollars 0)
(define cents 0)
(define i 0)
(define seenDot #f)
(define centDigits 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch ".") (let ()
(set! seenDot #t)
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (define d (parseIntDigits ch))
    (if seenDot (let ()
(if (< centDigits 2) (let ()
(set! cents (let ([__l (* cents 10)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! centDigits (let ([__l centDigits] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
) (let ()
(set! dollars (let ([__l (* dollars 10)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (equal? centDigits 1) (let ()
(set! cents (* cents 10))
) (void))
(define val (let ([__l (* dollars 100)] [__r cents]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if neg (let ()
(set! val (- val))
) (void))
(_return val)
))
)
(define (parseRate s)
  (let/ec _return (begin
(define neg #f)
(if (and (> (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 0) (string=? (slice s 0 1) "-")) (let ()
(set! neg #t)
(set! s (slice s 1 (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
) (void))
(define whole 0)
(define frac 0)
(define digits 0)
(define seenDot #f)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch ".") (let ()
(set! seenDot #t)
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(loop)
) (void))
    (define d (parseIntDigits ch))
    (if seenDot (let ()
(if (< digits 4) (let ()
(set! frac (let ([__l (* frac 10)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! digits (let ([__l digits] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
) (let ()
(set! whole (let ([__l (* whole 10)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (< digits 4) (let ()
    (set! frac (* frac 10))
    (set! digits (let ([__l digits] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define val (let ([__l (* whole 10000)] [__r frac]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if neg (let ()
(set! val (- val))
) (void))
(_return val)
))
)
(define (dcString dc)
  (let/ec _return (begin
(define d (quotient dc 100))
(define n dc)
(if (< n 0) (let ()
(set! n (- n))
) (void))
(define c (modulo n 100))
(define cstr (format "~a" c))
(if (equal? (cond [(string? cstr) (string-length cstr)] [(hash? cstr) (hash-count cstr)] [else (length cstr)]) 1) (let ()
(set! cstr (string-append "0" cstr))
) (void))
(_return (string-append (string-append (format "~a" d) ".") cstr))
))
)
(define (extend dc n)
  (let/ec _return (begin
(_return (* dc n))
))
)
(define (tax total rate)
  (let/ec _return (begin
(_return (int (quotient (let ([__l (* total rate)] [__r 5000]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 10000)))
))
)
(define (padLeft s n)
  (let/ec _return (begin
(define out s)
(let/ec _break (let loop ()
  (if (< (cond [(string? out) (string-length out)] [(hash? out) (hash-count out)] [else (length out)]) n) (let ()
    (set! out (string-append " " out))
    (loop)) (void))))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define hp (parseDC "5.50"))
(define mp (parseDC "2.86"))
(define rate (parseRate "0.0765"))
(define totalBeforeTax (let ([__l (extend hp 4000000000000000)] [__r (extend mp 2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define t (tax totalBeforeTax rate))
(define total (let ([__l totalBeforeTax] [__r t]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(displayln (string-append "Total before tax: " (padLeft (dcString totalBeforeTax) 22)))
(displayln (string-append "             Tax: " (padLeft (dcString t) 22)))
(displayln (string-append "           Total: " (padLeft (dcString total) 22)))
))
)
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
