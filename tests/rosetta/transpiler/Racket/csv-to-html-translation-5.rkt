;; Generated by Mochi 0.10.42 on 2025-07-28 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(define (split s sep)
  (let/ec _return (begin
(define out (list))
(define start 0)
(define i 0)
(define n (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)]))
(let/ec _break (let loop ()
  (if (<= i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) n)) (let ()
    (if (string=? (substring s i (let ([__l i] [__r n]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sep) (let ()
(set! out (append out (list (substring s start i))))
(set! i (let ([__l i] [__r n]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! start i)
) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(set! out (append out (list (substring s start (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))))
(_return out)
))
)
(define (htmlEscape s)
  (let/ec _return (begin
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (define ch (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch "&") (let ()
(set! out (string-append out "&amp;"))
) (let ()
(if (string=? ch "<") (let ()
(set! out (string-append out "&lt;"))
) (let ()
(if (string=? ch ">") (let ()
(set! out (string-append out "&gt;"))
) (let ()
(set! out (string-append out ch))
))
))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define c (string-append (string-append (string-append (string-append (string-append "Character,Speech\n" "The multitude,The messiah! Show us the messiah!\n") "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n") "The multitude,Who are you?\n") "Brians mother,I'm his mother; that's who!\n") "The multitude,Behold his mother! Behold his mother!"))
(define rows (list))
(let/ec _break (for ([line (string-split c "\n")])
  (let/ec _cont
(set! rows (append rows (list (string-split line ","))))
  )))
(displayln "<table>")
(let/ec _break (for ([row rows])
  (let/ec _cont
(define cells "")
(let/ec _break (for ([cell row])
  (let/ec _cont
(set! cells (string-append (string-append (string-append cells "<td>") (htmlEscape cell)) "</td>"))
  )))
(displayln (string-append (string-append "    <tr>" cells) "</tr>"))
  )))
(displayln "</table>")
