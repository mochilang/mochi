;; Generated by Mochi 0.10.39 on 2025-07-24 20:52 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (listStr xs)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (set! s (string-append s (format "~a" (list-ref xs i))))
    (if (< i (- (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)) (let ()
(set! s (string-append s " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (llStr lst)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let ()
    (set! s (string-append s (listStr (list-ref lst i))))
    (if (< i (- (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)]) 1)) (let ()
(set! s (string-append s " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (copy xs)
  (let/ec _return (begin
(define out (list))
(for ([v xs])
(set! out (append out (list v)))
)
(_return out)
))
)
(define (cartN lists)
  (let/ec _return (begin
(if (equal? lists #f) (let ()
(_return (list))
) (void))
(define a lists)
(if (equal? (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 0) (let ()
(_return (list (list)))
) (void))
(define out (list))
(define last (- (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 1))
(define left (cartN (sublist a 0 last)))
(for ([p left])
(for ([x (list-ref a last)])
(define row (copy p))
(set! row (append row (list x)))
(set! out (append out (list row)))
)
)
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(displayln (llStr (cartN (list (list 1 2) (list 3 4)))))
(displayln (llStr (cartN (list (list 3 4) (list 1 2)))))
(displayln (llStr (cartN (list (list 1 2) (list)))))
(displayln (llStr (cartN (list (list) (list 1 2)))))
(displayln "")
(displayln "[")
(for ([p (cartN (list (list 1776 1789) (list 7 12) (list 4 14 23) (list 0 1)))])
(displayln (string-append " " (listStr p)))
)
(displayln "]")
(displayln (llStr (cartN (list (list 1 2 3) (list 30) (list 500 100)))))
(displayln (llStr (cartN (list (list 1 2 3) (list) (list 500 100)))))
(displayln "")
(displayln (llStr (cartN #f)))
(displayln (llStr (cartN (list))))
))
)
(main)
