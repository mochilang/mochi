;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define qlimit 50000)
(define (powf base exp)
  (let/ec _return (begin
(define result 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let ()
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define g x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let ()
    (set! g (/ (let ([__l g] [__r (/ x g)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return g)
))
)
(define (modPow base exp mod)
  (let/ec _return (begin
(define result (modulo 1 mod))
(define b (modulo base mod))
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let ()
    (if (equal? (modulo e 2) 1) (let ()
(set! result (modulo (* result b) mod))
) (void))
    (set! b (modulo (* b b) mod))
    (set! e (quotient e 2))
    (loop)) (void))))
(_return result)
))
)
(define (mtest m)
  (let/ec _return (begin
(if (< m 4) (let ()
(displayln (string-append (string-append (string-append (format "~a" m) " < 4.  M") (format "~a" m)) " not tested."))
(_return void)
) (void))
(define flimit (sqrtApprox (- (powf 2.0 m) 1.0)))
(define qlast 0)
(if (< flimit qlimit) (let ()
(set! qlast (int flimit))
) (let ()
(set! qlast qlimit)
))
(define composite (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i qlast) (let ()
    (set! composite (append composite (list #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define sq (int (sqrtApprox (exact->inexact qlast))))
(define q 3)
(let/ec _break (let loop ()
  (if #t (let ()
    (if (<= q sq) (let ()
(define j (* q q))
(let/ec _break (let loop ()
  (if (<= j qlast) (let ()
    (set! composite (list-set composite (int j) #t))
    (set! j (let ([__l j] [__r q]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (define q8 (modulo q 8))
    (if (and (or (equal? q8 1) (equal? q8 7)) (equal? (modPow 2 m q) 1)) (let ()
(displayln (string-append (string-append (string-append "M" (format "~a" m)) " has factor ") (format "~a" q)))
(_return void)
) (void))
    (let/ec _break (let loop ()
  (if #t (let ()
    (set! q (let ([__l q] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (> q qlast) (let ()
(displayln (string-append (string-append "No factors of M" (format "~a" m)) " found."))
(_return void)
) (void))
    (if (not (if composite (list-ref composite (int q)) #f)) (let ()
(_break)
) (void))
    (loop)) (void))))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(mtest 31)
(mtest 67)
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
