;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (randInt s n)
  (let/ec _return (begin
(define next (modulo (let ([__l (* s 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
(_return (list next (modulo next n)))
))
)
(define (padLeft s w)
  (let/ec _return (begin
(define res "")
(define n (- w (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(let/ec _break (let loop ()
  (if (> n 0) (let ()
    (set! res (string-append res " "))
    (set! n (- n 1))
    (loop)) (void))))
(_return (string-append res s))
))
)
(define (makeSeq s le)
  (let/ec _return (begin
(define bases "ACGT")
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i le) (let ()
    (define r (randInt s 4))
    (set! s (list-ref r 0))
    (define idx (int (list-ref r 1)))
    (set! out (string-append out (substring bases idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list s out))
))
)
(define (mutate s dna w)
  (let/ec _return (begin
(define bases "ACGT")
(define le (cond [(string? dna) (string-length dna)] [(hash? dna) (hash-count dna)] [else (length dna)]))
(define r (randInt s le))
(set! s (list-ref r 0))
(define p (int (list-ref r 1)))
(set! r (randInt s 300))
(set! s (list-ref r 0))
(define x (int (list-ref r 1)))
(define arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i le) (let ()
    (set! arr (append arr (list (substring dna i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (< x (list-ref w 0)) (let ()
(set! r (randInt s 4))
(set! s (list-ref r 0))
(define idx (int (list-ref r 1)))
(define b (substring bases idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append "  Change @" (padLeft (format "~a" p) 3)) " '") (list-ref arr p)) "' to '") b) "'"))
(set! arr (list-set arr p b))
) (let ()
(if (< x (let ([__l (list-ref w 0)] [__r (list-ref w 1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(displayln (string-append (string-append (string-append (string-append "  Delete @" (padLeft (format "~a" p) 3)) " '") (list-ref arr p)) "'"))
(define j p)
(let/ec _break (let loop ()
  (if (< j (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1)) (let ()
    (set! arr (list-set arr j (list-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! arr (sublist arr 0 (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1)))
) (let ()
(set! r (randInt s 4))
(set! s (list-ref r 0))
(define idx2 (int (list-ref r 1)))
(define b (substring bases idx2 (let ([__l idx2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! arr (append arr (list "")))
(define j (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1))
(let/ec _break (let loop ()
  (if (> j p) (let ()
    (set! arr (list-set arr j (list-ref arr (- j 1))))
    (set! j (- j 1))
    (loop)) (void))))
(displayln (string-append (string-append (string-append (string-append "  Insert @" (padLeft (format "~a" p) 3)) " '") b) "'"))
(set! arr (list-set arr p b))
))
))
(define out "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let ()
    (set! out (string-append out (list-ref arr i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list s out))
))
)
(define (prettyPrint dna rowLen)
  (let/ec _return (begin
(displayln "SEQUENCE:")
(define le (cond [(string? dna) (string-length dna)] [(hash? dna) (hash-count dna)] [else (length dna)]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i le) (let ()
    (define k (let ([__l i] [__r rowLen]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (> k le) (let ()
(set! k le)
) (void))
    (displayln (string-append (string-append (padLeft (format "~a" i) 5) ": ") (substring dna i k)))
    (set! i (let ([__l i] [__r rowLen]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define a 0)
(define c 0)
(define g 0)
(define t 0)
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx le) (let ()
    (define ch (substring dna idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch "A") (let ()
(set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? ch "C") (let ()
(set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? ch "G") (let ()
(set! g (let ([__l g] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? ch "T") (let ()
(set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
))
))
))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
(displayln "BASE COUNT:")
(displayln (string-append "    A: " (padLeft (format "~a" a) 3)))
(displayln (string-append "    C: " (padLeft (format "~a" c) 3)))
(displayln (string-append "    G: " (padLeft (format "~a" g) 3)))
(displayln (string-append "    T: " (padLeft (format "~a" t) 3)))
(displayln "    ------")
(displayln (string-append "    Î£: " (format "~a" le)))
(displayln "    ======")
))
)
(define (wstring w)
  (let/ec _return (begin
(_return (string-append (string-append (string-append (string-append (string-append (string-append "  Change: " (format "~a" (list-ref w 0))) "\n  Delete: ") (format "~a" (list-ref w 1))) "\n  Insert: ") (format "~a" (list-ref w 2))) "\n"))
))
)
(define (main)
  (let/ec _return (begin
(define seed 1)
(define res (makeSeq seed 250))
(set! seed (list-ref res 0))
(define dna (format "~a" (list-ref res 1)))
(prettyPrint dna 50)
(define muts 10)
(define w (list 100 100 100))
(displayln "\nWEIGHTS (ex 300):")
(displayln (wstring w))
(displayln (string-append (string-append "MUTATIONS (" (format "~a" muts)) "):"))
(define i 0)
(let/ec _break (let loop ()
  (if (< i muts) (let ()
    (set! res (mutate seed dna w))
    (set! seed (list-ref res 0))
    (set! dna (format "~a" (list-ref res 1)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
(prettyPrint dna 50)
))
)
(main)
