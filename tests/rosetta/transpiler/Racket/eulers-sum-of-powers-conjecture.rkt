;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (eulerSum)
  (let/ec _return (begin
(define pow5 (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 250) (let ()
    (set! pow5 (append pow5 (list (* (* (* (* i i) i) i) i))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define sums (hash))
(define x2 2)
(let/ec _break (let loop ()
  (if (< x2 250) (let ()
    (define x3 1)
    (let/ec _break (let loop ()
  (if (< x3 x2) (let ()
    (define s (let ([__l (if pow5 (list-ref pow5 (int x2)) #f)] [__r (if pow5 (list-ref pow5 (int x3)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (not (hash-has-key? sums s)) (let ()
(set! sums (hash-set (or sums (hash)) s (list x2 x3)))
) (void))
    (set! x3 (let ([__l x3] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! x2 (let ([__l x2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define x0 4)
(let/ec _break (let loop ()
  (if (< x0 250) (let ()
    (define x1 3)
    (let/ec _break (let loop ()
  (if (< x1 x0) (let ()
    (define y (let ([__l x0] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< y 250) (let ()
    (define rem (- (- (if pow5 (list-ref pow5 (int y)) #f) (if pow5 (list-ref pow5 (int x0)) #f)) (if pow5 (list-ref pow5 (int x1)) #f)))
    (if (hash-has-key? sums rem) (let ()
(define pair (if sums (hash-ref sums rem #f) #f))
(define a (if pair (list-ref pair (int 0)) #f))
(define b (if pair (list-ref pair (int 1)) #f))
(if (and (> x1 a) (> a b)) (let ()
(_return (list x0 x1 a b y))
) (void))
) (void))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! x1 (let ([__l x1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! x0 (let ([__l x0] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list 0 0 0 0 0))
))
)
(define (main)
  (let/ec _return (begin
(define r (eulerSum))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" (if r (list-ref r (int 0)) #f)) " ") (format "~a" (if r (list-ref r (int 1)) #f))) " ") (format "~a" (if r (list-ref r (int 2)) #f))) " ") (format "~a" (if r (list-ref r (int 3)) #f))) " ") (format "~a" (if r (list-ref r (int 4)) #f))))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
