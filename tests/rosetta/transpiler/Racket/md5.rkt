;; Generated by Mochi 0.10.52 on 2025-08-01 19:42 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (testpkg_Add a b) (+ a b))
(define testpkg_Pi 3.14)
(define testpkg_Answer 42)
(define (testpkg_FifteenPuzzleExample) "Solution found in 52 moves: rrrulddluuuldrurdddrullulurrrddldluurddlulurruldrdrd")
(define (testpkg_ECDSAExample) (hash "D" "1234567890" "X" "43162711582587979080031819627904423023685561091192625653251495188141318209988" "Y" "86807430002474105664458509423764867536342689150582922106807036347047552480521" "Hash" "0xe6f9ed0d" "R" "43162711582587979080031819627904423023685561091192625653251495188141318209988" "S" "94150071556658883365738746782965214584303361499725266605620843043083873122499" "Valid" #t))
(define (testpkg_MD5Hex s) (let ([in (open-input-string (format "~a" s))]) (define b (md5-bytes in)) (close-input-port in) (bytes->hex-string b)))
(let/ec _break (for ([pair (list (list "d41d8cd98f00b204e9800998ecf8427e" "") (list "0cc175b9c0f1b6a831c399e269772661" "a") (list "900150983cd24fb0d6963f7d28e17f72" "abc") (list "f96b697d7cb7938d525a2f31aaf161d0" "message digest") (list "c3fcd3d76192e4007dfb496cca67e13b" "abcdefghijklmnopqrstuvwxyz") (list "d174ab98d277d9f5a5611c2c9f419d9f" "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789") (list "57edf4a22be3c955ac49da2e2107b67a" (string-append "12345678901234567890" "123456789012345678901234567890123456789012345678901234567890")) (list "e38ca1d920c4b8b8d3946b2c72f01680" "The quick brown fox jumped over the lazy dog's back"))])
  (let/ec _cont
(define sum (testpkg_MD5Hex (if pair (list-ref pair (int 1)) #f)))
(if (not (string=? sum (if pair (list-ref pair (int 0)) #f))) (let ()
(displayln "MD5 fail")
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "  for string," (if pair (list-ref pair (int 1)) #f))) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "  expected:  " (if pair (list-ref pair (int 0)) #f))) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "  got:       " sum)) " "))
) (void))
  )))
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
