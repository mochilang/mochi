;; Generated by Mochi 0.10.37 on 2025-07-23 14:07 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (node cl le aa ri)
  (let/ec _return (begin
(_return (hash "cl" cl "le" le "aa" aa "ri" ri))
))
)
(define (treeString t)
  (let/ec _return (begin
(if (equal? t #f) (let ()
(_return "E")
) (void))
(define m t)
(_return (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "T(" (hash-ref m "cl")) ", ") (treeString (hash-ref m "le"))) ", ") (format "~a" (hash-ref m "aa"))) ", ") (treeString (hash-ref m "ri"))) ")"))
))
)
(define (balance t)
  (let/ec _return (begin
(if (equal? t #f) (let ()
(_return t)
) (void))
(define m t)
(if (not (string=? (hash-ref m "cl") "B")) (let ()
(_return t)
) (void))
(define le (hash-ref m "le"))
(define ri (hash-ref m "ri"))
(if (not (equal? le #f)) (let ()
(define leMap le)
(if (string=? (hash-ref leMap "cl") "R") (let ()
(define lele (hash-ref leMap "le"))
(if (not (equal? lele #f)) (let ()
(define leleMap lele)
(if (string=? (hash-ref leleMap "cl") "R") (let ()
(_return (node "R" (node "B" (hash-ref leleMap "le") (hash-ref leleMap "aa") (hash-ref leleMap "ri")) (hash-ref leMap "aa") (node "B" (hash-ref leMap "ri") (hash-ref m "aa") ri)))
) (void))
) (void))
(define leri (hash-ref leMap "ri"))
(if (not (equal? leri #f)) (let ()
(define leriMap leri)
(if (string=? (hash-ref leriMap "cl") "R") (let ()
(_return (node "R" (node "B" (hash-ref leMap "le") (hash-ref leMap "aa") (hash-ref leriMap "le")) (hash-ref leriMap "aa") (node "B" (hash-ref leriMap "ri") (hash-ref m "aa") ri)))
) (void))
) (void))
) (void))
) (void))
(if (not (equal? ri #f)) (let ()
(define riMap ri)
(if (string=? (hash-ref riMap "cl") "R") (let ()
(define rile (hash-ref riMap "le"))
(if (not (equal? rile #f)) (let ()
(define rileMap rile)
(if (string=? (hash-ref rileMap "cl") "R") (let ()
(_return (node "R" (node "B" (hash-ref m "le") (hash-ref m "aa") (hash-ref rileMap "le")) (hash-ref rileMap "aa") (node "B" (hash-ref rileMap "ri") (hash-ref riMap "aa") (hash-ref riMap "ri"))))
) (void))
) (void))
(define riri (hash-ref riMap "ri"))
(if (not (equal? riri #f)) (let ()
(define ririMap riri)
(if (string=? (hash-ref ririMap "cl") "R") (let ()
(_return (node "R" (node "B" (hash-ref m "le") (hash-ref m "aa") (hash-ref riMap "le")) (hash-ref riMap "aa") (node "B" (hash-ref ririMap "le") (hash-ref ririMap "aa") (hash-ref ririMap "ri"))))
) (void))
) (void))
) (void))
) (void))
(_return t)
))
)
(define (ins tr x)
  (let/ec _return (begin
(if (equal? tr #f) (let ()
(_return (node "R" #f x #f))
) (void))
(if (< x (hash-ref tr "aa")) (let ()
(_return (balance (node (hash-ref tr "cl") (ins (hash-ref tr "le") x) (hash-ref tr "aa") (hash-ref tr "ri"))))
) (void))
(if (> x (hash-ref tr "aa")) (let ()
(_return (balance (node (hash-ref tr "cl") (hash-ref tr "le") (hash-ref tr "aa") (ins (hash-ref tr "ri") x))))
) (void))
(_return tr)
))
)
(define (insert tr x)
  (let/ec _return (begin
(define t (ins tr x))
(if (equal? t #f) (let ()
(_return #f)
) (void))
(define m t)
(_return (node "B" (hash-ref m "le") (hash-ref m "aa") (hash-ref m "ri")))
))
)
(define tr #f)
(define i 1)
(let/ec _break (let loop ()
  (if (<= i 16) (let ()
    (set! tr (insert tr i))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (treeString tr))
