;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (node cl le aa ri)
  (let/ec _return (begin
(_return (hash "cl" cl "le" le "aa" aa "ri" ri))
))
)
(define (treeString t)
  (let/ec _return (begin
(if (equal? t #f) (let ()
(_return "E")
) (void))
(define m t)
(_return (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "T(" (if m (hash-ref m "cl" #f) #f)) ", ") (treeString (if m (hash-ref m "le" #f) #f))) ", ") (format "~a" (if m (hash-ref m "aa" #f) #f))) ", ") (treeString (if m (hash-ref m "ri" #f) #f))) ")"))
))
)
(define (balance t)
  (let/ec _return (begin
(if (equal? t #f) (let ()
(_return t)
) (void))
(define m t)
(if (not (string=? (if m (hash-ref m "cl" #f) #f) "B")) (let ()
(_return t)
) (void))
(define le (if m (hash-ref m "le" #f) #f))
(define ri (if m (hash-ref m "ri" #f) #f))
(if (not (equal? le #f)) (let ()
(define leMap le)
(if (string=? (if leMap (hash-ref leMap "cl" #f) #f) "R") (let ()
(define lele (if leMap (hash-ref leMap "le" #f) #f))
(if (not (equal? lele #f)) (let ()
(define leleMap lele)
(if (string=? (if leleMap (hash-ref leleMap "cl" #f) #f) "R") (let ()
(_return (node "R" (node "B" (if leleMap (hash-ref leleMap "le" #f) #f) (if leleMap (hash-ref leleMap "aa" #f) #f) (if leleMap (hash-ref leleMap "ri" #f) #f)) (if leMap (hash-ref leMap "aa" #f) #f) (node "B" (if leMap (hash-ref leMap "ri" #f) #f) (if m (hash-ref m "aa" #f) #f) ri)))
) (void))
) (void))
(define leri (if leMap (hash-ref leMap "ri" #f) #f))
(if (not (equal? leri #f)) (let ()
(define leriMap leri)
(if (string=? (if leriMap (hash-ref leriMap "cl" #f) #f) "R") (let ()
(_return (node "R" (node "B" (if leMap (hash-ref leMap "le" #f) #f) (if leMap (hash-ref leMap "aa" #f) #f) (if leriMap (hash-ref leriMap "le" #f) #f)) (if leriMap (hash-ref leriMap "aa" #f) #f) (node "B" (if leriMap (hash-ref leriMap "ri" #f) #f) (if m (hash-ref m "aa" #f) #f) ri)))
) (void))
) (void))
) (void))
) (void))
(if (not (equal? ri #f)) (let ()
(define riMap ri)
(if (string=? (if riMap (hash-ref riMap "cl" #f) #f) "R") (let ()
(define rile (if riMap (hash-ref riMap "le" #f) #f))
(if (not (equal? rile #f)) (let ()
(define rileMap rile)
(if (string=? (if rileMap (hash-ref rileMap "cl" #f) #f) "R") (let ()
(_return (node "R" (node "B" (if m (hash-ref m "le" #f) #f) (if m (hash-ref m "aa" #f) #f) (if rileMap (hash-ref rileMap "le" #f) #f)) (if rileMap (hash-ref rileMap "aa" #f) #f) (node "B" (if rileMap (hash-ref rileMap "ri" #f) #f) (if riMap (hash-ref riMap "aa" #f) #f) (if riMap (hash-ref riMap "ri" #f) #f))))
) (void))
) (void))
(define riri (if riMap (hash-ref riMap "ri" #f) #f))
(if (not (equal? riri #f)) (let ()
(define ririMap riri)
(if (string=? (if ririMap (hash-ref ririMap "cl" #f) #f) "R") (let ()
(_return (node "R" (node "B" (if m (hash-ref m "le" #f) #f) (if m (hash-ref m "aa" #f) #f) (if riMap (hash-ref riMap "le" #f) #f)) (if riMap (hash-ref riMap "aa" #f) #f) (node "B" (if ririMap (hash-ref ririMap "le" #f) #f) (if ririMap (hash-ref ririMap "aa" #f) #f) (if ririMap (hash-ref ririMap "ri" #f) #f))))
) (void))
) (void))
) (void))
) (void))
(_return t)
))
)
(define (ins tr x)
  (let/ec _return (begin
(if (equal? tr #f) (let ()
(_return (node "R" #f x #f))
) (void))
(if (< x (if tr (hash-ref tr "aa" #f) #f)) (let ()
(_return (balance (node (if tr (hash-ref tr "cl" #f) #f) (ins (if tr (hash-ref tr "le" #f) #f) x) (if tr (hash-ref tr "aa" #f) #f) (if tr (hash-ref tr "ri" #f) #f))))
) (void))
(if (> x (if tr (hash-ref tr "aa" #f) #f)) (let ()
(_return (balance (node (if tr (hash-ref tr "cl" #f) #f) (if tr (hash-ref tr "le" #f) #f) (if tr (hash-ref tr "aa" #f) #f) (ins (if tr (hash-ref tr "ri" #f) #f) x))))
) (void))
(_return tr)
))
)
(define (insert tr x)
  (let/ec _return (begin
(define t (ins tr x))
(if (equal? t #f) (let ()
(_return #f)
) (void))
(define m t)
(_return (node "B" (if m (hash-ref m "le" #f) #f) (if m (hash-ref m "aa" #f) #f) (if m (hash-ref m "ri" #f) #f)))
))
)
(define tr #f)
(define i 1)
(let/ec _break (let loop ()
  (if (<= i 16) (let ()
    (set! tr (insert tr i))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (treeString tr))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
