;; Generated by Mochi 0.10.55 on 2025-08-03 11:14 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (dbRec k n t p a seq)
  (let/ec _return (begin
(if (> t n) (let ()
(if (equal? (modulo n p) 0) (let ()
(define j 1)
(let/ec _break (let loop ()
  (if (<= j p) (let/ec _cont
    (set! seq (append seq (list (if a (if (hash? a) (hash-ref a j #f) (list-ref a (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
) (let ()
(set! a (list-set a (int t) (if a (if (hash? a) (hash-ref a (- t p) #f) (list-ref a (int (- t p)))) #f)))
(set! seq (dbRec k n (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) p a seq))
(define j (let ([__l (if a (if (hash? a) (hash-ref a (- t p) #f) (list-ref a (int (- t p)))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (< j k) (let/ec _cont
    (set! a (list-set a (int t) j))
    (set! seq (dbRec k n (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) t a seq))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
(_return seq)
))
)
(define (deBruijn k n)
  (let/ec _return (begin
(define digits "0123456789")
(define alphabet digits)
(if (< k 10) (let ()
(set! alphabet (slice digits 0 k))
) (void))
(define a (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (* k n)) (let/ec _cont
    (set! a (append a (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define seq (list))
(set! seq (dbRec k n 1 1 a seq))
(define b "")
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? seq) (string-length seq)] [(hash? seq) (hash-count seq)] [else (length seq)])) (let/ec _cont
    (set! b (string-append b (substring alphabet (if seq (if (hash? seq) (hash-ref seq idx #f) (list-ref seq (int idx))) #f) (+ (if seq (if (hash? seq) (hash-ref seq idx #f) (list-ref seq (int idx))) #f) 1))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! b (string-append b (slice b 0 (- n 1))))
(_return b)
))
)
(define (allDigits s)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (or (string<? ch "0") (string>? ch "9")) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (parseIntStr str)
  (let/ec _return (begin
(define n 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)])) (let/ec _cont
    (set! n (let ([__l (* n 10)] [__r (int (slice str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return n)
))
)
(define (validate db)
  (let/ec _return (begin
(define le (cond [(string? db) (string-length db)] [(hash? db) (hash-count db)] [else (length db)]))
(define found (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10000) (let/ec _cont
    (set! found (append found (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (- le 3)) (let/ec _cont
    (define s (slice db j (let ([__l j] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (allDigits s) (let ()
(define n (_parse-int-str s 10))
(set! found (list-set found (int n) (let ([__l (if found (if (hash? found) (hash-ref found n #f) (list-ref found (int n))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define errs (list))
(define k 0)
(let/ec _break (let loop ()
  (if (< k 10000) (let/ec _cont
    (if (equal? (if found (if (hash? found) (hash-ref found k #f) (list-ref found (int k))) #f) 0) (let ()
(set! errs (append errs (list (string-append (string-append "    PIN number " (padLeft k 4)) " missing"))))
) (let ()
(if (> (if found (if (hash? found) (hash-ref found k #f) (list-ref found (int k))) #f) 1) (let ()
(set! errs (append errs (list (string-append (string-append (string-append (string-append "    PIN number " (padLeft k 4)) " occurs ") (format "~a" (if found (if (hash? found) (hash-ref found k #f) (list-ref found (int k))) #f))) " times"))))
) (void))
))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define lerr (cond [(string? errs) (string-length errs)] [(hash? errs) (hash-count errs)] [else (length errs)]))
(if (equal? lerr 0) (let ()
(displayln "  No errors found")
) (let ()
(define pl "s")
(if (equal? lerr 1) (let ()
(set! pl "")
) (void))
(displayln (string-append (string-append (string-append (string-append "  " (format "~a" lerr)) " error") pl) " found:"))
(define msg (joinStr errs "\n"))
(displayln msg)
))
))
)
(define (padLeft n width)
  (let/ec _return (begin
(define s (format "~a" n))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let/ec _cont
    (set! s (string-append "0" s))
    (loop)) (void))))
(_return s)
))
)
(define (joinStr xs sep)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (if (> i 0) (let ()
(set! res (string-append res sep))
) (void))
    (set! res (string-append res (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (reverse s)
  (let/ec _return (begin
(define out "")
(define i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (set! out (string-append out (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (- i 1))
    (loop)) (void))))
(_return out)
))
)
(define (main)
  (let/ec _return (begin
(define db (deBruijn 10 4))
(define le (cond [(string? db) (string-length db)] [(hash? db) (hash-count db)] [else (length db)]))
(displayln (string-append "The length of the de Bruijn sequence is " (format "~a" le)))
(displayln "\nThe first 130 digits of the de Bruijn sequence are:")
(displayln (slice db 0 130))
(displayln "\nThe last 130 digits of the de Bruijn sequence are:")
(displayln (slice db (- le 130) (string-length db)))
(displayln "\nValidating the de Bruijn sequence:")
(validate db)
(displayln "\nValidating the reversed de Bruijn sequence:")
(define dbr (reverse db))
(validate dbr)
(set! db (string-append (string-append (slice db 0 4443) ".") (slice db 4444 (cond [(string? db) (string-length db)] [(hash? db) (hash-count db)] [else (length db)]))))
(displayln "\nValidating the overlaid de Bruijn sequence:")
(validate db)
))
)
(main)
