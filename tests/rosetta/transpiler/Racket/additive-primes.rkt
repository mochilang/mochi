;; Generated by Mochi 0.10.37 on 2025-07-23 12:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (isPrime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(if (equal? (modulo n 2) 0) (let ()
(_return (equal? n 2))
) (void))
(if (equal? (modulo n 3) 0) (let ()
(_return (equal? n 3))
) (void))
(define d 5)
(let/ec _break (let loop ()
  (if (<= (* d d) n) (let ()
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
    (set! d (let ([__l d] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (sumDigits n)
  (let/ec _return (begin
(define s 0)
(define x n)
(let/ec _break (let loop ()
  (if (> x 0) (let ()
    (set! s (let ([__l s] [__r (modulo x 10)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! x (int (quotient x 10)))
    (loop)) (void))))
(_return s)
))
)
(define (pad n)
  (let/ec _return (begin
(if (< n 10) (let ()
(_return (string-append "  " (format "~a" n)))
) (void))
(if (< n 100) (let ()
(_return (string-append " " (format "~a" n)))
) (void))
(_return (format "~a" n))
))
)
(define (main)
  (let/ec _return (begin
(displayln "Additive primes less than 500:")
(define count 0)
(define line "")
(define lineCount 0)
(define i 2)
(let/ec _break (let loop ()
  (if (< i 500) (let ()
    (if (and (isPrime i) (isPrime (sumDigits i))) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! line (string-append (string-append line (pad i)) "  "))
(set! lineCount (let ([__l lineCount] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? lineCount 10) (let ()
(displayln (substring line 0 (- (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 2)))
(set! line "")
(set! lineCount 0)
) (void))
) (void))
    (if (> i 2) (let ()
(set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(if (> lineCount 0) (let ()
(displayln (substring line 0 (- (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) 2)))
) (void))
(displayln (string-append (format "~a" count) " additive primes found."))
))
)
(main)
