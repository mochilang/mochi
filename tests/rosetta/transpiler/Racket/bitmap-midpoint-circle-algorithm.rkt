;; Generated by Mochi 0.10.42 on 2025-07-27 22:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (initGrid size)
  (let/ec _return (begin
(define g (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y size) (let ()
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x size) (let ()
    (set! row (append row (list " ")))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! g (append g (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return g)
))
)
(define (set g x y)
  (let/ec _return (begin
(if (and (and (and (>= x 0) (< x (cond [(string? (if g (list-ref g (int 0)) #f)) (string-length (if g (list-ref g (int 0)) #f))] [(hash? (if g (list-ref g (int 0)) #f)) (hash-count (if g (list-ref g (int 0)) #f))] [else (length (if g (list-ref g (int 0)) #f))]))) (>= y 0)) (< y (cond [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)]))) (let ()
(set! g (list-set g y (list-set (list-ref g y) x "#")))
) (void))
))
)
(define (circle r)
  (let/ec _return (begin
(define size (let ([__l (* r 2)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define g (initGrid size))
(define x r)
(define y 0)
(define err (- 1 r))
(let/ec _break (let loop ()
  (if (<= y x) (let ()
    (set g (let ([__l r] [__r x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l r] [__r y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set g (let ([__l r] [__r y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l r] [__r x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set g (- r x) (let ([__l r] [__r y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set g (- r y) (let ([__l r] [__r x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set g (- r x) (- r y))
    (set g (- r y) (- r x))
    (set g (let ([__l r] [__r x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- r y))
    (set g (let ([__l r] [__r y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- r x))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (< err 0) (let ()
(set! err (let ([__l (let ([__l err] [__r (* 2 y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! x (- x 1))
(set! err (let ([__l (let ([__l err] [__r (* 2 (- y x))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(_return g)
))
)
(define (trimRight row)
  (let/ec _return (begin
(define end (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)]))
(let/ec _break (let loop ()
  (if (and (> end 0) (string=? (if row (list-ref row (int (- end 1))) #f) " ")) (let ()
    (set! end (- end 1))
    (loop)) (void))))
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i end) (let ()
    (set! s (string-append s (if row (list-ref row (int i)) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define g (circle 10))
(let/ec _break (for ([row g])
  (let/ec _cont
(displayln (trimRight row))
  )))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
