;; Generated by Mochi 0.10.42 on 2025-07-27 22:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define w 400)
(define h 300)
(define n 15000)
(define frost 255)
(define grid (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let ()
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let ()
    (set! row (append row (list 0)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! grid (append grid (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! grid (list-set grid (quotient h 3) (list-set (list-ref grid (quotient h 3)) (quotient w 3) frost)))
(define (inBounds x y)
  (let/ec _return (begin
(_return (and (and (and (>= x 0) (< x w)) (>= y 0)) (< y h)))
))
)
(define (hasNeighbor x y)
  (let/ec _return (begin
(define dy (- 1))
(let/ec _break (let loop ()
  (if (<= dy 1) (let ()
    (define dx (- 1))
    (let/ec _break (let loop ()
  (if (<= dx 1) (let ()
    (if (not (and (equal? dx 0) (equal? dy 0))) (let ()
(define nx (let ([__l x] [__r dx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define ny (let ([__l y] [__r dy]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (and (inBounds nx ny) (equal? (if (if grid (list-ref grid (int ny)) #f) (list-ref (if grid (list-ref grid (int ny)) #f) (int nx)) #f) frost)) (let ()
(_return #t)
) (void))
) (void))
    (set! dx (let ([__l dx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! dy (let ([__l dy] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define a 0)
(let/ec _break (let loop ()
  (if (< a n) (let ()
    (define px (modulo (now) w))
    (define py (modulo (now) h))
    (if (equal? (if (if grid (list-ref grid (int py)) #f) (list-ref (if grid (list-ref grid (int py)) #f) (int px)) #f) frost) (let ()
(define lost #f)
(let/ec _break (let loop ()
  (if #t (let ()
    (set! px (- (let ([__l px] [__r (modulo (now) 3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
    (set! py (- (let ([__l py] [__r (modulo (now) 3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
    (if (not (inBounds px py)) (let ()
(set! lost #t)
(_break)
) (void))
    (if (not (equal? (if (if grid (list-ref grid (int py)) #f) (list-ref (if grid (list-ref grid (int py)) #f) (int px)) #f) frost)) (let ()
(_break)
) (void))
    (loop)) (void))))
(if lost (let ()
(loop)
) (void))
) (let ()
(define lost #f)
(let/ec _break (let loop ()
  (if (not (hasNeighbor px py)) (let ()
    (set! px (- (let ([__l px] [__r (modulo (now) 3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
    (set! py (- (let ([__l py] [__r (modulo (now) 3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
    (if (not (inBounds px py)) (let ()
(set! lost #t)
(_break)
) (void))
    (loop)) (void))))
(if lost (let ()
(loop)
) (void))
))
    (set! grid (list-set grid py (list-set (list-ref grid py) px frost)))
    (set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
