;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (floorf x)
  (let/ec _return (begin
(define y (int x))
(_return (exact->inexact y))
))
)
(define (powf base exp)
  (let/ec _return (begin
(define r 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let ()
    (set! r (* r base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return r)
))
)
(define (fmtF x width prec)
  (let/ec _return (begin
(define factor (powf 10.0 prec))
(define y (/ (floorf (let ([__l (* x factor)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) factor))
(define s (format "~a" y))
(define dot (index-of s "."))
(if (equal? dot (- 0 1)) (let ()
(set! s (string-append s "."))
(define j 0)
(let/ec _break (let loop ()
  (if (< j prec) (let ()
    (set! s (string-append s "0"))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (let ()
(define decs (- (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) dot) 1))
(let/ec _break (let loop ()
  (if (< decs prec) (let ()
    (set! s (string-append s "0"))
    (set! decs (let ([__l decs] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
(let/ec _break (let loop ()
  (if (< (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) width) (let ()
    (set! s (string-append " " s))
    (loop)) (void))))
(_return s)
))
)
(define (expf x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (/ 1.0 (expf (- x))))
) (void))
(define term 1.0)
(define sum 1.0)
(define i 1)
(let/ec _break (let loop ()
  (if (< i 20) (let ()
    (set! term (/ (* term x) (exact->inexact i)))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (eulerStep f x y h)
  (let/ec _return (begin
(_return (let ([__l y] [__r (* h (f x y))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (newCoolingRate k)
  (let/ec _return (begin
(_return (lambda (dt)
  (let/ec _return (begin
(_return (* (- k) dt))
))))
))
)
(define (newTempFunc k ambient initial)
  (let/ec _return (begin
(_return (lambda (t)
  (let/ec _return (begin
(_return (let ([__l ambient] [__r (* (- initial ambient) (expf (* (- k) t)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))))
))
)
(define (newCoolingRateDy k ambient)
  (let/ec _return (begin
(define cr (newCoolingRate k))
(_return (lambda (_x obj)
  (let/ec _return (begin
(_return (cr (- obj ambient)))
))))
))
)
(define (main)
  (let/ec _return (begin
(define k 0.07)
(define tempRoom 20.0)
(define tempObject 100.0)
(define fcr (newCoolingRateDy k tempRoom))
(define analytic (newTempFunc k tempRoom tempObject))
(let/ec _break (for ([step (list 2.0 5.0 10.0)])
  (let/ec _cont
(displayln (string-append "Step size = " (fmtF step 0 1)))
(displayln " Time Euler's Analytic")
(define temp tempObject)
(define time 0.0)
(let/ec _break (let loop ()
  (if (<= time 100.0) (let ()
    (define line (string-append (string-append (string-append (string-append (fmtF time 5 1) " ") (fmtF temp 7 3)) " ") (fmtF (analytic time) 7 3)))
    (displayln line)
    (set! temp (eulerStep fcr time temp step))
    (set! time (let ([__l time] [__r step]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
  )))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
