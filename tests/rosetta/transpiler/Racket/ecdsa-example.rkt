;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (testpkg_Add a b) (+ a b))
(define testpkg_Pi 3.14)
(define testpkg_Answer 42)
(define (testpkg_FifteenPuzzleExample) "Solution found in 52 moves: rrrulddluuuldrurdddrullulurrrddldluurddlulurruldrdrd")
(define (testpkg_ECDSAExample) (hash "D" "1234567890" "X" "43162711582587979080031819627904423023685561091192625653251495188141318209988" "Y" "86807430002474105664458509423764867536342689150582922106807036347047552480521" "Hash" "0xe6f9ed0d" "R" "43162711582587979080031819627904423023685561091192625653251495188141318209988" "S" "94150071556658883365738746782965214584303361499725266605620843043083873122499" "Valid" #t))
(define res (testpkg_ECDSAExample))
(displayln (string-append "Private key:\nD: " (if res (hash-ref res "D" #f) #f)))
(displayln "\nPublic key:")
(displayln (string-append "X: " (if res (hash-ref res "X" #f) #f)))
(displayln (string-append "Y: " (if res (hash-ref res "Y" #f) #f)))
(displayln "\nMessage: Rosetta Code")
(displayln (string-append "Hash   : " (if res (hash-ref res "Hash" #f) #f)))
(displayln "\nSignature:")
(displayln (string-append "R: " (if res (hash-ref res "R" #f) #f)))
(displayln (string-append "S: " (if res (hash-ref res "S" #f) #f)))
(displayln (string-append "\nSignature verified: " (format "~a" (if res (hash-ref res "Valid" #f) #f))))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
