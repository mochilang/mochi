;; Generated by Mochi 0.10.50 on 2025-07-30 23:37 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (ln x)
  (let/ec _return (begin
(define k 0.0)
(define v x)
(let/ec _break (let loop ()
  (if (>= v 2.0) (let ()
    (set! v (/ v 2.0))
    (set! k (let ([__l k] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (< v 1.0) (let ()
    (set! v (* v 2.0))
    (set! k (- k 1.0))
    (loop)) (void))))
(define z (/ (- v 1.0) (let ([__l v] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define zpow z)
(define sum z)
(define i 3)
(let/ec _break (let loop ()
  (if (<= i 9) (let ()
    (set! zpow (* (* zpow z) z))
    (set! sum (let ([__l sum] [__r (/ zpow (exact->inexact i))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define ln2 0.6931471805599453)
(_return (let ([__l (* k ln2)] [__r (* 2.0 sum)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (expf x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define i 1)
(let/ec _break (let loop ()
  (if (< i 20) (let ()
    (set! term (/ (* term x) (float i)))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (powf base exp)
  (let/ec _return (begin
(_return (expf (* exp (ln base))))
))
)
(define (lanczos7 z)
  (let/ec _return (begin
(define t (let ([__l z] [__r 6.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define x (let ([__l (let ([__l (- (let ([__l (- (let ([__l (- (let ([__l 0.9999999999998099] [__r (/ 676.5203681218851 z)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ 1259.1392167224028 (let ([__l z] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))] [__r (/ 771.3234287776531 (let ([__l z] [__r 2.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ 176.6150291621406 (let ([__l z] [__r 3.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))] [__r (/ 12.507343278686905 (let ([__l z] [__r 4.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ 0.13857109526572012 (let ([__l z] [__r 5.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))] [__r (/ 9.984369578019572e-06 (let ([__l z] [__r 6.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (/ 1.5056327351493116e-07 (let ([__l z] [__r 7.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (* (* (* 2.5066282746310002 (powf t (- z 0.5))) (powf 2.718281828459045 (- t))) x))
))
)
(define xs (list (- 0.5) 0.1 0.5 1.0 1.5 2.0 3.0 10.0 140.0 170.0))
(let/ec _break (for ([x xs])
  (let/ec _cont
(displayln (string-append (string-append (format "~a" x) " ") (format "~a" (lanczos7 x))))
  )))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
