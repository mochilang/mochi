;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (split s sep)
  (let/ec _return (begin
(define out (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (<= (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (string=? (substring s i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sep)) (let ()
(set! out (append out (list cur)))
(set! cur "")
(set! i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! cur (string-append cur (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(set! out (append out (list cur)))
(_return out)
))
)
(define (join xs sep)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (> i 0) (let ()
(set! res (string-append res sep))
) (void))
    (set! res (string-append res (if xs (list-ref xs (int i)) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (trimLeftSpaces s)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (and (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ")) (let ()
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (substring s i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
))
)
(define (makeIndent outline tab)
  (let/ec _return (begin
(define lines (split outline "\n"))
(define nodes (list))
(let/ec _break (for ([line lines])
  (let/ec _cont
(define line2 (trimLeftSpaces line))
(define level (quotient (- (cond [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]) (cond [(string? line2) (string-length line2)] [(hash? line2) (hash-count line2)] [else (length line2)])) tab))
(set! nodes (append nodes (list (hash "level" level "name" line2))))
  )))
(_return nodes)
))
)
(define (toNest nodes start level n)
  (let/ec _return (begin
(if (equal? level 0) (let ()
(set! n (hash-set (or n (hash)) "name" (if (if nodes (list-ref nodes (int 0)) #f) (hash-ref (if nodes (list-ref nodes (int 0)) #f) "name" #f) #f)))
) (void))
(define i (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (< i (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])) (let ()
    (define node (if nodes (list-ref nodes (int i)) #f))
    (define lev (int (if node (hash-ref node "level" #f) #f)))
    (if (equal? lev (let ([__l level] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(define child (hash "name" (if node (hash-ref node "name" #f) #f) "children" (list)))
(toNest nodes i (let ([__l level] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) child)
(define cs (if n (hash-ref n "children" #f) #f))
(set! cs (append cs (list child)))
(set! n (hash-set (or n (hash)) "children" cs))
) (let ()
(if (<= lev level) (let ()
(_return void)
) (void))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (countLeaves n)
  (let/ec _return (begin
(define kids (if n (hash-ref n "children" #f) #f))
(if (equal? (cond [(string? kids) (string-length kids)] [(hash? kids) (hash-count kids)] [else (length kids)]) 0) (let ()
(_return 1)
) (void))
(define total 0)
(let/ec _break (for ([k kids])
  (let/ec _cont
(set! total (let ([__l total] [__r (countLeaves k)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
  )))
(_return total)
))
)
(define (nodesByDepth root depth)
  (let/ec _return (begin
(define levels (list))
(define current (list root))
(define d 0)
(let/ec _break (let loop ()
  (if (< d depth) (let ()
    (set! levels (append levels (list current)))
    (define next (list))
    (let/ec _break (for ([n current])
  (let/ec _cont
(define kids (if n (hash-ref n "children" #f) #f))
(let/ec _break (for ([k kids])
  (let/ec _cont
(set! next (append next (list k)))
  )))
  )))
    (set! current next)
    (set! d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return levels)
))
)
(define (toMarkup n cols depth)
  (let/ec _return (begin
(define lines (list))
(set! lines (append lines (list "{| class=\"wikitable\" style=\"text-align: center;\"")))
(define l1 "|-")
(set! lines (append lines (list l1)))
(define span (countLeaves n))
(set! lines (append lines (list (string-append (string-append (string-append (string-append (string-append "| style=\"background: " (if cols (list-ref cols (int 0)) #f)) " \" colSpan=") (format "~a" span)) " | ") (format "~a" (if n (hash-ref n "name" #f) #f))))))
(set! lines (append lines (list l1)))
(define lvls (nodesByDepth n depth))
(define lvl 1)
(let/ec _break (let loop ()
  (if (< lvl depth) (let ()
    (define nodes (if lvls (list-ref lvls (int lvl)) #f))
    (if (equal? (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 0) (let ()
(set! lines (append lines (list "|  |")))
) (let ()
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])) (let ()
    (define node (if nodes (list-ref nodes (int idx)) #f))
    (set! span (countLeaves node))
    (define col lvl)
    (if (equal? lvl 1) (let ()
(set! col (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (if (>= col (cond [(string? cols) (string-length cols)] [(hash? cols) (hash-count cols)] [else (length cols)])) (let ()
(set! col (- (cond [(string? cols) (string-length cols)] [(hash? cols) (hash-count cols)] [else (length cols)]) 1))
) (void))
    (define cell (string-append (string-append (string-append (string-append (string-append "| style=\"background: " (if cols (list-ref cols (int col)) #f)) " \" colspan=") (format "~a" span)) " | ") (format "~a" (if node (hash-ref node "name" #f) #f))))
    (set! lines (append lines (list cell)))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
    (if (< lvl (- depth 1)) (let ()
(set! lines (append lines (list l1)))
) (void))
    (set! lvl (let ([__l lvl] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! lines (append lines (list "|}")))
(_return (join lines "\n"))
))
)
(define (main)
  (let/ec _return (begin
(define outline (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Display an outline as a nested table.\n" "    Parse the outline to a tree,\n") "        measuring the indent of each line,\n") "        translating the indentation to a nested structure,\n") "        and padding the tree to even depth.\n") "    count the leaves descending from each node,\n") "        defining the width of a leaf as 1,\n") "        and the width of a parent node as a sum.\n") "            (The sum of the widths of its children)\n") "    and write out a table with 'colspan' values\n") "        either as a wiki table,\n") "        or as HTML."))
(define yellow "#ffffe6;")
(define orange "#ffebd2;")
(define green "#f0fff0;")
(define blue "#e6ffff;")
(define pink "#ffeeff;")
(define cols (list yellow orange green blue pink))
(define nodes (makeIndent outline 4))
(define n (hash "name" "" "children" (list)))
(toNest nodes 0 0 n)
(displayln (toMarkup n cols 4))
(displayln "\n")
(define outline2 (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Display an outline as a nested table.\n" "    Parse the outline to a tree,\n") "        measuring the indent of each line,\n") "        translating the indentation to a nested structure,\n") "        and padding the tree to even depth.\n") "    count the leaves descending from each node,\n") "        defining the width of a leaf as 1,\n") "        and the width of a parent node as a sum.\n") "            (The sum of the widths of its children)\n") "            Propagating the sums upward as necessary.\n") "    and write out a table with 'colspan' values\n") "        either as a wiki table,\n") "        or as HTML.\n") "    Optionally add color to the nodes."))
(define cols2 (list blue yellow orange green pink))
(define nodes2 (makeIndent outline2 4))
(define n2 (hash "name" "" "children" (list)))
(toNest nodes2 0 0 n2)
(displayln (toMarkup n2 cols2 4))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
