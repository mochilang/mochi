;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (padLeft s w)
  (let/ec _return (begin
(define res "")
(define n (- w (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(let/ec _break (let loop ()
  (if (> n 0) (let ()
    (set! res (string-append res " "))
    (set! n (- n 1))
    (loop)) (void))))
(_return (string-append res s))
))
)
(define dna (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "" "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG") "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG") "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT") "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT") "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG") "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA") "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT") "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG") "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC") "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT"))
(displayln "SEQUENCE:")
(define le (cond [(string? dna) (string-length dna)] [(hash? dna) (hash-count dna)] [else (length dna)]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i le) (let ()
    (define k (let ([__l i] [__r 50]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (> k le) (let ()
(set! k le)
) (void))
    (displayln (string-append (string-append (padLeft (format "~a" i) 5) ": ") (substring dna i k)))
    (set! i (let ([__l i] [__r 50]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define a 0)
(define c 0)
(define g 0)
(define t 0)
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx le) (let ()
    (define ch (substring dna idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch "A") (let ()
(set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? ch "C") (let ()
(set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? ch "G") (let ()
(set! g (let ([__l g] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? ch "T") (let ()
(set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
))
))
))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
(displayln "BASE COUNT:")
(displayln (string-append "    A: " (padLeft (format "~a" a) 3)))
(displayln (string-append "    C: " (padLeft (format "~a" c) 3)))
(displayln (string-append "    G: " (padLeft (format "~a" g) 3)))
(displayln (string-append "    T: " (padLeft (format "~a" t) 3)))
(displayln "    ------")
(displayln (string-append "    Î£: " (format "~a" le)))
(displayln "    ======")
