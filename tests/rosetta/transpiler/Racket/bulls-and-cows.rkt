;; Generated by Mochi 0.10.42 on 2025-07-27 22:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (substring s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (shuffle xs)
  (let/ec _return (begin
(define arr xs)
(define i (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1))
(let/ec _break (let loop ()
  (if (> i 0) (let ()
    (define j (modulo (now) (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define tmp (if arr (list-ref arr (int i)) #f))
    (set! arr (list-set arr (int i) (if arr (list-ref arr (int j)) #f)))
    (set! arr (list-set arr (int j) tmp))
    (set! i (- i 1))
    (loop)) (void))))
(_return arr)
))
)
(define (main)
  (let/ec _return (begin
(displayln "Cows and Bulls")
(displayln "Guess four digit number of unique digits in the range 1 to 9.")
(displayln "A correct digit but not in the correct place is a cow.")
(displayln "A correct digit in the correct place is a bull.")
(define digits (list "1" "2" "3" "4" "5" "6" "7" "8" "9"))
(set! digits (shuffle digits))
(define pat (let ([__l (let ([__l (let ([__l (if digits (list-ref digits (int 0)) #f)] [__r (if digits (list-ref digits (int 1)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if digits (list-ref digits (int 2)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if digits (list-ref digits (int 3)) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define valid "123456789")
(let/ec _break (let loop ()
  (if #t (let ()
    (displayln "Guess: ")
    (define guess (input))
    (if (not (equal? (cond [(string? guess) (string-length guess)] [(hash? guess) (hash-count guess)] [else (length guess)]) 4)) (let ()
(displayln "Please guess a four digit number.")
(loop)
) (void))
    (define cows 0)
    (define bulls 0)
    (define seen "")
    (define i 0)
    (define malformed #f)
    (let/ec _break (let loop ()
  (if (< i 4) (let ()
    (define cg (substring guess i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (not (equal? (indexOf seen cg) (- 1))) (let ()
(displayln (string-append "Repeated digit: " cg))
(set! malformed #t)
(_break)
) (void))
    (set! seen (string-append seen cg))
    (define pos (indexOf pat cg))
    (if (equal? pos (- 1)) (let ()
(if (equal? (indexOf valid cg) (- 1)) (let ()
(displayln (string-append "Invalid digit: " cg))
(set! malformed #t)
(_break)
) (void))
) (let ()
(if (equal? pos i) (let ()
(set! bulls (let ([__l bulls] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! cows (let ([__l cows] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if malformed (let ()
(loop)
) (void))
    (displayln (string-append (string-append (string-append "Cows: " (format "~a" cows)) ", bulls: ") (format "~a" bulls)))
    (if (equal? bulls 4) (let ()
(displayln "You got it.")
(_break)
) (void))
    (loop)) (void))))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
