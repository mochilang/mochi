;; Generated by Mochi 0.10.39 on 2025-07-24 13:15 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (randOrder seed n)
  (let/ec _return (begin
(define next (modulo (let ([__l (* seed 1664525)] [__r 1013904223]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
(_return (list next (modulo next n)))
))
)
(define (randChaos seed n)
  (let/ec _return (begin
(define next (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
(_return (list next (modulo next n)))
))
)
(define (main)
  (let/ec _return (begin
(define nBuckets 10)
(define initialSum 1000)
(define buckets (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i nBuckets)
(set! buckets (append buckets (list 0)))
      (set! i (+ i 1))
      (loop)))
))
(define i nBuckets)
(define dist initialSum)
(let/ec _break (let loop ()
  (if (> i 0) (let ()
    (define v (quotient dist i))
    (set! i (- i 1))
    (set! buckets (list-set buckets i v))
    (set! dist (- dist v))
    (loop)) (void))))
(define tc0 0)
(define tc1 0)
(define total 0)
(define nTicks 0)
(define seedOrder 1)
(define seedChaos 2)
(displayln "sum  ---updates---    mean  buckets")
(define t 0)
(let/ec _break (let loop ()
  (if (< t 5) (let ()
    (define r (randOrder seedOrder nBuckets))
    (set! seedOrder (list-ref r 0))
    (define b1 (list-ref r 1))
    (define b2 (modulo (let ([__l b1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) nBuckets))
    (define v1 (list-ref buckets b1))
    (define v2 (list-ref buckets b2))
    (if (> v1 v2) (let ()
(define a (int (quotient (- v1 v2) 2)))
(if (> a (list-ref buckets b1)) (let ()
(set! a (list-ref buckets b1))
) (void))
(set! buckets (list-set buckets b1 (- (list-ref buckets b1) a)))
(set! buckets (list-set buckets b2 (let ([__l (list-ref buckets b2)] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(define a (int (quotient (- v2 v1) 2)))
(if (> a (list-ref buckets b2)) (let ()
(set! a (list-ref buckets b2))
) (void))
(set! buckets (list-set buckets b2 (- (list-ref buckets b2) a)))
(set! buckets (list-set buckets b1 (let ([__l (list-ref buckets b1)] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
    (set! tc0 (let ([__l tc0] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! r (randChaos seedChaos nBuckets))
    (set! seedChaos (list-ref r 0))
    (set! b1 (list-ref r 1))
    (set! b2 (modulo (let ([__l b1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) nBuckets))
    (set! r (randChaos seedChaos (let ([__l (list-ref buckets b1)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! seedChaos (list-ref r 0))
    (define amt (list-ref r 1))
    (if (> amt (list-ref buckets b1)) (let ()
(set! amt (list-ref buckets b1))
) (void))
    (set! buckets (list-set buckets b1 (- (list-ref buckets b1) amt)))
    (set! buckets (list-set buckets b2 (let ([__l (list-ref buckets b2)] [__r amt]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! tc1 (let ([__l tc1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define sum 0)
    (define idx 0)
    (let/ec _break (let loop ()
  (if (< idx nBuckets) (let ()
    (set! sum (let ([__l sum] [__r (list-ref buckets idx)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! total (let ([__l (let ([__l total] [__r tc0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r tc1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! nTicks (let ([__l nTicks] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (format "~a" sum) " ") (format "~a" tc0)) " ") (format "~a" tc1)) " ") (format "~a" (quotient total nTicks))) "  ") (format "~a" buckets)))
    (set! tc0 0)
    (set! tc1 0)
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(main)
