;; Generated by Mochi 0.10.39 on 2025-07-24 20:52 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define (parseBool s)
  (let/ec _return (begin
(define l (lower s))
(if (or (or (or (or (string=? l "1") (string=? l "t")) (string=? l "true")) (string=? l "yes")) (string=? l "y")) (let ()
(_return #t)
) (void))
(_return #f)
))
)
(define (main)
  (let/ec _return (begin
(define n #t)
(displayln n)
(displayln "bool")
(set! n (not n))
(displayln n)
(define x 5)
(define y 8)
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "x == y:" (equal? x y))) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "x < y:" (< x y))) " "))
(displayln "\nConvert String into Boolean Data type\n")
(define str1 "japan")
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Before :" "string")) " "))
(define bolStr (parseBool str1))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "After :" "bool")) " "))
))
)
(main)
