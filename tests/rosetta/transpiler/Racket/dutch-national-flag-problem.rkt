;; Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (listStr xs)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (set! s (string-append s (format "~a" (if xs (list-ref xs (int i)) #f))))
    (if (< i (- (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)) (let ()
(set! s (string-append s " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (ordered xs)
  (let/ec _return (begin
(if (equal? (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 0) (let ()
(_return #t)
) (void))
(define prev (if xs (list-ref xs (int 0)) #f))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
    (if (< (if xs (list-ref xs (int i)) #f) prev) (let ()
(_return #f)
) (void))
    (set! prev (if xs (list-ref xs (int i)) #f))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (outOfOrder n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return (list))
) (void))
(define r (list))
(let/ec _break (let loop ()
  (if #t (let ()
    (set! r (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i n) (let ()
    (set! r (append r (list (modulo (now) 3))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (not (ordered r)) (let ()
(_break)
) (void))
    (loop)) (void))))
(_return r)
))
)
(define (sort3 a)
  (let/ec _return (begin
(define lo 0)
(define mid 0)
(define hi (- (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 1))
(let/ec _break (let loop ()
  (if (<= mid hi) (let ()
    (define v (if a (list-ref a (int mid)) #f))
    (if (equal? v 0) (let ()
(define tmp (if a (list-ref a (int lo)) #f))
(set! a (list-set a (int lo) (if a (list-ref a (int mid)) #f)))
(set! a (list-set a (int mid) tmp))
(set! lo (let ([__l lo] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! mid (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (equal? v 1) (let ()
(set! mid (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(define tmp (if a (list-ref a (int mid)) #f))
(set! a (list-set a (int mid) (if a (list-ref a (int hi)) #f)))
(set! a (list-set a (int hi) tmp))
(set! hi (- hi 1))
))
))
    (loop)) (void))))
(_return a)
))
)
(define (main)
  (let/ec _return (begin
(define f (outOfOrder 12))
(displayln (listStr f))
(set! f (sort3 f))
(displayln (listStr f))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
