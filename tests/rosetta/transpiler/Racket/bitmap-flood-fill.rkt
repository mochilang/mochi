;; Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(define grid (list (list "." "." "." "." ".") (list "." "#" "#" "#" ".") (list "." "#" "." "#" ".") (list "." "#" "#" "#" ".") (list "." "." "." "." ".")))
(define (flood x y repl)
  (let/ec _return (begin
(define target (list-ref (list-ref grid y) x))
(if (string=? target repl) (let ()
(_return void)
) (void))
(define (ff px py)
  (let/ec _return (begin
(if (or (or (or (< px 0) (< py 0)) (>= py (cond [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]))) (>= px (cond [(string? (list-ref grid 0)) (string-length (list-ref grid 0))] [(hash? (list-ref grid 0)) (hash-count (list-ref grid 0))] [else (length (list-ref grid 0))]))) (let ()
(_return void)
) (void))
(if (not (string=? (list-ref (list-ref grid py) px) target)) (let ()
(_return void)
) (void))
(set! grid (list-set grid py (list-set (list-ref grid py) px repl)))
(ff (- px 1) py)
(ff (let ([__l px] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) py)
(ff px (- py 1))
(ff px (let ([__l py] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(ff x y)
))
)
(flood 2 2 "o")
(for ([row grid])
(define line "")
(for ([ch row])
(set! line (string-append line ch))
)
(displayln line)
)
