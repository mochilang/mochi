;; Generated by Mochi 0.10.56 on 2025-08-03 15:40 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define grid (list (list "." "." "." "." ".") (list "." "#" "#" "#" ".") (list "." "#" "." "#" ".") (list "." "#" "#" "#" ".") (list "." "." "." "." ".")))
(define (flood x y repl)
  (let/ec _return (begin
(define target (if (if grid (if (hash? grid) (hash-ref grid y #f) (list-ref grid (int y))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid y #f) (list-ref grid (int y))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid y #f) (list-ref grid (int y))) #f) x #f) (list-ref (if grid (if (hash? grid) (hash-ref grid y #f) (list-ref grid (int y))) #f) (int x))) #f))
(if (string=? target repl) (let ()
(_return void)
) (void))
(define (ff px py)
  (let/ec _return (begin
(if (or (or (or (< px 0) (< py 0)) (>= py (cond [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]))) (>= px (cond [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))]))) (let ()
(_return void)
) (void))
(if (not (string=? (if (if grid (if (hash? grid) (hash-ref grid py #f) (list-ref grid (int py))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid py #f) (list-ref grid (int py))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid py #f) (list-ref grid (int py))) #f) px #f) (list-ref (if grid (if (hash? grid) (hash-ref grid py #f) (list-ref grid (int py))) #f) (int px))) #f) target)) (let ()
(_return void)
) (void))
(set! grid (list-set grid py (list-set (list-ref grid py) px repl)))
(ff (- px 1) py)
(ff (let ([__l px] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) py)
(ff px (- py 1))
(ff px (let ([__l py] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(ff x y)
))
)
(flood 2 2 "o")
(let/ec _break (for ([row grid])
  (let/ec _cont
(define line "")
(let/ec _break (for ([ch row])
  (let/ec _cont
(set! line (string-append line ch))
  )))
(displayln line)
  )))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
