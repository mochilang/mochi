;; Generated by Mochi 0.10.50 on 2025-07-31 00:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json openssl/sha1)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (let loop ([i 0])
    (cond [(>= i (string-length s)) -1]
          [(string=? (substring s i (add1 i)) ch) i]
          [else (loop (add1 i))])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))

(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define (split s sep)
  (let/ec _return (begin
(define parts (list))
(define cur "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (and (and (> (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)]) 0) (<= (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) (string=? (slice s i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sep)) (let ()
(set! parts (append parts (list cur)))
(set! cur "")
(set! i (let ([__l i] [__r (cond [(string? sep) (string-length sep)] [(hash? sep) (hash-count sep)] [else (length sep)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! cur (string-append cur (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(set! parts (append parts (list cur)))
(_return parts)
))
)
(define (trimSpace s)
  (let/ec _return (begin
(define start 0)
(let/ec _break (let loop ()
  (if (and (< start (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (or (string=? (slice s start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ") (string=? (slice s start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "\t"))) (let ()
    (set! start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define end (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(let/ec _break (let loop ()
  (if (and (> end start) (or (string=? (slice s (- end 1) end) " ") (string=? (slice s (- end 1) end) "\t"))) (let ()
    (set! end (- end 1))
    (loop)) (void))))
(_return (slice s start end))
))
)
(define (indexOfSub s sub)
  (let/ec _return (begin
(if (equal? (cond [(string? sub) (string-length sub)] [(hash? sub) (hash-count sub)] [else (length sub)]) 0) (let ()
(_return 0)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (<= (let ([__l i] [__r (cond [(string? sub) (string-length sub)] [(hash? sub) (hash-count sub)] [else (length sub)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let ()
    (if (string=? (slice s i (let ([__l i] [__r (cond [(string? sub) (string-length sub)] [(hash? sub) (hash-count sub)] [else (length sub)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) sub) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 0 1))
))
)
(define (parseRules rs)
  (let/ec _return (begin
(define rules (list))
(let/ec _break (for ([line (string-split rs "\n")])
  (let/ec _cont
(define ln line)
(define hash (indexOfSub ln "#"))
(if (>= hash 0) (let ()
(set! ln (slice ln 0 hash))
) (void))
(set! ln (trimSpace ln))
(if (equal? (cond [(string? ln) (string-length ln)] [(hash? ln) (hash-count ln)] [else (length ln)]) 0) (let ()
(_cont)
) (void))
(define arrow (- 0 1))
(define j 0)
(let/ec _break (let loop ()
  (if (<= (let ([__l j] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? ln) (string-length ln)] [(hash? ln) (hash-count ln)] [else (length ln)])) (let ()
    (if (string=? (slice ln j (let ([__l j] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "->") (let ()
(define pre (and (> j 0) (or (string=? (slice ln (- j 1) j) " ") (string=? (slice ln (- j 1) j) "\t"))))
(define post (and (< (let ([__l j] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? ln) (string-length ln)] [(hash? ln) (hash-count ln)] [else (length ln)])) (or (string=? (slice ln (let ([__l j] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l j] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ") (string=? (slice ln (let ([__l j] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l j] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "\t"))))
(if (and pre post) (let ()
(set! arrow j)
(_break)
) (void))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (< arrow 0) (let ()
(set! arrow (indexOfSub ln "->"))
) (void))
(if (< arrow 0) (let ()
(_return (hash "ok" #f))
) (void))
(define pat (trimSpace (slice ln 0 arrow)))
(define rest (trimSpace (slice ln (let ([__l arrow] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? ln) (string-length ln)] [(hash? ln) (hash-count ln)] [else (length ln)]))))
(define term #f)
(if (and (> (cond [(string? rest) (string-length rest)] [(hash? rest) (hash-count rest)] [else (length rest)]) 0) (string=? (slice rest 0 1) ".")) (let ()
(set! term #t)
(set! rest (slice rest 1 (cond [(string? rest) (string-length rest)] [(hash? rest) (hash-count rest)] [else (length rest)])))
) (void))
(define rep rest)
(set! rules (append rules (list (hash "pat" pat "rep" rep "term" term))))
  )))
(_return (hash "ok" #t "rules" rules))
))
)
(define (runRules rules s)
  (let/ec _return (begin
(define changed #t)
(let/ec _break (let loop ()
  (if changed (let ()
    (set! changed #f)
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? rules) (string-length rules)] [(hash? rules) (hash-count rules)] [else (length rules)])) (let ()
    (define r (if rules (list-ref rules (int i)) #f))
    (define pat (if r (hash-ref r "pat" #f) #f))
    (define rep (if r (hash-ref r "rep" #f) #f))
    (define term (if r (hash-ref r "term" #f) #f))
    (define idx (indexOfSub s pat))
    (if (>= idx 0) (let ()
(set! s (let ([__l (let ([__l (slice s 0 idx)] [__r rep]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (slice s (let ([__l idx] [__r (cond [(string? pat) (string-length pat)] [(hash? pat) (hash-count pat)] [else (length pat)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (string-length s))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! changed #t)
(if term (let ()
(_return s)
) (void))
(_break)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (loop)) (void))))
(_return s)
))
)
(define (interpret ruleset input)
  (let/ec _return (begin
(define p (parseRules ruleset))
(if (not (if p (hash-ref p "ok" #f) #f)) (let ()
(_return (hash "ok" #f "out" ""))
) (void))
(define out (runRules (if p (hash-ref p "rules" #f) #f) input))
(_return (hash "ok" #t "out" out))
))
)
(define testSet (list (hash "ruleSet" "# This rules file is extracted from Wikipedia:\n# http://en.wikipedia.org/wiki/Markov_Algorithm\nA -> apple\nB -> bag\nS -> shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n" "sample" "I bought a B of As from T S." "output" "I bought a bag of apples from my brother.") (hash "ruleSet" "# Slightly modified from the rules on Wikipedia\nA -> apple\nB -> bag\nS -> .shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n" "sample" "I bought a B of As from T S." "output" "I bought a bag of apples from T shop.") (hash "ruleSet" "# BNF Syntax testing rules\nA -> apple\nWWWW -> with\nBgage -> ->.*\nB -> bag\n->.* -> money\nW -> WW\nS -> .shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n" "sample" "I bought a B of As W my Bgage from T S." "output" "I bought a bag of apples with my money from T shop.") (hash "ruleSet" "### Unary Multiplication Engine, for testing Markov Algorithm implementations\n### By Donal Fellows.\n# Unary addition engine\n_+1 -> _1+\n1+1 -> 11+\n# Pass for converting from the splitting of multiplication into ordinary\n# addition\n1! -> !1\n,! -> !+\n_! -> _\n# Unary multiplication by duplicating left side, right side times\n1*1 -> x,@y\n1x -> xX\nX, -> 1,1\nX1 -> 1X\n_x -> _X\n,x -> ,X\ny1 -> 1y\ny_ -> _\n# Next phase of applying\n1@1 -> x,@y\n1@_ -> @_\n,@_ -> !_\n++ -> +\n# Termination cleanup for addition\n_1 -> 1\n1+_ -> 1\n_+_ ->\n" "sample" "_1111*11111_" "output" "11111111111111111111") (hash "ruleSet" "# Turing machine: three-state busy beaver\n#\n# state A, symbol 0 => write 1, move right, new state B\nA0 -> 1B\n# state A, symbol 1 => write 1, move left, new state C\n0A1 -> C01\n1A1 -> C11\n# state B, symbol 0 => write 1, move left, new state A\n0B0 -> A01\n1B0 -> A11\n# state B, symbol 1 => write 1, move right, new state B\nB1 -> 1B\n# state C, symbol 0 => write 1, move left, new state B\n0C0 -> B01\n1C0 -> B11\n# state C, symbol 1 => write 1, move left, halt\n0C1 -> H01\n1C1 -> H11\n" "sample" "000000A000000" "output" "00011H1111000")))
(define (main)
  (let/ec _return (begin
(displayln (string-append (string-append "validating " (format "~a" (cond [(string? testSet) (string-length testSet)] [(hash? testSet) (hash-count testSet)] [else (length testSet)]))) " test cases"))
(define failures #f)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? testSet) (string-length testSet)] [(hash? testSet) (hash-count testSet)] [else (length testSet)])) (let ()
    (define tc (if testSet (list-ref testSet (int i)) #f))
    (define res (interpret (if tc (list-ref tc (int "ruleSet")) #f) (if tc (list-ref tc (int "sample")) #f)))
    (if (not (if res (hash-ref res "ok" #f) #f)) (let ()
(displayln (string-append (string-append "test " (format "~a" (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) " invalid ruleset"))
(set! failures #t)
) (let ()
(if (not (equal? (if res (hash-ref res "out" #f) #f) (if tc (list-ref tc (int "output")) #f))) (let ()
(displayln (string-append (string-append (string-append (string-append (string-append "test " (format "~a" (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) ": got ") (if res (hash-ref res "out" #f) #f)) ", want ") (if tc (list-ref tc (int "output")) #f)))
(set! failures #t)
) (void))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (not failures) (let ()
(displayln "no failures")
) (void))
))
)
(main)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
