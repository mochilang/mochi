;; Generated by Mochi 0.10.42 on 2025-07-27 22:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))
(define (num r) (numerator r))
(define (denom r) (denominator r))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (char n)
  (let/ec _return (begin
(define letters "abcdefghijklmnopqrstuvwxyz")
(define idx (- n 97))
(if (or (< idx 0) (>= idx (cond [(string? letters) (string-length letters)] [(hash? letters) (hash-count letters)] [else (length letters)]))) (let ()
(_return "?")
) (void))
(_return (substring letters idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (fromBytes bs)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bs) (string-length bs)] [(hash? bs) (hash-count bs)] [else (length bs)])) (let ()
    (set! s (string-append s (char (if bs (list-ref bs (int i)) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define b (list 98 105 110 97 114 121))
(displayln (format "~a" b))
(define c b)
(displayln (format "~a" c))
(displayln (format "~a" (equal? b c)))
(define d (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
    (set! d (append d (list (if b (list-ref b (int i)) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! d (list-set d (int 1) 97))
(set! d (list-set d (int 4) 110))
(displayln (fromBytes b))
(displayln (fromBytes d))
(displayln (format "~a" (equal? (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]) 0)))
(define z (append b (list 122)))
(displayln (fromBytes z))
(define sub (sublist b 1 3))
(displayln (fromBytes sub))
(define f (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? d) (string-length d)] [(hash? d) (hash-count d)] [else (length d)])) (let ()
    (define val (if d (list-ref d (int i)) #f))
    (if (equal? val 110) (let ()
(set! f (append f (list 109)))
) (let ()
(set! f (append f (list val)))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (string-append (string-append (fromBytes d) " -> ") (fromBytes f)))
(define rem (list))
(set! rem (append rem (list (if b (list-ref b (int 0)) #f))))
(set! i 3)
(let/ec _break (let loop ()
  (if (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let ()
    (set! rem (append rem (list (if b (list-ref b (int i)) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (fromBytes rem))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
