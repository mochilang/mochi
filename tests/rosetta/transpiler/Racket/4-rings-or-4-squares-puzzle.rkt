;; Generated by Mochi 0.10.40 on 2025-07-25 19:02 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (validComb a b c d e f g)
  (let/ec _return (begin
(define square1 (let ([__l a] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define square2 (let ([__l (let ([__l b] [__r c]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define square3 (let ([__l (let ([__l d] [__r e]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r f]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define square4 (let ([__l f] [__r g]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (and (and (equal? square1 square2) (equal? square2 square3)) (equal? square3 square4)))
))
)
(define (isUnique a b c d e f g)
  (let/ec _return (begin
(define nums (list a b c d e f g))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
    (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< j (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
    (if (equal? (list-ref nums i) (list-ref nums j)) (let ()
(_return #f)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (getCombs low high unique)
  (let/ec _return (begin
(define valid (list))
(define count 0)
(let/ec _break (let ([b low])
  (let loop ()
    (when (< b (let ([__l high] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let ([c low])
  (let loop ()
    (when (< c (let ([__l high] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let ([d low])
  (let loop ()
    (when (< d (let ([__l high] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define s (let ([__l (let ([__l b] [__r c]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let ([e low])
  (let loop ()
    (when (< e (let ([__l high] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let ([f low])
  (let loop ()
    (when (< f (let ([__l high] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define a (- s b))
(define g (- s f))
(if (or (< a low) (> a high)) (let ()
(begin (set! f (+ f 1)) (loop))
) (void))
(if (or (< g low) (> g high)) (let ()
(begin (set! f (+ f 1)) (loop))
) (void))
(if (not (equal? (let ([__l (let ([__l d] [__r e]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r f]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) s)) (let ()
(begin (set! f (+ f 1)) (loop))
) (void))
(if (not (equal? (let ([__l f] [__r g]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) s)) (let ()
(begin (set! f (+ f 1)) (loop))
) (void))
(if (or (not unique) (isUnique a b c d e f g)) (let ()
(set! valid (append valid (list (list a b c d e f g))))
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! f (+ f 1))
      (loop)))
))
      (set! e (+ e 1))
      (loop)))
))
      (set! d (+ d 1))
      (loop)))
))
      (set! c (+ c 1))
      (loop)))
))
      (set! b (+ b 1))
      (loop)))
))
(_return (hash "count" count "list" valid))
))
)
(define r1 (getCombs 1 7 #t))
(displayln (string-append (format "~a" (if r1 (hash-ref r1 "count" #f) #f)) " unique solutions in 1 to 7"))
(displayln (if r1 (hash-ref r1 "list" #f) #f))
(define r2 (getCombs 3 9 #t))
(displayln (string-append (format "~a" (if r2 (hash-ref r2 "count" #f) #f)) " unique solutions in 3 to 9"))
(displayln (if r2 (hash-ref r2 "list" #f) #f))
(define r3 (getCombs 0 9 #f))
(displayln (string-append (format "~a" (if r3 (hash-ref r3 "count" #f) #f)) " non-unique solutions in 0 to 9"))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
