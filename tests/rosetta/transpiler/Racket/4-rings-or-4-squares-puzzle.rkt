;; Generated by Mochi 0.10.37 on 2025-07-23 11:36 +0700
#lang racket/base
(require racket/list racket/string racket/math json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (current-inexact-milliseconds)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))


(define (validComb a b c d e f g)
  (let/ec _return (begin
(define square1 (+ a b))
(define square2 (+ (+ b c) d))
(define square3 (+ (+ d e) f))
(define square4 (+ f g))
(_return (and (and (equal? square1 square2) (equal? square2 square3)) (equal? square3 square4)))
))
)
(define (isUnique a b c d e f g)
  (let/ec _return (begin
(define nums (list a b c d e f g))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
    (define j (+ i 1))
    (let/ec _break (let loop ()
  (if (< j (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
    (if (equal? (list-ref nums i) (list-ref nums j)) (let ()
(_return #f)
) (void))
    (set! j (+ j 1))
    (loop)) (void))))
    (set! i (+ i 1))
    (loop)) (void))))
(_return #t)
))
)
(define (getCombs low high unique)
  (let/ec _return (begin
(define valid (list))
(define count 0)
(let/ec _break (let ([b low])
  (let loop ()
    (when (< b (+ high 1))
(let/ec _break (let ([c low])
  (let loop ()
    (when (< c (+ high 1))
(let/ec _break (let ([d low])
  (let loop ()
    (when (< d (+ high 1))
(define s (+ (+ b c) d))
(let/ec _break (let ([e low])
  (let loop ()
    (when (< e (+ high 1))
(let/ec _break (let ([f low])
  (let loop ()
    (when (< f (+ high 1))
(define a (- s b))
(define g (- s f))
(if (or (< a low) (> a high)) (let ()
(begin (set! f (+ f 1)) (loop))
) (void))
(if (or (< g low) (> g high)) (let ()
(begin (set! f (+ f 1)) (loop))
) (void))
(if (not (equal? (+ (+ d e) f) s)) (let ()
(begin (set! f (+ f 1)) (loop))
) (void))
(if (not (equal? (+ f g) s)) (let ()
(begin (set! f (+ f 1)) (loop))
) (void))
(if (or (not unique) (isUnique a b c d e f g)) (let ()
(set! valid (append valid (list (list a b c d e f g))))
(set! count (+ count 1))
) (void))
      (set! f (+ f 1))
      (loop)))
))
      (set! e (+ e 1))
      (loop)))
))
      (set! d (+ d 1))
      (loop)))
))
      (set! c (+ c 1))
      (loop)))
))
      (set! b (+ b 1))
      (loop)))
))
(_return (hash "count" count "list" valid))
))
)
(define r1 (getCombs 1 7 #t))
(displayln (string-append (format "~a" (hash-ref r1 "count")) " unique solutions in 1 to 7"))
(displayln (hash-ref r1 "list"))
(define r2 (getCombs 3 9 #t))
(displayln (string-append (format "~a" (hash-ref r2 "count")) " unique solutions in 3 to 9"))
(displayln (hash-ref r2 "list"))
(define r3 (getCombs 0 9 #f))
(displayln (string-append (format "~a" (hash-ref r3 "count")) " non-unique solutions in 0 to 9"))
