;; Generated by Mochi 0.10.40 on 2025-07-25 22:03 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match json)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(integer? x) x]
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (pad-start s width ch)
  (if (< (string-length s) width)
      (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
      s))

(let* ([_start_mem (current-memory-use)] [_start (now)])
(define (amb wordsets res idx)
  (let/ec _return (begin
(if (equal? idx (cond [(string? wordsets) (string-length wordsets)] [(hash? wordsets) (hash-count wordsets)] [else (length wordsets)])) (let ()
(_return #t)
) (void))
(define prev "")
(if (> idx 0) (let ()
(set! prev (list-ref res (- idx 1)))
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (list-ref wordsets idx)) (string-length (list-ref wordsets idx))] [(hash? (list-ref wordsets idx)) (hash-count (list-ref wordsets idx))] [else (length (list-ref wordsets idx))])) (let ()
    (define w (list-ref (list-ref wordsets idx) i))
    (if (or (equal? idx 0) (equal? (substring prev (- (cond [(string? prev) (string-length prev)] [(hash? prev) (hash-count prev)] [else (length prev)]) 1) (cond [(string? prev) (string-length prev)] [(hash? prev) (hash-count prev)] [else (length prev)])) (substring w 0 1))) (let ()
(set! res (list-set res idx w))
(if (amb wordsets res (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(_return #t)
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (main)
  (let/ec _return (begin
(define wordset (list (list "the" "that" "a") (list "frog" "elephant" "thing") (list "walked" "treaded" "grows") (list "slowly" "quickly")))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? wordset) (string-length wordset)] [(hash? wordset) (hash-count wordset)] [else (length wordset)])) (let ()
    (set! res (append res (list "")))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (amb wordset res 0) (let ()
(define out (string-append "[" (list-ref res 0)))
(define j 1)
(let/ec _break (let loop ()
  (if (< j (cond [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)])) (let ()
    (set! out (string-append (string-append out " ") (list-ref res j)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! out (string-append out "]"))
(displayln out)
) (let ()
(displayln "No amb found")
))
))
)
(main)
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
