// Generated by Mochi 0.10.50 on 2025-07-31 00:56 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<long, Dictionary<string, object>> nodes_0 = new Dictionary<long, Dictionary<string, object>>{};
    static long head_1 = (0 - 1);
    static long tail_2 = (0 - 1);
    static string out_5 = "From tail:";
    static string listString() {
        if ((head_1 == (0 - 1))) {
            return "<nil>";
        };
        string r_3 = (((dynamic)"[") + ((dynamic)((dynamic)((dynamic)nodes_0)[head_1])["value"]));
        var id_4 = Convert.ToInt64(((dynamic)((dynamic)nodes_0)[head_1])["next"]);
        while ((id_4 != (0 - 1))) {
            r_3 = (((dynamic)(r_3 + " ")) + ((dynamic)((dynamic)((dynamic)nodes_0)[id_4])["value"]));
            id_4 = Convert.ToInt64(((dynamic)((dynamic)nodes_0)[id_4])["next"]);
        };
        r_3 = (r_3 + "]");
        return r_3;
    }

    static void Main() {
        Console.WriteLine(_fmtTop(listString()));
        nodes_0[0] = new Dictionary<string, object>{{"value", "A"}, {"next", (0 - 1)}, {"prev", (0 - 1)}};
        head_1 = 0;
        tail_2 = 0;
        nodes_0[1] = new Dictionary<string, object>{{"value", "B"}, {"next", (0 - 1)}, {"prev", 0}};
        ((dynamic)nodes_0)[0]["next"] = 1;
        tail_2 = 1;
        Console.WriteLine(_fmtTop(listString()));
        nodes_0[2] = new Dictionary<string, object>{{"value", "C"}, {"next", 1}, {"prev", 0}};
        ((dynamic)nodes_0)[1]["prev"] = 2;
        ((dynamic)nodes_0)[0]["next"] = 2;
        Console.WriteLine(_fmtTop(listString()));
        long id_6 = tail_2;
        while ((id_6 != (0 - 1))) {
            out_5 = (((dynamic)(out_5 + " ")) + ((dynamic)((dynamic)((dynamic)nodes_0)[id_6])["value"]));
            id_6 = Convert.ToInt64(((dynamic)((dynamic)nodes_0)[id_6])["prev"]);
        }
        Console.WriteLine(_fmtTop(out_5));
    }
}
