// Generated by Mochi 0.10.42 on 2025-07-27 16:55 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] n_19 = new long[]{3, 5, 7};
    static long[] a_20 = new long[]{2, 3, 2};
    static long res_21 = crt(a_20, n_19);
    static long[] egcd(long a_0, long b_1) {
        if ((a_0 == 0)) {
            return new long[]{b_1, 0, 1};
        };
        long[] res_2 = egcd((b_1 % a_0), a_0);
        long g_3 = res_2[(int)(0)];
        long x1_4 = res_2[(int)(1)];
        long y1_5 = res_2[(int)(2)];
        return new long[]{g_3, (y1_5 - ((b_1 / a_0) * x1_4)), x1_4};
    }

    static long modInv(long a_6, long m_7) {
        long[] r_8 = egcd(a_6, m_7);
        if ((r_8[(int)(0)] != 1)) {
            return 0;
        };
        long x_9 = r_8[(int)(1)];
        if ((x_9 < 0)) {
            return (x_9 + m_7);
        };
        return x_9;
    }

    static long crt(long[] a_10, long[] n_11) {
        long prod_12 = 1;
        long i_13 = 0;
        while ((i_13 < n_11.Length)) {
            prod_12 = (prod_12 * n_11[(int)(i_13)]);
            i_13 = (i_13 + 1);
        };
        long x_14 = 0;
        i_13 = 0;
        while ((i_13 < n_11.Length)) {
            long ni_15 = n_11[(int)(i_13)];
            long ai_16 = a_10[(int)(i_13)];
            long p_17 = (prod_12 / ni_15);
            long inv_18 = modInv((p_17 % ni_15), ni_15);
            x_14 = (x_14 + ((ai_16 * inv_18) * p_17));
            i_13 = (i_13 + 1);
        };
        return (x_14 % prod_12);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(((res_21).ToString() + " <nil>")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
