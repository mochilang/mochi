// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long pow2(long n_0) {
        long p_1 = 1;
        long i_2 = 0;
        while ((i_2 < n_0)) {
            p_1 = (p_1 * 2);
            i_2 = (i_2 + 1);
        };
        return p_1;
    }

    static long btoi(bool b_3) {
        if (b_3) {
            return 1;
        };
        return 0;
    }

    static string addNoCells(string cells_4) {
        string l_5 = "O";
        string r_6 = "O";
        if ((cells_4.Substring((int)(0), (int)(1 - 0)) == "O")) {
            l_5 = ".";
        };
        if ((cells_4.Substring((int)((((dynamic)cells_4.Length) - ((dynamic)1))), (int)(cells_4.Length - (((dynamic)cells_4.Length) - ((dynamic)1)))) == "O")) {
            r_6 = ".";
        };
        cells_4 = ((l_5 + cells_4) + r_6);
        cells_4 = ((l_5 + cells_4) + r_6);
        return cells_4;
    }

    static string step(string cells_7, long ruleVal_8) {
        string newCells_9 = "";
        long i_10 = 0;
        while ((i_10 < (((dynamic)cells_7.Length) - ((dynamic)2)))) {
            long bin_11 = 0;
            long b_12 = 2;
            long n_13 = i_10;
            while ((n_13 < (i_10 + 3))) {
                bin_11 = (bin_11 + (btoi((cells_7.Substring((int)(n_13), (int)((n_13 + 1) - n_13)) == "O")) * pow2(b_12)));
                b_12 = (b_12 - 1);
                n_13 = (n_13 + 1);
            }
            string a_14 = ".";
            if ((((ruleVal_8 / pow2(bin_11)) % 2) == 1)) {
                a_14 = "O";
            }
            newCells_9 = (newCells_9 + a_14);
            i_10 = (i_10 + 1);
        };
        return newCells_9;
    }

    static string repeat(string ch_15, long n_16) {
        string s_17 = "";
        long i_18 = 0;
        while ((i_18 < n_16)) {
            s_17 = (s_17 + ch_15);
            i_18 = (i_18 + 1);
        };
        return s_17;
    }

    static void evolve(long l_19, long ruleVal_20) {
        Console.WriteLine(_fmtTop(((" Rule #" + (ruleVal_20).ToString()) + ":")));
        string cells_21 = "O";
        long x_22 = 0;
        while ((x_22 < l_19)) {
            cells_21 = addNoCells(cells_21);
            long width_23 = (40 + (((dynamic)cells_21.Length) / ((dynamic)2)));
            string spaces_24 = repeat(" ", (((dynamic)width_23) - ((dynamic)cells_21.Length)));
            Console.WriteLine(_fmtTop((spaces_24 + cells_21)));
            cells_21 = step(cells_21, ruleVal_20);
            x_22 = (x_22 + 1);
        };
    }

    static void main() {
        foreach (var r_25 in new long[]{90, 30}) {
            evolve(25, r_25);
            Console.WriteLine(_fmtTop(""));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
