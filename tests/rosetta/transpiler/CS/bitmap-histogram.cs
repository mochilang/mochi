// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[][] image() {
        return new long[][]{new long[]{0, 0, 10000}, new long[]{65535, 65535, 65535}, new long[]{65535, 65535, 65535}};
    }

    static long[] histogram(long[][] g, long bins) {
        if ((bins <= 0)) {
            bins = g[(int)(0)].Length;
        };
        long[] h_0 = new long[]{};
        long i_1 = 0;
        while ((i_1 < bins)) {
            h_0 = (Enumerable.ToArray(Enumerable.Append(h_0, 0)));
            i_1 = (i_1 + 1);
        };
        long y_2 = 0;
        while ((y_2 < g.Length)) {
            long[] row_3 = g[(int)(y_2)];
            long x_4 = 0;
            while ((x_4 < row_3.Length)) {
                long p_5 = row_3[(int)(x_4)];
                var idx_6 = Convert.ToInt64(((p_5 * (bins - 1)) / 65535));
                h_0[idx_6] = (h_0[(int)(idx_6)] + 1);
                x_4 = (x_4 + 1);
            }
            y_2 = (y_2 + 1);
        };
        return h_0;
    }

    static long medianThreshold(long[] h) {
        long lb_7 = 0;
        long ub_8 = (((dynamic)h.Length) - ((dynamic)1));
        long lSum_9 = 0;
        long uSum_10 = 0;
        while ((lb_7 <= ub_8)) {
            if (((lSum_9 + h[(int)(lb_7)]) < (uSum_10 + h[(int)(ub_8)]))) {
                lSum_9 = (lSum_9 + h[(int)(lb_7)]);
                lb_7 = (lb_7 + 1);
            } else {
                uSum_10 = (uSum_10 + h[(int)(ub_8)]);
                ub_8 = (ub_8 - 1);
            }
        };
        return Convert.ToInt64((((dynamic)(ub_8 * 65535)) / ((dynamic)h.Length)));
    }

    static long[][] threshold(long[][] g, long t) {
        long[][] out_11 = new long[][]{};
        long y_12 = 0;
        while ((y_12 < g.Length)) {
            long[] row_13 = g[(int)(y_12)];
            long[] newRow_14 = new long[]{};
            long x_15 = 0;
            while ((x_15 < row_13.Length)) {
                if ((row_13[(int)(x_15)] < t)) {
                    newRow_14 = (Enumerable.ToArray(Enumerable.Append(newRow_14, 0)));
                } else {
                    newRow_14 = (Enumerable.ToArray(Enumerable.Append(newRow_14, 65535)));
                }
                x_15 = (x_15 + 1);
            }
            out_11 = (Enumerable.ToArray(Enumerable.Append(out_11, newRow_14)));
            y_12 = (y_12 + 1);
        };
        return out_11;
    }

    static void printImage(long[][] g) {
        long y_16 = 0;
        while ((y_16 < g.Length)) {
            long[] row_17 = g[(int)(y_16)];
            string line_18 = "";
            long x_19 = 0;
            while ((x_19 < row_17.Length)) {
                if ((row_17[(int)(x_19)] == 0)) {
                    line_18 = (line_18 + "0");
                } else {
                    line_18 = (line_18 + "1");
                }
                x_19 = (x_19 + 1);
            }
            Console.WriteLine(_fmtTop(line_18));
            y_16 = (y_16 + 1);
        };
    }

    static void main() {
        long[][] img_20 = image();
        long[] h_21 = histogram(img_20, 0);
        Console.WriteLine(_fmtTop(("Histogram: " + (h_21).ToString())));
        long t_22 = medianThreshold(h_21);
        Console.WriteLine(_fmtTop(("Threshold: " + (t_22).ToString())));
        long[][] bw_23 = threshold(img_20, t_22);
        printImage(bw_23);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
