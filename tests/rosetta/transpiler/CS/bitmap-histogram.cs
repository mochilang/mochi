// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[][] image() {
        return new long[][]{new long[]{0, 0, 10000}, new long[]{65535, 65535, 65535}, new long[]{65535, 65535, 65535}};
    }

    static long[] histogram(long[][] g_0, long bins_1) {
        if ((bins_1 <= 0)) {
            bins_1 = g_0[(int)(0)].Length;
        };
        long[] h_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < bins_1)) {
            h_2 = (Enumerable.ToArray(Enumerable.Append(h_2, 0)));
            i_3 = (i_3 + 1);
        };
        long y_4 = 0;
        while ((Convert.ToDouble(y_4) < Convert.ToDouble(g_0.Length))) {
            long[] row_5 = g_0[(int)(y_4)];
            long x_6 = 0;
            while ((Convert.ToDouble(x_6) < Convert.ToDouble(row_5.Length))) {
                long p_7 = row_5[(int)(x_6)];
                long idx_8 = Convert.ToInt64(((p_7 * (bins_1 - 1)) / 65535));
                h_2[idx_8] = (h_2[(int)(idx_8)] + 1);
                x_6 = (x_6 + 1);
            }
            y_4 = (y_4 + 1);
        };
        return h_2;
    }

    static long medianThreshold(long[] h_9) {
        long lb_10 = 0;
        long ub_11 = (((dynamic)(h_9.Length)) - ((dynamic)(1)));
        long lSum_12 = 0;
        long uSum_13 = 0;
        while ((lb_10 <= ub_11)) {
            if (((lSum_12 + h_9[(int)(lb_10)]) < (uSum_13 + h_9[(int)(ub_11)]))) {
                lSum_12 = (lSum_12 + h_9[(int)(lb_10)]);
                lb_10 = (lb_10 + 1);
            } else {
                uSum_13 = (uSum_13 + h_9[(int)(ub_11)]);
                ub_11 = (ub_11 - 1);
            }
        };
        return Convert.ToInt64((((dynamic)((ub_11 * 65535))) / ((dynamic)(h_9.Length))));
    }

    static long[][] threshold(long[][] g_14, long t_15) {
        long[][] out_16 = new long[][]{};
        long y_17 = 0;
        while ((Convert.ToDouble(y_17) < Convert.ToDouble(g_14.Length))) {
            long[] row_18 = g_14[(int)(y_17)];
            long[] newRow_19 = new long[]{};
            long x_20 = 0;
            while ((Convert.ToDouble(x_20) < Convert.ToDouble(row_18.Length))) {
                if ((row_18[(int)(x_20)] < t_15)) {
                    newRow_19 = (Enumerable.ToArray(Enumerable.Append(newRow_19, 0)));
                } else {
                    newRow_19 = (Enumerable.ToArray(Enumerable.Append(newRow_19, 65535)));
                }
                x_20 = (x_20 + 1);
            }
            out_16 = (Enumerable.ToArray(Enumerable.Append(out_16, newRow_19)));
            y_17 = (y_17 + 1);
        };
        return out_16;
    }

    static void printImage(long[][] g_21) {
        long y_22 = 0;
        while ((Convert.ToDouble(y_22) < Convert.ToDouble(g_21.Length))) {
            long[] row_23 = g_21[(int)(y_22)];
            string line_24 = "";
            long x_25 = 0;
            while ((Convert.ToDouble(x_25) < Convert.ToDouble(row_23.Length))) {
                if ((row_23[(int)(x_25)] == 0)) {
                    line_24 = (line_24 + "0");
                } else {
                    line_24 = (line_24 + "1");
                }
                x_25 = (x_25 + 1);
            }
            Console.WriteLine(_fmtTop(line_24));
            y_22 = (y_22 + 1);
        };
    }

    static void main() {
        long[][] img_26 = image();
        long[] h_27 = histogram(img_26, 0);
        Console.WriteLine(_fmtTop(("Histogram: " + _fmt(h_27))));
        long t_28 = medianThreshold(h_27);
        Console.WriteLine(_fmtTop(("Threshold: " + _fmt(t_28))));
        long[][] bw_29 = threshold(img_26, t_28);
        printImage(bw_29);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
