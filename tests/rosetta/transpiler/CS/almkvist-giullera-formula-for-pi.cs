// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] bigTrim(long[] a_0) {
        int n_1 = a_0.Length;
        while (((n_1 > 1) && (a_0[(int)((n_1 - 1))] == 0))) {
            a_0 = a_0.Skip((int)(0)).Take((int)(((n_1 - 1) - 0))).ToArray();
            n_1 = (n_1 - 1);
        };
        return a_0;
    }

    static long[] bigFromInt(long x_2) {
        if ((x_2 == 0)) {
            return new long[]{0};
        };
        long[] digits_3 = new long[]{};
        long n_4 = x_2;
        while ((n_4 > 0)) {
            digits_3 = (Enumerable.ToArray(Enumerable.Append(digits_3, (n_4 % 10))));
            n_4 = (n_4 / 10);
        };
        return digits_3;
    }

    static long bigCmp(long[] a_5, long[] b_6) {
        if ((a_5.Length > b_6.Length)) {
            return 1;
        };
        if ((a_5.Length < b_6.Length)) {
            return -1;
        };
        long i_7 = (a_5.Length - 1);
        while ((i_7 >= 0)) {
            if ((a_5[(int)(i_7)] > b_6[(int)(i_7)])) {
                return 1;
            }
            if ((a_5[(int)(i_7)] < b_6[(int)(i_7)])) {
                return -1;
            }
            i_7 = (i_7 - 1);
        };
        return 0;
    }

    static long[] bigAdd(long[] a_8, long[] b_9) {
        long[] res_10 = new long[]{};
        long carry_11 = 0;
        long i_12 = 0;
        while ((((i_12 < a_8.Length) || (i_12 < b_9.Length)) || (carry_11 > 0))) {
            long av_13 = 0;
            if ((i_12 < a_8.Length)) {
                av_13 = a_8[(int)(i_12)];
            }
            long bv_14 = 0;
            if ((i_12 < b_9.Length)) {
                bv_14 = b_9[(int)(i_12)];
            }
            long s_15 = ((av_13 + bv_14) + carry_11);
            res_10 = (Enumerable.ToArray(Enumerable.Append(res_10, (s_15 % 10))));
            carry_11 = (s_15 / 10);
            i_12 = (i_12 + 1);
        };
        return bigTrim(res_10);
    }

    static long[] bigSub(long[] a_16, long[] b_17) {
        long[] res_18 = new long[]{};
        long borrow_19 = 0;
        long i_20 = 0;
        while ((i_20 < a_16.Length)) {
            long av_21 = a_16[(int)(i_20)];
            long bv_22 = 0;
            if ((i_20 < b_17.Length)) {
                bv_22 = b_17[(int)(i_20)];
            }
            long diff_23 = ((av_21 - bv_22) - borrow_19);
            if ((diff_23 < 0)) {
                diff_23 = (diff_23 + 10);
                borrow_19 = 1;
            } else {
                borrow_19 = 0;
            }
            res_18 = (Enumerable.ToArray(Enumerable.Append(res_18, diff_23)));
            i_20 = (i_20 + 1);
        };
        return bigTrim(res_18);
    }

    static long[] bigMulSmall(long[] a_24, long m_25) {
        if ((m_25 == 0)) {
            return new long[]{0};
        };
        long[] res_26 = new long[]{};
        long carry_27 = 0;
        long i_28 = 0;
        while ((i_28 < a_24.Length)) {
            long prod_29 = ((a_24[(int)(i_28)] * m_25) + carry_27);
            res_26 = (Enumerable.ToArray(Enumerable.Append(res_26, (prod_29 % 10))));
            carry_27 = (prod_29 / 10);
            i_28 = (i_28 + 1);
        };
        while ((carry_27 > 0)) {
            res_26 = (Enumerable.ToArray(Enumerable.Append(res_26, (carry_27 % 10))));
            carry_27 = (carry_27 / 10);
        };
        return bigTrim(res_26);
    }

    static long[] bigMulBig(long[] a_30, long[] b_31) {
        long[] res_32 = new long[]{};
        long i_33 = 0;
        while ((i_33 < (a_30.Length + b_31.Length))) {
            res_32 = (Enumerable.ToArray(Enumerable.Append(res_32, 0)));
            i_33 = (i_33 + 1);
        };
        i_33 = 0;
        while ((i_33 < a_30.Length)) {
            long carry_34 = 0;
            long j_35 = 0;
            while ((j_35 < b_31.Length)) {
                long idx_36 = (i_33 + j_35);
                long prod_37 = ((res_32[(int)(idx_36)] + (a_30[(int)(i_33)] * b_31[(int)(j_35)])) + carry_34);
                res_32[idx_36] = (prod_37 % 10);
                carry_34 = (prod_37 / 10);
                j_35 = (j_35 + 1);
            }
            long idx_38 = (i_33 + b_31.Length);
            while ((carry_34 > 0)) {
                long prod_39 = (res_32[(int)(idx_38)] + carry_34);
                res_32[idx_38] = (prod_39 % 10);
                carry_34 = (prod_39 / 10);
                idx_38 = (idx_38 + 1);
            }
            i_33 = (i_33 + 1);
        };
        return bigTrim(res_32);
    }

    static long[] bigMulPow10(long[] a_40, long k_41) {
        long i_42 = 0;
        while ((i_42 < k_41)) {
            a_40 = (new long[]{0}.Concat(a_40).ToArray());
            i_42 = (i_42 + 1);
        };
        return a_40;
    }

    static long[] bigDivSmall(long[] a_43, long m_44) {
        long[] res_45 = new long[]{};
        long rem_46 = 0;
        long i_47 = (a_43.Length - 1);
        while ((i_47 >= 0)) {
            long cur_48 = ((rem_46 * 10) + a_43[(int)(i_47)]);
            long q_49 = (cur_48 / m_44);
            rem_46 = (cur_48 % m_44);
            res_45 = (new long[]{q_49}.Concat(res_45).ToArray());
            i_47 = (i_47 - 1);
        };
        return bigTrim(res_45);
    }

    static string bigToString(long[] a_50) {
        string s_51 = "";
        long i_52 = (a_50.Length - 1);
        while ((i_52 >= 0)) {
            s_51 = (s_51 + (a_50[(int)(i_52)]).ToString());
            i_52 = (i_52 - 1);
        };
        return s_51;
    }

    static string repeat(string ch_53, long n_54) {
        string s_55 = "";
        long i_56 = 0;
        while ((i_56 < n_54)) {
            s_55 = (s_55 + ch_53);
            i_56 = (i_56 + 1);
        };
        return s_55;
    }

    static long[] sortInts(long[] xs_57) {
        long[] res_58 = new long[]{};
        long[] tmp_59 = xs_57;
        while ((tmp_59.Length > 0)) {
            long min_60 = tmp_59[(int)(0)];
            long idx_61 = 0;
            long i_62 = 1;
            while ((i_62 < tmp_59.Length)) {
                if ((tmp_59[(int)(i_62)] < min_60)) {
                    min_60 = tmp_59[(int)(i_62)];
                    idx_61 = i_62;
                }
                i_62 = (i_62 + 1);
            }
            res_58 = (res_58.Concat(new long[]{min_60}).ToArray());
            long[] out_63 = new long[]{};
            long j_64 = 0;
            while ((j_64 < tmp_59.Length)) {
                if ((j_64 != idx_61)) {
                    out_63 = (out_63.Concat(new long[]{tmp_59[(int)(j_64)]}).ToArray());
                }
                j_64 = (j_64 + 1);
            }
            tmp_59 = out_63;
        };
        return res_58;
    }

    static long[] primesUpTo(long n_65) {
        bool[] sieve_66 = new bool[]{};
        long i_67 = 0;
        while ((i_67 <= n_65)) {
            sieve_66 = (Enumerable.ToArray(Enumerable.Append(sieve_66, true)));
            i_67 = (i_67 + 1);
        };
        long p_68 = 2;
        while (((p_68 * p_68) <= n_65)) {
            if (sieve_66[(int)(p_68)]) {
                long m_69 = (p_68 * p_68);
                while ((m_69 <= n_65)) {
                    sieve_66[m_69] = false;
                    m_69 = (m_69 + p_68);
                }
            }
            p_68 = (p_68 + 1);
        };
        long[] res_70 = new long[]{};
        long x_71 = 2;
        while ((x_71 <= n_65)) {
            if (sieve_66[(int)(x_71)]) {
                res_70 = (Enumerable.ToArray(Enumerable.Append(res_70, x_71)));
            }
            x_71 = (x_71 + 1);
        };
        return res_70;
    }

    static Dictionary<string, long> factorialExp(long n_72, long[] primes_73) {
        Dictionary<string, long> m_74 = new Dictionary<string, long>{};
        foreach (var p_75 in primes_73) {
            if ((p_75 > n_72)) {
                break;
            }
            long t_76 = n_72;
            long e_77 = 0;
            while ((t_76 > 0)) {
                t_76 = (t_76 / p_75);
                e_77 = (e_77 + t_76);
            }
            m_74[(p_75).ToString()] = e_77;
        };
        return m_74;
    }

    static Dictionary<string, long> factorSmall(long x_78, long[] primes_79) {
        Dictionary<string, long> f_80 = new Dictionary<string, long>{};
        long n_81 = x_78;
        foreach (var p_82 in primes_79) {
            if (((p_82 * p_82) > n_81)) {
                break;
            }
            long c_83 = 0;
            while (((n_81 % p_82) == 0)) {
                c_83 = (c_83 + 1);
                n_81 = (n_81 / p_82);
            }
            if ((c_83 > 0)) {
                f_80[(p_82).ToString()] = c_83;
            }
        };
        if ((n_81 > 1)) {
            f_80[(n_81).ToString()] = ((f_80.ContainsKey((n_81).ToString()) ? f_80[(n_81).ToString()] : 0) + 1);
        };
        return f_80;
    }

    static long[] computeIP(long n_84, long[] primes_85) {
        Dictionary<string, long> exps_86 = factorialExp((6 * n_84), primes_85);
        Dictionary<string, long> fn_87 = factorialExp(n_84, primes_85);
        foreach (var k_88 in fn_87.Keys) {
            exps_86[k_88] = ((exps_86.ContainsKey(k_88) ? exps_86[k_88] : 0) - (6 * (fn_87.ContainsKey(k_88) ? fn_87[k_88] : 0)));
        };
        exps_86["2"] = ((exps_86.ContainsKey("2") ? exps_86["2"] : 0) + 5);
        long t2_89 = ((((532 * n_84) * n_84) + (126 * n_84)) + 9);
        Dictionary<string, long> ft2_90 = factorSmall(t2_89, primes_85);
        foreach (var k_91 in ft2_90.Keys) {
            exps_86[k_91] = ((exps_86.ContainsKey(k_91) ? exps_86[k_91] : 0) + (ft2_90.ContainsKey(k_91) ? ft2_90[k_91] : 0));
        };
        exps_86["3"] = ((exps_86.ContainsKey("3") ? exps_86["3"] : 0) - 1);
        long[] keys_92 = new long[]{};
        foreach (var k_93 in exps_86.Keys) {
            keys_92 = (Enumerable.ToArray(Enumerable.Append(keys_92, Convert.ToInt64(k_93))));
        };
        keys_92 = sortInts(keys_92);
        long[] res_94 = bigFromInt(1);
        foreach (var p_95 in keys_92) {
            long e_96 = (exps_86.ContainsKey((p_95).ToString()) ? exps_86[(p_95).ToString()] : 0);
            long i_97 = 0;
            while ((i_97 < e_96)) {
                res_94 = bigMulSmall(res_94, p_95);
                i_97 = (i_97 + 1);
            }
        };
        return res_94;
    }

    static string formatTerm(long[] ip_98, long pw_99) {
        string s_100 = bigToString(ip_98);
        if ((pw_99 >= s_100.Length)) {
            string frac_101 = (repeat("0", (((dynamic)(pw_99)) - ((dynamic)(s_100.Length)))) + s_100);
            if ((frac_101.Length < 33)) {
                frac_101 = (frac_101 + repeat("0", (((dynamic)(33)) - ((dynamic)(frac_101.Length)))));
            }
            return ("0." + frac_101.Substring((int)(0), (int)(33 - 0)));
        };
        string intpart_102 = s_100.Substring((int)(0), (int)((((dynamic)(s_100.Length)) - ((dynamic)(pw_99))) - 0));
        string frac_103 = s_100.Substring((int)((((dynamic)(s_100.Length)) - ((dynamic)(pw_99)))), (int)(s_100.Length - (((dynamic)(s_100.Length)) - ((dynamic)(pw_99)))));
        if ((frac_103.Length < 33)) {
            frac_103 = (frac_103 + repeat("0", (((dynamic)(33)) - ((dynamic)(frac_103.Length)))));
        };
        return ((intpart_102 + ".") + frac_103.Substring((int)(0), (int)(33 - 0)));
    }

    static long[] bigAbsDiff(long[] a_104, long[] b_105) {
        if ((bigCmp(a_104, b_105) >= 0)) {
            return bigSub(a_104, b_105);
        };
        return bigSub(b_105, a_104);
    }

    static void main() {
        long[] primes_106 = primesUpTo(2000);
        Console.WriteLine(_fmtTop("N                               Integer Portion  Pow  Nth Term (33 dp)"));
        string line_107 = repeat("-", 89);
        Console.WriteLine(_fmtTop(line_107));
        long[] sum_108 = bigFromInt(0);
        long[] prev_109 = bigFromInt(0);
        long denomPow_110 = 0;
        long n_111 = 0;
        while (true) {
            long[] ip_112 = computeIP(n_111, primes_106);
            long pw_113 = ((6 * n_111) + 3);
            if ((pw_113 > denomPow_110)) {
                sum_108 = bigMulPow10(sum_108, (pw_113 - denomPow_110));
                prev_109 = bigMulPow10(prev_109, (pw_113 - denomPow_110));
                denomPow_110 = pw_113;
            }
            if ((n_111 < 10)) {
                string termStr_114 = formatTerm(ip_112, pw_113);
                string ipStr_115 = bigToString(ip_112);
                while ((ipStr_115.Length < 44)) {
                    ipStr_115 = (" " + ipStr_115);
                }
                string pwStr_116 = (-pw_113).ToString();
                while ((pwStr_116.Length < 3)) {
                    pwStr_116 = (" " + pwStr_116);
                }
                string padTerm_117 = termStr_114;
                while ((padTerm_117.Length < 35)) {
                    padTerm_117 = (padTerm_117 + " ");
                }
                Console.WriteLine(_fmtTop((((((((n_111).ToString() + "  ") + ipStr_115) + "  ") + pwStr_116) + "  ") + padTerm_117)));
            }
            sum_108 = bigAdd(sum_108, ip_112);
            long[] diff_118 = bigAbsDiff(sum_108, prev_109);
            if (((denomPow_110 >= 70) && (bigCmp(diff_118, bigMulPow10(bigFromInt(1), (denomPow_110 - 70))) < 0))) {
                break;
            }
            prev_109 = sum_108;
            n_111 = (n_111 + 1);
        };
        long precision_119 = 70;
        long[] target_120 = bigMulPow10(bigFromInt(1), (denomPow_110 + (2 * precision_119)));
        long[] low_121 = bigFromInt(0);
        long[] high_122 = bigMulPow10(bigFromInt(1), (precision_119 + 1));
        while ((bigCmp(low_121, bigSub(high_122, bigFromInt(1))) < 0)) {
            long[] mid_123 = bigDivSmall(bigAdd(low_121, high_122), 2);
            long[] prod_124 = bigMulBig(bigMulBig(mid_123, mid_123), sum_108);
            if ((bigCmp(prod_124, target_120) <= 0)) {
                low_121 = mid_123;
            } else {
                high_122 = bigSub(mid_123, bigFromInt(1));
            }
        };
        long[] piInt_125 = low_121;
        string piStr_126 = bigToString(piInt_125);
        if ((piStr_126.Length <= precision_119)) {
            piStr_126 = (repeat("0", ((((dynamic)(precision_119)) - ((dynamic)(piStr_126.Length))) + 1)) + piStr_126);
        };
        string out_127 = ((piStr_126.Substring((int)(0), (int)((((dynamic)(piStr_126.Length)) - ((dynamic)(precision_119))) - 0)) + ".") + piStr_126.Substring((int)((((dynamic)(piStr_126.Length)) - ((dynamic)(precision_119)))), (int)(piStr_126.Length - (((dynamic)(piStr_126.Length)) - ((dynamic)(precision_119))))));
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("Pi to 70 decimal places is:"));
        Console.WriteLine(_fmtTop(out_127));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
