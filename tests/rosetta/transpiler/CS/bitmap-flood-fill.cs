// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[][] grid_0 = new string[][]{new string[]{".", ".", ".", ".", "."}, new string[]{".", "#", "#", "#", "."}, new string[]{".", "#", ".", "#", "."}, new string[]{".", "#", "#", "#", "."}, new string[]{".", ".", ".", ".", "."}};
    static void flood(long x_1, long y_2, string repl_3) {
        string target_4 = grid_0[(int)(y_2)][(int)(x_1)];
        if ((target_4 == repl_3)) {
            return;
        };
        Action<long, long> ff = null;
        ff = (long px_5, long py_6) => {if (((((px_5 < 0) || (py_6 < 0)) || (Convert.ToDouble(py_6) >= Convert.ToDouble(grid_0.Length))) || (Convert.ToDouble(px_5) >= Convert.ToDouble(grid_0[(int)(0)].Length)))) {
            return;
        }; if ((grid_0[(int)(py_6)][(int)(px_5)] != target_4)) {
            return;
        }; grid_0[(int)(py_6)][px_5] = repl_3; ff((px_5 - 1), py_6); ff((px_5 + 1), py_6); ff(px_5, (py_6 - 1)); ff(px_5, (py_6 + 1));};
        ff(x_1, y_2);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            flood(2, 2, "o");
            foreach (var row_7 in grid_0) {
                string line_8 = "";
                foreach (var ch_9 in row_7) {
                    line_8 = (line_8 + ch_9);
                }
                Console.WriteLine(_fmtTop(line_8));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
