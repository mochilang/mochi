// Generated by Mochi 0.10.57 on 2025-08-04 21:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[][] n_0 = new string[][]{};
    static Dictionary<long, Action> draw_20 = new Dictionary<long, Action>{};
    public static void initN() {
        long i_1 = 0;
        while ((i_1 < 15)) {
            string[] row_2 = new string[]{};
            long j_3 = 0;
            while ((j_3 < 11)) {
                row_2 = (Enumerable.ToArray(Enumerable.Append(row_2, " ")));
                j_3 = (j_3 + 1);
            }
            row_2[5] = "x";
            n_0 = (Enumerable.ToArray(Enumerable.Append(n_0, row_2)));
            i_1 = (i_1 + 1);
        };
    }

    public static void horiz(long c1_4, long c2_5, long r_6) {
        long c_7 = c1_4;
        while ((c_7 <= c2_5)) {
            n_0[(int)(r_6)][c_7] = "x";
            c_7 = (c_7 + 1);
        };
    }

    public static void verti(long r1_8, long r2_9, long c_10) {
        long r_11 = r1_8;
        while ((r_11 <= r2_9)) {
            n_0[(int)(r_11)][c_10] = "x";
            r_11 = (r_11 + 1);
        };
    }

    public static void diagd(long c1_12, long c2_13, long r_14) {
        long c_15 = c1_12;
        while ((c_15 <= c2_13)) {
            n_0[(int)(((r_14 + c_15) - c1_12))][c_15] = "x";
            c_15 = (c_15 + 1);
        };
    }

    public static void diagu(long c1_16, long c2_17, long r_18) {
        long c_19 = c1_16;
        while ((c_19 <= c2_17)) {
            n_0[(int)(((r_18 - c_19) + c1_16))][c_19] = "x";
            c_19 = (c_19 + 1);
        };
    }

    public static void initDraw() {
        draw_20[1] = () => {Program.horiz(6, 10, 0);};
        draw_20[2] = () => {Program.horiz(6, 10, 4);};
        draw_20[3] = () => {Program.diagd(6, 10, 0);};
        draw_20[4] = () => {Program.diagu(6, 10, 4);};
        draw_20[5] = () => {(draw_20.ContainsKey(1) ? draw_20[1] : null)(); (draw_20.ContainsKey(4) ? draw_20[4] : null)();};
        draw_20[6] = () => {Program.verti(0, 4, 10);};
        draw_20[7] = () => {(draw_20.ContainsKey(1) ? draw_20[1] : null)(); (draw_20.ContainsKey(6) ? draw_20[6] : null)();};
        draw_20[8] = () => {(draw_20.ContainsKey(2) ? draw_20[2] : null)(); (draw_20.ContainsKey(6) ? draw_20[6] : null)();};
        draw_20[9] = () => {(draw_20.ContainsKey(1) ? draw_20[1] : null)(); (draw_20.ContainsKey(8) ? draw_20[8] : null)();};
        draw_20[10] = () => {Program.horiz(0, 4, 0);};
        draw_20[20] = () => {Program.horiz(0, 4, 4);};
        draw_20[30] = () => {Program.diagu(0, 4, 4);};
        draw_20[40] = () => {Program.diagd(0, 4, 0);};
        draw_20[50] = () => {(draw_20.ContainsKey(10) ? draw_20[10] : null)(); (draw_20.ContainsKey(40) ? draw_20[40] : null)();};
        draw_20[60] = () => {Program.verti(0, 4, 0);};
        draw_20[70] = () => {(draw_20.ContainsKey(10) ? draw_20[10] : null)(); (draw_20.ContainsKey(60) ? draw_20[60] : null)();};
        draw_20[80] = () => {(draw_20.ContainsKey(20) ? draw_20[20] : null)(); (draw_20.ContainsKey(60) ? draw_20[60] : null)();};
        draw_20[90] = () => {(draw_20.ContainsKey(10) ? draw_20[10] : null)(); (draw_20.ContainsKey(80) ? draw_20[80] : null)();};
        draw_20[100] = () => {Program.horiz(6, 10, 14);};
        draw_20[200] = () => {Program.horiz(6, 10, 10);};
        draw_20[300] = () => {Program.diagu(6, 10, 14);};
        draw_20[400] = () => {Program.diagd(6, 10, 10);};
        draw_20[500] = () => {(draw_20.ContainsKey(100) ? draw_20[100] : null)(); (draw_20.ContainsKey(400) ? draw_20[400] : null)();};
        draw_20[600] = () => {Program.verti(10, 14, 10);};
        draw_20[700] = () => {(draw_20.ContainsKey(100) ? draw_20[100] : null)(); (draw_20.ContainsKey(600) ? draw_20[600] : null)();};
        draw_20[800] = () => {(draw_20.ContainsKey(200) ? draw_20[200] : null)(); (draw_20.ContainsKey(600) ? draw_20[600] : null)();};
        draw_20[900] = () => {(draw_20.ContainsKey(100) ? draw_20[100] : null)(); (draw_20.ContainsKey(800) ? draw_20[800] : null)();};
        draw_20[1000] = () => {Program.horiz(0, 4, 14);};
        draw_20[2000] = () => {Program.horiz(0, 4, 10);};
        draw_20[3000] = () => {Program.diagd(0, 4, 10);};
        draw_20[4000] = () => {Program.diagu(0, 4, 14);};
        draw_20[5000] = () => {(draw_20.ContainsKey(1000) ? draw_20[1000] : null)(); (draw_20.ContainsKey(4000) ? draw_20[4000] : null)();};
        draw_20[6000] = () => {Program.verti(10, 14, 0);};
        draw_20[7000] = () => {(draw_20.ContainsKey(1000) ? draw_20[1000] : null)(); (draw_20.ContainsKey(6000) ? draw_20[6000] : null)();};
        draw_20[8000] = () => {(draw_20.ContainsKey(2000) ? draw_20[2000] : null)(); (draw_20.ContainsKey(6000) ? draw_20[6000] : null)();};
        draw_20[9000] = () => {(draw_20.ContainsKey(1000) ? draw_20[1000] : null)(); (draw_20.ContainsKey(8000) ? draw_20[8000] : null)();};
    }

    public static void printNumeral() {
        long i_21 = 0;
        while ((i_21 < 15)) {
            string line_22 = "";
            long j_23 = 0;
            while ((j_23 < 11)) {
                line_22 = ((line_22 + n_0[(int)(i_21)][(int)(j_23)]) + " ");
                j_23 = (j_23 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_22));
            i_21 = (i_21 + 1);
        };
        Console.WriteLine(Program._fmtTop(""));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.initDraw();
            long[] numbers_24 = new long[]{0, 1, 20, 300, 4000, 5555, 6789, 9999};
            foreach (long number_25 in numbers_24) {
                Program.initN();
                Console.WriteLine(Program._fmtTop((_fmt(number_25) + ":")));
                long num_26 = number_25;
                long thousands_27 = (num_26 / 1000);
                num_26 = (num_26 % 1000);
                long hundreds_28 = (num_26 / 100);
                num_26 = (num_26 % 100);
                long tens_29 = (num_26 / 10);
                long ones_30 = (num_26 % 10);
                if ((thousands_27 > 0)) {
                    (draw_20.ContainsKey((thousands_27 * 1000)) ? draw_20[(thousands_27 * 1000)] : null)();
                }
                if ((hundreds_28 > 0)) {
                    (draw_20.ContainsKey((hundreds_28 * 100)) ? draw_20[(hundreds_28 * 100)] : null)();
                }
                if ((tens_29 > 0)) {
                    (draw_20.ContainsKey((tens_29 * 10)) ? draw_20[(tens_29 * 10)] : null)();
                }
                if ((ones_30 > 0)) {
                    (draw_20.ContainsKey(ones_30) ? draw_20[ones_30] : null)();
                }
                Program.printNumeral();
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
