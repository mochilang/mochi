// Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string trimLeftZeros(string s_0) {
        long i_1 = 0;
        while (((i_1 < s_0.Length) && (s_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1)) == "0"))) {
            i_1 = (i_1 + 1);
        };
        return s_0.Substring((int)(i_1), (int)(s_0.Length - i_1));
    }

    static Dictionary<string, object> btString(string s_2) {
        s_2 = trimLeftZeros(s_2);
        long[] b_3 = new long[]{};
        long i_4 = (((dynamic)s_2.Length) - ((dynamic)1));
        while ((i_4 >= 0)) {
            string ch_5 = s_2.Substring((int)(i_4), (int)((i_4 + 1) - i_4));
            if ((ch_5 == "+")) {
                b_3 = (Enumerable.ToArray(Enumerable.Append(b_3, 1)));
            } else {
                if ((ch_5 == "0")) {
                    b_3 = (Enumerable.ToArray(Enumerable.Append(b_3, 0)));
                } else {
                    if ((ch_5 == "-")) {
                        b_3 = (Enumerable.ToArray(Enumerable.Append(b_3, (0 - 1))));
                    } else {
                        return new Dictionary<string, object>{{"bt", new object[]{}}, {"ok", false}};
                    }
                }
            }
            i_4 = (i_4 - 1);
        };
        return new Dictionary<string, object>{{"bt", b_3}, {"ok", true}};
    }

    static string btToString(long[] b_6) {
        if ((b_6.Length == 0)) {
            return "0";
        };
        string r_7 = "";
        long i_8 = (((dynamic)b_6.Length) - ((dynamic)1));
        while ((i_8 >= 0)) {
            long d_9 = b_6[(int)(i_8)];
            if ((d_9 == (0 - 1))) {
                r_7 = (r_7 + "-");
            } else {
                if ((d_9 == 0)) {
                    r_7 = (r_7 + "0");
                } else {
                    r_7 = (r_7 + "+");
                }
            }
            i_8 = (i_8 - 1);
        };
        return r_7;
    }

    static long[] btInt(long i_10) {
        if ((i_10 == 0)) {
            return new long[]{};
        };
        long n_11 = i_10;
        long[] b_12 = new long[]{};
        while ((n_11 != 0)) {
            long m_13 = (n_11 % 3);
            n_11 = Convert.ToInt64((n_11 / 3));
            if ((m_13 == 2)) {
                m_13 = (0 - 1);
                n_11 = (n_11 + 1);
            } else {
                if ((m_13 == (0 - 2))) {
                    m_13 = 1;
                    n_11 = (n_11 - 1);
                }
            }
            b_12 = (Enumerable.ToArray(Enumerable.Append(b_12, m_13)));
        };
        return b_12;
    }

    static long btToInt(long[] b_14) {
        long r_15 = 0;
        long pt_16 = 1;
        long i_17 = 0;
        while ((i_17 < b_14.Length)) {
            r_15 = (r_15 + (b_14[(int)(i_17)] * pt_16));
            pt_16 = (pt_16 * 3);
            i_17 = (i_17 + 1);
        };
        return r_15;
    }

    static long[] btNeg(long[] b_18) {
        long[] r_19 = new long[]{};
        long i_20 = 0;
        while ((i_20 < b_18.Length)) {
            r_19 = (Enumerable.ToArray(Enumerable.Append(r_19, -b_18[(int)(i_20)])));
            i_20 = (i_20 + 1);
        };
        return r_19;
    }

    static long[] btAdd(long[] a_21, long[] b_22) {
        return btInt((btToInt(a_21) + btToInt(b_22)));
    }

    static long[] btMul(long[] a_23, long[] b_24) {
        return btInt((btToInt(a_23) * btToInt(b_24)));
    }

    static string padLeft(string s_25, long w_26) {
        string r_27 = s_25;
        while ((r_27.Length < w_26)) {
            r_27 = (" " + r_27);
        };
        return r_27;
    }

    static void show(string label_28, long[] b_29) {
        string l_30 = padLeft(label_28, 7);
        string bs_31 = padLeft(btToString(b_29), 12);
        string is_32 = padLeft((btToInt(b_29)).ToString(), 7);
        Console.WriteLine(_fmtTop(((((l_30 + " ") + bs_31) + " ") + is_32)));
    }

    static void main() {
        Dictionary<string, object> ares_33 = btString("+-0++0+");
        var a_34 = ((dynamic)ares_33)["bt"];
        long[] b_35 = btInt(-436);
        Dictionary<string, object> cres_36 = btString("+-++-");
        var c_37 = ((dynamic)cres_36)["bt"];
        show("a:", a_34);
        show("b:", b_35);
        show("c:", c_37);
        show("a(b-c):", btMul(a_34, btAdd(b_35, btNeg(c_37))));
    }

    static void Main() {
        main();
    }
}
