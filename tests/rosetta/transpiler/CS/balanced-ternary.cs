// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string trimLeftZeros(string s) {
        long i_0 = 0;
        while (((i_0 < s.Length) && (s.Substring((int)(i_0), (int)((i_0 + 1) - i_0)) == "0"))) {
            i_0 = (i_0 + 1);
        };
        return s.Substring((int)(i_0), (int)(s.Length - i_0));
    }

    static Dictionary<string, object> btString(string s) {
        s = trimLeftZeros(s);
        long[] b_1 = new long[]{};
        long i_2 = (((dynamic)s.Length) - ((dynamic)1));
        while ((i_2 >= 0)) {
            string ch_3 = s.Substring((int)(i_2), (int)((i_2 + 1) - i_2));
            if ((ch_3 == "+")) {
                b_1 = (Enumerable.ToArray(Enumerable.Append(b_1, 1)));
            } else {
                if ((ch_3 == "0")) {
                    b_1 = (Enumerable.ToArray(Enumerable.Append(b_1, 0)));
                } else {
                    if ((ch_3 == "-")) {
                        b_1 = (Enumerable.ToArray(Enumerable.Append(b_1, (0 - 1))));
                    } else {
                        return new Dictionary<string, object>{{"bt", new object[]{}}, {"ok", false}};
                    }
                }
            }
            i_2 = (i_2 - 1);
        };
        return new Dictionary<string, object>{{"bt", b_1}, {"ok", true}};
    }

    static string btToString(long[] b) {
        if ((b.Length == 0)) {
            return "0";
        };
        string r_4 = "";
        long i_5 = (((dynamic)b.Length) - ((dynamic)1));
        while ((i_5 >= 0)) {
            long d_6 = b[(int)(i_5)];
            if ((d_6 == (0 - 1))) {
                r_4 = (r_4 + "-");
            } else {
                if ((d_6 == 0)) {
                    r_4 = (r_4 + "0");
                } else {
                    r_4 = (r_4 + "+");
                }
            }
            i_5 = (i_5 - 1);
        };
        return r_4;
    }

    static long[] btInt(long i) {
        if ((i == 0)) {
            return new long[]{};
        };
        long n_7 = i;
        long[] b_8 = new long[]{};
        while ((n_7 != 0)) {
            long m_9 = (n_7 % 3);
            n_7 = Convert.ToInt64((n_7 / 3));
            if ((m_9 == 2)) {
                m_9 = (0 - 1);
                n_7 = (n_7 + 1);
            } else {
                if ((m_9 == (0 - 2))) {
                    m_9 = 1;
                    n_7 = (n_7 - 1);
                }
            }
            b_8 = (Enumerable.ToArray(Enumerable.Append(b_8, m_9)));
        };
        return b_8;
    }

    static long btToInt(long[] b) {
        long r_10 = 0;
        long pt_11 = 1;
        long i_12 = 0;
        while ((i_12 < b.Length)) {
            r_10 = (r_10 + (b[(int)(i_12)] * pt_11));
            pt_11 = (pt_11 * 3);
            i_12 = (i_12 + 1);
        };
        return r_10;
    }

    static long[] btNeg(long[] b) {
        long[] r_13 = new long[]{};
        long i_14 = 0;
        while ((i_14 < b.Length)) {
            r_13 = (Enumerable.ToArray(Enumerable.Append(r_13, -b[(int)(i_14)])));
            i_14 = (i_14 + 1);
        };
        return r_13;
    }

    static long[] btAdd(long[] a, long[] b) {
        return btInt((btToInt(a) + btToInt(b)));
    }

    static long[] btMul(long[] a, long[] b) {
        return btInt((btToInt(a) * btToInt(b)));
    }

    static string padLeft(string s, long w) {
        string r_15 = s;
        while ((r_15.Length < w)) {
            r_15 = (" " + r_15);
        };
        return r_15;
    }

    static void show(string label, long[] b) {
        string l_16 = padLeft(label, 7);
        string bs_17 = padLeft(btToString(b), 12);
        string is_18 = padLeft((btToInt(b)).ToString(), 7);
        Console.WriteLine(_fmtTop(((((l_16 + " ") + bs_17) + " ") + is_18)));
    }

    static void main() {
        Dictionary<string, object> ares_19 = btString("+-0++0+");
        var a_20 = ((dynamic)ares_19)["bt"];
        long[] b_21 = btInt(-436);
        Dictionary<string, object> cres_22 = btString("+-++-");
        var c_23 = ((dynamic)cres_22)["bt"];
        show("a:", a_20);
        show("b:", b_21);
        show("c:", c_23);
        show("a(b-c):", btMul(a_20, btAdd(b_21, btNeg(c_23))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
