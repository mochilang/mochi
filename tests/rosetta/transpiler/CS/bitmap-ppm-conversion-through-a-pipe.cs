// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Pixel {
    public long R;
    public long G;
    public long B;
    public override string ToString() => $"Pixel {{R = {R}, G = {G}, B = {B}}}";
}
class Bitmap {
    public long cols;
    public long rows;
    public Pixel[][] px;
    public override string ToString() => $"Bitmap {{cols = {cols}, rows = {rows}, px = {px}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static Pixel pixelFromRgb(long c_0) {
        long r_1 = (Convert.ToInt64((c_0 / 65536)) % 256);
        long g_2 = (Convert.ToInt64((c_0 / 256)) % 256);
        long b_3 = (c_0 % 256);
        return new Pixel{R = r_1, G = g_2, B = b_3};
    }

    static long rgbFromPixel(Pixel p_4) {
        return (((p_4.R * 65536) + (p_4.G * 256)) + p_4.B);
    }

    static Bitmap NewBitmap(long x_5, long y_6) {
        Pixel[][] data_7 = new Pixel[][]{};
        long row_8 = 0;
        while ((row_8 < y_6)) {
            Pixel[] r_9 = new Pixel[]{};
            long col_10 = 0;
            while ((col_10 < x_5)) {
                r_9 = (Enumerable.ToArray(Enumerable.Append(r_9, new Pixel{R = 0, G = 0, B = 0})));
                col_10 = (col_10 + 1);
            }
            data_7 = (Enumerable.ToArray(Enumerable.Append(data_7, r_9)));
            row_8 = (row_8 + 1);
        };
        return new Bitmap{cols = x_5, rows = y_6, px = data_7};
    }

    static void FillRgb(Bitmap b_11, long c_12) {
        long y_13 = 0;
        Pixel p_14 = pixelFromRgb(c_12);
        while ((y_13 < b_11.rows)) {
            long x_15 = 0;
            while ((x_15 < b_11.cols)) {
                Pixel[][] px_16 = b_11.px;
                Pixel[] row_17 = px_16[(int)(y_13)];
                row_17[x_15] = p_14;
                px_16[y_13] = row_17;
                b_11.px = px_16;
                x_15 = (x_15 + 1);
            }
            y_13 = (y_13 + 1);
        };
    }

    static bool SetPxRgb(Bitmap b_18, long x_19, long y_20, long c_21) {
        if (((((x_19 < 0) || (x_19 >= b_18.cols)) || (y_20 < 0)) || (y_20 >= b_18.rows))) {
            return false;
        };
        Pixel[][] px_22 = b_18.px;
        Pixel[] row_23 = px_22[(int)(y_20)];
        row_23[x_19] = pixelFromRgb(c_21);
        px_22[y_20] = row_23;
        b_18.px = px_22;
        return true;
    }

    static long nextRand(long seed_24) {
        return (((seed_24 * 1664525) + 1013904223) % 2147483648L);
    }

    static void main() {
        Bitmap bm_25 = NewBitmap(400, 300);
        FillRgb(bm_25, 12615744);
        long seed_26 = _now();
        long i_27 = 0;
        while ((i_27 < 2000)) {
            seed_26 = nextRand(seed_26);
            long x_28 = (seed_26 % 400);
            seed_26 = nextRand(seed_26);
            long y_29 = (seed_26 % 300);
            SetPxRgb(bm_25, x_28, y_29, 8405024);
            i_27 = (i_27 + 1);
        };
        long x_30 = 0;
        while ((x_30 < 400)) {
            long y_31 = 240;
            while ((y_31 < 245)) {
                SetPxRgb(bm_25, x_30, y_31, 8405024);
                y_31 = (y_31 + 1);
            }
            y_31 = 260;
            while ((y_31 < 265)) {
                SetPxRgb(bm_25, x_30, y_31, 8405024);
                y_31 = (y_31 + 1);
            }
            x_30 = (x_30 + 1);
        };
        long y_32 = 0;
        while ((y_32 < 300)) {
            long x_33 = 80;
            while ((x_33 < 85)) {
                SetPxRgb(bm_25, x_33, y_32, 8405024);
                x_33 = (x_33 + 1);
            }
            x_33 = 95;
            while ((x_33 < 100)) {
                SetPxRgb(bm_25, x_33, y_32, 8405024);
                x_33 = (x_33 + 1);
            }
            y_32 = (y_32 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
