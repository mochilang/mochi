// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

struct Pixel {
    public long R;
    public long G;
    public long B;
    public override string ToString() => $"Pixel {{R = {R}, G = {G}, B = {B}}}";
}
struct Bitmap {
    public long cols;
    public long rows;
    public Pixel[][] px;
    public override string ToString() => $"Bitmap {{cols = {cols}, rows = {rows}, px = {px}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static Pixel pixelFromRgb(long c) {
        long r_0 = (((dynamic)Convert.ToInt64((c / 65536))) % ((dynamic)256));
        long g_1 = (((dynamic)Convert.ToInt64((c / 256))) % ((dynamic)256));
        long b_2 = (c % 256);
        return new Pixel{R = r_0, G = g_1, B = b_2};
    }

    static long rgbFromPixel(Pixel p) {
        return (((p.R * 65536) + (p.G * 256)) + p.B);
    }

    static Bitmap NewBitmap(long x, long y) {
        Pixel[][] data_3 = new Pixel[][]{};
        long row_4 = 0;
        while ((row_4 < y)) {
            Pixel[] r_5 = new Pixel[]{};
            long col_6 = 0;
            while ((col_6 < x)) {
                r_5 = (Enumerable.ToArray(Enumerable.Append(r_5, new Pixel{R = 0, G = 0, B = 0})));
                col_6 = (col_6 + 1);
            }
            data_3 = (Enumerable.ToArray(Enumerable.Append(data_3, r_5)));
            row_4 = (row_4 + 1);
        };
        return new Bitmap{cols = x, rows = y, px = data_3};
    }

    static void FillRgb(Bitmap b, long c) {
        long y_7 = 0;
        Pixel p_8 = pixelFromRgb(c);
        while ((y_7 < b.rows)) {
            long x_9 = 0;
            while ((x_9 < b.cols)) {
                Pixel[][] px_10 = b.px;
                Pixel[] row_11 = px_10[(int)(y_7)];
                row_11[x_9] = p_8;
                px_10[y_7] = row_11;
                b.px = px_10;
                x_9 = (x_9 + 1);
            }
            y_7 = (y_7 + 1);
        };
    }

    static bool SetPxRgb(Bitmap b, long x, long y, long c) {
        if (((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows))) {
            return false;
        };
        Pixel[][] px_12 = b.px;
        Pixel[] row_13 = px_12[(int)(y)];
        row_13[x] = pixelFromRgb(c);
        px_12[y] = row_13;
        b.px = px_12;
        return true;
    }

    static long nextRand(long seed) {
        return (((seed * 1664525) + 1013904223) % 2147483648L);
    }

    static void main() {
        Bitmap bm_14 = NewBitmap(400, 300);
        FillRgb(bm_14, 12615744);
        long seed_15 = _now();
        long i_16 = 0;
        while ((i_16 < 2000)) {
            seed_15 = nextRand(seed_15);
            long x_17 = (seed_15 % 400);
            seed_15 = nextRand(seed_15);
            long y_18 = (seed_15 % 300);
            SetPxRgb(bm_14, x_17, y_18, 8405024);
            i_16 = (i_16 + 1);
        };
        long x_19 = 0;
        while ((x_19 < 400)) {
            long y_20 = 240;
            while ((y_20 < 245)) {
                SetPxRgb(bm_14, x_19, y_20, 8405024);
                y_20 = (y_20 + 1);
            }
            y_20 = 260;
            while ((y_20 < 265)) {
                SetPxRgb(bm_14, x_19, y_20, 8405024);
                y_20 = (y_20 + 1);
            }
            x_19 = (x_19 + 1);
        };
        long y_21 = 0;
        while ((y_21 < 300)) {
            long x_22 = 80;
            while ((x_22 < 85)) {
                SetPxRgb(bm_14, x_22, y_21, 8405024);
                x_22 = (x_22 + 1);
            }
            x_22 = 95;
            while ((x_22 < 100)) {
                SetPxRgb(bm_14, x_22, y_21, 8405024);
                x_22 = (x_22 + 1);
            }
            y_21 = (y_21 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
