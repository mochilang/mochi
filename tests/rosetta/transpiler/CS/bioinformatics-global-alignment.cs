// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string padLeft(string s, long w) {
        string res_0 = "";
        long n_1 = (((dynamic)w) - ((dynamic)s.Length));
        while ((n_1 > 0)) {
            res_0 = (res_0 + " ");
            n_1 = (n_1 - 1);
        };
        return (res_0 + s);
    }

    static long indexOfFrom(string s, string ch, long start) {
        long i_2 = start;
        while ((i_2 < s.Length)) {
            if ((s.Substring((int)(i_2), (int)((i_2 + 1) - i_2)) == ch)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    static bool containsStr(string s, string sub) {
        long i_3 = 0;
        var sl_4 = s.Length;
        var subl_5 = sub.Length;
        while ((i_3 <= (((dynamic)sl_4) - ((dynamic)subl_5)))) {
            if ((s.Substring((int)(i_3), (int)((((dynamic)i_3) + ((dynamic)subl_5)) - i_3)) == sub)) {
                return true;
            }
            i_3 = (i_3 + 1);
        };
        return false;
    }

    static string[] distinct(string[] slist) {
        string[] res_6 = new string[]{};
        foreach (var s_7 in slist) {
            bool found_8 = false;
            foreach (var r_9 in res_6) {
                if ((r_9 == s_7)) {
                    found_8 = true;
                    break;
                }
            }
            if ((!found_8)) {
                res_6 = (Enumerable.ToArray(Enumerable.Append(res_6, s_7)));
            }
        };
        return res_6;
    }

    static string[][] permutations(string[] xs) {
        if ((xs.Length <= 1)) {
            return new string[][]{xs};
        };
        string[][] res_10 = new string[][]{};
        long i_11 = 0;
        while ((i_11 < xs.Length)) {
            string[] rest_12 = new string[]{};
            long j_13 = 0;
            while ((j_13 < xs.Length)) {
                if ((j_13 != i_11)) {
                    rest_12 = (Enumerable.ToArray(Enumerable.Append(rest_12, xs[(int)(j_13)])));
                }
                j_13 = (j_13 + 1);
            }
            string[][] subs_14 = permutations(rest_12);
            foreach (var p_15 in subs_14) {
                string[] perm_16 = new string[]{xs[(int)(i_11)]};
                long k_17 = 0;
                while ((k_17 < p_15.Length)) {
                    perm_16 = (Enumerable.ToArray(Enumerable.Append(perm_16, ((dynamic)p_15)[k_17])));
                    k_17 = (k_17 + 1);
                }
                res_10 = (Enumerable.ToArray(Enumerable.Append(res_10, perm_16)));
            }
            i_11 = (i_11 + 1);
        };
        return res_10;
    }

    static long headTailOverlap(string s1, string s2) {
        long start_18 = 0;
        while (true) {
            long ix_19 = indexOfFrom(s1, s2.Substring((int)(0), (int)(1 - 0)), start_18);
            if ((ix_19 == (0 - 1))) {
                return 0;
            }
            start_18 = ix_19;
            if ((s2.Substring((int)(0), (int)((((dynamic)s1.Length) - ((dynamic)start_18)) - 0)) == s1.Substring((int)(start_18), (int)(s1.Length - start_18)))) {
                return (((dynamic)s1.Length) - ((dynamic)start_18));
            }
            start_18 = (start_18 + 1);
        };
    }

    static string[] deduplicate(string[] slist) {
        string[] arr_20 = distinct(slist);
        string[] filtered_21 = new string[]{};
        long i_22 = 0;
        while ((i_22 < arr_20.Length)) {
            string s1_23 = arr_20[(int)(i_22)];
            bool within_24 = false;
            long j_25 = 0;
            while ((j_25 < arr_20.Length)) {
                if (((j_25 != i_22) && containsStr(arr_20[(int)(j_25)], s1_23))) {
                    within_24 = true;
                    break;
                }
                j_25 = (j_25 + 1);
            }
            if ((!within_24)) {
                filtered_21 = (Enumerable.ToArray(Enumerable.Append(filtered_21, s1_23)));
            }
            i_22 = (i_22 + 1);
        };
        return filtered_21;
    }

    static string joinAll(string[] ss) {
        string out_26 = "";
        foreach (var s_27 in ss) {
            out_26 = (out_26 + s_27);
        };
        return out_26;
    }

    static string shortestCommonSuperstring(string[] slist) {
        string[] ss_28 = deduplicate(slist);
        string shortest_29 = joinAll(ss_28);
        string[][] perms_30 = permutations(ss_28);
        long idx_31 = 0;
        while ((idx_31 < perms_30.Length)) {
            string[] perm_32 = perms_30[(int)(idx_31)];
            string sup_33 = perm_32[(int)(0)];
            long i_34 = 0;
            while ((i_34 < (((dynamic)ss_28.Length) - ((dynamic)1)))) {
                long ov_35 = headTailOverlap(perm_32[(int)(i_34)], perm_32[(int)((i_34 + 1))]);
                sup_33 = (sup_33 + perm_32[(int)((i_34 + 1))].Substring((int)(ov_35), (int)(perm_32[(int)((i_34 + 1))].Length - ov_35)));
                i_34 = (i_34 + 1);
            }
            if ((sup_33.Length < shortest_29.Length)) {
                shortest_29 = sup_33;
            }
            idx_31 = (idx_31 + 1);
        };
        return shortest_29;
    }

    static void printCounts(string seq) {
        long a_36 = 0;
        long c_37 = 0;
        long g_38 = 0;
        long t_39 = 0;
        long i_40 = 0;
        while ((i_40 < seq.Length)) {
            string ch_41 = seq.Substring((int)(i_40), (int)((i_40 + 1) - i_40));
            if ((ch_41 == "A")) {
                a_36 = (a_36 + 1);
            } else {
                if ((ch_41 == "C")) {
                    c_37 = (c_37 + 1);
                } else {
                    if ((ch_41 == "G")) {
                        g_38 = (g_38 + 1);
                    } else {
                        if ((ch_41 == "T")) {
                            t_39 = (t_39 + 1);
                        }
                    }
                }
            }
            i_40 = (i_40 + 1);
        };
        var total_42 = seq.Length;
        Console.WriteLine(_fmtTop((("\nNucleotide counts for " + seq) + ":\n")));
        Console.WriteLine(_fmtTop((padLeft("A", 10) + padLeft((a_36).ToString(), 12))));
        Console.WriteLine(_fmtTop((padLeft("C", 10) + padLeft((c_37).ToString(), 12))));
        Console.WriteLine(_fmtTop((padLeft("G", 10) + padLeft((g_38).ToString(), 12))));
        Console.WriteLine(_fmtTop((padLeft("T", 10) + padLeft((t_39).ToString(), 12))));
        Console.WriteLine(_fmtTop((padLeft("Other", 10) + padLeft(((((dynamic)total_42) - ((dynamic)(((a_36 + c_37) + g_38) + t_39)))).ToString(), 12))));
        Console.WriteLine(_fmtTop("  ____________________"));
        Console.WriteLine(_fmtTop((padLeft("Total length", 14) + padLeft((total_42).ToString(), 8))));
    }

    static void main() {
        string[][] tests_43 = new string[][]{new string[]{"TA", "AAG", "TA", "GAA", "TA"}, new string[]{"CATTAGGG", "ATTAG", "GGG", "TA"}, new string[]{"AAGAUGGA", "GGAGCGCAUC", "AUCGCAAUAAGGA"}, new string[]{"ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT", "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT", "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC", "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC", "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT", "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA"}};
        foreach (var seqs_44 in tests_43) {
            string scs_45 = shortestCommonSuperstring(seqs_44);
            printCounts(scs_45);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
