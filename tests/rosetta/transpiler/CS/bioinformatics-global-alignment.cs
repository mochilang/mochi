// Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
using System;
using System.Linq;
using System.Numerics;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string padLeft(string s_0, long w_1) {
        string res_2 = "";
        long n_3 = (((dynamic)w_1) - ((dynamic)s_0.Length));
        while ((n_3 > 0)) {
            res_2 = (res_2 + " ");
            n_3 = (n_3 - 1);
        };
        return (res_2 + s_0);
    }

    static long indexOfFrom(string s_4, string ch_5, long start_6) {
        long i_7 = start_6;
        while ((i_7 < s_4.Length)) {
            if ((s_4.Substring((int)(i_7), (int)((i_7 + 1) - i_7)) == ch_5)) {
                return i_7;
            }
            i_7 = (i_7 + 1);
        };
        return -1;
    }

    static bool containsStr(string s_8, string sub_9) {
        long i_10 = 0;
        var sl_11 = s_8.Length;
        var subl_12 = sub_9.Length;
        while ((i_10 <= (((dynamic)sl_11) - ((dynamic)subl_12)))) {
            if ((s_8.Substring((int)(i_10), (int)((((dynamic)i_10) + ((dynamic)subl_12)) - i_10)) == sub_9)) {
                return true;
            }
            i_10 = (i_10 + 1);
        };
        return false;
    }

    static string[] distinct(string[] slist_13) {
        string[] res_14 = new string[]{};
        foreach (var s_15 in slist_13) {
            bool found_16 = false;
            foreach (var r_17 in res_14) {
                if ((r_17 == s_15)) {
                    found_16 = true;
                    break;
                }
            }
            if ((!found_16)) {
                res_14 = (Enumerable.ToArray(Enumerable.Append(res_14, s_15)));
            }
        };
        return res_14;
    }

    static string[][] permutations(string[] xs_18) {
        if ((xs_18.Length <= 1)) {
            return new string[][]{xs_18};
        };
        string[][] res_19 = new string[][]{};
        long i_20 = 0;
        while ((i_20 < xs_18.Length)) {
            string[] rest_21 = new string[]{};
            long j_22 = 0;
            while ((j_22 < xs_18.Length)) {
                if ((j_22 != i_20)) {
                    rest_21 = (Enumerable.ToArray(Enumerable.Append(rest_21, xs_18[(int)(j_22)])));
                }
                j_22 = (j_22 + 1);
            }
            string[][] subs_23 = permutations(rest_21);
            foreach (var p_24 in subs_23) {
                string[] perm_25 = new string[]{xs_18[(int)(i_20)]};
                long k_26 = 0;
                while ((k_26 < p_24.Length)) {
                    perm_25 = (Enumerable.ToArray(Enumerable.Append(perm_25, p_24[(int)(k_26)])));
                    k_26 = (k_26 + 1);
                }
                res_19 = (Enumerable.ToArray(Enumerable.Append(res_19, perm_25)));
            }
            i_20 = (i_20 + 1);
        };
        return res_19;
    }

    static long headTailOverlap(string s1_27, string s2_28) {
        long start_29 = 0;
        while (true) {
            long ix_30 = indexOfFrom(s1_27, s2_28.Substring((int)(0), (int)(1 - 0)), start_29);
            if ((ix_30 == (0 - 1))) {
                return 0;
            }
            start_29 = ix_30;
            long sublen_31 = (((dynamic)s1_27.Length) - ((dynamic)start_29));
            if ((sublen_31 > s2_28.Length)) {
                sublen_31 = s2_28.Length;
            }
            if ((s2_28.Substring((int)(0), (int)(sublen_31 - 0)) == s1_27.Substring((int)(start_29), (int)((start_29 + sublen_31) - start_29)))) {
                return sublen_31;
            }
            start_29 = (start_29 + 1);
        };
    }

    static string[] deduplicate(string[] slist_32) {
        string[] arr_33 = distinct(slist_32);
        string[] filtered_34 = new string[]{};
        long i_35 = 0;
        while ((i_35 < arr_33.Length)) {
            string s1_36 = arr_33[(int)(i_35)];
            bool within_37 = false;
            long j_38 = 0;
            while ((j_38 < arr_33.Length)) {
                if (((j_38 != i_35) && containsStr(arr_33[(int)(j_38)], s1_36))) {
                    within_37 = true;
                    break;
                }
                j_38 = (j_38 + 1);
            }
            if ((!within_37)) {
                filtered_34 = (Enumerable.ToArray(Enumerable.Append(filtered_34, s1_36)));
            }
            i_35 = (i_35 + 1);
        };
        return filtered_34;
    }

    static string joinAll(string[] ss_39) {
        string out_40 = "";
        foreach (var s_41 in ss_39) {
            out_40 = (out_40 + s_41);
        };
        return out_40;
    }

    static string shortestCommonSuperstring(string[] slist_42) {
        string[] ss_43 = deduplicate(slist_42);
        string shortest_44 = joinAll(ss_43);
        string[][] perms_45 = permutations(ss_43);
        long idx_46 = 0;
        while ((idx_46 < perms_45.Length)) {
            string[] perm_47 = perms_45[(int)(idx_46)];
            string sup_48 = perm_47[(int)(0)];
            long i_49 = 0;
            while ((i_49 < (((dynamic)ss_43.Length) - ((dynamic)1)))) {
                long ov_50 = headTailOverlap(perm_47[(int)(i_49)], perm_47[(int)((i_49 + 1))]);
                sup_48 = (sup_48 + perm_47[(int)((i_49 + 1))].Substring((int)(ov_50), (int)(perm_47[(int)((i_49 + 1))].Length - ov_50)));
                i_49 = (i_49 + 1);
            }
            if ((sup_48.Length < shortest_44.Length)) {
                shortest_44 = sup_48;
            }
            idx_46 = (idx_46 + 1);
        };
        return shortest_44;
    }

    static void printCounts(string seq_51) {
        long a_52 = 0;
        long c_53 = 0;
        long g_54 = 0;
        long t_55 = 0;
        long i_56 = 0;
        while ((i_56 < seq_51.Length)) {
            string ch_57 = seq_51.Substring((int)(i_56), (int)((i_56 + 1) - i_56));
            if ((ch_57 == "A")) {
                a_52 = (a_52 + 1);
            } else {
                if ((ch_57 == "C")) {
                    c_53 = (c_53 + 1);
                } else {
                    if ((ch_57 == "G")) {
                        g_54 = (g_54 + 1);
                    } else {
                        if ((ch_57 == "T")) {
                            t_55 = (t_55 + 1);
                        }
                    }
                }
            }
            i_56 = (i_56 + 1);
        };
        var total_58 = seq_51.Length;
        Console.WriteLine(_fmtTop((("\nNucleotide counts for " + seq_51) + ":\n")));
        Console.WriteLine(_fmtTop((padLeft("A", 10) + padLeft((a_52).ToString(), 12))));
        Console.WriteLine(_fmtTop((padLeft("C", 10) + padLeft((c_53).ToString(), 12))));
        Console.WriteLine(_fmtTop((padLeft("G", 10) + padLeft((g_54).ToString(), 12))));
        Console.WriteLine(_fmtTop((padLeft("T", 10) + padLeft((t_55).ToString(), 12))));
        Console.WriteLine(_fmtTop((padLeft("Other", 10) + padLeft(((((dynamic)total_58) - ((dynamic)(((a_52 + c_53) + g_54) + t_55)))).ToString(), 12))));
        Console.WriteLine(_fmtTop("  ____________________"));
        Console.WriteLine(_fmtTop((padLeft("Total length", 14) + padLeft((total_58).ToString(), 8))));
    }

    static void main() {
        string[][] tests_59 = new string[][]{new string[]{"TA", "AAG", "TA", "GAA", "TA"}, new string[]{"CATTAGGG", "ATTAG", "GGG", "TA"}, new string[]{"AAGAUGGA", "GGAGCGCAUC", "AUCGCAAUAAGGA"}, new string[]{"ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT", "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT", "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC", "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC", "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT", "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA"}};
        foreach (var seqs_60 in tests_59) {
            string scs_61 = shortestCommonSuperstring(seqs_60);
            printCounts(scs_61);
        };
    }

    static void Main() {
        main();
    }
}
