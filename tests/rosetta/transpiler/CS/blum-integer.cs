// Generated by Mochi 0.10.41 on 2025-07-27 11:31 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        if (((n_0 % 2) == 0)) {
            return (n_0 == 2);
        };
        if (((n_0 % 3) == 0)) {
            return (n_0 == 3);
        };
        long d_1 = 5;
        while (((d_1 * d_1) <= n_0)) {
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 2);
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 4);
        };
        return true;
    }

    static long firstPrimeFactor(long n_2) {
        if ((n_2 == 1)) {
            return 1;
        };
        if (((n_2 % 3) == 0)) {
            return 3;
        };
        if (((n_2 % 5) == 0)) {
            return 5;
        };
        long[] inc_3 = new long[]{4, 2, 4, 2, 4, 6, 2, 6};
        long k_4 = 7;
        long i_5 = 0;
        while (((k_4 * k_4) <= n_2)) {
            if (((n_2 % k_4) == 0)) {
                return k_4;
            }
            k_4 = (k_4 + inc_3[(int)(i_5)]);
            i_5 = (((dynamic)(i_5 + 1)) % ((dynamic)inc_3.Length));
        };
        return n_2;
    }

    static long indexOf(string s_6, string ch_7) {
        long i_8 = 0;
        while ((i_8 < s_6.Length)) {
            if ((s_6.Substring((int)(i_8), (int)((i_8 + 1) - i_8)) == ch_7)) {
                return i_8;
            }
            i_8 = (i_8 + 1);
        };
        return -1;
    }

    static string padLeft(long n_9, long width_10) {
        string s_11 = (n_9).ToString();
        while ((s_11.Length < width_10)) {
            s_11 = (" " + s_11);
        };
        return s_11;
    }

    static string formatFloat(double f_12, long prec_13) {
        string s_14 = (f_12).ToString();
        var idx_15 = s_14.IndexOf(".");
        if ((idx_15 < 0)) {
            return s_14;
        };
        long need_16 = ((((dynamic)idx_15) + ((dynamic)1)) + prec_13);
        if ((s_14.Length > need_16)) {
            return s_14.Substring((int)(0), (int)(need_16 - 0));
        };
        return s_14;
    }

    static void main() {
        long[] blum_17 = new long[]{};
        long[] counts_18 = new long[]{0, 0, 0, 0};
        long[] digits_19 = new long[]{1, 3, 7, 9};
        long i_20 = 1;
        long bc_21 = 0;
        while (true) {
            long p_22 = firstPrimeFactor(i_20);
            if (((p_22 % 4) == 3)) {
                var q_23 = Convert.ToInt64((i_20 / p_22));
                if ((((q_23 != p_22) && ((((dynamic)q_23) % ((dynamic)4)) == 3)) && isPrime(q_23))) {
                    if ((bc_21 < 50)) {
                        blum_17 = (Enumerable.ToArray(Enumerable.Append(blum_17, i_20)));
                    }
                    long d_24 = (i_20 % 10);
                    if ((d_24 == 1)) {
                        counts_18[0] = (counts_18[(int)(0)] + 1);
                    } else {
                        if ((d_24 == 3)) {
                            counts_18[1] = (counts_18[(int)(1)] + 1);
                        } else {
                            if ((d_24 == 7)) {
                                counts_18[2] = (counts_18[(int)(2)] + 1);
                            } else {
                                if ((d_24 == 9)) {
                                    counts_18[3] = (counts_18[(int)(3)] + 1);
                                }
                            }
                        }
                    }
                    bc_21 = (bc_21 + 1);
                    if ((bc_21 == 50)) {
                        Console.WriteLine(_fmtTop("First 50 Blum integers:"));
                        long idx_25 = 0;
                        while ((idx_25 < 50)) {
                            string line_26 = "";
                            long j_27 = 0;
                            while ((j_27 < 10)) {
                                line_26 = ((line_26 + padLeft(blum_17[(int)(idx_25)], 3)) + " ");
                                idx_25 = (idx_25 + 1);
                                j_27 = (j_27 + 1);
                            }
                            Console.WriteLine(_fmtTop(line_26.Substring((int)(0), (int)((((dynamic)line_26.Length) - ((dynamic)1)) - 0))));
                        }
                        break;
                    }
                }
            }
            if (((i_20 % 5) == 3)) {
                i_20 = (i_20 + 4);
            } else {
                i_20 = (i_20 + 2);
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
