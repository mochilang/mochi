// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long maxNumber_0 = 100000000;
    static long[] dsum_1 = new long[]{};
    static long[] dcount_2 = new long[]{};
    static long i_3 = 0;
    static string pad8(long n_4) {
        string s_5 = (n_4).ToString();
        while ((s_5.Length < 8)) {
            s_5 = (" " + s_5);
        };
        return s_5;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_3 <= maxNumber_0)) {
                dsum_1 = (Enumerable.ToArray(Enumerable.Append(dsum_1, 1)));
                dcount_2 = (Enumerable.ToArray(Enumerable.Append(dcount_2, 1)));
                i_3 = (i_3 + 1);
            }
            i_3 = 2;
            while ((i_3 <= maxNumber_0)) {
                long j_6 = (i_3 + i_3);
                while ((j_6 <= maxNumber_0)) {
                    if ((dsum_1[(int)(j_6)] == j_6)) {
                        Console.WriteLine(_fmtTop((((pad8(j_6) + " equals the sum of its first ") + (dcount_2[(int)(j_6)]).ToString()) + " divisors")));
                    }
                    dsum_1[j_6] = (dsum_1[(int)(j_6)] + i_3);
                    dcount_2[j_6] = (dcount_2[(int)(j_6)] + 1);
                    j_6 = (j_6 + i_3);
                }
                i_3 = (i_3 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
