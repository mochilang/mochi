// Generated by Mochi 0.10.41 on 2025-07-27 07:48 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static void show(long n_0) {
        if ((n_0 == 1)) {
            Console.WriteLine(_fmtTop("1: 1"));
            return;
        };
        string out_1 = ((n_0).ToString() + ": ");
        string x_2 = "";
        long m_3 = n_0;
        long f_4 = 2;
        while ((m_3 != 1)) {
            if (((m_3 % f_4) == 0)) {
                out_1 = ((out_1 + x_2) + (f_4).ToString());
                x_2 = "Ã—";
                m_3 = Convert.ToInt64((m_3 / f_4));
            } else {
                f_4 = (f_4 + 1);
            }
        };
        Console.WriteLine(_fmtTop(out_1));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            show(1);
            for (var i_5 = 2; i_5 < 10; i_5++) {
                show(i_5);
            }
            Console.WriteLine(_fmtTop("..."));
            for (var i_6 = 2144; i_6 < 2155; i_6++) {
                show(i_6);
            }
            Console.WriteLine(_fmtTop("..."));
            for (var i_7 = 9987; i_7 < 10000; i_7++) {
                show(i_7);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
