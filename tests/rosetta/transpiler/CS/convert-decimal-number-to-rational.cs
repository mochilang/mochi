// Generated by Mochi 0.10.55 on 2025-08-03 10:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long gcd(long a_0, long b_1) {
        long x_2 = a_0;
        if ((x_2 < 0)) {
            x_2 = -x_2;
        };
        long y_3 = b_1;
        if ((y_3 < 0)) {
            y_3 = -y_3;
        };
        while ((y_3 != 0)) {
            long t_4 = (x_2 % y_3);
            x_2 = y_3;
            y_3 = t_4;
        };
        return x_2;
    }

    static Dictionary<string, long> parseRational(string s_5) {
        long intPart_6 = 0;
        long fracPart_7 = 0;
        long denom_8 = 1;
        bool afterDot_9 = false;
        long i_10 = 0;
        while ((Convert.ToDouble(i_10) < Convert.ToDouble(s_5.Length))) {
            string ch_11 = s_5.Substring((int)(i_10), (int)((i_10 + 1) - i_10));
            if ((ch_11 == ".")) {
                afterDot_9 = true;
            } else {
                long d_12 = (Convert.ToInt64(ch_11) - Convert.ToInt64("0"));
                if ((!afterDot_9)) {
                    intPart_6 = ((intPart_6 * 10) + d_12);
                } else {
                    fracPart_7 = ((fracPart_7 * 10) + d_12);
                    denom_8 = (denom_8 * 10);
                }
            }
            i_10 = (i_10 + 1);
        };
        long num_13 = ((intPart_6 * denom_8) + fracPart_7);
        long g_14 = gcd(num_13, denom_8);
        return new Dictionary<string, long>{{"num", Convert.ToInt64((num_13 / g_14))}, {"den", Convert.ToInt64((denom_8 / g_14))}};
    }

    static void main() {
        string[] inputs_15 = new string[]{"0.9054054", "0.518518", "0.75"};
        foreach (var s_16 in inputs_15) {
            Dictionary<string, long> r_17 = parseRational(s_16);
            Console.WriteLine(_fmtTop(((((s_16 + " = ") + _fmt((r_17.ContainsKey("num") ? r_17["num"] : 0))) + "/") + _fmt((r_17.ContainsKey("den") ? r_17["den"] : 0)))));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
