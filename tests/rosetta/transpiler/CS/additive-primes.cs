// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        if (((n_0 % 2) == 0)) {
            return (n_0 == 2);
        };
        if (((n_0 % 3) == 0)) {
            return (n_0 == 3);
        };
        long d_1 = 5;
        while (((d_1 * d_1) <= n_0)) {
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 2);
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 4);
        };
        return true;
    }

    static long sumDigits(long n_2) {
        long s_3 = 0;
        long x_4 = n_2;
        while ((x_4 > 0)) {
            s_3 = (s_3 + (x_4 % 10));
            x_4 = Convert.ToInt64((x_4 / 10));
        };
        return s_3;
    }

    static string pad(long n_5) {
        if ((n_5 < 10)) {
            return ("  " + (n_5).ToString());
        };
        if ((n_5 < 100)) {
            return (" " + (n_5).ToString());
        };
        return (n_5).ToString();
    }

    static void main() {
        Console.WriteLine(_fmtTop("Additive primes less than 500:"));
        long count_6 = 0;
        string line_7 = "";
        long lineCount_8 = 0;
        long i_9 = 2;
        while ((i_9 < 500)) {
            if ((isPrime(i_9) && isPrime(sumDigits(i_9)))) {
                count_6 = (count_6 + 1);
                line_7 = ((line_7 + pad(i_9)) + "  ");
                lineCount_8 = (lineCount_8 + 1);
                if ((lineCount_8 == 10)) {
                    Console.WriteLine(_fmtTop(line_7.Substring((int)(0), (int)((((dynamic)(line_7.Length)) - ((dynamic)(2))) - 0))));
                    line_7 = "";
                    lineCount_8 = 0;
                }
            }
            if ((i_9 > 2)) {
                i_9 = (i_9 + 2);
            } else {
                i_9 = (i_9 + 1);
            }
        };
        if ((lineCount_8 > 0)) {
            Console.WriteLine(_fmtTop(line_7.Substring((int)(0), (int)((((dynamic)(line_7.Length)) - ((dynamic)(2))) - 0))));
        };
        Console.WriteLine(_fmtTop(((count_6).ToString() + " additive primes found.")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
