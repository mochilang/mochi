// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double[] xs_17 = new double[]{-0.5, 0.1, 0.5, 1.0, 1.5, 2.0, 3.0, 10.0, 140.0, 170.0};
    static double ln(double x_0) {
        double k_1 = 0.0;
        double v_2 = x_0;
        while ((v_2 >= 2.0)) {
            v_2 = (v_2 / 2.0);
            k_1 = (k_1 + 1.0);
        };
        while ((v_2 < 1.0)) {
            v_2 = (v_2 * 2.0);
            k_1 = (k_1 - 1.0);
        };
        double z_3 = ((v_2 - 1.0) / (v_2 + 1.0));
        double zpow_4 = z_3;
        double sum_5 = z_3;
        long i_6 = 3;
        while ((i_6 <= 9)) {
            zpow_4 = ((zpow_4 * z_3) * z_3);
            sum_5 = (sum_5 + (((dynamic)(zpow_4)) / ((dynamic)(Convert.ToDouble(i_6)))));
            i_6 = (i_6 + 2);
        };
        double ln2_7 = 0.6931471805599453;
        return ((k_1 * ln2_7) + (2.0 * sum_5));
    }

    static double expf(double x_8) {
        double term_9 = 1.0;
        double sum_10 = 1.0;
        long i_11 = 1;
        while ((i_11 < 20)) {
            term_9 = (((dynamic)((term_9 * x_8))) / ((dynamic)(Convert.ToDouble(i_11))));
            sum_10 = (sum_10 + term_9);
            i_11 = (i_11 + 1);
        };
        return sum_10;
    }

    static double powf(double base_12, double exp_13) {
        return expf((exp_13 * ln(base_12)));
    }

    static double lanczos7(double z_14) {
        double t_15 = (z_14 + 6.5);
        double x_16 = ((((((((0.9999999999998099 + (676.5203681218851 / z_14)) - (1259.1392167224028 / (z_14 + 1.0))) + (771.3234287776531 / (z_14 + 2.0))) - (176.6150291621406 / (z_14 + 3.0))) + (12.507343278686905 / (z_14 + 4.0))) - (0.13857109526572012 / (z_14 + 5.0))) + (9.984369578019572e-06 / (z_14 + 6.0))) + (1.5056327351493116e-07 / (z_14 + 7.0)));
        return (((2.5066282746310002 * powf(t_15, (z_14 - 0.5))) * powf(2.718281828459045, -t_15)) * x_16);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (var x_18 in xs_17) {
                Console.WriteLine(_fmtTop((((x_18).ToString() + " ") + (lanczos7(x_18)).ToString())));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
