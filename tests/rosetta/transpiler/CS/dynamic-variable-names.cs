// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long parseIntStr(string str_0) {
        long i_1 = 0;
        bool neg_2 = false;
        if (((str_0.Length > 0) && (str_0.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_2 = true;
            i_1 = 1;
        };
        long n_3 = 0;
        Dictionary<string, long> digits_4 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_1 < str_0.Length)) {
            n_3 = ((n_3 * 10) + (digits_4.ContainsKey(str_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1))) ? digits_4[str_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1))] : 0));
            i_1 = (i_1 + 1);
        };
        if (neg_2) {
            n_3 = -n_3;
        };
        return n_3;
    }

    static void main() {
        long n_5 = 0;
        while (((n_5 < 1) || (n_5 > 5))) {
            Console.WriteLine(_fmtTop("How many integer variables do you want to create (max 5) : "));
            string line_6 = _input();
            if ((line_6.Length > 0)) {
                n_5 = parseIntStr(line_6);
            }
        };
        Dictionary<string, long> vars_7 = new Dictionary<string, long>{};
        Console.WriteLine(_fmtTop("OK, enter the variable names and their values, below\n"));
        long i_8 = 1;
        while ((i_8 <= n_5)) {
            Console.WriteLine(_fmtTop((("\n  Variable " + (i_8).ToString()) + "\n")));
            Console.WriteLine(_fmtTop("    Name  : "));
            string name_9 = _input();
            if ((vars_7.ContainsKey(name_9))) {
                Console.WriteLine(_fmtTop("  Sorry, you've already created a variable of that name, try again"));
                continue;
            }
            long value_10 = 0;
            while (true) {
                Console.WriteLine(_fmtTop("    Value : "));
                string valstr_11 = _input();
                if ((valstr_11.Length == 0)) {
                    Console.WriteLine(_fmtTop("  Not a valid integer, try again"));
                    continue;
                }
                bool ok_12 = true;
                long j_13 = 0;
                bool neg_14 = false;
                if ((valstr_11.Substring((int)(0), (int)(1 - 0)) == "-")) {
                    neg_14 = true;
                    j_13 = 1;
                }
                while ((j_13 < valstr_11.Length)) {
                    string ch_15 = valstr_11.Substring((int)(j_13), (int)((j_13 + 1) - j_13));
                    if (((string.Compare(ch_15, "0") < 0) || (string.Compare(ch_15, "9") > 0))) {
                        ok_12 = false;
                        break;
                    }
                    j_13 = (j_13 + 1);
                }
                if ((!ok_12)) {
                    Console.WriteLine(_fmtTop("  Not a valid integer, try again"));
                    continue;
                }
                value_10 = parseIntStr(valstr_11);
                break;
            }
            vars_7[name_9] = value_10;
            i_8 = (i_8 + 1);
        };
        Console.WriteLine(_fmtTop("\nEnter q to quit"));
        while (true) {
            Console.WriteLine(_fmtTop("\nWhich variable do you want to inspect : "));
            string name_16 = _input();
            if ((name_16.ToLower() == "q")) {
                return;
            }
            if ((vars_7.ContainsKey(name_16))) {
                Console.WriteLine(_fmtTop(("It's value is " + ((vars_7.ContainsKey(name_16) ? vars_7[name_16] : 0)).ToString())));
            } else {
                Console.WriteLine(_fmtTop("Sorry there's no variable of that name, try again"));
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
