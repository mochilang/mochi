// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static void printFactors(long n_0) {
        if ((n_0 < 1)) {
            Console.WriteLine(_fmtTop((("\nFactors of " + (n_0).ToString()) + " not computed")));
            return;
        };
        Console.WriteLine(_fmtTop((("\nFactors of " + (n_0).ToString()) + ": ")));
        long[] fs_1 = new long[]{1};
        Action<long, long> apf = null;
        apf = (long p_2, long e_3) => {var orig_4 = fs_1.Length; long pp_5 = p_2; long i_6 = 0; while ((i_6 < e_3)) {
            long j_7 = 0;
            while ((j_7 < orig_4)) {
                fs_1 = (Enumerable.ToArray(Enumerable.Append(fs_1, (fs_1[(int)(j_7)] * pp_5))));
                j_7 = (j_7 + 1);
            }
            i_6 = (i_6 + 1);
            pp_5 = (pp_5 * p_2);
        };};
        long e_8 = 0;
        long m_9 = n_0;
        while (((m_9 % 2) == 0)) {
            m_9 = Convert.ToInt64((m_9 / 2));
            e_8 = (e_8 + 1);
        };
        apf(2, e_8);
        long d_10 = 3;
        while ((m_9 > 1)) {
            if (((d_10 * d_10) > m_9)) {
                d_10 = m_9;
            }
            e_8 = 0;
            while (((m_9 % d_10) == 0)) {
                m_9 = Convert.ToInt64((m_9 / d_10));
                e_8 = (e_8 + 1);
            }
            if ((e_8 > 0)) {
                apf(d_10, e_8);
            }
            d_10 = (d_10 + 2);
        };
        Console.WriteLine(_fmtTop((fs_1).ToString()));
        Console.WriteLine(_fmtTop(("Number of factors = " + (fs_1.Length).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            printFactors(-1);
            printFactors(0);
            printFactors(1);
            printFactors(2);
            printFactors(3);
            printFactors(53);
            printFactors(45);
            printFactors(64);
            printFactors(600851475143L);
            printFactors(999999999999999989L);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
