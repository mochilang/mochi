// Generated by Mochi 0.10.40 on 2025-07-25 19:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string poly(long p) {
        string s_0 = "";
        long coef_1 = 1;
        long i_2 = p;
        if ((coef_1 != 1)) {
            s_0 = (s_0 + (coef_1).ToString());
        };
        while ((i_2 > 0)) {
            s_0 = (s_0 + "x");
            if ((i_2 != 1)) {
                s_0 = ((s_0 + "^") + (i_2).ToString());
            }
            coef_1 = Convert.ToInt64(((coef_1 * i_2) / ((p - i_2) + 1)));
            long d_3 = coef_1;
            if ((((p - (i_2 - 1)) % 2) == 1)) {
                d_3 = -d_3;
            }
            if ((d_3 < 0)) {
                s_0 = ((s_0 + " - ") + (-d_3).ToString());
            } else {
                s_0 = ((s_0 + " + ") + (d_3).ToString());
            }
            i_2 = (i_2 - 1);
        };
        if ((s_0 == "")) {
            s_0 = "1";
        };
        return s_0;
    }

    static bool aks(long n) {
        if ((n < 2)) {
            return false;
        };
        long c_4 = n;
        long i_5 = 1;
        while ((i_5 < n)) {
            if (((c_4 % n) != 0)) {
                return false;
            }
            c_4 = Convert.ToInt64(((c_4 * (n - i_5)) / (i_5 + 1)));
            i_5 = (i_5 + 1);
        };
        return true;
    }

    static void main() {
        long p_6 = 0;
        while ((p_6 <= 7)) {
            Console.WriteLine(_fmtTop((((p_6).ToString() + ":  ") + poly(p_6))));
            p_6 = (p_6 + 1);
        };
        bool first_7 = true;
        p_6 = 2;
        string line_8 = "";
        while ((p_6 < 50)) {
            if (aks(p_6)) {
                if (first_7) {
                    line_8 = (line_8 + (p_6).ToString());
                    first_7 = false;
                } else {
                    line_8 = ((line_8 + " ") + (p_6).ToString());
                }
            }
            p_6 = (p_6 + 1);
        };
        Console.WriteLine(_fmtTop(line_8));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
