// Generated by Mochi 0.10.52 on 2025-07-31 08:37 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((Convert.ToDouble(i_2) < Convert.ToDouble(s_0.Length))) {
            if ((s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2)) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    static string rotate(string s_3, long n_4) {
        return (s_3.Substring((int)(n_4), (int)(s_3.Length - n_4)) + s_3.Substring((int)(0), (int)(n_4 - 0)));
    }

    static string scrambleLeft(string s_5) {
        return (((s_5.Substring((int)(0), (int)(1 - 0)) + s_5.Substring((int)(2), (int)(14 - 2))) + s_5.Substring((int)(1), (int)(2 - 1))) + s_5.Substring((int)(14), (int)(s_5.Length - 14)));
    }

    static string scrambleRight(string s_6) {
        return ((((s_6.Substring((int)(1), (int)(3 - 1)) + s_6.Substring((int)(4), (int)(15 - 4))) + s_6.Substring((int)(3), (int)(4 - 3))) + s_6.Substring((int)(15), (int)(s_6.Length - 15))) + s_6.Substring((int)(0), (int)(1 - 0)));
    }

    static string chao(string text_7, bool encode_8) {
        string left_9 = "HXUCZVAMDSLKPEFJRIGTWOBNYQ";
        string right_10 = "PTLNBQDEOYSFAVZKGJRIHWXUMC";
        string out_11 = "";
        long i_12 = 0;
        while ((Convert.ToDouble(i_12) < Convert.ToDouble(text_7.Length))) {
            string ch_13 = text_7.Substring((int)(i_12), (int)((i_12 + 1) - i_12));
            long idx_14 = 0;
            if (encode_8) {
                idx_14 = indexOf(right_10, ch_13);
                out_11 = (out_11 + left_9.Substring((int)(idx_14), (int)((idx_14 + 1) - idx_14)));
            } else {
                idx_14 = indexOf(left_9, ch_13);
                out_11 = (out_11 + right_10.Substring((int)(idx_14), (int)((idx_14 + 1) - idx_14)));
            }
            left_9 = rotate(left_9, idx_14);
            right_10 = rotate(right_10, idx_14);
            left_9 = scrambleLeft(left_9);
            right_10 = scrambleRight(right_10);
            i_12 = (i_12 + 1);
        };
        return out_11;
    }

    static void main() {
        string plain_15 = "WELLDONEISBETTERTHANWELLSAID";
        string cipher_16 = chao(plain_15, true);
        Console.WriteLine(_fmtTop(plain_15));
        Console.WriteLine(_fmtTop(cipher_16));
        Console.WriteLine(_fmtTop(chao(cipher_16, false)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
