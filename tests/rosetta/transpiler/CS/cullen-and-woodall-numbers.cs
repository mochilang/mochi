// Generated by Mochi 0.10.47 on 2025-07-28 05:05 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static BigInteger pow_big(BigInteger base_0, long exp_1) {
        BigInteger result_2 = 1;
        BigInteger b_3 = base_0;
        long e_4 = exp_1;
        while ((e_4 > 0)) {
            if (((e_4 % 2) == 1)) {
                result_2 = (result_2 * b_3);
            }
            b_3 = (b_3 * b_3);
            e_4 = Convert.ToInt64((e_4 / 2));
        };
        return result_2;
    }

    static BigInteger cullen(long n_5) {
        BigInteger two_n_6 = pow_big(new BigInteger(2), n_5);
        return ((two_n_6 * new BigInteger(n_5)) + new BigInteger(1));
    }

    static BigInteger woodall(long n_7) {
        return (cullen(n_7) - new BigInteger(2));
    }

    static string show_list(BigInteger[] xs_8) {
        string line_9 = "";
        long i_10 = 0;
        while ((i_10 < xs_8.Length)) {
            line_9 = (line_9 + (xs_8[(int)(i_10)]).ToString());
            if ((i_10 < (((dynamic)xs_8.Length) - ((dynamic)1)))) {
                line_9 = (line_9 + " ");
            }
            i_10 = (i_10 + 1);
        };
        return line_9;
    }

    static void main() {
        BigInteger[] cnums_11 = new BigInteger[]{};
        long i_12 = 1;
        while ((i_12 <= 20)) {
            cnums_11 = (Enumerable.ToArray(Enumerable.Append(cnums_11, cullen(i_12))));
            i_12 = (i_12 + 1);
        };
        Console.WriteLine(_fmtTop("First 20 Cullen numbers (n * 2^n + 1):"));
        Console.WriteLine(_fmtTop(show_list(cnums_11)));
        BigInteger[] wnums_13 = new BigInteger[]{};
        i_12 = 1;
        while ((i_12 <= 20)) {
            wnums_13 = (Enumerable.ToArray(Enumerable.Append(wnums_13, woodall(i_12))));
            i_12 = (i_12 + 1);
        };
        Console.WriteLine(_fmtTop("\nFirst 20 Woodall numbers (n * 2^n - 1):"));
        Console.WriteLine(_fmtTop(show_list(wnums_13)));
        BigInteger[] cprimes_14 = new BigInteger[]{new BigInteger(1), new BigInteger(141), new BigInteger(4713), new BigInteger(5795), new BigInteger(6611)};
        Console.WriteLine(_fmtTop("\nFirst 5 Cullen primes (in terms of n):"));
        Console.WriteLine(_fmtTop(show_list(cprimes_14)));
        BigInteger[] wprimes_15 = new BigInteger[]{new BigInteger(2), new BigInteger(3), new BigInteger(6), new BigInteger(30), new BigInteger(75), new BigInteger(81), new BigInteger(115), new BigInteger(123), new BigInteger(249), new BigInteger(362), new BigInteger(384), new BigInteger(462)};
        Console.WriteLine(_fmtTop("\nFirst 12 Woodall primes (in terms of n):"));
        Console.WriteLine(_fmtTop(show_list(wprimes_15)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
