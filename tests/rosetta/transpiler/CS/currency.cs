// Generated by Mochi 0.10.47 on 2025-07-28 05:10 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long parseIntDigits(string s_0) {
        long n_1 = 0;
        long i_2 = 0;
        Dictionary<string, long> digits_3 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_2 < s_0.Length)) {
            string ch_4 = s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2));
            if ((!(digits_3.ContainsKey(ch_4)))) {
                return 0;
            }
            n_1 = ((n_1 * 10) + (digits_3.ContainsKey(ch_4) ? digits_3[ch_4] : 0));
            i_2 = (i_2 + 1);
        };
        return n_1;
    }

    static long parseDC(string s_5) {
        bool neg_6 = false;
        if (((s_5.Length > 0) && (s_5.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_6 = true;
            s_5 = s_5.Substring((int)(1), (int)(s_5.Length - 1));
        };
        long dollars_7 = 0;
        long cents_8 = 0;
        long i_9 = 0;
        bool seenDot_10 = false;
        long centDigits_11 = 0;
        while ((i_9 < s_5.Length)) {
            string ch_12 = s_5.Substring((int)(i_9), (int)((i_9 + 1) - i_9));
            if ((ch_12 == ".")) {
                seenDot_10 = true;
                i_9 = (i_9 + 1);
                continue;
            }
            long d_13 = parseIntDigits(ch_12);
            if (seenDot_10) {
                if ((centDigits_11 < 2)) {
                    cents_8 = ((cents_8 * 10) + d_13);
                    centDigits_11 = (centDigits_11 + 1);
                }
            } else {
                dollars_7 = ((dollars_7 * 10) + d_13);
            }
            i_9 = (i_9 + 1);
        };
        if ((centDigits_11 == 1)) {
            cents_8 = (cents_8 * 10);
        };
        long val_14 = ((dollars_7 * 100) + cents_8);
        if (neg_6) {
            val_14 = -val_14;
        };
        return val_14;
    }

    static long parseRate(string s_15) {
        bool neg_16 = false;
        if (((s_15.Length > 0) && (s_15.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_16 = true;
            s_15 = s_15.Substring((int)(1), (int)(s_15.Length - 1));
        };
        long whole_17 = 0;
        long frac_18 = 0;
        long digits_19 = 0;
        bool seenDot_20 = false;
        long i_21 = 0;
        while ((i_21 < s_15.Length)) {
            string ch_22 = s_15.Substring((int)(i_21), (int)((i_21 + 1) - i_21));
            if ((ch_22 == ".")) {
                seenDot_20 = true;
                i_21 = (i_21 + 1);
                continue;
            }
            long d_23 = parseIntDigits(ch_22);
            if (seenDot_20) {
                if ((digits_19 < 4)) {
                    frac_18 = ((frac_18 * 10) + d_23);
                    digits_19 = (digits_19 + 1);
                }
            } else {
                whole_17 = ((whole_17 * 10) + d_23);
            }
            i_21 = (i_21 + 1);
        };
        while ((digits_19 < 4)) {
            frac_18 = (frac_18 * 10);
            digits_19 = (digits_19 + 1);
        };
        long val_24 = ((whole_17 * 10000) + frac_18);
        if (neg_16) {
            val_24 = -val_24;
        };
        return val_24;
    }

    static string dcString(long dc_25) {
        long d_26 = (dc_25 / 100);
        long n_27 = dc_25;
        if ((n_27 < 0)) {
            n_27 = -n_27;
        };
        long c_28 = (n_27 % 100);
        string cstr_29 = (c_28).ToString();
        if ((cstr_29.Length == 1)) {
            cstr_29 = ("0" + cstr_29);
        };
        return (((d_26).ToString() + ".") + cstr_29);
    }

    static long extend(long dc_30, long n_31) {
        return (dc_30 * n_31);
    }

    static long tax(long total_32, long rate_33) {
        return Convert.ToInt64((((total_32 * rate_33) + 5000) / 10000));
    }

    static string padLeft(string s_34, long n_35) {
        string out_36 = s_34;
        while ((out_36.Length < n_35)) {
            out_36 = (" " + out_36);
        };
        return out_36;
    }

    static void main() {
        long hp_37 = parseDC("5.50");
        long mp_38 = parseDC("2.86");
        long rate_39 = parseRate("0.0765");
        long totalBeforeTax_40 = (extend(hp_37, 4000000000000000L) + extend(mp_38, 2));
        long t_41 = tax(totalBeforeTax_40, rate_39);
        long total_42 = (totalBeforeTax_40 + t_41);
        Console.WriteLine(_fmtTop(("Total before tax: " + padLeft(dcString(totalBeforeTax_40), 22))));
        Console.WriteLine(_fmtTop(("             Tax: " + padLeft(dcString(t_41), 22))));
        Console.WriteLine(_fmtTop(("           Total: " + padLeft(dcString(total_42), 22))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
