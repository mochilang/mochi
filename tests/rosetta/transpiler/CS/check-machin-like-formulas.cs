// Generated by Mochi 0.10.42 on 2025-07-27 10:11 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, long>[][] testCases_2 = new Dictionary<string, long>[][]{new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 1}, {"n", 1}, {"d", 2}}, new Dictionary<string, long>{{"a", 1}, {"n", 1}, {"d", 3}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 2}, {"n", 1}, {"d", 3}}, new Dictionary<string, long>{{"a", 1}, {"n", 1}, {"d", 7}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 4}, {"n", 1}, {"d", 5}}, new Dictionary<string, long>{{"a", -1}, {"n", 1}, {"d", 239}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 5}, {"n", 1}, {"d", 7}}, new Dictionary<string, long>{{"a", 2}, {"n", 3}, {"d", 79}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 1}, {"n", 1}, {"d", 2}}, new Dictionary<string, long>{{"a", 1}, {"n", 1}, {"d", 5}}, new Dictionary<string, long>{{"a", 1}, {"n", 1}, {"d", 8}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 4}, {"n", 1}, {"d", 5}}, new Dictionary<string, long>{{"a", -1}, {"n", 1}, {"d", 70}}, new Dictionary<string, long>{{"a", 1}, {"n", 1}, {"d", 99}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 5}, {"n", 1}, {"d", 7}}, new Dictionary<string, long>{{"a", 4}, {"n", 1}, {"d", 53}}, new Dictionary<string, long>{{"a", 2}, {"n", 1}, {"d", 4443}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 6}, {"n", 1}, {"d", 8}}, new Dictionary<string, long>{{"a", 2}, {"n", 1}, {"d", 57}}, new Dictionary<string, long>{{"a", 1}, {"n", 1}, {"d", 239}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 8}, {"n", 1}, {"d", 10}}, new Dictionary<string, long>{{"a", -1}, {"n", 1}, {"d", 239}}, new Dictionary<string, long>{{"a", -4}, {"n", 1}, {"d", 515}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 12}, {"n", 1}, {"d", 18}}, new Dictionary<string, long>{{"a", 8}, {"n", 1}, {"d", 57}}, new Dictionary<string, long>{{"a", -5}, {"n", 1}, {"d", 239}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 16}, {"n", 1}, {"d", 21}}, new Dictionary<string, long>{{"a", 3}, {"n", 1}, {"d", 239}}, new Dictionary<string, long>{{"a", 4}, {"n", 3}, {"d", 1042}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 22}, {"n", 1}, {"d", 28}}, new Dictionary<string, long>{{"a", 2}, {"n", 1}, {"d", 443}}, new Dictionary<string, long>{{"a", -5}, {"n", 1}, {"d", 1393}}, new Dictionary<string, long>{{"a", -10}, {"n", 1}, {"d", 11018}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 22}, {"n", 1}, {"d", 38}}, new Dictionary<string, long>{{"a", 17}, {"n", 7}, {"d", 601}}, new Dictionary<string, long>{{"a", 10}, {"n", 7}, {"d", 8149}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 44}, {"n", 1}, {"d", 57}}, new Dictionary<string, long>{{"a", 7}, {"n", 1}, {"d", 239}}, new Dictionary<string, long>{{"a", -12}, {"n", 1}, {"d", 682}}, new Dictionary<string, long>{{"a", 24}, {"n", 1}, {"d", 12943}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 88}, {"n", 1}, {"d", 172}}, new Dictionary<string, long>{{"a", 51}, {"n", 1}, {"d", 239}}, new Dictionary<string, long>{{"a", 32}, {"n", 1}, {"d", 682}}, new Dictionary<string, long>{{"a", 44}, {"n", 1}, {"d", 5357}}, new Dictionary<string, long>{{"a", 68}, {"n", 1}, {"d", 12943}}}, new Dictionary<string, long>[]{new Dictionary<string, long>{{"a", 88}, {"n", 1}, {"d", 172}}, new Dictionary<string, long>{{"a", 51}, {"n", 1}, {"d", 239}}, new Dictionary<string, long>{{"a", 32}, {"n", 1}, {"d", 682}}, new Dictionary<string, long>{{"a", 44}, {"n", 1}, {"d", 5357}}, new Dictionary<string, long>{{"a", 68}, {"n", 1}, {"d", 12944}}}};
    static object br(long n_0, long d_1) {
        return (object)(n_0 / d_1);
    }

    static string format(Dictionary<string, long>[] ts_3) {
        string s_4 = "[";
        long i_5 = 0;
        while ((i_5 < ts_3.Length)) {
            Dictionary<string, long> t_6 = ts_3[(int)(i_5)];
            s_4 = (((((((s_4 + "{") + ((t_6.ContainsKey("a") ? t_6["a"] : 0)).ToString()) + " ") + ((t_6.ContainsKey("n") ? t_6["n"] : 0)).ToString()) + " ") + ((t_6.ContainsKey("d") ? t_6["d"] : 0)).ToString()) + "}");
            if ((i_5 < (((dynamic)ts_3.Length) - ((dynamic)1)))) {
                s_4 = (s_4 + " ");
            }
            i_5 = (i_5 + 1);
        };
        return (s_4 + "]");
    }

    static object tanEval(long coef_7, object f_8) {
        if ((coef_7 == 1)) {
            return f_8;
        };
        if ((coef_7 < 0)) {
            return -((dynamic)tanEval(-coef_7, f_8));
        };
        long ca_9 = (coef_7 / 2);
        long cb_10 = (coef_7 - ca_9);
        var a_11 = tanEval(ca_9, f_8);
        var b_12 = tanEval(cb_10, f_8);
        return (object)(((dynamic)(((dynamic)a_11) + ((dynamic)b_12))) / ((dynamic)(((dynamic)1) - ((dynamic)(((dynamic)a_11) * ((dynamic)b_12))))));
    }

    static object tans(Dictionary<string, long>[] m_13) {
        if ((m_13.Length == 1)) {
            Dictionary<string, long> t_14 = m_13[(int)(0)];
            return tanEval((t_14.ContainsKey("a") ? t_14["a"] : 0), br((t_14.ContainsKey("n") ? t_14["n"] : 0), (t_14.ContainsKey("d") ? t_14["d"] : 0)));
        };
        long half_15 = (((dynamic)m_13.Length) / ((dynamic)2));
        var a_16 = tans(m_13.Skip((int)(0)).Take((int)((half_15 - 0))).ToArray());
        var b_17 = tans(m_13.Skip((int)(half_15)).Take((int)((m_13.Length - half_15))).ToArray());
        return (object)(((dynamic)(((dynamic)a_16) + ((dynamic)b_17))) / ((dynamic)(((dynamic)1) - ((dynamic)(((dynamic)a_16) * ((dynamic)b_17))))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (var ts_18 in testCases_2) {
                Console.WriteLine(_fmtTop(((("tan " + format(ts_18)) + " = ") + (tans(ts_18)).ToString())));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
