// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;

class SomeStruct {
    public Dictionary<string, string> runtimeFields;
    public override string ToString() => $"SomeStruct {{runtimeFields = {runtimeFields}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static void main() {
        SomeStruct ss_0 = new SomeStruct{runtimeFields = new Dictionary<string, string>{}};
        Console.WriteLine(_fmtTop("Create two fields at runtime: \n"));
        long i_1 = 1;
        while ((i_1 <= 2)) {
            Console.WriteLine(_fmtTop((("  Field #" + (i_1).ToString()) + ":\n")));
            Console.WriteLine(_fmtTop("       Enter name  : "));
            string name_2 = _input();
            Console.WriteLine(_fmtTop("       Enter value : "));
            string value_3 = _input();
            Dictionary<string, string> fields_4 = ss_0.runtimeFields;
            fields_4[name_2] = value_3;
            ss_0.runtimeFields = fields_4;
            Console.WriteLine(_fmtTop("\n"));
            i_1 = (i_1 + 1);
        };
        while (true) {
            Console.WriteLine(_fmtTop("Which field do you want to inspect ? "));
            string name_5 = _input();
            if ((ss_0.runtimeFields.ContainsKey(name_5))) {
                string value_6 = (ss_0.runtimeFields.ContainsKey(name_5) ? ss_0.runtimeFields[name_5] : "");
                Console.WriteLine(_fmtTop((("Its value is '" + value_6) + "'")));
                return;
            } else {
                Console.WriteLine(_fmtTop("There is no field of that name, try again\n"));
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
