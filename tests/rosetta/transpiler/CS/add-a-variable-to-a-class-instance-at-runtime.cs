// Generated by Mochi 0.10.39 on 2025-07-24 18:38 +0700
using System;
using System.Collections.Generic;
using System.IO;
using System.Collections;

struct SomeStruct {
    public Dictionary<string, string> runtimeFields;
    public override string ToString() => $"SomeStruct {{runtimeFields = {runtimeFields}}}";
}
class Program {
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        return Console.ReadLine();
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static void main() {
        SomeStruct ss = new SomeStruct{runtimeFields = new Dictionary<string, string>{}};
        Console.WriteLine(_fmtTop("Create two fields at runtime: \n"));
        int i = 1;
        while ((i <= 2)) {
            Console.WriteLine(_fmtTop((("  Field #" + i.ToString()) + ":\n")));
            Console.WriteLine(_fmtTop("       Enter name  : "));
            string name = _input();
            Console.WriteLine(_fmtTop("       Enter value : "));
            string value = _input();
            var fields = ss.runtimeFields;
            fields[name] = value;
            ss.runtimeFields = fields;
            Console.WriteLine(_fmtTop("\n"));
            i = (i + 1);
        };
        while (true) {
            Console.WriteLine(_fmtTop("Which field do you want to inspect ? "));
            string name_0 = _input();
            if ((ss.runtimeFields.ContainsKey(name_0))) {
                var value_1 = ss.runtimeFields[name_0];
                Console.WriteLine(_fmtTop((("Its value is '" + value_1) + "'")));
                return;
            } else {
                Console.WriteLine(_fmtTop("There is no field of that name, try again\n"));
            }
        };
    }

    static void Main() {
        main();
    }
}
