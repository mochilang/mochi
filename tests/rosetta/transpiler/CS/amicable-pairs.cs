// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long pfacSum(long i_0) {
        long sum_1 = 0;
        long p_2 = 1;
        while ((p_2 <= (i_0 / 2))) {
            if (((i_0 % p_2) == 0)) {
                sum_1 = (sum_1 + p_2);
            }
            p_2 = (p_2 + 1);
        };
        return sum_1;
    }

    static string pad(long n_3, long width_4) {
        string s_5 = (n_3).ToString();
        while ((s_5.Length < width_4)) {
            s_5 = (" " + s_5);
        };
        return s_5;
    }

    static void main() {
        long[] sums_6 = new long[]{};
        long i_7 = 0;
        while ((i_7 < 20000)) {
            sums_6 = (Enumerable.ToArray(Enumerable.Append(sums_6, 0)));
            i_7 = (i_7 + 1);
        };
        i_7 = 1;
        while ((i_7 < 20000)) {
            sums_6[i_7] = pfacSum(i_7);
            i_7 = (i_7 + 1);
        };
        Console.WriteLine(_fmtTop("The amicable pairs below 20,000 are:"));
        long n_8 = 2;
        while ((n_8 < 19999)) {
            long m_9 = sums_6[(int)(n_8)];
            if ((((m_9 > n_8) && (m_9 < 20000)) && (n_8 == sums_6[(int)(m_9)]))) {
                Console.WriteLine(_fmtTop(((("  " + pad(n_8, 5)) + " and ") + pad(m_9, 5))));
            }
            n_8 = (n_8 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
