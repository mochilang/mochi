// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static int pfacSum(int i) {
        int sum = 0;
        int p = 1;
        while ((p <= (i / 2))) {
            if (((i % p) == 0)) {
                sum = (sum + p);
            }
            p = (p + 1);
        };
        return sum;
    }

    static string pad(int n, int width) {
        string s = n.ToString();
        while ((s.Length < width)) {
            s = (" " + s);
        };
        return s;
    }

    static void main() {
        int[] sums = new int[]{};
        int i = 0;
        while ((i < 20000)) {
            sums = (sums.Append(0).ToArray());
            i = (i + 1);
        };
        i = 1;
        while ((i < 20000)) {
            sums[i] = pfacSum(i);
            i = (i + 1);
        };
        Console.WriteLine(_fmtTop("The amicable pairs below 20,000 are:"));
        int n = 2;
        while ((n < 19999)) {
            var m = sums[n];
            if ((((m > n) && (m < 20000)) && (n == sums[m]))) {
                Console.WriteLine(_fmtTop(((("  " + pad(n, 5)) + " and ") + pad(m, 5))));
            }
            n = (n + 1);
        };
    }

    static void Main() {
        main();
    }
}
