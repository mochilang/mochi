// Generated by Mochi 0.10.52 on 2025-07-31 08:37 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Info {
    public string animal;
    public string yinYang;
    public string element;
    public string stemBranch;
    public long cycle;
    public override string ToString() => $"Info {{animal = \"{animal}\", yinYang = \"{yinYang}\", element = \"{element}\", stemBranch = \"{stemBranch}\", cycle = {cycle}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] animal_0 = new string[]{"Rat", "Ox", "Tiger", "Rabbit", "Dragon", "Snake", "Horse", "Goat", "Monkey", "Rooster", "Dog", "Pig"};
    static string[] yinYang_1 = new string[]{"Yang", "Yin"};
    static string[] element_2 = new string[]{"Wood", "Fire", "Earth", "Metal", "Water"};
    static string[] stemChArr_3 = new string[]{"甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"};
    static string[] branchChArr_4 = new string[]{"子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"};
    static Info cz(long yr_5, string[] animal_6, string[] yinYang_7, string[] element_8, string[] sc_9, string[] bc_10) {
        long y_11 = (yr_5 - 4);
        long stem_12 = (y_11 % 10);
        long branch_13 = (y_11 % 12);
        string sb_14 = (sc_9[(int)(stem_12)] + bc_10[(int)(branch_13)]);
        return new Info{animal = animal_6[(int)(branch_13)], yinYang = yinYang_7[(int)((stem_12 % 2))], element = element_8[(int)(Convert.ToInt64((stem_12 / 2)))], stemBranch = sb_14, cycle = ((y_11 % 60) + 1)};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (var yr_15 in new long[]{1935, 1938, 1968, 1972, 1976}) {
                Info r_16 = cz(yr_15, animal_0, yinYang_1, element_2, stemChArr_3, branchChArr_4);
                Console.WriteLine(_fmtTop(((((((((((_fmt(yr_15) + ": ") + r_16.element) + " ") + r_16.animal) + ", ") + r_16.yinYang) + ", Cycle year ") + _fmt(r_16.cycle)) + " ") + r_16.stemBranch)));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
