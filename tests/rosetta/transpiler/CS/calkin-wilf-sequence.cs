// Generated by Mochi 0.10.41 on 2025-07-27 12:32 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static object bigrat(long a_0, long b_1) {
        return (object)(a_0 / b_1);
    }

    static object[] calkinWilf(long n_2) {
        object[] seq_3 = new object[]{};
        seq_3 = (Enumerable.ToArray(Enumerable.Append(seq_3, (object)bigrat(1, 1))));
        long i_4 = 1;
        while ((i_4 < n_2)) {
            var prev_5 = ((dynamic)seq_3)[(i_4 - 1)];
            var a_6 = num(prev_5);
            var b_7 = denom(prev_5);
            var f_8 = (((dynamic)a_6) / ((dynamic)b_7));
            long t_9 = bigrat(f_8, 1);
            t_9 = (t_9 * 2);
            t_9 = (((dynamic)t_9) - ((dynamic)prev_5));
            t_9 = (t_9 + 1);
            t_9 = (1 / t_9);
            seq_3 = (Enumerable.ToArray(Enumerable.Append(seq_3, (object)t_9)));
            i_4 = (i_4 + 1);
        };
        return seq_3;
    }

    static long[] toContinued(object r_10) {
        var a_11 = num(r_10);
        var b_12 = denom(r_10);
        long[] res_13 = new long[]{};
        while (true) {
            res_13 = (Enumerable.ToArray(Enumerable.Append(res_13, Convert.ToInt64((((dynamic)a_11) / ((dynamic)b_12))))));
            var t_14 = (((dynamic)a_11) % ((dynamic)b_12));
            a_11 = b_12;
            b_12 = t_14;
            if ((a_11 == 1)) {
                break;
            }
        };
        if (((((dynamic)res_13.Length) % ((dynamic)2)) == 0)) {
            res_13[(((dynamic)res_13.Length) - ((dynamic)1))] = (res_13[(int)((((dynamic)res_13.Length) - ((dynamic)1)))] - 1);
            res_13 = (Enumerable.ToArray(Enumerable.Append(res_13, 1)));
        };
        return res_13;
    }

    static long termNumber(long[] cf_15) {
        string b_16 = "";
        string d_17 = "1";
        foreach (var n_18 in cf_15) {
            b_16 = (((dynamic)repeat(d_17, n_18)) + ((dynamic)b_16));
            if ((d_17 == "1")) {
                d_17 = "0";
            } else {
                d_17 = "1";
            }
        };
        return Convert.ToInt64(b_16, 2);
    }

    static string commatize(long n_19) {
        string s_20 = (n_19).ToString();
        string out_21 = "";
        long i_22 = 0;
        long cnt_23 = 0;
        bool neg_24 = false;
        if ((s_20.Substring((int)(0), (int)(1 - 0)) == "-")) {
            neg_24 = true;
            s_20 = s_20.Substring((int)(1), (int)(s_20.Length - 1));
        };
        i_22 = (((dynamic)s_20.Length) - ((dynamic)1));
        while ((i_22 >= 0)) {
            out_21 = (s_20.Substring((int)(i_22), (int)((i_22 + 1) - i_22)) + out_21);
            cnt_23 = (cnt_23 + 1);
            if (((cnt_23 == 3) && (i_22 != 0))) {
                out_21 = ("," + out_21);
                cnt_23 = 0;
            }
            i_22 = (i_22 - 1);
        };
        if (neg_24) {
            out_21 = ("-" + out_21);
        };
        return out_21;
    }

    static void main() {
        object[] cw_25 = calkinWilf(20);
        Console.WriteLine(_fmtTop("The first 20 terms of the Calkin-Wilf sequnence are:"));
        long i_26 = 0;
        while ((i_26 < 20)) {
            var r_27 = ((dynamic)cw_25)[i_26];
            string s_28 = (num(r_27)).ToString();
            if ((denom(r_27) != 1)) {
                s_28 = ((s_28 + "/") + (denom(r_27)).ToString());
            }
            Console.WriteLine(_fmtTop(((((dynamic)(((dynamic)i_26) + ((dynamic)Convert.ToInt64(1))).PadLeft(2, ' ')) + ((dynamic)": ")) + s_28)));
            i_26 = (i_26 + 1);
        };
        var r_29 = bigrat(83116, 51639);
        long[] cf_30 = toContinued(r_29);
        long tn_31 = termNumber(cf_30);
        Console.WriteLine(_fmtTop((((((("" + (num(r_29)).ToString()) + "/") + (denom(r_29)).ToString()) + " is the ") + commatize(tn_31)) + "th term of the sequence.")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
