// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] arr1_0 = new long[]{2, 7, 1, 8, 2};
    static Dictionary<long, long> counts1_1 = new Dictionary<long, long>{};
    static long[] keys1_2 = new long[]{};
    static long i_3 = 0;
    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((string.Compare(Convert.ToString(i_3), Convert.ToString(arr1_0.Length)) < 0)) {
                long v_4 = arr1_0[(int)(i_3)];
                if ((counts1_1.ContainsKey(v_4))) {
                    counts1_1[v_4] = ((counts1_1.ContainsKey(v_4) ? counts1_1[v_4] : 0) + 1);
                } else {
                    counts1_1[v_4] = 1;
                    keys1_2 = (Enumerable.ToArray(Enumerable.Append(keys1_2, v_4)));
                }
                i_3 = (i_3 + 1);
            }
            long max1_5 = 0;
            i_3 = 0;
            while ((string.Compare(Convert.ToString(i_3), Convert.ToString(keys1_2.Length)) < 0)) {
                long k_6 = keys1_2[(int)(i_3)];
                long c_7 = (counts1_1.ContainsKey(k_6) ? counts1_1[k_6] : 0);
                if ((c_7 > max1_5)) {
                    max1_5 = c_7;
                }
                i_3 = (i_3 + 1);
            }
            long[] modes1_8 = new long[]{};
            i_3 = 0;
            while ((string.Compare(Convert.ToString(i_3), Convert.ToString(keys1_2.Length)) < 0)) {
                long k_9 = keys1_2[(int)(i_3)];
                if (((counts1_1.ContainsKey(k_9) ? counts1_1[k_9] : 0) == max1_5)) {
                    modes1_8 = (Enumerable.ToArray(Enumerable.Append(modes1_8, k_9)));
                }
                i_3 = (i_3 + 1);
            }
            Console.WriteLine(_fmtTop((modes1_8).ToString()));
            long[] arr2_10 = new long[]{2, 7, 1, 8, 2, 8};
            Dictionary<long, long> counts2_11 = new Dictionary<long, long>{};
            long[] keys2_12 = new long[]{};
            i_3 = 0;
            while ((string.Compare(Convert.ToString(i_3), Convert.ToString(arr2_10.Length)) < 0)) {
                long v_13 = arr2_10[(int)(i_3)];
                if ((counts2_11.ContainsKey(v_13))) {
                    counts2_11[v_13] = ((counts2_11.ContainsKey(v_13) ? counts2_11[v_13] : 0) + 1);
                } else {
                    counts2_11[v_13] = 1;
                    keys2_12 = (Enumerable.ToArray(Enumerable.Append(keys2_12, v_13)));
                }
                i_3 = (i_3 + 1);
            }
            long max2_14 = 0;
            i_3 = 0;
            while ((string.Compare(Convert.ToString(i_3), Convert.ToString(keys2_12.Length)) < 0)) {
                long k_15 = keys2_12[(int)(i_3)];
                long c_16 = (counts2_11.ContainsKey(k_15) ? counts2_11[k_15] : 0);
                if ((c_16 > max2_14)) {
                    max2_14 = c_16;
                }
                i_3 = (i_3 + 1);
            }
            long[] modes2_17 = new long[]{};
            i_3 = 0;
            while ((string.Compare(Convert.ToString(i_3), Convert.ToString(keys2_12.Length)) < 0)) {
                long k_18 = keys2_12[(int)(i_3)];
                if (((counts2_11.ContainsKey(k_18) ? counts2_11[k_18] : 0) == max2_14)) {
                    modes2_17 = (Enumerable.ToArray(Enumerable.Append(modes2_17, k_18)));
                }
                i_3 = (i_3 + 1);
            }
            Console.WriteLine(_fmtTop((modes2_17).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
