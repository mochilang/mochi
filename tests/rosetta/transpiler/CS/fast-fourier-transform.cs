// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Complex {
    public double re;
    public double im;
    public override string ToString() => $"Complex {{re = {re.ToString("0.0")}, im = {im.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double sinApprox(double x_1) {
        double term_2 = x_1;
        double sum_3 = x_1;
        long n_4 = 1;
        while ((n_4 <= 10)) {
            var denom_5 = Convert.ToDouble(((2 * n_4) * ((2 * n_4) + 1)));
            term_2 = (((dynamic)(((-term_2 * x_1) * x_1))) / ((dynamic)(denom_5)));
            sum_3 = (sum_3 + term_2);
            n_4 = (n_4 + 1);
        };
        return sum_3;
    }

    static double cosApprox(double x_6) {
        double term_7 = 1;
        double sum_8 = 1;
        long n_9 = 1;
        while ((n_9 <= 10)) {
            var denom_10 = Convert.ToDouble((((2 * n_9) - 1) * (2 * n_9)));
            term_7 = (((dynamic)(((-term_7 * x_6) * x_6))) / ((dynamic)(denom_10)));
            sum_8 = (sum_8 + term_7);
            n_9 = (n_9 + 1);
        };
        return sum_8;
    }

    static Complex cis(double x_11) {
        return new Complex{re = cosApprox(x_11), im = sinApprox(x_11)};
    }

    static Complex add(Complex a_12, Complex b_13) {
        return new Complex{re = (a_12.re + b_13.re), im = (a_12.im + b_13.im)};
    }

    static Complex sub(Complex a_14, Complex b_15) {
        return new Complex{re = (a_14.re - b_15.re), im = (a_14.im - b_15.im)};
    }

    static Complex mul(Complex a_16, Complex b_17) {
        return new Complex{re = ((a_16.re * b_17.re) - (a_16.im * b_17.im)), im = ((a_16.re * b_17.im) + (a_16.im * b_17.re))};
    }

    static void ditfft2Rec(double[] x_18, Complex[] y_19, long offX_20, long offY_21, long n_22, long s_23) {
        if ((n_22 == 1)) {
            y_19[offY_21] = new Complex{re = x_18[(int)(offX_20)], im = 0};
            return;
        };
        ditfft2Rec(x_18, y_19, offX_20, offY_21, (n_22 / 2), (2 * s_23));
        ditfft2Rec(x_18, y_19, (offX_20 + s_23), (offY_21 + (n_22 / 2)), (n_22 / 2), (2 * s_23));
        long k_24 = 0;
        while ((k_24 < (n_22 / 2))) {
            double angle_25 = (((dynamic)((((dynamic)((-2 * PI_0))) * ((dynamic)(Convert.ToDouble(k_24)))))) / ((dynamic)(Convert.ToDouble(n_22))));
            Complex tf_26 = mul(cis(angle_25), y_19[(int)(((offY_21 + k_24) + (n_22 / 2)))]);
            Complex a_27 = add(y_19[(int)((offY_21 + k_24))], tf_26);
            Complex b_28 = sub(y_19[(int)((offY_21 + k_24))], tf_26);
            y_19[(offY_21 + k_24)] = a_27;
            y_19[((offY_21 + k_24) + (n_22 / 2))] = b_28;
            k_24 = (k_24 + 1);
        };
    }

    static void ditfft2(double[] x_29, Complex[] y_30, long n_31, long s_32) {
        ditfft2Rec(x_29, y_30, 0, 0, n_31, s_32);
    }

    static void main() {
        double[] x_33 = new double[]{1, 1, 1, 1, 0, 0, 0, 0};
        Complex[] y_34 = new Complex[]{};
        long i_35 = 0;
        while ((i_35 < x_33.Length)) {
            y_34 = (Enumerable.ToArray(Enumerable.Append(y_34, new Complex{re = 0, im = 0})));
            i_35 = (i_35 + 1);
        };
        ditfft2(x_33, y_34, x_33.Length, 1);
        foreach (var c_36 in y_34) {
            string line_37 = pad(fmt(c_36.re), 8);
            if ((c_36.im >= 0)) {
                line_37 = ((line_37 + "+") + fmt(c_36.im));
            } else {
                line_37 = (line_37 + fmt(c_36.im));
            }
            Console.WriteLine(_fmtTop(line_37));
        };
    }

    static string pad(string s_38, long w_39) {
        string t_40 = s_38;
        while ((t_40.Length < w_39)) {
            t_40 = (" " + t_40);
        };
        return t_40;
    }

    static string fmt(double x_41) {
        double y_42 = (floorf(((x_41 * 10000) + 0.5)) / 10000);
        string s_43 = (y_42).ToString();
        var dot_44 = s_43.IndexOf(".");
        if ((dot_44 == (0 - 1))) {
            s_43 = (s_43 + ".0000");
        } else {
            long d_45 = (((dynamic)((((dynamic)(s_43.Length)) - ((dynamic)(dot_44))))) - ((dynamic)(1)));
            while ((d_45 < 4)) {
                s_43 = (s_43 + "0");
                d_45 = (d_45 + 1);
            }
        };
        return s_43;
    }

    static double floorf(double x_46) {
        var y_47 = Convert.ToInt64(x_46);
        return Convert.ToDouble(y_47);
    }

    static long indexOf(string s_48, string ch_49) {
        long i_50 = 0;
        while ((i_50 < s_48.Length)) {
            if ((s_48.Substring((int)(i_50), (int)((i_50 + 1) - i_50)) == ch_49)) {
                return i_50;
            }
            i_50 = (i_50 + 1);
        };
        return (0 - 1);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
