// Generated by Mochi 0.10.55 on 2025-08-03 10:56 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static long ord(string ch_0) {
        if ((ch_0 == "5")) {
            return 53;
        };
        if ((ch_0 == "T")) {
            return 84;
        };
        if ((ch_0 == " ")) {
            return 32;
        };
        if ((ch_0 == "é")) {
            return 233;
        };
        if ((ch_0 == "🐺")) {
            return 128058;
        };
        return 0;
    }

    public static string hex(long n_1) {
        string digits_2 = "0123456789abcdef";
        if ((n_1 == 0)) {
            return "0x0";
        };
        long m_3 = n_1;
        string out_4 = "";
        while ((m_3 > 0)) {
            long d_5 = (m_3 % 16);
            out_4 = (digits_2.Substring((int)(d_5), (int)((d_5 + 1) - d_5)) + out_4);
            m_3 = (m_3 / 16);
        };
        return ("0x" + out_4);
    }

    public static string quote(string s_6) {
        return (("'" + s_6) + "'");
    }

    public static void analyze(string s_7) {
        var le_8 = s_7.Length;
        Console.WriteLine(Program._fmtTop((((("Analyzing " + Program.quote(s_7)) + " which has a length of ") + _fmt(le_8)) + ":")));
        if ((Convert.ToDouble(le_8) > Convert.ToDouble(1))) {
            long i_9 = 1;
            while ((Convert.ToDouble(i_9) < Convert.ToDouble(le_8))) {
                string cur_10 = s_7.Substring((int)(i_9), (int)((i_9 + 1) - i_9));
                string prev_11 = s_7.Substring((int)((i_9 - 1)), (int)(i_9 - (i_9 - 1)));
                if ((cur_10 != prev_11)) {
                    Console.WriteLine(Program._fmtTop("  Not all characters in the string are the same."));
                    Console.WriteLine(Program._fmtTop((((((("  " + Program.quote(cur_10)) + " (") + Program.hex(Program.ord(cur_10))) + ") is different at position ") + _fmt((i_9 + 1))) + ".")));
                    Console.WriteLine(Program._fmtTop(""));
                    return;
                }
                i_9 = (i_9 + 1);
            }
        };
        Console.WriteLine(Program._fmtTop("  All characters in the string are the same."));
        Console.WriteLine(Program._fmtTop(""));
    }

    public static void main() {
        string[] strings_12 = new string[]{"", "   ", "2", "333", ".55", "tttTTT", "4444 444k", "pépé", "🐶🐶🐺🐶", "🎄🎄🎄🎄"};
        long i_13 = 0;
        while ((Convert.ToDouble(i_13) < Convert.ToDouble(strings_12.Length))) {
            Program.analyze(strings_12[(int)(i_13)]);
            i_13 = (i_13 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
