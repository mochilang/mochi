// Generated by Mochi 0.10.55 on 2025-08-03 10:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static void main() {
        long row_0 = 3;
        long col_1 = 4;
        long[][] a_2 = new long[][]{};
        long i_3 = 0;
        while ((i_3 < row_0)) {
            long[] rowArr_4 = new long[]{};
            long j_5 = 0;
            while ((j_5 < col_1)) {
                rowArr_4 = (Enumerable.ToArray(Enumerable.Append(rowArr_4, 0)));
                j_5 = (j_5 + 1);
            }
            a_2 = (Enumerable.ToArray(Enumerable.Append(a_2, rowArr_4)));
            i_3 = (i_3 + 1);
        };
        Console.WriteLine(_fmtTop(("a[0][0] = " + _fmt(a_2[(int)(0)][(int)(0)]))));
        a_2[(int)(Convert.ToInt64((row_0 - 1)))][Convert.ToInt64((col_1 - 1))] = 7;
        Console.WriteLine(_fmtTop(((((("a[" + _fmt((row_0 - 1))) + "][") + _fmt((col_1 - 1))) + "] = ") + _fmt(a_2[(int)(Convert.ToInt64((row_0 - 1)))][(int)(Convert.ToInt64((col_1 - 1)))]))));
        a_2 = null;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
