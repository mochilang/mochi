// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool damm(string s_0) {
        long[][] tbl_1 = new long[][]{new long[]{0, 3, 1, 7, 5, 9, 8, 6, 4, 2}, new long[]{7, 0, 9, 2, 1, 5, 4, 8, 6, 3}, new long[]{4, 2, 0, 6, 8, 7, 1, 3, 5, 9}, new long[]{1, 7, 5, 0, 9, 8, 3, 4, 2, 6}, new long[]{6, 1, 2, 3, 0, 4, 5, 9, 7, 8}, new long[]{3, 6, 7, 4, 2, 0, 9, 5, 8, 1}, new long[]{5, 8, 6, 9, 7, 2, 0, 1, 3, 4}, new long[]{8, 9, 4, 5, 3, 6, 2, 0, 1, 7}, new long[]{9, 4, 3, 8, 6, 1, 7, 2, 0, 5}, new long[]{2, 5, 8, 1, 4, 3, 6, 7, 9, 0}};
        Dictionary<string, long> digits_2 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        long interim_3 = 0;
        long i_4 = 0;
        while ((i_4 < s_0.Length)) {
            var digit_5 = Convert.ToInt64((digits_2.ContainsKey(s_0.Substring((int)(i_4), (int)((i_4 + 1) - i_4))) ? digits_2[s_0.Substring((int)(i_4), (int)((i_4 + 1) - i_4))] : 0));
            long[] row_6 = tbl_1[(int)(interim_3)];
            interim_3 = row_6[(int)(digit_5)];
            i_4 = (i_4 + 1);
        };
        return (interim_3 == 0);
    }

    static string padLeft(string s_7, long width_8) {
        while ((s_7.Length < width_8)) {
            s_7 = (" " + s_7);
        };
        return s_7;
    }

    static void main() {
        foreach (var s_9 in new string[]{"5724", "5727", "112946", "112949"}) {
            Console.WriteLine(_fmtTop(((padLeft(s_9, 6) + "  ") + (damm(s_9)).ToString())));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
