// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string chr(long n_0) {
        string upper_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_2 = "abcdefghijklmnopqrstuvwxyz";
        if (((n_0 >= 65) && (n_0 < 91))) {
            return upper_1.Substring((int)((n_0 - 65)), (int)((n_0 - 64) - (n_0 - 65)));
        };
        if (((n_0 >= 97) && (n_0 < 123))) {
            return lower_2.Substring((int)((n_0 - 97)), (int)((n_0 - 96) - (n_0 - 97)));
        };
        if ((n_0 == 32)) {
            return " ";
        };
        if ((n_0 == 33)) {
            return "!";
        };
        if ((n_0 == 44)) {
            return ",";
        };
        if ((n_0 == 13)) {
            return "";
        };
        if ((n_0 == 10)) {
            return "\n";
        };
        return "?";
    }

    static string bf(long dLen_3, string code_4) {
        long[] ds_5 = new long[]{};
        for (var i_6 = 0; i_6 < dLen_3; i_6++) {
            ds_5 = (Enumerable.ToArray(Enumerable.Append(ds_5, 0)));
        };
        long dp_7 = 0;
        long ip_8 = 0;
        string out_9 = "";
        while ((ip_8 < code_4.Length)) {
            string ch_10 = code_4.Substring((int)(ip_8), (int)((ip_8 + 1) - ip_8));
            if ((ch_10 == ">")) {
                dp_7 = (dp_7 + 1);
            } else {
                if ((ch_10 == "<")) {
                    dp_7 = (dp_7 - 1);
                } else {
                    if ((ch_10 == "+")) {
                        ds_5[dp_7] = (ds_5[(int)(dp_7)] + 1);
                    } else {
                        if ((ch_10 == "-")) {
                            ds_5[dp_7] = (ds_5[(int)(dp_7)] - 1);
                        } else {
                            if ((ch_10 == ".")) {
                                out_9 = (out_9 + chr(ds_5[(int)(dp_7)]));
                            } else {
                                if ((ch_10 == ",")) {
                                } else {
                                    if ((ch_10 == "[")) {
                                        if ((ds_5[(int)(dp_7)] == 0)) {
                                            long nc_11 = 1;
                                            while ((nc_11 > 0)) {
                                                ip_8 = (ip_8 + 1);
                                                string cc_12 = code_4.Substring((int)(ip_8), (int)((ip_8 + 1) - ip_8));
                                                if ((cc_12 == "[")) {
                                                    nc_11 = (nc_11 + 1);
                                                } else {
                                                    if ((cc_12 == "]")) {
                                                        nc_11 = (nc_11 - 1);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if ((ch_10 == "]")) {
                                            if ((ds_5[(int)(dp_7)] != 0)) {
                                                long nc_13 = 1;
                                                while ((nc_13 > 0)) {
                                                    ip_8 = (ip_8 - 1);
                                                    string cc_14 = code_4.Substring((int)(ip_8), (int)((ip_8 + 1) - ip_8));
                                                    if ((cc_14 == "]")) {
                                                        nc_13 = (nc_13 + 1);
                                                    } else {
                                                        if ((cc_14 == "[")) {
                                                            nc_13 = (nc_13 - 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            ip_8 = (ip_8 + 1);
        };
        return out_9;
    }

    static void main() {
        string prog_15 = ((("++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++\n" + "++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>\n") + ">+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.\n") + "<+++++++.--------.<<<<<+.<+++.---.");
        string out_16 = bf(10, prog_15);
        Console.WriteLine(_fmtTop(out_16));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
