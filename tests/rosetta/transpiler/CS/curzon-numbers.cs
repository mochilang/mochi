// Generated by Mochi 0.10.47 on 2025-07-28 05:11 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string padLeft(long n_0, long width_1) {
        string s_2 = (n_0).ToString();
        while ((s_2.Length < width_1)) {
            s_2 = (" " + s_2);
        };
        return s_2;
    }

    static long modPow(long base_3, long exp_4, long mod_5) {
        long result_6 = (1 % mod_5);
        long b_7 = (base_3 % mod_5);
        long e_8 = exp_4;
        while ((e_8 > 0)) {
            if (((e_8 % 2) == 1)) {
                result_6 = ((result_6 * b_7) % mod_5);
            }
            b_7 = ((b_7 * b_7) % mod_5);
            e_8 = (e_8 / 2);
        };
        return result_6;
    }

    static void main() {
        long k_9 = 2;
        while ((k_9 <= 10)) {
            Console.WriteLine(_fmtTop((("The first 50 Curzon numbers using a base of " + (k_9).ToString()) + " :")));
            long count_10 = 0;
            long n_11 = 1;
            long[] curzon50_12 = new long[]{};
            while (true) {
                long d_13 = ((k_9 * n_11) + 1);
                if ((((modPow(k_9, n_11, d_13) + 1) % d_13) == 0)) {
                    if ((count_10 < 50)) {
                        curzon50_12 = (Enumerable.ToArray(Enumerable.Append(curzon50_12, n_11)));
                    }
                    count_10 = (count_10 + 1);
                    if ((count_10 == 50)) {
                        long idx_14 = 0;
                        while ((idx_14 < curzon50_12.Length)) {
                            string line_15 = "";
                            long j_16 = 0;
                            while ((j_16 < 10)) {
                                line_15 = ((line_15 + padLeft(curzon50_12[(int)(idx_14)], 4)) + " ");
                                idx_14 = (idx_14 + 1);
                                j_16 = (j_16 + 1);
                            }
                            Console.WriteLine(_fmtTop(line_15.Substring((int)(0), (int)((((dynamic)line_15.Length) - ((dynamic)1)) - 0))));
                        }
                    }
                    if ((count_10 == 1000)) {
                        Console.WriteLine(_fmtTop(("\nOne thousandth: " + (n_11).ToString())));
                        break;
                    }
                }
                n_11 = (n_11 + 1);
            }
            Console.WriteLine(_fmtTop(""));
            k_9 = (k_9 + 2);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
