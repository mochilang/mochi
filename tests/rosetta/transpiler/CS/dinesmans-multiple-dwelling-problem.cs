// Generated by Mochi 0.10.55 on 2025-08-03 10:56 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static long absInt(long n_0) {
        if ((n_0 < 0)) {
            return -n_0;
        };
        return n_0;
    }

    public static void main() {
        long b_1 = 1;
        while ((b_1 <= 5)) {
            if ((b_1 != 5)) {
                long c_2 = 1;
                while ((c_2 <= 5)) {
                    if (((c_2 != 1) && (c_2 != b_1))) {
                        long f_3 = 1;
                        while ((f_3 <= 5)) {
                            if ((((((f_3 != 1) && (f_3 != 5)) && (f_3 != b_1)) && (f_3 != c_2)) && (Program.absInt((f_3 - c_2)) > 1))) {
                                long m_4 = 1;
                                while ((m_4 <= 5)) {
                                    if (((((m_4 != b_1) && (m_4 != c_2)) && (m_4 != f_3)) && (m_4 > c_2))) {
                                        long s_5 = 1;
                                        while ((s_5 <= 5)) {
                                            if ((((((s_5 != b_1) && (s_5 != c_2)) && (s_5 != f_3)) && (s_5 != m_4)) && (Program.absInt((s_5 - f_3)) > 1))) {
                                                Console.WriteLine(Program._fmtTop((((((((((("Baker in " + _fmt(b_1)) + ", Cooper in ") + _fmt(c_2)) + ", Fletcher in ") + _fmt(f_3)) + ", Miller in ") + _fmt(m_4)) + ", Smith in ") + _fmt(s_5)) + ".")));
                                                return;
                                            }
                                            s_5 = (s_5 + 1);
                                        }
                                    }
                                    m_4 = (m_4 + 1);
                                }
                            }
                            f_3 = (f_3 + 1);
                        }
                    }
                    c_2 = (c_2 + 1);
                }
            }
            b_1 = (b_1 + 1);
        };
        Console.WriteLine(Program._fmtTop("No solution found."));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
