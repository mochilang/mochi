// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        long i_1 = 2;
        while (((i_1 * i_1) <= n_0)) {
            if (((n_0 % i_1) == 0)) {
                return false;
            }
            i_1 = (i_1 + 1);
        };
        return true;
    }

    static long search(long base_2, long prefix_3, long depth_4, long limit_5, long best_6) {
        long b_7 = best_6;
        long d_8 = 1;
        while ((d_8 < base_2)) {
            long val_9 = ((prefix_3 * base_2) + d_8);
            if (isPrime(val_9)) {
                if ((val_9 > b_7)) {
                    b_7 = val_9;
                }
                if (((depth_4 + 1) < limit_5)) {
                    b_7 = search(base_2, val_9, (depth_4 + 1), limit_5, b_7);
                }
            }
            d_8 = (d_8 + 1);
        };
        return b_7;
    }

    static long largest(long base_10) {
        return search(base_10, 0, 0, 6, 0);
    }

    static void main() {
        long b_11 = 3;
        while ((b_11 <= 17)) {
            Console.WriteLine(_fmtTop((((b_11).ToString() + ": ") + (largest(b_11)).ToString())));
            b_11 = (b_11 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
