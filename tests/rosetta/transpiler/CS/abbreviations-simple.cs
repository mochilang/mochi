// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] fields(string s_0) {
        string[] words_1 = new string[]{};
        string cur_2 = "";
        long i_3 = 0;
        while ((i_3 < s_0.Length)) {
            string ch_4 = s_0.Substring((int)(i_3), (int)((i_3 + 1) - i_3));
            if ((((ch_4 == " ") || (ch_4 == "\n")) || (ch_4 == "\t"))) {
                if ((cur_2.Length > 0)) {
                    words_1 = (Enumerable.ToArray(Enumerable.Append(words_1, cur_2)));
                    cur_2 = "";
                }
            } else {
                cur_2 = (cur_2 + ch_4);
            }
            i_3 = (i_3 + 1);
        };
        if ((cur_2.Length > 0)) {
            words_1 = (Enumerable.ToArray(Enumerable.Append(words_1, cur_2)));
        };
        return words_1;
    }

    static string padRight(string s_5, long width_6) {
        string out_7 = s_5;
        long i_8 = s_5.Length;
        while ((i_8 < width_6)) {
            out_7 = (out_7 + " ");
            i_8 = (i_8 + 1);
        };
        return out_7;
    }

    static string join(string[] xs_9, string sep_10) {
        string res_11 = "";
        long i_12 = 0;
        while ((i_12 < xs_9.Length)) {
            if ((i_12 > 0)) {
                res_11 = (res_11 + sep_10);
            }
            res_11 = (res_11 + xs_9[(int)(i_12)]);
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    static long parseIntStr(string str_13) {
        long i_14 = 0;
        bool neg_15 = false;
        if (((str_13.Length > 0) && (str_13.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_15 = true;
            i_14 = 1;
        };
        long n_16 = 0;
        Dictionary<string, long> digits_17 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_14 < str_13.Length)) {
            n_16 = ((n_16 * 10) + (digits_17.ContainsKey(str_13.Substring((int)(i_14), (int)((i_14 + 1) - i_14))) ? digits_17[str_13.Substring((int)(i_14), (int)((i_14 + 1) - i_14))] : 0));
            i_14 = (i_14 + 1);
        };
        if (neg_15) {
            n_16 = -n_16;
        };
        return n_16;
    }

    static bool isDigits(string s_18) {
        if ((s_18.Length == 0)) {
            return false;
        };
        long i_19 = 0;
        while ((i_19 < s_18.Length)) {
            string ch_20 = s_18.Substring((int)(i_19), (int)((i_19 + 1) - i_19));
            if (((string.Compare(ch_20, "0") < 0) || (string.Compare(ch_20, "9") > 0))) {
                return false;
            }
            i_19 = (i_19 + 1);
        };
        return true;
    }

    static Dictionary<string, object> readTable(string table_21) {
        string[] toks_22 = fields(table_21);
        string[] cmds_23 = new string[]{};
        long[] mins_24 = new long[]{};
        long i_25 = 0;
        while ((i_25 < toks_22.Length)) {
            string cmd_26 = toks_22[(int)(i_25)];
            long minlen_27 = cmd_26.Length;
            i_25 = (i_25 + 1);
            if (((i_25 < toks_22.Length) && isDigits(toks_22[(int)(i_25)]))) {
                long num_28 = parseIntStr(toks_22[(int)(i_25)]);
                if (((num_28 >= 1) && (num_28 < cmd_26.Length))) {
                    minlen_27 = num_28;
                    i_25 = (i_25 + 1);
                }
            }
            cmds_23 = (Enumerable.ToArray(Enumerable.Append(cmds_23, cmd_26)));
            mins_24 = (Enumerable.ToArray(Enumerable.Append(mins_24, minlen_27)));
        };
        return new Dictionary<string, object>{{"commands", cmds_23}, {"mins", mins_24}};
    }

    static string[] validate(string[] commands_29, long[] mins_30, string[] words_31) {
        string[] results_32 = new string[]{};
        long wi_33 = 0;
        while ((wi_33 < words_31.Length)) {
            string w_34 = words_31[(int)(wi_33)];
            bool found_35 = false;
            var wlen_36 = w_34.Length;
            long ci_37 = 0;
            while ((ci_37 < commands_29.Length)) {
                string cmd_38 = commands_29[(int)(ci_37)];
                if ((((mins_30[(int)(ci_37)] != 0) && (wlen_36 >= mins_30[(int)(ci_37)])) && (wlen_36 <= cmd_38.Length))) {
                    string c_39 = cmd_38.ToUpper();
                    string ww_40 = w_34.ToUpper();
                    if ((c_39.Substring((int)(0), (int)(wlen_36 - 0)) == ww_40)) {
                        results_32 = (Enumerable.ToArray(Enumerable.Append(results_32, c_39)));
                        found_35 = true;
                        break;
                    }
                }
                ci_37 = (ci_37 + 1);
            }
            if ((!found_35)) {
                results_32 = (Enumerable.ToArray(Enumerable.Append(results_32, "*error*")));
            }
            wi_33 = (wi_33 + 1);
        };
        return results_32;
    }

    static void main() {
        string table_41 = (((((((("" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ");
        string sentence_42 = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin";
        Dictionary<string, object> tbl_43 = readTable(table_41);
        string[] commands_44 = (((dynamic)tbl_43)["commands"] as string[]) ?? new string[]{};
        long[] mins_45 = (((dynamic)tbl_43)["mins"] as long[]) ?? new long[]{};
        string[] words_46 = fields(sentence_42);
        string[] results_47 = validate(commands_44, mins_45, words_46);
        string out1_48 = "user words:";
        long k_49 = 0;
        while ((k_49 < words_46.Length)) {
            out1_48 = (out1_48 + " ");
            if ((k_49 < (((dynamic)(words_46.Length)) - ((dynamic)(1))))) {
                out1_48 = (out1_48 + padRight(words_46[(int)(k_49)], results_47[(int)(k_49)].Length));
            } else {
                out1_48 = (out1_48 + words_46[(int)(k_49)]);
            }
            k_49 = (k_49 + 1);
        };
        Console.WriteLine(_fmtTop(out1_48));
        Console.WriteLine(_fmtTop(("full words: " + join(results_47, " "))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
