// Generated by Mochi 0.10.39 on 2025-07-24 08:16 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] fields(string s) {
        string[] words = new string[]{};
        string cur = "";
        int i = 0;
        while ((i < s.Length)) {
            string ch = s.Substring(i, ((i + 1) - i));
            if ((((ch == " ") || (ch == "\n")) || (ch == "\t"))) {
                if ((cur.Length > 0)) {
                    words = (words.Append(cur).ToArray());
                    cur = "";
                }
            } else {
                cur = (cur + ch);
            }
            i = (i + 1);
        };
        if ((cur.Length > 0)) {
            words = (words.Append(cur).ToArray());
        };
        return words;
    }

    static string padRight(string s, int width) {
        string _out = s;
        var i = s.Length;
        while ((i < width)) {
            _out = (_out + " ");
            i = (i + 1);
        };
        return _out;
    }

    static string join(string[] xs, string sep) {
        string res = "";
        int i = 0;
        while ((i < xs.Length)) {
            if ((i > 0)) {
                res = (res + sep);
            }
            res = (res + xs[i]);
            i = (i + 1);
        };
        return res;
    }

    static int parseIntStr(string str) {
        int i = 0;
        bool neg = false;
        if (((str.Length > 0) && (str.Substring(0, (1 - 0)) == "-"))) {
            neg = true;
            i = 1;
        };
        int n = 0;
        Dictionary<string, int> digits = new Dictionary<string, int>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i < str.Length)) {
            n = ((n * 10) + digits[str.Substring(i, ((i + 1) - i))]);
            i = (i + 1);
        };
        if (neg) {
            n = -n;
        };
        return n;
    }

    static bool isDigits(string s) {
        if ((s.Length == 0)) {
            return false;
        };
        int i = 0;
        while ((i < s.Length)) {
            string ch = s.Substring(i, ((i + 1) - i));
            if (((string.Compare(ch, "0") < 0) || (string.Compare(ch, "9") > 0))) {
                return false;
            }
            i = (i + 1);
        };
        return true;
    }

    static Dictionary<string, object> readTable(string table) {
        string[] toks = fields(table);
        string[] cmds = new string[]{};
        int[] mins = new int[]{};
        int i = 0;
        while ((i < toks.Length)) {
            var cmd = toks[i];
            var minlen = cmd.Length;
            i = (i + 1);
            if (((i < toks.Length) && isDigits(toks[i]))) {
                int num = parseIntStr(toks[i]);
                if (((num >= 1) && (num < cmd.Length))) {
                    minlen = num;
                    i = (i + 1);
                }
            }
            cmds = (cmds.Append(cmd).ToArray());
            mins = (mins.Append(minlen).ToArray());
        };
        return new Dictionary<string, object>{{"commands", cmds}, {"mins", mins}};
    }

    static string[] validate(string[] commands, int[] mins, string[] words) {
        string[] results = new string[]{};
        int wi = 0;
        while ((wi < words.Length)) {
            string w = words[wi];
            bool found = false;
            var wlen = w.Length;
            int ci = 0;
            while ((ci < commands.Length)) {
                string cmd = commands[ci];
                if ((((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= cmd.Length))) {
                    var c = cmd.ToUpper();
                    var ww = w.ToUpper();
                    if ((c.Substring(0, (wlen - 0)) == ww)) {
                        results = (results.Append(c).ToArray());
                        found = true;
                        break;
                    }
                }
                ci = (ci + 1);
            }
            if ((!found)) {
                results = (results.Append("*error*").ToArray());
            }
            wi = (wi + 1);
        };
        return results;
    }

    static void main() {
        string table = (((((((("" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ");
        string sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin";
        Dictionary<string, object> tbl = readTable(table);
        string[] commands = (string[])((dynamic)tbl)["commands"];
        int[] mins = (int[])((dynamic)tbl)["mins"];
        string[] words = fields(sentence);
        string[] results = validate(commands, mins, words);
        string out1 = "user words:";
        int k = 0;
        while ((k < words.Length)) {
            out1 = (out1 + " ");
            if ((k < (words.Length - 1))) {
                out1 = (out1 + padRight(words[k], results[k].Length));
            } else {
                out1 = (out1 + words[k]);
            }
            k = (k + 1);
        };
        Console.WriteLine(_fmtTop(out1));
        Console.WriteLine(_fmtTop(("full words: " + join(results, " "))));
    }

    static void Main() {
        main();
    }
}
