// Generated by Mochi 0.10.52 on 2025-07-31 08:37 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long width_0 = 60;
    static long height_1 = Convert.ToInt64((Convert.ToDouble(width_0) * 0.86602540378));
    static long iterations_2 = 5000;
    static string[][] grid_3 = new string[][]{};
    static long y_4 = 0;
    static long[] randInt(long s_7, long n_8) {
        long next_9 = (((s_7 * 1664525) + 1013904223) % 2147483647);
        return new long[]{next_9, (next_9 % n_8)};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((y_4 < height_1)) {
                string[] line_5 = new string[]{};
                long x_6 = 0;
                while ((x_6 < width_0)) {
                    line_5 = (Enumerable.ToArray(Enumerable.Append(line_5, " ")));
                    x_6 = (x_6 + 1);
                }
                grid_3 = (Enumerable.ToArray(Enumerable.Append(grid_3, line_5)));
                y_4 = (y_4 + 1);
            }
            long seed_10 = 1;
            long[][] vertices_11 = new long[][]{new long[]{0, (height_1 - 1)}, new long[]{(width_0 - 1), (height_1 - 1)}, new long[]{Convert.ToInt64((width_0 / 2)), 0}};
            long px_12 = Convert.ToInt64((width_0 / 2));
            long py_13 = Convert.ToInt64((height_1 / 2));
            long i_14 = 0;
            while ((i_14 < iterations_2)) {
                long[] r_15 = randInt(seed_10, 3);
                seed_10 = r_15[(int)(0)];
                long idx_16 = Convert.ToInt64(r_15[(int)(1)]);
                long[] v_17 = vertices_11[(int)(idx_16)];
                px_12 = Convert.ToInt64(((px_12 + v_17[(int)(0)]) / 2));
                py_13 = Convert.ToInt64(((py_13 + v_17[(int)(1)]) / 2));
                if (((((px_12 >= 0) && (px_12 < width_0)) && (py_13 >= 0)) && (py_13 < height_1))) {
                    grid_3[(int)(py_13)][px_12] = "*";
                }
                i_14 = (i_14 + 1);
            }
            y_4 = 0;
            while ((y_4 < height_1)) {
                string line_18 = "";
                long x_19 = 0;
                while ((x_19 < width_0)) {
                    line_18 = (line_18 + grid_3[(int)(y_4)][(int)(x_19)]);
                    x_19 = (x_19 + 1);
                }
                Console.WriteLine(_fmtTop(line_18));
                y_4 = (y_4 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
