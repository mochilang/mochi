// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] gregorianStr_0 = new string[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    static long[] gregorian_1 = new long[]{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    static string[] republicanStr_2 = new string[]{"Vendemiaire", "Brumaire", "Frimaire", "Nivose", "Pluviose", "Ventose", "Germinal", "Floreal", "Prairial", "Messidor", "Thermidor", "Fructidor"};
    static string[] sansculotidesStr_3 = new string[]{"Fete de la vertu", "Fete du genie", "Fete du travail", "Fete de l'opinion", "Fete des recompenses", "Fete de la Revolution"};
    static long[] rep_37 = dayToRep(greToDay(20, 5, 1795));
    static bool greLeap(long year_4) {
        var a_5 = Convert.ToInt64((year_4 % 4));
        var b_6 = Convert.ToInt64((year_4 % 100));
        var c_7 = Convert.ToInt64((year_4 % 400));
        return ((a_5 == 0) && ((b_6 != 0) || (c_7 == 0)));
    }

    static bool repLeap(long year_8) {
        var a_9 = Convert.ToInt64(((year_8 + 1) % 4));
        var b_10 = Convert.ToInt64(((year_8 + 1) % 100));
        var c_11 = Convert.ToInt64(((year_8 + 1) % 400));
        return ((a_9 == 0) && ((b_10 != 0) || (c_11 == 0)));
    }

    static long greToDay(long d_12, long m_13, long y_14) {
        long yy_15 = y_14;
        long mm_16 = m_13;
        if ((mm_16 < 3)) {
            yy_15 = (yy_15 - 1);
            mm_16 = (mm_16 + 12);
        };
        return (((((((yy_15 * 36525) / 100) - (yy_15 / 100)) + (yy_15 / 400)) + ((306 * (mm_16 + 1)) / 10)) + d_12) - 654842);
    }

    static long repToDay(long d_17, long m_18, long y_19) {
        long dd_20 = d_17;
        long mm_21 = m_18;
        if ((mm_21 == 13)) {
            mm_21 = (mm_21 - 1);
            dd_20 = (dd_20 + 30);
        };
        if (repLeap(y_19)) {
            dd_20 = (dd_20 - 1);
        };
        return (((((((365 * y_19) + ((y_19 + 1) / 4)) - ((y_19 + 1) / 100)) + ((y_19 + 1) / 400)) + (30 * mm_21)) + dd_20) - 395);
    }

    static long[] dayToGre(long day_22) {
        long y_23 = ((day_22 * 100) / 36525);
        long d_24 = ((day_22 - ((y_23 * 36525) / 100)) + 21);
        y_23 = (y_23 + 1792);
        d_24 = (((d_24 + (y_23 / 100)) - (y_23 / 400)) - 13);
        long m_25 = 8;
        while ((d_24 > gregorian_1[(int)(m_25)])) {
            d_24 = (d_24 - gregorian_1[(int)(m_25)]);
            m_25 = (m_25 + 1);
            if ((m_25 == 12)) {
                m_25 = 0;
                y_23 = (y_23 + 1);
                if (greLeap(y_23)) {
                    gregorian_1[1] = 29;
                } else {
                    gregorian_1[1] = 28;
                }
            }
        };
        m_25 = (m_25 + 1);
        return new long[]{d_24, m_25, y_23};
    }

    static long[] dayToRep(long day_26) {
        long y_27 = (((day_26 - 1) * 100) / 36525);
        if (repLeap(y_27)) {
            y_27 = (y_27 - 1);
        };
        long d_28 = ((((day_26 - (((y_27 + 1) * 36525) / 100)) + 365) + ((y_27 + 1) / 100)) - ((y_27 + 1) / 400));
        y_27 = (y_27 + 1);
        long m_29 = 1;
        long sc_30 = 5;
        if (repLeap(y_27)) {
            sc_30 = 6;
        };
        while ((d_28 > 30)) {
            d_28 = (d_28 - 30);
            m_29 = (m_29 + 1);
            if ((m_29 == 13)) {
                if ((d_28 > sc_30)) {
                    d_28 = (d_28 - sc_30);
                    m_29 = 1;
                    y_27 = (y_27 + 1);
                    sc_30 = 5;
                    if (repLeap(y_27)) {
                        sc_30 = 6;
                    }
                }
            }
        };
        return new long[]{d_28, m_29, y_27};
    }

    static string formatRep(long d_31, long m_32, long y_33) {
        if ((m_32 == 13)) {
            return ((sansculotidesStr_3[(int)((d_31 - 1))] + " ") + (y_33).ToString());
        };
        return (((((d_31).ToString() + " ") + republicanStr_2[(int)((m_32 - 1))]) + " ") + (y_33).ToString());
    }

    static string formatGre(long d_34, long m_35, long y_36) {
        return (((((d_34).ToString() + " ") + gregorianStr_0[(int)((m_35 - 1))]) + " ") + (y_36).ToString());
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(formatRep(rep_37[(int)(0)], rep_37[(int)(1)], rep_37[(int)(2)])));
            long[] gre_38 = dayToGre(repToDay(1, 9, 3));
            Console.WriteLine(_fmtTop(formatGre(gre_38[(int)(0)], gre_38[(int)(1)], gre_38[(int)(2)])));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
