// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long nextPrime(long[] primes_0, long start_1) {
        long n_2 = start_1;
        while (true) {
            bool isP_3 = true;
            long i_4 = 0;
            while ((i_4 < primes_0.Length)) {
                long p_5 = primes_0[(int)(i_4)];
                if (((p_5 * p_5) > n_2)) {
                    break;
                }
                if (((n_2 % p_5) == 0)) {
                    isP_3 = false;
                    break;
                }
                i_4 = (i_4 + 1);
            }
            if (isP_3) {
                return n_2;
            }
            n_2 = (n_2 + 2);
        };
    }

    static void main() {
        long[] primes_6 = new long[]{2};
        long cand_7 = 3;
        while ((primes_6.Length < 10000)) {
            cand_7 = nextPrime(primes_6, cand_7);
            primes_6 = (Enumerable.ToArray(Enumerable.Append(primes_6, cand_7)));
            cand_7 = (cand_7 + 2);
        };
        string line_8 = "First twenty:";
        long i_9 = 0;
        while ((i_9 < 20)) {
            line_8 = ((line_8 + " ") + (primes_6[(int)(i_9)]).ToString());
            i_9 = (i_9 + 1);
        };
        Console.WriteLine(_fmtTop(line_8));
        long idx_10 = 0;
        while ((primes_6[(int)(idx_10)] <= 100)) {
            idx_10 = (idx_10 + 1);
        };
        line_8 = ("Between 100 and 150: " + (primes_6[(int)(idx_10)]).ToString());
        idx_10 = (idx_10 + 1);
        while ((primes_6[(int)(idx_10)] < 150)) {
            line_8 = ((line_8 + " ") + (primes_6[(int)(idx_10)]).ToString());
            idx_10 = (idx_10 + 1);
        };
        Console.WriteLine(_fmtTop(line_8));
        while ((primes_6[(int)(idx_10)] <= 7700)) {
            idx_10 = (idx_10 + 1);
        };
        long count_11 = 0;
        while ((primes_6[(int)(idx_10)] < 8000)) {
            count_11 = (count_11 + 1);
            idx_10 = (idx_10 + 1);
        };
        Console.WriteLine(_fmtTop(("Number beween 7,700 and 8,000: " + (count_11).ToString())));
        Console.WriteLine(_fmtTop(("10,000th prime: " + (primes_6[(int)(9999)]).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
