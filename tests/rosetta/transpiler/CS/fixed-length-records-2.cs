// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] lines_17 = new string[]{"alpha", "beta", "gamma"};
    static string[] blocks_18 = text2block(lines_17);
    static string[] outLines_19 = block2text(blocks_18);
    static string repeat(string s_0, long n_1) {
        string out_2 = "";
        long i_3 = 0;
        while ((i_3 < n_1)) {
            out_2 = (out_2 + s_0);
            i_3 = (i_3 + 1);
        };
        return out_2;
    }

    static string trimRightSpace(string s_4) {
        long i_5 = (((dynamic)s_4.Length) - ((dynamic)1));
        while (((i_5 >= 0) && (s_4.Substring((int)(i_5), (int)((i_5 + 1) - i_5)) == " "))) {
            i_5 = (i_5 - 1);
        };
        return s_4.Substring((int)(0), (int)((i_5 + 1) - 0));
    }

    static string[] block2text(string[] block_6) {
        string[] out_7 = new string[]{};
        foreach (var b_8 in block_6) {
            out_7 = (Enumerable.ToArray(Enumerable.Append(out_7, trimRightSpace(b_8))));
        };
        return out_7;
    }

    static string[] text2block(string[] lines_9) {
        string[] out_10 = new string[]{};
        long count_11 = 0;
        foreach (var line_12 in lines_9) {
            string s_13 = line_12;
            var le_14 = s_13.Length;
            if ((le_14 > 64)) {
                s_13 = s_13.Substring((int)(0), (int)(64 - 0));
            } else {
                if ((le_14 < 64)) {
                    s_13 = (s_13 + repeat(" ", (((dynamic)64) - ((dynamic)le_14))));
                }
            }
            out_10 = (Enumerable.ToArray(Enumerable.Append(out_10, s_13)));
            count_11 = (count_11 + 1);
        };
        if (((count_11 % 16) != 0)) {
            long pad_15 = (16 - (count_11 % 16));
            long i_16 = 0;
            while ((i_16 < pad_15)) {
                out_10 = (Enumerable.ToArray(Enumerable.Append(out_10, repeat(" ", 64))));
                i_16 = (i_16 + 1);
            }
        };
        return out_10;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (var l_20 in outLines_19) {
                if ((l_20 != "")) {
                    Console.WriteLine(_fmtTop(l_20));
                }
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
