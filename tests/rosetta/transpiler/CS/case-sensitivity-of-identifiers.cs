// Generated by Mochi 0.10.57 on 2025-08-04 21:00 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static void main() {
        string pkg_dog_0 = "Salt";
        string Dog_1 = "Pepper";
        string pkg_DOG_2 = "Mustard";
        Func<string, string, string, Dictionary<string, bool>> packageSees = null;
        packageSees = (string d1_3, string d2_4, string d3_5) => {Console.WriteLine(Program._fmtTop(((((("Package sees: " + d1_3) + " ") + d2_4) + " ") + d3_5))); return new Dictionary<string, bool>{{"pkg_dog", true}, {"Dog", true}, {"pkg_DOG", true}};};
        Dictionary<string, bool> d_6 = packageSees(pkg_dog_0, Dog_1, pkg_DOG_2);
        Console.WriteLine(Program._fmtTop((("There are " + _fmt(d_6.Count)) + " dogs.\n")));
        string dog_7 = "Benjamin";
        d_6 = packageSees(pkg_dog_0, Dog_1, pkg_DOG_2);
        Console.WriteLine(Program._fmtTop(((((("Main sees:   " + dog_7) + " ") + Dog_1) + " ") + pkg_DOG_2)));
        d_6["dog"] = true;
        d_6["Dog"] = true;
        d_6["pkg_DOG"] = true;
        Console.WriteLine(Program._fmtTop((("There are " + _fmt(d_6.Count)) + " dogs.\n")));
        Dog_1 = "Samba";
        d_6 = packageSees(pkg_dog_0, Dog_1, pkg_DOG_2);
        Console.WriteLine(Program._fmtTop(((((("Main sees:   " + dog_7) + " ") + Dog_1) + " ") + pkg_DOG_2)));
        d_6["dog"] = true;
        d_6["Dog"] = true;
        d_6["pkg_DOG"] = true;
        Console.WriteLine(Program._fmtTop((("There are " + _fmt(d_6.Count)) + " dogs.\n")));
        string DOG_8 = "Bernie";
        d_6 = packageSees(pkg_dog_0, Dog_1, pkg_DOG_2);
        Console.WriteLine(Program._fmtTop(((((("Main sees:   " + dog_7) + " ") + Dog_1) + " ") + DOG_8)));
        d_6["dog"] = true;
        d_6["Dog"] = true;
        d_6["pkg_DOG"] = true;
        d_6["DOG"] = true;
        Console.WriteLine(Program._fmtTop((("There are " + _fmt(d_6.Count)) + " dogs.")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
