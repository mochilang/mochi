// Generated by Mochi 0.10.55 on 2025-08-03 10:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double[][] m_16 = new double[][]{new double[]{2.0, -1.0, 5.0, 1.0}, new double[]{3.0, 2.0, 2.0, -6.0}, new double[]{1.0, 3.0, 3.0, -1.0}, new double[]{5.0, -2.0, -3.0, 3.0}};
    static double[] v_17 = new double[]{-3.0, -32.0, -47.0, 49.0};
    static double d_18 = det(m_16);
    static double[] x_19 = new double[]{};
    static long i_20 = 0;
    static double det(double[][] m_0) {
        var n_1 = m_0.Length;
        if ((n_1 == 1)) {
            return m_0[(int)(0)][(int)(0)];
        };
        double total_2 = 0.0;
        double sign_3 = 1.0;
        long c_4 = 0;
        while ((Convert.ToDouble(c_4) < Convert.ToDouble(n_1))) {
            double[][] sub_5 = new double[][]{};
            long r_6 = 1;
            while ((Convert.ToDouble(r_6) < Convert.ToDouble(n_1))) {
                double[] row_7 = new double[]{};
                long cc_8 = 0;
                while ((Convert.ToDouble(cc_8) < Convert.ToDouble(n_1))) {
                    if ((cc_8 != c_4)) {
                        row_7 = (Enumerable.ToArray(Enumerable.Append(row_7, m_0[(int)(r_6)][(int)(cc_8)])));
                    }
                    cc_8 = (cc_8 + 1);
                }
                sub_5 = (Enumerable.ToArray(Enumerable.Append(sub_5, row_7)));
                r_6 = (r_6 + 1);
            }
            total_2 = (total_2 + ((sign_3 * m_0[(int)(0)][(int)(c_4)]) * det(sub_5)));
            sign_3 = (sign_3 * -1.0);
            c_4 = (c_4 + 1);
        };
        return total_2;
    }

    static double[][] replaceCol(double[][] m_9, long col_10, double[] v_11) {
        double[][] res_12 = new double[][]{};
        long r_13 = 0;
        while ((Convert.ToDouble(r_13) < Convert.ToDouble(m_9.Length))) {
            double[] row_14 = new double[]{};
            long c_15 = 0;
            while ((Convert.ToDouble(c_15) < Convert.ToDouble(m_9[(int)(r_13)].Length))) {
                if ((c_15 == col_10)) {
                    row_14 = (Enumerable.ToArray(Enumerable.Append(row_14, v_11[(int)(r_13)])));
                } else {
                    row_14 = (Enumerable.ToArray(Enumerable.Append(row_14, m_9[(int)(r_13)][(int)(c_15)])));
                }
                c_15 = (c_15 + 1);
            }
            res_12 = (Enumerable.ToArray(Enumerable.Append(res_12, row_14)));
            r_13 = (r_13 + 1);
        };
        return res_12;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((Convert.ToDouble(i_20) < Convert.ToDouble(v_17.Length))) {
                double[][] mc_21 = replaceCol(m_16, i_20, v_17);
                x_19 = (Enumerable.ToArray(Enumerable.Append(x_19, (det(mc_21) / d_18))));
                i_20 = (i_20 + 1);
            }
            string s_22 = "[";
            long j_23 = 0;
            while ((Convert.ToDouble(j_23) < Convert.ToDouble(x_19.Length))) {
                s_22 = (s_22 + _fmt(x_19[(int)(j_23)]));
                if ((j_23 < (((dynamic)(x_19.Length)) - ((dynamic)(1))))) {
                    s_22 = (s_22 + " ");
                }
                j_23 = (j_23 + 1);
            }
            s_22 = (s_22 + "]");
            Console.WriteLine(_fmtTop(s_22));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
