// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Func<double, double> multiplier(double n1_0, double n2_1) {
        double n1n2_2 = (n1_0 * n2_1);
        return (double m) => (((dynamic)n1n2_2) * ((dynamic)m));
    }

    static void main() {
        double x_3 = 2;
        double xi_4 = 0.5;
        double y_5 = 4;
        double yi_6 = 0.25;
        double z_7 = (x_3 + y_5);
        double zi_8 = (1 / (x_3 + y_5));
        double[] numbers_9 = new double[]{x_3, y_5, z_7};
        double[] inverses_10 = new double[]{xi_4, yi_6, zi_8};
        Func<double, double>[] mfs_11 = new Func<double, double>[]{};
        long i_12 = 0;
        while ((i_12 < numbers_9.Length)) {
            mfs_11 = (Enumerable.ToArray(Enumerable.Append(mfs_11, multiplier(numbers_9[(int)(i_12)], inverses_10[(int)(i_12)]))));
            i_12 = (i_12 + 1);
        };
        foreach (var mf_13 in mfs_11) {
            Console.WriteLine(_fmtTop((mf_13(1)).ToString()));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
