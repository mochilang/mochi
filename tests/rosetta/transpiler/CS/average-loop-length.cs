// Generated by Mochi 0.10.40 on 2025-07-25 14:26 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double absf(double x) {
        if ((x < 0)) {
            return -x;
        };
        return x;
    }

    static double floorf(double x) {
        var y_0 = Convert.ToInt64(x);
        return Convert.ToDouble(y_0);
    }

    static long indexOf(string s, string ch) {
        long i_1 = 0;
        while ((i_1 < s.Length)) {
            if ((s.Substring((int)(i_1), (int)((i_1 + 1) - i_1)) == ch)) {
                return i_1;
            }
            i_1 = (i_1 + 1);
        };
        return -1;
    }

    static string fmtF(double x) {
        double y_2 = (floorf(((x * 10000) + 0.5)) / 10000);
        string s_3 = (y_2).ToString();
        long dot_4 = indexOf(s_3, ".");
        if ((dot_4 == (0 - 1))) {
            s_3 = (s_3 + ".0000");
        } else {
            long decs_5 = ((((dynamic)s_3.Length) - ((dynamic)dot_4)) - 1);
            if ((decs_5 > 4)) {
                s_3 = s_3.Substring((int)(0), (int)((dot_4 + 5) - 0));
            } else {
                while ((decs_5 < 4)) {
                    s_3 = (s_3 + "0");
                    decs_5 = (decs_5 + 1);
                }
            }
        };
        return s_3;
    }

    static string padInt(long n, long width) {
        string s_6 = (n).ToString();
        while ((s_6.Length < width)) {
            s_6 = (" " + s_6);
        };
        return s_6;
    }

    static string padFloat(double x, long width) {
        string s_7 = fmtF(x);
        while ((s_7.Length < width)) {
            s_7 = (" " + s_7);
        };
        return s_7;
    }

    static double avgLen(long n) {
        long tests_8 = 10000;
        long sum_9 = 0;
        long seed_10 = 1;
        long t_11 = 0;
        while ((t_11 < tests_8)) {
            bool[] visited_12 = new bool[]{};
            long i_13 = 0;
            while ((i_13 < n)) {
                visited_12 = (Enumerable.ToArray(Enumerable.Append(visited_12, false)));
                i_13 = (i_13 + 1);
            }
            long x_14 = 0;
            while ((!visited_12[(int)(x_14)])) {
                visited_12[x_14] = true;
                sum_9 = (sum_9 + 1);
                seed_10 = (((seed_10 * 1664525) + 1013904223) % 2147483647);
                x_14 = (seed_10 % n);
            }
            t_11 = (t_11 + 1);
        };
        return (double)(((dynamic)Convert.ToDouble(sum_9)) / ((dynamic)tests_8));
    }

    static double ana(long n) {
        var nn_15 = Convert.ToDouble(n);
        double term_16 = 1;
        double sum_17 = 1;
        double i_18 = (((dynamic)nn_15) - ((dynamic)1));
        while ((i_18 >= 1)) {
            term_16 = (term_16 * (((dynamic)i_18) / ((dynamic)nn_15)));
            sum_17 = (sum_17 + term_16);
            i_18 = (i_18 - 1);
        };
        return sum_17;
    }

    static void main() {
        long nmax_19 = 20;
        Console.WriteLine(_fmtTop(" N    average    analytical    (error)"));
        Console.WriteLine(_fmtTop("===  =========  ============  ========="));
        long n_20 = 1;
        while ((n_20 <= nmax_19)) {
            double a_21 = avgLen(n_20);
            double b_22 = ana(n_20);
            double err_23 = ((absf((a_21 - b_22)) / b_22) * 100);
            string line_24 = (((((((padInt(n_20, 3) + "  ") + padFloat(a_21, 9)) + "  ") + padFloat(b_22, 12)) + "  (") + padFloat(err_23, 6)) + "%)");
            Console.WriteLine(_fmtTop(line_24));
            n_20 = (n_20 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
