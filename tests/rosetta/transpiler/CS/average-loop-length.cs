// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double absf(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    static double floorf(double x_1) {
        var y_2 = Convert.ToInt64(x_1);
        return Convert.ToDouble(y_2);
    }

    static long indexOf(string s_3, string ch_4) {
        long i_5 = 0;
        while ((string.Compare(Convert.ToString(i_5), Convert.ToString(s_3.Length)) < 0)) {
            if ((s_3.Substring((int)(i_5), (int)((i_5 + 1) - i_5)) == ch_4)) {
                return i_5;
            }
            i_5 = (i_5 + 1);
        };
        return -1;
    }

    static string fmtF(double x_6) {
        double y_7 = (floorf(((x_6 * 10000.0) + 0.5)) / 10000.0);
        string s_8 = (y_7).ToString();
        long dot_9 = indexOf(s_8, ".");
        if ((dot_9 == (0 - 1))) {
            s_8 = (s_8 + ".0000");
        } else {
            long decs_10 = ((((dynamic)(s_8.Length)) - ((dynamic)(dot_9))) - 1);
            if ((decs_10 > 4)) {
                s_8 = s_8.Substring((int)(0), (int)((dot_9 + 5) - 0));
            } else {
                while ((decs_10 < 4)) {
                    s_8 = (s_8 + "0");
                    decs_10 = (decs_10 + 1);
                }
            }
        };
        return s_8;
    }

    static string padInt(long n_11, long width_12) {
        string s_13 = (n_11).ToString();
        while ((string.Compare(Convert.ToString(s_13.Length), Convert.ToString(width_12)) < 0)) {
            s_13 = (" " + s_13);
        };
        return s_13;
    }

    static string padFloat(double x_14, long width_15) {
        string s_16 = fmtF(x_14);
        while ((string.Compare(Convert.ToString(s_16.Length), Convert.ToString(width_15)) < 0)) {
            s_16 = (" " + s_16);
        };
        return s_16;
    }

    static double avgLen(long n_17) {
        long tests_18 = 10000;
        long sum_19 = 0;
        long seed_20 = 1;
        long t_21 = 0;
        while ((t_21 < tests_18)) {
            bool[] visited_22 = new bool[]{};
            long i_23 = 0;
            while ((i_23 < n_17)) {
                visited_22 = (Enumerable.ToArray(Enumerable.Append(visited_22, false)));
                i_23 = (i_23 + 1);
            }
            long x_24 = 0;
            while ((!visited_22[(int)(x_24)])) {
                visited_22[x_24] = true;
                sum_19 = (sum_19 + 1);
                seed_20 = (((seed_20 * 1664525) + 1013904223) % 2147483647);
                x_24 = (seed_20 % n_17);
            }
            t_21 = (t_21 + 1);
        };
        return (double)((((dynamic)(Convert.ToDouble(sum_19))) / ((dynamic)(tests_18))));
    }

    static double ana(long n_25) {
        var nn_26 = Convert.ToDouble(n_25);
        double term_27 = 1.0;
        double sum_28 = 1.0;
        double i_29 = (((dynamic)(nn_26)) - ((dynamic)(1.0)));
        while ((i_29 >= 1.0)) {
            term_27 = (term_27 * (((dynamic)(i_29)) / ((dynamic)(nn_26))));
            sum_28 = (sum_28 + term_27);
            i_29 = (i_29 - 1.0);
        };
        return sum_28;
    }

    static void main() {
        long nmax_30 = 20;
        Console.WriteLine(_fmtTop(" N    average    analytical    (error)"));
        Console.WriteLine(_fmtTop("===  =========  ============  ========="));
        long n_31 = 1;
        while ((n_31 <= nmax_30)) {
            double a_32 = avgLen(n_31);
            double b_33 = ana(n_31);
            double err_34 = ((absf((a_32 - b_33)) / b_33) * 100.0);
            string line_35 = (((((((padInt(n_31, 3) + "  ") + padFloat(a_32, 9)) + "  ") + padFloat(b_33, 12)) + "  (") + padFloat(err_34, 6)) + "%)");
            Console.WriteLine(_fmtTop(line_35));
            n_31 = (n_31 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
