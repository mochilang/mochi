// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool contains(long[] xs_0, long n_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == n_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    static long gcd(long a_3, long b_4) {
        long x_5 = a_3;
        long y_6 = b_4;
        while ((y_6 != 0)) {
            long t_7 = (x_5 % y_6);
            x_5 = y_6;
            y_6 = t_7;
        };
        if ((x_5 < 0)) {
            x_5 = -x_5;
        };
        return x_5;
    }

    static long[] sortInts(long[] xs_8) {
        long[] arr_9 = xs_8;
        var n_10 = arr_9.Length;
        long i_11 = 0;
        while ((i_11 < n_10)) {
            long j_12 = 0;
            while ((j_12 < (((dynamic)n_10) - ((dynamic)1)))) {
                if ((arr_9[(int)(j_12)] > arr_9[(int)((j_12 + 1))])) {
                    long tmp_13 = arr_9[(int)(j_12)];
                    arr_9[j_12] = arr_9[(int)((j_12 + 1))];
                    arr_9[(j_12 + 1)] = tmp_13;
                }
                j_12 = (j_12 + 1);
            }
            i_11 = (i_11 + 1);
        };
        return arr_9;
    }

    static bool areSame(long[] s_14, long[] t_15) {
        if ((s_14.Length != t_15.Length)) {
            return false;
        };
        long[] a_16 = sortInts(s_14);
        long[] b_17 = sortInts(t_15);
        long i_18 = 0;
        while ((i_18 < a_16.Length)) {
            if ((a_16[(int)(i_18)] != b_17[(int)(i_18)])) {
                return false;
            }
            i_18 = (i_18 + 1);
        };
        return true;
    }

    static void printSlice(long start_19, long[] seq_20) {
        long[] first_21 = new long[]{};
        long i_22 = 0;
        while ((i_22 < 30)) {
            first_21 = (Enumerable.ToArray(Enumerable.Append(first_21, seq_20[(int)(i_22)])));
            i_22 = (i_22 + 1);
        };
        string pad_23 = "";
        if ((start_19 < 10)) {
            pad_23 = " ";
        };
        Console.WriteLine(_fmtTop((((("EKG(" + pad_23) + (start_19).ToString()) + "): ") + (first_21).ToString())));
    }

    static void main() {
        long limit_24 = 100;
        long[] starts_25 = new long[]{2, 5, 7, 9, 10};
        long[][] ekg_26 = new long[][]{};
        long s_27 = 0;
        while ((s_27 < starts_25.Length)) {
            long[] seq_28 = new long[]{1, starts_25[(int)(s_27)]};
            long n_29 = 2;
            while ((n_29 < limit_24)) {
                long i_30 = 2;
                bool done_31 = false;
                while ((!done_31)) {
                    if (((!contains(seq_28, i_30)) && (gcd(seq_28[(int)((n_29 - 1))], i_30) > 1))) {
                        seq_28 = (Enumerable.ToArray(Enumerable.Append(seq_28, i_30)));
                        done_31 = true;
                    }
                    i_30 = (i_30 + 1);
                }
                n_29 = (n_29 + 1);
            }
            ekg_26 = (Enumerable.ToArray(Enumerable.Append(ekg_26, seq_28)));
            printSlice(starts_25[(int)(s_27)], seq_28);
            s_27 = (s_27 + 1);
        };
        long i_32 = 2;
        bool found_33 = false;
        while ((i_32 < limit_24)) {
            if (((ekg_26[(int)(1)][(int)(i_32)] == ekg_26[(int)(2)][(int)(i_32)]) && areSame(ekg_26[(int)(1)].Skip((int)(0)).Take((int)((i_32 - 0))).ToArray(), ekg_26[(int)(2)].Skip((int)(0)).Take((int)((i_32 - 0))).ToArray()))) {
                Console.WriteLine(_fmtTop(("\nEKG(5) and EKG(7) converge at term " + ((i_32 + 1)).ToString())));
                found_33 = true;
                break;
            }
            i_32 = (i_32 + 1);
        };
        if ((!found_33)) {
            Console.WriteLine(_fmtTop((("\nEKG5(5) and EKG(7) do not converge within " + (limit_24).ToString()) + " terms")));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
