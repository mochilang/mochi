// Generated by Mochi 0.10.40 on 2025-07-25 13:09 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double abs(double x) {
        if ((x < 0)) {
            return -x;
        };
        return x;
    }

    static double sqrtApprox(double x) {
        double guess_0 = x;
        long i_1 = 0;
        while ((i_1 < 20)) {
            guess_0 = ((guess_0 + (x / guess_0)) / 2);
            i_1 = (i_1 + 1);
        };
        return guess_0;
    }

    static double agmPi() {
        double a_2 = 1;
        double g_3 = (1 / sqrtApprox(2));
        double sum_4 = 0;
        double pow_5 = 2;
        while ((Math.Abs((a_2 - g_3)) > 1e-15)) {
            double t_6 = ((a_2 + g_3) / 2);
            double u_7 = sqrtApprox((a_2 * g_3));
            a_2 = t_6;
            g_3 = u_7;
            pow_5 = (pow_5 * 2);
            double diff_8 = ((a_2 * a_2) - (g_3 * g_3));
            sum_4 = (sum_4 + (diff_8 * pow_5));
        };
        double pi_9 = (((4 * a_2) * a_2) / (1 - sum_4));
        return pi_9;
    }

    static void main() {
        Console.WriteLine(_fmtTop((agmPi()).ToString()));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
