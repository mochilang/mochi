// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static BigInteger parseBigInt(string str_0) {
        long i_1 = 0;
        bool neg_2 = false;
        if (((str_0.Length > 0) && (str_0.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_2 = true;
            i_1 = 1;
        };
        BigInteger n_3 = 0;
        while ((i_1 < str_0.Length)) {
            string ch_4 = str_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1));
            var d_5 = Convert.ToInt64(ch_4);
            n_3 = ((n_3 * new BigInteger(10)) + new BigInteger(d_5));
            i_1 = (i_1 + 1);
        };
        if (neg_2) {
            n_3 = -n_3;
        };
        return n_3;
    }

    static string pad(long n_6, long width_7) {
        string s_8 = (n_6).ToString();
        while ((s_8.Length < width_7)) {
            s_8 = (" " + s_8);
        };
        return s_8;
    }

    static void showInt(long n_9) {
        string line_10 = (("Testing integer " + pad(n_9, 3)) + ":  ");
        if (((n_9 % 2) == 0)) {
            line_10 = (line_10 + "even ");
        } else {
            line_10 = (line_10 + " odd ");
        };
        if (((n_9 % 2) == 0)) {
            line_10 = (line_10 + "even");
        } else {
            line_10 = (line_10 + " odd");
        };
        Console.WriteLine(_fmtTop(line_10));
    }

    static void showBig(string s_11) {
        BigInteger b_12 = parseBigInt(s_11);
        string line_13 = (("Testing big integer " + (b_12).ToString()) + ":  ");
        if (((b_12 % new BigInteger(2)) == new BigInteger(0))) {
            line_13 = (line_13 + "even");
        } else {
            line_13 = (line_13 + "odd");
        };
        Console.WriteLine(_fmtTop(line_13));
    }

    static void main() {
        showInt(-2);
        showInt(-1);
        showInt(0);
        showInt(1);
        showInt(2);
        showBig("-222222222222222222222222222222222222");
        showBig("-1");
        showBig("0");
        showBig("1");
        showBig("222222222222222222222222222222222222");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
