// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] b_4 = new long[]{98, 105, 110, 97, 114, 121};
    static long[] c_5 = b_4;
    static long[] d_6 = new long[]{};
    static long i_7 = 0;
    static long[] z_8 = (Enumerable.ToArray(Enumerable.Append(b_4, 122)));
    static long[] sub_9 = b_4.Skip((int)(1)).Take((int)((3 - 1))).ToArray();
    static long[] f_10 = new long[]{};
    static long[] rem_12 = new long[]{};
    static string _char(long n) {
        string letters_0 = "abcdefghijklmnopqrstuvwxyz";
        long idx_1 = (n - 97);
        if (((idx_1 < 0) || (idx_1 >= letters_0.Length))) {
            return "?";
        };
        return letters_0.Substring((int)(idx_1), (int)((idx_1 + 1) - idx_1));
    }

    static string fromBytes(long[] bs) {
        string s_2 = "";
        long i_3 = 0;
        while ((i_3 < bs.Length)) {
            s_2 = (s_2 + char(bs[(int)(i_3)]));
            i_3 = (i_3 + 1);
        };
        return s_2;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((b_4).ToString()));
            Console.WriteLine(_fmtTop((c_5).ToString()));
            Console.WriteLine(_fmtTop(((b_4 == c_5)).ToString()));
            while ((i_7 < b_4.Length)) {
                d_6 = (Enumerable.ToArray(Enumerable.Append(d_6, b_4[(int)(i_7)])));
                i_7 = (i_7 + 1);
            }
            d_6[1] = 97;
            d_6[4] = 110;
            Console.WriteLine(_fmtTop(fromBytes(b_4)));
            Console.WriteLine(_fmtTop(fromBytes(d_6)));
            Console.WriteLine(_fmtTop(((b_4.Length == 0)).ToString()));
            Console.WriteLine(_fmtTop(fromBytes(z_8)));
            Console.WriteLine(_fmtTop(fromBytes(sub_9)));
            i_7 = 0;
            while ((i_7 < d_6.Length)) {
                long val_11 = d_6[(int)(i_7)];
                if ((val_11 == 110)) {
                    f_10 = (Enumerable.ToArray(Enumerable.Append(f_10, 109)));
                } else {
                    f_10 = (Enumerable.ToArray(Enumerable.Append(f_10, val_11)));
                }
                i_7 = (i_7 + 1);
            }
            Console.WriteLine(_fmtTop(((fromBytes(d_6) + " -> ") + fromBytes(f_10))));
            rem_12 = (Enumerable.ToArray(Enumerable.Append(rem_12, b_4[(int)(0)])));
            i_7 = 3;
            while ((i_7 < b_4.Length)) {
                rem_12 = (Enumerable.ToArray(Enumerable.Append(rem_12, b_4[(int)(i_7)])));
                i_7 = (i_7 + 1);
            }
            Console.WriteLine(_fmtTop(fromBytes(rem_12)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
