// Generated by Mochi 0.10.52 on 2025-07-31 12:13 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] b_6 = new long[]{98, 105, 110, 97, 114, 121};
    static string _char(long n_0) {
        string letters_1 = "abcdefghijklmnopqrstuvwxyz";
        long idx_2 = (n_0 - 97);
        if (((idx_2 < 0) || (Convert.ToDouble(idx_2) >= Convert.ToDouble(letters_1.Length)))) {
            return "?";
        };
        return letters_1.Substring((int)(idx_2), (int)((idx_2 + 1) - idx_2));
    }

    static string fromBytes(long[] bs_3) {
        string s_4 = "";
        long i_5 = 0;
        while ((Convert.ToDouble(i_5) < Convert.ToDouble(bs_3.Length))) {
            s_4 = (((dynamic)(s_4)) + ((dynamic)(_char(bs_3[(int)(i_5)]))));
            i_5 = (i_5 + 1);
        };
        return s_4;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(_fmt(b_6)));
            long[] c_7 = b_6;
            Console.WriteLine(_fmtTop(_fmt(c_7)));
            Console.WriteLine(_fmtTop(_fmt((b_6 == c_7))));
            long[] d_8 = new long[]{};
            long i_9 = 0;
            while ((Convert.ToDouble(i_9) < Convert.ToDouble(b_6.Length))) {
                d_8 = (Enumerable.ToArray(Enumerable.Append(d_8, b_6[(int)(i_9)])));
                i_9 = (i_9 + 1);
            }
            d_8[1] = 97;
            d_8[4] = 110;
            Console.WriteLine(_fmtTop(fromBytes(b_6)));
            Console.WriteLine(_fmtTop(fromBytes(d_8)));
            Console.WriteLine(_fmtTop(_fmt((b_6.Length == 0))));
            long[] z_10 = (Enumerable.ToArray(Enumerable.Append(b_6, 122)));
            Console.WriteLine(_fmtTop(fromBytes(z_10)));
            long[] sub_11 = b_6.Skip((int)(1)).Take((int)((3 - 1))).ToArray();
            Console.WriteLine(_fmtTop(fromBytes(sub_11)));
            long[] f_12 = new long[]{};
            i_9 = 0;
            while ((Convert.ToDouble(i_9) < Convert.ToDouble(d_8.Length))) {
                long val_13 = d_8[(int)(i_9)];
                if ((val_13 == 110)) {
                    f_12 = (Enumerable.ToArray(Enumerable.Append(f_12, 109)));
                } else {
                    f_12 = (Enumerable.ToArray(Enumerable.Append(f_12, val_13)));
                }
                i_9 = (i_9 + 1);
            }
            Console.WriteLine(_fmtTop(((fromBytes(d_8) + " -> ") + fromBytes(f_12))));
            long[] rem_14 = new long[]{};
            rem_14 = (Enumerable.ToArray(Enumerable.Append(rem_14, b_6[(int)(0)])));
            i_9 = 3;
            while ((Convert.ToDouble(i_9) < Convert.ToDouble(b_6.Length))) {
                rem_14 = (Enumerable.ToArray(Enumerable.Append(rem_14, b_6[(int)(i_9)])));
                i_9 = (i_9 + 1);
            }
            Console.WriteLine(_fmtTop(fromBytes(rem_14)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
