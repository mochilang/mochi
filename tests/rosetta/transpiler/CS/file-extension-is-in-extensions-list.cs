// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] extensions_6 = new string[]{"zip", "rar", "7z", "gz", "archive", "A##", "tar.bz2"};
    static bool endsWith(string s_0, string suf_1) {
        if ((s_0.Length < suf_1.Length)) {
            return false;
        };
        return (s_0.Substring((int)((((dynamic)(s_0.Length)) - ((dynamic)(suf_1.Length)))), (int)(s_0.Length - (((dynamic)(s_0.Length)) - ((dynamic)(suf_1.Length))))) == suf_1);
    }

    static long lastIndexOf(string s_2, string sub_3) {
        long idx_4 = (0 - 1);
        long i_5 = 0;
        while ((i_5 <= (((dynamic)(s_2.Length)) - ((dynamic)(sub_3.Length))))) {
            if ((s_2.Substring((int)(i_5), (int)((((dynamic)(i_5)) + ((dynamic)(sub_3.Length))) - i_5)) == sub_3)) {
                idx_4 = i_5;
            }
            i_5 = (i_5 + 1);
        };
        return idx_4;
    }

    static object[] fileExtInList(string filename_7) {
        string fl_8 = filename_7.ToLower();
        foreach (var ext_9 in extensions_6) {
            string ext2_10 = ("." + ext_9.ToLower());
            if (endsWith(fl_8, ext2_10)) {
                return new object[]{true, ext_9};
            }
        };
        long idx_11 = lastIndexOf(filename_7, ".");
        if ((idx_11 != (0 - 1))) {
            string t_12 = filename_7.Substring((int)((idx_11 + 1)), (int)(filename_7.Length - (idx_11 + 1)));
            if ((t_12 != "")) {
                return new object[]{false, t_12};
            }
            return new object[]{false, "<empty>"};
        };
        return new object[]{false, "<none>"};
    }

    static string pad(string s_13, long w_14) {
        string t_15 = s_13;
        while ((t_15.Length < w_14)) {
            t_15 = (t_15 + " ");
        };
        return t_15;
    }

    static void main() {
        Console.WriteLine(_fmtTop("The listed extensions are:"));
        Console.WriteLine(_fmtTop(extensions_6));
        string[] tests_16 = new string[]{"MyData.a##", "MyData.tar.Gz", "MyData.gzip", "MyData.7z.backup", "MyData...", "MyData", "MyData_v1.0.tar.bz2", "MyData_v1.0.bz2"};
        foreach (var t_17 in tests_16) {
            object[] res_18 = fileExtInList(t_17);
            var ok_19 = ((dynamic)res_18)[0];
            var ext_20 = ((dynamic)res_18)[1];
            Console.WriteLine(_fmtTop(((((dynamic)((((pad(t_17, 20) + " => ") + (ok_19).ToString()) + "  (extension = "))) + ((dynamic)(ext_20))) + ")")));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
