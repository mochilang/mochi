// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long INF_0 = 1000000000;
    static Dictionary<string, Dictionary<string, long>> graph_1 = new Dictionary<string, Dictionary<string, long>>{};
    static void addEdge(string u_2, string v_3, long w_4) {
        if ((!(graph_1.ContainsKey(u_2)))) {
            graph_1[u_2] = new Dictionary<object, object>{};
        };
        ((dynamic)graph_1)[u_2][v_3] = w_4;
        if ((!(graph_1.ContainsKey(v_3)))) {
            graph_1[v_3] = new Dictionary<object, object>{};
        };
    }

    static string[] removeAt(string[] xs_5, long idx_6) {
        string[] out_7 = new string[]{};
        long i_8 = 0;
        foreach (var x_9 in xs_5) {
            if ((i_8 != idx_6)) {
                out_7 = (Enumerable.ToArray(Enumerable.Append(out_7, x_9)));
            }
            i_8 = (i_8 + 1);
        };
        return out_7;
    }

    static Dictionary<string, object> dijkstra(string source_10) {
        Dictionary<string, long> dist_11 = new Dictionary<string, long>{};
        Dictionary<string, string> prev_12 = new Dictionary<string, string>{};
        foreach (var v_13 in graph_1.Keys) {
            dist_11[v_13] = INF_0;
            prev_12[v_13] = "";
        };
        dist_11[source_10] = 0;
        string[] q_14 = new string[]{};
        foreach (var v_15 in graph_1.Keys) {
            q_14 = (Enumerable.ToArray(Enumerable.Append(q_14, v_15)));
        };
        while ((q_14.Length > 0)) {
            long bestIdx_16 = 0;
            string u_17 = q_14[(int)(0)];
            long i_18 = 1;
            while ((i_18 < q_14.Length)) {
                string v_19 = q_14[(int)(i_18)];
                if (((dist_11.ContainsKey(v_19) ? dist_11[v_19] : 0) < (dist_11.ContainsKey(u_17) ? dist_11[u_17] : 0))) {
                    u_17 = v_19;
                    bestIdx_16 = i_18;
                }
                i_18 = (i_18 + 1);
            }
            q_14 = removeAt(q_14, bestIdx_16);
            foreach (var v_20 in ((dynamic)graph_1)[u_17]) {
                long alt_21 = (((dynamic)(dist_11.ContainsKey(u_17) ? dist_11[u_17] : 0)) + ((dynamic)((dynamic)((dynamic)graph_1)[u_17])[v_20]));
                if ((alt_21 < (dist_11.ContainsKey(v_20) ? dist_11[v_20] : 0))) {
                    dist_11[v_20] = alt_21;
                    prev_12[v_20] = u_17;
                }
            }
        };
        return new Dictionary<string, object>{{"dist", dist_11}, {"prev", prev_12}};
    }

    static string path(Dictionary<string, string> prev_22, string v_23) {
        string s_24 = v_23;
        string cur_25 = v_23;
        while (((prev_22.ContainsKey(cur_25) ? prev_22[cur_25] : "") != "")) {
            cur_25 = (prev_22.ContainsKey(cur_25) ? prev_22[cur_25] : "");
            s_24 = (cur_25 + s_24);
        };
        return s_24;
    }

    static void main() {
        addEdge("a", "b", 7);
        addEdge("a", "c", 9);
        addEdge("a", "f", 14);
        addEdge("b", "c", 10);
        addEdge("b", "d", 15);
        addEdge("c", "d", 11);
        addEdge("c", "f", 2);
        addEdge("d", "e", 6);
        addEdge("e", "f", 9);
        Dictionary<string, object> res_26 = dijkstra("a");
        Dictionary<string, long> dist_27 = (((dynamic)res_26)["dist"] as Dictionary<string, long>) ?? new Dictionary<string, long>{};
        Dictionary<string, string> prev_28 = (((dynamic)res_26)["prev"] as Dictionary<string, string>) ?? new Dictionary<string, string>{};
        Console.WriteLine(_fmtTop(((("Distance to e: " + ((dist_27.ContainsKey("e") ? dist_27["e"] : 0)).ToString()) + ", Path: ") + path(prev_28, "e"))));
        Console.WriteLine(_fmtTop(((("Distance to f: " + ((dist_27.ContainsKey("f") ? dist_27["f"] : 0)).ToString()) + ", Path: ") + path(prev_28, "f"))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
