// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Frac {
    public long num;
    public long den;
    public override string ToString() => $"Frac {{num = {num}, den = {den}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string fracStr(Frac f_0) {
        return (((f_0.num).ToString() + "/") + (f_0.den).ToString());
    }

    static Frac[] gen(Frac l_1, Frac r_2, long n_3, Frac[] acc_4) {
        Frac m_5 = new Frac{num = (l_1.num + r_2.num), den = (l_1.den + r_2.den)};
        if ((m_5.den <= n_3)) {
            acc_4 = gen(l_1, m_5, n_3, acc_4);
            acc_4 = (Enumerable.ToArray(Enumerable.Append(acc_4, m_5)));
            acc_4 = gen(m_5, r_2, n_3, acc_4);
        };
        return acc_4;
    }

    static long totient(long n_6) {
        long tot_7 = n_6;
        long nn_8 = n_6;
        long p_9 = 2;
        while (((p_9 * p_9) <= nn_8)) {
            if (((nn_8 % p_9) == 0)) {
                while (((nn_8 % p_9) == 0)) {
                    nn_8 = (nn_8 / p_9);
                }
                tot_7 = (tot_7 - (tot_7 / p_9));
            }
            if ((p_9 == 2)) {
                p_9 = 1;
            }
            p_9 = (p_9 + 2);
        };
        if ((nn_8 > 1)) {
            tot_7 = (tot_7 - (tot_7 / nn_8));
        };
        return tot_7;
    }

    static void main() {
        long n_10 = 1;
        while ((n_10 <= 11)) {
            Frac l_11 = new Frac{num = 0, den = 1};
            Frac r_12 = new Frac{num = 1, den = 1};
            Frac[] seq_13 = gen(l_11, r_12, n_10, new Frac[]{});
            string line_14 = ((("F(" + (n_10).ToString()) + "): ") + fracStr(l_11));
            foreach (var f_15 in seq_13) {
                line_14 = ((line_14 + " ") + fracStr(f_15));
            }
            line_14 = ((line_14 + " ") + fracStr(r_12));
            Console.WriteLine(_fmtTop(line_14));
            n_10 = (n_10 + 1);
        };
        long sum_16 = 1;
        long i_17 = 1;
        long next_18 = 100;
        while ((i_17 <= 1000)) {
            sum_16 = (sum_16 + totient(i_17));
            if ((i_17 == next_18)) {
                Console.WriteLine(_fmtTop(((("|F(" + (i_17).ToString()) + ")|: ") + (sum_16).ToString())));
                next_18 = (next_18 + 100);
            }
            i_17 = (i_17 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
