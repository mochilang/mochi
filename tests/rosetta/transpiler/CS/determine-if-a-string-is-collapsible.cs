// Generated by Mochi 0.10.55 on 2025-08-03 10:56 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static object[] collapse(string s_0) {
        long i_1 = 0;
        string prev_2 = "";
        string res_3 = "";
        var orig_4 = s_0.Length;
        while ((Convert.ToDouble(i_1) < Convert.ToDouble(s_0.Length))) {
            string ch_5 = s_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1));
            if ((ch_5 != prev_2)) {
                res_3 = (res_3 + ch_5);
                prev_2 = ch_5;
            }
            i_1 = (i_1 + 1);
        };
        return new object[]{res_3, orig_4, res_3.Length};
    }

    public static void main() {
        string[] strings_6 = new string[]{"", "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln ", "..111111111111111111111111111111111111111111111111111111111111111777888", "I never give 'em hell, I just tell the truth, and they think it's hell. ", "                                                   ---  Harry S Truman ", "The better the 4-wheel drive, the further you'll be from help when ya get stuck!", "headmistressship", "aardvark", "😍😀🙌💃😍😍😍🙌"};
        long idx_7 = 0;
        while ((Convert.ToDouble(idx_7) < Convert.ToDouble(strings_6.Length))) {
            string s_8 = strings_6[(int)(idx_7)];
            object[] r_9 = Program.collapse(s_8);
            object cs_10 = ((dynamic)r_9)[0];
            object olen_11 = ((dynamic)r_9)[1];
            object clen_12 = ((dynamic)r_9)[2];
            Console.WriteLine(Program._fmtTop((((("original : length = " + _fmt((object)olen_11)) + ", string = «««") + s_8) + "»»»")));
            Console.WriteLine(Program._fmtTop(((((dynamic)((("collapsed: length = " + _fmt((object)clen_12)) + ", string = «««"))) + ((dynamic)(cs_10))) + "»»»\n")));
            idx_7 = (idx_7 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
