// Generated by Mochi 0.10.41 on 2025-07-27 07:48 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string timeStr(long sec_0) {
        long wks_1 = (sec_0 / 604800);
        sec_0 = (sec_0 % 604800);
        long ds_2 = (sec_0 / 86400);
        sec_0 = (sec_0 % 86400);
        long hrs_3 = (sec_0 / 3600);
        sec_0 = (sec_0 % 3600);
        long mins_4 = (sec_0 / 60);
        sec_0 = (sec_0 % 60);
        string res_5 = "";
        bool comma_6 = false;
        if ((wks_1 != 0)) {
            res_5 = ((res_5 + (wks_1).ToString()) + " wk");
            comma_6 = true;
        };
        if ((ds_2 != 0)) {
            if (comma_6) {
                res_5 = (res_5 + ", ");
            }
            res_5 = ((res_5 + (ds_2).ToString()) + " d");
            comma_6 = true;
        };
        if ((hrs_3 != 0)) {
            if (comma_6) {
                res_5 = (res_5 + ", ");
            }
            res_5 = ((res_5 + (hrs_3).ToString()) + " hr");
            comma_6 = true;
        };
        if ((mins_4 != 0)) {
            if (comma_6) {
                res_5 = (res_5 + ", ");
            }
            res_5 = ((res_5 + (mins_4).ToString()) + " min");
            comma_6 = true;
        };
        if ((sec_0 != 0)) {
            if (comma_6) {
                res_5 = (res_5 + ", ");
            }
            res_5 = ((res_5 + (sec_0).ToString()) + " sec");
        };
        return res_5;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(timeStr(7259)));
            Console.WriteLine(_fmtTop(timeStr(86400)));
            Console.WriteLine(_fmtTop(timeStr(6000000)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
