// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long parseIntStr(string str_0) {
        long i_1 = 0;
        bool neg_2 = false;
        if (((str_0.Length > 0) && (str_0.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_2 = true;
            i_1 = 1;
        };
        long n_3 = 0;
        Dictionary<string, long> digits_4 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_1 < str_0.Length)) {
            n_3 = ((n_3 * 10) + (digits_4.ContainsKey(str_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1))) ? digits_4[str_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1))] : 0));
            i_1 = (i_1 + 1);
        };
        if (neg_2) {
            n_3 = -n_3;
        };
        return n_3;
    }

    static void showTokens(long tokens_5) {
        Console.WriteLine(_fmtTop(("Tokens remaining " + (tokens_5).ToString())));
    }

    static void main() {
        long tokens_6 = 12;
        bool done_7 = false;
        while ((!done_7)) {
            showTokens(tokens_6);
            Console.WriteLine(_fmtTop(""));
            Console.WriteLine(_fmtTop("How many tokens 1, 2 or 3?"));
            string line_8 = _input();
            long t_9 = 0;
            if ((line_8.Length > 0)) {
                t_9 = parseIntStr(line_8);
            }
            if (((t_9 < 1) || (t_9 > 3))) {
                Console.WriteLine(_fmtTop("\nMust be a number between 1 and 3, try again.\n"));
            } else {
                long ct_10 = (4 - t_9);
                string s_11 = "s";
                if ((ct_10 == 1)) {
                    s_11 = "";
                }
                Console.WriteLine(_fmtTop((((("  Computer takes " + (ct_10).ToString()) + " token") + s_11) + "\n\n")));
                tokens_6 = (tokens_6 - 4);
            }
            if ((tokens_6 == 0)) {
                showTokens(0);
                Console.WriteLine(_fmtTop("  Computer wins!"));
                done_7 = true;
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
