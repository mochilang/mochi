// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long factorial(long n_0) {
        long result_1 = 1;
        long i_2 = 2;
        while ((i_2 <= n_0)) {
            result_1 = (result_1 * i_2);
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    static bool isPrime(long n_3) {
        if ((n_3 < 2)) {
            return false;
        };
        if (((n_3 % 2) == 0)) {
            return (n_3 == 2);
        };
        long d_4 = 3;
        while (((d_4 * d_4) <= n_3)) {
            if (((n_3 % d_4) == 0)) {
                return false;
            }
            d_4 = (d_4 + 2);
        };
        return true;
    }

    static string padLeft(string s_5, long w_6) {
        string out_7 = s_5;
        while ((out_7.Length < w_6)) {
            out_7 = (" " + out_7);
        };
        return out_7;
    }

    static void main() {
        long n_8 = 0;
        long count_9 = 0;
        while ((count_9 < 10)) {
            n_8 = (n_8 + 1);
            long f_10 = factorial(n_8);
            if (isPrime((f_10 - 1))) {
                count_9 = (count_9 + 1);
                Console.WriteLine(_fmtTop(((((padLeft((count_9).ToString(), 2) + ": ") + padLeft((n_8).ToString(), 2)) + "! - 1 = ") + ((f_10 - 1)).ToString())));
            }
            if (((count_9 < 10) && isPrime((f_10 + 1)))) {
                count_9 = (count_9 + 1);
                Console.WriteLine(_fmtTop(((((padLeft((count_9).ToString(), 2) + ": ") + padLeft((n_8).ToString(), 2)) + "! + 1 = ") + ((f_10 + 1)).ToString())));
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
