// Generated by Mochi 0.10.55 on 2025-08-03 10:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] table_25 = crc32Table();
    static long xor(long a_0, long b_1) {
        long res_2 = 0;
        long bit_3 = 1;
        long x_4 = a_0;
        long y_5 = b_1;
        while (((x_4 > 0) || (y_5 > 0))) {
            long abit_6 = (x_4 % 2);
            long bbit_7 = (y_5 % 2);
            if ((abit_6 != bbit_7)) {
                res_2 = (res_2 + bit_3);
            }
            x_4 = (x_4 / 2);
            y_5 = (y_5 / 2);
            bit_3 = (bit_3 * 2);
        };
        return res_2;
    }

    static long rshift(long x_8, long n_9) {
        long v_10 = x_8;
        long i_11 = 0;
        while ((i_11 < n_9)) {
            v_10 = (v_10 / 2);
            i_11 = (i_11 + 1);
        };
        return v_10;
    }

    static long ord(string ch_12) {
        string upper_13 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_14 = "abcdefghijklmnopqrstuvwxyz";
        var idx_15 = upper_13.IndexOf(ch_12);
        if ((Convert.ToDouble(idx_15) >= Convert.ToDouble(0))) {
            return (((dynamic)(65)) + ((dynamic)(idx_15)));
        };
        idx_15 = lower_14.IndexOf(ch_12);
        if ((Convert.ToDouble(idx_15) >= Convert.ToDouble(0))) {
            return (((dynamic)(97)) + ((dynamic)(idx_15)));
        };
        if ((ch_12 == " ")) {
            return 32;
        };
        return 0;
    }

    static string toHex(long n_16) {
        string digits_17 = "0123456789ABCDEF";
        if ((n_16 == 0)) {
            return "0";
        };
        long v_18 = n_16;
        string out_19 = "";
        while ((v_18 > 0)) {
            long d_20 = (v_18 % 16);
            out_19 = (digits_17.Substring((int)(d_20), (int)((d_20 + 1) - d_20)) + out_19);
            v_18 = (v_18 / 16);
        };
        return out_19;
    }

    static long[] crc32Table() {
        long[] table_21 = new long[]{};
        long i_22 = 0;
        while ((i_22 < 256)) {
            long word_23 = i_22;
            long j_24 = 0;
            while ((j_24 < 8)) {
                if (((word_23 % 2) == 1)) {
                    word_23 = xor(rshift(word_23, 1), 3988292384L);
                } else {
                    word_23 = rshift(word_23, 1);
                }
                j_24 = (j_24 + 1);
            }
            table_21 = (Enumerable.ToArray(Enumerable.Append(table_21, word_23)));
            i_22 = (i_22 + 1);
        };
        return table_21;
    }

    static long crc32(string s_26) {
        long crc_27 = 4294967295L;
        long i_28 = 0;
        while ((Convert.ToDouble(i_28) < Convert.ToDouble(s_26.Length))) {
            long c_29 = ord(s_26.Substring((int)(i_28), (int)((i_28 + 1) - i_28)));
            long idx_30 = xor((crc_27 % 256), c_29);
            crc_27 = xor(table_25[(int)(idx_30)], rshift(crc_27, 8));
            i_28 = (i_28 + 1);
        };
        return (4294967295L - crc_27);
    }

    static void main() {
        string s_31 = "The quick brown fox jumps over the lazy dog";
        long result_32 = crc32(s_31);
        string hex_33 = toHex(result_32).ToLower();
        Console.WriteLine(_fmtTop(hex_33));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
