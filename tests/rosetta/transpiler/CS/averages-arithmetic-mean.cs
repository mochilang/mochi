// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, object> mean(double[] v) {
        if ((v.Length == 0)) {
            return new Dictionary<string, object>{{"ok", false}};
        };
        double sum_0 = 0;
        long i_1 = 0;
        while ((i_1 < v.Length)) {
            sum_0 = (sum_0 + v[(int)(i_1)]);
            i_1 = (i_1 + 1);
        };
        return new Dictionary<string, object>{{"ok", true}, {"mean", (((dynamic)sum_0) / ((dynamic)Convert.ToDouble(v.Length)))}};
    }

    static void main() {
        double[][] sets_2 = new double[][]{new double[]{}, new double[]{3, 1, 4, 1, 5, 9}, new double[]{1e+20, 3, 1, 4, 1, 5, 9, -1e+20}, new double[]{10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0.11}, new double[]{10, 20, 30, 40, 50, -100, 4.7, -1100}};
        foreach (var v_3 in sets_2) {
            Console.WriteLine(_fmtTop(("Vector: " + (v_3).ToString())));
            Dictionary<string, object> r_4 = mean(v_3);
            if (((dynamic)r_4)["ok"]) {
                Console.WriteLine(_fmtTop(((("Mean of " + (v_3.Length).ToString()) + " numbers is ") + (((dynamic)r_4)["mean"]).ToString())));
            } else {
                Console.WriteLine(_fmtTop("Mean undefined"));
            }
            Console.WriteLine(_fmtTop(""));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
