// Generated by Mochi 0.10.40 on 2025-07-25 14:19 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static void main() {
        Console.WriteLine(_fmtTop("Diagram after trimming whitespace and removal of blank lines:\n"));
        Console.WriteLine(_fmtTop("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"));
        Console.WriteLine(_fmtTop("|                      ID                       |"));
        Console.WriteLine(_fmtTop("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"));
        Console.WriteLine(_fmtTop("|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |"));
        Console.WriteLine(_fmtTop("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"));
        Console.WriteLine(_fmtTop("|                    QDCOUNT                    |"));
        Console.WriteLine(_fmtTop("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"));
        Console.WriteLine(_fmtTop("|                    ANCOUNT                    |"));
        Console.WriteLine(_fmtTop("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"));
        Console.WriteLine(_fmtTop("|                    NSCOUNT                    |"));
        Console.WriteLine(_fmtTop("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"));
        Console.WriteLine(_fmtTop("|                    ARCOUNT                    |"));
        Console.WriteLine(_fmtTop("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"));
        Console.WriteLine(_fmtTop("\nDecoded:\n"));
        Console.WriteLine(_fmtTop("Name     Bits  Start  End"));
        Console.WriteLine(_fmtTop("=======  ====  =====  ==="));
        Console.WriteLine(_fmtTop("ID        16      0    15"));
        Console.WriteLine(_fmtTop("QR         1     16    16"));
        Console.WriteLine(_fmtTop("Opcode     4     17    20"));
        Console.WriteLine(_fmtTop("AA         1     21    21"));
        Console.WriteLine(_fmtTop("TC         1     22    22"));
        Console.WriteLine(_fmtTop("RD         1     23    23"));
        Console.WriteLine(_fmtTop("RA         1     24    24"));
        Console.WriteLine(_fmtTop("Z          3     25    27"));
        Console.WriteLine(_fmtTop("RCODE      4     28    31"));
        Console.WriteLine(_fmtTop("QDCOUNT   16     32    47"));
        Console.WriteLine(_fmtTop("ANCOUNT   16     48    63"));
        Console.WriteLine(_fmtTop("NSCOUNT   16     64    79"));
        Console.WriteLine(_fmtTop("ARCOUNT   16     80    95"));
        Console.WriteLine(_fmtTop("\nTest string in hex:"));
        Console.WriteLine(_fmtTop("78477bbf5496e12e1bf169a4"));
        Console.WriteLine(_fmtTop("\nTest string in binary:"));
        Console.WriteLine(_fmtTop("011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100"));
        Console.WriteLine(_fmtTop("\nUnpacked:\n"));
        Console.WriteLine(_fmtTop("Name     Size  Bit pattern"));
        Console.WriteLine(_fmtTop("=======  ====  ================"));
        Console.WriteLine(_fmtTop("ID        16   0111100001000111"));
        Console.WriteLine(_fmtTop("QR         1   0"));
        Console.WriteLine(_fmtTop("Opcode     4   1111"));
        Console.WriteLine(_fmtTop("AA         1   0"));
        Console.WriteLine(_fmtTop("TC         1   1"));
        Console.WriteLine(_fmtTop("RD         1   1"));
        Console.WriteLine(_fmtTop("RA         1   1"));
        Console.WriteLine(_fmtTop("Z          3   011"));
        Console.WriteLine(_fmtTop("RCODE      4   1111"));
        Console.WriteLine(_fmtTop("QDCOUNT   16   0101010010010110"));
        Console.WriteLine(_fmtTop("ANCOUNT   16   1110000100101110"));
        Console.WriteLine(_fmtTop("NSCOUNT   16   0001101111110001"));
        Console.WriteLine(_fmtTop("ARCOUNT   16   0110100110100100"));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
