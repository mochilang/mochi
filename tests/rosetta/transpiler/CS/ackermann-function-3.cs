// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string err = "";
    static object pow_big(object _base, int exp) {
        int result = 1;
        var b = _base;
        int e = exp;
        while ((e > 0)) {
            if (((e % 2) == 1)) {
                result = (result * b);
            }
            b = (b * b);
            e = Convert.ToInt32((e / 2));
        };
        return result;
    }

    static int bit_len(object x) {
        var n = x;
        int c = 0;
        while ((n > 0)) {
            n = (n / 2);
            c = (c + 1);
        };
        return c;
    }

    static object ackermann2(object m, object n) {
        if ((err != "")) {
            return 0;
        };
        if ((m <= 3)) {
            var mi = Convert.ToInt32(m);
            if ((mi == 0)) {
                return (n + 1);
            }
            if ((mi == 1)) {
                return (n + 2);
            }
            if ((mi == 2)) {
                return ((2 * n) + 3);
            }
            if ((mi == 3)) {
                int nb = bit_len(n);
                if ((nb > 64)) {
                    err = (("A(m,n) had n of " + nb.ToString()) + " bits; too large");
                    return 0;
                }
                var r = pow_big(2, Convert.ToInt32(n));
                return ((8 * r) - 3);
            }
        };
        if ((bit_len(n) == 0)) {
            return ackermann2((m - 1), 1);
        };
        return ackermann2((m - 1), ackermann2(m, (n - 1)));
    }

    static void show(int m, int n) {
        err = "";
        var res = ackermann2(m, n);
        if ((err != "")) {
            Console.WriteLine(_fmtTop(((((("A(" + m.ToString()) + ", ") + n.ToString()) + ") = Error: ") + err)));
            return;
        };
        if ((bit_len(res) <= 256)) {
            Console.WriteLine(_fmtTop(((((("A(" + m.ToString()) + ", ") + n.ToString()) + ") = ") + res.ToString())));
        } else {
            string s = res.ToString();
            string pre = s.Substring(0, (20 - 0));
            string suf = s.Substring((s.Length - 20), (s.Length - (s.Length - 20)));
            Console.WriteLine(_fmtTop(((((((((("A(" + m.ToString()) + ", ") + n.ToString()) + ") = ") + s.Length.ToString()) + " digits starting/ending with: ") + pre) + "...") + suf)));
        };
    }

    static void main() {
        show(0, 0);
        show(1, 2);
        show(2, 4);
        show(3, 100);
        show(3, 1000000);
        show(4, 1);
        show(4, 2);
        show(4, 3);
    }

    static void Main() {
        main();
    }
}
