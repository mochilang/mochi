// Generated by Mochi 0.10.40 on 2025-07-25 19:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string err_5 = "";
    static BigInteger pow_big(BigInteger _base, long exp) {
        BigInteger result_0 = 1;
        BigInteger b_1 = _base;
        long e_2 = exp;
        while ((e_2 > 0)) {
            if (((e_2 % 2) == 1)) {
                result_0 = (result_0 * b_1);
            }
            b_1 = (b_1 * b_1);
            e_2 = Convert.ToInt32((e_2 / 2));
        };
        return result_0;
    }

    static long bit_len(BigInteger x) {
        BigInteger n_3 = x;
        long c_4 = 0;
        while ((n_3 > 0)) {
            n_3 = (n_3 / 2);
            c_4 = (c_4 + 1);
        };
        return c_4;
    }

    static BigInteger ackermann2(BigInteger m, BigInteger n) {
        if ((err_5 != "")) {
            return 0;
        };
        if ((m <= 3)) {
            var mi_6 = (int)(m);
            if ((mi_6 == 0)) {
                return (n + 1);
            }
            if ((mi_6 == 1)) {
                return (n + 2);
            }
            if ((mi_6 == 2)) {
                return ((2 * n) + 3);
            }
            if ((mi_6 == 3)) {
                long nb_7 = bit_len(n);
                if ((nb_7 > 64)) {
                    err_5 = (("A(m,n) had n of " + (nb_7).ToString()) + " bits; too large");
                    return 0;
                }
                BigInteger r_8 = pow_big(2, (int)(n));
                return ((8 * r_8) - 3);
            }
        };
        if ((bit_len(n) == 0)) {
            return ackermann2((m - 1), 1);
        };
        return ackermann2((m - 1), ackermann2(m, (n - 1)));
    }

    static void show(long m, long n) {
        err_5 = "";
        BigInteger res_9 = ackermann2(m, n);
        if ((err_5 != "")) {
            Console.WriteLine(_fmtTop(((((("A(" + (m).ToString()) + ", ") + (n).ToString()) + ") = Error: ") + err_5)));
            return;
        };
        if ((bit_len(res_9) <= 256)) {
            Console.WriteLine(_fmtTop(((((("A(" + (m).ToString()) + ", ") + (n).ToString()) + ") = ") + (res_9).ToString())));
        } else {
            string s_10 = (res_9).ToString();
            string pre_11 = s_10.Substring((int)(0), (int)(20 - 0));
            string suf_12 = s_10.Substring((int)((((dynamic)s_10.Length) - ((dynamic)20))), (int)(s_10.Length - (((dynamic)s_10.Length) - ((dynamic)20))));
            Console.WriteLine(_fmtTop(((((((((("A(" + (m).ToString()) + ", ") + (n).ToString()) + ") = ") + (s_10.Length).ToString()) + " digits starting/ending with: ") + pre_11) + "...") + suf_12)));
        };
    }

    static void main() {
        show(0, 0);
        show(1, 2);
        show(2, 4);
        show(3, 100);
        show(3, 1000000);
        show(4, 1);
        show(4, 2);
        show(4, 3);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
