// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string err_8 = "";
    static BigInteger pow_big(BigInteger base_0, long exp_1) {
        BigInteger result_2 = 1;
        BigInteger b_3 = base_0;
        long e_4 = exp_1;
        while ((e_4 > 0)) {
            if (((e_4 % 2) == 1)) {
                result_2 = (result_2 * b_3);
            }
            b_3 = (b_3 * b_3);
            e_4 = Convert.ToInt64((e_4 / 2));
        };
        return result_2;
    }

    static long bit_len(BigInteger x_5) {
        BigInteger n_6 = x_5;
        long c_7 = 0;
        while ((n_6 > 0)) {
            n_6 = (n_6 / 2);
            c_7 = (c_7 + 1);
        };
        return c_7;
    }

    static BigInteger ackermann2(BigInteger m_9, BigInteger n_10) {
        if ((err_8 != "")) {
            return new BigInteger(0);
        };
        if ((m_9 <= 3)) {
            var mi_11 = (int)(m_9);
            if ((mi_11 == 0)) {
                return (BigInteger)((n_10 + 1));
            }
            if ((mi_11 == 1)) {
                return (BigInteger)((n_10 + 2));
            }
            if ((mi_11 == 2)) {
                return (BigInteger)(((2 * n_10) + 3));
            }
            if ((mi_11 == 3)) {
                long nb_12 = bit_len(n_10);
                if ((nb_12 > 64)) {
                    err_8 = (("A(m,n) had n of " + (nb_12).ToString()) + " bits; too large");
                    return new BigInteger(0);
                }
                BigInteger r_13 = pow_big(new BigInteger(2), (int)(n_10));
                return (BigInteger)(((8 * r_13) - 3));
            }
        };
        if ((bit_len(n_10) == 0)) {
            return ackermann2((m_9 - new BigInteger(1)), new BigInteger(1));
        };
        return ackermann2((m_9 - new BigInteger(1)), ackermann2(m_9, (n_10 - new BigInteger(1))));
    }

    static void show(long m_14, long n_15) {
        err_8 = "";
        BigInteger res_16 = ackermann2(new BigInteger(m_14), new BigInteger(n_15));
        if ((err_8 != "")) {
            Console.WriteLine(_fmtTop(((((("A(" + (m_14).ToString()) + ", ") + (n_15).ToString()) + ") = Error: ") + err_8)));
            return;
        };
        if ((bit_len(res_16) <= 256)) {
            Console.WriteLine(_fmtTop(((((("A(" + (m_14).ToString()) + ", ") + (n_15).ToString()) + ") = ") + (res_16).ToString())));
        } else {
            string s_17 = (res_16).ToString();
            string pre_18 = s_17.Substring((int)(0), (int)(20 - 0));
            string suf_19 = s_17.Substring((int)((((dynamic)(s_17.Length)) - ((dynamic)(20)))), (int)(s_17.Length - (((dynamic)(s_17.Length)) - ((dynamic)(20)))));
            Console.WriteLine(_fmtTop(((((((((("A(" + (m_14).ToString()) + ", ") + (n_15).ToString()) + ") = ") + (s_17.Length).ToString()) + " digits starting/ending with: ") + pre_18) + "...") + suf_19)));
        };
    }

    static void main() {
        show(0, 0);
        show(1, 2);
        show(2, 4);
        show(3, 100);
        show(3, 1000000);
        show(4, 1);
        show(4, 2);
        show(4, 3);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
