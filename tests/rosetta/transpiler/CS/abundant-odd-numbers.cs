// Generated by Mochi 0.10.40 on 2025-07-25 12:28 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] divisors(long n) {
        long[] divs_0 = new long[]{1};
        long[] divs2_1 = new long[]{};
        long i_2 = 2;
        while (((i_2 * i_2) <= n)) {
            if (((n % i_2) == 0)) {
                var j_3 = Convert.ToInt32((n / i_2));
                divs_0 = (Enumerable.ToArray(Enumerable.Append(divs_0, i_2)));
                if ((i_2 != j_3)) {
                    divs2_1 = (Enumerable.ToArray(Enumerable.Append(divs2_1, j_3)));
                }
            }
            i_2 = (i_2 + 1);
        };
        long j_4 = (divs2_1.Length - 1);
        while ((j_4 >= 0)) {
            divs_0 = (Enumerable.ToArray(Enumerable.Append(divs_0, divs2_1[j_4])));
            j_4 = (j_4 - 1);
        };
        return divs_0;
    }

    static long sum(long[] xs) {
        long tot_5 = 0;
        foreach (var v_6 in xs) {
            tot_5 = (tot_5 + v_6);
        };
        return tot_5;
    }

    static string sumStr(long[] xs) {
        string s_7 = "";
        long i_8 = 0;
        while ((i_8 < xs.Length)) {
            s_7 = ((s_7 + (xs[i_8]).ToString()) + " + ");
            i_8 = (i_8 + 1);
        };
        return s_7.Substring((int)(0), (int)((s_7.Length - 3) - 0));
    }

    static string pad2(long n) {
        string s_9 = (n).ToString();
        if ((s_9.Length < 2)) {
            return (" " + s_9);
        };
        return s_9;
    }

    static string pad5(long n) {
        string s_10 = (n).ToString();
        while ((s_10.Length < 5)) {
            s_10 = (" " + s_10);
        };
        return s_10;
    }

    static long abundantOdd(long searchFrom, long countFrom, long countTo, bool printOne) {
        long count_11 = countFrom;
        long n_12 = searchFrom;
        while ((count_11 < countTo)) {
            long[] divs_13 = divisors(n_12);
            long tot_14 = (divs_13.Sum());
            if ((tot_14 > n_12)) {
                count_11 = (count_11 + 1);
                if ((printOne && (count_11 < countTo))) {
                    n_12 = (n_12 + 2);
                    continue;
                }
                string s_15 = sumStr(divs_13);
                if ((!printOne)) {
                    Console.WriteLine(_fmtTop(((((((pad2(count_11) + ". ") + pad5(n_12)) + " < ") + s_15) + " = ") + (tot_14).ToString())));
                } else {
                    Console.WriteLine(_fmtTop((((((n_12).ToString() + " < ") + s_15) + " = ") + (tot_14).ToString())));
                }
            }
            n_12 = (n_12 + 2);
        };
        return n_12;
    }

    static void main() {
        long max_16 = 25;
        Console.WriteLine(_fmtTop((("The first " + (max_16).ToString()) + " abundant odd numbers are:")));
        long n_17 = abundantOdd(1, 0, max_16, false);
        Console.WriteLine(_fmtTop("\nThe one thousandth abundant odd number is:"));
        abundantOdd(n_17, max_16, 1000, true);
        Console.WriteLine(_fmtTop("\nThe first abundant odd number above one billion is:"));
        abundantOdd(1000000001, 0, 1, true);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
