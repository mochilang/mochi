// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static int[] divisors(int n) {
        int[] divs = new int[]{1};
        int[] divs2 = new int[]{};
        int i = 2;
        while (((i * i) <= n)) {
            if (((n % i) == 0)) {
                var j = Convert.ToInt32((n / i));
                divs = (divs.Append(i).ToArray());
                if ((i != j)) {
                    divs2 = (divs2.Append(j).ToArray());
                }
            }
            i = (i + 1);
        };
        int j = (divs2.Length - 1);
        while ((j >= 0)) {
            divs = (divs.Append(divs2[j]).ToArray());
            j = (j - 1);
        };
        return divs;
    }

    static int sum(int[] xs) {
        int tot = 0;
        foreach (var v_0 in xs) {
            tot = (tot + v_0);
        };
        return tot;
    }

    static string sumStr(int[] xs) {
        string s = "";
        int i = 0;
        while ((i < xs.Length)) {
            s = ((s + xs[i].ToString()) + " + ");
            i = (i + 1);
        };
        return s.Substring(0, ((s.Length - 3) - 0));
    }

    static string pad2(int n) {
        string s = n.ToString();
        if ((s.Length < 2)) {
            return (" " + s);
        };
        return s;
    }

    static string pad5(int n) {
        string s = n.ToString();
        while ((s.Length < 5)) {
            s = (" " + s);
        };
        return s;
    }

    static int abundantOdd(int searchFrom, int countFrom, int countTo, bool printOne) {
        int count = countFrom;
        int n = searchFrom;
        while ((count < countTo)) {
            int[] divs = divisors(n);
            int tot = divs;
            if ((tot > n)) {
                count = (count + 1);
                if ((printOne && (count < countTo))) {
                    n = (n + 2);
                    continue;
                }
                string s = sumStr(divs);
                if ((!printOne)) {
                    Console.WriteLine(_fmtTop(((((((pad2(count) + ". ") + pad5(n)) + " < ") + s) + " = ") + tot.ToString())));
                } else {
                    Console.WriteLine(_fmtTop(((((n.ToString() + " < ") + s) + " = ") + tot.ToString())));
                }
            }
            n = (n + 2);
        };
        return n;
    }

    static void main() {
        int max = 25;
        Console.WriteLine(_fmtTop((("The first " + max.ToString()) + " abundant odd numbers are:")));
        int n = abundantOdd(1, 0, max, false);
        Console.WriteLine(_fmtTop("\nThe one thousandth abundant odd number is:"));
        abundantOdd(n, max, 1000, true);
        Console.WriteLine(_fmtTop("\nThe first abundant odd number above one billion is:"));
        abundantOdd(1000000001, 0, 1, true);
    }

    static void Main() {
        main();
    }
}
