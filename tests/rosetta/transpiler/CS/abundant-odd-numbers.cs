// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] divisors(long n_0) {
        long[] divs_1 = new long[]{1};
        long[] divs2_2 = new long[]{};
        long i_3 = 2;
        while (((i_3 * i_3) <= n_0)) {
            if (((n_0 % i_3) == 0)) {
                var j_4 = Convert.ToInt64((n_0 / i_3));
                divs_1 = (Enumerable.ToArray(Enumerable.Append(divs_1, i_3)));
                if ((i_3 != j_4)) {
                    divs2_2 = (Enumerable.ToArray(Enumerable.Append(divs2_2, j_4)));
                }
            }
            i_3 = (i_3 + 1);
        };
        long j_5 = (((dynamic)(divs2_2.Length)) - ((dynamic)(1)));
        while ((j_5 >= 0)) {
            divs_1 = (Enumerable.ToArray(Enumerable.Append(divs_1, divs2_2[(int)(j_5)])));
            j_5 = (j_5 - 1);
        };
        return divs_1;
    }

    static long sum(long[] xs_6) {
        long tot_7 = 0;
        foreach (var v_8 in xs_6) {
            tot_7 = (tot_7 + v_8);
        };
        return tot_7;
    }

    static string sumStr(long[] xs_9) {
        string s_10 = "";
        long i_11 = 0;
        while ((i_11 < xs_9.Length)) {
            s_10 = ((s_10 + (xs_9[(int)(i_11)]).ToString()) + " + ");
            i_11 = (i_11 + 1);
        };
        return s_10.Substring((int)(0), (int)((((dynamic)(s_10.Length)) - ((dynamic)(3))) - 0));
    }

    static string pad2(long n_12) {
        string s_13 = (n_12).ToString();
        if ((s_13.Length < 2)) {
            return (" " + s_13);
        };
        return s_13;
    }

    static string pad5(long n_14) {
        string s_15 = (n_14).ToString();
        while ((s_15.Length < 5)) {
            s_15 = (" " + s_15);
        };
        return s_15;
    }

    static long abundantOdd(long searchFrom_16, long countFrom_17, long countTo_18, bool printOne_19) {
        long count_20 = countFrom_17;
        long n_21 = searchFrom_16;
        while ((count_20 < countTo_18)) {
            long[] divs_22 = divisors(n_21);
            long tot_23 = sum(divs_22);
            if ((tot_23 > n_21)) {
                count_20 = (count_20 + 1);
                if ((printOne_19 && (count_20 < countTo_18))) {
                    n_21 = (n_21 + 2);
                    continue;
                }
                string s_24 = sumStr(divs_22);
                if ((!printOne_19)) {
                    Console.WriteLine(_fmtTop(((((((pad2(count_20) + ". ") + pad5(n_21)) + " < ") + s_24) + " = ") + (tot_23).ToString())));
                } else {
                    Console.WriteLine(_fmtTop((((((n_21).ToString() + " < ") + s_24) + " = ") + (tot_23).ToString())));
                }
            }
            n_21 = (n_21 + 2);
        };
        return n_21;
    }

    static void main() {
        long max_25 = 25;
        Console.WriteLine(_fmtTop((("The first " + (max_25).ToString()) + " abundant odd numbers are:")));
        long n_26 = abundantOdd(1, 0, max_25, false);
        Console.WriteLine(_fmtTop("\nThe one thousandth abundant odd number is:"));
        abundantOdd(n_26, max_25, 1000, true);
        Console.WriteLine(_fmtTop("\nThe first abundant odd number above one billion is:"));
        abundantOdd(1000000001, 0, 1, true);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
