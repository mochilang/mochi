// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long nextRand(long seed) {
        return (((seed * 1664525) + 1013904223) % 2147483647);
    }

    static object[] shuffleChars(string s, long seed) {
        string[] chars_0 = new string[]{};
        long i_1 = 0;
        while ((i_1 < s.Length)) {
            chars_0 = (Enumerable.ToArray(Enumerable.Append(chars_0, s.Substring((int)(i_1), (int)((i_1 + 1) - i_1)))));
            i_1 = (i_1 + 1);
        };
        long sd_2 = seed;
        long idx_3 = (((dynamic)chars_0.Length) - ((dynamic)1));
        while ((idx_3 > 0)) {
            sd_2 = nextRand(sd_2);
            long j_4 = (sd_2 % (idx_3 + 1));
            string tmp_5 = chars_0[(int)(idx_3)];
            chars_0[idx_3] = chars_0[(int)(j_4)];
            chars_0[j_4] = tmp_5;
            idx_3 = (idx_3 - 1);
        };
        string res_6 = "";
        i_1 = 0;
        while ((i_1 < chars_0.Length)) {
            res_6 = (res_6 + chars_0[(int)(i_1)]);
            i_1 = (i_1 + 1);
        };
        return new object[]{res_6, sd_2};
    }

    static object[] bestShuffle(string s, long seed) {
        object[] r_7 = shuffleChars(s, seed);
        var t_8 = ((dynamic)r_7)[0];
        var sd_9 = ((dynamic)r_7)[1];
        string[] arr_10 = new string[]{};
        long i_11 = 0;
        while ((i_11 < t_8.Length)) {
            arr_10 = (Enumerable.ToArray(Enumerable.Append(arr_10, t_8.Substring((int)(i_11), (int)((i_11 + 1) - i_11)))));
            i_11 = (i_11 + 1);
        };
        i_11 = 0;
        while ((i_11 < arr_10.Length)) {
            long j_12 = 0;
            while ((j_12 < arr_10.Length)) {
                if ((((i_11 != j_12) && (arr_10[(int)(i_11)] != s.Substring((int)(j_12), (int)((j_12 + 1) - j_12)))) && (arr_10[(int)(j_12)] != s.Substring((int)(i_11), (int)((i_11 + 1) - i_11))))) {
                    string tmp_13 = arr_10[(int)(i_11)];
                    arr_10[i_11] = arr_10[(int)(j_12)];
                    arr_10[j_12] = tmp_13;
                    break;
                }
                j_12 = (j_12 + 1);
            }
            i_11 = (i_11 + 1);
        };
        long count_14 = 0;
        i_11 = 0;
        while ((i_11 < arr_10.Length)) {
            if ((arr_10[(int)(i_11)] == s.Substring((int)(i_11), (int)((i_11 + 1) - i_11)))) {
                count_14 = (count_14 + 1);
            }
            i_11 = (i_11 + 1);
        };
        string out_15 = "";
        i_11 = 0;
        while ((i_11 < arr_10.Length)) {
            out_15 = (out_15 + arr_10[(int)(i_11)]);
            i_11 = (i_11 + 1);
        };
        return new object[]{out_15, sd_9, count_14};
    }

    static void main() {
        string[] ts_16 = new string[]{"abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"};
        long seed_17 = 1;
        long i_18 = 0;
        while ((i_18 < ts_16.Length)) {
            object[] r_19 = bestShuffle(ts_16[(int)(i_18)], seed_17);
            var shuf_20 = ((dynamic)r_19)[0];
            seed_17 = ((dynamic)r_19)[1];
            var cnt_21 = ((dynamic)r_19)[2];
            Console.WriteLine(_fmtTop(((((((dynamic)(ts_16[(int)(i_18)] + " -> ")) + ((dynamic)shuf_20)) + " (") + (cnt_21).ToString()) + ")")));
            i_18 = (i_18 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
