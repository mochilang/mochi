// Generated by Mochi 0.10.52 on 2025-07-31 04:53 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long nextRand(long seed_0) {
        return (((seed_0 * 1664525) + 1013904223) % 2147483647);
    }

    static object[] shuffleChars(string s_1, long seed_2) {
        string[] chars_3 = new string[]{};
        long i_4 = 0;
        while ((string.Compare(Convert.ToString(i_4), Convert.ToString(s_1.Length)) < 0)) {
            chars_3 = (Enumerable.ToArray(Enumerable.Append(chars_3, s_1.Substring((int)(i_4), (int)((i_4 + 1) - i_4)))));
            i_4 = (i_4 + 1);
        };
        long sd_5 = seed_2;
        long idx_6 = (((dynamic)(chars_3.Length)) - ((dynamic)(1)));
        while ((idx_6 > 0)) {
            sd_5 = nextRand(sd_5);
            long j_7 = (sd_5 % (idx_6 + 1));
            string tmp_8 = chars_3[(int)(idx_6)];
            chars_3[idx_6] = chars_3[(int)(j_7)];
            chars_3[j_7] = tmp_8;
            idx_6 = (idx_6 - 1);
        };
        string res_9 = "";
        i_4 = 0;
        while ((string.Compare(Convert.ToString(i_4), Convert.ToString(chars_3.Length)) < 0)) {
            res_9 = (res_9 + chars_3[(int)(i_4)]);
            i_4 = (i_4 + 1);
        };
        return new object[]{res_9, sd_5};
    }

    static object[] bestShuffle(string s_10, long seed_11) {
        object[] r_12 = shuffleChars(s_10, seed_11);
        object t_13 = ((dynamic)r_12)[0];
        object sd_14 = ((dynamic)r_12)[1];
        string[] arr_15 = new string[]{};
        long i_16 = 0;
        while ((string.Compare(Convert.ToString(i_16), Convert.ToString(Convert.ToString(t_13).Length)) < 0)) {
            arr_15 = (Enumerable.ToArray(Enumerable.Append(arr_15, Convert.ToString(t_13).Substring((int)(i_16), (int)((i_16 + 1) - i_16)))));
            i_16 = (i_16 + 1);
        };
        i_16 = 0;
        while ((string.Compare(Convert.ToString(i_16), Convert.ToString(arr_15.Length)) < 0)) {
            long j_17 = 0;
            while ((string.Compare(Convert.ToString(j_17), Convert.ToString(arr_15.Length)) < 0)) {
                if ((((i_16 != j_17) && (arr_15[(int)(i_16)] != s_10.Substring((int)(j_17), (int)((j_17 + 1) - j_17)))) && (arr_15[(int)(j_17)] != s_10.Substring((int)(i_16), (int)((i_16 + 1) - i_16))))) {
                    string tmp_18 = arr_15[(int)(i_16)];
                    arr_15[i_16] = arr_15[(int)(j_17)];
                    arr_15[j_17] = tmp_18;
                    break;
                }
                j_17 = (j_17 + 1);
            }
            i_16 = (i_16 + 1);
        };
        long count_19 = 0;
        i_16 = 0;
        while ((string.Compare(Convert.ToString(i_16), Convert.ToString(arr_15.Length)) < 0)) {
            if ((arr_15[(int)(i_16)] == s_10.Substring((int)(i_16), (int)((i_16 + 1) - i_16)))) {
                count_19 = (count_19 + 1);
            }
            i_16 = (i_16 + 1);
        };
        string out_20 = "";
        i_16 = 0;
        while ((string.Compare(Convert.ToString(i_16), Convert.ToString(arr_15.Length)) < 0)) {
            out_20 = (out_20 + arr_15[(int)(i_16)]);
            i_16 = (i_16 + 1);
        };
        return new object[]{out_20, sd_14, count_19};
    }

    static void main() {
        string[] ts_21 = new string[]{"abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"};
        long seed_22 = 1;
        long i_23 = 0;
        while ((string.Compare(Convert.ToString(i_23), Convert.ToString(ts_21.Length)) < 0)) {
            object[] r_24 = bestShuffle(ts_21[(int)(i_23)], seed_22);
            object shuf_25 = ((dynamic)r_24)[0];
            seed_22 = ((dynamic)r_24)[1];
            object cnt_26 = ((dynamic)r_24)[2];
            Console.WriteLine(_fmtTop(((((((dynamic)((ts_21[(int)(i_23)] + " -> "))) + ((dynamic)(shuf_25))) + " (") + (cnt_26).ToString()) + ")")));
            i_23 = (i_23 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
