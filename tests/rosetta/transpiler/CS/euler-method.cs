// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            if ((s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2)) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    static double floorf(double x_3) {
        var y_4 = Convert.ToInt64(x_3);
        return Convert.ToDouble(y_4);
    }

    static double powf(double base_5, long exp_6) {
        double r_7 = 1;
        long i_8 = 0;
        while ((i_8 < exp_6)) {
            r_7 = (r_7 * base_5);
            i_8 = (i_8 + 1);
        };
        return r_7;
    }

    static string fmtF(double x_9, long width_10, long prec_11) {
        double factor_12 = powf(10, prec_11);
        double y_13 = (floorf(((x_9 * factor_12) + 0.5)) / factor_12);
        string s_14 = (y_13).ToString();
        long dot_15 = indexOf(s_14, ".");
        if ((dot_15 == (0 - 1))) {
            s_14 = (s_14 + ".");
            long j_16 = 0;
            while ((j_16 < prec_11)) {
                s_14 = (s_14 + "0");
                j_16 = (j_16 + 1);
            }
        } else {
            long decs_17 = ((((dynamic)(s_14.Length)) - ((dynamic)(dot_15))) - 1);
            while ((decs_17 < prec_11)) {
                s_14 = (s_14 + "0");
                decs_17 = (decs_17 + 1);
            }
        };
        while ((s_14.Length < width_10)) {
            s_14 = (" " + s_14);
        };
        return s_14;
    }

    static double expf(double x_18) {
        if ((x_18 < 0)) {
            return (1 / expf(-x_18));
        };
        double term_19 = 1;
        double sum_20 = 1;
        long i_21 = 1;
        while ((i_21 < 20)) {
            term_19 = (((dynamic)((term_19 * x_18))) / ((dynamic)(Convert.ToDouble(i_21))));
            sum_20 = (sum_20 + term_19);
            i_21 = (i_21 + 1);
        };
        return sum_20;
    }

    static double eulerStep(Func<double, double, double> f_22, double x_23, double y_24, double h_25) {
        return (y_24 + (((dynamic)(h_25)) * ((dynamic)(f_22(x_23, y_24)))));
    }

    static Func<double, double> newCoolingRate(double k_26) {
        return (double dt) => {return (((dynamic)(-k_26)) * ((dynamic)(dt)));};
    }

    static Func<double, double> newTempFunc(double k_27, double ambient_28, double initial_29) {
        return (double t) => {return (ambient_28 + ((initial_29 - ambient_28) * expf((((dynamic)(-k_27)) * ((dynamic)(t))))));};
    }

    static Func<double, double, double> newCoolingRateDy(double k_30, double ambient_31) {
        Func<double, double> cr_32 = newCoolingRate(k_30);
        return (double _x, double obj) => {return cr_32((((dynamic)(obj)) - ((dynamic)(ambient_31))));};
    }

    static void main() {
        double k_33 = 0.07;
        double tempRoom_34 = 20;
        double tempObject_35 = 100;
        Func<double, double, double> fcr_36 = newCoolingRateDy(k_33, tempRoom_34);
        Func<double, double> analytic_37 = newTempFunc(k_33, tempRoom_34, tempObject_35);
        foreach (var step_38 in new double[]{2, 5, 10}) {
            Console.WriteLine(_fmtTop(("Step size = " + fmtF(step_38, 0, 1))));
            Console.WriteLine(_fmtTop(" Time Euler's Analytic"));
            double temp_39 = tempObject_35;
            double time_40 = 0;
            while ((time_40 <= 100)) {
                string line_41 = ((((fmtF(time_40, 5, 1) + " ") + fmtF(temp_39, 7, 3)) + " ") + fmtF(analytic_37(time_40), 7, 3));
                Console.WriteLine(_fmtTop(line_41));
                temp_39 = eulerStep(fcr_36, time_40, temp_39, step_38);
                time_40 = (time_40 + step_38);
            }
            Console.WriteLine(_fmtTop(""));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
