// Generated by Mochi 0.10.52 on 2025-07-31 08:37 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double[][] conv2d(double[][] img_1, double[][] k_2) {
        var h_3 = img_1.Length;
        var w_4 = img_1[(int)(0)].Length;
        var n_5 = k_2.Length;
        long half_6 = (((dynamic)(n_5)) / ((dynamic)(2)));
        double[][] out_7 = new double[][]{};
        long y_8 = 0;
        while ((Convert.ToDouble(y_8) < Convert.ToDouble(h_3))) {
            double[] row_9 = new double[]{};
            long x_10 = 0;
            while ((Convert.ToDouble(x_10) < Convert.ToDouble(w_4))) {
                double sum_11 = 0.0;
                long j_12 = 0;
                while ((Convert.ToDouble(j_12) < Convert.ToDouble(n_5))) {
                    long i_13 = 0;
                    while ((Convert.ToDouble(i_13) < Convert.ToDouble(n_5))) {
                        long yy_14 = ((y_8 + j_12) - half_6);
                        if ((yy_14 < 0)) {
                            yy_14 = 0;
                        }
                        if ((Convert.ToDouble(yy_14) >= Convert.ToDouble(h_3))) {
                            yy_14 = (((dynamic)(h_3)) - ((dynamic)(1)));
                        }
                        long xx_15 = ((x_10 + i_13) - half_6);
                        if ((xx_15 < 0)) {
                            xx_15 = 0;
                        }
                        if ((Convert.ToDouble(xx_15) >= Convert.ToDouble(w_4))) {
                            xx_15 = (((dynamic)(w_4)) - ((dynamic)(1)));
                        }
                        sum_11 = (sum_11 + (img_1[(int)(yy_14)][(int)(xx_15)] * k_2[(int)(j_12)][(int)(i_13)]));
                        i_13 = (i_13 + 1);
                    }
                    j_12 = (j_12 + 1);
                }
                row_9 = (Enumerable.ToArray(Enumerable.Append(row_9, sum_11)));
                x_10 = (x_10 + 1);
            }
            out_7 = (Enumerable.ToArray(Enumerable.Append(out_7, row_9)));
            y_8 = (y_8 + 1);
        };
        return out_7;
    }

    static double[][] gradient(double[][] img_16) {
        double[][] hx_17 = new double[][]{new double[]{-1.0, 0.0, 1.0}, new double[]{-2.0, 0.0, 2.0}, new double[]{-1.0, 0.0, 1.0}};
        double[][] hy_18 = new double[][]{new double[]{1.0, 2.0, 1.0}, new double[]{0.0, 0.0, 0.0}, new double[]{-1.0, -2.0, -1.0}};
        double[][] gx_19 = conv2d(img_16, hx_17);
        double[][] gy_20 = conv2d(img_16, hy_18);
        var h_21 = img_16.Length;
        var w_22 = img_16[(int)(0)].Length;
        double[][] out_23 = new double[][]{};
        long y_24 = 0;
        while ((Convert.ToDouble(y_24) < Convert.ToDouble(h_21))) {
            double[] row_25 = new double[]{};
            long x_26 = 0;
            while ((Convert.ToDouble(x_26) < Convert.ToDouble(w_22))) {
                double g_27 = ((gx_19[(int)(y_24)][(int)(x_26)] * gx_19[(int)(y_24)][(int)(x_26)]) + (gy_20[(int)(y_24)][(int)(x_26)] * gy_20[(int)(y_24)][(int)(x_26)]));
                row_25 = (Enumerable.ToArray(Enumerable.Append(row_25, g_27)));
                x_26 = (x_26 + 1);
            }
            out_23 = (Enumerable.ToArray(Enumerable.Append(out_23, row_25)));
            y_24 = (y_24 + 1);
        };
        return out_23;
    }

    static long[][] threshold(double[][] g_28, double t_29) {
        var h_30 = g_28.Length;
        var w_31 = g_28[(int)(0)].Length;
        long[][] out_32 = new long[][]{};
        long y_33 = 0;
        while ((Convert.ToDouble(y_33) < Convert.ToDouble(h_30))) {
            long[] row_34 = new long[]{};
            long x_35 = 0;
            while ((Convert.ToDouble(x_35) < Convert.ToDouble(w_31))) {
                if ((g_28[(int)(y_33)][(int)(x_35)] >= t_29)) {
                    row_34 = (Enumerable.ToArray(Enumerable.Append(row_34, 1)));
                } else {
                    row_34 = (Enumerable.ToArray(Enumerable.Append(row_34, 0)));
                }
                x_35 = (x_35 + 1);
            }
            out_32 = (Enumerable.ToArray(Enumerable.Append(out_32, row_34)));
            y_33 = (y_33 + 1);
        };
        return out_32;
    }

    static void printMatrix(long[][] m_36) {
        long y_37 = 0;
        while ((Convert.ToDouble(y_37) < Convert.ToDouble(m_36.Length))) {
            string line_38 = "";
            long x_39 = 0;
            while ((Convert.ToDouble(x_39) < Convert.ToDouble(m_36[(int)(0)].Length))) {
                line_38 = (line_38 + _fmt(m_36[(int)(y_37)][(int)(x_39)]));
                if ((x_39 < (((dynamic)(m_36[(int)(0)].Length)) - ((dynamic)(1))))) {
                    line_38 = (line_38 + " ");
                }
                x_39 = (x_39 + 1);
            }
            Console.WriteLine(_fmtTop(line_38));
            y_37 = (y_37 + 1);
        };
    }

    static void main() {
        double[][] img_40 = new double[][]{new double[]{0.0, 0.0, 0.0, 0.0, 0.0}, new double[]{0.0, 255.0, 255.0, 255.0, 0.0}, new double[]{0.0, 255.0, 255.0, 255.0, 0.0}, new double[]{0.0, 255.0, 255.0, 255.0, 0.0}, new double[]{0.0, 0.0, 0.0, 0.0, 0.0}};
        double[][] g_41 = gradient(img_40);
        long[][] edges_42 = threshold(g_41, (1020.0 * 1020.0));
        printMatrix(edges_42);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
