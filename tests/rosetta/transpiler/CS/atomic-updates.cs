// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] randOrder(long seed_0, long n_1) {
        long next_2 = (((seed_0 * 1664525) + 1013904223) % 2147483647);
        return new long[]{next_2, (next_2 % n_1)};
    }

    static long[] randChaos(long seed_3, long n_4) {
        long next_5 = (((seed_3 * 1103515245) + 12345) % 2147483647);
        return new long[]{next_5, (next_5 % n_4)};
    }

    static void main() {
        long nBuckets_6 = 10;
        long initialSum_7 = 1000;
        long[] buckets_8 = new long[]{};
        for (var i_9 = 0; i_9 < nBuckets_6; i_9++) {
            buckets_8 = (Enumerable.ToArray(Enumerable.Append(buckets_8, 0)));
        };
        long i_10 = nBuckets_6;
        long dist_11 = initialSum_7;
        while ((i_10 > 0)) {
            long v_12 = (dist_11 / i_10);
            i_10 = (i_10 - 1);
            buckets_8[i_10] = v_12;
            dist_11 = (dist_11 - v_12);
        };
        long tc0_13 = 0;
        long tc1_14 = 0;
        long total_15 = 0;
        long nTicks_16 = 0;
        long seedOrder_17 = 1;
        long seedChaos_18 = 2;
        Console.WriteLine(_fmtTop("sum  ---updates---    mean  buckets"));
        long t_19 = 0;
        while ((t_19 < 5)) {
            long[] r_20 = randOrder(seedOrder_17, nBuckets_6);
            seedOrder_17 = r_20[(int)(0)];
            long b1_21 = r_20[(int)(1)];
            long b2_22 = ((b1_21 + 1) % nBuckets_6);
            long v1_23 = buckets_8[(int)(b1_21)];
            long v2_24 = buckets_8[(int)(b2_22)];
            if ((v1_23 > v2_24)) {
                long a_25 = Convert.ToInt64(((v1_23 - v2_24) / 2));
                if ((a_25 > buckets_8[(int)(b1_21)])) {
                    a_25 = buckets_8[(int)(b1_21)];
                }
                buckets_8[b1_21] = (buckets_8[(int)(b1_21)] - a_25);
                buckets_8[b2_22] = (buckets_8[(int)(b2_22)] + a_25);
            } else {
                long a_26 = Convert.ToInt64(((v2_24 - v1_23) / 2));
                if ((a_26 > buckets_8[(int)(b2_22)])) {
                    a_26 = buckets_8[(int)(b2_22)];
                }
                buckets_8[b2_22] = (buckets_8[(int)(b2_22)] - a_26);
                buckets_8[b1_21] = (buckets_8[(int)(b1_21)] + a_26);
            }
            tc0_13 = (tc0_13 + 1);
            r_20 = randChaos(seedChaos_18, nBuckets_6);
            seedChaos_18 = r_20[(int)(0)];
            b1_21 = r_20[(int)(1)];
            b2_22 = ((b1_21 + 1) % nBuckets_6);
            r_20 = randChaos(seedChaos_18, (buckets_8[(int)(b1_21)] + 1));
            seedChaos_18 = r_20[(int)(0)];
            long amt_27 = r_20[(int)(1)];
            if ((amt_27 > buckets_8[(int)(b1_21)])) {
                amt_27 = buckets_8[(int)(b1_21)];
            }
            buckets_8[b1_21] = (buckets_8[(int)(b1_21)] - amt_27);
            buckets_8[b2_22] = (buckets_8[(int)(b2_22)] + amt_27);
            tc1_14 = (tc1_14 + 1);
            long sum_28 = 0;
            long idx_29 = 0;
            while ((idx_29 < nBuckets_6)) {
                sum_28 = (sum_28 + buckets_8[(int)(idx_29)]);
                idx_29 = (idx_29 + 1);
            }
            total_15 = ((total_15 + tc0_13) + tc1_14);
            nTicks_16 = (nTicks_16 + 1);
            Console.WriteLine(_fmtTop((((((((((sum_28).ToString() + " ") + (tc0_13).ToString()) + " ") + (tc1_14).ToString()) + " ") + ((total_15 / nTicks_16)).ToString()) + "  ") + (buckets_8).ToString())));
            tc0_13 = 0;
            tc1_14 = 0;
            t_19 = (t_19 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
