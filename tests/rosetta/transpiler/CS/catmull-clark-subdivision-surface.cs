// Generated by Mochi 0.10.52 on 2025-07-31 08:37 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Point {
    public double x;
    public double y;
    public double z;
    public override string ToString() => $"Point {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, z = {z.ToString("0.0")}}}";
}
class Edge {
    public long pn1;
    public long pn2;
    public long fn1;
    public long fn2;
    public Point cp;
    public override string ToString() => $"Edge {{pn1 = {pn1}, pn2 = {pn2}, fn1 = {fn1}, fn2 = {fn2}, cp = {cp}}}";
}
class PointEx {
    public Point p;
    public long n;
    public override string ToString() => $"PointEx {{p = {p}, n = {n}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((Convert.ToDouble(i_2) < Convert.ToDouble(s_0.Length))) {
            if ((s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2)) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    static string fmt4(double x_3) {
        double y_4 = (x_3 * 10000.0);
        if ((y_4 >= 0)) {
            y_4 = (y_4 + 0.5);
        } else {
            y_4 = (y_4 - 0.5);
        };
        y_4 = (Convert.ToDouble(Convert.ToInt64(y_4)) / 10000.0);
        string s_5 = _fmt(y_4);
        long dot_6 = indexOf(s_5, ".");
        if ((dot_6 == (0 - 1))) {
            s_5 = (s_5 + ".0000");
        } else {
            long decs_7 = ((((dynamic)(s_5.Length)) - ((dynamic)(dot_6))) - 1);
            if ((decs_7 > 4)) {
                s_5 = s_5.Substring((int)(0), (int)((dot_6 + 5) - 0));
            } else {
                while ((decs_7 < 4)) {
                    s_5 = (s_5 + "0");
                    decs_7 = (decs_7 + 1);
                }
            }
        };
        if ((x_3 >= 0.0)) {
            s_5 = (" " + s_5);
        };
        return s_5;
    }

    static string fmt2(long n_8) {
        string s_9 = _fmt(n_8);
        if ((Convert.ToDouble(s_9.Length) < Convert.ToDouble(2))) {
            return (" " + s_9);
        };
        return s_9;
    }

    static Point sumPoint(Point p1_10, Point p2_11) {
        return new Point{x = (p1_10.x + p2_11.x), y = (p1_10.y + p2_11.y), z = (p1_10.z + p2_11.z)};
    }

    static Point mulPoint(Point p_12, double m_13) {
        return new Point{x = (p_12.x * m_13), y = (p_12.y * m_13), z = (p_12.z * m_13)};
    }

    static Point divPoint(Point p_14, double d_15) {
        return mulPoint(p_14, (1.0 / d_15));
    }

    static Point centerPoint(Point p1_16, Point p2_17) {
        return divPoint(sumPoint(p1_16, p2_17), 2.0);
    }

    static Point[] getFacePoints(Point[] points_18, long[][] faces_19) {
        Point[] facePoints_20 = new Point[]{};
        long i_21 = 0;
        while ((Convert.ToDouble(i_21) < Convert.ToDouble(faces_19.Length))) {
            long[] face_22 = faces_19[(int)(i_21)];
            Point fp_23 = new Point{x = 0.0, y = 0.0, z = 0.0};
            foreach (var idx_24 in face_22) {
                fp_23 = sumPoint(fp_23, points_18[(int)(idx_24)]);
            }
            fp_23 = divPoint(fp_23, Convert.ToDouble(face_22.Length));
            facePoints_20 = (Enumerable.ToArray(Enumerable.Append(facePoints_20, fp_23)));
            i_21 = (i_21 + 1);
        };
        return facePoints_20;
    }

    static long[][] sortEdges(long[][] edges_25) {
        long[][] res_26 = new long[][]{};
        long[][] tmp_27 = edges_25;
        while ((Convert.ToDouble(tmp_27.Length) > Convert.ToDouble(0))) {
            long[] min_28 = tmp_27[(int)(0)];
            long idx_29 = 0;
            long j_30 = 1;
            while ((Convert.ToDouble(j_30) < Convert.ToDouble(tmp_27.Length))) {
                long[] e_31 = tmp_27[(int)(j_30)];
                if (((e_31[(int)(0)] < min_28[(int)(0)]) || ((e_31[(int)(0)] == min_28[(int)(0)]) && ((e_31[(int)(1)] < min_28[(int)(1)]) || ((e_31[(int)(1)] == min_28[(int)(1)]) && (e_31[(int)(2)] < min_28[(int)(2)])))))) {
                    min_28 = e_31;
                    idx_29 = j_30;
                }
                j_30 = (j_30 + 1);
            }
            res_26 = (Enumerable.ToArray(Enumerable.Append(res_26, min_28)));
            long[][] out_32 = new long[][]{};
            long k_33 = 0;
            while ((Convert.ToDouble(k_33) < Convert.ToDouble(tmp_27.Length))) {
                if ((k_33 != idx_29)) {
                    out_32 = (Enumerable.ToArray(Enumerable.Append(out_32, tmp_27[(int)(k_33)])));
                }
                k_33 = (k_33 + 1);
            }
            tmp_27 = out_32;
        };
        return res_26;
    }

    static Edge[] getEdgesFaces(Point[] points_34, long[][] faces_35) {
        long[][] edges_36 = new long[][]{};
        long fnum_37 = 0;
        while ((Convert.ToDouble(fnum_37) < Convert.ToDouble(faces_35.Length))) {
            long[] face_38 = faces_35[(int)(fnum_37)];
            var numP_39 = face_38.Length;
            long pi_40 = 0;
            while ((Convert.ToDouble(pi_40) < Convert.ToDouble(numP_39))) {
                long pn1_41 = face_38[(int)(pi_40)];
                long pn2_42 = 0;
                if ((pi_40 < (((dynamic)(numP_39)) - ((dynamic)(1))))) {
                    pn2_42 = face_38[(int)((pi_40 + 1))];
                } else {
                    pn2_42 = face_38[(int)(0)];
                }
                if ((pn1_41 > pn2_42)) {
                    long tmpn_43 = pn1_41;
                    pn1_41 = pn2_42;
                    pn2_42 = tmpn_43;
                }
                edges_36 = (Enumerable.ToArray(Enumerable.Append(edges_36, new long[]{pn1_41, pn2_42, fnum_37})));
                pi_40 = (pi_40 + 1);
            }
            fnum_37 = (fnum_37 + 1);
        };
        edges_36 = sortEdges(edges_36);
        long[][] merged_44 = new long[][]{};
        long idx_45 = 0;
        while ((Convert.ToDouble(idx_45) < Convert.ToDouble(edges_36.Length))) {
            long[] e1_46 = edges_36[(int)(idx_45)];
            if ((idx_45 < (((dynamic)(edges_36.Length)) - ((dynamic)(1))))) {
                long[] e2_47 = edges_36[(int)((idx_45 + 1))];
                if (((e1_46[(int)(0)] == e2_47[(int)(0)]) && (e1_46[(int)(1)] == e2_47[(int)(1)]))) {
                    merged_44 = (Enumerable.ToArray(Enumerable.Append(merged_44, new long[]{e1_46[(int)(0)], e1_46[(int)(1)], e1_46[(int)(2)], e2_47[(int)(2)]})));
                    idx_45 = (idx_45 + 2);
                    continue;
                }
            }
            merged_44 = (Enumerable.ToArray(Enumerable.Append(merged_44, new long[]{e1_46[(int)(0)], e1_46[(int)(1)], e1_46[(int)(2)], -1})));
            idx_45 = (idx_45 + 1);
        };
        Edge[] edgesCenters_48 = new Edge[]{};
        foreach (var me_49 in merged_44) {
            Point p1_50 = points_34[(int)(me_49[(int)(0)])];
            Point p2_51 = points_34[(int)(me_49[(int)(1)])];
            Point cp_52 = centerPoint(p1_50, p2_51);
            edgesCenters_48 = (Enumerable.ToArray(Enumerable.Append(edgesCenters_48, new Edge{pn1 = me_49[(int)(0)], pn2 = me_49[(int)(1)], fn1 = me_49[(int)(2)], fn2 = me_49[(int)(3)], cp = cp_52})));
        };
        return edgesCenters_48;
    }

    static Point[] getEdgePoints(Point[] points_53, Edge[] edgesFaces_54, Point[] facePoints_55) {
        Point[] edgePoints_56 = new Point[]{};
        long i_57 = 0;
        while ((Convert.ToDouble(i_57) < Convert.ToDouble(edgesFaces_54.Length))) {
            Edge edge_58 = edgesFaces_54[(int)(i_57)];
            Point cp_59 = edge_58.cp;
            Point fp1_60 = facePoints_55[(int)(edge_58.fn1)];
            Point fp2_61 = fp1_60;
            if ((edge_58.fn2 != (0 - 1))) {
                fp2_61 = facePoints_55[(int)(edge_58.fn2)];
            }
            Point cfp_62 = centerPoint(fp1_60, fp2_61);
            edgePoints_56 = (Enumerable.ToArray(Enumerable.Append(edgePoints_56, centerPoint(cp_59, cfp_62))));
            i_57 = (i_57 + 1);
        };
        return edgePoints_56;
    }

    static Point[] getAvgFacePoints(Point[] points_63, long[][] faces_64, Point[] facePoints_65) {
        var numP_66 = points_63.Length;
        PointEx[] temp_67 = new PointEx[]{};
        long i_68 = 0;
        while ((Convert.ToDouble(i_68) < Convert.ToDouble(numP_66))) {
            temp_67 = (Enumerable.ToArray(Enumerable.Append(temp_67, new PointEx{p = new Point{x = 0.0, y = 0.0, z = 0.0}, n = 0})));
            i_68 = (i_68 + 1);
        };
        long fnum_69 = 0;
        while ((Convert.ToDouble(fnum_69) < Convert.ToDouble(faces_64.Length))) {
            Point fp_70 = facePoints_65[(int)(fnum_69)];
            foreach (var pn_71 in faces_64[(int)(fnum_69)]) {
                PointEx tp_72 = temp_67[(int)(pn_71)];
                temp_67[pn_71] = new PointEx{p = sumPoint(tp_72.p, fp_70), n = (tp_72.n + 1)};
            }
            fnum_69 = (fnum_69 + 1);
        };
        Point[] avg_73 = new Point[]{};
        long j_74 = 0;
        while ((Convert.ToDouble(j_74) < Convert.ToDouble(numP_66))) {
            PointEx tp_75 = temp_67[(int)(j_74)];
            avg_73 = (Enumerable.ToArray(Enumerable.Append(avg_73, divPoint(tp_75.p, Convert.ToDouble(tp_75.n)))));
            j_74 = (j_74 + 1);
        };
        return avg_73;
    }

    static Point[] getAvgMidEdges(Point[] points_76, Edge[] edgesFaces_77) {
        var numP_78 = points_76.Length;
        PointEx[] temp_79 = new PointEx[]{};
        long i_80 = 0;
        while ((Convert.ToDouble(i_80) < Convert.ToDouble(numP_78))) {
            temp_79 = (Enumerable.ToArray(Enumerable.Append(temp_79, new PointEx{p = new Point{x = 0.0, y = 0.0, z = 0.0}, n = 0})));
            i_80 = (i_80 + 1);
        };
        foreach (var edge_81 in edgesFaces_77) {
            Point cp_82 = edge_81.cp;
            long[] arr_83 = new long[]{edge_81.pn1, edge_81.pn2};
            foreach (var pn_84 in arr_83) {
                PointEx tp_85 = temp_79[(int)(pn_84)];
                temp_79[pn_84] = new PointEx{p = sumPoint(tp_85.p, cp_82), n = (tp_85.n + 1)};
            }
        };
        Point[] avg_86 = new Point[]{};
        long j_87 = 0;
        while ((Convert.ToDouble(j_87) < Convert.ToDouble(numP_78))) {
            PointEx tp_88 = temp_79[(int)(j_87)];
            avg_86 = (Enumerable.ToArray(Enumerable.Append(avg_86, divPoint(tp_88.p, Convert.ToDouble(tp_88.n)))));
            j_87 = (j_87 + 1);
        };
        return avg_86;
    }

    static long[] getPointsFaces(Point[] points_89, long[][] faces_90) {
        long[] pf_91 = new long[]{};
        long i_92 = 0;
        while ((Convert.ToDouble(i_92) < Convert.ToDouble(points_89.Length))) {
            pf_91 = (Enumerable.ToArray(Enumerable.Append(pf_91, 0)));
            i_92 = (i_92 + 1);
        };
        long fnum_93 = 0;
        while ((Convert.ToDouble(fnum_93) < Convert.ToDouble(faces_90.Length))) {
            foreach (var pn_94 in faces_90[(int)(fnum_93)]) {
                pf_91[pn_94] = (pf_91[(int)(pn_94)] + 1);
            }
            fnum_93 = (fnum_93 + 1);
        };
        return pf_91;
    }

    static Point[] getNewPoints(Point[] points_95, long[] pf_96, Point[] afp_97, Point[] ame_98) {
        Point[] newPts_99 = new Point[]{};
        long i_100 = 0;
        while ((Convert.ToDouble(i_100) < Convert.ToDouble(points_95.Length))) {
            double n_101 = Convert.ToDouble(pf_96[(int)(i_100)]);
            double m1_102 = ((n_101 - 3.0) / n_101);
            double m2_103 = (1.0 / n_101);
            double m3_104 = (2.0 / n_101);
            Point old_105 = points_95[(int)(i_100)];
            Point p1_106 = mulPoint(old_105, m1_102);
            Point p2_107 = mulPoint(afp_97[(int)(i_100)], m2_103);
            Point p3_108 = mulPoint(ame_98[(int)(i_100)], m3_104);
            newPts_99 = (Enumerable.ToArray(Enumerable.Append(newPts_99, sumPoint(sumPoint(p1_106, p2_107), p3_108))));
            i_100 = (i_100 + 1);
        };
        return newPts_99;
    }

    static string key(long a_109, long b_110) {
        if ((a_109 < b_110)) {
            return ((_fmt(a_109) + ",") + _fmt(b_110));
        };
        return ((_fmt(b_110) + ",") + _fmt(a_109));
    }

    static object[] cmcSubdiv(Point[] points_111, long[][] faces_112) {
        Point[] facePoints_113 = getFacePoints(points_111, faces_112);
        Edge[] edgesFaces_114 = getEdgesFaces(points_111, faces_112);
        Point[] edgePoints_115 = getEdgePoints(points_111, edgesFaces_114, facePoints_113);
        Point[] avgFacePoints_116 = getAvgFacePoints(points_111, faces_112, facePoints_113);
        Point[] avgMidEdges_117 = getAvgMidEdges(points_111, edgesFaces_114);
        long[] pointsFaces_118 = getPointsFaces(points_111, faces_112);
        Point[] newPoints_119 = getNewPoints(points_111, pointsFaces_118, avgFacePoints_116, avgMidEdges_117);
        long[] facePointNums_120 = new long[]{};
        long nextPoint_121 = newPoints_119.Length;
        foreach (var fp_122 in facePoints_113) {
            newPoints_119 = (Enumerable.ToArray(Enumerable.Append(newPoints_119, fp_122)));
            facePointNums_120 = (Enumerable.ToArray(Enumerable.Append(facePointNums_120, nextPoint_121)));
            nextPoint_121 = (nextPoint_121 + 1);
        };
        Dictionary<string, long> edgePointNums_123 = new Dictionary<string, long>{};
        long idx_124 = 0;
        while ((Convert.ToDouble(idx_124) < Convert.ToDouble(edgesFaces_114.Length))) {
            Edge e_125 = edgesFaces_114[(int)(idx_124)];
            newPoints_119 = (Enumerable.ToArray(Enumerable.Append(newPoints_119, edgePoints_115[(int)(idx_124)])));
            edgePointNums_123[key(e_125.pn1, e_125.pn2)] = nextPoint_121;
            nextPoint_121 = (nextPoint_121 + 1);
            idx_124 = (idx_124 + 1);
        };
        long[][] newFaces_126 = new long[][]{};
        long fnum_127 = 0;
        while ((Convert.ToDouble(fnum_127) < Convert.ToDouble(faces_112.Length))) {
            long[] oldFace_128 = faces_112[(int)(fnum_127)];
            if ((oldFace_128.Length == 4)) {
                long a_129 = oldFace_128[(int)(0)];
                long b_130 = oldFace_128[(int)(1)];
                long c_131 = oldFace_128[(int)(2)];
                long d_132 = oldFace_128[(int)(3)];
                long fpnum_133 = facePointNums_120[(int)(fnum_127)];
                long ab_134 = (edgePointNums_123.ContainsKey(key(a_129, b_130)) ? edgePointNums_123[key(a_129, b_130)] : 0);
                long da_135 = (edgePointNums_123.ContainsKey(key(d_132, a_129)) ? edgePointNums_123[key(d_132, a_129)] : 0);
                long bc_136 = (edgePointNums_123.ContainsKey(key(b_130, c_131)) ? edgePointNums_123[key(b_130, c_131)] : 0);
                long cd_137 = (edgePointNums_123.ContainsKey(key(c_131, d_132)) ? edgePointNums_123[key(c_131, d_132)] : 0);
                newFaces_126 = (Enumerable.ToArray(Enumerable.Append(newFaces_126, new long[]{a_129, ab_134, fpnum_133, da_135})));
                newFaces_126 = (Enumerable.ToArray(Enumerable.Append(newFaces_126, new long[]{b_130, bc_136, fpnum_133, ab_134})));
                newFaces_126 = (Enumerable.ToArray(Enumerable.Append(newFaces_126, new long[]{c_131, cd_137, fpnum_133, bc_136})));
                newFaces_126 = (Enumerable.ToArray(Enumerable.Append(newFaces_126, new long[]{d_132, da_135, fpnum_133, cd_137})));
            }
            fnum_127 = (fnum_127 + 1);
        };
        return new object[]{newPoints_119, newFaces_126};
    }

    static string formatPoint(Point p_138) {
        return (((((("[" + fmt4(p_138.x)) + " ") + fmt4(p_138.y)) + " ") + fmt4(p_138.z)) + "]");
    }

    static string formatFace(long[] f_139) {
        if ((f_139.Length == 0)) {
            return "[]";
        };
        string s_140 = ("[" + fmt2(f_139[(int)(0)]));
        long i_141 = 1;
        while ((Convert.ToDouble(i_141) < Convert.ToDouble(f_139.Length))) {
            s_140 = ((s_140 + " ") + fmt2(f_139[(int)(i_141)]));
            i_141 = (i_141 + 1);
        };
        s_140 = (s_140 + "]");
        return s_140;
    }

    static void main() {
        Point[] inputPoints_142 = new Point[]{new Point{x = -1.0, y = 1.0, z = 1.0}, new Point{x = -1.0, y = -1.0, z = 1.0}, new Point{x = 1.0, y = -1.0, z = 1.0}, new Point{x = 1.0, y = 1.0, z = 1.0}, new Point{x = 1.0, y = -1.0, z = -1.0}, new Point{x = 1.0, y = 1.0, z = -1.0}, new Point{x = -1.0, y = -1.0, z = -1.0}, new Point{x = -1.0, y = 1.0, z = -1.0}};
        long[][] inputFaces_143 = new long[][]{new long[]{0, 1, 2, 3}, new long[]{3, 2, 4, 5}, new long[]{5, 4, 6, 7}, new long[]{7, 0, 3, 5}, new long[]{7, 6, 1, 0}, new long[]{6, 1, 2, 4}};
        Point[] outputPoints_144 = inputPoints_142;
        long[][] outputFaces_145 = inputFaces_143;
        long i_146 = 0;
        while ((i_146 < 1)) {
            object[] res_147 = cmcSubdiv(outputPoints_144, outputFaces_145);
            outputPoints_144 = ((dynamic)res_147)[0];
            outputFaces_145 = ((dynamic)res_147)[1];
            i_146 = (i_146 + 1);
        };
        foreach (var p_148 in outputPoints_144) {
            Console.WriteLine(_fmtTop(formatPoint(p_148)));
        };
        Console.WriteLine(_fmtTop(""));
        foreach (var f_149 in outputFaces_145) {
            Console.WriteLine(_fmtTop(formatFace(f_149)));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
