// Generated by Mochi 0.10.41 on 2025-07-27 07:48 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Point {
    public long x;
    public long y;
    public override string ToString() => $"Point {{x = {x}, y = {y}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Point[] pts_22 = new Point[]{new Point{x = 16, y = 3}, new Point{x = 12, y = 17}, new Point{x = 0, y = 6}, new Point{x = -4, y = -6}, new Point{x = 16, y = 6}, new Point{x = 16, y = -7}, new Point{x = 16, y = -3}, new Point{x = 17, y = -4}, new Point{x = 5, y = 19}, new Point{x = 19, y = -8}, new Point{x = 3, y = 16}, new Point{x = 12, y = 13}, new Point{x = 3, y = -4}, new Point{x = 17, y = 5}, new Point{x = -3, y = 15}, new Point{x = -3, y = -9}, new Point{x = 0, y = 11}, new Point{x = -9, y = -3}, new Point{x = -4, y = -2}, new Point{x = 12, y = 10}};
    static Point[] hull_23 = convexHull(pts_22);
    static bool ccw(Point a_0, Point b_1, Point c_2) {
        long lhs_3 = ((b_1.x - a_0.x) * (c_2.y - a_0.y));
        long rhs_4 = ((b_1.y - a_0.y) * (c_2.x - a_0.x));
        return (lhs_3 > rhs_4);
    }

    static Point[] sortPoints(Point[] ps_5) {
        Point[] arr_6 = ps_5;
        var n_7 = arr_6.Length;
        long i_8 = 0;
        while ((i_8 < n_7)) {
            long j_9 = 0;
            while ((j_9 < (((dynamic)n_7) - ((dynamic)1)))) {
                Point p_10 = arr_6[(int)(j_9)];
                Point q_11 = arr_6[(int)((j_9 + 1))];
                if (((p_10.x > q_11.x) || ((p_10.x == q_11.x) && (p_10.y > q_11.y)))) {
                    arr_6[j_9] = q_11;
                    arr_6[(j_9 + 1)] = p_10;
                }
                j_9 = (j_9 + 1);
            }
            i_8 = (i_8 + 1);
        };
        return arr_6;
    }

    static Point[] convexHull(Point[] ps_12) {
        ps_12 = sortPoints(ps_12);
        Point[] h_13 = new Point[]{};
        foreach (var pt_14 in ps_12) {
            while (((h_13.Length >= 2) && (ccw(h_13[(int)((((dynamic)h_13.Length) - ((dynamic)2)))], h_13[(int)((((dynamic)h_13.Length) - ((dynamic)1)))], pt_14) == false))) {
                h_13 = h_13.Skip((int)(0)).Take((int)(((((dynamic)h_13.Length) - ((dynamic)1)) - 0))).ToArray();
            }
            h_13 = (Enumerable.ToArray(Enumerable.Append(h_13, pt_14)));
        };
        long i_15 = (((dynamic)ps_12.Length) - ((dynamic)2));
        long t_16 = (((dynamic)h_13.Length) + ((dynamic)1));
        while ((i_15 >= 0)) {
            Point pt_17 = ps_12[(int)(i_15)];
            while (((h_13.Length >= t_16) && (ccw(h_13[(int)((((dynamic)h_13.Length) - ((dynamic)2)))], h_13[(int)((((dynamic)h_13.Length) - ((dynamic)1)))], pt_17) == false))) {
                h_13 = h_13.Skip((int)(0)).Take((int)(((((dynamic)h_13.Length) - ((dynamic)1)) - 0))).ToArray();
            }
            h_13 = (Enumerable.ToArray(Enumerable.Append(h_13, pt_17)));
            i_15 = (i_15 - 1);
        };
        return h_13.Skip((int)(0)).Take((int)(((((dynamic)h_13.Length) - ((dynamic)1)) - 0))).ToArray();
    }

    static string pointStr(Point p_18) {
        return (((("(" + (p_18.x).ToString()) + ",") + (p_18.y).ToString()) + ")");
    }

    static string hullStr(Point[] h_19) {
        string s_20 = "[";
        long i_21 = 0;
        while ((i_21 < h_19.Length)) {
            s_20 = (s_20 + pointStr(h_19[(int)(i_21)]));
            if ((i_21 < (((dynamic)h_19.Length) - ((dynamic)1)))) {
                s_20 = (s_20 + " ");
            }
            i_21 = (i_21 + 1);
        };
        s_20 = (s_20 + "]");
        return s_20;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(("Convex Hull: " + hullStr(hull_23))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
