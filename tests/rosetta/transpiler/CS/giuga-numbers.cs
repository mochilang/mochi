// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] primeFactors(long n_0) {
        long[] factors_1 = new long[]{};
        long last_2 = 0;
        long x_3 = n_0;
        while (((x_3 % 2) == 0)) {
            if ((last_2 == 2)) {
                return new long[]{};
            }
            factors_1 = (Enumerable.ToArray(Enumerable.Append(factors_1, 2)));
            last_2 = 2;
            x_3 = (x_3 / 2);
        };
        long p_4 = 3;
        while (((p_4 * p_4) <= x_3)) {
            while (((x_3 % p_4) == 0)) {
                if ((last_2 == p_4)) {
                    return new long[]{};
                }
                factors_1 = (Enumerable.ToArray(Enumerable.Append(factors_1, p_4)));
                last_2 = p_4;
                x_3 = (x_3 / p_4);
            }
            p_4 = (p_4 + 2);
        };
        if ((x_3 > 1)) {
            if ((last_2 == x_3)) {
                return new long[]{};
            }
            factors_1 = (Enumerable.ToArray(Enumerable.Append(factors_1, x_3)));
        };
        return factors_1;
    }

    static bool isGiuga(long n_5) {
        long[] facs_6 = primeFactors(n_5);
        if ((facs_6.Length <= 2)) {
            return false;
        };
        foreach (var f_7 in facs_6) {
            if (((((n_5 / f_7) - 1) % f_7) != 0)) {
                return false;
            }
        };
        return true;
    }

    static void main() {
        long[] known_8 = new long[]{30, 858, 1722, 66198};
        long[] nums_9 = new long[]{};
        foreach (var n_10 in known_8) {
            if (isGiuga(n_10)) {
                nums_9 = (Enumerable.ToArray(Enumerable.Append(nums_9, n_10)));
            }
        };
        Console.WriteLine(_fmtTop("The first 4 Giuga numbers are:"));
        Console.WriteLine(_fmtTop(nums_9));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
