// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool amb(string[][] wordsets, string[] res, int idx) {
        if ((idx == wordsets.Length)) {
            return true;
        };
        string prev = "";
        if ((idx > 0)) {
            prev = res[(idx - 1)];
        };
        int i = 0;
        while ((i < wordsets[idx].Length)) {
            string w = wordsets[idx][i];
            if (((idx == 0) || (prev.Substring((prev.Length - 1), (prev.Length - (prev.Length - 1))) == w.Substring(0, (1 - 0))))) {
                res[idx] = w;
                if (amb(wordsets, res, (idx + 1))) {
                    return true;
                }
            }
            i = (i + 1);
        };
        return false;
    }

    static void main() {
        string[][] wordset = new string[][]{new string[]{"the", "that", "a"}, new string[]{"frog", "elephant", "thing"}, new string[]{"walked", "treaded", "grows"}, new string[]{"slowly", "quickly"}};
        string[] res = new string[]{};
        int i = 0;
        while ((i < wordset.Length)) {
            res = (res.Append("").ToArray());
            i = (i + 1);
        };
        if (amb(wordset, res, 0)) {
            string _out = ("[" + res[0]);
            int j = 1;
            while ((j < res.Length)) {
                _out = ((_out + " ") + res[j]);
                j = (j + 1);
            }
            _out = (_out + "]");
            Console.WriteLine(_fmtTop(_out));
        } else {
            Console.WriteLine(_fmtTop("No amb found"));
        };
    }

    static void Main() {
        main();
    }
}
