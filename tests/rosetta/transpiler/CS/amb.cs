// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool amb(string[][] wordsets_0, string[] res_1, long idx_2) {
        if ((idx_2 == wordsets_0.Length)) {
            return true;
        };
        string prev_3 = "";
        if ((idx_2 > 0)) {
            prev_3 = res_1[(int)((idx_2 - 1))];
        };
        long i_4 = 0;
        while ((i_4 < wordsets_0[(int)(idx_2)].Length)) {
            string w_5 = wordsets_0[(int)(idx_2)][(int)(i_4)];
            if (((idx_2 == 0) || (prev_3.Substring((int)((((dynamic)(prev_3.Length)) - ((dynamic)(1)))), (int)(prev_3.Length - (((dynamic)(prev_3.Length)) - ((dynamic)(1))))) == w_5.Substring((int)(0), (int)(1 - 0))))) {
                res_1[idx_2] = w_5;
                if (amb(wordsets_0, res_1, (idx_2 + 1))) {
                    return true;
                }
            }
            i_4 = (i_4 + 1);
        };
        return false;
    }

    static void main() {
        string[][] wordset_6 = new string[][]{new string[]{"the", "that", "a"}, new string[]{"frog", "elephant", "thing"}, new string[]{"walked", "treaded", "grows"}, new string[]{"slowly", "quickly"}};
        string[] res_7 = new string[]{};
        long i_8 = 0;
        while ((i_8 < wordset_6.Length)) {
            res_7 = (Enumerable.ToArray(Enumerable.Append(res_7, "")));
            i_8 = (i_8 + 1);
        };
        if (amb(wordset_6, res_7, 0)) {
            string out_9 = ("[" + res_7[(int)(0)]);
            long j_10 = 1;
            while ((j_10 < res_7.Length)) {
                out_9 = ((out_9 + " ") + res_7[(int)(j_10)]);
                j_10 = (j_10 + 1);
            }
            out_9 = (out_9 + "]");
            Console.WriteLine(_fmtTop(out_9));
        } else {
            Console.WriteLine(_fmtTop("No amb found"));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
