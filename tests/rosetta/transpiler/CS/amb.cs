// Generated by Mochi 0.10.40 on 2025-07-25 20:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool amb(string[][] wordsets, string[] res, long idx) {
        if ((idx == wordsets.Length)) {
            return true;
        };
        string prev_0 = "";
        if ((idx > 0)) {
            prev_0 = res[(int)((idx - 1))];
        };
        long i_1 = 0;
        while ((i_1 < wordsets[(int)(idx)].Length)) {
            string w_2 = wordsets[(int)(idx)][(int)(i_1)];
            if (((idx == 0) || (prev_0.Substring((int)((((dynamic)prev_0.Length) - ((dynamic)1))), (int)(prev_0.Length - (((dynamic)prev_0.Length) - ((dynamic)1)))) == w_2.Substring((int)(0), (int)(1 - 0))))) {
                res[idx] = w_2;
                if (amb(wordsets, res, (idx + 1))) {
                    return true;
                }
            }
            i_1 = (i_1 + 1);
        };
        return false;
    }

    static void main() {
        string[][] wordset_3 = new string[][]{new string[]{"the", "that", "a"}, new string[]{"frog", "elephant", "thing"}, new string[]{"walked", "treaded", "grows"}, new string[]{"slowly", "quickly"}};
        string[] res_4 = new string[]{};
        long i_5 = 0;
        while ((i_5 < wordset_3.Length)) {
            res_4 = (Enumerable.ToArray(Enumerable.Append(res_4, "")));
            i_5 = (i_5 + 1);
        };
        if (amb(wordset_3, res_4, 0)) {
            string out_6 = ("[" + res_4[(int)(0)]);
            long j_7 = 1;
            while ((j_7 < res_4.Length)) {
                out_6 = ((out_6 + " ") + res_4[(int)(j_7)]);
                j_7 = (j_7 + 1);
            }
            out_6 = (out_6 + "]");
            Console.WriteLine(_fmtTop(out_6));
        } else {
            Console.WriteLine(_fmtTop("No amb found"));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
