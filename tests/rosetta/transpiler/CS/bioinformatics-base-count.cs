// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string dna_2 = (((((((((("" + "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG") + "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG") + "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT") + "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT") + "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG") + "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA") + "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT") + "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG") + "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC") + "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT");
    static dynamic le_3 = dna_2.Length;
    static long i_4 = 0;
    static long a_6 = 0;
    static long c_7 = 0;
    static long g_8 = 0;
    static long t_9 = 0;
    static long idx_10 = 0;
    static string padLeft(string s, long w) {
        string res_0 = "";
        long n_1 = (((dynamic)w) - ((dynamic)s.Length));
        while ((n_1 > 0)) {
            res_0 = (res_0 + " ");
            n_1 = (n_1 - 1);
        };
        return (res_0 + s);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop("SEQUENCE:"));
            while ((i_4 < le_3)) {
                long k_5 = (i_4 + 50);
                if ((k_5 > le_3)) {
                    k_5 = le_3;
                }
                Console.WriteLine(_fmtTop(((padLeft((i_4).ToString(), 5) + ": ") + dna_2.Substring((int)(i_4), (int)(k_5 - i_4)))));
                i_4 = (i_4 + 50);
            }
            while ((idx_10 < le_3)) {
                string ch_11 = dna_2.Substring((int)(idx_10), (int)((idx_10 + 1) - idx_10));
                if ((ch_11 == "A")) {
                    a_6 = (a_6 + 1);
                } else {
                    if ((ch_11 == "C")) {
                        c_7 = (c_7 + 1);
                    } else {
                        if ((ch_11 == "G")) {
                            g_8 = (g_8 + 1);
                        } else {
                            if ((ch_11 == "T")) {
                                t_9 = (t_9 + 1);
                            }
                        }
                    }
                }
                idx_10 = (idx_10 + 1);
            }
            Console.WriteLine(_fmtTop(""));
            Console.WriteLine(_fmtTop("BASE COUNT:"));
            Console.WriteLine(_fmtTop(("    A: " + padLeft((a_6).ToString(), 3))));
            Console.WriteLine(_fmtTop(("    C: " + padLeft((c_7).ToString(), 3))));
            Console.WriteLine(_fmtTop(("    G: " + padLeft((g_8).ToString(), 3))));
            Console.WriteLine(_fmtTop(("    T: " + padLeft((t_9).ToString(), 3))));
            Console.WriteLine(_fmtTop("    ------"));
            Console.WriteLine(_fmtTop(("    Î£: " + (le_3).ToString())));
            Console.WriteLine(_fmtTop("    ======"));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
