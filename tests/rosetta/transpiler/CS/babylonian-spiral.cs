// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, long>[] push(Dictionary<string, long>[] h_0, Dictionary<string, long> it_1) {
        h_0 = (Enumerable.ToArray(Enumerable.Append(h_0, it_1)));
        long i_2 = (((dynamic)(h_0.Length)) - ((dynamic)(1)));
        while (((i_2 > 0) && ((h_0[(int)((i_2 - 1))].ContainsKey("s") ? h_0[(int)((i_2 - 1))]["s"] : 0) > (h_0[(int)(i_2)].ContainsKey("s") ? h_0[(int)(i_2)]["s"] : 0)))) {
            Dictionary<string, long> tmp_3 = h_0[(int)((i_2 - 1))];
            h_0[(i_2 - 1)] = h_0[(int)(i_2)];
            h_0[i_2] = tmp_3;
            i_2 = (i_2 - 1);
        };
        return h_0;
    }

    static Dictionary<string, object> step(Dictionary<string, long>[] h_4, long nv_5, long[] dir_6) {
        while (((h_4.Length == 0) || ((nv_5 * nv_5) <= (h_4[(int)(0)].ContainsKey("s") ? h_4[(int)(0)]["s"] : 0)))) {
            h_4 = push(h_4, new Dictionary<string, long>{{"s", (nv_5 * nv_5)}, {"a", nv_5}, {"b", 0}});
            nv_5 = (nv_5 + 1);
        };
        long s_7 = (h_4[(int)(0)].ContainsKey("s") ? h_4[(int)(0)]["s"] : 0);
        long[][] v_8 = new long[][]{};
        while (((string.Compare(Convert.ToString(h_4.Length), Convert.ToString(0)) > 0) && ((h_4[(int)(0)].ContainsKey("s") ? h_4[(int)(0)]["s"] : 0) == s_7))) {
            Dictionary<string, long> it_9 = h_4[(int)(0)];
            h_4 = h_4.Skip((int)(1)).Take((int)((h_4.Length - 1))).ToArray();
            v_8 = (Enumerable.ToArray(Enumerable.Append(v_8, new long[]{(it_9.ContainsKey("a") ? it_9["a"] : 0), (it_9.ContainsKey("b") ? it_9["b"] : 0)})));
            if (((it_9.ContainsKey("a") ? it_9["a"] : 0) > (it_9.ContainsKey("b") ? it_9["b"] : 0))) {
                h_4 = push(h_4, new Dictionary<string, long>{{"s", (((it_9.ContainsKey("a") ? it_9["a"] : 0) * (it_9.ContainsKey("a") ? it_9["a"] : 0)) + (((it_9.ContainsKey("b") ? it_9["b"] : 0) + 1) * ((it_9.ContainsKey("b") ? it_9["b"] : 0) + 1)))}, {"a", (it_9.ContainsKey("a") ? it_9["a"] : 0)}, {"b", ((it_9.ContainsKey("b") ? it_9["b"] : 0) + 1)}});
            }
        };
        long[][] list_10 = new long[][]{};
        foreach (var p_11 in v_8) {
            list_10 = (Enumerable.ToArray(Enumerable.Append(list_10, p_11)));
        };
        long[][] temp_12 = list_10;
        foreach (var p_13 in temp_12) {
            if ((p_13[(int)(0)] != p_13[(int)(1)])) {
                list_10 = (Enumerable.ToArray(Enumerable.Append(list_10, new long[]{p_13[(int)(1)], p_13[(int)(0)]})));
            }
        };
        temp_12 = list_10;
        foreach (var p_14 in temp_12) {
            if ((p_14[(int)(1)] != 0)) {
                list_10 = (Enumerable.ToArray(Enumerable.Append(list_10, new long[]{p_14[(int)(0)], -p_14[(int)(1)]})));
            }
        };
        temp_12 = list_10;
        foreach (var p_15 in temp_12) {
            if ((p_15[(int)(0)] != 0)) {
                list_10 = (Enumerable.ToArray(Enumerable.Append(list_10, new long[]{-p_15[(int)(0)], p_15[(int)(1)]})));
            }
        };
        long bestDot_16 = -999999999;
        long[] best_17 = dir_6;
        foreach (var p_18 in list_10) {
            long cross_19 = ((p_18[(int)(0)] * dir_6[(int)(1)]) - (p_18[(int)(1)] * dir_6[(int)(0)]));
            if ((cross_19 >= 0)) {
                long dot_20 = ((p_18[(int)(0)] * dir_6[(int)(0)]) + (p_18[(int)(1)] * dir_6[(int)(1)]));
                if ((dot_20 > bestDot_16)) {
                    bestDot_16 = dot_20;
                    best_17 = p_18;
                }
            }
        };
        return new Dictionary<string, object>{{"d", best_17}, {"heap", h_4}, {"n", nv_5}};
    }

    static long[][] positions(long n_21) {
        long[][] pos_22 = new long[][]{};
        long x_23 = 0;
        long y_24 = 0;
        long[] dir_25 = new long[]{0, 1};
        Dictionary<string, long>[] heap_26 = new Dictionary<string, long>[]{};
        long nv_27 = 1;
        long i_28 = 0;
        while ((i_28 < n_21)) {
            pos_22 = (Enumerable.ToArray(Enumerable.Append(pos_22, new long[]{x_23, y_24})));
            Dictionary<string, object> st_29 = step(heap_26, nv_27, dir_25);
            dir_25 = (((dynamic)st_29)["d"] as long[]) ?? new long[]{};
            heap_26 = (((dynamic)st_29)["heap"] as Dictionary<string, long>[]) ?? new Dictionary<string, long>[]{};
            nv_27 = Convert.ToInt64(((dynamic)st_29)["n"]);
            x_23 = (x_23 + dir_25[(int)(0)]);
            y_24 = (y_24 + dir_25[(int)(1)]);
            i_28 = (i_28 + 1);
        };
        return pos_22;
    }

    static string pad(string s_30, long w_31) {
        string r_32 = s_30;
        while ((string.Compare(Convert.ToString(r_32.Length), Convert.ToString(w_31)) < 0)) {
            r_32 = (r_32 + " ");
        };
        return r_32;
    }

    static void main() {
        long[][] pts_33 = positions(40);
        Console.WriteLine(_fmtTop("The first 40 Babylonian spiral points are:"));
        string line_34 = "";
        long i_35 = 0;
        while ((string.Compare(Convert.ToString(i_35), Convert.ToString(pts_33.Length)) < 0)) {
            long[] p_36 = pts_33[(int)(i_35)];
            string s_37 = pad((((("(" + (p_36[(int)(0)]).ToString()) + ", ") + (p_36[(int)(1)]).ToString()) + ")"), 10);
            line_34 = (line_34 + s_37);
            if ((((i_35 + 1) % 10) == 0)) {
                Console.WriteLine(_fmtTop(line_34));
                line_34 = "";
            }
            i_35 = (i_35 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
