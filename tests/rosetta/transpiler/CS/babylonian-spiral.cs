// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, long>[] push(Dictionary<string, long>[] h, Dictionary<string, long> it) {
        h = (Enumerable.ToArray(Enumerable.Append(h, it)));
        long i_0 = (((dynamic)h.Length) - ((dynamic)1));
        while (((i_0 > 0) && (((h.ContainsKey((i_0 - 1)) ? h[(i_0 - 1)] : null).ContainsKey("s") ? (h.ContainsKey((i_0 - 1)) ? h[(i_0 - 1)] : null)["s"] : 0) > ((h.ContainsKey(i_0) ? h[i_0] : null).ContainsKey("s") ? (h.ContainsKey(i_0) ? h[i_0] : null)["s"] : 0)))) {
            Dictionary<string, long> tmp_1 = (h.ContainsKey((i_0 - 1)) ? h[(i_0 - 1)] : null);
            h[(i_0 - 1)] = (h.ContainsKey(i_0) ? h[i_0] : null);
            h[i_0] = tmp_1;
            i_0 = (i_0 - 1);
        };
        return h;
    }

    static Dictionary<string, object> step(Dictionary<string, long>[] h, long nv, long[] dir) {
        while (((h.Length == 0) || ((nv * nv) <= ((h.ContainsKey(0) ? h[0] : null).ContainsKey("s") ? (h.ContainsKey(0) ? h[0] : null)["s"] : 0)))) {
            h = push(h, new Dictionary<string, long>{{"s", (nv * nv)}, {"a", nv}, {"b", 0}});
            nv = (nv + 1);
        };
        long s_2 = ((h.ContainsKey(0) ? h[0] : null).ContainsKey("s") ? (h.ContainsKey(0) ? h[0] : null)["s"] : 0);
        long[][] v_3 = new long[][]{};
        while (((h.Length > 0) && (((h.ContainsKey(0) ? h[0] : null).ContainsKey("s") ? (h.ContainsKey(0) ? h[0] : null)["s"] : 0) == s_2))) {
            Dictionary<string, long> it_4 = (h.ContainsKey(0) ? h[0] : null);
            h = h.Skip((int)(1)).Take((int)((h.Length - 1))).ToArray();
            v_3 = (Enumerable.ToArray(Enumerable.Append(v_3, new long[]{(it_4.ContainsKey("a") ? it_4["a"] : 0), (it_4.ContainsKey("b") ? it_4["b"] : 0)})));
            if (((it_4.ContainsKey("a") ? it_4["a"] : 0) > (it_4.ContainsKey("b") ? it_4["b"] : 0))) {
                h = push(h, new Dictionary<string, long>{{"s", (((it_4.ContainsKey("a") ? it_4["a"] : 0) * (it_4.ContainsKey("a") ? it_4["a"] : 0)) + (((it_4.ContainsKey("b") ? it_4["b"] : 0) + 1) * ((it_4.ContainsKey("b") ? it_4["b"] : 0) + 1)))}, {"a", (it_4.ContainsKey("a") ? it_4["a"] : 0)}, {"b", ((it_4.ContainsKey("b") ? it_4["b"] : 0) + 1)}});
            }
        };
        long[][] list_5 = new long[][]{};
        foreach (var p_6 in v_3) {
            list_5 = (Enumerable.ToArray(Enumerable.Append(list_5, p_6)));
        };
        long[][] temp_7 = list_5;
        foreach (var p_8 in temp_7) {
            if ((p_8[(int)(0)] != p_8[(int)(1)])) {
                list_5 = (Enumerable.ToArray(Enumerable.Append(list_5, new long[]{p_8[(int)(1)], p_8[(int)(0)]})));
            }
        };
        temp_7 = list_5;
        foreach (var p_9 in temp_7) {
            if ((p_9[(int)(1)] != 0)) {
                list_5 = (Enumerable.ToArray(Enumerable.Append(list_5, new long[]{p_9[(int)(0)], -p_9[(int)(1)]})));
            }
        };
        temp_7 = list_5;
        foreach (var p_10 in temp_7) {
            if ((p_10[(int)(0)] != 0)) {
                list_5 = (Enumerable.ToArray(Enumerable.Append(list_5, new long[]{-p_10[(int)(0)], p_10[(int)(1)]})));
            }
        };
        long bestDot_11 = -999999999;
        long[] best_12 = dir;
        foreach (var p_13 in list_5) {
            long cross_14 = ((p_13[(int)(0)] * dir[(int)(1)]) - (p_13[(int)(1)] * dir[(int)(0)]));
            if ((cross_14 >= 0)) {
                long dot_15 = ((p_13[(int)(0)] * dir[(int)(0)]) + (p_13[(int)(1)] * dir[(int)(1)]));
                if ((dot_15 > bestDot_11)) {
                    bestDot_11 = dot_15;
                    best_12 = p_13;
                }
            }
        };
        return new Dictionary<string, object>{{"d", best_12}, {"heap", h}, {"n", nv}};
    }

    static long[][] positions(long n) {
        long[][] pos_16 = new long[][]{};
        long x_17 = 0;
        long y_18 = 0;
        long[] dir_19 = new long[]{0, 1};
        Dictionary<string, long>[] heap_20 = new Dictionary<string, long>[]{};
        long nv_21 = 1;
        long i_22 = 0;
        while ((i_22 < n)) {
            pos_16 = (Enumerable.ToArray(Enumerable.Append(pos_16, new long[]{x_17, y_18})));
            Dictionary<string, object> st_23 = step(heap_20, nv_21, dir_19);
            dir_19 = (long[])((dynamic)st_23)["d"];
            heap_20 = (Dictionary<string, long>[])((dynamic)st_23)["heap"];
            nv_21 = Convert.ToInt64(((dynamic)st_23)["n"]);
            x_17 = (x_17 + dir_19[(int)(0)]);
            y_18 = (y_18 + dir_19[(int)(1)]);
            i_22 = (i_22 + 1);
        };
        return pos_16;
    }

    static string pad(string s, long w) {
        string r_24 = s;
        while ((r_24.Length < w)) {
            r_24 = (r_24 + " ");
        };
        return r_24;
    }

    static void main() {
        long[][] pts_25 = positions(40);
        Console.WriteLine(_fmtTop("The first 40 Babylonian spiral points are:"));
        string line_26 = "";
        long i_27 = 0;
        while ((i_27 < pts_25.Length)) {
            long[] p_28 = pts_25[(int)(i_27)];
            string s_29 = pad((((("(" + (p_28[(int)(0)]).ToString()) + ", ") + (p_28[(int)(1)]).ToString()) + ")"), 10);
            line_26 = (line_26 + s_29);
            if ((((i_27 + 1) % 10) == 0)) {
                Console.WriteLine(_fmtTop(line_26));
                line_26 = "";
            }
            i_27 = (i_27 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
