// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Data {
    public long pm;
    public long g1;
    public long s1;
    public long g2;
    public long s2;
    public long d;
    public override string ToString() => $"Data {{pm = {pm}, g1 = {g1}, s1 = {s1}, g2 = {g2}, s2 = {s2}, d = {d}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string commatize(long n_0) {
        string s_1 = (n_0).ToString();
        long i_2 = (((dynamic)s_1.Length) - ((dynamic)3));
        while ((i_2 > 0)) {
            s_1 = ((s_1.Substring((int)(0), (int)(i_2 - 0)) + ",") + s_1.Substring((int)(i_2), (int)(s_1.Length - i_2)));
            i_2 = (i_2 - 3);
        };
        return s_1;
    }

    static void main() {
        Data[] data_3 = new Data[]{new Data{pm = 10, g1 = 4, s1 = 7, g2 = 6, s2 = 23, d = 16}, new Data{pm = 100, g1 = 14, s1 = 113, g2 = 16, s2 = 1831, d = 1718}, new Data{pm = 1000, g1 = 14, s1 = 113, g2 = 16, s2 = 1831, d = 1718}, new Data{pm = 10000, g1 = 36, s1 = 9551, g2 = 38, s2 = 30593, d = 21042}, new Data{pm = 100000, g1 = 70, s1 = 173359, g2 = 72, s2 = 31397, d = 141962}, new Data{pm = 1000000, g1 = 100, s1 = 396733, g2 = 102, s2 = 1444309, d = 1047576}, new Data{pm = 10000000, g1 = 148, s1 = 2010733, g2 = 150, s2 = 13626257, d = 11615524}, new Data{pm = 100000000, g1 = 198, s1 = 46006769, g2 = 200, s2 = 378043979, d = 332037210}, new Data{pm = 1000000000, g1 = 276, s1 = 649580171, g2 = 278, s2 = 4260928601L, d = 3611348430L}, new Data{pm = 10000000000L, g1 = 332, s1 = 5893180121L, g2 = 334, s2 = 30827138509L, d = 24933958388L}, new Data{pm = 100000000000L, g1 = 386, s1 = 35238645587L, g2 = 388, s2 = 156798792223L, d = 121560146636L}};
        foreach (var entry_4 in data_3) {
            string pm_5 = commatize(entry_4.pm);
            string line1_6 = (("Earliest difference > " + pm_5) + " between adjacent prime gap starting primes:");
            Console.WriteLine(_fmtTop(line1_6));
            string line2_7 = (((((((((("Gap " + (entry_4.g1).ToString()) + " starts at ") + commatize(entry_4.s1)) + ", gap ") + (entry_4.g2).ToString()) + " starts at ") + commatize(entry_4.s2)) + ", difference is ") + commatize(entry_4.d)) + ".");
            Console.WriteLine(_fmtTop(line2_7));
            Console.WriteLine(_fmtTop(""));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
