// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Instruction {
    public string Label;
    public string Opcode;
    public string Arg;
    public override string ToString() => $"Instruction {{Label = \"{Label}\", Opcode = \"{Opcode}\", Arg = \"{Arg}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string trim(string s_0) {
        long start_1 = 0;
        while (((start_1 < s_0.Length) && ((s_0.Substring((int)(start_1), (int)((start_1 + 1) - start_1)) == " ") || (s_0.Substring((int)(start_1), (int)((start_1 + 1) - start_1)) == "\t")))) {
            start_1 = (start_1 + 1);
        };
        long end_2 = s_0.Length;
        while (((end_2 > start_1) && ((s_0.Substring((int)((end_2 - 1)), (int)(end_2 - (end_2 - 1))) == " ") || (s_0.Substring((int)((end_2 - 1)), (int)(end_2 - (end_2 - 1))) == "\t")))) {
            end_2 = (end_2 - 1);
        };
        return s_0.Substring((int)(start_1), (int)(end_2 - start_1));
    }

    static string[] split(string s_3, string sep_4) {
        string[] parts_5 = new string[]{};
        string cur_6 = "";
        long i_7 = 0;
        while ((i_7 < s_3.Length)) {
            if ((((sep_4.Length > 0) && ((((dynamic)(i_7)) + ((dynamic)(sep_4.Length))) <= s_3.Length)) && (s_3.Substring((int)(i_7), (int)((((dynamic)(i_7)) + ((dynamic)(sep_4.Length))) - i_7)) == sep_4))) {
                parts_5 = (Enumerable.ToArray(Enumerable.Append(parts_5, cur_6)));
                cur_6 = "";
                i_7 = (((dynamic)(i_7)) + ((dynamic)(sep_4.Length)));
            } else {
                cur_6 = (cur_6 + s_3.Substring((int)(i_7), (int)((i_7 + 1) - i_7)));
                i_7 = (i_7 + 1);
            }
        };
        parts_5 = (Enumerable.ToArray(Enumerable.Append(parts_5, cur_6)));
        return parts_5;
    }

    static string[] splitWS(string s_8) {
        string[] out_9 = new string[]{};
        string cur_10 = "";
        long i_11 = 0;
        while ((i_11 < s_8.Length)) {
            string ch_12 = s_8.Substring((int)(i_11), (int)((i_11 + 1) - i_11));
            if (((ch_12 == " ") || (ch_12 == "\t"))) {
                if ((cur_10.Length > 0)) {
                    out_9 = (Enumerable.ToArray(Enumerable.Append(out_9, cur_10)));
                    cur_10 = "";
                }
            } else {
                cur_10 = (cur_10 + ch_12);
            }
            i_11 = (i_11 + 1);
        };
        if ((cur_10.Length > 0)) {
            out_9 = (Enumerable.ToArray(Enumerable.Append(out_9, cur_10)));
        };
        return out_9;
    }

    static long indexOf(string s_13, string ch_14) {
        long i_15 = 0;
        while ((i_15 < s_13.Length)) {
            if ((s_13.Substring((int)(i_15), (int)((i_15 + 1) - i_15)) == ch_14)) {
                return i_15;
            }
            i_15 = (i_15 + 1);
        };
        return -1;
    }

    static long parseIntStr(string str_16) {
        long i_17 = 0;
        bool neg_18 = false;
        if (((str_16.Length > 0) && (str_16.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_18 = true;
            i_17 = 1;
        };
        long n_19 = 0;
        Dictionary<string, long> digits_20 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_17 < str_16.Length)) {
            n_19 = ((n_19 * 10) + (digits_20.ContainsKey(str_16.Substring((int)(i_17), (int)((i_17 + 1) - i_17))) ? digits_20[str_16.Substring((int)(i_17), (int)((i_17 + 1) - i_17))] : 0));
            i_17 = (i_17 + 1);
        };
        if (neg_18) {
            n_19 = -n_19;
        };
        return n_19;
    }

    static Dictionary<string, object> parseAsm(string asm_21) {
        string[] lines_22 = split(asm_21, "\n");
        Instruction[] instrs_23 = new Instruction[]{};
        Dictionary<string, long> labels_24 = new Dictionary<string, long>{};
        long lineNum_25 = 0;
        long i_26 = 0;
        while ((i_26 < lines_22.Length)) {
            string line_27 = lines_22[(int)(i_26)];
            if ((indexOf(line_27, ";") != -1)) {
                line_27 = line_27.Substring((int)(0), (int)(indexOf(line_27, ";") - 0));
            }
            line_27 = trim(line_27);
            string label_28 = "";
            if ((indexOf(line_27, ":") != -1)) {
                long idx_29 = indexOf(line_27, ":");
                label_28 = trim(line_27.Substring((int)(0), (int)(idx_29 - 0)));
                line_27 = trim(line_27.Substring((int)((idx_29 + 1)), (int)(line_27.Length - (idx_29 + 1))));
            }
            string opcode_30 = "";
            string arg_31 = "";
            if ((line_27.Length > 0)) {
                string[] parts_32 = splitWS(line_27);
                if ((parts_32.Length > 0)) {
                    opcode_30 = parts_32[(int)(0)];
                }
                if ((parts_32.Length > 1)) {
                    arg_31 = parts_32[(int)(1)];
                } else {
                    Dictionary<string, long> ops_33 = new Dictionary<string, long>{{"NOP", 0}, {"LDA", 1}, {"STA", 2}, {"ADD", 3}, {"SUB", 4}, {"BRZ", 5}, {"JMP", 6}, {"STP", 7}};
                    if ((!(ops_33.ContainsKey(opcode_30)))) {
                        arg_31 = opcode_30;
                        opcode_30 = "";
                    }
                }
            }
            if ((label_28 != "")) {
                labels_24[label_28] = lineNum_25;
            }
            instrs_23 = (Enumerable.ToArray(Enumerable.Append(instrs_23, new Instruction{Label = label_28, Opcode = opcode_30, Arg = arg_31})));
            lineNum_25 = (lineNum_25 + 1);
            i_26 = (i_26 + 1);
        };
        return new Dictionary<string, object>{{"instructions", instrs_23}, {"labels", labels_24}};
    }

    static long[] compile(Dictionary<string, object> p_34) {
        Instruction[] instrs_35 = (((dynamic)p_34)["instructions"] as Instruction[]) ?? new Instruction[]{};
        Dictionary<string, long> labels_36 = (((dynamic)p_34)["labels"] as Dictionary<string, long>) ?? new Dictionary<string, long>{};
        long[] bytecode_37 = new long[]{};
        long i_38 = 0;
        Dictionary<string, long> opcodes_39 = new Dictionary<string, long>{{"NOP", 0}, {"LDA", 1}, {"STA", 2}, {"ADD", 3}, {"SUB", 4}, {"BRZ", 5}, {"JMP", 6}, {"STP", 7}};
        while ((i_38 < instrs_35.Length)) {
            Instruction ins_40 = instrs_35[(int)(i_38)];
            long arg_41 = 0;
            if ((ins_40.Arg != "")) {
                if ((labels_36.ContainsKey(ins_40.Arg))) {
                    arg_41 = (labels_36.ContainsKey(ins_40.Arg) ? labels_36[ins_40.Arg] : 0);
                } else {
                    arg_41 = parseIntStr(ins_40.Arg);
                }
            }
            long code_42 = 0;
            if ((ins_40.Opcode != "")) {
                code_42 = (opcodes_39.ContainsKey(ins_40.Opcode) ? opcodes_39[ins_40.Opcode] : 0);
            }
            bytecode_37 = (Enumerable.ToArray(Enumerable.Append(bytecode_37, ((code_42 * 32) + arg_41))));
            i_38 = (i_38 + 1);
        };
        while ((bytecode_37.Length < 32)) {
            bytecode_37 = (Enumerable.ToArray(Enumerable.Append(bytecode_37, 0)));
        };
        return bytecode_37;
    }

    static long floorMod(long a_43, long b_44) {
        long r_45 = (a_43 % b_44);
        if ((r_45 < 0)) {
            r_45 = (r_45 + b_44);
        };
        return r_45;
    }

    static long run(long[] bytecode_46) {
        long acc_47 = 0;
        long pc_48 = 0;
        long[] mem_49 = new long[]{};
        long i_50 = 0;
        while ((i_50 < bytecode_46.Length)) {
            mem_49 = (Enumerable.ToArray(Enumerable.Append(mem_49, bytecode_46[(int)(i_50)])));
            i_50 = (i_50 + 1);
        };
        while ((pc_48 < 32)) {
            long op_51 = (mem_49[(int)(pc_48)] / 32);
            long arg_52 = (mem_49[(int)(pc_48)] % 32);
            pc_48 = (pc_48 + 1);
            if ((op_51 == 0)) {
                continue;
            } else {
                if ((op_51 == 1)) {
                    acc_47 = mem_49[(int)(arg_52)];
                } else {
                    if ((op_51 == 2)) {
                        mem_49[arg_52] = acc_47;
                    } else {
                        if ((op_51 == 3)) {
                            acc_47 = floorMod((acc_47 + mem_49[(int)(arg_52)]), 256);
                        } else {
                            if ((op_51 == 4)) {
                                acc_47 = floorMod((acc_47 - mem_49[(int)(arg_52)]), 256);
                            } else {
                                if ((op_51 == 5)) {
                                    if ((acc_47 == 0)) {
                                        pc_48 = arg_52;
                                    }
                                } else {
                                    if ((op_51 == 6)) {
                                        pc_48 = arg_52;
                                    } else {
                                        if ((op_51 == 7)) {
                                            break;
                                        } else {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        return acc_47;
    }

    static long execute(string asm_53) {
        Dictionary<string, object> parsed_54 = parseAsm(asm_53);
        long[] bc_55 = compile(parsed_54);
        return run(bc_55);
    }

    static void main() {
        string[] examples_56 = new string[]{(((("LDA   x\n" + "ADD   y       ; accumulator = x + y\n") + "STP\n") + "x:            2\n") + "y:            2"), ((((((((((((("loop:   LDA   prodt\n" + "        ADD   x\n") + "        STA   prodt\n") + "        LDA   y\n") + "        SUB   one\n") + "        STA   y\n") + "        BRZ   done\n") + "        JMP   loop\n") + "done:   LDA   prodt   ; to display it\n") + "        STP\n") + "x:            8\n") + "y:            7\n") + "prodt:        0\n") + "one:          1"), ((((((((((((((((("loop:   LDA   n\n" + "        STA   temp\n") + "        ADD   m\n") + "        STA   n\n") + "        LDA   temp\n") + "        STA   m\n") + "        LDA   count\n") + "        SUB   one\n") + "        BRZ   done\n") + "        STA   count\n") + "        JMP   loop\n") + "done:   LDA   n       ; to display it\n") + "        STP\n") + "m:            1\n") + "n:            1\n") + "temp:         0\n") + "count:        8       ; valid range: 1-11\n") + "one:          1"), ((((((((((((((((((((((((((((((("start:  LDA   load\n" + "ADD   car     ; head of list\n") + "STA   ldcar\n") + "ADD   one\n") + "STA   ldcdr   ; next CONS cell\n") + "ldcar:  NOP\n") + "STA   value\n") + "ldcdr:  NOP\n") + "BRZ   done    ; 0 stands for NIL\n") + "STA   car\n") + "JMP   start\n") + "done:   LDA   value   ; CAR of last CONS\n") + "STP\n") + "load:   LDA   0\n") + "value:        0\n") + "car:          28\n") + "one:          1\n") + "                        ; order of CONS cells\n") + "                        ; in memory\n") + "                        ; does not matter\n") + "        6\n") + "        0       ; 0 stands for NIL\n") + "        2       ; (CADR ls)\n") + "        26      ; (CDDR ls) -- etc.\n") + "        5\n") + "        20\n") + "        3\n") + "        30\n") + "        1       ; value of (CAR ls)\n") + "        22      ; points to (CDR ls)\n") + "        4\n") + "        24"), (((("LDA  3\n" + "SUB  4\n") + "STP  0\n") + "         0\n") + "         255"), (((("LDA  3\n" + "SUB  4\n") + "STP  0\n") + "                0\n") + "                1"), (((("LDA  3\n" + "ADD  4\n") + "STP  0\n") + "                1\n") + "                255")};
        long i_57 = 0;
        while ((i_57 < examples_56.Length)) {
            long res_58 = execute(examples_56[(int)(i_57)]);
            Console.WriteLine(_fmtTop((res_58).ToString()));
            i_57 = (i_57 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
