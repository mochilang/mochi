// Generated by Mochi 0.10.57 on 2025-08-04 21:00 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long width_0 = 81;
    static long height_1 = 5;
    static string[] lines_2 = new string[]{};
    public static string setChar(string s_6, long idx_7, string ch_8) {
        return ((s_6.Substring((int)(0), (int)(idx_7 - 0)) + ch_8) + s_6.Substring((int)((idx_7 + 1)), (int)(s_6.Length - (idx_7 + 1))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            for (var i_3 = 0; i_3 < height_1; i_3++) {
                string row_4 = "";
                long j_5 = 0;
                while ((j_5 < width_0)) {
                    row_4 = (row_4 + "*");
                    j_5 = (j_5 + 1);
                }
                lines_2 = (Enumerable.ToArray(Enumerable.Append(lines_2, row_4)));
            }
            Dictionary<string, long>[] stack_9 = new Dictionary<string, long>[]{new Dictionary<string, long>{{"start", 0}, {"len", width_0}, {"index", 1}}};
            while ((stack_9.Length > 0)) {
                Dictionary<string, long> frame_10 = stack_9[(int)((stack_9.Length - 1))];
                stack_9 = stack_9.Skip((int)(0)).Take((int)(((stack_9.Length - 1) - 0))).ToArray();
                long start_11 = (frame_10.ContainsKey("start") ? frame_10["start"] : 0);
                long lenSeg_12 = (frame_10.ContainsKey("len") ? frame_10["len"] : 0);
                long index_13 = (frame_10.ContainsKey("index") ? frame_10["index"] : 0);
                long seg_14 = Convert.ToInt64((lenSeg_12 / 3));
                if ((seg_14 == 0)) {
                    continue;
                }
                long i_15 = index_13;
                while ((i_15 < height_1)) {
                    long j_16 = (start_11 + seg_14);
                    while ((j_16 < (start_11 + (2 * seg_14)))) {
                        lines_2[i_15] = Program.setChar(lines_2[(int)(i_15)], j_16, " ");
                        j_16 = (j_16 + 1);
                    }
                    i_15 = (i_15 + 1);
                }
                stack_9 = (Enumerable.ToArray(Enumerable.Append(stack_9, new Dictionary<string, long>{{"start", start_11}, {"len", seg_14}, {"index", (index_13 + 1)}})));
                stack_9 = (Enumerable.ToArray(Enumerable.Append(stack_9, new Dictionary<string, long>{{"start", (start_11 + (seg_14 * 2))}, {"len", seg_14}, {"index", (index_13 + 1)}})));
            }
            foreach (string line_17 in lines_2) {
                Console.WriteLine(Program._fmtTop(line_17));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
