// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double[] sortFloat(double[] xs) {
        double[] arr_0 = xs;
        var n_1 = arr_0.Length;
        long i_2 = 0;
        while ((i_2 < n_1)) {
            long j_3 = 0;
            while ((j_3 < (((dynamic)n_1) - ((dynamic)1)))) {
                if ((arr_0[(int)(j_3)] > arr_0[(int)((j_3 + 1))])) {
                    double tmp_4 = arr_0[(int)(j_3)];
                    arr_0[j_3] = arr_0[(int)((j_3 + 1))];
                    arr_0[(j_3 + 1)] = tmp_4;
                }
                j_3 = (j_3 + 1);
            }
            i_2 = (i_2 + 1);
        };
        return arr_0;
    }

    static double median(double[] a) {
        double[] arr_5 = sortFloat(a);
        var half_6 = Convert.ToInt64((((dynamic)arr_5.Length) / ((dynamic)2)));
        double m_7 = arr_5[(int)(half_6)];
        if (((((dynamic)arr_5.Length) % ((dynamic)2)) == 0)) {
            m_7 = ((m_7 + arr_5[(int)((((dynamic)half_6) - ((dynamic)1)))]) / 2);
        };
        return m_7;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((median(new double[]{3, 1, 4, 1})).ToString()));
            Console.WriteLine(_fmtTop((median(new double[]{3, 1, 4, 1, 5})).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
