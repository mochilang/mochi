// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double[] sortFloat(double[] xs_0) {
        double[] arr_1 = xs_0;
        var n_2 = arr_1.Length;
        long i_3 = 0;
        while ((string.Compare(Convert.ToString(i_3), Convert.ToString(n_2)) < 0)) {
            long j_4 = 0;
            while ((j_4 < (((dynamic)(n_2)) - ((dynamic)(1))))) {
                if ((arr_1[(int)(j_4)] > arr_1[(int)((j_4 + 1))])) {
                    double tmp_5 = arr_1[(int)(j_4)];
                    arr_1[j_4] = arr_1[(int)((j_4 + 1))];
                    arr_1[(j_4 + 1)] = tmp_5;
                }
                j_4 = (j_4 + 1);
            }
            i_3 = (i_3 + 1);
        };
        return arr_1;
    }

    static double median(double[] a_6) {
        double[] arr_7 = sortFloat(a_6);
        var half_8 = Convert.ToInt64((((dynamic)(arr_7.Length)) / ((dynamic)(2))));
        double m_9 = arr_7[(int)(half_8)];
        if (((((dynamic)(arr_7.Length)) % ((dynamic)(2))) == 0)) {
            m_9 = ((m_9 + arr_7[(int)((((dynamic)(half_8)) - ((dynamic)(1))))]) / 2.0);
        };
        return m_9;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((median(new double[]{3.0, 1.0, 4.0, 1.0})).ToString()));
            Console.WriteLine(_fmtTop((median(new double[]{3.0, 1.0, 4.0, 1.0, 5.0})).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
