// Generated by Mochi 0.10.41 on 2025-07-27 11:31 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOfStr(string h_0, string n_1) {
        var hlen_2 = h_0.Length;
        var nlen_3 = n_1.Length;
        if ((nlen_3 == 0)) {
            return 0;
        };
        long i_4 = 0;
        while ((i_4 <= (((dynamic)hlen_2) - ((dynamic)nlen_3)))) {
            if ((h_0.Substring((int)(i_4), (int)((((dynamic)i_4) + ((dynamic)nlen_3)) - i_4)) == n_1)) {
                return i_4;
            }
            i_4 = (i_4 + 1);
        };
        return -1;
    }

    static long stringSearchSingle(string h_5, string n_6) {
        return indexOfStr(h_5, n_6);
    }

    static long[] stringSearch(string h_7, string n_8) {
        long[] result_9 = new long[]{};
        long start_10 = 0;
        var hlen_11 = h_7.Length;
        var nlen_12 = n_8.Length;
        while ((start_10 < hlen_11)) {
            long idx_13 = indexOfStr(h_7.Substring((int)(start_10), (int)(hlen_11 - start_10)), n_8);
            if ((idx_13 >= 0)) {
                result_9 = (Enumerable.ToArray(Enumerable.Append(result_9, (start_10 + idx_13))));
                start_10 = (((dynamic)(start_10 + idx_13)) + ((dynamic)nlen_12));
            } else {
                break;
            }
        };
        return result_9;
    }

    static string display(long[] nums_14) {
        string s_15 = "[";
        long i_16 = 0;
        while ((i_16 < nums_14.Length)) {
            if ((i_16 > 0)) {
                s_15 = (s_15 + ", ");
            }
            s_15 = (s_15 + (nums_14[(int)(i_16)]).ToString());
            i_16 = (i_16 + 1);
        };
        s_15 = (s_15 + "]");
        return s_15;
    }

    static void main() {
        string[] texts_17 = new string[]{"GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."};
        string[] patterns_18 = new string[]{"TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"};
        long i_19 = 0;
        while ((i_19 < texts_17.Length)) {
            Console.WriteLine(_fmtTop(((("text" + ((i_19 + 1)).ToString()) + " = ") + texts_17[(int)(i_19)])));
            i_19 = (i_19 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        long j_20 = 0;
        while ((j_20 < texts_17.Length)) {
            long[] idxs_21 = stringSearch(texts_17[(int)(j_20)], patterns_18[(int)(j_20)]);
            Console.WriteLine(_fmtTop(((((("Found \"" + patterns_18[(int)(j_20)]) + "\" in 'text") + ((j_20 + 1)).ToString()) + "' at indexes ") + display(idxs_21))));
            j_20 = (j_20 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
