// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long toUnsigned16(long n) {
        long u_0 = n;
        if ((u_0 < 0)) {
            u_0 = (u_0 + 65536);
        };
        return (u_0 % 65536);
    }

    static string bin16(long n) {
        long u_1 = toUnsigned16(n);
        string bits_2 = "";
        long mask_3 = 32768;
        for (var i_4 = 0; i_4 < 16; i_4++) {
            if ((u_1 >= mask_3)) {
                bits_2 = (bits_2 + "1");
                u_1 = (u_1 - mask_3);
            } else {
                bits_2 = (bits_2 + "0");
            }
            mask_3 = Convert.ToInt64((mask_3 / 2));
        };
        return bits_2;
    }

    static long bit_and(long a, long b) {
        long ua_5 = toUnsigned16(a);
        long ub_6 = toUnsigned16(b);
        long res_7 = 0;
        long bit_8 = 1;
        for (var i_9 = 0; i_9 < 16; i_9++) {
            if ((((ua_5 % 2) == 1) && ((ub_6 % 2) == 1))) {
                res_7 = (res_7 + bit_8);
            }
            ua_5 = Convert.ToInt64((ua_5 / 2));
            ub_6 = Convert.ToInt64((ub_6 / 2));
            bit_8 = (bit_8 * 2);
        };
        return res_7;
    }

    static long bit_or(long a, long b) {
        long ua_10 = toUnsigned16(a);
        long ub_11 = toUnsigned16(b);
        long res_12 = 0;
        long bit_13 = 1;
        for (var i_14 = 0; i_14 < 16; i_14++) {
            if ((((ua_10 % 2) == 1) || ((ub_11 % 2) == 1))) {
                res_12 = (res_12 + bit_13);
            }
            ua_10 = Convert.ToInt64((ua_10 / 2));
            ub_11 = Convert.ToInt64((ub_11 / 2));
            bit_13 = (bit_13 * 2);
        };
        return res_12;
    }

    static long bit_xor(long a, long b) {
        long ua_15 = toUnsigned16(a);
        long ub_16 = toUnsigned16(b);
        long res_17 = 0;
        long bit_18 = 1;
        for (var i_19 = 0; i_19 < 16; i_19++) {
            long abit_20 = (ua_15 % 2);
            long bbit_21 = (ub_16 % 2);
            if ((((abit_20 == 1) && (bbit_21 == 0)) || ((abit_20 == 0) && (bbit_21 == 1)))) {
                res_17 = (res_17 + bit_18);
            }
            ua_15 = Convert.ToInt64((ua_15 / 2));
            ub_16 = Convert.ToInt64((ub_16 / 2));
            bit_18 = (bit_18 * 2);
        };
        return res_17;
    }

    static long bit_not(long a) {
        long ua_22 = toUnsigned16(a);
        return (65535 - ua_22);
    }

    static long shl(long a, long b) {
        long ua_23 = toUnsigned16(a);
        long i_24 = 0;
        while ((i_24 < b)) {
            ua_23 = ((ua_23 * 2) % 65536);
            i_24 = (i_24 + 1);
        };
        return ua_23;
    }

    static long shr(long a, long b) {
        long ua_25 = toUnsigned16(a);
        long i_26 = 0;
        while ((i_26 < b)) {
            ua_25 = Convert.ToInt64((ua_25 / 2));
            i_26 = (i_26 + 1);
        };
        return ua_25;
    }

    static long las(long a, long b) {
        return shl(a, b);
    }

    static long ras(long a, long b) {
        long val_27 = a;
        long i_28 = 0;
        while ((i_28 < b)) {
            if ((val_27 >= 0)) {
                val_27 = Convert.ToInt64((val_27 / 2));
            } else {
                val_27 = Convert.ToInt64(((val_27 - 1) / 2));
            }
            i_28 = (i_28 + 1);
        };
        return toUnsigned16(val_27);
    }

    static long rol(long a, long b) {
        long ua_29 = toUnsigned16(a);
        long left_30 = shl(ua_29, b);
        long right_31 = shr(ua_29, (16 - b));
        return toUnsigned16((left_30 + right_31));
    }

    static long ror(long a, long b) {
        long ua_32 = toUnsigned16(a);
        long right_33 = shr(ua_32, b);
        long left_34 = shl(ua_32, (16 - b));
        return toUnsigned16((left_34 + right_33));
    }

    static void bitwise(long a, long b) {
        Console.WriteLine(_fmtTop(("a:   " + bin16(a))));
        Console.WriteLine(_fmtTop(("b:   " + bin16(b))));
        Console.WriteLine(_fmtTop(("and: " + bin16(bit_and(a, b)))));
        Console.WriteLine(_fmtTop(("or:  " + bin16(bit_or(a, b)))));
        Console.WriteLine(_fmtTop(("xor: " + bin16(bit_xor(a, b)))));
        Console.WriteLine(_fmtTop(("not: " + bin16(bit_not(a)))));
        if ((b < 0)) {
            Console.WriteLine(_fmtTop("Right operand is negative, but all shifts require an unsigned right operand (shift distance)."));
            return null;
        };
        Console.WriteLine(_fmtTop(("shl: " + bin16(shl(a, b)))));
        Console.WriteLine(_fmtTop(("shr: " + bin16(shr(a, b)))));
        Console.WriteLine(_fmtTop(("las: " + bin16(las(a, b)))));
        Console.WriteLine(_fmtTop(("ras: " + bin16(ras(a, b)))));
        Console.WriteLine(_fmtTop(("rol: " + bin16(rol(a, b)))));
        Console.WriteLine(_fmtTop(("ror: " + bin16(ror(a, b)))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            bitwise(-460, 6);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
