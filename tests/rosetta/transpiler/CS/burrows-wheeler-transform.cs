// Generated by Mochi 0.10.41 on 2025-07-27 12:32 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string stx_0 = "\x02";
    static string etx_1 = "\x03";
    static bool contains(string s_2, string ch_3) {
        long i_4 = 0;
        while ((i_4 < s_2.Length)) {
            if ((s_2.Substring((int)(i_4), (int)((i_4 + 1) - i_4)) == ch_3)) {
                return true;
            }
            i_4 = (i_4 + 1);
        };
        return false;
    }

    static string[] sortStrings(string[] xs_5) {
        string[] arr_6 = xs_5;
        var n_7 = arr_6.Length;
        long i_8 = 0;
        while ((i_8 < n_7)) {
            long j_9 = 0;
            while ((j_9 < (((dynamic)n_7) - ((dynamic)1)))) {
                if ((string.Compare(arr_6[(int)(j_9)], arr_6[(int)((j_9 + 1))]) > 0)) {
                    string tmp_10 = arr_6[(int)(j_9)];
                    arr_6[j_9] = arr_6[(int)((j_9 + 1))];
                    arr_6[(j_9 + 1)] = tmp_10;
                }
                j_9 = (j_9 + 1);
            }
            i_8 = (i_8 + 1);
        };
        return arr_6;
    }

    static Dictionary<string, object> bwt(string s_11) {
        if ((s_11.Contains(stx_0) || s_11.Contains(etx_1))) {
            return new Dictionary<string, object>{{"err", true}, {"res", ""}};
        };
        s_11 = ((stx_0 + s_11) + etx_1);
        var le_12 = s_11.Length;
        string[] table_13 = new string[]{};
        long i_14 = 0;
        while ((i_14 < le_12)) {
            string rot_15 = (s_11.Substring((int)(i_14), (int)(le_12 - i_14)) + s_11.Substring((int)(0), (int)(i_14 - 0)));
            table_13 = (Enumerable.ToArray(Enumerable.Append(table_13, rot_15)));
            i_14 = (i_14 + 1);
        };
        table_13 = sortStrings(table_13);
        string last_16 = "";
        i_14 = 0;
        while ((i_14 < le_12)) {
            last_16 = (last_16 + table_13[(int)(i_14)].Substring((int)((((dynamic)le_12) - ((dynamic)1))), (int)(le_12 - (((dynamic)le_12) - ((dynamic)1)))));
            i_14 = (i_14 + 1);
        };
        return new Dictionary<string, object>{{"err", false}, {"res", last_16}};
    }

    static string ibwt(string r_17) {
        var le_18 = r_17.Length;
        string[] table_19 = new string[]{};
        long i_20 = 0;
        while ((i_20 < le_18)) {
            table_19 = (Enumerable.ToArray(Enumerable.Append(table_19, "")));
            i_20 = (i_20 + 1);
        };
        long n_21 = 0;
        while ((n_21 < le_18)) {
            i_20 = 0;
            while ((i_20 < le_18)) {
                table_19[i_20] = (r_17.Substring((int)(i_20), (int)((i_20 + 1) - i_20)) + table_19[(int)(i_20)]);
                i_20 = (i_20 + 1);
            }
            table_19 = sortStrings(table_19);
            n_21 = (n_21 + 1);
        };
        i_20 = 0;
        while ((i_20 < le_18)) {
            if ((table_19[(int)(i_20)].Substring((int)((((dynamic)le_18) - ((dynamic)1))), (int)(le_18 - (((dynamic)le_18) - ((dynamic)1)))) == etx_1)) {
                return table_19[(int)(i_20)].Substring((int)(1), (int)((((dynamic)le_18) - ((dynamic)1)) - 1));
            }
            i_20 = (i_20 + 1);
        };
        return "";
    }

    static string makePrintable(string s_22) {
        string out_23 = "";
        long i_24 = 0;
        while ((i_24 < s_22.Length)) {
            string ch_25 = s_22.Substring((int)(i_24), (int)((i_24 + 1) - i_24));
            if ((ch_25 == stx_0)) {
                out_23 = (out_23 + "^");
            } else {
                if ((ch_25 == etx_1)) {
                    out_23 = (out_23 + "|");
                } else {
                    out_23 = (out_23 + ch_25);
                }
            }
            i_24 = (i_24 + 1);
        };
        return out_23;
    }

    static void main() {
        string[] examples_26 = new string[]{"banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"};
        foreach (var t_27 in examples_26) {
            Console.WriteLine(_fmtTop(makePrintable(t_27)));
            Dictionary<string, object> res_28 = bwt(t_27);
            if (((dynamic)res_28)["err"]) {
                Console.WriteLine(_fmtTop(" --> ERROR: String can't contain STX or ETX"));
                Console.WriteLine(_fmtTop(" -->"));
            } else {
                var enc_29 = ((dynamic)res_28)["res"];
                Console.WriteLine(_fmtTop((" --> " + makePrintable(enc_29))));
                string r_30 = ibwt(enc_29);
                Console.WriteLine(_fmtTop((" --> " + r_30)));
            }
            Console.WriteLine(_fmtTop(""));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
