// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[][] g_12 = circle(10);
    static string[][] initGrid(long size) {
        string[][] g_0 = new string[][]{};
        long y_1 = 0;
        while ((y_1 < size)) {
            string[] row_2 = new string[]{};
            long x_3 = 0;
            while ((x_3 < size)) {
                row_2 = (Enumerable.ToArray(Enumerable.Append(row_2, " ")));
                x_3 = (x_3 + 1);
            }
            g_0 = (Enumerable.ToArray(Enumerable.Append(g_0, row_2)));
            y_1 = (y_1 + 1);
        };
        return g_0;
    }

    static void set(string[][] g, long x, long y) {
        if (((((x >= 0) && (x < g[(int)(0)].Length)) && (y >= 0)) && (y < g.Length))) {
            g[(int)(y)][x] = "#";
        };
    }

    static string[][] circle(long r) {
        long size_4 = ((r * 2) + 1);
        string[][] g_5 = initGrid(size_4);
        long x_6 = r;
        long y_7 = 0;
        long err_8 = (1 - r);
        while ((y_7 <= x_6)) {
            set(g_5, (r + x_6), (r + y_7));
            set(g_5, (r + y_7), (r + x_6));
            set(g_5, (r - x_6), (r + y_7));
            set(g_5, (r - y_7), (r + x_6));
            set(g_5, (r - x_6), (r - y_7));
            set(g_5, (r - y_7), (r - x_6));
            set(g_5, (r + x_6), (r - y_7));
            set(g_5, (r + y_7), (r - x_6));
            y_7 = (y_7 + 1);
            if ((err_8 < 0)) {
                err_8 = ((err_8 + (2 * y_7)) + 1);
            } else {
                x_6 = (x_6 - 1);
                err_8 = ((err_8 + (2 * (y_7 - x_6))) + 1);
            }
        };
        return g_5;
    }

    static string trimRight(string[] row) {
        long end_9 = row.Length;
        while (((end_9 > 0) && (row[(int)((end_9 - 1))] == " "))) {
            end_9 = (end_9 - 1);
        };
        string s_10 = "";
        long i_11 = 0;
        while ((i_11 < end_9)) {
            s_10 = (s_10 + row[(int)(i_11)]);
            i_11 = (i_11 + 1);
        };
        return s_10;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (var row_13 in g_12) {
                Console.WriteLine(_fmtTop(trimRight(row_13)));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
