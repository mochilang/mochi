// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, object> house1_45 = newNode("house1", 40, 0.0);
    static Dictionary<string, object> house2_46 = newNode("house2", 60, 0.0);
    static Dictionary<string, object> h1_bedrooms_47 = newNode("bedrooms", 1, 0.25);
    static Dictionary<string, object> h1_bathrooms_48 = newNode("bathrooms", 1, 0.0);
    static Dictionary<string, object> h1_attic_49 = newNode("attic", 1, 0.75);
    static Dictionary<string, object> h1_kitchen_50 = newNode("kitchen", 1, 0.1);
    static Dictionary<string, object> h1_living_rooms_51 = newNode("living_rooms", 1, 0.0);
    static Dictionary<string, object> h1_basement_52 = newNode("basement", 1, 0.0);
    static Dictionary<string, object> h1_garage_53 = newNode("garage", 1, 0.0);
    static Dictionary<string, object> h1_garden_54 = newNode("garden", 1, 0.8);
    static Dictionary<string, object> h2_upstairs_55 = newNode("upstairs", 1, 0.0);
    static Dictionary<string, object> h2_groundfloor_56 = newNode("groundfloor", 1, 0.0);
    static Dictionary<string, object> h2_basement_57 = newNode("basement", 1, 0.0);
    static Dictionary<string, object> h1_bathroom1_58 = newNode("bathroom1", 1, 0.5);
    static Dictionary<string, object> h1_bathroom2_59 = newNode("bathroom2", 1, 0.0);
    static Dictionary<string, object> h1_outside_60 = newNode("outside_lavatory", 1, 1.0);
    static Dictionary<string, object> h1_lounge_61 = newNode("lounge", 1, 0.0);
    static Dictionary<string, object> h1_dining_62 = newNode("dining_room", 1, 0.0);
    static Dictionary<string, object> h1_conservatory_63 = newNode("conservatory", 1, 0.0);
    static Dictionary<string, object> h1_playroom_64 = newNode("playroom", 1, 1.0);
    static Dictionary<string, object> h2_bedrooms_65 = newNode("bedrooms", 1, 0.0);
    static Dictionary<string, object> h2_bathroom_66 = newNode("bathroom", 1, 0.0);
    static Dictionary<string, object> h2_toilet_67 = newNode("toilet", 1, 0.0);
    static Dictionary<string, object> h2_attics_68 = newNode("attics", 1, 0.6);
    static Dictionary<string, object> h2_kitchen_69 = newNode("kitchen", 1, 0.0);
    static Dictionary<string, object> h2_living_rooms_70 = newNode("living_rooms", 1, 0.0);
    static Dictionary<string, object> h2_wet_room_71 = newNode("wet_room_&_toilet", 1, 0.0);
    static Dictionary<string, object> h2_garage_72 = newNode("garage", 1, 0.0);
    static Dictionary<string, object> h2_garden_73 = newNode("garden", 1, 0.9);
    static Dictionary<string, object> h2_hot_tub_74 = newNode("hot_tub_suite", 1, 1.0);
    static Dictionary<string, object> h2_cellars_75 = newNode("cellars", 1, 1.0);
    static Dictionary<string, object> h2_wine_cellar_76 = newNode("wine_cellar", 1, 1.0);
    static Dictionary<string, object> h2_cinema_77 = newNode("cinema", 1, 0.75);
    static Dictionary<string, object> h2_suite1_78 = newNode("suite_1", 1, 0.0);
    static Dictionary<string, object> h2_suite2_79 = newNode("suite_2", 1, 0.0);
    static Dictionary<string, object> h2_bedroom3_80 = newNode("bedroom_3", 1, 0.0);
    static Dictionary<string, object> h2_bedroom4_81 = newNode("bedroom_4", 1, 0.0);
    static Dictionary<string, object> h2_lounge_82 = newNode("lounge", 1, 0.0);
    static Dictionary<string, object> h2_dining_83 = newNode("dining_room", 1, 0.0);
    static Dictionary<string, object> h2_conservatory_84 = newNode("conservatory", 1, 0.0);
    static Dictionary<string, object> h2_playroom_85 = newNode("playroom", 1, 0.0);
    static double pow10(long n_0) {
        double r_1 = 1.0;
        long i_2 = 0;
        while ((i_2 < n_0)) {
            r_1 = (r_1 * 10.0);
            i_2 = (i_2 + 1);
        };
        return r_1;
    }

    static string formatFloat(double f_3, long prec_4) {
        double scale_5 = pow10(prec_4);
        double scaled_6 = ((f_3 * scale_5) + 0.5);
        var n_7 = Convert.ToInt64(scaled_6);
        string digits_8 = (n_7).ToString();
        while ((digits_8.Length <= prec_4)) {
            digits_8 = ("0" + digits_8);
        };
        string intPart_9 = digits_8.Substring((int)(0), (int)((((dynamic)(digits_8.Length)) - ((dynamic)(prec_4))) - 0));
        string fracPart_10 = digits_8.Substring((int)((((dynamic)(digits_8.Length)) - ((dynamic)(prec_4)))), (int)(digits_8.Length - (((dynamic)(digits_8.Length)) - ((dynamic)(prec_4)))));
        return ((intPart_9 + ".") + fracPart_10);
    }

    static string padLeft(string s_11, long w_12) {
        string res_13 = "";
        long n_14 = (((dynamic)(w_12)) - ((dynamic)(s_11.Length)));
        while ((n_14 > 0)) {
            res_13 = (res_13 + " ");
            n_14 = (n_14 - 1);
        };
        return (res_13 + s_11);
    }

    static string repeat(string ch_15, long n_16) {
        string s_17 = "";
        long i_18 = 0;
        while ((i_18 < n_16)) {
            s_17 = (s_17 + ch_15);
            i_18 = (i_18 + 1);
        };
        return s_17;
    }

    static double toFloat(long i_19) {
        return Convert.ToDouble(i_19);
    }

    static Dictionary<string, object> newNode(string name_20, long weight_21, double coverage_22) {
        return new Dictionary<string, object>{{"name", name_20}, {"weight", weight_21}, {"coverage", coverage_22}, {"children", new object[]{}}};
    }

    static void addChildren(Dictionary<string, object> n_23, Dictionary<string, object>[] nodes_24) {
        object[] cs_25 = (((dynamic)n_23)["children"] as object[]) ?? new object[]{};
        foreach (var node_26 in nodes_24) {
            cs_25 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(cs_25.Cast<object>()), node_26)));
        };
        n_23["children"] = cs_25;
    }

    static void setCoverage(Dictionary<string, object> n_27, double value_28) {
        n_27["coverage"] = value_28;
    }

    static double computeCoverage(Dictionary<string, object> n_29) {
        object[] cs_30 = (((dynamic)n_29)["children"] as object[]) ?? new object[]{};
        if ((cs_30.Length == 0)) {
            return Convert.ToDouble(((dynamic)n_29)["coverage"]);
        };
        double v1_31 = 0.0;
        long v2_32 = 0;
        foreach (var node_33 in cs_30) {
            Dictionary<string, object> m_34 = (node_33 as Dictionary<string, object>) ?? new Dictionary<string, object>{};
            double c_35 = computeCoverage(m_34);
            v1_31 = (v1_31 + (toFloat(Convert.ToInt64(((dynamic)m_34)["weight"])) * c_35));
            v2_32 = (((dynamic)(v2_32)) + ((dynamic)(Convert.ToInt64(((dynamic)m_34)["weight"]))));
        };
        return (v1_31 / toFloat(v2_32));
    }

    static string spaces(long n_36) {
        return repeat(" ", n_36);
    }

    static void show(Dictionary<string, object> n_37, long level_38) {
        long indent_39 = (level_38 * 4);
        var name_40 = ((dynamic)n_37)["name"];
        long nl_41 = (((dynamic)(name_40.Length)) + ((dynamic)(indent_39)));
        string line_42 = (((dynamic)(spaces(indent_39))) + ((dynamic)(name_40)));
        line_42 = ((line_42 + spaces((32 - nl_41))) + "|  ");
        line_42 = ((line_42 + padLeft((Convert.ToInt64(((dynamic)n_37)["weight"])).ToString(), 3)) + "   | ");
        line_42 = ((line_42 + formatFloat(computeCoverage(n_37), 6)) + " |");
        Console.WriteLine(_fmtTop(line_42));
        object[] cs_43 = (((dynamic)n_37)["children"] as object[]) ?? new object[]{};
        foreach (var child_44 in cs_43) {
            show((child_44 as Dictionary<string, object>) ?? new Dictionary<string, object>{}, (level_38 + 1));
        };
    }

    static void main() {
        Dictionary<string, object> cleaning_86 = newNode("cleaning", 1, 0.0);
        addChildren(h1_bathrooms_48, new Dictionary<string, object>[]{h1_bathroom1_58, h1_bathroom2_59, h1_outside_60});
        addChildren(h1_living_rooms_51, new Dictionary<string, object>[]{h1_lounge_61, h1_dining_62, h1_conservatory_63, h1_playroom_64});
        addChildren(house1_45, new Dictionary<string, object>[]{h1_bedrooms_47, h1_bathrooms_48, h1_attic_49, h1_kitchen_50, h1_living_rooms_51, h1_basement_52, h1_garage_53, h1_garden_54});
        addChildren(h2_bedrooms_65, new Dictionary<string, object>[]{h2_suite1_78, h2_suite2_79, h2_bedroom3_80, h2_bedroom4_81});
        addChildren(h2_upstairs_55, new Dictionary<string, object>[]{h2_bedrooms_65, h2_bathroom_66, h2_toilet_67, h2_attics_68});
        addChildren(h2_living_rooms_70, new Dictionary<string, object>[]{h2_lounge_82, h2_dining_83, h2_conservatory_84, h2_playroom_85});
        addChildren(h2_groundfloor_56, new Dictionary<string, object>[]{h2_kitchen_69, h2_living_rooms_70, h2_wet_room_71, h2_garage_72, h2_garden_73, h2_hot_tub_74});
        addChildren(h2_basement_57, new Dictionary<string, object>[]{h2_cellars_75, h2_wine_cellar_76, h2_cinema_77});
        addChildren(house2_46, new Dictionary<string, object>[]{h2_upstairs_55, h2_groundfloor_56, h2_basement_57});
        addChildren(cleaning_86, new Dictionary<string, object>[]{house1_45, house2_46});
        double topCoverage_87 = computeCoverage(cleaning_86);
        Console.WriteLine(_fmtTop(("TOP COVERAGE = " + formatFloat(topCoverage_87, 6))));
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("NAME HIERARCHY                 | WEIGHT | COVERAGE |"));
        show(cleaning_86, 0);
        setCoverage(h2_cinema_77, 1.0);
        double diff_88 = (computeCoverage(cleaning_86) - topCoverage_87);
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("If the coverage of the Cinema node were increased from 0.75 to 1"));
        Console.WriteLine(_fmtTop(((("the top level coverage would increase by " + formatFloat(diff_88, 6)) + " to ") + formatFloat((topCoverage_87 + diff_88), 6))));
        setCoverage(h2_cinema_77, 0.75);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
