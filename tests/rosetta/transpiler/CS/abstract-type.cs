// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Dog {
    public string kind;
    public string name;
    public override string ToString() => $"Dog {{kind = \"{kind}\", name = \"{name}\"}}";
}
class Cat {
    public string kind;
    public string name;
    public override string ToString() => $"Cat {{kind = \"{kind}\", name = \"{name}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string beastKind(object b_0) {
        return ((Func<string>)(() => { var __t = b_0; if (__t is Dog _p0) { var k = _p0.kind; var _unused_0_1 = _p0.name; return k; } else if (__t is Cat _p1) { var k = _p1.kind; var _unused_1_1 = _p1.name; return k; } return default(string); }))();
    }

    static string beastName(object b_1) {
        return ((Func<string>)(() => { var __t = b_1; if (__t is Dog _p0) { var _unused_0_0 = _p0.kind; var n = _p0.name; return n; } else if (__t is Cat _p1) { var _unused_1_0 = _p1.kind; var n = _p1.name; return n; } return default(string); }))();
    }

    static string beastCry(object b_2) {
        return ((Func<string>)(() => { var __t = b_2; if (__t is Dog _p0) { var _unused_0_0 = _p0.kind; var _unused_0_1 = _p0.name; return "Woof"; } else if (__t is Cat _p1) { var _unused_1_0 = _p1.kind; var _unused_1_1 = _p1.name; return "Meow"; } return default(string); }))();
    }

    static void bprint(object b_3) {
        Console.WriteLine(_fmtTop((((((beastName(b_3) + ", who's a ") + beastKind(b_3)) + ", cries: \"") + beastCry(b_3)) + "\".")));
    }

    static void main() {
        object d_4 = new Dog{kind = "labrador", name = "Max"};
        object c_5 = new Cat{kind = "siamese", name = "Sammy"};
        bprint(d_4);
        bprint(c_5);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
