// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long pow_int(long base_0, long exp_1) {
        long result_2 = 1;
        long b_3 = base_0;
        long e_4 = exp_1;
        while ((e_4 > 0)) {
            if (((e_4 % 2) == 1)) {
                result_2 = (result_2 * b_3);
            }
            b_3 = (b_3 * b_3);
            e_4 = Convert.ToInt64((e_4 / 2));
        };
        return result_2;
    }

    static BigInteger pow_big(BigInteger base_5, long exp_6) {
        BigInteger result_7 = 1;
        BigInteger b_8 = base_5;
        long e_9 = exp_6;
        while ((e_9 > 0)) {
            if (((e_9 % 2) == 1)) {
                result_7 = (result_7 * b_8);
            }
            b_8 = (b_8 * b_8);
            e_9 = Convert.ToInt64((e_9 / 2));
        };
        return result_7;
    }

    static BigInteger parseBigInt(string str_10) {
        long i_11 = 0;
        bool neg_12 = false;
        if (((str_10.Length > 0) && (str_10.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_12 = true;
            i_11 = 1;
        };
        BigInteger n_13 = 0;
        while ((i_11 < str_10.Length)) {
            string ch_14 = str_10.Substring((int)(i_11), (int)((i_11 + 1) - i_11));
            var d_15 = Convert.ToInt64(ch_14);
            n_13 = ((n_13 * new BigInteger(10)) + new BigInteger(d_15));
            i_11 = (i_11 + 1);
        };
        if (neg_12) {
            n_13 = -n_13;
        };
        return n_13;
    }

    static BigInteger fermat(long n_16) {
        long p_17 = pow_int(2, n_16);
        return (pow_big(new BigInteger(2), p_17) + new BigInteger(1));
    }

    static BigInteger[] primeFactorsBig(BigInteger n_18) {
        BigInteger[] factors_19 = new BigInteger[]{};
        BigInteger m_20 = n_18;
        long d_21 = 2;
        while (((m_20 % d_21) == 0)) {
            factors_19 = (Enumerable.ToArray(Enumerable.Append(factors_19, d_21)));
            m_20 = (m_20 / d_21);
        };
        d_21 = 3;
        while (((d_21 * d_21) <= m_20)) {
            while (((m_20 % d_21) == 0)) {
                factors_19 = (Enumerable.ToArray(Enumerable.Append(factors_19, d_21)));
                m_20 = (m_20 / d_21);
            }
            d_21 = (d_21 + 2);
        };
        if ((m_20 > 1)) {
            factors_19 = (Enumerable.ToArray(Enumerable.Append(factors_19, m_20)));
        };
        return factors_19;
    }

    static string show_list(BigInteger[] xs_22) {
        string line_23 = "";
        long i_24 = 0;
        while ((i_24 < xs_22.Length)) {
            line_23 = (line_23 + (xs_22[(int)(i_24)]).ToString());
            if ((i_24 < (((dynamic)(xs_22.Length)) - ((dynamic)(1))))) {
                line_23 = (line_23 + " ");
            }
            i_24 = (i_24 + 1);
        };
        return line_23;
    }

    static void main() {
        BigInteger[] nums_25 = new BigInteger[]{};
        for (var i_26 = 0; i_26 < 8; i_26++) {
            nums_25 = (Enumerable.ToArray(Enumerable.Append(nums_25, fermat(i_26))));
        };
        Console.WriteLine(_fmtTop("First 8 Fermat numbers:"));
        foreach (var n_27 in nums_25) {
            Console.WriteLine(_fmtTop((n_27).ToString()));
        };
        Dictionary<long, BigInteger[]> extra_28 = new Dictionary<long, BigInteger[]>{{6, new BigInteger[]{new BigInteger(274177), new BigInteger(67280421310721L)}}, {7, new BigInteger[]{parseBigInt("59649589127497217"), parseBigInt("5704689200685129054721")}}};
        Console.WriteLine(_fmtTop("\nFactors:"));
        long i_29 = 0;
        while ((i_29 < nums_25.Length)) {
            BigInteger[] facs_30 = new BigInteger[]{};
            if ((i_29 <= 5)) {
                facs_30 = primeFactorsBig(nums_25[(int)(i_29)]);
            } else {
                facs_30 = (extra_28.ContainsKey(i_29) ? extra_28[i_29] : null);
            }
            Console.WriteLine(_fmtTop(((("F" + (i_29).ToString()) + " = ") + show_list(facs_30))));
            i_29 = (i_29 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
