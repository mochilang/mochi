// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class DivResult {
    public long q;
    public long r;
    public override string ToString() => $"DivResult {{q = {q}, r = {r}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static DivResult egyptianDivide(long dividend_0, long divisor_1) {
        if (((dividend_0 < 0) || (divisor_1 <= 0))) {
            throw new Exception("Invalid argument(s)");
        };
        if ((dividend_0 < divisor_1)) {
            return new DivResult{q = 0, r = dividend_0};
        };
        long[] powers_2 = new long[]{1};
        long[] doublings_3 = new long[]{divisor_1};
        long doubling_4 = (divisor_1 * 2);
        while ((doubling_4 <= dividend_0)) {
            powers_2 = (Enumerable.ToArray(Enumerable.Append(powers_2, (powers_2[(int)((((dynamic)powers_2.Length) - ((dynamic)1)))] * 2))));
            doublings_3 = (Enumerable.ToArray(Enumerable.Append(doublings_3, doubling_4)));
            doubling_4 = (doubling_4 * 2);
        };
        long ans_5 = 0;
        long accum_6 = 0;
        long i_7 = (((dynamic)doublings_3.Length) - ((dynamic)1));
        while ((i_7 >= 0)) {
            if (((accum_6 + doublings_3[(int)(i_7)]) <= dividend_0)) {
                accum_6 = (accum_6 + doublings_3[(int)(i_7)]);
                ans_5 = (ans_5 + powers_2[(int)(i_7)]);
                if ((accum_6 == dividend_0)) {
                    break;
                }
            }
            i_7 = (i_7 - 1);
        };
        return new DivResult{q = ans_5, r = (dividend_0 - accum_6)};
    }

    static void main() {
        long dividend_8 = 580;
        long divisor_9 = 34;
        DivResult res_10 = egyptianDivide(dividend_8, divisor_9);
        Console.WriteLine(_fmtTop((((((((dividend_8).ToString() + " divided by ") + (divisor_9).ToString()) + " is ") + (res_10.q).ToString()) + " with remainder ") + (res_10.r).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
