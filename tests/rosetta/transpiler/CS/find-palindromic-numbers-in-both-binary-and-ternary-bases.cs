// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string toBase(long n_0, long b_1) {
        if ((n_0 == 0)) {
            return "0";
        };
        string s_2 = "";
        long x_3 = n_0;
        while ((x_3 > 0)) {
            s_2 = (((x_3 % b_1)).ToString() + s_2);
            x_3 = Convert.ToInt64((x_3 / b_1));
        };
        return s_2;
        Func<string, long> parseIntStr = null;
        parseIntStr = (string str_4) => {long i_5 = 0; bool neg_6 = false; if (((str_4.Length > 0) && (str_4.Substring((int)(0), 1) == "-"))) {
            neg_6 = true;
            i_5 = 1;
        }; n_0 = 0; while ((i_5 < str_4.Length)) {
            n_0 = (((dynamic)(((dynamic)(n_0 * 10)) + ((dynamic)Convert.ToInt64(str_4.Substring((int)(i_5), (int)((i_5 + 1) - i_5)))))) - ((dynamic)Convert.ToInt64("0")));
            i_5 = (i_5 + 1);
        }; if (neg_6) {
            n_0 = -n_0;
        }; return n_0;};
    }

    static long parseIntBase(string s_7, long b_8) {
        long n_9 = 0;
        long i_10 = 0;
        while ((i_10 < s_7.Length)) {
            n_9 = (((dynamic)(n_9 * b_8)) + ((dynamic)Convert.ToInt64(s_7.Substring((int)(i_10), (int)((i_10 + 1) - i_10)))));
            i_10 = (i_10 + 1);
        };
        return n_9;
    }

    static string reverseStr(string s_11) {
        string out_12 = "";
        long i_13 = (((dynamic)s_11.Length) - ((dynamic)1));
        while ((i_13 >= 0)) {
            out_12 = (out_12 + s_11.Substring((int)(i_13), (int)((i_13 + 1) - i_13)));
            i_13 = (i_13 - 1);
        };
        return out_12;
    }

    static bool isPalindrome(string s_14) {
        return (s_14 == reverseStr(s_14));
    }

    static bool isPalindromeBin(long n_15) {
        string b_16 = toBase(n_15, 2);
        return isPalindrome(b_16);
    }

    static long myMin(long a_17, long b_18) {
        if ((a_17 < b_18)) {
            return a_17;
        };
        return b_18;
    }

    static long myMax(long a_19, long b_20) {
        if ((a_19 > b_20)) {
            return a_19;
        };
        return b_20;
    }

    static long reverse3(long n_21) {
        long x_22 = 0;
        long y_23 = n_21;
        while ((y_23 != 0)) {
            x_22 = ((x_22 * 3) + (y_23 % 3));
            y_23 = Convert.ToInt64((y_23 / 3));
        };
        return x_22;
    }

    static void show(long n_24) {
        Console.WriteLine(_fmtTop(("Decimal : " + (n_24).ToString())));
        Console.WriteLine(_fmtTop(("Binary  : " + toBase(n_24, 2))));
        Console.WriteLine(_fmtTop(("Ternary : " + toBase(n_24, 3))));
        Console.WriteLine(_fmtTop(""));
    }

    static void main() {
        Console.WriteLine(_fmtTop("The first 6 numbers which are palindromic in both binary and ternary are :\n"));
        show(0);
        long count_25 = 1;
        long lo_26 = 0;
        long hi_27 = 1;
        long pow2_28 = 1;
        long pow3_29 = 1;
        while (true) {
            long i_30 = lo_26;
            while ((i_30 < hi_27)) {
                long n_31 = ((((i_30 * 3) + 1) * pow3_29) + reverse3(i_30));
                if (isPalindromeBin(n_31)) {
                    show(n_31);
                    count_25 = (count_25 + 1);
                    if ((count_25 >= 6)) {
                        return;
                    }
                }
                i_30 = (i_30 + 1);
            }
            if ((i_30 == pow3_29)) {
                pow3_29 = (pow3_29 * 3);
            } else {
                pow2_28 = (pow2_28 * 4);
            }
            while (true) {
                while ((pow2_28 <= pow3_29)) {
                    pow2_28 = (pow2_28 * 4);
                }
                var lo2_32 = Convert.ToInt64((((pow2_28 / pow3_29) - 1) / 3));
                long hi2_33 = (((dynamic)Convert.ToInt64(((((pow2_28 * 2) / pow3_29) - 1) / 3))) + ((dynamic)1));
                var lo3_34 = Convert.ToInt64((pow3_29 / 3));
                long hi3_35 = pow3_29;
                if ((lo2_32 >= hi3_35)) {
                    pow3_29 = (pow3_29 * 3);
                } else {
                    if ((lo3_34 >= hi2_33)) {
                        pow2_28 = (pow2_28 * 4);
                    } else {
                        lo_26 = myMax(lo2_32, lo3_34);
                        hi_27 = myMin(hi2_33, hi3_35);
                        break;
                    }
                }
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
