// Generated by Mochi 0.10.52 on 2025-07-31 04:53 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double floorf(double x_0) {
        long y_1 = Convert.ToInt64(x_0);
        return Convert.ToDouble(y_1);
    }

    static long indexOf(string s_2, string ch_3) {
        long i_4 = 0;
        while ((string.Compare(Convert.ToString(i_4), Convert.ToString(s_2.Length)) < 0)) {
            if ((s_2.Substring((int)(i_4), (int)((i_4 + 1) - i_4)) == ch_3)) {
                return i_4;
            }
            i_4 = (i_4 + 1);
        };
        return -1;
    }

    static string fmtF3(double x_5) {
        double y_6 = (floorf(((x_5 * 1000.0) + 0.5)) / 1000.0);
        string s_7 = (y_6).ToString();
        long dot_8 = indexOf(s_7, ".");
        if ((dot_8 == (0 - 1))) {
            s_7 = (s_7 + ".000");
        } else {
            long decs_9 = ((((dynamic)(s_7.Length)) - ((dynamic)(dot_8))) - 1);
            if ((decs_9 > 3)) {
                s_7 = s_7.Substring((int)(0), (int)((dot_8 + 4) - 0));
            } else {
                while ((decs_9 < 3)) {
                    s_7 = (s_7 + "0");
                    decs_9 = (decs_9 + 1);
                }
            }
        };
        return s_7;
    }

    static string padFloat3(double x_10, long width_11) {
        string s_12 = fmtF3(x_10);
        while ((string.Compare(Convert.ToString(s_12.Length), Convert.ToString(width_11)) < 0)) {
            s_12 = (" " + s_12);
        };
        return s_12;
    }

    static double[] fib1000() {
        double a_13 = 0.0;
        double b_14 = 1.0;
        double[] res_15 = new double[]{};
        long i_16 = 0;
        while ((i_16 < 1000)) {
            res_15 = (Enumerable.ToArray(Enumerable.Append(res_15, b_14)));
            double t_17 = b_14;
            b_14 = (b_14 + a_13);
            a_13 = t_17;
            i_16 = (i_16 + 1);
        };
        return res_15;
    }

    static long leadingDigit(double x_18) {
        if ((x_18 < 0.0)) {
            x_18 = -x_18;
        };
        while ((x_18 >= 10.0)) {
            x_18 = (x_18 / 10.0);
        };
        while (((x_18 > 0.0) && (x_18 < 1.0))) {
            x_18 = (x_18 * 10.0);
        };
        return Convert.ToInt64(x_18);
    }

    static void show(double[] nums_19, string title_20) {
        long[] counts_21 = new long[]{0, 0, 0, 0, 0, 0, 0, 0, 0};
        foreach (var n_22 in nums_19) {
            long d_23 = leadingDigit(n_22);
            if (((d_23 >= 1) && (d_23 <= 9))) {
                counts_21[(d_23 - 1)] = (counts_21[(int)((d_23 - 1))] + 1);
            }
        };
        double[] preds_24 = new double[]{0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046};
        var total_25 = nums_19.Length;
        Console.WriteLine(_fmtTop(title_20));
        Console.WriteLine(_fmtTop("Digit  Observed  Predicted"));
        long i_26 = 0;
        while ((i_26 < 9)) {
            double obs_27 = (Convert.ToDouble(counts_21[(int)(i_26)]) / Convert.ToDouble(total_25));
            string line_28 = ((((("  " + ((i_26 + 1)).ToString()) + "  ") + padFloat3(obs_27, 9)) + "  ") + padFloat3(preds_24[(int)(i_26)], 8));
            Console.WriteLine(_fmtTop(line_28));
            i_26 = (i_26 + 1);
        };
    }

    static void main() {
        show(fib1000(), "First 1000 Fibonacci numbers");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
