// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double floorf(double x) {
        var y_0 = Convert.ToInt64(x);
        return Convert.ToDouble(y_0);
    }

    static long indexOf(string s, string ch) {
        long i_1 = 0;
        while ((i_1 < s.Length)) {
            if ((s.Substring((int)(i_1), (int)((i_1 + 1) - i_1)) == ch)) {
                return i_1;
            }
            i_1 = (i_1 + 1);
        };
        return -1;
    }

    static string fmtF3(double x) {
        double y_2 = (floorf(((x * 1000) + 0.5)) / 1000);
        string s_3 = (y_2).ToString();
        long dot_4 = indexOf(s_3, ".");
        if ((dot_4 == (0 - 1))) {
            s_3 = (s_3 + ".000");
        } else {
            long decs_5 = ((((dynamic)s_3.Length) - ((dynamic)dot_4)) - 1);
            if ((decs_5 > 3)) {
                s_3 = s_3.Substring((int)(0), (int)((dot_4 + 4) - 0));
            } else {
                while ((decs_5 < 3)) {
                    s_3 = (s_3 + "0");
                    decs_5 = (decs_5 + 1);
                }
            }
        };
        return s_3;
    }

    static string padFloat3(double x, long width) {
        string s_6 = fmtF3(x);
        while ((s_6.Length < width)) {
            s_6 = (" " + s_6);
        };
        return s_6;
    }

    static double[] fib1000() {
        double a_7 = 0;
        double b_8 = 1;
        double[] res_9 = new double[]{};
        long i_10 = 0;
        while ((i_10 < 1000)) {
            res_9 = (Enumerable.ToArray(Enumerable.Append(res_9, b_8)));
            double t_11 = b_8;
            b_8 = (b_8 + a_7);
            a_7 = t_11;
            i_10 = (i_10 + 1);
        };
        return res_9;
    }

    static long leadingDigit(double x) {
        if ((x < 0)) {
            x = -x;
        };
        while ((x >= 10)) {
            x = (x / 10);
        };
        while (((x > 0) && (x < 1))) {
            x = (x * 10);
        };
        return Convert.ToInt64(x);
    }

    static void show(double[] nums, string title) {
        long[] counts_12 = new long[]{0, 0, 0, 0, 0, 0, 0, 0, 0};
        foreach (var n_13 in nums) {
            long d_14 = leadingDigit(n_13);
            if (((d_14 >= 1) && (d_14 <= 9))) {
                counts_12[(d_14 - 1)] = (counts_12[(int)((d_14 - 1))] + 1);
            }
        };
        double[] preds_15 = new double[]{0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046};
        var total_16 = nums.Length;
        Console.WriteLine(_fmtTop(title));
        Console.WriteLine(_fmtTop("Digit  Observed  Predicted"));
        long i_17 = 0;
        while ((i_17 < 9)) {
            var obs_18 = (((dynamic)Convert.ToDouble(counts_12[(int)(i_17)])) / ((dynamic)Convert.ToDouble(total_16)));
            string line_19 = ((((("  " + ((i_17 + 1)).ToString()) + "  ") + padFloat3(obs_18, 9)) + "  ") + padFloat3(preds_15[(int)(i_17)], 8));
            Console.WriteLine(_fmtTop(line_19));
            i_17 = (i_17 + 1);
        };
    }

    static void main() {
        show(fib1000(), "First 1000 Fibonacci numbers");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
