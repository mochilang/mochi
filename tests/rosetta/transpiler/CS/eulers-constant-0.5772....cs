// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double ln(double x_0) {
        double k_1 = 0;
        double v_2 = x_0;
        while ((v_2 >= 2)) {
            v_2 = (v_2 / 2);
            k_1 = (k_1 + 1);
        };
        while ((v_2 < 1)) {
            v_2 = (v_2 * 2);
            k_1 = (k_1 - 1);
        };
        double z_3 = ((v_2 - 1) / (v_2 + 1));
        double zpow_4 = z_3;
        double sum_5 = z_3;
        long i_6 = 3;
        while ((i_6 <= 9)) {
            zpow_4 = ((zpow_4 * z_3) * z_3);
            sum_5 = (sum_5 + (((dynamic)(zpow_4)) / ((dynamic)(Convert.ToDouble(i_6)))));
            i_6 = (i_6 + 2);
        };
        double ln2_7 = 0.6931471805599453;
        return ((k_1 * ln2_7) + (2 * sum_5));
    }

    static double harmonic(long n_8) {
        double sum_9 = 0;
        long i_10 = 1;
        while ((i_10 <= n_8)) {
            sum_9 = (sum_9 + (((dynamic)(1)) / ((dynamic)(Convert.ToDouble(i_10)))));
            i_10 = (i_10 + 1);
        };
        return sum_9;
    }

    static void main() {
        long n_11 = 100000;
        double gamma_12 = (harmonic(n_11) - ln(Convert.ToDouble(n_11)));
        Console.WriteLine(_fmtTop((gamma_12).ToString()));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
