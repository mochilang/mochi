// Generated by Mochi 0.10.42 on 2025-07-28 01:07 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] circs_2 = new long[]{};
    static long[] digits_7 = new long[]{1, 3, 7, 9};
    static long[] q_8 = new long[]{1, 2, 3, 5, 7, 9};
    static long[] fq_9 = new long[]{1, 2, 3, 5, 7, 9};
    static long count_10 = 0;
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        if (((n_0 % 2) == 0)) {
            return (n_0 == 2);
        };
        if (((n_0 % 3) == 0)) {
            return (n_0 == 3);
        };
        long d_1 = 5;
        while (((d_1 * d_1) <= n_0)) {
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 2);
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 4);
        };
        return true;
    }

    static bool isCircular(long n_3) {
        long nn_4 = n_3;
        long pow_5 = 1;
        while ((nn_4 > 0)) {
            pow_5 = (pow_5 * 10);
            nn_4 = (nn_4 / 10);
        };
        nn_4 = n_3;
        while (true) {
            nn_4 = (nn_4 * 10);
            long f_6 = (nn_4 / pow_5);
            nn_4 = (nn_4 + (f_6 * (1 - pow_5)));
            if ((nn_4 == n_3)) {
                break;
            }
            if ((!isPrime(nn_4))) {
                return false;
            }
        };
        return true;
    }

    static string showList(long[] xs_14) {
        string out_15 = "[";
        long i_16 = 0;
        while ((i_16 < xs_14.Length)) {
            out_15 = (out_15 + (xs_14[(int)(i_16)]).ToString());
            if ((i_16 < (((dynamic)xs_14.Length) - ((dynamic)1)))) {
                out_15 = (out_15 + ", ");
            }
            i_16 = (i_16 + 1);
        };
        return (out_15 + "]");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop("The first 19 circular primes are:"));
            while (true) {
                long f_11 = q_8[(int)(0)];
                long fd_12 = fq_9[(int)(0)];
                if ((isPrime(f_11) && isCircular(f_11))) {
                    circs_2 = (Enumerable.ToArray(Enumerable.Append(circs_2, f_11)));
                    count_10 = (count_10 + 1);
                    if ((count_10 == 19)) {
                        break;
                    }
                }
                q_8 = q_8.Skip((int)(1)).Take((int)((q_8.Length - 1))).ToArray();
                fq_9 = fq_9.Skip((int)(1)).Take((int)((fq_9.Length - 1))).ToArray();
                if (((f_11 != 2) && (f_11 != 5))) {
                    foreach (var d_13 in digits_7) {
                        q_8 = (Enumerable.ToArray(Enumerable.Append(q_8, ((f_11 * 10) + d_13))));
                        fq_9 = (Enumerable.ToArray(Enumerable.Append(fq_9, fd_12)));
                    }
                }
            }
            Console.WriteLine(_fmtTop(showList(circs_2)));
            Console.WriteLine(_fmtTop("\nThe next 4 circular primes, in repunit format, are:"));
            Console.WriteLine(_fmtTop("[R(19) R(23) R(317) R(1031)]"));
            Console.WriteLine(_fmtTop("\nThe following repunits are probably circular primes:"));
            foreach (var i_17 in new long[]{5003, 9887, 15073, 25031, 35317, 49081}) {
                Console.WriteLine(_fmtTop((("R(" + (i_17).ToString()) + ") : true")));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
