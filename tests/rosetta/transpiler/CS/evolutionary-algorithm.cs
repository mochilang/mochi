// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string target_0 = "METHINKS IT IS LIKE A WEASEL";
    static string chars_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ";
    static long seed_2 = 1;
    static long[] randInt(long s_3, long n_4) {
        long next_5 = (((s_3 * 1664525) + 1013904223) % 2147483647);
        return new long[]{next_5, (next_5 % n_4)};
    }

    static string randChar() {
        long[] r_6 = randInt(seed_2, chars_1.Length);
        seed_2 = r_6[(int)(0)];
        var idx_7 = Convert.ToInt64(r_6[(int)(1)]);
        return chars_1.Substring((int)(idx_7), (int)((((dynamic)(idx_7)) + ((dynamic)(1))) - idx_7));
    }

    static string randomString(long n_8) {
        string s_9 = "";
        long i_10 = 0;
        while ((i_10 < n_8)) {
            s_9 = (s_9 + randChar());
            i_10 = (i_10 + 1);
        };
        return s_9;
    }

    static long fitness(string s_11) {
        long h_12 = 0;
        long i_13 = 0;
        while ((i_13 < target_0.Length)) {
            if ((s_11.Substring((int)(i_13), (int)((i_13 + 1) - i_13)) != target_0.Substring((int)(i_13), (int)((i_13 + 1) - i_13)))) {
                h_12 = (h_12 + 1);
            }
            i_13 = (i_13 + 1);
        };
        return h_12;
    }

    static string mutate(string p_14) {
        string m_15 = "";
        long i_16 = 0;
        while ((i_16 < p_14.Length)) {
            long[] r_17 = randInt(seed_2, 20);
            seed_2 = r_17[(int)(0)];
            if ((r_17[(int)(1)] == 0)) {
                m_15 = (m_15 + randChar());
            } else {
                m_15 = (m_15 + p_14.Substring((int)(i_16), (int)((i_16 + 1) - i_16)));
            }
            i_16 = (i_16 + 1);
        };
        return m_15;
    }

    static void main() {
        string parent_18 = randomString(target_0.Length);
        Console.WriteLine(_fmtTop(parent_18));
        long best_19 = fitness(parent_18);
        bool done_20 = false;
        while ((!done_20)) {
            long i_21 = 0;
            while ((i_21 < 20)) {
                string child_22 = mutate(parent_18);
                long f_23 = fitness(child_22);
                if ((f_23 < best_19)) {
                    best_19 = f_23;
                    parent_18 = child_22;
                    Console.WriteLine(_fmtTop(parent_18));
                    if ((best_19 == 0)) {
                        done_20 = true;
                        break;
                    }
                }
                i_21 = (i_21 + 1);
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
