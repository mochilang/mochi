// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool[] sieve(long limit_0) {
        bool[] primes_1 = new bool[]{};
        long i_2 = 0;
        while ((i_2 < limit_0)) {
            primes_1 = (Enumerable.ToArray(Enumerable.Append(primes_1, true)));
            i_2 = (i_2 + 1);
        };
        primes_1[0] = false;
        primes_1[1] = false;
        long p_3 = 2;
        while (((p_3 * p_3) < limit_0)) {
            if (primes_1[(int)(p_3)]) {
                long k_4 = (p_3 * p_3);
                while ((k_4 < limit_0)) {
                    primes_1[k_4] = false;
                    k_4 = (k_4 + p_3);
                }
            }
            p_3 = (p_3 + 1);
        };
        return primes_1;
    }

    static long goldbachCount(bool[] primes_5, long n_6) {
        long c_7 = 0;
        long i_8 = 1;
        while ((i_8 <= (n_6 / 2))) {
            if ((primes_5[(int)(i_8)] && primes_5[(int)((n_6 - i_8))])) {
                c_7 = (c_7 + 1);
            }
            i_8 = (i_8 + 1);
        };
        return c_7;
    }

    static string pad(long n_9) {
        if ((n_9 < 10)) {
            return ("  " + (n_9).ToString());
        };
        if ((n_9 < 100)) {
            return (" " + (n_9).ToString());
        };
        return (n_9).ToString();
    }

    static void main() {
        bool[] primes_10 = sieve(1000);
        Console.WriteLine(_fmtTop("The first 100 Goldbach numbers:"));
        string line_11 = "";
        long n_12 = 2;
        long count_13 = 0;
        while ((count_13 < 100)) {
            long v_14 = goldbachCount(primes_10, (2 * n_12));
            line_11 = ((line_11 + pad(v_14)) + " ");
            count_13 = (count_13 + 1);
            n_12 = (n_12 + 1);
            if (((count_13 % 10) == 0)) {
                Console.WriteLine(_fmtTop(line_11.Substring((int)(0), (int)((((dynamic)(line_11.Length)) - ((dynamic)(1))) - 0))));
                line_11 = "";
            }
        };
        long val_15 = goldbachCount(primes_10, 1000);
        Console.WriteLine(_fmtTop(("\nThe 1,000th Goldbach number = " + (val_15).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
