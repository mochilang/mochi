// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] dayNames_0 = new string[]{"Sweetmorn", "Boomtime", "Pungenday", "Prickle-Prickle", "Setting Orange"};
    static string[] seasons_1 = new string[]{"Chaos", "Discord", "Confusion", "Bureaucracy", "The Aftermath"};
    static string[][] holydays_2 = new string[][]{new string[]{"Mungday", "Chaoflux"}, new string[]{"Mojoday", "Discoflux"}, new string[]{"Syaday", "Confuflux"}, new string[]{"Zaraday", "Bureflux"}, new string[]{"Maladay", "Afflux"}};
    static long[] daysBefore_4 = new long[]{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};
    static bool isLeap(long y_3) {
        if (((y_3 % 400) == 0)) {
            return true;
        };
        if (((y_3 % 100) == 0)) {
            return false;
        };
        return ((y_3 % 4) == 0);
    }

    static long dayOfYear(long y_5, long m_6, long d_7) {
        long doy_8 = (daysBefore_4[(int)((m_6 - 1))] + d_7);
        if (((m_6 > 2) && isLeap(y_5))) {
            doy_8 = (doy_8 + 1);
        };
        return doy_8;
    }

    static string ordinal(long n_9) {
        string suff_10 = "th";
        long mod100_11 = (n_9 % 100);
        if (((mod100_11 < 11) || (mod100_11 > 13))) {
            long r_12 = (n_9 % 10);
            if ((r_12 == 1)) {
                suff_10 = "st";
            } else {
                if ((r_12 == 2)) {
                    suff_10 = "nd";
                } else {
                    if ((r_12 == 3)) {
                        suff_10 = "rd";
                    }
                }
            }
        };
        return ((n_9).ToString() + suff_10);
    }

    static string discordian(long y_13, long m_14, long d_15) {
        if (((isLeap(y_13) && (m_14 == 2)) && (d_15 == 29))) {
            return ("St. Tib's Day, YOLD " + ((y_13 + 1166)).ToString());
        };
        long doy_16 = dayOfYear(y_13, m_14, d_15);
        if ((isLeap(y_13) && (doy_16 > 60))) {
            doy_16 = (doy_16 - 1);
        };
        long idx_17 = (doy_16 - 1);
        long season_18 = (idx_17 / 73);
        long day_19 = (idx_17 % 73);
        string res_20 = ((((((dayNames_0[(int)((idx_17 % 5))] + ", the ") + ordinal((day_19 + 1))) + " day of ") + seasons_1[(int)(season_18)]) + " in the YOLD ") + ((y_13 + 1166)).ToString());
        if ((day_19 == 4)) {
            res_20 = (((res_20 + ". Celebrate ") + holydays_2[(int)(season_18)][(int)(0)]) + "!");
        };
        if ((day_19 == 49)) {
            res_20 = (((res_20 + ". Celebrate ") + holydays_2[(int)(season_18)][(int)(1)]) + "!");
        };
        return res_20;
    }

    static void main() {
        long[][] dates_21 = new long[][]{new long[]{2010, 7, 22}, new long[]{2012, 2, 28}, new long[]{2012, 2, 29}, new long[]{2012, 3, 1}, new long[]{2012, 12, 31}, new long[]{2013, 1, 1}, new long[]{2100, 12, 31}, new long[]{2015, 10, 19}, new long[]{2010, 1, 5}, new long[]{2011, 5, 3}, new long[]{2000, 3, 13}};
        long i_22 = 0;
        while ((i_22 < dates_21.Length)) {
            long[] dt_23 = dates_21[(int)(i_22)];
            Console.WriteLine(_fmtTop(discordian(dt_23[(int)(0)], dt_23[(int)(1)], dt_23[(int)(2)])));
            i_22 = (i_22 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
