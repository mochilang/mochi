// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] given_0 = new string[]{"ABCD", "CABD", "ACDB", "DACB", "BCDA", "ACBD", "ADCB", "CDAB", "DABC", "BCAD", "CADB", "CDBA", "CBAD", "ABDC", "ADBC", "BDCA", "DCBA", "BACD", "BADC", "BDAC", "CBDA", "DBCA", "DCAB"};
    static long idx(string ch_1) {
        if ((ch_1 == "A")) {
            return 0;
        };
        if ((ch_1 == "B")) {
            return 1;
        };
        if ((ch_1 == "C")) {
            return 2;
        };
        return 3;
    }

    static void main() {
        string res_2 = "";
        long i_3 = 0;
        while ((i_3 < given_0[(int)(0)].Length)) {
            long[] counts_4 = new long[]{0, 0, 0, 0};
            foreach (var p_5 in given_0) {
                string ch_6 = p_5.Substring((int)(i_3), (int)((i_3 + 1) - i_3));
                long j_7 = idx(ch_6);
                counts_4[j_7] = (counts_4[(int)(j_7)] + 1);
            }
            long j_8 = 0;
            while ((j_8 < 4)) {
                if (((counts_4[(int)(j_8)] % 2) == 1)) {
                    if ((j_8 == 0)) {
                        res_2 = (res_2 + "A");
                    } else {
                        if ((j_8 == 1)) {
                            res_2 = (res_2 + "B");
                        } else {
                            if ((j_8 == 2)) {
                                res_2 = (res_2 + "C");
                            } else {
                                res_2 = (res_2 + "D");
                            }
                        }
                    }
                }
                j_8 = (j_8 + 1);
            }
            i_3 = (i_3 + 1);
        };
        Console.WriteLine(_fmtTop(res_2));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
