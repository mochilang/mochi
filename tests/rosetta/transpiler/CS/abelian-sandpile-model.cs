// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long dim_0 = 16;
    static long[][] newPile(long d_1) {
        long[][] b_2 = new long[][]{};
        long y_3 = 0;
        while ((y_3 < d_1)) {
            long[] row_4 = new long[]{};
            long x_5 = 0;
            while ((x_5 < d_1)) {
                row_4 = (Enumerable.ToArray(Enumerable.Append(row_4, 0)));
                x_5 = (x_5 + 1);
            }
            b_2 = (Enumerable.ToArray(Enumerable.Append(b_2, row_4)));
            y_3 = (y_3 + 1);
        };
        return b_2;
    }

    static long[][] handlePile(long[][] pile_6, long x_7, long y_8) {
        if ((pile_6[(int)(y_8)][(int)(x_7)] >= 4)) {
            pile_6[(int)(y_8)][x_7] = (pile_6[(int)(y_8)][(int)(x_7)] - 4);
            if ((y_8 > 0)) {
                pile_6[(int)((y_8 - 1))][x_7] = (pile_6[(int)((y_8 - 1))][(int)(x_7)] + 1);
                if ((pile_6[(int)((y_8 - 1))][(int)(x_7)] >= 4)) {
                    pile_6 = handlePile(pile_6, x_7, (y_8 - 1));
                }
            }
            if ((x_7 > 0)) {
                pile_6[(int)(y_8)][(x_7 - 1)] = (pile_6[(int)(y_8)][(int)((x_7 - 1))] + 1);
                if ((pile_6[(int)(y_8)][(int)((x_7 - 1))] >= 4)) {
                    pile_6 = handlePile(pile_6, (x_7 - 1), y_8);
                }
            }
            if ((y_8 < (dim_0 - 1))) {
                pile_6[(int)((y_8 + 1))][x_7] = (pile_6[(int)((y_8 + 1))][(int)(x_7)] + 1);
                if ((pile_6[(int)((y_8 + 1))][(int)(x_7)] >= 4)) {
                    pile_6 = handlePile(pile_6, x_7, (y_8 + 1));
                }
            }
            if ((x_7 < (dim_0 - 1))) {
                pile_6[(int)(y_8)][(x_7 + 1)] = (pile_6[(int)(y_8)][(int)((x_7 + 1))] + 1);
                if ((pile_6[(int)(y_8)][(int)((x_7 + 1))] >= 4)) {
                    pile_6 = handlePile(pile_6, (x_7 + 1), y_8);
                }
            }
            pile_6 = handlePile(pile_6, x_7, y_8);
        };
        return pile_6;
    }

    static void drawPile(long[][] pile_9, long d_10) {
        string[] chars_11 = new string[]{" ", "░", "▓", "█"};
        long row_12 = 0;
        while ((row_12 < d_10)) {
            string line_13 = "";
            long col_14 = 0;
            while ((col_14 < d_10)) {
                long v_15 = pile_9[(int)(row_12)][(int)(col_14)];
                if ((v_15 > 3)) {
                    v_15 = 3;
                }
                line_13 = (line_13 + chars_11[(int)(v_15)]);
                col_14 = (col_14 + 1);
            }
            Console.WriteLine(_fmtTop(line_13));
            row_12 = (row_12 + 1);
        };
    }

    static void main() {
        long[][] pile_16 = newPile(16);
        long hdim_17 = 7;
        pile_16[(int)(hdim_17)][hdim_17] = 16;
        pile_16 = handlePile(pile_16, hdim_17, hdim_17);
        drawPile(pile_16, 16);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
