// Generated by Mochi 0.10.40 on 2025-07-25 19:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long dim_0 = 16;
    static long[][] newPile(long d) {
        long[][] b_1 = new long[][]{};
        long y_2 = 0;
        while ((y_2 < d)) {
            long[] row_3 = new long[]{};
            long x_4 = 0;
            while ((x_4 < d)) {
                row_3 = (Enumerable.ToArray(Enumerable.Append(row_3, 0)));
                x_4 = (x_4 + 1);
            }
            b_1 = (Enumerable.ToArray(Enumerable.Append(b_1, row_3)));
            y_2 = (y_2 + 1);
        };
        return b_1;
    }

    static long[][] handlePile(long[][] pile, long x, long y) {
        if ((pile[y][x] >= 4)) {
            pile[y][x] = (pile[y][x] - 4);
            if ((y > 0)) {
                pile[(y - 1)][x] = (pile[(y - 1)][x] + 1);
                if ((pile[(y - 1)][x] >= 4)) {
                    pile = handlePile(pile, x, (y - 1));
                }
            }
            if ((x > 0)) {
                pile[y][(x - 1)] = (pile[y][(x - 1)] + 1);
                if ((pile[y][(x - 1)] >= 4)) {
                    pile = handlePile(pile, (x - 1), y);
                }
            }
            if ((y < (dim_0 - 1))) {
                pile[(y + 1)][x] = (pile[(y + 1)][x] + 1);
                if ((pile[(y + 1)][x] >= 4)) {
                    pile = handlePile(pile, x, (y + 1));
                }
            }
            if ((x < (dim_0 - 1))) {
                pile[y][(x + 1)] = (pile[y][(x + 1)] + 1);
                if ((pile[y][(x + 1)] >= 4)) {
                    pile = handlePile(pile, (x + 1), y);
                }
            }
            pile = handlePile(pile, x, y);
        };
        return pile;
    }

    static void drawPile(long[][] pile, long d) {
        string[] chars_5 = new string[]{" ", "░", "▓", "█"};
        long row_6 = 0;
        while ((row_6 < d)) {
            string line_7 = "";
            long col_8 = 0;
            while ((col_8 < d)) {
                long v_9 = pile[row_6][col_8];
                if ((v_9 > 3)) {
                    v_9 = 3;
                }
                line_7 = (line_7 + chars_5[v_9]);
                col_8 = (col_8 + 1);
            }
            Console.WriteLine(_fmtTop(line_7));
            row_6 = (row_6 + 1);
        };
    }

    static void main() {
        long[][] pile_10 = newPile(16);
        long hdim_11 = 7;
        pile_10[hdim_11][hdim_11] = 16;
        pile_10 = handlePile(pile_10, hdim_11, hdim_11);
        drawPile(pile_10, 16);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
