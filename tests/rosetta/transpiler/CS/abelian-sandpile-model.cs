// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static int dim = 16;
    static int[][] newPile(int d) {
        int[][] b = new int[][]{};
        int y = 0;
        while ((y < d)) {
            int[] row = new int[]{};
            int x = 0;
            while ((x < d)) {
                row = (row.Append(0).ToArray());
                x = (x + 1);
            }
            b = (b.Append(row).ToArray());
            y = (y + 1);
        };
        return b;
    }

    static int[][] handlePile(int[][] pile, int x, int y) {
        if ((pile[y][x] >= 4)) {
            pile[y][x] = (pile[y][x] - 4);
            if ((y > 0)) {
                pile[(y - 1)][x] = (pile[(y - 1)][x] + 1);
                if ((pile[(y - 1)][x] >= 4)) {
                    pile = handlePile(pile, x, (y - 1));
                }
            }
            if ((x > 0)) {
                pile[y][(x - 1)] = (pile[y][(x - 1)] + 1);
                if ((pile[y][(x - 1)] >= 4)) {
                    pile = handlePile(pile, (x - 1), y);
                }
            }
            if ((y < (dim - 1))) {
                pile[(y + 1)][x] = (pile[(y + 1)][x] + 1);
                if ((pile[(y + 1)][x] >= 4)) {
                    pile = handlePile(pile, x, (y + 1));
                }
            }
            if ((x < (dim - 1))) {
                pile[y][(x + 1)] = (pile[y][(x + 1)] + 1);
                if ((pile[y][(x + 1)] >= 4)) {
                    pile = handlePile(pile, (x + 1), y);
                }
            }
            pile = handlePile(pile, x, y);
        };
        return pile;
    }

    static void drawPile(int[][] pile, int d) {
        string[] chars = new string[]{" ", "░", "▓", "█"};
        int row = 0;
        while ((row < d)) {
            string line = "";
            int col = 0;
            while ((col < d)) {
                int v = pile[row][col];
                if ((v > 3)) {
                    v = 3;
                }
                line = (line + chars[v]);
                col = (col + 1);
            }
            Console.WriteLine(_fmtTop(line));
            row = (row + 1);
        };
    }

    static void main() {
        int[][] pile = newPile(16);
        int hdim = 7;
        pile[hdim][hdim] = 16;
        pile = handlePile(pile, hdim, hdim);
        drawPile(pile, 16);
    }

    static void Main() {
        main();
    }
}
