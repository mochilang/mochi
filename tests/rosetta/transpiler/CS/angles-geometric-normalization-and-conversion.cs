// Generated by Mochi 0.10.40 on 2025-07-25 12:58 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double d2d(double d) {
        return (d % 360);
    }

    static double g2g(double g) {
        return (g % 400);
    }

    static double m2m(double m) {
        return (m % 6400);
    }

    static double r2r(double r) {
        return (r % (2 * 3.141592653589793));
    }

    static double d2g(double d) {
        return ((d2d(d) * 400) / 360);
    }

    static double d2m(double d) {
        return ((d2d(d) * 6400) / 360);
    }

    static double d2r(double d) {
        return ((d2d(d) * 3.141592653589793) / 180);
    }

    static double g2d(double g) {
        return ((g2g(g) * 360) / 400);
    }

    static double g2m(double g) {
        return ((g2g(g) * 6400) / 400);
    }

    static double g2r(double g) {
        return ((g2g(g) * 3.141592653589793) / 200);
    }

    static double m2d(double m) {
        return ((m2m(m) * 360) / 6400);
    }

    static double m2g(double m) {
        return ((m2m(m) * 400) / 6400);
    }

    static double m2r(double m) {
        return ((m2m(m) * 3.141592653589793) / 3200);
    }

    static double r2d(double r) {
        return ((r2r(r) * 180) / 3.141592653589793);
    }

    static double r2g(double r) {
        return ((r2r(r) * 200) / 3.141592653589793);
    }

    static double r2m(double r) {
        return ((r2r(r) * 3200) / 3.141592653589793);
    }

    static void main() {
        double[] angles = new double[]{-2, -1, 0, 1, 2, 6.2831853, 16, 57.2957795, 359, 399, 6399, 1e+06};
        Console.WriteLine(_fmtTop("degrees normalized_degs gradians mils radians"));
        foreach (var a_0 in angles) {
            Console.WriteLine(_fmtTop((((((((((a_0).ToString() + " ") + (d2d(a_0)).ToString()) + " ") + (d2g(a_0)).ToString()) + " ") + (d2m(a_0)).ToString()) + " ") + (d2r(a_0)).ToString())));
        };
        Console.WriteLine(_fmtTop("\ngradians normalized_grds degrees mils radians"));
        foreach (var a_1 in angles) {
            Console.WriteLine(_fmtTop((((((((((a_1).ToString() + " ") + (g2g(a_1)).ToString()) + " ") + (g2d(a_1)).ToString()) + " ") + (g2m(a_1)).ToString()) + " ") + (g2r(a_1)).ToString())));
        };
        Console.WriteLine(_fmtTop("\nmils normalized_mils degrees gradians radians"));
        foreach (var a_2 in angles) {
            Console.WriteLine(_fmtTop((((((((((a_2).ToString() + " ") + (m2m(a_2)).ToString()) + " ") + (m2d(a_2)).ToString()) + " ") + (m2g(a_2)).ToString()) + " ") + (m2r(a_2)).ToString())));
        };
        Console.WriteLine(_fmtTop("\nradians normalized_rads degrees gradians mils"));
        foreach (var a_3 in angles) {
            Console.WriteLine(_fmtTop((((((((((a_3).ToString() + " ") + (r2r(a_3)).ToString()) + " ") + (r2d(a_3)).ToString()) + " ") + (r2g(a_3)).ToString()) + " ") + (r2m(a_3)).ToString())));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
