// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double d2d(double d_0) {
        return (d_0 % 360.0);
    }

    static double g2g(double g_1) {
        return (g_1 % 400.0);
    }

    static double m2m(double m_2) {
        return (m_2 % 6400.0);
    }

    static double r2r(double r_3) {
        return (r_3 % (2.0 * 3.141592653589793));
    }

    static double d2g(double d_4) {
        return ((d2d(d_4) * 400.0) / 360.0);
    }

    static double d2m(double d_5) {
        return ((d2d(d_5) * 6400.0) / 360.0);
    }

    static double d2r(double d_6) {
        return ((d2d(d_6) * 3.141592653589793) / 180.0);
    }

    static double g2d(double g_7) {
        return ((g2g(g_7) * 360.0) / 400.0);
    }

    static double g2m(double g_8) {
        return ((g2g(g_8) * 6400.0) / 400.0);
    }

    static double g2r(double g_9) {
        return ((g2g(g_9) * 3.141592653589793) / 200.0);
    }

    static double m2d(double m_10) {
        return ((m2m(m_10) * 360.0) / 6400.0);
    }

    static double m2g(double m_11) {
        return ((m2m(m_11) * 400.0) / 6400.0);
    }

    static double m2r(double m_12) {
        return ((m2m(m_12) * 3.141592653589793) / 3200.0);
    }

    static double r2d(double r_13) {
        return ((r2r(r_13) * 180.0) / 3.141592653589793);
    }

    static double r2g(double r_14) {
        return ((r2r(r_14) * 200.0) / 3.141592653589793);
    }

    static double r2m(double r_15) {
        return ((r2r(r_15) * 3200.0) / 3.141592653589793);
    }

    static void main() {
        double[] angles_16 = new double[]{-2.0, -1.0, 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1e+06};
        Console.WriteLine(_fmtTop("degrees normalized_degs gradians mils radians"));
        foreach (var a_17 in angles_16) {
            Console.WriteLine(_fmtTop((((((((((a_17).ToString() + " ") + (d2d(a_17)).ToString()) + " ") + (d2g(a_17)).ToString()) + " ") + (d2m(a_17)).ToString()) + " ") + (d2r(a_17)).ToString())));
        };
        Console.WriteLine(_fmtTop("\ngradians normalized_grds degrees mils radians"));
        foreach (var a_18 in angles_16) {
            Console.WriteLine(_fmtTop((((((((((a_18).ToString() + " ") + (g2g(a_18)).ToString()) + " ") + (g2d(a_18)).ToString()) + " ") + (g2m(a_18)).ToString()) + " ") + (g2r(a_18)).ToString())));
        };
        Console.WriteLine(_fmtTop("\nmils normalized_mils degrees gradians radians"));
        foreach (var a_19 in angles_16) {
            Console.WriteLine(_fmtTop((((((((((a_19).ToString() + " ") + (m2m(a_19)).ToString()) + " ") + (m2d(a_19)).ToString()) + " ") + (m2g(a_19)).ToString()) + " ") + (m2r(a_19)).ToString())));
        };
        Console.WriteLine(_fmtTop("\nradians normalized_rads degrees gradians mils"));
        foreach (var a_20 in angles_16) {
            Console.WriteLine(_fmtTop((((((((((a_20).ToString() + " ") + (r2r(a_20)).ToString()) + " ") + (r2d(a_20)).ToString()) + " ") + (r2g(a_20)).ToString()) + " ") + (r2m(a_20)).ToString())));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
