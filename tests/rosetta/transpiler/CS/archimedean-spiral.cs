// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double degreesIncr_11 = ((0.1 * PI_0) / 180.0);
    static double turns_12 = 2.0;
    static double stop_13 = (((360.0 * turns_12) * 10.0) * degreesIncr_11);
    static double width_14 = 600.0;
    static double centre_15 = (width_14 / 2.0);
    static double a_16 = 1.0;
    static double b_17 = 20.0;
    static double theta_18 = 0.0;
    static long count_19 = 0;
    static double sinApprox(double x_1) {
        double term_2 = x_1;
        double sum_3 = x_1;
        long n_4 = 1;
        while ((n_4 <= 10)) {
            var denom_5 = Convert.ToDouble(((2 * n_4) * ((2 * n_4) + 1)));
            term_2 = (((dynamic)(((-term_2 * x_1) * x_1))) / ((dynamic)(denom_5)));
            sum_3 = (sum_3 + term_2);
            n_4 = (n_4 + 1);
        };
        return sum_3;
    }

    static double cosApprox(double x_6) {
        double term_7 = 1.0;
        double sum_8 = 1.0;
        long n_9 = 1;
        while ((n_9 <= 10)) {
            var denom_10 = Convert.ToDouble((((2 * n_9) - 1) * (2 * n_9)));
            term_7 = (((dynamic)(((-term_7 * x_6) * x_6))) / ((dynamic)(denom_10)));
            sum_8 = (sum_8 + term_7);
            n_9 = (n_9 + 1);
        };
        return sum_8;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((theta_18 < stop_13)) {
                double r_20 = (a_16 + (b_17 * theta_18));
                double x_21 = (r_20 * cosApprox(theta_18));
                double y_22 = (r_20 * sinApprox(theta_18));
                if (((count_19 % 100) == 0)) {
                    Console.WriteLine(_fmtTop(((((centre_15 + x_21)).ToString() + ",") + ((centre_15 - y_22)).ToString())));
                }
                theta_18 = (theta_18 + degreesIncr_11);
                count_19 = (count_19 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
