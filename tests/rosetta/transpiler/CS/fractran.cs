// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class StepResult {
    public BigInteger n;
    public bool ok;
    public override string ToString() => $"StepResult {{n = {n}, ok = {ok}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static StepResult step(BigInteger n_0, BigInteger[][] program_1) {
        long i_2 = 0;
        while ((i_2 < program_1.Length)) {
            BigInteger num_3 = program_1[(int)(i_2)][(int)(0)];
            BigInteger den_4 = program_1[(int)(i_2)][(int)(1)];
            if (((n_0 % den_4) == new BigInteger(0))) {
                n_0 = ((n_0 / den_4) * num_3);
                return new StepResult{n = n_0, ok = true};
            }
            i_2 = (i_2 + 1);
        };
        return new StepResult{n = n_0, ok = false};
    }

    static void main() {
        BigInteger[][] program_5 = new BigInteger[][]{new BigInteger[]{new BigInteger(17), new BigInteger(91)}, new BigInteger[]{new BigInteger(78), new BigInteger(85)}, new BigInteger[]{new BigInteger(19), new BigInteger(51)}, new BigInteger[]{new BigInteger(23), new BigInteger(38)}, new BigInteger[]{new BigInteger(29), new BigInteger(33)}, new BigInteger[]{new BigInteger(77), new BigInteger(29)}, new BigInteger[]{new BigInteger(95), new BigInteger(23)}, new BigInteger[]{new BigInteger(77), new BigInteger(19)}, new BigInteger[]{new BigInteger(1), new BigInteger(17)}, new BigInteger[]{new BigInteger(11), new BigInteger(13)}, new BigInteger[]{new BigInteger(13), new BigInteger(11)}, new BigInteger[]{new BigInteger(15), new BigInteger(14)}, new BigInteger[]{new BigInteger(15), new BigInteger(2)}, new BigInteger[]{new BigInteger(55), new BigInteger(1)}};
        BigInteger n_6 = 2;
        long primes_7 = 0;
        long count_8 = 0;
        long limit_9 = 1000000;
        BigInteger two_10 = 2;
        string line_11 = "";
        while (((primes_7 < 20) && (count_8 < limit_9))) {
            StepResult res_12 = step(n_6, program_5);
            n_6 = res_12.n;
            if ((!res_12.ok)) {
                break;
            }
            BigInteger m_13 = n_6;
            long pow_14 = 0;
            while (((m_13 % two_10) == new BigInteger(0))) {
                m_13 = (m_13 / two_10);
                pow_14 = (pow_14 + 1);
            }
            if (((m_13 == new BigInteger(1)) && (pow_14 > 1))) {
                line_11 = ((line_11 + (pow_14).ToString()) + " ");
                primes_7 = (primes_7 + 1);
            }
            count_8 = (count_8 + 1);
        };
        if ((line_11.Length > 0)) {
            Console.WriteLine(_fmtTop(line_11.Substring((int)(0), (int)((((dynamic)(line_11.Length)) - ((dynamic)(1))) - 0))));
        } else {
            Console.WriteLine(_fmtTop(""));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
