// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class V3 {
    public double x;
    public double y;
    public double z;
    public override string ToString() => $"V3 {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, z = {z.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double sqrtApprox(double x_0) {
        if ((x_0 <= 0)) {
            return 0;
        };
        double guess_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    static double powf(double base_3, long exp_4) {
        double result_5 = 1;
        long i_6 = 0;
        while ((i_6 < exp_4)) {
            result_5 = (result_5 * base_3);
            i_6 = (i_6 + 1);
        };
        return result_5;
    }

    static V3 normalize(V3 v_7) {
        double len_8 = sqrtApprox((((v_7.x * v_7.x) + (v_7.y * v_7.y)) + (v_7.z * v_7.z)));
        return new V3{x = (v_7.x / len_8), y = (v_7.y / len_8), z = (v_7.z / len_8)};
    }

    static double dot(V3 a_9, V3 b_10) {
        double d_11 = (((a_9.x * b_10.x) + (a_9.y * b_10.y)) + (a_9.z * b_10.z));
        if ((d_11 < 0)) {
            return -d_11;
        };
        return 0;
    }

    static void drawSphere(long r_12, long k_13, double ambient_14, V3 light_15, string shades_16) {
        long i_17 = -r_12;
        while ((i_17 <= r_12)) {
            double x_18 = (((dynamic)Convert.ToDouble(i_17)) + ((dynamic)0.5));
            string line_19 = "";
            long j_20 = -(2 * r_12);
            while ((j_20 <= (2 * r_12))) {
                double y_21 = ((((dynamic)Convert.ToDouble(j_20)) / ((dynamic)2)) + 0.5);
                if ((((x_18 * x_18) + (y_21 * y_21)) <= (((dynamic)Convert.ToDouble(r_12)) * ((dynamic)Convert.ToDouble(r_12))))) {
                    double zsq_22 = ((((dynamic)(((dynamic)Convert.ToDouble(r_12)) * ((dynamic)Convert.ToDouble(r_12)))) - ((dynamic)(x_18 * x_18))) - (y_21 * y_21));
                    V3 vec_23 = normalize(new V3{x = x_18, y = y_21, z = sqrtApprox(zsq_22)});
                    double b_24 = (powf(dot(light_15, vec_23), k_13) + ambient_14);
                    long intensity_25 = Convert.ToInt64(((1 - b_24) * (((dynamic)Convert.ToDouble(shades_16.Length)) - ((dynamic)1))));
                    if ((intensity_25 < 0)) {
                        intensity_25 = 0;
                    }
                    if ((intensity_25 >= shades_16.Length)) {
                        intensity_25 = (((dynamic)shades_16.Length) - ((dynamic)1));
                    }
                    line_19 = (line_19 + shades_16.Substring((int)(intensity_25), (int)((intensity_25 + 1) - intensity_25)));
                } else {
                    line_19 = (line_19 + " ");
                }
                j_20 = (j_20 + 1);
            }
            Console.WriteLine(_fmtTop(line_19));
            i_17 = (i_17 + 1);
        };
    }

    static void main() {
        string shades_26 = ".:!*oe&#%@";
        V3 light_27 = normalize(new V3{x = 30, y = 30, z = -50});
        drawSphere(20, 4, 0.1, light_27, shades_26);
        drawSphere(10, 2, 0.4, light_27, shades_26);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
