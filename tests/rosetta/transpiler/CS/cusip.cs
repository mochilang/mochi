// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] candidates_8 = new string[]{"037833100", "17275R102", "38259P508", "594918104", "68389X106", "68389X105"};
    static long ord(string ch_0) {
        string upper_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        if (((string.Compare(ch_0, "0") >= 0) && (string.Compare(ch_0, "9") <= 0))) {
            return (((dynamic)Convert.ToInt64(ch_0, 10)) + ((dynamic)48));
        };
        var idx_2 = upper_1.IndexOf(ch_0);
        if ((idx_2 >= 0)) {
            return (((dynamic)65) + ((dynamic)idx_2));
        };
        return 0;
    }

    static bool isCusip(string s_3) {
        if ((s_3.Length != 9)) {
            return false;
        };
        long sum_4 = 0;
        long i_5 = 0;
        while ((i_5 < 8)) {
            string c_6 = s_3.Substring((int)(i_5), (int)((i_5 + 1) - i_5));
            long v_7 = 0;
            if (((string.Compare(c_6, "0") >= 0) && (string.Compare(c_6, "9") <= 0))) {
                v_7 = Convert.ToInt64(c_6, 10);
            } else {
                if (((string.Compare(c_6, "A") >= 0) && (string.Compare(c_6, "Z") <= 0))) {
                    v_7 = (ord(c_6) - 55);
                } else {
                    if ((c_6 == "*")) {
                        v_7 = 36;
                    } else {
                        if ((c_6 == "@")) {
                            v_7 = 37;
                        } else {
                            if ((c_6 == "#")) {
                                v_7 = 38;
                            } else {
                                return false;
                            }
                        }
                    }
                }
            }
            if (((i_5 % 2) == 1)) {
                v_7 = (v_7 * 2);
            }
            sum_4 = ((sum_4 + (v_7 / 10)) + (v_7 % 10));
            i_5 = (i_5 + 1);
        };
        return (Convert.ToInt64(s_3.Substring((int)(8), (int)(9 - 8)), 10) == ((10 - (sum_4 % 10)) % 10));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (var cand_9 in candidates_8) {
                string b_10 = "incorrect";
                if (isCusip(cand_9)) {
                    b_10 = "correct";
                }
                Console.WriteLine(_fmtTop(((cand_9 + " -> ") + b_10)));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
