// Generated by Mochi 0.10.52 on 2025-07-31 08:37 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long parseIntStr(string str_0) {
        long i_1 = 0;
        bool neg_2 = false;
        if (((Convert.ToDouble(str_0.Length) > Convert.ToDouble(0)) && (str_0.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_2 = true;
            i_1 = 1;
        };
        long n_3 = 0;
        Dictionary<string, long> digits_4 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((Convert.ToDouble(i_1) < Convert.ToDouble(str_0.Length))) {
            n_3 = ((n_3 * 10) + (digits_4.ContainsKey(str_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1))) ? digits_4[str_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1))] : 0));
            i_1 = (i_1 + 1);
        };
        if (neg_2) {
            n_3 = -n_3;
        };
        return n_3;
    }

    static string[] fields(string s_5) {
        string[] words_6 = new string[]{};
        string cur_7 = "";
        long i_8 = 0;
        while ((Convert.ToDouble(i_8) < Convert.ToDouble(s_5.Length))) {
            string ch_9 = s_5.Substring((int)(i_8), (int)((i_8 + 1) - i_8));
            if ((((ch_9 == " ") || (ch_9 == "\t")) || (ch_9 == "\n"))) {
                if ((Convert.ToDouble(cur_7.Length) > Convert.ToDouble(0))) {
                    words_6 = (Enumerable.ToArray(Enumerable.Append(words_6, cur_7)));
                    cur_7 = "";
                }
            } else {
                cur_7 = (cur_7 + ch_9);
            }
            i_8 = (i_8 + 1);
        };
        if ((Convert.ToDouble(cur_7.Length) > Convert.ToDouble(0))) {
            words_6 = (Enumerable.ToArray(Enumerable.Append(words_6, cur_7)));
        };
        return words_6;
    }

    static string unescape(string s_10) {
        string out_11 = "";
        long i_12 = 0;
        while ((Convert.ToDouble(i_12) < Convert.ToDouble(s_10.Length))) {
            if (((s_10.Substring((int)(i_12), (int)((i_12 + 1) - i_12)) == "\\") && (Convert.ToDouble((i_12 + 1)) < Convert.ToDouble(s_10.Length)))) {
                string c_13 = s_10.Substring((int)((i_12 + 1)), (int)((i_12 + 2) - (i_12 + 1)));
                if ((c_13 == "n")) {
                    out_11 = (out_11 + "\n");
                    i_12 = (i_12 + 2);
                    continue;
                } else {
                    if ((c_13 == "\\")) {
                        out_11 = (out_11 + "\\");
                        i_12 = (i_12 + 2);
                        continue;
                    }
                }
            }
            out_11 = (out_11 + s_10.Substring((int)(i_12), (int)((i_12 + 1) - i_12)));
            i_12 = (i_12 + 1);
        };
        return out_11;
    }

    static Dictionary<string, object> parseProgram(string src_14) {
        string[] lines_15 = src_14.Split("\n");
        string[] header_16 = fields(lines_15[(int)(0)]);
        long dataSize_17 = parseIntStr(header_16[(int)(1)]);
        long nStrings_18 = parseIntStr(header_16[(int)(3)]);
        string[] stringPool_19 = new string[]{};
        long i_20 = 1;
        while ((i_20 <= nStrings_18)) {
            string s_21 = lines_15[(int)(i_20)];
            if ((Convert.ToDouble(s_21.Length) > Convert.ToDouble(0))) {
                stringPool_19 = (Enumerable.ToArray(Enumerable.Append(stringPool_19, unescape(s_21.Substring((int)(1), (int)((((dynamic)(s_21.Length)) - ((dynamic)(1))) - 1))))));
            }
            i_20 = (i_20 + 1);
        };
        Dictionary<string, object>[] code_22 = new Dictionary<string, object>[]{};
        Dictionary<long, long> addrMap_23 = new Dictionary<long, long>{};
        while ((Convert.ToDouble(i_20) < Convert.ToDouble(lines_15.Length))) {
            string line_24 = trim(lines_15[(int)(i_20)]);
            if ((line_24.Length == 0)) {
                break;
            }
            string[] parts_25 = fields(line_24);
            long addr_26 = parseIntStr(parts_25[(int)(0)]);
            string op_27 = parts_25[(int)(1)];
            long arg_28 = 0;
            if ((op_27 == "push")) {
                arg_28 = parseIntStr(parts_25[(int)(2)]);
            } else {
                if (((op_27 == "fetch") || (op_27 == "store"))) {
                    arg_28 = parseIntStr(parts_25[(int)(2)].Substring((int)(1), (int)((((dynamic)(parts_25[(int)(2)].Length)) - ((dynamic)(1))) - 1)));
                } else {
                    if (((op_27 == "jmp") || (op_27 == "jz"))) {
                        arg_28 = parseIntStr(parts_25[(int)(3)]);
                    }
                }
            }
            code_22 = (Enumerable.ToArray(Enumerable.Append(code_22, new Dictionary<string, object>{{"addr", addr_26}, {"op", op_27}, {"arg", arg_28}})));
            addrMap_23[addr_26] = (((dynamic)(code_22.Length)) - ((dynamic)(1)));
            i_20 = (i_20 + 1);
        };
        return new Dictionary<string, object>{{"dataSize", dataSize_17}, {"strings", stringPool_19}, {"code", code_22}, {"addrMap", addrMap_23}};
    }

    static void runVM(Dictionary<string, object> prog_29) {
        long[] data_30 = new long[]{};
        long i_31 = 0;
        while ((Convert.ToDouble(i_31) < Convert.ToDouble(((dynamic)prog_29)["dataSize"]))) {
            data_30 = (Enumerable.ToArray(Enumerable.Append(data_30, 0)));
            i_31 = (i_31 + 1);
        };
        long[] stack_32 = new long[]{};
        long pc_33 = 0;
        object code_34 = ((dynamic)prog_29)["code"];
        object addrMap_35 = ((dynamic)prog_29)["addrMap"];
        object pool_36 = ((dynamic)prog_29)["strings"];
        string line_37 = "";
        while ((Convert.ToDouble(pc_33) < Convert.ToDouble(Convert.ToString(code_34).Length))) {
            var inst_38 = ((dynamic)code_34)[pc_33];
            var op_39 = ((dynamic)inst_38)["op"];
            var arg_40 = ((dynamic)inst_38)["arg"];
            if ((op_39 == "push")) {
                stack_32 = (Enumerable.ToArray(Enumerable.Append(stack_32, arg_40)));
                pc_33 = (pc_33 + 1);
                continue;
            }
            if ((op_39 == "store")) {
                data_30[arg_40] = stack_32[(int)((((dynamic)(stack_32.Length)) - ((dynamic)(1))))];
                stack_32 = stack_32.Skip((int)(0)).Take((int)(((((dynamic)(stack_32.Length)) - ((dynamic)(1))) - 0))).ToArray();
                pc_33 = (pc_33 + 1);
                continue;
            }
            if ((op_39 == "fetch")) {
                stack_32 = (Enumerable.ToArray(Enumerable.Append(stack_32, data_30[(int)(arg_40)])));
                pc_33 = (pc_33 + 1);
                continue;
            }
            if ((op_39 == "add")) {
                stack_32[(((dynamic)(stack_32.Length)) - ((dynamic)(2)))] = (stack_32[(int)((((dynamic)(stack_32.Length)) - ((dynamic)(2))))] + stack_32[(int)((((dynamic)(stack_32.Length)) - ((dynamic)(1))))]);
                stack_32 = stack_32.Skip((int)(0)).Take((int)(((((dynamic)(stack_32.Length)) - ((dynamic)(1))) - 0))).ToArray();
                pc_33 = (pc_33 + 1);
                continue;
            }
            if ((op_39 == "lt")) {
                long v_41 = 0;
                if ((stack_32[(int)((((dynamic)(stack_32.Length)) - ((dynamic)(2))))] < stack_32[(int)((((dynamic)(stack_32.Length)) - ((dynamic)(1))))])) {
                    v_41 = 1;
                }
                stack_32[(((dynamic)(stack_32.Length)) - ((dynamic)(2)))] = v_41;
                stack_32 = stack_32.Skip((int)(0)).Take((int)(((((dynamic)(stack_32.Length)) - ((dynamic)(1))) - 0))).ToArray();
                pc_33 = (pc_33 + 1);
                continue;
            }
            if ((op_39 == "jz")) {
                long v_42 = stack_32[(int)((((dynamic)(stack_32.Length)) - ((dynamic)(1))))];
                stack_32 = stack_32.Skip((int)(0)).Take((int)(((((dynamic)(stack_32.Length)) - ((dynamic)(1))) - 0))).ToArray();
                if ((v_42 == 0)) {
                    pc_33 = ((dynamic)addrMap_35)[arg_40];
                } else {
                    pc_33 = (pc_33 + 1);
                }
                continue;
            }
            if ((op_39 == "jmp")) {
                pc_33 = ((dynamic)addrMap_35)[arg_40];
                continue;
            }
            if ((op_39 == "prts")) {
                var s_43 = ((dynamic)pool_36)[stack_32[(int)((((dynamic)(stack_32.Length)) - ((dynamic)(1))))]];
                stack_32 = stack_32.Skip((int)(0)).Take((int)(((((dynamic)(stack_32.Length)) - ((dynamic)(1))) - 0))).ToArray();
                if ((s_43 != "\n")) {
                    line_37 = (((dynamic)(line_37)) + ((dynamic)(s_43)));
                }
                pc_33 = (pc_33 + 1);
                continue;
            }
            if ((op_39 == "prti")) {
                line_37 = (line_37 + _fmt(stack_32[(int)((((dynamic)(stack_32.Length)) - ((dynamic)(1))))]));
                Console.WriteLine(_fmtTop(line_37));
                line_37 = "";
                stack_32 = stack_32.Skip((int)(0)).Take((int)(((((dynamic)(stack_32.Length)) - ((dynamic)(1))) - 0))).ToArray();
                pc_33 = (pc_33 + 1);
                continue;
            }
            if ((op_39 == "halt")) {
                break;
            }
            pc_33 = (pc_33 + 1);
        };
    }

    static string trim(string s_44) {
        long start_45 = 0;
        while (((Convert.ToDouble(start_45) < Convert.ToDouble(s_44.Length)) && ((s_44.Substring((int)(start_45), (int)((start_45 + 1) - start_45)) == " ") || (s_44.Substring((int)(start_45), (int)((start_45 + 1) - start_45)) == "\t")))) {
            start_45 = (start_45 + 1);
        };
        long end_46 = s_44.Length;
        while (((end_46 > start_45) && ((s_44.Substring((int)((end_46 - 1)), (int)(end_46 - (end_46 - 1))) == " ") || (s_44.Substring((int)((end_46 - 1)), (int)(end_46 - (end_46 - 1))) == "\t")))) {
            end_46 = (end_46 - 1);
        };
        return s_44.Substring((int)(start_45), (int)(end_46 - start_45));
    }

    static string[] split(string s_47, string sep_48) {
        string[] parts_49 = new string[]{};
        string cur_50 = "";
        long i_51 = 0;
        while ((Convert.ToDouble(i_51) < Convert.ToDouble(s_47.Length))) {
            if ((((Convert.ToDouble(sep_48.Length) > Convert.ToDouble(0)) && (Convert.ToDouble((((dynamic)(i_51)) + ((dynamic)(sep_48.Length)))) <= Convert.ToDouble(s_47.Length))) && (s_47.Substring((int)(i_51), (int)((((dynamic)(i_51)) + ((dynamic)(sep_48.Length))) - i_51)) == sep_48))) {
                parts_49 = (Enumerable.ToArray(Enumerable.Append(parts_49, cur_50)));
                cur_50 = "";
                i_51 = (((dynamic)(i_51)) + ((dynamic)(sep_48.Length)));
            } else {
                cur_50 = (cur_50 + s_47.Substring((int)(i_51), (int)((i_51 + 1) - i_51)));
                i_51 = (i_51 + 1);
            }
        };
        parts_49 = (Enumerable.ToArray(Enumerable.Append(parts_49, cur_50)));
        return parts_49;
    }

    static void main() {
        string programText_52 = (((((((((((((((((((("Datasize: 1 Strings: 2\n" + "\"count is: \"\n") + "\"\\n\"\n") + "    0 push  1\n") + "    5 store [0]\n") + "   10 fetch [0]\n") + "   15 push  10\n") + "   20 lt\n") + "   21 jz     (43) 65\n") + "   26 push  0\n") + "   31 prts\n") + "   32 fetch [0]\n") + "   37 prti\n") + "   38 push  1\n") + "   43 prts\n") + "   44 fetch [0]\n") + "   49 push  1\n") + "   54 add\n") + "   55 store [0]\n") + "   60 jmp    (-51) 10\n") + "   65 halt\n");
        Dictionary<string, object> prog_53 = parseProgram(programText_52);
        runVM(prog_53);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
