// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOf(string s, string ch) {
        long i_0 = 0;
        while ((i_0 < s.Length)) {
            if ((s.Substring((int)(i_0), (int)((i_0 + 1) - i_0)) == ch)) {
                return i_0;
            }
            i_0 = (i_0 + 1);
        };
        return -1;
    }

    static string fmt3(double x) {
        double y_1 = (((dynamic)Convert.ToDouble(Convert.ToInt64(((x * 1000) + 0.5)))) / ((dynamic)1000));
        string s_2 = (y_1).ToString();
        long dot_3 = indexOf(s_2, ".");
        if ((dot_3 == (0 - 1))) {
            s_2 = (s_2 + ".000");
        } else {
            long decs_4 = ((((dynamic)s_2.Length) - ((dynamic)dot_3)) - 1);
            if ((decs_4 > 3)) {
                s_2 = s_2.Substring((int)(0), (int)((dot_3 + 4) - 0));
            } else {
                while ((decs_4 < 3)) {
                    s_2 = (s_2 + "0");
                    decs_4 = (decs_4 + 1);
                }
            }
        };
        return s_2;
    }

    static string pad(string s, long width) {
        string out_5 = s;
        while ((out_5.Length < width)) {
            out_5 = (" " + out_5);
        };
        return out_5;
    }

    static double[] smaSeries(double[] xs, long period) {
        double[] res_6 = new double[]{};
        double sum_7 = 0;
        long i_8 = 0;
        while ((i_8 < xs.Length)) {
            sum_7 = (sum_7 + xs[(int)(i_8)]);
            if ((i_8 >= period)) {
                sum_7 = (sum_7 - xs[(int)((i_8 - period))]);
            }
            long denom_9 = (i_8 + 1);
            if ((denom_9 > period)) {
                denom_9 = period;
            }
            res_6 = (Enumerable.ToArray(Enumerable.Append(res_6, (((dynamic)sum_7) / ((dynamic)Convert.ToDouble(denom_9))))));
            i_8 = (i_8 + 1);
        };
        return res_6;
    }

    static void main() {
        double[] xs_10 = new double[]{1, 2, 3, 4, 5, 5, 4, 3, 2, 1};
        double[] sma3_11 = smaSeries(xs_10, 3);
        double[] sma5_12 = smaSeries(xs_10, 5);
        Console.WriteLine(_fmtTop("x       sma3   sma5"));
        long i_13 = 0;
        while ((i_13 < xs_10.Length)) {
            string line_14 = ((((pad(fmt3(xs_10[(int)(i_13)]), 5) + "  ") + pad(fmt3(sma3_11[(int)(i_13)]), 5)) + "  ") + pad(fmt3(sma5_12[(int)(i_13)]), 5));
            Console.WriteLine(_fmtTop(line_14));
            i_13 = (i_13 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
