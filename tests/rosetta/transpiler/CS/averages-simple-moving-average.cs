// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((string.Compare(Convert.ToString(i_2), Convert.ToString(s_0.Length)) < 0)) {
            if ((s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2)) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    static string fmt3(double x_3) {
        double y_4 = (((dynamic)(Convert.ToDouble(Convert.ToInt64(((x_3 * 1000.0) + 0.5))))) / ((dynamic)(1000.0)));
        string s_5 = (y_4).ToString();
        long dot_6 = indexOf(s_5, ".");
        if ((dot_6 == (0 - 1))) {
            s_5 = (s_5 + ".000");
        } else {
            long decs_7 = ((((dynamic)(s_5.Length)) - ((dynamic)(dot_6))) - 1);
            if ((decs_7 > 3)) {
                s_5 = s_5.Substring((int)(0), (int)((dot_6 + 4) - 0));
            } else {
                while ((decs_7 < 3)) {
                    s_5 = (s_5 + "0");
                    decs_7 = (decs_7 + 1);
                }
            }
        };
        return s_5;
    }

    static string pad(string s_8, long width_9) {
        string out_10 = s_8;
        while ((string.Compare(Convert.ToString(out_10.Length), Convert.ToString(width_9)) < 0)) {
            out_10 = (" " + out_10);
        };
        return out_10;
    }

    static double[] smaSeries(double[] xs_11, long period_12) {
        double[] res_13 = new double[]{};
        double sum_14 = 0.0;
        long i_15 = 0;
        while ((string.Compare(Convert.ToString(i_15), Convert.ToString(xs_11.Length)) < 0)) {
            sum_14 = (sum_14 + xs_11[(int)(i_15)]);
            if ((i_15 >= period_12)) {
                sum_14 = (sum_14 - xs_11[(int)((i_15 - period_12))]);
            }
            long denom_16 = (i_15 + 1);
            if ((denom_16 > period_12)) {
                denom_16 = period_12;
            }
            res_13 = (Enumerable.ToArray(Enumerable.Append(res_13, (((dynamic)(sum_14)) / ((dynamic)(Convert.ToDouble(denom_16)))))));
            i_15 = (i_15 + 1);
        };
        return res_13;
    }

    static void main() {
        double[] xs_17 = new double[]{1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0};
        double[] sma3_18 = smaSeries(xs_17, 3);
        double[] sma5_19 = smaSeries(xs_17, 5);
        Console.WriteLine(_fmtTop("x       sma3   sma5"));
        long i_20 = 0;
        while ((string.Compare(Convert.ToString(i_20), Convert.ToString(xs_17.Length)) < 0)) {
            string line_21 = ((((pad(fmt3(xs_17[(int)(i_20)]), 5) + "  ") + pad(fmt3(sma3_18[(int)(i_20)]), 5)) + "  ") + pad(fmt3(sma5_19[(int)(i_20)]), 5));
            Console.WriteLine(_fmtTop(line_21));
            i_20 = (i_20 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
