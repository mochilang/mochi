// Generated by Mochi 0.10.55 on 2025-08-03 10:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Collections;

class Delegator {
    public Dictionary<string, Func<string>> _delegate;
    public override string ToString() => $"Delegator {{_delegate = {_delegate}}}";
}
class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Delegator a_2 = new Delegator{_delegate = new Dictionary<string, Func<string>>{}};
    static string operation(Delegator d_0) {
        if ((d_0._delegate.ContainsKey("thing"))) {
            return (d_0._delegate.ContainsKey("thing") ? d_0._delegate["thing"] : null)();
        };
        return "default implementation";
    }

    static Dictionary<string, Func<string>> newDelegate() {
        Dictionary<string, Func<string>> m_1 = new Dictionary<string, Func<string>>{};
        m_1["thing"] = () => {return "delegate implementation";};
        return m_1;
    }

    static void Main() {
        Console.WriteLine(Program._fmtTop(operation(a_2)));
        a_2._delegate = new Dictionary<string, Func<string>>{};
        Console.WriteLine(Program._fmtTop(operation(a_2)));
        a_2._delegate = newDelegate();
        Console.WriteLine(Program._fmtTop(operation(a_2)));
    }
}
