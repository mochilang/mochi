// Generated by Mochi 0.10.40 on 2025-07-25 19:23 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long pfacSum(long i) {
        long sum_0 = 0;
        long p_1 = 1;
        while ((p_1 <= (i / 2))) {
            if (((i % p_1) == 0)) {
                sum_0 = (sum_0 + p_1);
            }
            p_1 = (p_1 + 1);
        };
        return sum_0;
    }

    static void main() {
        long d_2 = 0;
        long a_3 = 0;
        long pnum_4 = 0;
        long i_5 = 1;
        while ((i_5 <= 20000)) {
            long j_6 = pfacSum(i_5);
            if ((j_6 < i_5)) {
                d_2 = (d_2 + 1);
            }
            if ((j_6 == i_5)) {
                pnum_4 = (pnum_4 + 1);
            }
            if ((j_6 > i_5)) {
                a_3 = (a_3 + 1);
            }
            i_5 = (i_5 + 1);
        };
        Console.WriteLine(_fmtTop((("There are " + (d_2).ToString()) + " deficient numbers between 1 and 20000")));
        Console.WriteLine(_fmtTop((("There are " + (a_3).ToString()) + " abundant numbers  between 1 and 20000")));
        Console.WriteLine(_fmtTop((("There are " + (pnum_4).ToString()) + " perfect numbers between 1 and 20000")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
