// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Writer {
    public string order;
    public long bits;
    public long nbits;
    public long[] data;
    public override string ToString() => $"Writer {{order = \"{order}\", bits = {bits}, nbits = {nbits}, data = {data}}}";
}
class Reader {
    public string order;
    public long[] data;
    public long idx;
    public long bits;
    public long nbits;
    public override string ToString() => $"Reader {{order = \"{order}\", data = {data}, idx = {idx}, bits = {bits}, nbits = {nbits}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long pow2(long n_0) {
        long v_1 = 1;
        long i_2 = 0;
        while ((i_2 < n_0)) {
            v_1 = (v_1 * 2);
            i_2 = (i_2 + 1);
        };
        return v_1;
    }

    static long lshift(long x_3, long n_4) {
        return (x_3 * pow2(n_4));
    }

    static long rshift(long x_5, long n_6) {
        return (x_5 / pow2(n_6));
    }

    static Writer NewWriter(string order_7) {
        return new Writer{order = order_7, bits = 0, nbits = 0, data = new long[]{}};
    }

    static Writer writeBitsLSB(Writer w_8, long c_9, long width_10) {
        w_8.bits = (w_8.bits + lshift(c_9, w_8.nbits));
        w_8.nbits = (w_8.nbits + width_10);
        while ((w_8.nbits >= 8)) {
            long b_11 = (w_8.bits % 256);
            w_8.data = (Enumerable.ToArray(Enumerable.Append(w_8.data, b_11)));
            w_8.bits = rshift(w_8.bits, 8);
            w_8.nbits = (w_8.nbits - 8);
        };
        return w_8;
    }

    static Writer writeBitsMSB(Writer w_12, long c_13, long width_14) {
        w_12.bits = (w_12.bits + lshift(c_13, ((32 - width_14) - w_12.nbits)));
        w_12.nbits = (w_12.nbits + width_14);
        while ((w_12.nbits >= 8)) {
            long b_15 = (rshift(w_12.bits, 24) % 256);
            w_12.data = (Enumerable.ToArray(Enumerable.Append(w_12.data, b_15)));
            w_12.bits = ((w_12.bits % pow2(24)) * 256);
            w_12.nbits = (w_12.nbits - 8);
        };
        return w_12;
    }

    static Writer WriteBits(Writer w_16, long c_17, long width_18) {
        if ((w_16.order == "LSB")) {
            return writeBitsLSB(w_16, c_17, width_18);
        };
        return writeBitsMSB(w_16, c_17, width_18);
    }

    static Writer CloseWriter(Writer w_19) {
        if ((w_19.nbits > 0)) {
            if ((w_19.order == "MSB")) {
                w_19.bits = rshift(w_19.bits, 24);
            }
            w_19.data = (Enumerable.ToArray(Enumerable.Append(w_19.data, (w_19.bits % 256))));
        };
        w_19.bits = 0;
        w_19.nbits = 0;
        return w_19;
    }

    static Reader NewReader(long[] data_20, string order_21) {
        return new Reader{order = order_21, data = data_20, idx = 0, bits = 0, nbits = 0};
    }

    static Dictionary<string, object> readBitsLSB(Reader r_22, long width_23) {
        while ((r_22.nbits < width_23)) {
            if ((Convert.ToDouble(r_22.idx) >= Convert.ToDouble(r_22.data.Length))) {
                return new Dictionary<string, object>{{"val", 0}, {"eof", true}};
            }
            long b_24 = r_22.data[(int)(r_22.idx)];
            r_22.idx = (r_22.idx + 1);
            r_22.bits = (r_22.bits + lshift(b_24, r_22.nbits));
            r_22.nbits = (r_22.nbits + 8);
        };
        long mask_25 = (pow2(width_23) - 1);
        long out_26 = (r_22.bits % (mask_25 + 1));
        r_22.bits = rshift(r_22.bits, width_23);
        r_22.nbits = (r_22.nbits - width_23);
        return new Dictionary<string, object>{{"val", out_26}, {"eof", false}};
    }

    static Dictionary<string, object> readBitsMSB(Reader r_27, long width_28) {
        while ((r_27.nbits < width_28)) {
            if ((Convert.ToDouble(r_27.idx) >= Convert.ToDouble(r_27.data.Length))) {
                return new Dictionary<string, object>{{"val", 0}, {"eof", true}};
            }
            long b_29 = r_27.data[(int)(r_27.idx)];
            r_27.idx = (r_27.idx + 1);
            r_27.bits = (r_27.bits + lshift(b_29, (24 - r_27.nbits)));
            r_27.nbits = (r_27.nbits + 8);
        };
        long out_30 = rshift(r_27.bits, (32 - width_28));
        r_27.bits = ((r_27.bits * pow2(width_28)) % pow2(32));
        r_27.nbits = (r_27.nbits - width_28);
        return new Dictionary<string, object>{{"val", out_30}, {"eof", false}};
    }

    static Dictionary<string, object> ReadBits(Reader r_31, long width_32) {
        if ((r_31.order == "LSB")) {
            return readBitsLSB(r_31, width_32);
        };
        return readBitsMSB(r_31, width_32);
    }

    static string toBinary(long n_33, long bits_34) {
        string b_35 = "";
        long val_36 = n_33;
        long i_37 = 0;
        while ((i_37 < bits_34)) {
            b_35 = (_fmt((val_36 % 2)) + b_35);
            val_36 = (val_36 / 2);
            i_37 = (i_37 + 1);
        };
        return b_35;
    }

    static string bytesToBits(long[] bs_38) {
        string out_39 = "[";
        long i_40 = 0;
        while ((Convert.ToDouble(i_40) < Convert.ToDouble(bs_38.Length))) {
            out_39 = (out_39 + toBinary(bs_38[(int)(i_40)], 8));
            if ((Convert.ToDouble((i_40 + 1)) < Convert.ToDouble(bs_38.Length))) {
                out_39 = (out_39 + " ");
            }
            i_40 = (i_40 + 1);
        };
        out_39 = (out_39 + "]");
        return out_39;
    }

    static string bytesToHex(long[] bs_41) {
        string digits_42 = "0123456789ABCDEF";
        string out_43 = "";
        long i_44 = 0;
        while ((Convert.ToDouble(i_44) < Convert.ToDouble(bs_41.Length))) {
            long b_45 = bs_41[(int)(i_44)];
            long hi_46 = (b_45 / 16);
            long lo_47 = (b_45 % 16);
            out_43 = ((out_43 + digits_42.Substring((int)(hi_46), (int)((hi_46 + 1) - hi_46))) + digits_42.Substring((int)(lo_47), (int)((lo_47 + 1) - lo_47)));
            if ((Convert.ToDouble((i_44 + 1)) < Convert.ToDouble(bs_41.Length))) {
                out_43 = (out_43 + " ");
            }
            i_44 = (i_44 + 1);
        };
        return out_43;
    }

    static long ord(string ch_48) {
        string upper_49 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_50 = "abcdefghijklmnopqrstuvwxyz";
        var idx_51 = upper_49.IndexOf(ch_48);
        if ((Convert.ToDouble(idx_51) >= Convert.ToDouble(0))) {
            return (((dynamic)(65)) + ((dynamic)(idx_51)));
        };
        idx_51 = lower_50.IndexOf(ch_48);
        if ((Convert.ToDouble(idx_51) >= Convert.ToDouble(0))) {
            return (((dynamic)(97)) + ((dynamic)(idx_51)));
        };
        if (((string.Compare(ch_48, "0") >= 0) && (string.Compare(ch_48, "9") <= 0))) {
            return (48 + Convert.ToInt64(ch_48));
        };
        if ((ch_48 == " ")) {
            return 32;
        };
        if ((ch_48 == ".")) {
            return 46;
        };
        return 0;
    }

    static string chr(long n_52) {
        string upper_53 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_54 = "abcdefghijklmnopqrstuvwxyz";
        if (((n_52 >= 65) && (n_52 < 91))) {
            return upper_53.Substring((int)((n_52 - 65)), (int)((n_52 - 64) - (n_52 - 65)));
        };
        if (((n_52 >= 97) && (n_52 < 123))) {
            return lower_54.Substring((int)((n_52 - 97)), (int)((n_52 - 96) - (n_52 - 97)));
        };
        if (((n_52 >= 48) && (n_52 < 58))) {
            string digits_55 = "0123456789";
            return digits_55.Substring((int)((n_52 - 48)), (int)((n_52 - 47) - (n_52 - 48)));
        };
        if ((n_52 == 32)) {
            return " ";
        };
        if ((n_52 == 46)) {
            return ".";
        };
        return "?";
    }

    static long[] bytesOfStr(string s_56) {
        long[] bs_57 = new long[]{};
        long i_58 = 0;
        while ((Convert.ToDouble(i_58) < Convert.ToDouble(s_56.Length))) {
            bs_57 = (Enumerable.ToArray(Enumerable.Append(bs_57, ord(s_56.Substring((int)(i_58), (int)((i_58 + 1) - i_58))))));
            i_58 = (i_58 + 1);
        };
        return bs_57;
    }

    static string bytesToDec(long[] bs_59) {
        string out_60 = "";
        long i_61 = 0;
        while ((Convert.ToDouble(i_61) < Convert.ToDouble(bs_59.Length))) {
            out_60 = (out_60 + _fmt(bs_59[(int)(i_61)]));
            if ((Convert.ToDouble((i_61 + 1)) < Convert.ToDouble(bs_59.Length))) {
                out_60 = (out_60 + " ");
            }
            i_61 = (i_61 + 1);
        };
        return out_60;
    }

    static void Example() {
        string message_62 = "This is a test.";
        long[] msgBytes_63 = bytesOfStr(message_62);
        Console.WriteLine(_fmtTop(((("\"" + message_62) + "\" as bytes: ") + bytesToDec(msgBytes_63))));
        Console.WriteLine(_fmtTop(("    original bits: " + bytesToBits(msgBytes_63))));
        Writer bw_64 = NewWriter("MSB");
        long i_65 = 0;
        while ((Convert.ToDouble(i_65) < Convert.ToDouble(msgBytes_63.Length))) {
            bw_64 = WriteBits(bw_64, msgBytes_63[(int)(i_65)], 7);
            i_65 = (i_65 + 1);
        };
        bw_64 = CloseWriter(bw_64);
        Console.WriteLine(_fmtTop(("Written bitstream: " + bytesToBits(bw_64.data))));
        Console.WriteLine(_fmtTop(("Written bytes: " + bytesToHex(bw_64.data))));
        Reader br_66 = NewReader(bw_64.data, "MSB");
        string result_67 = "";
        while (true) {
            Dictionary<string, object> r_68 = ReadBits(br_66, 7);
            if (((dynamic)r_68)["eof"]) {
                break;
            }
            long v_69 = Convert.ToInt64(((dynamic)r_68)["val"]);
            if ((v_69 != 0)) {
                result_67 = (result_67 + chr(v_69));
            }
        };
        Console.WriteLine(_fmtTop((("Read back as \"" + result_67) + "\"")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Example();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
