// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

struct Writer {
    public string order;
    public long bits;
    public long nbits;
    public long[] data;
    public override string ToString() => $"Writer {{order = \"{order}\", bits = {bits}, nbits = {nbits}, data = {data}}}";
}
struct Reader {
    public string order;
    public long[] data;
    public long idx;
    public long bits;
    public long nbits;
    public override string ToString() => $"Reader {{order = \"{order}\", data = {data}, idx = {idx}, bits = {bits}, nbits = {nbits}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long pow2(long n) {
        long v_0 = 1;
        long i_1 = 0;
        while ((i_1 < n)) {
            v_0 = (v_0 * 2);
            i_1 = (i_1 + 1);
        };
        return v_0;
    }

    static long lshift(long x, long n) {
        return (x * pow2(n));
    }

    static long rshift(long x, long n) {
        return (x / pow2(n));
    }

    static Writer NewWriter(string order) {
        return new Writer{order = order, bits = 0, nbits = 0, data = new object[]{}};
    }

    static Writer writeBitsLSB(Writer w, long c, long width) {
        w.bits = (w.bits + lshift(c, w.nbits));
        w.nbits = (w.nbits + width);
        while ((w.nbits >= 8)) {
            long b_2 = (w.bits % 256);
            w.data = (Enumerable.ToArray(Enumerable.Append(w.data, b_2)));
            w.bits = rshift(w.bits, 8);
            w.nbits = (w.nbits - 8);
        };
        return w;
    }

    static Writer writeBitsMSB(Writer w, long c, long width) {
        w.bits = (w.bits + lshift(c, ((32 - width) - w.nbits)));
        w.nbits = (w.nbits + width);
        while ((w.nbits >= 8)) {
            long b_3 = (rshift(w.bits, 24) % 256);
            w.data = (Enumerable.ToArray(Enumerable.Append(w.data, b_3)));
            w.bits = ((w.bits % pow2(24)) * 256);
            w.nbits = (w.nbits - 8);
        };
        return w;
    }

    static Writer WriteBits(Writer w, long c, long width) {
        if ((w.order == "LSB")) {
            return writeBitsLSB(w, c, width);
        };
        return writeBitsMSB(w, c, width);
    }

    static Writer CloseWriter(Writer w) {
        if ((w.nbits > 0)) {
            if ((w.order == "MSB")) {
                w.bits = rshift(w.bits, 24);
            }
            w.data = (Enumerable.ToArray(Enumerable.Append(w.data, (w.bits % 256))));
        };
        w.bits = 0;
        w.nbits = 0;
        return w;
    }

    static Reader NewReader(long[] data, string order) {
        return new Reader{order = order, data = data, idx = 0, bits = 0, nbits = 0};
    }

    static Dictionary<string, object> readBitsLSB(Reader r, long width) {
        while ((r.nbits < width)) {
            if ((r.idx >= r.data.Length)) {
                return new Dictionary<string, object>{{"val", 0}, {"eof", true}};
            }
            long b_4 = r.data[(int)(r.idx)];
            r.idx = (r.idx + 1);
            r.bits = (r.bits + lshift(b_4, r.nbits));
            r.nbits = (r.nbits + 8);
        };
        long mask_5 = (pow2(width) - 1);
        long out_6 = (r.bits % (mask_5 + 1));
        r.bits = rshift(r.bits, width);
        r.nbits = (r.nbits - width);
        return new Dictionary<string, object>{{"val", out_6}, {"eof", false}};
    }

    static Dictionary<string, object> readBitsMSB(Reader r, long width) {
        while ((r.nbits < width)) {
            if ((r.idx >= r.data.Length)) {
                return new Dictionary<string, object>{{"val", 0}, {"eof", true}};
            }
            long b_7 = r.data[(int)(r.idx)];
            r.idx = (r.idx + 1);
            r.bits = (r.bits + lshift(b_7, (24 - r.nbits)));
            r.nbits = (r.nbits + 8);
        };
        long out_8 = rshift(r.bits, (32 - width));
        r.bits = ((r.bits * pow2(width)) % pow2(32));
        r.nbits = (r.nbits - width);
        return new Dictionary<string, object>{{"val", out_8}, {"eof", false}};
    }

    static Dictionary<string, object> ReadBits(Reader r, long width) {
        if ((r.order == "LSB")) {
            return readBitsLSB(r, width);
        };
        return readBitsMSB(r, width);
    }

    static string toBinary(long n, long bits) {
        string b_9 = "";
        long val_10 = n;
        long i_11 = 0;
        while ((i_11 < bits)) {
            b_9 = (((val_10 % 2)).ToString() + b_9);
            val_10 = (val_10 / 2);
            i_11 = (i_11 + 1);
        };
        return b_9;
    }

    static string bytesToBits(long[] bs) {
        string out_12 = "[";
        long i_13 = 0;
        while ((i_13 < bs.Length)) {
            out_12 = (out_12 + toBinary(bs[(int)(i_13)], 8));
            if (((i_13 + 1) < bs.Length)) {
                out_12 = (out_12 + " ");
            }
            i_13 = (i_13 + 1);
        };
        out_12 = (out_12 + "]");
        return out_12;
    }

    static string bytesToHex(long[] bs) {
        string digits_14 = "0123456789ABCDEF";
        string out_15 = "";
        long i_16 = 0;
        while ((i_16 < bs.Length)) {
            long b_17 = bs[(int)(i_16)];
            long hi_18 = (b_17 / 16);
            long lo_19 = (b_17 % 16);
            out_15 = ((out_15 + digits_14.Substring((int)(hi_18), (int)((hi_18 + 1) - hi_18))) + digits_14.Substring((int)(lo_19), (int)((lo_19 + 1) - lo_19)));
            if (((i_16 + 1) < bs.Length)) {
                out_15 = (out_15 + " ");
            }
            i_16 = (i_16 + 1);
        };
        return out_15;
    }

    static long ord(string ch) {
        string upper_20 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_21 = "abcdefghijklmnopqrstuvwxyz";
        var idx_22 = indexOf(upper_20, ch);
        if ((idx_22 >= 0)) {
            return (((dynamic)65) + ((dynamic)idx_22));
        };
        idx_22 = indexOf(lower_21, ch);
        if ((idx_22 >= 0)) {
            return (((dynamic)97) + ((dynamic)idx_22));
        };
        if (((string.Compare(ch, "0") >= 0) && (string.Compare(ch, "9") <= 0))) {
            return (((dynamic)48) + ((dynamic)parseIntStr(ch)));
        };
        if ((ch == " ")) {
            return 32;
        };
        if ((ch == ".")) {
            return 46;
        };
        return 0;
    }

    static string chr(long n) {
        string upper_23 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_24 = "abcdefghijklmnopqrstuvwxyz";
        if (((n >= 65) && (n < 91))) {
            return upper_23.Substring((int)((n - 65)), (int)((n - 64) - (n - 65)));
        };
        if (((n >= 97) && (n < 123))) {
            return lower_24.Substring((int)((n - 97)), (int)((n - 96) - (n - 97)));
        };
        if (((n >= 48) && (n < 58))) {
            string digits_25 = "0123456789";
            return digits_25.Substring((int)((n - 48)), (int)((n - 47) - (n - 48)));
        };
        if ((n == 32)) {
            return " ";
        };
        if ((n == 46)) {
            return ".";
        };
        return "?";
    }

    static long[] bytesOfStr(string s) {
        long[] bs_26 = new long[]{};
        long i_27 = 0;
        while ((i_27 < s.Length)) {
            bs_26 = (Enumerable.ToArray(Enumerable.Append(bs_26, ord(s.Substring((int)(i_27), (int)((i_27 + 1) - i_27))))));
            i_27 = (i_27 + 1);
        };
        return bs_26;
    }

    static string bytesToDec(long[] bs) {
        string out_28 = "";
        long i_29 = 0;
        while ((i_29 < bs.Length)) {
            out_28 = (out_28 + (bs[(int)(i_29)]).ToString());
            if (((i_29 + 1) < bs.Length)) {
                out_28 = (out_28 + " ");
            }
            i_29 = (i_29 + 1);
        };
        return out_28;
    }

    static void Example() {
        string message_30 = "This is a test.";
        long[] msgBytes_31 = bytesOfStr(message_30);
        Console.WriteLine(_fmtTop(((("\"" + message_30) + "\" as bytes: ") + bytesToDec(msgBytes_31))));
        Console.WriteLine(_fmtTop(("    original bits: " + bytesToBits(msgBytes_31))));
        Writer bw_32 = NewWriter("MSB");
        long i_33 = 0;
        while ((i_33 < msgBytes_31.Length)) {
            bw_32 = WriteBits(bw_32, msgBytes_31[(int)(i_33)], 7);
            i_33 = (i_33 + 1);
        };
        bw_32 = CloseWriter(bw_32);
        Console.WriteLine(_fmtTop(("Written bitstream: " + bytesToBits(bw_32.data))));
        Console.WriteLine(_fmtTop(("Written bytes: " + bytesToHex(bw_32.data))));
        Reader br_34 = NewReader(bw_32.data, "MSB");
        string result_35 = "";
        while (true) {
            Dictionary<string, object> r_36 = ReadBits(br_34, 7);
            if (((dynamic)r_36)["eof"]) {
                break;
            }
            var v_37 = Convert.ToInt64(((dynamic)r_36)["val"]);
            if ((v_37 != 0)) {
                result_35 = (result_35 + chr(v_37));
            }
        };
        Console.WriteLine(_fmtTop((("Read back as \"" + result_35) + "\"")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Example();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
