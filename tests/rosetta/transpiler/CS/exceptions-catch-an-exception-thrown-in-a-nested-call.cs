// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long bazCall_0 = 0;
    static string baz() {
        bazCall_0 = (bazCall_0 + 1);
        Console.WriteLine(_fmtTop("baz: start"));
        if ((bazCall_0 == 1)) {
            Console.WriteLine(_fmtTop("baz: raising U0"));
            return "U0";
        };
        if ((bazCall_0 == 2)) {
            Console.WriteLine(_fmtTop("baz: raising U1"));
            return "U1";
        };
        Console.WriteLine(_fmtTop("baz: end"));
        return "";
    }

    static string bar() {
        Console.WriteLine(_fmtTop("bar: start"));
        string err_1 = baz();
        if ((err_1.Length > 0)) {
            return err_1;
        };
        Console.WriteLine(_fmtTop("bar: end"));
        return "";
    }

    static string foo() {
        Console.WriteLine(_fmtTop("foo: start"));
        string err_2 = bar();
        if ((err_2 == "U0")) {
            Console.WriteLine(_fmtTop("foo: caught U0"));
        } else {
            if ((err_2.Length > 0)) {
                return err_2;
            }
        };
        err_2 = bar();
        if ((err_2 == "U0")) {
            Console.WriteLine(_fmtTop("foo: caught U0"));
        } else {
            if ((err_2.Length > 0)) {
                return err_2;
            }
        };
        Console.WriteLine(_fmtTop("foo: end"));
        return "";
    }

    static void main() {
        Console.WriteLine(_fmtTop("main: start"));
        string err_3 = foo();
        if ((err_3.Length > 0)) {
            Console.WriteLine(_fmtTop(("main: unhandled " + err_3)));
        } else {
            Console.WriteLine(_fmtTop("main: success"));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
