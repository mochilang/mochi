// Generated by Mochi 0.10.57 on 2025-08-04 21:00 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class TestCase {
    public long _base;
    public string begin;
    public string end;
    public string[] kaprekar;
    public override string ToString() => $"TestCase {{_base = {_base}, begin = \"{begin}\", end = \"{end}\", kaprekar = {kaprekar}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static TestCase[] testCases_24 = new TestCase[]{new TestCase{_base = 10, begin = "1", end = "100", kaprekar = new string[]{"1", "9", "45", "55", "99"}}, new TestCase{_base = 17, begin = "10", end = "gg", kaprekar = new string[]{"3d", "d4", "gg"}}};
    static long idx_25 = 0;
    public static long parseIntBase(string s_0, long base_1) {
        string digits_2 = "0123456789abcdefghijklmnopqrstuvwxyz";
        long n_3 = 0;
        long i_4 = 0;
        while ((i_4 < s_0.Length)) {
            long j_5 = 0;
            long v_6 = 0;
            while ((j_5 < digits_2.Length)) {
                if ((digits_2.Substring((int)(j_5), (int)((j_5 + 1) - j_5)) == s_0.Substring((int)(i_4), (int)((i_4 + 1) - i_4)))) {
                    v_6 = j_5;
                    break;
                }
                j_5 = (j_5 + 1);
            }
            n_3 = ((n_3 * base_1) + v_6);
            i_4 = (i_4 + 1);
        };
        return n_3;
    }

    public static string intToBase(long n_7, long base_8) {
        string digits_9 = "0123456789abcdefghijklmnopqrstuvwxyz";
        if ((n_7 == 0)) {
            return "0";
        };
        string out_10 = "";
        long v_11 = n_7;
        while ((v_11 > 0)) {
            long d_12 = (v_11 % base_8);
            out_10 = (digits_9.Substring((int)(d_12), (int)((d_12 + 1) - d_12)) + out_10);
            v_11 = (v_11 / base_8);
        };
        return out_10;
    }

    public static string[] subset(long base_13, string begin_14, string end_15) {
        long b_16 = Program.parseIntBase(begin_14, base_13);
        long e_17 = Program.parseIntBase(end_15, base_13);
        string[] out_18 = new string[]{};
        long k_19 = b_16;
        while ((k_19 <= e_17)) {
            string ks_20 = Program.intToBase(k_19, base_13);
            long mod_21 = (base_13 - 1);
            long r1_22 = (Program.parseIntBase(ks_20, base_13) % mod_21);
            long r2_23 = ((Program.parseIntBase(ks_20, base_13) * Program.parseIntBase(ks_20, base_13)) % mod_21);
            if ((r1_22 == r2_23)) {
                out_18 = (Enumerable.ToArray(Enumerable.Append(out_18, ks_20)));
            }
            k_19 = (k_19 + 1);
        };
        return out_18;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((idx_25 < testCases_24.Length)) {
                TestCase tc_26 = testCases_24[(int)(idx_25)];
                Console.WriteLine(Program._fmtTop((((((("\nTest case base = " + _fmt((object)tc_26._base)) + ", begin = ") + tc_26.begin) + ", end = ") + tc_26.end) + ":")));
                string[] s_27 = Program.subset(Convert.ToInt64(tc_26._base), tc_26.begin, tc_26.end);
                Console.WriteLine(Program._fmtTop(("Subset:  " + _fmt(s_27))));
                Console.WriteLine(Program._fmtTop(("Kaprekar:" + _fmt((object)tc_26.kaprekar))));
                long sx_28 = 0;
                bool valid_29 = true;
                long i_30 = 0;
                while ((i_30 < _len((object)tc_26.kaprekar))) {
                    var k_31 = ((dynamic)tc_26.kaprekar)[i_30];
                    bool found_32 = false;
                    while ((sx_28 < s_27.Length)) {
                        if ((s_27[(int)(sx_28)] == k_31)) {
                            found_32 = true;
                            sx_28 = (sx_28 + 1);
                            break;
                        }
                        sx_28 = (sx_28 + 1);
                    }
                    if ((!found_32)) {
                        Console.WriteLine(Program._fmtTop(((((dynamic)("Fail:")) + ((dynamic)(k_31))) + " not in subset")));
                        valid_29 = false;
                        break;
                    }
                    i_30 = (i_30 + 1);
                }
                if (valid_29) {
                    Console.WriteLine(Program._fmtTop("Valid subset."));
                }
                idx_25 = (idx_25 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
