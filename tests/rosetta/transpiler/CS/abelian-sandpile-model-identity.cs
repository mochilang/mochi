// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[][] neighborsList() {
        return new long[][]{new long[]{1, 3}, new long[]{0, 2, 4}, new long[]{1, 5}, new long[]{0, 4, 6}, new long[]{1, 3, 5, 7}, new long[]{2, 4, 8}, new long[]{3, 7}, new long[]{4, 6, 8}, new long[]{5, 7}};
    }

    static long[] plus(long[] a_0, long[] b_1) {
        long[] res_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < a_0.Length)) {
            res_2 = (Enumerable.ToArray(Enumerable.Append(res_2, (a_0[(int)(i_3)] + b_1[(int)(i_3)]))));
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    static bool isStable(long[] p_4) {
        foreach (var v_5 in p_4) {
            if ((v_5 > 3)) {
                return false;
            }
        };
        return true;
    }

    static long topple(long[] p_6) {
        long[][] neighbors_7 = neighborsList();
        long i_8 = 0;
        while ((i_8 < p_6.Length)) {
            if ((p_6[(int)(i_8)] > 3)) {
                p_6[i_8] = (p_6[(int)(i_8)] - 4);
                long[] nbs_9 = neighbors_7[(int)(i_8)];
                foreach (var j_10 in nbs_9) {
                    p_6[j_10] = (p_6[(int)(j_10)] + 1);
                }
                return 0;
            }
            i_8 = (i_8 + 1);
        };
        return 0;
    }

    static string pileString(long[] p_11) {
        string s_12 = "";
        long r_13 = 0;
        while ((r_13 < 3)) {
            long c_14 = 0;
            while ((c_14 < 3)) {
                s_12 = ((s_12 + (p_11[(int)(((3 * r_13) + c_14))]).ToString()) + " ");
                c_14 = (c_14 + 1);
            }
            s_12 = (s_12 + "\n");
            r_13 = (r_13 + 1);
        };
        return s_12;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop("Avalanche of topplings:\n"));
            long[] s4_15 = new long[]{4, 3, 3, 3, 1, 2, 0, 2, 3};
            Console.WriteLine(_fmtTop(pileString(s4_15)));
            while ((!isStable(s4_15))) {
                topple(s4_15);
                Console.WriteLine(_fmtTop(pileString(s4_15)));
            }
            Console.WriteLine(_fmtTop("Commutative additions:\n"));
            long[] s1_16 = new long[]{1, 2, 0, 2, 1, 1, 0, 1, 3};
            long[] s2_17 = new long[]{2, 1, 3, 1, 0, 1, 0, 1, 0};
            long[] s3_a_18 = plus(s1_16, s2_17);
            while ((!isStable(s3_a_18))) {
                topple(s3_a_18);
            }
            long[] s3_b_19 = plus(s2_17, s1_16);
            while ((!isStable(s3_b_19))) {
                topple(s3_b_19);
            }
            Console.WriteLine(_fmtTop(((((pileString(s1_16) + "\nplus\n\n") + pileString(s2_17)) + "\nequals\n\n") + pileString(s3_a_18))));
            Console.WriteLine(_fmtTop(((((("and\n\n" + pileString(s2_17)) + "\nplus\n\n") + pileString(s1_16)) + "\nalso equals\n\n") + pileString(s3_b_19))));
            Console.WriteLine(_fmtTop("Addition of identity sandpile:\n"));
            long[] s3_20 = new long[]{3, 3, 3, 3, 3, 3, 3, 3, 3};
            long[] s3_id_21 = new long[]{2, 1, 2, 1, 0, 1, 2, 1, 2};
            long[] s4b_22 = plus(s3_20, s3_id_21);
            while ((!isStable(s4b_22))) {
                topple(s4b_22);
            }
            Console.WriteLine(_fmtTop(((((pileString(s3_20) + "\nplus\n\n") + pileString(s3_id_21)) + "\nequals\n\n") + pileString(s4b_22))));
            Console.WriteLine(_fmtTop("Addition of identities:\n"));
            long[] s5_23 = plus(s3_id_21, s3_id_21);
            while ((!isStable(s5_23))) {
                topple(s5_23);
            }
            Console.WriteLine(_fmtTop(((((pileString(s3_id_21) + "\nplus\n\n") + pileString(s3_id_21)) + "\nequals\n\n") + pileString(s5_23))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
