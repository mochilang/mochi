// Generated by Mochi 0.10.40 on 2025-07-25 19:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] s4_10 = new long[]{4, 3, 3, 3, 1, 2, 0, 2, 3};
    static long[] s1_11 = new long[]{1, 2, 0, 2, 1, 1, 0, 1, 3};
    static long[] s2_12 = new long[]{2, 1, 3, 1, 0, 1, 0, 1, 0};
    static long[] s3_a_13 = plus(s1_11, s2_12);
    static long[] s3_b_14 = plus(s2_12, s1_11);
    static long[] s3_15 = new long[]{3, 3, 3, 3, 3, 3, 3, 3, 3};
    static long[] s3_id_16 = new long[]{2, 1, 2, 1, 0, 1, 2, 1, 2};
    static long[] s4b_17 = plus(s3_15, s3_id_16);
    static long[] s5_18 = plus(s3_id_16, s3_id_16);
    static long[][] neighborsList() {
        return new long[][]{new long[]{1, 3}, new long[]{0, 2, 4}, new long[]{1, 5}, new long[]{0, 4, 6}, new long[]{1, 3, 5, 7}, new long[]{2, 4, 8}, new long[]{3, 7}, new long[]{4, 6, 8}, new long[]{5, 7}};
    }

    static long[] plus(long[] a, long[] b) {
        long[] res_0 = new long[]{};
        long i_1 = 0;
        while ((i_1 < a.Length)) {
            res_0 = (Enumerable.ToArray(Enumerable.Append(res_0, (a[i_1] + b[i_1]))));
            i_1 = (i_1 + 1);
        };
        return res_0;
    }

    static bool isStable(long[] p) {
        foreach (var v_2 in p) {
            if ((v_2 > 3)) {
                return false;
            }
        };
        return true;
    }

    static long topple(long[] p) {
        long[][] neighbors_3 = neighborsList();
        long i_4 = 0;
        while ((i_4 < p.Length)) {
            if ((p[i_4] > 3)) {
                p[i_4] = (p[i_4] - 4);
                long[] nbs_5 = neighbors_3[i_4];
                foreach (var j_6 in nbs_5) {
                    p[j_6] = (p[j_6] + 1);
                }
                return 0;
            }
            i_4 = (i_4 + 1);
        };
        return 0;
    }

    static string pileString(long[] p) {
        string s_7 = "";
        long r_8 = 0;
        while ((r_8 < 3)) {
            long c_9 = 0;
            while ((c_9 < 3)) {
                s_7 = ((s_7 + (p[((3 * r_8) + c_9)]).ToString()) + " ");
                c_9 = (c_9 + 1);
            }
            s_7 = (s_7 + "\n");
            r_8 = (r_8 + 1);
        };
        return s_7;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop("Avalanche of topplings:\n"));
            Console.WriteLine(_fmtTop(pileString(s4_10)));
            while ((!isStable(s4_10))) {
                topple(s4_10);
                Console.WriteLine(_fmtTop(pileString(s4_10)));
            }
            Console.WriteLine(_fmtTop("Commutative additions:\n"));
            while ((!isStable(s3_a_13))) {
                topple(s3_a_13);
            }
            while ((!isStable(s3_b_14))) {
                topple(s3_b_14);
            }
            Console.WriteLine(_fmtTop(((((pileString(s1_11) + "\nplus\n\n") + pileString(s2_12)) + "\nequals\n\n") + pileString(s3_a_13))));
            Console.WriteLine(_fmtTop(((((("and\n\n" + pileString(s2_12)) + "\nplus\n\n") + pileString(s1_11)) + "\nalso equals\n\n") + pileString(s3_b_14))));
            Console.WriteLine(_fmtTop("Addition of identity sandpile:\n"));
            while ((!isStable(s4b_17))) {
                topple(s4b_17);
            }
            Console.WriteLine(_fmtTop(((((pileString(s3_15) + "\nplus\n\n") + pileString(s3_id_16)) + "\nequals\n\n") + pileString(s4b_17))));
            Console.WriteLine(_fmtTop("Addition of identities:\n"));
            while ((!isStable(s5_18))) {
                topple(s5_18);
            }
            Console.WriteLine(_fmtTop(((((pileString(s3_id_16) + "\nplus\n\n") + pileString(s3_id_16)) + "\nequals\n\n") + pileString(s5_18))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
