// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static int[] s4 = new int[]{4, 3, 3, 3, 1, 2, 0, 2, 3};
    static int[] s1 = new int[]{1, 2, 0, 2, 1, 1, 0, 1, 3};
    static int[] s2 = new int[]{2, 1, 3, 1, 0, 1, 0, 1, 0};
    static int[] s3_a = plus(s1, s2);
    static int[] s3_b = plus(s2, s1);
    static int[] s3 = new int[]{3, 3, 3, 3, 3, 3, 3, 3, 3};
    static int[] s3_id = new int[]{2, 1, 2, 1, 0, 1, 2, 1, 2};
    static int[] s4b = plus(s3, s3_id);
    static int[] s5 = plus(s3_id, s3_id);
    static int[][] neighborsList() {
        return new int[][]{new int[]{1, 3}, new int[]{0, 2, 4}, new int[]{1, 5}, new int[]{0, 4, 6}, new int[]{1, 3, 5, 7}, new int[]{2, 4, 8}, new int[]{3, 7}, new int[]{4, 6, 8}, new int[]{5, 7}};
    }

    static int[] plus(int[] a, int[] b) {
        int[] res = new int[]{};
        int i = 0;
        while ((i < a.Length)) {
            res = (res.Append((a[i] + b[i])).ToArray());
            i = (i + 1);
        };
        return res;
    }

    static bool isStable(int[] p) {
        foreach (var v_0 in p) {
            if ((v_0 > 3)) {
                return false;
            }
        };
        return true;
    }

    static int topple(int[] p) {
        int[][] neighbors = neighborsList();
        int i = 0;
        while ((i < p.Length)) {
            if ((p[i] > 3)) {
                p[i] = (p[i] - 4);
                var nbs = neighbors[i];
                foreach (var j_1 in nbs) {
                    p[j_1] = (p[j_1] + 1);
                }
                return 0;
            }
            i = (i + 1);
        };
        return 0;
    }

    static string pileString(int[] p) {
        string s = "";
        int r = 0;
        while ((r < 3)) {
            int c = 0;
            while ((c < 3)) {
                s = ((s + p[((3 * r) + c)].ToString()) + " ");
                c = (c + 1);
            }
            s = (s + "\n");
            r = (r + 1);
        };
        return s;
    }

    static void Main() {
        Console.WriteLine(_fmtTop("Avalanche of topplings:\n"));
        Console.WriteLine(_fmtTop(pileString(s4)));
        while ((!isStable(s4))) {
            topple(s4);
            Console.WriteLine(_fmtTop(pileString(s4)));
        }
        Console.WriteLine(_fmtTop("Commutative additions:\n"));
        while ((!isStable(s3_a))) {
            topple(s3_a);
        }
        while ((!isStable(s3_b))) {
            topple(s3_b);
        }
        Console.WriteLine(_fmtTop(((((pileString(s1) + "\nplus\n\n") + pileString(s2)) + "\nequals\n\n") + pileString(s3_a))));
        Console.WriteLine(_fmtTop(((((("and\n\n" + pileString(s2)) + "\nplus\n\n") + pileString(s1)) + "\nalso equals\n\n") + pileString(s3_b))));
        Console.WriteLine(_fmtTop("Addition of identity sandpile:\n"));
        while ((!isStable(s4b))) {
            topple(s4b);
        }
        Console.WriteLine(_fmtTop(((((pileString(s3) + "\nplus\n\n") + pileString(s3_id)) + "\nequals\n\n") + pileString(s4b))));
        Console.WriteLine(_fmtTop("Addition of identities:\n"));
        while ((!isStable(s5))) {
            topple(s5);
        }
        Console.WriteLine(_fmtTop(((((pileString(s3_id) + "\nplus\n\n") + pileString(s3_id)) + "\nequals\n\n") + pileString(s5))));
    }
}
