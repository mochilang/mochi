// Generated by Mochi 0.10.52 on 2025-07-31 08:37 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Func<Func<object, object>, Func<object, object>> z_14 = zero;
    static Func<Func<object, object>, Func<object, object>> three_15 = succ(succ(succ(z_14)));
    static Func<Func<object, object>, Func<object, object>> four_16 = succ(three_15);
    static Func<object, object> zero(Func<object, object> f_0) {
        return (object x) => {return x;};
    }

    static Func<Func<object, object>, Func<object, object>> succ(Func<Func<object, object>, Func<object, object>> c_1) {
        return (Func<object, object> f) => {return (object x) => {return f(c_1(f)(x));};};
    }

    static Func<Func<object, object>, Func<object, object>> add(Func<Func<object, object>, Func<object, object>> c_2, Func<Func<object, object>, Func<object, object>> d_3) {
        return (Func<object, object> f) => {return (object x) => {return c_2(f)(d_3(f)(x));};};
    }

    static Func<Func<object, object>, Func<object, object>> mul(Func<Func<object, object>, Func<object, object>> c_4, Func<Func<object, object>, Func<object, object>> d_5) {
        return (Func<object, object> f) => {return (object x) => {return c_4(d_5(f))(x);};};
    }

    static Func<Func<object, object>, Func<object, object>> pow(Func<Func<object, object>, Func<object, object>> c_6, Func<Func<object, object>, Func<object, object>> d_7) {
        long di_8 = toInt(d_7);
        Func<Func<object, object>, Func<object, object>> prod_9 = c_6;
        long i_10 = 1;
        while ((i_10 < di_8)) {
            prod_9 = mul(prod_9, c_6);
            i_10 = (i_10 + 1);
        };
        return prod_9;
    }

    static object incr(object i_11) {
        return (object)((Convert.ToInt64(i_11) + 1));
    }

    static long toInt(Func<Func<object, object>, Func<object, object>> c_12) {
        return Convert.ToInt64(c_12(incr)(0));
    }

    static Func<Func<object, object>, Func<object, object>> intToChurch(long i_13) {
        if ((i_13 == 0)) {
            return (Func<Func<object, object>, Func<object, object>>)zero;
        };
        return succ(intToChurch((i_13 - 1)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(("three        -> " + _fmt(toInt(three_15)))));
            Console.WriteLine(_fmtTop(("four         -> " + _fmt(toInt(four_16)))));
            Console.WriteLine(_fmtTop(("three + four -> " + _fmt(toInt(add(three_15, four_16))))));
            Console.WriteLine(_fmtTop(("three * four -> " + _fmt(toInt(mul(three_15, four_16))))));
            Console.WriteLine(_fmtTop(("three ^ four -> " + _fmt(toInt(pow(three_15, four_16))))));
            Console.WriteLine(_fmtTop(("four ^ three -> " + _fmt(toInt(pow(four_16, three_15))))));
            Console.WriteLine(_fmtTop(("5 -> five    -> " + _fmt(toInt(intToChurch(5))))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
