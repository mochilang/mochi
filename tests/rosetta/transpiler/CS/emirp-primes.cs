// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        if (((n_0 % 2) == 0)) {
            return (n_0 == 2);
        };
        long d_1 = 3;
        while (((d_1 * d_1) <= n_0)) {
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 2);
        };
        return true;
    }

    static long revInt(long n_2) {
        long r_3 = 0;
        long t_4 = n_2;
        while ((t_4 > 0)) {
            r_3 = ((r_3 * 10) + (t_4 % 10));
            t_4 = Convert.ToInt64((t_4 / 10));
        };
        return r_3;
    }

    static void main() {
        long[] emirps_5 = new long[]{};
        long n_6 = 2;
        while ((emirps_5.Length < 10000)) {
            if (isPrime(n_6)) {
                long r_7 = revInt(n_6);
                if (((r_7 != n_6) && isPrime(r_7))) {
                    emirps_5 = (Enumerable.ToArray(Enumerable.Append(emirps_5, n_6)));
                }
            }
            n_6 = (n_6 + 1);
        };
        string line_8 = "   [";
        long i_9 = 0;
        while ((i_9 < 20)) {
            line_8 = (line_8 + (emirps_5[(int)(i_9)]).ToString());
            if ((i_9 < 19)) {
                line_8 = (line_8 + ", ");
            }
            i_9 = (i_9 + 1);
        };
        line_8 = (line_8 + "]");
        Console.WriteLine(_fmtTop("First 20:"));
        Console.WriteLine(_fmtTop(line_8));
        line_8 = "  [";
        foreach (var e_10 in emirps_5) {
            if ((e_10 >= 8000)) {
                break;
            }
            if ((e_10 >= 7700)) {
                line_8 = ((line_8 + (e_10).ToString()) + ", ");
            }
        };
        line_8 = (line_8 + "]");
        Console.WriteLine(_fmtTop("Between 7700 and 8000:"));
        Console.WriteLine(_fmtTop(line_8));
        Console.WriteLine(_fmtTop("10000th:"));
        Console.WriteLine(_fmtTop((("   [" + (emirps_5[(int)(9999)]).ToString()) + "]")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
