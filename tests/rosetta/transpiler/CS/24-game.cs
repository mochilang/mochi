// Generated by Mochi 0.10.40 on 2025-07-25 12:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.IO;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        return Console.ReadLine();
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long randDigit() {
        return ((_now() % 9) + 1);
    }

    static void main() {
        object[] digits = new object[]{};
        for (var i_0 = 0; i_0 < 4; i_0++) {
            digits = (Enumerable.ToArray(Enumerable.Append(digits, (object)randDigit())));
        };
        string numstr = "";
        for (var i_1 = 0; i_1 < 4; i_1++) {
            numstr = (numstr + (((dynamic)digits)[i_1]).ToString());
        };
        Console.WriteLine(_fmtTop((("Your numbers: " + numstr) + "\n")));
        Console.WriteLine(_fmtTop("Enter RPN: "));
        string expr = _input();
        if ((expr.Length != 7)) {
            Console.WriteLine(_fmtTop("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)"));
            return;
        };
        object[] stack = new object[]{};
        long i = 0;
        bool valid = true;
        while ((i < expr.Length)) {
            string ch = expr.Substring((int)(i), (int)((i + 1) - i));
            if (((string.Compare(ch, "0") >= 0) && (string.Compare(ch, "9") <= 0))) {
                if ((digits.Length == 0)) {
                    Console.WriteLine(_fmtTop("too many numbers."));
                    return;
                }
                long j = 0;
                while ((((dynamic)digits)[j] != (Convert.ToInt32(ch) - Convert.ToInt32("0")))) {
                    j = (j + 1);
                    if ((j == digits.Length)) {
                        Console.WriteLine(_fmtTop("wrong numbers."));
                        return;
                    }
                }
                digits = (digits.Skip((int)(0)).Take((int)((j - 0))).ToArray().Concat(digits.Skip((int)((j + 1))).Take((int)((digits.Length - (j + 1)))).ToArray()).ToArray());
                stack = (Enumerable.ToArray(Enumerable.Append(stack, (object)Convert.ToDouble((Convert.ToInt32(ch) - Convert.ToInt32("0"))))));
            } else {
                if ((stack.Length < 2)) {
                    Console.WriteLine(_fmtTop("invalid expression syntax."));
                    valid = false;
                    break;
                }
                var b = ((dynamic)stack)[(stack.Length - 1)];
                var a = ((dynamic)stack)[(stack.Length - 2)];
                if ((ch == "+")) {
                    stack[(stack.Length - 2)] = (a + b);
                } else {
                    if ((ch == "-")) {
                        stack[(stack.Length - 2)] = (a - b);
                    } else {
                        if ((ch == "*")) {
                            stack[(stack.Length - 2)] = (a * b);
                        } else {
                            if ((ch == "/")) {
                                stack[(stack.Length - 2)] = (a / b);
                            } else {
                                Console.WriteLine(_fmtTop((ch + " invalid.")));
                                valid = false;
                                break;
                            }
                        }
                    }
                }
                stack = stack.Skip((int)(0)).Take((int)(((stack.Length - 1) - 0))).ToArray();
            }
            i = (i + 1);
        };
        if (valid) {
            if ((Math.Abs((((dynamic)stack)[0] - 24)) > 1e-06)) {
                Console.WriteLine(_fmtTop((("incorrect. " + (((dynamic)stack)[0]).ToString()) + " != 24")));
            } else {
                Console.WriteLine(_fmtTop("correct."));
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
