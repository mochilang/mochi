// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long randDigit() {
        return ((_now() % 9) + 1);
    }

    static void main() {
        object[] digits_0 = new object[]{};
        for (var i_1 = 0; i_1 < 4; i_1++) {
            digits_0 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(digits_0.Cast<object>()), randDigit())));
        };
        string numstr_2 = "";
        for (var i_3 = 0; i_3 < 4; i_3++) {
            numstr_2 = (numstr_2 + (((dynamic)digits_0)[i_3]).ToString());
        };
        Console.WriteLine(_fmtTop((("Your numbers: " + numstr_2) + "\n")));
        Console.WriteLine(_fmtTop("Enter RPN: "));
        string expr_4 = _input();
        if ((expr_4.Length != 7)) {
            Console.WriteLine(_fmtTop("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)"));
            return;
        };
        object[] stack_5 = new object[]{};
        long i_6 = 0;
        bool valid_7 = true;
        while ((i_6 < expr_4.Length)) {
            string ch_8 = expr_4.Substring((int)(i_6), (int)((i_6 + 1) - i_6));
            if (((string.Compare(ch_8, "0") >= 0) && (string.Compare(ch_8, "9") <= 0))) {
                if ((digits_0.Length == 0)) {
                    Console.WriteLine(_fmtTop("too many numbers."));
                    return;
                }
                long j_9 = 0;
                while ((((dynamic)digits_0)[j_9] != (((dynamic)(Convert.ToInt64(ch_8))) - ((dynamic)(Convert.ToInt64("0")))))) {
                    j_9 = (j_9 + 1);
                    if ((j_9 == digits_0.Length)) {
                        Console.WriteLine(_fmtTop("wrong numbers."));
                        return;
                    }
                }
                digits_0 = (digits_0.Skip((int)(0)).Take((int)((j_9 - 0))).ToArray().Concat(digits_0.Skip((int)((j_9 + 1))).Take((int)((digits_0.Length - (j_9 + 1)))).ToArray()).ToArray());
                stack_5 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(stack_5.Cast<object>()), Convert.ToDouble((((dynamic)(Convert.ToInt64(ch_8))) - ((dynamic)(Convert.ToInt64("0"))))))));
            } else {
                if ((stack_5.Length < 2)) {
                    Console.WriteLine(_fmtTop("invalid expression syntax."));
                    valid_7 = false;
                    break;
                }
                object b_10 = ((dynamic)stack_5)[(((dynamic)(stack_5.Length)) - ((dynamic)(1)))];
                object a_11 = ((dynamic)stack_5)[(((dynamic)(stack_5.Length)) - ((dynamic)(2)))];
                if ((ch_8 == "+")) {
                    stack_5[(((dynamic)(stack_5.Length)) - ((dynamic)(2)))] = (((dynamic)(a_11)) + ((dynamic)(b_10)));
                } else {
                    if ((ch_8 == "-")) {
                        stack_5[(((dynamic)(stack_5.Length)) - ((dynamic)(2)))] = (((dynamic)(a_11)) - ((dynamic)(b_10)));
                    } else {
                        if ((ch_8 == "*")) {
                            stack_5[(((dynamic)(stack_5.Length)) - ((dynamic)(2)))] = (((dynamic)(a_11)) * ((dynamic)(b_10)));
                        } else {
                            if ((ch_8 == "/")) {
                                stack_5[(((dynamic)(stack_5.Length)) - ((dynamic)(2)))] = (((dynamic)(a_11)) / ((dynamic)(b_10)));
                            } else {
                                Console.WriteLine(_fmtTop((ch_8 + " invalid.")));
                                valid_7 = false;
                                break;
                            }
                        }
                    }
                }
                stack_5 = stack_5.Skip((int)(0)).Take((int)(((((dynamic)(stack_5.Length)) - ((dynamic)(1))) - 0))).ToArray();
            }
            i_6 = (i_6 + 1);
        };
        if (valid_7) {
            if ((Math.Abs((((dynamic)(((dynamic)stack_5)[0])) - ((dynamic)(24.0)))) > 1e-06)) {
                Console.WriteLine(_fmtTop((("incorrect. " + (((dynamic)stack_5)[0]).ToString()) + " != 24")));
            } else {
                Console.WriteLine(_fmtTop("correct."));
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
