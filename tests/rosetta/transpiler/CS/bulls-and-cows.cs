// Generated by Mochi 0.10.41 on 2025-07-27 12:32 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.IO;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            if ((s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2)) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    static string[] shuffle(string[] xs_3) {
        string[] arr_4 = xs_3;
        long i_5 = (((dynamic)arr_4.Length) - ((dynamic)1));
        while ((i_5 > 0)) {
            long j_6 = (_now() % (i_5 + 1));
            string tmp_7 = arr_4[(int)(i_5)];
            arr_4[i_5] = arr_4[(int)(j_6)];
            arr_4[j_6] = tmp_7;
            i_5 = (i_5 - 1);
        };
        return arr_4;
    }

    static void main() {
        Console.WriteLine(_fmtTop("Cows and Bulls"));
        Console.WriteLine(_fmtTop("Guess four digit number of unique digits in the range 1 to 9."));
        Console.WriteLine(_fmtTop("A correct digit but not in the correct place is a cow."));
        Console.WriteLine(_fmtTop("A correct digit in the correct place is a bull."));
        string[] digits_8 = new string[]{"1", "2", "3", "4", "5", "6", "7", "8", "9"};
        digits_8 = shuffle(digits_8);
        string pat_9 = (((digits_8[(int)(0)] + digits_8[(int)(1)]) + digits_8[(int)(2)]) + digits_8[(int)(3)]);
        string valid_10 = "123456789";
        while (true) {
            Console.WriteLine(_fmtTop("Guess: "));
            string guess_11 = _input();
            if ((guess_11.Length != 4)) {
                Console.WriteLine(_fmtTop("Please guess a four digit number."));
                continue;
            }
            long cows_12 = 0;
            long bulls_13 = 0;
            string seen_14 = "";
            long i_15 = 0;
            bool malformed_16 = false;
            while ((i_15 < 4)) {
                string cg_17 = guess_11.Substring((int)(i_15), (int)((i_15 + 1) - i_15));
                if ((seen_14.IndexOf(cg_17) != -1)) {
                    Console.WriteLine(_fmtTop(("Repeated digit: " + cg_17)));
                    malformed_16 = true;
                    break;
                }
                seen_14 = (seen_14 + cg_17);
                var pos_18 = pat_9.IndexOf(cg_17);
                if ((pos_18 == -1)) {
                    if ((valid_10.IndexOf(cg_17) == -1)) {
                        Console.WriteLine(_fmtTop(("Invalid digit: " + cg_17)));
                        malformed_16 = true;
                        break;
                    }
                } else {
                    if ((pos_18 == i_15)) {
                        bulls_13 = (bulls_13 + 1);
                    } else {
                        cows_12 = (cows_12 + 1);
                    }
                }
                i_15 = (i_15 + 1);
            }
            if (malformed_16) {
                continue;
            }
            Console.WriteLine(_fmtTop(((("Cows: " + (cows_12).ToString()) + ", bulls: ") + (bulls_13).ToString())));
            if ((bulls_13 == 4)) {
                Console.WriteLine(_fmtTop("You got it."));
                break;
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
