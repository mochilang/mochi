// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long weekday(long y_0, long m_1, long d_2) {
        long yy_3 = y_0;
        long mm_4 = m_1;
        if ((mm_4 < 3)) {
            mm_4 = (mm_4 + 12);
            yy_3 = (yy_3 - 1);
        };
        long k_5 = (yy_3 % 100);
        var j_6 = Convert.ToInt64((yy_3 / 100));
        var a_7 = Convert.ToInt64(((13 * (mm_4 + 1)) / 5));
        var b_8 = Convert.ToInt64((k_5 / 4));
        var c_9 = Convert.ToInt64((((dynamic)j_6) / ((dynamic)4)));
        return (((((dynamic)(((dynamic)((((dynamic)d_2) + ((dynamic)a_7)) + k_5)) + ((dynamic)b_8))) + ((dynamic)c_9)) + (((dynamic)5) * ((dynamic)j_6))) % 7);
    }

    static void main() {
        long[] months31_10 = new long[]{1, 3, 5, 7, 8, 10, 12};
        string[] names_11 = new string[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
        long count_12 = 0;
        long firstY_13 = 0;
        long firstM_14 = 0;
        long lastY_15 = 0;
        long lastM_16 = 0;
        long[] haveNone_17 = new long[]{};
        Console.WriteLine(_fmtTop("Months with five weekends:"));
        for (var year_18 = 1900; year_18 < 2101; year_18++) {
            bool hasOne_19 = false;
            foreach (var m_20 in months31_10) {
                if ((weekday(year_18, m_20, 1) == 6)) {
                    Console.WriteLine(_fmtTop(((("  " + (year_18).ToString()) + " ") + names_11[(int)((m_20 - 1))])));
                    count_12 = (count_12 + 1);
                    hasOne_19 = true;
                    lastY_15 = year_18;
                    lastM_16 = m_20;
                    if ((firstY_13 == 0)) {
                        firstY_13 = year_18;
                        firstM_14 = m_20;
                    }
                }
            }
            if ((!hasOne_19)) {
                haveNone_17 = (Enumerable.ToArray(Enumerable.Append(haveNone_17, year_18)));
            }
        };
        Console.WriteLine(_fmtTop(((count_12).ToString() + " total")));
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("First five dates of weekends:"));
        for (var i_21 = 0; i_21 < 5; i_21++) {
            long day_22 = (1 + (7 * i_21));
            Console.WriteLine(_fmtTop(((((("  Friday, " + names_11[(int)((firstM_14 - 1))]) + " ") + (day_22).ToString()) + ", ") + (firstY_13).ToString())));
        };
        Console.WriteLine(_fmtTop("Last five dates of weekends:"));
        for (var i_23 = 0; i_23 < 5; i_23++) {
            long day_24 = (1 + (7 * i_23));
            Console.WriteLine(_fmtTop(((((("  Friday, " + names_11[(int)((lastM_16 - 1))]) + " ") + (day_24).ToString()) + ", ") + (lastY_15).ToString())));
        };
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("Years with no months with five weekends:"));
        foreach (var y_25 in haveNone_17) {
            Console.WriteLine(_fmtTop(("  " + (y_25).ToString())));
        };
        Console.WriteLine(_fmtTop(((haveNone_17.Length).ToString() + " total")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
