// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double TWO_PI_1 = 6.283185307179586;
    static double sinApprox(double x) {
        double term_2 = x;
        double sum_3 = x;
        long n_4 = 1;
        while ((n_4 <= 8)) {
            var denom_5 = Convert.ToDouble(((2 * n_4) * ((2 * n_4) + 1)));
            term_2 = (((dynamic)((-term_2 * x) * x)) / ((dynamic)denom_5));
            sum_3 = (sum_3 + term_2);
            n_4 = (n_4 + 1);
        };
        return sum_3;
    }

    static double floor(double x) {
        long i_6 = Convert.ToInt64(x);
        if ((Convert.ToDouble(i_6) > x)) {
            i_6 = (i_6 - 1);
        };
        return Convert.ToDouble(i_6);
    }

    static double absFloat(double x) {
        if ((x < 0)) {
            return -x;
        };
        return x;
    }

    static long absInt(long n) {
        if ((n < 0)) {
            return -n;
        };
        return n;
    }

    static long parseIntStr(string str) {
        long i_7 = 0;
        bool neg_8 = false;
        if (((str.Length > 0) && (str.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_8 = true;
            i_7 = 1;
        };
        long n_9 = 0;
        Dictionary<string, long> digits_10 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_7 < str.Length)) {
            n_9 = ((n_9 * 10) + (digits_10.ContainsKey(str.Substring((int)(i_7), (int)((i_7 + 1) - i_7))) ? digits_10[str.Substring((int)(i_7), (int)((i_7 + 1) - i_7))] : 0));
            i_7 = (i_7 + 1);
        };
        if (neg_8) {
            n_9 = -n_9;
        };
        return n_9;
    }

    static long[] parseDate(string s) {
        long y_11 = parseIntStr(s.Substring((int)(0), (int)(4 - 0)));
        long m_12 = parseIntStr(s.Substring((int)(5), (int)(7 - 5)));
        long d_13 = parseIntStr(s.Substring((int)(8), (int)(10 - 8)));
        return new long[]{y_11, m_12, d_13};
    }

    static bool leap(long y) {
        if (((y % 400) == 0)) {
            return true;
        };
        if (((y % 100) == 0)) {
            return false;
        };
        return ((y % 4) == 0);
    }

    static long daysInMonth(long y, long m) {
        long feb_14 = (leap(y) ? 29 : 28);
        long[] lengths_15 = new long[]{31, feb_14, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        return lengths_15[(int)((m - 1))];
    }

    static long[] addDays(long y, long m, long d, long n) {
        long yy_16 = y;
        long mm_17 = m;
        long dd_18 = d;
        if ((n >= 0)) {
            long i_19 = 0;
            while ((i_19 < n)) {
                dd_18 = (dd_18 + 1);
                if ((dd_18 > daysInMonth(yy_16, mm_17))) {
                    dd_18 = 1;
                    mm_17 = (mm_17 + 1);
                    if ((mm_17 > 12)) {
                        mm_17 = 1;
                        yy_16 = (yy_16 + 1);
                    }
                }
                i_19 = (i_19 + 1);
            }
        } else {
            long i_20 = 0;
            while ((i_20 > n)) {
                dd_18 = (dd_18 - 1);
                if ((dd_18 < 1)) {
                    mm_17 = (mm_17 - 1);
                    if ((mm_17 < 1)) {
                        mm_17 = 12;
                        yy_16 = (yy_16 - 1);
                    }
                    dd_18 = daysInMonth(yy_16, mm_17);
                }
                i_20 = (i_20 - 1);
            }
        };
        return new long[]{yy_16, mm_17, dd_18};
    }

    static string pad2(long n) {
        if ((n < 10)) {
            return ("0" + (n).ToString());
        };
        return (n).ToString();
    }

    static string dateString(long y, long m, long d) {
        return (((((y).ToString() + "-") + pad2(m)) + "-") + pad2(d));
    }

    static long day(long y, long m, long d) {
        long part1_21 = (367 * y);
        var part2_22 = Convert.ToInt64(((((dynamic)7) * ((dynamic)Convert.ToInt64((y + ((m + 9) / 12))))) / 4));
        var part3_23 = Convert.ToInt64(((275 * m) / 9));
        return (((((dynamic)(((dynamic)part1_21) - ((dynamic)part2_22))) + ((dynamic)part3_23)) + d) - 730530);
    }

    static void biorhythms(string birth, string target) {
        long[] bparts_24 = parseDate(birth);
        long by_25 = bparts_24[(int)(0)];
        long bm_26 = bparts_24[(int)(1)];
        long bd_27 = bparts_24[(int)(2)];
        long[] tparts_28 = parseDate(target);
        long ty_29 = tparts_28[(int)(0)];
        long tm_30 = tparts_28[(int)(1)];
        long td_31 = tparts_28[(int)(2)];
        long diff_32 = absInt((day(ty_29, tm_30, td_31) - day(by_25, bm_26, bd_27)));
        Console.WriteLine(_fmtTop(((("Born " + birth) + ", Target ") + target)));
        Console.WriteLine(_fmtTop(("Day " + (diff_32).ToString())));
        string[] cycles_33 = new string[]{"Physical day ", "Emotional day", "Mental day   "};
        long[] lengths_34 = new long[]{23, 28, 33};
        string[][] quadrants_35 = new string[][]{new string[]{"up and rising", "peak"}, new string[]{"up but falling", "transition"}, new string[]{"down and falling", "valley"}, new string[]{"down but rising", "transition"}};
        long i_36 = 0;
        while ((i_36 < 3)) {
            long length_37 = lengths_34[(int)(i_36)];
            string cycle_38 = cycles_33[(int)(i_36)];
            long position_39 = (diff_32 % length_37);
            long quadrant_40 = ((position_39 * 4) / length_37);
            double percent_41 = sinApprox((((dynamic)(((dynamic)(2 * PI_0)) * ((dynamic)Convert.ToDouble(position_39)))) / ((dynamic)Convert.ToDouble(length_37))));
            percent_41 = (floor((percent_41 * 1000)) / 10);
            string description_42 = "";
            if ((percent_41 > 95)) {
                description_42 = " peak";
            } else {
                if ((percent_41 < -95)) {
                    description_42 = " valley";
                } else {
                    if ((absFloat(percent_41) < 5)) {
                        description_42 = " critical transition";
                    } else {
                        long daysToAdd_43 = ((((quadrant_40 + 1) * length_37) / 4) - position_39);
                        long[] res_44 = addDays(ty_29, tm_30, td_31, daysToAdd_43);
                        long ny_45 = res_44[(int)(0)];
                        long nm_46 = res_44[(int)(1)];
                        long nd_47 = res_44[(int)(2)];
                        string transition_48 = dateString(ny_45, nm_46, nd_47);
                        string trend_49 = quadrants_35[(int)(quadrant_40)][(int)(0)];
                        string next_50 = quadrants_35[(int)(quadrant_40)][(int)(1)];
                        string pct_51 = (percent_41).ToString();
                        if ((!pct_51.Contains("."))) {
                            pct_51 = (pct_51 + ".0");
                        }
                        description_42 = ((((((((" " + pct_51) + "% (") + trend_49) + ", next ") + next_50) + " ") + transition_48) + ")");
                    }
                }
            }
            string posStr_52 = (position_39).ToString();
            if ((position_39 < 10)) {
                posStr_52 = (" " + posStr_52);
            }
            Console.WriteLine(_fmtTop((((cycle_38 + posStr_52) + " : ") + description_42)));
            i_36 = (i_36 + 1);
        };
        Console.WriteLine(_fmtTop(""));
    }

    static void main() {
        string[][] pairs_53 = new string[][]{new string[]{"1943-03-09", "1972-07-11"}, new string[]{"1809-01-12", "1863-11-19"}, new string[]{"1809-02-12", "1863-11-19"}};
        long idx_54 = 0;
        while ((idx_54 < pairs_53.Length)) {
            string[] p_55 = pairs_53[(int)(idx_54)];
            biorhythms(p_55[(int)(0)], p_55[(int)(1)]);
            idx_54 = (idx_54 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
