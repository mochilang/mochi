// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double TWO_PI_1 = 6.283185307179586;
    static double sinApprox(double x_2) {
        double term_3 = x_2;
        double sum_4 = x_2;
        long n_5 = 1;
        while ((n_5 <= 8)) {
            double denom_6 = Convert.ToDouble(((2 * n_5) * ((2 * n_5) + 1)));
            term_3 = (((-term_3 * x_2) * x_2) / denom_6);
            sum_4 = (sum_4 + term_3);
            n_5 = (n_5 + 1);
        };
        return sum_4;
    }

    static double floor(double x_7) {
        long i_8 = Convert.ToInt64(x_7);
        if ((Convert.ToDouble(i_8) > x_7)) {
            i_8 = (i_8 - 1);
        };
        return Convert.ToDouble(i_8);
    }

    static double absFloat(double x_9) {
        if ((x_9 < 0.0)) {
            return -x_9;
        };
        return x_9;
    }

    static long absInt(long n_10) {
        if ((n_10 < 0)) {
            return -n_10;
        };
        return n_10;
    }

    static long parseIntStr(string str_11) {
        long i_12 = 0;
        bool neg_13 = false;
        if (((Convert.ToDouble(str_11.Length) > Convert.ToDouble(0)) && (str_11.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_13 = true;
            i_12 = 1;
        };
        long n_14 = 0;
        Dictionary<string, long> digits_15 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((Convert.ToDouble(i_12) < Convert.ToDouble(str_11.Length))) {
            n_14 = ((n_14 * 10) + (digits_15.ContainsKey(str_11.Substring((int)(i_12), (int)((i_12 + 1) - i_12))) ? digits_15[str_11.Substring((int)(i_12), (int)((i_12 + 1) - i_12))] : 0));
            i_12 = (i_12 + 1);
        };
        if (neg_13) {
            n_14 = -n_14;
        };
        return n_14;
    }

    static long[] parseDate(string s_16) {
        long y_17 = parseIntStr(s_16.Substring((int)(0), (int)(4 - 0)));
        long m_18 = parseIntStr(s_16.Substring((int)(5), (int)(7 - 5)));
        long d_19 = parseIntStr(s_16.Substring((int)(8), (int)(10 - 8)));
        return new long[]{y_17, m_18, d_19};
    }

    static bool leap(long y_20) {
        if (((y_20 % 400) == 0)) {
            return true;
        };
        if (((y_20 % 100) == 0)) {
            return false;
        };
        return ((y_20 % 4) == 0);
    }

    static long daysInMonth(long y_21, long m_22) {
        long feb_23 = (leap(y_21) ? 29 : 28);
        long[] lengths_24 = new long[]{31, feb_23, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        return lengths_24[(int)((m_22 - 1))];
    }

    static long[] addDays(long y_25, long m_26, long d_27, long n_28) {
        long yy_29 = y_25;
        long mm_30 = m_26;
        long dd_31 = d_27;
        if ((n_28 >= 0)) {
            long i_32 = 0;
            while ((i_32 < n_28)) {
                dd_31 = (dd_31 + 1);
                if ((dd_31 > daysInMonth(yy_29, mm_30))) {
                    dd_31 = 1;
                    mm_30 = (mm_30 + 1);
                    if ((mm_30 > 12)) {
                        mm_30 = 1;
                        yy_29 = (yy_29 + 1);
                    }
                }
                i_32 = (i_32 + 1);
            }
        } else {
            long i_33 = 0;
            while ((i_33 > n_28)) {
                dd_31 = (dd_31 - 1);
                if ((dd_31 < 1)) {
                    mm_30 = (mm_30 - 1);
                    if ((mm_30 < 1)) {
                        mm_30 = 12;
                        yy_29 = (yy_29 - 1);
                    }
                    dd_31 = daysInMonth(yy_29, mm_30);
                }
                i_33 = (i_33 - 1);
            }
        };
        return new long[]{yy_29, mm_30, dd_31};
    }

    static string pad2(long n_34) {
        if ((n_34 < 10)) {
            return ("0" + _fmt(n_34));
        };
        return _fmt(n_34);
    }

    static string dateString(long y_35, long m_36, long d_37) {
        return ((((_fmt(y_35) + "-") + pad2(m_36)) + "-") + pad2(d_37));
    }

    static long day(long y_38, long m_39, long d_40) {
        long part1_41 = (367 * y_38);
        long part2_42 = Convert.ToInt64(((7 * Convert.ToInt64((y_38 + ((m_39 + 9) / 12)))) / 4));
        long part3_43 = Convert.ToInt64(((275 * m_39) / 9));
        return ((((part1_41 - part2_42) + part3_43) + d_40) - 730530);
    }

    static void biorhythms(string birth_44, string target_45) {
        long[] bparts_46 = parseDate(birth_44);
        long by_47 = bparts_46[(int)(0)];
        long bm_48 = bparts_46[(int)(1)];
        long bd_49 = bparts_46[(int)(2)];
        long[] tparts_50 = parseDate(target_45);
        long ty_51 = tparts_50[(int)(0)];
        long tm_52 = tparts_50[(int)(1)];
        long td_53 = tparts_50[(int)(2)];
        long diff_54 = absInt((day(ty_51, tm_52, td_53) - day(by_47, bm_48, bd_49)));
        Console.WriteLine(_fmtTop(((("Born " + birth_44) + ", Target ") + target_45)));
        Console.WriteLine(_fmtTop(("Day " + _fmt(diff_54))));
        string[] cycles_55 = new string[]{"Physical day ", "Emotional day", "Mental day   "};
        long[] lengths_56 = new long[]{23, 28, 33};
        string[][] quadrants_57 = new string[][]{new string[]{"up and rising", "peak"}, new string[]{"up but falling", "transition"}, new string[]{"down and falling", "valley"}, new string[]{"down but rising", "transition"}};
        long i_58 = 0;
        while ((i_58 < 3)) {
            long length_59 = lengths_56[(int)(i_58)];
            string cycle_60 = cycles_55[(int)(i_58)];
            long position_61 = (diff_54 % length_59);
            long quadrant_62 = ((position_61 * 4) / length_59);
            double percent_63 = sinApprox((((2.0 * PI_0) * Convert.ToDouble(position_61)) / Convert.ToDouble(length_59)));
            percent_63 = (floor((percent_63 * 1000.0)) / 10.0);
            string description_64 = "";
            if ((percent_63 > 95.0)) {
                description_64 = " peak";
            } else {
                if ((percent_63 < -95.0)) {
                    description_64 = " valley";
                } else {
                    if ((absFloat(percent_63) < 5.0)) {
                        description_64 = " critical transition";
                    } else {
                        long daysToAdd_65 = ((((quadrant_62 + 1) * length_59) / 4) - position_61);
                        long[] res_66 = addDays(ty_51, tm_52, td_53, daysToAdd_65);
                        long ny_67 = res_66[(int)(0)];
                        long nm_68 = res_66[(int)(1)];
                        long nd_69 = res_66[(int)(2)];
                        string transition_70 = dateString(ny_67, nm_68, nd_69);
                        string trend_71 = quadrants_57[(int)(quadrant_62)][(int)(0)];
                        string next_72 = quadrants_57[(int)(quadrant_62)][(int)(1)];
                        string pct_73 = _fmt(percent_63);
                        if ((!pct_73.Contains("."))) {
                            pct_73 = (pct_73 + ".0");
                        }
                        description_64 = ((((((((" " + pct_73) + "% (") + trend_71) + ", next ") + next_72) + " ") + transition_70) + ")");
                    }
                }
            }
            string posStr_74 = _fmt(position_61);
            if ((position_61 < 10)) {
                posStr_74 = (" " + posStr_74);
            }
            Console.WriteLine(_fmtTop((((cycle_60 + posStr_74) + " : ") + description_64)));
            i_58 = (i_58 + 1);
        };
        Console.WriteLine(_fmtTop(""));
    }

    static void main() {
        string[][] pairs_75 = new string[][]{new string[]{"1943-03-09", "1972-07-11"}, new string[]{"1809-01-12", "1863-11-19"}, new string[]{"1809-02-12", "1863-11-19"}};
        long idx_76 = 0;
        while ((Convert.ToDouble(idx_76) < Convert.ToDouble(pairs_75.Length))) {
            string[] p_77 = pairs_75[(int)(idx_76)];
            biorhythms(p_77[(int)(0)], p_77[(int)(1)]);
            idx_76 = (idx_76 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
