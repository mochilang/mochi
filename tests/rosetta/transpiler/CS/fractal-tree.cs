// Generated by Mochi 0.10.50 on 2025-07-31 02:12 UTC
using System;
using System.Linq;
using System.Numerics;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static long width_14 = 80;
    static long height_15 = 40;
    static long depth_16 = 6;
    static double angle_17 = 12.0;
    static double length_18 = 12.0;
    static double frac_19 = 0.8;
    static double _mod(double x_1, double m_2) {
        return (x_1 - (((dynamic)(Convert.ToDouble(Convert.ToInt64((x_1 / m_2))))) * ((dynamic)(m_2))));
    }

    static double _sin(double x_3) {
        double y_4 = (_mod((x_3 + PI_0), (2.0 * PI_0)) - PI_0);
        double y2_5 = (y_4 * y_4);
        double y3_6 = (y2_5 * y_4);
        double y5_7 = (y3_6 * y2_5);
        double y7_8 = (y5_7 * y2_5);
        return (((y_4 - (y3_6 / 6.0)) + (y5_7 / 120.0)) - (y7_8 / 5040.0));
    }

    static double _cos(double x_9) {
        double y_10 = (_mod((x_9 + PI_0), (2.0 * PI_0)) - PI_0);
        double y2_11 = (y_10 * y_10);
        double y4_12 = (y2_11 * y2_11);
        double y6_13 = (y4_12 * y2_11);
        return (((1.0 - (y2_11 / 2.0)) + (y4_12 / 24.0)) - (y6_13 / 720.0));
    }

    static string[][] clearGrid() {
        string[][] g_20 = new string[][]{};
        long y_21 = 0;
        while ((y_21 < height_15)) {
            string[] row_22 = new string[]{};
            long x_23 = 0;
            while ((x_23 < width_14)) {
                row_22 = (Enumerable.ToArray(Enumerable.Append(row_22, " ")));
                x_23 = (x_23 + 1);
            }
            g_20 = (Enumerable.ToArray(Enumerable.Append(g_20, row_22)));
            y_21 = (y_21 + 1);
        };
        return g_20;
    }

    static void drawPoint(string[][] g_24, long x_25, long y_26) {
        if (((((x_25 >= 0) && (x_25 < width_14)) && (y_26 >= 0)) && (y_26 < height_15))) {
            string[] row_27 = g_24[(int)(y_26)];
            row_27[x_25] = "#";
            g_24[y_26] = row_27;
        };
    }

    static void bresenham(long x0_28, long y0_29, long x1_30, long y1_31, string[][] g_32) {
        long dx_33 = (x1_30 - x0_28);
        if ((dx_33 < 0)) {
            dx_33 = -dx_33;
        };
        long dy_34 = (y1_31 - y0_29);
        if ((dy_34 < 0)) {
            dy_34 = -dy_34;
        };
        long sx_35 = -1;
        if ((x0_28 < x1_30)) {
            sx_35 = 1;
        };
        long sy_36 = -1;
        if ((y0_29 < y1_31)) {
            sy_36 = 1;
        };
        long err_37 = (dx_33 - dy_34);
        while (true) {
            drawPoint(g_32, x0_28, y0_29);
            if (((x0_28 == x1_30) && (y0_29 == y1_31))) {
                break;
            }
            long e2_38 = (2 * err_37);
            if ((e2_38 > -dy_34)) {
                err_37 = (err_37 - dy_34);
                x0_28 = (x0_28 + sx_35);
            }
            if ((e2_38 < dx_33)) {
                err_37 = (err_37 + dx_33);
                y0_29 = (y0_29 + sy_36);
            }
        };
    }

    static void ftree(string[][] g_39, double x_40, double y_41, double dist_42, double dir_43, long d_44) {
        double rad_45 = ((dir_43 * PI_0) / 180.0);
        double x2_46 = (x_40 + (dist_42 * _sin(rad_45)));
        double y2_47 = (y_41 - (dist_42 * _cos(rad_45)));
        bresenham(Convert.ToInt64(x_40), Convert.ToInt64(y_41), Convert.ToInt64(x2_46), Convert.ToInt64(y2_47), g_39);
        if ((d_44 > 0)) {
            ftree(g_39, x2_46, y2_47, (dist_42 * frac_19), (dir_43 - angle_17), (d_44 - 1));
            ftree(g_39, x2_46, y2_47, (dist_42 * frac_19), (dir_43 + angle_17), (d_44 - 1));
        };
    }

    static string render(string[][] g_48) {
        string out_49 = "";
        long y_50 = 0;
        while ((y_50 < height_15)) {
            string line_51 = "";
            long x_52 = 0;
            while ((x_52 < width_14)) {
                line_51 = (line_51 + g_48[(int)(y_50)][(int)(x_52)]);
                x_52 = (x_52 + 1);
            }
            out_49 = (out_49 + line_51);
            if ((y_50 < (height_15 - 1))) {
                out_49 = (out_49 + "\n");
            }
            y_50 = (y_50 + 1);
        };
        return out_49;
    }

    static void main() {
        string[][] grid_53 = clearGrid();
        ftree(grid_53, Convert.ToDouble((width_14 / 2)), Convert.ToDouble((height_15 - 1)), length_18, 0.0, depth_16);
        Console.WriteLine(_fmtTop(render(grid_53)));
    }

    static void Main() {
        main();
    }
}
