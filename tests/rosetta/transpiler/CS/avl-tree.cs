// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, object> Node(long data_0) {
        return new Dictionary<string, object>{{"Data", data_0}, {"Balance", 0}, {"Link", new object[]{null, null}}};
    }

    static object getLink(Dictionary<string, object> n_1, long dir_2) {
        return ((dynamic)(((dynamic)n_1)["Link"] as object[]) ?? new object[]{})[dir_2];
    }

    static void setLink(Dictionary<string, object> n_3, long dir_4, object v_5) {
        object[] links_6 = (((dynamic)n_3)["Link"] as object[]) ?? new object[]{};
        links_6[dir_4] = v_5;
        n_3["Link"] = links_6;
    }

    static long opp(long dir_7) {
        return (1 - dir_7);
    }

    static Dictionary<string, object> single(Dictionary<string, object> root_8, long dir_9) {
        object tmp_10 = getLink(root_8, opp(dir_9));
        setLink(root_8, opp(dir_9), getLink(tmp_10, dir_9));
        setLink(tmp_10, dir_9, root_8);
        return (Dictionary<string, object>)tmp_10;
    }

    static Dictionary<string, object> _double(Dictionary<string, object> root_11, long dir_12) {
        object tmp_13 = getLink(getLink(root_11, opp(dir_12)), dir_12);
        setLink(getLink(root_11, opp(dir_12)), dir_12, getLink(tmp_13, opp(dir_12)));
        setLink(tmp_13, opp(dir_12), getLink(root_11, opp(dir_12)));
        setLink(root_11, opp(dir_12), tmp_13);
        tmp_13 = getLink(root_11, opp(dir_12));
        setLink(root_11, opp(dir_12), getLink(tmp_13, dir_12));
        setLink(tmp_13, dir_12, root_11);
        return (Dictionary<string, object>)tmp_13;
    }

    static void adjustBalance(Dictionary<string, object> root_14, long dir_15, long bal_16) {
        Dictionary<string, object> n_17 = (getLink(root_14, dir_15) as Dictionary<string, object>) ?? new Dictionary<string, object>{};
        Dictionary<string, object> nn_18 = (getLink(n_17, opp(dir_15)) as Dictionary<string, object>) ?? new Dictionary<string, object>{};
        if ((((dynamic)nn_18)["Balance"] == 0)) {
            root_14["Balance"] = 0;
            n_17["Balance"] = 0;
        } else {
            if ((((dynamic)nn_18)["Balance"] == bal_16)) {
                root_14["Balance"] = -bal_16;
                n_17["Balance"] = 0;
            } else {
                root_14["Balance"] = 0;
                n_17["Balance"] = bal_16;
            }
        };
        nn_18["Balance"] = 0;
    }

    static Dictionary<string, object> insertBalance(Dictionary<string, object> root_19, long dir_20) {
        Dictionary<string, object> n_21 = (getLink(root_19, dir_20) as Dictionary<string, object>) ?? new Dictionary<string, object>{};
        long bal_22 = ((2 * dir_20) - 1);
        if ((((dynamic)n_21)["Balance"] == bal_22)) {
            root_19["Balance"] = 0;
            n_21["Balance"] = 0;
            return single(root_19, opp(dir_20));
        };
        adjustBalance(root_19, dir_20, bal_22);
        return _double(root_19, opp(dir_20));
    }

    static Dictionary<string, object> insertR(object root_23, long data_24) {
        if ((root_23 == null)) {
            return new Dictionary<string, object>{{"node", Node(data_24)}, {"done", false}};
        };
        Dictionary<string, object> node_25 = (root_23 as Dictionary<string, object>) ?? new Dictionary<string, object>{};
        long dir_26 = 0;
        if ((string.Compare(Convert.ToString(Convert.ToInt64(((dynamic)node_25)["Data"])), Convert.ToString(data_24)) < 0)) {
            dir_26 = 1;
        };
        Dictionary<string, object> r_27 = insertR(getLink(node_25, dir_26), data_24);
        setLink(node_25, dir_26, ((dynamic)r_27)["node"]);
        if (((dynamic)r_27)["done"]) {
            return new Dictionary<string, object>{{"node", node_25}, {"done", true}};
        };
        node_25["Balance"] = (((dynamic)(Convert.ToInt64(((dynamic)node_25)["Balance"]))) + ((dynamic)(((2 * dir_26) - 1))));
        if ((((dynamic)node_25)["Balance"] == 0)) {
            return new Dictionary<string, object>{{"node", node_25}, {"done", true}};
        };
        if (((((dynamic)node_25)["Balance"] == 1) || (((dynamic)node_25)["Balance"] == -1))) {
            return new Dictionary<string, object>{{"node", node_25}, {"done", false}};
        };
        return new Dictionary<string, object>{{"node", insertBalance(node_25, dir_26)}, {"done", true}};
    }

    static object Insert(object tree_28, long data_29) {
        Dictionary<string, object> r_30 = insertR(tree_28, data_29);
        return ((dynamic)r_30)["node"];
    }

    static Dictionary<string, object> removeBalance(Dictionary<string, object> root_31, long dir_32) {
        Dictionary<string, object> n_33 = (getLink(root_31, opp(dir_32)) as Dictionary<string, object>) ?? new Dictionary<string, object>{};
        long bal_34 = ((2 * dir_32) - 1);
        if ((((dynamic)n_33)["Balance"] == -bal_34)) {
            root_31["Balance"] = 0;
            n_33["Balance"] = 0;
            return new Dictionary<string, object>{{"node", single(root_31, dir_32)}, {"done", false}};
        };
        if ((((dynamic)n_33)["Balance"] == bal_34)) {
            adjustBalance(root_31, opp(dir_32), -bal_34);
            return new Dictionary<string, object>{{"node", _double(root_31, dir_32)}, {"done", false}};
        };
        root_31["Balance"] = -bal_34;
        n_33["Balance"] = bal_34;
        return new Dictionary<string, object>{{"node", single(root_31, dir_32)}, {"done", true}};
    }

    static Dictionary<string, object> removeR(object root_35, long data_36) {
        if ((root_35 == null)) {
            return new Dictionary<string, object>{{"node", null}, {"done", false}};
        };
        Dictionary<string, object> node_37 = (root_35 as Dictionary<string, object>) ?? new Dictionary<string, object>{};
        if ((Convert.ToInt64(((dynamic)node_37)["Data"]) == data_36)) {
            if ((getLink(node_37, 0) == null)) {
                return new Dictionary<string, object>{{"node", getLink(node_37, 1)}, {"done", false}};
            }
            if ((getLink(node_37, 1) == null)) {
                return new Dictionary<string, object>{{"node", getLink(node_37, 0)}, {"done", false}};
            }
            object heir_38 = getLink(node_37, 0);
            while ((getLink(heir_38, 1) != null)) {
                heir_38 = getLink(heir_38, 1);
            }
            node_37["Data"] = ((dynamic)heir_38)["Data"];
            data_36 = Convert.ToInt64(((dynamic)heir_38)["Data"]);
        };
        long dir_39 = 0;
        if ((string.Compare(Convert.ToString(Convert.ToInt64(((dynamic)node_37)["Data"])), Convert.ToString(data_36)) < 0)) {
            dir_39 = 1;
        };
        Dictionary<string, object> r_40 = removeR(getLink(node_37, dir_39), data_36);
        setLink(node_37, dir_39, ((dynamic)r_40)["node"]);
        if (((dynamic)r_40)["done"]) {
            return new Dictionary<string, object>{{"node", node_37}, {"done", true}};
        };
        node_37["Balance"] = ((((dynamic)(Convert.ToInt64(((dynamic)node_37)["Balance"]))) + ((dynamic)(1))) - (2 * dir_39));
        if (((((dynamic)node_37)["Balance"] == 1) || (((dynamic)node_37)["Balance"] == -1))) {
            return new Dictionary<string, object>{{"node", node_37}, {"done", true}};
        };
        if ((((dynamic)node_37)["Balance"] == 0)) {
            return new Dictionary<string, object>{{"node", node_37}, {"done", false}};
        };
        return removeBalance(node_37, dir_39);
    }

    static object Remove(object tree_41, long data_42) {
        Dictionary<string, object> r_43 = removeR(tree_41, data_42);
        return ((dynamic)r_43)["node"];
    }

    static string indentStr(long n_44) {
        string s_45 = "";
        long i_46 = 0;
        while ((i_46 < n_44)) {
            s_45 = (s_45 + " ");
            i_46 = (i_46 + 1);
        };
        return s_45;
    }

    static void dumpNode(object node_47, long indent_48, bool comma_49) {
        string sp_50 = indentStr(indent_48);
        if ((node_47 == null)) {
            string line_51 = (sp_50 + "null");
            if (comma_49) {
                line_51 = (line_51 + ",");
            }
            Console.WriteLine(_fmtTop(line_51));
        } else {
            Console.WriteLine(_fmtTop((sp_50 + "{")));
            Console.WriteLine(_fmtTop((((indentStr((indent_48 + 3)) + "\"Data\": ") + (((dynamic)node_47)["Data"]).ToString()) + ",")));
            Console.WriteLine(_fmtTop((((indentStr((indent_48 + 3)) + "\"Balance\": ") + (((dynamic)node_47)["Balance"]).ToString()) + ",")));
            Console.WriteLine(_fmtTop((indentStr((indent_48 + 3)) + "\"Link\": [")));
            dumpNode(getLink(node_47, 0), (indent_48 + 6), true);
            dumpNode(getLink(node_47, 1), (indent_48 + 6), false);
            Console.WriteLine(_fmtTop((indentStr((indent_48 + 3)) + "]")));
            string end_52 = (sp_50 + "}");
            if (comma_49) {
                end_52 = (end_52 + ",");
            }
            Console.WriteLine(_fmtTop(end_52));
        };
    }

    static void dump(object node_53, long indent_54) {
        dumpNode(node_53, indent_54, false);
    }

    static void main() {
        Dictionary<string, object> tree_55 = null;
        Console.WriteLine(_fmtTop("Empty tree:"));
        dump(tree_55, 0);
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("Insert test:"));
        tree_55 = Insert(tree_55, 3);
        tree_55 = Insert(tree_55, 1);
        tree_55 = Insert(tree_55, 4);
        tree_55 = Insert(tree_55, 1);
        tree_55 = Insert(tree_55, 5);
        dump(tree_55, 0);
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("Remove test:"));
        tree_55 = Remove(tree_55, 3);
        tree_55 = Remove(tree_55, 1);
        Dictionary<string, object> t_56 = (tree_55 as Dictionary<string, object>) ?? new Dictionary<string, object>{};
        t_56["Balance"] = 0;
        tree_55 = t_56;
        dump(tree_55, 0);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
