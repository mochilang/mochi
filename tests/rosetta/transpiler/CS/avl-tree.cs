// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, object> Node(long data) {
        return new Dictionary<string, object>{{"Data", data}, {"Balance", 0}, {"Link", new object[]{null, null}}};
    }

    static object getLink(Dictionary<string, object> n, long dir) {
        return ((dynamic)(object[])((dynamic)n)["Link"])[dir];
    }

    static void setLink(Dictionary<string, object> n, long dir, object v) {
        object[] links_0 = (object[])((dynamic)n)["Link"];
        links_0[dir] = v;
        n["Link"] = links_0;
    }

    static long opp(long dir) {
        return (1 - dir);
    }

    static Dictionary<string, object> single(Dictionary<string, object> root, long dir) {
        var tmp_1 = getLink(root, opp(dir));
        setLink(root, opp(dir), getLink(tmp_1, dir));
        setLink(tmp_1, dir, root);
        return (Dictionary<string, object>)tmp_1;
    }

    static Dictionary<string, object> _double(Dictionary<string, object> root, long dir) {
        var tmp_2 = getLink(getLink(root, opp(dir)), dir);
        setLink(getLink(root, opp(dir)), dir, getLink(tmp_2, opp(dir)));
        setLink(tmp_2, opp(dir), getLink(root, opp(dir)));
        setLink(root, opp(dir), tmp_2);
        tmp_2 = getLink(root, opp(dir));
        setLink(root, opp(dir), getLink(tmp_2, dir));
        setLink(tmp_2, dir, root);
        return (Dictionary<string, object>)tmp_2;
    }

    static void adjustBalance(Dictionary<string, object> root, long dir, long bal) {
        Dictionary<string, object> n_3 = (Dictionary<string, object>)getLink(root, dir);
        Dictionary<string, object> nn_4 = (Dictionary<string, object>)getLink(n_3, opp(dir));
        if ((((dynamic)nn_4)["Balance"] == 0)) {
            root["Balance"] = 0;
            n_3["Balance"] = 0;
        } else {
            if ((((dynamic)nn_4)["Balance"] == bal)) {
                root["Balance"] = -bal;
                n_3["Balance"] = 0;
            } else {
                root["Balance"] = 0;
                n_3["Balance"] = bal;
            }
        };
        nn_4["Balance"] = 0;
    }

    static Dictionary<string, object> insertBalance(Dictionary<string, object> root, long dir) {
        Dictionary<string, object> n_5 = (Dictionary<string, object>)getLink(root, dir);
        long bal_6 = ((2 * dir) - 1);
        if ((((dynamic)n_5)["Balance"] == bal_6)) {
            root["Balance"] = 0;
            n_5["Balance"] = 0;
            return single(root, opp(dir));
        };
        adjustBalance(root, dir, bal_6);
        return double(root, opp(dir));
    }

    static Dictionary<string, object> insertR(object root, long data) {
        if ((root == null)) {
            return new Dictionary<string, object>{{"node", Node(data)}, {"done", false}};
        };
        Dictionary<string, object> node_7 = (Dictionary<string, object>)root;
        long dir_8 = 0;
        if ((Convert.ToInt64(((dynamic)node_7)["Data"]) < data)) {
            dir_8 = 1;
        };
        Dictionary<string, object> r_9 = insertR(getLink(node_7, dir_8), data);
        setLink(node_7, dir_8, ((dynamic)r_9)["node"]);
        if (((dynamic)r_9)["done"]) {
            return new Dictionary<string, object>{{"node", node_7}, {"done", true}};
        };
        node_7["Balance"] = (((dynamic)Convert.ToInt64(((dynamic)node_7)["Balance"])) + ((dynamic)((2 * dir_8) - 1)));
        if ((((dynamic)node_7)["Balance"] == 0)) {
            return new Dictionary<string, object>{{"node", node_7}, {"done", true}};
        };
        if (((((dynamic)node_7)["Balance"] == 1) || (((dynamic)node_7)["Balance"] == -1))) {
            return new Dictionary<string, object>{{"node", node_7}, {"done", false}};
        };
        return new Dictionary<string, object>{{"node", insertBalance(node_7, dir_8)}, {"done", true}};
    }

    static object Insert(object tree, long data) {
        Dictionary<string, object> r_10 = insertR(tree, data);
        return ((dynamic)r_10)["node"];
    }

    static Dictionary<string, object> removeBalance(Dictionary<string, object> root, long dir) {
        Dictionary<string, object> n_11 = (Dictionary<string, object>)getLink(root, opp(dir));
        long bal_12 = ((2 * dir) - 1);
        if ((((dynamic)n_11)["Balance"] == -bal_12)) {
            root["Balance"] = 0;
            n_11["Balance"] = 0;
            return new Dictionary<string, object>{{"node", single(root, dir)}, {"done", false}};
        };
        if ((((dynamic)n_11)["Balance"] == bal_12)) {
            adjustBalance(root, opp(dir), -bal_12);
            return new Dictionary<string, object>{{"node", double(root, dir)}, {"done", false}};
        };
        root["Balance"] = -bal_12;
        n_11["Balance"] = bal_12;
        return new Dictionary<string, object>{{"node", single(root, dir)}, {"done", true}};
    }

    static Dictionary<string, object> removeR(object root, long data) {
        if ((root == null)) {
            return new Dictionary<string, object>{{"node", null}, {"done", false}};
        };
        Dictionary<string, object> node_13 = (Dictionary<string, object>)root;
        if ((Convert.ToInt64(((dynamic)node_13)["Data"]) == data)) {
            if ((getLink(node_13, 0) == null)) {
                return new Dictionary<string, object>{{"node", getLink(node_13, 1)}, {"done", false}};
            }
            if ((getLink(node_13, 1) == null)) {
                return new Dictionary<string, object>{{"node", getLink(node_13, 0)}, {"done", false}};
            }
            var heir_14 = getLink(node_13, 0);
            while ((getLink(heir_14, 1) != null)) {
                heir_14 = getLink(heir_14, 1);
            }
            node_13["Data"] = ((dynamic)heir_14)["Data"];
            data = Convert.ToInt64(((dynamic)heir_14)["Data"]);
        };
        long dir_15 = 0;
        if ((Convert.ToInt64(((dynamic)node_13)["Data"]) < data)) {
            dir_15 = 1;
        };
        Dictionary<string, object> r_16 = removeR(getLink(node_13, dir_15), data);
        setLink(node_13, dir_15, ((dynamic)r_16)["node"]);
        if (((dynamic)r_16)["done"]) {
            return new Dictionary<string, object>{{"node", node_13}, {"done", true}};
        };
        node_13["Balance"] = ((((dynamic)Convert.ToInt64(((dynamic)node_13)["Balance"])) + ((dynamic)1)) - (2 * dir_15));
        if (((((dynamic)node_13)["Balance"] == 1) || (((dynamic)node_13)["Balance"] == -1))) {
            return new Dictionary<string, object>{{"node", node_13}, {"done", true}};
        };
        if ((((dynamic)node_13)["Balance"] == 0)) {
            return new Dictionary<string, object>{{"node", node_13}, {"done", false}};
        };
        return removeBalance(node_13, dir_15);
    }

    static object Remove(object tree, long data) {
        Dictionary<string, object> r_17 = removeR(tree, data);
        return ((dynamic)r_17)["node"];
    }

    static string indentStr(long n) {
        string s_18 = "";
        long i_19 = 0;
        while ((i_19 < n)) {
            s_18 = (s_18 + " ");
            i_19 = (i_19 + 1);
        };
        return s_18;
    }

    static void dumpNode(object node, long indent, bool comma) {
        string sp_20 = indentStr(indent);
        if ((node == null)) {
            string line_21 = (sp_20 + "null");
            if (comma) {
                line_21 = (line_21 + ",");
            }
            Console.WriteLine(_fmtTop(line_21));
        } else {
            Console.WriteLine(_fmtTop((sp_20 + "{")));
            Console.WriteLine(_fmtTop((((indentStr((indent + 3)) + "\"Data\": ") + (((dynamic)node)["Data"]).ToString()) + ",")));
            Console.WriteLine(_fmtTop((((indentStr((indent + 3)) + "\"Balance\": ") + (((dynamic)node)["Balance"]).ToString()) + ",")));
            Console.WriteLine(_fmtTop((indentStr((indent + 3)) + "\"Link\": [")));
            dumpNode(getLink(node, 0), (indent + 6), true);
            dumpNode(getLink(node, 1), (indent + 6), false);
            Console.WriteLine(_fmtTop((indentStr((indent + 3)) + "]")));
            string end_22 = (sp_20 + "}");
            if (comma) {
                end_22 = (end_22 + ",");
            }
            Console.WriteLine(_fmtTop(end_22));
        };
    }

    static void dump(object node, long indent) {
        dumpNode(node, indent, false);
    }

    static void main() {
        Dictionary<string, object> tree_23 = null;
        Console.WriteLine(_fmtTop("Empty tree:"));
        dump(tree_23, 0);
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("Insert test:"));
        tree_23 = Insert(tree_23, 3);
        tree_23 = Insert(tree_23, 1);
        tree_23 = Insert(tree_23, 4);
        tree_23 = Insert(tree_23, 1);
        tree_23 = Insert(tree_23, 5);
        dump(tree_23, 0);
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("Remove test:"));
        tree_23 = Remove(tree_23, 3);
        tree_23 = Remove(tree_23, 1);
        Dictionary<string, object> t_24 = (Dictionary<string, object>)tree_23;
        t_24["Balance"] = 0;
        tree_23 = t_24;
        dump(tree_23, 0);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
