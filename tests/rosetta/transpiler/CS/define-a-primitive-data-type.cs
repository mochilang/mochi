// Generated by Mochi 0.10.55 on 2025-08-03 10:56 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class TinyInt {
    public long value;
    public TinyInt Add(TinyInt t2) {
        return Program.NewTinyInt((((dynamic)(value)) + ((dynamic)(t2.value))));
    }

    public TinyInt Dec() {
        return Sub(Program.NewTinyInt(1));
    }

    public TinyInt Div(TinyInt t2) {
        return Program.NewTinyInt((((dynamic)(value)) / ((dynamic)(t2.value))));
    }

    public TinyInt Inc() {
        return Add(Program.NewTinyInt(1));
    }

    public TinyInt Mul(TinyInt t2) {
        return Program.NewTinyInt((((dynamic)(value)) * ((dynamic)(t2.value))));
    }

    public TinyInt Rem(TinyInt t2) {
        return Program.NewTinyInt((((dynamic)(value)) % ((dynamic)(t2.value))));
    }

    public TinyInt Sub(TinyInt t2) {
        return Program.NewTinyInt((((dynamic)(value)) - ((dynamic)(t2.value))));
    }

    public override string ToString() => $"TinyInt {{value = {value}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static TinyInt NewTinyInt(long i_0) {
        if ((i_0 < 1)) {
            i_0 = 1;
        } else {
            if ((i_0 > 10)) {
                i_0 = 10;
            }
        };
        return new TinyInt{value = i_0};
    }

    public static void main() {
        TinyInt t1_1 = Program.NewTinyInt(6);
        TinyInt t2_2 = Program.NewTinyInt(3);
        Console.WriteLine(Program._fmtTop(("t1      = " + _fmt(t1_1.value))));
        Console.WriteLine(Program._fmtTop(("t2      = " + _fmt(t2_2.value))));
        Console.WriteLine(Program._fmtTop(("t1 + t2 = " + _fmt(((dynamic)(t1_1.Add(t2_2))).value))));
        Console.WriteLine(Program._fmtTop(("t1 - t2 = " + _fmt(((dynamic)(t1_1.Sub(t2_2))).value))));
        Console.WriteLine(Program._fmtTop(("t1 * t2 = " + _fmt(((dynamic)(t1_1.Mul(t2_2))).value))));
        Console.WriteLine(Program._fmtTop(("t1 / t2 = " + _fmt(((dynamic)(t1_1.Div(t2_2))).value))));
        Console.WriteLine(Program._fmtTop(("t1 % t2 = " + _fmt(((dynamic)(t1_1.Rem(t2_2))).value))));
        Console.WriteLine(Program._fmtTop(("t1 + 1  = " + _fmt(((dynamic)(t1_1.Inc())).value))));
        Console.WriteLine(Program._fmtTop(("t1 - 1  = " + _fmt(((dynamic)(t1_1.Dec())).value))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
