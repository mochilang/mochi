// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double qsel(double[] a_0, long k_1) {
        double[] arr_2 = a_0;
        while ((string.Compare(Convert.ToString(arr_2.Length), Convert.ToString(1)) > 0)) {
            long px_3 = (((dynamic)(_now())) % ((dynamic)(arr_2.Length)));
            double pv_4 = arr_2[(int)(px_3)];
            long last_5 = (((dynamic)(arr_2.Length)) - ((dynamic)(1)));
            double tmp_6 = arr_2[(int)(px_3)];
            arr_2[px_3] = arr_2[(int)(last_5)];
            arr_2[last_5] = tmp_6;
            px_3 = 0;
            long i_7 = 0;
            while ((i_7 < last_5)) {
                double v_8 = arr_2[(int)(i_7)];
                if ((v_8 < pv_4)) {
                    double tmp2_9 = arr_2[(int)(px_3)];
                    arr_2[px_3] = arr_2[(int)(i_7)];
                    arr_2[i_7] = tmp2_9;
                    px_3 = (px_3 + 1);
                }
                i_7 = (i_7 + 1);
            }
            if ((px_3 == k_1)) {
                return pv_4;
            }
            if ((k_1 < px_3)) {
                arr_2 = arr_2.Skip((int)(0)).Take((int)((px_3 - 0))).ToArray();
            } else {
                double tmp2_10 = arr_2[(int)(px_3)];
                arr_2[px_3] = pv_4;
                arr_2[last_5] = tmp2_10;
                arr_2 = arr_2.Skip((int)((px_3 + 1))).Take((int)((arr_2.Length - (px_3 + 1)))).ToArray();
                k_1 = (k_1 - (px_3 + 1));
            }
        };
        return arr_2[(int)(0)];
    }

    static double median(double[] list_11) {
        double[] arr_12 = list_11;
        var half_13 = Convert.ToInt64((((dynamic)(arr_12.Length)) / ((dynamic)(2))));
        double med_14 = qsel(arr_12, half_13);
        if (((((dynamic)(arr_12.Length)) % ((dynamic)(2))) == 0)) {
            return ((med_14 + qsel(arr_12, (((dynamic)(half_13)) - ((dynamic)(1))))) / 2.0);
        };
        return med_14;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((median(new double[]{3.0, 1.0, 4.0, 1.0})).ToString()));
            Console.WriteLine(_fmtTop((median(new double[]{3.0, 1.0, 4.0, 1.0, 5.0})).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
