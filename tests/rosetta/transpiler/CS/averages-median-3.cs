// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double qsel(double[] a, long k) {
        double[] arr_0 = a;
        while ((arr_0.Length > 1)) {
            long px_1 = (((dynamic)_now()) % ((dynamic)arr_0.Length));
            double pv_2 = arr_0[(int)(px_1)];
            long last_3 = (((dynamic)arr_0.Length) - ((dynamic)1));
            double tmp_4 = arr_0[(int)(px_1)];
            arr_0[px_1] = arr_0[(int)(last_3)];
            arr_0[last_3] = tmp_4;
            px_1 = 0;
            long i_5 = 0;
            while ((i_5 < last_3)) {
                double v_6 = arr_0[(int)(i_5)];
                if ((v_6 < pv_2)) {
                    double tmp2_7 = arr_0[(int)(px_1)];
                    arr_0[px_1] = arr_0[(int)(i_5)];
                    arr_0[i_5] = tmp2_7;
                    px_1 = (px_1 + 1);
                }
                i_5 = (i_5 + 1);
            }
            if ((px_1 == k)) {
                return pv_2;
            }
            if ((k < px_1)) {
                arr_0 = arr_0.Skip((int)(0)).Take((int)((px_1 - 0))).ToArray();
            } else {
                double tmp2_8 = arr_0[(int)(px_1)];
                arr_0[px_1] = pv_2;
                arr_0[last_3] = tmp2_8;
                arr_0 = arr_0.Skip((int)((px_1 + 1))).Take((int)((arr_0.Length - (px_1 + 1)))).ToArray();
                k = (k - (px_1 + 1));
            }
        };
        return arr_0[(int)(0)];
    }

    static double median(double[] list) {
        double[] arr_9 = list;
        var half_10 = Convert.ToInt64((((dynamic)arr_9.Length) / ((dynamic)2)));
        double med_11 = qsel(arr_9, half_10);
        if (((((dynamic)arr_9.Length) % ((dynamic)2)) == 0)) {
            return ((med_11 + qsel(arr_9, (((dynamic)half_10) - ((dynamic)1)))) / 2);
        };
        return med_11;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((median(new double[]{3, 1, 4, 1})).ToString()));
            Console.WriteLine(_fmtTop((median(new double[]{3, 1, 4, 1, 5})).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
