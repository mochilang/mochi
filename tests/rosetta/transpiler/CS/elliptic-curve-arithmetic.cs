// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Pt {
    public double x;
    public double y;
    public bool inf;
    public override string ToString() => $"Pt {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, inf = {inf}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double bCoeff_0 = 7;
    static Pt zero() {
        return new Pt{x = 0, y = 0, inf = true};
    }

    static bool isZero(Pt p_1) {
        return p_1.inf;
    }

    static Pt neg(Pt p_2) {
        return new Pt{x = p_2.x, y = -p_2.y, inf = p_2.inf};
    }

    static Pt dbl(Pt p_3) {
        if (isZero(p_3)) {
            return p_3;
        };
        double L_4 = (((3 * p_3.x) * p_3.x) / (2 * p_3.y));
        double x_5 = ((L_4 * L_4) - (2 * p_3.x));
        return new Pt{x = x_5, y = ((L_4 * (p_3.x - x_5)) - p_3.y), inf = false};
    }

    static Pt add(Pt p_6, Pt q_7) {
        if (isZero(p_6)) {
            return q_7;
        };
        if (isZero(q_7)) {
            return p_6;
        };
        if ((p_6.x == q_7.x)) {
            if ((p_6.y == q_7.y)) {
                return dbl(p_6);
            }
            return zero();
        };
        double L_8 = ((q_7.y - p_6.y) / (q_7.x - p_6.x));
        double x_9 = (((L_8 * L_8) - p_6.x) - q_7.x);
        return new Pt{x = x_9, y = ((L_8 * (p_6.x - x_9)) - p_6.y), inf = false};
    }

    static Pt mul(Pt p_10, long n_11) {
        Pt r_12 = zero();
        Pt q_13 = p_10;
        long k_14 = n_11;
        while ((k_14 > 0)) {
            if (((k_14 % 2) == 1)) {
                r_12 = add(r_12, q_13);
            }
            q_13 = dbl(q_13);
            k_14 = (k_14 / 2);
        };
        return r_12;
    }

    static double cbrtApprox(double x_15) {
        double guess_16 = x_15;
        long i_17 = 0;
        while ((i_17 < 40)) {
            guess_16 = (((2 * guess_16) + (x_15 / (guess_16 * guess_16))) / 3);
            i_17 = (i_17 + 1);
        };
        return guess_16;
    }

    static Pt fromY(double y_18) {
        return new Pt{x = cbrtApprox(((y_18 * y_18) - bCoeff_0)), y = y_18, inf = false};
    }

    static void show(string s_19, Pt p_20) {
        if (isZero(p_20)) {
            Console.WriteLine(_fmtTop((s_19 + "Zero")));
        } else {
            Console.WriteLine(_fmtTop((((((s_19 + "(") + (p_20.x).ToString()) + ", ") + (p_20.y).ToString()) + ")")));
        };
    }

    static void main() {
        Pt a_21 = fromY(1);
        Pt b_22 = fromY(2);
        show("a = ", a_21);
        show("b = ", b_22);
        Pt c_23 = add(a_21, b_22);
        show("c = a + b = ", c_23);
        Pt d_24 = neg(c_23);
        show("d = -c = ", d_24);
        show("c + d = ", add(c_23, d_24));
        show("a + b + d = ", add(a_21, add(b_22, d_24)));
        show("a * 12345 = ", mul(a_21, 12345));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
