// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long digitSumMod(long n_0, long base_1) {
        long sum_2 = 0;
        long j_3 = n_0;
        while ((j_3 > 0)) {
            sum_2 = (sum_2 + (j_3 % base_1));
            j_3 = (j_3 / base_1);
        };
        return (sum_2 % base_1);
    }

    static long[] fairshareList(long n_4, long base_5) {
        long[] res_6 = new long[]{};
        long i_7 = 0;
        while ((i_7 < n_4)) {
            res_6 = (Enumerable.ToArray(Enumerable.Append(res_6, digitSumMod(i_7, base_5))));
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    static long[] sortInts(long[] xs_8) {
        long[] arr_9 = xs_8;
        long i_10 = 0;
        while ((i_10 < arr_9.Length)) {
            long j_11 = 0;
            while ((j_11 < (((dynamic)(arr_9.Length)) - ((dynamic)(1))))) {
                if ((arr_9[(int)(j_11)] > arr_9[(int)((j_11 + 1))])) {
                    long t_12 = arr_9[(int)(j_11)];
                    arr_9[j_11] = arr_9[(int)((j_11 + 1))];
                    arr_9[(j_11 + 1)] = t_12;
                }
                j_11 = (j_11 + 1);
            }
            i_10 = (i_10 + 1);
        };
        return arr_9;
    }

    static string turns(long n_13, long base_14) {
        long[] counts_15 = new long[]{};
        long i_16 = 0;
        while ((i_16 < base_14)) {
            counts_15 = (Enumerable.ToArray(Enumerable.Append(counts_15, 0)));
            i_16 = (i_16 + 1);
        };
        i_16 = 0;
        while ((i_16 < n_13)) {
            long v_17 = digitSumMod(i_16, base_14);
            counts_15[v_17] = (counts_15[(int)(v_17)] + 1);
            i_16 = (i_16 + 1);
        };
        Dictionary<long, long> freq_18 = new Dictionary<long, long>{};
        long[] fkeys_19 = new long[]{};
        i_16 = 0;
        while ((i_16 < base_14)) {
            long c_20 = counts_15[(int)(i_16)];
            if ((c_20 > 0)) {
                if ((freq_18.ContainsKey(c_20))) {
                    freq_18[c_20] = ((freq_18.ContainsKey(c_20) ? freq_18[c_20] : 0) + 1);
                } else {
                    freq_18[c_20] = 1;
                    fkeys_19 = (Enumerable.ToArray(Enumerable.Append(fkeys_19, c_20)));
                }
            }
            i_16 = (i_16 + 1);
        };
        long total_21 = 0;
        i_16 = 0;
        while ((i_16 < fkeys_19.Length)) {
            total_21 = (total_21 + (freq_18.ContainsKey(fkeys_19[(int)(i_16)]) ? freq_18[fkeys_19[(int)(i_16)]] : 0));
            i_16 = (i_16 + 1);
        };
        if ((total_21 != base_14)) {
            return (("only " + (total_21).ToString()) + " have a turn");
        };
        fkeys_19 = sortInts(fkeys_19);
        string res_22 = "";
        i_16 = 0;
        while ((i_16 < fkeys_19.Length)) {
            if ((i_16 > 0)) {
                res_22 = (res_22 + " or ");
            }
            res_22 = (res_22 + (fkeys_19[(int)(i_16)]).ToString());
            i_16 = (i_16 + 1);
        };
        return res_22;
    }

    static void main() {
        long[] bases1_23 = new long[]{2, 3, 5, 11};
        long i_24 = 0;
        while ((i_24 < bases1_23.Length)) {
            long b_25 = bases1_23[(int)(i_24)];
            Console.WriteLine(_fmtTop(((((dynamic)((b_25).ToString().PadLeft(2, ' '))) + ((dynamic)(" : "))) + (fairshareList(25, b_25)).ToString())));
            i_24 = (i_24 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("How many times does each get a turn in 50000 iterations?"));
        long[] bases2_26 = new long[]{191, 1377, 49999, 50000, 50001};
        i_24 = 0;
        while ((i_24 < bases2_26.Length)) {
            long b_27 = bases2_26[(int)(i_24)];
            string t_28 = turns(50000, b_27);
            Console.WriteLine(_fmtTop(((("  With " + (b_27).ToString()) + " people: ") + t_28)));
            i_24 = (i_24 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
