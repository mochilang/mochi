// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] dbRec(long k_0, long n_1, long t_2, long p_3, long[] a_4, long[] seq_5) {
        if ((t_2 > n_1)) {
            if (((n_1 % p_3) == 0)) {
                long j_6 = 1;
                while ((j_6 <= p_3)) {
                    seq_5 = (Enumerable.ToArray(Enumerable.Append(seq_5, a_4[(int)(j_6)])));
                    j_6 = (j_6 + 1);
                }
            }
        } else {
            a_4[t_2] = a_4[(int)((t_2 - p_3))];
            seq_5 = dbRec(k_0, n_1, (t_2 + 1), p_3, a_4, seq_5);
            long j_7 = (a_4[(int)((t_2 - p_3))] + 1);
            while ((j_7 < k_0)) {
                a_4[t_2] = j_7;
                seq_5 = dbRec(k_0, n_1, (t_2 + 1), t_2, a_4, seq_5);
                j_7 = (j_7 + 1);
            }
        };
        return seq_5;
    }

    static string deBruijn(long k_8, long n_9) {
        string digits_10 = "0123456789";
        string alphabet_11 = digits_10;
        if ((k_8 < 10)) {
            alphabet_11 = digits_10.Substring((int)(0), (int)(k_8 - 0));
        };
        long[] a_12 = new long[]{};
        long i_13 = 0;
        while ((i_13 < (k_8 * n_9))) {
            a_12 = (Enumerable.ToArray(Enumerable.Append(a_12, 0)));
            i_13 = (i_13 + 1);
        };
        long[] seq_14 = new long[]{};
        seq_14 = dbRec(k_8, n_9, 1, 1, a_12, seq_14);
        string b_15 = "";
        long idx_16 = 0;
        while ((idx_16 < seq_14.Length)) {
            b_15 = (b_15 + alphabet_11.Substring((int)(seq_14[(int)(idx_16)]), 1));
            idx_16 = (idx_16 + 1);
        };
        b_15 = (b_15 + b_15.Substring((int)(0), (int)((n_9 - 1) - 0)));
        return b_15;
    }

    static bool allDigits(string s_17) {
        long i_18 = 0;
        while ((i_18 < s_17.Length)) {
            string ch_19 = s_17.Substring((int)(i_18), (int)((i_18 + 1) - i_18));
            if (((string.Compare(ch_19, "0") < 0) || (string.Compare(ch_19, "9") > 0))) {
                return false;
            }
            i_18 = (i_18 + 1);
        };
        return true;
    }

    static long parseIntStr(string str_20) {
        long n_21 = 0;
        long i_22 = 0;
        while ((i_22 < str_20.Length)) {
            n_21 = (((dynamic)(n_21 * 10)) + ((dynamic)Convert.ToInt64(str_20.Substring((int)(i_22), (int)((i_22 + 1) - i_22)))));
            i_22 = (i_22 + 1);
        };
        return n_21;
    }

    static void validate(string db_23) {
        var le_24 = db_23.Length;
        long[] found_25 = new long[]{};
        long i_26 = 0;
        while ((i_26 < 10000)) {
            found_25 = (Enumerable.ToArray(Enumerable.Append(found_25, 0)));
            i_26 = (i_26 + 1);
        };
        long j_27 = 0;
        while ((j_27 < (((dynamic)le_24) - ((dynamic)3)))) {
            string s_28 = db_23.Substring((int)(j_27), (int)((j_27 + 4) - j_27));
            if (allDigits(s_28)) {
                long n_29 = parseIntStr(s_28);
                found_25[n_29] = (found_25[(int)(n_29)] + 1);
            }
            j_27 = (j_27 + 1);
        };
        string[] errs_30 = new string[]{};
        long k_31 = 0;
        while ((k_31 < 10000)) {
            if ((found_25[(int)(k_31)] == 0)) {
                errs_30 = (Enumerable.ToArray(Enumerable.Append(errs_30, (("    PIN number " + padLeft(k_31, 4)) + " missing"))));
            } else {
                if ((found_25[(int)(k_31)] > 1)) {
                    errs_30 = (Enumerable.ToArray(Enumerable.Append(errs_30, (((("    PIN number " + padLeft(k_31, 4)) + " occurs ") + (found_25[(int)(k_31)]).ToString()) + " times"))));
                }
            }
            k_31 = (k_31 + 1);
        };
        var lerr_32 = errs_30.Length;
        if ((lerr_32 == 0)) {
            Console.WriteLine(_fmtTop("  No errors found"));
        } else {
            string pl_33 = "s";
            if ((lerr_32 == 1)) {
                pl_33 = "";
            }
            Console.WriteLine(_fmtTop((((("  " + (lerr_32).ToString()) + " error") + pl_33) + " found:")));
            string msg_34 = joinStr(errs_30, "\n");
            Console.WriteLine(_fmtTop(msg_34));
        };
    }

    static string padLeft(long n_35, long width_36) {
        string s_37 = (n_35).ToString();
        while ((s_37.Length < width_36)) {
            s_37 = ("0" + s_37);
        };
        return s_37;
    }

    static string joinStr(string[] xs_38, string sep_39) {
        string res_40 = "";
        long i_41 = 0;
        while ((i_41 < xs_38.Length)) {
            if ((i_41 > 0)) {
                res_40 = (res_40 + sep_39);
            }
            res_40 = (res_40 + xs_38[(int)(i_41)]);
            i_41 = (i_41 + 1);
        };
        return res_40;
    }

    static string reverse(string s_42) {
        string out_43 = "";
        long i_44 = (((dynamic)s_42.Length) - ((dynamic)1));
        while ((i_44 >= 0)) {
            out_43 = (out_43 + s_42.Substring((int)(i_44), (int)((i_44 + 1) - i_44)));
            i_44 = (i_44 - 1);
        };
        return out_43;
    }

    static void main() {
        string db_45 = deBruijn(10, 4);
        var le_46 = db_45.Length;
        Console.WriteLine(_fmtTop(("The length of the de Bruijn sequence is " + (le_46).ToString())));
        Console.WriteLine(_fmtTop("\nThe first 130 digits of the de Bruijn sequence are:"));
        Console.WriteLine(_fmtTop(db_45.Substring((int)(0), (int)(130 - 0))));
        Console.WriteLine(_fmtTop("\nThe last 130 digits of the de Bruijn sequence are:"));
        Console.WriteLine(_fmtTop(db_45.Substring((int)((((dynamic)le_46) - ((dynamic)130))), (int)(db_45.Length - (((dynamic)le_46) - ((dynamic)130))))));
        Console.WriteLine(_fmtTop("\nValidating the de Bruijn sequence:"));
        validate(db_45);
        Console.WriteLine(_fmtTop("\nValidating the reversed de Bruijn sequence:"));
        string dbr_47 = reverse(db_45);
        validate(dbr_47);
        db_45 = ((db_45.Substring((int)(0), (int)(4443 - 0)) + ".") + db_45.Substring((int)(4444), (int)(db_45.Length - 4444)));
        Console.WriteLine(_fmtTop("\nValidating the overlaid de Bruijn sequence:"));
        validate(db_45);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
