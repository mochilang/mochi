// Generated by Mochi 0.10.55 on 2025-08-03 10:56 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] strings_9 = new string[]{"", "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln ", "..1111111111111111111111111111111111111111111111111111111111111117777888", "I never give 'em hell, I just tell the truth, and they think it's hell. ", "                                                   ---  Harry S Truman  ", "The better the 4-wheel drive, the further you'll be from help when ya get stuck!", "headmistressship", "aardvark", "😍😀🙌💃😍😍😍🙌"};
    static string[][] chars_10 = new string[][]{new string[]{" "}, new string[]{"-"}, new string[]{"7"}, new string[]{"."}, new string[]{" ", "-", "r"}, new string[]{"e"}, new string[]{"s"}, new string[]{"a"}, new string[]{"😍"}};
    static long i_11 = 0;
    public static string padLeft(long n_0, long width_1) {
        string s_2 = _fmt(n_0);
        while ((Convert.ToDouble(s_2.Length) < Convert.ToDouble(width_1))) {
            s_2 = (" " + s_2);
        };
        return s_2;
    }

    public static string squeeze(string s_3, string ch_4) {
        string out_5 = "";
        bool prev_6 = false;
        long i_7 = 0;
        while ((Convert.ToDouble(i_7) < Convert.ToDouble(s_3.Length))) {
            string c_8 = s_3.Substring((int)(i_7), (int)((i_7 + 1) - i_7));
            if ((c_8 == ch_4)) {
                if ((!prev_6)) {
                    out_5 = (out_5 + c_8);
                    prev_6 = true;
                }
            } else {
                out_5 = (out_5 + c_8);
                prev_6 = false;
            }
            i_7 = (i_7 + 1);
        };
        return out_5;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((Convert.ToDouble(i_11) < Convert.ToDouble(strings_9.Length))) {
                long j_12 = 0;
                string s_13 = strings_9[(int)(i_11)];
                while ((Convert.ToDouble(j_12) < Convert.ToDouble(chars_10[(int)(i_11)].Length))) {
                    string c_14 = chars_10[(int)(i_11)][(int)(j_12)];
                    string ss_15 = Program.squeeze(s_13, c_14);
                    Console.WriteLine(Program._fmtTop((("specified character = '" + c_14) + "'")));
                    Console.WriteLine(Program._fmtTop((((("original : length = " + Program.padLeft(s_13.Length, 2)) + ", string = «««") + s_13) + "»»»")));
                    Console.WriteLine(Program._fmtTop((((("squeezed : length = " + Program.padLeft(ss_15.Length, 2)) + ", string = «««") + ss_15) + "»»»")));
                    Console.WriteLine(Program._fmtTop(""));
                    j_12 = (j_12 + 1);
                }
                i_11 = (i_11 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
