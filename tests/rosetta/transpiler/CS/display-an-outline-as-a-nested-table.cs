// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] split(string s_0, string sep_1) {
        string[] out_2 = new string[]{};
        string cur_3 = "";
        long i_4 = 0;
        while ((i_4 < s_0.Length)) {
            if ((((((dynamic)i_4) + ((dynamic)sep_1.Length)) <= s_0.Length) && (s_0.Substring((int)(i_4), (int)((((dynamic)i_4) + ((dynamic)sep_1.Length)) - i_4)) == sep_1))) {
                out_2 = (Enumerable.ToArray(Enumerable.Append(out_2, cur_3)));
                cur_3 = "";
                i_4 = (((dynamic)i_4) + ((dynamic)sep_1.Length));
            } else {
                cur_3 = (cur_3 + s_0.Substring((int)(i_4), (int)((i_4 + 1) - i_4)));
                i_4 = (i_4 + 1);
            }
        };
        out_2 = (Enumerable.ToArray(Enumerable.Append(out_2, cur_3)));
        return out_2;
    }

    static string join(string[] xs_5, string sep_6) {
        string res_7 = "";
        long i_8 = 0;
        while ((i_8 < xs_5.Length)) {
            if ((i_8 > 0)) {
                res_7 = (res_7 + sep_6);
            }
            res_7 = (res_7 + xs_5[(int)(i_8)]);
            i_8 = (i_8 + 1);
        };
        return res_7;
    }

    static string trimLeftSpaces(string s_9) {
        long i_10 = 0;
        while (((i_10 < s_9.Length) && (s_9.Substring((int)(i_10), (int)((i_10 + 1) - i_10)) == " "))) {
            i_10 = (i_10 + 1);
        };
        return s_9.Substring((int)(i_10), (int)(s_9.Length - i_10));
    }

    static Dictionary<string, object>[] makeIndent(string outline_11, long tab_12) {
        string[] lines_13 = split(outline_11, "\n");
        Dictionary<string, object>[] nodes_14 = new Dictionary<string, object>[]{};
        foreach (var line_15 in lines_13) {
            string line2_16 = trimLeftSpaces(line_15);
            long level_17 = (((dynamic)(((dynamic)line_15.Length) - ((dynamic)line2_16.Length))) / ((dynamic)tab_12));
            nodes_14 = (Enumerable.ToArray(Enumerable.Append(nodes_14, new Dictionary<string, object>{{"level", level_17}, {"name", line2_16}})));
        };
        return nodes_14;
    }

    static void toNest(Dictionary<string, object>[] nodes_18, long start_19, long level_20, Dictionary<string, object> n_21) {
        if ((level_20 == 0)) {
            n_21["name"] = ((dynamic)nodes_18[(int)(0)])["name"];
        };
        long i_22 = (start_19 + 1);
        while ((i_22 < nodes_18.Length)) {
            Dictionary<string, object> node_23 = nodes_18[(int)(i_22)];
            var lev_24 = Convert.ToInt64(((dynamic)node_23)["level"]);
            if ((lev_24 == (level_20 + 1))) {
                Dictionary<string, object> child_25 = new Dictionary<string, object>{{"name", ((dynamic)node_23)["name"]}, {"children", new object[]{}}};
                toNest(nodes_18, i_22, (level_20 + 1), child_25);
                object[] cs_26 = (((dynamic)n_21)["children"] as object[]) ?? new object[]{};
                cs_26 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(cs_26.Cast<object>()), child_25)));
                n_21["children"] = cs_26;
            } else {
                if ((lev_24 <= level_20)) {
                    return;
                }
            }
            i_22 = (i_22 + 1);
        };
    }

    static long countLeaves(Dictionary<string, object> n_27) {
        object[] kids_28 = (((dynamic)n_27)["children"] as object[]) ?? new object[]{};
        if ((kids_28.Length == 0)) {
            return 1;
        };
        long total_29 = 0;
        foreach (var k_30 in kids_28) {
            total_29 = (total_29 + countLeaves((k_30 as Dictionary<string, object>) ?? new Dictionary<string, object>{}));
        };
        return total_29;
    }

    static Dictionary<string, object>[][] nodesByDepth(Dictionary<string, object> root_31, long depth_32) {
        Dictionary<string, object>[][] levels_33 = new Dictionary<string, object>[][]{};
        Dictionary<string, object>[] current_34 = new Dictionary<string, object>[]{root_31};
        long d_35 = 0;
        while ((d_35 < depth_32)) {
            levels_33 = (Enumerable.ToArray(Enumerable.Append(levels_33, current_34)));
            Dictionary<string, object>[] next_36 = new Dictionary<string, object>[]{};
            foreach (var n_37 in current_34) {
                object[] kids_38 = (n_37.Substring((int)("children"), 1) as object[]) ?? new object[]{};
                foreach (var k_39 in kids_38) {
                    next_36 = (Enumerable.ToArray(Enumerable.Append(next_36, (k_39 as Dictionary<string, object>) ?? new Dictionary<string, object>{})));
                }
            }
            current_34 = next_36;
            d_35 = (d_35 + 1);
        };
        return levels_33;
    }

    static string toMarkup(Dictionary<string, object> n_40, string[] cols_41, long depth_42) {
        string[] lines_43 = new string[]{};
        lines_43 = (Enumerable.ToArray(Enumerable.Append(lines_43, "{| class=\"wikitable\" style=\"text-align: center;\"")));
        string l1_44 = "|-";
        lines_43 = (Enumerable.ToArray(Enumerable.Append(lines_43, l1_44)));
        long span_45 = countLeaves(n_40);
        lines_43 = (Enumerable.ToArray(Enumerable.Append(lines_43, (((dynamic)(((("| style=\"background: " + cols_41[(int)(0)]) + " \" colSpan=") + (span_45).ToString()) + " | ")) + ((dynamic)((dynamic)n_40)["name"])))));
        lines_43 = (Enumerable.ToArray(Enumerable.Append(lines_43, l1_44)));
        Dictionary<string, object>[][] lvls_46 = nodesByDepth(n_40, depth_42);
        long lvl_47 = 1;
        while ((lvl_47 < depth_42)) {
            Dictionary<string, object>[] nodes_48 = lvls_46[(int)(lvl_47)];
            if ((nodes_48.Length == 0)) {
                lines_43 = (Enumerable.ToArray(Enumerable.Append(lines_43, "|  |")));
            } else {
                long idx_49 = 0;
                while ((idx_49 < nodes_48.Length)) {
                    Dictionary<string, object> node_50 = nodes_48[(int)(idx_49)];
                    span_45 = countLeaves(node_50);
                    long col_51 = lvl_47;
                    if ((lvl_47 == 1)) {
                        col_51 = (idx_49 + 1);
                    }
                    if ((col_51 >= cols_41.Length)) {
                        col_51 = (((dynamic)cols_41.Length) - ((dynamic)1));
                    }
                    string cell_52 = (((dynamic)(((("| style=\"background: " + cols_41[(int)(col_51)]) + " \" colspan=") + (span_45).ToString()) + " | ")) + ((dynamic)((dynamic)node_50)["name"]));
                    lines_43 = (Enumerable.ToArray(Enumerable.Append(lines_43, cell_52)));
                    idx_49 = (idx_49 + 1);
                }
            }
            if ((lvl_47 < (depth_42 - 1))) {
                lines_43 = (Enumerable.ToArray(Enumerable.Append(lines_43, l1_44)));
            }
            lvl_47 = (lvl_47 + 1);
        };
        lines_43 = (Enumerable.ToArray(Enumerable.Append(lines_43, "|}")));
        return join(lines_43, "\n");
    }

    static void main() {
        string outline_53 = ((((((((((("Display an outline as a nested table.\n" + "    Parse the outline to a tree,\n") + "        measuring the indent of each line,\n") + "        translating the indentation to a nested structure,\n") + "        and padding the tree to even depth.\n") + "    count the leaves descending from each node,\n") + "        defining the width of a leaf as 1,\n") + "        and the width of a parent node as a sum.\n") + "            (The sum of the widths of its children)\n") + "    and write out a table with 'colspan' values\n") + "        either as a wiki table,\n") + "        or as HTML.");
        string yellow_54 = "#ffffe6;";
        string orange_55 = "#ffebd2;";
        string green_56 = "#f0fff0;";
        string blue_57 = "#e6ffff;";
        string pink_58 = "#ffeeff;";
        string[] cols_59 = new string[]{yellow_54, orange_55, green_56, blue_57, pink_58};
        Dictionary<string, object>[] nodes_60 = makeIndent(outline_53, 4);
        Dictionary<string, object> n_61 = new Dictionary<string, object>{{"name", ""}, {"children", new object[]{}}};
        toNest(nodes_60, 0, 0, n_61);
        Console.WriteLine(_fmtTop(toMarkup(n_61, cols_59, 4)));
        Console.WriteLine(_fmtTop("\n"));
        string outline2_62 = ((((((((((((("Display an outline as a nested table.\n" + "    Parse the outline to a tree,\n") + "        measuring the indent of each line,\n") + "        translating the indentation to a nested structure,\n") + "        and padding the tree to even depth.\n") + "    count the leaves descending from each node,\n") + "        defining the width of a leaf as 1,\n") + "        and the width of a parent node as a sum.\n") + "            (The sum of the widths of its children)\n") + "            Propagating the sums upward as necessary.\n") + "    and write out a table with 'colspan' values\n") + "        either as a wiki table,\n") + "        or as HTML.\n") + "    Optionally add color to the nodes.");
        string[] cols2_63 = new string[]{blue_57, yellow_54, orange_55, green_56, pink_58};
        Dictionary<string, object>[] nodes2_64 = makeIndent(outline2_62, 4);
        Dictionary<string, object> n2_65 = new Dictionary<string, object>{{"name", ""}, {"children", new object[]{}}};
        toNest(nodes2_64, 0, 0, n2_65);
        Console.WriteLine(_fmtTop(toMarkup(n2_65, cols2_63, 4)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
