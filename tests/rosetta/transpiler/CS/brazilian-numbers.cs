// Generated by Mochi 0.10.41 on 2025-07-27 11:31 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool sameDigits(long n_0, long b_1) {
        long f_2 = (n_0 % b_1);
        n_0 = Convert.ToInt64((n_0 / b_1));
        while ((n_0 > 0)) {
            if (((n_0 % b_1) != f_2)) {
                return false;
            }
            n_0 = Convert.ToInt64((n_0 / b_1));
        };
        return true;
    }

    static bool isBrazilian(long n_3) {
        if ((n_3 < 7)) {
            return false;
        };
        if ((((n_3 % 2) == 0) && (n_3 >= 8))) {
            return true;
        };
        long b_4 = 2;
        while ((b_4 < (n_3 - 1))) {
            if (sameDigits(n_3, b_4)) {
                return true;
            }
            b_4 = (b_4 + 1);
        };
        return false;
    }

    static bool isPrime(long n_5) {
        if ((n_5 < 2)) {
            return false;
        };
        if (((n_5 % 2) == 0)) {
            return (n_5 == 2);
        };
        if (((n_5 % 3) == 0)) {
            return (n_5 == 3);
        };
        long d_6 = 5;
        while (((d_6 * d_6) <= n_5)) {
            if (((n_5 % d_6) == 0)) {
                return false;
            }
            d_6 = (d_6 + 2);
            if (((n_5 % d_6) == 0)) {
                return false;
            }
            d_6 = (d_6 + 4);
        };
        return true;
    }

    static void main() {
        string[] kinds_7 = new string[]{" ", " odd ", " prime "};
        foreach (var kind_8 in kinds_7) {
            Console.WriteLine(_fmtTop((("First 20" + kind_8) + "Brazilian numbers:")));
            long c_9 = 0;
            long n_10 = 7;
            while (true) {
                if (isBrazilian(n_10)) {
                    Console.WriteLine(_fmtTop(((n_10).ToString() + " ")));
                    c_9 = (c_9 + 1);
                    if ((c_9 == 20)) {
                        Console.WriteLine(_fmtTop("\n"));
                        break;
                    }
                }
                if ((kind_8 == " ")) {
                    n_10 = (n_10 + 1);
                } else {
                    if ((kind_8 == " odd ")) {
                        n_10 = (n_10 + 2);
                    } else {
                        while (true) {
                            n_10 = (n_10 + 2);
                            if (isPrime(n_10)) {
                                break;
                            }
                        }
                    }
                }
            }
        };
        long n_11 = 7;
        long c_12 = 0;
        while ((c_12 < 100000)) {
            if (isBrazilian(n_11)) {
                c_12 = (c_12 + 1);
            }
            n_11 = (n_11 + 1);
        };
        Console.WriteLine(_fmtTop(("The 100,000th Brazilian number: " + ((n_11 - 1)).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
