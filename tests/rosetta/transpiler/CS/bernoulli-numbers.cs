// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static object bernoulli(long n) {
        object[] a_0 = new object[]{};
        long m_1 = 0;
        while ((m_1 <= n)) {
            a_0 = (Enumerable.ToArray(Enumerable.Append(a_0, (object)(1 / (m_1 + 1)))));
            long j_2 = m_1;
            while ((j_2 >= 1)) {
                a_0[(j_2 - 1)] = (((dynamic)j_2) * ((dynamic)(((dynamic)((dynamic)a_0)[(j_2 - 1)]) - ((dynamic)((dynamic)a_0)[j_2]))));
                j_2 = (j_2 - 1);
            }
            m_1 = (m_1 + 1);
        };
        return ((dynamic)a_0)[0];
    }

    static string padStart(string s, long width, string pad) {
        string out_3 = s;
        while ((out_3.Length < width)) {
            out_3 = (pad + out_3);
        };
        return out_3;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            for (var i_4 = 0; i_4 < 61; i_4++) {
                var b_5 = bernoulli(i_4);
                if ((num(b_5) != 0)) {
                    string numStr_6 = (num(b_5)).ToString();
                    string denStr_7 = (denom(b_5)).ToString();
                    Console.WriteLine(_fmtTop(((((("B(" + padStart((i_4).ToString(), 2, " ")) + ") =") + padStart(numStr_6, 45, " ")) + "/") + denStr_7)));
                }
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
