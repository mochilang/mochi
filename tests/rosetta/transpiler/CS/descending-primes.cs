// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] digits_2 = new long[]{9, 8, 7, 6, 5, 4, 3, 2, 1};
    static long[] primes_8 = gen(0, 0, false);
    static long i_12 = 0;
    static string line_13 = "";
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        if (((n_0 % 2) == 0)) {
            return (n_0 == 2);
        };
        long d_1 = 3;
        while (((d_1 * d_1) <= n_0)) {
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 2);
        };
        return true;
    }

    static long[] gen(long idx_3, long cur_4, bool used_5) {
        if ((idx_3 == digits_2.Length)) {
            if ((used_5 && isPrime(cur_4))) {
                return new long[]{cur_4};
            }
            return new long[]{};
        };
        long[] with_6 = gen((idx_3 + 1), ((cur_4 * 10) + digits_2[(int)(idx_3)]), true);
        long[] without_7 = gen((idx_3 + 1), cur_4, used_5);
        return (with_6.Concat(without_7).ToArray());
    }

    static string pad(long n_9, long width_10) {
        string s_11 = (n_9).ToString();
        while ((s_11.Length < width_10)) {
            s_11 = (" " + s_11);
        };
        return s_11;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((("There are " + (primes_8.Length).ToString()) + " descending primes, namely:")));
            while ((i_12 < primes_8.Length)) {
                line_13 = ((line_13 + pad(primes_8[(int)(i_12)], 8)) + " ");
                if ((((i_12 + 1) % 10) == 0)) {
                    Console.WriteLine(_fmtTop(line_13.Substring((int)(0), (int)((((dynamic)line_13.Length) - ((dynamic)1)) - 0))));
                    line_13 = "";
                }
                i_12 = (i_12 + 1);
            }
            if ((line_13.Length > 0)) {
                Console.WriteLine(_fmtTop(line_13.Substring((int)(0), (int)((((dynamic)line_13.Length) - ((dynamic)1)) - 0))));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
