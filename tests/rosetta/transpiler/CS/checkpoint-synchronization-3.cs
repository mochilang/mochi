// Generated by Mochi 0.10.57 on 2025-08-04 21:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] partList_4 = new string[]{"A", "B", "C", "D"};
    static long nAssemblies_5 = 3;
    public static string lower(string ch_0) {
        string up_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string low_2 = "abcdefghijklmnopqrstuvwxyz";
        long i_3 = 0;
        while ((i_3 < up_1.Length)) {
            if ((ch_0 == up_1.Substring((int)(i_3), (int)((i_3 + 1) - i_3)))) {
                return low_2.Substring((int)(i_3), (int)((i_3 + 1) - i_3));
            }
            i_3 = (i_3 + 1);
        };
        return ch_0;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (string p_6 in partList_4) {
                Console.WriteLine(Program._fmtTop((p_6 + " worker running")));
            }
            for (var cycle_7 = 1; cycle_7 < (nAssemblies_5 + 1); cycle_7++) {
                Console.WriteLine(Program._fmtTop(("begin assembly cycle " + _fmt(cycle_7))));
                string a_8 = "";
                foreach (string p_9 in partList_4) {
                    Console.WriteLine(Program._fmtTop((p_9 + " worker begins part")));
                    Console.WriteLine(Program._fmtTop(((p_9 + " worker completed ") + Program.lower(p_9))));
                    a_8 = (a_8 + Program.lower(p_9));
                }
                Console.WriteLine(Program._fmtTop((((a_8 + " assembled.  cycle ") + _fmt(cycle_7)) + " complete")));
            }
            foreach (string p_10 in partList_4) {
                Console.WriteLine(Program._fmtTop((p_10 + " worker stopped")));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
