// Generated by Mochi 0.10.57 on 2025-08-04 21:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Point {
    public double x;
    public double y;
    public override string ToString() => $"Point {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string Two_5 = "Two circles.";
    static string R0_6 = "R==0.0 does not describe circles.";
    static string Co_7 = "Coincident points describe an infinite number of circles.";
    static string CoR0_8 = "Coincident points with r==0.0 describe a degenerate circle.";
    static string Diam_9 = "Points form a diameter and describe only a single circle.";
    static string Far_10 = "Points too far apart to form circles.";
    static object[] td_21 = new object[]{new object[]{new Point{x = 0.1234, y = 0.9876}, new Point{x = 0.8765, y = 0.2345}, 2.0}, new object[]{new Point{x = 0.0, y = 2.0}, new Point{x = 0.0, y = 0.0}, 1.0}, new object[]{new Point{x = 0.1234, y = 0.9876}, new Point{x = 0.1234, y = 0.9876}, 2.0}, new object[]{new Point{x = 0.1234, y = 0.9876}, new Point{x = 0.8765, y = 0.2345}, 0.5}, new object[]{new Point{x = 0.1234, y = 0.9876}, new Point{x = 0.1234, y = 0.9876}, 0.0}};
    public static double sqrtApprox(double x_0) {
        double g_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 40)) {
            g_1 = ((g_1 + (x_0 / g_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return g_1;
    }

    public static double hypot(double x_3, double y_4) {
        return Program.sqrtApprox(((x_3 * x_3) + (y_4 * y_4)));
    }

    public static object[] circles(Point p1_11, Point p2_12, double r_13) {
        if (((p1_11.x == p2_12.x) && (p1_11.y == p2_12.y))) {
            if ((r_13 == 0.0)) {
                return new object[]{p1_11, p1_11, "Coincident points with r==0.0 describe a degenerate circle."};
            }
            return new object[]{p1_11, p2_12, "Coincident points describe an infinite number of circles."};
        };
        if ((r_13 == 0.0)) {
            return new object[]{p1_11, p2_12, "R==0.0 does not describe circles."};
        };
        double dx_14 = (p2_12.x - p1_11.x);
        double dy_15 = (p2_12.y - p1_11.y);
        double q_16 = Program.hypot(dx_14, dy_15);
        if ((q_16 > (2.0 * r_13))) {
            return new object[]{p1_11, p2_12, "Points too far apart to form circles."};
        };
        Point m_17 = new Point{x = ((p1_11.x + p2_12.x) / 2.0), y = ((p1_11.y + p2_12.y) / 2.0)};
        if ((q_16 == (2.0 * r_13))) {
            return new object[]{m_17, m_17, "Points form a diameter and describe only a single circle."};
        };
        double d_18 = Program.sqrtApprox(((r_13 * r_13) - ((q_16 * q_16) / 4.0)));
        double ox_19 = ((d_18 * dx_14) / q_16);
        double oy_20 = ((d_18 * dy_15) / q_16);
        return new object[]{new Point{x = (m_17.x - oy_20), y = (m_17.y + ox_19)}, new Point{x = (m_17.x + oy_20), y = (m_17.y - ox_19)}, "Two circles."};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (object tc_22 in td_21) {
                var p1_23 = ((dynamic)tc_22)[0];
                var p2_24 = ((dynamic)tc_22)[1];
                var r_25 = ((dynamic)tc_22)[2];
                Console.WriteLine(Program._fmtTop((((("p1:  {" + _fmt(((dynamic)(p1_23)).x)) + " ") + _fmt(((dynamic)(p1_23)).y)) + "}")));
                Console.WriteLine(Program._fmtTop((((("p2:  {" + _fmt(((dynamic)(p2_24)).x)) + " ") + _fmt(((dynamic)(p2_24)).y)) + "}")));
                Console.WriteLine(Program._fmtTop(("r:  " + _fmt(r_25))));
                object[] res_26 = Program.circles(p1_23, p2_24, r_25);
                object c1_27 = ((dynamic)res_26)[0];
                object c2_28 = ((dynamic)res_26)[1];
                object caseStr_29 = ((dynamic)res_26)[2];
                Console.WriteLine(Program._fmtTop((((dynamic)("   ")) + ((dynamic)(caseStr_29)))));
                if (((caseStr_29 == "Points form a diameter and describe only a single circle.") || (caseStr_29 == "Coincident points with r==0.0 describe a degenerate circle."))) {
                    Console.WriteLine(Program._fmtTop((((("   Center:  {" + _fmt(((dynamic)(c1_27)).x)) + " ") + _fmt(((dynamic)(c1_27)).y)) + "}")));
                } else {
                    if ((caseStr_29 == "Two circles.")) {
                        Console.WriteLine(Program._fmtTop((((("   Center 1:  {" + _fmt(((dynamic)(c1_27)).x)) + " ") + _fmt(((dynamic)(c1_27)).y)) + "}")));
                        Console.WriteLine(Program._fmtTop((((("   Center 2:  {" + _fmt(((dynamic)(c2_28)).x)) + " ") + _fmt(((dynamic)(c2_28)).y)) + "}")));
                    }
                }
                Console.WriteLine(Program._fmtTop(""));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
