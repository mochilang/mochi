// Generated by Mochi 0.10.50 on 2025-07-31 02:08 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Fps {
    public double[] coeffs;
    public Func<long, double> compute;
    public override string ToString() => $"Fps {{coeffs = {coeffs}, compute = {compute}}}";
}
class Pair {
    public Fps sin;
    public Fps cos;
    public override string ToString() => $"Pair {{sin = {sin}, cos = {cos}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Fps newFps(Func<long, double> fn_0) {
        return new Fps{coeffs = new double[]{}, compute = fn_0};
    }

    static double extract(Fps f_1, long n_2) {
        while ((f_1.coeffs.Length <= n_2)) {
            var idx_3 = f_1.coeffs.Length;
            var v_4 = f_1.compute(idx_3);
            f_1.coeffs = (Enumerable.ToArray(Enumerable.Append(f_1.coeffs, v_4)));
        };
        return f_1.coeffs[(int)(n_2)];
    }

    static Fps one() {
        return newFps((long i) => {if ((i == 0)) {
            return 1.0;
        }; return 0.0;});
    }

    static Fps add(Fps a_5, Fps b_6) {
        return newFps((long n) => {return (extract(a_5, n) + extract(b_6, n));});
    }

    static Fps sub(Fps a_7, Fps b_8) {
        return newFps((long n) => {return (extract(a_7, n) - extract(b_8, n));});
    }

    static Fps mul(Fps a_9, Fps b_10) {
        return newFps((long n) => {double s_11 = 0.0; long k_12 = 0; while ((k_12 <= n)) {
            s_11 = (s_11 + (extract(a_9, k_12) * extract(b_10, (((dynamic)(n)) - ((dynamic)(k_12))))));
            k_12 = (k_12 + 1);
        }; return s_11;});
    }

    static Fps div(Fps a_13, Fps b_14) {
        Fps q_15 = newFps((long n) => {return 0.0;});
        q_15.compute = (long n) => {double b0_16 = extract(b_14, 0); if ((b0_16 == 0.0)) {
            return (0.0 / 0.0);
        }; double s_17 = extract(a_13, n); long k_18 = 1; while ((k_18 <= n)) {
            s_17 = (s_17 - (extract(b_14, k_18) * extract(q_15, (((dynamic)(n)) - ((dynamic)(k_18))))));
            k_18 = (k_18 + 1);
        }; return (s_17 / b0_16);};
        return q_15;
    }

    static Fps differentiate(Fps a_19) {
        return newFps((long n) => {return (((dynamic)(Convert.ToDouble((((dynamic)(n)) + ((dynamic)(1)))))) * ((dynamic)(extract(a_19, (((dynamic)(n)) + ((dynamic)(1)))))));});
    }

    static Fps integrate(Fps a_20) {
        return newFps((long n) => {if ((n == 0)) {
            return 0.0;
        }; return (((dynamic)(extract(a_20, (((dynamic)(n)) - ((dynamic)(1)))))) / ((dynamic)(Convert.ToDouble(n))));});
    }

    static Pair sinCos() {
        Fps sin_21 = newFps((long n) => {return 0.0;});
        Fps cos_22 = sub(one(), integrate(sin_21));
        sin_21.compute = (long n) => {if ((n == 0)) {
            return 0.0;
        }; return (((dynamic)(extract(cos_22, (((dynamic)(n)) - ((dynamic)(1)))))) / ((dynamic)(Convert.ToDouble(n))));};
        return new Pair{sin = sin_21, cos = cos_22};
    }

    static double floorf(double x_23) {
        var y_24 = Convert.ToInt64(x_23);
        return Convert.ToDouble(y_24);
    }

    static string fmtF5(double x_25) {
        double y_26 = (floorf(((x_25 * 100000.0) + 0.5)) / 100000.0);
        string s_27 = (y_26).ToString();
        var dot_28 = s_27.IndexOf(".");
        if ((dot_28 == (0 - 1))) {
            s_27 = (s_27 + ".00000");
        } else {
            long decs_29 = (((dynamic)((((dynamic)(s_27.Length)) - ((dynamic)(dot_28))))) - ((dynamic)(1)));
            if ((decs_29 > 5)) {
                s_27 = s_27.Substring((int)(0), (int)((((dynamic)(dot_28)) + ((dynamic)(6))) - 0));
            } else {
                while ((decs_29 < 5)) {
                    s_27 = (s_27 + "0");
                    decs_29 = (decs_29 + 1);
                }
            }
        };
        return s_27;
    }

    static string padFloat5(double x_30, long width_31) {
        string s_32 = fmtF5(x_30);
        while ((s_32.Length < width_31)) {
            s_32 = (" " + s_32);
        };
        return s_32;
    }

    static string partialSeries(Fps f_33) {
        string out_34 = "";
        long i_35 = 0;
        while ((i_35 < 6)) {
            out_34 = (((out_34 + " ") + padFloat5(extract(f_33, i_35), 8)) + " ");
            i_35 = (i_35 + 1);
        };
        return out_34;
    }

    static void main() {
        Pair p_36 = sinCos();
        Console.WriteLine(_fmtTop(("sin:" + partialSeries(p_36.sin))));
        Console.WriteLine(_fmtTop(("cos:" + partialSeries(p_36.cos))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
