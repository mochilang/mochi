// Generated by Mochi 0.10.57 on 2025-08-04 21:00 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static string listStr(long[] xs_0) {
        string s_1 = "[";
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            s_1 = (s_1 + _fmt(xs_0[(int)(i_2)]));
            if ((i_2 < (xs_0.Length - 1))) {
                s_1 = (s_1 + " ");
            }
            i_2 = (i_2 + 1);
        };
        s_1 = (s_1 + "]");
        return s_1;
    }

    public static string llStr(long[][] lst_3) {
        string s_4 = "[";
        long i_5 = 0;
        while ((i_5 < lst_3.Length)) {
            s_4 = (s_4 + Program.listStr(lst_3[(int)(i_5)]));
            if ((i_5 < (lst_3.Length - 1))) {
                s_4 = (s_4 + " ");
            }
            i_5 = (i_5 + 1);
        };
        s_4 = (s_4 + "]");
        return s_4;
    }

    public static long[][] cartN(object lists_6) {
        if ((lists_6 == null)) {
            return new long[][]{};
        };
        long[][] a_7 = (lists_6 as long[][]) ?? new long[][]{};
        if ((a_7.Length == 0)) {
            return new long[][]{new long[]{}};
        };
        long c_8 = 1;
        foreach (long[] xs_9 in a_7) {
            c_8 = (c_8 * xs_9.Length);
        };
        if ((c_8 == 0)) {
            return new long[][]{};
        };
        long[][] res_10 = new long[][]{};
        long[] idx_11 = new long[]{};
        foreach (long[] __12 in a_7) {
            idx_11 = (Enumerable.ToArray(Enumerable.Append(idx_11, 0)));
        };
        int n_13 = a_7.Length;
        long count_14 = 0;
        while ((count_14 < c_8)) {
            long[] row_15 = new long[]{};
            long j_16 = 0;
            while ((j_16 < n_13)) {
                row_15 = (Enumerable.ToArray(Enumerable.Append(row_15, a_7[(int)(j_16)][(int)(idx_11[(int)(j_16)])])));
                j_16 = (j_16 + 1);
            }
            res_10 = (Enumerable.ToArray(Enumerable.Append(res_10, row_15)));
            long k_17 = (n_13 - 1);
            while ((k_17 >= 0)) {
                idx_11[k_17] = (idx_11[(int)(k_17)] + 1);
                if ((idx_11[(int)(k_17)] < a_7[(int)(k_17)].Length)) {
                    break;
                }
                idx_11[k_17] = 0;
                k_17 = (k_17 - 1);
            }
            count_14 = (count_14 + 1);
        };
        return res_10;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.llStr(Program.cartN(new long[][]{new long[]{1, 2}, new long[]{3, 4}}))));
        Console.WriteLine(Program._fmtTop(Program.llStr(Program.cartN(new long[][]{new long[]{3, 4}, new long[]{1, 2}}))));
        Console.WriteLine(Program._fmtTop(Program.llStr(Program.cartN(new object[]{new long[]{1, 2}, new object{}}))));
        Console.WriteLine(Program._fmtTop(Program.llStr(Program.cartN(new long[][]{new long[]{}, new long[]{1, 2}}))));
        Console.WriteLine(Program._fmtTop(""));
        Console.WriteLine(Program._fmtTop("["));
        foreach (long[] p_18 in Program.cartN(new long[][]{new long[]{1776, 1789}, new long[]{7, 12}, new long[]{4, 14, 23}, new long[]{0, 1}})) {
            Console.WriteLine(Program._fmtTop((" " + Program.listStr(p_18))));
        };
        Console.WriteLine(Program._fmtTop("]"));
        Console.WriteLine(Program._fmtTop(Program.llStr(Program.cartN(new long[][]{new long[]{1, 2, 3}, new long[]{30}, new long[]{500, 100}}))));
        Console.WriteLine(Program._fmtTop(Program.llStr(Program.cartN(new object[]{new long[]{1, 2, 3}, new object{}, new long[]{500, 100}}))));
        Console.WriteLine(Program._fmtTop(""));
        Console.WriteLine(Program._fmtTop(Program.llStr(Program.cartN((object)null))));
        Console.WriteLine(Program._fmtTop(Program.llStr(Program.cartN(new object[]{}))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
