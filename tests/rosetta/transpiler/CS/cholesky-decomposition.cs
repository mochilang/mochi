// Generated by Mochi 0.10.57 on 2025-08-04 21:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static double sqrtApprox(double x_0) {
        double guess_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static double[][] cholesky(double[][] a_3) {
        int n_4 = a_3.Length;
        double[][] l_5 = new double[][]{};
        long i_6 = 0;
        while ((i_6 < n_4)) {
            double[] row_7 = new double[]{};
            long j_8 = 0;
            while ((j_8 < n_4)) {
                row_7 = (Enumerable.ToArray(Enumerable.Append(row_7, 0.0)));
                j_8 = (j_8 + 1);
            }
            l_5 = (Enumerable.ToArray(Enumerable.Append(l_5, row_7)));
            i_6 = (i_6 + 1);
        };
        i_6 = 0;
        while ((i_6 < n_4)) {
            long j_9 = 0;
            while ((j_9 <= i_6)) {
                double sum_10 = a_3[(int)(i_6)][(int)(j_9)];
                long k_11 = 0;
                while ((k_11 < j_9)) {
                    sum_10 = (sum_10 - (l_5[(int)(i_6)][(int)(k_11)] * l_5[(int)(j_9)][(int)(k_11)]));
                    k_11 = (k_11 + 1);
                }
                if ((i_6 == j_9)) {
                    l_5[(int)(i_6)][j_9] = Program.sqrtApprox(sum_10);
                } else {
                    l_5[(int)(i_6)][j_9] = (sum_10 / l_5[(int)(j_9)][(int)(j_9)]);
                }
                j_9 = (j_9 + 1);
            }
            i_6 = (i_6 + 1);
        };
        return l_5;
    }

    public static void printMat(double[][] m_12) {
        long i_13 = 0;
        while ((i_13 < m_12.Length)) {
            string line_14 = "";
            long j_15 = 0;
            while ((j_15 < m_12[(int)(i_13)].Length)) {
                line_14 = (line_14 + _fmt(m_12[(int)(i_13)][(int)(j_15)]));
                if ((j_15 < (m_12[(int)(i_13)].Length - 1))) {
                    line_14 = (line_14 + " ");
                }
                j_15 = (j_15 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_14));
            i_13 = (i_13 + 1);
        };
    }

    public static void demo(double[][] a_16) {
        Console.WriteLine(Program._fmtTop("A:"));
        Program.printMat(a_16);
        double[][] l_17 = Program.cholesky(a_16);
        Console.WriteLine(Program._fmtTop("L:"));
        Program.printMat(l_17);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.demo(new double[][]{new double[]{25.0, 15.0, -5.0}, new double[]{15.0, 18.0, 0.0}, new double[]{-5.0, 0.0, 11.0}});
            Program.demo(new double[][]{new double[]{18.0, 22.0, 54.0, 42.0}, new double[]{22.0, 70.0, 86.0, 62.0}, new double[]{54.0, 86.0, 174.0, 134.0}, new double[]{42.0, 62.0, 134.0, 106.0}});
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
