// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double sel(double[] list, long k) {
        long i_0 = 0;
        while ((i_0 <= k)) {
            long minIndex_1 = i_0;
            long j_2 = (i_0 + 1);
            while ((j_2 < list.Length)) {
                if ((list[(int)(j_2)] < list[(int)(minIndex_1)])) {
                    minIndex_1 = j_2;
                }
                j_2 = (j_2 + 1);
            }
            double tmp_3 = list[(int)(i_0)];
            list[i_0] = list[(int)(minIndex_1)];
            list[minIndex_1] = tmp_3;
            i_0 = (i_0 + 1);
        };
        return list[(int)(k)];
    }

    static double median(double[] a) {
        double[] arr_4 = a;
        var half_5 = Convert.ToInt64((((dynamic)arr_4.Length) / ((dynamic)2)));
        double med_6 = sel(arr_4, half_5);
        if (((((dynamic)arr_4.Length) % ((dynamic)2)) == 0)) {
            return ((med_6 + arr_4[(int)((((dynamic)half_5) - ((dynamic)1)))]) / 2);
        };
        return med_6;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((median(new double[]{3, 1, 4, 1})).ToString()));
            Console.WriteLine(_fmtTop((median(new double[]{3, 1, 4, 1, 5})).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
