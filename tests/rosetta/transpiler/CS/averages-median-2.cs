// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double sel(double[] list_0, long k_1) {
        long i_2 = 0;
        while ((i_2 <= k_1)) {
            long minIndex_3 = i_2;
            long j_4 = (i_2 + 1);
            while ((string.Compare(Convert.ToString(j_4), Convert.ToString(list_0.Length)) < 0)) {
                if ((list_0[(int)(j_4)] < list_0[(int)(minIndex_3)])) {
                    minIndex_3 = j_4;
                }
                j_4 = (j_4 + 1);
            }
            double tmp_5 = list_0[(int)(i_2)];
            list_0[i_2] = list_0[(int)(minIndex_3)];
            list_0[minIndex_3] = tmp_5;
            i_2 = (i_2 + 1);
        };
        return list_0[(int)(k_1)];
    }

    static double median(double[] a_6) {
        double[] arr_7 = a_6;
        var half_8 = Convert.ToInt64((((dynamic)(arr_7.Length)) / ((dynamic)(2))));
        double med_9 = sel(arr_7, half_8);
        if (((((dynamic)(arr_7.Length)) % ((dynamic)(2))) == 0)) {
            return ((med_9 + arr_7[(int)((((dynamic)(half_8)) - ((dynamic)(1))))]) / 2.0);
        };
        return med_9;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((median(new double[]{3.0, 1.0, 4.0, 1.0})).ToString()));
            Console.WriteLine(_fmtTop((median(new double[]{3.0, 1.0, 4.0, 1.0, 5.0})).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
