// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Collections.Generic;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] search_user(Dictionary<string, string[]> directory, string username) {
        return directory[username];
    }

    static void main() {
        Dictionary<string, object> client = new Dictionary<string, object>{{"Base", "dc=example,dc=com"}, {"Host", "ldap.example.com"}, {"Port", 389}, {"GroupFilter", "(memberUid=%s)"}};
        Dictionary<string, string[]> directory = new Dictionary<string, string[]>{{"username", new string[]{"admins", "users"}}, {"john", new string[]{"users"}}};
        string[] groups = search_user(directory, "username");
        if ((groups.Length > 0)) {
            string _out = "Groups: [";
            int i = 0;
            while ((i < groups.Length)) {
                _out = (((_out + "\"") + groups[i]) + "\"");
                if ((i < (groups.Length - 1))) {
                    _out = (_out + ", ");
                }
                i = (i + 1);
            }
            _out = (_out + "]");
            Console.WriteLine(_fmtTop(_out));
        } else {
            Console.WriteLine(_fmtTop("User not found"));
        };
    }

    static void Main() {
        main();
    }
}
