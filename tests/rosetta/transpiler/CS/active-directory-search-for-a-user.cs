// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] search_user(Dictionary<string, string[]> directory_0, string username_1) {
        return (directory_0.ContainsKey(username_1) ? directory_0[username_1] : null);
    }

    static void main() {
        Dictionary<string, object> client_2 = new Dictionary<string, object>{{"Base", "dc=example,dc=com"}, {"Host", "ldap.example.com"}, {"Port", 389}, {"GroupFilter", "(memberUid=%s)"}};
        Dictionary<string, string[]> directory_3 = new Dictionary<string, string[]>{{"username", new string[]{"admins", "users"}}, {"john", new string[]{"users"}}};
        string[] groups_4 = search_user(directory_3, "username");
        if ((groups_4.Length > 0)) {
            string out_5 = "Groups: [";
            long i_6 = 0;
            while ((i_6 < groups_4.Length)) {
                out_5 = (((out_5 + "\"") + groups_4[(int)(i_6)]) + "\"");
                if ((i_6 < (((dynamic)(groups_4.Length)) - ((dynamic)(1))))) {
                    out_5 = (out_5 + ", ");
                }
                i_6 = (i_6 + 1);
            }
            out_5 = (out_5 + "]");
            Console.WriteLine(_fmtTop(out_5));
        } else {
            Console.WriteLine(_fmtTop("User not found"));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
