// Generated by Mochi 0.10.47 on 2025-07-28 04:57 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static object gzipWriter(object w_0) {
        return w_0;
    }

    static object tarWriter(object w_1) {
        return w_1;
    }

    static void tarWriteHeader(object w_2, Dictionary<string, object> hdr_3) {
    }

    static void tarWrite(object w_4, string data_5) {
    }

    static void main() {
        string filename_6 = "TAPE.FILE";
        string data_7 = "";
        string outfile_8 = "";
        bool gzipFlag_9 = false;
        object w_10 = null;
        if ((outfile_8 != "")) {
            w_10 = null;
        };
        if (gzipFlag_9) {
            w_10 = gzipWriter(w_10);
        };
        w_10 = tarWriter(w_10);
        Dictionary<string, object> hdr_11 = new Dictionary<string, object>{{"Name", filename_6}, {"Mode", 432}, {"Size", data_7.Length}, {"ModTime", _now()}, {"Typeflag", 0}, {"Uname", "guest"}, {"Gname", "guest"}};
        tarWriteHeader(w_10, hdr_11);
        tarWrite(w_10, data_7);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
