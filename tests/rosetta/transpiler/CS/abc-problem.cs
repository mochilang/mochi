// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] fields(string s_0) {
        string[] res_1 = new string[]{};
        string cur_2 = "";
        long i_3 = 0;
        while ((i_3 < s_0.Length)) {
            string c_4 = s_0.Substring((int)(i_3), (int)((i_3 + 1) - i_3));
            if ((c_4 == " ")) {
                if ((cur_2.Length > 0)) {
                    res_1 = (Enumerable.ToArray(Enumerable.Append(res_1, cur_2)));
                    cur_2 = "";
                }
            } else {
                cur_2 = (cur_2 + c_4);
            }
            i_3 = (i_3 + 1);
        };
        if ((cur_2.Length > 0)) {
            res_1 = (Enumerable.ToArray(Enumerable.Append(res_1, cur_2)));
        };
        return res_1;
    }

    static bool canSpell(string word_5, string[] blks_6) {
        if ((word_5.Length == 0)) {
            return true;
        };
        string c_7 = word_5.Substring((int)(0), (int)(1 - 0)).ToLower();
        long i_8 = 0;
        while ((i_8 < blks_6.Length)) {
            string b_9 = blks_6[(int)(i_8)];
            if (((c_7 == b_9.Substring((int)(0), (int)(1 - 0)).ToLower()) || (c_7 == b_9.Substring((int)(1), (int)(2 - 1)).ToLower()))) {
                string[] rest_10 = new string[]{};
                long j_11 = 0;
                while ((j_11 < blks_6.Length)) {
                    if ((j_11 != i_8)) {
                        rest_10 = (Enumerable.ToArray(Enumerable.Append(rest_10, blks_6[(int)(j_11)])));
                    }
                    j_11 = (j_11 + 1);
                }
                if (canSpell(word_5.Substring((int)(1), (int)(word_5.Length - 1)), rest_10)) {
                    return true;
                }
            }
            i_8 = (i_8 + 1);
        };
        return false;
    }

    static Func<string, bool> newSpeller(string blocks_12) {
        string[] bl_13 = fields(blocks_12);
        return (string w) => canSpell(w, bl_13);
    }

    static void main() {
        Func<string, bool> sp_14 = newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM");
        foreach (var word_15 in new string[]{"A", "BARK", "BOOK", "TREAT", "COMMON", "SQUAD", "CONFUSE"}) {
            Console.WriteLine(_fmtTop(((word_15 + " ") + (sp_14(word_15)).ToString())));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
