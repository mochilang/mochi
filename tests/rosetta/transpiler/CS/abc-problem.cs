// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] fields(string s) {
        string[] res = new string[]{};
        string cur = "";
        int i = 0;
        while ((i < s.Length)) {
            string c = s.Substring(i, ((i + 1) - i));
            if ((c == " ")) {
                if ((cur.Length > 0)) {
                    res = (res.Append(cur).ToArray());
                    cur = "";
                }
            } else {
                cur = (cur + c);
            }
            i = (i + 1);
        };
        if ((cur.Length > 0)) {
            res = (res.Append(cur).ToArray());
        };
        return res;
    }

    static bool canSpell(string word, string[] blks) {
        if ((word.Length == 0)) {
            return true;
        };
        var c = word.Substring(0, (1 - 0)).ToLower();
        int i = 0;
        while ((i < blks.Length)) {
            string b = blks[i];
            if (((c == b.Substring(0, (1 - 0)).ToLower()) || (c == b.Substring(1, (2 - 1)).ToLower()))) {
                string[] rest = new string[]{};
                int j = 0;
                while ((j < blks.Length)) {
                    if ((j != i)) {
                        rest = (rest.Append(blks[j]).ToArray());
                    }
                    j = (j + 1);
                }
                if (canSpell(word.Substring(1, (word.Length - 1)), rest)) {
                    return true;
                }
            }
            i = (i + 1);
        };
        return false;
    }

    static Func<string, bool> newSpeller(string blocks) {
        string[] bl = fields(blocks);
        return (string w) => canSpell(w, bl);
    }

    static void main() {
        Func<string, bool> sp = newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM");
        foreach (var word_0 in new string[]{"A", "BARK", "BOOK", "TREAT", "COMMON", "SQUAD", "CONFUSE"}) {
            Console.WriteLine(_fmtTop(((word_0 + " ") + sp(word_0).ToString())));
        };
    }

    static void Main() {
        main();
    }
}
