// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] getDivisors(long n_0) {
        long[] divs_1 = new long[]{1, n_0};
        long i_2 = 2;
        while (((i_2 * i_2) <= n_0)) {
            if (((n_0 % i_2) == 0)) {
                var j_3 = Convert.ToInt64((n_0 / i_2));
                divs_1 = (Enumerable.ToArray(Enumerable.Append(divs_1, i_2)));
                if ((i_2 != j_3)) {
                    divs_1 = (Enumerable.ToArray(Enumerable.Append(divs_1, j_3)));
                }
            }
            i_2 = (i_2 + 1);
        };
        return divs_1;
    }

    static long sum(long[] xs_4) {
        long s_5 = 0;
        foreach (var x_6 in xs_4) {
            s_5 = (s_5 + x_6);
        };
        return s_5;
    }

    static bool isPartSum(long[] divs_7, long target_8) {
        bool[] possible_9 = new bool[]{};
        long i_10 = 0;
        while ((i_10 <= target_8)) {
            possible_9 = (Enumerable.ToArray(Enumerable.Append(possible_9, false)));
            i_10 = (i_10 + 1);
        };
        possible_9[0] = true;
        foreach (var v_11 in divs_7) {
            long s_12 = target_8;
            while ((s_12 >= v_11)) {
                if (possible_9[(int)((s_12 - v_11))]) {
                    possible_9[s_12] = true;
                }
                s_12 = (s_12 - 1);
            }
        };
        return possible_9[(int)(target_8)];
    }

    static bool isZumkeller(long n_13) {
        long[] divs_14 = getDivisors(n_13);
        long s_15 = sum(divs_14);
        if (((s_15 % 2) == 1)) {
            return false;
        };
        if (((n_13 % 2) == 1)) {
            long abundance_16 = (s_15 - (2 * n_13));
            return ((abundance_16 > 0) && ((abundance_16 % 2) == 0));
        };
        return isPartSum(divs_14, (s_15 / 2));
    }

    static string pad(long n_17, long width_18) {
        string s_19 = (n_17).ToString();
        while ((s_19.Length < width_18)) {
            s_19 = (" " + s_19);
        };
        return s_19;
    }

    static void main() {
        Console.WriteLine(_fmtTop("The first 220 Zumkeller numbers are:"));
        long count_20 = 0;
        string line_21 = "";
        long i_22 = 2;
        while ((count_20 < 220)) {
            if (isZumkeller(i_22)) {
                line_21 = ((line_21 + pad(i_22, 3)) + " ");
                count_20 = (count_20 + 1);
                if (((count_20 % 20) == 0)) {
                    Console.WriteLine(_fmtTop(line_21.Substring((int)(0), (int)((((dynamic)(line_21.Length)) - ((dynamic)(1))) - 0))));
                    line_21 = "";
                }
            }
            i_22 = (i_22 + 1);
        };
        Console.WriteLine(_fmtTop("\nThe first 40 odd Zumkeller numbers are:"));
        count_20 = 0;
        line_21 = "";
        i_22 = 3;
        while ((count_20 < 40)) {
            if (isZumkeller(i_22)) {
                line_21 = ((line_21 + pad(i_22, 5)) + " ");
                count_20 = (count_20 + 1);
                if (((count_20 % 10) == 0)) {
                    Console.WriteLine(_fmtTop(line_21.Substring((int)(0), (int)((((dynamic)(line_21.Length)) - ((dynamic)(1))) - 0))));
                    line_21 = "";
                }
            }
            i_22 = (i_22 + 2);
        };
        Console.WriteLine(_fmtTop("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:"));
        count_20 = 0;
        line_21 = "";
        i_22 = 3;
        while ((count_20 < 40)) {
            if ((((i_22 % 10) != 5) && isZumkeller(i_22))) {
                line_21 = ((line_21 + pad(i_22, 7)) + " ");
                count_20 = (count_20 + 1);
                if (((count_20 % 8) == 0)) {
                    Console.WriteLine(_fmtTop(line_21.Substring((int)(0), (int)((((dynamic)(line_21.Length)) - ((dynamic)(1))) - 0))));
                    line_21 = "";
                }
            }
            i_22 = (i_22 + 2);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
