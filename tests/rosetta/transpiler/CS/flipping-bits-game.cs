// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] randInt(long seed_0, long n_1) {
        long next_2 = (((seed_0 * 1664525) + 1013904223) % 2147483647);
        return new long[]{next_2, (next_2 % n_1)};
    }

    static object[] newBoard(long n_3, long seed_4) {
        long[][] board_5 = new long[][]{};
        long s_6 = seed_4;
        long i_7 = 0;
        while ((i_7 < n_3)) {
            long[] row_8 = new long[]{};
            long j_9 = 0;
            while ((j_9 < n_3)) {
                long[] r_10 = randInt(s_6, 2);
                s_6 = r_10[(int)(0)];
                row_8 = (Enumerable.ToArray(Enumerable.Append(row_8, r_10[(int)(1)])));
                j_9 = (j_9 + 1);
            }
            board_5 = (Enumerable.ToArray(Enumerable.Append(board_5, row_8)));
            i_7 = (i_7 + 1);
        };
        return new object[]{board_5, s_6};
    }

    static long[][] copyBoard(long[][] b_11) {
        long[][] nb_12 = new long[][]{};
        long i_13 = 0;
        while ((i_13 < b_11.Length)) {
            long[] row_14 = new long[]{};
            long j_15 = 0;
            while ((j_15 < b_11[(int)(i_13)].Length)) {
                row_14 = (Enumerable.ToArray(Enumerable.Append(row_14, b_11[(int)(i_13)][(int)(j_15)])));
                j_15 = (j_15 + 1);
            }
            nb_12 = (Enumerable.ToArray(Enumerable.Append(nb_12, row_14)));
            i_13 = (i_13 + 1);
        };
        return nb_12;
    }

    static long[][] flipRow(long[][] b_16, long r_17) {
        long j_18 = 0;
        while ((j_18 < b_16[(int)(r_17)].Length)) {
            b_16[(int)(r_17)][j_18] = (1 - b_16[(int)(r_17)][(int)(j_18)]);
            j_18 = (j_18 + 1);
        };
        return b_16;
    }

    static long[][] flipCol(long[][] b_19, long c_20) {
        long i_21 = 0;
        while ((i_21 < b_19.Length)) {
            b_19[(int)(i_21)][c_20] = (1 - b_19[(int)(i_21)][(int)(c_20)]);
            i_21 = (i_21 + 1);
        };
        return b_19;
    }

    static bool boardsEqual(long[][] a_22, long[][] b_23) {
        long i_24 = 0;
        while ((i_24 < a_22.Length)) {
            long j_25 = 0;
            while ((j_25 < a_22[(int)(i_24)].Length)) {
                if ((a_22[(int)(i_24)][(int)(j_25)] != b_23[(int)(i_24)][(int)(j_25)])) {
                    return false;
                }
                j_25 = (j_25 + 1);
            }
            i_24 = (i_24 + 1);
        };
        return true;
    }

    static object[] shuffleBoard(long[][] b_26, long seed_27) {
        long s_28 = seed_27;
        var n_29 = b_26.Length;
        long k_30 = 0;
        while ((k_30 < (((dynamic)2) * ((dynamic)n_29)))) {
            long[] r_31 = randInt(s_28, n_29);
            s_28 = r_31[(int)(0)];
            var idx_32 = Convert.ToInt64(r_31[(int)(1)]);
            if (((k_30 % 2) == 0)) {
                b_26 = flipRow(b_26, idx_32);
            } else {
                b_26 = flipCol(b_26, idx_32);
            }
            k_30 = (k_30 + 1);
        };
        return new object[]{b_26, s_28};
    }

    static Dictionary<string, long[]> solve(long[][] board_33, long[][] target_34) {
        var n_35 = board_33.Length;
        long[] row_36 = new long[]{};
        long[] col_37 = new long[]{};
        long i_38 = 0;
        while ((i_38 < n_35)) {
            long diff_39 = ((board_33[(int)(i_38)][(int)(0)] != target_34[(int)(i_38)][(int)(0)]) ? 1 : 0);
            row_36 = (Enumerable.ToArray(Enumerable.Append(row_36, diff_39)));
            i_38 = (i_38 + 1);
        };
        long j_40 = 0;
        while ((j_40 < n_35)) {
            long diff_41 = ((board_33[(int)(0)][(int)(j_40)] != target_34[(int)(0)][(int)(j_40)]) ? 1 : 0);
            long val_42 = ((diff_41 + row_36[(int)(0)]) % 2);
            col_37 = (Enumerable.ToArray(Enumerable.Append(col_37, val_42)));
            j_40 = (j_40 + 1);
        };
        return new Dictionary<string, long[]>{{"row", row_36}, {"col", col_37}};
    }

    static object[] applySolution(long[][] b_43, Dictionary<string, long[]> sol_44) {
        long[][] board_45 = b_43;
        long moves_46 = 0;
        long i_47 = 0;
        while ((i_47 < (sol_44.ContainsKey("row") ? sol_44["row"] : null).Length)) {
            if (((sol_44.ContainsKey("row") ? sol_44["row"] : null)[(int)(i_47)] == 1)) {
                board_45 = flipRow(board_45, i_47);
                moves_46 = (moves_46 + 1);
            }
            i_47 = (i_47 + 1);
        };
        long j_48 = 0;
        while ((j_48 < (sol_44.ContainsKey("col") ? sol_44["col"] : null).Length)) {
            if (((sol_44.ContainsKey("col") ? sol_44["col"] : null)[(int)(j_48)] == 1)) {
                board_45 = flipCol(board_45, j_48);
                moves_46 = (moves_46 + 1);
            }
            j_48 = (j_48 + 1);
        };
        return new object[]{board_45, moves_46};
    }

    static void printBoard(long[][] b_49) {
        long i_50 = 0;
        while ((i_50 < b_49.Length)) {
            string line_51 = "";
            long j_52 = 0;
            while ((j_52 < b_49[(int)(i_50)].Length)) {
                line_51 = (line_51 + (b_49[(int)(i_50)][(int)(j_52)]).ToString());
                if ((j_52 < (((dynamic)b_49[(int)(i_50)].Length) - ((dynamic)1)))) {
                    line_51 = (line_51 + " ");
                }
                j_52 = (j_52 + 1);
            }
            Console.WriteLine(_fmtTop(line_51));
            i_50 = (i_50 + 1);
        };
    }

    static void main() {
        long n_53 = 3;
        long seed_54 = 1;
        object[] res_55 = newBoard(n_53, seed_54);
        long[][] target_56 = (((dynamic)res_55)[0] as long[][]) ?? new long[][]{};
        seed_54 = Convert.ToInt64(((dynamic)res_55)[1]);
        long[][] board_57 = copyBoard(target_56);
        while (true) {
            object[] sres_58 = shuffleBoard(copyBoard(board_57), seed_54);
            board_57 = (((dynamic)sres_58)[0] as long[][]) ?? new long[][]{};
            seed_54 = Convert.ToInt64(((dynamic)sres_58)[1]);
            if ((!boardsEqual(board_57, target_56))) {
                break;
            }
        };
        Console.WriteLine(_fmtTop("Target:"));
        printBoard(target_56);
        Console.WriteLine(_fmtTop("Board:"));
        printBoard(board_57);
        Dictionary<string, long[]> sol_59 = solve(board_57, target_56);
        object[] ares_60 = applySolution(board_57, sol_59);
        board_57 = (((dynamic)ares_60)[0] as long[][]) ?? new long[][]{};
        var moves_61 = Convert.ToInt64(((dynamic)ares_60)[1]);
        Console.WriteLine(_fmtTop("Solved:"));
        printBoard(board_57);
        Console.WriteLine(_fmtTop(("Moves: " + (moves_61).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
