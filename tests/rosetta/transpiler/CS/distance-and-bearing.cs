// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Airport {
    public string name;
    public string country;
    public string icao;
    public double lat;
    public double lon;
    public override string ToString() => $"Airport {{name = \"{name}\", country = \"{country}\", icao = \"{icao}\", lat = {lat.ToString("0.0")}, lon = {lon.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static Airport[] airports_42 = new Airport[]{new Airport{name = "Koksijde Air Base", country = "Belgium", icao = "EBFN", lat = 51.090301513671875, lon = 2.652780055999756}, new Airport{name = "Ostend-Bruges International Airport", country = "Belgium", icao = "EBOS", lat = 51.198898315399994, lon = 2.8622200489}, new Airport{name = "Kent International Airport", country = "United Kingdom", icao = "EGMH", lat = 51.342201, lon = 1.34611}, new Airport{name = "Calais-Dunkerque Airport", country = "France", icao = "LFAC", lat = 50.962100982666016, lon = 1.954759955406189}, new Airport{name = "Westkapelle heliport", country = "Belgium", icao = "EBKW", lat = 51.32222366333, lon = 3.2930560112}, new Airport{name = "Lympne Airport", country = "United Kingdom", icao = "EGMK", lat = 51.08, lon = 1.013}, new Airport{name = "Ursel Air Base", country = "Belgium", icao = "EBUL", lat = 51.14419937133789, lon = 3.475559949874878}, new Airport{name = "Southend Airport", country = "United Kingdom", icao = "EGMC", lat = 51.5713996887207, lon = 0.6955559849739075}, new Airport{name = "Merville-Calonne Airport", country = "France", icao = "LFQT", lat = 50.61840057373047, lon = 2.642240047454834}, new Airport{name = "Wevelgem Airport", country = "Belgium", icao = "EBKT", lat = 50.817199707, lon = 3.20472002029}, new Airport{name = "Midden-Zeeland Airport", country = "Netherlands", icao = "EHMZ", lat = 51.5121994019, lon = 3.73111009598}, new Airport{name = "Lydd Airport", country = "United Kingdom", icao = "EGMD", lat = 50.95610046386719, lon = 0.9391670227050781}, new Airport{name = "RAF Wattisham", country = "United Kingdom", icao = "EGUW", lat = 52.1273002625, lon = 0.956264019012}, new Airport{name = "Beccles Airport", country = "United Kingdom", icao = "EGSM", lat = 52.435298919699996, lon = 1.6183300018300002}, new Airport{name = "Lille/Marcq-en-Baroeul Airport", country = "France", icao = "LFQO", lat = 50.687198638916016, lon = 3.0755600929260254}, new Airport{name = "Lashenden (Headcorn) Airfield", country = "United Kingdom", icao = "EGKH", lat = 51.156898, lon = 0.641667}, new Airport{name = "Le Touquet-CÃ´te d'Opale Airport", country = "France", icao = "LFAT", lat = 50.517398834228516, lon = 1.6205899715423584}, new Airport{name = "Rochester Airport", country = "United Kingdom", icao = "EGTO", lat = 51.351898193359375, lon = 0.5033329725265503}, new Airport{name = "Lille-Lesquin Airport", country = "France", icao = "LFQQ", lat = 50.563332, lon = 3.086886}, new Airport{name = "Thurrock Airfield", country = "United Kingdom", icao = "EGMT", lat = 51.537505, lon = 0.367634}};
    static double sinApprox(double x_1) {
        double term_2 = x_1;
        double sum_3 = x_1;
        long n_4 = 1;
        while ((n_4 <= 8)) {
            var denom_5 = Convert.ToDouble(((2 * n_4) * ((2 * n_4) + 1)));
            term_2 = (((dynamic)((-term_2 * x_1) * x_1)) / ((dynamic)denom_5));
            sum_3 = (sum_3 + term_2);
            n_4 = (n_4 + 1);
        };
        return sum_3;
    }

    static double cosApprox(double x_6) {
        double term_7 = 1;
        double sum_8 = 1;
        long n_9 = 1;
        while ((n_9 <= 8)) {
            var denom_10 = Convert.ToDouble((((2 * n_9) - 1) * (2 * n_9)));
            term_7 = (((dynamic)((-term_7 * x_6) * x_6)) / ((dynamic)denom_10));
            sum_8 = (sum_8 + term_7);
            n_9 = (n_9 + 1);
        };
        return sum_8;
    }

    static double atanApprox(double x_11) {
        if ((x_11 > 1)) {
            return ((PI_0 / 2) - (x_11 / ((x_11 * x_11) + 0.28)));
        };
        if ((x_11 < -1)) {
            return ((-PI_0 / 2) - (x_11 / ((x_11 * x_11) + 0.28)));
        };
        return (x_11 / (1 + ((0.28 * x_11) * x_11)));
    }

    static double atan2Approx(double y_12, double x_13) {
        if ((x_13 > 0)) {
            double r_14 = atanApprox((y_12 / x_13));
            return r_14;
        };
        if ((x_13 < 0)) {
            if ((y_12 >= 0)) {
                return (atanApprox((y_12 / x_13)) + PI_0);
            }
            return (atanApprox((y_12 / x_13)) - PI_0);
        };
        if ((y_12 > 0)) {
            return (PI_0 / 2);
        };
        if ((y_12 < 0)) {
            return (-PI_0 / 2);
        };
        return 0;
    }

    static double sqrtApprox(double x_15) {
        double guess_16 = x_15;
        long i_17 = 0;
        while ((i_17 < 10)) {
            guess_16 = ((guess_16 + (x_15 / guess_16)) / 2);
            i_17 = (i_17 + 1);
        };
        return guess_16;
    }

    static double rad(double x_18) {
        return ((x_18 * PI_0) / 180);
    }

    static double deg(double x_19) {
        return ((x_19 * 180) / PI_0);
    }

    static double distance(double lat1_20, double lon1_21, double lat2_22, double lon2_23) {
        double phi1_24 = rad(lat1_20);
        double phi2_25 = rad(lat2_22);
        double dphi_26 = rad((lat2_22 - lat1_20));
        double dlambda_27 = rad((lon2_23 - lon1_21));
        double sdphi_28 = sinApprox((dphi_26 / 2));
        double sdlambda_29 = sinApprox((dlambda_27 / 2));
        double a_30 = ((sdphi_28 * sdphi_28) + (((cosApprox(phi1_24) * cosApprox(phi2_25)) * sdlambda_29) * sdlambda_29));
        double c_31 = (2 * atan2Approx(sqrtApprox(a_30), sqrtApprox((1 - a_30))));
        return ((6371 / 1.852) * c_31);
    }

    static double bearing(double lat1_32, double lon1_33, double lat2_34, double lon2_35) {
        double phi1_36 = rad(lat1_32);
        double phi2_37 = rad(lat2_34);
        double dl_38 = rad((lon2_35 - lon1_33));
        double y_39 = (sinApprox(dl_38) * cosApprox(phi2_37));
        double x_40 = ((cosApprox(phi1_36) * sinApprox(phi2_37)) - ((sinApprox(phi1_36) * cosApprox(phi2_37)) * cosApprox(dl_38)));
        double br_41 = deg(atan2Approx(y_39, x_40));
        if ((br_41 < 0)) {
            br_41 = (br_41 + 360);
        };
        return br_41;
    }

    static double floor(double x_43) {
        long i_44 = Convert.ToInt64(x_43);
        if ((Convert.ToDouble(i_44) > x_43)) {
            i_44 = (i_44 - 1);
        };
        return Convert.ToDouble(i_44);
    }

    static double pow10(long n_45) {
        double p_46 = 1;
        long i_47 = 0;
        while ((i_47 < n_45)) {
            p_46 = (p_46 * 10);
            i_47 = (i_47 + 1);
        };
        return p_46;
    }

    static double round(double x_48, long n_49) {
        double m_50 = pow10(n_49);
        return (floor(((x_48 * m_50) + 0.5)) / m_50);
    }

    static object[][] sortByDistance(object[][] xs_51) {
        object[][] arr_52 = xs_51;
        long i_53 = 1;
        while ((i_53 < arr_52.Length)) {
            long j_54 = i_53;
            while (((j_54 > 0) && (((dynamic)arr_52[(int)((j_54 - 1))])[0] > ((dynamic)arr_52[(int)(j_54)])[0]))) {
                object[] tmp_55 = arr_52[(int)((j_54 - 1))];
                arr_52[(j_54 - 1)] = arr_52[(int)(j_54)];
                arr_52[j_54] = tmp_55;
                j_54 = (j_54 - 1);
            }
            i_53 = (i_53 + 1);
        };
        return arr_52;
    }

    static void main() {
        double planeLat_56 = 51.514669;
        double planeLon_57 = 2.198581;
        object[][] results_58 = new object[][]{};
        foreach (var ap_59 in airports_42) {
            double d_60 = distance(planeLat_56, planeLon_57, ap_59.lat, ap_59.lon);
            double b_61 = bearing(planeLat_56, planeLon_57, ap_59.lat, ap_59.lon);
            results_58 = (Enumerable.ToArray(Enumerable.Append(results_58, new object[]{d_60, b_61, ap_59})));
        };
        results_58 = sortByDistance(results_58);
        Console.WriteLine(_fmtTop("Distance Bearing ICAO Country               Airport"));
        Console.WriteLine(_fmtTop("--------------------------------------------------------------"));
        long i_62 = 0;
        while ((i_62 < results_58.Length)) {
            object[] r_63 = results_58[(int)(i_62)];
            var ap_64 = ((dynamic)r_63)[2];
            var dist_65 = ((dynamic)r_63)[0];
            var bear_66 = ((dynamic)r_63)[1];
            string line_67 = (((dynamic)((((dynamic)((((dynamic)((((round(dist_65, 1)).ToString() + "\t") + (round(bear_66, 0)).ToString()) + "\t")) + ((dynamic)ap_64.icao)) + "\t")) + ((dynamic)ap_64.country)) + " ")) + ((dynamic)ap_64.name));
            Console.WriteLine(_fmtTop(line_67));
            i_62 = (i_62 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
