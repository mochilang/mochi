// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] bigTrim(long[] a_0) {
        int n_1 = a_0.Length;
        while (((n_1 > 1) && (a_0[(int)((n_1 - 1))] == 0))) {
            a_0 = a_0.Skip((int)(0)).Take((int)(((n_1 - 1) - 0))).ToArray();
            n_1 = (n_1 - 1);
        };
        return a_0;
    }

    static long[] bigFromInt(long x_2) {
        if ((x_2 == 0)) {
            return new long[]{0};
        };
        long[] digits_3 = new long[]{};
        long n_4 = x_2;
        while ((n_4 > 0)) {
            digits_3 = (Enumerable.ToArray(Enumerable.Append(digits_3, (n_4 % 10))));
            n_4 = (n_4 / 10);
        };
        return digits_3;
    }

    static long[] bigAdd(long[] a_5, long[] b_6) {
        long[] res_7 = new long[]{};
        long carry_8 = 0;
        long i_9 = 0;
        while ((((i_9 < a_5.Length) || (i_9 < b_6.Length)) || (carry_8 > 0))) {
            long av_10 = 0;
            if ((i_9 < a_5.Length)) {
                av_10 = a_5[(int)(i_9)];
            }
            long bv_11 = 0;
            if ((i_9 < b_6.Length)) {
                bv_11 = b_6[(int)(i_9)];
            }
            long s_12 = ((av_10 + bv_11) + carry_8);
            res_7 = (Enumerable.ToArray(Enumerable.Append(res_7, (s_12 % 10))));
            carry_8 = (s_12 / 10);
            i_9 = (i_9 + 1);
        };
        return bigTrim(res_7);
    }

    static long[] bigSub(long[] a_13, long[] b_14) {
        long[] res_15 = new long[]{};
        long borrow_16 = 0;
        long i_17 = 0;
        while ((i_17 < a_13.Length)) {
            long av_18 = a_13[(int)(i_17)];
            long bv_19 = 0;
            if ((i_17 < b_14.Length)) {
                bv_19 = b_14[(int)(i_17)];
            }
            long diff_20 = ((av_18 - bv_19) - borrow_16);
            if ((diff_20 < 0)) {
                diff_20 = (diff_20 + 10);
                borrow_16 = 1;
            } else {
                borrow_16 = 0;
            }
            res_15 = (Enumerable.ToArray(Enumerable.Append(res_15, diff_20)));
            i_17 = (i_17 + 1);
        };
        return bigTrim(res_15);
    }

    static string bigToString(long[] a_21) {
        string s_22 = "";
        long i_23 = (a_21.Length - 1);
        while ((i_23 >= 0)) {
            s_22 = (s_22 + (a_21[(int)(i_23)]).ToString());
            i_23 = (i_23 - 1);
        };
        return s_22;
    }

    static long minInt(long a_24, long b_25) {
        if ((a_24 < b_25)) {
            return a_24;
        } else {
            return b_25;
        };
    }

    static long[][] cumu(long n_26) {
        long[][][] cache_27 = new long[][][]{new long[][]{bigFromInt(1)}};
        long y_28 = 1;
        while ((y_28 <= n_26)) {
            long[][] row_29 = new long[][]{bigFromInt(0)};
            long x_30 = 1;
            while ((x_30 <= y_28)) {
                long[] val_31 = cache_27[(int)((y_28 - x_30))][(int)(minInt(x_30, (y_28 - x_30)))];
                row_29 = (Enumerable.ToArray(Enumerable.Append(row_29, bigAdd(row_29[(int)((row_29.Length - 1))], val_31))));
                x_30 = (x_30 + 1);
            }
            cache_27 = (Enumerable.ToArray(Enumerable.Append(cache_27, row_29)));
            y_28 = (y_28 + 1);
        };
        return cache_27[(int)(n_26)];
    }

    static string[] row(long n_32) {
        long[][] e_33 = cumu(n_32);
        string[] out_34 = new string[]{};
        long i_35 = 0;
        while ((i_35 < n_32)) {
            long[] diff_36 = bigSub(e_33[(int)((i_35 + 1))], e_33[(int)(i_35)]);
            out_34 = (Enumerable.ToArray(Enumerable.Append(out_34, bigToString(diff_36))));
            i_35 = (i_35 + 1);
        };
        return out_34;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop("rows:"));
            long x_37 = 1;
            while ((x_37 < 11)) {
                string[] r_38 = row(x_37);
                string line_39 = "";
                long i_40 = 0;
                while ((i_40 < r_38.Length)) {
                    line_39 = (((line_39 + " ") + r_38[(int)(i_40)]) + " ");
                    i_40 = (i_40 + 1);
                }
                Console.WriteLine(_fmtTop(line_39));
                x_37 = (x_37 + 1);
            }
            Console.WriteLine(_fmtTop(""));
            Console.WriteLine(_fmtTop("sums:"));
            foreach (var num_41 in new long[]{23, 123, 1234}) {
                long[][] r_42 = cumu(num_41);
                Console.WriteLine(_fmtTop((((num_41).ToString() + " ") + bigToString(r_42[(int)((r_42.Length - 1))]))));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
