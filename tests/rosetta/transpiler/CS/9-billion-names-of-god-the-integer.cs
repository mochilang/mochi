// Generated by Mochi 0.10.39 on 2025-07-24 15:11 +0700
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static int x = 1;
    static int[] bigTrim(int[] a) {
        int n = a.Length;
        while (((n > 1) && (a[(n - 1)] == 0))) {
            a = a.Skip(0).Take(((n - 1) - 0)).ToArray();
            n = (n - 1);
        };
        return a;
    }

    static int[] bigFromInt(int x) {
        if ((x == 0)) {
            return new int[]{0};
        };
        int[] digits = new int[]{};
        int n = x;
        while ((n > 0)) {
            digits = (digits.Append((n % 10)).ToArray());
            n = (n / 10);
        };
        return digits;
    }

    static int[] bigAdd(int[] a, int[] b) {
        int[] res = new int[]{};
        int carry = 0;
        int i = 0;
        while ((((i < a.Length) || (i < b.Length)) || (carry > 0))) {
            int av = 0;
            if ((i < a.Length)) {
                av = a[i];
            }
            int bv = 0;
            if ((i < b.Length)) {
                bv = b[i];
            }
            var s = ((av + bv) + carry);
            res = (res.Append((s % 10)).ToArray());
            carry = (s / 10);
            i = (i + 1);
        };
        return bigTrim(res);
    }

    static int[] bigSub(int[] a, int[] b) {
        int[] res = new int[]{};
        int borrow = 0;
        int i = 0;
        while ((i < a.Length)) {
            int av = a[i];
            int bv = 0;
            if ((i < b.Length)) {
                bv = b[i];
            }
            var diff = ((av - bv) - borrow);
            if ((diff < 0)) {
                diff = (diff + 10);
                borrow = 1;
            } else {
                borrow = 0;
            }
            res = (res.Append(diff).ToArray());
            i = (i + 1);
        };
        return bigTrim(res);
    }

    static string bigToString(int[] a) {
        string s = "";
        int i = (a.Length - 1);
        while ((i >= 0)) {
            s = (s + a[i].ToString());
            i = (i - 1);
        };
        return s;
    }

    static int minInt(int a, int b) {
        if ((a < b)) {
            return a;
        } else {
            return b;
        };
    }

    static int[][] cumu(int n) {
        int[][][] cache = new int[][][]{new int[][]{bigFromInt(1)}};
        int y = 1;
        while ((y <= n)) {
            int[][] row = new int[][]{bigFromInt(0)};
            int x = 1;
            while ((x <= y)) {
                var val = cache[(y - x)][minInt(x, (y - x))];
                row = (row.Append(bigAdd(row[(row.Length - 1)], val)).ToArray());
                x = (x + 1);
            }
            cache = (cache.Append(row).ToArray());
            y = (y + 1);
        };
        return cache[n];
    }

    static string[] row(int n) {
        int[][] e = cumu(n);
        string[] _out = new string[]{};
        int i = 0;
        while ((i < n)) {
            int[] diff = bigSub(e[(i + 1)], e[i]);
            _out = (_out.Append(bigToString(diff)).ToArray());
            i = (i + 1);
        };
        return _out;
    }

    static void Main() {
        Console.WriteLine(_fmtTop("rows:"));
        while ((x < 11)) {
            string[] r = row(x);
            string line = "";
            int i = 0;
            while ((i < r.Length)) {
                line = (((line + " ") + r[i]) + " ");
                i = (i + 1);
            }
            Console.WriteLine(_fmtTop(line));
            x = (x + 1);
        }
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("sums:"));
        foreach (var num_0 in new int[]{23, 123, 1234}) {
            int[][] r = cumu(num_0);
            Console.WriteLine(_fmtTop(((num_0.ToString() + " ") + bigToString(r[(r.Length - 1)]))));
        }
    }
}
