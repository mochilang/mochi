// Generated by Mochi 0.10.40 on 2025-07-25 12:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long x = 1;
    static long[] bigTrim(long[] a) {
        int n = a.Length;
        while (((n > 1) && (a[(n - 1)] == 0))) {
            a = a.Skip((int)(0)).Take((int)(((n - 1) - 0))).ToArray();
            n = (n - 1);
        };
        return a;
    }

    static long[] bigFromInt(long x) {
        if ((x == 0)) {
            return new long[]{0};
        };
        long[] digits = new long[]{};
        long n = x;
        while ((n > 0)) {
            digits = (Enumerable.ToArray(Enumerable.Append(digits, (n % 10))));
            n = (n / 10);
        };
        return digits;
    }

    static long[] bigAdd(long[] a, long[] b) {
        long[] res = new long[]{};
        long carry = 0;
        long i = 0;
        while ((((i < a.Length) || (i < b.Length)) || (carry > 0))) {
            long av = 0;
            if ((i < a.Length)) {
                av = a[i];
            }
            long bv = 0;
            if ((i < b.Length)) {
                bv = b[i];
            }
            long s = ((av + bv) + carry);
            res = (Enumerable.ToArray(Enumerable.Append(res, (s % 10))));
            carry = (s / 10);
            i = (i + 1);
        };
        return bigTrim(res);
    }

    static long[] bigSub(long[] a, long[] b) {
        long[] res = new long[]{};
        long borrow = 0;
        long i = 0;
        while ((i < a.Length)) {
            long av = a[i];
            long bv = 0;
            if ((i < b.Length)) {
                bv = b[i];
            }
            long diff = ((av - bv) - borrow);
            if ((diff < 0)) {
                diff = (diff + 10);
                borrow = 1;
            } else {
                borrow = 0;
            }
            res = (Enumerable.ToArray(Enumerable.Append(res, diff)));
            i = (i + 1);
        };
        return bigTrim(res);
    }

    static string bigToString(long[] a) {
        string s = "";
        long i = (a.Length - 1);
        while ((i >= 0)) {
            s = (s + (a[i]).ToString());
            i = (i - 1);
        };
        return s;
    }

    static long minInt(long a, long b) {
        if ((a < b)) {
            return a;
        } else {
            return b;
        };
    }

    static long[][] cumu(long n) {
        long[][][] cache = new long[][][]{new long[][]{bigFromInt(1)}};
        long y = 1;
        while ((y <= n)) {
            long[][] row = new long[][]{bigFromInt(0)};
            long x = 1;
            while ((x <= y)) {
                long[] val = cache[(y - x)][minInt(x, (y - x))];
                row = (Enumerable.ToArray(Enumerable.Append(row, bigAdd(((dynamic)row)[(row.Length - 1)], val))));
                x = (x + 1);
            }
            cache = (Enumerable.ToArray(Enumerable.Append(cache, row)));
            y = (y + 1);
        };
        return cache[n];
    }

    static string[] row(long n) {
        long[][] e = cumu(n);
        string[] _out = new string[]{};
        long i = 0;
        while ((i < n)) {
            long[] diff = bigSub(e[(i + 1)], e[i]);
            _out = (Enumerable.ToArray(Enumerable.Append(_out, bigToString(diff))));
            i = (i + 1);
        };
        return _out;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop("rows:"));
            while ((x < 11)) {
                string[] r = row(x);
                string line = "";
                long i = 0;
                while ((i < r.Length)) {
                    line = (((line + " ") + r[i]) + " ");
                    i = (i + 1);
                }
                Console.WriteLine(_fmtTop(line));
                x = (x + 1);
            }
            Console.WriteLine(_fmtTop(""));
            Console.WriteLine(_fmtTop("sums:"));
            foreach (var num_0 in new long[]{23, 123, 1234}) {
                long[][] r_1 = cumu(num_0);
                Console.WriteLine(_fmtTop((((num_0).ToString() + " ") + bigToString(r_1[(r_1.Length - 1)]))));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
