// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Func<object, object> accumulator(object sum) {
        object[] store = new object[]{sum};
        Func<object, object> add = (object nv) => {store[0] = (store[0] + nv); return store[0];};
        return add;
    }

    static void main() {
        Func<object, object> x = accumulator(1);
        x(5);
        accumulator(3);
        Console.WriteLine(_fmtTop(x(2.3).ToString()));
    }

    static void Main() {
        main();
    }
}
