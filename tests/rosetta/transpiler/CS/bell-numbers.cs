// Generated by Mochi 0.10.52 on 2025-07-31 04:52 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static BigInteger[][] bellTriangle(long n_0) {
        BigInteger[][] tri_1 = new BigInteger[][]{};
        long i_2 = 0;
        while ((i_2 < n_0)) {
            BigInteger[] row_3 = new BigInteger[]{};
            long j_4 = 0;
            while ((j_4 < i_2)) {
                row_3 = (Enumerable.ToArray(Enumerable.Append(row_3, new BigInteger(0))));
                j_4 = (j_4 + 1);
            }
            tri_1 = (Enumerable.ToArray(Enumerable.Append(tri_1, row_3)));
            i_2 = (i_2 + 1);
        };
        tri_1[(int)(1)][0] = 1;
        i_2 = 2;
        while ((i_2 < n_0)) {
            tri_1[(int)(i_2)][0] = tri_1[(int)((i_2 - 1))][(int)((i_2 - 2))];
            long j_5 = 1;
            while ((j_5 < i_2)) {
                tri_1[(int)(i_2)][j_5] = (tri_1[(int)(i_2)][(int)((j_5 - 1))] + tri_1[(int)((i_2 - 1))][(int)((j_5 - 1))]);
                j_5 = (j_5 + 1);
            }
            i_2 = (i_2 + 1);
        };
        return tri_1;
    }

    static void main() {
        BigInteger[][] bt_6 = bellTriangle(51);
        Console.WriteLine(_fmtTop("First fifteen and fiftieth Bell numbers:"));
        for (var i_7 = 1; i_7 < 16; i_7++) {
            Console.WriteLine(_fmtTop((((((dynamic)("")) + ((dynamic)((i_7).ToString().PadLeft(2, ' ')))) + ": ") + (bt_6[(int)(i_7)][(int)(0)]).ToString())));
        };
        Console.WriteLine(_fmtTop(("50: " + (bt_6[(int)(50)][(int)(0)]).ToString())));
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("The first ten rows of Bell's triangle:"));
        for (var i_8 = 1; i_8 < 11; i_8++) {
            Console.WriteLine(_fmtTop(bt_6[(int)(i_8)]));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
