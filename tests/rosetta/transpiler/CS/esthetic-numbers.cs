// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string digits_0 = "0123456789abcdef";
    static long[] esths_12 = new long[]{};
    static string toBase(long n_1, long b_2) {
        if ((n_1 == 0)) {
            return "0";
        };
        long v_3 = n_1;
        string out_4 = "";
        while ((v_3 > 0)) {
            long d_5 = (v_3 % b_2);
            out_4 = (digits_0.Substring((int)(d_5), (int)((d_5 + 1) - d_5)) + out_4);
            v_3 = (v_3 / b_2);
        };
        return out_4;
    }

    static long uabs(long a_6, long b_7) {
        if ((a_6 > b_7)) {
            return (a_6 - b_7);
        };
        return (b_7 - a_6);
    }

    static bool isEsthetic(long n_8, long b_9) {
        if ((n_8 == 0)) {
            return false;
        };
        long i_10 = (n_8 % b_9);
        n_8 = (n_8 / b_9);
        while ((n_8 > 0)) {
            long j_11 = (n_8 % b_9);
            if ((uabs(i_10, j_11) != 1)) {
                return false;
            }
            n_8 = (n_8 / b_9);
            i_10 = j_11;
        };
        return true;
    }

    static void dfs(long n_13, long m_14, long i_15) {
        if (((i_15 >= n_13) && (i_15 <= m_14))) {
            esths_12 = (Enumerable.ToArray(Enumerable.Append(esths_12, i_15)));
        };
        if (((i_15 == 0) || (i_15 > m_14))) {
            return;
        };
        long d_16 = (i_15 % 10);
        long i1_17 = (((i_15 * 10) + d_16) - 1);
        long i2_18 = (i1_17 + 2);
        if ((d_16 == 0)) {
            dfs(n_13, m_14, i2_18);
        } else {
            if ((d_16 == 9)) {
                dfs(n_13, m_14, i1_17);
            } else {
                dfs(n_13, m_14, i1_17);
                dfs(n_13, m_14, i2_18);
            }
        };
    }

    static string commatize(long n_19) {
        string s_20 = (n_19).ToString();
        long i_21 = (((dynamic)s_20.Length) - ((dynamic)3));
        while ((i_21 >= 1)) {
            s_20 = ((s_20.Substring((int)(0), (int)(i_21 - 0)) + ",") + s_20.Substring((int)(i_21), (int)(s_20.Length - i_21)));
            i_21 = (i_21 - 3);
        };
        return s_20;
    }

    static void listEsths(long n_22, long n2_23, long m_24, long m2_25, long perLine_26, bool showAll_27) {
        esths_12 = new long[]{};
        long i_28 = 0;
        while ((i_28 < 10)) {
            dfs(n2_23, m2_25, i_28);
            i_28 = (i_28 + 1);
        };
        var le_29 = esths_12.Length;
        Console.WriteLine(_fmtTop((((((("Base 10: " + commatize(le_29)) + " esthetic numbers between ") + commatize(n_22)) + " and ") + commatize(m_24)) + ":")));
        if (showAll_27) {
            long c_30 = 0;
            string line_31 = "";
            foreach (var v_32 in esths_12) {
                if ((line_31.Length > 0)) {
                    line_31 = (line_31 + " ");
                }
                line_31 = (line_31 + (v_32).ToString());
                c_30 = (c_30 + 1);
                if (((c_30 % perLine_26) == 0)) {
                    Console.WriteLine(_fmtTop(line_31));
                    line_31 = "";
                }
            }
            if ((line_31.Length > 0)) {
                Console.WriteLine(_fmtTop(line_31));
            }
        } else {
            string line_33 = "";
            long idx_34 = 0;
            while ((idx_34 < perLine_26)) {
                if ((line_33.Length > 0)) {
                    line_33 = (line_33 + " ");
                }
                line_33 = (line_33 + (esths_12[(int)(idx_34)]).ToString());
                idx_34 = (idx_34 + 1);
            }
            Console.WriteLine(_fmtTop(line_33));
            Console.WriteLine(_fmtTop("............"));
            line_33 = "";
            idx_34 = (((dynamic)le_29) - ((dynamic)perLine_26));
            while ((idx_34 < le_29)) {
                if ((line_33.Length > 0)) {
                    line_33 = (line_33 + " ");
                }
                line_33 = (line_33 + (esths_12[(int)(idx_34)]).ToString());
                idx_34 = (idx_34 + 1);
            }
            Console.WriteLine(_fmtTop(line_33));
        };
        Console.WriteLine(_fmtTop(""));
    }

    static void main() {
        long b_35 = 2;
        while ((b_35 <= 16)) {
            long start_36 = (4 * b_35);
            long stop_37 = (6 * b_35);
            Console.WriteLine(_fmtTop((((((("Base " + (b_35).ToString()) + ": ") + (start_36).ToString()) + "th to ") + (stop_37).ToString()) + "th esthetic numbers:")));
            long n_38 = 1;
            long c_39 = 0;
            string line_40 = "";
            while ((c_39 < stop_37)) {
                if (isEsthetic(n_38, b_35)) {
                    c_39 = (c_39 + 1);
                    if ((c_39 >= start_36)) {
                        if ((line_40.Length > 0)) {
                            line_40 = (line_40 + " ");
                        }
                        line_40 = (line_40 + toBase(n_38, b_35));
                    }
                }
                n_38 = (n_38 + 1);
            }
            Console.WriteLine(_fmtTop(line_40));
            Console.WriteLine(_fmtTop(""));
            b_35 = (b_35 + 1);
        };
        listEsths(1000, 1010, 9999, 9898, 16, true);
        listEsths(100000000, 101010101, 130000000, 123456789, 9, true);
        listEsths(100000000000L, 101010101010L, 130000000000L, 123456789898L, 7, false);
        listEsths(100000000000000L, 101010101010101L, 130000000000000L, 123456789898989L, 5, false);
        listEsths(100000000000000000L, 101010101010101010L, 130000000000000000L, 123456789898989898L, 4, false);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
