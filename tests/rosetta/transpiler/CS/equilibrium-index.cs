// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long seed_0 = (_now() % 2147483647);
    static long randN(long n_1) {
        seed_0 = (((seed_0 * 1664525) + 1013904223) % 2147483647);
        return (seed_0 % n_1);
    }

    static long[] eqIndices(long[] xs_2) {
        long r_3 = 0;
        long i_4 = 0;
        while ((i_4 < xs_2.Length)) {
            r_3 = (r_3 + xs_2[(int)(i_4)]);
            i_4 = (i_4 + 1);
        };
        long l_5 = 0;
        long[] eq_6 = new long[]{};
        i_4 = 0;
        while ((i_4 < xs_2.Length)) {
            r_3 = (r_3 - xs_2[(int)(i_4)]);
            if ((l_5 == r_3)) {
                eq_6 = (Enumerable.ToArray(Enumerable.Append(eq_6, i_4)));
            }
            l_5 = (l_5 + xs_2[(int)(i_4)]);
            i_4 = (i_4 + 1);
        };
        return eq_6;
    }

    static void main() {
        Console.WriteLine(_fmtTop(eqIndices(new long[]{-7, 1, 5, 2, -4, 3, 0})));
        long[] verylong_7 = new long[]{};
        long i_8 = 0;
        while ((i_8 < 10000)) {
            seed_0 = (((seed_0 * 1664525) + 1013904223) % 2147483647);
            verylong_7 = (Enumerable.ToArray(Enumerable.Append(verylong_7, ((seed_0 % 1001) - 500))));
            i_8 = (i_8 + 1);
        };
        Console.WriteLine(_fmtTop(eqIndices(verylong_7)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
