// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long seed_47 = 1;
    static string[] split(string s_0, string sep_1) {
        string[] parts_2 = new string[]{};
        string cur_3 = "";
        long i_4 = 0;
        while ((i_4 < s_0.Length)) {
            if ((((sep_1.Length > 0) && ((((dynamic)(i_4)) + ((dynamic)(sep_1.Length))) <= s_0.Length)) && (s_0.Substring((int)(i_4), (int)((((dynamic)(i_4)) + ((dynamic)(sep_1.Length))) - i_4)) == sep_1))) {
                parts_2 = (Enumerable.ToArray(Enumerable.Append(parts_2, cur_3)));
                cur_3 = "";
                i_4 = (((dynamic)(i_4)) + ((dynamic)(sep_1.Length)));
            } else {
                cur_3 = (cur_3 + s_0.Substring((int)(i_4), (int)((i_4 + 1) - i_4)));
                i_4 = (i_4 + 1);
            }
        };
        parts_2 = (Enumerable.ToArray(Enumerable.Append(parts_2, cur_3)));
        return parts_2;
    }

    static long parseIntStr(string str_5) {
        long i_6 = 0;
        bool neg_7 = false;
        if (((str_5.Length > 0) && (str_5.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_7 = true;
            i_6 = 1;
        };
        long n_8 = 0;
        Dictionary<string, long> digits_9 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_6 < str_5.Length)) {
            n_8 = ((n_8 * 10) + (digits_9.ContainsKey(str_5.Substring((int)(i_6), (int)((i_6 + 1) - i_6))) ? digits_9[str_5.Substring((int)(i_6), (int)((i_6 + 1) - i_6))] : 0));
            i_6 = (i_6 + 1);
        };
        if (neg_7) {
            n_8 = -n_8;
        };
        return n_8;
    }

    static string joinInts(long[] nums_10, string sep_11) {
        string s_12 = "";
        long i_13 = 0;
        while ((i_13 < nums_10.Length)) {
            if ((i_13 > 0)) {
                s_12 = (s_12 + sep_11);
            }
            s_12 = (s_12 + (nums_10[(int)(i_13)]).ToString());
            i_13 = (i_13 + 1);
        };
        return s_12;
    }

    static long[] undot(string s_14) {
        string[] parts_15 = split(s_14, ".");
        long[] nums_16 = new long[]{};
        foreach (var p_17 in parts_15) {
            nums_16 = (Enumerable.ToArray(Enumerable.Append(nums_16, parseIntStr(p_17))));
        };
        return nums_16;
    }

    static long factorial(long n_18) {
        long f_19 = 1;
        long i_20 = 2;
        while ((i_20 <= n_18)) {
            f_19 = (f_19 * i_20);
            i_20 = (i_20 + 1);
        };
        return f_19;
    }

    static object[] genFactBaseNums(long size_21, bool countOnly_22) {
        long[][] results_23 = new long[][]{};
        long count_24 = 0;
        long n_25 = 0;
        while (true) {
            long radix_26 = 2;
            long[] res_27 = new long[]{};
            if ((!countOnly_22)) {
                long z_28 = 0;
                while ((z_28 < size_21)) {
                    res_27 = (Enumerable.ToArray(Enumerable.Append(res_27, 0)));
                    z_28 = (z_28 + 1);
                }
            }
            long k_29 = n_25;
            while ((k_29 > 0)) {
                long div_30 = (k_29 / radix_26);
                long rem_31 = (k_29 % radix_26);
                if (((!countOnly_22) && (radix_26 <= (size_21 + 1)))) {
                    res_27[((size_21 - radix_26) + 1)] = rem_31;
                }
                k_29 = div_30;
                radix_26 = (radix_26 + 1);
            }
            if ((radix_26 > (size_21 + 2))) {
                break;
            }
            count_24 = (count_24 + 1);
            if ((!countOnly_22)) {
                results_23 = (Enumerable.ToArray(Enumerable.Append(results_23, res_27)));
            }
            n_25 = (n_25 + 1);
        };
        return new object[]{results_23, count_24};
    }

    static long[][] mapToPerms(long[][] factNums_32) {
        long[][] perms_33 = new long[][]{};
        long psize_34 = (((dynamic)(factNums_32[(int)(0)].Length)) + ((dynamic)(1)));
        long[] start_35 = new long[]{};
        long i_36 = 0;
        while ((i_36 < psize_34)) {
            start_35 = (Enumerable.ToArray(Enumerable.Append(start_35, i_36)));
            i_36 = (i_36 + 1);
        };
        foreach (var fn_37 in factNums_32) {
            long[] perm_38 = new long[]{};
            long j_39 = 0;
            while ((j_39 < start_35.Length)) {
                perm_38 = (Enumerable.ToArray(Enumerable.Append(perm_38, start_35[(int)(j_39)])));
                j_39 = (j_39 + 1);
            }
            long m_40 = 0;
            while ((m_40 < fn_37.Length)) {
                long g_41 = fn_37[(int)(m_40)];
                if ((g_41 != 0)) {
                    long first_42 = m_40;
                    long last_43 = (m_40 + g_41);
                    long t_44 = 1;
                    while ((t_44 <= g_41)) {
                        long temp_45 = perm_38[(int)(first_42)];
                        long x_46 = (first_42 + 1);
                        while ((x_46 <= last_43)) {
                            perm_38[(x_46 - 1)] = perm_38[(int)(x_46)];
                            x_46 = (x_46 + 1);
                        }
                        perm_38[last_43] = temp_45;
                        t_44 = (t_44 + 1);
                    }
                }
                m_40 = (m_40 + 1);
            }
            perms_33 = (Enumerable.ToArray(Enumerable.Append(perms_33, perm_38)));
        };
        return perms_33;
    }

    static long randInt(long n_48) {
        seed_47 = (((seed_47 * 1664525) + 1013904223) % 2147483647);
        return (seed_47 % n_48);
    }

    static void main() {
        object[] g_49 = genFactBaseNums(3, false);
        long[][] factNums_50 = ((dynamic)g_49)[0];
        long[][] perms_51 = mapToPerms(factNums_50);
        long i_52 = 0;
        while ((i_52 < factNums_50.Length)) {
            Console.WriteLine(_fmtTop(((joinInts(factNums_50[(int)(i_52)], ".") + " -> ") + joinInts(perms_51[(int)(i_52)], ""))));
            i_52 = (i_52 + 1);
        };
        long count2_53 = factorial(11);
        Console.WriteLine(_fmtTop(("\nPermutations generated = " + (count2_53).ToString())));
        Console.WriteLine(_fmtTop(("compared to 11! which  = " + (factorial(11)).ToString())));
        Console.WriteLine(_fmtTop(""));
        string[] fbn51s_54 = new string[]{"39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0", "51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1"};
        factNums_50 = new long[][]{undot(fbn51s_54[(int)(0)]), undot(fbn51s_54[(int)(1)])};
        perms_51 = mapToPerms(factNums_50);
        string shoe_55 = "A♠K♠Q♠J♠T♠9♠8♠7♠6♠5♠4♠3♠2♠A♥K♥Q♥J♥T♥9♥8♥7♥6♥5♥4♥3♥2♥A♦K♦Q♦J♦T♦9♦8♦7♦6♦5♦4♦3♦2♦A♣K♣Q♣J♣T♣9♣8♣7♣6♣5♣4♣3♣2♣";
        string[] cards_56 = new string[]{};
        i_52 = 0;
        while ((i_52 < 52)) {
            string card_57 = shoe_55.Substring((int)((2 * i_52)), (int)(((2 * i_52) + 2) - (2 * i_52)));
            if ((card_57.Substring((int)(0), (int)(1 - 0)) == "T")) {
                card_57 = ("10" + card_57.Substring((int)(1), (int)(2 - 1)));
            }
            cards_56 = (Enumerable.ToArray(Enumerable.Append(cards_56, card_57)));
            i_52 = (i_52 + 1);
        };
        i_52 = 0;
        while ((i_52 < fbn51s_54.Length)) {
            Console.WriteLine(_fmtTop(fbn51s_54[(int)(i_52)]));
            long[] perm_58 = perms_51[(int)(i_52)];
            long j_59 = 0;
            string line_60 = "";
            while ((j_59 < perm_58.Length)) {
                line_60 = (line_60 + cards_56[(int)(perm_58[(int)(j_59)])]);
                j_59 = (j_59 + 1);
            }
            Console.WriteLine(_fmtTop((line_60 + "\n")));
            i_52 = (i_52 + 1);
        };
        long[] fbn51_61 = new long[]{};
        i_52 = 0;
        while ((i_52 < 51)) {
            fbn51_61 = (Enumerable.ToArray(Enumerable.Append(fbn51_61, randInt((52 - i_52)))));
            i_52 = (i_52 + 1);
        };
        Console.WriteLine(_fmtTop(joinInts(fbn51_61, ".")));
        perms_51 = mapToPerms(new long[][]{fbn51_61});
        string line_62 = "";
        i_52 = 0;
        while ((i_52 < perms_51[(int)(0)].Length)) {
            line_62 = (line_62 + cards_56[(int)(perms_51[(int)(0)][(int)(i_52)])]);
            i_52 = (i_52 + 1);
        };
        Console.WriteLine(_fmtTop(line_62));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
