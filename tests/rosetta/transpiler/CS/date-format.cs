// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string pad2(long n_0) {
        if ((n_0 < 10)) {
            return ("0" + (n_0).ToString());
        };
        return (n_0).ToString();
    }

    static string weekdayName(long z_1) {
        string[] names_2 = new string[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
        return names_2[(int)(((z_1 + 4) % 7))];
    }

    static void main() {
        var ts_3 = Convert.ToInt64((_now() / 1000000000));
        var days_4 = Convert.ToInt64((((dynamic)ts_3) / ((dynamic)86400)));
        long z_5 = (((dynamic)days_4) + ((dynamic)719468));
        var era_6 = Convert.ToInt64((z_5 / 146097));
        long doe_7 = (z_5 - (((dynamic)era_6) * ((dynamic)146097)));
        long yoe_8 = (((dynamic)(((doe_7 - (doe_7 / 1460)) + (doe_7 / 36524)) - (doe_7 / 146096))) / ((dynamic)Convert.ToInt64(365)));
        long y_9 = (yoe_8 + (((dynamic)era_6) * ((dynamic)400)));
        long doy_10 = (doe_7 - (((365 * yoe_8) + (yoe_8 / 4)) - (yoe_8 / 100)));
        long mp_11 = (((dynamic)((5 * doy_10) + 2)) / ((dynamic)Convert.ToInt64(153)));
        var d_12 = Convert.ToInt64(((doy_10 - (((dynamic)((153 * mp_11) + 2)) / ((dynamic)Convert.ToInt64(5)))) + 1));
        long m_13 = Convert.ToInt64((mp_11 + 3));
        if ((m_13 > 12)) {
            y_9 = (y_9 + 1);
            m_13 = (m_13 - 12);
        };
        string iso_14 = (((((y_9).ToString() + "-") + pad2(m_13)) + "-") + pad2(d_12));
        Console.WriteLine(_fmtTop(iso_14));
        string[] months_15 = new string[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
        string line_16 = ((((((weekdayName(days_4) + ", ") + months_15[(int)((m_13 - 1))]) + " ") + (d_12).ToString()) + ", ") + (y_9).ToString());
        Console.WriteLine(_fmtTop(line_16));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
