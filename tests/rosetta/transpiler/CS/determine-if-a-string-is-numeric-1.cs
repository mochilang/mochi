// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool isNumeric(string s_0) {
        if ((s_0 == "NaN")) {
            return true;
        };
        long i_1 = 0;
        if ((s_0.Length == 0)) {
            return false;
        };
        if (((s_0.Substring((int)(0), 1) == "+") || (s_0.Substring((int)(0), 1) == "-"))) {
            if ((s_0.Length == 1)) {
                return false;
            }
            i_1 = 1;
        };
        bool digits_2 = false;
        bool dot_3 = false;
        while ((i_1 < s_0.Length)) {
            string ch_4 = s_0.Substring((int)(i_1), 1);
            if (((string.Compare(ch_4, "0") >= 0) && (string.Compare(ch_4, "9") <= 0))) {
                digits_2 = true;
                i_1 = (i_1 + 1);
            } else {
                if (((ch_4 == ".") && (dot_3 == false))) {
                    dot_3 = true;
                    i_1 = (i_1 + 1);
                } else {
                    if ((((ch_4 == "e") || (ch_4 == "E")) && digits_2)) {
                        i_1 = (i_1 + 1);
                        if (((i_1 < s_0.Length) && ((s_0.Substring((int)(i_1), 1) == "+") || (s_0.Substring((int)(i_1), 1) == "-")))) {
                            i_1 = (i_1 + 1);
                        }
                        bool ed_5 = false;
                        while ((((i_1 < s_0.Length) && (string.Compare(s_0.Substring((int)(i_1), 1), "0") >= 0)) && (string.Compare(s_0.Substring((int)(i_1), 1), "9") <= 0))) {
                            ed_5 = true;
                            i_1 = (i_1 + 1);
                        }
                        return (ed_5 && (i_1 == s_0.Length));
                    } else {
                        return false;
                    }
                }
            }
        };
        return digits_2;
    }

    static void main() {
        Console.WriteLine(_fmtTop("Are these strings numeric?"));
        string[] strs_6 = new string[]{"1", "3.14", "-100", "1e2", "NaN", "rose"};
        foreach (var s_7 in strs_6) {
            Console.WriteLine(_fmtTop(((("  " + s_7) + " -> ") + (isNumeric(s_7)).ToString())));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
