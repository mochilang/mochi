// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Point3 {
    public double x;
    public double y;
    public double z;
    public override string ToString() => $"Point3 {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, z = {z.ToString("0.0")}}}";
}
class Point2 {
    public long x;
    public long y;
    public override string ToString() => $"Point2 {{x = {x}, y = {y}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double TWO_PI_1 = 6.283185307179586;
    static Point3[] nodes_15 = new Point3[]{new Point3{x = -1, y = -1, z = -1}, new Point3{x = -1, y = -1, z = 1}, new Point3{x = -1, y = 1, z = -1}, new Point3{x = -1, y = 1, z = 1}, new Point3{x = 1, y = -1, z = -1}, new Point3{x = 1, y = -1, z = 1}, new Point3{x = 1, y = 1, z = -1}, new Point3{x = 1, y = 1, z = 1}};
    static long[][] edges_16 = new long[][]{new long[]{0, 1}, new long[]{1, 3}, new long[]{3, 2}, new long[]{2, 0}, new long[]{4, 5}, new long[]{5, 7}, new long[]{7, 6}, new long[]{6, 4}, new long[]{0, 4}, new long[]{1, 5}, new long[]{2, 6}, new long[]{3, 7}};
    static long width_29 = 40;
    static long height_30 = 20;
    static double distance_31 = 3;
    static double scale_32 = 8;
    static double _mod(double x_2, double m_3) {
        return (x_2 - (((dynamic)Convert.ToDouble(Convert.ToInt64((x_2 / m_3)))) * ((dynamic)m_3)));
    }

    static double _sin(double x_4) {
        double y_5 = (_mod((x_4 + PI_0), TWO_PI_1) - PI_0);
        double y2_6 = (y_5 * y_5);
        double y3_7 = (y2_6 * y_5);
        double y5_8 = (y3_7 * y2_6);
        double y7_9 = (y5_8 * y2_6);
        return (((y_5 - (y3_7 / 6)) + (y5_8 / 120)) - (y7_9 / 5040));
    }

    static double _cos(double x_10) {
        double y_11 = (_mod((x_10 + PI_0), TWO_PI_1) - PI_0);
        double y2_12 = (y_11 * y_11);
        double y4_13 = (y2_12 * y2_12);
        double y6_14 = (y4_13 * y2_12);
        return (((1 - (y2_12 / 2)) + (y4_13 / 24)) - (y6_14 / 720));
    }

    static Point3 rotate(Point3 p_17, double ax_18, double ay_19) {
        double sinx_20 = _sin(ax_18);
        double cosx_21 = _cos(ax_18);
        double siny_22 = _sin(ay_19);
        double cosy_23 = _cos(ay_19);
        double x1_24 = p_17.x;
        double y1_25 = ((p_17.y * cosx_21) - (p_17.z * sinx_20));
        double z1_26 = ((p_17.y * sinx_20) + (p_17.z * cosx_21));
        double x2_27 = ((x1_24 * cosy_23) + (z1_26 * siny_22));
        double z2_28 = ((-x1_24 * siny_22) + (z1_26 * cosy_23));
        return new Point3{x = x2_27, y = y1_25, z = z2_28};
    }

    static Point2 project(Point3 p_33) {
        double factor_34 = (scale_32 / (p_33.z + distance_31));
        long x_35 = (((dynamic)Convert.ToInt64((p_33.x * factor_34))) + ((dynamic)(width_29 / 2)));
        long y_36 = (((dynamic)Convert.ToInt64((-p_33.y * factor_34))) + ((dynamic)(height_30 / 2)));
        return new Point2{x = x_35, y = y_36};
    }

    static string[][] clearGrid() {
        string[][] g_37 = new string[][]{};
        long y_38 = 0;
        while ((y_38 < height_30)) {
            string[] row_39 = new string[]{};
            long x_40 = 0;
            while ((x_40 < width_29)) {
                row_39 = (Enumerable.ToArray(Enumerable.Append(row_39, " ")));
                x_40 = (x_40 + 1);
            }
            g_37 = (Enumerable.ToArray(Enumerable.Append(g_37, row_39)));
            y_38 = (y_38 + 1);
        };
        return g_37;
    }

    static void drawPoint(string[][] g_41, long x_42, long y_43, string ch_44) {
        if (((((x_42 >= 0) && (x_42 < width_29)) && (y_43 >= 0)) && (y_43 < height_30))) {
            string[] row_45 = g_41[(int)(y_43)];
            row_45[x_42] = ch_44;
            g_41[y_43] = row_45;
        };
    }

    static void bresenham(long x0_46, long y0_47, long x1_48, long y1_49, string[][] g_50, string ch_51) {
        long dx_52 = (x1_48 - x0_46);
        if ((dx_52 < 0)) {
            dx_52 = -dx_52;
        };
        long dy_53 = (y1_49 - y0_47);
        if ((dy_53 < 0)) {
            dy_53 = -dy_53;
        };
        long sx_54 = -1;
        if ((x0_46 < x1_48)) {
            sx_54 = 1;
        };
        long sy_55 = -1;
        if ((y0_47 < y1_49)) {
            sy_55 = 1;
        };
        long err_56 = (dx_52 - dy_53);
        while (true) {
            drawPoint(g_50, x0_46, y0_47, ch_51);
            if (((x0_46 == x1_48) && (y0_47 == y1_49))) {
                break;
            }
            long e2_57 = (2 * err_56);
            if ((e2_57 > -dy_53)) {
                err_56 = (err_56 - dy_53);
                x0_46 = (x0_46 + sx_54);
            }
            if ((e2_57 < dx_52)) {
                err_56 = (err_56 + dx_52);
                y0_47 = (y0_47 + sy_55);
            }
        };
    }

    static string render(string[][] g_58) {
        string out_59 = "";
        long y_60 = 0;
        while ((y_60 < height_30)) {
            string line_61 = "";
            long x_62 = 0;
            while ((x_62 < width_29)) {
                line_61 = (line_61 + g_58[(int)(y_60)][(int)(x_62)]);
                x_62 = (x_62 + 1);
            }
            out_59 = ((out_59 + line_61) + "\n");
            y_60 = (y_60 + 1);
        };
        return out_59;
    }

    static void main() {
        long f_63 = 0;
        while ((f_63 < 10)) {
            string[][] grid_64 = clearGrid();
            Point2[] rot_65 = new Point2[]{};
            long i_66 = 0;
            double ay_67 = ((PI_0 / 4) + ((((dynamic)Convert.ToDouble(f_63)) * ((dynamic)PI_0)) / 10));
            while ((i_66 < nodes_15.Length)) {
                Point3 p_68 = rotate(nodes_15[(int)(i_66)], (PI_0 / 4), ay_67);
                Point2 pp_69 = project(p_68);
                rot_65 = (Enumerable.ToArray(Enumerable.Append(rot_65, pp_69)));
                i_66 = (i_66 + 1);
            }
            long e_70 = 0;
            while ((e_70 < edges_16.Length)) {
                long a_71 = edges_16[(int)(e_70)][(int)(0)];
                long b_72 = edges_16[(int)(e_70)][(int)(1)];
                Point2 p1_73 = rot_65[(int)(a_71)];
                Point2 p2_74 = rot_65[(int)(b_72)];
                bresenham(p1_73.x, p1_73.y, p2_74.x, p2_74.y, grid_64, "#");
                e_70 = (e_70 + 1);
            }
            Console.WriteLine(_fmtTop(render(grid_64)));
            f_63 = (f_63 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
