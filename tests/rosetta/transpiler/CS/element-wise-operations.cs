// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double pow10(long n_0) {
        double r_1 = 1;
        long i_2 = 0;
        while ((i_2 < n_0)) {
            r_1 = (r_1 * 10);
            i_2 = (i_2 + 1);
        };
        return r_1;
    }

    static double powf(double base_3, double exp_4) {
        if ((exp_4 == 0.5)) {
            double guess_5 = base_3;
            long i_6 = 0;
            while ((i_6 < 20)) {
                guess_5 = ((guess_5 + (base_3 / guess_5)) / 2);
                i_6 = (i_6 + 1);
            }
            return guess_5;
        };
        double result_7 = 1;
        var n_8 = Convert.ToInt64(exp_4);
        long i_9 = 0;
        while ((i_9 < n_8)) {
            result_7 = (result_7 * base_3);
            i_9 = (i_9 + 1);
        };
        return result_7;
    }

    static string formatFloat(double f_10, long prec_11) {
        double scale_12 = pow10(prec_11);
        double scaled_13 = ((f_10 * scale_12) + 0.5);
        var n_14 = Convert.ToInt64(scaled_13);
        string digits_15 = (n_14).ToString();
        while ((digits_15.Length <= prec_11)) {
            digits_15 = ("0" + digits_15);
        };
        string intPart_16 = digits_15.Substring((int)(0), (int)((((dynamic)digits_15.Length) - ((dynamic)prec_11)) - 0));
        string fracPart_17 = digits_15.Substring((int)((((dynamic)digits_15.Length) - ((dynamic)prec_11))), (int)(digits_15.Length - (((dynamic)digits_15.Length) - ((dynamic)prec_11))));
        return ((intPart_16 + ".") + fracPart_17);
    }

    static string padLeft(string s_18, long w_19) {
        string res_20 = "";
        long n_21 = (((dynamic)w_19) - ((dynamic)s_18.Length));
        while ((n_21 > 0)) {
            res_20 = (res_20 + " ");
            n_21 = (n_21 - 1);
        };
        return (res_20 + s_18);
    }

    static string rowString(double[] row_22) {
        string s_23 = "[";
        long i_24 = 0;
        while ((i_24 < row_22.Length)) {
            s_23 = (s_23 + padLeft(formatFloat(row_22[(int)(i_24)], 3), 6));
            if ((i_24 < (((dynamic)row_22.Length) - ((dynamic)1)))) {
                s_23 = (s_23 + " ");
            }
            i_24 = (i_24 + 1);
        };
        return (s_23 + "] ");
    }

    static void printMatrix(string heading_25, double[][] m_26) {
        Console.WriteLine(_fmtTop(heading_25));
        long i_27 = 0;
        while ((i_27 < m_26.Length)) {
            Console.WriteLine(_fmtTop(rowString(m_26[(int)(i_27)])));
            i_27 = (i_27 + 1);
        };
    }

    static double[][] elementWiseMM(double[][] m1_28, double[][] m2_29, Func<double, double, double> f_30) {
        double[][] z_31 = new double[][]{};
        long r_32 = 0;
        while ((r_32 < m1_28.Length)) {
            double[] row_33 = new double[]{};
            long c_34 = 0;
            while ((c_34 < m1_28[(int)(r_32)].Length)) {
                row_33 = (Enumerable.ToArray(Enumerable.Append(row_33, f_30(m1_28[(int)(r_32)][(int)(c_34)], m2_29[(int)(r_32)][(int)(c_34)]))));
                c_34 = (c_34 + 1);
            }
            z_31 = (Enumerable.ToArray(Enumerable.Append(z_31, row_33)));
            r_32 = (r_32 + 1);
        };
        return z_31;
    }

    static double[][] elementWiseMS(double[][] m_35, double s_36, Func<double, double, double> f_37) {
        double[][] z_38 = new double[][]{};
        long r_39 = 0;
        while ((r_39 < m_35.Length)) {
            double[] row_40 = new double[]{};
            long c_41 = 0;
            while ((c_41 < m_35[(int)(r_39)].Length)) {
                row_40 = (Enumerable.ToArray(Enumerable.Append(row_40, f_37(m_35[(int)(r_39)][(int)(c_41)], s_36))));
                c_41 = (c_41 + 1);
            }
            z_38 = (Enumerable.ToArray(Enumerable.Append(z_38, row_40)));
            r_39 = (r_39 + 1);
        };
        return z_38;
    }

    static double add(double a_42, double b_43) {
        return (a_42 + b_43);
    }

    static double sub(double a_44, double b_45) {
        return (a_44 - b_45);
    }

    static double mul(double a_46, double b_47) {
        return (a_46 * b_47);
    }

    static double div(double a_48, double b_49) {
        return (a_48 / b_49);
    }

    static double exp(double a_50, double b_51) {
        return powf(a_50, b_51);
    }

    static void main() {
        double[][] m1_52 = new double[][]{new double[]{3, 1, 4}, new double[]{1, 5, 9}};
        double[][] m2_53 = new double[][]{new double[]{2, 7, 1}, new double[]{8, 2, 8}};
        printMatrix("m1:", m1_52);
        printMatrix("m2:", m2_53);
        Console.WriteLine(_fmtTop(""));
        printMatrix("m1 + m2:", elementWiseMM(m1_52, m2_53, add));
        printMatrix("m1 - m2:", elementWiseMM(m1_52, m2_53, sub));
        printMatrix("m1 * m2:", elementWiseMM(m1_52, m2_53, mul));
        printMatrix("m1 / m2:", elementWiseMM(m1_52, m2_53, div));
        printMatrix("m1 ^ m2:", elementWiseMM(m1_52, m2_53, exp));
        Console.WriteLine(_fmtTop(""));
        double s_54 = 0.5;
        Console.WriteLine(_fmtTop(("s: " + (s_54).ToString())));
        printMatrix("m1 + s:", elementWiseMS(m1_52, s_54, add));
        printMatrix("m1 - s:", elementWiseMS(m1_52, s_54, sub));
        printMatrix("m1 * s:", elementWiseMS(m1_52, s_54, mul));
        printMatrix("m1 / s:", elementWiseMS(m1_52, s_54, div));
        printMatrix("m1 ^ s:", elementWiseMS(m1_52, s_54, exp));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
