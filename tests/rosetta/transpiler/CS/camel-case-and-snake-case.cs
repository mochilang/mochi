// Generated by Mochi 0.10.52 on 2025-07-31 08:37 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string trimSpace(string s_0) {
        long start_1 = 0;
        while (((Convert.ToDouble(start_1) < Convert.ToDouble(s_0.Length)) && (s_0.Substring((int)(start_1), (int)((start_1 + 1) - start_1)) == " "))) {
            start_1 = (start_1 + 1);
        };
        long end_2 = s_0.Length;
        while (((end_2 > start_1) && (s_0.Substring((int)((end_2 - 1)), (int)(end_2 - (end_2 - 1))) == " "))) {
            end_2 = (end_2 - 1);
        };
        return s_0.Substring((int)(start_1), (int)(end_2 - start_1));
    }

    static bool isUpper(string ch_3) {
        return ((string.Compare(ch_3, "A") >= 0) && (string.Compare(ch_3, "Z") <= 0));
    }

    static string padLeft(string s_4, long w_5) {
        string res_6 = "";
        long n_7 = (((dynamic)(w_5)) - ((dynamic)(s_4.Length)));
        while ((n_7 > 0)) {
            res_6 = (res_6 + " ");
            n_7 = (n_7 - 1);
        };
        return (res_6 + s_4);
    }

    static string snakeToCamel(string s_8) {
        s_8 = trimSpace(s_8);
        string out_9 = "";
        bool up_10 = false;
        long i_11 = 0;
        while ((Convert.ToDouble(i_11) < Convert.ToDouble(s_8.Length))) {
            string ch_12 = s_8.Substring((int)(i_11), (int)((i_11 + 1) - i_11));
            if (((((ch_12 == "_") || (ch_12 == "-")) || (ch_12 == " ")) || (ch_12 == "."))) {
                up_10 = true;
                i_11 = (i_11 + 1);
                continue;
            }
            if ((i_11 == 0)) {
                out_9 = (out_9 + ch_12.ToLower());
                up_10 = false;
                i_11 = (i_11 + 1);
                continue;
            }
            if (up_10) {
                out_9 = (out_9 + ch_12.ToUpper());
                up_10 = false;
            } else {
                out_9 = (out_9 + ch_12);
            }
            i_11 = (i_11 + 1);
        };
        return out_9;
    }

    static string camelToSnake(string s_13) {
        s_13 = trimSpace(s_13);
        string out_14 = "";
        bool prevUnd_15 = false;
        long i_16 = 0;
        while ((Convert.ToDouble(i_16) < Convert.ToDouble(s_13.Length))) {
            string ch_17 = s_13.Substring((int)(i_16), (int)((i_16 + 1) - i_16));
            if ((((ch_17 == " ") || (ch_17 == "-")) || (ch_17 == "."))) {
                if (((!prevUnd_15) && (Convert.ToDouble(out_14.Length) > Convert.ToDouble(0)))) {
                    out_14 = (out_14 + "_");
                    prevUnd_15 = true;
                }
                i_16 = (i_16 + 1);
                continue;
            }
            if ((ch_17 == "_")) {
                if (((!prevUnd_15) && (Convert.ToDouble(out_14.Length) > Convert.ToDouble(0)))) {
                    out_14 = (out_14 + "_");
                    prevUnd_15 = true;
                }
                i_16 = (i_16 + 1);
                continue;
            }
            if (isUpper(ch_17)) {
                if (((i_16 > 0) && (!prevUnd_15))) {
                    out_14 = (out_14 + "_");
                }
                out_14 = (out_14 + ch_17.ToLower());
                prevUnd_15 = false;
            } else {
                out_14 = (out_14 + ch_17.ToLower());
                prevUnd_15 = false;
            }
            i_16 = (i_16 + 1);
        };
        long start_18 = 0;
        while (((Convert.ToDouble(start_18) < Convert.ToDouble(out_14.Length)) && (out_14.Substring((int)(start_18), (int)((start_18 + 1) - start_18)) == "_"))) {
            start_18 = (start_18 + 1);
        };
        long end_19 = out_14.Length;
        while (((end_19 > start_18) && (out_14.Substring((int)((end_19 - 1)), (int)(end_19 - (end_19 - 1))) == "_"))) {
            end_19 = (end_19 - 1);
        };
        out_14 = out_14.Substring((int)(start_18), (int)(end_19 - start_18));
        string res_20 = "";
        long j_21 = 0;
        bool lastUnd_22 = false;
        while ((Convert.ToDouble(j_21) < Convert.ToDouble(out_14.Length))) {
            string c_23 = out_14.Substring((int)(j_21), (int)((j_21 + 1) - j_21));
            if ((c_23 == "_")) {
                if ((!lastUnd_22)) {
                    res_20 = (res_20 + c_23);
                }
                lastUnd_22 = true;
            } else {
                res_20 = (res_20 + c_23);
                lastUnd_22 = false;
            }
            j_21 = (j_21 + 1);
        };
        return res_20;
    }

    static void main() {
        string[] samples_24 = new string[]{"snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "};
        Console.WriteLine(_fmtTop("=== To snake_case ==="));
        foreach (var s_25 in samples_24) {
            Console.WriteLine(_fmtTop(((padLeft(s_25, 34) + " => ") + camelToSnake(s_25))));
        };
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("=== To camelCase ==="));
        foreach (var s_26 in samples_24) {
            Console.WriteLine(_fmtTop(((padLeft(s_26, 34) + " => ") + snakeToCamel(s_26))));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
