// Generated by Mochi 0.10.52 on 2025-08-01 15:22 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] small_0 = new string[]{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
    static string[] tens_1 = new string[]{"", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};
    static string[] smallOrd_2 = new string[]{"zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth"};
    static string[] tensOrd_3 = new string[]{"", "", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth"};
    static string[] words_23 = new string[]{"Four", "is", "the", "number", "of", "letters", "in", "the", "first", "word", "of", "this", "sentence,"};
    static long idx_24 = 0;
    static string say(long n_4) {
        if ((n_4 < 20)) {
            return small_0[(int)(n_4)];
        };
        if ((n_4 < 100)) {
            string res_5 = tens_1[(int)((n_4 / 10))];
            long m_6 = (n_4 % 10);
            if ((m_6 != 0)) {
                res_5 = ((res_5 + "-") + small_0[(int)(m_6)]);
            }
            return res_5;
        };
        if ((n_4 < 1000)) {
            string res_7 = (say((n_4 / 100)) + " hundred");
            long m_8 = (n_4 % 100);
            if ((m_8 != 0)) {
                res_7 = ((res_7 + " ") + say(m_8));
            }
            return res_7;
        };
        if ((n_4 < 1000000)) {
            string res_9 = (say((n_4 / 1000)) + " thousand");
            long m_10 = (n_4 % 1000);
            if ((m_10 != 0)) {
                res_9 = ((res_9 + " ") + say(m_10));
            }
            return res_9;
        };
        string res_11 = (say((n_4 / 1000000)) + " million");
        long m_12 = (n_4 % 1000000);
        if ((m_12 != 0)) {
            res_11 = ((res_11 + " ") + say(m_12));
        };
        return res_11;
    }

    static string sayOrdinal(long n_13) {
        if ((n_13 < 20)) {
            return smallOrd_2[(int)(n_13)];
        };
        if ((n_13 < 100)) {
            if (((n_13 % 10) == 0)) {
                return tensOrd_3[(int)((n_13 / 10))];
            }
            return ((say((n_13 - (n_13 % 10))) + "-") + smallOrd_2[(int)((n_13 % 10))]);
        };
        if ((n_13 < 1000)) {
            if (((n_13 % 100) == 0)) {
                return (say((n_13 / 100)) + " hundredth");
            }
            return ((say((n_13 / 100)) + " hundred ") + sayOrdinal((n_13 % 100)));
        };
        if ((n_13 < 1000000)) {
            if (((n_13 % 1000) == 0)) {
                return (say((n_13 / 1000)) + " thousandth");
            }
            return ((say((n_13 / 1000)) + " thousand ") + sayOrdinal((n_13 % 1000)));
        };
        if (((n_13 % 1000000) == 0)) {
            return (say((n_13 / 1000000)) + " millionth");
        };
        return ((say((n_13 / 1000000)) + " million ") + sayOrdinal((n_13 % 1000000)));
    }

    static string[] split(string s_14, string sep_15) {
        string[] parts_16 = new string[]{};
        string cur_17 = "";
        long i_18 = 0;
        while ((Convert.ToDouble(i_18) < Convert.ToDouble(s_14.Length))) {
            if ((((Convert.ToDouble(sep_15.Length) > Convert.ToDouble(0)) && (Convert.ToDouble((((dynamic)(i_18)) + ((dynamic)(sep_15.Length)))) <= Convert.ToDouble(s_14.Length))) && (s_14.Substring((int)(i_18), (int)((((dynamic)(i_18)) + ((dynamic)(sep_15.Length))) - i_18)) == sep_15))) {
                parts_16 = (Enumerable.ToArray(Enumerable.Append(parts_16, cur_17)));
                cur_17 = "";
                i_18 = (((dynamic)(i_18)) + ((dynamic)(sep_15.Length)));
            } else {
                cur_17 = (cur_17 + s_14.Substring((int)(i_18), (int)((i_18 + 1) - i_18)));
                i_18 = (i_18 + 1);
            }
        };
        parts_16 = (Enumerable.ToArray(Enumerable.Append(parts_16, cur_17)));
        return parts_16;
    }

    static long countLetters(string s_19) {
        long cnt_20 = 0;
        long i_21 = 0;
        while ((Convert.ToDouble(i_21) < Convert.ToDouble(s_19.Length))) {
            string ch_22 = s_19.Substring((int)(i_21), (int)((i_21 + 1) - i_21));
            if ((((string.Compare(ch_22, "A") >= 0) && (string.Compare(ch_22, "Z") <= 0)) || ((string.Compare(ch_22, "a") >= 0) && (string.Compare(ch_22, "z") <= 0)))) {
                cnt_20 = (cnt_20 + 1);
            }
            i_21 = (i_21 + 1);
        };
        return cnt_20;
    }

    static object[] wordLen(long w_25) {
        while ((Convert.ToDouble(words_23.Length) < Convert.ToDouble(w_25))) {
            idx_24 = (idx_24 + 1);
            long n_26 = countLetters(words_23[(int)(idx_24)]);
            string[] parts_27 = split(say(n_26), " ");
            long j_28 = 0;
            while ((Convert.ToDouble(j_28) < Convert.ToDouble(parts_27.Length))) {
                words_23 = (Enumerable.ToArray(Enumerable.Append(words_23, parts_27[(int)(j_28)])));
                j_28 = (j_28 + 1);
            }
            words_23 = (Enumerable.ToArray(Enumerable.Append(words_23, "in")));
            words_23 = (Enumerable.ToArray(Enumerable.Append(words_23, "the")));
            parts_27 = split((sayOrdinal((idx_24 + 1)) + ","), " ");
            j_28 = 0;
            while ((Convert.ToDouble(j_28) < Convert.ToDouble(parts_27.Length))) {
                words_23 = (Enumerable.ToArray(Enumerable.Append(words_23, parts_27[(int)(j_28)])));
                j_28 = (j_28 + 1);
            }
        };
        string word_29 = words_23[(int)((w_25 - 1))];
        return new object[]{word_29, countLetters(word_29)};
    }

    static long totalLength() {
        long tot_30 = 0;
        long i_31 = 0;
        while ((Convert.ToDouble(i_31) < Convert.ToDouble(words_23.Length))) {
            tot_30 = (((dynamic)(tot_30)) + ((dynamic)(words_23[(int)(i_31)].Length)));
            if ((i_31 < (((dynamic)(words_23.Length)) - ((dynamic)(1))))) {
                tot_30 = (tot_30 + 1);
            }
            i_31 = (i_31 + 1);
        };
        return tot_30;
    }

    static string pad(long n_32, long width_33) {
        string s_34 = _fmt(n_32);
        while ((Convert.ToDouble(s_34.Length) < Convert.ToDouble(width_33))) {
            s_34 = (" " + s_34);
        };
        return s_34;
    }

    static void main() {
        Console.WriteLine(_fmtTop("The lengths of the first 201 words are:"));
        string line_35 = "";
        long i_36 = 1;
        while ((i_36 <= 201)) {
            if (((i_36 % 25) == 1)) {
                if ((i_36 != 1)) {
                    Console.WriteLine(_fmtTop(line_35));
                }
                line_35 = (pad(i_36, 3) + ":");
            }
            object[] r_37 = wordLen(i_36);
            object n_38 = ((dynamic)r_37)[1];
            line_35 = ((line_35 + " ") + pad(Convert.ToInt64(n_38), 2));
            i_36 = (i_36 + 1);
        };
        Console.WriteLine(_fmtTop(line_35));
        Console.WriteLine(_fmtTop(("Length of sentence so far: " + _fmt(totalLength()))));
        foreach (var n_39 in new long[]{1000, 10000, 100000, 1000000, 10000000}) {
            object[] r_40 = wordLen(n_39);
            object w_41 = ((dynamic)r_40)[0];
            object l_42 = ((dynamic)r_40)[1];
            Console.WriteLine(_fmtTop((((((((dynamic)((("Word " + pad(n_39, 8)) + " is \""))) + ((dynamic)(w_41))) + "\", with ") + _fmt(l_42)) + " letters.  Length of sentence so far: ") + _fmt(totalLength()))));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
