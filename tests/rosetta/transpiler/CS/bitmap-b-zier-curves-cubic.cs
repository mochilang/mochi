// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Pixel {
    public long r;
    public long g;
    public long b;
    public override string ToString() => $"Pixel {{r = {r}, g = {g}, b = {b}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static long b3Seg_0 = 30;
    static Dictionary<string, object> b_70 = newBitmap(400, 300);
    static Pixel pixelFromRgb(long rgb_1) {
        long r_2 = Convert.ToInt64(((rgb_1 / 65536) % 256));
        long g_3 = Convert.ToInt64(((rgb_1 / 256) % 256));
        long b_4 = Convert.ToInt64((rgb_1 % 256));
        return new Pixel{r = r_2, g = g_3, b = b_4};
    }

    static Dictionary<string, object> newBitmap(long cols_5, long rows_6) {
        Pixel[][] d_7 = new Pixel[][]{};
        long y_8 = 0;
        while ((y_8 < rows_6)) {
            Pixel[] row_9 = new Pixel[]{};
            long x_10 = 0;
            while ((x_10 < cols_5)) {
                row_9 = (Enumerable.ToArray(Enumerable.Append(row_9, new Pixel{r = 0, g = 0, b = 0})));
                x_10 = (x_10 + 1);
            }
            d_7 = (Enumerable.ToArray(Enumerable.Append(d_7, row_9)));
            y_8 = (y_8 + 1);
        };
        return new Dictionary<string, object>{{"cols", cols_5}, {"rows", rows_6}, {"data", d_7}};
    }

    static void setPx(Dictionary<string, object> b_11, long x_12, long y_13, Pixel p_14) {
        long cols_15 = Convert.ToInt64(((dynamic)b_11)["cols"]);
        long rows_16 = Convert.ToInt64(((dynamic)b_11)["rows"]);
        if (((((x_12 >= 0) && (x_12 < cols_15)) && (y_13 >= 0)) && (y_13 < rows_16))) {
            ((dynamic)((dynamic)b_11)["data"])[y_13][x_12] = p_14;
        };
    }

    static void fill(Dictionary<string, object> b_17, Pixel p_18) {
        long cols_19 = Convert.ToInt64(((dynamic)b_17)["cols"]);
        long rows_20 = Convert.ToInt64(((dynamic)b_17)["rows"]);
        long y_21 = 0;
        while ((y_21 < rows_20)) {
            long x_22 = 0;
            while ((x_22 < cols_19)) {
                ((dynamic)((dynamic)b_17)["data"])[y_21][x_22] = p_18;
                x_22 = (x_22 + 1);
            }
            y_21 = (y_21 + 1);
        };
    }

    static void fillRgb(Dictionary<string, object> b_23, long rgb_24) {
        fill(b_23, pixelFromRgb(rgb_24));
    }

    static void line(Dictionary<string, object> b_25, long x0_26, long y0_27, long x1_28, long y1_29, Pixel p_30) {
        long dx_31 = (x1_28 - x0_26);
        if ((dx_31 < 0)) {
            dx_31 = -dx_31;
        };
        long dy_32 = (y1_29 - y0_27);
        if ((dy_32 < 0)) {
            dy_32 = -dy_32;
        };
        long sx_33 = -1;
        if ((x0_26 < x1_28)) {
            sx_33 = 1;
        };
        long sy_34 = -1;
        if ((y0_27 < y1_29)) {
            sy_34 = 1;
        };
        long err_35 = (dx_31 - dy_32);
        while (true) {
            setPx(b_25, x0_26, y0_27, p_30);
            if (((x0_26 == x1_28) && (y0_27 == y1_29))) {
                break;
            }
            long e2_36 = (2 * err_35);
            if ((e2_36 > (0 - dy_32))) {
                err_35 = (err_35 - dy_32);
                x0_26 = (x0_26 + sx_33);
            }
            if ((e2_36 < dx_31)) {
                err_35 = (err_35 + dx_31);
                y0_27 = (y0_27 + sy_34);
            }
        };
    }

    static void bezier3(Dictionary<string, object> b_37, long x1_38, long y1_39, long x2_40, long y2_41, long x3_42, long y3_43, long x4_44, long y4_45, Pixel p_46) {
        long[] px_47 = new long[]{};
        long[] py_48 = new long[]{};
        long i_49 = 0;
        while ((i_49 <= b3Seg_0)) {
            px_47 = (Enumerable.ToArray(Enumerable.Append(px_47, 0)));
            py_48 = (Enumerable.ToArray(Enumerable.Append(py_48, 0)));
            i_49 = (i_49 + 1);
        };
        double fx1_50 = Convert.ToDouble(x1_38);
        double fy1_51 = Convert.ToDouble(y1_39);
        double fx2_52 = Convert.ToDouble(x2_40);
        double fy2_53 = Convert.ToDouble(y2_41);
        double fx3_54 = Convert.ToDouble(x3_42);
        double fy3_55 = Convert.ToDouble(y3_43);
        double fx4_56 = Convert.ToDouble(x4_44);
        double fy4_57 = Convert.ToDouble(y4_45);
        i_49 = 0;
        while ((i_49 <= b3Seg_0)) {
            double d_58 = (Convert.ToDouble(i_49) / Convert.ToDouble(b3Seg_0));
            double a_59 = (1.0 - d_58);
            double bcoef_60 = (a_59 * a_59);
            double ccoef_61 = (d_58 * d_58);
            double a2_62 = (a_59 * bcoef_60);
            double b2_63 = ((3.0 * bcoef_60) * d_58);
            double c2_64 = ((3.0 * a_59) * ccoef_61);
            double d2_65 = (ccoef_61 * d_58);
            px_47[i_49] = Convert.ToInt64(((((a2_62 * fx1_50) + (b2_63 * fx2_52)) + (c2_64 * fx3_54)) + (d2_65 * fx4_56)));
            py_48[i_49] = Convert.ToInt64(((((a2_62 * fy1_51) + (b2_63 * fy2_53)) + (c2_64 * fy3_55)) + (d2_65 * fy4_57)));
            i_49 = (i_49 + 1);
        };
        long x0_66 = px_47[(int)(0)];
        long y0_67 = py_48[(int)(0)];
        i_49 = 1;
        while ((i_49 <= b3Seg_0)) {
            long x_68 = px_47[(int)(i_49)];
            long y_69 = py_48[(int)(i_49)];
            line(b_37, x0_66, y0_67, x_68, y_69, p_46);
            x0_66 = x_68;
            y0_67 = y_69;
            i_49 = (i_49 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            fillRgb(b_70, 16773055);
            bezier3(b_70, 20, 200, 700, 50, -300, 50, 380, 150, pixelFromRgb(4165615));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
