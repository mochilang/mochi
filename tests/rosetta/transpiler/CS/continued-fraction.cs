// Generated by Mochi 0.10.41 on 2025-07-27 07:48 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, long> newTerm(long a_0, long b_1) {
        return new Dictionary<string, long>{{"a", a_0}, {"b", b_1}};
    }

    static Dictionary<string, long>[] cfSqrt2(long nTerms_2) {
        Dictionary<string, long>[] f_3 = new Dictionary<string, long>[]{};
        long n_4 = 0;
        while ((n_4 < nTerms_2)) {
            f_3 = (Enumerable.ToArray(Enumerable.Append(f_3, newTerm(2, 1))));
            n_4 = (n_4 + 1);
        };
        if ((nTerms_2 > 0)) {
            f_3[(int)(0)]["a"] = 1;
        };
        return f_3;
    }

    static Dictionary<string, long>[] cfNap(long nTerms_5) {
        Dictionary<string, long>[] f_6 = new Dictionary<string, long>[]{};
        long n_7 = 0;
        while ((n_7 < nTerms_5)) {
            f_6 = (Enumerable.ToArray(Enumerable.Append(f_6, newTerm(n_7, (n_7 - 1)))));
            n_7 = (n_7 + 1);
        };
        if ((nTerms_5 > 0)) {
            f_6[(int)(0)]["a"] = 2;
        };
        if ((nTerms_5 > 1)) {
            f_6[(int)(1)]["b"] = 1;
        };
        return f_6;
    }

    static Dictionary<string, long>[] cfPi(long nTerms_8) {
        Dictionary<string, long>[] f_9 = new Dictionary<string, long>[]{};
        long n_10 = 0;
        while ((n_10 < nTerms_8)) {
            long g_11 = ((2 * n_10) - 1);
            f_9 = (Enumerable.ToArray(Enumerable.Append(f_9, newTerm(6, (g_11 * g_11)))));
            n_10 = (n_10 + 1);
        };
        if ((nTerms_8 > 0)) {
            f_9[(int)(0)]["a"] = 3;
        };
        return f_9;
    }

    static double real(Dictionary<string, long>[] f_12) {
        double r_13 = 0;
        long i_14 = (((dynamic)f_12.Length) - ((dynamic)1));
        while ((i_14 > 0)) {
            r_13 = (((dynamic)Convert.ToDouble((f_12[(int)(i_14)].ContainsKey("b") ? f_12[(int)(i_14)]["b"] : 0))) / ((dynamic)(((dynamic)Convert.ToDouble((f_12[(int)(i_14)].ContainsKey("a") ? f_12[(int)(i_14)]["a"] : 0))) + ((dynamic)r_13))));
            i_14 = (i_14 - 1);
        };
        if ((f_12.Length > 0)) {
            r_13 = (((dynamic)r_13) + ((dynamic)Convert.ToDouble((f_12[(int)(0)].ContainsKey("a") ? f_12[(int)(0)]["a"] : 0))));
        };
        return r_13;
    }

    static void main() {
        Console.WriteLine(_fmtTop(("sqrt2: " + (real(cfSqrt2(20))).ToString())));
        Console.WriteLine(_fmtTop(("nap:   " + (real(cfNap(20))).ToString())));
        Console.WriteLine(_fmtTop(("pi:    " + (real(cfPi(20))).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
