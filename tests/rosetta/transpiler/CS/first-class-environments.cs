// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class HailResult {
    public long seq;
    public long cnt;
    public string _out;
    public override string ToString() => $"HailResult {{seq = {seq}, cnt = {cnt}, _out = \"{_out}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long jobs_0 = 12;
    static string pad(long n_1) {
        string s_2 = (n_1).ToString();
        while ((s_2.Length < 4)) {
            s_2 = (" " + s_2);
        };
        return s_2;
    }

    static HailResult hail(long seq_3, long cnt_4) {
        string out_5 = pad(seq_3);
        if ((seq_3 != 1)) {
            cnt_4 = (cnt_4 + 1);
            if (((seq_3 % 2) != 0)) {
                seq_3 = ((3 * seq_3) + 1);
            } else {
                seq_3 = (seq_3 / 2);
            }
        };
        return new HailResult{seq = seq_3, cnt = cnt_4, _out = out_5};
    }

    static void main() {
        long[] seqs_6 = new long[]{};
        long[] cnts_7 = new long[]{};
        for (var i_8 = 0; i_8 < jobs_0; i_8++) {
            seqs_6 = (Enumerable.ToArray(Enumerable.Append(seqs_6, (i_8 + 1))));
            cnts_7 = (Enumerable.ToArray(Enumerable.Append(cnts_7, 0)));
        };
        while (true) {
            string line_9 = "";
            long i_10 = 0;
            while ((i_10 < jobs_0)) {
                HailResult res_11 = hail(seqs_6[(int)(i_10)], cnts_7[(int)(i_10)]);
                seqs_6[i_10] = res_11.seq;
                cnts_7[i_10] = res_11.cnt;
                line_9 = (line_9 + res_11._out);
                i_10 = (i_10 + 1);
            }
            Console.WriteLine(_fmtTop(line_9));
            bool done_12 = true;
            long j_13 = 0;
            while ((j_13 < jobs_0)) {
                if ((seqs_6[(int)(j_13)] != 1)) {
                    done_12 = false;
                }
                j_13 = (j_13 + 1);
            }
            if (done_12) {
                break;
            }
        };
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("COUNTS:"));
        string counts_14 = "";
        long k_15 = 0;
        while ((k_15 < jobs_0)) {
            counts_14 = (counts_14 + pad(cnts_7[(int)(k_15)]));
            k_15 = (k_15 + 1);
        };
        Console.WriteLine(_fmtTop(counts_14));
        Console.WriteLine(_fmtTop(""));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
