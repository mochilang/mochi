// Generated by Mochi 0.10.41 on 2025-07-27 11:03 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Writer {
    public string order;
    public long bits;
    public long nbits;
    public long[] data;
    public override string ToString() => $"Writer {{order = \"{order}\", bits = {bits}, nbits = {nbits}, data = {data}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long pow2(long n) {
        long v_0 = 1;
        long i_1 = 0;
        while ((i_1 < n)) {
            v_0 = (v_0 * 2);
            i_1 = (i_1 + 1);
        };
        return v_0;
    }

    static long lshift(long x, long n) {
        return (x * pow2(n));
    }

    static long rshift(long x, long n) {
        return (x / pow2(n));
    }

    static Writer NewWriter(string order) {
        return new Writer{order = order, bits = 0, nbits = 0, data = new long[]{}};
    }

    static Writer writeBitsLSB(Writer w, long c, long width) {
        w.bits = (w.bits + lshift(c, w.nbits));
        w.nbits = (w.nbits + width);
        while ((w.nbits >= 8)) {
            long b_2 = (w.bits % 256);
            w.data = (Enumerable.ToArray(Enumerable.Append(w.data, b_2)));
            w.bits = rshift(w.bits, 8);
            w.nbits = (w.nbits - 8);
        };
        return w;
    }

    static Writer writeBitsMSB(Writer w, long c, long width) {
        w.bits = (w.bits + lshift(c, ((32 - width) - w.nbits)));
        w.nbits = (w.nbits + width);
        while ((w.nbits >= 8)) {
            long b_3 = (rshift(w.bits, 24) % 256);
            w.data = (Enumerable.ToArray(Enumerable.Append(w.data, b_3)));
            w.bits = ((w.bits % pow2(24)) * 256);
            w.nbits = (w.nbits - 8);
        };
        return w;
    }

    static Writer WriteBits(Writer w, long c, long width) {
        if ((w.order == "LSB")) {
            return writeBitsLSB(w, c, width);
        };
        return writeBitsMSB(w, c, width);
    }

    static Writer CloseWriter(Writer w) {
        if ((w.nbits > 0)) {
            if ((w.order == "MSB")) {
                w.bits = rshift(w.bits, 24);
            }
            w.data = (Enumerable.ToArray(Enumerable.Append(w.data, (w.bits % 256))));
        };
        w.bits = 0;
        w.nbits = 0;
        return w;
    }

    static string toBinary(long n, long bits) {
        string b_4 = "";
        long val_5 = n;
        long i_6 = 0;
        while ((i_6 < bits)) {
            b_4 = (((val_5 % 2)).ToString() + b_4);
            val_5 = (val_5 / 2);
            i_6 = (i_6 + 1);
        };
        return b_4;
    }

    static string bytesToBits(long[] bs) {
        string out_7 = "[";
        long i_8 = 0;
        while ((i_8 < bs.Length)) {
            out_7 = (out_7 + toBinary(bs[(int)(i_8)], 8));
            if (((i_8 + 1) < bs.Length)) {
                out_7 = (out_7 + " ");
            }
            i_8 = (i_8 + 1);
        };
        out_7 = (out_7 + "]");
        return out_7;
    }

    static void ExampleWriter_WriteBits() {
        Writer bw_9 = NewWriter("MSB");
        bw_9 = WriteBits(bw_9, 15, 4);
        bw_9 = WriteBits(bw_9, 0, 1);
        bw_9 = WriteBits(bw_9, 19, 5);
        bw_9 = CloseWriter(bw_9);
        Console.WriteLine(_fmtTop(bytesToBits(bw_9.data)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            ExampleWriter_WriteBits();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
