// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Writer {
    public string order;
    public long bits;
    public long nbits;
    public long[] data;
    public override string ToString() => $"Writer {{order = \"{order}\", bits = {bits}, nbits = {nbits}, data = {data}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long pow2(long n_0) {
        long v_1 = 1;
        long i_2 = 0;
        while ((i_2 < n_0)) {
            v_1 = (v_1 * 2);
            i_2 = (i_2 + 1);
        };
        return v_1;
    }

    static long lshift(long x_3, long n_4) {
        return (x_3 * pow2(n_4));
    }

    static long rshift(long x_5, long n_6) {
        return (x_5 / pow2(n_6));
    }

    static Writer NewWriter(string order_7) {
        return new Writer{order = order_7, bits = 0, nbits = 0, data = new long[]{}};
    }

    static Writer writeBitsLSB(Writer w_8, long c_9, long width_10) {
        w_8.bits = (w_8.bits + lshift(c_9, w_8.nbits));
        w_8.nbits = (w_8.nbits + width_10);
        while ((w_8.nbits >= 8)) {
            long b_11 = (w_8.bits % 256);
            w_8.data = (Enumerable.ToArray(Enumerable.Append(w_8.data, b_11)));
            w_8.bits = rshift(w_8.bits, 8);
            w_8.nbits = (w_8.nbits - 8);
        };
        return w_8;
    }

    static Writer writeBitsMSB(Writer w_12, long c_13, long width_14) {
        w_12.bits = (w_12.bits + lshift(c_13, ((32 - width_14) - w_12.nbits)));
        w_12.nbits = (w_12.nbits + width_14);
        while ((w_12.nbits >= 8)) {
            long b_15 = (rshift(w_12.bits, 24) % 256);
            w_12.data = (Enumerable.ToArray(Enumerable.Append(w_12.data, b_15)));
            w_12.bits = ((w_12.bits % pow2(24)) * 256);
            w_12.nbits = (w_12.nbits - 8);
        };
        return w_12;
    }

    static Writer WriteBits(Writer w_16, long c_17, long width_18) {
        if ((w_16.order == "LSB")) {
            return writeBitsLSB(w_16, c_17, width_18);
        };
        return writeBitsMSB(w_16, c_17, width_18);
    }

    static Writer CloseWriter(Writer w_19) {
        if ((w_19.nbits > 0)) {
            if ((w_19.order == "MSB")) {
                w_19.bits = rshift(w_19.bits, 24);
            }
            w_19.data = (Enumerable.ToArray(Enumerable.Append(w_19.data, (w_19.bits % 256))));
        };
        w_19.bits = 0;
        w_19.nbits = 0;
        return w_19;
    }

    static string toBinary(long n_20, long bits_21) {
        string b_22 = "";
        long val_23 = n_20;
        long i_24 = 0;
        while ((i_24 < bits_21)) {
            b_22 = (_fmt((val_23 % 2)) + b_22);
            val_23 = (val_23 / 2);
            i_24 = (i_24 + 1);
        };
        return b_22;
    }

    static string bytesToBits(long[] bs_25) {
        string out_26 = "[";
        long i_27 = 0;
        while ((Convert.ToDouble(i_27) < Convert.ToDouble(bs_25.Length))) {
            out_26 = (out_26 + toBinary(bs_25[(int)(i_27)], 8));
            if ((Convert.ToDouble((i_27 + 1)) < Convert.ToDouble(bs_25.Length))) {
                out_26 = (out_26 + " ");
            }
            i_27 = (i_27 + 1);
        };
        out_26 = (out_26 + "]");
        return out_26;
    }

    static void ExampleWriter_WriteBits() {
        Writer bw_28 = NewWriter("MSB");
        bw_28 = WriteBits(bw_28, 15, 4);
        bw_28 = WriteBits(bw_28, 0, 1);
        bw_28 = WriteBits(bw_28, 19, 5);
        bw_28 = CloseWriter(bw_28);
        Console.WriteLine(_fmtTop(bytesToBits(bw_28.data)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            ExampleWriter_WriteBits();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
