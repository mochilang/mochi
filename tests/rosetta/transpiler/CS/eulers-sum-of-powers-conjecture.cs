// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] eulerSum() {
        long[] pow5_0 = new long[]{};
        long i_1 = 0;
        while ((i_1 < 250)) {
            pow5_0 = (Enumerable.ToArray(Enumerable.Append(pow5_0, ((((i_1 * i_1) * i_1) * i_1) * i_1))));
            i_1 = (i_1 + 1);
        };
        Dictionary<long, long[]> sums_2 = new Dictionary<long, long[]>{};
        long x2_3 = 2;
        while ((x2_3 < 250)) {
            long x3_4 = 1;
            while ((x3_4 < x2_3)) {
                long s_5 = (pow5_0[(int)(x2_3)] + pow5_0[(int)(x3_4)]);
                if ((!(sums_2.ContainsKey(s_5)))) {
                    sums_2[s_5] = new long[]{x2_3, x3_4};
                }
                x3_4 = (x3_4 + 1);
            }
            x2_3 = (x2_3 + 1);
        };
        long x0_6 = 4;
        while ((x0_6 < 250)) {
            long x1_7 = 3;
            while ((x1_7 < x0_6)) {
                long y_8 = (x0_6 + 1);
                while ((y_8 < 250)) {
                    long rem_9 = ((pow5_0[(int)(y_8)] - pow5_0[(int)(x0_6)]) - pow5_0[(int)(x1_7)]);
                    if ((sums_2.ContainsKey(rem_9))) {
                        long[] pair_10 = (sums_2.ContainsKey(rem_9) ? sums_2[rem_9] : null);
                        long a_11 = pair_10[(int)(0)];
                        long b_12 = pair_10[(int)(1)];
                        if (((x1_7 > a_11) && (a_11 > b_12))) {
                            return new long[]{x0_6, x1_7, a_11, b_12, y_8};
                        }
                    }
                    y_8 = (y_8 + 1);
                }
                x1_7 = (x1_7 + 1);
            }
            x0_6 = (x0_6 + 1);
        };
        return new long[]{0, 0, 0, 0, 0};
    }

    static void main() {
        long[] r_13 = eulerSum();
        Console.WriteLine(_fmtTop((((((((((r_13[(int)(0)]).ToString() + " ") + (r_13[(int)(1)]).ToString()) + " ") + (r_13[(int)(2)]).ToString()) + " ") + (r_13[(int)(3)]).ToString()) + " ") + (r_13[(int)(4)]).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
