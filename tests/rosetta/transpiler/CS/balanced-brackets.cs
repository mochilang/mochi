// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long seed_0 = 1;
    static long prng(long max_1) {
        seed_0 = (((seed_0 * 1103515245) + 12345) % 2147483648L);
        return (seed_0 % max_1);
    }

    static string gen(long n_2) {
        string[] arr_3 = new string[]{};
        long i_4 = 0;
        while ((i_4 < n_2)) {
            arr_3 = (Enumerable.ToArray(Enumerable.Append(arr_3, "[")));
            arr_3 = (Enumerable.ToArray(Enumerable.Append(arr_3, "]")));
            i_4 = (i_4 + 1);
        };
        long j_5 = (((dynamic)(arr_3.Length)) - ((dynamic)(1)));
        while ((j_5 > 0)) {
            long k_6 = prng((j_5 + 1));
            string tmp_7 = arr_3[(int)(j_5)];
            arr_3[j_5] = arr_3[(int)(k_6)];
            arr_3[k_6] = tmp_7;
            j_5 = (j_5 - 1);
        };
        string out_8 = "";
        foreach (var ch_9 in arr_3) {
            out_8 = (out_8 + ch_9);
        };
        return out_8;
    }

    static void testBalanced(string s_10) {
        long open_11 = 0;
        long i_12 = 0;
        while ((string.Compare(Convert.ToString(i_12), Convert.ToString(s_10.Length)) < 0)) {
            string c_13 = s_10.Substring((int)(i_12), (int)((i_12 + 1) - i_12));
            if ((c_13 == "[")) {
                open_11 = (open_11 + 1);
            } else {
                if ((c_13 == "]")) {
                    if ((open_11 == 0)) {
                        Console.WriteLine(_fmtTop((s_10 + ": not ok")));
                        return;
                    }
                    open_11 = (open_11 - 1);
                } else {
                    Console.WriteLine(_fmtTop((s_10 + ": not ok")));
                    return;
                }
            }
            i_12 = (i_12 + 1);
        };
        if ((open_11 == 0)) {
            Console.WriteLine(_fmtTop((s_10 + ": ok")));
        } else {
            Console.WriteLine(_fmtTop((s_10 + ": not ok")));
        };
    }

    static void main() {
        long i_14 = 0;
        while ((i_14 < 10)) {
            testBalanced(gen(i_14));
            i_14 = (i_14 + 1);
        };
        testBalanced("()");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
