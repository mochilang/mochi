// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long seed_0 = 1;
    static long prng(long max) {
        seed_0 = (((seed_0 * 1103515245) + 12345) % 2147483648L);
        return (seed_0 % max);
    }

    static string gen(long n) {
        string[] arr_1 = new string[]{};
        long i_2 = 0;
        while ((i_2 < n)) {
            arr_1 = (Enumerable.ToArray(Enumerable.Append(arr_1, "[")));
            arr_1 = (Enumerable.ToArray(Enumerable.Append(arr_1, "]")));
            i_2 = (i_2 + 1);
        };
        long j_3 = (((dynamic)arr_1.Length) - ((dynamic)1));
        while ((j_3 > 0)) {
            long k_4 = prng((j_3 + 1));
            string tmp_5 = arr_1[(int)(j_3)];
            arr_1[j_3] = arr_1[(int)(k_4)];
            arr_1[k_4] = tmp_5;
            j_3 = (j_3 - 1);
        };
        string out_6 = "";
        foreach (var ch_7 in arr_1) {
            out_6 = (out_6 + ch_7);
        };
        return out_6;
    }

    static void testBalanced(string s) {
        long open_8 = 0;
        long i_9 = 0;
        while ((i_9 < s.Length)) {
            string c_10 = s.Substring((int)(i_9), (int)((i_9 + 1) - i_9));
            if ((c_10 == "[")) {
                open_8 = (open_8 + 1);
            } else {
                if ((c_10 == "]")) {
                    if ((open_8 == 0)) {
                        Console.WriteLine(_fmtTop((s + ": not ok")));
                        return;
                    }
                    open_8 = (open_8 - 1);
                } else {
                    Console.WriteLine(_fmtTop((s + ": not ok")));
                    return;
                }
            }
            i_9 = (i_9 + 1);
        };
        if ((open_8 == 0)) {
            Console.WriteLine(_fmtTop((s + ": ok")));
        } else {
            Console.WriteLine(_fmtTop((s + ": not ok")));
        };
    }

    static void main() {
        long i_11 = 0;
        while ((i_11 < 10)) {
            testBalanced(gen(i_11));
            i_11 = (i_11 + 1);
        };
        testBalanced("()");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
