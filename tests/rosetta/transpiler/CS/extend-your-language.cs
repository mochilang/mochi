// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class If2 {
    public bool cond1;
    public bool cond2;
    public override string ToString() => $"If2 {{cond1 = {cond1}, cond2 = {cond2}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long a_9 = 0;
    static long b_10 = 1;
    static If2 t_11 = if2((a_9 == 1), (b_10 == 3), () => {Console.WriteLine(_fmtTop("a = 1 and b = 3"));});
    static If2 else1(If2 i_0, Action f_1) {
        if ((i_0.cond1 && (i_0.cond2 == false))) {
            f_1();
        };
        return i_0;
    }

    static If2 else2(If2 i_2, Action f_3) {
        if ((i_2.cond2 && (i_2.cond1 == false))) {
            f_3();
        };
        return i_2;
    }

    static If2 else0(If2 i_4, Action f_5) {
        if (((i_4.cond1 == false) && (i_4.cond2 == false))) {
            f_5();
        };
        return i_4;
    }

    static If2 if2(bool cond1_6, bool cond2_7, Action f_8) {
        if ((cond1_6 && cond2_7)) {
            f_8();
        };
        return new If2{cond1 = cond1_6, cond2 = cond2_7};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            t_11 = else1(t_11, () => {Console.WriteLine(_fmtTop("a = 1 and b <> 3"));});
            t_11 = else2(t_11, () => {Console.WriteLine(_fmtTop("a <> 1 and b = 3"));});
            else0(t_11, () => {Console.WriteLine(_fmtTop("a <> 1 and b <> 3"));});
            a_9 = 1;
            b_10 = 0;
            t_11 = if2((a_9 == 1), (b_10 == 3), () => {Console.WriteLine(_fmtTop("a = 1 and b = 3"));});
            t_11 = else0(t_11, () => {Console.WriteLine(_fmtTop("a <> 1 and b <> 3"));});
            else1(t_11, () => {Console.WriteLine(_fmtTop("a = 1 and b <> 3"));});
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
