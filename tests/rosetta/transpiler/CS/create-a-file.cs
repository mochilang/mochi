// Generated by Mochi 0.10.41 on 2025-07-27 14:57 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static void createFile(Dictionary<string, bool> fs_0, string fn_1) {
        if ((fs_0.ContainsKey(fn_1))) {
            Console.WriteLine(_fmtTop((("open " + fn_1) + ": file exists")));
        } else {
            fs_0[fn_1] = false;
            Console.WriteLine(_fmtTop((("file " + fn_1) + " created!")));
        };
    }

    static void createDir(Dictionary<string, bool> fs_2, string dn_3) {
        if ((fs_2.ContainsKey(dn_3))) {
            Console.WriteLine(_fmtTop((("mkdir " + dn_3) + ": file exists")));
        } else {
            fs_2[dn_3] = true;
            Console.WriteLine(_fmtTop((("directory " + dn_3) + " created!")));
        };
    }

    static void main() {
        Dictionary<string, bool> fs_4 = new Dictionary<string, bool>{};
        fs_4["docs"] = true;
        createFile(fs_4, "input.txt");
        createFile(fs_4, "/input.txt");
        createDir(fs_4, "docs");
        createDir(fs_4, "/docs");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
