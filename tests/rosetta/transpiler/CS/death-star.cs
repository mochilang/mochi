// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class V3 {
    public double x;
    public double y;
    public double z;
    public override string ToString() => $"V3 {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, z = {z.ToString("0.0")}}}";
}
class Sphere {
    public double cx;
    public double cy;
    public double cz;
    public double r;
    public override string ToString() => $"Sphere {{cx = {cx.ToString("0.0")}, cy = {cy.ToString("0.0")}, cz = {cz.ToString("0.0")}, r = {r.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double sqrtApprox(double x_0) {
        if ((x_0 <= 0)) {
            return 0;
        };
        double guess_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    static double powf(double base_3, long exp_4) {
        double result_5 = 1;
        long i_6 = 0;
        while ((i_6 < exp_4)) {
            result_5 = (result_5 * base_3);
            i_6 = (i_6 + 1);
        };
        return result_5;
    }

    static V3 normalize(V3 v_7) {
        double len_8 = sqrtApprox((((v_7.x * v_7.x) + (v_7.y * v_7.y)) + (v_7.z * v_7.z)));
        return new V3{x = (v_7.x / len_8), y = (v_7.y / len_8), z = (v_7.z / len_8)};
    }

    static double dot(V3 a_9, V3 b_10) {
        double d_11 = (((a_9.x * b_10.x) + (a_9.y * b_10.y)) + (a_9.z * b_10.z));
        if ((d_11 < 0)) {
            return -d_11;
        };
        return 0;
    }

    static Dictionary<string, object> hitSphere(Sphere s_12, double x_13, double y_14) {
        double dx_15 = (x_13 - s_12.cx);
        double dy_16 = (y_14 - s_12.cy);
        double zsq_17 = ((s_12.r * s_12.r) - ((dx_15 * dx_15) + (dy_16 * dy_16)));
        if ((zsq_17 < 0)) {
            return new Dictionary<string, object>{{"hit", false}};
        };
        double z_18 = sqrtApprox(zsq_17);
        return new Dictionary<string, object>{{"hit", true}, {"z1", (s_12.cz - z_18)}, {"z2", (s_12.cz + z_18)}};
    }

    static void main() {
        string shades_19 = ".:!*oe&#%@";
        V3 light_20 = normalize(new V3{x = -50, y = 30, z = 50});
        Sphere pos_21 = new Sphere{cx = 20, cy = 20, cz = 0, r = 20};
        Sphere neg_22 = new Sphere{cx = 1, cy = 1, cz = -6, r = 20};
        long yi_23 = 0;
        while ((yi_23 <= 40)) {
            double y_24 = (((dynamic)Convert.ToDouble(yi_23)) + ((dynamic)0.5));
            string line_25 = "";
            long xi_26 = -20;
            while ((xi_26 <= 60)) {
                double x_27 = ((((((dynamic)Convert.ToDouble(xi_26)) - ((dynamic)pos_21.cx)) / 2) + 0.5) + pos_21.cx);
                Dictionary<string, object> hb_28 = hitSphere(pos_21, x_27, y_24);
                if ((!Convert.ToBoolean(((dynamic)(hb_28["hit"]))))) {
                    line_25 = (line_25 + " ");
                    xi_26 = (xi_26 + 1);
                    continue;
                }
                var zb1_29 = ((dynamic)(hb_28["z1"]));
                var zb2_30 = ((dynamic)(hb_28["z2"]));
                Dictionary<string, object> hs_31 = hitSphere(neg_22, x_27, y_24);
                long hitRes_32 = 1;
                if ((!Convert.ToBoolean(((dynamic)(hs_31["hit"]))))) {
                    hitRes_32 = 1;
                } else {
                    if ((((dynamic)(hs_31["z1"])) > zb1_29)) {
                        hitRes_32 = 1;
                    } else {
                        if ((((dynamic)(hs_31["z2"])) > zb2_30)) {
                            hitRes_32 = 0;
                        } else {
                            if ((((dynamic)(hs_31["z2"])) > zb1_29)) {
                                hitRes_32 = 2;
                            } else {
                                hitRes_32 = 1;
                            }
                        }
                    }
                }
                if ((hitRes_32 == 0)) {
                    line_25 = (line_25 + " ");
                    xi_26 = (xi_26 + 1);
                    continue;
                }
                V3 vec_33 = new V3();
                if ((hitRes_32 == 1)) {
                    vec_33 = new V3{x = (x_27 - pos_21.cx), y = (y_24 - pos_21.cy), z = (((dynamic)zb1_29) - ((dynamic)pos_21.cz))};
                } else {
                    vec_33 = new V3{x = (neg_22.cx - x_27), y = (neg_22.cy - y_24), z = (((dynamic)neg_22.cz) - ((dynamic)((dynamic)(hs_31["z2"]))))};
                }
                vec_33 = normalize(vec_33);
                double b_34 = (powf(dot(light_20, vec_33), 2) + 0.5);
                long intensity_35 = Convert.ToInt64((((dynamic)(1 - b_34)) * ((dynamic)Convert.ToDouble(shades_19.Length))));
                if ((intensity_35 < 0)) {
                    intensity_35 = 0;
                }
                if ((intensity_35 >= shades_19.Length)) {
                    intensity_35 = (((dynamic)shades_19.Length) - ((dynamic)1));
                }
                line_25 = (line_25 + shades_19.Substring((int)(intensity_35), (int)((intensity_35 + 1) - intensity_35)));
                xi_26 = (xi_26 + 1);
            }
            Console.WriteLine(_fmtTop(line_25));
            yi_23 = (yi_23 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
