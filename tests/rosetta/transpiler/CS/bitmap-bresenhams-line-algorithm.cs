// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Point {
    public long x;
    public long y;
    public override string ToString() => $"Point {{x = {x}, y = {y}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long absi(long x_0) {
        if ((x_0 < 0)) {
            return -x_0;
        };
        return x_0;
    }

    static Point[] bresenham(long x0_1, long y0_2, long x1_3, long y1_4) {
        long dx_5 = absi((x1_3 - x0_1));
        long dy_6 = absi((y1_4 - y0_2));
        long sx_7 = -1;
        if ((x0_1 < x1_3)) {
            sx_7 = 1;
        };
        long sy_8 = -1;
        if ((y0_2 < y1_4)) {
            sy_8 = 1;
        };
        long err_9 = (dx_5 - dy_6);
        Point[] pts_10 = new Point[]{};
        while (true) {
            pts_10 = (Enumerable.ToArray(Enumerable.Append(pts_10, new Point{x = x0_1, y = y0_2})));
            if (((x0_1 == x1_3) && (y0_2 == y1_4))) {
                break;
            }
            long e2_11 = (2 * err_9);
            if ((e2_11 > -dy_6)) {
                err_9 = (err_9 - dy_6);
                x0_1 = (x0_1 + sx_7);
            }
            if ((e2_11 < dx_5)) {
                err_9 = (err_9 + dx_5);
                y0_2 = (y0_2 + sy_8);
            }
        };
        return pts_10;
    }

    static void main() {
        Point[] pts_12 = bresenham(0, 0, 6, 4);
        long i_13 = 0;
        while ((Convert.ToDouble(i_13) < Convert.ToDouble(pts_12.Length))) {
            Point p_14 = pts_12[(int)(i_13)];
            Console.WriteLine(_fmtTop((((("(" + _fmt(p_14.x)) + ",") + _fmt(p_14.y)) + ")")));
            i_13 = (i_13 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
