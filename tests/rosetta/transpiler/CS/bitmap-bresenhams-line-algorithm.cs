// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

struct Point {
    public long x;
    public long y;
    public override string ToString() => $"Point {{x = {x}, y = {y}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long absi(long x) {
        if ((x < 0)) {
            return -x;
        };
        return x;
    }

    static Point[] bresenham(long x0, long y0, long x1, long y1) {
        long dx_0 = absi((x1 - x0));
        long dy_1 = absi((y1 - y0));
        long sx_2 = -1;
        if ((x0 < x1)) {
            sx_2 = 1;
        };
        long sy_3 = -1;
        if ((y0 < y1)) {
            sy_3 = 1;
        };
        long err_4 = (dx_0 - dy_1);
        Point[] pts_5 = new Point[]{};
        while (true) {
            pts_5 = (Enumerable.ToArray(Enumerable.Append(pts_5, new Point{x = x0, y = y0})));
            if (((x0 == x1) && (y0 == y1))) {
                break;
            }
            long e2_6 = (2 * err_4);
            if ((e2_6 > -dy_1)) {
                err_4 = (err_4 - dy_1);
                x0 = (x0 + sx_2);
            }
            if ((e2_6 < dx_0)) {
                err_4 = (err_4 + dx_0);
                y0 = (y0 + sy_3);
            }
        };
        return pts_5;
    }

    static void main() {
        Point[] pts_7 = bresenham(0, 0, 6, 4);
        long i_8 = 0;
        while ((i_8 < pts_7.Length)) {
            Point p_9 = pts_7[(int)(i_8)];
            Console.WriteLine(_fmtTop((((("(" + (p_9.x).ToString()) + ",") + (p_9.y).ToString()) + ")")));
            i_8 = (i_8 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
