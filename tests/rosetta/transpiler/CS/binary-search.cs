// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long bsearch(long[] arr, long x) {
        long low_0 = 0;
        long high_1 = (((dynamic)arr.Length) - ((dynamic)1));
        while ((low_0 <= high_1)) {
            long mid_2 = ((low_0 + high_1) / 2);
            if ((arr[(int)(mid_2)] > x)) {
                high_1 = (mid_2 - 1);
            } else {
                if ((arr[(int)(mid_2)] < x)) {
                    low_0 = (mid_2 + 1);
                } else {
                    return mid_2;
                }
            }
        };
        return -1;
    }

    static long bsearchRec(long[] arr, long x, long low, long high) {
        if ((high < low)) {
            return -1;
        };
        long mid_3 = ((low + high) / 2);
        if ((arr[(int)(mid_3)] > x)) {
            return bsearchRec(arr, x, low, (mid_3 - 1));
        } else {
            if ((arr[(int)(mid_3)] < x)) {
                return bsearchRec(arr, x, (mid_3 + 1), high);
            }
        };
        return mid_3;
    }

    static void main() {
        long[] nums_4 = new long[]{-31, 0, 1, 2, 2, 4, 65, 83, 99, 782};
        long x_5 = 2;
        long idx_6 = bsearch(nums_4, x_5);
        if ((idx_6 >= 0)) {
            Console.WriteLine(_fmtTop(((((x_5).ToString() + " is at index ") + (idx_6).ToString()) + ".")));
        } else {
            Console.WriteLine(_fmtTop(((x_5).ToString() + " is not found.")));
        };
        x_5 = 5;
        idx_6 = bsearchRec(nums_4, x_5, 0, (((dynamic)nums_4.Length) - ((dynamic)1)));
        if ((idx_6 >= 0)) {
            Console.WriteLine(_fmtTop(((((x_5).ToString() + " is at index ") + (idx_6).ToString()) + ".")));
        } else {
            Console.WriteLine(_fmtTop(((x_5).ToString() + " is not found.")));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
