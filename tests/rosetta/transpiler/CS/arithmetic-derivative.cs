// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] primeFactors(long n_0) {
        long[] factors_1 = new long[]{};
        long x_2 = n_0;
        while (((x_2 % 2) == 0)) {
            factors_1 = (Enumerable.ToArray(Enumerable.Append(factors_1, 2)));
            x_2 = Convert.ToInt64((x_2 / 2));
        };
        long p_3 = 3;
        while (((p_3 * p_3) <= x_2)) {
            while (((x_2 % p_3) == 0)) {
                factors_1 = (Enumerable.ToArray(Enumerable.Append(factors_1, p_3)));
                x_2 = Convert.ToInt64((x_2 / p_3));
            }
            p_3 = (p_3 + 2);
        };
        if ((x_2 > 1)) {
            factors_1 = (Enumerable.ToArray(Enumerable.Append(factors_1, x_2)));
        };
        return factors_1;
    }

    static string repeat(string ch_4, long n_5) {
        string s_6 = "";
        long i_7 = 0;
        while ((i_7 < n_5)) {
            s_6 = (s_6 + ch_4);
            i_7 = (i_7 + 1);
        };
        return s_6;
    }

    static double D(double n_8) {
        if ((n_8 < 0.0)) {
            return -D(-n_8);
        };
        if ((n_8 < 2.0)) {
            return 0.0;
        };
        long[] factors_9 = new long[]{};
        if ((n_8 < 1e+19)) {
            factors_9 = primeFactors(Convert.ToInt64(n_8));
        } else {
            var g_10 = Convert.ToInt64((n_8 / 100.0));
            factors_9 = primeFactors(g_10);
            factors_9 = (Enumerable.ToArray(Enumerable.Append(factors_9, 2)));
            factors_9 = (Enumerable.ToArray(Enumerable.Append(factors_9, 2)));
            factors_9 = (Enumerable.ToArray(Enumerable.Append(factors_9, 5)));
            factors_9 = (Enumerable.ToArray(Enumerable.Append(factors_9, 5)));
        };
        var c_11 = factors_9.Length;
        if ((c_11 == 1)) {
            return 1.0;
        };
        if ((c_11 == 2)) {
            return Convert.ToDouble((factors_9[(int)(0)] + factors_9[(int)(1)]));
        };
        double d_12 = (((dynamic)(n_8)) / ((dynamic)(Convert.ToDouble(factors_9[(int)(0)]))));
        return ((((dynamic)(D(d_12))) * ((dynamic)(Convert.ToDouble(factors_9[(int)(0)])))) + d_12);
    }

    static string pad(long n_13) {
        string s_14 = (n_13).ToString();
        while ((string.Compare(Convert.ToString(s_14.Length), Convert.ToString(4)) < 0)) {
            s_14 = (" " + s_14);
        };
        return s_14;
    }

    static void main() {
        long[] vals_15 = new long[]{};
        long n_16 = -99;
        while ((n_16 < 101)) {
            vals_15 = (Enumerable.ToArray(Enumerable.Append(vals_15, Convert.ToInt64(D(Convert.ToDouble(n_16))))));
            n_16 = (n_16 + 1);
        };
        long i_17 = 0;
        while ((string.Compare(Convert.ToString(i_17), Convert.ToString(vals_15.Length)) < 0)) {
            string line_18 = "";
            long j_19 = 0;
            while ((j_19 < 10)) {
                line_18 = (line_18 + pad(vals_15[(int)((i_17 + j_19))]));
                if ((j_19 < 9)) {
                    line_18 = (line_18 + " ");
                }
                j_19 = (j_19 + 1);
            }
            Console.WriteLine(_fmtTop(line_18));
            i_17 = (i_17 + 10);
        };
        double pow_20 = 1.0;
        long m_21 = 1;
        while ((m_21 < 21)) {
            pow_20 = (pow_20 * 10.0);
            string exp_22 = (m_21).ToString();
            if ((string.Compare(Convert.ToString(exp_22.Length), Convert.ToString(2)) < 0)) {
                exp_22 = (exp_22 + " ");
            }
            string res_23 = ((m_21).ToString() + repeat("0", (m_21 - 1)));
            Console.WriteLine(_fmtTop(((("D(10^" + exp_22) + ") / 7 = ") + res_23)));
            m_21 = (m_21 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
