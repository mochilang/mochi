// Generated by Mochi 0.10.40 on 2025-07-25 13:09 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] primeFactors(long n) {
        long[] factors_0 = new long[]{};
        long x_1 = n;
        while (((x_1 % 2) == 0)) {
            factors_0 = (Enumerable.ToArray(Enumerable.Append(factors_0, 2)));
            x_1 = Convert.ToInt32((x_1 / 2));
        };
        long p_2 = 3;
        while (((p_2 * p_2) <= x_1)) {
            while (((x_1 % p_2) == 0)) {
                factors_0 = (Enumerable.ToArray(Enumerable.Append(factors_0, p_2)));
                x_1 = Convert.ToInt32((x_1 / p_2));
            }
            p_2 = (p_2 + 2);
        };
        if ((x_1 > 1)) {
            factors_0 = (Enumerable.ToArray(Enumerable.Append(factors_0, x_1)));
        };
        return factors_0;
    }

    static string repeat(string ch, long n) {
        string s_3 = "";
        long i_4 = 0;
        while ((i_4 < n)) {
            s_3 = (s_3 + ch);
            i_4 = (i_4 + 1);
        };
        return s_3;
    }

    static double D(double n) {
        if ((n < 0)) {
            return -D(-n);
        };
        if ((n < 2)) {
            return 0;
        };
        long[] factors_5 = new long[]{};
        if ((n < 1e+19)) {
            factors_5 = primeFactors(Convert.ToInt32(n));
        } else {
            var g_6 = Convert.ToInt32((n / 100));
            factors_5 = primeFactors(g_6);
            factors_5 = (Enumerable.ToArray(Enumerable.Append(factors_5, 2)));
            factors_5 = (Enumerable.ToArray(Enumerable.Append(factors_5, 2)));
            factors_5 = (Enumerable.ToArray(Enumerable.Append(factors_5, 5)));
            factors_5 = (Enumerable.ToArray(Enumerable.Append(factors_5, 5)));
        };
        var c_7 = factors_5.Length;
        if ((c_7 == 1)) {
            return 1;
        };
        if ((c_7 == 2)) {
            return Convert.ToDouble((factors_5[0] + factors_5[1]));
        };
        double d_8 = (n / Convert.ToDouble(factors_5[0]));
        return ((D(d_8) * Convert.ToDouble(factors_5[0])) + d_8);
    }

    static string pad(long n) {
        string s_9 = (n).ToString();
        while ((s_9.Length < 4)) {
            s_9 = (" " + s_9);
        };
        return s_9;
    }

    static void main() {
        long[] vals_10 = new long[]{};
        long n_11 = -99;
        while ((n_11 < 101)) {
            vals_10 = (Enumerable.ToArray(Enumerable.Append(vals_10, Convert.ToInt32(D(Convert.ToDouble(n_11))))));
            n_11 = (n_11 + 1);
        };
        long i_12 = 0;
        while ((i_12 < vals_10.Length)) {
            string line_13 = "";
            long j_14 = 0;
            while ((j_14 < 10)) {
                line_13 = (line_13 + pad(vals_10[(i_12 + j_14)]));
                if ((j_14 < 9)) {
                    line_13 = (line_13 + " ");
                }
                j_14 = (j_14 + 1);
            }
            Console.WriteLine(_fmtTop(line_13));
            i_12 = (i_12 + 10);
        };
        double pow_15 = 1;
        long m_16 = 1;
        while ((m_16 < 21)) {
            pow_15 = (pow_15 * 10);
            string exp_17 = (m_16).ToString();
            if ((exp_17.Length < 2)) {
                exp_17 = (exp_17 + " ");
            }
            string res_18 = ((m_16).ToString() + repeat("0", (m_16 - 1)));
            Console.WriteLine(_fmtTop(((("D(10^" + exp_17) + ") / 7 = ") + res_18)));
            m_16 = (m_16 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
