// Generated by Mochi 0.10.47 on 2025-07-28 05:03 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string listStr(long[] xs_0) {
        string s_1 = "[";
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            s_1 = (s_1 + (xs_0[(int)(i_2)]).ToString());
            if ((i_2 < (((dynamic)xs_0.Length) - ((dynamic)1)))) {
                s_1 = (s_1 + " ");
            }
            i_2 = (i_2 + 1);
        };
        s_1 = (s_1 + "]");
        return s_1;
    }

    static void pointerDemo() {
        Console.WriteLine(_fmtTop("Pointer:"));
        long i_3 = 0;
        Console.WriteLine(_fmtTop("Before:"));
        Console.WriteLine(_fmtTop(((("\t<address>: " + (i_3).ToString()) + ", ") + (i_3).ToString())));
        i_3 = 3;
        Console.WriteLine(_fmtTop("After:"));
        Console.WriteLine(_fmtTop(((("\t<address>: " + (i_3).ToString()) + ", ") + (i_3).ToString())));
    }

    static void sliceDemo() {
        Console.WriteLine(_fmtTop("Slice:"));
        object[] a_4 = new object[]{};
        for (var __5 = 0; __5 < 10; __5++) {
            a_4 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(a_4.Cast<object>()), 0)));
        };
        object[] s_6 = a_4;
        Console.WriteLine(_fmtTop("Before:"));
        Console.WriteLine(_fmtTop(("\ts: " + listStr(Enumerable.ToArray(s_6.Select(x => Convert.ToInt64(x)))))));
        Console.WriteLine(_fmtTop(("\ta: " + listStr(Enumerable.ToArray(a_4.Select(x => Convert.ToInt64(x)))))));
        long[] data_7 = new long[]{65, 32, 115, 116, 114, 105, 110, 103, 46};
        long idx_8 = 0;
        while ((idx_8 < data_7.Length)) {
            s_6[idx_8] = data_7[(int)(idx_8)];
            idx_8 = (idx_8 + 1);
        };
        Console.WriteLine(_fmtTop("After:"));
        Console.WriteLine(_fmtTop(("\ts: " + listStr(Enumerable.ToArray(s_6.Select(x => Convert.ToInt64(x)))))));
        Console.WriteLine(_fmtTop(("\ta: " + listStr(Enumerable.ToArray(a_4.Select(x => Convert.ToInt64(x)))))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            pointerDemo();
            Console.WriteLine(_fmtTop(""));
            sliceDemo();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
