// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static int _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647;
            return (int)nowSeed;
        }
        return (int)(DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() % int.MaxValue);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string adfgvx = "ADFGVX";
    static string alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    static string shuffleStr(string s) {
        string[] arr = new string[]{};
        int i = 0;
        while ((i < s.Length)) {
            arr = (arr.Append(s.Substring(i, ((i + 1) - i))).ToArray());
            i = (i + 1);
        };
        int j = (arr.Length - 1);
        while ((j > 0)) {
            int k = (_now() % (j + 1));
            var tmp = arr[j];
            arr[j] = arr[k];
            arr[k] = tmp;
            j = (j - 1);
        };
        string _out = "";
        i = 0;
        while ((i < arr.Length)) {
            _out = (_out + arr[i]);
            i = (i + 1);
        };
        return _out;
    }

    static string[] createPolybius() {
        string shuffled = shuffleStr(alphabet);
        string[] labels = new string[]{};
        int li = 0;
        while ((li < adfgvx.Length)) {
            labels = (labels.Append(adfgvx.Substring(li, ((li + 1) - li))).ToArray());
            li = (li + 1);
        };
        Console.WriteLine(_fmtTop("6 x 6 Polybius square:\n"));
        Console.WriteLine(_fmtTop("  | A D F G V X"));
        Console.WriteLine(_fmtTop("---------------"));
        string[] p = new string[]{};
        int i = 0;
        while ((i < 6)) {
            var row = shuffled.Skip((i * 6)).Take((((i + 1) * 6) - (i * 6))).ToArray();
            p = (p.Append(row).ToArray());
            string line = (labels[i] + " | ");
            int j = 0;
            while ((j < 6)) {
                line = ((line + row.Skip(j).Take(((j + 1) - j)).ToArray()) + " ");
                j = (j + 1);
            }
            Console.WriteLine(_fmtTop(line));
            i = (i + 1);
        };
        return p;
    }

    static string createKey(int n) {
        if (((n < 7) || (n > 12))) {
            Console.WriteLine(_fmtTop("Key should be within 7 and 12 letters long."));
        };
        string pool = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        string key = "";
        int i = 0;
        while ((i < n)) {
            int idx = (_now() % pool.Length);
            key = (key + pool[idx]);
            pool = (pool.Substring(0, (idx - 0)) + pool.Substring((idx + 1), (pool.Length - (idx + 1))));
            i = (i + 1);
        };
        Console.WriteLine(_fmtTop(("\nThe key is " + key)));
        return key;
    }

    static int[] orderKey(string key) {
        object[] pairs = new object[]{};
        int i = 0;
        while ((i < key.Length)) {
            pairs = (pairs.Append(new object[]{key.Substring(i, ((i + 1) - i)), i}).ToArray());
            i = (i + 1);
        };
        var n = pairs.Length;
        int m = 0;
        while ((m < n)) {
            int j = 0;
            while ((j < (n - 1))) {
                if ((pairs[j][0] > pairs[(j + 1)][0])) {
                    var tmp = pairs[j];
                    pairs[j] = pairs[(j + 1)];
                    pairs[(j + 1)] = tmp;
                }
                j = (j + 1);
            }
            m = (m + 1);
        };
        object[] res = new object[]{};
        i = 0;
        while ((i < n)) {
            res = (res.Append(Convert.ToInt32(pairs[i][1])).ToArray());
            i = (i + 1);
        };
        return res;
    }

    static string encrypt(string[] polybius, string key, string plainText) {
        string[] labels = new string[]{};
        int li = 0;
        while ((li < adfgvx.Length)) {
            labels = (labels.Append(adfgvx.Substring(li, ((li + 1) - li))).ToArray());
            li = (li + 1);
        };
        string temp = "";
        int i = 0;
        while ((i < plainText.Length)) {
            int r = 0;
            while ((r < 6)) {
                int c = 0;
                while ((c < 6)) {
                    if ((polybius[r].Substring(c, ((c + 1) - c)) == plainText.Substring(i, ((i + 1) - i)))) {
                        temp = ((temp + labels.Skip(r).Take(((r + 1) - r)).ToArray()) + labels.Skip(c).Take(((c + 1) - c)).ToArray());
                    }
                    c = (c + 1);
                }
                r = (r + 1);
            }
            i = (i + 1);
        };
        var colLen = (temp.Length / key.Length);
        if (((temp.Length % key.Length) > 0)) {
            colLen = (colLen + 1);
        };
        string[][] table = new string[][]{};
        int rIdx = 0;
        while ((rIdx < colLen)) {
            string[] row = new string[]{};
            int j = 0;
            while ((j < key.Length)) {
                row = (row.Append("").ToArray());
                j = (j + 1);
            }
            table = (table.Append(row).ToArray());
            rIdx = (rIdx + 1);
        };
        int idx = 0;
        while ((idx < temp.Length)) {
            var row = (idx / key.Length);
            var col = (idx % key.Length);
            table[row][col] = temp.Substring(idx, ((idx + 1) - idx));
            idx = (idx + 1);
        };
        int[] order = orderKey(key);
        string[] cols = new string[]{};
        int ci = 0;
        while ((ci < key.Length)) {
            string colStr = "";
            int ri = 0;
            while ((ri < colLen)) {
                colStr = (colStr + table[ri][order[ci]]);
                ri = (ri + 1);
            }
            cols = (cols.Append(colStr).ToArray());
            ci = (ci + 1);
        };
        string result = "";
        ci = 0;
        while ((ci < cols.Length)) {
            result = (result + cols[ci]);
            if ((ci < (cols.Length - 1))) {
                result = (result + " ");
            }
            ci = (ci + 1);
        };
        return result;
    }

    static int indexOf(string s, string ch) {
        int i = 0;
        while ((i < s.Length)) {
            if ((s.Substring(i, ((i + 1) - i)) == ch)) {
                return i;
            }
            i = (i + 1);
        };
        return -1;
    }

    static string decrypt(string[] polybius, string key, string cipherText) {
        string[] colStrs = new string[]{};
        int start = 0;
        int i = 0;
        while ((i <= cipherText.Length)) {
            if (((i == cipherText.Length) || (cipherText[i] == " "))) {
                colStrs = (colStrs.Append(cipherText.Substring(start, (i - start))).ToArray());
                start = (i + 1);
            }
            i = (i + 1);
        };
        int maxColLen = 0;
        i = 0;
        while ((i < colStrs.Length)) {
            if ((colStrs[i].Length > maxColLen)) {
                maxColLen = colStrs[i].Length;
            }
            i = (i + 1);
        };
        string[][] cols = new string[][]{};
        i = 0;
        while ((i < colStrs.Length)) {
            var s = colStrs[i];
            string[] ls = new string[]{};
            int j = 0;
            while ((j < s.Length)) {
                ls = (ls.Append(s.Substring(j, ((j + 1) - j))).ToArray());
                j = (j + 1);
            }
            if ((s.Length < maxColLen)) {
                string[] pad = new string[]{};
                int k = 0;
                while ((k < maxColLen)) {
                    if ((k < ls.Length)) {
                        pad = (pad.Append(ls[k]).ToArray());
                    } else {
                        pad = (pad.Append("").ToArray());
                    }
                    k = (k + 1);
                }
                cols = (cols.Append(pad).ToArray());
            } else {
                cols = (cols.Append(ls).ToArray());
            }
            i = (i + 1);
        };
        string[][] table = new string[][]{};
        int r = 0;
        while ((r < maxColLen)) {
            string[] row = new string[]{};
            int c = 0;
            while ((c < key.Length)) {
                row = (row.Append("").ToArray());
                c = (c + 1);
            }
            table = (table.Append(row).ToArray());
            r = (r + 1);
        };
        int[] order = orderKey(key);
        r = 0;
        while ((r < maxColLen)) {
            int c = 0;
            while ((c < key.Length)) {
                table[r][order[c]] = cols[c][r];
                c = (c + 1);
            }
            r = (r + 1);
        };
        string temp = "";
        r = 0;
        while ((r < table.Length)) {
            int j = 0;
            while ((j < table[r].Length)) {
                temp = (temp + table[r][j]);
                j = (j + 1);
            }
            r = (r + 1);
        };
        string plainText = "";
        int idx = 0;
        while ((idx < temp.Length)) {
            int rIdx = indexOf(adfgvx, temp.Substring(idx, ((idx + 1) - idx)));
            int cIdx = indexOf(adfgvx, temp.Substring((idx + 1), ((idx + 2) - (idx + 1))));
            plainText = (plainText + polybius[rIdx][cIdx]);
            idx = (idx + 2);
        };
        return plainText;
    }

    static void main() {
        string plainText = "ATTACKAT1200AM";
        string[] polybius = createPolybius();
        string key = createKey(9);
        Console.WriteLine(_fmtTop(("\nPlaintext : " + plainText)));
        string cipherText = encrypt(polybius, key, plainText);
        Console.WriteLine(_fmtTop(("\nEncrypted : " + cipherText)));
        string plainText2 = decrypt(polybius, key, cipherText);
        Console.WriteLine(_fmtTop(("\nDecrypted : " + plainText2)));
    }

    static void Main() {
        main();
    }
}
