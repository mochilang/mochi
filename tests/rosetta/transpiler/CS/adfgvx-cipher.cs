// Generated by Mochi 0.10.40 on 2025-07-25 19:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string adfgvx_0 = "ADFGVX";
    static string alphabet_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    static string shuffleStr(string s) {
        string[] arr_2 = new string[]{};
        long i_3 = 0;
        while ((i_3 < s.Length)) {
            arr_2 = (Enumerable.ToArray(Enumerable.Append(arr_2, s.Substring((int)(i_3), (int)((i_3 + 1) - i_3)))));
            i_3 = (i_3 + 1);
        };
        long j_4 = (((dynamic)arr_2.Length) - ((dynamic)1));
        while ((j_4 > 0)) {
            long k_5 = (_now() % (j_4 + 1));
            string tmp_6 = arr_2[(int)(j_4)];
            arr_2[j_4] = arr_2[(int)(k_5)];
            arr_2[k_5] = tmp_6;
            j_4 = (j_4 - 1);
        };
        string out_7 = "";
        i_3 = 0;
        while ((i_3 < arr_2.Length)) {
            out_7 = (out_7 + arr_2[(int)(i_3)]);
            i_3 = (i_3 + 1);
        };
        return out_7;
    }

    static string[] createPolybius() {
        string shuffled_8 = shuffleStr(alphabet_1);
        string[] labels_9 = new string[]{};
        long li_10 = 0;
        while ((li_10 < adfgvx_0.Length)) {
            labels_9 = (Enumerable.ToArray(Enumerable.Append(labels_9, adfgvx_0.Substring((int)(li_10), (int)((li_10 + 1) - li_10)))));
            li_10 = (li_10 + 1);
        };
        Console.WriteLine(_fmtTop("6 x 6 Polybius square:\n"));
        Console.WriteLine(_fmtTop("  | A D F G V X"));
        Console.WriteLine(_fmtTop("---------------"));
        string[] p_11 = new string[]{};
        long i_12 = 0;
        while ((i_12 < 6)) {
            string row_13 = shuffled_8.Substring((int)((i_12 * 6)), (int)(((i_12 + 1) * 6) - (i_12 * 6)));
            p_11 = (Enumerable.ToArray(Enumerable.Append(p_11, row_13)));
            string line_14 = (labels_9[(int)(i_12)] + " | ");
            long j_15 = 0;
            while ((j_15 < 6)) {
                line_14 = ((line_14 + row_13.Substring((int)(j_15), (int)((j_15 + 1) - j_15))) + " ");
                j_15 = (j_15 + 1);
            }
            Console.WriteLine(_fmtTop(line_14));
            i_12 = (i_12 + 1);
        };
        return p_11;
    }

    static string createKey(long n) {
        if (((n < 7) || (n > 12))) {
            Console.WriteLine(_fmtTop("Key should be within 7 and 12 letters long."));
        };
        string pool_16 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        string key_17 = "";
        long i_18 = 0;
        while ((i_18 < n)) {
            long idx_19 = (((dynamic)_now()) % ((dynamic)pool_16.Length));
            key_17 = (key_17 + pool_16.Substring((int)(idx_19), 1));
            pool_16 = (pool_16.Substring((int)(0), (int)(idx_19 - 0)) + pool_16.Substring((int)((idx_19 + 1)), (int)(pool_16.Length - (idx_19 + 1))));
            i_18 = (i_18 + 1);
        };
        Console.WriteLine(_fmtTop(("\nThe key is " + key_17)));
        return key_17;
    }

    static long[] orderKey(string key) {
        object[] pairs_20 = new object[]{};
        long i_21 = 0;
        while ((i_21 < key.Length)) {
            pairs_20 = (Enumerable.ToArray(Enumerable.Append(pairs_20, (object)new object[]{key.Substring((int)(i_21), (int)((i_21 + 1) - i_21)), i_21})));
            i_21 = (i_21 + 1);
        };
        var n_22 = pairs_20.Length;
        long m_23 = 0;
        while ((m_23 < n_22)) {
            long j_24 = 0;
            while ((j_24 < (((dynamic)n_22) - ((dynamic)1)))) {
                if ((((dynamic)((dynamic)pairs_20)[j_24])[0] > ((dynamic)((dynamic)pairs_20)[(j_24 + 1)])[0])) {
                    var tmp_25 = ((dynamic)pairs_20)[j_24];
                    pairs_20[j_24] = ((dynamic)pairs_20)[(j_24 + 1)];
                    pairs_20[(j_24 + 1)] = tmp_25;
                }
                j_24 = (j_24 + 1);
            }
            m_23 = (m_23 + 1);
        };
        object[] res_26 = new object[]{};
        i_21 = 0;
        while ((i_21 < n_22)) {
            res_26 = (Enumerable.ToArray(Enumerable.Append(res_26, (object)Convert.ToInt32(((dynamic)((dynamic)pairs_20)[i_21])[1]))));
            i_21 = (i_21 + 1);
        };
        return res_26.Cast<long>().ToArray();
    }

    static string encrypt(string[] polybius, string key, string plainText) {
        string[] labels_27 = new string[]{};
        long li_28 = 0;
        while ((li_28 < adfgvx_0.Length)) {
            labels_27 = (Enumerable.ToArray(Enumerable.Append(labels_27, adfgvx_0.Substring((int)(li_28), (int)((li_28 + 1) - li_28)))));
            li_28 = (li_28 + 1);
        };
        string temp_29 = "";
        long i_30 = 0;
        while ((i_30 < plainText.Length)) {
            long r_31 = 0;
            while ((r_31 < 6)) {
                long c_32 = 0;
                while ((c_32 < 6)) {
                    if ((polybius[(int)(r_31)].Substring((int)(c_32), (int)((c_32 + 1) - c_32)) == plainText.Substring((int)(i_30), (int)((i_30 + 1) - i_30)))) {
                        temp_29 = ((temp_29 + labels_27.Skip((int)(r_31)).Take((int)(((r_31 + 1) - r_31))).ToArray()) + labels_27.Skip((int)(c_32)).Take((int)(((c_32 + 1) - c_32))).ToArray());
                    }
                    c_32 = (c_32 + 1);
                }
                r_31 = (r_31 + 1);
            }
            i_30 = (i_30 + 1);
        };
        long colLen_33 = (((dynamic)temp_29.Length) / ((dynamic)key.Length));
        if (((((dynamic)temp_29.Length) % ((dynamic)key.Length)) > 0)) {
            colLen_33 = (colLen_33 + 1);
        };
        string[][] table_34 = new string[][]{};
        long rIdx_35 = 0;
        while ((rIdx_35 < colLen_33)) {
            string[] row_36 = new string[]{};
            long j_37 = 0;
            while ((j_37 < key.Length)) {
                row_36 = (Enumerable.ToArray(Enumerable.Append(row_36, "")));
                j_37 = (j_37 + 1);
            }
            table_34 = (Enumerable.ToArray(Enumerable.Append(table_34, row_36)));
            rIdx_35 = (rIdx_35 + 1);
        };
        long idx_38 = 0;
        while ((idx_38 < temp_29.Length)) {
            long row_39 = (((dynamic)idx_38) / ((dynamic)key.Length));
            long col_40 = (((dynamic)idx_38) % ((dynamic)key.Length));
            table_34[(int)(row_39)][col_40] = temp_29.Substring((int)(idx_38), (int)((idx_38 + 1) - idx_38));
            idx_38 = (idx_38 + 1);
        };
        long[] order_41 = orderKey(key);
        string[] cols_42 = new string[]{};
        long ci_43 = 0;
        while ((ci_43 < key.Length)) {
            string colStr_44 = "";
            long ri_45 = 0;
            while ((ri_45 < colLen_33)) {
                colStr_44 = (colStr_44 + table_34[(int)(ri_45)][(int)(order_41[(int)(ci_43)])]);
                ri_45 = (ri_45 + 1);
            }
            cols_42 = (Enumerable.ToArray(Enumerable.Append(cols_42, colStr_44)));
            ci_43 = (ci_43 + 1);
        };
        string result_46 = "";
        ci_43 = 0;
        while ((ci_43 < cols_42.Length)) {
            result_46 = (result_46 + cols_42[(int)(ci_43)]);
            if ((ci_43 < (((dynamic)cols_42.Length) - ((dynamic)1)))) {
                result_46 = (result_46 + " ");
            }
            ci_43 = (ci_43 + 1);
        };
        return result_46;
    }

    static long indexOf(string s, string ch) {
        long i_47 = 0;
        while ((i_47 < s.Length)) {
            if ((s.Substring((int)(i_47), (int)((i_47 + 1) - i_47)) == ch)) {
                return i_47;
            }
            i_47 = (i_47 + 1);
        };
        return -1;
    }

    static string decrypt(string[] polybius, string key, string cipherText) {
        string[] colStrs_48 = new string[]{};
        long start_49 = 0;
        long i_50 = 0;
        while ((i_50 <= cipherText.Length)) {
            if (((i_50 == cipherText.Length) || (cipherText.Substring((int)(i_50), 1) == " "))) {
                colStrs_48 = (Enumerable.ToArray(Enumerable.Append(colStrs_48, cipherText.Substring((int)(start_49), (int)(i_50 - start_49)))));
                start_49 = (i_50 + 1);
            }
            i_50 = (i_50 + 1);
        };
        long maxColLen_51 = 0;
        i_50 = 0;
        while ((i_50 < colStrs_48.Length)) {
            if ((colStrs_48[(int)(i_50)].Length > maxColLen_51)) {
                maxColLen_51 = colStrs_48[(int)(i_50)].Length;
            }
            i_50 = (i_50 + 1);
        };
        string[][] cols_52 = new string[][]{};
        i_50 = 0;
        while ((i_50 < colStrs_48.Length)) {
            string s_53 = colStrs_48[(int)(i_50)];
            string[] ls_54 = new string[]{};
            long j_55 = 0;
            while ((j_55 < s_53.Length)) {
                ls_54 = (Enumerable.ToArray(Enumerable.Append(ls_54, s_53.Substring((int)(j_55), (int)((j_55 + 1) - j_55)))));
                j_55 = (j_55 + 1);
            }
            if ((s_53.Length < maxColLen_51)) {
                string[] pad_56 = new string[]{};
                long k_57 = 0;
                while ((k_57 < maxColLen_51)) {
                    if ((k_57 < ls_54.Length)) {
                        pad_56 = (Enumerable.ToArray(Enumerable.Append(pad_56, ls_54[(int)(k_57)])));
                    } else {
                        pad_56 = (Enumerable.ToArray(Enumerable.Append(pad_56, "")));
                    }
                    k_57 = (k_57 + 1);
                }
                cols_52 = (Enumerable.ToArray(Enumerable.Append(cols_52, pad_56)));
            } else {
                cols_52 = (Enumerable.ToArray(Enumerable.Append(cols_52, ls_54)));
            }
            i_50 = (i_50 + 1);
        };
        string[][] table_58 = new string[][]{};
        long r_59 = 0;
        while ((r_59 < maxColLen_51)) {
            string[] row_60 = new string[]{};
            long c_61 = 0;
            while ((c_61 < key.Length)) {
                row_60 = (Enumerable.ToArray(Enumerable.Append(row_60, "")));
                c_61 = (c_61 + 1);
            }
            table_58 = (Enumerable.ToArray(Enumerable.Append(table_58, row_60)));
            r_59 = (r_59 + 1);
        };
        long[] order_62 = orderKey(key);
        r_59 = 0;
        while ((r_59 < maxColLen_51)) {
            long c_63 = 0;
            while ((c_63 < key.Length)) {
                table_58[(int)(r_59)][order_62[(int)(c_63)]] = cols_52[(int)(c_63)][(int)(r_59)];
                c_63 = (c_63 + 1);
            }
            r_59 = (r_59 + 1);
        };
        string temp_64 = "";
        r_59 = 0;
        while ((r_59 < table_58.Length)) {
            long j_65 = 0;
            while ((j_65 < table_58[(int)(r_59)].Length)) {
                temp_64 = (temp_64 + table_58[(int)(r_59)][(int)(j_65)]);
                j_65 = (j_65 + 1);
            }
            r_59 = (r_59 + 1);
        };
        string plainText_66 = "";
        long idx_67 = 0;
        while ((idx_67 < temp_64.Length)) {
            long rIdx_68 = indexOf(adfgvx_0, temp_64.Substring((int)(idx_67), (int)((idx_67 + 1) - idx_67)));
            long cIdx_69 = indexOf(adfgvx_0, temp_64.Substring((int)((idx_67 + 1)), (int)((idx_67 + 2) - (idx_67 + 1))));
            plainText_66 = (plainText_66 + polybius[(int)(rIdx_68)].Substring((int)(cIdx_69), 1));
            idx_67 = (idx_67 + 2);
        };
        return plainText_66;
    }

    static void main() {
        string plainText_70 = "ATTACKAT1200AM";
        string[] polybius_71 = createPolybius();
        string key_72 = createKey(9);
        Console.WriteLine(_fmtTop(("\nPlaintext : " + plainText_70)));
        string cipherText_73 = encrypt(polybius_71, key_72, plainText_70);
        Console.WriteLine(_fmtTop(("\nEncrypted : " + cipherText_73)));
        string plainText2_74 = decrypt(polybius_71, key_72, cipherText_73);
        Console.WriteLine(_fmtTop(("\nDecrypted : " + plainText2_74)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
