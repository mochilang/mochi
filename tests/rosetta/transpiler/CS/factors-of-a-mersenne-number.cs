// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long qlimit_0 = 50000;
    static double powf(double base_1, long exp_2) {
        double result_3 = 1;
        long i_4 = 0;
        while ((i_4 < exp_2)) {
            result_3 = (result_3 * base_1);
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    static double sqrtApprox(double x_5) {
        if ((x_5 <= 0)) {
            return 0;
        };
        double g_6 = x_5;
        long i_7 = 0;
        while ((i_7 < 20)) {
            g_6 = ((g_6 + (x_5 / g_6)) / 2);
            i_7 = (i_7 + 1);
        };
        return g_6;
    }

    static long modPow(long base_8, long exp_9, long mod_10) {
        long result_11 = (1 % mod_10);
        long b_12 = (base_8 % mod_10);
        long e_13 = exp_9;
        while ((e_13 > 0)) {
            if (((e_13 % 2) == 1)) {
                result_11 = ((result_11 * b_12) % mod_10);
            }
            b_12 = ((b_12 * b_12) % mod_10);
            e_13 = (e_13 / 2);
        };
        return result_11;
    }

    static void mtest(long m_14) {
        if ((m_14 < 4)) {
            Console.WriteLine(_fmtTop(((((m_14).ToString() + " < 4.  M") + (m_14).ToString()) + " not tested.")));
            return;
        };
        double flimit_15 = sqrtApprox((powf(2, m_14) - 1));
        long qlast_16 = 0;
        if ((flimit_15 < qlimit_0)) {
            qlast_16 = Convert.ToInt64(flimit_15);
        } else {
            qlast_16 = qlimit_0;
        };
        bool[] composite_17 = new bool[]{};
        long i_18 = 0;
        while ((i_18 <= qlast_16)) {
            composite_17 = (Enumerable.ToArray(Enumerable.Append(composite_17, false)));
            i_18 = (i_18 + 1);
        };
        var sq_19 = Convert.ToInt64(sqrtApprox(Convert.ToDouble(qlast_16)));
        long q_20 = 3;
        while (true) {
            if ((q_20 <= sq_19)) {
                long j_21 = (q_20 * q_20);
                while ((j_21 <= qlast_16)) {
                    composite_17[j_21] = true;
                    j_21 = (j_21 + q_20);
                }
            }
            long q8_22 = (q_20 % 8);
            if ((((q8_22 == 1) || (q8_22 == 7)) && (modPow(2, m_14, q_20) == 1))) {
                Console.WriteLine(_fmtTop(((("M" + (m_14).ToString()) + " has factor ") + (q_20).ToString())));
                return;
            }
            while (true) {
                q_20 = (q_20 + 2);
                if ((q_20 > qlast_16)) {
                    Console.WriteLine(_fmtTop((("No factors of M" + (m_14).ToString()) + " found.")));
                    return;
                }
                if ((!composite_17[(int)(q_20)])) {
                    break;
                }
            }
        };
    }

    static void main() {
        mtest(31);
        mtest(67);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
