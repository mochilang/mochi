// Generated by Mochi 0.10.55 on 2025-08-03 10:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Field {
    public bool[][] s;
    public long w;
    public long h;
    public override string ToString() => $"Field {{s = {s}, w = {w}, h = {h}}}";
}
class Life {
    public Field a;
    public Field b;
    public long w;
    public long h;
    public override string ToString() => $"Life {{a = {a}, b = {b}, w = {w}, h = {h}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long seed_0 = 1;
    static long randN(long n_1) {
        seed_0 = (((seed_0 * 1664525) + 1013904223) % 2147483647);
        return (seed_0 % n_1);
    }

    static Field newField(long w_2, long h_3) {
        bool[][] rows_4 = new bool[][]{};
        long y_5 = 0;
        while ((y_5 < h_3)) {
            bool[] row_6 = new bool[]{};
            long x_7 = 0;
            while ((x_7 < w_2)) {
                row_6 = (Enumerable.ToArray(Enumerable.Append(row_6, false)));
                x_7 = (x_7 + 1);
            }
            rows_4 = (Enumerable.ToArray(Enumerable.Append(rows_4, row_6)));
            y_5 = (y_5 + 1);
        };
        return new Field{s = rows_4, w = w_2, h = h_3};
    }

    static void setCell(Field f_8, long x_9, long y_10, bool b_11) {
        bool[][] rows_12 = f_8.s;
        bool[] row_13 = rows_12[(int)(y_10)];
        row_13[x_9] = b_11;
        rows_12[y_10] = row_13;
        f_8.s = rows_12;
    }

    static bool state(Field f_14, long x_15, long y_16) {
        while ((y_16 < 0)) {
            y_16 = (y_16 + f_14.h);
        };
        while ((x_15 < 0)) {
            x_15 = (x_15 + f_14.w);
        };
        return f_14.s[(int)((y_16 % f_14.h))][(int)((x_15 % f_14.w))];
    }

    static bool nextState(Field f_17, long x_18, long y_19) {
        long count_20 = 0;
        long dy_21 = -1;
        while ((dy_21 <= 1)) {
            long dx_22 = -1;
            while ((dx_22 <= 1)) {
                if (((!((dx_22 == 0) && (dy_21 == 0))) && state(f_17, (x_18 + dx_22), (y_19 + dy_21)))) {
                    count_20 = (count_20 + 1);
                }
                dx_22 = (dx_22 + 1);
            }
            dy_21 = (dy_21 + 1);
        };
        return ((count_20 == 3) || ((count_20 == 2) && state(f_17, x_18, y_19)));
    }

    static Life newLife(long w_23, long h_24) {
        Field a_25 = newField(w_23, h_24);
        long i_26 = 0;
        while ((i_26 < ((w_23 * h_24) / 2))) {
            setCell(a_25, randN(w_23), randN(h_24), true);
            i_26 = (i_26 + 1);
        };
        return new Life{a = a_25, b = newField(w_23, h_24), w = w_23, h = h_24};
    }

    static void step(Life l_27) {
        long y_28 = 0;
        while ((y_28 < l_27.h)) {
            long x_29 = 0;
            while ((x_29 < l_27.w)) {
                setCell(l_27.b, x_29, y_28, nextState(l_27.a, x_29, y_28));
                x_29 = (x_29 + 1);
            }
            y_28 = (y_28 + 1);
        };
        Field tmp_30 = l_27.a;
        l_27.a = l_27.b;
        l_27.b = tmp_30;
    }

    static string lifeString(Life l_31) {
        string out_32 = "";
        long y_33 = 0;
        while ((y_33 < l_31.h)) {
            long x_34 = 0;
            while ((x_34 < l_31.w)) {
                if (state(l_31.a, x_34, y_33)) {
                    out_32 = (out_32 + "*");
                } else {
                    out_32 = (out_32 + " ");
                }
                x_34 = (x_34 + 1);
            }
            out_32 = (out_32 + "\n");
            y_33 = (y_33 + 1);
        };
        return out_32;
    }

    static void main() {
        Life l_35 = newLife(80, 15);
        long i_36 = 0;
        while ((i_36 < 300)) {
            step(l_35);
            Console.WriteLine(_fmtTop("\f"));
            Console.WriteLine(_fmtTop(lifeString(l_35)));
            i_36 = (i_36 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
