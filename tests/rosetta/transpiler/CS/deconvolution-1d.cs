// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string listToStringInts(double[] xs_0) {
        string s_1 = "[";
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            s_1 = (s_1 + (Convert.ToInt64(xs_0[(int)(i_2)])).ToString());
            if ((i_2 < (((dynamic)xs_0.Length) - ((dynamic)1)))) {
                s_1 = (s_1 + " ");
            }
            i_2 = (i_2 + 1);
        };
        return (s_1 + "]");
    }

    static double[] deconv(double[] g_3, double[] f_4) {
        double[] h_5 = new double[]{};
        long n_6 = 0;
        long hn_7 = (((dynamic)(((dynamic)g_3.Length) - ((dynamic)f_4.Length))) + ((dynamic)1));
        while ((n_6 < hn_7)) {
            double v_8 = g_3[(int)(n_6)];
            long lower_9 = 0;
            if ((n_6 >= f_4.Length)) {
                lower_9 = ((((dynamic)n_6) - ((dynamic)f_4.Length)) + 1);
            }
            long i_10 = lower_9;
            while ((i_10 < n_6)) {
                v_8 = (v_8 - (h_5[(int)(i_10)] * f_4[(int)((n_6 - i_10))]));
                i_10 = (i_10 + 1);
            }
            v_8 = (v_8 / f_4[(int)(0)]);
            h_5 = (Enumerable.ToArray(Enumerable.Append(h_5, v_8)));
            n_6 = (n_6 + 1);
        };
        return h_5;
    }

    static void main() {
        double[] h_11 = new double[]{-8, -9, -3, -1, -6, 7};
        double[] f_12 = new double[]{-3, -6, -1, 8, -6, 3, -1, -9, -9, 3, -2, 5, 2, -2, -7, -1};
        double[] g_13 = new double[]{24, 75, 71, -34, 3, 22, -45, 23, 245, 25, 52, 25, -67, -96, 96, 31, 55, 36, 29, -43, -7};
        Console.WriteLine(_fmtTop(listToStringInts(h_11)));
        Console.WriteLine(_fmtTop(listToStringInts(deconv(g_13, f_12))));
        Console.WriteLine(_fmtTop(listToStringInts(f_12)));
        Console.WriteLine(_fmtTop(listToStringInts(deconv(g_13, h_11))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
