// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long EVEN_ROOT_0 = 0;
    static long ODD_ROOT_1 = 1;
    static Dictionary<string, object> newNode(long len_2) {
        return new Dictionary<string, object>{{"length", len_2}, {"edges", new Dictionary<object, object>{}}, {"suffix", 0}};
    }

    static Dictionary<string, object>[] eertree(string s_3) {
        Dictionary<string, object>[] tree_4 = new Dictionary<string, object>[]{};
        tree_4 = (Enumerable.ToArray(Enumerable.Append(tree_4, new Dictionary<string, object>{{"length", 0}, {"suffix", ODD_ROOT_1}, {"edges", new Dictionary<object, object>{}}})));
        tree_4 = (Enumerable.ToArray(Enumerable.Append(tree_4, new Dictionary<string, object>{{"length", -1}, {"suffix", ODD_ROOT_1}, {"edges", new Dictionary<object, object>{}}})));
        long suffix_5 = ODD_ROOT_1;
        long i_6 = 0;
        while ((i_6 < s_3.Length)) {
            string c_7 = s_3.Substring((int)(i_6), (int)((i_6 + 1) - i_6));
            long n_8 = suffix_5;
            long k_9 = 0;
            while (true) {
                k_9 = Convert.ToInt64(((dynamic)tree_4[(int)(n_8)])["length"]);
                long b_10 = ((i_6 - k_9) - 1);
                if (((b_10 >= 0) && (s_3.Substring((int)(b_10), (int)((b_10 + 1) - b_10)) == c_7))) {
                    break;
                }
                n_8 = Convert.ToInt64(((dynamic)tree_4[(int)(n_8)])["suffix"]);
            }
            Dictionary<string, long> edges_11 = (((dynamic)tree_4[(int)(n_8)])["edges"] as Dictionary<string, long>) ?? new Dictionary<string, long>{};
            if ((edges_11.ContainsKey(c_7))) {
                suffix_5 = (edges_11.ContainsKey(c_7) ? edges_11[c_7] : 0);
                i_6 = (i_6 + 1);
                continue;
            }
            suffix_5 = tree_4.Length;
            tree_4 = (Enumerable.ToArray(Enumerable.Append(tree_4, newNode((k_9 + 2)))));
            edges_11[c_7] = suffix_5;
            tree_4[(int)(n_8)]["edges"] = edges_11;
            if ((Convert.ToInt64(((dynamic)tree_4[(int)(suffix_5)])["length"]) == 1)) {
                tree_4[(int)(suffix_5)]["suffix"] = 0;
                i_6 = (i_6 + 1);
                continue;
            }
            while (true) {
                n_8 = Convert.ToInt64(((dynamic)tree_4[(int)(n_8)])["suffix"]);
                long b_12 = ((((dynamic)i_6) - ((dynamic)Convert.ToInt64(((dynamic)tree_4[(int)(n_8)])["length"]))) - 1);
                if (((b_12 >= 0) && (s_3.Substring((int)(b_12), (int)((b_12 + 1) - b_12)) == c_7))) {
                    break;
                }
            }
            Dictionary<string, long> en_13 = (((dynamic)tree_4[(int)(n_8)])["edges"] as Dictionary<string, long>) ?? new Dictionary<string, long>{};
            tree_4[(int)(suffix_5)]["suffix"] = (en_13.ContainsKey(c_7) ? en_13[c_7] : 0);
            i_6 = (i_6 + 1);
        };
        return tree_4;
    }

    static string[] child(Dictionary<string, object>[] tree_14, long idx_15, string p_16, string[] acc_17) {
        Dictionary<string, long> edges_18 = (((dynamic)tree_14[(int)(idx_15)])["edges"] as Dictionary<string, long>) ?? new Dictionary<string, long>{};
        foreach (var ch_19 in edges_18.Keys) {
            long nxt_20 = (edges_18.ContainsKey(ch_19) ? edges_18[ch_19] : 0);
            string pal_21 = ((ch_19 + p_16) + ch_19);
            acc_17 = (Enumerable.ToArray(Enumerable.Append(acc_17, pal_21)));
            acc_17 = child(tree_14, nxt_20, pal_21, acc_17);
        };
        return acc_17;
    }

    static string[] subPalindromes(Dictionary<string, object>[] tree_22) {
        string[] res_23 = new string[]{};
        res_23 = child(tree_22, EVEN_ROOT_0, "", res_23);
        Dictionary<string, long> oEdges_24 = (((dynamic)tree_22[(int)(ODD_ROOT_1)])["edges"] as Dictionary<string, long>) ?? new Dictionary<string, long>{};
        foreach (var ch_25 in oEdges_24.Keys) {
            res_23 = (Enumerable.ToArray(Enumerable.Append(res_23, ch_25)));
            res_23 = child(tree_22, (oEdges_24.ContainsKey(ch_25) ? oEdges_24[ch_25] : 0), ch_25, res_23);
        };
        return res_23;
    }

    static void main() {
        Dictionary<string, object>[] tree_26 = eertree("eertree");
        string[] subs_27 = subPalindromes(tree_26);
        Console.WriteLine(_fmtTop((subs_27).ToString()));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
