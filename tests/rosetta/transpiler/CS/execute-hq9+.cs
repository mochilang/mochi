// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string bottles(long n_0) {
        if ((n_0 == 0)) {
            return "No more bottles";
        };
        if ((n_0 == 1)) {
            return "1 bottle";
        };
        return ((n_0).ToString() + " bottles");
    }

    static void sing99() {
        long i_1 = 99;
        while ((i_1 > 0)) {
            Console.WriteLine(_fmtTop((bottles(i_1) + " of beer on the wall")));
            Console.WriteLine(_fmtTop((bottles(i_1) + " of beer")));
            Console.WriteLine(_fmtTop("Take one down, pass it around"));
            Console.WriteLine(_fmtTop((bottles((i_1 - 1)) + " of beer on the wall")));
            i_1 = (i_1 - 1);
        };
    }

    static void run(string code_2) {
        long acc_3 = 0;
        long i_4 = 0;
        while ((i_4 < code_2.Length)) {
            string ch_5 = code_2.Substring((int)(i_4), (int)((i_4 + 1) - i_4));
            if ((ch_5 == "H")) {
                Console.WriteLine(_fmtTop("Hello, World!"));
            } else {
                if ((ch_5 == "Q")) {
                    Console.WriteLine(_fmtTop(code_2));
                } else {
                    if ((ch_5 == "9")) {
                        sing99();
                    } else {
                        if ((ch_5 == "+")) {
                            acc_3 = (acc_3 + 1);
                        }
                    }
                }
            }
            i_4 = (i_4 + 1);
        };
    }

    static void main() {
        string code_6 = _input();
        run(code_6);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
