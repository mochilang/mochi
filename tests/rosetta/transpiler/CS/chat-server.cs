// Generated by Mochi 0.10.57 on 2025-08-04 21:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static string[] removeName(string[] names_0, string name_1) {
        string[] out_2 = new string[]{};
        foreach (string n_3 in names_0) {
            if ((n_3 != name_1)) {
                out_2 = (Enumerable.ToArray(Enumerable.Append(out_2, n_3)));
            }
        };
        return out_2;
    }

    public static void main() {
        string[] clients_4 = new string[]{};
        Action<string> broadcast = null;
        broadcast = (string msg_5) => {Console.WriteLine(Program._fmtTop(msg_5));};
        Action<string> add = null;
        add = (string name_6) => {clients_4 = (Enumerable.ToArray(Enumerable.Append(clients_4, name_6))); broadcast((("+++ \"" + name_6) + "\" connected +++\n"));};
        Action<string, string> send = null;
        send = (string name_7, string msg_8) => {broadcast((((name_7 + "> ") + msg_8) + "\n"));};
        Action<string> remove = null;
        remove = (string name_9) => {clients_4 = Program.removeName(clients_4, name_9); broadcast((("--- \"" + name_9) + "\" disconnected ---\n"));};
        add("Alice");
        add("Bob");
        send("Alice", "Hello Bob!");
        send("Bob", "Hi Alice!");
        remove("Bob");
        remove("Alice");
        broadcast("Server stopping!\n");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
