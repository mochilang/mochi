// Generated by Mochi 0.10.41 on 2025-07-27 12:32 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            if ((s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2)) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    static long ord(string ch_3) {
        string upper_4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_5 = "abcdefghijklmnopqrstuvwxyz";
        var idx_6 = upper_4.IndexOf(ch_3);
        if ((idx_6 >= 0)) {
            return (((dynamic)65) + ((dynamic)idx_6));
        };
        idx_6 = lower_5.IndexOf(ch_3);
        if ((idx_6 >= 0)) {
            return (((dynamic)97) + ((dynamic)idx_6));
        };
        return 0;
    }

    static string chr(long n_7) {
        string upper_8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_9 = "abcdefghijklmnopqrstuvwxyz";
        if (((n_7 >= 65) && (n_7 < 91))) {
            return upper_8.Substring((int)((n_7 - 65)), (int)((n_7 - 64) - (n_7 - 65)));
        };
        if (((n_7 >= 97) && (n_7 < 123))) {
            return lower_9.Substring((int)((n_7 - 97)), (int)((n_7 - 96) - (n_7 - 97)));
        };
        return "?";
    }

    static string shiftRune(string r_10, long k_11) {
        if (((string.Compare(r_10, "a") >= 0) && (string.Compare(r_10, "z") <= 0))) {
            return chr(((((ord(r_10) - 97) + k_11) % 26) + 97));
        };
        if (((string.Compare(r_10, "A") >= 0) && (string.Compare(r_10, "Z") <= 0))) {
            return chr(((((ord(r_10) - 65) + k_11) % 26) + 65));
        };
        return r_10;
    }

    static string encipher(string s_12, long k_13) {
        string out_14 = "";
        long i_15 = 0;
        while ((i_15 < s_12.Length)) {
            out_14 = (out_14 + shiftRune(s_12.Substring((int)(i_15), (int)((i_15 + 1) - i_15)), k_13));
            i_15 = (i_15 + 1);
        };
        return out_14;
    }

    static string decipher(string s_16, long k_17) {
        return encipher(s_16, ((26 - (k_17 % 26)) % 26));
    }

    static void main() {
        string pt_18 = "The five boxing wizards jump quickly";
        Console.WriteLine(_fmtTop(("Plaintext: " + pt_18)));
        foreach (var key_19 in new long[]{0, 1, 7, 25, 26}) {
            if (((key_19 < 1) || (key_19 > 25))) {
                Console.WriteLine(_fmtTop((("Key " + (key_19).ToString()) + " invalid")));
                continue;
            }
            string ct_20 = encipher(pt_18, key_19);
            Console.WriteLine(_fmtTop(("Key " + (key_19).ToString())));
            Console.WriteLine(_fmtTop(("  Enciphered: " + ct_20)));
            Console.WriteLine(_fmtTop(("  Deciphered: " + decipher(ct_20, key_19))));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
