// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long t_8 = (_now() / 1000000000);
    static long sec_9 = (t_8 % 60);
    static long mins_10 = (t_8 / 60);
    static long min_11 = (mins_10 % 60);
    static long hour_12 = ((mins_10 / 60) % 24);
    static string xs_13 = "";
    static long i_14 = 0;
    static string out_15 = "";
    static long j_16 = 0;
    static long pow2(long exp_0) {
        long r_1 = 1;
        long i_2 = 0;
        while ((i_2 < exp_0)) {
            r_1 = (r_1 * 2);
            i_2 = (i_2 + 1);
        };
        return r_1;
    }

    static string bin(long n_3, long digits_4) {
        string s_5 = "";
        long i_6 = (digits_4 - 1);
        while ((i_6 >= 0)) {
            long p_7 = pow2(i_6);
            if ((n_3 >= p_7)) {
                s_5 = (s_5 + "x");
                n_3 = (n_3 - p_7);
            } else {
                s_5 = (s_5 + " ");
            }
            if ((i_6 > 0)) {
                s_5 = (s_5 + "|");
            }
            i_6 = (i_6 - 1);
        };
        return s_5;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(bin(hour_12, 8)));
            Console.WriteLine(_fmtTop(""));
            Console.WriteLine(_fmtTop(bin(min_11, 8)));
            Console.WriteLine(_fmtTop(""));
            while ((i_14 < sec_9)) {
                xs_13 = (xs_13 + "x");
                i_14 = (i_14 + 1);
            }
            while ((j_16 < xs_13.Length)) {
                out_15 = (out_15 + xs_13.Substring((int)(j_16), (int)((j_16 + 1) - j_16)));
                if (((((j_16 + 1) % 5) == 0) && ((j_16 + 1) < xs_13.Length))) {
                    out_15 = (out_15 + "|");
                }
                j_16 = (j_16 + 1);
            }
            Console.WriteLine(_fmtTop(out_15));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
