// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[][] findDuplicates(Dictionary<string, string> fs_0, string[] paths_1) {
        Dictionary<string, string> seen_2 = new Dictionary<string, string>{};
        string[][] dups_3 = new string[][]{};
        foreach (var path_4 in paths_1) {
            string content_5 = (fs_0.ContainsKey(path_4) ? fs_0[path_4] : "");
            if ((seen_2.ContainsKey(content_5))) {
                dups_3 = (Enumerable.ToArray(Enumerable.Append(dups_3, new string[]{(seen_2.ContainsKey(content_5) ? seen_2[content_5] : ""), path_4})));
            } else {
                seen_2[content_5] = path_4;
            }
        };
        return dups_3;
    }

    static void main() {
        Dictionary<string, string> fs_6 = new Dictionary<string, string>{{"a.txt", "hello"}, {"b.txt", "world"}, {"c.txt", "hello"}, {"d.txt", "foo"}, {"e.txt", "world"}};
        string[] paths_7 = new string[]{"a.txt", "b.txt", "c.txt", "d.txt", "e.txt"};
        string[][] dups_8 = findDuplicates(fs_6, paths_7);
        foreach (var pair_9 in dups_8) {
            Console.WriteLine(_fmtTop(((pair_9[(int)(0)] + " <==> ") + pair_9[(int)(1)])));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
