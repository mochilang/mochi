// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] ops_4 = new string[]{"-x.p(e)", "-(x).p(e)", "(-x).p(e)", "-(x.p(e))"};
    static double p(double x_0, double e_1) {
        double r_2 = 1;
        long i_3 = 0;
        while ((i_3 < Convert.ToInt64(e_1))) {
            r_2 = (r_2 * x_0);
            i_3 = (i_3 + 1);
        };
        return r_2;
    }

    static string padInt(double f_11) {
        string s_12 = (Convert.ToInt64(f_11)).ToString();
        if ((f_11 >= 0)) {
            return (" " + s_12);
        };
        return s_12;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (var x_5 in new double[]{-5, 5}) {
                foreach (var e_6 in new double[]{2, 3}) {
                    double a_7 = -p(x_5, e_6);
                    double b_8 = -p(x_5, e_6);
                    double c_9 = p(-x_5, e_6);
                    double d_10 = -p(x_5, e_6);
                    Console.WriteLine(_fmtTop((((((((((((((((((((("x = " + ((x_5 < 0) ? "" : " ")) + (Convert.ToInt64(x_5)).ToString()) + " e = ") + (Convert.ToInt64(e_6)).ToString()) + " | ") + ops_4[(int)(0)]) + " = ") + padInt(a_7)) + " | ") + ops_4[(int)(1)]) + " = ") + padInt(b_8)) + " | ") + ops_4[(int)(2)]) + " = ") + padInt(c_9)) + " | ") + ops_4[(int)(3)]) + " = ") + padInt(d_10))));
                }
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
