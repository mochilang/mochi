// Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, object> square_to_maps(string[][] square_0) {
        Dictionary<string, long[]> emap_1 = new Dictionary<string, long[]>{};
        Dictionary<string, string> dmap_2 = new Dictionary<string, string>{};
        long x_3 = 0;
        while ((x_3 < square_0.Length)) {
            string[] row_4 = square_0[(int)(x_3)];
            long y_5 = 0;
            while ((y_5 < row_4.Length)) {
                string ch_6 = row_4[(int)(y_5)];
                emap_1[ch_6] = new long[]{x_3, y_5};
                dmap_2[(((x_3).ToString() + ",") + (y_5).ToString())] = ch_6;
                y_5 = (y_5 + 1);
            }
            x_3 = (x_3 + 1);
        };
        return new Dictionary<string, object>{{"e", emap_1}, {"d", dmap_2}};
    }

    static string remove_space(string text_7, Dictionary<string, long[]> emap_8) {
        string s_9 = text_7.ToUpper();
        string out_10 = "";
        long i_11 = 0;
        while ((i_11 < s_9.Length)) {
            string ch_12 = s_9.Substring((int)(i_11), (int)((i_11 + 1) - i_11));
            if (((ch_12 != " ") && (emap_8.ContainsKey(ch_12)))) {
                out_10 = (out_10 + ch_12);
            }
            i_11 = (i_11 + 1);
        };
        return out_10;
    }

    static string encrypt(string text_13, Dictionary<string, long[]> emap_14, Dictionary<string, string> dmap_15) {
        text_13 = remove_space(text_13, emap_14);
        long[] row0_16 = new long[]{};
        long[] row1_17 = new long[]{};
        long i_18 = 0;
        while ((i_18 < text_13.Length)) {
            string ch_19 = text_13.Substring((int)(i_18), (int)((i_18 + 1) - i_18));
            long[] xy_20 = (emap_14.ContainsKey(ch_19) ? emap_14[ch_19] : null);
            row0_16 = (Enumerable.ToArray(Enumerable.Append(row0_16, xy_20[(int)(0)])));
            row1_17 = (Enumerable.ToArray(Enumerable.Append(row1_17, xy_20[(int)(1)])));
            i_18 = (i_18 + 1);
        };
        foreach (var v_21 in row1_17) {
            row0_16 = (Enumerable.ToArray(Enumerable.Append(row0_16, v_21)));
        };
        string res_22 = "";
        long j_23 = 0;
        while ((j_23 < row0_16.Length)) {
            string key_24 = (((row0_16[(int)(j_23)]).ToString() + ",") + (row0_16[(int)((j_23 + 1))]).ToString());
            res_22 = (res_22 + (dmap_15.ContainsKey(key_24) ? dmap_15[key_24] : ""));
            j_23 = (j_23 + 2);
        };
        return res_22;
    }

    static string decrypt(string text_25, Dictionary<string, long[]> emap_26, Dictionary<string, string> dmap_27) {
        text_25 = remove_space(text_25, emap_26);
        long[] coords_28 = new long[]{};
        long i_29 = 0;
        while ((i_29 < text_25.Length)) {
            string ch_30 = text_25.Substring((int)(i_29), (int)((i_29 + 1) - i_29));
            long[] xy_31 = (emap_26.ContainsKey(ch_30) ? emap_26[ch_30] : null);
            coords_28 = (Enumerable.ToArray(Enumerable.Append(coords_28, xy_31[(int)(0)])));
            coords_28 = (Enumerable.ToArray(Enumerable.Append(coords_28, xy_31[(int)(1)])));
            i_29 = (i_29 + 1);
        };
        long half_32 = (((dynamic)coords_28.Length) / ((dynamic)2));
        long[] k1_33 = new long[]{};
        long[] k2_34 = new long[]{};
        long idx_35 = 0;
        while ((idx_35 < half_32)) {
            k1_33 = (Enumerable.ToArray(Enumerable.Append(k1_33, coords_28[(int)(idx_35)])));
            idx_35 = (idx_35 + 1);
        };
        while ((idx_35 < coords_28.Length)) {
            k2_34 = (Enumerable.ToArray(Enumerable.Append(k2_34, coords_28[(int)(idx_35)])));
            idx_35 = (idx_35 + 1);
        };
        string res_36 = "";
        long j_37 = 0;
        while ((j_37 < half_32)) {
            string key_38 = (((k1_33[(int)(j_37)]).ToString() + ",") + (k2_34[(int)(j_37)]).ToString());
            res_36 = (res_36 + (dmap_27.ContainsKey(key_38) ? dmap_27[key_38] : ""));
            j_37 = (j_37 + 1);
        };
        return res_36;
    }

    static void main() {
        string[][] squareRosetta_39 = new string[][]{new string[]{"A", "B", "C", "D", "E"}, new string[]{"F", "G", "H", "I", "K"}, new string[]{"L", "M", "N", "O", "P"}, new string[]{"Q", "R", "S", "T", "U"}, new string[]{"V", "W", "X", "Y", "Z"}, new string[]{"J", "1", "2", "3", "4"}};
        string[][] squareWikipedia_40 = new string[][]{new string[]{"B", "G", "W", "K", "Z"}, new string[]{"Q", "P", "N", "D", "S"}, new string[]{"I", "O", "A", "X", "E"}, new string[]{"F", "C", "L", "U", "M"}, new string[]{"T", "H", "Y", "V", "R"}, new string[]{"J", "1", "2", "3", "4"}};
        string textRosetta_41 = "0ATTACKATDAWN";
        string textWikipedia_42 = "FLEEATONCE";
        string textTest_43 = "The invasion will start on the first of January";
        Dictionary<string, object> maps_44 = square_to_maps(squareRosetta_39);
        var emap_45 = ((dynamic)maps_44)["e"];
        var dmap_46 = ((dynamic)maps_44)["d"];
        Console.WriteLine(_fmtTop("from Rosettacode"));
        Console.WriteLine(_fmtTop(("original:\t " + textRosetta_41)));
        string s_47 = encrypt(textRosetta_41, emap_45, dmap_46);
        Console.WriteLine(_fmtTop(("codiert:\t " + s_47)));
        s_47 = decrypt(s_47, emap_45, dmap_46);
        Console.WriteLine(_fmtTop(("and back:\t " + s_47)));
        maps_44 = square_to_maps(squareWikipedia_40);
        emap_45 = ((dynamic)maps_44)["e"];
        dmap_46 = ((dynamic)maps_44)["d"];
        Console.WriteLine(_fmtTop("from Wikipedia"));
        Console.WriteLine(_fmtTop(("original:\t " + textWikipedia_42)));
        s_47 = encrypt(textWikipedia_42, emap_45, dmap_46);
        Console.WriteLine(_fmtTop(("codiert:\t " + s_47)));
        s_47 = decrypt(s_47, emap_45, dmap_46);
        Console.WriteLine(_fmtTop(("and back:\t " + s_47)));
        maps_44 = square_to_maps(squareWikipedia_40);
        emap_45 = ((dynamic)maps_44)["e"];
        dmap_46 = ((dynamic)maps_44)["d"];
        Console.WriteLine(_fmtTop("from Rosettacode long part"));
        Console.WriteLine(_fmtTop(("original:\t " + textTest_43)));
        s_47 = encrypt(textTest_43, emap_45, dmap_46);
        Console.WriteLine(_fmtTop(("codiert:\t " + s_47)));
        s_47 = decrypt(s_47, emap_45, dmap_46);
        Console.WriteLine(_fmtTop(("and back:\t " + s_47)));
    }

    static void Main() {
        main();
    }
}
