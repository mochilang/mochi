// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, object> square_to_maps(string[][] square) {
        Dictionary<string, long[]> emap_0 = new Dictionary<string, long[]>{};
        Dictionary<string, string> dmap_1 = new Dictionary<string, string>{};
        long x_2 = 0;
        while ((x_2 < square.Length)) {
            string[] row_3 = square[(int)(x_2)];
            long y_4 = 0;
            while ((y_4 < row_3.Length)) {
                string ch_5 = row_3[(int)(y_4)];
                emap_0[ch_5] = new long[]{x_2, y_4};
                dmap_1[(((x_2).ToString() + ",") + (y_4).ToString())] = ch_5;
                y_4 = (y_4 + 1);
            }
            x_2 = (x_2 + 1);
        };
        return new Dictionary<string, object>{{"e", emap_0}, {"d", dmap_1}};
    }

    static string remove_space(string text, Dictionary<string, long[]> emap) {
        var s_6 = text.ToUpper();
        string out_7 = "";
        long i_8 = 0;
        while ((i_8 < s_6.Length)) {
            var ch_9 = s_6.Skip((int)(i_8)).Take((int)(((i_8 + 1) - i_8))).ToArray();
            if (((ch_9 != " ") && (emap.ContainsKey(ch_9)))) {
                out_7 = (((dynamic)out_7) + ((dynamic)ch_9));
            }
            i_8 = (i_8 + 1);
        };
        return out_7;
    }

    static string encrypt(string text, Dictionary<string, long[]> emap, Dictionary<string, string> dmap) {
        text = remove_space(text, emap);
        long[] row0_10 = new long[]{};
        long[] row1_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 < text.Length)) {
            string ch_13 = text.Substring((int)(i_12), (int)((i_12 + 1) - i_12));
            long[] xy_14 = (emap.ContainsKey(ch_13) ? emap[ch_13] : null);
            row0_10 = (Enumerable.ToArray(Enumerable.Append(row0_10, xy_14[(int)(0)])));
            row1_11 = (Enumerable.ToArray(Enumerable.Append(row1_11, xy_14[(int)(1)])));
            i_12 = (i_12 + 1);
        };
        foreach (var v_15 in row1_11) {
            row0_10 = (Enumerable.ToArray(Enumerable.Append(row0_10, v_15)));
        };
        string res_16 = "";
        long j_17 = 0;
        while ((j_17 < row0_10.Length)) {
            string key_18 = (((row0_10[(int)(j_17)]).ToString() + ",") + (row0_10[(int)((j_17 + 1))]).ToString());
            res_16 = (res_16 + (dmap.ContainsKey(key_18) ? dmap[key_18] : ""));
            j_17 = (j_17 + 2);
        };
        return res_16;
    }

    static string decrypt(string text, Dictionary<string, long[]> emap, Dictionary<string, string> dmap) {
        text = remove_space(text, emap);
        long[] coords_19 = new long[]{};
        long i_20 = 0;
        while ((i_20 < text.Length)) {
            string ch_21 = text.Substring((int)(i_20), (int)((i_20 + 1) - i_20));
            long[] xy_22 = (emap.ContainsKey(ch_21) ? emap[ch_21] : null);
            coords_19 = (Enumerable.ToArray(Enumerable.Append(coords_19, xy_22[(int)(0)])));
            coords_19 = (Enumerable.ToArray(Enumerable.Append(coords_19, xy_22[(int)(1)])));
            i_20 = (i_20 + 1);
        };
        long half_23 = (((dynamic)coords_19.Length) / ((dynamic)2));
        long[] k1_24 = new long[]{};
        long[] k2_25 = new long[]{};
        long idx_26 = 0;
        while ((idx_26 < half_23)) {
            k1_24 = (Enumerable.ToArray(Enumerable.Append(k1_24, coords_19[(int)(idx_26)])));
            idx_26 = (idx_26 + 1);
        };
        while ((idx_26 < coords_19.Length)) {
            k2_25 = (Enumerable.ToArray(Enumerable.Append(k2_25, coords_19[(int)(idx_26)])));
            idx_26 = (idx_26 + 1);
        };
        string res_27 = "";
        long j_28 = 0;
        while ((j_28 < half_23)) {
            string key_29 = (((k1_24[(int)(j_28)]).ToString() + ",") + (k2_25[(int)(j_28)]).ToString());
            res_27 = (res_27 + (dmap.ContainsKey(key_29) ? dmap[key_29] : ""));
            j_28 = (j_28 + 1);
        };
        return res_27;
    }

    static void main() {
        string[][] squareRosetta_30 = new string[][]{new string[]{"A", "B", "C", "D", "E"}, new string[]{"F", "G", "H", "I", "K"}, new string[]{"L", "M", "N", "O", "P"}, new string[]{"Q", "R", "S", "T", "U"}, new string[]{"V", "W", "X", "Y", "Z"}, new string[]{"J", "1", "2", "3", "4"}};
        string[][] squareWikipedia_31 = new string[][]{new string[]{"B", "G", "W", "K", "Z"}, new string[]{"Q", "P", "N", "D", "S"}, new string[]{"I", "O", "A", "X", "E"}, new string[]{"F", "C", "L", "U", "M"}, new string[]{"T", "H", "Y", "V", "R"}, new string[]{"J", "1", "2", "3", "4"}};
        string textRosetta_32 = "0ATTACKATDAWN";
        string textWikipedia_33 = "FLEEATONCE";
        string textTest_34 = "The invasion will start on the first of January";
        Dictionary<string, object> maps_35 = square_to_maps(squareRosetta_30);
        var emap_36 = ((dynamic)maps_35)["e"];
        var dmap_37 = ((dynamic)maps_35)["d"];
        Console.WriteLine(_fmtTop("from Rosettacode"));
        Console.WriteLine(_fmtTop(("original:\t " + textRosetta_32)));
        string s_38 = encrypt(textRosetta_32, emap_36, dmap_37);
        Console.WriteLine(_fmtTop(("codiert:\t " + s_38)));
        s_38 = decrypt(s_38, emap_36, dmap_37);
        Console.WriteLine(_fmtTop(("and back:\t " + s_38)));
        maps_35 = square_to_maps(squareWikipedia_31);
        emap_36 = ((dynamic)maps_35)["e"];
        dmap_37 = ((dynamic)maps_35)["d"];
        Console.WriteLine(_fmtTop("from Wikipedia"));
        Console.WriteLine(_fmtTop(("original:\t " + textWikipedia_33)));
        s_38 = encrypt(textWikipedia_33, emap_36, dmap_37);
        Console.WriteLine(_fmtTop(("codiert:\t " + s_38)));
        s_38 = decrypt(s_38, emap_36, dmap_37);
        Console.WriteLine(_fmtTop(("and back:\t " + s_38)));
        maps_35 = square_to_maps(squareWikipedia_31);
        emap_36 = ((dynamic)maps_35)["e"];
        dmap_37 = ((dynamic)maps_35)["d"];
        Console.WriteLine(_fmtTop("from Rosettacode long part"));
        Console.WriteLine(_fmtTop(("original:\t " + textTest_34)));
        s_38 = encrypt(textTest_34, emap_36, dmap_37);
        Console.WriteLine(_fmtTop(("codiert:\t " + s_38)));
        s_38 = decrypt(s_38, emap_36, dmap_37);
        Console.WriteLine(_fmtTop(("and back:\t " + s_38)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
