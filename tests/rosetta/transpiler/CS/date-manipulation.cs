// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, long> months_0 = new Dictionary<string, long>{{"January", 1}, {"February", 2}, {"March", 3}, {"April", 4}, {"May", 5}, {"June", 6}, {"July", 7}, {"August", 8}, {"September", 9}, {"October", 10}, {"November", 11}, {"December", 12}};
    static bool isLeap(long y_1) {
        if (((y_1 % 400) == 0)) {
            return true;
        };
        if (((y_1 % 100) == 0)) {
            return false;
        };
        return ((y_1 % 4) == 0);
    }

    static long daysInMonth(long y_2, long m_3) {
        long feb_4 = (isLeap(y_2) ? 29 : 28);
        long[] lengths_5 = new long[]{31, feb_4, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        return lengths_5[(int)((m_3 - 1))];
    }

    static long daysBeforeYear(long y_6) {
        long days_7 = 0;
        long yy_8 = 1970;
        while ((yy_8 < y_6)) {
            days_7 = (days_7 + 365);
            if (isLeap(yy_8)) {
                days_7 = (days_7 + 1);
            }
            yy_8 = (yy_8 + 1);
        };
        return days_7;
    }

    static long daysBeforeMonth(long y_9, long m_10) {
        long days_11 = 0;
        long mm_12 = 1;
        while ((mm_12 < m_10)) {
            days_11 = (days_11 + daysInMonth(y_9, mm_12));
            mm_12 = (mm_12 + 1);
        };
        return days_11;
    }

    static long epochSeconds(long y_13, long m_14, long d_15, long h_16, long mi_17) {
        long days_18 = ((daysBeforeYear(y_13) + daysBeforeMonth(y_13, m_14)) + (d_15 - 1));
        return (((days_18 * 86400) + (h_16 * 3600)) + (mi_17 * 60));
    }

    static long[] fromEpoch(long sec_19) {
        long days_20 = (sec_19 / 86400);
        long rem_21 = (sec_19 % 86400);
        long y_22 = 1970;
        while (true) {
            long dy_23 = (isLeap(y_22) ? 366 : 365);
            if ((days_20 >= dy_23)) {
                days_20 = (days_20 - dy_23);
                y_22 = (y_22 + 1);
            } else {
                break;
            }
        };
        long m_24 = 1;
        while (true) {
            long dim_25 = daysInMonth(y_22, m_24);
            if ((days_20 >= dim_25)) {
                days_20 = (days_20 - dim_25);
                m_24 = (m_24 + 1);
            } else {
                break;
            }
        };
        long d_26 = (days_20 + 1);
        long h_27 = (rem_21 / 3600);
        long mi_28 = ((rem_21 % 3600) / 60);
        return new long[]{y_22, m_24, d_26, h_27, mi_28};
    }

    static string pad2(long n_29) {
        if ((n_29 < 10)) {
            return ("0" + (n_29).ToString());
        };
        return (n_29).ToString();
    }

    static long absInt(long n_30) {
        if ((n_30 < 0)) {
            return -n_30;
        };
        return n_30;
    }

    static string formatDate(long[] parts_31, long offset_32, string abbr_33) {
        long y_34 = parts_31[(int)(0)];
        long m_35 = parts_31[(int)(1)];
        long d_36 = parts_31[(int)(2)];
        long h_37 = parts_31[(int)(3)];
        long mi_38 = parts_31[(int)(4)];
        string sign_39 = "+";
        if ((offset_32 < 0)) {
            sign_39 = "-";
        };
        long off_40 = (absInt(offset_32) / 60);
        string offh_41 = pad2((off_40 / 60));
        string offm_42 = pad2((off_40 % 60));
        return (((((((((((((((y_34).ToString() + "-") + pad2(m_35)) + "-") + pad2(d_36)) + " ") + pad2(h_37)) + ":") + pad2(mi_38)) + ":00 ") + sign_39) + offh_41) + offm_42) + " ") + abbr_33);
    }

    static long parseIntStr(string str_43) {
        long i_44 = 0;
        bool neg_45 = false;
        if (((str_43.Length > 0) && (str_43.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_45 = true;
            i_44 = 1;
        };
        long n_46 = 0;
        Dictionary<string, long> digits_47 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_44 < str_43.Length)) {
            n_46 = ((n_46 * 10) + (digits_47.ContainsKey(str_43.Substring((int)(i_44), (int)((i_44 + 1) - i_44))) ? digits_47[str_43.Substring((int)(i_44), (int)((i_44 + 1) - i_44))] : 0));
            i_44 = (i_44 + 1);
        };
        if (neg_45) {
            n_46 = -n_46;
        };
        return n_46;
    }

    static long indexOf(string s_48, string ch_49) {
        long i_50 = 0;
        while ((i_50 < s_48.Length)) {
            if ((s_48.Substring((int)(i_50), (int)((i_50 + 1) - i_50)) == ch_49)) {
                return i_50;
            }
            i_50 = (i_50 + 1);
        };
        return -1;
    }

    static long[] parseTime(string s_51) {
        long c_52 = indexOf(s_51, ":");
        long h_53 = parseIntStr(s_51.Substring((int)(0), (int)(c_52 - 0)));
        long mi_54 = parseIntStr(s_51.Substring((int)((c_52 + 1)), (int)((c_52 + 3) - (c_52 + 1))));
        string ampm_55 = s_51.Substring((int)((((dynamic)s_51.Length) - ((dynamic)2))), (int)(s_51.Length - (((dynamic)s_51.Length) - ((dynamic)2))));
        long hh_56 = h_53;
        if (((ampm_55 == "pm") && (h_53 != 12))) {
            hh_56 = (h_53 + 12);
        };
        if (((ampm_55 == "am") && (h_53 == 12))) {
            hh_56 = 0;
        };
        return new long[]{hh_56, mi_54};
    }

    static void main() {
        string input_57 = "March 7 2009 7:30pm EST";
        Console.WriteLine(_fmtTop(("Input:              " + input_57)));
        object[] parts_58 = new object[]{};
        string cur_59 = "";
        long i_60 = 0;
        while ((i_60 < input_57.Length)) {
            string ch_61 = input_57.Substring((int)(i_60), (int)((i_60 + 1) - i_60));
            if ((ch_61 == " ")) {
                if ((cur_59.Length > 0)) {
                    parts_58 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(parts_58.Cast<object>()), cur_59)));
                    cur_59 = "";
                }
            } else {
                cur_59 = (cur_59 + ch_61);
            }
            i_60 = (i_60 + 1);
        };
        if ((cur_59.Length > 0)) {
            parts_58 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(parts_58.Cast<object>()), cur_59)));
        };
        long month_62 = (months_0.ContainsKey(((dynamic)parts_58)[0]) ? months_0[((dynamic)parts_58)[0]] : 0);
        long day_63 = parseIntStr(((dynamic)parts_58)[1]);
        long year_64 = parseIntStr(((dynamic)parts_58)[2]);
        long[] tm_65 = parseTime(((dynamic)parts_58)[3]);
        long hour_66 = tm_65[(int)(0)];
        long minute_67 = tm_65[(int)(1)];
        var tz_68 = ((dynamic)parts_58)[4];
        Dictionary<string, long> zoneOffsets_69 = new Dictionary<string, long>{{"EST", -18000}, {"EDT", -14400}, {"MST", -25200}};
        long local_70 = epochSeconds(year_64, month_62, day_63, hour_66, minute_67);
        long utc_71 = (local_70 - (zoneOffsets_69.ContainsKey(tz_68) ? zoneOffsets_69[tz_68] : 0));
        long utc12_72 = (utc_71 + 43200);
        long startDST_73 = epochSeconds(2009, 3, 8, 7, 0);
        long offEast_74 = -18000;
        if ((utc12_72 >= startDST_73)) {
            offEast_74 = -14400;
        };
        long[] eastParts_75 = fromEpoch((utc12_72 + offEast_74));
        string eastAbbr_76 = "EST";
        if ((offEast_74 == -14400)) {
            eastAbbr_76 = "EDT";
        };
        Console.WriteLine(_fmtTop(("+12 hrs:            " + formatDate(eastParts_75, offEast_74, eastAbbr_76))));
        long offAZ_77 = -25200;
        long[] azParts_78 = fromEpoch((utc12_72 + offAZ_77));
        Console.WriteLine(_fmtTop(("+12 hrs in Arizona: " + formatDate(azParts_78, offAZ_77, "MST"))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
