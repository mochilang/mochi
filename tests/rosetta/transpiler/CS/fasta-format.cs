// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string FASTA_0 = (((((">Rosetta_Example_1\n" + "THERECANBENOSPACE\n") + ">Rosetta_Example_2\n") + "THERECANBESEVERAL\n") + "LINESBUTTHEYALLMUST\n") + "BECONCATENATED");
    static string[] splitLines(string s_1) {
        string[] lines_2 = new string[]{};
        long start_3 = 0;
        long i_4 = 0;
        while ((i_4 < s_1.Length)) {
            if ((s_1.Substring((int)(i_4), (int)((i_4 + 1) - i_4)) == "\n")) {
                lines_2 = (Enumerable.ToArray(Enumerable.Append(lines_2, s_1.Substring((int)(start_3), (int)(i_4 - start_3)))));
                i_4 = (i_4 + 1);
                start_3 = i_4;
            } else {
                i_4 = (i_4 + 1);
            }
        };
        lines_2 = (Enumerable.ToArray(Enumerable.Append(lines_2, s_1.Substring((int)(start_3), (int)(s_1.Length - start_3)))));
        return lines_2;
    }

    static string[] parseFasta(string text_5) {
        string key_6 = "";
        string val_7 = "";
        string[] out_8 = new string[]{};
        foreach (var line_9 in splitLines(text_5)) {
            if ((line_9 == "")) {
                continue;
            }
            if ((line_9.Substring((int)(0), (int)(1 - 0)) == ">")) {
                if ((key_6 != "")) {
                    out_8 = (Enumerable.ToArray(Enumerable.Append(out_8, ((key_6 + ": ") + val_7))));
                }
                string hdr_10 = line_9.Substring((int)(1), (int)(line_9.Length - 1));
                long idx_11 = 0;
                while (((idx_11 < hdr_10.Length) && (hdr_10.Substring((int)(idx_11), (int)((idx_11 + 1) - idx_11)) != " "))) {
                    idx_11 = (idx_11 + 1);
                }
                key_6 = hdr_10.Substring((int)(0), (int)(idx_11 - 0));
                val_7 = "";
            } else {
                if ((key_6 == "")) {
                    Console.WriteLine(_fmtTop("missing header"));
                    return new string[]{};
                }
                val_7 = (val_7 + line_9);
            }
        };
        if ((key_6 != "")) {
            out_8 = (Enumerable.ToArray(Enumerable.Append(out_8, ((key_6 + ": ") + val_7))));
        };
        return out_8;
    }

    static void main() {
        string[] res_12 = parseFasta(FASTA_0);
        foreach (var line_13 in res_12) {
            Console.WriteLine(_fmtTop(line_13));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
