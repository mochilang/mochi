// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long expI(long b_0, long p_1) {
        long r_2 = 1;
        long i_3 = 0;
        while ((i_3 < p_1)) {
            r_2 = (r_2 * b_0);
            i_3 = (i_3 + 1);
        };
        return r_2;
    }

    static double expF(double b_4, long p_5) {
        double r_6 = 1;
        double pow_7 = b_4;
        long n_8 = p_5;
        bool neg_9 = false;
        if ((p_5 < 0)) {
            n_8 = -p_5;
            neg_9 = true;
        };
        while ((n_8 > 0)) {
            if (((n_8 % 2) == 1)) {
                r_6 = (r_6 * pow_7);
            }
            pow_7 = (pow_7 * pow_7);
            n_8 = (n_8 / 2);
        };
        if (neg_9) {
            r_6 = (1 / r_6);
        };
        return r_6;
    }

    static void printExpF(double b_10, long p_11) {
        if (((b_10 == 0) && (p_11 < 0))) {
            Console.WriteLine(_fmtTop(((((b_10).ToString() + "^") + (p_11).ToString()) + ": +Inf")));
        } else {
            Console.WriteLine(_fmtTop((((((b_10).ToString() + "^") + (p_11).ToString()) + ": ") + (expF(b_10, p_11)).ToString())));
        };
    }

    static void main() {
        Console.WriteLine(_fmtTop("expI tests"));
        foreach (var pair_12 in new long[][]{new long[]{2, 10}, new long[]{2, -10}, new long[]{-2, 10}, new long[]{-2, 11}, new long[]{11, 0}}) {
            if ((pair_12[(int)(1)] < 0)) {
                Console.WriteLine(_fmtTop(((((pair_12[(int)(0)]).ToString() + "^") + (pair_12[(int)(1)]).ToString()) + ": negative power not allowed")));
            } else {
                Console.WriteLine(_fmtTop((((((pair_12[(int)(0)]).ToString() + "^") + (pair_12[(int)(1)]).ToString()) + ": ") + (expI(pair_12[(int)(0)], pair_12[(int)(1)])).ToString())));
            }
        };
        Console.WriteLine(_fmtTop("overflow undetected"));
        Console.WriteLine(_fmtTop(("10^10: " + (expI(10, 10)).ToString())));
        Console.WriteLine(_fmtTop("\nexpF tests:"));
        foreach (var pair_13 in new object[]{new object[]{2, 10}, new object[]{2, -10}, new object[]{-2, 10}, new object[]{-2, 11}, new object[]{11, 0}}) {
            printExpF(((dynamic)pair_13)[0], ((dynamic)pair_13)[1]);
        };
        Console.WriteLine(_fmtTop("disallowed in expI, allowed here"));
        printExpF(0, -1);
        Console.WriteLine(_fmtTop("other interesting cases for 32 bit float type"));
        printExpF(10, 39);
        printExpF(10, -39);
        printExpF(-10, 39);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
