// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long gcd(long a_0, long b_1) {
        long x_2 = a_0;
        if ((x_2 < 0)) {
            x_2 = -x_2;
        };
        long y_3 = b_1;
        if ((y_3 < 0)) {
            y_3 = -y_3;
        };
        while ((y_3 != 0)) {
            long t_4 = (x_2 % y_3);
            x_2 = y_3;
            y_3 = t_4;
        };
        return x_2;
    }

    static long[] divisors(long n_5) {
        long[] divs_6 = new long[]{};
        long i_7 = 1;
        while (((i_7 * i_7) <= n_5)) {
            if (((n_5 % i_7) == 0)) {
                divs_6 = (Enumerable.ToArray(Enumerable.Append(divs_6, i_7)));
                var j_8 = Convert.ToInt64((n_5 / i_7));
                if ((i_7 != j_8)) {
                    divs_6 = (Enumerable.ToArray(Enumerable.Append(divs_6, j_8)));
                }
            }
            i_7 = (i_7 + 1);
        };
        return divs_6;
    }

    static long sum(long[] xs_9) {
        long s_10 = 0;
        foreach (var v_11 in xs_9) {
            s_10 = (s_10 + v_11);
        };
        return s_10;
    }

    static bool isDuffinian(long n_12) {
        long[] divs_13 = divisors(n_12);
        if ((divs_13.Length <= 2)) {
            return false;
        };
        long sigma_14 = sum(divs_13);
        return (gcd(sigma_14, n_12) == 1);
    }

    static string pad(long n_15, long width_16) {
        string s_17 = (n_15).ToString();
        while ((s_17.Length < width_16)) {
            s_17 = (" " + s_17);
        };
        return s_17;
    }

    static void printTable(long[] nums_18, long perRow_19, long width_20) {
        long i_21 = 0;
        string line_22 = "";
        while ((i_21 < nums_18.Length)) {
            line_22 = ((line_22 + " ") + pad(nums_18[(int)(i_21)], width_20));
            if ((((i_21 + 1) % perRow_19) == 0)) {
                Console.WriteLine(_fmtTop(line_22.Substring((int)(1), (int)(line_22.Length - 1))));
                line_22 = "";
            }
            i_21 = (i_21 + 1);
        };
        if ((line_22.Length > 0)) {
            Console.WriteLine(_fmtTop(line_22.Substring((int)(1), (int)(line_22.Length - 1))));
        };
    }

    static void main() {
        long[] duff_23 = new long[]{};
        long n_24 = 1;
        while ((duff_23.Length < 50)) {
            if (isDuffinian(n_24)) {
                duff_23 = (Enumerable.ToArray(Enumerable.Append(duff_23, n_24)));
            }
            n_24 = (n_24 + 1);
        };
        Console.WriteLine(_fmtTop("First 50 Duffinian numbers:"));
        printTable(duff_23, 10, 3);
        string[] triplets_25 = new string[]{};
        n_24 = 1;
        while ((triplets_25.Length < 20)) {
            if (((isDuffinian(n_24) && isDuffinian((n_24 + 1))) && isDuffinian((n_24 + 2)))) {
                triplets_25 = (Enumerable.ToArray(Enumerable.Append(triplets_25, (((((("(" + (n_24).ToString()) + ",") + ((n_24 + 1)).ToString()) + ",") + ((n_24 + 2)).ToString()) + ")"))));
                n_24 = (n_24 + 3);
            }
            n_24 = (n_24 + 1);
        };
        Console.WriteLine(_fmtTop("\nFirst 20 Duffinian triplets:"));
        long i_26 = 0;
        while ((i_26 < triplets_25.Length)) {
            string line_27 = "";
            long j_28 = 0;
            while (((j_28 < 4) && (i_26 < triplets_25.Length))) {
                line_27 = (line_27 + padStr(triplets_25[(int)(i_26)], 16));
                j_28 = (j_28 + 1);
                i_26 = (i_26 + 1);
            }
            Console.WriteLine(_fmtTop(line_27));
        };
    }

    static string padStr(string s_29, long width_30) {
        string res_31 = s_29;
        while ((res_31.Length < width_30)) {
            res_31 = (res_31 + " ");
        };
        return res_31;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
