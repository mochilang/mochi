// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[][] params_15 = new long[][]{new long[]{12, 1}, new long[]{12, 2}, new long[]{123, 45}};
    static long idx_16 = 0;
    static string commatize(long n_0) {
        string s_1 = (n_0).ToString();
        long i_2 = (((dynamic)s_1.Length) % ((dynamic)3));
        if ((i_2 == 0)) {
            i_2 = 3;
        };
        string out_3 = s_1.Substring((int)(0), (int)(i_2 - 0));
        while ((i_2 < s_1.Length)) {
            out_3 = ((out_3 + ",") + s_1.Substring((int)(i_2), (int)((i_2 + 3) - i_2)));
            i_2 = (i_2 + 3);
        };
        return out_3;
    }

    static long p(long L_4, long n_5) {
        string Ls_6 = (L_4).ToString();
        long digits_7 = 1;
        long d_8 = 1;
        while ((d_8 <= (((dynamic)18) - ((dynamic)Ls_6.Length)))) {
            digits_7 = (digits_7 * 10);
            d_8 = (d_8 + 1);
        };
        long ten18_9 = 1000000000000000000L;
        long count_10 = 0;
        long i_11 = 0;
        long probe_12 = 1;
        while (true) {
            probe_12 = (probe_12 * 2);
            i_11 = (i_11 + 1);
            if ((probe_12 >= ten18_9)) {
                while (true) {
                    if ((probe_12 >= ten18_9)) {
                        probe_12 = (probe_12 / 10);
                    }
                    if (((probe_12 / digits_7) == L_4)) {
                        count_10 = (count_10 + 1);
                        if ((count_10 >= n_5)) {
                            count_10 = (count_10 - 1);
                            break;
                        }
                    }
                    probe_12 = (probe_12 * 2);
                    i_11 = (i_11 + 1);
                }
            }
            string ps_13 = (probe_12).ToString();
            var le_14 = Ls_6.Length;
            if ((le_14 > ps_13.Length)) {
                le_14 = ps_13.Length;
            }
            if ((ps_13.Substring((int)(0), (int)(le_14 - 0)) == Ls_6)) {
                count_10 = (count_10 + 1);
                if ((count_10 >= n_5)) {
                    break;
                }
            }
        };
        return i_11;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((idx_16 < params_15.Length)) {
                long L_17 = params_15[(int)(idx_16)][(int)(0)];
                long m_18 = params_15[(int)(idx_16)][(int)(1)];
                Console.WriteLine(_fmtTop(((((("p(" + (L_17).ToString()) + ", ") + (m_18).ToString()) + ") = ") + commatize(p(L_17, m_18)))));
                idx_16 = (idx_16 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
