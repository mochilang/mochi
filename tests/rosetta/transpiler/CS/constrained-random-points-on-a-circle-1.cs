// Generated by Mochi 0.10.41 on 2025-07-27 07:48 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long nPts_0 = 100;
    static long rMin_1 = 10;
    static long rMax_2 = 15;
    static long span_3 = ((rMax_2 + 1) + rMax_2);
    static string[][] rows_4 = new string[][]{};
    static long r_5 = 0;
    static long u_8 = 0;
    static Dictionary<string, bool> seen_9 = new Dictionary<string, bool>{};
    static long min2_10 = (rMin_1 * rMin_1);
    static long max2_11 = (rMax_2 * rMax_2);
    static long n_12 = 0;
    static long i_19 = 0;
    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((r_5 < span_3)) {
                string[] row_6 = new string[]{};
                long c_7 = 0;
                while ((c_7 < (span_3 * 2))) {
                    row_6 = (Enumerable.ToArray(Enumerable.Append(row_6, " ")));
                    c_7 = (c_7 + 1);
                }
                rows_4 = (Enumerable.ToArray(Enumerable.Append(rows_4, row_6)));
                r_5 = (r_5 + 1);
            }
            while ((n_12 < nPts_0)) {
                long x_13 = ((_now() % span_3) - rMax_2);
                long y_14 = ((_now() % span_3) - rMax_2);
                long rs_15 = ((x_13 * x_13) + (y_14 * y_14));
                if (((rs_15 < min2_10) || (rs_15 > max2_11))) {
                    continue;
                }
                n_12 = (n_12 + 1);
                long row_16 = (y_14 + rMax_2);
                long col_17 = ((x_13 + rMax_2) * 2);
                rows_4[(int)(row_16)][col_17] = "*";
                string key_18 = (((row_16).ToString() + ",") + (col_17).ToString());
                if ((!(seen_9.ContainsKey(key_18) ? seen_9[key_18] : false))) {
                    seen_9[key_18] = true;
                    u_8 = (u_8 + 1);
                }
            }
            while ((i_19 < span_3)) {
                string line_20 = "";
                long j_21 = 0;
                while ((j_21 < (span_3 * 2))) {
                    line_20 = (line_20 + rows_4[(int)(i_19)][(int)(j_21)]);
                    j_21 = (j_21 + 1);
                }
                Console.WriteLine(_fmtTop(line_20));
                i_19 = (i_19 + 1);
            }
            Console.WriteLine(_fmtTop(((u_8).ToString() + " unique points")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
