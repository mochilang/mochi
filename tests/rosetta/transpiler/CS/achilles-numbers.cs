// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Collections.Generic;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<int, bool> pps = new Dictionary<int, bool>{};
    static int pow10(int exp) {
        int n = 1;
        int i = 0;
        while ((i < exp)) {
            n = (n * 10);
            i = (i + 1);
        };
        return n;
    }

    static int totient(int n) {
        int tot = n;
        int nn = n;
        int i = 2;
        while (((i * i) <= nn)) {
            if (((nn % i) == 0)) {
                while (((nn % i) == 0)) {
                    nn = (nn / i);
                }
                tot = (tot - (tot / i));
            }
            if ((i == 2)) {
                i = 1;
            }
            i = (i + 2);
        };
        if ((nn > 1)) {
            tot = (tot - (tot / nn));
        };
        return tot;
    }

    static void getPerfectPowers(int maxExp) {
        int upper = pow10(maxExp);
        int i = 2;
        while (((i * i) < upper)) {
            var p = i;
            while (true) {
                p = (p * i);
                if ((p >= upper)) {
                    break;
                }
                pps[p] = true;
            }
            i = (i + 1);
        };
    }

    static Dictionary<int, bool> getAchilles(int minExp, int maxExp) {
        int lower = pow10(minExp);
        int upper = pow10(maxExp);
        Dictionary<int, bool> achilles = new Dictionary<int, bool>{};
        int b = 1;
        while ((((b * b) * b) < upper)) {
            var b3 = ((b * b) * b);
            int a = 1;
            while (true) {
                var p = ((b3 * a) * a);
                if ((p >= upper)) {
                    break;
                }
                if ((p >= lower)) {
                    if ((!(pps.ContainsKey(p)))) {
                        achilles[p] = true;
                    }
                }
                a = (a + 1);
            }
            b = (b + 1);
        };
        return achilles;
    }

    static int[] sortInts(int[] xs) {
        int[] res = new int[]{};
        int[] tmp = xs;
        while ((tmp.Length > 0)) {
            var min = tmp[0];
            int idx = 0;
            int i = 1;
            while ((i < tmp.Length)) {
                if ((tmp[i] < min)) {
                    min = tmp[i];
                    idx = i;
                }
                i = (i + 1);
            }
            res = (res + new int[]{min});
            int[] _out = new int[]{};
            int j = 0;
            while ((j < tmp.Length)) {
                if ((j != idx)) {
                    _out = (_out + new int[]{tmp[j]});
                }
                j = (j + 1);
            }
            tmp = _out;
        };
        return res;
    }

    static string pad(int n, int width) {
        string s = n.ToString();
        while ((s.Length < width)) {
            s = (" " + s);
        };
        return s;
    }

    static void main() {
        int maxDigits = 15;
        getPerfectPowers(5);
        Dictionary<int, bool> achSet = getAchilles(1, 5);
        int[] ach = new int[]{};
        foreach (var k_0 in achSet.keys()) {
            ach = (ach + new object[]{k_0});
        };
        ach = sortInts(ach);
        Console.WriteLine(_fmtTop("First 50 Achilles numbers:"));
        int i = 0;
        while ((i < 50)) {
            string line = "";
            int j = 0;
            while ((j < 10)) {
                line = (line + pad(ach[i], 4));
                if ((j < 9)) {
                    line = (line + " ");
                }
                i = (i + 1);
                j = (j + 1);
            }
            Console.WriteLine(_fmtTop(line));
        };
        Console.WriteLine(_fmtTop("\nFirst 30 strong Achilles numbers:"));
        int[] strong = new int[]{};
        int count = 0;
        int idx = 0;
        while ((count < 30)) {
            int tot = totient(ach[idx]);
            if ((achSet.ContainsKey(tot))) {
                strong = (strong + new int[]{ach[idx]});
                count = (count + 1);
            }
            idx = (idx + 1);
        };
        i = 0;
        while ((i < 30)) {
            string line = "";
            int j = 0;
            while ((j < 10)) {
                line = (line + pad(strong[i], 5));
                if ((j < 9)) {
                    line = (line + " ");
                }
                i = (i + 1);
                j = (j + 1);
            }
            Console.WriteLine(_fmtTop(line));
        };
        Console.WriteLine(_fmtTop("\nNumber of Achilles numbers with:"));
        int[] counts = new int[]{1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383};
        int d = 2;
        while ((d <= maxDigits)) {
            var c = counts[(d - 2)];
            Console.WriteLine(_fmtTop(((pad(d, 2) + " digits: ") + c.ToString())));
            d = (d + 1);
        };
    }

    static void Main() {
        main();
    }
}
