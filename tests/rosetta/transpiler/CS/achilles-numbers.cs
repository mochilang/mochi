// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<long, bool> pps_7 = new Dictionary<long, bool>{};
    static long pow10(long exp_0) {
        long n_1 = 1;
        long i_2 = 0;
        while ((i_2 < exp_0)) {
            n_1 = (n_1 * 10);
            i_2 = (i_2 + 1);
        };
        return n_1;
    }

    static long totient(long n_3) {
        long tot_4 = n_3;
        long nn_5 = n_3;
        long i_6 = 2;
        while (((i_6 * i_6) <= nn_5)) {
            if (((nn_5 % i_6) == 0)) {
                while (((nn_5 % i_6) == 0)) {
                    nn_5 = (nn_5 / i_6);
                }
                tot_4 = (tot_4 - (tot_4 / i_6));
            }
            if ((i_6 == 2)) {
                i_6 = 1;
            }
            i_6 = (i_6 + 2);
        };
        if ((nn_5 > 1)) {
            tot_4 = (tot_4 - (tot_4 / nn_5));
        };
        return tot_4;
    }

    static void getPerfectPowers(long maxExp_8) {
        long upper_9 = pow10(maxExp_8);
        long i_10 = 2;
        while (((i_10 * i_10) < upper_9)) {
            long p_11 = i_10;
            while (true) {
                p_11 = (p_11 * i_10);
                if ((p_11 >= upper_9)) {
                    break;
                }
                pps_7[p_11] = true;
            }
            i_10 = (i_10 + 1);
        };
    }

    static Dictionary<long, bool> getAchilles(long minExp_12, long maxExp_13) {
        long lower_14 = pow10(minExp_12);
        long upper_15 = pow10(maxExp_13);
        Dictionary<long, bool> achilles_16 = new Dictionary<long, bool>{};
        long b_17 = 1;
        while ((((b_17 * b_17) * b_17) < upper_15)) {
            long b3_18 = ((b_17 * b_17) * b_17);
            long a_19 = 1;
            while (true) {
                long p_20 = ((b3_18 * a_19) * a_19);
                if ((p_20 >= upper_15)) {
                    break;
                }
                if ((p_20 >= lower_14)) {
                    if ((!(pps_7.ContainsKey(p_20)))) {
                        achilles_16[p_20] = true;
                    }
                }
                a_19 = (a_19 + 1);
            }
            b_17 = (b_17 + 1);
        };
        return achilles_16;
    }

    static long[] sortInts(long[] xs_21) {
        long[] res_22 = new long[]{};
        long[] tmp_23 = xs_21;
        while ((tmp_23.Length > 0)) {
            long min_24 = tmp_23[(int)(0)];
            long idx_25 = 0;
            long i_26 = 1;
            while ((i_26 < tmp_23.Length)) {
                if ((tmp_23[(int)(i_26)] < min_24)) {
                    min_24 = tmp_23[(int)(i_26)];
                    idx_25 = i_26;
                }
                i_26 = (i_26 + 1);
            }
            res_22 = (res_22.Concat(new long[]{min_24}).ToArray());
            long[] out_27 = new long[]{};
            long j_28 = 0;
            while ((j_28 < tmp_23.Length)) {
                if ((j_28 != idx_25)) {
                    out_27 = (out_27.Concat(new long[]{tmp_23[(int)(j_28)]}).ToArray());
                }
                j_28 = (j_28 + 1);
            }
            tmp_23 = out_27;
        };
        return res_22;
    }

    static string pad(long n_29, long width_30) {
        string s_31 = (n_29).ToString();
        while ((s_31.Length < width_30)) {
            s_31 = (" " + s_31);
        };
        return s_31;
    }

    static void main() {
        long maxDigits_32 = 15;
        getPerfectPowers(5);
        Dictionary<long, bool> achSet_33 = getAchilles(1, 5);
        long[] ach_34 = new long[]{};
        foreach (var k_35 in achSet_33.Keys) {
            ach_34 = (ach_34.Concat(new long[]{k_35}).ToArray());
        };
        ach_34 = sortInts(ach_34);
        Console.WriteLine(_fmtTop("First 50 Achilles numbers:"));
        long i_36 = 0;
        while ((i_36 < 50)) {
            string line_37 = "";
            long j_38 = 0;
            while ((j_38 < 10)) {
                line_37 = (line_37 + pad(ach_34[(int)(i_36)], 4));
                if ((j_38 < 9)) {
                    line_37 = (line_37 + " ");
                }
                i_36 = (i_36 + 1);
                j_38 = (j_38 + 1);
            }
            Console.WriteLine(_fmtTop(line_37));
        };
        Console.WriteLine(_fmtTop("\nFirst 30 strong Achilles numbers:"));
        long[] strong_39 = new long[]{};
        long count_40 = 0;
        long idx_41 = 0;
        while ((count_40 < 30)) {
            long tot_42 = totient(ach_34[(int)(idx_41)]);
            if ((achSet_33.ContainsKey(tot_42))) {
                strong_39 = (strong_39.Concat(new long[]{ach_34[(int)(idx_41)]}).ToArray());
                count_40 = (count_40 + 1);
            }
            idx_41 = (idx_41 + 1);
        };
        i_36 = 0;
        while ((i_36 < 30)) {
            string line_43 = "";
            long j_44 = 0;
            while ((j_44 < 10)) {
                line_43 = (line_43 + pad(strong_39[(int)(i_36)], 5));
                if ((j_44 < 9)) {
                    line_43 = (line_43 + " ");
                }
                i_36 = (i_36 + 1);
                j_44 = (j_44 + 1);
            }
            Console.WriteLine(_fmtTop(line_43));
        };
        Console.WriteLine(_fmtTop("\nNumber of Achilles numbers with:"));
        long[] counts_45 = new long[]{1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383};
        long d_46 = 2;
        while ((d_46 <= maxDigits_32)) {
            long c_47 = counts_45[(int)((d_46 - 2))];
            Console.WriteLine(_fmtTop(((pad(d_46, 2) + " digits: ") + (c_47).ToString())));
            d_46 = (d_46 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
