// Generated by Mochi 0.10.40 on 2025-07-25 12:33 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<long, bool> pps_5 = new Dictionary<long, bool>{};
    static long pow10(long exp) {
        long n_0 = 1;
        long i_1 = 0;
        while ((i_1 < exp)) {
            n_0 = (n_0 * 10);
            i_1 = (i_1 + 1);
        };
        return n_0;
    }

    static long totient(long n) {
        long tot_2 = n;
        long nn_3 = n;
        long i_4 = 2;
        while (((i_4 * i_4) <= nn_3)) {
            if (((nn_3 % i_4) == 0)) {
                while (((nn_3 % i_4) == 0)) {
                    nn_3 = (nn_3 / i_4);
                }
                tot_2 = (tot_2 - (tot_2 / i_4));
            }
            if ((i_4 == 2)) {
                i_4 = 1;
            }
            i_4 = (i_4 + 2);
        };
        if ((nn_3 > 1)) {
            tot_2 = (tot_2 - (tot_2 / nn_3));
        };
        return tot_2;
    }

    static void getPerfectPowers(long maxExp) {
        long upper_6 = pow10(maxExp);
        long i_7 = 2;
        while (((i_7 * i_7) < upper_6)) {
            long p_8 = i_7;
            while (true) {
                p_8 = (p_8 * i_7);
                if ((p_8 >= upper_6)) {
                    break;
                }
                pps_5[p_8] = true;
            }
            i_7 = (i_7 + 1);
        };
    }

    static Dictionary<long, bool> getAchilles(long minExp, long maxExp) {
        long lower_9 = pow10(minExp);
        long upper_10 = pow10(maxExp);
        Dictionary<long, bool> achilles_11 = new Dictionary<long, bool>{};
        long b_12 = 1;
        while ((((b_12 * b_12) * b_12) < upper_10)) {
            long b3_13 = ((b_12 * b_12) * b_12);
            long a_14 = 1;
            while (true) {
                long p_15 = ((b3_13 * a_14) * a_14);
                if ((p_15 >= upper_10)) {
                    break;
                }
                if ((p_15 >= lower_9)) {
                    if ((!(pps_5.ContainsKey(p_15)))) {
                        achilles_11[p_15] = true;
                    }
                }
                a_14 = (a_14 + 1);
            }
            b_12 = (b_12 + 1);
        };
        return achilles_11;
    }

    static long[] sortInts(long[] xs) {
        long[] res_16 = new long[]{};
        long[] tmp_17 = xs;
        while ((tmp_17.Length > 0)) {
            long min_18 = tmp_17[0];
            long idx_19 = 0;
            long i_20 = 1;
            while ((i_20 < tmp_17.Length)) {
                if ((tmp_17[i_20] < min_18)) {
                    min_18 = tmp_17[i_20];
                    idx_19 = i_20;
                }
                i_20 = (i_20 + 1);
            }
            res_16 = (res_16.Concat(new long[]{min_18}).ToArray());
            long[] out_21 = new long[]{};
            long j_22 = 0;
            while ((j_22 < tmp_17.Length)) {
                if ((j_22 != idx_19)) {
                    out_21 = (out_21.Concat(new long[]{tmp_17[j_22]}).ToArray());
                }
                j_22 = (j_22 + 1);
            }
            tmp_17 = out_21;
        };
        return res_16;
    }

    static string pad(long n, long width) {
        string s_23 = (n).ToString();
        while ((s_23.Length < width)) {
            s_23 = (" " + s_23);
        };
        return s_23;
    }

    static void main() {
        long maxDigits_24 = 15;
        getPerfectPowers(5);
        Dictionary<long, bool> achSet_25 = getAchilles(1, 5);
        long[] ach_26 = new long[]{};
        foreach (var k_27 in achSet_25.Keys) {
            ach_26 = (ach_26.Concat(new long[]{k_27}).ToArray());
        };
        ach_26 = sortInts(ach_26);
        Console.WriteLine(_fmtTop("First 50 Achilles numbers:"));
        long i_28 = 0;
        while ((i_28 < 50)) {
            string line_29 = "";
            long j_30 = 0;
            while ((j_30 < 10)) {
                line_29 = (line_29 + pad(ach_26[i_28], 4));
                if ((j_30 < 9)) {
                    line_29 = (line_29 + " ");
                }
                i_28 = (i_28 + 1);
                j_30 = (j_30 + 1);
            }
            Console.WriteLine(_fmtTop(line_29));
        };
        Console.WriteLine(_fmtTop("\nFirst 30 strong Achilles numbers:"));
        long[] strong_31 = new long[]{};
        long count_32 = 0;
        long idx_33 = 0;
        while ((count_32 < 30)) {
            long tot_34 = totient(ach_26[idx_33]);
            if ((achSet_25.ContainsKey(tot_34))) {
                strong_31 = (strong_31.Concat(new long[]{ach_26[idx_33]}).ToArray());
                count_32 = (count_32 + 1);
            }
            idx_33 = (idx_33 + 1);
        };
        i_28 = 0;
        while ((i_28 < 30)) {
            string line_35 = "";
            long j_36 = 0;
            while ((j_36 < 10)) {
                line_35 = (line_35 + pad(strong_31[i_28], 5));
                if ((j_36 < 9)) {
                    line_35 = (line_35 + " ");
                }
                i_28 = (i_28 + 1);
                j_36 = (j_36 + 1);
            }
            Console.WriteLine(_fmtTop(line_35));
        };
        Console.WriteLine(_fmtTop("\nNumber of Achilles numbers with:"));
        long[] counts_37 = new long[]{1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383};
        long d_38 = 2;
        while ((d_38 <= maxDigits_24)) {
            long c_39 = counts_37[(d_38 - 2)];
            Console.WriteLine(_fmtTop(((pad(d_38, 2) + " digits: ") + (c_39).ToString())));
            d_38 = (d_38 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
