// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Window {
    public long x;
    public long y;
    public long w;
    public long h;
    public bool maximized;
    public bool iconified;
    public bool visible;
    public bool shifted;
    public override string ToString() => $"Window {{x = {x}, y = {y}, w = {w}, h = {h}, maximized = {maximized}, iconified = {iconified}, visible = {visible}, shifted = {shifted}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static void showState(Window w_0, string label_1) {
        Console.WriteLine(_fmtTop(((((((((((((((label_1 + ": pos=(") + (w_0.x).ToString()) + ",") + (w_0.y).ToString()) + ") size=(") + (w_0.w).ToString()) + "x") + (w_0.h).ToString()) + ") max=") + (w_0.maximized).ToString()) + " icon=") + (w_0.iconified).ToString()) + " visible=") + (w_0.visible).ToString())));
    }

    static Window maximize(Window w_2) {
        w_2.maximized = true;
        w_2.w = 800;
        w_2.h = 600;
        return w_2;
    }

    static Window unmaximize(Window w_3) {
        w_3.maximized = false;
        w_3.w = 640;
        w_3.h = 480;
        return w_3;
    }

    static Window iconify(Window w_4) {
        w_4.iconified = true;
        w_4.visible = false;
        return w_4;
    }

    static Window deiconify(Window w_5) {
        w_5.iconified = false;
        w_5.visible = true;
        return w_5;
    }

    static Window hide(Window w_6) {
        w_6.visible = false;
        return w_6;
    }

    static Window showWindow(Window w_7) {
        w_7.visible = true;
        return w_7;
    }

    static Window move(Window w_8) {
        if (w_8.shifted) {
            w_8.x = (w_8.x - 10);
            w_8.y = (w_8.y - 10);
        } else {
            w_8.x = (w_8.x + 10);
            w_8.y = (w_8.y + 10);
        };
        w_8.shifted = (!w_8.shifted);
        return w_8;
    }

    static void main() {
        Window win_9 = new Window{x = 100, y = 100, w = 640, h = 480, maximized = false, iconified = false, visible = true, shifted = false};
        showState(win_9, "Start");
        win_9 = maximize(win_9);
        showState(win_9, "Maximize");
        win_9 = unmaximize(win_9);
        showState(win_9, "Unmaximize");
        win_9 = iconify(win_9);
        showState(win_9, "Iconify");
        win_9 = deiconify(win_9);
        showState(win_9, "Deiconify");
        win_9 = hide(win_9);
        showState(win_9, "Hide");
        win_9 = showWindow(win_9);
        showState(win_9, "Show");
        win_9 = move(win_9);
        showState(win_9, "Move");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
