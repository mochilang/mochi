// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long log10floor(long n_0) {
        long p_1 = 0;
        long v_2 = n_0;
        while ((v_2 >= 10)) {
            v_2 = Convert.ToInt64((v_2 / 10));
            p_1 = (p_1 + 1);
        };
        return p_1;
    }

    static string commatize(long n_3) {
        string s_4 = (n_3).ToString();
        string res_5 = "";
        long i_6 = 0;
        while ((i_6 < s_4.Length)) {
            if (((i_6 > 0) && (((((dynamic)(s_4.Length)) - ((dynamic)(i_6))) % 3) == 0))) {
                res_5 = (res_5 + ",");
            }
            res_5 = (res_5 + s_4.Substring((int)(i_6), (int)((i_6 + 1) - i_6)));
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    static void showDistribution(long[] sizes_7) {
        long[] bins_8 = new long[]{};
        long i_9 = 0;
        while ((i_9 < 12)) {
            bins_8 = (Enumerable.ToArray(Enumerable.Append(bins_8, 0)));
            i_9 = (i_9 + 1);
        };
        long total_10 = 0;
        foreach (var sz_11 in sizes_7) {
            total_10 = (total_10 + sz_11);
            long idx_12 = 0;
            if ((sz_11 > 0)) {
                idx_12 = (log10floor(sz_11) + 1);
            }
            bins_8[idx_12] = (bins_8[(int)(idx_12)] + 1);
        };
        Console.WriteLine(_fmtTop("File size distribution:\n"));
        i_9 = 0;
        while ((i_9 < bins_8.Length)) {
            string prefix_13 = "  ";
            if ((i_9 > 0)) {
                prefix_13 = "+ ";
            }
            Console.WriteLine(_fmtTop(((((prefix_13 + "Files less than 10 ^ ") + (i_9).ToString()) + " bytes : ") + (bins_8[(int)(i_9)]).ToString())));
            i_9 = (i_9 + 1);
        };
        Console.WriteLine(_fmtTop("                                  -----"));
        Console.WriteLine(_fmtTop(("= Total number of files         : " + (sizes_7.Length).ToString())));
        Console.WriteLine(_fmtTop((("  Total size of files           : " + commatize(total_10)) + " bytes")));
    }

    static void main() {
        long[] sizes_14 = new long[]{0, 1, 9, 10, 99, 100, 1234, 50000, 730000, 8200000};
        showDistribution(sizes_14);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
