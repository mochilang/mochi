// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Security.Cryptography;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static long[] _sha256(long[] bs) {
        using var sha = System.Security.Cryptography.SHA256.Create();
        var bytes = new byte[bs.Length];
        for (int i = 0; i < bs.Length; i++) bytes[i] = (byte)bs[i];
        var hash = sha.ComputeHash(bytes);
        var res = new long[hash.Length];
        for (int i = 0; i < hash.Length; i++) res[i] = hash[i];
        return res;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOf(string s, string ch) {
        long i_0 = 0;
        while ((i_0 < s.Length)) {
            if ((s.Substring((int)(i_0), (int)((i_0 + 1) - i_0)) == ch)) {
                return i_0;
            }
            i_0 = (i_0 + 1);
        };
        return -1;
    }

    static long[] set58(string addr) {
        string tmpl_1 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
        long[] a_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < 25)) {
            a_2 = (Enumerable.ToArray(Enumerable.Append(a_2, 0)));
            i_3 = (i_3 + 1);
        };
        long idx_4 = 0;
        while ((idx_4 < addr.Length)) {
            string ch_5 = addr.Substring((int)(idx_4), (int)((idx_4 + 1) - idx_4));
            long c_6 = indexOf(tmpl_1, ch_5);
            if ((c_6 < 0)) {
                return new long[]{};
            }
            long j_7 = 24;
            while ((j_7 >= 0)) {
                c_6 = (c_6 + (58 * a_2[(int)(j_7)]));
                a_2[j_7] = (c_6 % 256);
                c_6 = Convert.ToInt64((c_6 / 256));
                j_7 = (j_7 - 1);
            }
            if ((c_6 > 0)) {
                return new long[]{};
            }
            idx_4 = (idx_4 + 1);
        };
        return a_2;
    }

    static long[] doubleSHA256(long[] bs) {
        var first_8 = _sha256(bs);
        return _sha256(first_8);
    }

    static long[] computeChecksum(long[] a) {
        long[] hash_9 = doubleSHA256(a.Skip((int)(0)).Take((int)((21 - 0))).ToArray());
        return hash_9.Skip((int)(0)).Take((int)((4 - 0))).ToArray();
    }

    static bool validA58(string addr) {
        long[] a_10 = set58(addr);
        if ((a_10.Length != 25)) {
            return false;
        };
        if ((a_10[(int)(0)] != 0)) {
            return false;
        };
        long[] sum_11 = computeChecksum(a_10);
        long i_12 = 0;
        while ((i_12 < 4)) {
            if ((a_10[(int)((21 + i_12))] != sum_11[(int)(i_12)])) {
                return false;
            }
            i_12 = (i_12 + 1);
        };
        return true;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")).ToString()));
            Console.WriteLine(_fmtTop((validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
