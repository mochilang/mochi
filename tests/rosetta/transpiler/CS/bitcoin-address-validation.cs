// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Security.Cryptography;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static long[] _sha256(long[] bs) {
        using var sha = System.Security.Cryptography.SHA256.Create();
        var bytes = new byte[bs.Length];
        for (int i = 0; i < bs.Length; i++) bytes[i] = (byte)bs[i];
        var hash = sha.ComputeHash(bytes);
        var res = new long[hash.Length];
        for (int i = 0; i < hash.Length; i++) res[i] = hash[i];
        return res;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((Convert.ToDouble(i_2) < Convert.ToDouble(s_0.Length))) {
            if ((s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2)) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    static long[] set58(string addr_3) {
        string tmpl_4 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
        long[] a_5 = new long[]{};
        long i_6 = 0;
        while ((i_6 < 25)) {
            a_5 = (Enumerable.ToArray(Enumerable.Append(a_5, 0)));
            i_6 = (i_6 + 1);
        };
        long idx_7 = 0;
        while ((Convert.ToDouble(idx_7) < Convert.ToDouble(addr_3.Length))) {
            string ch_8 = addr_3.Substring((int)(idx_7), (int)((idx_7 + 1) - idx_7));
            long c_9 = indexOf(tmpl_4, ch_8);
            if ((c_9 < 0)) {
                return new long[]{};
            }
            long j_10 = 24;
            while ((j_10 >= 0)) {
                c_9 = (c_9 + (58 * a_5[(int)(j_10)]));
                a_5[j_10] = (c_9 % 256);
                c_9 = Convert.ToInt64((c_9 / 256));
                j_10 = (j_10 - 1);
            }
            if ((c_9 > 0)) {
                return new long[]{};
            }
            idx_7 = (idx_7 + 1);
        };
        return a_5;
    }

    static long[] doubleSHA256(long[] bs_11) {
        var first_12 = _sha256(bs_11);
        return _sha256(first_12);
    }

    static long[] computeChecksum(long[] a_13) {
        long[] hash_14 = doubleSHA256(a_13.Skip((int)(0)).Take((int)((21 - 0))).ToArray());
        return hash_14.Skip((int)(0)).Take((int)((4 - 0))).ToArray();
    }

    static bool validA58(string addr_15) {
        long[] a_16 = set58(addr_15);
        if ((a_16.Length != 25)) {
            return false;
        };
        if ((a_16[(int)(0)] != 0)) {
            return false;
        };
        long[] sum_17 = computeChecksum(a_16);
        long i_18 = 0;
        while ((i_18 < 4)) {
            if ((a_16[(int)((21 + i_18))] != sum_17[(int)(i_18)])) {
                return false;
            }
            i_18 = (i_18 + 1);
        };
        return true;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(_fmt(validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i"))));
            Console.WriteLine(_fmtTop(_fmt(validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
