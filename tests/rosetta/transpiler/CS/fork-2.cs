// Generated by Mochi 0.10.50 on 2025-07-31 02:07 UTC
using System;
using System.Linq;
using System.Numerics;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long nextPID_0 = 1;
    static void fork(bool hasChild_1) {
        long pid_2 = nextPID_0;
        nextPID_0 = (nextPID_0 + 1);
        Console.WriteLine(_fmtTop(("PID: " + (pid_2).ToString())));
        if ((!hasChild_1)) {
            Console.WriteLine(_fmtTop("Done."));
            return;
        };
        long childPID_3 = nextPID_0;
        Console.WriteLine(_fmtTop(("Child's PID: " + (childPID_3).ToString())));
        fork(false);
    }

    static void Main() {
        fork(true);
    }
}
