// Generated by Mochi 0.10.40 on 2025-07-25 20:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string text_22 = ((((("Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" + "are$delineated$by$a$single$'dollar'$character,$write$a$program\n") + "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n") + "column$are$separated$by$at$least$one$space.\n") + "Further,$allow$for$each$word$in$a$column$to$be$either$left\n") + "justified,$right$justified,$or$center$justified$within$its$column.");
    static Dictionary<string, object> f_23 = newFormatter(text_22);
    static string[] split(string s, string sep) {
        string[] parts_0 = new string[]{};
        string cur_1 = "";
        long i_2 = 0;
        while ((i_2 < s.Length)) {
            if ((((sep.Length > 0) && ((((dynamic)i_2) + ((dynamic)sep.Length)) <= s.Length)) && (s.Substring((int)(i_2), (int)((((dynamic)i_2) + ((dynamic)sep.Length)) - i_2)) == sep))) {
                parts_0 = (Enumerable.ToArray(Enumerable.Append(parts_0, cur_1)));
                cur_1 = "";
                i_2 = (((dynamic)i_2) + ((dynamic)sep.Length));
            } else {
                cur_1 = (cur_1 + s.Substring((int)(i_2), (int)((i_2 + 1) - i_2)));
                i_2 = (i_2 + 1);
            }
        };
        parts_0 = (Enumerable.ToArray(Enumerable.Append(parts_0, cur_1)));
        return parts_0;
    }

    static string[] rstripEmpty(string[] words) {
        long n_3 = words.Length;
        while (((n_3 > 0) && (words[(int)((n_3 - 1))] == ""))) {
            n_3 = (n_3 - 1);
        };
        return words.Skip((int)(0)).Take((int)((n_3 - 0))).ToArray();
    }

    static string spaces(long n) {
        string out_4 = "";
        long i_5 = 0;
        while ((i_5 < n)) {
            out_4 = (out_4 + " ");
            i_5 = (i_5 + 1);
        };
        return out_4;
    }

    static string pad(string word, long width, long align) {
        long diff_6 = (((dynamic)width) - ((dynamic)word.Length));
        if ((align == 0)) {
            return (word + spaces(diff_6));
        };
        if ((align == 2)) {
            return (spaces(diff_6) + word);
        };
        var left_7 = Convert.ToInt64((diff_6 / 2));
        long right_8 = (((dynamic)diff_6) - ((dynamic)left_7));
        return ((spaces(left_7) + word) + spaces(right_8));
    }

    static Dictionary<string, object> newFormatter(string text) {
        string[] lines_9 = split(text, "\n");
        string[][] fmtLines_10 = new string[][]{};
        long[] width_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 < lines_9.Length)) {
            if ((lines_9[(int)(i_12)].Length == 0)) {
                i_12 = (i_12 + 1);
                continue;
            }
            string[] words_13 = rstripEmpty(split(lines_9[(int)(i_12)], "$"));
            fmtLines_10 = (Enumerable.ToArray(Enumerable.Append(fmtLines_10, words_13)));
            long j_14 = 0;
            while ((j_14 < words_13.Length)) {
                var wlen_15 = words_13[(int)(j_14)].Length;
                if ((j_14 == width_11.Length)) {
                    width_11 = (Enumerable.ToArray(Enumerable.Append(width_11, wlen_15)));
                } else {
                    if ((wlen_15 > width_11[(int)(j_14)])) {
                        width_11[j_14] = wlen_15;
                    }
                }
                j_14 = (j_14 + 1);
            }
            i_12 = (i_12 + 1);
        };
        return new Dictionary<string, object>{{"text", fmtLines_10}, {"width", width_11}};
    }

    static void printFmt(Dictionary<string, object> f, long align) {
        string[][] lines_16 = (string[][])((dynamic)f)["text"];
        long[] width_17 = (long[])((dynamic)f)["width"];
        long i_18 = 0;
        while ((i_18 < lines_16.Length)) {
            string[] words_19 = lines_16[(int)(i_18)];
            string line_20 = "";
            long j_21 = 0;
            while ((j_21 < words_19.Length)) {
                line_20 = ((line_20 + pad(words_19[(int)(j_21)], width_17[(int)(j_21)], align)) + " ");
                j_21 = (j_21 + 1);
            }
            Console.WriteLine(_fmtTop(line_20));
            i_18 = (i_18 + 1);
        };
        Console.WriteLine(_fmtTop(""));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            printFmt(f_23, 0);
            printFmt(f_23, 1);
            printFmt(f_23, 2);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
