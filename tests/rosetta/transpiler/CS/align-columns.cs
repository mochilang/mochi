// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string text_32 = ((((("Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" + "are$delineated$by$a$single$'dollar'$character,$write$a$program\n") + "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n") + "column$are$separated$by$at$least$one$space.\n") + "Further,$allow$for$each$word$in$a$column$to$be$either$left\n") + "justified,$right$justified,$or$center$justified$within$its$column.");
    static Dictionary<string, object> f_33 = newFormatter(text_32);
    static string[] split(string s_0, string sep_1) {
        string[] parts_2 = new string[]{};
        string cur_3 = "";
        long i_4 = 0;
        while ((i_4 < s_0.Length)) {
            if ((((sep_1.Length > 0) && ((((dynamic)(i_4)) + ((dynamic)(sep_1.Length))) <= s_0.Length)) && (s_0.Substring((int)(i_4), (int)((((dynamic)(i_4)) + ((dynamic)(sep_1.Length))) - i_4)) == sep_1))) {
                parts_2 = (Enumerable.ToArray(Enumerable.Append(parts_2, cur_3)));
                cur_3 = "";
                i_4 = (((dynamic)(i_4)) + ((dynamic)(sep_1.Length)));
            } else {
                cur_3 = (cur_3 + s_0.Substring((int)(i_4), (int)((i_4 + 1) - i_4)));
                i_4 = (i_4 + 1);
            }
        };
        parts_2 = (Enumerable.ToArray(Enumerable.Append(parts_2, cur_3)));
        return parts_2;
    }

    static string[] rstripEmpty(string[] words_5) {
        long n_6 = words_5.Length;
        while (((n_6 > 0) && (words_5[(int)((n_6 - 1))] == ""))) {
            n_6 = (n_6 - 1);
        };
        return words_5.Skip((int)(0)).Take((int)((n_6 - 0))).ToArray();
    }

    static string spaces(long n_7) {
        string out_8 = "";
        long i_9 = 0;
        while ((i_9 < n_7)) {
            out_8 = (out_8 + " ");
            i_9 = (i_9 + 1);
        };
        return out_8;
    }

    static string pad(string word_10, long width_11, long align_12) {
        long diff_13 = (((dynamic)(width_11)) - ((dynamic)(word_10.Length)));
        if ((align_12 == 0)) {
            return (word_10 + spaces(diff_13));
        };
        if ((align_12 == 2)) {
            return (spaces(diff_13) + word_10);
        };
        var left_14 = Convert.ToInt64((diff_13 / 2));
        long right_15 = (((dynamic)(diff_13)) - ((dynamic)(left_14)));
        return ((spaces(left_14) + word_10) + spaces(right_15));
    }

    static Dictionary<string, object> newFormatter(string text_16) {
        string[] lines_17 = split(text_16, "\n");
        string[][] fmtLines_18 = new string[][]{};
        long[] width_19 = new long[]{};
        long i_20 = 0;
        while ((i_20 < lines_17.Length)) {
            if ((lines_17[(int)(i_20)].Length == 0)) {
                i_20 = (i_20 + 1);
                continue;
            }
            string[] words_21 = rstripEmpty(split(lines_17[(int)(i_20)], "$"));
            fmtLines_18 = (Enumerable.ToArray(Enumerable.Append(fmtLines_18, words_21)));
            long j_22 = 0;
            while ((j_22 < words_21.Length)) {
                var wlen_23 = words_21[(int)(j_22)].Length;
                if ((j_22 == width_19.Length)) {
                    width_19 = (Enumerable.ToArray(Enumerable.Append(width_19, wlen_23)));
                } else {
                    if ((wlen_23 > width_19[(int)(j_22)])) {
                        width_19[j_22] = wlen_23;
                    }
                }
                j_22 = (j_22 + 1);
            }
            i_20 = (i_20 + 1);
        };
        return new Dictionary<string, object>{{"text", fmtLines_18}, {"width", width_19}};
    }

    static void printFmt(Dictionary<string, object> f_24, long align_25) {
        string[][] lines_26 = (((dynamic)f_24)["text"] as string[][]) ?? new string[][]{};
        long[] width_27 = (((dynamic)f_24)["width"] as long[]) ?? new long[]{};
        long i_28 = 0;
        while ((i_28 < lines_26.Length)) {
            string[] words_29 = lines_26[(int)(i_28)];
            string line_30 = "";
            long j_31 = 0;
            while ((j_31 < words_29.Length)) {
                line_30 = ((line_30 + pad(words_29[(int)(j_31)], width_27[(int)(j_31)], align_25)) + " ");
                j_31 = (j_31 + 1);
            }
            Console.WriteLine(_fmtTop(line_30));
            i_28 = (i_28 + 1);
        };
        Console.WriteLine(_fmtTop(""));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            printFmt(f_33, 0);
            printFmt(f_33, 1);
            printFmt(f_33, 2);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
