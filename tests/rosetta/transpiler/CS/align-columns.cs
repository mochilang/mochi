// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string text = ((((("Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" + "are$delineated$by$a$single$'dollar'$character,$write$a$program\n") + "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n") + "column$are$separated$by$at$least$one$space.\n") + "Further,$allow$for$each$word$in$a$column$to$be$either$left\n") + "justified,$right$justified,$or$center$justified$within$its$column.");
    static Dictionary<string, object> f = newFormatter(text);
    static string[] split(string s, string sep) {
        string[] parts = new string[]{};
        string cur = "";
        int i = 0;
        while ((i < s.Length)) {
            if ((((sep.Length > 0) && ((i + sep.Length) <= s.Length)) && (s.Substring(i, ((i + sep.Length) - i)) == sep))) {
                parts = (parts.Append(cur).ToArray());
                cur = "";
                i = (i + sep.Length);
            } else {
                cur = (cur + s.Substring(i, ((i + 1) - i)));
                i = (i + 1);
            }
        };
        parts = (parts.Append(cur).ToArray());
        return parts;
    }

    static string[] rstripEmpty(string[] words) {
        var n = words.Length;
        while (((n > 0) && (words[(n - 1)] == ""))) {
            n = (n - 1);
        };
        return words.Skip(0).Take((n - 0)).ToArray();
    }

    static string spaces(int n) {
        string _out = "";
        int i = 0;
        while ((i < n)) {
            _out = (_out + " ");
            i = (i + 1);
        };
        return _out;
    }

    static string pad(string word, int width, int align) {
        int diff = (width - word.Length);
        if ((align == 0)) {
            return (word + spaces(diff));
        };
        if ((align == 2)) {
            return (spaces(diff) + word);
        };
        var left = Convert.ToInt32((diff / 2));
        var right = (diff - left);
        return ((spaces(left) + word) + spaces(right));
    }

    static Dictionary<string, object> newFormatter(string text) {
        string[] lines = split(text, "\n");
        string[][] fmtLines = new string[][]{};
        int[] width = new int[]{};
        int i = 0;
        while ((i < lines.Length)) {
            if ((lines[i].Length == 0)) {
                i = (i + 1);
                continue;
            }
            string[] words = rstripEmpty(split(lines[i], "$"));
            fmtLines = (fmtLines.Append(words).ToArray());
            int j = 0;
            while ((j < words.Length)) {
                var wlen = words[j].Length;
                if ((j == width.Length)) {
                    width = (width.Append(wlen).ToArray());
                } else {
                    if ((wlen > width[j])) {
                        width[j] = wlen;
                    }
                }
                j = (j + 1);
            }
            i = (i + 1);
        };
        return new Dictionary<string, object>{{"text", fmtLines}, {"width", width}};
    }

    static void printFmt(Dictionary<string, object> f, int align) {
        string[][] lines = (string[][])((dynamic)f)["text"];
        int[] width = (int[])((dynamic)f)["width"];
        int i = 0;
        while ((i < lines.Length)) {
            var words = lines[i];
            string line = "";
            int j = 0;
            while ((j < words.Length)) {
                line = ((line + pad(words[j], width[j], align)) + " ");
                j = (j + 1);
            }
            Console.WriteLine(_fmtTop(line));
            i = (i + 1);
        };
        Console.WriteLine(_fmtTop(""));
    }

    static void Main() {
        printFmt(f, 0);
        printFmt(f, 1);
        printFmt(f, 2);
    }
}
