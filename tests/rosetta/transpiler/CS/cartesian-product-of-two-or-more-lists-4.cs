// Generated by Mochi 0.10.42 on 2025-07-27 16:29 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string listStr(long[] xs_0) {
        string s_1 = "[";
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            s_1 = (s_1 + (xs_0[(int)(i_2)]).ToString());
            if ((i_2 < (((dynamic)xs_0.Length) - ((dynamic)1)))) {
                s_1 = (s_1 + " ");
            }
            i_2 = (i_2 + 1);
        };
        s_1 = (s_1 + "]");
        return s_1;
    }

    static string llStr(long[][] lst_3) {
        string s_4 = "[";
        long i_5 = 0;
        while ((i_5 < lst_3.Length)) {
            s_4 = (s_4 + listStr(lst_3[(int)(i_5)]));
            if ((i_5 < (((dynamic)lst_3.Length) - ((dynamic)1)))) {
                s_4 = (s_4 + " ");
            }
            i_5 = (i_5 + 1);
        };
        s_4 = (s_4 + "]");
        return s_4;
    }

    static long[] copy(long[] xs_6) {
        long[] out_7 = new long[]{};
        foreach (var v_8 in xs_6) {
            out_7 = (Enumerable.ToArray(Enumerable.Append(out_7, v_8)));
        };
        return out_7;
    }

    static long[][] cartN(object lists_9) {
        if ((lists_9 == null)) {
            return new long[][]{};
        };
        long[][] a_10 = (lists_9 as long[][]) ?? new long[][]{};
        if ((a_10.Length == 0)) {
            return new long[][]{new long[]{}};
        };
        long[][] out_11 = new long[][]{};
        long last_12 = (((dynamic)a_10.Length) - ((dynamic)1));
        long[][] left_13 = cartN(a_10.Skip((int)(0)).Take((int)((last_12 - 0))).ToArray());
        foreach (var p_14 in left_13) {
            foreach (var x_15 in a_10[(int)(last_12)]) {
                long[] row_16 = copy(p_14);
                row_16 = (Enumerable.ToArray(Enumerable.Append(row_16, x_15)));
                out_11 = (Enumerable.ToArray(Enumerable.Append(out_11, row_16)));
            }
        };
        return out_11;
    }

    static void main() {
        Console.WriteLine(_fmtTop(llStr(cartN(new long[][]{new long[]{1, 2}, new long[]{3, 4}}))));
        Console.WriteLine(_fmtTop(llStr(cartN(new long[][]{new long[]{3, 4}, new long[]{1, 2}}))));
        Console.WriteLine(_fmtTop(llStr(cartN(new long[][]{new long[]{1, 2}, new long[]{}}))));
        Console.WriteLine(_fmtTop(llStr(cartN(new long[][]{new long[]{}, new long[]{1, 2}}))));
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("["));
        foreach (var p_17 in cartN(new long[][]{new long[]{1776, 1789}, new long[]{7, 12}, new long[]{4, 14, 23}, new long[]{0, 1}})) {
            Console.WriteLine(_fmtTop((" " + listStr(p_17))));
        };
        Console.WriteLine(_fmtTop("]"));
        Console.WriteLine(_fmtTop(llStr(cartN(new long[][]{new long[]{1, 2, 3}, new long[]{30}, new long[]{500, 100}}))));
        Console.WriteLine(_fmtTop(llStr(cartN(new long[][]{new long[]{1, 2, 3}, new long[]{}, new long[]{500, 100}}))));
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop(llStr(cartN(null))));
        Console.WriteLine(_fmtTop(llStr(cartN(new object[]{}))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
