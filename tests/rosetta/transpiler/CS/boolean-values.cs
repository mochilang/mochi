// Generated by Mochi 0.10.41 on 2025-07-27 11:31 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool parseBool(string s_0) {
        string l_1 = s_0.ToLower();
        if ((((((l_1 == "1") || (l_1 == "t")) || (l_1 == "true")) || (l_1 == "yes")) || (l_1 == "y"))) {
            return true;
        };
        return false;
    }

    static void main() {
        bool n_2 = true;
        Console.WriteLine((n_2 ? 1 : 0));
        Console.WriteLine(_fmtTop("bool"));
        n_2 = (!n_2);
        Console.WriteLine((n_2 ? 1 : 0));
        long x_3 = 5;
        long y_4 = 8;
        Console.WriteLine(string.Join(" ", new string[]{_fmtTop("x == y:"), _fmtTop((x_3 == y_4))}));
        Console.WriteLine(string.Join(" ", new string[]{_fmtTop("x < y:"), _fmtTop((x_3 < y_4))}));
        Console.WriteLine(_fmtTop("\nConvert String into Boolean Data type\n"));
        string str1_5 = "japan";
        Console.WriteLine(string.Join(" ", new string[]{_fmtTop("Before :"), _fmtTop("string")}));
        bool bolStr_6 = parseBool(str1_5);
        Console.WriteLine(string.Join(" ", new string[]{_fmtTop("After :"), _fmtTop("bool")}));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
