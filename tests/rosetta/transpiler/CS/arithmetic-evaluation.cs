// Generated by Mochi 0.10.40 on 2025-07-25 13:09 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;

struct Parser {
    public string expr;
    public long pos;
    public override string ToString() => $"Parser {{expr = \"{expr}\", pos = {pos}}}";
}
struct Res {
    public long v;
    public Parser p;
    public override string ToString() => $"Res {{v = {v}, p = {p}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Parser skipWS(Parser p) {
        long i_0 = p.pos;
        while (((i_0 < p.expr.Length) && (p.expr.Substring((int)(i_0), (int)((i_0 + 1) - i_0)) == " "))) {
            i_0 = (i_0 + 1);
        };
        p.pos = i_0;
        return p;
    }

    static long parseIntStr(string str) {
        long i_1 = 0;
        long n_2 = 0;
        while ((i_1 < str.Length)) {
            n_2 = (((n_2 * 10) + Convert.ToInt32(str.Substring((int)(i_1), (int)((i_1 + 1) - i_1)))) - 48);
            i_1 = (i_1 + 1);
        };
        return n_2;
    }

    static Res parseNumber(Parser p) {
        p = skipWS(p);
        long start_3 = p.pos;
        while ((p.pos < p.expr.Length)) {
            string ch_4 = p.expr.Substring((int)(p.pos), (int)((p.pos + 1) - p.pos));
            if (((string.Compare(ch_4, "0") >= 0) && (string.Compare(ch_4, "9") <= 0))) {
                p.pos = (p.pos + 1);
            } else {
                break;
            }
        };
        string token_5 = p.expr.Substring((int)(start_3), (int)(p.pos - start_3));
        return new Res{v = parseIntStr(token_5), p = p};
    }

    static Res parseFactor(Parser p) {
        p = skipWS(p);
        if (((p.pos < p.expr.Length) && (p.expr.Substring((int)(p.pos), (int)((p.pos + 1) - p.pos)) == "("))) {
            p.pos = (p.pos + 1);
            Res r_6 = parseExpr(p);
            var v_7 = r_6.v;
            p = r_6.p;
            p = skipWS(p);
            if (((p.pos < p.expr.Length) && (p.expr.Substring((int)(p.pos), (int)((p.pos + 1) - p.pos)) == ")"))) {
                p.pos = (p.pos + 1);
            }
            return new Res{v = v_7, p = p};
        };
        if (((p.pos < p.expr.Length) && (p.expr.Substring((int)(p.pos), (int)((p.pos + 1) - p.pos)) == "-"))) {
            p.pos = (p.pos + 1);
            Res r_8 = parseFactor(p);
            var v_9 = r_8.v;
            p = r_8.p;
            return new Res{v = -v_9, p = p};
        };
        return parseNumber(p);
    }

    static long powInt(long _base, long exp) {
        long r_10 = 1;
        long b_11 = _base;
        long e_12 = exp;
        while ((e_12 > 0)) {
            if (((e_12 % 2) == 1)) {
                r_10 = (r_10 * b_11);
            }
            b_11 = (b_11 * b_11);
            e_12 = (e_12 / Convert.ToInt32(2));
        };
        return r_10;
    }

    static Res parsePower(Parser p) {
        Res r_13 = parseFactor(p);
        long v_14 = r_13.v;
        p = r_13.p;
        while (true) {
            p = skipWS(p);
            if (((p.pos < p.expr.Length) && (p.expr.Substring((int)(p.pos), (int)((p.pos + 1) - p.pos)) == "^"))) {
                p.pos = (p.pos + 1);
                Res r2_15 = parseFactor(p);
                long rhs_16 = r2_15.v;
                p = r2_15.p;
                v_14 = powInt(v_14, rhs_16);
            } else {
                break;
            }
        };
        return new Res{v = v_14, p = p};
    }

    static Res parseTerm(Parser p) {
        Res r_17 = parsePower(p);
        long v_18 = r_17.v;
        p = r_17.p;
        while (true) {
            p = skipWS(p);
            if ((p.pos < p.expr.Length)) {
                string op_19 = p.expr.Substring((int)(p.pos), (int)((p.pos + 1) - p.pos));
                if ((op_19 == "*")) {
                    p.pos = (p.pos + 1);
                    Res r2_20 = parsePower(p);
                    long rhs_21 = r2_20.v;
                    p = r2_20.p;
                    v_18 = (v_18 * rhs_21);
                    continue;
                }
                if ((op_19 == "/")) {
                    p.pos = (p.pos + 1);
                    Res r2_22 = parsePower(p);
                    long rhs_23 = r2_22.v;
                    p = r2_22.p;
                    v_18 = (v_18 / Convert.ToInt32(rhs_23));
                    continue;
                }
            }
            break;
        };
        return new Res{v = v_18, p = p};
    }

    static Res parseExpr(Parser p) {
        Res r_24 = parseTerm(p);
        long v_25 = r_24.v;
        p = r_24.p;
        while (true) {
            p = skipWS(p);
            if ((p.pos < p.expr.Length)) {
                string op_26 = p.expr.Substring((int)(p.pos), (int)((p.pos + 1) - p.pos));
                if ((op_26 == "+")) {
                    p.pos = (p.pos + 1);
                    Res r2_27 = parseTerm(p);
                    long rhs_28 = r2_27.v;
                    p = r2_27.p;
                    v_25 = (v_25 + rhs_28);
                    continue;
                }
                if ((op_26 == "-")) {
                    p.pos = (p.pos + 1);
                    Res r2_29 = parseTerm(p);
                    long rhs_30 = r2_29.v;
                    p = r2_29.p;
                    v_25 = (v_25 - rhs_30);
                    continue;
                }
            }
            break;
        };
        return new Res{v = v_25, p = p};
    }

    static long evalExpr(string expr) {
        Parser p_31 = new Parser{expr = expr, pos = 0};
        Res r_32 = parseExpr(p_31);
        return r_32.v;
    }

    static void main() {
        string expr_33 = "2*(3-1)+2*5";
        Console.WriteLine(_fmtTop(((expr_33 + " = ") + (evalExpr(expr_33)).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
