// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Parser {
    public string expr;
    public long pos;
    public override string ToString() => $"Parser {{expr = \"{expr}\", pos = {pos}}}";
}
class Res {
    public long v;
    public Parser p;
    public override string ToString() => $"Res {{v = {v}, p = {p}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Parser skipWS(Parser p_0) {
        long i_1 = p_0.pos;
        while (((string.Compare(Convert.ToString(i_1), Convert.ToString(p_0.expr.Length)) < 0) && (p_0.expr.Substring((int)(i_1), (int)((i_1 + 1) - i_1)) == " "))) {
            i_1 = (i_1 + 1);
        };
        p_0.pos = i_1;
        return p_0;
    }

    static long parseIntStr(string str_2) {
        long i_3 = 0;
        long n_4 = 0;
        while ((string.Compare(Convert.ToString(i_3), Convert.ToString(str_2.Length)) < 0)) {
            n_4 = ((((dynamic)((n_4 * 10))) + ((dynamic)(Convert.ToInt64(str_2.Substring((int)(i_3), (int)((i_3 + 1) - i_3)))))) - 48);
            i_3 = (i_3 + 1);
        };
        return n_4;
    }

    static Res parseNumber(Parser p_5) {
        p_5 = skipWS(p_5);
        long start_6 = p_5.pos;
        while ((string.Compare(Convert.ToString(p_5.pos), Convert.ToString(p_5.expr.Length)) < 0)) {
            string ch_7 = p_5.expr.Substring((int)(p_5.pos), (int)((p_5.pos + 1) - p_5.pos));
            if (((string.Compare(ch_7, "0") >= 0) && (string.Compare(ch_7, "9") <= 0))) {
                p_5.pos = (p_5.pos + 1);
            } else {
                break;
            }
        };
        string token_8 = p_5.expr.Substring((int)(start_6), (int)(p_5.pos - start_6));
        return new Res{v = parseIntStr(token_8), p = p_5};
    }

    static Res parseFactor(Parser p_9) {
        p_9 = skipWS(p_9);
        if (((string.Compare(Convert.ToString(p_9.pos), Convert.ToString(p_9.expr.Length)) < 0) && (p_9.expr.Substring((int)(p_9.pos), (int)((p_9.pos + 1) - p_9.pos)) == "("))) {
            p_9.pos = (p_9.pos + 1);
            Res r_10 = parseExpr(p_9);
            long v_11 = r_10.v;
            p_9 = r_10.p;
            p_9 = skipWS(p_9);
            if (((string.Compare(Convert.ToString(p_9.pos), Convert.ToString(p_9.expr.Length)) < 0) && (p_9.expr.Substring((int)(p_9.pos), (int)((p_9.pos + 1) - p_9.pos)) == ")"))) {
                p_9.pos = (p_9.pos + 1);
            }
            return new Res{v = v_11, p = p_9};
        };
        if (((string.Compare(Convert.ToString(p_9.pos), Convert.ToString(p_9.expr.Length)) < 0) && (p_9.expr.Substring((int)(p_9.pos), (int)((p_9.pos + 1) - p_9.pos)) == "-"))) {
            p_9.pos = (p_9.pos + 1);
            Res r_12 = parseFactor(p_9);
            long v_13 = r_12.v;
            p_9 = r_12.p;
            return new Res{v = -v_13, p = p_9};
        };
        return parseNumber(p_9);
    }

    static long powInt(long base_14, long exp_15) {
        long r_16 = 1;
        long b_17 = base_14;
        long e_18 = exp_15;
        while ((e_18 > 0)) {
            if (((e_18 % 2) == 1)) {
                r_16 = (r_16 * b_17);
            }
            b_17 = (b_17 * b_17);
            e_18 = (((dynamic)(e_18)) / ((dynamic)(Convert.ToInt64(2))));
        };
        return r_16;
    }

    static Res parsePower(Parser p_19) {
        Res r_20 = parseFactor(p_19);
        long v_21 = r_20.v;
        p_19 = r_20.p;
        while (true) {
            p_19 = skipWS(p_19);
            if (((string.Compare(Convert.ToString(p_19.pos), Convert.ToString(p_19.expr.Length)) < 0) && (p_19.expr.Substring((int)(p_19.pos), (int)((p_19.pos + 1) - p_19.pos)) == "^"))) {
                p_19.pos = (p_19.pos + 1);
                Res r2_22 = parseFactor(p_19);
                long rhs_23 = r2_22.v;
                p_19 = r2_22.p;
                v_21 = powInt(v_21, rhs_23);
            } else {
                break;
            }
        };
        return new Res{v = v_21, p = p_19};
    }

    static Res parseTerm(Parser p_24) {
        Res r_25 = parsePower(p_24);
        long v_26 = r_25.v;
        p_24 = r_25.p;
        while (true) {
            p_24 = skipWS(p_24);
            if ((string.Compare(Convert.ToString(p_24.pos), Convert.ToString(p_24.expr.Length)) < 0)) {
                string op_27 = p_24.expr.Substring((int)(p_24.pos), (int)((p_24.pos + 1) - p_24.pos));
                if ((op_27 == "*")) {
                    p_24.pos = (p_24.pos + 1);
                    Res r2_28 = parsePower(p_24);
                    long rhs_29 = r2_28.v;
                    p_24 = r2_28.p;
                    v_26 = (v_26 * rhs_29);
                    continue;
                }
                if ((op_27 == "/")) {
                    p_24.pos = (p_24.pos + 1);
                    Res r2_30 = parsePower(p_24);
                    long rhs_31 = r2_30.v;
                    p_24 = r2_30.p;
                    v_26 = (((dynamic)(v_26)) / ((dynamic)(Convert.ToInt64(rhs_31))));
                    continue;
                }
            }
            break;
        };
        return new Res{v = v_26, p = p_24};
    }

    static Res parseExpr(Parser p_32) {
        Res r_33 = parseTerm(p_32);
        long v_34 = r_33.v;
        p_32 = r_33.p;
        while (true) {
            p_32 = skipWS(p_32);
            if ((string.Compare(Convert.ToString(p_32.pos), Convert.ToString(p_32.expr.Length)) < 0)) {
                string op_35 = p_32.expr.Substring((int)(p_32.pos), (int)((p_32.pos + 1) - p_32.pos));
                if ((op_35 == "+")) {
                    p_32.pos = (p_32.pos + 1);
                    Res r2_36 = parseTerm(p_32);
                    long rhs_37 = r2_36.v;
                    p_32 = r2_36.p;
                    v_34 = (v_34 + rhs_37);
                    continue;
                }
                if ((op_35 == "-")) {
                    p_32.pos = (p_32.pos + 1);
                    Res r2_38 = parseTerm(p_32);
                    long rhs_39 = r2_38.v;
                    p_32 = r2_38.p;
                    v_34 = (v_34 - rhs_39);
                    continue;
                }
            }
            break;
        };
        return new Res{v = v_34, p = p_32};
    }

    static long evalExpr(string expr_40) {
        Parser p_41 = new Parser{expr = expr_40, pos = 0};
        Res r_42 = parseExpr(p_41);
        return r_42.v;
    }

    static void main() {
        string expr_43 = "2*(3-1)+2*5";
        Console.WriteLine(_fmtTop(((expr_43 + " = ") + (evalExpr(expr_43)).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
