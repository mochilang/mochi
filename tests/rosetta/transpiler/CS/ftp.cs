// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class FileInfo {
    public string name;
    public long size;
    public string kind;
    public override string ToString() => $"FileInfo {{name = \"{name}\", size = {size}, kind = \"{kind}\"}}";
}
class FTPConn {
    public string dir;
    public override string ToString() => $"FTPConn {{dir = \"{dir}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, Dictionary<string, string>> serverData_0 = new Dictionary<string, Dictionary<string, string>>{{"pub", new Dictionary<string, string>{{"somefile.bin", "This is a file from the FTP server."}, {"readme.txt", "Hello from ftp."}}}};
    static Dictionary<string, string[]> serverNames_1 = new Dictionary<string, string[]>{{"pub", new string[]{"somefile.bin", "readme.txt"}}};
    static FTPConn connect(string hostport_2) {
        Console.WriteLine(_fmtTop(("Connected to " + hostport_2)));
        return new FTPConn{dir = "/"};
    }

    static void login(FTPConn conn_3, string user_4, string pass_5) {
        Console.WriteLine(_fmtTop(("Logged in as " + user_4)));
    }

    static void changeDir(FTPConn conn_6, string dir_7) {
        conn_6.dir = dir_7;
    }

    static FileInfo[] list(FTPConn conn_8) {
        string[] names_9 = (serverNames_1.ContainsKey(conn_8.dir) ? serverNames_1[conn_8.dir] : null);
        var dataDir_10 = ((dynamic)serverData_0)[conn_8.dir];
        FileInfo[] out_11 = new FileInfo[]{};
        foreach (var name_12 in names_9) {
            var content_13 = ((dynamic)dataDir_10)[name_12];
            out_11 = (Enumerable.ToArray(Enumerable.Append(out_11, new FileInfo{name = name_12, size = content_13.Length, kind = "file"})));
        };
        return out_11;
    }

    static string retrieve(FTPConn conn_14, string name_15) {
        return ((dynamic)((dynamic)serverData_0)[conn_14.dir])[name_15];
    }

    static void main() {
        FTPConn conn_16 = connect("localhost:21");
        login(conn_16, "anonymous", "anonymous");
        changeDir(conn_16, "pub");
        Console.WriteLine(_fmtTop(conn_16.dir));
        FileInfo[] files_17 = list(conn_16);
        foreach (var f_18 in files_17) {
            Console.WriteLine(_fmtTop(((f_18.name + " ") + (f_18.size).ToString())));
        };
        string data_19 = retrieve(conn_16, "somefile.bin");
        Console.WriteLine(_fmtTop((("Wrote " + (data_19.Length).ToString()) + " bytes to somefile.bin")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
