// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        if (((n_0 % 2) == 0)) {
            return (n_0 == 2);
        };
        if (((n_0 % 3) == 0)) {
            return (n_0 == 3);
        };
        long d_1 = 5;
        while (((d_1 * d_1) <= n_0)) {
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 2);
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 4);
        };
        return true;
    }

    static string listToString(long[] xs_2) {
        string s_3 = "[";
        long i_4 = 0;
        while ((i_4 < xs_2.Length)) {
            s_3 = (s_3 + (xs_2[(int)(i_4)]).ToString());
            if ((i_4 < (((dynamic)xs_2.Length) - ((dynamic)1)))) {
                s_3 = (s_3 + " ");
            }
            i_4 = (i_4 + 1);
        };
        return (s_3 + "]");
    }

    static void main() {
        long count_5 = 0;
        long limit_6 = 25;
        long n_7 = 17;
        BigInteger repunit_8 = new BigInteger(1111111111111111L);
        BigInteger eleven_9 = 11;
        BigInteger hundred_10 = 100;
        long[] deceptive_11 = new long[]{};
        while ((count_5 < limit_6)) {
            if ((((!isPrime(n_7)) && ((n_7 % 3) != 0)) && ((n_7 % 5) != 0))) {
                BigInteger bn_12 = new BigInteger(n_7);
                if (((repunit_8 % bn_12) == new BigInteger(0))) {
                    deceptive_11 = (Enumerable.ToArray(Enumerable.Append(deceptive_11, n_7)));
                    count_5 = (count_5 + 1);
                }
            }
            n_7 = (n_7 + 2);
            repunit_8 = ((repunit_8 * hundred_10) + eleven_9);
        };
        Console.WriteLine(_fmtTop((("The first " + (limit_6).ToString()) + " deceptive numbers are:")));
        Console.WriteLine(_fmtTop(listToString(deceptive_11)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
