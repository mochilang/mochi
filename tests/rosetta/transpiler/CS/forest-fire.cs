// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long rows_0 = 20;
    static long cols_1 = 30;
    static double p_2 = 0.01;
    static double f_3 = 0.001;
    static string[][] board_31 = newBoard();
    static string repeat(string ch_4, long n_5) {
        string s_6 = "";
        long i_7 = 0;
        while ((i_7 < n_5)) {
            s_6 = (s_6 + ch_4);
            i_7 = (i_7 + 1);
        };
        return s_6;
    }

    static bool chance(double prob_8) {
        var threshold_9 = Convert.ToInt64((prob_8 * 1000.0));
        return ((_now() % 1000) < threshold_9);
    }

    static string[][] newBoard() {
        string[][] b_10 = new string[][]{};
        long r_11 = 0;
        while ((r_11 < rows_0)) {
            string[] row_12 = new string[]{};
            long c_13 = 0;
            while ((c_13 < cols_1)) {
                if (((_now() % 2) == 0)) {
                    row_12 = (Enumerable.ToArray(Enumerable.Append(row_12, "T")));
                } else {
                    row_12 = (Enumerable.ToArray(Enumerable.Append(row_12, " ")));
                }
                c_13 = (c_13 + 1);
            }
            b_10 = (Enumerable.ToArray(Enumerable.Append(b_10, row_12)));
            r_11 = (r_11 + 1);
        };
        return b_10;
    }

    static string[][] step(string[][] src_14) {
        string[][] dst_15 = new string[][]{};
        long r_16 = 0;
        while ((r_16 < rows_0)) {
            string[] row_17 = new string[]{};
            long c_18 = 0;
            while ((c_18 < cols_1)) {
                string cell_19 = src_14[(int)(r_16)][(int)(c_18)];
                string next_20 = cell_19;
                if ((cell_19 == "#")) {
                    next_20 = " ";
                } else {
                    if ((cell_19 == "T")) {
                        bool burning_21 = false;
                        long dr_22 = -1;
                        while ((dr_22 <= 1)) {
                            long dc_23 = -1;
                            while ((dc_23 <= 1)) {
                                if (((dr_22 != 0) || (dc_23 != 0))) {
                                    long rr_24 = (r_16 + dr_22);
                                    long cc_25 = (c_18 + dc_23);
                                    if (((((rr_24 >= 0) && (rr_24 < rows_0)) && (cc_25 >= 0)) && (cc_25 < cols_1))) {
                                        if ((src_14[(int)(rr_24)][(int)(cc_25)] == "#")) {
                                            burning_21 = true;
                                        }
                                    }
                                }
                                dc_23 = (dc_23 + 1);
                            }
                            dr_22 = (dr_22 + 1);
                        }
                        if ((burning_21 || chance(f_3))) {
                            next_20 = "#";
                        }
                    } else {
                        if (chance(p_2)) {
                            next_20 = "T";
                        }
                    }
                }
                row_17 = (Enumerable.ToArray(Enumerable.Append(row_17, next_20)));
                c_18 = (c_18 + 1);
            }
            dst_15 = (Enumerable.ToArray(Enumerable.Append(dst_15, row_17)));
            r_16 = (r_16 + 1);
        };
        return dst_15;
    }

    static void printBoard(string[][] b_26) {
        Console.WriteLine(_fmtTop((repeat("__", cols_1) + "\n\n")));
        long r_27 = 0;
        while ((r_27 < rows_0)) {
            string line_28 = "";
            long c_29 = 0;
            while ((c_29 < cols_1)) {
                string cell_30 = b_26[(int)(r_27)][(int)(c_29)];
                if ((cell_30 == " ")) {
                    line_28 = (line_28 + "  ");
                } else {
                    line_28 = ((line_28 + " ") + cell_30);
                }
                c_29 = (c_29 + 1);
            }
            Console.WriteLine(_fmtTop((line_28 + "\n")));
            r_27 = (r_27 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            printBoard(board_31);
            board_31 = step(board_31);
            printBoard(board_31);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
