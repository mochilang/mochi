// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double makeInf() {
        double x_0 = 1;
        long i_1 = 0;
        while ((i_1 < 400)) {
            x_0 = (x_0 * 10);
            i_1 = (i_1 + 1);
        };
        return x_0;
    }

    static double makeMax() {
        double x_2 = 1;
        long i_3 = 0;
        while ((i_3 < 308)) {
            x_2 = (x_2 * 10);
            i_3 = (i_3 + 1);
        };
        return x_2;
    }

    static bool isNaN(double x_4) {
        return (x_4 != x_4);
    }

    static void validateNaN(double n_5, string op_6) {
        if (isNaN(n_5)) {
            Console.WriteLine(_fmtTop((op_6 + " -> NaN")));
        } else {
            Console.WriteLine(string.Join(" ", new string[]{_fmtTop("!!! Expected NaN from"), _fmtTop(op_6), _fmtTop(" Found"), _fmtTop(n_5)}));
        };
    }

    static void validateZero(double n_7, string op_8) {
        if ((n_7 == 0)) {
            Console.WriteLine(_fmtTop((op_8 + " -> 0")));
        } else {
            Console.WriteLine(string.Join(" ", new string[]{_fmtTop("!!! Expected 0 from"), _fmtTop(op_8), _fmtTop(" Found"), _fmtTop(n_7)}));
        };
    }

    static void validateGT(double a_9, double b_10, string op_11) {
        if ((a_9 > b_10)) {
            Console.WriteLine(_fmtTop(op_11));
        } else {
            Console.WriteLine(string.Join(" ", new string[]{_fmtTop("!!! Expected"), _fmtTop(op_11), _fmtTop(" Found not true.")}));
        };
    }

    static void validateNE(double a_12, double b_13, string op_14) {
        if ((a_12 == b_13)) {
            Console.WriteLine(string.Join(" ", new string[]{_fmtTop("!!! Expected"), _fmtTop(op_14), _fmtTop(" Found not true.")}));
        } else {
            Console.WriteLine(_fmtTop(op_14));
        };
    }

    static void validateEQ(double a_15, double b_16, string op_17) {
        if ((a_15 == b_16)) {
            Console.WriteLine(_fmtTop(op_17));
        } else {
            Console.WriteLine(string.Join(" ", new string[]{_fmtTop("!!! Expected"), _fmtTop(op_17), _fmtTop(" Found not true.")}));
        };
    }

    static void main() {
        double negZero_18 = -0;
        double posInf_19 = makeInf();
        double negInf_20 = -posInf_19;
        double nan_21 = (posInf_19 / posInf_19);
        double maxVal_22 = makeMax();
        Console.WriteLine(string.Join(" ", new string[]{_fmtTop(negZero_18), _fmtTop(posInf_19), _fmtTop(negInf_20), _fmtTop(nan_21)}));
        Console.WriteLine(string.Join(" ", new string[]{_fmtTop(negZero_18), _fmtTop(posInf_19), _fmtTop(negInf_20), _fmtTop(nan_21)}));
        Console.WriteLine(_fmtTop(""));
        validateNaN((negInf_20 + posInf_19), "-Inf + Inf");
        validateNaN((0 * posInf_19), "0 * Inf");
        validateNaN((posInf_19 / posInf_19), "Inf / Inf");
        validateNaN((posInf_19 % 1), "Inf % 1");
        validateNaN((1 + nan_21), "1 + NaN");
        validateZero((1 / posInf_19), "1 / Inf");
        validateGT(posInf_19, maxVal_22, "Inf > max value");
        validateGT(-maxVal_22, negInf_20, "-Inf < max neg value");
        validateNE(nan_21, nan_21, "NaN != NaN");
        validateEQ(negZero_18, 0, "-0 == 0");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
