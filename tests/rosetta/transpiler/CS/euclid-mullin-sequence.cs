// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static BigInteger zero_0 = 0;
    static BigInteger one_1 = 1;
    static BigInteger two_2 = 2;
    static BigInteger three_3 = 3;
    static BigInteger four_4 = 4;
    static BigInteger five_5 = 5;
    static BigInteger six_6 = 6;
    static BigInteger ten_7 = 10;
    static BigInteger k100_8 = 100000;
    static BigInteger gcd(BigInteger a_9, BigInteger b_10) {
        BigInteger x_11 = a_9;
        BigInteger y_12 = b_10;
        while ((y_12 != zero_0)) {
            BigInteger t_13 = (x_11 % y_12);
            x_11 = y_12;
            y_12 = t_13;
        };
        return x_11;
    }

    static BigInteger absBig(BigInteger x_14) {
        if ((x_14 < zero_0)) {
            return (zero_0 - x_14);
        };
        return x_14;
    }

    static BigInteger pollardRho(BigInteger n_15, BigInteger c_16) {
        Func<BigInteger, BigInteger, BigInteger> g = null;
        g = (BigInteger x_17, BigInteger y_18) => {BigInteger x2_19 = (x_17 * x_17); x2_19 = (x2_19 + c_16); return (x2_19 % y_18);};
        BigInteger x_20 = 2;
        BigInteger y_21 = 2;
        BigInteger z_22 = 1;
        BigInteger d_23 = 0;
        long count_24 = 0;
        while (true) {
            x_20 = g(x_20, n_15);
            y_21 = g(g(y_21, n_15), n_15);
            d_23 = absBig((x_20 - y_21));
            d_23 = (d_23 % n_15);
            z_22 = (z_22 * d_23);
            count_24 = (count_24 + 1);
            if ((count_24 == 100)) {
                d_23 = gcd(z_22, n_15);
                if ((d_23 != one_1)) {
                    break;
                }
                z_22 = one_1;
                count_24 = 0;
            }
        };
        if ((d_23 == n_15)) {
            return zero_0;
        };
        return d_23;
    }

    static BigInteger smallestPrimeFactorWheel(BigInteger n_25, BigInteger max_26) {
        if (((n_25 % two_2) == zero_0)) {
            return two_2;
        };
        if (((n_25 % three_3) == zero_0)) {
            return three_3;
        };
        if (((n_25 % five_5) == zero_0)) {
            return five_5;
        };
        BigInteger k_27 = 7;
        BigInteger[] inc_28 = new BigInteger[]{four_4, two_2, four_4, two_2, four_4, six_6, two_2, six_6};
        long i_29 = 0;
        while (((k_27 * k_27) <= n_25)) {
            if (((n_25 % k_27) == zero_0)) {
                return k_27;
            }
            k_27 = (k_27 + inc_28[(int)(i_29)]);
            if ((k_27 > max_26)) {
                break;
            }
            i_29 = ((i_29 + 1) % 8);
        };
        return zero_0;
    }

    static BigInteger smallestPrimeFactor(BigInteger n_30) {
        BigInteger s_31 = smallestPrimeFactorWheel(n_30, k100_8);
        if ((s_31 != zero_0)) {
            return s_31;
        };
        BigInteger c_32 = 1;
        while (true) {
            BigInteger d_33 = pollardRho(n_30, c_32);
            if ((d_33 == zero_0)) {
                if ((c_32 == ten_7)) {
                    return n_30;
                }
                c_32 = (c_32 + one_1);
            } else {
                BigInteger factor_34 = smallestPrimeFactorWheel(d_33, d_33);
                BigInteger s2_35 = smallestPrimeFactorWheel((n_30 / d_33), factor_34);
                if ((s2_35 != zero_0)) {
                    if ((s2_35 < factor_34)) {
                        return s2_35;
                    } else {
                        return factor_34;
                    }
                }
                return factor_34;
            }
        };
    }

    static void main() {
        long k_36 = 19;
        Console.WriteLine(_fmtTop((("First " + (k_36).ToString()) + " terms of the Euclidâ€“Mullin sequence:")));
        Console.WriteLine(_fmtTop(2));
        BigInteger prod_37 = 2;
        long count_38 = 1;
        while ((count_38 < k_36)) {
            BigInteger z_39 = (prod_37 + one_1);
            BigInteger t_40 = smallestPrimeFactor(z_39);
            Console.WriteLine(_fmtTop(t_40));
            prod_37 = (prod_37 * t_40);
            count_38 = (count_38 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
