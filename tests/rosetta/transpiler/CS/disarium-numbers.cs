// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long pow(long base_0, long exp_1) {
        long result_2 = 1;
        long i_3 = 0;
        while ((i_3 < exp_1)) {
            result_2 = (result_2 * base_0);
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    static bool isDisarium(long n_4) {
        long[] digits_5 = new long[]{};
        long x_6 = n_4;
        if ((x_6 == 0)) {
            digits_5 = (Enumerable.ToArray(Enumerable.Append(digits_5, 0)));
        };
        while ((x_6 > 0)) {
            digits_5 = (Enumerable.ToArray(Enumerable.Append(digits_5, (x_6 % 10))));
            x_6 = Convert.ToInt64((x_6 / 10));
        };
        long sum_7 = 0;
        long pos_8 = 1;
        long i_9 = (((dynamic)digits_5.Length) - ((dynamic)1));
        while ((i_9 >= 0)) {
            sum_7 = (sum_7 + pow(digits_5[(int)(i_9)], pos_8));
            pos_8 = (pos_8 + 1);
            i_9 = (i_9 - 1);
        };
        return (sum_7 == n_4);
    }

    static void main() {
        long count_10 = 0;
        long n_11 = 0;
        while (((count_10 < 19) && (n_11 < 3000000))) {
            if (isDisarium(n_11)) {
                Console.WriteLine(_fmtTop((n_11).ToString()));
                count_10 = (count_10 + 1);
            }
            n_11 = (n_11 + 1);
        };
        Console.WriteLine(_fmtTop((("\nFound the first " + (count_10).ToString()) + " Disarium numbers.")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
