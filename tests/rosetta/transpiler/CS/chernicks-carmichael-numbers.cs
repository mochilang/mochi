// Generated by Mochi 0.10.52 on 2025-07-31 08:37 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        if (((n_0 % 2) == 0)) {
            return (n_0 == 2);
        };
        if (((n_0 % 3) == 0)) {
            return (n_0 == 3);
        };
        long d_1 = 5;
        while (((d_1 * d_1) <= n_0)) {
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 2);
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 4);
        };
        return true;
    }

    static long[] bigTrim(long[] a_2) {
        int n_3 = a_2.Length;
        while (((n_3 > 1) && (a_2[(int)((n_3 - 1))] == 0))) {
            a_2 = a_2.Skip((int)(0)).Take((int)(((n_3 - 1) - 0))).ToArray();
            n_3 = (n_3 - 1);
        };
        return a_2;
    }

    static long[] bigFromInt(long x_4) {
        if ((x_4 == 0)) {
            return new long[]{0};
        };
        long[] digits_5 = new long[]{};
        long n_6 = x_4;
        while ((n_6 > 0)) {
            digits_5 = (Enumerable.ToArray(Enumerable.Append(digits_5, (n_6 % 10))));
            n_6 = (n_6 / 10);
        };
        return digits_5;
    }

    static long[] bigMulSmall(long[] a_7, long m_8) {
        if ((m_8 == 0)) {
            return new long[]{0};
        };
        long[] res_9 = new long[]{};
        long carry_10 = 0;
        long i_11 = 0;
        while ((i_11 < a_7.Length)) {
            long prod_12 = ((a_7[(int)(i_11)] * m_8) + carry_10);
            res_9 = (Enumerable.ToArray(Enumerable.Append(res_9, (prod_12 % 10))));
            carry_10 = (prod_12 / 10);
            i_11 = (i_11 + 1);
        };
        while ((carry_10 > 0)) {
            res_9 = (Enumerable.ToArray(Enumerable.Append(res_9, (carry_10 % 10))));
            carry_10 = (carry_10 / 10);
        };
        return bigTrim(res_9);
    }

    static string bigToString(long[] a_13) {
        string s_14 = "";
        long i_15 = (a_13.Length - 1);
        while ((i_15 >= 0)) {
            s_14 = (s_14 + _fmt(a_13[(int)(i_15)]));
            i_15 = (i_15 - 1);
        };
        return s_14;
    }

    static long pow2(long k_16) {
        long r_17 = 1;
        long i_18 = 0;
        while ((i_18 < k_16)) {
            r_17 = (r_17 * 2);
            i_18 = (i_18 + 1);
        };
        return r_17;
    }

    static long[] ccFactors(long n_19, long m_20) {
        long p_21 = ((6 * m_20) + 1);
        if ((!isPrime(p_21))) {
            return new long[]{};
        };
        long[] prod_22 = bigFromInt(p_21);
        p_21 = ((12 * m_20) + 1);
        if ((!isPrime(p_21))) {
            return new long[]{};
        };
        prod_22 = bigMulSmall(prod_22, p_21);
        long i_23 = 1;
        while ((i_23 <= (n_19 - 2))) {
            p_21 = (((pow2(i_23) * 9) * m_20) + 1);
            if ((!isPrime(p_21))) {
                return new long[]{};
            }
            prod_22 = bigMulSmall(prod_22, p_21);
            i_23 = (i_23 + 1);
        };
        return prod_22;
    }

    static void ccNumbers(long start_24, long end_25) {
        long n_26 = start_24;
        while ((n_26 <= end_25)) {
            long m_27 = 1;
            if ((n_26 > 4)) {
                m_27 = pow2((n_26 - 4));
            }
            while (true) {
                long[] num_28 = ccFactors(n_26, m_27);
                if ((num_28.Length > 0)) {
                    Console.WriteLine(_fmtTop(((("a(" + _fmt(n_26)) + ") = ") + bigToString(num_28))));
                    break;
                }
                if ((n_26 <= 4)) {
                    m_27 = (m_27 + 1);
                } else {
                    m_27 = (m_27 + pow2((n_26 - 4)));
                }
            }
            n_26 = (n_26 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            ccNumbers(3, 9);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
