// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI = 3.141592653589793;
    static double dt = 0.01;
    static double s = 0;
    static double t1 = 0;
    static dynamic k1 = sinApprox(0);
    static int i = 1;
    static int i2 = 1;
    static object sinApprox(object x) {
        var term = x;
        var sum = x;
        int n = 1;
        while ((n <= 12)) {
            var denom = Convert.ToDouble(((2 * n) * ((2 * n) + 1)));
            term = (((-term * x) * x) / denom);
            sum = (sum + term);
            n = (n + 1);
        };
        return sum;
    }

    static void Main() {
        while ((i <= 200)) {
            double t2 = (Convert.ToDouble(i) * dt);
            var k2 = sinApprox((t2 * PI));
            s = (s + (((k1 + k2) * 0.5) * (t2 - t1)));
            t1 = t2;
            k1 = k2;
            i = (i + 1);
        }
        while ((i2 <= 50)) {
            double t2 = (2 + (Convert.ToDouble(i2) * dt));
            double k2 = 0;
            s = (s + (((k1 + k2) * 0.5) * (t2 - t1)));
            t1 = t2;
            k1 = k2;
            i2 = (i2 + 1);
        }
        Console.WriteLine(_fmtTop(s));
    }
}
