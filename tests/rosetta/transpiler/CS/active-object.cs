// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double dt_6 = 0.01;
    static double s_7 = 0.0;
    static double t1_8 = 0.0;
    static double k1_9 = sinApprox(0.0);
    static long i_10 = 1;
    static double sinApprox(double x_1) {
        double term_2 = x_1;
        double sum_3 = x_1;
        long n_4 = 1;
        while ((n_4 <= 12)) {
            var denom_5 = Convert.ToDouble(((2 * n_4) * ((2 * n_4) + 1)));
            term_2 = (((dynamic)(((-term_2 * x_1) * x_1))) / ((dynamic)(denom_5)));
            sum_3 = (sum_3 + term_2);
            n_4 = (n_4 + 1);
        };
        return sum_3;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_10 <= 200)) {
                double t2_11 = (((dynamic)(Convert.ToDouble(i_10))) * ((dynamic)(dt_6)));
                double k2_12 = sinApprox((t2_11 * PI_0));
                s_7 = (s_7 + (((k1_9 + k2_12) * 0.5) * (t2_11 - t1_8)));
                t1_8 = t2_11;
                k1_9 = k2_12;
                i_10 = (i_10 + 1);
            }
            long i2_13 = 1;
            while ((i2_13 <= 50)) {
                double t2_14 = (2.0 + (((dynamic)(Convert.ToDouble(i2_13))) * ((dynamic)(dt_6))));
                double k2_15 = 0.0;
                s_7 = (s_7 + (((k1_9 + k2_15) * 0.5) * (t2_14 - t1_8)));
                t1_8 = t2_14;
                k1_9 = k2_15;
                i2_13 = (i2_13 + 1);
            }
            Console.WriteLine(_fmtTop(s_7));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
