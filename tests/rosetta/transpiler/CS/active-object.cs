// Generated by Mochi 0.10.40 on 2025-07-25 19:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double dt_5 = 0.01;
    static double s_6 = 0;
    static double t1_7 = 0;
    static double k1_8 = sinApprox(0);
    static long i_9 = 1;
    static long i2_12 = 1;
    static double sinApprox(double x) {
        double term_1 = x;
        double sum_2 = x;
        long n_3 = 1;
        while ((n_3 <= 12)) {
            var denom_4 = Convert.ToDouble(((2 * n_3) * ((2 * n_3) + 1)));
            term_1 = (((dynamic)((-term_1 * x) * x)) / ((dynamic)denom_4));
            sum_2 = (sum_2 + term_1);
            n_3 = (n_3 + 1);
        };
        return sum_2;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_9 <= 200)) {
                double t2_10 = (((dynamic)Convert.ToDouble(i_9)) * ((dynamic)dt_5));
                double k2_11 = sinApprox((t2_10 * PI_0));
                s_6 = (s_6 + (((k1_8 + k2_11) * 0.5) * (t2_10 - t1_7)));
                t1_7 = t2_10;
                k1_8 = k2_11;
                i_9 = (i_9 + 1);
            }
            while ((i2_12 <= 50)) {
                double t2_13 = (2 + (((dynamic)Convert.ToDouble(i2_12)) * ((dynamic)dt_5)));
                double k2_14 = 0;
                s_6 = (s_6 + (((k1_8 + k2_14) * 0.5) * (t2_13 - t1_7)));
                t1_7 = t2_13;
                k1_8 = k2_14;
                i2_12 = (i2_12 + 1);
            }
            Console.WriteLine(_fmtTop(s_6));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
