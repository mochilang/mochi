// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Complex {
    public double re;
    public double im;
    public override string ToString() => $"Complex {{re = {re.ToString("0.0")}, im = {im.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Complex a_10 = new Complex{re = 1.0, im = 1.0};
    static Complex b_11 = new Complex{re = 3.14159, im = 1.25};
    static Complex add(Complex a_0, Complex b_1) {
        return new Complex{re = (a_0.re + b_1.re), im = (a_0.im + b_1.im)};
    }

    static Complex mul(Complex a_2, Complex b_3) {
        return new Complex{re = ((a_2.re * b_3.re) - (a_2.im * b_3.im)), im = ((a_2.re * b_3.im) + (a_2.im * b_3.re))};
    }

    static Complex neg(Complex a_4) {
        return new Complex{re = -a_4.re, im = -a_4.im};
    }

    static Complex inv(Complex a_5) {
        double denom_6 = ((a_5.re * a_5.re) + (a_5.im * a_5.im));
        return new Complex{re = (a_5.re / denom_6), im = (-a_5.im / denom_6)};
    }

    static Complex conj(Complex a_7) {
        return new Complex{re = a_7.re, im = -a_7.im};
    }

    static string cstr(Complex a_8) {
        string s_9 = ("(" + (a_8.re).ToString());
        if ((a_8.im >= 0)) {
            s_9 = (((s_9 + "+") + (a_8.im).ToString()) + "i)");
        } else {
            s_9 = ((s_9 + (a_8.im).ToString()) + "i)");
        };
        return s_9;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(("a:       " + cstr(a_10))));
            Console.WriteLine(_fmtTop(("b:       " + cstr(b_11))));
            Console.WriteLine(_fmtTop(("a + b:   " + cstr(add(a_10, b_11)))));
            Console.WriteLine(_fmtTop(("a * b:   " + cstr(mul(a_10, b_11)))));
            Console.WriteLine(_fmtTop(("-a:      " + cstr(neg(a_10)))));
            Console.WriteLine(_fmtTop(("1 / a:   " + cstr(inv(a_10)))));
            Console.WriteLine(_fmtTop(("aÌ…:       " + cstr(conj(a_10)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
