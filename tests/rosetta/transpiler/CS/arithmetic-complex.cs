// Generated by Mochi 0.10.40 on 2025-07-25 13:09 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;

struct Complex {
    public double re;
    public double im;
    public override string ToString() => $"Complex {{re = {re.ToString("0.0")}, im = {im.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Complex a_2 = new Complex{re = 1, im = 1};
    static Complex b_3 = new Complex{re = 3.14159, im = 1.25};
    static Complex add(Complex a, Complex b) {
        return new Complex{re = (a.re + b.re), im = (a.im + b.im)};
    }

    static Complex mul(Complex a, Complex b) {
        return new Complex{re = ((a.re * b.re) - (a.im * b.im)), im = ((a.re * b.im) + (a.im * b.re))};
    }

    static Complex neg(Complex a) {
        return new Complex{re = -a.re, im = -a.im};
    }

    static Complex inv(Complex a) {
        double denom_0 = ((a.re * a.re) + (a.im * a.im));
        return new Complex{re = (a.re / denom_0), im = (-a.im / denom_0)};
    }

    static Complex conj(Complex a) {
        return new Complex{re = a.re, im = -a.im};
    }

    static string cstr(Complex a) {
        string s_1 = ("(" + (a.re).ToString());
        if ((a.im >= 0)) {
            s_1 = (((s_1 + "+") + (a.im).ToString()) + "i)");
        } else {
            s_1 = ((s_1 + (a.im).ToString()) + "i)");
        };
        return s_1;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(("a:       " + cstr(a_2))));
            Console.WriteLine(_fmtTop(("b:       " + cstr(b_3))));
            Console.WriteLine(_fmtTop(("a + b:   " + cstr(add(a_2, b_3)))));
            Console.WriteLine(_fmtTop(("a * b:   " + cstr(mul(a_2, b_3)))));
            Console.WriteLine(_fmtTop(("-a:      " + cstr(neg(a_2)))));
            Console.WriteLine(_fmtTop(("1 / a:   " + cstr(inv(a_2)))));
            Console.WriteLine(_fmtTop(("aÌ…:       " + cstr(conj(a_2)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
