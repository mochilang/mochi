// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double[] dxs_3 = new double[]{-0.533, 0.27, 0.859, -0.043, -0.205, -0.127, -0.071, 0.275, 1.251, -0.231, -0.401, 0.269, 0.491, 0.951, 1.15, 0.001, -0.382, 0.161, 0.915, 2.08, -2.337, 0.034, -0.126, 0.014, 0.709, 0.129, -1.093, -0.483, -1.193, 0.02, -0.051, 0.047, -0.095, 0.695, 0.34, -0.182, 0.287, 0.213, -0.423, -0.021, -0.134, 1.798, 0.021, -1.099, -0.361, 1.636, -1.134, 1.315, 0.201, 0.034, 0.097, -0.17, 0.054, -0.553, -0.024, -0.181, -0.7, -0.361, -0.789, 0.279, -0.174, -0.009, -0.323, -0.658, 0.348, -0.528, 0.881, 0.021, -0.853, 0.157, 0.648, 1.774, -1.043, 0.051, 0.021, 0.247, -0.31, 0.171, 0, 0.106, 0.024, -0.386, 0.962, 0.765, -0.125, -0.289, 0.521, 0.017, 0.281, -0.749, -0.149, -2.436, -0.909, 0.394, -0.113, -0.598, 0.443, -0.521, -0.799, 0.087};
    static double[] dys_4 = new double[]{0.136, 0.717, 0.459, -0.225, 1.392, 0.385, 0.121, -0.395, 0.49, -0.682, -0.065, 0.242, -0.288, 0.658, 0.459, 0, 0.426, 0.205, -0.765, -2.188, -0.742, -0.01, 0.089, 0.208, 0.585, 0.633, -0.444, -0.351, -1.087, 0.199, 0.701, 0.096, -0.025, -0.868, 1.051, 0.157, 0.216, 0.162, 0.249, -0.007, 0.009, 0.508, -0.79, 0.723, 0.881, -0.508, 0.393, -0.226, 0.71, 0.038, -0.217, 0.831, 0.48, 0.407, 0.447, -0.295, 1.126, 0.38, 0.549, -0.445, -0.046, 0.428, -0.074, 0.217, -0.822, 0.491, 1.347, -0.141, 1.23, -0.044, 0.079, 0.219, 0.698, 0.275, 0.056, 0.031, 0.421, 0.064, 0.721, 0.104, -0.729, 0.65, -1.103, 0.154, -1.72, 0.051, -0.385, 0.477, 1.537, -0.901, 0.939, -0.411, 0.341, -0.411, 0.106, 0.224, -0.947, -1.424, -0.542, -1.032};
    static double sqrtApprox(double x_0) {
        if ((x_0 <= 0)) {
            return 0;
        };
        double g_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 20)) {
            g_1 = ((g_1 + (x_0 / g_1)) / 2);
            i_2 = (i_2 + 1);
        };
        return g_1;
    }

    static double[] funnel(double[] fa_5, Func<double, double, double> r_6) {
        double x_7 = 0;
        object[] result_8 = new object[]{};
        long i_9 = 0;
        while ((i_9 < fa_5.Length)) {
            double f_10 = fa_5[(int)(i_9)];
            result_8 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(result_8.Cast<object>()), (x_7 + f_10))));
            x_7 = r_6(x_7, f_10);
            i_9 = (i_9 + 1);
        };
        return result_8.Cast<double>().ToArray();
    }

    static double mean(double[] fa_11) {
        double sum_12 = 0;
        long i_13 = 0;
        while ((i_13 < fa_11.Length)) {
            sum_12 = (sum_12 + fa_11[(int)(i_13)]);
            i_13 = (i_13 + 1);
        };
        return (((dynamic)sum_12) / ((dynamic)Convert.ToDouble(fa_11.Length)));
    }

    static double stdDev(double[] fa_14) {
        double m_15 = mean(fa_14);
        double sum_16 = 0;
        long i_17 = 0;
        while ((i_17 < fa_14.Length)) {
            double d_18 = (fa_14[(int)(i_17)] - m_15);
            sum_16 = (sum_16 + (d_18 * d_18));
            i_17 = (i_17 + 1);
        };
        double r_19 = sqrtApprox((((dynamic)sum_16) / ((dynamic)Convert.ToDouble(fa_14.Length))));
        return r_19;
    }

    static void experiment(string label_20, Func<double, double, double> r_21) {
        double[] rxs_22 = funnel(dxs_3, r_21);
        double[] rys_23 = funnel(dys_4, r_21);
        Console.WriteLine(_fmtTop((label_20 + "  :      x        y")));
        Console.WriteLine(_fmtTop(((("Mean    :  " + (mean(rxs_22)).ToString()) + ", ") + (mean(rys_23)).ToString())));
        Console.WriteLine(_fmtTop(((("Std Dev :  " + (stdDev(rxs_22)).ToString()) + ", ") + (stdDev(rys_23)).ToString())));
        Console.WriteLine(_fmtTop(""));
    }

    static void main() {
        experiment("Rule 1", (double x, double y) => 0);
        experiment("Rule 2", (double x, double dz) => -((dynamic)dz));
        experiment("Rule 3", (double z, double dz) => -((dynamic)(((dynamic)z) + ((dynamic)dz))));
        experiment("Rule 4", (double z, double dz) => (((dynamic)z) + ((dynamic)dz)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
