// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] facts_0 = new long[]{1};
    static long n_1 = 1;
    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((n_1 < 12)) {
                facts_0 = (Enumerable.ToArray(Enumerable.Append(facts_0, (facts_0[(int)((n_1 - 1))] * n_1))));
                n_1 = (n_1 + 1);
            }
            for (var b_2 = 9; b_2 < 13; b_2++) {
                Console.WriteLine(_fmtTop((("The factorions for base " + (b_2).ToString()) + " are:")));
                string line_3 = "";
                long i_4 = 1;
                while ((i_4 < 1500000)) {
                    long m_5 = i_4;
                    long sum_6 = 0;
                    while ((m_5 > 0)) {
                        long d_7 = (m_5 % b_2);
                        sum_6 = (sum_6 + facts_0[(int)(d_7)]);
                        m_5 = (m_5 / b_2);
                    }
                    if ((sum_6 == i_4)) {
                        line_3 = ((line_3 + (i_4).ToString()) + " ");
                    }
                    i_4 = (i_4 + 1);
                }
                Console.WriteLine(_fmtTop(line_3));
                Console.WriteLine(_fmtTop(""));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
