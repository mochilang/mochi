// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<long, long> prevCats_12 = new Dictionary<long, long>{};
    static long[] generatePrimes(long n_0) {
        long[] primes_1 = new long[]{2};
        long cand_2 = 3;
        while ((primes_1.Length < n_0)) {
            bool isP_3 = true;
            long i_4 = 0;
            while ((i_4 < primes_1.Length)) {
                long p_5 = primes_1[(int)(i_4)];
                if (((p_5 * p_5) > cand_2)) {
                    break;
                }
                if (((cand_2 % p_5) == 0)) {
                    isP_3 = false;
                    break;
                }
                i_4 = (i_4 + 1);
            }
            if (isP_3) {
                primes_1 = (Enumerable.ToArray(Enumerable.Append(primes_1, cand_2)));
            }
            cand_2 = (cand_2 + 2);
        };
        return primes_1;
    }

    static long[] primeFactors(long n_6, long[] primes_7) {
        long[] factors_8 = new long[]{};
        long num_9 = n_6;
        long i_10 = 0;
        while (((i_10 < primes_7.Length) && ((primes_7[(int)(i_10)] * primes_7[(int)(i_10)]) <= num_9))) {
            long p_11 = primes_7[(int)(i_10)];
            while (((num_9 % p_11) == 0)) {
                factors_8 = (Enumerable.ToArray(Enumerable.Append(factors_8, p_11)));
                num_9 = (num_9 / p_11);
            }
            i_10 = (i_10 + 1);
        };
        if ((num_9 > 1)) {
            factors_8 = (Enumerable.ToArray(Enumerable.Append(factors_8, num_9)));
        };
        return factors_8;
    }

    static long cat(long p_13, long[] primes_14) {
        if (prevCats_12.ContainsKey(p_13)) {
            return (prevCats_12.ContainsKey(p_13) ? prevCats_12[p_13] : 0);
        };
        long[] pf_15 = primeFactors((p_13 + 1), primes_14);
        bool all23_16 = true;
        foreach (var f_17 in pf_15) {
            if (((f_17 != 2) && (f_17 != 3))) {
                all23_16 = false;
                break;
            }
        };
        if (all23_16) {
            prevCats_12[p_13] = 1;
            return 1;
        };
        if ((p_13 > 2)) {
            long[] unique_18 = new long[]{};
            long last_19 = -1;
            foreach (var f_20 in pf_15) {
                if ((f_20 != last_19)) {
                    unique_18 = (Enumerable.ToArray(Enumerable.Append(unique_18, f_20)));
                    last_19 = f_20;
                }
            }
            pf_15 = unique_18;
        };
        long c_21 = 2;
        while ((c_21 <= 11)) {
            bool ok_22 = true;
            foreach (var f_23 in pf_15) {
                if ((cat(f_23, primes_14) >= c_21)) {
                    ok_22 = false;
                    break;
                }
            }
            if (ok_22) {
                prevCats_12[p_13] = c_21;
                return c_21;
            }
            c_21 = (c_21 + 1);
        };
        prevCats_12[p_13] = 12;
        return 12;
    }

    static string padLeft(long n_24, long width_25) {
        string s_26 = (n_24).ToString();
        while ((s_26.Length < width_25)) {
            s_26 = (" " + s_26);
        };
        return s_26;
    }

    static void main() {
        long[] primes_27 = generatePrimes(1000);
        long[][] es_28 = new long[][]{};
        for (var __29 = 0; __29 < 12; __29++) {
            es_28 = (Enumerable.ToArray(Enumerable.Append(es_28, new long[]{})));
        };
        Console.WriteLine(_fmtTop("First 200 primes:\n"));
        long idx_30 = 0;
        while ((idx_30 < 200)) {
            long p_31 = primes_27[(int)(idx_30)];
            long c_32 = cat(p_31, primes_27);
            es_28[(c_32 - 1)] = (Enumerable.ToArray(Enumerable.Append(es_28[(int)((c_32 - 1))], p_31)));
            idx_30 = (idx_30 + 1);
        };
        long c_33 = 1;
        while ((c_33 <= 6)) {
            if ((es_28[(int)((c_33 - 1))].Length > 0)) {
                Console.WriteLine(_fmtTop((("Category " + (c_33).ToString()) + ":")));
                Console.WriteLine(_fmtTop((es_28[(int)((c_33 - 1))]).ToString()));
                Console.WriteLine(_fmtTop(""));
            }
            c_33 = (c_33 + 1);
        };
        Console.WriteLine(_fmtTop("First thousand primes:\n"));
        while ((idx_30 < 1000)) {
            long p_34 = primes_27[(int)(idx_30)];
            long cv_35 = cat(p_34, primes_27);
            es_28[(cv_35 - 1)] = (Enumerable.ToArray(Enumerable.Append(es_28[(int)((cv_35 - 1))], p_34)));
            idx_30 = (idx_30 + 1);
        };
        c_33 = 1;
        while ((c_33 <= 12)) {
            long[] e_36 = es_28[(int)((c_33 - 1))];
            if ((e_36.Length > 0)) {
                string line_37 = ((((((("Category " + padLeft(c_33, 2)) + ": First = ") + padLeft(e_36[(int)(0)], 7)) + "  Last = ") + padLeft(e_36[(int)((((dynamic)e_36.Length) - ((dynamic)1)))], 8)) + "  Count = ") + padLeft(e_36.Length, 6));
                Console.WriteLine(_fmtTop(line_37));
            }
            c_33 = (c_33 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
