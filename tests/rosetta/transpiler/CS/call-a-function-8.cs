// Generated by Mochi 0.10.41 on 2025-07-27 12:32 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string mapString(string s_0, Func<string, string> f_1) {
        string out_2 = "";
        long i_3 = 0;
        while ((i_3 < s_0.Length)) {
            out_2 = (((dynamic)out_2) + ((dynamic)f_1(s_0.Substring((int)(i_3), (int)((i_3 + 1) - i_3)))));
            i_3 = (i_3 + 1);
        };
        return out_2;
    }

    static void main() {
        Func<string, string> fn_4 = null;
        fn_4 = (string r) => ((r == " ") ? "" : r);
        mapString("Spaces removed", fn_4);
        mapString("Test", (string r) => r.ToLower());
        mapString("shift", (string r) => r);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
