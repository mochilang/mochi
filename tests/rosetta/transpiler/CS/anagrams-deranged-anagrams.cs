// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string sortRunes(string s) {
        string[] arr = new string[]{};
        int i = 0;
        while ((i < s.Length)) {
            arr = (arr.Append(s.Substring(i, ((i + 1) - i))).ToArray());
            i = (i + 1);
        };
        var n = arr.Length;
        int m = 0;
        while ((m < n)) {
            int j = 0;
            while ((j < (n - 1))) {
                if ((arr[j] > arr[(j + 1)])) {
                    var tmp = arr[j];
                    arr[j] = arr[(j + 1)];
                    arr[(j + 1)] = tmp;
                }
                j = (j + 1);
            }
            m = (m + 1);
        };
        string _out = "";
        i = 0;
        while ((i < n)) {
            _out = (_out + arr[i]);
            i = (i + 1);
        };
        return _out;
    }

    static bool deranged(string a, string b) {
        if ((a.Length != b.Length)) {
            return false;
        };
        int i = 0;
        while ((i < a.Length)) {
            if ((a.Substring(i, ((i + 1) - i)) == b.Substring(i, ((i + 1) - i)))) {
                return false;
            }
            i = (i + 1);
        };
        return true;
    }

    static void main() {
        string[] words = new string[]{"constitutionalism", "misconstitutional"};
        Dictionary<string, string[]> m = new Dictionary<string, string[]>{};
        int bestLen = 0;
        string w1 = "";
        string w2 = "";
        foreach (var w_0 in words) {
            if ((w_0.Length <= bestLen)) {
                continue;
            }
            string k = sortRunes(w_0);
            if ((!(m.ContainsKey(k)))) {
                m[k] = new object[]{w_0};
                continue;
            }
            foreach (var c_1 in m[k]) {
                if (deranged(w_0, c_1)) {
                    bestLen = w_0.Length;
                    w1 = c_1;
                    w2 = w_0;
                    break;
                }
            }
            m[k] = (m[k].Append(w_0).ToArray());
        };
        Console.WriteLine(_fmtTop(((((w1 + " ") + w2) + " : Length ") + bestLen.ToString())));
    }

    static void Main() {
        main();
    }
}
