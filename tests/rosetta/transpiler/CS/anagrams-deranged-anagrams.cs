// Generated by Mochi 0.10.40 on 2025-07-25 20:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string sortRunes(string s) {
        string[] arr_0 = new string[]{};
        long i_1 = 0;
        while ((i_1 < s.Length)) {
            arr_0 = (Enumerable.ToArray(Enumerable.Append(arr_0, s.Substring((int)(i_1), (int)((i_1 + 1) - i_1)))));
            i_1 = (i_1 + 1);
        };
        var n_2 = arr_0.Length;
        long m_3 = 0;
        while ((m_3 < n_2)) {
            long j_4 = 0;
            while ((j_4 < (((dynamic)n_2) - ((dynamic)1)))) {
                if ((string.Compare(arr_0[(int)(j_4)], arr_0[(int)((j_4 + 1))]) > 0)) {
                    string tmp_5 = arr_0[(int)(j_4)];
                    arr_0[j_4] = arr_0[(int)((j_4 + 1))];
                    arr_0[(j_4 + 1)] = tmp_5;
                }
                j_4 = (j_4 + 1);
            }
            m_3 = (m_3 + 1);
        };
        string out_6 = "";
        i_1 = 0;
        while ((i_1 < n_2)) {
            out_6 = (out_6 + arr_0[(int)(i_1)]);
            i_1 = (i_1 + 1);
        };
        return out_6;
    }

    static bool deranged(string a, string b) {
        if ((a.Length != b.Length)) {
            return false;
        };
        long i_7 = 0;
        while ((i_7 < a.Length)) {
            if ((a.Substring((int)(i_7), (int)((i_7 + 1) - i_7)) == b.Substring((int)(i_7), (int)((i_7 + 1) - i_7)))) {
                return false;
            }
            i_7 = (i_7 + 1);
        };
        return true;
    }

    static void main() {
        string[] words_8 = new string[]{"constitutionalism", "misconstitutional"};
        Dictionary<string, string[]> m_9 = new Dictionary<string, string[]>{};
        long bestLen_10 = 0;
        string w1_11 = "";
        string w2_12 = "";
        foreach (var w_13 in words_8) {
            if ((w_13.Length <= bestLen_10)) {
                continue;
            }
            string k_14 = sortRunes(w_13);
            if ((!(m_9.ContainsKey(k_14)))) {
                m_9[k_14] = new string[]{w_13};
                continue;
            }
            foreach (var c_15 in m_9[k_14]) {
                if (deranged(w_13, c_15)) {
                    bestLen_10 = w_13.Length;
                    w1_11 = c_15;
                    w2_12 = w_13;
                    break;
                }
            }
            m_9[k_14] = (Enumerable.ToArray(Enumerable.Append(m_9[k_14], w_13)));
        };
        Console.WriteLine(_fmtTop(((((w1_11 + " ") + w2_12) + " : Length ") + (bestLen_10).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
