// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string sortRunes(string s_0) {
        string[] arr_1 = new string[]{};
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            arr_1 = (Enumerable.ToArray(Enumerable.Append(arr_1, s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2)))));
            i_2 = (i_2 + 1);
        };
        var n_3 = arr_1.Length;
        long m_4 = 0;
        while ((m_4 < n_3)) {
            long j_5 = 0;
            while ((j_5 < (((dynamic)(n_3)) - ((dynamic)(1))))) {
                if ((string.Compare(arr_1[(int)(j_5)], arr_1[(int)((j_5 + 1))]) > 0)) {
                    string tmp_6 = arr_1[(int)(j_5)];
                    arr_1[j_5] = arr_1[(int)((j_5 + 1))];
                    arr_1[(j_5 + 1)] = tmp_6;
                }
                j_5 = (j_5 + 1);
            }
            m_4 = (m_4 + 1);
        };
        string out_7 = "";
        i_2 = 0;
        while ((i_2 < n_3)) {
            out_7 = (out_7 + arr_1[(int)(i_2)]);
            i_2 = (i_2 + 1);
        };
        return out_7;
    }

    static bool deranged(string a_8, string b_9) {
        if ((a_8.Length != b_9.Length)) {
            return false;
        };
        long i_10 = 0;
        while ((i_10 < a_8.Length)) {
            if ((a_8.Substring((int)(i_10), (int)((i_10 + 1) - i_10)) == b_9.Substring((int)(i_10), (int)((i_10 + 1) - i_10)))) {
                return false;
            }
            i_10 = (i_10 + 1);
        };
        return true;
    }

    static void main() {
        string[] words_11 = new string[]{"constitutionalism", "misconstitutional"};
        Dictionary<string, string[]> m_12 = new Dictionary<string, string[]>{};
        long bestLen_13 = 0;
        string w1_14 = "";
        string w2_15 = "";
        foreach (var w_16 in words_11) {
            if ((w_16.Length <= bestLen_13)) {
                continue;
            }
            string k_17 = sortRunes(w_16);
            if ((!(m_12.ContainsKey(k_17)))) {
                m_12[k_17] = new string[]{w_16};
                continue;
            }
            foreach (var c_18 in (m_12.ContainsKey(k_17) ? m_12[k_17] : null)) {
                if (deranged(w_16, c_18)) {
                    bestLen_13 = w_16.Length;
                    w1_14 = c_18;
                    w2_15 = w_16;
                    break;
                }
            }
            m_12[k_17] = (Enumerable.ToArray(Enumerable.Append((m_12.ContainsKey(k_17) ? m_12[k_17] : null), w_16)));
        };
        Console.WriteLine(_fmtTop(((((w1_14 + " ") + w2_15) + " : Length ") + (bestLen_13).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
