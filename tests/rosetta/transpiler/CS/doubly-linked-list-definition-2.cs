// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, object> newList() {
        return new Dictionary<string, object>{{"nodes", new Dictionary<object, object>{}}, {"head", 0}, {"tail", 0}, {"nextID", 1}};
    }

    static Dictionary<string, object> newNode(Dictionary<string, object> l_0, object v_1) {
        var id_2 = Convert.ToInt64(((dynamic)l_0)["nextID"]);
        l_0["nextID"] = (((dynamic)id_2) + ((dynamic)1));
        Dictionary<long, Dictionary<string, object>> nodes_3 = (((dynamic)l_0)["nodes"] as Dictionary<long, Dictionary<string, object>>) ?? new Dictionary<long, Dictionary<string, object>>{};
        Dictionary<string, object> n_4 = new Dictionary<string, object>{{"id", id_2}, {"value", v_1}, {"next", 0}, {"prev", 0}};
        nodes_3[id_2] = n_4;
        l_0["nodes"] = nodes_3;
        return n_4;
    }

    static Dictionary<string, object> pushFront(Dictionary<string, object> l_5, object v_6) {
        Dictionary<string, object> n_7 = newNode(l_5, v_6);
        n_7["next"] = ((dynamic)l_5)["head"];
        if ((Convert.ToInt64(((dynamic)l_5)["head"]) != 0)) {
            Dictionary<long, Dictionary<string, object>> nodes_8 = (((dynamic)l_5)["nodes"] as Dictionary<long, Dictionary<string, object>>) ?? new Dictionary<long, Dictionary<string, object>>{};
            var h_9 = ((dynamic)nodes_8)[Convert.ToInt64(((dynamic)l_5)["head"])];
            h_9["prev"] = ((dynamic)n_7)["id"];
            nodes_8[Convert.ToInt64(((dynamic)h_9)["id"])] = h_9;
            l_5["nodes"] = nodes_8;
        } else {
            l_5["tail"] = ((dynamic)n_7)["id"];
        };
        l_5["head"] = ((dynamic)n_7)["id"];
        Dictionary<long, Dictionary<string, object>> nodes2_10 = (((dynamic)l_5)["nodes"] as Dictionary<long, Dictionary<string, object>>) ?? new Dictionary<long, Dictionary<string, object>>{};
        nodes2_10[Convert.ToInt64(((dynamic)n_7)["id"])] = n_7;
        l_5["nodes"] = nodes2_10;
        return n_7;
    }

    static Dictionary<string, object> pushBack(Dictionary<string, object> l_11, object v_12) {
        Dictionary<string, object> n_13 = newNode(l_11, v_12);
        n_13["prev"] = ((dynamic)l_11)["tail"];
        if ((Convert.ToInt64(((dynamic)l_11)["tail"]) != 0)) {
            Dictionary<long, Dictionary<string, object>> nodes_14 = (((dynamic)l_11)["nodes"] as Dictionary<long, Dictionary<string, object>>) ?? new Dictionary<long, Dictionary<string, object>>{};
            var t_15 = ((dynamic)nodes_14)[Convert.ToInt64(((dynamic)l_11)["tail"])];
            t_15["next"] = ((dynamic)n_13)["id"];
            nodes_14[Convert.ToInt64(((dynamic)t_15)["id"])] = t_15;
            l_11["nodes"] = nodes_14;
        } else {
            l_11["head"] = ((dynamic)n_13)["id"];
        };
        l_11["tail"] = ((dynamic)n_13)["id"];
        Dictionary<long, Dictionary<string, object>> nodes2_16 = (((dynamic)l_11)["nodes"] as Dictionary<long, Dictionary<string, object>>) ?? new Dictionary<long, Dictionary<string, object>>{};
        nodes2_16[Convert.ToInt64(((dynamic)n_13)["id"])] = n_13;
        l_11["nodes"] = nodes2_16;
        return n_13;
    }

    static Dictionary<string, object> insertBefore(Dictionary<string, object> l_17, long refID_18, object v_19) {
        if ((refID_18 == 0)) {
            return pushFront(l_17, v_19);
        };
        Dictionary<long, Dictionary<string, object>> nodes_20 = (((dynamic)l_17)["nodes"] as Dictionary<long, Dictionary<string, object>>) ?? new Dictionary<long, Dictionary<string, object>>{};
        var ref_21 = ((dynamic)nodes_20)[refID_18];
        Dictionary<string, object> n_22 = newNode(l_17, v_19);
        n_22["prev"] = ((dynamic)ref_21)["prev"];
        n_22["next"] = ((dynamic)ref_21)["id"];
        if ((Convert.ToInt64(((dynamic)ref_21)["prev"]) != 0)) {
            var p_23 = ((dynamic)nodes_20)[Convert.ToInt64(((dynamic)ref_21)["prev"])];
            p_23["next"] = ((dynamic)n_22)["id"];
            nodes_20[Convert.ToInt64(((dynamic)p_23)["id"])] = p_23;
        } else {
            l_17["head"] = ((dynamic)n_22)["id"];
        };
        ref_21["prev"] = ((dynamic)n_22)["id"];
        nodes_20[refID_18] = ref_21;
        nodes_20[Convert.ToInt64(((dynamic)n_22)["id"])] = n_22;
        l_17["nodes"] = nodes_20;
        return n_22;
    }

    static Dictionary<string, object> insertAfter(Dictionary<string, object> l_24, long refID_25, object v_26) {
        if ((refID_25 == 0)) {
            return pushBack(l_24, v_26);
        };
        Dictionary<long, Dictionary<string, object>> nodes_27 = (((dynamic)l_24)["nodes"] as Dictionary<long, Dictionary<string, object>>) ?? new Dictionary<long, Dictionary<string, object>>{};
        var ref_28 = ((dynamic)nodes_27)[refID_25];
        Dictionary<string, object> n_29 = newNode(l_24, v_26);
        n_29["next"] = ((dynamic)ref_28)["next"];
        n_29["prev"] = ((dynamic)ref_28)["id"];
        if ((Convert.ToInt64(((dynamic)ref_28)["next"]) != 0)) {
            var nx_30 = ((dynamic)nodes_27)[Convert.ToInt64(((dynamic)ref_28)["next"])];
            nx_30["prev"] = ((dynamic)n_29)["id"];
            nodes_27[Convert.ToInt64(((dynamic)nx_30)["id"])] = nx_30;
        } else {
            l_24["tail"] = ((dynamic)n_29)["id"];
        };
        ref_28["next"] = ((dynamic)n_29)["id"];
        nodes_27[refID_25] = ref_28;
        nodes_27[Convert.ToInt64(((dynamic)n_29)["id"])] = n_29;
        l_24["nodes"] = nodes_27;
        return n_29;
    }

    static void main() {
        Dictionary<string, object> l_31 = newList();
        Dictionary<string, object> e4_32 = pushBack(l_31, 4);
        Dictionary<string, object> e1_33 = pushFront(l_31, 1);
        insertBefore(l_31, Convert.ToInt64(((dynamic)e4_32)["id"]), 3);
        insertAfter(l_31, Convert.ToInt64(((dynamic)e1_33)["id"]), "two");
        var id_34 = Convert.ToInt64(((dynamic)l_31)["head"]);
        Dictionary<long, Dictionary<string, object>> nodes_35 = (((dynamic)l_31)["nodes"] as Dictionary<long, Dictionary<string, object>>) ?? new Dictionary<long, Dictionary<string, object>>{};
        while ((id_34 != 0)) {
            var node_36 = ((dynamic)nodes_35)[id_34];
            Console.WriteLine(_fmtTop((((dynamic)node_36)["value"]).ToString()));
            id_34 = Convert.ToInt64(((dynamic)node_36)["next"]);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
