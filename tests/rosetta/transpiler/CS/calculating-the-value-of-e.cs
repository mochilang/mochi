// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double epsilon_0 = 1e-15;
    static long factval_13 = 1;
    static double e_14 = 2.0;
    static long n_15 = 2;
    static double term_16 = 1.0;
    static double absf(double x_1) {
        if ((x_1 < 0.0)) {
            return -x_1;
        };
        return x_1;
    }

    static double pow10(long n_2) {
        double r_3 = 1.0;
        long i_4 = 0;
        while ((i_4 < n_2)) {
            r_3 = (r_3 * 10.0);
            i_4 = (i_4 + 1);
        };
        return r_3;
    }

    static string formatFloat(double f_5, long prec_6) {
        double scale_7 = pow10(prec_6);
        double scaled_8 = ((f_5 * scale_7) + 0.5);
        long n_9 = Convert.ToInt64(scaled_8);
        string digits_10 = _fmt(n_9);
        while ((Convert.ToDouble(digits_10.Length) <= Convert.ToDouble(prec_6))) {
            digits_10 = ("0" + digits_10);
        };
        string intPart_11 = digits_10.Substring((int)(0), (int)((((dynamic)(digits_10.Length)) - ((dynamic)(prec_6))) - 0));
        string fracPart_12 = digits_10.Substring((int)((((dynamic)(digits_10.Length)) - ((dynamic)(prec_6)))), (int)(digits_10.Length - (((dynamic)(digits_10.Length)) - ((dynamic)(prec_6)))));
        return ((intPart_11 + ".") + fracPart_12);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while (true) {
                factval_13 = (factval_13 * n_15);
                n_15 = (n_15 + 1);
                term_16 = (1.0 / Convert.ToDouble(factval_13));
                e_14 = (e_14 + term_16);
                if ((absf(term_16) < epsilon_0)) {
                    break;
                }
            }
            Console.WriteLine(_fmtTop(("e = " + formatFloat(e_14, 15))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
