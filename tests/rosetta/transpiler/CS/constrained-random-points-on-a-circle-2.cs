// Generated by Mochi 0.10.55 on 2025-08-03 10:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long nPts_0 = 100;
    static long rMin_1 = 10;
    static long rMax_2 = 15;
    static long span_3 = ((rMax_2 + 1) + rMax_2);
    static long[][] poss_4 = new long[][]{};
    static long min2_5 = (rMin_1 * rMin_1);
    static long max2_6 = (rMax_2 * rMax_2);
    static long y_7 = -rMax_2;
    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((y_7 <= rMax_2)) {
                long x_8 = -rMax_2;
                while ((x_8 <= rMax_2)) {
                    long r2_9 = ((x_8 * x_8) + (y_7 * y_7));
                    if (((r2_9 >= min2_5) && (r2_9 <= max2_6))) {
                        poss_4 = (Enumerable.ToArray(Enumerable.Append(poss_4, new long[]{x_8, y_7})));
                    }
                    x_8 = (x_8 + 1);
                }
                y_7 = (y_7 + 1);
            }
            Console.WriteLine(_fmtTop((_fmt(poss_4.Length) + " possible points")));
            string[][] rows_10 = new string[][]{};
            long r_11 = 0;
            while ((r_11 < span_3)) {
                string[] row_12 = new string[]{};
                long c_13 = 0;
                while ((c_13 < (span_3 * 2))) {
                    row_12 = (Enumerable.ToArray(Enumerable.Append(row_12, " ")));
                    c_13 = (c_13 + 1);
                }
                rows_10 = (Enumerable.ToArray(Enumerable.Append(rows_10, row_12)));
                r_11 = (r_11 + 1);
            }
            long u_14 = 0;
            Dictionary<string, bool> seen_15 = new Dictionary<string, bool>{};
            long n_16 = 0;
            while ((n_16 < nPts_0)) {
                long i_17 = (((dynamic)(_now())) % ((dynamic)(poss_4.Length)));
                long x_18 = poss_4[(int)(i_17)][(int)(0)];
                long yy_19 = poss_4[(int)(i_17)][(int)(1)];
                long row_20 = (yy_19 + rMax_2);
                long col_21 = ((x_18 + rMax_2) * 2);
                rows_10[(int)(row_20)][col_21] = "*";
                string key_22 = ((_fmt(row_20) + ",") + _fmt(col_21));
                if ((!(seen_15.ContainsKey(key_22) ? seen_15[key_22] : false))) {
                    seen_15[key_22] = true;
                    u_14 = (u_14 + 1);
                }
                n_16 = (n_16 + 1);
            }
            long i2_23 = 0;
            while ((i2_23 < span_3)) {
                string line_24 = "";
                long j_25 = 0;
                while ((j_25 < (span_3 * 2))) {
                    line_24 = (line_24 + rows_10[(int)(i2_23)][(int)(j_25)]);
                    j_25 = (j_25 + 1);
                }
                Console.WriteLine(_fmtTop(line_24));
                i2_23 = (i2_23 + 1);
            }
            Console.WriteLine(_fmtTop((_fmt(u_14) + " unique points")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
