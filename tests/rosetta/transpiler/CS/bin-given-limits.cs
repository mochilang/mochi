// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] getBins(long[] limits, long[] data) {
        var n_0 = limits.Length;
        long[] bins_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < (((dynamic)n_0) + ((dynamic)1)))) {
            bins_1 = (Enumerable.ToArray(Enumerable.Append(bins_1, 0)));
            i_2 = (i_2 + 1);
        };
        long j_3 = 0;
        while ((j_3 < data.Length)) {
            long d_4 = data[(int)(j_3)];
            long index_5 = 0;
            while ((index_5 < limits.Length)) {
                if ((d_4 < limits[(int)(index_5)])) {
                    break;
                }
                if ((d_4 == limits[(int)(index_5)])) {
                    index_5 = (index_5 + 1);
                    break;
                }
                index_5 = (index_5 + 1);
            }
            bins_1[index_5] = (bins_1[(int)(index_5)] + 1);
            j_3 = (j_3 + 1);
        };
        return bins_1;
    }

    static string padLeft(long n, long width) {
        string s_6 = (n).ToString();
        long pad_7 = (((dynamic)width) - ((dynamic)s_6.Length));
        string out_8 = "";
        long i_9 = 0;
        while ((i_9 < pad_7)) {
            out_8 = (out_8 + " ");
            i_9 = (i_9 + 1);
        };
        return (out_8 + s_6);
    }

    static void printBins(long[] limits, long[] bins) {
        var n_10 = limits.Length;
        Console.WriteLine(_fmtTop(((("           < " + padLeft(limits[(int)(0)], 3)) + " = ") + padLeft(bins[(int)(0)], 2))));
        long i_11 = 1;
        while ((i_11 < n_10)) {
            Console.WriteLine(_fmtTop((((((">= " + padLeft(limits[(int)((i_11 - 1))], 3)) + " and < ") + padLeft(limits[(int)(i_11)], 3)) + " = ") + padLeft(bins[(int)(i_11)], 2))));
            i_11 = (i_11 + 1);
        };
        Console.WriteLine(_fmtTop((((">= " + padLeft(limits[(int)((((dynamic)n_10) - ((dynamic)1)))], 3)) + "           = ") + padLeft(bins[(int)(n_10)], 2))));
        Console.WriteLine(_fmtTop(""));
    }

    static void main() {
        long[][] limitsList_12 = new long[][]{new long[]{23, 37, 43, 53, 67, 83}, new long[]{14, 18, 249, 312, 389, 392, 513, 591, 634, 720}};
        long[][] dataList_13 = new long[][]{new long[]{95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55}, new long[]{445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749}};
        long i_14 = 0;
        while ((i_14 < limitsList_12.Length)) {
            Console.WriteLine(_fmtTop((("Example " + ((i_14 + 1)).ToString()) + "\n")));
            long[] bins_15 = getBins(limitsList_12[(int)(i_14)], dataList_13[(int)(i_14)]);
            printBins(limitsList_12[(int)(i_14)], bins_15);
            i_14 = (i_14 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
