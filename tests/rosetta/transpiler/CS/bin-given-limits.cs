// Generated by Mochi 0.10.42 on 2025-07-28 10:03 +0700
using System;
using System.Linq;
using System.Numerics;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] getBins(long[] limits_0, long[] data_1) {
        var n_2 = limits_0.Length;
        long[] bins_3 = new long[]{};
        long i_4 = 0;
        while ((i_4 < (((dynamic)n_2) + ((dynamic)1)))) {
            bins_3 = (Enumerable.ToArray(Enumerable.Append(bins_3, 0)));
            i_4 = (i_4 + 1);
        };
        long j_5 = 0;
        while ((j_5 < data_1.Length)) {
            long d_6 = data_1[(int)(j_5)];
            long index_7 = 0;
            while ((index_7 < limits_0.Length)) {
                if ((d_6 < limits_0[(int)(index_7)])) {
                    break;
                }
                if ((d_6 == limits_0[(int)(index_7)])) {
                    index_7 = (index_7 + 1);
                    break;
                }
                index_7 = (index_7 + 1);
            }
            bins_3[index_7] = (bins_3[(int)(index_7)] + 1);
            j_5 = (j_5 + 1);
        };
        return bins_3;
    }

    static string padLeft(long n_8, long width_9) {
        string s_10 = (n_8).ToString();
        long pad_11 = (((dynamic)width_9) - ((dynamic)s_10.Length));
        string out_12 = "";
        long i_13 = 0;
        while ((i_13 < pad_11)) {
            out_12 = (out_12 + " ");
            i_13 = (i_13 + 1);
        };
        return (out_12 + s_10);
    }

    static void printBins(long[] limits_14, long[] bins_15) {
        var n_16 = limits_14.Length;
        Console.WriteLine(_fmtTop(((("           < " + padLeft(limits_14[(int)(0)], 3)) + " = ") + padLeft(bins_15[(int)(0)], 2))));
        long i_17 = 1;
        while ((i_17 < n_16)) {
            Console.WriteLine(_fmtTop((((((">= " + padLeft(limits_14[(int)((i_17 - 1))], 3)) + " and < ") + padLeft(limits_14[(int)(i_17)], 3)) + " = ") + padLeft(bins_15[(int)(i_17)], 2))));
            i_17 = (i_17 + 1);
        };
        Console.WriteLine(_fmtTop((((">= " + padLeft(limits_14[(int)((((dynamic)n_16) - ((dynamic)1)))], 3)) + "           = ") + padLeft(bins_15[(int)(n_16)], 2))));
        Console.WriteLine(_fmtTop(""));
    }

    static void main() {
        long[][] limitsList_18 = new long[][]{new long[]{23, 37, 43, 53, 67, 83}, new long[]{14, 18, 249, 312, 389, 392, 513, 591, 634, 720}};
        long[][] dataList_19 = new long[][]{new long[]{95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55}, new long[]{445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749}};
        long i_20 = 0;
        while ((i_20 < limitsList_18.Length)) {
            Console.WriteLine(_fmtTop((("Example " + ((i_20 + 1)).ToString()) + "\n")));
            long[] bins_21 = getBins(limitsList_18[(int)(i_20)], dataList_19[(int)(i_20)]);
            printBins(limitsList_18[(int)(i_20)], bins_21);
            i_20 = (i_20 + 1);
        };
    }

    static void Main() {
        main();
    }
}
