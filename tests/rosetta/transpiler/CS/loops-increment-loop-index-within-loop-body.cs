// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long limit_11 = 42;
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        if (((n_0 % 2) == 0)) {
            return (n_0 == 2);
        };
        if (((n_0 % 3) == 0)) {
            return (n_0 == 3);
        };
        long d_1 = 5;
        while (((d_1 * d_1) <= n_0)) {
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 2);
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 4);
        };
        return true;
    }

    static string commatize(long n_2) {
        string s_3 = (n_2).ToString();
        long i_4 = (((dynamic)(s_3.Length)) - ((dynamic)(3)));
        while ((i_4 >= 1)) {
            s_3 = ((s_3.Substring((int)(0), (int)(i_4 - 0)) + ",") + s_3.Substring((int)(i_4), (int)(s_3.Length - i_4)));
            i_4 = (i_4 - 3);
        };
        return s_3;
    }

    static string padLeft(string s_5, long w_6) {
        string out_7 = s_5;
        while ((out_7.Length < w_6)) {
            out_7 = (" " + out_7);
        };
        return out_7;
    }

    static string padRight(string s_8, long w_9) {
        string out_10 = s_8;
        while ((out_10.Length < w_9)) {
            out_10 = (out_10 + " ");
        };
        return out_10;
    }

    static void main() {
        long i_12 = limit_11;
        long n_13 = 0;
        while ((n_13 < limit_11)) {
            if (isPrime(i_12)) {
                n_13 = (n_13 + 1);
                string nStr_14 = padRight((n_13).ToString(), 2);
                string pStr_15 = padLeft(commatize(i_12), 19);
                Console.WriteLine(_fmtTop(((("n = " + nStr_14) + "  ") + pStr_15)));
                i_12 = ((i_12 + i_12) - 1);
            }
            i_12 = (i_12 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
