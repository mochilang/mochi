// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double[][] testCases = new double[][]{new double[]{20, 45}, new double[]{(0 - 45), 45}, new double[]{(0 - 85), 90}, new double[]{(0 - 95), 90}, new double[]{(0 - 45), 125}, new double[]{(0 - 45), 145}, new double[]{29.4803, (0 - 88.6381)}, new double[]{(0 - 78.3251), (0 - 159.036)}, new double[]{(0 - 70099.74233810938), 29840.67437876723}, new double[]{(0 - 165313.6666297357), 33693.9894517456}, new double[]{1174.8380510598456, (0 - 154146.66490124757)}, new double[]{60175.77306795546, 42213.07192354373}};
    static object angleDiff(object b1, object b2) {
        var diff = (b2 - b1);
        return (((((diff % 360) + 360) + 180) % 360) - 180);
    }

    static void Main() {
        foreach (var tc_0 in testCases) {
            Console.WriteLine(_fmtTop(angleDiff(tc_0[0], tc_0[1])));
        }
    }
}
